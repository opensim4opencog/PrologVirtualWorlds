// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// File:	d2d.idl : IDL source for d2d.dll
// Author:	mikemarr

// This file will be processed by the MIDL tool to
// produce the type library (d2d.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IDirect2DRM, IDirect2DRMObject, IDirect2DRMArray, IDirect2DRMDevice, IDirect2DRMViewport,
// IDirect2DRMVisual, IDirect2DRMFrame, IDirect2DRMImage and IDirect2DRMPick. All these
// interfaces are analagous to their D3DRM counterparts but for 2D operations. Refer to 
// the Direct3D Retained Mode help for an overview.
//	
// IDirect2DRMHotSpot and IDirect2DRMAnimation are not implemented.
///////////////////////////////////////////////////////////////////////////////////////////////

cpp_quote("#include <d3drm.h>")
cpp_quote("#include <ocidl.h>")

cpp_quote("#ifndef __D3DRM_H__")
	typedef int *LPDIRECT3DRM;
	typedef int *LPDIRECT3DRMTEXTURE;
	typedef int *LPDIRECT3DRMMESHBUILDER;
cpp_quote("#endif")

//cpp_quote("#include <ddraw.h>")
cpp_quote("#ifndef __DDRAW_INCLUDED__")
	typedef int *LPDIRECTDRAW;
	typedef int *LPDIRECTDRAWSURFACE;
	typedef int *LPDIRECTDRAWPALETTE;
	typedef int *LPDDPIXELFORMAT;
cpp_quote("#endif")

/*
cpp_quote("#include <D2DPoint.h>")
cpp_quote("#include <D2DVec.h>")
cpp_quote("#include <D2DRect.h>")
cpp_quote("#ifndef _D2DPoint_h")
	typedef int *LPD2DPOINT;
	typedef int *LPD2DVECTOR;
	typedef int *LPD2DCOVECTOR;
	typedef int *LPD2DRECT;
cpp_quote("#endif")
*/

typedef struct D2DPoint {
	float x, y;
} D2DPoint, *LPD2DPOINT;


typedef struct D2DVector {
	float x, y;
} D2DVector, *LPD2DVECTOR;

typedef struct D2DCovector {
	float x, y;
} D2DCovector, *LPD2DCOVECTOR;

typedef struct D2DRect {
	float left, top, right, bottom;
} D2DRect, *LPD2DRECT;

typedef struct D2DRMPickDesc {
	D2DVector vPos;
} D2DRMPickDesc, *LPD2DRMPICKDESC;

typedef enum D2DRMObjectType {
	d2dotDevice = 0,
	d2dotViewport,
	d2dotFrame,
	d2dotVisual,
	d2dotPick
} D2DRMObjectType;

typedef IDirect2DRM *				LPDIRECT2DRM;
typedef IDirect2DRMObject *			LPDIRECT2DRMOBJECT;
typedef IDirect2DRMArray *			LPDIRECT2DRMARRAY;
typedef IDirect2DRMDevice *			LPDIRECT2DRMDEVICE;
typedef IDirect2DRMViewport *		LPDIRECT2DRMVIEWPORT;
typedef IDirect2DRMVisual *			LPDIRECT2DRMVISUAL;
typedef IDirect2DRMFrame *			LPDIRECT2DRMFRAME;
typedef IDirect2DRMImage *			LPDIRECT2DRMIMAGE;
typedef IDirect2DRMPick *			LPDIRECT2DRMPICK;

typedef void (*D2DRMOBJECTCALLBACK)(LPDIRECT2DRMOBJECT pd2do, void *pvArg);

cpp_quote("#define D2DRMERR_TOOMANYTILES	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x2001)")

cpp_quote("#define flagBLT_IGNORETRANSPARENCY 0x10")
cpp_quote("#define flagBLT_USEDYNAMICMAPPING 0x20")
cpp_quote("#define flagCREATE_TILED 0x100")
cpp_quote("#define flagCREATE_IGNOREANIMATION 0x200")


cpp_quote("#define flagTEXTURE_DONOTHING -1")
cpp_quote("#define flagTEXTURE_STRETCHNEAREST 0")
cpp_quote("#define flagTEXTURE_STRETCHNEXT 1")
cpp_quote("#define flagTEXTURE_BLTNEAREST 2")
cpp_quote("#define flagTEXTURE_BLTNEXT 3")
cpp_quote("#define flagTEXTURE_CENTERBLTNEXT 4")





///////////////////////////////////////////////////////////////////////////////
// IDirect2DRM
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA40-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRM Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRM : IDispatch
	{
		import "oaidl.idl";
		import "ocidl.idl";

		[helpstring("Initialize the D2DRM object with the DirectDraw object")] HRESULT
			Init(
				[in] LPDIRECTDRAW pDD);

		[helpstring("Create a retained mode device from a DirectDrawSurface")] HRESULT
			CreateDeviceFromSurface(
				[in] LPGUID pGUID,
				[in] LPDIRECTDRAWSURFACE pDDSBackbuffer,
				[out, retval] LPDIRECT2DRMDEVICE *ppDevice);

		[helpstring("Create a viewport on a device")] HRESULT
			CreateViewport(
				[in] LPDIRECT2DRMDEVICE pDevice,
				[in] LPDIRECT2DRMFRAME pCamera,
				[in] LPRECT prDimensions,
//				[in] DWORD dwXPos,
//				[in] DWORD dwYPos, 
//				[in] DWORD dwWidth,
//				[in] DWORD dwHeight,
				[out, retval] LPDIRECT2DRMVIEWPORT *ppViewport);

		[helpstring("Create a D2DRMImage from a DirectDraw surface")] HRESULT
			CreateImageFromSurface(
				[in] LPDIRECTDRAWSURFACE pdds,
				[in] BSTR bstrName,
				[out, retval] LPDIRECT2DRMIMAGE *ppImage);

		[helpstring("Create a D2DRMImage from file (like GIF, BMP, etc.)")] HRESULT
			CreateImageFromImageFile(
				[in] BSTR bstrFilename,
				[in] DWORD dwFlags,
				[out, retval] LPDIRECT2DRMIMAGE *ppImage);

		[helpstring("Create a D2DRMImage from file (like GIF, BMP, etc.) using the default PIXELFORMAT")] HRESULT
			CreateImageFromImageFileExt(
				[in] BSTR bstrFilename,
				[in] DWORD dwFlags,
				[out, retval] LPDIRECT2DRMIMAGE *ppImage);

		[helpstring("Get an image from the cache with the given name")] HRESULT
			GetNamedImage(
				[in] BSTR bstrFilename,
				[out, retval] LPDIRECT2DRMIMAGE *ppImage);

		[helpstring("Invalidate a cached image with a given name")] HRESULT
			ReleaseImage(
				[in] BSTR bstrFilename);

		[helpstring("Create a D2DRMImage from a string of text")] HRESULT
			CreateImageFromText(
				[in] BSTR bstrText,
				[in] DWORD nPointHeight,
				[in] BOOL bShadowed,
				[out, retval] LPDIRECT2DRMIMAGE *ppImage);

		[helpstring("Create a D2DRMImage from a string of text with the specified font")] HRESULT
			CreateImageFromTextExt(
				[in] BSTR bstrText,
				[in] IFont *pFont,
				[in] OLE_COLOR ocFontColor,
				[in] BOOL bShadowed,
				[in] OLE_COLOR ocShadowColor,
				[out, retval] LPDIRECT2DRMIMAGE *ppImage);
				
		[helpstring("Create a specifically sized D2DRMImage from a string of text")] HRESULT
			CreateImageFromWrappedTextExt(
				[in] BSTR bstrText,
				[in] IFont* pFont,
				[in] BOOL bShadowed,
				[in] DWORD width, [in] DWORD height, [in] DWORD nPoint,
				[out, retval] LPDIRECT2DRMIMAGE *ppImage);


		[helpstring("Create a new frame")] HRESULT
			CreateFrame(
				[in] LPDIRECT2DRMFRAME pParentFrame,
				[out, retval] LPDIRECT2DRMFRAME *ppFrame);

		[helpstring("Make the current video mode based on the given surface")] HRESULT
			SetVideoMode(
				[in] LPDDPIXELFORMAT pddpf,
				[in] LPDIRECTDRAWPALETTE pddp);

		[helpstring("Advance D2D to the next frame")] HRESULT
			Tick([in] DWORD nElapsedTime);

		[helpstring("Set the size of the image cache")] HRESULT
			SetImageCacheHardLimit([in] DWORD nSizeInBytes );

		[helpstring("Adds a texture to a list to be released on ReleaseTextures.")] HRESULT
			AddTextureForRelease([in] LPDIRECT3DRMTEXTURE pTexture);

		[helpstring("Release all textures in the texture list.")] HRESULT
			ReleaseTextures();
	};


///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMObject
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA44-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMObject Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMObject : IDispatch
	{
		import "oaidl.idl";

		[propget, helpstring("Gets the 32 bits of application specific data in the object")] HRESULT
			AppData([out, retval] DWORD *pdwData);

		[propput, helpstring("Sets the 32 bits of application specific data in the object")] HRESULT
			AppData([in] DWORD dwData);

		[helpstring("Set the Destroy callback for this object")] HRESULT
			SetDestroyCallback([in] int *pCallback, [in] int *pvArg);

		[helpstring("Get the Destroy callback for this object")] HRESULT
			GetDestroyCallback([out] int **ppCallback, [out] int **ppvArg);
	};

///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMArray
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA48-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMArray Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMArray : IDirect2DRMObject
	{
		import "oaidl.idl";

		[propget, helpstring("Retrieve the number of elements in the array")] HRESULT
			Size([out, retval] DWORD *pnSize);

		[helpstring("Retrieve the element with given index")] HRESULT
			GetElement([in] DWORD i, [out] DWORD *pnType, [out] LPDIRECT2DRMOBJECT *ppD2DRMObject);

		[helpstring("Retrieve the element assuming it is a device")] HRESULT
			GetDevice([in] DWORD nIndex, [out] LPDIRECT2DRMDEVICE *ppD2DRMDevice);
		[helpstring("Retrieve the element assuming it is a viewport")] HRESULT
			GetViewport([in] DWORD nIndex, [out] LPDIRECT2DRMVIEWPORT *ppD2DRMViewport);
		[helpstring("Retrieve the element assuming it is a visual")] HRESULT
			GetVisual([in] DWORD nIndex, [out] LPDIRECT2DRMVISUAL *ppD2DRMVisual);
		[helpstring("Retrieve the element assuming it is a frame")] HRESULT
			GetFrame([in] DWORD nIndex, [out] LPDIRECT2DRMFRAME *ppD2DRMFrame);
		[helpstring("Retrieve the element assuming it is a pick")] HRESULT
			GetPick([in] DWORD nIndex, [out] LPDIRECT2DRMPICK *ppD2DRMPick);
	};


///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMDevice
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA4C-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMDevice Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMDevice : IDirect2DRMObject
	{
		import "oaidl.idl";

		// initialization
		[helpstring("Init From DirectDrawSurface")] HRESULT
			InitFromSurface([in] LPDIRECTDRAWSURFACE pdds);

		// buffer counts
		[propget, helpstring("Get buffer count")] HRESULT
			BufferCount([out, retval] DWORD *pnCount);
		[propput, helpstring("Put buffer count")] HRESULT
			BufferCount([in] DWORD nCount);

		// Notifications 
		[helpstring("Update")] HRESULT 
			Update();
		[helpstring("Add Update Callback")] HRESULT 
			AddUpdateCallback();
		[helpstring("Delete Update Callback")] HRESULT 
			DeleteUpdateCallback();

		// Rendering Quality 
		[propget, helpstring("Get sampling quality information")] HRESULT
			Sampling([out, retval] WORD *pwSampling);
		[propput, helpstring("Put sampling quality information")] HRESULT
			Sampling([in] WORD wSampling);

		[propget, helpstring("Get dithering quality information")] HRESULT
			Dithering([out, retval] WORD *pwDither);
		[propput, helpstring("Put dithering quality information")] HRESULT
			Dithering([in] WORD wDither);
		
		// Miscelaneous Access
		[propget, helpstring("Get Color Model")] HRESULT
			ColorModel([out, retval] WORD *pwColorModel);
		[propget, helpstring("Get all the viewports defined on the device")] HRESULT
			Viewports([out, retval] LPDIRECT2DRMARRAY *ppViewports);
		[helpstring("Get the i'th viewport")] HRESULT
			GetViewport([in] DWORD iViewport, [out] LPDIRECT2DRMVIEWPORT *ppViewport);

		[propget, helpstring("Get Width")] HRESULT
			Width([out, retval] DWORD *pnWidth);
		[propget, helpstring("Get Height")] HRESULT
			Height([out, retval] DWORD *pnHeight);
	};

///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMViewport
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA54-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMViewport Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMViewport : IDirect2DRMObject
	{
		import "oaidl.idl";
		[helpstring("Initialize the viewport with a camera and pixel dimensions")] HRESULT
			Init(
				[in] LPDIRECT2DRMDEVICE pDevice,
				[in] LPDIRECT2DRMFRAME pCamera,
				[in] LPRECT prDimensions);
//				[in] DWORD dwXPos,
//				[in] DWORD dwYPos, 
//				[in] DWORD dwWidth,
//				[in] DWORD dwHeight);

		[helpstring("Configure the viewport with new pixel dimensions")] HRESULT
			Configure(
				[in] LPRECT prDimensions);
//				[in] DWORD dwXPos,
//				[in] DWORD dwYPos, 
//				[in] DWORD dwWidth,
//				[in] DWORD dwHeight);



		// background
		[helpstring("Set the background image on the viewport")] HRESULT
			SetBackgroundImage([in] LPDIRECT2DRMIMAGE pd2diBackground);

		[helpstring("Set the background color on the viewport")] HRESULT
			SetBackgroundColor([in] BYTE r, [in] BYTE g, [in] BYTE b);

		// camera
		[propget, helpstring("Get the frame which describes the viewport's camera")] HRESULT
			Camera([out, retval] LPDIRECT2DRMFRAME *ppCamera);
		[propput, helpstring("Put the frame which describes the viewport's camera")] HRESULT
			Camera([in] LPDIRECT2DRMFRAME pCamera);

		[propget, helpstring("Get the device associated with the viewport")] HRESULT
			Device([out, retval] LPDIRECT2DRMDEVICE *ppDevice);

		[propget, helpstring("Get the viewport width, in pixels")] HRESULT
			Width([out, retval] DWORD *pnWidth);
		[propget, helpstring("Get the viewport height, in pixels")] HRESULT
			Height([out, retval] DWORD *pnHeight);
		[propget, helpstring("Get the X offset of the viewport w.r.t. device, in pixels")] HRESULT
			XOffset([out, retval] DWORD *pnXOffset);
		[propget, helpstring("Get the Y offset of the viewport w.r.t. device, in pixels")] HRESULT
			YOffset([out, retval] DWORD *pnYOffset);

		[helpstring("Clear the viewport")] HRESULT
			Clear(DWORD dwFlags);
//		[helpstring("Clear the viewport")] HRESULT
//			Clear([in] LPDIRECT2DRMIMAGE pd2diBackground, 
//					[in] DWORD dwFillColor, 
//					[in] DWORD dwFlags);
//		[helpstring("Clear the viewport to a background color")] HRESULT
//			ClearToColor([in] DWORD dwFillColor);
//		[helpstring("Clear the viewport to a background image")] HRESULT
//			ClearToImage([in] LPDIRECT2DRMIMAGE pd2diBackground, [in] DWORD dwFlags);

		[helpstring("Render the specified scene into the viewport")] HRESULT
			Render([in] LPDIRECT2DRMFRAME pScene, [in] DWORD dwFlags);
		[helpstring("Perform a pick on a frame hierarchy in the context of this viewport")] HRESULT
			Pick([in] LPDIRECT2DRMFRAME pScene, [in] DWORD nX, [in] DWORD nY,
				[out, retval] LPDIRECT2DRMARRAY *ppPicks);
		[helpstring("Move a picked object on this viewport by a vector in viewport coordinates")] HRESULT
			MovePicked([in] float dX, [in] float dY, [in] LPDIRECT2DRMPICK pPick);
	};


///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMVisual
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA5C-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMVisual Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMVisual : IDirect2DRMObject
	{
		import "oaidl.idl";
	};


///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMFrame
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA64-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMFrame Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMFrame : IDirect2DRMVisual
	{
		import "oaidl.idl";

		//
		//
		// CONSTRUCTION
		//
		// hierarchy
		[helpstring("add child")] HRESULT
			AddChild([in] LPDIRECT2DRMFRAME pChildFrame);
		[helpstring("delete child")] HRESULT
			DeleteChild([in] LPDIRECT2DRMFRAME pChildFrame);
		[propget, helpstring("Gets the frame's children frames")] HRESULT
			Children([out, retval] LPDIRECT2DRMARRAY *prgChildren);
		[propget, helpstring("Gets the frame's parent frame")] HRESULT
			Parent([out, retval] LPDIRECT2DRMFRAME *ppParentFrame);
		[helpstring("move the child frame to the front of the frame list")] HRESULT
			MoveChildToFront([in] LPDIRECT2DRMFRAME pChildFrame);
		[helpstring("move the child frame to the back of the frame list")] HRESULT
			MoveChildToBack([in] LPDIRECT2DRMFRAME pChildFrame);
		
		// visuals
		[helpstring("add visual")] HRESULT 
			AddVisual([in] LPDIRECT2DRMVISUAL pVisual);
		[helpstring("delete visual")] HRESULT
			DeleteVisual([in] LPDIRECT2DRMVISUAL pVisual);
		[propget, helpstring("Gets the frame's visuals")] HRESULT
			Visuals([out, retval] LPDIRECT2DRMARRAY *prgVisuals);
		[helpstring("move the visual to the front of the visual list")] HRESULT 
			MoveVisualToFront([in] LPDIRECT2DRMVISUAL pVisual);
		[helpstring("move the visual to the back of the visual list")] HRESULT 
			MoveVisualToBack([in] LPDIRECT2DRMVISUAL pVisual);
		
		// transformations
		[helpstring("add translation")] HRESULT
			AddTranslation([in] float fX, [in] float fY);
		[helpstring("set translation")] HRESULT
			SetTranslation([in] float fX, [in] float fY);
		[helpstring("add scale")] HRESULT
			AddScale([in] float fX, [in] float fY);
		[helpstring("set scale")] HRESULT
			SetScale([in] float fX, [in] float fY);
		[helpstring("add rotation")] HRESULT
			AddRotation([in] float fTheta);
		[propget, helpstring("get the x offset relative to the parent frame")] HRESULT
			XOffset([out, retval] float *pfX);
		[propput, helpstring("put the x offset relative to the parent frame")] HRESULT
			XOffset([in] float fX);
		[propget, helpstring("get the y offset relative to the parent frame")] HRESULT
			YOffset([out, retval] float *pfY);
		[propput, helpstring("put the y offset relative to the parent frame")] HRESULT
			YOffset([in] float fY);

		[hidden, helpstring("execute the frame's inverse transformation on the given vector")] HRESULT
			InverseTransform([in] LPD2DVECTOR pvSrc, [out] LPD2DVECTOR pvDst);
		[hidden, helpstring("execute the frame's transformation on the given vector")] HRESULT
			Transform([in] LPD2DVECTOR pvSrc, [out] LPD2DVECTOR pvDst);
		[hidden, helpstring("execute the frame's transformation on the given point")] HRESULT
			TransformPt([in] LPD2DPOINT ppt2Src, [out] LPD2DPOINT ppt2Dst);
			

		[hidden, helpstring("render a frame hierarchy directly to a surface")] HRESULT
			RenderToSurface([in] LPDIRECTDRAWSURFACE pdds, 
							[in] LPD2DRECT prDst, 
							[in] DWORD dwFlags);

		//
		// DATA ACCESS
		//
		// hierarchy
		[helpstring("get the root frame that contains this frame node")] HRESULT
			GetScene([out, retval] LPDIRECT2DRMFRAME *ppScene);
		// transformations
		[hidden, helpstring("get the position of this frame node relative to reference frame")] HRESULT
			GetPosition([in] LPDIRECT2DRMFRAME pRefFrame, [out] float *pfX, [out] float *pfY);
	};


///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMImage
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA6C-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMImage Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMImage : IDirect2DRMVisual
	{
		import "oaidl.idl";

//		[helpstring("Init From DirectDrawSurface")] HRESULT 
//			InitFromSurface([in] LPDIRECTDRAWSURFACE pdds);

//      i moved this into the private interface
//		[helpstring("Init from standard image file")] HRESULT 
//			InitFromImageFile([in] LPDIRECTDRAW pDD, 
//				[in] LPDIRECTDRAWSURFACE pddsTarget, 
//				[in] const BSTR bstrFilename);

		[helpstring("Blt a piece of the image to a DDS")] HRESULT
			BltToSurface([in] LPD2DRECT pSrcRect, 
				[in] LPDIRECTDRAWSURFACE pddsDst, 
				[in] LPD2DRECT pDstRect,
				[in] DWORD dwFlags);

		[helpstring("Generate a D3D Texture from the D2DImage")] HRESULT
			GetD3DTexture([in] LPDIRECT3DRM pD3DRM, [out, retval] LPDIRECT3DRMTEXTURE *ppTexture);

		[helpstring("Create a surface and D3D texture that fits on this surface")] HRESULT
			ExportD3DTexture([in] LPDIRECT3DRM pD3DRM, 
				[out] LPDIRECTDRAWSURFACE *ppddsTexture, 
				[out] LPDIRECT3DRMTEXTURE *ppTexture);

		[helpstring("Create a surface and D3D texture that fits on this surface")] HRESULT
			ExportD3DTextureEx([in] LPDIRECT3DRM pD3DRM, 
				[out] LPDIRECTDRAWSURFACE *ppddsTexture, long fMode,
				[out] LPDIRECT3DRMTEXTURE *ppTexture);

		[helpstring("Create a surface that fits the image exactly")] HRESULT
			CreateFittedSurface([out] LPDIRECTDRAWSURFACE *ppdds);

		[propget, helpstring("get the number of colors in this image's palette")] HRESULT
			NColors([out, retval] DWORD *pnColors);

		[propget, helpstring("get the number of frames in this image")] HRESULT
			NFrames([out, retval] DWORD *pnFrames);

		[helpstring("get the delay for a particular frame")] HRESULT
			GetFrameDelay([in] DWORD nIndex, [out, retval] DWORD *pnDelay);

		[propput, helpstring("Put which image in the flipbook is visible")] HRESULT
			VisibleImage([in] DWORD nIndex);
		[propget, helpstring("Get which image in the flipbook is visible")] HRESULT
			VisibleImage([out, retval] DWORD *pnIndex);

		[propput, helpstring("set if the image is tiled (by default, it is stretched")] HRESULT
			Tiled([in] BOOL bTiled);
		[propget, helpstring("get if the image is tiled")] HRESULT
			Tiled([out, retval] BOOL *pbTiled);
		[propget, helpstring("get if the image has transparency")] HRESULT
			Transparent([out, retval] BOOL *pbTransparent);
		[propget, helpstring("get if the image is palettized")] HRESULT
			Palettized([out, retval] BOOL *pb);
		[propput, helpstring("set if the image is animated")] HRESULT
			Animated([in] BOOL bAnimated);
		[propget, helpstring("get if the image is animated")] HRESULT
			Animated([out, retval] BOOL *pbAnimated);

		[propget, helpstring("get the image width")] HRESULT
			Width([out, retval] DWORD *pnWidth);
		[propget, helpstring("get the image height")] HRESULT
			Height([out, retval] DWORD *pnHeight);
		[propget, helpstring("get the image depth")] HRESULT
			Depth([out, retval] DWORD *pnDepth);

		[helpstring("set the number of pixels to offset the image when in tiled mode")] HRESULT
			SetTileOffset([in] float x, [in] float y);
		[helpstring("add to the tile offset")] HRESULT
			AddTileOffset([in] float x, [in] float y);
		[helpstring("set the scale size of the image when in tiled mode")] HRESULT
			SetTileScale([in] float x, [in] float y);
		[helpstring("add to the tile scale")] HRESULT
			AddTileScale([in] float x, [in] float y);
	};


///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMHotSpot
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA70-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMHotSpot Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMHotSpot : IDirect2DRMVisual
	{
		import "oaidl.idl";
	};



///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMPick
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA74-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMPick Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMPick : IDirect2DRMObject
	{
		import "oaidl.idl";

		[propget, helpstring("Get the visual that got picked")] HRESULT
			Visual([out,retval] LPDIRECT2DRMVISUAL *ppVisual);

		[propget, helpstring("Get the ancestory of the visual that got picked")] HRESULT
			Ancestory([out,retval] LPDIRECT2DRMARRAY *prgFrames);

		[propget, helpstring("Get the parent frame of the visual that got picked")] HRESULT
			ControlFrame([out,retval] LPDIRECT2DRMFRAME *ppFrame);

		[propget, helpstring("Get the x postion of the pick in local coordinates")] HRESULT
			X([out,retval] float *pfX);
		[propget, helpstring("Get the y postion of the pick in local coordinates")] HRESULT
			Y([out,retval] float *pfY);

		[helpstring("move the visual associated with the pick to the front of the image hierarchy")] HRESULT
			MoveToFront();

		[helpstring("move the visual associated with the pick")] HRESULT
			MoveVisual(LPD2DVECTOR pvWorldDelta);
	};



///////////////////////////////////////////////////////////////////////////////
// IDirect2DRMAnimation
///////////////////////////////////////////////////////////////////////////////
	[
		object,
		local,
		uuid(8D32CA78-3CA9-11d0-6D69-6B656D617272),
		dual,
		helpstring("IDirect2DRMAnimation Interface"),
		pointer_default(unique)
	]
	interface IDirect2DRMAnimation : IDirect2DRMObject
	{
		import "oaidl.idl";
	};



///////////////////////////////////////////////////////////////////////////////
// D2DLib
///////////////////////////////////////////////////////////////////////////////
#ifdef D2DLIB
[
	uuid(8D32CA7C-3CA9-11d0-6D69-6B656D617272),
	version(1.0),
	helpstring("d2d 1.0 Type Library")
]
library D2DLib
{
	importlib("stdole32.tlb");

	[
		uuid(8D32CA80-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRM Class")
	]
	coclass CDirect2DRM
	{
		[default] interface IDirect2DRM;
	};

/*	[
		uuid(8D32CA84-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMObject Class")
	]
	coclass CDirect2DRMObject
	{
		[default] interface IDirect2DRMObject;
	};
*/

	[
		uuid(8D32CA88-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMArray Class")
	]
	coclass CDirect2DRMArray
	{
		[default] interface IDirect2DRMArray;
	};

	[
		uuid(8D32CA8C-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMDevice Class")
	]
	coclass CDirect2DRMDevice
	{
		[default] interface IDirect2DRMDevice;
	};

/*	[
		uuid(8D32CA90-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMDeviceArray Class")
	]
	coclass CDirect2DRMDeviceArray
	{
		[default] interface IDirect2DRMDeviceArray;
	};
*/
	[
		uuid(8D32CA94-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMViewport Class")
	]
	coclass CDirect2DRMViewport
	{
		[default] interface IDirect2DRMViewport;
	};

/*	[
		uuid(8D32CA98-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMViewportArray Class")
	]
	coclass CDirect2DRMViewportArray
	{
		[default] interface IDirect2DRMViewportArray;
	};
*/
/*	[
		uuid(8D32CA9C-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMVisual Class")
	]
	coclass CDirect2DRMVisual
	{
		[default] interface IDirect2DRMVisual;
	};
*/
/*	[
		uuid(8D32CAA0-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMVisualArray Class")
	]
	coclass CDirect2DRMVisualArray
	{
		[default] interface IDirect2DRMVisualArray;
	};
*/
	[
		uuid(8D32CAA4-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMFrame Class")
	]
	coclass CDirect2DRMFrame
	{
		[default] interface IDirect2DRMFrame;
	};

/*	[
		uuid(8D32CAA8-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMFrameArray Class")
	]
	coclass CDirect2DRMFrameArray
	{
		[default] interface IDirect2DRMFrameArray;
	};
*/
	[
		uuid(8D32CAAC-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMImage Class")
	]
	coclass CDirect2DRMImage
	{
		[default] interface IDirect2DRMImage;
	};

	[
		uuid(8D32CAB0-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMHotSpot Class")
	]
	coclass CDirect2DRMHotSpot
	{
		[default] interface IDirect2DRMHotSpot;
	};


	[
		uuid(8D32CAB4-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMPick Class")
	]
	coclass CDirect2DRMPick
	{
		[default] interface IDirect2DRMPick;
	};

	[
		uuid(8D32CAB8-3CA9-11d0-6D69-6B656D617272),
		helpstring("Direct2DRMAnimation Class")
	]
	coclass CDirect2DRMAnimation
	{
		[default] interface IDirect2DRMAnimation;
	};
};
#endif
