// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// VWFrame.idl : IDL source for VWFrame.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (VWFrame.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWFrame : A Frame defines an objects position, orientation, rotation and velocity in a 3D
// scene relative to a root frame (the scene frame) and other frames within the scene. The
// frames in a scene are arranged in a hierarchical tree structure. This interface allows
// the tree structure to be modified (by adding and removing children from parent frames)
// and the position, orientation, rotation and velocity of the frame to be set and retrieved.
// A frame is visualized by a list of visuals (visual objects) and a list of lights. 
// A visual can be a mesh, a visual object that is made up of a set of polygonal faces.
// Textures (2D images) can be applied to faces of these meshes. This interface also allows
// the various attributes of these visuals and textures to be set and retrieved.
// A full description of all these concepts can be found in the "3D Graphics in Virtual Worlds"
// white paper.
// It should be noted that VWFrame's actually wrap the functionality of many of Direct3D 
// Retained Mode's interfaces. Each VWFrame corresponds to a Direct3DRMFrame.
///////////////////////////////////////////////////////////////////////////////////////////////

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  For VWFrame, we start our codes at 0xe80.

cpp_quote("#define VWFRAME_E_MESHHASNOFACES				MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0e80)")

	import "oaidl.idl";
	import "cellprop.idl";

	interface IVWFrame;
	interface IVWGeometry;

	import "vwgeom.idl";
	import "vwgcache.idl";

// REVIEW: we don't want to import the idl because that causes this
//  IDL to be rebuilt
//	import "d2d.idl";
cpp_quote("#ifndef __DDRAW_INCLUDED__")
	typedef int *LPDIRECTDRAW;
	typedef int *LPDIRECTDRAWSURFACE;
	typedef int* LPDIRECTDRAWCLIPPER;
cpp_quote("#endif")
				
cpp_quote("#ifndef __d2d_h__")
	typedef IDispatch * LPDIRECT2DRM;
	typedef IDispatch * LPDIRECT2DRMFRAME;
	typedef IDispatch * LPDIRECT2DRMIMAGE;
cpp_quote("#endif")

// Hacks to allow use of D3D types.
// cpp_quote("#include <d3drm.h>")
cpp_quote("#ifndef __D3DRM_H__")
	typedef int* LPDIRECT3DRM;
	typedef int* LPDIRECT3DRMFRAME;
	typedef int* LPDIRECT3DRMANIMATION2;
	typedef int* LPDIRECT3DRMANIMATIONSET2;
	typedef int* LPDIRECT3DRMVIEWPORT;
	typedef int* LPDIRECT3DRMUSERVISUAL;

cpp_quote("#endif")

cpp_quote("#ifndef __D3DRM_H__")
	typedef int D3DRMCOMBINETYPE;
cpp_quote("#endif")

cpp_quote("#define VWFRAME_ALLFRAME -1")
cpp_quote("#define VWFRAME_ALLHIERARCHY -2")
cpp_quote("#define AXIS_NONE 0")
cpp_quote("#define AXIS_X 1")
cpp_quote("#define AXIS_Y 2")
cpp_quote("#define AXIS_Z 4")
cpp_quote("#define AXIS_ALL 7")

cpp_quote("#define BOLD 1")
cpp_quote("#define ITALIC 2")
cpp_quote("#define UNDERLINE 4")
cpp_quote("#define STRIKETHROUGH 8")
cpp_quote("#define LABEL_CENTER 0")
cpp_quote("#define LABEL_ABOVE 1")
cpp_quote("#define LABEL_BELOW 2")
cpp_quote("#define LABEL_RIGHT 4")
cpp_quote("#define LABEL_LEFT 8")

cpp_quote("#define LEAVEMESHQUALITY \"vwSelectionBox\"")

	[
		object,
		uuid(FEADAC62-0B23-11D0-89A9-00A0C9054129),
		dual,
		local,
		helpstring("IVWFrame Interface"),
		pointer_default(unique)
	]
	interface IVWFrame : IVWTransform
	{
		[helpstring("Get a VWFrame that corresponds to the specified name, searching down from the current frame.")]
		HRESULT GetFrameByName([in] BSTR bstrName, [out, retval] IVWFrame **ppvwfDst);
		[helpstring("Sets the name of the VWFrame.")]
		HRESULT SetName([in] BSTR bstrName);
		[helpstring("Get the name of the VWFrame.")]
		HRESULT GetName([out, retval] BSTR* bstrName);

// functions for hierarchy (child/parent)
		[helpstring("Add child to frame")]
		HRESULT AddChild([in] IVWFrame *pvwfChild);
		[helpstring("Delete child from frame")]
		HRESULT DeleteChild([in] IVWFrame *pvwfChild);
		[helpstring("Is this frame a child of the specified frame?")]
		HRESULT IsChildOf([in] IVWFrame *pvwf, [out, retval] VARIANT_BOOL *pbIsChild);
		[helpstring("Get the parent of the frame.")]
		HRESULT GetParent([out, retval] IVWFrame **ppvwfParent);
		[helpstring("Get the children of the frame.")]
		HRESULT GetChildren([out, retval] IPropertyList **ppChildren);
		[restricted, helpstring("Get the children of the frame, don't create new VWFrames.")]
		HRESULT GetVWFChildren([out, retval] IPropertyList **ppChildren);

		[helpstring("Get the scene frame for this frame.")]
		HRESULT GetScene([out, retval] IVWFrame **ppvwfScene);

		[helpstring("Copies (clones) the frame.")]
		HRESULT Copy([out, retval] IVWFrame **ppvwfDst);

		[helpstring("Transforms a vector from frame to world coords.")]
		HRESULT Transform(long nRotationAxis, float *pfDstX, float *pfDstY, float *pfDstZ, float fSrcX, float fSrcY, float fSrcZ);
		[helpstring("Transforms a vector from world to frame coords.")]
		HRESULT InverseTransform(long nRotationAxis, float *pfDstX, float *pfDstY, float *pfDstZ, float fSrcX, float fSrcY, float fSrcZ);

// functions for frame transformation
		[helpstring("Set the position of the frame relative to the reference position.")]
		HRESULT SetPositionEx([in] IVWFrame *pvwfRef, [in] float fPosX, [in] float fPosY, [in] float fPosZ);
		[helpstring("Set the position of the frame relative to the reference position.")]
		HRESULT SetPosition([in] IVWFrame *pvwfRef, [in] float fPosX, [in] float fPosY, [in] float fPosZ);
		[restricted, helpstring("Get the position of the frame relative to the reference position.")]
		HRESULT GetPositionEx([in] IVWFrame *pvwfRef, [out] float *pfPosX, [out] float *pfPosY, [out] float *pfPosZ);
		[helpstring("Get the position of the frame relative to the reference position.")]
		HRESULT GetPosition([in] IVWFrame *pvwfRef, [out] VARIANT *pfPosX, [out] VARIANT *pfPosY, [out] VARIANT *pfPosZ);
		[helpstring("Set the orientation of the frame relative to the reference position.")]
		HRESULT SetOrientationEx([in] IVWFrame *pvwfRef, [in] float fDirX, [in] float fDirY, [in] float fDirZ, [in] float fUpX, [in] float fUpY, [in] float fUpZ);
		[helpstring("Set the orientation of the frame relative to the reference position.")]
		HRESULT SetOrientation([in] IVWFrame *pvwfRef, [in] float fDirX, [in] float fDirY, [in] float fDirZ, [in] float fUpX, [in] float fUpY, [in] float fUpZ);	
		[restricted, helpstring("Get the orientation of the frame relative to the reference position.")]
		HRESULT GetOrientationEx([in] IVWFrame *pvwfRef, [out] float *pfDirX, [out] float *pfDirY, [out] float *pfDirZ, [out] float *pfUpX, [out] float *pfUpY, [out] float *pfUpZ);
		[helpstring("Get the orientation of the frame relative to the reference position.")]
		HRESULT GetOrientation([in] IVWFrame *pvwfRef, [out] VARIANT *pfDirX, [out] VARIANT *pfDirY, [out] VARIANT *pfDirZ, [out] VARIANT *pfUpX, [out] VARIANT *pfUpY, [out] VARIANT *pfUpZ);
		[helpstring("Set the rotation rate of the frame relative to reference frame.")]
		HRESULT SetRotationRate([in]IVWFrame *pvwfRef, [in] float rvX, [in] float rvY, [in] float rvZ, [in] float rvTheta);
		[helpstring("Get the rotation rate of the frame relative to reference frame.")]
		HRESULT GetRotationRate([in]IVWFrame *pvwfRef, [out] VARIANT* prvX, [out] VARIANT* prvY, [out] VARIANT* prvZ, [out] VARIANT* prvTheta);
		[restricted, helpstring("Get the rotation rate of the frame relative to reference frame.")]
		HRESULT GetRotationRateEx([in]IVWFrame *pvwfRef, [out] float* prvX, [out] float* prvY, [out] float* prvZ, [out] float* prvTheta);
		[helpstring("Set the velocity of the frame relative to reference frame.")]
		HRESULT SetVelocity([in]IVWFrame *pvwfRef, [in] float vX, [in] float vY, [in] float vZ);
		[restricted, helpstring("Get the velocity of the frame relative to reference frame.")]
		HRESULT GetVelocityEx([in]IVWFrame *pvwfRef, [out] float* pvX, [out] float* pvY, [out] float* pvZ);
		[helpstring("Get the velocity of the frame relative to reference frame.")]
		HRESULT GetVelocity([in]IVWFrame *pvwfRef, [out] VARIANT* pvX, [out] VARIANT* pvY, [out] VARIANT* pvZ);
		[helpstring("Set the scale of the frame")]
		HRESULT SetScaleEx([in] IVWFrame *pvwfRef, [in] float fScaleX, [in] float fScaleY, [in] float fScaleZ);
		[helpstring("Set the scale of the frame")]
		HRESULT SetScale([in] IVWFrame *pvwfRef, [in] float fScaleX, [in] float fScaleY, [in] float fScaleZ);
		[restricted, helpstring("Get the scale of the frame")]
		HRESULT GetScaleEx([in] IVWFrame *pvwfRef, [out] float *pfScaleX, [out] float *pfScaleY, [out] float *pfScaleZ);
		[helpstring("Get the scale of the frame")]
		HRESULT GetScale([in] IVWFrame *pvwfRef, [out] VARIANT *pfScaleX, [out] VARIANT *pfScaleY, [out] VARIANT *pfScaleZ);

// functions relating to frame and movement
		[restricted, helpstring("Move the position of the frame relative to the reference position and check for boundary intersections.")]
		HRESULT MoveToPosition([in] IVWFrame *pvwfRef, [in] float fPosX, [in] float fPosY, [in] float fPosZ, [in] VARIANT_BOOL bFireEvents, [out, retval] IPropertyList **ppIDataList);
		[restricted, helpstring("Find boundary intersections between two points.")]
		HRESULT FindIntersections([in] float fStartPosX, [in] float fStartPosY, [in] float fStartPosZ, [in] float fEndPosX, [in] float fEndPosY, [in] float fEndPosZ, [out, retval] IPropertyList **ppIDataList);
		[restricted, helpstring("Get the height of the impassable floor based on the surrounding boundaries.")]
		HRESULT GetFloorHeight([in] IVWFrame *pvwfRef, [out, retval] float *pfFloorHeight);
		[restricted, helpstring("Get the height of the impassable ceiling based on the surrounding boundaries.")]
		HRESULT GetCeilingHeight([in] IVWFrame *pvwfRef, [out, retval] float *pfCeilingHeight);
		[restricted, helpstring("Get the height of the impassable floor at a specified relative position based on the surrounding boundaries.")]
		HRESULT GetFloorHeightAtPosition([in] float fX, [in] float fY, [in] float fZ, [out, retval] float *pfFloorHeight);
		[restricted, helpstring("Get the height of the impassable ceiling at a specified relative position based on the surrounding boundaries.")]
		HRESULT GetCeilingHeightAtPosition([in] float fX, [in] float fY, [in] float fZ,  [out, retval] float *pfCeilingHeight);

		[helpstring("Get the bounding box of the frame and it's children.")]
		HRESULT GetBoundingBox([out] VARIANT* fminX, [out] VARIANT* fminY, [out] VARIANT* fminZ,[out] VARIANT* fmaxX, [out] VARIANT* fmaxY, [out] VARIANT* fmaxZ );

		[helpstring("LookAt a point.")]
		HRESULT LookAt([in] float fPosX, [in] float fPosY, [in] float fPosZ);


//functions for lights
		[helpstring("Add a light to the frame")]
		HRESULT CreateLight([in, optional] VARIANT bstrName);
		[helpstring("Delete a light from a frame")]
		HRESULT DeleteLight([in] long nIndex);
		[helpstring("Edit a light's color (red, green, blue)")]
		HRESULT SetLightColor([in] long nIndex, [in] float fRed, [in] float fGreen, [in] float fBlue);
		[helpstring("Edit a light's attenuation (constant, linear, quadratic)")]
		HRESULT SetLightAttenuation([in] long nIndex, [in] float fConst, [in] float fLinear, [in] float fQuadratic);
		[helpstring("Edit a light's type)")]
		HRESULT SetLightType([in] long nIndex, [in] int iType);
		[helpstring("Edit a light's range)")]
		HRESULT SetLightRange([in] long nIndex, [in] float fRange);
		[helpstring("Edit Spot Light Params)")]
		HRESULT SetSpotLightRadii([in] long nIndex, [in] float fUmbra, [in] float fPenUmbra);
		[helpstring("Set name of a light")]
		HRESULT SetLightName([in] long nIndex, [in] BSTR bstrName);
		[helpstring("Get name of a light")]
		HRESULT GetLightName([in] long nIndex, [out, retval] BSTR* bstrName);
		[helpstring("Get a light's color (red, green, blue)")]
		HRESULT GetLightColor([in] long nIndex, [out] VARIANT* fRed, [out] VARIANT* fGreen, [out] VARIANT* fBlue);
		[helpstring("Get a light's attenuation (constant, linear, quadratic)")]
		HRESULT GetLightAttenuation([in] long nIndex, [out] VARIANT* fConst, [out] VARIANT* fLinear, [out] VARIANT* fQuadratic);
		[helpstring("Get a light's type)")]
		HRESULT GetLightType([in] long nIndex, [out, retval] int* iType);
		[helpstring("Get a light's range)")]
		HRESULT GetLightRange([in] long nIndex, [out, retval] float* fRange);
		[helpstring("Get Spot Light Params)")]
		HRESULT GetSpotLightRadii([in] long nIndex, [out] VARIANT* fUmbra, [out] VARIANT* fPenUmbra);
		[helpstring("Get index of light by name.")]
		HRESULT GetLightIndexByName([in] BSTR bstrName, [out, retval] long* nIndex);
		[helpstring("Get a number of lights in frame.)")]
		HRESULT GetLightCount([out, retval] long* nCount);

// functions for visuals
		[helpstring("Get the number of visuals contained by the frame.")]
		HRESULT GetVisualCount([out, retval] VARIANT *pvarCount);
		[restricted, helpstring("Get the number of visuals contained by the frame.")]
		HRESULT GetVisualCountByIID([in] REFIID ref, [out, retval] VARIANT *pvarCount);
		[helpstring("Get a index of a visual by name.)")]
		HRESULT GetVisualIndexByName([in] BSTR bstrName, [out, retval] long* nIndex);

// functions for dynamic geometry (prograessive mesh access functions)
		[helpstring("Set the level of detail for a progressive mesh in the current frame")]
		HRESULT SetProgressiveMeshDetail([in] long nMeshIndex, [in] float detail);
		[helpstring("Get the level of detail for a progressive mesh in the current frame")]
		HRESULT GetProgressiveMeshDetail([in] long nMeshIndex, [out, retval] float *detail);

		[helpstring("Set the number of faces in the progressive mesh in the current frame")]
		HRESULT SetProgressiveMeshFaceDetail([in] long nMeshIndex, [in] DWORD detail);
		[helpstring("Get the number of faces in the progressive mesh in the current frame")]

		HRESULT GetProgressiveMeshFaceDetail([in] long nMeshIndex, [out, retval] DWORD *detail);
		[helpstring("Set the number of vertices in the progressive mesh in the current frame")]

		HRESULT SetProgressiveMeshVertexDetail([in] long nMeshIndex, [in] DWORD detail);
		[helpstring("Get the number of vertices in the progressive mesh in the current frame")]
		HRESULT GetProgressiveMeshVertexDetail([in] long nMeshIndex, [out, retval] DWORD *detail);
		
		[helpstring("Get the range from min to max of possible face counts")]
		HRESULT GetProgressiveMeshFaceDetailRange([in] long nMeshIndex, [out] VARIANT *min, [out] VARIANT *max);
		[helpstring("Get the range from min to max of possible vertex counts")]
		HRESULT GetProgressiveMeshVertexDetailRange([in] long nMeshIndex, [out] VARIANT *min, [out] VARIANT *max);

		[helpstring("Set the quality of rendering for a mesh in the current frame (recurses if index = VWFRAME_ALLHIERARCHY)")]
		HRESULT SetProgressiveMeshQuality([in] long nMeshIndex, [in] int nQuality);
		[helpstring("Set the quality of rendering for a mesh in the current frame")]
		HRESULT GetProgressiveMeshQuality([in] long nMeshIndex, [out, retval] int *nQuality );

		[helpstring("Get the number of progressive meshes contained by the frame.")]
		HRESULT GetProgressiveMeshCount([out, retval] VARIANT *pvarCount);
		[helpstring("Get the name of a mesh")]
		HRESULT GetProgressiveMeshIndexByName([in] BSTR bstrMeshName, [out, retval] long *plIndex);

// functions for geometry (mesh access functions)
		[helpstring("Get the name of a mesh")]
		HRESULT GetMeshName([in] long nMeshIndex, [out, retval] BSTR *pbstrMeshName);
		[helpstring("Sets the name of a mesh")]
		HRESULT SetMeshName([in] long nMeshIndex, [in] BSTR bstrMeshName);
		[helpstring("Get the name of a mesh")]
		HRESULT GetMeshIndexByName([in] BSTR bstrMeshName, [out, retval] long *plIndex);

		[helpstring("Set the color of the first mesh in up the current frame")]
		HRESULT SetMeshColor([in] long nMeshIndex, [in] float fRed, [in] float fGreen, [in] float fBlue);
		[helpstring("Get the color of the first mesh in up the current frame")]
		HRESULT GetMeshColor([in] long nMeshIndex, [out] VARIANT *fRed, [out] VARIANT *fGreen, [out] VARIANT *fBlue);

		[helpstring("Set the quality of rendering for a mesh in the current frame (recurses if index is VWFRAME_ALLHIERARCHY)")]
		HRESULT SetMeshQuality([in] long nMeshIndex, [in] int nQuality);
		[helpstring("Set the quality of rendering for a mesh in the current frame")]
		HRESULT GetMeshQuality([in] long nMeshIndex, [out, retval] int *nQuality );

		[helpstring("Set the perspective correction for textures on a mesh")]
		HRESULT SetMeshPerspective([in] long nMeshIndex, [in] VARIANT_BOOL vbPersp);
		[helpstring("Get the perspective correction for textures on a mesh")]
		HRESULT GetMeshPerspective([in] long nMeshIndex, [out, retval] VARIANT_BOOL *vbPersp);
		[helpstring("Set the material properties for a mesh")]
		HRESULT SetMeshMaterial([in] long nMeshIndex, [in] float fDiffuse, [in] float fSpecular, [in] float fPower);
		[helpstring("Get the material properties for a mesh")]
		HRESULT GetMeshMaterial([in] long nMeshIndex, [out] VARIANT *fDiffuse, [out] VARIANT *fSpecular, [out] VARIANT *fPower);
		
		[helpstring("Set the vertex position of a vertex for a mesh")]
		HRESULT SetMeshFaceVertex([in] long nMeshIndex, [in] int nFaceIndex, [in] int index, [in] float fX, [in] float fY, [in] float fZ);
		[helpstring("Get the vertex position of a vertex for a mesh")]
		HRESULT GetMeshFaceVertex([in] long nMeshIndex, [in] int nFaceIndex, [in] int index, [out] VARIANT *fX, [out] VARIANT *fY, [out] VARIANT *fZ);

		[helpstring("Add a vertex to the mesh")]
		HRESULT AddMeshFaceVertex([in] long nMeshIndex, [in] int nFaceIndex, [in] float fX, [in] float fY, [in] float fZ);

		[helpstring("Set the vertex color of a vertex for a mesh")]
		HRESULT SetMeshFaceVertexColor([in] long nMeshIndex, [in] int nFaceIndex, [in] int index, [in] float fRed, [in] float fGreen, [in] float fBlue);
		[helpstring("Get the vertex color of a vertex for a mesh")]
		HRESULT GetMeshFaceVertexColor([in] long nMeshIndex, [in] int nFaceIndex, [in] int index, [out] VARIANT *fRed, [out] VARIANT *fGreen, [out] VARIANT *fBlue);

		[helpstring("Set the texture u,v of a vertex for a mesh")]
		HRESULT SetMeshFaceUV([in] long nMeshIndex, [in] int nFaceIndex, [in] int index, [in] float fU, [in] float fV);
		[helpstring("Get the texture u,v of a vertex for a mesh")]
		HRESULT GetMeshFaceUV([in] long nMeshIndex, [in] int nFaceIndex, [in] int index, [out] VARIANT *fU, [out] VARIANT *fV);

		[helpstring("Set the color of a face for a mesh")]
		HRESULT SetMeshFaceColor([in] long nMeshIndex, [in] int index, [in] float fRed, [in] float fGreen, [in] float fBlue);
		[helpstring("Get the color of a face for a mesh")]
		HRESULT GetMeshFaceColor([in] long nMeshIndex, [in] int index, [out] VARIANT *fRed, [out] VARIANT *fGreen, [out] VARIANT *fBlue);

		[helpstring("Get the number of meshes contained by the frame.")]
		HRESULT GetMeshCount([out, retval] VARIANT *pvarCount);

		[helpstring("Wrap the mesh in texture mapping coords")]
		HRESULT WrapMesh([in] long nMeshIndex, [in] int type, [in] float scaleu, [in] float scalev);

		[helpstring("Create an empty mesh in the frame.")]
		HRESULT CreateMesh();
		[helpstring("Create unit mesh)")]
		HRESULT CreateUnitMesh();
		[helpstring("Add a face to a mesh.  varArgs is an array of either floats or IVectors.")]
		HRESULT CreateMeshFace([in] long nMeshIndex, [in] VARIANT varArgs);

		[helpstring("Returns the number of faces in a mesh.")]
		HRESULT GetMeshFaceCount([in] long nMeshIndex, [out, retval] VARIANT* varFaceCount);

		[helpstring("Set the texture for a mesh from a file")]
		HRESULT SetMeshTextureFromURL([in] long nMeshIndex, [in] BSTR bstrTexture);
		[helpstring("Set the texture for a mesh from text string")]
		HRESULT SetMeshTextureFromText([in] long nMeshIndex, [in] BSTR bstrText, [in] VARIANT_BOOL bShadowed, [in] DWORD nWidth, [in] DWORD nHeight, [in] DWORD nPointHeight);
		[helpstring("Get the texture file name for a mesh.")]
		HRESULT GetMeshTextureName([in] long nMeshIndex, [out, retval] BSTR* bstrTexture);
		[helpstring("Get a number of vertices in a mesh.)")]
		HRESULT GetMeshFaceVertexCount([in] long nMeshIndex, [in] long nFaceIndex, [out, retval] long* nCount);

// functions relating to decals
		[helpstring("Add a decal to a frame from a file")]
		HRESULT CreateDecalFromURL([in] BSTR bstrTexture);
		[helpstring("Add a decal to a frame from text")]
		HRESULT CreateDecalFromText([in] BSTR bstrText, [in, optional] VARIANT bstrName);
		[helpstring("Add a decal to a frame from text")]
		HRESULT CreateDecalFromTextExt([in] BSTR bstrText, [in] long lPlacement, [in] BSTR bstrFontName, [in] long lFontSize, [in] long lLabelStyle, [in] IVector *pvFontColor, [in] IVector *pvShadowColor, [in] VARIANT bstrName);
		[helpstring("Set Decal Size")]
		HRESULT SetDecalSize([in] long nMeshIndex, [in] float fHeight, [in] float fWidth, [in] VARIANT_BOOL bScale);
		[helpstring("Set Decal Origin")]
		HRESULT SetDecalOrigin([in] long nMeshIndex, [in] long lx, [in] long ly);
		[helpstring("Set Decal Origin")]
		HRESULT GetDecalSize([in] long nMeshIndex, [out] VARIANT* fHeight, [out] VARIANT* fWidth, [out] VARIANT* bScale);
		[helpstring("Set Decal Origin")]
		HRESULT GetDecalOrigin([in] long nMeshIndex, [out] VARIANT* lx, [out] VARIANT* ly);
		[helpstring("Remove decal by index")]
		HRESULT DeleteDecal([in] long nMeshIndex);
		[helpstring("Get a number of decals in frame.)")]
		HRESULT GetDecalCount([out, retval] long* nCount);
		[helpstring("Get the index of a decal by its name")]
		HRESULT GetDecalIndexByName([in] BSTR bstrDecalName, [out, retval] long *plIndex);

// functions relating to fog
		[helpstring("Set the color of the fog")]
		HRESULT SetSceneFogColor([in] float red,[in] float green,[in] float blue);
		[helpstring("Enable or disable fog")]
		HRESULT SetSceneFogEnable([in] VARIANT_BOOL fogEnable);
		[helpstring("Set fog start and end distances")]
		HRESULT SetSceneFogParams([in] float start,[in] float end);

//shadow function
		[helpstring("Create a shadow")]
		HRESULT CreateShadow([in] int nMeshIndex,[in] IVWFrame *pvwfLightSrc,[in] int nIndex,[in] float ylevel);
		[helpstring("Delete a shadow")]
		HRESULT DeleteShadow([in] int nMeshIndex,[in] IVWFrame *pvwfLightSrc,[in] int nIndex);
		
//multimedia streaming functions
		[helpstring("Display a movie")]
		HRESULT PlayVideo([in] int nMeshIndex,[in] BSTR sfilename);

//transform functions
		[helpstring("Explodes the object")]
		HRESULT Explode(DWORD dwTime);
//Interpolation Function
		[helpstring("Sets internal scale values without applying them")]
		HRESULT SetInternalScale([in] float fScaleX,[in] float fScaleY,[in] float fScaleZ);

//Animation functions
		[helpstring("Starts an animation loaded from an X-file")]
		HRESULT StartAnimation([in] float fTimeScale, [in] float fRangeStart, [in] float fRangeEnd, [in] BSTR bstrAnimationDoneMethod);
		[helpstring("Stops an animation loaded from an X-file")]
		HRESULT StopAnimation();
		[helpstring("Stops an animation loaded from an X-file")]
		HRESULT AnimationSetTime([in] float fTime);

//		[propget, restricted, helpstring("Get/set the animation on a frame.")]
//		HRESULT Animation([out, retval] LPDIRECT3DRMANIMATION2 *ppd3drmanim);
//		[propput, restricted, helpstring("Get/set the animation on a frame.")]
//		HRESULT Animation([in] LPDIRECT3DRMANIMATION2 ppd3drmanim);

		[propget, restricted, helpstring("Get/set the animationset on a frame.")]
		HRESULT AnimationSet([out, retval] LPDIRECT3DRMANIMATIONSET2 *ppd3drmanimset);
		[propput, restricted, helpstring("Get/set the animationset on a frame.")]
		HRESULT AnimationSet([in] LPDIRECT3DRMANIMATIONSET2 ppd3drmanimset);
// general properties
		[propget, restricted, helpstring("Get/set the 3D part of the frame.")]
		HRESULT Frame3D([out, retval] LPDIRECT3DRMFRAME *ppd3drmf);
		[propput, restricted, helpstring("Get/set the 3D part of the frame.")]
		HRESULT Frame3D([in] LPDIRECT3DRMFRAME pd3drmf);
		[propget, restricted, helpstring("Get/set the 2D part of the frame.")]
		HRESULT Frame2D([out, retval] LPDIRECT2DRMFRAME *ppd2drmf);
		[propput, restricted, helpstring("Get/set the 2D part of the frame.")]
		HRESULT Frame2D([in] LPDIRECT2DRMFRAME pd2drmf);

		[propget, helpstring("Get/set the backpointer to the associated Thing")]
		HRESULT Thing([out, retval] IThing **ppThing);
		[propput, restricted, helpstring("Get/set the backpointer to the associated Thing")]
		HRESULT Thing([in] IThing *pThing);

		[propget, restricted, helpstring("Get/set the list of boundaries of the frame.")]
		HRESULT BoundaryList([out, retval] IPropertyList **ppBoundaryList);
		[propput, restricted, helpstring("Get/set the list of boundaries of the frame.")]
		HRESULT BoundaryList([in] IPropertyList *pBoundaryList);

		[restricted, helpstring("User defined string to be associated with the VWFrame.")]
		HRESULT SetAppString([in] BSTR bstr);
		[restricted, helpstring("User defined string associated with the VWFrame.")]
		HRESULT GetAppString([out, retval] BSTR *pbstr);
		[restricted, propput, helpstring("Pointer to the geometry cache. Used internally.")]
		HRESULT GeometryCache([in] IVWGeometryCache *pVWGeometryCache);
		[restricted, propput, helpstring("Pointer to the geometry cache. Used internally.")]
		HRESULT GeometryObject([in] IVWGeometry *pVWGeometry);
		[restricted, propget, helpstring("Pointer to the geometry object this frame represents. Used internally.")]
		HRESULT GeometryObject([out, retval] IVWGeometry **ppVWGeometry);
//		[restricted, propget, helpstring("")]
//		HRESULT RefCount([out, retval] DWORD *pdwRefCount);

	};

#ifdef VWFRAMELIB
[
	uuid(FEADAC60-0B23-11D0-89A9-00A0C9054129),
	version(1.0),
	helpstring("VWFrame 1.0 Type Library")
]
library VWFRAMELib
{
	importlib("stdole32.tlb");

	[
		uuid(FEADAC66-0B23-11D0-89A9-00A0C9054129),
		helpstring("VWFrame Class")
	]
	coclass VWFrame
	{
		[default] interface IVWFrame;
	};
};
#endif

