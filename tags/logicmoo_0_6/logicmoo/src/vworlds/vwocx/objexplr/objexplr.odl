// objexplr.odl : type library source for ActiveX Control project.

// This file will be processed by the Make Type Library (mktyplib) tool to
// produce the type library (objexplr.tlb) that will become a resource in
// objexplr.ocx.

// This file defines the functionality for the following controls and their automation (Dispatch)
// interfaces and events.  These controls are all contained within the Object Explorer ocx:
//
// CPropEdCtrl:		This is the core editor functionality which all of the other
//					controls use as a base class
//
// CTPListCtrl:		This is the Thing PropertyList control. It takes an IThing target
//					and will facilitate the display and editing of the InstanceProperties
//					of the Thing as well as the properties of the Thing's Exemplar (base class).
//
// CTVListCtrl:		This is the Thing VerbList control.  It takes an IThing target
//					and will facilitate the display and editing of InstanceMethods (verbs)
//					of that IThing as well as the Methods of the Thing's Exemplar (base class).
//
// CPropListCtrl:	This is the PropertyList Control. It takes an IPropertyList target
//					and will facilitate the display and editing of the properties in that
//					ordered list. This can be a PropertyList property of an IThing or it
//					can be a standalong PropertyList.
//
// CPropMapCtrl:	This is the PropertyMap Control.  It takes an IPropertyMap target
//					and will facilitate the display and editing of the properties in the map.
//					This target can be a PropertyMap type property on an IThing on it can
//					be a standalone PropertyMap.
//
// CMenuListCtrl:	This is the MenuList Control. It takes an IPropertyList target of type Menu
//					(generally this will be a menu property of an IThing), and will facilitate
//					the display and editing of the MenuItem properties in that menu.
//
// CThingTreeCtrl:	This is the Thing Tree Control.  It take an IThing target (usually an instance
//					of a Room Exemplar) and displays a tree control of the IThings contained
//					within the target thing. It also displays the Modules that are loaded in the 
//					World of which the Thing belongs.
  
#include <olectl.h>
#include <idispids.h>

[ uuid(EF7D655A-0161-11D2-88BE-00C04FC32EF3), version(1.0),
  helpfile("objexplr.hlp"),
  helpstring("Object Explorer ActiveX Control module"),
  control ]
library OBJEXPLRLib
{
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);

	//  Primary dispatch interface for CTPListCtrl

	[ uuid(EF7D655B-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Dispatch interface for Thing Property List Control"), hidden ]
	dispinterface _DTPList
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CTPListCtrl)
			[id(1), helpstring("IPropertyList containing the index of the selected items")]
			IDispatch* SelectionList;
			
			[id(2), helpstring("Target IThing object the control is bound to and whose properties it edits")]
			IDispatch* TargetObjectProperty;
			
			[id(3), helpstring("Toggle control to respond to selection changes Fired from the ControlMgr in FireUIUpdate")]
			boolean RespondToSelectionEvents;
			
			[id(DISPID_FONT), helpstring("stock Font property handling"), bindable]
			IFontDisp* Font;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CTPListCtrl)
			[id(4), helpstring("Sort the list based on the passed in column index")]
			boolean Sort(short column);

			[id(5), helpstring("Set focus to the list control")]
			void DoFocus();
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CTPListCtrl

	[ uuid(EF7D655C-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Event interface for Thing Property List Control") ]
	dispinterface _DTPListEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CTPListCtrl)
			[id(1), helpstring("Event fired when editing a complex property type that requires an external editor..")]
			void EditValue(IDispatch* thing, BSTR property);

			[id(2), helpstring("NewProperty event is fired to allow external editor support for new properties")]
			void NewProperty(IDispatch* thing);

			[id(3), helpstring("Event fired to pass errors or other messages")]
			void UserMessage(BSTR message);

			[id(4), helpstring("Event fired for virtual key press events besides VK_DELETE, VK_RETURN which are trapped")]
			void KeyPressed(long key);

			[id(5), helpstring("Event fired for all virtual key up messages")]
			void VKeyUp(long key);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CTPListCtrl

	[ uuid(EF7D655D-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Thing Property List Control"), control ]
	coclass TPList
	{
		[default] dispinterface _DTPList;
		[default, source] dispinterface _DTPListEvents;
	};


	//  Primary dispatch interface for CPropEd
	
	[ uuid(192FF34E-017B-11D2-88BE-00C04FC32EF3),
	  helpstring("Dispatch interface for Property Editor Control"), hidden ]
	dispinterface _DPropEd
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CPropEdCtrl)
			[id(1), helpstring("VWClient property used to advide on the IVWClientSite ConnectionPt for client event handling through VWView")]
			IDispatch* VWClient;
			
			[id(2), helpstring("Get/Set the IThing whose properties will be edited by the control")]
			IDispatch* TargetObjectProperty;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CPropEdCtrl)
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CPropEdCtrl

	[ uuid(192FF34F-017B-11D2-88BE-00C04FC32EF3),
	  helpstring("Event interface for Property Editor Control") ]
	dispinterface _DPropEdEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CPropEdCtrl)
			//}}AFX_ODL_EVENT
	};

	//  Class information for CPropEdCtrl

	[ uuid(192FF350-017B-11D2-88BE-00C04FC32EF3),
	  helpstring("Property Editor Control"), control ]
	coclass PropEd
	{
		[default] dispinterface _DPropEd;
		[default, source] dispinterface _DPropEdEvents;
	};

	//  Primary dispatch interface for CTVListCtrl
	
	[ uuid(EF7D655F-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Dispatch interface for Thing Verb List control"), hidden ]
	dispinterface _DTVList
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CTVListCtrl)
			[id(1), helpstring("Set the selected items with a IPropertyList containing the method names")]
			IDispatch* SelectionList;
			
			[id(2), helpstring("Target IThing object the control is bound to and whose methods it edits")]
			IDispatch* TargetObjectProperty;
			
			[id(3), helpstring("Toggle control to respond to selection changes Fired from the ControlMgr in FireUIUpdate")]
			boolean RespondToSelectionEvents;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CTVListCtrl)
			[id(4), helpstring("Sort the list control by the indicated column index")]
			void ExternalSort(short column);
			
			[id(5), helpstring("Set focus to the list control")]
			void DoFocus();
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CTVListCtrl

	[ uuid(EF7D6560-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Event interface for Thing Verb List control") ]
	dispinterface _DTVListEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CTVListCtrl)
			[id(1), helpstring("NewMethod event is fired to allow external editor support for addding a method")]
			void NewMethod(IDispatch* thing);
			
			[id(2), helpstring("Event fired for inline methods to launch the inline method editor")]
			void EditValue(IDispatch* thing, BSTR methodname);
			
			[id(3), helpstring("Event fired to pass errors or other messages")]
			void UserMessage(BSTR message);
			
			[id(4), helpstring("Event fired for virtual key press events besides VK_DELETE, VK_RETURN which are handled")]
			void KeyPressed(long key);
			
			[id(5), helpstring("Event fired for all virtual key up messages")]
			void VKeyUp(long key);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CTVListCtrl

	[ uuid(EF7D6561-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Thing Verb List Control"), control ]
	coclass TVList
	{
		[default] dispinterface _DTVList;
		[default, source] dispinterface _DTVListEvents;
	};

	//  Primary dispatch interface for CPropListCtrl

	[ uuid(EF7D6563-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Dispatch interface for PropertyList Control"), hidden ]
	dispinterface _DPropList
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CPropListCtrl)
			[id(1), helpstring("IPropertyList containing the index of the selected items")]
			IDispatch* SelectionList;

			[id(2), helpstring("Target IPropertyList object the control is bound to and whose properties it edits")]
			IDispatch* TargetObjectProperty;
			
			[id(3), helpstring("This is the name that PropertyList being edited")]
			BSTR PropertyName;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CPropListCtrl)
			[id(4), helpstring("Set focus to the list control")]
			void DoFocus();
			
			[id(5), helpstring("Reorder the selected item in the list")]
			void MoveSelectedPropertyUp();
			
			[id(6), helpstring("Reorder the selected item in the list")]
			void MoveSelectedPropertyDown();
			
			[id(7), helpstring("Remove a property from the target propertylist")]
			void RemoveSelectedProperty();
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CPropListCtrl

	[ uuid(EF7D6564-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Event interface for PropertyList Control") ]
	dispinterface _DPropListEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CPropListCtrl)
			[id(1), helpstring("Event fired when editing a complex property type that requires an external editor..")]
			void EditValue(IDispatch* propertyList, long index);
			
			[id(2), helpstring("NewProperty event is fired to launch an external editor for adding properties")]
			void NewProperty(IDispatch* propertyList);
			
			[id(3), helpstring("Event fired to pass errors or other messages")]
			void UserMessage(BSTR message);
			
			[id(4), helpstring("Event fired for virtual key press events besides VK_DELETE, VK_RETURN which are handled")]
			void KeyPressed(long key);
			
			[id(5), helpstring("Event fired for all virtual key up messages")]
			void VKeyUp(long key);
			
			[id(6), helpstring("Event fired when control received FireSelectionEvent with param=false")]
			void NoSelections();
			
			[id(7), helpstring("Event fired when control received FireSelectionEvent with param=true")]
			void ItemSelected();
			//}}AFX_ODL_EVENT
	};

	//  Class information for CPropListCtrl

	[ uuid(EF7D6565-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("PropertyList editor Control"), control ]
	coclass PropList
	{
		[default] dispinterface _DPropList;
		[default, source] dispinterface _DPropListEvents;
	};

	//  Primary dispatch interface for CPropMapCtrl

	[ uuid(EF7D6567-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Dispatch interface for PropertyMap Control"), hidden ]
	dispinterface _DPropMap
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CPropMapCtrl)
			[id(1), helpstring("IPropertyList containing the names of the selected items")]
			IDispatch* SelectionList;
			
			[id(2), helpstring("Target IPropertMap object the control is bound to and whose properties it edits")]
			IDispatch* TargetObjectProperty;
			
			[id(3), helpstring("The name that PropertyList being edited")]
			BSTR PropertyName;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CPropMapCtrl)
			[id(4), helpstring("Sort the list control by the indicated column index")]
			boolean Sort(short column);
			
			[id(5), helpstring("Set focus to the list control")]
			void DoFocus();
			
			[id(6), helpstring("Remove a selected property from the target PropertyMap")]
			void RemoveSelectedProperty();
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CPropMapCtrl

	[ uuid(EF7D6568-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Event interface for PropertyMap Control") ]
	dispinterface _DPropMapEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CPropMapCtrl)
			[id(1), helpstring("Event fired when editing a complex property type that requires an external editor..")]
			void EditValue(IDispatch* propertyMap, BSTR name);
			
			[id(2), helpstring("NewProperty event is fired to launch an external editor for adding properties")]
			void NewProperty(IDispatch* propertyMap);
			
			[id(3), helpstring("Event fired to pass errors or other messages")]
			void UserMessage(BSTR message);
			
			[id(4), helpstring("Event fired for virtual key press events besides VK_DELETE, VK_RETURN which are handled")]
			void KeyPressed(long key);
			
			[id(5), helpstring("Event fired for all virtual key up messages")]
			void VKeyUp(long key);
			
			[id(6), helpstring("Event fired when control received FireSelectionEvent with param=true")]
			void ItemSelected();
			
			[id(7), helpstring("Event fired when control received FireSelectionEvent with param=false")]
			void NoSelections();
			//}}AFX_ODL_EVENT
	};

	//  Class information for CPropMapCtrl

	[ uuid(EF7D6569-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("PropertyMap Control"), control ]
	coclass PropMap
	{
		[default] dispinterface _DPropMap;
		[default, source] dispinterface _DPropMapEvents;
	};

	//  Primary dispatch interface for CMenuListCtrl

	[ uuid(EF7D656B-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Dispatch interface for the MenuList Control"), hidden ]
	dispinterface _DMenuList
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CMenuListCtrl)
			[id(1), helpstring("Target Menu type IPropertyList object the control is bound to and whose menuitems it edits")]
			IDispatch* TargetObjectProperty;
			
			[id(2), helpstring("IPropertyList containing the index of the selected items")]
			IDispatch* SelectionList;
			
			[id(3), helpstring("The name that PropertyList being edited")]
			BSTR PropertyName;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CMenuListCtrl)
			[id(4), helpstring("Reorder the selected item in the list")]
			void MoveSelectedPropertyUp();
			
			[id(5), helpstring("Reorder the selected item in the list")]
			void MoveSelectedPropertyDown();
			
			[id(6), helpstring("Remove a menuitem from the target propertylist (menu) ")]
			void RemoveSelectedProperty();
			
			[id(7), helpstring("Set focus to the list control")]
			void DoFocus();
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CMenuListCtrl

	[ uuid(EF7D656C-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Event interface for the MenuList Control") ]
	dispinterface _DMenuListEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CMenuListCtrl)
			[id(1), helpstring("Not Used. Could be used to fire an event with the menulist and index of menuitem to edit")]
			void EditMenuItem(IDispatch* menuList, long item);
			
			[id(2), helpstring("NewMenu event is fired to launch an external editor for adding menuitems")]
			void NewMenuItem(IDispatch* menuList);
			
			[id(3), helpstring("Event fired to pass errors or other messages")]
			void UserMessage(BSTR message);
			
			[id(4), helpstring("Event fired when control received FireSelectionEvent with param=false")]
			void NoSelections();
			
			[id(5), helpstring("Event fired when control received FireSelectionEvent with param=true")]
			void ItemSelected();
			
			[id(6), helpstring("Event fired for virtual key press events besides VK_DELETE, VK_RETURN which are handled")]
			void KeyPressed(long key);
			
			[id(7), helpstring("Event fired for all virtual key up messages")]
			void VKeyUp(long key);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CMenuListCtrl

	[ uuid(EF7D656D-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("MenuList Control"), control ]
	coclass MenuList
	{
		[default] dispinterface _DMenuList;
		[default, source] dispinterface _DMenuListEvents;
	};

	//  Primary dispatch interface for CThingTreeCtrl

	[ uuid(EF7D656F-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Dispatch interface for the ThingTree Control"), hidden ]
	dispinterface _DThingTree
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CThingTreeCtrl)
			[id(1), helpstring("VWClient property used to advise on the IVWClientSite ConnectionPt for client event handling through VWView")]
			IDispatch* VWClient;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CThingTreeCtrl)
			[id(2), helpstring("Tell ThingTree which IThing to select")]
			void SelectThing(IDispatch* Thing);
			
			[id(3), helpstring("Set focus to the list control")]
			void DoFocus();
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CThingTreeCtrl

	[ uuid(EF7D6570-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("Event interface for the ThingTree Control") ]
	dispinterface _DThingTreeEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CThingTreeCtrl)
			[id(1), helpstring("Event fired to launch an external editor for adding a new Thing to the world")]
			void NewThing();
			
			[id(2), helpstring("Event fired to launch an editor for adding a new IModule to the world")]
			void LoadModule();
			
			[id(3), helpstring("Event fired for virtual key press events besides VK_DELETE, VK_RETURN which are handled")]
			void KeyPressed(long key);
			
			[id(4), helpstring("Event fired for all virtual key up messages")]
			void VKeyUp(long key);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CThingTreeCtrl

	[ uuid(EF7D6571-0161-11D2-88BE-00C04FC32EF3),
	  helpstring("ThingTree Control"), control ]
	coclass ThingTree
	{
		[default] dispinterface _DThingTree;
		[default, source] dispinterface _DThingTreeEvents;
	};


	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}
};
