<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>ActiveX Extensions to SWI Prolog</title>
<LINK REL="stylesheet" TYPE="text/css" HREF="http://msdn.microsoft.com/msdn-online/shared/css/ie4.css" />
<SCRIPT LANGUAGE=vbscript>

</SCRIPT>

</head>

<body>

<h2><b style="mso-bidi-font-weight:normal"><span style="font-size:18.0pt;mso-bidi-font-size:10.0pt">ActiveX
Extensions to SWI Prolog<o:p>
</o:p>
<br>
</span></b></h2>
<p><b><font color="#000080"><a href="/binaries/SwiActX.ZIP">Download Libraries</a></font></b></p>
<h2><b style="mso-bidi-font-weight:normal"><span style="font-size:18.0pt;mso-bidi-font-size:10.0pt"><br>
</span></b>David Hovel<br>
March 17, 2000<br>
Version 0.7</h2>
<h2>1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Introduction</h2>
<h2>1.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SWI Prolog</h2>
<p class="MsoNormal"><b style="mso-bidi-font-weight:normal">SWI Prolog </b>is a
prolog compiler and interpreter suite developed by Jan Wielemaker of the
Department of Social Science Informatics of the University of Amsterdam in the
Netherlands.<span style="mso-spacerun: yes">&nbsp; </span>It is made available
free of charge, in both source and binary distributions, for non-commercial
applications.</p>
<h2>1.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Extensions</h2>
<p class="MsoNormal">SWI Prolog (<b style="mso-bidi-font-weight:normal">SWIP</b>)
is a well-crafted product that supports embedding and programmatic extensions.<span style="mso-spacerun: yes">&nbsp;
</span>In other words, the SWI Prolog engine can be used as a component in a
larger framework of diverse language modules.<span style="mso-spacerun: yes">&nbsp;
</span>In addition, SWIP is easily extended to support additional capabilities
available on Microsoft Windows platforms.</p>
<p class="MsoNormal">This extensibility is greatly enhanced by the fact that
complete Windows-compatible source code is available for SWIP.</p>
<p class="MsoNormal">This document describes two extensions developed by me as
part of our work in the <i><u>Adaptive Systems and Interaction</u></i> group of <b>Microsoft
Research</b>.<span style="mso-spacerun: yes">&nbsp; </span>These extensions to
SWIP are:</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo2;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A companion DLL called <b style="mso-bidi-font-weight:
normal">SWIXDLL</b>,<b style="mso-bidi-font-weight:normal"> </b>which allows
direct access to ActiveX automation objects from SWIP source code.<span style="mso-spacerun: yes">&nbsp;
</span><b style="mso-bidi-font-weight:normal">SWIXDLL</b> allows Prolog to
interact directly with the ActiveX <b style="mso-bidi-font-weight:
normal"><i style="mso-bidi-font-style:normal">IDispatch </i></b>scripting
interface of the newer families of ActiveX objects.</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l1 level1 lfo2;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An additional DLL called <b style="mso-bidi-font-weight:
normal">PROQUERY</b> contains the entire compiled SWIP code base, making it
available as an ActiveX automation object.<span style="mso-spacerun: yes">&nbsp;
</span>This allows Prolog queries, both deterministic and non-deterministic, to
be invoked from Visual Basic, C++, J++, Perl, JavaScript or VBScript.</p>
<h2>1.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Versions and Documentation</h2>
<p class="MsoNormal">All software discussed in this document is based upon the <b style="mso-bidi-font-weight:normal">3.3.2
</b>release of SWI Prolog.<span style="mso-spacerun: yes">&nbsp; </span>The SWIP
documentation notes refer to the <i style="mso-bidi-font-style:normal"><u>SWI
Reference Manual</u></i> (or <b style="mso-bidi-font-weight:normal">SWIPRM</b>).</p>
<h2>1.4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A Note About SWIP “Libraries”</h2>
<p class="MsoNormal">As part of its support for modular programming, SWIP can
dynamically consult (i.e., load) Prolog modules on an as-needed basis.<span style="mso-spacerun: yes">&nbsp;
</span>The extension software described in this document exploits this
capability.<span style="mso-spacerun: yes">&nbsp; </span>See the SWIP <i><u>Reference
Manual </u></i>for more details.</p>
<h2>1.5<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A Note about Databases</h2>
<p class="MsoNormal">A primary goal of this effort was to allow Prolog to access
standard databases directly, including explicit SQL usage and support for
different vendor formats.</p>
<p class="MsoNormal">Microsoft Corporation provides the fundamental component in
its <i><u>ActiveX Data Access Objects</u></i> system, or <b>ADO</b>.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>ADO provides automation-compliant ActiveX interfaces to ODBC technology,
which in turn provides support for a wide variety of database technologies by
many software vendors.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">A demonstration Prolog program and its companion database
are provided as educational materials with the release of this software.<span style="mso-spacerun: yes">&nbsp;
</span>Please note that running the demonstration requires Microsoft Access
2000, since the database itself was generated by that product.</p>
<h1>2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A Brief Introduction to ActiveX</h1>
<h2>2.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>What is ActiveX?</h2>
<p class="MsoNormal"><b>ActiveX </b>is the name given by Microsoft for its
family of component technologies.<span style="mso-spacerun: yes">&nbsp; </span>In
brief, it is a family of software interfaces that allows components, both
graphical and non-graphical, to be registered on a user’s computer.<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>Such components can then be located and dynamically
activated on program demand.</p>
<h2>2.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Instances and Interfaces</h2>
<p class="MsoNormal">Each ActiveX load operation (known as <b><i>CreateInstance</i></b>)
creates an instance of an ActiveX object that supports one or more <b><i>interfaces</i>.</b><span style="mso-spacerun: yes">&nbsp;
</span>An interface is a programmatic contract between an object and its
clients.</p>
<h2>2.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Types of Interfaces</h2>
<p class="MsoNormal">An ActiveX interface can be constructed to provide
virtually and type of data in almost any manner.<span style="mso-spacerun: yes">&nbsp;
</span>This level of flexibility is only available directly from the C or C++
language level.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">More commonly, objects that must be available to Visual
Basic or scripting environments support a special interface called <b><i>IDispatch</i></b>.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>Objects that support <b>IDispatch </b>are commonly known as <b><i>automation
</i></b>objects.<span style="mso-spacerun:
yes">&nbsp;</span></p>
<p class="MsoNormal">Scripting engines can use the type and function information
stored along with an automation object to determine:</p>
<ul style="margin-top:0in" type="disc">
  <li class="MsoNormal" style="mso-list:l4 level1 lfo9;tab-stops:list .5in">functions
    (or methods) that are available on the object;</li>
  <li class="MsoNormal" style="mso-list:l4 level1 lfo9;tab-stops:list .5in">arguments
    required for each function;</li>
  <li class="MsoNormal" style="mso-list:l4 level1 lfo9;tab-stops:list .5in">addition
    behaviors implied in the interface contract.</li>
</ul>
<h2>2.4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SWIACTX Support and Limitations</h2>
<p class="MsoNormal">The features described in this document are only available
for non-graphical ActiveX automation objects.<span style="mso-spacerun: yes">&nbsp;
</span>In other words, purely algorithmic components that support the <b>IDispatch
</b>interface.</p>
<p class="MsoNormal">Event interfaces (“connection points”) are not
supported.</p>
<p class="MsoNormal"><span style="mso-bidi-font-style:italic">Named arguments
are not supported.<o:p>
</o:p>
</span></p>
<h2>2.5<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Documentation</h2>
<p class="MsoNormal">Microsoft Corporation maintains an extensive collection of
documentation about ActiveX technologies available for free at <b><i><u><a href="http://www.msdn.microsoft.com/">http://www.msdn.microsoft.com</a></u></i></b>.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">More to the point, specific documentation is available for
such widely distributed ActiveX components as the Active Data Objects
interfaces, or ADO, which is the current Microsoft standard for heterogeneous
database access on Windows platforms.</p>
<h1>3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SWIACTX: ActiveX Automation Support</h1>
<h2>3.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SWIP Interaction</h2>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">SWIACTX </b>dynamic-link
library provides ActiveX automation support to SWI Prolog programs.<span style="mso-spacerun: yes">&nbsp;
</span>It is built upon the “foreign library” support capability of SWIP, as
documented in the SWI-Prolog Reference Manual (<b style="mso-bidi-font-weight:normal">SWIPRM</b>),
section 5.4.</p>
<p class="MsoNormal">If correctly configured, <b style="mso-bidi-font-weight:
normal">SWIACTX DLL </b>is automatically loaded when its associated predicates
are invoked.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>To guarantee
such behavior, follow these steps.</p>
<p class="MsoNormal" style="margin-left:.5in">1) Place the <b style="mso-bidi-font-weight:
normal">SWIACTX.DLL </b>is the <b style="mso-bidi-font-weight:normal">Bin </b>directory
of the SWIP installation.</p>
<p class="MsoNormal" style="margin-left:.5in">2) Place the prolog program <b style="mso-bidi-font-weight:normal">SWIACTX.PL</b>
in the <b style="mso-bidi-font-weight:
normal">Library </b>directory.<span style="mso-spacerun: yes">&nbsp; </span>It
declares the predicates that exist in SWIACTX.DLL.</p>
<p class="MsoNormal" style="margin-left:.5in">3) Run the predicate the <b style="mso-bidi-font-weight:normal">make_library_index/1
</b>predicate to rebuild the file <b style="mso-bidi-font-weight:normal">INDEX.PL
</b>in the <b style="mso-bidi-font-weight:normal">Library </b>directory of the
SWIP installation.<span style="mso-spacerun: yes">&nbsp; </span>This index
quickly identifies for SWIP where particular predicates are defined in the
modules contained in the <b style="mso-bidi-font-weight:normal">Library </b>directory.</p>
<p class="MsoNormal">Then, whenever a consulted Prolog program or predicate
references a predicate defined in <b style="mso-bidi-font-weight:normal">SWIACTX.PL</b>,
SWIP identifies the predicate, via <b style="mso-bidi-font-weight:normal">INDEX.PL</b>,
as having been defined in <b style="mso-bidi-font-weight:normal">SWIACTX.PL</b>;
SWIP then consults SWIACTX.PL and loads <b style="mso-bidi-font-weight:normal">SWIACTX.DLL</b>.</p>
<p class="MsoNormal">In other words, it is entirely automatic.<span style="mso-spacerun: yes">&nbsp;
</span>If the SWIP installation is correctly configured, a Prolog program can
simply start using the ActiveX predicates immediately.</p>
<h2>3.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Binary Versions of SWIACTX</h2>
<p class="MsoNormal">The distribution set contains both the “debug” and
“release” versions of <b>SWIACTX.DLL</b>.<span style="mso-spacerun: yes">&nbsp;
</span>The debug version is called <b>SWIACTXD.DLL</b>; this is consistent with
other executable name extensions used by SWIP.</p>
<p class="MsoNormal">The choice of DLL is determined by SWIACTX.PL depending
upon the build variant of SWIP currently running.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>Normal binary distributions for Windows will utilized only the
“release” version.</p>
<h2>3.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Basics of ActiveX Interaction Using SWIACTX</h2>
<p class="MsoNormal">This section assumes that the reader is somewhat familiar
with ActiveX object creation and usage.</p>
<p class="MsoNormal">For further information, link to <a href="http://www.msdn.microsoft.com/">http://www.msdn.microsoft.com</a>
and search for <i>“Working with Objects”</i> in the Visual Basic
documentation.</p>
<p class="MsoNormal">In simple terms, ActiveX objects have interfaces; each
interface presents a set of methods (functions) for public use.<span style="mso-spacerun: yes">&nbsp;
</span>Each method may take zero or more arguments, and may return a single
result argument.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>However,
only certain data types are allowed as arguments to methods.</p>
<p class="MsoNormal">Each binary image supporting an ActiveX object also
provides a compiled information block describing the object, its interfaces and
methods.<span style="mso-spacerun: yes">&nbsp; </span>The portion of a binary
image that describes the object, its interfaces and methods is called the <i>type
library</i>.</p>
<p class="MsoNormal">Interpretive or scripting environments only use one
interface: <b>IDispatch</b>.<span style="mso-spacerun: yes">&nbsp; </span>This
interface is special, in that it really has only one key method: <b>Invoke</b>.<span style="mso-spacerun: yes">&nbsp;
</span>The <b>IDispatch::Invoke </b>method takes a token representing the actual
method to call, and an array of arguments.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span><b>IDispatch</b> also provides direct access to its type library so that
an interpreter can discover the available methods, properties and arguments
supported and required by a specific object.<span style="mso-spacerun: yes">&nbsp;
</span>This capability is sometimes referred to as <i>introspection</i>.</p>
<p class="MsoNormal">The <b>IDispatch </b>mechanism simplifies the use of
scriptable objects, since the interpreter doesn’t have to know the specifics
of using an object.<span style="mso-spacerun: yes">&nbsp; </span>It merely has
to convert the arguments presented by the script into standard ActiveX data
types, invoke the method, and convert the results back to the scripting
language’s data structures.</p>
<h3>3.3.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>An ActiveX Glossary</h3>
<p class="MsoNormal">Some ActiveX terms occur often enough to justify redefining
here.</p>
<table border="1" cellspacing="0" cellpadding="0" style="border-collapse:collapse;
 border:none;mso-border-alt:solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt">
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>Object<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">A reference to an interface to an ActiveX structure
      created on-demand.</p>
    </td>
  </tr>
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>BSTR<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">A length-counted string in the UNICODE character set;
      the string format for all ActiveX strings.</p>
    </td>
  </tr>
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>VARIANT<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">The structure used to store generic variables,
      including object references.</p>
    </td>
  </tr>
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>SAFEARRAY<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">The structure used to store variable-length,
      variable-dimension arrays</p>
    </td>
  </tr>
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>IDispatch<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">The name of the primary automation (scripting)
      interface.</p>
    </td>
  </tr>
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>ProgID<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">A name string used to create an ActiveX object</p>
    </td>
  </tr>
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>GUID<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">Globally Unique Identifier.<span style="mso-spacerun:
  yes">&nbsp; </span>In ActiveX, these are used to identify classes of objects
      and their specific interfaces.</p>
    </td>
  </tr>
  <tr>
    <td width="127" valign="top" style="width:95.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b>IEnumVariant<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="463" valign="top" style="width:347.4pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">A standard interface provided by collection objects
      that allows enumeration of the contents of the collection.</p>
    </td>
  </tr>
</table>
<p class="TableCaption">Table 2.1: Basic definitions</p>
<h3>3.3.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">activex_object</i></b>
Functor</h3>
<p class="MsoNormal">The core of ActiveX interaction is the <b style="mso-bidi-font-weight:
normal">IDispatch</b> interface reference, or what is known in Visual Basic as
an “<b>Object</b>”.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">In accordance with the recommendations in the SWIPRM, every
object reference is “wrapped” in a functor called <b style="mso-bidi-font-weight:
normal"><i style="mso-bidi-font-style:normal">activex_object</i>.<span style="mso-spacerun: yes">&nbsp;
</span></b>For example:</p>
<p class="Codefrag">activex_object(7).</p>
<p class="MsoNormal">This is how a typical SWIACTX object reference would look
if printed from within SWIP.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">These references are returned from a variety of calls;
their life cycle is entirely controlled by SWIACTX.<span style="mso-spacerun: yes">&nbsp;
</span>Most commonly, they arise as a result of a request to create a new
instance of an object.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>Prolog
users are responsible for explicitly maintaining and releasing these references
according to the needs of their programs.<span style="mso-spacerun: yes">&nbsp; </span>SWIACTX
also provides implicit support for garbage collection using Prolog’s standard
backtracking operations.</p>
<p class="MsoNormal">The integer argument of the <b><i>activex_object</i></b>
functor is a unique key to an information map maintained by SWIACTX that
contains the actual IDispatch interface pointers.<span style="mso-spacerun:
yes">&nbsp; </span>Assignment of this integer is referred to as <i>registration</i>.</p>
<h3>3.3.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Argument Conversion</h3>
<p class="MsoNormal">Since the basic task of SWIACTX is to translate between
calls in the Prolog programming model to calls in the ActiveX model, data
conversion is essential.</p>
<p class="MsoNormal">Most such conversions are fairly intuitive.<span style="mso-spacerun: yes">&nbsp;
</span>However, some key points deserve notice.</p>
<p class="MsoNormal" style="margin-left:.75in;text-indent:-.25in;mso-list:l8 level1 lfo8;
tab-stops:list .75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>On output from ActiveX functions, strings are converted to Prolog
strings.<span style="mso-spacerun: yes">&nbsp; </span><i style="mso-bidi-font-style:
normal"><u>This means that they will not unify with atoms or standard Edinburgh
character lists</u></i>.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal" style="margin-left:.75in;text-indent:-.25in;mso-list:l8 level1 lfo8;
tab-stops:list .75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>On input to ActiveX functions, Prolog atoms, strings and string
lists are all converted to ActiveX BSTRs.</p>
<p class="MsoNormal" style="margin-left:.75in;text-indent:-.25in;mso-list:l8 level1 lfo8;
tab-stops:list .75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>On input to ActiveX functions, lists of terms with a common type
(e.g., all integers) are converted to SAFEARRAYs and stored in VARIANTs.</p>
<p class="MsoNormal">Most conversions are driven by type library information;
they are therefore “automatic”.<span style="mso-spacerun: yes">&nbsp; </span>In
those cases where type information is insufficient, more direct control is
available.</p>
<p class="MsoNormal" style="margin-left:.75in;text-indent:-.25in;mso-list:l8 level1 lfo8;
tab-stops:list .75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>SWIACTX defines a special functor for direct control of SAFEARRAYs.<span style="mso-spacerun: yes">&nbsp;
</span>Refer to documentation of the <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">activex_safearray
</i></b>functor later in this document.</p>
<p class="MsoNormal" style="margin-left:.75in;text-indent:-.25in;mso-list:l8 level1 lfo8;
tab-stops:list .75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>SWIACTX defines a special functor for direct control of certain
data types that may appear in a VARIANT, such as VT_DATE.<span style="mso-spacerun: yes">&nbsp;
</span>Refer to documentation of the <b style="mso-bidi-font-weight:normal"><i>activex_variant</i></b>
functor later in this document.</p>
<h2>3.4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SWIACTX Functions</h2>
<p class="MsoNormal">These are the predicates defined by <b style="mso-bidi-font-weight:
normal">SWIACTX.PL </b>and <b style="mso-bidi-font-weight:normal">SWIACTX.DLL</b>.<span style="mso-spacerun: yes">&nbsp;
</span>They are documented in more detail later in this document.</p>
<table border="1" cellspacing="0" cellpadding="0" width="542" style="width:5.65in;
 border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt">
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">Name<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">Arity<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b>Purpose<o:p>
      </o:p>
      </b></p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_create_object</b>:<span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal"><o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">2<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Given a <b>ProgID
      </b>string or a <b>GUID </b>formatted as a string, this predicate creates
      an automation object and returns a reference functor.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_release_object<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">1<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Releases an
      automation object or interface.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_invoke_object<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">4<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Calls a method
      on an automation object.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_query_interface<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">3<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Performs a <b style="mso-bidi-font-weight:normal">QueryInterface
      </b>call on the automation object, and returns the <b style="mso-bidi-font-weight:normal">IDispatch
      </b>interface of the result.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_enum_object<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">2<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Performs
      enumeration of an <b style="mso-bidi-font-weight:normal">IEnumVARIANT</b>
      collection, backtracking over the results.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_clone_object</b><span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal"><o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">2<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Creates a new
      automation object reference identical to the original.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_collection_list</b><span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal"><o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">2<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Returns the
      results of an <b style="mso-bidi-font-weight:normal">IEnumVARIANT </b>enumeration
      as a list.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_release_all<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">0<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Releases all
      stored automation references maintained by SWIACTX.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_context<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">0<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Sets up a
      “once”-style backtracking predicate that discards all automation
      object references upon backtracking.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_context_global</b><span style="mso-spacerun: yes">&nbsp; </span><b style="mso-bidi-font-weight:normal"><o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">2<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Promotes a
      local (context-specific) automation reference to a global reference.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_list_to_date<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">2<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Bi-directionally
      converts OLE/ActiveX date/time values to Prolog floats.</p>
    </td>
  </tr>
  <tr>
    <td width="233" valign="top" style="width:174.45pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">actx_errors_as_exceptions<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="72" valign="top" style="width:53.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in"><b style="mso-bidi-font-weight:
  normal">1<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="238" valign="top" style="width:178.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="outdent" style="margin-left:0in;text-indent:0in">Controls the
      reporting of interfaces errors as exceptions.</p>
    </td>
  </tr>
</table>
<p class="MsoNormal">The terms <i>automation </i>and <i>scripting </i>are
interchangeable.</p>
<h2>3.5<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Example of ActiveX Interaction</h2>
<p class="MsoNormal">This extended example accesses a database through the ADO
(Active Data Objects) system.<span style="mso-spacerun: yes">&nbsp; </span>It is
intended to give the flavor of the interaction, not to provide specific details,
which are driven by the object model of ADO.</p>
<p class="MsoNormal">For simplicity, the global Prolog database is used to store
functors returned from the SWIACTX predicates.</p>
<p class="MsoNormal">Predicates whose names begin with ‘<b>actx</b>’ are
provided by SWIACTX.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">Prolog variable terms whose names begin with ‘IP’ are <b>activex_object</b>
functions, which, in turn, represent ActiveX interface pointers.</p>
<p class="MsoNormal" style="margin-left:.5in"><span style="font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:&quot;Courier New&quot;">adoConnect :-<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>actx_create_object</b>('ADODB.Connection',IP),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>assertz(adoobj(connection,IP)).<o:p>
</o:p>
</span></p>
<p class="MsoNormal">The predicate above uses the <b>actx_create_object </b>predicate
to create a connection object.<span style="mso-spacerun: yes">&nbsp; </span>If
successful, it asserts the result functor into the Prolog database nested into
another functor.</p>
<p class="MsoNormal" style="margin-left:.5in"><span style="font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:&quot;Courier New&quot;">adoOpenSource :-<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoobj(connection,IPConn),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>actx_invoke_object</b>(IPConn,'Open',<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>['evlog'],<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>IPSource),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>assertz(adoobj(source,IPSource)).<o:p>
</o:p>
</span></p>
<p class="MsoNormal">The predicate above uses the functor previously asserted
and calls the <b>Open</b> method on the created <b>ADODB.Connection </b>object.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>The argument list to the <b>Open</b> method requests that the ODBC
database source <b><i>evlog </i></b>be opened for access.</p>
<p class="MsoNormal" style="margin-left:.5in"><span style="font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:&quot;Courier New&quot;">adoOpenRecordsetRuns
:-<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>actx_create_object</b>('ADODB.Recordset',IPRset),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>assertz(adoobj(recordset,IPRset)),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoobj(connection,IPConn),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>actx_invoke_object</b>(IPRset,'Open',<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>['Runs',IPConn],_),<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>write('recordset
opened'),nl.<o:p>
</o:p>
</span></p>
<p class="MsoNormal">The predicate above creates an <b>ADODB.Recordset </b>object
and calls its <b>Open</b> method using the <b>ADODB.Connection </b>object to
open the database table called “Runs”.</p>
<p class="MsoNormal" style="text-indent:.5in"><span style="font-size:10.0pt;
font-family:&quot;Courier New&quot;">adoNotEof :-<o:p>
</o:p>
</span></p>
<p class="MsoNormal" style="margin-top:0in;mso-layout-grid-align:none;text-autospace:
none"><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>adoobj(recordset,IPRset),<o:p>
</o:p>
</span></p>
<p class="MsoNormal" style="margin-top:0in;mso-layout-grid-align:none;text-autospace:
none"><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><b>actx_invoke_object</b>(IPRset,['EOF','propget'],[],false).<o:p>
</o:p>
</span></p>
<p class="MsoNormal">This predicate fails if the recordset is at end-of-file.</p>
<p class="MsoBodyTextIndent2">adoRead :-<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoobj(recordset,IPRset),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>actx_invoke_object</b>(IPRset,'MoveFirst',[],_),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoReadNext.</p>
<p class="MsoNormal">This predicate reads the recordset by invoking the <b>MoveFirst
</b>method and the invoking the <b>adoReadNext</b> predicate.</p>
<p class="MsoBodyTextIndent3">adoReadNext :-<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoNotEof,<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoobj(recordset,IPRset),<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b>actx_invoke_object</b>(IPRset,'MoveNext',[],_),<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoReadNext.</p>
<p class="MsoNormal">This predicate invokes the <b>MoveNext</b> method for the
recordset and repeats using tail recursion.</p>
<p class="MsoBodyTextIndent3">adoTest :-<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoConnect,<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoOpenSource,<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>adoOpenRecordsetRuns,<br>
<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>not(adoRead).</p>
<p class="MsoNormal">This predicate performs all database connection operations
and reads the recordset.</p>
<p class="MsoNormal">It should be clear from this brief code example that the
bulk of the complexities of using ActiveX from SWI Prolog arise from the nature
of the ActiveX interfaces.<span style="mso-spacerun: yes">&nbsp; </span>ADO is a
particularly thorny example due to the number of basic object types and the
range of their interactions.</p>
<p class="MsoNormal">The details of accessing individual fields have been
omitted for brevity.</p>
<h2>3.6<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SWIACTX Exceptions</h2>
<p class="MsoNormal">The SWIACTX foreign predicates use the built-in <b style="mso-bidi-font-weight:normal">SWIP
</b>“exception” mechanism to report serious internal errors.<span style="mso-spacerun: yes">&nbsp;
</span>User-level Prolog code should use the <b style="mso-bidi-font-weight:normal">catch/3
</b>predicate to “catch” exceptions “thrown” by the SWIACTX predicates.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">The error functor “thrown” by SWIP is defined as</p>
<p class="Codefrag">activex_error(-StrFunc,-StrDesc,-TermInError)</p>
<p class="MsoNormal">The first term is unified with the string name of the
SWIACTX foreign predicate that failed.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>The second term is unified with a string description of the cause of the
failure.<span style="mso-spacerun: yes">&nbsp; </span>The third term is unified
with the term that caused the error or <b style="mso-bidi-font-weight:normal">‘[]’</b>.</p>
<p class="MsoHeader" style="tab-stops:.5in">For example</p>
<p class="Codefrag">doRewrite :-<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>catch(rewritePass,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>activex_error(StrFunc,StrDesc,TermInError),<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>printException(StrFunc,StrDesc,TermInError)).</p>
<p class="MsoNormal">In this example, the <b style="mso-bidi-font-weight:normal">doRewrite
</b>predicate acts as a “wrapper” for the real worker predicate, <b style="mso-bidi-font-weight:normal">rewritePass</b>.<span style="mso-spacerun:
yes">&nbsp; </span>If an SWIACTX exception is thrown during <b style="mso-bidi-font-weight:
normal">rewritePass</b>, the predicate <b style="mso-bidi-font-weight:normal">printException
</b>is invoked, and its arguments are unified with the terms from the SWIACTX
exception function, <b style="mso-bidi-font-weight:normal">activex_error</b>.</p>
<p class="MsoBodyText2">All Prolog programs using SWIACTX should use this
mechanism, since there is no other means for determining the cause of an
exception generated in SWIACTX.</p>
<h2>3.7<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Types of Arguments</h2>
<h3>3.7.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Argument Conversion</h3>
<p class="MsoNormal">Since Prolog and ActiveX automation are not directly
compatible, conversions between intrinsic data types is necessary.<span style="mso-spacerun: yes">&nbsp;
</span>In other words, SWIACTX automatically converts from Prolog data types to
automation data types when an object’s method is called, and then converts the
resulting automation data (if any) back to Prolog data types.</p>
<p class="MsoNormal">This conversion is driven by two factors:</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo3;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The intuitive mapping between Prolog data and automation data, and</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l2 level1 lfo3;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type library information associated with the specific method
of the target <b style="mso-bidi-font-weight:normal">IDispatch </b>interface.</p>
<h3>3.7.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Standard SWI Data Types</h3>
<p class="MsoNormal">The following data types are supported by SWIP internally:</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">PL_VARIABLE: </b>This
is an unbound Prolog variable.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">PL_ATOM:<span style="mso-spacerun: yes">&nbsp;
</span></b>This is a string of character that has been permanently associated
with a unique token for rapid access and comparison.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">PL_INTEGER:<span style="mso-spacerun: yes">&nbsp;
</span></b>This is a 32-bit integer.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">PL_FLOAT</b>:<span style="mso-spacerun: yes">&nbsp;
</span>This is a double-precision floating-point number.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">PL_STRING</b>: This is
a list of characters (i.e., Edinburgh Prolog) that has been converted to a
string using the <b style="mso-bidi-font-weight:normal">string_to_list/2</b>
predicate.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">PL_TERM</b>: This is a
generic Prolog variable.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">PL_LIST</b>: This is a
functor of the form <b style="mso-bidi-font-weight:normal">./2</b>; that is, a
standard Prolog list.<b style="mso-bidi-font-weight:normal"><o:p>
</o:p>
</b></p>
<p class="MsoNormal">For more detailed information, refer to the SWIPRM.</p>
<h3>3.7.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Conversion from Prolog to Automation</h3>
<p class="MsoNormal">The arguments to an automation method are delivered to
SWIACTX as a Prolog list.<span style="mso-spacerun: yes">&nbsp; </span>The
elements of this list are examined and converted one at a time into an array for
passage to <b style="mso-bidi-font-weight:normal">IDispatch::Invoke </b>(or <b style="mso-bidi-font-weight:normal">DispInvoke</b>).</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal">ITypeInfo</b>
information for each dispatch method defines the number and type of each
argument to the function.<span style="mso-spacerun: yes">&nbsp; </span>Named
arguments are not supported.<i style="mso-bidi-font-style:normal"><u> </u></i>Optional
arguments may be specified by use of the atom ‘<b style="mso-bidi-font-weight:
normal">optional</b>’<i style="mso-bidi-font-style:normal"> </i>in the
argument list.</p>
<p class="MsoNormal">Argument conversion takes place as follows.<span style="mso-spacerun: yes">&nbsp;
</span>First, the automation data type for the argument is extracted from the
type information.<span style="mso-spacerun:
yes">&nbsp; </span>If it is simply VT_VARIANT (i.e., non-specific), then the
VARIANT type is established by using the Prolog data type.<span style="mso-spacerun:
yes">&nbsp; </span>If the VARIANT type is specific, then conversion is correctly
coerced insofar as possible.</p>
<p class="MsoNormal">If the supplied argument list has fewer members than the
number of parameters expected by the automation method, the conversion routine
automatically supplies the correct number of optional arguments.</p>
<p class="MsoNormal">The following table describes the conversion that generic
VT_VARIANT arguments undergo in SWIACTX.</p>
<p class="MsoNormal">&nbsp;<o:p>
</o:p>
</p>
<table border="1" cellspacing="0" cellpadding="0" style="border-collapse:collapse;
 mso-table-layout-alt:fixed;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt">
  <thead>
    <tr>
      <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
   padding:0in 5.4pt 0in 5.4pt">
        <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">SWIP Data
        Type<o:p>
        </o:p>
        </b></p>
      </td>
      <td width="248" valign="top" style="width:186.3pt;border:solid windowtext .5pt;
   border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
        <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Resulting
        VARTYPE<o:p>
        </o:p>
        </b></p>
      </td>
      <td width="145" valign="top" style="width:108.9pt;border:solid windowtext .5pt;
   border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
        <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Notes<o:p>
        </o:p>
        </b></p>
      </td>
    </tr>
  </thead>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_ATOM “<b style="mso-bidi-font-weight:normal">optional”</b></p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_ERROR, scode = DISP_E_PARAMNOTFOUND</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">standard handling of optional parameters</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_ATOM “<b style="mso-bidi-font-weight:normal">true</b>”</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BOOL, VARIANT_TRUE</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_ATOM “<b style="mso-bidi-font-weight:normal">false</b>”</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BOOL, VARIANT_FALSE</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_INTEGER</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_I4</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_FLOAT</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_R8</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_TERM (if list)</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">if term is a list, a SAFEARRAY is generated</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">see later description of SAFEARRAY handling</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_STRING</p>
      <p class="MsoNormal">PL_ATOM</p>
      <p class="MsoNormal">PL_TERM</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BSTR, using SWIP’s <b style="mso-bidi-font-weight:normal">PL_get_char()
      </b>function.</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">will fail on variables</p>
    </td>
  </tr>
</table>
<p class="TableCaption">Table 2.2: Default Prolog to Automation Conversions</p>
<p class="MsoNormal">The following table describes the conversion that arguments
with specific VARIANT data types undergo in SWIACTX.<span style="mso-spacerun:
yes">&nbsp; </span>This conversion occurs after the conversions above in the
case of a VT_VARIANT; in other words, a VT_VARIANT is assigned a data type
through analysis of its Prolog data type, then the standard conversion below is
performed.</p>
<p class="MsoNormal">&nbsp;<o:p>
</o:p>
</p>
<table border="1" cellspacing="0" cellpadding="0" style="border-collapse:collapse;
 mso-table-layout-alt:fixed;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt">
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">VARTYPE from
      ITypeInfo<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Conversion
      Routine<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Notes<o:p>
      </o:p>
      </b></p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_UI2</p>
      <p class="MsoNormal">VT_I2</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_get_integer()</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">stored as a short</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_INT</p>
      <p class="MsoNormal">VT_UI4</p>
      <p class="MsoNormal">VT_UINT</p>
      <p class="MsoNormal">VT_I4</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_get_integer()</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">stored as a long</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_R4</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_get_float()</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">stored as a single</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_R8</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_get_float()</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">stored as a double</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BSTR</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_get_chars()</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BOOL</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_get_chars(), followed by comparison for
      “true”.</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VARIANT_TRUE if successful, VARIANT_FALSE otherwise</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_USERDEFINED</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_I4</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">User defined types must resolve to TKIND_ENUM.</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_DATE</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_DISPATCH</p>
    </td>
    <td width="248" valign="top" style="width:186.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">argument is check for a valid <b style="mso-bidi-font-weight:
  normal">activex_object</b> functor</p>
    </td>
    <td width="145" valign="top" style="width:108.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">IDispatch pointer given if successful</p>
    </td>
  </tr>
</table>
<p class="TableCaption">Table 2.3: Default Prolog VARTYPE Conversions</p>
<p class="MsoNormal">If any SWIP “foreign interface” function fails to
perform the necessary conversion, the predicate fails.</p>
<h3>3.7.4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Conversion from Automation to Prolog</h3>
<p class="MsoNormal">When an automation method returns, its result VARIANT is
converted from an automation data type to a Prolog data type; this operation is
basically the reverse of the conversion documented in the last section.</p>
<p class="MsoNormal">Typically, an unbound term (PL_VARIABLE) is given for the
result value.<span style="mso-spacerun: yes">&nbsp; </span>No conversion is
performed if the method fails; the variable remains unbound.<span style="mso-spacerun: yes">&nbsp;
</span>Since unification routines are used, results that are fully known or
anticipated (such as the atom representing Boolean <b style="mso-bidi-font-weight:normal">true</b>)
can be used in the result term.</p>
<p class="MsoNormal">In the table below, the appropriate member variable of the
VARIANT union is used in each case.</p>
<p class="MsoNormal">&nbsp;<o:p>
</o:p>
</p>
<table border="1" cellspacing="0" cellpadding="0" style="border-collapse:collapse;
 mso-table-layout-alt:fixed;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt">
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">VARTYPE from
      result VARIANT<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Conversion
      Routine<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Notes<o:p>
      </o:p>
      </b></p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_EMPTY</p>
      <p class="MsoNormal">VT_NULL</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_unify_nil()</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">unifies with ‘[]’, the empty list</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_UI2</p>
      <p class="MsoNormal">VT_I2</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_unify_integer()</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_INT</p>
      <p class="MsoNormal">VT_UI4</p>
      <p class="MsoNormal">VT_UINT</p>
      <p class="MsoNormal">VT_I4</p>
      <p class="MsoNormal">VT_USERDEFINED</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_unify_integer()</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_R4</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_unify_float()</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_R8</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_unify_float()</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BSTR</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_unify_string_chars()</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">&nbsp;<o:p>
      </o:p>
      </p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BOOL</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_unify_atom()</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">“true” if VARIANT_TRUE, else “false” if
      VARIANT_FALSE</p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_DATE</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><i style="mso-bidi-font-style:normal">special functor<o:p>
      </o:p>
      </i></p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">see documentation on <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">activex_variant</i></b></p>
    </td>
  </tr>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_DISPATCH</p>
    </td>
    <td width="188" valign="top" style="width:141.3pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoHeader" style="tab-stops:.5in">internal</p>
    </td>
    <td width="205" valign="top" style="width:153.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b><i>activex_object </i></b>functor is registered
      and returned if successful</p>
    </td>
  </tr>
</table>
<p class="TableCaption">Table 2.4: Default Automation to Prolog Conversions</p>
<h3>3.7.5<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Conversion Errors</h3>
<p class="MsoNormal">SWIACTX is unable to resolve some ambiguous cases.<span style="mso-spacerun: yes">&nbsp;
</span>Typically, any error arising from conversion of arguments, either before
or after method invocation, results in failure of the predicate.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">It is important to note the distinction between failure of
the method and failure to convert input or output arguments.<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>To determine the exact nature of the failure, refer to the sections on
exception handling and the <b style="mso-bidi-font-weight:normal">actx_errors_as_exceptions
</b>predicate.<span style="mso-spacerun: yes">&nbsp; </span>These capabilities
allow the Prolog programmer to get detailed information on interface errors.</p>
<h3>3.7.6<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Special Cases</h3>
<p class="MsoNormal">If a Prolog term that is a list is sent to an automation
routine, it is first converted to a SAFEARRAY.<span style="mso-spacerun: yes">&nbsp;
</span>In this case, the list must be one-dimensional (i.e., none of its
elements may be lists).<span style="mso-spacerun: yes">&nbsp; </span>The list is
scanned before conversion, and the data type of the first element is used as the
data type for all.<span style="mso-spacerun: yes">&nbsp; </span>Element
conversions are limited to the following table:</p>
<p class="MsoNormal">&nbsp;<o:p>
</o:p>
</p>
<table border="1" cellspacing="0" cellpadding="0" style="border-collapse:collapse;
 mso-table-layout-alt:fixed;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt">
  <tr>
    <td width="199" valign="top" style="width:149.4pt;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Verification
      Routine<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="162" valign="top" style="width:121.5pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">VARTYPE<o:p>
      </o:p>
      </b></p>
    </td>
  </tr>
  <tr>
    <td width="199" valign="top" style="width:149.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_is_string</p>
    </td>
    <td width="162" valign="top" style="width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BSTR</p>
    </td>
  </tr>
  <tr>
    <td width="199" valign="top" style="width:149.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_is_atom</p>
    </td>
    <td width="162" valign="top" style="width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_BSTR</p>
    </td>
  </tr>
  <tr>
    <td width="199" valign="top" style="width:149.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_is_integer</p>
    </td>
    <td width="162" valign="top" style="width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_I4</p>
    </td>
  </tr>
  <tr>
    <td width="199" valign="top" style="width:149.4pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">PL_is_float</p>
    </td>
    <td width="162" valign="top" style="width:121.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">VT_R8</p>
    </td>
  </tr>
</table>
<p class="TableCaption">Table 2.5: Special conversion in SAFEARRAYs</p>
<p class="MsoNormal">I hope that in the future I will be able to make this
conversion more sophisticated, but it should suffice for most automation uses.</p>
<h2>3.8<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>SAFEARRAY Handling</h2>
<p class="MsoNormal">The automation data type SAFEARRAY presents a special
problem.<span style="mso-spacerun: yes">&nbsp; </span>While it is
straightforward to convert lists of common terms to SAFEARRAYs, many interfaces
require particular VARTYPEs.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>When
using an ADO 1.5 “Bookmark”, for example, it is necessary to pass a
SAFEARRAY of unsigned characters (8-bit values); no other value type will work.<span style="mso-spacerun: yes">&nbsp;
</span>The only way SWIACTX can do this correctly is to be explicitly given the
required VARTYPE value.</p>
<p class="MsoNormal">Likewise, when a SAFEARRAY value is returned from a call,
there must be a means for the Prolog client to know exactly what type of data is
present.</p>
<p class="MsoNormal">For these reasons, a special functor is used to “wrap”
SAFEARRAY values passing into and out of the SWIACTX interface.<span style="mso-spacerun: yes">&nbsp;
</span>This functor, <b style="mso-bidi-font-weight:
normal">activex_safearray/2</b>, is defined as:</p>
<p class="Codefrag">activex_safearray(+VarTypeInt,+ListOfElements).</p>
<p class="MsoNormal">Every SAFEARRAY returned to the caller as the result of an <b style="mso-bidi-font-weight:normal">actx_invoke_object
</b>call is converted to this form. The Prolog author can examine both the
elements of the list and the specific automation data type.</p>
<p class="MsoNormal">Similarly, when an ActiveX function requires or allows a
SAFEARRAY, the Prolog programmer must create this functor in order to specify
exactly how the data is stored and passed to the automation layer.</p>
<p class="MsoNormal">As stated above, if naked Prolog lists are presented where
SAFEARRAYs are required, SWIACTX attempts to convert the underlying data as best
it can. <span style="mso-spacerun: yes">&nbsp;</span>This set of conversions is
similar to those in Table 2.1.<span style="mso-spacerun: yes">&nbsp; </span>The
area of greatest uncertainty occurs with integer values; many automation
interfaces accept several alternatives; some are much more restrictive.<span style="mso-spacerun: yes">&nbsp;
</span>The best means of determining the requirements of a particular
interface’s SAFEARRAY property is to call the corresponding “get” property
and see what VARTYPE it uses.<span style="mso-spacerun: yes">&nbsp; </span>Then
use that same type for SAFEARRAY “put” operations.</p>
<h2>3.9<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Other Special VARIANT Data Types</h2>
<p class="MsoNormal">As stated above, the VT_DISPATCH variant type is handled
through the use of the <b style="mso-bidi-font-weight:normal">activex_object </b>functor.</p>
<p class="MsoNormal">Additionally, there is a means by which unusual data
VARIANT types can be read from and reported back to Prolog.<span style="mso-spacerun:
yes">&nbsp; </span>This is done with the <b style="mso-bidi-font-weight:normal">activex_variant/2</b>
functor, which is similar to the <b style="mso-bidi-font-weight:normal">activex_safearray</b>.</p>
<p class="Codefrag">activex_variant(+VarTypeInt,+DataTerm).</p>
<p class="MsoNormal">When such a functor is passed as a function argument to
SWIACTX, the variant type integer (first argument) is use to guide the
conversion of the data term (second argument).</p>
<p class="MsoNormal">These are the variant types supported using this method.</p>
<p class="MsoNormal">&nbsp;<o:p>
</o:p>
</p>
<table border="1" cellspacing="0" cellpadding="0" style="border-collapse:collapse;
 mso-table-layout-alt:fixed;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt">
  <thead>
    <tr>
      <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
   padding:0in 5.4pt 0in 5.4pt">
        <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Variant Type<o:p>
        </o:p>
        </b></p>
      </td>
      <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
   border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
        <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Data Term
        Type<o:p>
        </o:p>
        </b></p>
      </td>
      <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
   border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
        <p class="MsoNormal"><b style="mso-bidi-font-weight:normal">Notes<o:p>
        </o:p>
        </b></p>
      </td>
    </tr>
  </thead>
  <tr>
    <td width="197" valign="top" style="width:2.05in;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoHeader" style="tab-stops:.5in">VT_DATE</p>
    </td>
    <td width="197" valign="top" style="width:2.05in;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">float (double)</p>
    </td>
    <td width="197" valign="top" style="width:2.05in;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt">
      <p class="MsoNormal">other conversion routines apply to the float</p>
    </td>
  </tr>
</table>
<p class="TableCaption">Table 2.6: Special conversions using <i style="mso-bidi-font-style:
normal">activex_variant</i></p>
<h2>3.10<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp; </span>Types
of Function Invocation</h2>
<p class="MsoNormal">Function invocation requires several arguments:</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo4;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the <b style="mso-bidi-font-weight:normal">IDispatch</b> functor</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo4;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the invocation method name or list</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo4;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the list (possibly empty) of arguments to the method</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo4;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the result argument</p>
<p class="MsoNormal">The most common case is a simple method invocation. In this
case, the second argument is only a single atom—the name of the method.<span style="mso-spacerun: yes">&nbsp;
</span>However, there are four basic types of ActiveX automation invocation, and
using the others types requires that a list be presented.<span style="mso-spacerun: yes">&nbsp;
</span>The four types, listed by the required atom, are:</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">func</b>: This is a
simple method invocation, and is the default when only a method name is present.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">propget</b>:<span style="mso-spacerun: yes">&nbsp;
</span>This is a call to return a standard property from an object.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">propput</b>: This is a
call to alter a standard property of an object.</p>
<p class="outdent"><b style="mso-bidi-font-weight:normal">propputref</b>:<span style="mso-spacerun: yes">&nbsp;
</span>This is a call to alter an object’s property that is an COM interface<b style="mso-bidi-font-weight:normal">
</b>reference.</p>
<p class="MsoNormal">In these cases, the second argument might appear as:</p>
<p class="Codefrag">[‘Size’,propput]</p>
<p class="MsoNormal">The method (or property name) is <b style="mso-bidi-font-weight:
normal">Size</b>.</p>
<h2>3.11<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp; </span>Default
Method Invocation</h2>
<p class="MsoNormal">Any automation object can declare a default method to be
invoked by VB or scripting languages when no method name is present.<span style="mso-spacerun: yes">&nbsp;
</span>This default or “value” method (identified by the dispatch ID <b>DISPID_VALUE</b>)
is actually a property, and in most cases supports both <b>propget </b>and <b>propput
</b>(or <b>propputref</b>, as appropriate).</p>
<p class="MsoNormal">SWIACTX supports use of the default method in the following
way.<span style="mso-spacerun: yes">&nbsp; </span>If the function invocation
list is empty (‘<b>[]</b>’), the default or value method is invoked in its <b>propget
</b>form.<span style="mso-spacerun: yes">&nbsp; </span>If the list contains only
an invocation type token, that token is used to call the default method.</p>
<h2>3.12<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp; </span>Context
Management</h2>
<p class="MsoNormal">One important requirement that ActiveX automation imposes
on its clients is the careful management of reference counts on returned object
references.<span style="mso-spacerun: yes">&nbsp; </span>SWIACTX supports two
kinds of reference management.</p>
<p class="MsoNormal">Global reference management is the default.<span style="mso-spacerun: yes">&nbsp;
</span>In this case, the Prolog programmer is responsible for recording (i.e.,
asserting) returned ActiveX functor information and releasing it when no longer
necessary.<span style="mso-spacerun: yes">&nbsp; </span>There is also a
“release all” function that discards all known references maintained by
SWIACTX.</p>
<p class="MsoNormal">Context-sensitive reference management is also available.<span style="mso-spacerun: yes">&nbsp;
</span>This means that a “placeholder” is put on to the Prolog backtrack
stack, and when evaluation rolls back to that point, all ActiveX information
accumulated since the placeholder was recorded is discarded.<span style="mso-spacerun: yes">&nbsp;
</span>This is very similar to standard C++ or VB stack-based variable garbage
collection.</p>
<p class="MsoNormal">The predicate <b style="mso-bidi-font-weight:normal">actx_context/0</b>,
is used to perform context-based reference management.<span style="mso-spacerun: yes">&nbsp;
</span>This predicate succeeds exactly once, but is marked as non-deterministic,
meaning that Prolog will backtrack to it.<span style="mso-spacerun: yes">&nbsp; </span>Upon
backtracking, it will fail, and, in failing, remove all ActiveX information
accumulated by SWIACTX since the predicate was first evaluated.</p>
<p class="MsoNormal">There is one other interesting case in context management.<span style="mso-spacerun: yes">&nbsp;
</span>It sometimes happens that a complex object model will require that the
programmer obtain several intermediate object references before getting an
object reference that is important.<span style="mso-spacerun: yes">&nbsp; </span>In
this case, the context handler will mark the both the temporary and desired
object references the same way—as belonging to the local context.<span style="mso-spacerun: yes">&nbsp;
</span>The programmer must have a way to “promote” the useful reference into
the “global” or outermost context, thereby preserving it for later use.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>This is accomplished using the <b style="mso-bidi-font-weight:normal">actx_context_global/2</b>
predicate.</p>
<h2>3.13<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp; </span>SWIACTX
Predicates</h2>
<p class="MsoNormal">This section documents the individual SWIACTX predicates
and their usage.<span style="mso-spacerun: yes">&nbsp; </span>The predicates are
referred to using the standard <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">predicate/arity</i></b>
notation.<span style="mso-spacerun: yes">&nbsp; </span>The argument direction
(input, output or both) is document as in the SWIPRM.</p>
<p class="MsoNormal">In the current version of SWIACTX, these predicates will
fail if either the method fails (HRESULT != S_OK) or argument conversion fails.</p>
<p class="MsoNormal">Predicates are <u>deterministic</u> unless otherwise noted.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_create_object/2<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_create_object( +StringProgId, -Object)<span style="font-weight:normal"><o:p>
</o:p>
</span></p>
<p class="MsoNormal">Given a UUID or ProgID string, creates an automation object
and returns a reference functor.<span style="mso-spacerun: yes">&nbsp; </span>If
a GUID/UUID is given, it must be enclosed in curly braces, such as
“{24345413-F98C-11D2-A93B-00C04F72E076}”.</p>
<p class="MsoNormal">If successful, the output value is a functor of the form</p>
<p class="Codefrag">activex_object(n)</p>
<p class="MsoNormal">where n is a unique integer maintained by the SWIACTX DLL.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_release_object/1<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_release_object( +Object )</p>
<p class="MsoNormal">Releases an automation object.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_invoke_object/4<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_invoke_object( +Object,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>+InvocationAtomOrList,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>+ArgumentList,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>-Result)</p>
<p class="MsoNormal">Calls a method on an automation object.<span style="mso-spacerun: yes">&nbsp;
</span>The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">Object</i></b><span style="mso-spacerun:
yes">&nbsp; </span>must be a in the standard form and must contain a currently
registered automation reference index.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">InvocationAtomOrList
</i></b>is either an atom (note, not a string or character list) containing the
method name or a list containing the method name atom and, as required, a method
invocation type atom.<span style="mso-spacerun: yes">&nbsp; </span>See the
section <i style="mso-bidi-font-style:normal"><u>Types of Function Invocation </u></i>for
more information.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">ArgumentList
</i></b>is a Prolog list of arguments to be passed to the method.<span style="mso-spacerun: yes">&nbsp;
</span>These are converted as documented elsewhere.<span style="mso-spacerun:
yes">&nbsp; </span>If there are no arguments, pass the empty list (<b style="mso-bidi-font-weight:normal">‘[]’</b>).</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">Result
</i></b>is usually an unbound variable, which is unified with the results of the
method invocation.<span style="mso-spacerun: yes">&nbsp; </span>If the function
doesn’t return a value, it is unified with the empty list.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_query_interface/3<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_query_interface( +Object,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>+StringGuid,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>-NewFunctorObject)</p>
<p class="MsoNormal">Performs a <b style="mso-bidi-font-weight:normal">QueryInterface
</b>call on the automation object, and returns the <b style="mso-bidi-font-weight:
normal">IDispatch </b>interface of the result if successful</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">Object
</i></b>is as per usual.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">StringGuid
</i></b>is a GUID in standard text form (i.e., with curly braces).</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">NewFunctorObject
</i></b>term is unified with the resulting registered automation reference.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.5<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_enum_object/2 (<i style="mso-bidi-font-style:normal">non-deterministic</i>)<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_enum_object( +Object, -EnumerationResult )</p>
<p class="MsoNormal">Performs enumeration of an <b style="mso-bidi-font-weight:
normal">IEnumVARIANT</b> collection, backtracking over the results.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">Object
</i></b>is as per usual.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">EnumerationResult
</i></b>term is unified with results of the enumeration. <span style="mso-spacerun: yes">&nbsp;</span></p>
<h3><b style="mso-bidi-font-weight:normal">3.13.6<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_clone_object/2<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_clone_object( +Object, -NewObject )</p>
<p class="MsoNormal">Creates a new automation object reference that is a copy of
an existing reference.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">Object
</i></b>is as per usual.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">NewObject
</i></b>term is unified with the resulting registered automation reference.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.7<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_collection_list/2<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_collection_list( +Object, -CollectionAsList )</p>
<p class="MsoNormal">Returns the results of an <b style="mso-bidi-font-weight:
normal">IEnumVARIANT </b>enumeration as a list.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">Object
</i></b>is as per usual.</p>
<p class="MsoNormal">The <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal">CollectionAsList
</i></b>term is unified with a list containing all the elements successfully
enumerated from the collection.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.8<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_release_all/0<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">Releases all stored automation references maintained by
SWIACTX.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.9<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_context/0<span style="mso-spacerun: yes">&nbsp; </span>(<i style="mso-bidi-font-style:normal">non-deterministic</i>)<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">Sets up a “once”-style backtracking predicate that
discards all automation object references upon backtracking.</p>
<p class="MsoNormal">In other words, all ActiveX object references obtained
during deeper searches are marked with a context “horizon”.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>This predicate always fails upon backtracking, and, along with failing,
discards any ActiveX object references accumulated during goal searching
descent.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.10<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_context_global/2<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_context_global( +Object,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>?BooleanAtomOrUnboundVar )</p>
<p class="MsoNormal">Promotes a local (context-specific) automation reference to
a global reference.</p>
<p class="MsoNormal">If the Boolean (second) term is bound to the atom <b style="mso-bidi-font-weight:normal">true</b>,
the object reference represented by the given ActiveX functor is promoted to the
global context.<span style="mso-spacerun: yes">&nbsp; </span>Hence, it will
never automatically be released due to backtracking.</p>
<p class="MsoNormal">If the Boolean term is bound to the atom <b style="mso-bidi-font-weight:normal">false</b>,
the object reference represented by the given ActiveX functor is marked as
belonging to the local context.<span style="mso-spacerun: yes">&nbsp; </span>Hence,
it will be released when the <b style="mso-bidi-font-weight:normal">actx_context
</b>predicate that created the current context is backtracked over.</p>
<p class="MsoNormal">If the Boolean term is unbound, it is unified with <b style="mso-bidi-font-weight:normal">true
</b>if the ActiveX object is in the global context or <b style="mso-bidi-font-weight:normal">false
</b>if it is not.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.11<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_list_to_date/2<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_list_to_date( ?DateAsIntegerList, ?DateAsFloat )</p>
<p class="MsoNormal">This predicate performs bi-directional conversion between
standard OLE dates (such as used by ADO) and lists of integers.<span style="mso-spacerun: yes">&nbsp;
</span>For example,</p>
<p class="Codefrag">actx_list_to_date([1998,11,2,0,0,0],36101.0).</p>
<p class="MsoNormal">In this case, both terms are instantiated, so only a
unification check is performed.<span style="mso-spacerun: yes">&nbsp; </span>If
the list term is a variable, the date term is converted to an integer list and
unified with it.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>If the date
term is a variable, the list term is converted to an OLE date and unified with
it.</p>
<p class="MsoNormal">The order of terms in the list is <b>[year,month,day,hour,minute,second]</b>.</p>
<h3><b style="mso-bidi-font-weight:normal">3.13.12<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>actx_errors_as_exception/1<o:p>
</o:p>
</b></h3>
<p class="Codefrag">actx_errors_as_exception( ?Bool )</p>
<p class="MsoNormal">This predicate controls whether SWIACTX reports an <b style="mso-bidi-font-weight:normal">IDispatch</b>
interface error as an exception (using the <b style="mso-bidi-font-weight:normal">activex_error</b>
functor) or simply fails the predicate. <u>The default is to fail the predicate</u>.</p>
<p class="MsoNormal">If the <b style="mso-bidi-font-weight:normal">Bool </b>term
is unbound, it will be bound to the current setting of the
treat-errors-as-exceptions flag, either <b style="mso-bidi-font-weight:normal">true
</b>or <b style="mso-bidi-font-weight:normal">false</b>.</p>
<p class="MsoNormal">If the <b style="mso-bidi-font-weight:normal">Bool </b>term
is bound to either <b style="mso-bidi-font-weight:normal">true </b>or <b style="mso-bidi-font-weight:normal">false</b>,
this value will be applied to the internal flag.</p>
<p class="MsoNormal">Note that this is a persistent “side effect”, and is
not undone during backtracking.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="MsoNormal">This reporting mechanism currently only applies to <b style="mso-bidi-font-weight:normal">actx_invoke_object</b>;
that is, calls to <b style="mso-bidi-font-weight:normal">IDispatch::Invoke </b>(via
<b style="mso-bidi-font-weight:normal">DispInvoke</b>).</p>
<p class="MsoNormal">It is recommended that setting <b style="mso-bidi-font-weight:
normal">actx_errors_as_exception(true) </b>should only be done during testing to
track down the source of an interface failure.<span style="mso-spacerun:
yes">&nbsp; </span>Since many ActiveX methods routinely report failure during
normal operations (such as end of file or non-present properties), throwing
exceptions during such benign operations can be seriously misleading.</p>
<h1>4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PROQUERY: Prolog Automation</h1>
<h2>4.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Overview</h2>
<p class="MsoNormal">Programs developed in Prolog will usually be invoked in a
larger framework of scripting language or higher-level control.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>SWIP supports this capability by allowing its top-level <i>“read-eval-print”
</i>loop to be supplanted by a dynamic-link library interface.</p>
<p class="MsoNormal">This capability allows the entire SWIP engine to be
embedded into an in-process ActiveX DLL and invoked, when necessary, to perform
operations be suited to Prolog.</p>
<p class="MsoNormal">These operations are usually limited to goal queries for
well-established goals.<span style="mso-spacerun: yes">&nbsp; </span>The
development cycle, then, would be similar to the following.</p>
<p class="MsoBodyTextIndent">1) Use the “command line” or “windowed”
version of the interpreter and your favorite text editor to construct the Prolog
programs representing the goals to be answered.</p>
<p class="MsoNormal" style="margin-left:.5in">2) Save the resulting Prolog
programs into a “library” directory and build an index for them.</p>
<p class="MsoNormal" style="margin-left:.5in">3) Build a higher-level
application using Visual Basic or some other scripting language for ActiveX.<span style="mso-spacerun: yes">&nbsp;
</span>Add an instance of the <b style="mso-bidi-font-weight:
normal">PrologQuery </b>object the application.</p>
<p class="MsoNormal" style="margin-left:.5in">4) Set your private “library”
directory as a reference library directory for automatic loading by SWIP by
executing a simple query using <b style="mso-bidi-font-weight:normal">PrologQuery</b>.<span style="mso-spacerun: yes">&nbsp;
</span>See the SWIPRM for documentation about the <b style="mso-bidi-font-weight:normal">library_directory/1
</b>predicate.</p>
<p class="MsoNormal" style="margin-left:.5in">5) Pass Prolog queries to the <b style="mso-bidi-font-weight:normal">PrologQuery
</b>object as your application requires.</p>
<p class="MsoNormal">This procedure allows programs in VB, C++ or a scripting
language to directly invoke and obtain results from any amount of previously
tested Prolog code.</p>
<h2>4.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Limitations</h2>
<p class="MsoNormal">Only one instance of the PROQUERY object may be created
during the execution of a single process.<span style="mso-spacerun: yes">&nbsp; </span>This
is due to the non-reentrant nature of the underlying SWI-Prolog code.</p>
<h2>4.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Caveat</h2>
<p class="MsoNormal">This interface is still under development, so not all of
the arguments and routines are fully documented or are listed in their final
forms.</p>
<h2>4.4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Interface IPrologQuery</h2>
<p class="MsoNormal">The program identification string (ProgID) for <b style="mso-bidi-font-weight:normal">IPrologQuery</b>
is <b style="mso-bidi-font-weight:
normal">“ProQuery.PrologQuery.1”</b>.</p>
<p class="MsoNormal">This section documents its methods.</p>
<h3><b style="mso-bidi-font-weight:normal">4.4.1<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;
</span>SetPredicate<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">This method is used to bind the <b style="mso-bidi-font-weight:
normal">IPrologQuery </b>object to a particular predicate, giving its name,
arity and module.</p>
<p class="Codefrag">SetPredicate ( BSTR bstrName,<br>
<span style="mso-spacerun: yes">&nbsp;</span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>long iArity,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>[optional] BSTR bstrModule )</p>
<p class="MsoNormal">This preparatory method establishes the goal predicate used
in the actual query methods.</p>
<p class="MsoNormal">This method only needs to be called once for any number of
invocations of the same goal predicate.</p>
<h3><b style="mso-bidi-font-weight:normal">4.4.2<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;
</span>OpenQuery<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">This method starts a new goal.</p>
<p class="Codefrag">OpenQuery([in] long iFlags,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>[in] SAFEARRAY(VARIANT)* rgArgs )</p>
<p class="MsoNormal">The second argument is an array of VARIANTs to be converted
and passed to Prolog when the query is invoked.<span style="mso-spacerun:
yes">&nbsp; </span>This array must have a dimension of one, although individual
elements may themselves be SAFEARRAYs.</p>
<p class="MsoNormal">The elements of the SAFEARRAY are converted to an array of
Prolog terms in a manner very similar to that document in the previous section
about the SWIACTX interface.<span style="mso-spacerun: yes">&nbsp; </span>These
are the important differences.</p>
<p class="MsoNormal" style="margin-left:.25in;text-indent:-.25in;mso-list:l5 level1 lfo6;
tab-stops:list .25in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Variables that are to receive data from Prolog (i.e., that will
become unified as a result of the query) must be represented in the SAFEARRAY by
VARIANTs of type VT_EMPTY.</p>
<p class="MsoNormal" style="margin-left:.25in;text-indent:-.25in;mso-list:l5 level1 lfo6;
tab-stops:list .25in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>There is no way to pass an object reference directly to Prolog, or
to return one.</p>
<p class="MsoNormal">If a VARIANT of type VT_VARIANT is encountered, it is
converted in the same manner.<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>This
means that “by ref” values are dereferenced.</p>
<h3><b style="mso-bidi-font-weight:normal">4.4.3<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;
</span>NextSolution<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">This function is called to obtain the first and all
subsequent results of the query.<span style="mso-spacerun: yes">&nbsp;</span></p>
<p class="Codefrag">NextSolution( [out] SAFEARRAY(VARIANT)* rgArgs,<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>[out,retval] VARIANT_BOOL * pbSucceed )</p>
<p class="MsoNormal">The second argument indicates whether the predicate
succeeded.</p>
<p class="MsoNormal">If the predicate succeeds, a SAFEARRAY argument will be
returned which is the result of converting the terms of the query back to
VARIANTs.</p>
<p class="MsoNormal">This returned array is always a one-dimensional array of
VARIANTs.<span style="mso-spacerun: yes">&nbsp; </span>The expected conversions
are performed, in a similar spirit to the SWIACTX conversion documented in the
earlier section.<span style="mso-spacerun: yes">&nbsp; </span>The significant
differences are:</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l6 level1 lfo7;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any Prolog term (<b style="mso-bidi-font-weight:normal">PL_TERM</b>)
that is a list (<b style="mso-bidi-font-weight:normal">PL_is_list</b>()) is
converted to yet another SAFEARRAY of VARIANTs.</p>
<p class="MsoNormal" style="margin-left:.5in;text-indent:-.25in;mso-list:l6 level1 lfo7;
tab-stops:list .5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any unbound variables are returned as VT_EMPTY.</p>
<h3><b style="mso-bidi-font-weight:normal">4.4.4<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;
</span>CutQuery<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">This operation performs a logical “cut” on the query.</p>
<p class="MsoNormal"><i>Note: in this release, this is identical to </i><b>CloseQuery</b>.</p>
<h3><b style="mso-bidi-font-weight:normal">4.4.5<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;
</span>CloseQuery<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">This operation closes the query and discards all Prolog
information associated with it.<span style="mso-spacerun: yes">&nbsp; </span>It
must be called before another <b style="mso-bidi-font-weight:normal">OpenQuery </b>will
operate successfully.</p>
<h3><b>4.4.6<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;
</span>ModulePath<o:p>
</o:p>
</b></h3>
<p class="MsoNormal">This function returns the complete path to the installation
location of the model <b>ProQuery.DLL</b>.<span style="mso-spacerun: yes">&nbsp;&nbsp;
</span>Normally, this is the SWI-Prolog installation’s <b><i>bin </i></b>directory.</p>
<p class="Codefrag">ModulePath ( [out,retval] BSTR * pbstrPath );</p>
<h2>4.5<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Usage Example</h2>
<p class="MsoNormal">This example performs a simple “consultation” of a
Prolog program as a query.</p>
<p class="Codefrag"><span style="font-size:10.0pt">Dim ipQuery As new
PrologQuery<o:p>
</o:p>
</span></p>
<p class="MsoNormal">This declares the interface reference to the <b>PrologQuery
</b>object.</p>
<p class="MsoNormal">The following subroutine is used to enumerate all the
possible solutions.<span style="mso-spacerun: yes">&nbsp; </span>Note that
failure of the query causes and error that must be handled in Visual Basic using
the <b><i>on error </i></b>syntax.</p>
<p class="Codefrag"><span style="font-size:10.0pt">Function CountQueries() As
Long<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>On Error GoTo CQ_exit<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Dim rgArgs() As
Variant<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Dim cQuery As Integer<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>cQuery = 0<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>While
ipQuery.NextSolution(rgArgs)<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>cQuery
= cQuery + 1<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Wend<br>
CQ_exit:<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>CountQueries = cQuery<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Exit Function<br>
End Function<o:p>
</o:p>
</span></p>
<p class="MsoNormal">The following routine performs the <b><i>consult/1 </i></b>predicate
on a Prolog source file.<span style="mso-spacerun: yes">&nbsp; </span>(Note that
the <b>PrologQuery </b>engine requires the full path.)<span style="mso-spacerun:
yes">&nbsp; </span>Clearly, this predicate will succeed only once, but the code
is written as though multiple solutions were possible.</p>
<p class="Codefrag"><span style="font-size:10.0pt">Sub TestQuery()<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Dim rgArgs() As
Variant <span style="mso-tab-count:1">&nbsp; </span></span><span style="font-size:10.0pt;
font-weight:normal;mso-bidi-font-weight:bold">‘<span style="mso-spacerun:
yes">&nbsp; </span>Arguments to the query<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Dim cQuery As Integer<span style="mso-tab-count:1"> &nbsp; </span></span><span style="font-size:10.0pt;
font-weight:normal;mso-bidi-font-weight:bold">‘<span style="mso-spacerun:
yes">&nbsp; </span>Number of solutions<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Dim sQueryPath As String<span style="mso-tab-count:1">&nbsp; </span></span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:bold">‘<span style="mso-spacerun: yes">&nbsp;
</span>Path to .PL file<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Dim sCurDir As String<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp; </span></span><span style="font-size:10.0pt;
font-weight:normal;mso-bidi-font-weight:bold">‘<span style="mso-spacerun:
yes">&nbsp; </span>Current directory<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>On Error GoTo tq_end<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;
</span></span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:bold">‘<span style="mso-spacerun: yes">&nbsp;
</span>Set up error handling<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>sCurDir = CurDir<span style="mso-tab-count:1"> &nbsp;&nbsp;&nbsp; </span></span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:bold">‘<span style="mso-spacerun: yes">&nbsp;
</span>Get the current directory</span><span style="font-size:10.0pt"><br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>Create the full path to the Prolog program<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>sQueryPath = sCurDir &amp; &quot;\vb\proqtest.pl&quot;<br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>Prepare the argument array; just one arg—the filename<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>ReDim rgArgs(0)<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>rgArgs(0) = sQueryPath<br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>Set the predicate: consult/1, part of the system module<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>ipQuery.SetPredicate &quot;consult&quot;, 1, &quot;system&quot;<br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>Open the query, setting the initial arguments.<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>ipQuery.OpenQuery 0, rgArgs<br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>Get the count of solutions (should be 1)<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>cQuery = CountQueries<br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>Pop up a message box<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>MsgBox &quot;Query succeeded &quot; &amp; cQuery &amp; &quot;
times&quot;, vbOKOnly, _<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>&quot;Query Results&quot;<br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>Close the query (clean up memory, etc.)<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>ipQuery.CloseQuery<o:p>
</o:p>
</span></p>
<p class="Codefrag" style="text-indent:.2in"><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;
</span>Exit Sub<br>
<br>
tq_end:<br>
</span><span style="font-size:10.0pt;font-weight:normal;mso-bidi-font-weight:
bold"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>‘<span style="mso-spacerun:
yes">&nbsp; </span>If we get here, we probably couldn’t find the predicate<br>
</span><span style="font-size:10.0pt"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>MsgBox &quot;Query processing failed&quot;, vbOKOnly, &quot;Test
Query&quot;<br>
<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>Exit Sub<br>
End Sub<br style="mso-special-character:line-break">
<br style="mso-special-character:line-break">
<o:p>
</o:p>
</span></p>

</body>

</html>
