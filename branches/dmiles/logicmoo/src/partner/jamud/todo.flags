Any object system (data or mudobject) needs certain flags, attributes, and locks.

 Players have multiple Characters. A Player file would need to be able to load multiple bodies, but would only require a single home (?)


FLAGS
boolean isFlagged(String)
FlagSet flags()


player...
jamud.util.Colour
.FLAG_COLOUR	player sees colour
jamud.player.IPlayer
.FLAG_ROLE_ADMIN	player is an admin
.FLAG_ROLE_TOAD		a punishment flag
.FLAG_STATE_AFK		player is away
.FLAG_STATE_QUIET	player is in quiet mode
.FLAG_STATE_HIDDEN	player is invisible to equal or lower trusts
.FLAG_STATE_LINKDEAD	player is link-dead
com.jamud.command.olc.PlayerFlags
.FLAG_ROLE_BUILDER	player is a builder
.FLAG_ROLE_TESTER	player is a tester
.FLAG_ABILITY_CREATE	player can create new mudobjects
.FLAG_ABILITY_DELETE	player can delete mudobjects
.FLAG_ABILITY_EDITOR	player can edit mudobject they don't own

mudobject...
jamud.mud.IMudObject
.FLAG_ANIMATE		mudobject is animate (can do things)
.FLAG_CHARACTER		mudobject is a player's character
.FLAG_VISIBLE_SHOWN	mudobject has the ability to be seen
.FLAG_VISIBLE_HIDDEN	mudobject is hidden (but can be seen, given detection)
.FLAG_VISIBLE_INVIS	mudobject is invis (but can be seen...)
.FLAG_OPEN_OPENABLE	mudobject has the ability to be opened
.FLAG_OPEN_CLOSED	mudobject is closed
.FLAG_OPEN_LOCKED	mudobject is locked (may be closed, may be open)
.FLAG_OPEN_STUCK	mudobject is blocked (may be closed, may be open)
.FLAG_TRANSIT_NOENTER	entrances leading here may not traversed
.FLAG_TRANSIT_NOEXIT	contents may not leave through entrances



MudObject should have ACLs in the following formats...

ALLOW_FLAGS
DENY_FLAGS
OWNERS

boolean isAllowed(Accessor a) {
	boolean allow;

	if( ALLOW_FLAGS.size() > 0 ) {
		//must be explicitly allowed
		allow = ALLOW_FLAGS.contains( a.flags() );
	} else if ( DENY_FLAGS.size() > 0 ) {
		//must be explicitly denied
		allow = ( ! DENY_FLAGS.contains( a.flags() ) );
	} else {
		//neither implicitly nor explicitly denied
		return true;
	}

	if( ! allow ) {
		//last- chance override for owners
		allow = OWNERS.contains( a.id() );
	}

	return allow;
}




code using Entrances need to check the following before calling traverse

int queryTraverse( IMudObject m, boolean ignoreState ) {
	if( targetRoom == null ) {
		synchronized( this ) {
			if( targetRoom == null ) {
				// get tid, find target by tid
				IMudObject o = MudRoot
					.getTemplate( targetTid );
				if( o != null ) {
					targetRoom = o.getChildContainer();
				} else {
					return RETURN_FAIL_READY;
				}
			}
		}
	}

	if(! ignoreState ) {
		//is this entrance open for traversal?
		if( this.flags.contains(IEntrance.FLAGS_OPEN_CLOSED) ) {
			return RETURN_FAIL_CLOSED;
		}
	}

	if( targetRoom.queryEnter( m ) ) {
		return RETURN_SUCCESS;
	} else {
		return RETURN_FAIL_DENIED;
	}
}


returns as follows

IEntrance.RETURN_SUCCESS = 1;
IEntrance.RETURN_FAIL_UNKNOWN = -1;
IEntrance.RETURN_FAIL_READY = 5;
IEntrance.RETURN_FAIL_CLOSED = 6;
IEntrance.RETURN_FAIL_DENIED = 7;


---
Interface Flagged
	Iterator flags()
	boolean addFlag(String flag)
	boolean removeFlag(String flag)
	boolean isFlagged(String flag)

Interface Accessor extends Flagged
	String id
	int trust

Interface Accessable
	boolean isLocked()
	Accessor lockedBy()
	boolean lock(Accessor)
	boolean unlock()
	boolean canRead(Accessor)
	boolean canWrite(Accessor)

	Foo getFoo()
	boolean setFoo(Accessor a, Foo f)

NOTE: the read ability is flagging for external code to know that it
SHOULD NOT be allowed to read. However, external code may choose to ignore this
notice. In this instance, reading (via a getter or whatever) should NOT BE
IMPEEDED.

NOTE: however, the write ability is not simple flagging. setters should return
a boolean indicating whether their function was successfull or not

---