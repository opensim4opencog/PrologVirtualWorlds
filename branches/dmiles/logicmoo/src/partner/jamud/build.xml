<?xml version="1.0"?>


<project name="jamud" default="build" basedir=".">


    <property name="name" value="JaMUD" />

    <property name="version.major" value="a5" />
    <property name="version.minor" value="0" />
    <property name="version" value="${version.major}.${version.minor}" />

    <property name="project" value="jamud" />

    <property name="src.dir" value="src" />
    <property name="build.dir" value="bin" />
    <property name="docs.dir" value="docs" />
    <property name="javadoc.dir" value="${docs.dir}/api" />
    <property name="lib.dir" value="lib" />

    <property name="final.name" value="${project}-${version}" />

    <property name="flags.debug" value="no" />
    <property name="flags.deprecation" value="no" />
    <property name="flags.optimize" value="no" />



    <target name="clean">
        <antcall target="clean-build" />
	<antcall target="clean-jar" />
	<antcall target="clean-javadoc" />
    </target>


    <target name="clean-build">
        <delete quiet="true">
	    <fileset dir="${build.dir}" />
	</delete>
    </target>


    <target name="clean-core">
        <delete quiet="true">
	    <fileset dir="${build.dir}/jamud" />
	</delete>
    </target>


    <target name="clean-plugins">
        <delete quiet="true">
	    <fileset dir="${build.dir}/com/jamud" />
	</delete>
    </target>


    <target name="clean-jar">
        <delete quiet="true" file="${lib.dir}/${project}-core.jar" />
	<delete quiet="true" file="${lib.dir}/${project}-plugins.jar" />
    </target>


    <target name="clean-javadoc">
        <delete quiet="true">
            <fileset dir="${javadoc.dir}" />
        </delete>
    </target>


    <target name="find-nanoxml">
        <condition property="missing.nanoxml">
	    <not>
	        <available classname="net.n3.nanoxml.XMLElement">
		    <classpath>
		        <fileset dir="${lib.dir}" />
		    </classpath>
		</available>
	    </not>
	</condition>
	<antcall target="assure-nanoxml" />
    </target>


    <target name="assure-nanoxml" if="missing.nanoxml">
        <fail message="">net.n3.nanoxml.* package missing.
	see readme for information on obtaining necessary libraries</fail>
    </target>


    <target name="find-jamud">
        <condition property="missing.jamud">
	    <not>
	        <available classname="jamud.Jamud">
		    <classpath>
		        <fileset dir="${lib.dir}" />
		    </classpath>
		</available>
	    </not>
	</condition>
	<antcall target="assure-jamud" />
    </target>


    <target name="assure-jamud" if="missing.jamud">
        <fail message="">jamud.* package missing.
	please build-core and jar-core first</fail>
    </target>


    <target name="assure-build.dir">
	<mkdir dir="${build.dir}/jamud" />
	<mkdir dir="${build.dir}/com/jamud" />
    </target>   


    <target name="assure-lib.dir">
        <mkdir dir="${lib.dir}" />
    </target>


    <target name="assure-javadoc.dir">
        <mkdir dir="${docs.dir}" />
        <mkdir dir="${javadoc.dir}" />
    </target>


    <target name="create-tstamp">
        <tstamp>
	    <format property="version.build" pattern="yyyyMMdd" locale="en"/>
        </tstamp>
    </target>


    <target name="build" depends="assure-build.dir">
	<antcall target="build-core" />
	<antcall target="jar-core" />
	<antcall target="build-plugins" />
	<antcall target="jar-plugins" />
    </target>


    <target name="build-core" depends="assure-build.dir, find-nanoxml,
        create-tstamp">

	<echo file="${src.dir}/jamud/Version.java"><![CDATA[
	package jamud;
	
	/** Holder of version information.
	 *  generated by build.xml in target 'build-core'
	 */
	public abstract class Version {
	    public static final String
	        MAJOR = "${version.major}",
		MINOR = "${version.minor}",
		BUILD = "${version.build}";
	}]]>
	</echo>

        <javac srcdir="${src.dir}/jamud"
	    destdir="${build.dir}"
	    debug="${flags.debug}"
	    deprecation="${flags.deprecation}"
	    optimize="${flags.optimize}">
	    <classpath>
                <fileset dir="${lib.dir}" />
	    </classpath>
	</javac>
    </target>


    <target name="build-plugins" depends="assure-build.dir, find-jamud,
        find-nanoxml">

        <antcall target="build-plugin-communications" />
	<antcall target="build-plugin-connections" />
	<antcall target="build-plugin-creation" />
	<antcall target="build-plugin-commands" />
	<echo>build-plugins done</echo>
    </target>


    <target name="build-plugin-communications" depends="find-jamud,
        find-nanoxml">

        <javac srcdir="${src.dir}/com/jamud/communications"
            destdir="${build.dir}"
            debug="${debug}"
            deprecation="${flags.deprecation}"
            optimize="${flags.optimize}">
            <classpath>
                <fileset dir="${lib.dir}" />
            </classpath>
        </javac>
    </target>


    <target name="build-plugin-commands" depends="find-jamud, find-nanoxml">

        <javac srcdir="${src.dir}/com/jamud/commands"
            destdir="${build.dir}"
            debug="${debug}"
            deprecation="${flags.deprecation}"
            optimize="${flags.optimize}">

            <classpath>
                <fileset dir="${lib.dir}" />
            </classpath>
        </javac>
    </target>


    <target name="build-plugin-connections" depends="find-jamud">
        <javac srcdir="${src.dir}/com/jamud/connections"
            destdir="${build.dir}"
            debug="${debug}"
            deprecation="${flags.deprecation}"
            optimize="${flags.optimize}">
            <classpath>
		<fileset dir="${lib.dir}" />
            </classpath>
        </javac>
    </target>


    <target name="build-plugin-creation" depends="find-jamud">
        <javac srcdir="${src.dir}/com/jamud/creation"
            destdir="${build.dir}"
            debug="${debug}"
            deprecation="${flags.deprecation}"
            optimize="${flags.optimize}">
            <classpath>
                <fileset dir="${lib.dir}" />
            </classpath>
        </javac>
    </target>    


    <target name="jar" depends="assure-lib.dir">
        <antcall target="jar-core" />
	<antcall target="jar-plugins" />
    </target>


    <target name="jar-plugins">
        <delete quiet="true" file="${lib.dir}/${project}-plugins.jar" />

        <jar jarfile="${lib.dir}/${project}-plugins.jar"
            basedir="${build.dir}" >
	    <fileset dir="${build.dir}/com" />
	</jar>
    </target>


    <target name="jar-core">
        <delete quiet="true" file="${lib.dir}/${project}-core.jar" />

        <jar jarfile="${lib.dir}/${project}-core.jar"
            basedir="${build.dir}" >
	    <fileset dir="${build.dir}/jamud" />
	</jar>
    </target>


    <target name="javadoc" depends="assure-javadoc.dir, find-jamud,
        create-tstamp">

        <javadoc
            sourcepath="${src.dir}"
            packagenames="jamud.*, com.jamud.*"
            destdir="${javadoc.dir}"
            author="true"
            private="false"
            version="true"
            use="true"
            windowtitle="${name} ${version} (${version.build}) API"
            doctitle="${name} ${version} (${version.build}) API">
	    <classpath>
                <fileset dir="${lib.dir}" />
	    </classpath>
	    <bottom>
<![CDATA[
Copyright &#169 1999-2002, <a href='mailto:siege@jamud.com'>
Christopher (siege) O'Brien</a><br>

Released under the <a href='http://www.gnu.org/copyleft/gpl.html'>
GNU General Public License (GPL)</a><br>

Visit the JaMUD homepage at <a href='http://www.jamud.com/'>
http://www.jamud.com</a>
]]>
	    </bottom>
	</javadoc>
    </target>


    <target name="doc">
        <ant dir="${src.dir}/docs" />
    </target>


    <target name="run">
        <mkdir dir="ini/players" />

        <java fork="true" classname="jamud.Jamud">
	    <arg value="ini/jamud.xml" />
	    <classpath>
	        <fileset dir="${lib.dir}" />
	    </classpath>
	</java>
    </target>


</project>
