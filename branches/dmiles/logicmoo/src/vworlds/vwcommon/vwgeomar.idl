// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// vwgeomar.idl : IDL source for vwgeomar.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (vwgeomar.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWGeometryArticulated : Interface for object properties used to define and load geometry
// for objects with articulated characters. The interface inherits from IVWGeometry. The
// GeometryName property of that interface (a .x file ) defines the entire character skeleton
// and geometry. A motion file can then be applied to that skeleton defining how the skeletons
// joints will move in real-time. A motion file can also be referenced directly in the .x file.
// Please note that this code (though fully functional) has not been used in any release.
// These x files are a custom format which have to be created to use this code. Such x files
// will be made available upon request.
//
// IJoint : Interface to access each individual joint in the character skeleton. Each joint
// represents a number of degrees of freedom (each DOF can be thought of as a point about which
// the joint can translate or rotate (like a hinge) in one dimension). Each DOF can be limited
// (can only pivot between specified limits) or unconstrained. The integer type DOF parameters
// used by methods of this interface actually represent a bit flag which defines the type
// of DOF (see header).
//
// ICharacter : Represents the character itself and all its joints.
//
// IBehavior : Base interface for behaviors (motions).
//
// IPuppet : The only implemented behavior. This interface allows motions to be read from
// files and played. In most cases motions are added internally by the articulated geometry
// when the motion file is set. Motions are stored as animations/named gestures.
///////////////////////////////////////////////////////////////////////////////////////////////

cpp_quote("EXTERN_C const IID LIBID_VWGEOMARLib;")

	import "oaidl.idl";
	import "vwgeom.idl";

	interface IJoint;
	interface ICharacter;
	interface IBehavior;
	interface IPuppet;

	[
		object,
		uuid(4a197a40-27a0-11d2-b8e2-00104b72dba8),
		dual,
		local,
		helpstring("IVWGeometryArticulated Interface"),
		pointer_default(unique)
	]
	interface IVWGeometryArticulated : IVWGeometry
	{
		[propget, helpstring("Return the Character object")] 
		HRESULT Character([out, retval] ICharacter **ch);
		
		[propput, helpstring("Set the Character object")] 
		HRESULT Character([in] ICharacter *ch);

		[propput, helpstring("Set the motion file of the AG")] 
		HRESULT MotionFile([in] BSTR bstr);

		[propget, helpstring("Return the motion file")] 
		HRESULT MotionFile([out, retval] BSTR* pbstr);

		//This is a utility to create behaviors...
		[helpstring("Return a new behavior object")]
		HRESULT CreateBehavior([in] BSTR progID, [out, retval] IBehavior **behavior);
	};

	[
		object,
		uuid(30e14b80-fb03-11d1-b8e2-00104b72dba8),
		dual,
		local,
		helpstring("Joint Interface"),
		pointer_default(unique)
	]
	interface IJoint : IDispatch
	{
		[helpstring("Set the ID of the current Joint")]
		HRESULT SetID([in] int newID);
		[helpstring("Get the ID of this joint")]
		HRESULT GetID([out, retval] int *curID);
		[helpstring("get position of a degree of freedom")]
		HRESULT GetPosition([in] int DOF, [out] VARIANT *val);
		[helpstring("Set the position of a degree of freedom")]
		HRESULT SetPosition([in] int DOF, [in] double position);
		[helpstring("Set a degree of freedom of this joint (DO NOT update the geometry)")]
		HRESULT SetDOF([in] int DOF, [in] double position);
		[helpstring("Set the translation and rotation of the joint all at once.")]
		HRESULT SetState([in] double xt, [in] double yt, [in] double zt, [in] double xr, [in] double yr, [in] double zr);
		[helpstring("Set the limits on the degree of freedom")]
		HRESULT SetDOFLimit([in] int DOF, [in] double min, [in] double max);
		[helpstring("Set the limits on the degree of freedom")]
		HRESULT GetDOFLimit([in] int DOF, [out] VARIANT *min, [out] VARIANT *max);
		[helpstring("Unconstrain degree of freedom")]
		HRESULT UnconstrainDOF([in] int DOF);
		[helpstring("Add degree of freedom")]
		HRESULT AddDOF([in] int DOF);
		[helpstring("SetParentOffset")]
		HRESULT SetParentOffset([in] double x, [in] double y, [in] double z);
		[helpstring("GetParentOffset")]
		HRESULT GetParentOffset([out] VARIANT *x, [out] VARIANT *y, [out] VARIANT *z);
		[helpstring("AddChild")]
		HRESULT AddChild([in] IJoint *ij);
		[helpstring("Return the number of children")]
		HRESULT ChildCount([out, retval] int *num);
		[helpstring("GetChild")]
		HRESULT GetChild([in] int jointID, [out, retval] IJoint **ij);
		[helpstring("SetParent")]
		HRESULT SetParent([out, retval] IJoint *ij);

		[helpstring("Update the geometry by calling the callback function")]
		HRESULT UpdateGeometry();
		[helpstring("Returns the generic joint data appdata")]
		HRESULT GetAppData([out, retval] void**);
		[helpstring("Sets the generic joint data appdata")]
		HRESULT SetAppData([in] void*);
		[helpstring("Destroy this joint and all its children")]
		HRESULT Destroy();

		[helpstring("Get the number of degrees of freedom associated with this joint.")]
		HRESULT GetNumDOFs([out, retval] int *count);

		[helpstring("Return the degrees of freedom of the current joint")]
		HRESULT GetDOFs([out, retval] int *dofs);

		[helpstring("Return an array indicating the ordering of the joints.")]
		HRESULT GetOrderDOFs([out, retval] int **dofs);
	};

	[
		object,
		uuid(f941cb00-fb02-11d1-b8e2-00104b72dba8),
		dual,
		local,
		helpstring("Character Interface"),
		pointer_default(unique)
	]
	interface ICharacter : IDispatch
	{
		[propput, helpstring("Put_Name")]
		HRESULT Name([in] BSTR *bstrName);
		[propget, helpstring("GetName")]
		HRESULT Name([out, retval] BSTR **bstrName);
		[helpstring("Joint name to ID")]
		HRESULT JointNameToID([in] BSTR bstrName, [out, retval] long *jointID);
		[helpstring("Parameter name to ID")]
		HRESULT ParameterNameToID([in] BSTR bstrName, [out] long *jointID);
		[helpstring("GetJoint")]
		HRESULT GetJoint([in] long jointID, [out, retval] IJoint **ij);
		[helpstring("Add joint")]
		HRESULT AddJoint([in] IJoint *ij);
		[helpstring("Return the number of joints")]
		HRESULT JointCount([out, retval] int *num);
		[helpstring("Delete joint")]
		HRESULT DeleteJoint([in] long jointID);
		[helpstring("PutGUID")]
		HRESULT PutGuid([in] long guid);
		[helpstring("Get GUID")]
		HRESULT GetGUID([out, retval] long *guid);
		[helpstring("Returns the total number of degrees of freedom in the character")]
		HRESULT GetNumDOFs([out] int *num);

		//Stuff I'm adding...
		[helpstring("Return the root Joint of the joint hierarchy")]
		HRESULT GetRoot([out, retval] IJoint **ij);
		[propget, helpstring(" return the Behavior")]
		HRESULT Behavior([out, retval] IBehavior **behave);
		[propput, helpstring("Set the behavior of the character")]
		HRESULT Behavior([in] IBehavior *behave);

		[helpstring("Destroy the character")]
		HRESULT Destroy();

	};

	[
		object,
		uuid(c4f48640-05d8-11d2-b8e2-00104b72dba8),
		dual,
		local,
		helpstring("The basic IBehavior Interface"),
		pointer_default(unique)
	]
	interface IBehavior : IDispatch
	{
		[propput, helpstring("Put a character")]
		HRESULT Character([in] ICharacter *ch);

		[propget, helpstring("Get the character")]
		HRESULT Character([out, retval] ICharacter **ch);

		[helpstring("Return the current time")]
		HRESULT GetTime([out, retval] float *t);

		[helpstring("Update the frame by Time")]
		HRESULT EvaluateToTime([in] float t);

		[helpstring("Reset the character")]
		HRESULT Reset();

		[helpstring("Update")]
		HRESULT Update([in] void *arg);
	};


//I'm not sure if puppet is a good name or not, but we'll go with it for now.
	[
		object,
		uuid(c6a76660-05d8-11d2-b8e2-00104b72dba8),
		dual,
		local,
		helpstring("Behavior subclass which plays pre-defined motions from files: puppet"),
		pointer_default(unique)
	]
	interface IPuppet : IBehavior
	{

		[helpstring("Next Frame")]
		HRESULT NextFrame();

		[helpstring("Start animation")]
		HRESULT Start();

		[helpstring("Stop animation")]
		HRESULT Stop();

		[helpstring("Update the frame")]
		HRESULT SetFrame([in] float frameNum);

		[helpstring("Add a motion from a file")]
		HRESULT AddMotion([in] BSTR filename);

		[propput, helpstring("Set the current animation")]
		HRESULT Animation([in] int animNum);

		[propget, helpstring("Get the current animation index")]
		HRESULT Animation([out, retval] int *animNum);

		[helpstring("Set the animation speed")]
		HRESULT SetFPS([in] float newFPS);

		[helpstring("Get the current animation speed")]
		HRESULT GetFPS([out, retval] float *oldFPS);

		[helpstring("Return the index of the gesture")]
		HRESULT GetGestureIndex([in] BSTR gestureName, [out, retval] int *ind);

		[helpstring("Get the gesture text of the associated gesture index")]
		HRESULT GetGestureText([in] int index, [out, retval] BSTR *text);

		[helpstring("Set the current position as the rest pose of the puppet")]
		HRESULT SetRestPose();
	};


#ifdef VWGEOMARLIB
[
	uuid(E59063E1-9611-11D0-8AC3-00A0C90A6BFC),
	version(1.0),
	helpstring("vwgeomar 1.0 Type Library")
]
library VWGEOMARLib
{
	importlib("stdole32.tlb");
//	importlib("stdole2.tlb");

	[
		uuid(E59063EF-9611-11D0-8AC3-00A0C90A6BFC),
		helpstring("VWGeometryArticulated Class")
	]
	coclass VWGeometryArticulated
	{
		[default] interface IVWGeometryArticulated;
	};
//Joints
	[
		uuid(25a580a0-013a-11d2-b8e2-00104b72dba8),
		helpstring("Joint Class")
	]
	coclass Joint
	{
		[default] interface IJoint;
	};
//Characters
	[
		uuid(12867ba0-013a-11d2-b8e2-00104b72dba8),
		helpstring("Character Class")
	]
	coclass Character
	{
		[default] interface ICharacter;
	};
	[
		uuid(ed4613a0-06ac-11d2-b8e2-00104b72dba8),
		helpstring("Behavior Class")
	]
	coclass Behavior
	{
		[default] interface IBehavior;
	};
	[
		uuid(eddeaa20-06ac-11d2-b8e2-00104b72dba8),
		helpstring("Puppet")
	]
	coclass Puppet
	{
		[default] interface IPuppet;
	};
#endif
