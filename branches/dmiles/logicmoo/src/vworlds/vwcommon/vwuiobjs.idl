// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// VWUIObjs.idl : IDL source for IVWUITool, IVWUIView, IVWControlManager
// Issues: 
//  Does IVWUIView need finer-grained SelectionList notification methods?
//

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWUITool : Interface to allow a set of tools with a common interface (this interface)
// to be registered with a UI view to receive a specified set of UI (windows) related events/
// messages in a specific order.
//
// IVWUIView : The interaface for the UI view. Allows UI tools to be added to the view
// to receive events/messages. Interface is also used within the UI tools to gain information
// regarding the UI view which sent them a particular event/message.
//
// IVWControlManager : This interface allows objects to be added and removed from a selection
// list. It is normally used when performing geometry editing in a window associated with a 
// UI view as different geometry objects in a scene are being selected.
//
// IVWUndoItem : Interface to support 'undo' editing logic. Not currently used.
//
// IVWUndoStacks : Interface to support 'undo' editing logic. Not currently used.
//
// IVWExecuteUndo : Interface to support 'undo' editing logic. Not currently used.
//
// IVWUIEvents : Interface to be implemented by objects requiring to be notified primarily
// of control manager related events (i.e. changes to the list of selected geometry objects).
// NOTE: This notification mechanism is connection point based. The object
// firing the events will implement the IConnectionPointContainer interface. The object
// requiring notification of these events must find and the IConnectionPointContainer
// interface on the object firing them. See MS help on IConnectionPointContainer and
// IConnectionPoint for further information.
///////////////////////////////////////////////////////////////////////////////////////////////

import "vwobject.idl";
import "vwrender.idl";

interface IVWUIView;
interface IVWControlManager;
interface IVWUndoStacks;
interface IVWExecuteUndo;
interface IVWUndoItem;

import "objidl.idl"; // for proxy/stub marshalling support

cpp_quote("#define HITTEST_RETURNALLPICKED 0x1")
cpp_quote("#define HITTEST_VERTEXSELECT 0x2")

	[
		object,
		uuid(9B154135-E2E9-21CF-6299-445368617270),
		dual,
		helpstring("IVWUITool Interface"),
		pointer_default(unique)
	]

	interface IVWUITool : IDispatch
	{
		import "oaidl.idl";

		[restricted, helpstring("")]
		HRESULT Terminate(void);

		[helpstring("Initialize's tool with UIView, world, and renderroot pointer.")] 
		HRESULT Initialize( [in] IVWUIView *pVw, [in] IWorld* pWorld, [in] IVWRenderRoot *pVWRenderRoot);
		[helpstring("Tells tool it's becoming the active.")] 
		HRESULT OnToolActivate( [in] VARIANT varHint );
		[helpstring("Tells tool that it should finish it's work immeditately.")] 
		HRESULT OnToolChanging( [in] VARIANT varHint );
		[helpstring("Handle messages.")] 
		HRESULT OnMessage([in] IVWUIView *pVw, [in] unsigned int message,[in] WPARAM wParam , [in]LPARAM lParam, [out, retval] VARIANT_BOOL *pbHandled );
		[helpstring("Is tool valid on its current UIView? Tool may need to check SelectionList or Interfaces of UIView.")] 
		HRESULT IsValid( [in] IVWUIView *pVw, [out, retval] VARIANT_BOOL* pbool);
		[local, helpstring("Set the current cursor for the tool.")] 
		HRESULT SetCursor( [in] IVWUIView *pVWUIView, [in] HCURSOR hCursor);

		[helpstring("Called during rendering to allow navigation and keyboard polling.")]
		HRESULT Update();

		[helpstring("UIEvent handler.")]
		HRESULT OnUIEvent([in] IThing* pthing, [in] BSTR bstrEventName, [in] VARIANT varArg, [in] BOOL bFromClient);

	}


	[
		object,
		uuid(9B394145-C3E9-21EF-6299-445368617270),
		dual,
		helpstring("IVWUIView Interface"),
		pointer_default(unique)
	]

	interface IVWUIView : IDispatch
	{
		import "oaidl.idl";

		// UITool properties and methods
		// Load UITools
		[local, helpstring("Loads a UITool by CLSID and gives it a name.")] 
		HRESULT LoadUIToolByCLSID([in] REFCLSID clsidUITool, [in] BSTR bstrUIToolName);
		[helpstring("Loads a UITool by ProgID and gives it a name.")] 
		HRESULT LoadUIToolByProgID([in] BSTR bstrUITool, [in] BSTR bstrUIToolName);

		// Manipulate CurrentUITool list.
		[helpstring("Adds UITool to front of UITool list, given name of the tool.")] 
		HRESULT AddCurrentUITool([in] BSTR bstrName);
		[helpstring("Removes a current UITool, given name of the tool or removes all if bstrName == NULL or empty string.")] 
		HRESULT RemoveCurrentUITool([in] BSTR bstrName);

		// Access Curent and Loaded UITool lists.
		[propget, helpstring("Get list of UItools receiving event stream.")] 
		HRESULT CurrentUIToolList([out, retval] IPropertyList** ppPL);
		[propget, helpstring("Get propertymap of UItools loaded in this IVWUIView.")] 
		HRESULT LoadedUIToolMap([out,retval]IPropertyMap **ppPM);
		[propget, helpstring("Get a loaded UItools by name.")] 
		HRESULT LoadedUITool([in] BSTR bstrName,[out,retval]IVWUITool **ppUITool);

		// Get Current and Loaded UITools names in propertylist.
		[propget, helpstring("Get name list of CurrentUItools.")] 
		HRESULT CurrentUIToolNameList([out, retval] IPropertyList** ppPL);
		[propput, helpstring("Puts name list of CurrentUItools. This clears CurrentUITool list and builds new one. Returns error if a name isn't found in LoadedUITool map.")] 
		HRESULT CurrentUIToolNameList([in] IPropertyList* pPL);

		// HitTest method
		[helpstring("Returns object(s) hit, given a Point or Rect input. Multiple objects returned in PropertyList.")]
		HRESULT HitTest([in] VARIANT varHitParams, [in] long nFlags, [out] VARIANT *pvarHitResult);

		// Transform from device to World coords
		[helpstring("Transform device coords to cood system of View..")]
		HRESULT DeviceToWorld([in,out] float *pflX, [in,out] float *pflY, [in,out] float *pflZ );

		// TargetObjectProperty property	
		[propput, helpstring("Put Current root ObjectProperty for ViewControl")] 
		HRESULT TargetObjectProperty([in]IObjectProperty *pOP);
		[propget, helpstring("Get Current root objectProperty from ViewControl")] 
		HRESULT TargetObjectProperty([out,retval]IObjectProperty **ppOP);

		// HWND property
		[local, propget, helpstring("Get HWND of ViewControl")] 
		HRESULT HWND([out,retval]HWND *pHWND);

		// ControlManager property.
		[propget, helpstring("Get ControlManager from IVWUIView.")] 
		HRESULT ControlManager([out,retval]IVWControlManager **ppCM);

		// OptionalSelection dialog
		[helpstring("Gives the view an opportunity to display a selection dialog, based on varSelection")]
		HRESULT OptionalSelection( [in] VARIANT varSelection );
	};	

// Studio HRESULT codes

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  We start our codes at 0x800.

cpp_quote("#define VWSTUDIO_E_INVALIDSELECTION			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0801)")
cpp_quote("#define VWSTUDIO_E_BADTOOLINITIALIZATION		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0803)")
cpp_quote("#define VWSTUDIO_E_BADCONTROLINITIALIZATION	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0804)")
cpp_quote("#define VWSTUDIO_E_UNDOSTACKSINVALID			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0805)")
cpp_quote("#define VWSTUDIO_E_CANTADDUNDOITEM			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0806)")
cpp_quote("#define VWSTUDIO_E_INVALIDMETHOD				MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0808)")
cpp_quote("#define VWSTUDIO_E_INVALIDLOADEDUITOOLNAME	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0809)")
cpp_quote("#define VWSTUDIO_E_NOCURRENTUITOOL			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x080a)")
cpp_quote("#define VWSTUDIO_S_IGNORESELECTION			MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 0x080b)")
cpp_quote("#define VWSTUDIO_S_ALREADYSELECTED			MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 0x080c)")

// The following objects are mainly used by Studio and Tools that are undoable or use the SelectionList.



	[
		object,
		uuid(C31AA440-9580-11d0-89A9-00A0C9054129),
		dual,
		helpstring("IVWControlManager Interface"),
		pointer_default(unique)
	]
	interface IVWControlManager : IDispatch
	{
		// Easy-access automation properties for ControlManager's SelectionList and UndoStack.
		[propget, helpstring("Get Selection List from ControlManager.")] 
		HRESULT SelectionList([out,retval]IPropertyList **ppPL);
		[propget, helpstring("Returns pointer to UndoStack.")] 
		HRESULT UndoStack([out, retval] IVWUndoStacks** ppVWUndoStack);

		[propget, helpstring("Get World from ControlManager.")] 
		HRESULT World([out,retval] IWorld ** ppWorld);
		[restricted, propput, helpstring("Put World to ControlManager.")] 
		HRESULT World([in] IWorld * pWorld);

		// Undo/Redo Methods.
		[helpstring("Puts a new UndoItem on the ToolManager's Undo stack.")] 
		HRESULT AddVWUndoItem([in] IVWUndoItem * pVWUndoItem);
		[helpstring("Undo editing operation.")]
		HRESULT Undo( void );
		[helpstring("Redo editing operation.")]
		HRESULT Redo( void );

		// ErrorTool method
		[helpstring("Display error.")]
		HRESULT DisplayError(HRESULT hr, VARIANT_BOOL *pbHandled);

		// Selection methods
		[helpstring("Clears selection and selects the varSel objects.")] 
		HRESULT Select( [in] VARIANT varSel );

		[restricted, helpstring("Add a selected item to selection list.")] 
		HRESULT AddSelectionExt( [in] IVWUIView * pVw, [in] VARIANT varSel );
		[helpstring("Add a selected item to selection list.")] 
		HRESULT AddSelection( [in] VARIANT varSel );

		[helpstring("Remove a selected item from selection list.")] 
		HRESULT RemoveSelectionExt( [in] IVWUIView * pVw, [in] VARIANT varSel );
		[helpstring("Remove a selected item from selection list.")] 
		HRESULT RemoveSelection( [in] VARIANT varSel );

		[restricted, helpstring("Toggle a selected item in selection list. Select it if it is not, remove it if it is selected.")] 
		HRESULT ToggleSelectionExt( [in] IVWUIView * pVw, [in] VARIANT varSel );
		[helpstring("Toggle a selected item in selection list. Select it if it is not, remove it if it is selected.")] 
		HRESULT ToggleSelection( [in] VARIANT varSel );
		
		[restricted, helpstring("Clear all items from selection list.")] 
		HRESULT ClearSelectionsExt( [in] IVWUIView * pVw  );
		[helpstring("Clear all items from selection list.")] 
		HRESULT ClearSelections( void );
		
		[restricted, helpstring("Refresh the objects in all views.")] 
		HRESULT RefreshObjects(  [in] IVWUIView * pVw, [in] VARIANT varRefresh  );
		[restricted, helpstring("Refresh the objects in one view.")] 
		HRESULT RefreshObjectsInView(  [in] IVWUIView * pVw, [in] VARIANT varRefresh  );
		[restricted, helpstring("Refresh (repaint) a view or all views.")] 
		HRESULT RefreshView(  [in] IVWUIView * pVw, [in] VARIANT varHint, [in] VARIANT_BOOL varRefreshAllViews  );
		
		[local, helpstring("Get the number of pIID-type items selected.")] 
		HRESULT GetSelectedCount([in]  IID* pIID, [out, retval] long* nCount );

		[helpstring("Returns whether or not property is on the selection list.")] 
		HRESULT IsSelected([in] IObjectProperty* pObjProp, [out, retval] VARIANT_BOOL* vbSelected );
		
		[helpstring("Returns whether or not boundary is in selection list.")] 
		HRESULT IsBoundarySelected([in] IThing* pThing, [in] int nBoundaryIndex, [out, retval] VARIANT_BOOL* vbSelected );
		
		[helpstring("Returns whether or not vertex of boundary/geometry is selected in selection list.")] 
		HRESULT IsVertexSelected([in] IObjectProperty* pObjProp, [in] int nIndex, [out, retval] VARIANT_BOOL* vbSelected );
		
		[helpstring("Returns whether or not vertex of boundary/geometry is selected in selection list.")] 
		HRESULT IsAnyVertexSelected([in] IObjectProperty* pObjProp, [out, retval] VARIANT_BOOL* vbSelected );

		// Clipboard methods
		[propget, helpstring("Get clipboard property list.")] 
		HRESULT Clipboard([out,retval] IPropertyList **ppPL);
		[helpstring("Copies given object(s) to the clipboard.")] 
		HRESULT Copy([in] IObjectProperty* pObjProp);
		[helpstring("Paste object(s) from clipboard to the given object.")] 
		HRESULT Paste([in] IObjectProperty* pObjProp);

	}

	[
		object,
		uuid(90A54235-EAE9-21CF-6669-445348677270),
		dual,
		helpstring("IVWUndoItem Interface"),
		pointer_default(unique)
	]
	interface IVWUndoItem : IDispatch
	{
		import "oaidl.idl";

		[helpstring("Undo the last editing action.")] 
		HRESULT Undo( void );
		[helpstring("Redo the last editing action.")] 
		HRESULT Redo( void );
		// Label property
		[propput,helpstring("String describing the editing action: Translate, Delete.")] 
		HRESULT Label( [in] BSTR bstr );
		[propget,helpstring("String describing the editing action: Translate, Delete.")] 
		HRESULT Label( [out, retval] BSTR* pbstr );
		//UndoData property
		[propput, helpstring("Data holding Undo/Redo state info. Can be pointer to buffer.")] 
		HRESULT UndoData([in]VARIANT varUndo);
		[propget,helpstring("Data holding Undo/Redo state info. Can be pointer to buffer.")] 
		HRESULT UndoData( [out, retval] VARIANT *pvarUndo );
		//RedoData property
		[propput, helpstring("Data holding Redo info.  Can be pointer to buffer.")]
		HRESULT RedoData([in]VARIANT varRedo);
		[propget, helpstring("Data holding Redo info.  Can be pointer to buffer.")]
		HRESULT RedoData( [out, retval] VARIANT *pvarRedo );
		//UndoTarget property
		[propput, helpstring("Target of Undo/Redo operation. Can be PropertyList for multiple objects.")] 
		HRESULT UndoTarget([in]VARIANT varTarg);
		[propget, helpstring("Target of Undo/Redo operation. Can be PropertyList for multiple objects.")] 
		HRESULT UndoTarget([out,retval]VARIANT *pvarTarg);
		//ExecuteUndo property
		[propput, helpstring("Object which will perform undo/redo operations.")] 
		HRESULT ExecuteUndo([in]IVWExecuteUndo * pexun);
		[propget, helpstring("Object which will perform undo/redo operations.")] 
		HRESULT ExecuteUndo([out,retval]IVWExecuteUndo ** ppexun);
		//UndoHints property
		[propget, helpstring("Used for extra info about undo item such as begin/end group")] 
		HRESULT UndoHints([out, retval] int* ival);
		[propput, helpstring("Used for extra info about undo item such as begin/end group")] 
		HRESULT UndoHints([in] int ival);
	};	
				   

	[
		object,
		uuid(92A54231-EAE9-21CF-6669-441313677270),
		dual,
		helpstring("IVWUndoStacks Interface"),
		pointer_default(unique)
	]
	interface IVWUndoStacks : IObjectProperty
	{
		import "oaidl.idl";
		[helpstring("Call Redo on item on top of Redo stack and move it to Undo stack.")] 
		HRESULT Redo( void );
		[helpstring("Call Undo on item on top of Undo stack and move it to redo stack.")] 
		HRESULT Undo( void );

		[helpstring("Puts a new UndoItem on the Undo stack.")] 
		HRESULT AddVWUndoItem([in] IVWUndoItem * pVWUndoItem);
		[helpstring("Flush the undo and redo stacks.")] 
		HRESULT Flush(  void );
		[propput, helpstring("Sets the size of the undo stack.")] 
		HRESULT SizeUndoStack([in]unsigned int nItems);
		[propget, helpstring("Gets the size of the undo stack.")] 
		HRESULT SizeUndoStack([out,retval]unsigned int *pnItems);
		[propget,helpstring("String describing the Undo editing action: Translate, Delete.")] 
		HRESULT UndoLabel( [out, retval] BSTR* pbstr );
		[propget,helpstring("String describing the Redo editing action: Translate, Delete.")] 
		HRESULT RedoLabel( [out, retval] BSTR* pbstr );
	};	
	
	[
		object,
		uuid(92B54331-EA59-21CF-6669-443343477270),
		dual,
		helpstring("IVWExecuteUndo Interface"),
		pointer_default(unique)
	]
	interface IVWExecuteUndo : IDispatch
	{
		import "oaidl.idl";

		[helpstring("Performs Undo.")] 
		HRESULT Undo([in]IVWUndoItem * pundo);
		[helpstring("Performs Redo.")] 
		HRESULT Redo([in]IVWUndoItem * predo);
	};	
	
		typedef 
	[
		uuid(01330D82-113F-11d0-89C9-01A1C9054129),
		helpstring("enumVWUIEventTypes")
	]
	enum enumVWUIEventTypes
	{
		[helpstring("")] VWUIT_ADDSELECTION = 0,
		[helpstring("")] VWUIT_REMOVESELECTION = 1,
		[helpstring("")] VWUIT_TOGGLESELECTION = 2,
		[helpstring("")] VWUIT_CLEARSELECTIONS = 3,
		[helpstring("")] VWUIT_REFRESHOBJECTS = 4,
		[helpstring("")] VWUIT_REFRESHVIEW = 5,
		[helpstring("")] VWUIT_UNDOSTACKCHANGED = 6
	} enumVWUIEventTypes;

	typedef
	[
		uuid(10524604-459A-11d1-88A7-00C04FC32EF3),
		helpstring("enumVWUIUndoHints")
	]
	enum enumUndoHint
	{
		[helpstring("")] NONE = 0,
		[helpstring("")] BEGIN_UNDO_GROUP = 1,
		[helpstring("")] END_UNDO_GROUP = 2,
	} enumUndoHint;

	[
		object,
		uuid(5E6FB8A0-995E-11d0-89A9-00A0C9054129),
		dual,
		helpstring("IVWUIEvents Interface"),
		pointer_default(unique)
	]
	interface IVWUIEvents : IDispatch
	{
		import "oaidl.idl";

		[helpstring("Notify all connected IVWUIView's to update.")] 
		HRESULT OnUIUpdate( int iEventType, IVWUIView * pVw, VARIANT varHint, VARIANT_BOOL vbOnlyRefreshSource );
	};	
				   
