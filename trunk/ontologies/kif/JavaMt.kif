(:MT BaseKB)
(isa JavaMt TheoryMicrotheory)
(not (isa JavaMt DataMicrotheory))

(:MT JavaMt)
(:SET :FORWARD)

;; Create upperlevel types for datum
(isa JavaObjectInstance Collection)
(isa ClassInstance Collection)
(isa JavaPrimitiveValue Collection)
(isa JavaContainedSet Collection)

;; Hook into Cyc's ontology
(genls JavaObjectInstance Individual)
(genls ClassInstance Collection)
(genls JavaPrimitiveValue MathematicalObject)
(genls JavaContainedSet SetOrCollection)

(isa JavaMethodName Collection)



;; Mass the four upper types into JavaValueComparable
(comment JavaValueComparable "Amassed of four upper types into JavaValueComparable")
(isa JavaValueComparable Collection)

;;(partitionedInto JavaValueComparable 
;;       (ThePartition JavaObjectInstance ClassInstance JavaPrimitiveValue JavaContainedSet))

(genls JavaObjectInstance JavaValueComparable)
(genls ClassInstance JavaValueComparable)
(genls JavaPrimitiveValue JavaValueComparable)
(genls JavaContainedSet JavaValueComparable)


;; Further split JavaPrimitiveValue Collection
(isa ClassInstance CollectionType)
(isa ClassInstance SecondOrderCollection)
(genls ClassInstance Collection)
(isa ClassInstance Collection)

(isa intValue Collection)
(comment intValue "Collection for java's primitive int type")
(genls intValue JavaPrimitiveValue)

(isa booleanValue Collection)
(comment booleanValue "Collection for java's primitive boolean type")
(genls booleanValue JavaPrimitiveValue)

(isa doubleValue Collection)
(comment doubleValue "Collection for java's primitive double type")
(genls doubleValue JavaPrimitiveValue)

(isa floatValue Collection)
(comment floatValue "Collection for java's primitive float type")
(genls floatValue JavaPrimitiveValue)

(isa charValue Collection)
(comment charValue "Collection for java's primitive char type")
(genls charValue JavaPrimitiveValue)

(isa longValue Collection)
(comment longValue "Collection for java's primitive long type")
(genls longValue JavaPrimitiveValue)

;;(partitionedInto JavaPrimitiveValue 
;;       (ThePartition longValue intValue booleanValue doubleValue floatValue charValue voidInstance))


;; Further split JavaObjectInstance Collection
(isa StringInstance Collection)
(isa LongInstance Collection)
(isa IntegerInstance Collection)
(isa BooleanInstance Collection)
(isa ClassInstance Collection)

;;(partitionedInto JavaObjectInstance 
;;       (ThePartition LongInstance StringInstance BooleanInstance DoubleInstance FloatInstance CharInstance ClassInstance))


(genls StringInstance JavaObjectInstance)
(genls LongInstance JavaObjectInstance)
(genls IntegerInstance JavaObjectInstance)
(genls BooleanInstance JavaObjectInstance)
;; (genls ClassInstance JavaObjectInstance)

;; Define ClassInstance from ClassInstance and JavaPrimitiveType
(genls ClassInstance ClassInstance)

(isa JavaPrimitiveType Collection)
(isa JavaNonPrimitiveType Collection)
(isa JavaReferenceType Collection)
(isa JavaInstanceType Collection)

(genls JavaPrimitiveType ClassInstance)
(genls JavaNonPrimitiveType ClassInstance)
(genls JavaReferenceType JavaNonPrimitiveType)
(genls JavaInstanceType JavaNonPrimitiveType)

;; semi-hook in types?
(genls StringInstance TextString)


;; Define accessors to Objects
(isa JavaSlot PredicateCategory)
(genls JavaSlot FunctionalSlot)

(isa JavaMethod Collection)

;; Building a JavaMethod


(isa JavaMethodFn VariableArityFunction)
(comment JavaMethodFn 
    "(JavaMethodFn ?StringInstance ?Arg1 ?Arg2 ...)  evaluates into an instance of Java's 'Method' Object in Cyc 'JavaMethod'")
(arityMin JavaMethodFn 1)
(arg1Isa JavaMethodFn JavaMethodName)
(resultIsa JavaMethodFn JavaMethod)


;; Declared from Java for classes

(isa relationAllExists TernaryPredicate)
(comment relationAllExists "(relationAllExists ?JavaSlot ?ClassInstance ?ClassInstance)  Data stored tuple for knowing thats a ?ClassInstance has a particular ?JavaSlot returning ?ClassInstance")
(arg1Isa relationAllExists JavaSlot)
(arg2Isa relationAllExists ClassInstance)
(arg3Isa relationAllExists ClassInstance)

(isa hasJavaMethod TernaryPredicate)
(comment hasJavaMethod  "(hasJavaMethod ?ClassInstance ?JavaMethod ?ClassInstance)  Data stored tuple for knowing thats a ?ClassInstance has a particular ?JavaMethod returning ?ClassInstance JavaMethods are derived with a (#$JavaMethodFn ?MethodName ?arg1 ?arg2)")
(arg1Isa hasJavaMethod ClassInstance)
(arg2Isa hasJavaMethod JavaMethod)
(arg3Isa hasJavaMethod ClassInstance)

;; Data holding
(isa javaArrayContains TernaryPredicate) 
(comment javaArrayContains "#$TernaryPredicate for declared JavaContainedSet members")
(arg1Isa javaArrayContains JavaContainedSet)
(arg2Isa javaArrayContains PositiveInteger)
(arg3Isa javaArrayContains JavaValueComparable)

(isa hasSlotValue TernaryPredicate) 
(comment hasSlotValue "#$TernaryPredicate for declared JavaObjectInstance SlotValue values")
(arg1Isa hasSlotValue JavaObjectInstance)
(arg2Isa hasSlotValue JavaSlot)
(arg3Isa hasSlotValue JavaValueComparable)

;; Comparing Data with JavaEqualEnough

(isa JavaEqualEnough BinaryPredicate)
(comment JavaEqualEnough "#$BinaryPredicate for comparison strategies against two #$JavaValueComparables (specializing #$equals)")
(genlPreds JavaEqualEnough equals)
(arg1Isa JavaEqualEnough JavaValueComparable)
(arg2Isa JavaEqualEnough JavaValueComparable)

(isa sameMemberships BinaryPredicate)
(comment sameMemberships "#$BinaryPredicate for comparison strategies against two #$JavaContainedSet (specializing #$setOrCollectionsCoextensional)")
;;(genlPreds sameMemberships setOrCollectionsCoextensional)
(arg1Isa sameMemberships JavaContainedSet)
(arg2Isa sameMemberships JavaContainedSet)


(implies
  (and
        (isa ?X JavaPrimitiveValue)
        (isa ?Y JavaPrimitiveValue)
        (equals ?X ?Y))
  (JavaEqualEnough ?X ?Y))

;; Compared by Reification
(implies
  (and
        (isa ?X JavaObjectInstance)
        (isa ?Y JavaObjectInstance)
        (equals ?X ?Y))
  (JavaEqualEnough ?X ?Y))


;; Compared by subclassing
(implies
  (and
        (isa ?X ClassInstance)
        (isa ?Y ClassInstance)
        (or 
        (genls ?X ?Y)
        (genls ?Y ?X)))
  (JavaEqualEnough ?X ?Y))


;; Compared by Sets
(implies
  (and
        (isa ?X JavaContainedSet)
        (isa ?Y JavaContainedSet)
        (sameMemberships ?X ?Y))
  (JavaEqualEnough ?X ?Y))




;; Assist in the tractablity of JavaPrimitiveTypes/Values
(equiv
        (genls ?Collection JavaPrimitiveValue)
        (isa ?Collection JavaPrimitiveType))

;; Assist in the Expansion of JavaObjectInstance Types
(equiv
        (genls ?Collection JavaObjectInstance)
        (isa ?Collection ClassInstance))
        

