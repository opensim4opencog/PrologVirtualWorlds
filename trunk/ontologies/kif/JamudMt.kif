
(:SET :FORWARD)
(:SET :MONOTONIC)

(:MT BaseKB)

(isa ReifiedMicrotheory MicrotheoryType)
(genls ReifiedMicrotheory DataMicrotheory)


(isa NpcAgentCollection Collection)
(isa ArtifactTypeCollection  Collection)
(isa NpcAgentCollection SecondOrderCollection)
(isa ArtifactTypeCollection  SecondOrderCollection)

(implies 
  (isa ?X NpcAgentCollection)
  (isa ?X FirstOrderCollection))

(implies 
  (isa ?X ArtifactTypeCollection)
  (isa ?X FirstOrderCollection))

(genlMt JamudMt FixedStructureMt)
(genlMt JamudMt HumanActivitiesMt)
(genlMt JamudMt BuildingMt)
;;(genlMt JamudMt EverythingPSC)

(implies
  (and
	(genlMt ?Mt EverythingPSC)
	(isa ?Mt2 Microtheory))
   (genlMt ?Mt ?Mt2))

;;(minimizeExtent thinksProbable)
(minimizeExtent ist)
;;(minimizeExtent authorityForMt)

(implies
    (and
	(authorityForMt ?Who ?Mt)
	(ist ?Mt ?What))
	(beliefs ?Who ?What))
	
	   
(isa in-ContGeneric BinaryPredicate)

												   
;;(isa JamudMt HypothicalMicrotheory)

;;(implies 
;;	(isa ?Agent IntelligentAgent)
;;	(thereExists ?Mt
;;	  (and
;;		(isa ?Mt Microtheory)
;;		(isa ?Mt PlanBackgroundContext)
;;		(authorityForMt ?Agent ?Mt))))

(:MT JamudMt)
			  

(implies 
       (and 
           (authorityForMt ?WHO ?MT) 
           (ist ?MT 
               (implies ?THIS ?THAT))) 
       (thinksProbable ?WHO 
           (causes-PropProp ?THIS ?THAT)))

(implies 
       (and 
           (authorityForMt ?WHO ?MT) 
           (genlMt ?MT ?MT2)) 
   (authorityForMt ?WHO ?MT2))


(arity PronounFn 4)

(isa nextNpcCommand BinaryPredicate)

(genls MudDescriptivePredicate MudPredicate )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
;; RegionalAttribute
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   


(isa RegionalAttribute ObjectType) 
(genls RegionalAttribute AttributeValue) 
(isa DarkMudAreaAttribute RegionalAttribute)
(isa DeathMudAreaAttribute RegionalAttribute)
(isa NoMobMudAreaAttribute RegionalAttribute)
(isa PeacefullMudAreaAttribute RegionalAttribute)
(isa SoundProofMudAreaAttribute RegionalAttribute)
(isa NoTrackMudAreaAttribute RegionalAttribute)
(isa NoMagicMudAreaAttribute RegionalAttribute)
(isa PrivateMudAreaAttribute RegionalAttribute)
(isa GodOnlyMudAreaAttribute RegionalAttribute)
(isa HouseCrashMudAreaAttribute RegionalAttribute)
(isa OLCMudAreaAttribute RegionalAttribute)
(isa BFSMarkMudAreaAttribute RegionalAttribute)
													


(isa SwimmingAreaAttribute RegionalAttribute)
(isa FlyingAreaAttribute RegionalAttribute)

(isa UnderwaterLocation RegionType)
(genls UnderwaterLocation OutdoorLocation)
                                      

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
;; FUNCTION ObjectLocatedInWithWordFn
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
(isa ObjectLocatedInWithWordFn  ReifiableFunction ) 
(isa ObjectLocatedInWithWordFn IndividualDenotingFunction ) 
(arity ObjectLocatedInWithWordFn 2)
(and
    (resultIsa ObjectLocatedInWithWordFn PartiallyTangible) 
    (arg1Isa ObjectLocatedInWithWordFn PartiallyTangible)
    (arg2Isa ObjectLocatedInWithWordFn AbstractInformationalThing)) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
;; GeographicalDirection
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
(isa Up-Generally GeographicalDirection-General)
(isa Up-Generally GeographicalDirection)
(isa Down-Generally GeographicalDirection-General)
(isa Down-Generally GeographicalDirection)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
;; PortalType
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
(isa PortalType ObjectType)
(implies 
    (isa ?T PortalType)
    (and 
    (isa ?T FirstOrderCollection)
    (genls ?T Portal)))
                                
(isa OpeningPortal PortalType)
(isa DoorPortal PortalType)
(isa SecurityDoorPortal PortalType)
        

                      
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
;; PortalFromToFn
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
(isa PortalFromToFn TernaryFunction) 
(isa PortalFromToFn  ReifiableFunction ) 
(isa PortalFromToFn IndividualDenotingFunction ) 
(arg1Isa PortalFromToFn GeographicalRegion) 
(arg2Isa PortalFromToFn GeographicalDirection)
(arg2Isa PortalFromToFn AbstractInformationalThing) 
(arg3Isa PortalFromToFn GeographicalRegion) 
(resultIsa PortalFromToFn Portal) 
(comment PortalFromToFn "This is a NART (PortalFromToFn ?R1 ?R2 ?D) to produce a instance of a Portal that creates a one-way connects ?R1 to ?R2 via a path ?D")

(implies 											       
        (and 
	    (containsPortals ?Loc ?TERM)
	    (termOfUnit ?TERM (PortalFromToFn ?Loc ?Dir ?Dest)))
        (hasPortalToRegion ?Loc ?Dest))
	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  MUD PREDICATES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(isa MudPredicate PredicateCatagory)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  MUD NL PREDICATES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Mud NL

(isa MudNLPredicate Collection)
(isa MudNLPredicate PredicateCatagory)
(genls MudNLPredicate BinaryPredciate)
(genls MudNLPredicate MudPredicate)

(implies 
        (isa ?Pred MudNLPredicate)
        (and 
                (isa ?Pred BinaryPredicate)
                (arg1Isa ?Pred PartiallyTangible)
                (arg2Isa ?Pred AbstractInformationalThing)))			       

(isa mudAbreviation MudNLPredicate)
(isa mudAdjective MudNLPredicate)
(isa mudPossessive MudNLPredicate)
(isa mudPronoun MudNLPredicate)
(isa mudNomitive MudNLPredicate)
(isa mudMessage MudNLPredicate)
(isa mudHelp MudNLPredicate)
(isa mudAreaView MudNLPredicate)
(isa mudDescription MudNLPredicate)
(isa mudKeyword MudNLPredicate)
(isa mudTraverseMessage MudNLPredicate)


(isa isa MudDescriptivePredicate)
(isa in-ContGeneric MudDescriptivePredicate)
(isa mudPosition MudDescriptivePredicate)
(isa mudDescription MudDescriptivePredicate)
;;(isa hasAttributes MudDescriptivePredicate)


(implies
    (and 
            (mudAreaView ?Class ?Text)
            (isa ?Thing ?Class))
     (mudAreaView ?Thing ?Text))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  MUD STAT PREDICATES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(isa MudSlotBinaryPredicate Collection)
(isa MudSlotBinaryPredicate PredicateCatagory)
(genls MudSlotBinaryPredicate BinaryPredciate)
(genls MudSlotBinaryPredicate MudPredicate)

(implies 
        (isa ?Pred MudSlotBinaryPredicate)
        (and 
                (isa ?Pred BinaryPredicate)
                (arg1Isa ?Pred PartiallyTangible)
                (arg2Isa ?Pred AbstractInformationalThing)))
                

(isa MudSlotTernaryPredicate Collection)
(isa MudSlotTernaryPredicate PredicateCatagory)
(genls MudSlotTernaryPredicate TernaryPredicate)
(genls MudSlotTernaryPredicate MudPredicate)

(implies 
        (isa ?Pred MudSlotTernaryPredicate)
        (and 
                (isa ?Pred TernaryPredicate)
                (arg1Isa ?Pred PartiallyTangible)
                (arg2Isa ?Pred AbstractInformationalThing)
                (arg3Isa ?Pred AbstractInformationalThing)))
                


(isa mudInventory MudSlotBinaryPredicate)
(isa mudPositionFavored MudSlotBinaryPredicate)
(isa mudPosition MudSlotBinaryPredicate)
(isa mudBareHandDamage MudSlotBinaryPredicate)
(isa mudMaxHitPoints MudSlotBinaryPredicate)
(isa mudArmorClass MudSlotBinaryPredicate)
(isa mudToHitArmorClass0 MudSlotBinaryPredicate)
(isa mudLevelOf MudSlotBinaryPredicate)
(isa alignmentOfNPC MudSlotBinaryPredicate)
(isa mudBareHandDamage MudSlotBinaryPredicate)
(isa mudGold MudSlotBinaryPredicate)
(isa mudExperience MudSlotBinaryPredicate)
(isa rentOfObject MudSlotBinaryPredicate)
(isa costOfObject MudSlotBinaryPredicate)
(isa armorLevel MudSlotBinaryPredicate)
(isa damageSizeDice MudSlotBinaryPredicate)
(isa damageNumberDice MudSlotBinaryPredicate)
(isa spellCast MudSlotBinaryPredicate)
(isa spellLevel MudSlotBinaryPredicate)
(isa containerKey MudSlotBinaryPredicate)
(isa capacityOfContainer MudSlotBinaryPredicate)

(isa durrationOfLight MudSlotBinaryPredicate)
(isa massOfObject MudSlotBinaryPredicate)
(isa chargeCapacity MudSlotBinaryPredicate)
(isa chargeRemaining MudSlotBinaryPredicate)
(isa containerKey MudSlotBinaryPredicate)

;; NPC Attributes
(isa NPCUsesMt HumanBehavioralAttribute)

;;(implies
;;   (and
;;	(hasAttributes ?Col NPCUsesMt)
;;	(hasAttributes ?Inst NPCUsesMt)
;;	(isa ?Inst ?Col))
;;   (thereExists ?Mt1 
;;        (and 
;;	    (isa ?Mt1 Microtheory)
;;	    (thereExists ?Mt2
;;		   (and 
;;			   (isa ?Mt2 Microtheory)
;;			   (authorityForMt ?Inst ?Mt2)
;;			   (genlMt ?Mt2 ?Mt1))))))


(isa quantityInContainer MudSlotTernaryPredicate)
(isa mudWorn MudSlotTernaryPredicate)
(isa mudExitState MudSlotTernaryPredicate)


(implies 
	(and
		(mudWorn ?TypeWho ?AT ?TypeWhat)
		(isa ?Who ?TypeWho))
	(thereExists 
	     ?What
		(and
		        (isa ?What ?TypeWhat)
			(wearsClothing ?Who ?What))))

(implies 
	(and
		(mudInventory ?TypeWhat ?TypeWho )
		(isa ?Who ?TypeWho))
	(thereExists ?What
		(and
		        (isa ?What ?TypeWhat)
			(in-ContGeneric ?Who ?What))))

 
         
(implies 
	(and
		(hasAttributes ?Col ?Attr)
		(isa ?Inst ?Col))
	(hasAttributes ?Inst ?Attr))


(isa KnownCyclist AttributeValue)

;;(implies (performSubL (ExpandSubLFn (?X) (cyc-query '(isa ?X Cyclist) #$InferencePSC))) (hasAttributes ?X KnownCyclist))


(isa mudDescriptiveTermSentences BinaryPredicate)


(isa OverlyGeneralTermForMud SetOrCollection)
(isa MudDescriptivePredicate SetOrCollection)
(isa mudDescriptiveFormula UnaryPredicate)
(isa overlyGeneralTermForMudding UnaryPredicate)

(completeExtentKnown overlyGeneralTermForMudding)



(:UNSET :FORWARD)
(implies
	(and
		(assertedTermSentences ?Term ?Formula)
		(mudDescriptiveFormula ?Formula))
	(mudDescriptiveTermSentences ?Term ?Formula))
	
(implies
 (and
      (isa ?Pred BinaryPredicate)
      (not (overlyGeneralTermForMudding ?X ))
      (not (overlyGeneralTermForMudding ?Y ))
      (isa ?Pred MudDescriptivePredicate))
(mudDescriptiveFormula (?Pred ?X ?Y)))

(implies
 (and
      (isa ?Pred TernaryPredicate)
      (not (overlyGeneralTermForMudding ?X ))
      (not (overlyGeneralTermForMudding ?Y ))
      (not (overlyGeneralTermForMudding ?Z ))
      (isa ?Pred MudDescriptivePredicate))
(mudDescriptiveFormula (?Pred ?X ?Y ?Z)))



(:SET :FORWARD)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(isa InstanceClonedFn Function-Dentotational)
;;(isa InstanceClonedFn  ReifiableFunction ) 
;;(isa InstanceClonedFn IndividualDenotingFunction ) 
;;(arity InstanceClonedFn 2)
;;(arg1Isa InstanceClonedFn PartiallyTangible)
;;(arg2Isa InstanceClonedFn PartiallyTangible)
;;(resultIsa InstanceClonedFn PartiallyTangible)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
              

(isa PlayerInstance FirstOrderCollection) 

(genls PlayerInstance AgentiveArtifact)

(isa Artifact-Generic-NPC FirstOrderCollection) 
(genls Artifact-Generic-NPC AgentiveArtifact)

(isa Artifact-Generic-Hero FirstOrderCollection) 
(genls Artifact-Generic-Hero Artifact-Generic-NPC)

(isa Artifact-Generic-Mob FirstOrderCollection) 
(genls Artifact-Generic-Mob Artifact-Generic-NPC)

(disjointWith Artifact-Generic-NPC PlayerInstance)
(disjointWith Artifact-Generic-Hero Artifact-Generic-Mob)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PREDICATE hasAttributesOnClass
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(isa hasAttributesOnClass BinaryPredicate)
(and
        (arg1Isa hasAttributesOnClass SecondOrderCollection) 
        (arg2Isa hasAttributesOnClass AttributeValue)) 
        

(implies
    (and 
            (hasAttributesOnClass ?Class ?Flag)
            (isa ?Thing ?Class))
     (hasAttributes ?Thing ?Flag))

;;(implies
;;    (and 
;;            (not (hasAttributesOnClass ?Class ?Flag))
;;            (isa ?Thing ?Class))
;;    (not (hasAttributes ?Thing ?Flag)))
             

     

;; PREDICATE mudEvent 
(isa mudEvent TernaryPredicate)
(and
        (arg1Isa mudEvent Thing) 
        (arg2Isa mudEvent MudEventTrigger) 
        (arg3Isa mudEvent AbstractInformationalThing) )

;; PREDICATE mudReset 
(isa mudReset TernaryPredicate)
(and
        (arg1Isa mudReset PartiallyTangible) 
        (arg2Genl mudReset Artifact-Generic) 
        (arg3Isa mudReset CycLNumber) )
        

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define in-ContGeneric
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(isa in-ContGeneric MudPredicate)

(implies 
        (and 
                (objectFoundInLocation ?Obj ?Area)
                (isa ?Obj Artifact-Generic))
        (in-ContGeneric ?Obj ?Area))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define mudAttribute
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(isa mudAttribute TernaryPredicate)
(isa mudAttribute MudPredicate)
(and
  (arg1Isa mudAttribute PartiallyTangible)
  (arg2Isa mudAttribute AbstractInformationalThing)
  (arg3Isa mudAttribute Thing))





;; Jobs

(isa MudJob SecondOrderCollection)

(isa MudWarrior MudJob)
(nameString MudWarrior "warrior")
(mudAdjective MudWarrior "warrior-like")
(mudAbreviation MudWarrior "war")

(isa MudMage MudJob)
(nameString MudMage "mage")
(mudAdjective MudMage "mage-like")
(mudAbreviation MudMage "mag")

(isa MudThief MudJob)
(nameString MudThief "thief")
(mudAdjective MudThief "thief-like")
(mudAbreviation MudThief "thf")

(isa MudHaunter MudJob)
(nameString MudHaunter "mud haunter")
(mudAdjective MudHaunter "ghasthy")
(mudAbreviation MudHaunter "haunt")

;; Races

(nameString HomoGenus "human")
(mudAdjective HomoGenus "humanoid")
(mudAbreviation HomoGenus "hum")

(isa MudDrow BiologicalGenus)
(nameString MudDrow "drow")
(mudAdjective MudDrow "drowish")
(mudAbreviation MudDrow "drow")

(isa MudGhost BiologicalGenus)
(nameString MudGhost "ghost")
(mudAdjective MudGhost "ghostly")
(mudAbreviation MudGhost "ghost")
(mudKeyword MudGhost "jello")


(isa MudDwarf BiologicalGenus)
(nameString MudDwarf "dwarf")
(mudAdjective MudDwarf "dwarfish")
(mudAbreviation MudDwarf "dwa")

(isa MudOrc BiologicalGenus)
(nameString MudOrc "hill orc")
(mudAdjective MudOrc "orcish")
(mudAbreviation MudOrc "orc")

(isa MudMinotaur BiologicalGenus)
(nameString MudMinotaur "minotaur")
(mudAdjective MudMinotaur "minotaurian")
(mudAbreviation MudMinotaur "mino")

;; Genders

(isa MudGender SecondOrderCollection)
(isa MudGender OrganismClassificationType)

(isa MaleAnimal MudGender)
(nameString MaleAnimal "male")
(mudAdjective MaleAnimal "male")
(mudAbreviation MaleAnimal "mal")
(mudPossessive MaleAnimal "his")
(mudPronoun MaleAnimal "he")
(mudNomitive MaleAnimal "him")

(isa FemaleAnimal MudGender)
(nameString FemaleAnimal "female")
(mudAdjective FemaleAnimal "female")
(mudAbreviation FemaleAnimal "fem")
(mudPronoun FemaleAnimal "she")
(mudNomitive FemaleAnimal "her")
(mudPossessive FemaleAnimal "her")

(isa NeuterAnimal MudGender)
(nameString NeuterAnimal "neuter")
(mudAdjective NeuterAnimal "neutered")
(mudAbreviation NeuterAnimal "n")
(mudPronoun NeuterAnimal "it")
(mudNomitive NeuterAnimal "it")
(mudPossessive NeuterAnimal "its")

(isa HermaphroditeAnimal MudGender)
(nameString HermaphroditeAnimal "hermaphrodite")
(mudAdjective HermaphroditeAnimal "hermaphroditic")
(mudAbreviation HermaphroditeAnimal "her")															     
(mudPronoun HermaphroditeAnimal "zie")
(mudNomitive HermaphroditeAnimal "zir")
(mudPossessive HermaphroditeAnimal "zir")



;;directionBetweenObjects


(isa MudTakable AttributeValue)
(isa MudWearable AttributeValue)

;;(attributeRequiredForAction ActionOnObject MudTakable	)
;;(isa ActionOnObject)
        

(isa mudDoorKey BinaryPredicate)
(and 
   (arg1Isa mudDoorKey Portal)
   (arg2Isa mudDoorKey PortalState))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; Mud Planner
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(isa mudVerb UnaryPredicate)
(isa mudPred UnaryPredicate)
(isa mudObject UnaryPredicate)

(arg1Isa mudVerb Event)

(isa singleDoerActionPred BinaryPredicate)
(isa singleDoerActionPredPos TernaryPredicate)
				 

(authorityForMt (GenericInstanceFn Dog) AnimalActivitiesMt)

;;(implies (genls ?W SingleDoerAction)  (mudVerb ?W))

;;(implies (genls ?W DefaultDisjointScriptType) (mudVerb ?W))

;;(implies (genls ?W AnimalActivity) (mudVerb ?W))
					      
(implies 
       (isa ?W ActorSlot) 
       (mudPred ?W))


(implies 
       (isa ?W PartiallyTangible) 
       (mudObject ?W))
(implies 
       (isa ?W Portal) 
       (mudObject ?W))
(implies 
       (isa ?W GeographicalLocation) 
       (mudObject ?W))     
(implies 
       (isa ?W SpatialThing-Localized) 
       (mudObject ?W))

       
(implies 
       (and 
           (mudVerb ?ESUPER) 
	   (mudPred ?PSUPER)
           (genls ?E ?ESUPER) 								
           (arg1Isa ?PSUPER ?ESUPER)
           (arg2Isa ?PSUPER ?COL))
       (relationAllExists ?PSUPER ?E ?COL))  

(implies 
       (and 
           (mudVerb ?ESUPER) 
	   (mudPred ?PSUPER)
           (genls ?E ?ESUPER) 
           (arg2Isa ?PSUPER ?ESUPER)
           (arg1Isa ?PSUPER ?COL))
       (relationExistsAll ?PSUPER ?COL ?E))
       
       

(isa MudAgent FirstOrderCollection)

(genls NpcAgentCollection IntelligentAgent)


(isa randomOf BinaryPredicate)


(:UNSET :FORWARD)

(implies 
   (evaluate ?N 
       (EvaluateSubLFn 
           (ExpandSubLFn 
               (?OUTOF) 
               (!RANDOM ?OUTOF))))
   (randomOf ?N ?OUTOF))

(:SET :FORWARD)
           
(notAssertible randomOf)


(isa mudObjectVisibleToWhom BinaryPredicate)
(arg1Isa mudObjectVisibleToWhom AgentiveArtifact)
(arg2Isa mudObjectVisibleToWhom PartiallyTangible)

(implies 
        (and 
                (in-ContGeneric ?Who ?Loc)
                (isa ?Who AgentiveArtifact)
                (in-ContGeneric ?What ?Loc)
                (different ?Who ?What))
        (mudObjectVisibleToWhom ?Who ?What))

(implies 
   (containsPortals ?Loc ?What)
   (in-ContGeneric ?What ?Loc))		

(isa mudPossiblyAlreadyInRoom TernaryPredicate)
(arg1Isa mudPossiblyAlreadyInRoom GeographicalRegion)
(arg2Isa mudPossiblyAlreadyInRoom TextString)
(arg3Isa mudPossiblyAlreadyInRoom TextString)


(implies 
     (mudPossiblyAlreadyInRoom ?Area ?Text ?Desc)
     (thereExists ?Obj
        (and 
		(mudKeyword ?Obj ?Text)
		(in-ContGeneric ?Obj ?Area)
		(mudDescription ?Obj ?Desc))))


(:UNSET :FORWARD)
			   
;;(implies
;;	(and
;;	   (isa ?AnyPred MudPredicate)
;;	   (?AnyPred (InstanceClonedFn ?D1 ?D2) ?AnyArg)
;;	   (?Pred ?D1 ?Arg))
;;	(?Pred (InstanceClonedFn ?D1 ?D2) ?Arg))

(:SET :FORWARD)

(implies 
	(or 
	   (nameString ?Obj ?Txt)
	   (prettyName ?Obj ?Txt))
	(nameString ?Obj ?Txt))

(implies 
	(nameString ?Nart ?Text)
	(ist EnglishParaphraseMt (genFormat ?Nart ?Text !NIL)))


;;(implies
;;   (positiveInterest-Prop ?Who ?What) 
;;   (nextNpcCommand ?Who ?What))

(implies
	(isa ?Agent Animal)
	(desires ?Agent (performedBy Breathing ?Agent)))
		
(isa InferencePSC SourceMicrotheory)
(isa AnimalActivitiesMt SourceMicrotheory)

;;(authorityForMt Cyc InferencePSC)
	
	
(isa avoiding-Prop BinaryPredicate)
(isa avoiding-Prop PropositionalAttitudeSlot)


(implies
(and
(isa ?Pred MentalSlot)
(?Pred ?Who ?This)
(thinksProbable ?Who (causes-PropProp ?This ?That)))
(?Pred ?Who ?That))

(implies
(and  
(isa ?Pred MentalSlot)
(?Pred ?Who ?That)
(thinksProbable ?Who (causes-PropProp ?This ?That)))
(?Pred ?Who ?This))

(implies
(isa ?Who Animal)
(avoiding-Prop ?Who (bodilyDoer ?Who Dying)))

														


(implies
	(and 
	 (authorityForMt ?Who ?Mt)
	 (ist ?Mt (implies ?This ?That)))
	(thinksProbable ?Who (causes-PropProp ?This ?That)))

;;(causes-PropProp ?THIS ?THAT)
;;(planForTask ?Task ?Plan)
   
;;comment :  "queryTemplate relates a class of natural language queries (e.g. sentences) to CycL. For example, 
;;(commandTemplate #$STemplate ("what color are" (#$NPTemplate :obj)) (#$colorOfType :obj ?X)) would map "what color are frogs?" to (#$colorOfType #$Frog ?X)."  

;;(implies   (commandTemplate #$STemplate '("what color are" (#$NPTemplate :obj)) (#$colorOfType :obj ?X))
	

(equiv
	 (avoiding-Prop ?Agent ?What)
	 (desires ?Agent (not ?What)))
	 

(:MT EnglishParaphraseMt)

;(genFormat PortalFromToFn "a passage ~a leading to ~a" 
;       ((2 :EQUALS) 
;           (3 :EQUALS)))
	   
(genFormat PortalFromToFn "A portal ~a" ((2)))


(:MT JamudMt)

;; Forward rules
;;(implies 
;;   (and 
;;       (mudObject ?INST)
;;       (isa ?INST ?All)
;;       (relationExistsAll ?PRED ?Exists ?All))
;; (relationExistsInstance ?PRED ?Exists ?INST ))

;;(implies 
;;   (and 
;;       (mudObject ?INST)
;;       (isa ?INST ?All)
;;       (relationAllExists ?PRED ?All ?Exists))
;;   (relationInstanceExists ?PRED ?INST ?Exists))

(:MT BaseKB)

(isa BasicAnimalPlanningMt Microtheory)
(isa BasicAnimalPlanningMt PlanningDomainMicrotheory)
(genlMt BasicAnimalPlanningMt HumanActivitiesMt)
(genlMt BasicAnimalPlanningMt AgentGMt)
(genlMt BasicAnimalPlanningMt AgentGVocabularyMt)
;;(genlMt BasicAnimalPlanningMt GeneralLexiconMt)
(genlMt BasicAnimalPlanningMt BiologyMt)
(genlMt BasicAnimalPlanningMt AnimalMovementMt)

(isa ActionPredicate Collection)							 
(isa ActionPredicate PredicateCatagory)

(isa SimpleActionPredicate Collection)
(isa SimpleActionPredicate PredicateCatagory)
(genls SimpleActionPredicate ActionPredicate)

(isa ComplexActionPredicate Collection)
(isa ComplexActionPredicate PredicateCatagory)
(genls ComplexActionPredicate ActionPredicate)

(isa PurposefulActionType Collection)
(isa PurposefulActionType SetOrCollection)

(isa PredicateForActionFn UnaryFunction)
(isa PredicateForActionFn ReifiableFunction ) 
(isa PredicateForActionFn IndividualDenotingFunction ) 
(isa PredicateForActionFn PredicateDenotingFunction)

;;(preservesGenlsInArg PredicateForActionFn 1)

(resultIsa PredicateForActionFn ActionPredicate)
(resultIsa PredicateForActionFn Predicate)
(arg1Genl PredicateForActionFn Action)
(arg1Isa PredicateForActionFn Collection)
(arg1Isa PredicateForActionFn PurposefulActionType)
(arg1Format PredicateForActionFn SetTheFormat)

(isa predicateForAction	BinaryPredicate)			
(isa predicateForAction	FunctionalPredicate)			
(isa predicateForAction	IrreflexiveBinaryPredicate) 
(isa predicateForAction	AntiSymmetricBinaryPredicate)
(arg1Isa predicateForAction ActionPredicate)
(arg2Genl predicateForAction Action)


;;(functionCorrespondingPredicate-Canonical PredicateForActionFn predicateForAction 1)

(:MT BasicAnimalPlanningMt)

									    
(isa SimpleActionPredicateForOrganism Collection)
(isa SimpleActionPredicateForOrganism PredicateCatagory)
(genls SimpleActionPredicateForOrganism SimpleActionPredicate)

(isa ActionPredicateForOrganism Collection)
(isa ActionPredicateForOrganism PredicateCatagory)

(genls ActionPredicateForOrganism ActionPredicate)

(isa transport SimpleActionPredicateForOrganism)
(isa cleans SimpleActionPredicateForOrganism)
(isa walks SimpleActionPredicateForOrganism)
(isa climbs SimpleActionPredicateForOrganism)
(isa dropsObject SimpleActionPredicateForOrganism)
(isa operatesObject SimpleActionPredicateForOrganism)

(isa makeSandwitch ActionPredicateForOrganism)
(isa takesObject SimpleActionPredicateForOrganism)


(isa ExaminationAction Collection)
(isa ExaminationAction PredicateCatagory)

(genls PerceivingSlot ExaminationAction)    		
(genls ExaminationAction ActionPredicateForOrganism)    		
	   

(predicateForAction sees VisualPerception)
(predicateForAction smells SmellPerception)
(predicateForAction hears Hearing)
(predicateForAction tastes TastePerception)
 
(implies 
	(isa ?Pred ActionPredicateForOrganism)
	(arg1Isa ?Pred Organism-Whole))
	
	  
(isa SingleDoerPurposefulActionType Collection)

(implies
	(and (genls ?Action PurposefulAction)(genls ?Action SingleDoerAction)) (isa ?Action SingleDoerPurposefulActionType))

(implies
	(genls ?Action PurposefulAction)
	(isa ?Action PurposefulActionType))	     

(interArg1ResultIsa PredicateForActionFn PurposefulActionType ActionPredicate)
	
(genls SingleDoerPurposefulActionType  PurposefulActionType)
			
;; (#$effectOfActionIf-Props ACTION CONDITION EFFECTS)

;;(invokeEvent ?EventClass ?Who ArgsNeeded)

(isa invokeEvent ActionPredicate)
(isa invokeEvent TernaryPredicate)
(arg1Genl invokeEvent Action)
(arg2Isa invokeEvent Agent)
(arg3Isa invokeEvent Thing)


(:MT BasicAnimalPlanningMt)
(interArgIsa1-2 predicateForAction PurposefulActionType ActionPredicate)



(isa QuaternaryComplexActionPredicate SetOrCollection)
(isa createSomethingFrom QuaternaryComplexActionPredicate)
(isa destroySomethingWith QuaternaryComplexActionPredicate)
(isa giveToSomething QuaternaryComplexActionPredicate)


(implies
  (isa ?Pred ComplexActionPredicate)
  (and
	(arg1Isa ?Pred Agent)
	(arg2Genl ?Pred Action)))
	
(implies
  (isa ?Pred QuaternaryComplexActionPredicate)
  (and
	(isa ?Pred ComplexActionPredicate)
	(isa ?Pred QuaternaryPredicate)
	(arg3Isa ?Pred Thing)
	(arg4Isa ?Pred Thing)))		      

										

;;(genls ?EventType CreationEvent)
(implies	
	(and 
		(relationAllExists outputsCreated ?EventType ?OutputType)
		(relationAllExists inputs ?EventType ?InputType))

	(effectOfActionIf-Props  (createSomethingFrom ?Agent ?EventType ?Input ?Output)
	   (and 
		(isa ?Input ?InputType)
		(controls ?Agent ?Input))
		
	(thereExists ?Event
	   (and 
		(isa ?Event ?EventType)
		(bodilyDoer ?Event ?Agent) 
		(inputs ?Event ?Input)
		(thereExists ?Output
		    (and 
			(outputsCreated ?Event ?Output) 
			(isa ?Output ?OutputType)
			(controls ?Agent ?Output)))))))	 

;;(genls ?EventType DestructionEvent)
(implies	
	(and 
		(relationAllExists preActors ?EventType ?HelperType)
		(relationAllExists damages  ?EventType ?DamagedType))

	(effectOfActionIf-Props  (destroySomethingWith ?Agent ?EventType ?Helper ?Damaged)
	   (and 
		(isa ?Helper ?HelperType)
		(controls ?Agent ?Helper)
		(near ?Agent ?Helper)
		(near ?Agent ?Damaged))
		
	(thereExists ?Event
	   (and 
		(isa ?Event ?EventType)
		(bodilyDoer ?Event ?Agent) 
		(inputs ?Event ?Helper)
		(damages ?Event ?Damaged) 
		(isa ?Damaged ?DamagedType)
		(controls ?Agent ?Damaged)))))	     

;;(genls ?EventType TransferEvent)
(implies	
	(and 
		(relationAllExists toPossessor ?EventType ?ObjectType))

	(effectOfActionIf-Props  (giveToSomething ?Agent ?EventType ?Helper ?Object)
	   (and 
		(isa ?Helper ?HelperType)
		(near ?Agent ?Helper)
		(near ?Agent ?Object))
		
	(thereExists ?Event
	   (and 
		(isa ?Event ?EventType)
		(bodilyDoer ?Event ?Agent) 
		(fromPossessor ?Event ?Agent) 
		(toPossessor ?Event ?Helper)
		(transferredThing ?Event ?Object) 
		(isa ?Object ?ObjectType)
		(controls ?Agent ?Object)))))
		

		
(implies (isa ?Action PurposefulActionType)
(and (isa (PredicateForActionFn ?Action) ActionPredicate)
(isa (PredicateForActionFn ?Action) CycLNonAtomicReifiedTerm)))
		
(implies 
(isa ?Action PurposefulActionType)
(predicateForAction (PredicateForActionFn ?Action) ?Action))
	
;;(implies 
;;	(isa ?Action PurposefulActionType)
;;	(thereExists ?Pred 
;;	   (and
;;		(equals ?Pred (PredicateForActionFn ?Action))
;;		(isa ?Pred ActionPredicate)
;;		(isa (PredicateForActionFn ?Action) ActionPredicate)
;;		(predicateForAction ?Pred ?Action)
;;		(predicateForAction (PredicateForActionFn ?Action) ?Action))))	



