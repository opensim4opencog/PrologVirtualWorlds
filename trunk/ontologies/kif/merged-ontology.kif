;;; Upper Cyc/HPKB IKB Ontology with links to SENSUS
;;; Copyright Cycorp 1997.  All rights reserved.

:MergedOntologyProposalMt


;;; AFewDaysDuration
(isa AFewDaysDuration OrderOfMagnitudeInterval)
(isa AFewDaysDuration Time-Quantity)
(comment AFewDaysDuration "Duration of 2 to 10 days")

;;; AFewDecadesDuration
(isa AFewDecadesDuration OrderOfMagnitudeInterval)
(isa AFewDecadesDuration Time-Quantity)
(comment AFewDecadesDuration "Duration of 2 to 10 decades")

;;; AFewHoursDuration
(isa AFewHoursDuration OrderOfMagnitudeInterval)
(isa AFewHoursDuration Time-Quantity)
(comment AFewHoursDuration "Duration of 2 to 10 hours")

;;; AFewMinutesDuration
(isa AFewMinutesDuration OrderOfMagnitudeInterval)
(isa AFewMinutesDuration Time-Quantity)
(comment AFewMinutesDuration "Duration of 2 to 10 minutes")

;;; AFewMonthsDuration
(isa AFewMonthsDuration OrderOfMagnitudeInterval)
(isa AFewMonthsDuration Time-Quantity)
(comment AFewMonthsDuration "A few months 2-10")

;;; AFewSecondsDuration
(isa AFewSecondsDuration Time-Quantity)
(isa AFewSecondsDuration OrderOfMagnitudeInterval)
(comment AFewSecondsDuration "Duration of 2 to 30 seconds")

;;; AFewWeeksDuration
(isa AFewWeeksDuration OrderOfMagnitudeInterval)
(isa AFewWeeksDuration Time-Quantity)
(comment AFewWeeksDuration "Duration of 2 to 10 weeks")

;;; AFewYearsDuration
(isa AFewYearsDuration OrderOfMagnitudeInterval)
(isa AFewYearsDuration Time-Quantity)
(comment AFewYearsDuration "Duration of 2 to 10 years")

;;; AbandoningSomething
(isa AbandoningSomething ScriptType)
(isa AbandoningSomething TemporalObjectType)
(genls AbandoningSomething PurposefulAction)
(genls AbandoningSomething LosingUserRights)
(comment AbandoningSomething "The collection of events in which some Agent deliberately gives up possession of something, without giving it to another.")

;;; Ablation
(isa Ablation TemporalStuffType)
(isa Ablation DefaultDisjointScriptType)
(genls Ablation RemovingSomething)
(genls Ablation IntrinsicStateChangeEvent)
(genls Ablation Separation-Complete)
(comment Ablation "A collection of events.  In an Ablation, a (usually relatively thin) layer of material is removed from the surface of an object.")

;;; AboveGroundLevelInAConstruction
(isa AboveGroundLevelInAConstruction ExistingObjectType)
(genls AboveGroundLevelInAConstruction LevelOfAConstruction)
(genls AboveGroundLevelInAConstruction ContainerProduct)
(comment AboveGroundLevelInAConstruction "This refers to first floor and up. We created this to make the distinction between basements and non-basements.  We'd like to be able to talk about, count, etc. the levels above ground.")

;;; AbradingSomething
(isa AbradingSomething DefaultDisjointScriptType)
(genls AbradingSomething Ablation)
(genls AbradingSomething PhysicalContactSituation)
(genls AbradingSomething VoluntaryBodyMovement)
(comment AbradingSomething "A collection of events.  In an AbradingSomething event, the surface of some object is gradually worn away by scraping or similar physical contact involving friction.  Devices used in elements of AbradingSomething include files and sand paper; elements of AbradingSomething would include the event in which Howard Hughes sanded down the Spruce Goose for the last time, the event in which Lucy Ricardo filed her fingernails just before her singing debut at Rickie's club, etc.")

;;; AbsoluteValueFn
(isa AbsoluteValueFn FunctionFromQuantitiesToQuantities)
(resultIsa AbsoluteValueFn ScalarInterval)
(arg1Isa AbsoluteValueFn ScalarInterval)
(comment AbsoluteValueFn "AbsoluteValueFn is the unary mathematical function that returns the absolute value of its argument; e.g., (AbsoluteValueFn -2) returns 2, and (AbsoluteValueFn 2) returns 2.")

;;; AbstractInformation
(isa AbstractInformation StuffType)
(isa AbstractInformation ObjectType)
(genls AbstractInformation Intangible)
(comment AbstractInformation "The collection of all instances of abstract information stored or transmitted in some manner, and representing (to someone potentially at least) something.  Abstract information need not have any propositional content (see PropositionalInformationThing); a score for music, or a bit-map, are examples.  Note that AbstractInformation is the abstract, intangible information, not any particular physical embodiment.  The same abstract information is often stored in many different physical InformationBearingObjects.  AbstractInformation may or may not be digital; it need not be representable in a particular number of bits.  AbstractInformation does not include every abstract Intangible or 'Platonic' concept, only that information that represents something and is (at least potentially) stored or transmitted for that purpose; thus, the ideal regular icosahedron is not in itself an instance of AbstractInformation.  Note also that although most instances of AbstractInformation are IntangibleIndividuals, some are SetOrCollections such as BiologicalTaxons and other ConventionalClassificationTypes.")

;;; AbstractProgrammingLanguage
(isa AbstractProgrammingLanguage ObjectType)
(genls AbstractProgrammingLanguage Language)
(genls AbstractProgrammingLanguage MathematicalOrComputationalThing)
(comment AbstractProgrammingLanguage "The collection of languages invented for use by computers. This includes both command languages and others which one doesn't really `program' in.")

;;; AbstractShape
(isa AbstractShape ObjectType)
(genls AbstractShape GeometricThing)
(comment AbstractShape "A collection of objects; a subset of GeometricThing.  AbstractShape is the collection of all abstract physical shapes.  Each element of AbstractShape is an abstract region of physical space, having two or more dimensions.  This includes all circles, spheres, triangles, wedges, spirals, cylinders, toruses, etc.")
(overlappingExternalConcept AbstractShape SENSUS-Information1997 "SHAPE-QUALITY")

;;; AbstractShapeType
(isa AbstractShapeType Collection)
(genls AbstractShapeType ShapeType)
(comment AbstractShapeType "A collection of collections.  Each element of AbstractShapeType is a collection of things which are subsets of AbstractShape.  The elements of AbstractShapeType comprise the basic physical shapes.  Examples include: CylinderShape, PyramidShape, ConeShape, TubeShape, Rectangular3DShape, Polygon, Spiral, etc.")

;;; AcademicProfessional
(isa AcademicProfessional OccupationType)
(genls AcademicProfessional Professional)
(comment AcademicProfessional "A collection of persons; a subset of Professional.  Each element of AcademicProfessional is a person whose job is to educate and/or to perform research as an affiliate of an academic institution.  This includes members of the teaching and/or research staff of schools, colleges, universities, and research institutes.")

;;; AcademicQuarter
(isa AcademicQuarter TemporalObjectType)
(genls AcademicQuarter TimeInterval)
(comment AcademicQuarter "Each instance of this collection is a TimeInterval defined by some educational institution: one quarter of their AcademicYear.  Since the start dates, end dates, and duration may all vary depending on the institution, the year, etc., instances of this collection must unfortunately be time intervals like StanfordSpringQuarter1991.")

;;; AcademicSemester
(isa AcademicSemester TemporalObjectType)
(genls AcademicSemester TimeInterval)
(comment AcademicSemester "Each instance of this collection is a TimeInterval defined by some educational institution: one half of their AcademicYear. Since the start dates, end dates and duration may vary depending on the institution and year, instances will be time intervals such as ``StanfordSpringSemester1990-91''.")

;;; AcademicTrimester
(isa AcademicTrimester TemporalObjectType)
(genls AcademicTrimester TimeInterval)
(comment AcademicTrimester "Each instance of this collection is a TimeInterval defined by some educational institution: one third of their AcademicYear. Since the start dates, end dates, and duration may all vary depending on the institution and year, instances of this collection must unfortunately be time intervals like UCLASpringTrimester1990-91.")

;;; AcademicYear
(isa AcademicYear TemporalObjectType)
(genls AcademicYear TimeInterval)
(comment AcademicYear "Each instance of this collection is an annually recurring TimeInterval defined by an educational institution.  Since the start dates, end dates, and duration may all vary depending on the institution, the year, etc., instances of this collection must unfortunately be time intervals like Stanford1989-90AcademicYear.")

;;; Acceleration
(isa Acceleration DerivedNumericAttributeType)
(genls Acceleration PhysicalAttribute)
(genls Acceleration ScalarInterval)
(comment Acceleration "Acceleration is the change in speed of an object per unit time.  It is a measurable physical quantity, measured in units such as MilesPerHourPerSecond.")

;;; AccessingAnIBT
(isa AccessingAnIBT DefaultDisjointScriptType)
(isa AccessingAnIBT TemporalObjectType)
(genls AccessingAnIBT InformationTransferEvent)
(genls AccessingAnIBT TransferIn)
(genls AccessingAnIBT PurposefulAction)
(genls AccessingAnIBT MentalActivity)
(comment AccessingAnIBT "A collection of information transfer events.  Each element of AccessingAnIBT is an action by which an agent accesses the content of some IBT (i.e., an element of InformationBearingThing).  Examples include (getting information from) reading a newspaper, watching a film, listening to a musical performance, decoding an encrypted message, seeing a traffic police officer wave you on, or hearing your roommate ask you to take out the trash.  Of course, communication conventions play a role here.  In the NaiveInformationMt, Cyc simply assumes that an agent who accesses an IBT understands its content afterwards.  In the InformationGMt, Cyc makes the more complicated inference that an agent who accesses an IBT understands its content afterwards only if the agent is able to get the encoded information using a convention familiar to that agent.  See also CommunicationConvention, hasCommConvention, usesCommConventionForInfo.")

;;; Account
(isa Account AccountType)
(genls Account AuthorizedAgreement)
(genls Account LegalAgreement)
(comment Account "A collection of objects; a subset of LegalAgreement.  Each element of Account is a recorded obligation (of some particular type) between specified parties, consisting of `funds' which typically can be added to and drawn upon.  Examples include the instances of RetirementAccount, TravelExpenseAccount, and of the many types of FinancialAccount.  Note that the contents of an account need not be monetary; for example, the contents may be amounts of time, as in the subsets VacationAccount or a SickLeaveAccount.  Account does NOT include debt obligations of fixed face value that cannot be increased or reduced (such as a bond).")

;;; AccountStatusAttribute
(isa AccountStatusAttribute SiblingDisjointAttributeType)
(genls AccountStatusAttribute AttributeValue)
(comment AccountStatusAttribute "A collection of attributes.  Each element of AccountStatusAttribute is an attribute that describes the obligational status of an Account; e.g.,PaidInFull, InComplianceWithPaymentSchedule, PaymentOverdue, AccountInactive.")

;;; AccountType
(isa AccountType TemporalStuffType)
(isa AccountType SiblingDisjointCollection)
(genls AccountType ExistingObjectType)
(comment AccountType "A collection of collections.  Each element of AccountType is a collection of financial accounts of some type.  Examples: SavingsAccount, CreditCardAccount, RetirementAccount, SocialSecurityAccount, TravelExpenseAccount.  Typically, accounts are denominated in units of Money.")

;;; Acknowledging-CommunicationAct
(isa Acknowledging-CommunicationAct TemporalObjectType)
(isa Acknowledging-CommunicationAct DefaultDisjointScriptType)
(genls Acknowledging-CommunicationAct CommunicationAct-Single)
(comment Acknowledging-CommunicationAct "The collection of actions which are performedBy one Agent to convey information about the receipt of a prior CommunicationAct-Single which was performedBy another Agent.  An example: Judy saying `No' in response to Jane's prior act of saying `Will you clean the toaster.'")

;;; AcquaintanceAttribute
(isa AcquaintanceAttribute SocialAttributeType)
(genls AcquaintanceAttribute AttributeValue)
(comment AcquaintanceAttribute "The collection of attributes that specify ways in which (and/or degrees to which) one person is acquainted with another  E.g., some instances of this collection are:  FamousPersonAcquaintance, TrueFanAcquaintance, IntimateAcquaintance, FrequentContactAcquaintance, etc.")

;;; Action
(isa Action TemporalObjectType)
(isa Action ScriptType)
(genls Action Event)
(comment Action "A collection of events.  Each instance of Action is an event in which something is done by some agent.  (See doneBy.)  Actions may include any event in which one or more actor(s) effect some change(s) in the tangible or intangible state of the world, typically by some expenditure of effort or energy.  But note that it is not required that any tangible object be moved, changed, produced, or destroyed for an action to occur; the effects of actions may be intangible (such as the change in a bank balance, or the intimidation of a subordinate).  Depending upon the context, actors may be animate or inanimate, conscious or nonconscious.  For actions that are intentional, see also PurposefulAction, performedBy.")

;;; ActionOnObject
(isa ActionOnObject ScriptType)
(isa ActionOnObject TemporalObjectType)
(genls ActionOnObject Action)
(comment ActionOnObject "The collection of events in which some doer acts on an object. Each element of ActionOnObject is an action in which both the roles of doneBy and objectActedOn (qq.v.) are filled.  Positive examples: someone typing on a keyboard; a tornado destroying a building.  Negative examples: a person dancing; wind blowing.")

;;; ActorSlot
(isa ActorSlot PredicateCategory)
(genls ActorSlot ExtensionalRepresentationPredicate)
(genls ActorSlot BinaryPredicate)
(genls ActorSlot Role)
(comment ActorSlot "A collection of binary predicates.  Each element of ActorSlot relates some instance of Event to a thing involved in that event (here called a `participant').  The first argument of every ActorSlot is an instance of Event, and the second argument is an instance of SomethingExisting, denoting a participant in that event.  Each specialized actor slot indicates HOW its participant participates in the event, i.e., in what role (e.g., inputs, outputs, doneBy).  `Participant' does NOT include the time of the event's occurrence, external representations of the event, and other more remotely related things that are not directly or indirectly `involved' in the occurrence of the event.")

;;; Address-LocationDesignator
(isa Address-LocationDesignator ObjectType)
(genls Address-LocationDesignator CharacterString)
(genls Address-LocationDesignator AttributeValue)
(comment Address-LocationDesignator "A collection of strings.  Each element of Address-LocationDesignator is a string that denotes an address.  Each string indicates one entire address.  For example: `President Bill Clinton, White House,, 1600 Pennsylvania Avenue, Washington, DC.")

;;; Adjective
(isa Adjective LinguisticObjectType)
(genls Adjective SpeechPart)
(comment Adjective "The collecton of all adjectives. Adjectives are words which can modify nouns. Many adjectives have comparative and superlative forms. Example: `red'.")

;;; Administrator
(isa Administrator OccupationType)
(genls Administrator DeskWorker)
(comment Administrator "A collection of persons; a subset of Professional.  Each element of Administrator is an employee of an organization who is responsible for managing its organizational affairs.  Elements of Administrator may or may not also be required to manage people.  If so, then they are also Managers (q.v.).")

;;; Admiration
(isa Admiration FeelingAttributeType)
(genls Admiration Respect)
(comment Admiration "A feeling of strong approval.  An intense positive attitude towards another person(s) or group.  May be accompanied by emulation.  Admiration is different than Respect (qv).  This is a collection --- see Happiness for an explanation.  Some more specialized FeelingAttributeTypes than Admiration are Wonder-Admiration, Adulation, Awe, etc. ")

;;; AdultAnimal
(isa AdultAnimal ExistingObjectType)
(genls AdultAnimal BiologicalStageOfDevelopment)
(genls AdultAnimal Animal)
(comment AdultAnimal "The collection of all adult animals (including adult people), meaning all elements of Animal that are mature enough to bear offspring, or older.")

;;; AdultFemalePerson
(isa AdultFemalePerson ExistingObjectType)
(genls AdultFemalePerson FemalePerson)
(genls AdultFemalePerson HumanAdult)
(comment AdultFemalePerson "The collection of all women; i.e., Persons who are adult and female")

;;; Adverb
(isa Adverb LinguisticObjectType)
(genls Adverb SpeechPart)
(comment Adverb "The collection of all adverbs. Adverbs are words which can modify adverbs, verbs, or adjectives. Many adverbs are morphologically derived from adjectives. Example: `slowly'.")

;;; Advertising
(isa Advertising ScriptType)
(isa Advertising TemporalObjectType)
(genls Advertising CommunicationAct-Single)
(comment Advertising "A collection of CommunicationAct-Singles.  In an Advertising event, someone is communicating, to potential customers of an Agent, the desire of that agent to do business with those customers (either to `do business' in general or to sell them something specific.")

;;; Affection
(isa Affection FeelingAttributeType)
(genls Affection FeelingAttribute)
(comment Affection "A feeling of fondness for someone or something.  Sympathy, liking, warmth, tenderness.  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Affection are Love, Passion, etc.")

;;; Afternoon
(isa Afternoon TemporalObjectType)
(genls Afternoon QualitativeTimeOfDay)
(comment Afternoon "An Afternoon is the daily Event where the Sun moves from its `highest' position in the daily cycle and `sets', i.e from noon till Sunset.  A Midday overlaps the start of an Afternoon, and an Evening is contiguousAfter an Afternoon.  Each Afternoon is temporallyFinishedBy a Sunset.")

;;; Agent
(isa Agent ExistingObjectType)
(genls Agent CompositeTangibleAndIntangibleObject)
(comment Agent "An agent is something which can show independent action, whether conscious or not.  Agent represents the collection of all agents.  Most animals are considered agents, in most contexts; so are most organizations.   Most plants are not agents, in most contexts.  Inanimate devices are sometimes considered agents, in certain contexts.  This is one of those concepts which is important yet very hard to define precisely.  Here is some elaboration, to help convey the intended meaning of the basic criterion for agenthood:  It must seem that a kind of decision-making is going on, even if it's down at the `mindless' level of the reflex reaction of a spider leg to heat, or the reflex reaction of a Human Resources Department rejecting an applicant with no formal degree.  It generally `sounds right' or `feels  natural' to assign causality to agents, rather than some larger or smaller entity.  E.g., it is more natural to say `Fred wrote an essay' than to say `Fred's left hand wrote an essay' or, at the other extreme, to say `The Solar System wrote an essay'.  Similarly, we might very well talk about `Microsoft' buying IBM, but it would be unnatural and even incorrect to talk about a much larger entity (`corporate America') or smaller entity (`the Microsoft lawyers') as the performer of that buying action.")

;;; AgentiveNoun
(isa AgentiveNoun LinguisticObjectType)
(genls AgentiveNoun SpeechPart)
(comment AgentiveNoun "The collection of all nouns in the agentive form.  Agentive nouns usually denote the `doer' or `performer' of some action, and often end in `-er' or `-or'. Example: `runner'.")

;;; Agility
(isa Agility ScriptPerformanceAttributeType)
(genls Agility ScriptPerformanceAttribute)
(comment Agility "Agility is the ScriptPerformanceAttributeType for describing actions in which the performer's whole body moves precisely and in a well-coordinated fashion.")

;;; Agreement
(isa Agreement ExistingObjectType)
(genls Agreement SupposedToBeMicrotheory)
(genls Agreement IntangibleExistingThing)
(comment Agreement "A collection of `objects' with temporal extent.  Each element of Agreement involves two or more parties, who agree that certain propositions should be true.  Making the propositions true may require some action or commitment of wealth on the part of one or more of the agreeingAgents.  Thus, elements of Agreement will usually involve some instances of Obligation.
Note:  Elements of Agreement and Obligation differ, however, in that an obligatedAgent is responsible for the truth of all of the propositions in an obligation.  In an agreement, some agents may not be responsible for all of the propositions in the agreement being true. For example, in a loan agreement, the borrower agrees to give the lender back the money, but the borrower is the only obligatedAgent for the repayment.  Note that obligatedAgents need not be among the agreeingAgents in the agreement that involves or generates the obligation.  For example, the Board of Directors of XYZCorporation may agree that some non-director will assume the post and duties of President of XYZCorporation.  Moreover, agreeingAgents aren't always obligatedAgents; e.g., Wanda and Paul may agree that Paul alone is obligated to do some task.
Examples include instances of PeaceAccord, LegalAgreement, InformalAgreement, BusinessPartnershipAgreement, WorkAgreement, SalesAgreement, MaintenanceAgreement, Reservation, Appointment, etc.")

;;; AgreementNote
(isa AgreementNote SharedNote)
(comment AgreementNote "Elements of Agreement (and of its subsets) are Microtheory instances containing propositions representing what some number of parties have agreed upon. An Agreement may contain a set of Obligations on the part of one or more of the parties. An Agreement may also be just a set of beliefs that the parties have decided to share. To indicate which propositions are true in an Agreement, regardless of whether they are true in reality, use ist-Agreement. (ist-Agreement AGREEMENT PROP) means that PROP is a CycFormula expressing something that was agreed upon in AGREEMENT. Other relevant vocabulary: (agreeingAgents AGREEMENT AGENT) means that AGENT is one of the parties agreeing to AGREEMENT. (subAgreements AGREEMENT1 AGREEMENT2) means that AGREEMENT2 is a part of (is included in) AGREEMENT1. (governedByAgreement ACTION AGREEMENT) means that ACTION is governed by the terms of AGREEMENT. (agreementForbids AGREEMENT AGENT ACTION-TYPE) means that AGREEMENT forbids AGENT from performing elements of ACTION-TYPE. (agreementPeriod AGREEMENT TIME) means that AGREEMENT is considered to be true during the time period TIME.")

;;; AilmentCondition
(isa AilmentCondition PhysiologicalConditionType)
(genls AilmentCondition PhysiologicalCondition)
(comment AilmentCondition "The most general collection of ailment events; a subset of PhysiologicalCondition, and a subset of Event.  An instance of AilmentCondition is a dynamic state of sickness, injury, or physiological impairment.  Having an ailment is an event:  it has temporal aspects, it progresses dynamically, etc., it is not just `being in some static state of un-wellness.'   Some subsets of AilmentCondition are: RespiratoryAilment, HeartCondition, Cancer, MotionSickness, Poisoning, Infection, InjuryCondition.  If a particular person suffers from asthma, that is an element of AilmentCondition.  Each AilmentCondition is a state of actual, developed sickness or impairment, rather than the event of getting sick or becoming impaired.  Also note that each type of ailment, such as Asthma, is the set of all `cases' or `instances' of individuals suffering from that condition.")

;;; Air
(isa Air TangibleStuffStateType)
(genls Air Mixture)
(genls Air GaseousTangibleThing)
(comment Air "A collection of tangibles; a subset of GaseousTangibleThing.  Each element of Air is one `piece' among all the portions of the atmosphere of the Earth, considered as a substance present in various places, in various quantities, under various pressures, etc.  Examples: the AirInAustin; the stuffy air in my office; the thin air atop Annapurna.  See also TheAtmosphereQuaSinglePieceOfStuff, which is all ambient Air on the planet taken as a single object.")

;;; AirForce
(isa AirForce ExistingObjectType)
(genls AirForce MilitaryOrganization)
(comment AirForce "A collection of military organizations.  An element of AirForce is a military organization, modern or historical, composed mainly of airborne forces: bombers, fighters, torpedo planes, parachute troops, surveillance aircraft, etc., and having the function of defending or attacking air space, ships, or ground targets.")

;;; AirForcePersonnel
(isa AirForcePersonnel OccupationType)
(genls AirForcePersonnel MilitaryPerson)
(comment AirForcePersonnel "A collection of people, a subset 
of MilitaryPerson. Each element of this collection is
somebody who works for an AirForce.")

;;; AirRespiration
(isa AirRespiration TemporalStuffType)
(isa AirRespiration DefaultDisjointScriptType)
(genls AirRespiration Respiration)
(comment AirRespiration "A collection of activities constituting a natural PhysiologicalFunction; AirRespiration is the collection of all Respiration events in which an organism trades some of the carbon dioxide in its tissues for oxygen from the atmosphere.")

;;; AirTransportationDevice
(isa AirTransportationDevice ExistingObjectType)
(genls AirTransportationDevice TransportationDevice)
(comment AirTransportationDevice "A collection of physical devices.  An instance of AirTransportationDevice is a device used for transportation through the air.  For example, the Goodyear Blimp, Air Force One, and the SpaceShuttleAtlantis.  Subsets of AirTransportationDevice include the collections Airplane, Helicopter, HotAirBalloon, GroundToOrbitVehicle (such as Atlas rockets or the Space Shuttles), and so on.")

;;; AirlineCompany
(isa AirlineCompany ExistingObjectType)
(genls AirlineCompany Business)
(genls AirlineCompany TransportationCompany)
(comment AirlineCompany "The collection of all air transportation companies.  An element of AirlineCompany is a TransportationCompany that operates airplanes to transport goods or people in exchange for money.")

;;; Airplane
(isa Airplane ProductType)
(isa Airplane ExistingObjectType)
(genls Airplane TransportationDevice-Vehicle)
(genls Airplane ContainerProduct)
(genls Airplane AirTransportationDevice)
(comment Airplane "The colection of all fixed-wing (except Warplanes), heavier-than-air, self-powered flying machines (excluding cruise missiles).")

;;; AirplaneRunway
(isa AirplaneRunway ExistingObjectType)
(genls AirplaneRunway PathForWheeledVehicles)
(comment AirplaneRunway "An airstrip, at an airport, on an aircraft carrier, or in some field, upon which airplanes taxi, take off, and land.")

;;; Airport-Physical
(isa Airport-Physical ExistingObjectType)
(genls Airport-Physical ConstructionArtifact)
(comment Airport-Physical "The collection of all airfields, where airplanes take off and land.  An Airport-Physical definitely has a runway, may or may not have any other buildings.  If it's the grounds of an AirportOrganization, some of those other features will be present.")

;;; AirportOrganization
(isa AirportOrganization ExistingObjectType)
(genls AirportOrganization Organization)
(comment AirportOrganization "A collection of organizations.  An element of AirportOrganization is an organization that manages and controls particular airports and their appurtenant facilities; e.g., LaGuardiaAirport.")

;;; Alertness
(isa Alertness PrimitiveAttributeType)
(genls Alertness ScalarInterval)
(genls Alertness AnimalPhysiologicalAttribute)
(comment Alertness "Alertness is an AnimalPhysiologicalAttribute which specifies how sleepy or alert an animal is.  Levels of Alertness include Asleep, Sleepy, and Awake.")

;;; AllergicReaction
(isa AllergicReaction PhysiologicalConditionType)
(genls AllergicReaction AilmentCondition)
(comment AllergicReaction "A collection of dynamic, physiological states.  An instance of AllergicReaction is an event in which an organism which is exposed to a particular substance (e.g., pollen, mold) develops some abnormality or impairment of its physiological condition as a result of interacting with the substance.  Allergic reactions to some types of substances occur widely in members of a species; e.g., PoisonIvyPoisoning in humans.  But other allergic reactions affect only a small proportion of a species, such as human allergies to penicillin.  This concept is the set of events in which allergic reactions are `taking place', not abstract unrealized potential situations such as `John is allergic to milk.'  I.e., if John were allergic to milk, and he drank some, and then proceeded to have a whopping bad allergic reaction, that latter event would be an element of AllergicReaction.")

;;; Always-TimeInterval
(isa Always-TimeInterval TimeInterval)
(comment Always-TimeInterval "The interval of time which encompasses all time.  In more general MTs we remain agnostic as to whether this time interval has either a beginning or an end, but if it does, Always-TimeInterval begins when time itself begins and ends only when time ends completely.  Every other instance of TimeInterval is a timeSlices of Always-TimeInterval. ")

;;; Ambulance
(isa Ambulance ProductType)
(isa Ambulance ExistingObjectType)
(genls Ambulance RoadVehicle)
(comment Ambulance "The collection of all RoadVehicles that are equipped primarily for transporting wounded, injured or sick persons.")

;;; Ampere
(isa Ampere StandardUnitOfMeasure)
(isa Ampere MKSUnitOfMeasure)
(isa Ampere UnitOfCurrent)
(isa Ampere UnitOfMeasureNoPrefix)
(resultIsa Ampere PhysicalAttribute)
(resultIsa Ampere ScalarInterval)
(argsIsa Ampere CycSystemRealNumber)
(comment Ampere "The standard unit of measure of electrical current, equivalent to a 1-Coulomb flow of current, or 1 Volt across a resistance of 1 Ohm.")

;;; Amphibian
(isa Amphibian BiologicalClass)
(genls Amphibian Vertebrate)
(genls Amphibian NonPersonAnimal)
(comment Amphibian "The collection of all Organism-Wholes which are members of the BiologicalClass Amphibia, being a specialization of Vertebrate.  
Members of this class are smooth skinned Vertebrates which hatch from eggs to form aquatic larvae [see Larva].  These larvae metamorphose into an air-breathing adult [see AirBreathingVertebrate] (normally) having Lungs.  Subsets of this collection include Frogs and Salamanders.")

;;; Anesthesia
(isa Anesthesia ScriptType)
(genls Anesthesia DrugTherapy)
(comment Anesthesia "A collection of events; a subset of DrugTherapy (q.v.).  In an instance of Anesthesia, a BiologicalLivingObject undergoes the effect of some instance of Anesthetic, the effect of which is to eliminate the perception of pain.  Anesthesia events occur in connection with other medical care events, so that a patient will not feel the pain or discomfort that would otherwise be associated with those medical procedures.  Anesthetics are of various chemical kinds, work in various ways, and can be administered in various ways.  They may topically numb an area, they may poison the central nervous system to the point where the animal loses consciousness, etc.  The resulting anesthetic therapies thus may differ, according to the type of anesthetic used; for example, the patient may or may not be conscious during an instance of Anesthesia.  See also AdministeringADrug.")

;;; Anger
(isa Anger FeelingAttributeType)
(genls Anger Frustration)
(comment Anger "Intense feeling of displeasure and usually of antagonism.  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Anger include Belligerence, etc.")

;;; Angle
(isa Angle ObjectType)
(genls Angle GeometricThing)
(comment Angle "A collection of GeometricThings.  Each element of Angle is a pair of line segments, planes (or, more generally, n-dimensional hyperplanes) that share an endpoint, edge (or, more generally, an [n-1]-dimensional hyperedge).")

;;; Angstrom
(isa Angstrom UnitOfDistance)
(isa Angstrom MKSUnitOfMeasure)
(isa Angstrom UnitOfMeasureWithPrefix)
(resultIsa Angstrom Distance)
(resultIsa Angstrom ScalarInterval)
(argsIsa Angstrom CycSystemRealNumber)
(comment Angstrom "Extremely small unit of length, used especially for measuring the wavelength of light, derived by dividing a meter by 10,000,000,000.  Abbreviation: A (with a little circle on the top of the `A').  1 A = 1/10,000,000,000 (i.e., 10^-10) meter.")

;;; AngularAccelerationRate
(isa AngularAccelerationRate MeasurableAttributeType)
(genls AngularAccelerationRate ScalarInterval)
(genls AngularAccelerationRate PhysicalAttribute)
(comment AngularAccelerationRate "AngularAccelerationRate is the rate at which the RateOfRotation of an object changes.It is a measurable physical quantity, measured in units such as radians per second per second.")

;;; Animal
(isa Animal BiologicalKingdom)
(genls Animal PerceptualAgent)
(genls Animal AnimalBLO)
(genls Animal SolidTangibleThing)
(genls Animal Organism-Whole)
(comment Animal "The collection of all animals; this large class of organisms is one instance of BiologicalKingdom.  Animals are typically motile, living, whole organisms; they are elements of Heterotroph, incapable of performing instances of Photosynthesis.  Animal cells contain cholesterol and lack cell walls made of cellulose.  Person is a subset of Animal; see also NonPersonAnimal.")
(synonymousExternalConcept Animal SENSUS-Information1997 "ANIMAL")

;;; AnimalActivity
(isa AnimalActivity ScriptType)
(isa AnimalActivity TemporalObjectType)
(genls AnimalActivity Action)
(genls AnimalActivity CompositePhysicalAndMentalEvent)
(comment AnimalActivity "A collection of events.  Each element of AnimalActivity is an action whose performer(s) (see doneBy) belong to the collection Animal.")

;;; AnimalBLO
(isa AnimalBLO ExistingObjectType)
(genls AnimalBLO BiologicalLivingObject)
(comment AnimalBLO "The subset of BiologicalLivingObject which includes all the elements of Animal and of AnimalBodyPart and AnimalBodyRegion.")

;;; AnimalBodyPart
(isa AnimalBodyPart ExistingObjectType)
(genls AnimalBodyPart AnimalBodyRegion)
(comment AnimalBodyPart "The collection of all the anatomical parts and physical regions of all living animals; a subset of OrganismPart.  Each element of AnimalBodyPart is a piece of some live animal and thus is itself an instance of BiologicalLivingObject.  AnimalBodyPart includes both highly localized organs (e.g., hearts) and physical systems composed of parts distributed throughout an animal's body (such as its circulatory system and nervous system).  
Note: Severed limbs and other parts of dead animals are NOT included in this collection; see DeadFn.")

;;; AnimalBodyPartType
(isa AnimalBodyPartType SiblingDisjointCollection)
(genls AnimalBodyPartType ExistingObjectType)
(comment AnimalBodyPartType "The collection of all the types of AnimalBodyParts.  An AnimalBodyPartType  is a characterization of body parts by structure and/or function.   Some elements of this collection include SpinalColumn, Eyelash, NervousSystem, Urethra, Wing-AnimalBodyPart, HeelOfPalm, etc.  As can be seen from those examples, AnimalBodyPartType is not organized along species/order/class/phylum/... taxonomic lines.")

;;; AnimalBodyRegion
(isa AnimalBodyRegion ExistingObjectType)
(genls AnimalBodyRegion OrganismPart)
(genls AnimalBodyRegion AnimalBLO)
(comment AnimalBodyRegion "The set of parts of an animal's body that one might point to, operate on, photograph, transplant, etc.  So this is a collection of (conceptual) spatial subdivisions of the bodies of Animals, generally contiguous and having some more or less clear boundary.  Some elements of this collections are Einstein's head, SantasBeard, and Babe Ruth's right arm.  Other elements of this set are what might be considered unhealthy body regions, such as a blister, a puncture wound, a bruise, etc. -- but those are still clearly a part of an animal's body, can be pointed to, photographed, bandaged up, etc.   
Note that this concept is quite different from an animal body `system' (such as the lymph system, the nervous system, etc.) which comprises a small portion of an animal's total mass but is distributed throughout the animal's body -- see AnimalBodyPart.  (At the naive, commonsense level of physiology, and for almost all purposes, it is perfectly acceptable to conceptualize Santa's beard as one AnimalBodyRegion, and the same for Farrah Fawcett's hair, etc.  A borderline case of this is:  Cher's fingernails.  In some contexts, one would treat those as an AnimalBodyRegion, and in other contexts one would treat them as ten separate AnimalBodyRegions.)")

;;; AnimalMigration
(isa AnimalMigration ScriptType)
(isa AnimalMigration TemporalObjectType)
(genls AnimalMigration LocomotionEvent)
(genls AnimalMigration Translation-RoundTrip)
(comment AnimalMigration "The collection of regular, species-linked movements of an animal or group of animals from one place to another, usually with a return to the starting point after a certain period of time.  In some species, the migration cycle occurs once in a lifetime, while others migrate annually on a seasonal basis.   Migration is typically linked with an animal's reproductive cycle (as in salmon), but may also involve seasonal relocation to a more hospitable climate and/or more plentiful food supply. For example, many birds exhibit seasonal migration; e.g., native Northeastern U.S. birds that spend their winters in the Southern U.S.")

;;; AnimalPhysiologicalAttribute
(isa AnimalPhysiologicalAttribute AttributeType)
(genls AnimalPhysiologicalAttribute AttributeValue)
(genls AnimalPhysiologicalAttribute PhysiologicalAttribute)
(comment AnimalPhysiologicalAttribute "The broadest collection of attributes of Animals that describe the physiological aspects of an animal, including its physiological (1) capacities, (2) conditions, and (3) states.  Examples include: (1) Capacities: Fertile, HearingImpaired, Paraplegic; (2) Conditions: Anemic, AthleticPhysicalBuild; (3) States: Intoxicated, Injured, Inflamed.  PlantPhysiologicalAttributes, such as InBloom, are excluded.")

;;; AnimalSound
(isa AnimalSound TemporalStuffType)
(genls AnimalSound AudibleSound)
(genls AnimalSound InformationBearingWavePropagation)
(comment AnimalSound "A collection of information bearing things (IBTs); a subset of InformationBearingWavePropagation.  Each element of AnimalSound is a sound of a type which originally was, and typically is, made by an animal using just its body parts (though such a sound may subsequently have been reproduced by imitation or recording).  For example, instances of Birdsong, NeighingSound, PurringSound, BarkingSound, BrayingSound.  Note that the restriction to sounds produced by body parts alone excludes noises produced by moving external objects; i.e., AnimalSound does NOT include rustling the leaves underfoot, splashing water, or playing a musical instrument.")

;;; AnimalWalkingProcess
(isa AnimalWalkingProcess ObjectType)
(isa AnimalWalkingProcess TemporalStuffType)
(isa AnimalWalkingProcess DefaultDisjointScriptType)
(genls AnimalWalkingProcess LocomotionProcess)
(genls AnimalWalkingProcess SimpleWholeBodyMovement)
(comment AnimalWalkingProcess "The collection of individual LocomotionProcess es in which an Animal agent travels on foot using voluntary movements of its legs.")

;;; AnnualClimateCycle
(isa AnnualClimateCycle ScriptType)
(genls AnnualClimateCycle WeatherEvent)
(comment AnnualClimateCycle "A collection of events.  Each element of AnnualClimateCycle is an extended event, one year in length, which encompasses subEvents describing the changing of the seasons.  Subsets include TemperateClimateCycle, HumidSubtropicalClimateCycle, etc.  See also the comments on ClimateCycleType, hasClimateType.")

;;; AnnualEventType
(isa AnnualEventType Collection)
(genls AnnualEventType TemporalObjectType)
(comment AnnualEventType "A collection of collections.  The instances of an element of AnnualEventType are synchronized with the calendar.  If ?X is an AnnualEventType, then one occurs each year.  For example, ChristmasHoliday is an AnnualEventType, because one occurs each year, synchronized with the calendar.")

;;; AnteriorRegionFn
(isa AnteriorRegionFn ReifiableFunction)
(isa AnteriorRegionFn IndividualDenotingFunction)
(resultIsa AnteriorRegionFn AnimalBodyRegion)
(arg1Isa AnteriorRegionFn AnimalBodyRegion)
(comment AnteriorRegionFn "The function (AnteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the front half or section, or the anterior main portion, of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic front/back orientation, or is a (non-backward-facing) part of a larger region or object that has a front/back orientation.")

;;; AntiSymmetricBinaryPredicate
(isa AntiSymmetricBinaryPredicate PredicateCategory)
(isa AntiSymmetricBinaryPredicate Collection)
(genls AntiSymmetricBinaryPredicate BinaryPredicate)
(comment AntiSymmetricBinaryPredicate "A collection of predicates; the subset of BinaryPredicate whose elements represent antisymmetric relations.  A predicate F is an element of AntiSymmetricBinaryPredicate if and only if F is a binary predicate and, if both (F X Y) and (F Y X) hold, then X=Y, for every X,Y within the domain and range of F.  For example, greaterThanOrEqualTo, compatibleBloodTypes.







Note this additional restriction: A Cyc predicate F can be an element of AntiSymmetricBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also NoteOnArgumentTypingAndPropertiesOfRelations.")

;;; AntiTransitiveBinaryPredicate
(isa AntiTransitiveBinaryPredicate PredicateCategory)
(genls AntiTransitiveBinaryPredicate BinaryPredicate)
(genls AntiTransitiveBinaryPredicate IrreflexiveBinaryPredicate)
(comment AntiTransitiveBinaryPredicate "A collection of predicates; the subset of BinaryPredicate whose elements represent anti-transitive relations.  A predicate F is an element of AntiTransitiveBinaryPredicate if and only if F is a binary predicate and, for every X,Y,Z in the domain of F, (not (and (F X Y)(F Y Z)(F X Z))).  

Note this additional restriction: A Cyc predicate F can be an element of AntiTransitiveBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also NoteOnArgumentTypingAndPropertiesOfRelations.")

;;; Anticipation-Feeling
(isa Anticipation-Feeling FeelingAttributeType)
(genls Anticipation-Feeling FeelingAttribute)
(comment Anticipation-Feeling "Emotion accompanying an expectation of something pleasant in the foreseeable future.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness. ")

;;; Apathy
(isa Apathy FeelingAttributeType)
(genls Apathy FeelingAttribute)
(comment Apathy "A lack of interest or concern.  If someone is feeling some measure of Apathy, then they typically will have little or no response to things normally expected to excite emotion or interest.  This is a Collection --- for an explanation of that, see Happiness.  A related FeelingAttributeType is Boredom.")

;;; Appendage-AnimalBodyPart
(isa Appendage-AnimalBodyPart AnimalBodyPartType)
(genls Appendage-AnimalBodyPart SolidTangibleThing)
(genls Appendage-AnimalBodyPart AnimalBodyPart)
(comment Appendage-AnimalBodyPart "The collection of all appendages of Animals.  An appendage is an AnimalBodyPart that is connected to, and extends from, the animal's Torso (or else from another of its appendages, such as a hand extending from an arm).  Each appendage is used by the Animal for one or more functions; altogether, appendages serve a wide variety of functions such as locomotion, manipulation, sensing, fighting, scratching, heat dissipation, balance, etc.")

;;; AppropriatingSomething
(isa AppropriatingSomething TemporalObjectType)
(isa AppropriatingSomething DefaultDisjointScriptType)
(genls AppropriatingSomething GainingUserRights)
(genls AppropriatingSomething TakingSomething)
(comment AppropriatingSomething "A collection of events; a subset of TakingSomething and of GainingUserRights.  In an instance of AppropriatingSomething, an Agent takes something that no one else has user rights over, such as air for breathing, or some object which at that time belongs to no one (e.g.,a dime lying in the street).
Note: The English verb `appropriate' can also mean to take something away from someone else, against their will and wrongfully, but that is not what is meant here.  For that, see Stealing-Generic.")

;;; Approval
(isa Approval FeelingAttributeType)
(genls Approval Satisfaction)
(comment Approval "The emotion of viewing positively a state of affairs or other agent's actions.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; April
(isa April MonthOfYearType)
(genls April CalendarMonth)

;;; AquaticOrganism
(isa AquaticOrganism OrganismTypeByHabitat)
(genls AquaticOrganism Organism-Whole)
(comment AquaticOrganism "The collection of organisms adapted to life underwater, which spend all or most of their time immersed in water.  This includes the elements of Fish, also many instances of Mollusk, SeaMammal, etc.")

;;; Area
(isa Area DerivedNumericAttributeType)
(genls Area PhysicalAttribute)
(genls Area ScalarInterval)
(comment Area "A collection of physical attributes.  Each element of Area is an amount of two-dimensional space, i.e., a surface.  Elements of Area may be either a fixed interval, such as the area of a rectangle 5 cm x 10 cm, or a range, such as the area of a city lot.  See UnitOfArea for the units used by Cyc to measure areas.")

;;; Arm
(isa Arm SymmetricAnatomicalPartType)
(genls Arm Appendage-AnimalBodyPart)
(comment Arm "The collection of all animal arms.  An Arm of an animal is one of its AnimalBodyParts, more particularly one of its appendages, a limb which it uses for manipulation moreso than for locomotion.  A Hand is considered part of an Arm.")

;;; ArmMovement
(isa ArmMovement TemporalStuffType)
(isa ArmMovement DefaultDisjointScriptType)
(genls ArmMovement BodyMovementEvent)
(comment ArmMovement "The collection of any movements of an arm that are generated by the Animal whose arm it is, through nerve impulses to the arm.  Physically, an ArmMovement involves movement of the upper arm or elbow in relation to the body to which it is attached.")

;;; Army
(isa Army ExistingObjectType)
(genls Army MilitaryOrganization)
(comment Army "A collection of military organizations.  An element of Army is a military organization, modern or historical, composed mainly of ground forces, which may include infantry, cavalry, artillery, tank and miscellaneous mechanized units, and special forces.  Its personnel may also include support workers such as engineers and medical staff.")

;;; ArmyPersonnel
(isa ArmyPersonnel OccupationType)
(genls ArmyPersonnel Soldier)
(genls ArmyPersonnel MilitaryPerson)
(comment ArmyPersonnel "A collection of people, a subset 
of MilitaryPerson. Each element of this collection is
somebody who works for an Army.")

;;; ArrestingSomeone
(isa ArrestingSomeone ScriptType)
(isa ArrestingSomeone TemporalObjectType)
(genls ArrestingSomeone TakingCustodyOfAnimal)
(comment ArrestingSomeone "A collection of events.  In an instance of ArrestingSomeone, a law enforcement officer arrests another person, who is thereupon taken into custody (InCustody).")

;;; ArtObject
(isa ArtObject ExistingObjectType)
(genls ArtObject Product)
(genls ArtObject Artifact)
(genls ArtObject CompositeTangibleAndIntangibleObject)
(genls ArtObject InformationBearingObject)
(comment ArtObject "A collection of information bearing objects (IBOs).  Each element of ArtObject is a tangible object that is a work, or a reproduction of a work, in one of the representational or plastic arts, such as a painting, sculpture, ceramic piece, quilt, stained glass composition, etc.  ArtObject does NOT include plays, movies, music, performance art, or other activities.  ArtObject is a subset of InformationBearingObject, but its elements need not have propositional content, although they may.  Examples of ArtObject: the StatueOfLiberty, the Mona Lisa, a poster reproduction of Van Gogh's `Starry Night', Rodin's `Burghers of Calais', a piece of Ju ware from the Sung Dynasty, the windows of Chartres Cathedral, a series of prints by Picasso.")

;;; Arthropod
(isa Arthropod BiologicalPhylum)
(genls Arthropod Invertebrate)
(comment Arthropod "An instance of BiologicalPhylum whose taxonMembers include (mostly) the numerous collections of chitin-armored invertebrates that have jointed bodies and limbs, e.g., insects, spiders, crustaceans, etc.")

;;; Artifact
(isa Artifact Collection)
(genls Artifact SomethingExisting)
(genls Artifact PartiallyTangible)
(comment Artifact "A collection of tangible things.  An instance of Artifact is a tangible which was more or less intentionally created by an Agent (or a group of Agents working together) to serve some purpose or perform some function.  By `created', we don't require that the matter itself be created, it is often just the result of some sort of assemblage or modification process, such as a wooden flute that's been whittled from a tree branch, a sawhorse that's been put together out of boards and nails, a coin that's been minted by embossing or by melting liquid silver into a mold, etc.

Let's consider some positive and negative examples.

In addition to the obvious human artifacts (buildings, tools, textiles, power lines), this collection includes certain sorts of things made by Animals, such as bird nests, termite mounds, and beaver dams.

Something which just barely squeaks through the intended meaning of this concept is YaleUniversity.  In addition to the abstract legal entity, it consists of a set of physical buildings, furnishings, etc.  By contrast, an organization that had no headquarters building, equipment, tangible property, etc. would not be an artifact.  Similarly, a fictional character such as Tom Sawyer is not an artifact (in the context of the story, Tom is not an artifact because he is a real boy; in the context of the real world, Tom is not an artifact because he has no tangible component whatsoever.)

While some artifacts may be alive, or contain living subparts, we do not intend this collection to encompass all organisms which resulted from normal biological reproductive processes.  Your child is not an artifact.

If you do an oil painting of a house that is an artifact, but much more borderline is what you get if you take a rock and just paint it a solid color, say white.  In general that won't be an artifact unless it serves some purpose, such as marking the shoulder of a roadway, but more questionable cases are if the purpose of the white rock is just `to be sold as art' or `to look pretty.'  The white rock might thus be an artifact in certain contexts, but not in others.

Not every instance of Path-Generic (q.v.) is necessarily an instance of Artifact.  For example, some channels used for navigation may not be artifacts, because even though they are marked with human artifacts (i.e., channel markers) as locations where ships may safely travel, the channel itself may have been a naturally occurring pre-existing thing -- e.g., the EnglishChannel.  If a Channel-WideStrait were produced or maintained only by constant dredging, it might count as an artifact.  By contrast, each Canal, such as SuezCanal, is almost certain to be an Artifact.")
(synonymousExternalConcept Artifact SENSUS-Information1997 "ARTIFACT")

;;; ArtificialMaterial
(isa ArtificialMaterial ExistingStuffType)
(genls ArtificialMaterial Artifact)
(comment ArtificialMaterial "A collection of substances; a subset of Artifact.  An instance of ArtificialMaterial is a portion of artificial stuff that was intentionally made by some agent(s), such as Plastic or SweetNLow. Since ArtificialMaterials are intentionally produced, this class does not normally include materials which are merely byProducts or wasteProducts of an intentional process.  However, what is a byproduct at one time or in one context may be a useful material that would count as an instance of ArtificialMaterial in another.")

;;; Asleep
(isa Asleep Alertness)
(genlAttributes Asleep Unconscious)
(comment Asleep "Asleep is the Alertness attribute of being asleep.  Asleep is a specialization of Unconscious.  (holdsIn (YearFn 1776) (alertnessLevel RipVanWinkle Asleep)).")

;;; Assertion
(isa Assertion Collection)
(isa Assertion ObjectType)
(genls Assertion Individual)
(genls Assertion CycIndexedTerm)
(genls Assertion ComputationalObject)
(genls Assertion AbstractInformation)
(comment Assertion "A collection of computational objects.  Each instance of Assertion is either (1) an assertion reified in the Cyc Knowledge Base (i.e., a formula and its associated datastructure, actually in the Cyc KB), or (2) an Epistemological Level CycFormula that can be canonicalized and reified as one or more KB assertions.  Assertion is used as an argument type for meta-predicates such as overrides.")

;;; AstronomicalObject
(isa AstronomicalObject ExistingObjectType)
(genls AstronomicalObject InanimateObject-Natural)
(genls AstronomicalObject TangibleThing)
(comment AstronomicalObject "A collection of tangible objects.  Each element of AstronomicalObject is an object of interest to astronomers, which includes the Earth along with other objects in outer space.  Some, but not all, elements of AstronomicalObject belong to CelestialObject, the collection of heavenly bodies visible from earth.  Examples: Polaris-TheStar, the Sun, PlanetSaturn.")

;;; AsymmetricBinaryPredicate
(isa AsymmetricBinaryPredicate PredicateCategory)
(isa AsymmetricBinaryPredicate Collection)
(genls AsymmetricBinaryPredicate BinaryPredicate)
(genls AsymmetricBinaryPredicate IrreflexiveBinaryPredicate)
(genls AsymmetricBinaryPredicate AntiSymmetricBinaryPredicate)
(comment AsymmetricBinaryPredicate "A collection of predicates; the subset of AntiSymmetricBinaryPredicate whose elements represent asymmetric relations.  A predicate F is an element of AsymmetricBinaryPredicate if and only if F is a binary predicate and (F X Y) implies (not (F Y X)).  For example, northOf, children, greaterThan, overrides.



Note this additional restriction: A Cyc predicate F can be an element of AsymmetricBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also NoteOnArgumentTypingAndPropertiesOfRelations.")

;;; Athlete
(isa Athlete OccupationType)
(genls Athlete Professional)
(genls Athlete Person)
(comment Athlete "A collection of persons.  Each element of Athlete is a person who trains to compete in contests involving physical agility, stamina, or strength.  In the JobMt, Athlete is a subset of Professional (q.v.), and hence in that microtheory represents the collection of professional athletes.")

;;; AthleticActivity
(isa AthleticActivity ScriptType)
(genls AthleticActivity Exercising)
(comment AthleticActivity "Any athletic activity, not just sports events.  E.g., spelunking, or going for a jog, or shooting a few hoops.")

;;; AtlanticOcean
(isa AtlanticOcean Entity)
(isa AtlanticOcean Ocean)
(comment AtlanticOcean "The main body of salt water in the WesternHemisphere-Region, bordering on five continents (Western coasts of Europe and Africa, Antarctica, Eastern coasts of North and South Americas).")

;;; Atom
(isa Atom ExistingObjectType)
(genls Atom ChemicalObject)
(comment Atom "A collection of microscopic-scale objects.  Each instance of Atom has one atomic nucleus and some number of electrons.  As a default, we assume that an instance of Atom has no net charge, i.e., that it has as many instances of Electrons as it does of Protons in its AtomicNucleus; but note there are exceptions, e.g., in the subset Ion.")

;;; AtomFn
(isa AtomFn CollectionDenotingFunction)
(resultIsa AtomFn ExistingObjectType)
(resultGenl AtomFn Atom)
(arg1Isa AtomFn ElementStuffTypeByNumberOfProtons)
(arg1Genl AtomFn ElementStuff)
(comment AtomFn "AtomFn is a Cyc function, specifically a CollectionDenotingFunction.  It may be used to denote any subset of Atom which contains all the atoms of a particular element type.  AtomFn takes an instance of ElementStuffTypeByNumberOfProtons as its single argument and returns the collection of all atoms of that element.  Thus, for any E which is an ElementStuffTypeByNumberOfProtons, (AtomFn E) returns the subset of Atom which contains all the atoms of element type E.   Each atom in the collection (AtomFn E) has N protons in its atomic nucleus, where N is the atomicNumber of the element type E.  For example, (AtomFn Carbon) is the collection of carbon atoms, each of which has 6 protons in its nucleus.")

;;; AtomicNucleus
(isa AtomicNucleus ExistingObjectType)
(genls AtomicNucleus ChemicalObject)
(comment AtomicNucleus "A collection of objects; a subset of ChemicalObject.  Each instance of AtomicNucleus is an object composed of some definite number of instances of Proton and some definite number of instances of Neutron.  Instances of the collection Atom are each composed of one member of AtomicNucleus and some number of electrons.")

;;; AttemptingFn
(isa AttemptingFn CollectionDenotingFunction)
(resultIsa AttemptingFn ScriptType)
(resultGenl AttemptingFn PurposefulAction)
(arg1Isa AttemptingFn ScriptType)
(arg1Isa AttemptingFn TemporalObjectType)
(arg1Genl AttemptingFn Action)
(comment AttemptingFn "(AttemptingFn ACTION-TYPE) maps from the collection ACTION-TYPE (a subset of Action) to a collection of attempts to perform ACTION-TYPE.  Thus the result of (AttemptingFn Speaking) would be the collection of attempts at speaking, both those attempts which are successes (thus resulting in actual Speakings), and those which are failures.  AttemptingFn operates on the Collection level, and is used to talk about kinds of attempts that can occur.  To talk about the specific attempt that brought about an event which actually occurred, use SuccessfulAttemptFn.")

;;; AttributeType
(isa AttributeType Collection)
(genls AttributeType ObjectType)
(comment AttributeType "A collection of collections.  Each element of AttributeType is a collection of attributes.  Each element of AttributeType is a subset of AttributeValue (q.v.).  Examples include SensoryAttribute, BodyPartPosition, OrientationAttribute, SecurityClearanceLevel, ComputerVideoResolution, TorqueVector, and many more.")

;;; AttributeValue
(isa AttributeValue AttributeType)
(isa AttributeValue Collection)
(genls AttributeValue IntangibleIndividual)
(genls AttributeValue Individual)
(comment AttributeValue "The set of all attributes represented in Cyc. AttributeValue includes quantities, such as 5 inches (i.e., (Inch 5)) or 1000 dollars per year (i.e., (DollarsPerYear 1000)), as well as qualities like Hilly, Rough, DeviceOn, etc., which can be used to make assertions about the state of some tangible object.")
(synonymousExternalConcept AttributeValue SENSUS-Information1997 "QUALITY")

;;; AudibleSound
(isa AudibleSound WavePropagationType)
(genls AudibleSound Sound)
(comment AudibleSound "A collection of events; a subset of Sound.  Each element of AudibleSound is a sound within the Frequency range of human hearing.")

;;; AudioCommunicating
(isa AudioCommunicating TemporalStuffType)
(isa AudioCommunicating DefaultDisjointScriptType)
(genls AudioCommunicating Communicating)
(comment AudioCommunicating "A collection of information transfer events; a subset of Communicating.  Each element of AudioCommunicating is a transmission of sound-borne information between two (or more) agents; e.g., talking, clapping, or performing music.")

;;; August
(isa August MonthOfYearType)
(genls August CalendarMonth)

;;; AuthorizedAgreement
(isa AuthorizedAgreement ExistingObjectType)
(genls AuthorizedAgreement Agreement)
(comment AuthorizedAgreement "The collection of generic agreements that are authorized by one of the agreeing parties (typically by the issuer of the document embodying the agreement).  AuthorizedAgreements are generic in the sense that their authorizing agents are party to many similar agreements; for that reason, an AuthorizedAgreement is typically given a unique identification number.  Examples: bank accounts, driver's licenses, stock certificates.")

;;; AutoDealership
(isa AutoDealership ExistingObjectType)
(genls AutoDealership RetailStore)
(genls AutoDealership LocalCustomerContactPoint)
(genls AutoDealership Business)
(comment AutoDealership "Each instance is an establishment (an organization located at one site) that sells automobiles and other types of road vehicles to consumers.")

;;; Automobile
(isa Automobile ProductType)
(isa Automobile ExistingObjectType)
(genls Automobile HumanlyOccupiedSpatialObject)
(genls Automobile RoadVehicle)
(genls Automobile ContactLocation)
(comment Automobile "A collection of transportation devices -- those commonly known as `passenger cars.'  An instance of Automobile is an element of RoadVehicle which was designed for carrying about 4 passengers (give or take a factor of 2).  In addition to midsize cars, Automobile includes elements belonging to the subsets SportsCar and Van.  This collection does NOT include motorcycles, pickups, buses, tractors, etc.")

;;; Awake
(isa Awake Alertness)
(comment Awake "Awake is the Alertness attribute of being awake.")

;;; AxisFn
(isa AxisFn ReifiableFunction)
(isa AxisFn IndividualDenotingFunction)
(resultIsa AxisFn IntrinsicAxisOfObject)
(arg1Isa AxisFn PartiallyTangible)
(arg2Isa AxisFn RegionType)
(arg2Genl AxisFn Side)
(arg3Isa AxisFn RegionType)
(arg3Genl AxisFn Side)
(comment AxisFn "(AxisFn OBJ REGIONTYP REGIONTYP) is a function that, applied to an individual object OBJ and two types of region of such an object, returns the axis through the object, determined by running the axis through the individual regions (of those types) of the object.  Thus AxisFn is an  IndividualDenotingFunction that returns a particular axis of an individual object. (AxisFn OBJ FROM-SIDE TO-SIDE) denotes a directional axis, pointing from FROM-SIDE to TO-SIDE of OBJ and extending through it. For example, (AxisFn `Chair37' BackSide FrontSide) would denote the back-to-front axis of Chair37. See also IntrinsicAxisOfObject.")

;;; BackSide
(isa BackSide RegionType)
(genls BackSide Side)
(comment BackSide "The collection of all the entire back sides (as conventionally understood) of all objects that have distinct Sides, one of which faces in the backwards direction.")

;;; Baked
(isa Baked PreparationAttribute)
(genlAttributes Baked Cooked)
(comment Baked "The attribute Baked is a specialized form of Cooked.  Food that is Baked has been prepared in an event of BakingFood, using a $#RegularOven.")

;;; BakingFood
(isa BakingFood TemporalObjectType)
(isa BakingFood DefaultDisjointScriptType)
(genls BakingFood CookingFood)
(comment BakingFood "A collection of events in which food is baked in a RegularOven.  After an event of BakingFood, the food involved has been Baked.")

;;; BalconyLevelInAConstruction
(isa BalconyLevelInAConstruction ExistingObjectType)
(genls BalconyLevelInAConstruction ContainerProduct)
(genls BalconyLevelInAConstruction LevelOfAConstruction)
(comment BalconyLevelInAConstruction "This refers to those overhanging levels or balconies found in some churches, theatres, etc.  They ARE NOT the kind of balcony that protrude from a window or from an already existing level.  These levels are often a third the size of the floor or level below them, and therefore can be called legitimate levels themselves.  They usually contain a mob of seats.")

;;; Bangladesh
(isa Bangladesh IndependentCountry)
(isa Bangladesh Entity)

;;; BankDebitCard
(isa BankDebitCard ExistingObjectType)
(genls BankDebitCard Card)
(genls BankDebitCard TenderObject)
(genls BankDebitCard IDDocument)
(genls BankDebitCard OfficialDocument)
(comment BankDebitCard "A collection of official `documents'.  Each element of BankDebitCard is a plastic card that enables the holder to access the account with which the card is associated; typically used to withdraw funds from the account.  Cf. CreditCard.")

;;; Bartering
(isa Bartering TemporalObjectType)
(isa Bartering DefaultDisjointScriptType)
(genls Bartering ExchangeOfUserRights)
(genls Bartering Transaction)
(comment Bartering "The collection of transactions between two Agents in which one Agent gives items or services to another Agent, and the other Agent gives items or services in return, and neither of the items or services is money, credit, or payment of money.")

;;; BaseKB
(isa BaseKB BroadMicrotheory)
(genlMt BaseKB BaseKB)
(comment BaseKB "BaseKB is the most general Microtheory currently in use.  Assertions in this context are `accessible' from any other Microtheory via the genlMt relation.  In the partial order of microtheories, all microtheories have access to BaseKB.  An assertion which is true here will by default be true in every context.  The `content' of BaseKB consists of very general assertions which are expected to be usable in most or all applications of Cyc, as well as Cyc's most fundamental assertions that it uses in inference, and all completely universal, timeless truths.")

;;; BasementLevelInAConstruction
(isa BasementLevelInAConstruction ExistingObjectType)
(genls BasementLevelInAConstruction LevelOfAConstruction)
(comment BasementLevelInAConstruction "Any level of a building which is underground.")

;;; Battle
(isa Battle ScriptType)
(isa Battle TemporalObjectType)
(genls Battle HostileSocialAction)
(comment Battle "The collection of events in which two or more large groups of Persons meet and fight one another, each group seeking to vanquish (some of) the others.  Battles are often conducted by MilitaryOrganizations, and they may influence the outcomes of WagingWar.  A Battle will have as subEvents at least two PhysicallyAttackingAnAgent events, in which one of the fighting groups attacks the other.")

;;; BeliefSystem
(isa BeliefSystem BeliefSystemType)
(genls BeliefSystem MentalObject)
(comment BeliefSystem "The collection of ideologies (systems of belief) in terms of which an agent characterizes (i.e., makes sense of) their world.  Elements of this set include: VegetarianBeliefs, GermanNaziIdeology, RepublicanIdeology, CommunistIdeology, PacifistIdeology, Atheism, etc. See also ConventionalClassificationSystem.")

;;; BeliefSystemType
(isa BeliefSystemType Collection)
(genls BeliefSystemType StuffType)
(comment BeliefSystemType "The collection of all the kinds of BeliefSystems: religious, philosophical, political, ethical, cultural, and scientific.  Some elements of this collection include Religion, PhilosophyBeliefs, etc.  The most general member of this set is BeliefSystems (qv).")

;;; Bendable
(isa Bendable PhysicalStructuralAttribute)
(genlAttributes Bendable Flexible)
(comment Bendable "A physical attribute.  Bendable is the PhysicalStructuralAttribute of an object that tends to stay in the contorted shape when contorted.  Note: for something to be bendable, it must be Flexible.")

;;; BengaliLanguage
(isa BengaliLanguage LivingLanguage)
(comment BengaliLanguage "Language spoken in the Indic area.")

;;; Bicycle
(isa Bicycle ExistingObjectType)
(genls Bicycle LandTransportationDevice)
(genls Bicycle Device-UserPowered)
(comment Bicycle "The collection of all bicycles, personal wheeled transport devices powered by human peddling.   Most Bicycles have two main wheels arranged in-line, but some tandem bicycles have more than two wheels.")

;;; BilaterallySymmetricObject
(isa BilaterallySymmetricObject ExistingObjectType)
(genls BilaterallySymmetricObject SpatialThing)
(comment BilaterallySymmetricObject "The collection of objects which are symmetric on both sides of a bisecting axis, as are most vertebrates.")

;;; Bill-PaymentRequest
(isa Bill-PaymentRequest ExistingObjectType)
(genls Bill-PaymentRequest OfficialDocument)
(genls Bill-PaymentRequest HardcopyInformationBearingObject)
(genls Bill-PaymentRequest TextualMaterial)
(comment Bill-PaymentRequest "A collection of documents.  Each element of Bill-PaymentRequest is a notification, demand, or request made by a creditor (or its agent) to a debtor, for payment of a debt previously incurred for some loan, goods, or services.  Examples: telephone bills, tax bills, department store bills, cleaning bills, fuel bills.")

;;; BillingLocation
(isa BillingLocation ContactLocationType)
(genls BillingLocation MailingLocation)
(comment BillingLocation "A collection of places; a subset of ContactLocation.  Each element of BillingLocation is a location to which invoices are sent.  For most private individuals, their billing location is their home address.")

;;; BinaryPredicate
(isa BinaryPredicate PredicateCategory)
(isa BinaryPredicate Collection)
(genls BinaryPredicate Predicate)
(comment BinaryPredicate "BinaryPredicate is the collection of all Cyc predicates which take two arguments.")
(synonymousExternalConcept BinaryPredicate SENSUS-Information1997 "TWO-PLACE-RELATION")

;;; BioDeteriorationResistance
(isa BioDeteriorationResistance PrimitiveAttributeType)
(genls BioDeteriorationResistance ScalarInterval)
(genls BioDeteriorationResistance PhysicalAttribute)
(comment BioDeteriorationResistance "A collection of attributes; a subset of PhysicalAttribute.  Each element of BioDeteriorationResistance represents a specific capacity of a tangible object to resist biological deterioration.  Degrees of BioDeteriorationResistance may be represented using GenericValueFunctions.  Indicate a particular object's BioDeteriorationResistance with the predicate resistanceToBioDeterioration.")

;;; BiologicalCatabolismEvent
(isa BiologicalCatabolismEvent TemporalObjectType)
(isa BiologicalCatabolismEvent DefaultDisjointScriptType)
(genls BiologicalCatabolismEvent BiologicalMetabolismEvent)
(genls BiologicalCatabolismEvent BiologicalDestructionEvent)
(comment BiologicalCatabolismEvent "A collection of events.  Each BiologicalCatabolismEvent involve the destruction of larger molecules.  E.g., the degradation of glucose into carbon dioxide and water, which releases energy used to make ATP (adenosine triphosphate).")

;;; BiologicalClass
(isa BiologicalClass BiologicalTaxonType)
(genls BiologicalClass BiologicalTaxon)
(comment BiologicalClass "The collection of taxonomic subdivisions directly under BiologicalPhylum (for animals and for the animal-like organisms in the ProtistaKingdom), or BiologicalDivision (for the plants and for the plant-like organisms within the ProtistaKingdom).")

;;; BiologicalDecompositionEvent
(isa BiologicalDecompositionEvent TemporalObjectType)
(isa BiologicalDecompositionEvent DefaultDisjointScriptType)
(genls BiologicalDecompositionEvent BiologicalDestructionEvent)
(genls BiologicalDecompositionEvent DecompositionEvent)
(comment BiologicalDecompositionEvent "A collection of events.  In each BiologicalDecompositionEvent, some living structures are decomposed.")

;;; BiologicalDestructionEvent
(isa BiologicalDestructionEvent TemporalObjectType)
(isa BiologicalDestructionEvent DefaultDisjointScriptType)
(genls BiologicalDestructionEvent BiologicalEvent)
(genls BiologicalDestructionEvent DestructionEvent)
(comment BiologicalDestructionEvent "A collection of events.  In each element of BiologicalDestructionEvent, something is destroyed by some element(s) of BiologicalLivingObject.  For example, DigestingInStomach is a subset of BiologicalDestructionEvent.")

;;; BiologicalDevelopmentEvent
(isa BiologicalDevelopmentEvent TemporalObjectType)
(isa BiologicalDevelopmentEvent DefaultDisjointScriptType)
(genls BiologicalDevelopmentEvent IntrinsicStateChangeEvent)
(genls BiologicalDevelopmentEvent BiologicalEvent)
(comment BiologicalDevelopmentEvent "A collection of events, and a subset of IntrinsicStateChangeEvents.  In each BiologicalDevelopmentEvent, one or more living things undergo biological changes in which they progress from one developmental stage to another.  For example, the germination of a seed, the opening of a flower, the pupating of a caterpillar, a teenager reaching puberty.  Some borderline non-examples include: Groucho Marx being born, Groucho Marx dying.")

;;; BiologicalDivision
(isa BiologicalDivision BiologicalTaxonType)
(genls BiologicalDivision BiologicalTaxon)
(comment BiologicalDivision "The collection of main taxonomic subdivisions of BiologicalKingdom (or BiologicalSubkingdom) for the members of the MoneraKingdom (i.e., prokaryotes), Fungus Kingdom, Plant Kingdom, and for the plant-like organisms within the ProtistaKingdom.  In the Animal Kingdom, however, the main taxonomic subdivisions are elements of BiologicalPhylum (q.v.) rather than BiologicalDivision.")

;;; BiologicalEvent
(isa BiologicalEvent TemporalObjectType)
(isa BiologicalEvent DefaultDisjointScriptType)
(genls BiologicalEvent PhysicalEvent)
(comment BiologicalEvent "An event in which a biological thing is a bodilyDoer.")

;;; BiologicalFamily
(isa BiologicalFamily BiologicalTaxonType)
(genls BiologicalFamily BiologicalTaxon)
(comment BiologicalFamily "The collection of biological taxonomic subdivisions below BiologicalOrder and above BiologicalGenus.  Especially important in Botanical classification.")

;;; BiologicalGenus
(isa BiologicalGenus BiologicalTaxonType)
(genls BiologicalGenus BiologicalTaxon)
(comment BiologicalGenus "The collection of biological taxonomic subdivisions below BiologicalFamily and above BiologicalSpecies.  Sometimes, hybrids are possible between different instances of BiologicalSpecies that belong to the same BiologicalGenus.")

;;; BiologicalIntakeEvent
(isa BiologicalIntakeEvent TemporalObjectType)
(isa BiologicalIntakeEvent DefaultDisjointScriptType)
(genls BiologicalIntakeEvent BiologicalTransportationEvent)
(comment BiologicalIntakeEvent "A collection of processes.  In each element of BiologicalIntakeEvent, some object(s) are taken into some living structure.")

;;; BiologicalKingdom
(isa BiologicalKingdom BiologicalTaxonType)
(genls BiologicalKingdom BiologicalTaxon)
(comment BiologicalKingdom "The collection of the highest, most general taxonomic divisions of organisms.  Traditionally, it has included the elements of Animal and of Plant and may include separate kingdoms for the elements of ProkaryoticCell, single-celled eukaryotes (protists), and fungi.")

;;; BiologicalLivingObject
(isa BiologicalLivingObject ExistingObjectType)
(genls BiologicalLivingObject OrganicStuff)
(genls BiologicalLivingObject CompositeTangibleAndIntangibleObject)
(comment BiologicalLivingObject "A collection of all structures that are composed of one or more living cells (see Cell).  Biological living objects (BLOs) may be either elements of Organism-Whole (like dogs or pine trees) or are components of such whole organisms (like noses, tails, and pine needles).  The healthy leg of a living person is a BLO (as is the person), but an amputated leg is not a BLO.  Every element of BiologicalLivingObject is either capable of biological reproduction itself or has components which are capable of biological reproduction (such as the cells in a living arm).")

;;; BiologicalMetabolismEvent
(isa BiologicalMetabolismEvent TemporalObjectType)
(isa BiologicalMetabolismEvent DefaultDisjointScriptType)
(genls BiologicalMetabolismEvent BiologicalEvent)
(comment BiologicalMetabolismEvent "The collection of biological processes in which substrates are converted into metabolites.  The metabolites may be more or less complex than the substrates.")

;;; BiologicalOrder
(isa BiologicalOrder BiologicalTaxonType)
(genls BiologicalOrder BiologicalTaxon)
(comment BiologicalOrder "The collection of biological taxonomic subdivisions below BiologicalClass (or BiologicalSubclass) and above BiologicalFamily.")

;;; BiologicalPhylum
(isa BiologicalPhylum BiologicalTaxonType)
(genls BiologicalPhylum BiologicalTaxon)
(comment BiologicalPhylum "The collection of main taxonomic subdivisions of BiologicalKingdom (or BiologicalSubkingdom if present) for the Animal kingdom and for the animal-like organisms within the ProtistaKingdom.  The other elements of BiologicalKingdom have divisions belonging to BiologicalDivision instead of Phyla (Phyla is the plural of Phylum).")

;;; BiologicalProductionEvent
(isa BiologicalProductionEvent TemporalObjectType)
(isa BiologicalProductionEvent DefaultDisjointScriptType)
(genls BiologicalProductionEvent CreationEvent)
(genls BiologicalProductionEvent BiologicalEvent)
(comment BiologicalProductionEvent "A collection of events.  In each element of BiologicalProductionEvent, raw materials are combined to produce a product, and some element(s) of BiologicalLivingObject is the producer.  E.g., the production of honey by honeybees, the growth of a seedling into a tree, the secretion of sweat by a marathon runner, etc.  

Note:  This is a very general collection, and for most purposes one of its subsets will better capture what is intended.")

;;; BiologicalReproductionEvent
(isa BiologicalReproductionEvent TemporalObjectType)
(isa BiologicalReproductionEvent DefaultDisjointScriptType)
(genls BiologicalReproductionEvent BiologicalEvent)
(genls BiologicalReproductionEvent BiologicalProductionEvent)
(comment BiologicalReproductionEvent "A collection of events.  Each element of BiologicalReproductionEvent is an event in which one or more biological organisms (the parentActors) produce new organisms (the offspringActors) generally of the same kind as the parents.")

;;; BiologicalSpecies
(isa BiologicalSpecies BiologicalTaxonType)
(genls BiologicalSpecies BiologicalTaxon)
(comment BiologicalSpecies "A collection of the lowest taxons (BiologicalTaxon, q.v.) that are necessarily common to both parents of fertile offspring, or, in the case of asexual reproduction, necessarily common to parent and child.  Members of different species cannot produce fertile offspring by interbreeding.  An element of BiologicalSpecies has members who all have significant traits in common, and members of each biological species have other members as parents.  In biological taxonomy, related species are grouped into a particular element of BiologicalGenus (q.v.).")

;;; BiologicalStageOfDevelopment
(isa BiologicalStageOfDevelopment ExistingObjectType)
(genls BiologicalStageOfDevelopment BiologicalLivingObject)
(comment BiologicalStageOfDevelopment "The collection of all the particular stages of existence of all living things.  Each element of BiologicalStageOfDevelopment is a spatiotemporal portion of the life of some instance of BiologicalLivingObject.  Typical cases (i.e., subsets) include Larva, Pupa, AdultAnimal, etc.  For example, the pupal stage of a particular Monarch butterfly, or my American Beauty rose bush during the stage when it was blooming last year, or Teddy Roosevelt during his 13th year.  See also the related Cyc predicates developmentalSuccessor and developmentalStages.



")

;;; BiologicalSubclass
(isa BiologicalSubclass BiologicalTaxonType)
(genls BiologicalSubclass BiologicalTaxon)
(comment BiologicalSubclass "The collection of biological taxonomic subdivisions more specific than BiologicalClass but more general than BiologicalOrder.")

;;; BiologicalSubkingdom
(isa BiologicalSubkingdom BiologicalTaxonType)
(genls BiologicalSubkingdom BiologicalTaxon)
(comment BiologicalSubkingdom "The collection of biological subkingdoms, the biological taxonomic divisions of organisms immediately below BiologicalKingdom.")

;;; BiologicalTaxon
(isa BiologicalTaxon BiologicalTaxonType)
(genls BiologicalTaxon ConventionalClassificationType)
(genls BiologicalTaxon OrganismClassificationType)
(comment BiologicalTaxon "The collection of ranked categories accepted by biologists for the biological classification of organisms according to their suspected evolutionary relationships.  Includes all levels of taxons.  See also BiologicalTaxonType and OrganismClassificationType.")

;;; BiologicalTaxonType
(isa BiologicalTaxonType DisjointSetOrCollection)
(isa BiologicalTaxonType SiblingDisjointCollection)
(genls BiologicalTaxonType ConventionalClassificationType)
(genls BiologicalTaxonType SiblingDisjointCollection)
(comment BiologicalTaxonType "A collection of collections; BiologicalTaxonType contains the classes of organism types (i.e., taxons) that biologists recognize, including BiologicalSpecies, BiologicalPhylum, etc.   The naive classes that non-biologists use may be instances of some element of BiologicalTaxonType, though often they are not.  When they coincide, the commonsense class of organism (e.g., Person) is an instance of some BiologicalTaxonType (BiologicalSpecies, for example).  See also OrganismClassificationType.")

;;; BiologicalTransportationEvent
(isa BiologicalTransportationEvent TemporalObjectType)
(isa BiologicalTransportationEvent DefaultDisjointScriptType)
(genls BiologicalTransportationEvent TransportationEvent)
(genls BiologicalTransportationEvent BiologicalEvent)
(comment BiologicalTransportationEvent "The collection of processes involving living structures in which objects are transported.")

;;; Bird
(isa Bird BiologicalClass)
(genls Bird Vertebrate)
(genls Bird NonPersonAnimal)
(genls Bird TerrestrialOrganism)
(comment Bird "The collection of birds; a subset of Vertebrate.  Each element of Bird is an air-breathing, warm-blooded animal, covered with feathers, having forelimbs modified as wings and a beak rather than teeth.  Members of most, but not all, species of bird can fly.  Bird is an instance of BiologicalClass.")

;;; BirthEvent
(isa BirthEvent DefaultDisjointScriptType)
(isa BirthEvent TemporalObjectType)
(genls BirthEvent MedicalCareEvent)
(genls BirthEvent EmittingAnObject)
(genls BirthEvent PregnancyEndingEvent)
(genls BirthEvent BiologicalDevelopmentEvent)
(comment BirthEvent "The collection of events in which one animal (prototypically, a Mammal) gives birth to another.  The mother is the birthParent and the child is the birthChild.  Both are objectOfStateChange; the mother goes from being pregnant to not pregnant, while the child goes from the Embryo life stage to the JuvenileAnimal life stage (see BiologicalStageOfDevelopment.")

;;; BlimpTheAirship
(isa BlimpTheAirship ProductType)
(isa BlimpTheAirship ExistingObjectType)
(genls BlimpTheAirship TransportationDevice-Vehicle)
(genls BlimpTheAirship AirTransportationDevice)
(genls BlimpTheAirship ContainerProduct)
(comment BlimpTheAirship "The collection of all dirigible, motorized, lighter-than-air craft (airships).  Each generally consists of a gas-filled gas-sack from which a control and passenger cabin hangs (the gas-sack may or may not have rigid reinforcement such as ribs).  A BlimpTheAirship flies more slowly than an Airplane.  They are also called blimps, dirigibles and Zeppelins.")

;;; BlueCollar
(isa BlueCollar JobAttribute)
(comment BlueCollar "An attribute; an element of JobAttribute.  Blue collar jobs are those requiring a relatively high proportion of manual/physical labor.")

;;; BlueCollarWorker
(isa BlueCollarWorker OccupationType)
(genls BlueCollarWorker Professional)
(comment BlueCollarWorker "A collection of persons; a subset of Professional.  Each element of BlueCollarWorker is a person whose occupation is manual-labor intensive, sometimes demanding physical strength and, in some jobs, considerable skill, practical judgment, and work experience.  Types of blue-collar workers include miners, truck drivers, steelworkers, construction workers, agricultural workers, laborers, mechanics, garbage collectors, assembly line workers, janitorial workers, etc.  Their jobs may require some specialized training or apprenticeship but don't require a college degree.")

;;; Boat-WaterTransportationDevice
(isa Boat-WaterTransportationDevice ProductType)
(isa Boat-WaterTransportationDevice ExistingObjectType)
(genls Boat-WaterTransportationDevice ContainerProduct)
(genls Boat-WaterTransportationDevice WaterTransportationDevice)
(comment Boat-WaterTransportationDevice "A collection of water transportation devices.  An instance of Boat-WaterTransportationDevice is a device for transporting people and/or objects through or over water without getting them wet; thus, instances of Rowboat or Ship (as opposed to JetSki or Surfboard or Sailboard).")

;;; BodilyFunctionEvent
(isa BodilyFunctionEvent TemporalStuffType)
(isa BodilyFunctionEvent DefaultDisjointScriptType)
(genls BodilyFunctionEvent SingleDoerAction)
(genls BodilyFunctionEvent PhysiologicalProcess)
(genls BodilyFunctionEvent AnimalActivity)
(comment BodilyFunctionEvent "The collection of animal activities that are regular bodily functions; examples include: a particular eating event, a particular breathing event, etc.")

;;; BodilyFunctionEvent-Involuntary
(isa BodilyFunctionEvent-Involuntary TemporalStuffType)
(isa BodilyFunctionEvent-Involuntary DefaultDisjointScriptType)
(genls BodilyFunctionEvent-Involuntary BodilyFunctionEvent)
(comment BodilyFunctionEvent-Involuntary "This is the subset of BodilyFunctionEvent whose elements are actions in which the `doer' is, by definition, a nonDeliberateActors.  Specializations (subsets) of BodilyFunctionEvent-Involuntary include HavingASeizure, Blushing, Bleeding, ExperiencingHunger, etc.
Note: if the `doer' of an involuntary bodily function is an Organism-Whole, then use bodilyDoer to describe its role in the event.")

;;; BodyMovementEvent
(isa BodyMovementEvent DefaultDisjointScriptType)
(isa BodyMovementEvent TemporalObjectType)
(genls BodyMovementEvent AnimalActivity)
(genls BodyMovementEvent SingleDoerAction)
(genls BodyMovementEvent MovementEvent)
(comment BodyMovementEvent "The collection of activities in which an Animal agent moves a part of its own body, whether consciously and intentionally or reflexively.  BodyMovementEvent includes subsets such as TakingAStep, BlockingAPunch, Hiccoughing, and BlinkingOnesEyes.")

;;; BodyOfWater
(isa BodyOfWater ExistingObjectType)
(genls BodyOfWater 
  (LiquidFn Water))
(genls BodyOfWater TopographicalFeature)
(genls BodyOfWater OutdoorLocation)
(comment BodyOfWater "A collection of topographical features.  Each element of BodyOfWater is a natural or artificial body of water.  Elements may belong to specialized subsets such as Lake, Stream, and Ocean. BodyOfWater includes reservoirs, Canals, and navigation channels that are developed and/or enlarged by humans.  However, it does not include smaller purely-artificial bodies of water such as SwimmingPools or tanks of water.  Examples of BodyOfWater: HudsonBay, PanamaCanal, AdriaticSea, BayOfBengal, NiagaraFalls.")

;;; BodyPartCollectionFn
(isa BodyPartCollectionFn CollectionDenotingFunction)
(resultIsa BodyPartCollectionFn ExistingObjectType)
(resultGenl BodyPartCollectionFn AnimalBodyPart)
(arg1Isa BodyPartCollectionFn Animal)
(arg2Isa BodyPartCollectionFn AnimalBodyPartType)
(arg2Genl BodyPartCollectionFn AnimalBodyPart)
(comment BodyPartCollectionFn "BodyPartCollectionFn is a CollectionDenotingFunction, that is, it is a Cyc function which `returns' (i.e., `has') a collection as its value.  Here is an example of what it does.  The expression (BodyPartCollectionFn AbrahamLincoln Fingernail) returns, as its value, a collection of ten elements, each of which represents one of the fingernails of Abraham Lincoln.  In cases where an animal is likely to only have one part of that type (e.g., head, heart, nose, nervous system), it makes more sense to use the function BodyPartFn (qv), rather than using this one, getting a singleton set back, and extracting its lone element.")

;;; BodyPartFn
(isa BodyPartFn ReifiableFunction)
(isa BodyPartFn IndividualDenotingFunction)
(resultIsa BodyPartFn AnimalBodyPart)
(arg1Isa BodyPartFn Animal)
(arg2Isa BodyPartFn AnimalBodyPartType)
(arg2Isa BodyPartFn UniqueAnatomicalPartType)
(arg2Genl BodyPartFn AnimalBodyPart)
(comment BodyPartFn "BodyPartFn is an IndividualDenotingFunction, that is, it is a Cyc function which `returns' (i.e., `has') a single individual object as its value.  (BodyPartFn DeborahNichols Heart) represent's Deborah's one and only heart.  That nonatomic term can be used almost anywhere that the term DeborahNicholsHeart could have been used, but this way we needn't reify that other term, and so on.  Note that the second argument to this function --- i.e., the  AnimalBodyPartType --- must be a UniqueAnatomicalPartType, that is, a kind of part of which an animal can have only one.  If an animal can have multiple parts of that type, such as Finger, then use the function BodyPartCollectionFn instead of BodyPartFn.")

;;; BodyPartPosition
(isa BodyPartPosition AttributeType)
(genls BodyPartPosition PhysiologicalAttribute)
(comment BodyPartPosition "The collection of attributes describing the position of a body part (or a whole body).  A BodyPartPosition may be determined relative to the body's environment (as with Postures) or merely with respect to the body part itself (e.g., Flexed, Extended).")

;;; Boiling
(isa Boiling TemporalObjectType)
(isa Boiling DefaultDisjointScriptType)
(genls Boiling PhysicalStateChangeEvent)
(comment Boiling "A collection of events.  In each Boiling, a piece of liquid matter is raised to its boilingPoint and is thereby changed from being in the LiquidStateOfMatter to being in the GaseousStateOfMatter.
Note:  this is not intended to cover the cases of heat/evacuation causing a solid to sublime directly into a gas.")

;;; Book
(isa Book ExistingObjectType)
(genls Book PublishedMaterial)
(comment Book "A form of HardcopyInformationBearingObject consisting of folded, cut, bound, and usually printed sheets.  Books are often TextualMaterial, but sometimes contain only images.")

;;; BookkeepingMt
(isa BookkeepingMt Microtheory)
(genlMt BookkeepingMt CyclistsMt)
(genlMt BookkeepingMt BaseKB)
(comment BookkeepingMt "A Microtheory for stating basic Cyc bookkeeping information, such as assertions using myCreator and myCreationTime.")

;;; BookkeepingPredicate
(isa BookkeepingPredicate PredicateCategory)
(isa BookkeepingPredicate Collection)
(genls BookkeepingPredicate Predicate)
(comment BookkeepingPredicate "A collection of predicates.  Each element of BookkeepingPredicate is a predicate used to form assertions about the creation and internal representation of a Cyc constant.  Bookkeeping predicates neither specify nor constrain the semantics of Cyc constants.  Examples:  myCreator, myCreationTime, termOfUnit, multiplicationUnits, quotientUnits.")

;;; Border
(isa Border ObjectType)
(genls Border SpatialThing)
(comment Border "The collection of all lines, linear regions, or dividing planes or surfaces--physical or abstract--that each constitutes the boundary between (formsBorderBetween) two regions (i.e., two elements of SpatialThing).")

;;; BorderBetweenFn
(isa BorderBetweenFn ReifiableFunction)
(isa BorderBetweenFn CommutativeRelation)
(isa BorderBetweenFn IndividualDenotingFunction)
(resultIsa BorderBetweenFn Line)
(resultIsa BorderBetweenFn Border)
(arg1Isa BorderBetweenFn GeographicalRegion)
(arg2Isa BorderBetweenFn GeographicalRegion)
(comment BorderBetweenFn "(BorderBetweenFn REG1 REG2), applied to two individual GeographicalRegions REG1 REG2, returns the unique entire GeopoliticalBorder that separates them.   To identify arbitrarily large or small segments of borders see formsBorderPart.  The border returned by BorderBetweenFn may be discontinuous (such the border between France and Spain, interrupted by Andorra), or circular (such as the border between Italy and San Marino), or in abnormal cases it may even have multiple disconnected and nested cyclic fragments (the border between Belgium and Netherlands, due to the Baarle-Nassau and Baarle-Hartog enclaves), or move back and forth periodically (such as at the Isle des Faisans).  Nonetheless, (BorderBetweenFn REG1 REG2) must denote exactly one object since BorderBetweenFn is a function.  Reference to nonexistant borders such (BorderBetweenFn Albania UnitedStatesOfAmerica) should cause Cyc to realize that they are undefined.  For example, if Cyc concludes that (bordersOn UnitedStatesOfAmerica Albania) is not true, then it should conclude (undefined (BorderBetweenFn Albania UnitedStatesOfAmerica)).
 ")

;;; Boredom
(isa Boredom FeelingAttributeType)
(genls Boredom Apathy)
(genls Boredom FeelingAttribute)
(comment Boredom "A state of dissatisfaction, weariness, or restlessness accompanied by a lack of interest.  This is a Collection --- for an explanation of that, see Happiness.  A related FeelingAttributeType is Apathy.")

;;; BorrowingSomething
(isa BorrowingSomething TemporalObjectType)
(isa BorrowingSomething DefaultDisjointScriptType)
(genls BorrowingSomething TransferringPossession)
(genls BorrowingSomething TemporaryChangeOfUserRights)
(comment BorrowingSomething "A collection of events; a subset of TemporaryChangeOfUserRights.  In an instance of BorrowingSomething, an Agent takes temporary control of something, usually with the permission of its owner(s).  Generally, the lending agent expects the borrowing agent to use the object for one of its normal functions (intendedBehaviorCapable).")

;;; BotanicalOrgan
(isa BotanicalOrgan ExistingObjectType)
(genls BotanicalOrgan PlantPart)
(comment BotanicalOrgan "A subset of PlantPart, the collection BotanicalOrgan includes parts of a plant which are major morphological and functional divisions of individual plants, typically consisting of stems, flowers, roots, leaves, etc.")

;;; BottomSide
(isa BottomSide RegionType)
(genls BottomSide Side)
(comment BottomSide "The collection of all the entire bottom sides (as conventionally understood) of all objects that have distinct Sides, one of which faces down.")

;;; Brain
(isa Brain AnimalBodyPartType)
(isa Brain UniqueAnatomicalPartType)
(genls Brain Organ)
(comment Brain "The collection of all Animal brains.  An individual Brain is an Organ which controls most bodily movement, recieves sensory input from the body and objects outside the body, and in which the mind operates, being the locus for all MentalObjects.")

;;; Brazil
(isa Brazil IndependentCountry)
(isa Brazil Entity)
(comment Brazil "Brazil throughout time, both political and physical aspects.")

;;; Breathing
(isa Breathing TemporalStuffType)
(isa Breathing DefaultDisjointScriptType)
(genls Breathing BodyMovementEvent)
(genls Breathing AirRespiration)
(comment Breathing "A collection of activities constituting a natural PhysiologicalFunction; Breathing is the collection of AirRespiration events in which the respiring organism takes air into its internal Lungs, where the gas exchange occurs.  See also Respiration.")

;;; Brittle
(isa Brittle PhysicalStructuralAttribute)
(comment Brittle "A physical attribute.  Brittle is the PhysicalStructuralAttribute of a substance which breaks easily when subjected to a low or moderate impact or application of force, such as most instances of Glass.")

;;; BroadMicrotheory
(isa BroadMicrotheory MicrotheoryType)
(isa BroadMicrotheory Collection)
(genls BroadMicrotheory Microtheory)
(comment BroadMicrotheory "The collection of those microtheories that contain so many assertions that they are not useful for `relevance' focusing during inference.  (A BroadMicrotheory is not used internally in Cyc's indexing scheme during inference.)  Examples: BaseKB and EnglishMt.")

;;; Building
(isa Building ExistingObjectType)
(isa Building ProductType)
(genls Building FixedStructure)
(genls Building HumanShelterConstruction)
(genls Building RealEstate)
(comment Building "A collection of artifacts; a subset of FixedStructure and of HumanShelterConstruction.  An instance of Building is typically a substantial structure and must have walls and a roof, with rooms inside or at least some area designed to be occupied by humans (but not necessarily as a residence).  Examples include the Empire State Building, Michael Jackson's house in L.A., King Arthur's castle, an AircraftHangar at O'Hare, a Lighthouse in the Mediterranean sea, the SydneyOperaHouse, the WashingtonMonumentInWashingtonDC, etc.")

;;; BuildingMaterial
(isa BuildingMaterial ConventionalClassificationType)
(isa BuildingMaterial ProductType)
(genls BuildingMaterial Artifact)
(comment BuildingMaterial "A collection of tangible things.  An instance of BuildingMaterial is a material thing typically used in making new structures.  Instances of BuildingMaterial include a piece of lumber, a brick, a slab of concrete, a roof shingle, a copper nail, a double-paned storm window, etc.")

;;; Bus-RoadVehicle
(isa Bus-RoadVehicle ProductType)
(isa Bus-RoadVehicle ExistingObjectType)
(genls Bus-RoadVehicle RoadVehicle)
(comment Bus-RoadVehicle "The collection of all buses, transport vehicles for ground transportation of many (they have room for at least 10, probably fewer than 60) people.  A bus usually is driven by a professional bus driver.")

;;; Bush
(isa Bush ExistingObjectType)
(genls Bush Plant-Woody)
(comment Bush "A collection of plants; a subset of Plant-Woody.  The collection Bush includes all bushes, i.e., woody plants of branching growth habit that lack substantial trunks and are not usually taller than a person (and they are shorter than most specimens of Tree-ThePlant).   This is a commonsense collection without distinct boundaries.")

;;; Business
(isa Business ExistingObjectType)
(genls Business CommercialOrganization)
(comment Business "The collection of Organizations intended to make profits, i.e., make money for agents that own them.  All Businesses are CommercialOrganizations (they must buy or sell something), but not all CommercialOrganizations are Businesses.  In a franchise Organization, the parentCompany is regarded as a Business, while the subOrganizations are merely instances of CommercialOrganization.  Businesses are typically LegalAgents, while CommercialOrganizations need not be.")

;;; BusinessEvent
(isa BusinessEvent TemporalObjectType)
(isa BusinessEvent DefaultDisjointScriptType)
(genls BusinessEvent CompositePhysicalAndMentalEvent)
(comment BusinessEvent "A collection of events.  Each element of BusinessEvent is an intentional occurrence that is closely associated with, and either helps or hinders, the business purpose of some agent.  Examples include: the development of General Motors' business plan for 1996; an individual sales call on a particular customer; printing the 1996 Yellow Pages directory for the Austin, TX, area; selling a newspaper; designing and manufacturing a new memory chip.  BusinessEvent does NOT include purely social or recreational occurrences.")

;;; BusinessPerson
(isa BusinessPerson OccupationType)
(genls BusinessPerson Professional)
(comment BusinessPerson "A collection of persons; a subset of Professional. Each element of BusinessPerson is a person whose occupation is primarily in the ownership and/or operation of a business.")

;;; BusinessRelationshipActivity
(isa BusinessRelationshipActivity ScriptType)
(isa BusinessRelationshipActivity TemporalStuffType)
(genls BusinessRelationshipActivity SocialOccurrence)
(genls BusinessRelationshipActivity BusinessEvent)
(comment BusinessRelationshipActivity "A collection of events; a subset of both BusinessEvent and SocialOccurrence.  Each instance of BusinessRelationshipActivity is a (usually long-term) social activity whose participants are related by some business relationship.  The social events constituting a BusinessRelationshipActivity further, either directly or indirectly, the (usually mutual) business interests of the participants.  A BusinessRelationshipActivity is typically carried out over multiple social occasions and may consist of many subEvents.")

;;; Buying
(isa Buying DefaultDisjointScriptType)
(isa Buying TemporalObjectType)
(genls Buying BuyingActivity)
(genls Buying MonetaryExchangeOfUserRights)
(comment Buying "A collection of events.  Each element of Buying is an event in which an agent voluntarily pays to acquire something tangible or intangible, or for the performance of a service.  Payment may be in money or other exchange of wealth.  Elements of Buying may include subEvents of negotiation, the act of paying, and the transfer of the purchased thing to the buyer.  Examples of Buying include: purchasing fighter jets for the Navy; buying a Pepsi from a vending machine; ordering dinner at a restaurant; acquiring a personal life insurance policy for oneself; mail-ordering clothes from Sears; shopping at a farmers' market.")

;;; BuyingActivity
(isa BuyingActivity TemporalObjectType)
(isa BuyingActivity DefaultDisjointScriptType)
(genls BuyingActivity CommercialActivity)
(comment BuyingActivity "A collection of events.  BuyingActivity very generally includes events related to purchasing goods or services.  Each element of BuyingActivity is an event that is either (i) a common prelude to buying (i.e., the kinds of activities that contribute to their doers becoming buyers), or (ii) an element of Buying itself.  Examples of BuyingActivity include shopping for, or ordering, something very specific, and also general expressions of interest in purchasing something, such as placing an `Item Wanted' ad in a newspaper.")

;;; CGSUnitOfMeasure
(isa CGSUnitOfMeasure RelationType)
(genls CGSUnitOfMeasure UnitOfMeasure)
(comment CGSUnitOfMeasure "A subset of UnitOfMeasure.  CGSUnitOfMeasure is the collection of all the measurement functions whose results use the CGS (i.e., centimeter-gram-second) system of measure to describe physical quantities.  Examples: CentimetersPerSecond, CubicCentimeter, Gram, SecondsDuration.")

;;; CalendarAutumn
(isa CalendarAutumn CalendarSeasonType)
(genls CalendarAutumn CalendarSeason)
(comment CalendarAutumn "The calendar season that begins at autumnal equinox and runs until winter solstice.")

;;; CalendarCentury
(isa CalendarCentury CalendarCoveringType)
(genls CalendarCentury TimeInterval)
(comment CalendarCentury "The collection of centuries that make up the calendar (1900's, 1700's etc.)  An example of such a constant in Cyc is TheNineteenthCenturyAD ")

;;; CalendarCoveringType
(isa CalendarCoveringType SiblingDisjointCollection)
(genls CalendarCoveringType TemporalObjectType)
(comment CalendarCoveringType "CalendarCoveringType is a collection of collections.  An element ?CC of CalendarCoveringType  is itself a collection, a type of time interval, such that the union of all the instances of ?CC would completely cover all of time without overlap.  Thus, CalendarYear is a CalendarCoveringType because all of time consists of a sequence of non-overlapping CalendarYears.  Similarly CalendarMonth, CalendarDay, CalendarHour, etc.  Notice that Monday and December are NOT instances of CalendarCoveringType, because all of time is not a sequence of Mondays, or Decembers.  Also notice that a collection Week -- defined as the set of all seven-day-long-periods-of-time -- would not be an instance of CalendarCoveringType, since several different Weeks could overlap; e.g., the week beginning today and the week beginning yesterday and the week beginning tomorrow.")

;;; CalendarDay
(isa CalendarDay Collection)
(isa CalendarDay ScriptType)
(isa CalendarDay CalendarCoveringType)
(genls CalendarDay Date)
(comment CalendarDay "The collection of days that make up the calendar.  This is a collection of disjoint but contiguous time intervals.  One of its elements is Thursday, August 1, 1996.")

;;; CalendarDecade
(isa CalendarDecade CalendarCoveringType)
(genls CalendarDecade TimeInterval)
(comment CalendarDecade "The collection of decades that make up the calendar; e.g., The1970s.")

;;; CalendarHalfCentury
(isa CalendarHalfCentury CalendarCoveringType)
(genls CalendarHalfCentury TimeInterval)
(comment CalendarHalfCentury "The collection of exact half-centuries on the calendar, such as FirstHalfOf20thCenturyCE")

;;; CalendarHour
(isa CalendarHour Collection)
(isa CalendarHour CalendarCoveringType)
(genls CalendarHour Date)
(genls CalendarHour TimeOfDay)
(comment CalendarHour "The collection of hours that make up the calendar.  These are contiguous and disjoint time intervals, except of course for particular instances that represent exactly the same 60-minute-long time interval.  See CalendarDay.")

;;; CalendarMinute
(isa CalendarMinute Collection)
(isa CalendarMinute CalendarCoveringType)
(genls CalendarMinute Date)
(comment CalendarMinute "The collection of minutes that make up the calendar.  These are contiguous and disjoint time intervals, except of course for particular instances that represent exactly the same 60-second-long time interval.  See CalendarDay.  Sixty of these partition each CalendarHour")

;;; CalendarMonth
(isa CalendarMonth Collection)
(isa CalendarMonth CalendarCoveringType)
(genls CalendarMonth Date)
(comment CalendarMonth "The collection of months that make up the calendar.  This is a collection of disjoint but contiguous time intervals.  One of its subsets is February, which is the set of all Februaries; one of its elements is February 1992 (MonthFn February (YearFn 1992)), a particular time interval.")

;;; CalendarQuarter
(isa CalendarQuarter Collection)
(isa CalendarQuarter CalendarCoveringType)
(genls CalendarQuarter Date)
(comment CalendarQuarter "The collection of calendar quarters that divide up a calendar year into four parts.  For each year, the first of its four quarters includes January, February, and March; the second includes April, May, and June, and so on.")

;;; CalendarSeason
(isa CalendarSeason CalendarCoveringType)
(genls CalendarSeason TimeInterval)
(comment CalendarSeason "This is the set of all calendar seasons.  Four of its largest subsets are CalendarWinter, CalendarSpring, CalendarSummer, and CalendarAutumn")

;;; CalendarSeasonType
(isa CalendarSeasonType CyclicalIntervalGroupType)
(genls CalendarSeasonType AnnualEventType)
(genls CalendarSeasonType TemporallyDisjointIntervalType)
(comment CalendarSeasonType "This is the collection whose four elements are CalendarWinter, CalendarSpring, CalendarSummer, and CalendarAutumn.")

;;; CalendarSecond
(isa CalendarSecond Collection)
(isa CalendarSecond CalendarCoveringType)
(genls CalendarSecond Date)
(comment CalendarSecond "The collection of seconds that make up the calendar.  Sixty of these TimeIntervals contiguously divide up each CalendarMinute (qv)")

;;; CalendarSpring
(isa CalendarSpring CalendarSeasonType)
(genls CalendarSpring CalendarSeason)
(comment CalendarSpring "The calendar season that begins at vernal equinox and runs until summer solstice.")

;;; CalendarSummer
(isa CalendarSummer CalendarSeasonType)
(genls CalendarSummer CalendarSeason)
(comment CalendarSummer "The calendar season that begins at summer solstice and runs until autumnal equinox.")

;;; CalendarWeek
(isa CalendarWeek CalendarCoveringType)
(genls CalendarWeek Date)
(comment CalendarWeek "The collection of weeks that make up the calendar.  This is a collection of disjoint but contiguous time intervals.  One of its elements is WeekOf2-14-1994.")

;;; CalendarWinter
(isa CalendarWinter CalendarSeasonType)
(genls CalendarWinter CalendarSeason)
(comment CalendarWinter "The calendar season that begins at winter solstice and runs until vernal equinox.")

;;; CalendarYear
(isa CalendarYear Collection)
(isa CalendarYear CalendarCoveringType)
(genls CalendarYear Date)
(comment CalendarYear "The collection of years that make up the calendar.  For example, TheYear1972, TheYear494BC.")

;;; Calm
(isa Calm FeelingAttributeType)
(genls Calm Relaxed-Emotion)
(comment Calm "A feeling of calmness or serenity, being quiet and free from disturbance.  This is a Collection --- for an explanation of that, see Happiness.  A related FeelingAttributeType is Calm.")

;;; Canal
(isa Canal ExistingObjectType)
(genls Canal Stream)
(genls Canal Path-Simple)
(genls Canal PathArtifact)
(comment Canal "The collection of all canals, artificial waterways created to be paths for boats, or for irrigation (e.g., the PanamaCanal).")

;;; Cancer
(isa Cancer PhysiologicalConditionType)
(genls Cancer TerminalPhysiologicalCondition)
(genls Cancer AilmentCondition)
(comment Cancer "The collection of all particular cases of cancer.  Instances of Cancer may belong to any one of the many different types of disease that are studied and treated by oncologists.  Cancer is characterized by abnormal (and usually rapid) growth of cells in some organ or system of the body; these growths are then prone to dispersal (metastesis) into other body regions.  See also CancerFn --- the expression (CancerFn Lung) represents a subset of Cancer, namely the set of all lung cancers.")

;;; CancerFn
(isa CancerFn CollectionDenotingFunction)
(resultIsa CancerFn PhysiologicalConditionType)
(resultGenl CancerFn Cancer)
(arg1Isa CancerFn ExistingObjectType)
(arg1Genl CancerFn AnimalBodyPart)
(comment CancerFn "CancerFn is a Cyc function, and in particular a CollectionDenotingFunction.  It is used to describe cancers according to the part or region of the animal's body in which they are found.  (CancerFn REGION) denotes the collection of all cancers found in the region of the body, REGION.  For example, (CancerFn Throat) represents the set of all throat cancers, and is a subset of Cancer.")

;;; Canoe
(isa Canoe ProductType)
(isa Canoe ExistingObjectType)
(genls Canoe Boat-WaterTransportationDevice)
(genls Canoe Device-UserPowered)
(comment Canoe "The collection of all canoes, small, narrow watercraft that are powered by human paddling, poling or by a small boat-engine.")

;;; CapacityAttribute
(isa CapacityAttribute UnorderedAttributeType)
(genls CapacityAttribute AttributeValue)
(comment CapacityAttribute "A collection of attributes.  Each element of CapacityAttribute is an attribute representing a specific capacity in which an agent does an action.  For example, an action might be done as an agent's job (JobCapacity) or hobby (HobbyCapacity), as its main function (MainFunction) or an auxiliary function (SupportFunction).")

;;; CapitalCityOfRegion
(isa CapitalCityOfRegion ExistingObjectType)
(genls CapitalCityOfRegion City)
(comment CapitalCityOfRegion "A collection of cities.  Each element of CapitalCityOfRegion is an element of City (q.v.) that is the capital of its surrounding region.  This includes both capitals of countries and capitals of subregions.  Examples: CityOfRomeItaly, CityOfCardiffWales, CityOfAustinTX, CityOfAbidjanIvoryCoast, CityOfLlasaTibet, CityOfColumbusOH (FranklinCountyOhio).  See also capitalCity, capitalCityOfThisState.")

;;; CaptiveAnimal
(isa CaptiveAnimal ExistingObjectType)
(genls CaptiveAnimal Animal)
(comment CaptiveAnimal "The collection of all animals that are caged, tied, kept in an animal container, or otherwise held captive.  There is some intersection here with DomesticPet, but not complete.   Some elements of Person are members of CaptiveAnimal, e.g., political detainees, imprisoned criminals, kidnap victims.")

;;; Card
(isa Card ExistingObjectType)
(genls Card HardcopyInformationBearingObject)
(comment Card "A collection of objects; a subset of HardcopyInformationBearingObject.  Each element of Card is a small, sturdy sheet of stuff--usually cardstock paper, but could be plastic or thin metal--bearing some kind of information.  Some kinds are folded.  Examples: birthday cards, business cards, playing cards, postcards.")

;;; CargoShip
(isa CargoShip ProductType)
(isa CargoShip ExistingObjectType)
(genls CargoShip Ship)
(comment CargoShip "The collection of all cargo ships, i.e., ships that by design can transport large amount of goods.")

;;; Carnivore
(isa Carnivore ExistingObjectType)
(genls Carnivore Organism-Whole)
(comment Carnivore "A Collection of organisms classified by their typical source of food.  Elements of Carnivore feed on animals.  Note: Carnivore is not an instance of BiologicalTaxon; e.g., Carnivore contains Dog as a subset but is not its biological taxon.  Note that a Carnivore is not necessarily a Heterotroph, as carnivorous plants both digest insects and produce food using Chlorophyll.")

;;; CausingAnotherObjectsTranslationalMotion
(isa CausingAnotherObjectsTranslationalMotion TemporalObjectType)
(isa CausingAnotherObjectsTranslationalMotion ScriptType)
(genls CausingAnotherObjectsTranslationalMotion ActionOnObject)
(genls CausingAnotherObjectsTranslationalMotion Translation-Complete)
(genls CausingAnotherObjectsTranslationalMotion Translation-LocationChange)
(comment CausingAnotherObjectsTranslationalMotion "A collection of events.  In an instance of CausingAnotherObjectsTranslationalMotion, one object causes another object to undergo a translational motion.  The object causing the motion is the providerOfMotiveForce.  The object which is caused to move is the objectActedOn (and also the objectMoving) in the event.  One way to cause another object's motion is by carrying it along with one (see the subset CarryingWhileLocomoting), but there are many others, such as throwing, kicking, or knocking it away.  Examples: a train transporting passengers; a person pushing a coin into a vending machine; the release of a bowstring which propels an arrow; a magnet attracting a nail.")

;;; Cavity
(isa Cavity ExistingObjectType)
(genls Cavity PartiallyTangible)
(comment Cavity "The collection of all cavities, Crevices or deep concavities or holes, including any cavity of a container, e.g., the interior of a box.  Elements of Cavity, unlike elements of Interior, may include walls as parts.")

;;; CeilingOfARoom
(isa CeilingOfARoom ExistingObjectType)
(genls CeilingOfARoom PartOfBuilding)
(comment CeilingOfARoom "The collection of all ceilings of every instance of RoomInAConstruction.  Note that, unlike walls, ceilings are conventionally considered to be 'one-sided' objects.  The other side of a CeilingOfARoom may be a RoofOfAConstruction, or in a ModernShelterConstruction, more probably the FloorInAConstruction in another room.")

;;; Cell
(isa Cell ExistingObjectType)
(genls Cell BiologicalLivingObject)
(comment Cell "The collection of living cells; a subset of BiologicalLivingObject.  Each element of Cell is one of the basic structural units of nearly all living things, consisting (at least) of cytoplasm bounded by a cell membrane. Only the living structures viruses, mitochondria, and plastids are not composed of cells.")

;;; CellPart
(isa CellPart ExistingObjectType)
(genls CellPart BiologicalLivingObject)
(genls CellPart MicroscopicScaleObject)
(comment CellPart "The collection of structures which are typically found and formed as parts of Cells. This covers components of both EukaryoticCells and ProkaryoticCells.  It includes organelles, vesicles, cell walls, extracellular matrix, plasma membranes, receptors, cellular humours, microtubules, etc.")

;;; Cent-UnitedStates
(isa Cent-UnitedStates UnitOfMoney)
(isa Cent-UnitedStates UnitOfMeasureWithPrefix)
(resultIsa Cent-UnitedStates Money)
(resultIsa Cent-UnitedStates ScalarInterval)
(argsIsa Cent-UnitedStates CycSystemRealNumber)
(comment Cent-UnitedStates "An element of UnitOfMoney.  Cent-UnitedStates represents the smallest unit of money used officially in the United States of America; one-hundredth of a Dollar-UnitedStates.  See also UnitOfMeasure.")

;;; Centimeter
(isa Centimeter UnitOfDistance)
(isa Centimeter UnitOfMeasureWithPrefix)
(isa Centimeter CGSUnitOfMeasure)
(resultIsa Centimeter Distance)
(resultIsa Centimeter ScalarInterval)
(argsIsa Centimeter CycSystemRealNumber)
(comment Centimeter "The measurement function used in Cyc to represent the centimeter, a unit used within the Metric system to measure length.  See also CGSUnitOfMeasure, UnitOfMeasure.")

;;; CentimetersPerSecond
(isa CentimetersPerSecond UnitOfSpeed)
(isa CentimetersPerSecond UnitOfMeasureWithPrefix)
(isa CentimetersPerSecond CGSUnitOfMeasure)
(resultIsa CentimetersPerSecond ScalarInterval)
(resultIsa CentimetersPerSecond Speed)
(resultIsa CentimetersPerSecond VectorInterval)
(argsIsa CentimetersPerSecond CycSystemRealNumber)
(comment CentimetersPerSecond "(CentimetersPerSecond NUMBER) returns a dimensionless rate or speed of NUMBER centimeters per second.  Notice that this result is not presently thought of as incorporating a vector, although it might be modified to do so at some point in the future if this should prove appropriate.")

;;; CerealFoodGroup
(isa CerealFoodGroup FoodGroupType)
(genls CerealFoodGroup FoodOrDrinkComposite)
(genls CerealFoodGroup VegetableMatter)
(genls CerealFoodGroup EdibleStuff)
(comment CerealFoodGroup "The food group consisting of grain products such as breads and cereals. Food that contains a significant amount of grain products should be specs of this.")

;;; CerealPlant
(isa CerealPlant OrganismClassificationType)
(genls CerealPlant Plant-NonWoody)
(comment CerealPlant "The collection of individual plants like corn, wheat, etc., which bear grains.")

;;; ChainOrganization
(isa ChainOrganization ExistingObjectType)
(genls ChainOrganization Business)
(genls ChainOrganization LegalCorporation)
(comment ChainOrganization "A collection of organizations.  An element of ChainOrganization is a parent business which comes into contact with its customers or clients primarily through its geographically dispersed sub-organizations, which typically are (mostly) homogeneous in product line, style of physical quarters, local organizational structure, etc.  Examples include the parent organizations of McDonald's and Midas Muffler.")

;;; ChangeInUserRights
(isa ChangeInUserRights ScriptType)
(genls ChangeInUserRights GeneralizedTransfer)
(comment ChangeInUserRights "A collection of events.  Each element of ChangeInUserRights is an event in which some instance of Agent either gains or loses possession of something.   `Possession' means having some right to use a thing that one has in hand or otherwise has access to.  Different types of possession (e.g., ownership, rental, borrowings) can be specified by the using the appropriate element(s) of UserRightsAttribute (q.v.).  Changes in an agent's user rights can come about in various ways: through buying and selling, renting, borrowing or lending, giving, repossession, etc.  Some subsets of this kind of change are LosingUserRights, GainingUserRights, and ExchangeOfUserRights; in the latter class, there is an alteration in the rights of two (or more) agents to use two (or more) items -- as in a purchase, when one agent gets full use rights to an object by turning over a sum of money to the object's previous owner.  In addition, some changes in user rights are classified explicitly in TemporaryChangeOfUserRights (e.g., borrowing, renting), while others are permanent.   Events that involve such changes in user rights all belong in the collection of events, ChangeInUserRights.   In any particular ChangeInUserRights event, the item which is changing hands is identified as the objectOfPossessionTransfer.")

;;; ChangingDeviceState
(isa ChangingDeviceState DefaultDisjointScriptType)
(isa ChangingDeviceState TemporalObjectType)
(genls ChangingDeviceState IntrinsicStateChangeEvent)
(genls ChangingDeviceState PhysicalEvent)
(genls ChangingDeviceState Action)
(comment ChangingDeviceState "The collection of actions in which a device goes from one state (the fromState) to another state (the toState).  A change of DeviceState may be due to an outside Agent adjusting a device, or it may happen automatically due to the behavior of a device.  The two most general state changes (for powered devices) are from DeviceOn to DeviceOff, and vice versa.  Many other states peculiar to specific devices can be identified; for example, the states of a Dishwasher: DeviceState-Washing and DeviceState-Rinsing; or the states that a trapping device may be in: TrapArmed, TrapTripped, TrapIdle.  Note that a change in the state of a device is an intrinsic change in the device; i.e., ChangingDeviceState is a subset of IntrinsicStateChangeEvent.")

;;; CharacterString
(isa CharacterString StuffType)
(genls CharacterString AbstractInformation)
(genls CharacterString IntangibleIndividual)
(genls CharacterString List-Sequence)
(comment CharacterString "A collection of stuff.  Each element of the collection CharacterString is a string of characters or an abstract sequence of symbols.  Note: it is NOT any particular physical, tangible representation; different encodings may represent the characters.  An element of CharacterString has characters from some fixed character set.  The characters are instances of Character-Abstract. An element of CharacterString may be any length, including zero (i.e., empty strings, which have no characters).  If elements of CharacterString are concatenated, the result is also an element of CharacterString.  The length of the resulting string is equal to the sum of the lengths of the concatenated strings.   Some types (subsets) of CharacterString include EMailAddress, AreaCode, PhoneNumber, PhoneCountryCode, etc.")

;;; Check-TenderObject
(isa Check-TenderObject MoneyTenderType)
(genls Check-TenderObject TenderObject)
(genls Check-TenderObject Form-StandardizedIBO)
(genls Check-TenderObject IDDocument)
(genls Check-TenderObject OfficialDocument)
(genls Check-TenderObject FinancialAccountTenderObject)
(comment Check-TenderObject "A collection of documents; a subset of TenderObject.  Each element of Check-TenderObject is a financial instrument, drawn on a particular account at some instance of FinancialOrganization, which is redeemable for a monetary value by the agent who is the payee.  The financial organization pays the payee funds from the account, upon proper presentation of the check.")

;;; ChemicalCompoundType
(isa ChemicalCompoundType SiblingDisjointCollection)
(genls ChemicalCompoundType TangibleStuffCompositionType)
(comment ChemicalCompoundType "A collection of collections; a subset of TangibleStuffCompositionType.  Every instance of ChemicalCompoundType is a subset of TangibleThing whose instances are defined ONLY by their chemical composition, and not by their physical state or any other property.  In Cyc's current representation, ChemicalCompoundTypes can be of two varieties:  (1) Collections whose instances are completely uniform with each other in terms of chemical composition; this includes (a) the chemical elements -- such as Carbon, Oxygen, and Hydrogen -- which are instances of ElementStuffTypeByNumberOfProtons (thus, the latter is a subset of ChemicalCompoundType), and (b) compounds constituted of more than one substance chemically bonded, e.g., Water, Caffeine, and IronOxide.  (2) Substances which have a general chemical specification, that is, whose instances do not have exactly the same chemical composition but fall within certain specifications, e.g., DNA.  Cyc's current theory includes those cases in ChemicalCompoundType, though they are arguably borderline.  (Future work may require the creation of type collections to identify various levels of chemical specification, such as `exact formula' or `exact structure'.)
Note: Collections which Cyc does NOT classify as ChemicalCompoundTypes include collections of substances which have some component which is of overriding significance in some context, so that in everyday language such substances are frequently referred to by the name of their important component (e.g., `penicillin' applied to a tablet containing penicillin), but which have significant admixtures of other substances.  Our representation distinguishes between the chemical compound (here, instances of Penicillin) and the mixture of substances in a tablet containing some Penicillin for pharmaceutical use.  Thus, Penicillin is an instance of ChemicalCompoundType, but the collection of tablets containing penicillin and including other ingredients are not.  Also, subsets of Mixture, such as Lemonade, are not instances of ChemicalCompoundType, because mixtures are determined by their physical state rather than solely by their chemical composition.")

;;; ChemicalObject
(isa ChemicalObject ExistingObjectType)
(genls ChemicalObject MicroscopicScaleObject)
(comment ChemicalObject "A collection of objects; a subset of MicroscopicScaleObject.  Each instance of ChemicalObject is an object whose behavior is typically described in terms of its outer cloud of Electrons.  Subsets of ChemicalObject include the collections Atom and Molecule and Ion, the set of chemical radicals, and the set of molecular fragments.")

;;; ChemicalReaction
(isa ChemicalReaction TemporalObjectType)
(isa ChemicalReaction DefaultDisjointScriptType)
(genls ChemicalReaction TransformationEvent)
(comment ChemicalReaction "A collection of events; a subset of TransformationEvent.  Each instance of ChemicalReaction is an event in which two or more substances undergo a chemical change, i.e., some portions of the substances involved are transformed into different ChemicalCompoundTypes.  The transformations are brought about by purely chemical (including biochemical) means which affect chemical bonds between atoms in the molecules of stuff, rather than by physical means, biological means, or purposeful planning, etc.  Examples of ChemicalReaction: instances of CombustionProcess; instances of Photosynthesis.")

;;; Chest-BodyPart
(isa Chest-BodyPart UniqueAnatomicalPartType)
(isa Chest-BodyPart AnimalBodyPartType)
(genls Chest-BodyPart BiologicalLivingObject)
(genls Chest-BodyPart AnimalBodyPart)
(comment Chest-BodyPart "The collection of the chests of Animals.  The animal's chest is its AnimalBodyPart region located between its neck and its abdomen.  For people and many other types of animals, the chest is bounded by (defined by, given shape by) the animal's ribcage.")

;;; ChordataPhylum
(isa ChordataPhylum BiologicalPhylum)
(comment ChordataPhylum "An instance of BiologicalPhylum within the BiologicalKingdom Animal, the ChordataPhylum contains the many chordate taxa.  All have members who have a notochord (a flexible rod running the length of the body) at some stage of development and pharyngeal gills at some stage of development.  The ChordataPhylum has as taxonMembers all the subsets of Vertebrate (including Person), as well as some non-vertebrate chordates like Amphioxus.")

;;; ChronicCondition
(isa ChronicCondition PhysiologicalConditionType)
(genls ChronicCondition PhysiologicalCondition)
(comment ChronicCondition "A collection of ailments.  An instance of ChronicCondition is an ailment that lingers or recurs in an organism throughout its life.  In some cases, the symptoms of a chronic condition may abate with treatment.  The condition may never go away completely.  Asthma is a subset of ChronicCondition.")

;;; CirculatorySystem
(isa CirculatorySystem AnimalBodyPartType)
(genls CirculatorySystem StaticSituation)
(genls CirculatorySystem AnimalBodyPart)
(comment CirculatorySystem "The collection of all animals' circulatory systems.  A CirculatorySystem is a system of organs and body parts, found in Vertebrates and some other animals, which function together to circulate the animal's blood throughout its body, supplying needed substances to its cells and removing waste products from them.  A CirculatorySystem is generally composed of BloodVessels, Heart, Spleen, etc., considered as an interrelated functional system of each animal. 

Note:  It generally has a close linkage to the respiration system, as the blood comes in contact with fresh air to divest itself of the waste products it has collected from the body's cells and to acquire new needed substances to take to the body's cells.")

;;; City
(isa City SpatiallyDisjointRegionType)
(genls City GeopoliticalEntity)
(genls City UrbanArea)
(comment City "A collection of geopolitical entities.  An element of City is a local human settlement which has its own government.  This includes cities, towns, suburbs, villages, hamlets, and townships, as long as they have their own governments.  A city government is usually mostly autonomous from the governments of its surrounding regions, rather than being a sub-organization of them.")

;;; CityOfBandarAbbasIran
(isa CityOfBandarAbbasIran City)
(isa CityOfBandarAbbasIran Entity)
(comment CityOfBandarAbbasIran "Bandar Abbas (Bandar-e-'Abbas), a city in Iran on the north coast of the PersianGulf, near the StraitOfHormuz.  One of the chiefPorts of the country of Iran.")

;;; CityOfWashingtonDC
(isa CityOfWashingtonDC CapitalCityOfRegion)
(isa CityOfWashingtonDC CountrySubsidiary)
(isa CityOfWashingtonDC Entity)
(isa CityOfWashingtonDC USCity)
(comment CityOfWashingtonDC "The present (though not the original) capital city of the UnitedStatesOfAmerica, seat of its Federal government, which is located in the specially created Federal district between the States of Maryland and Virginia.")

;;; Cleaning
(isa Cleaning TemporalStuffType)
(isa Cleaning DefaultDisjointScriptType)
(genls Cleaning RemovingSomething)
(genls Cleaning IntrinsicStateChangeEvent)
(genls Cleaning HumanActivity)
(genls Cleaning PurposefulAction)
(comment Cleaning "A collection of events.  In each Cleaning event, dirt (or other unwanted substances) is removed from the objectOfStateChange of that event.  If a Cleaning event is successful, then the Dirtiness level of the object will have been lowered.")

;;; CleaningDevice
(isa CleaningDevice ExistingObjectType)
(genls CleaningDevice SolidTangibleProduct)
(genls CleaningDevice PhysicalDevice)
(comment CleaningDevice "A collection of devices.  An instance of CleaningDevice is any device, manually powered or otherwise, whose primaryFunction is to be used in cleaning things.  Instances include each Mop, each RegularWindshieldWiper, each  FacialTissue, each ShoeBrush, each ClothesWasher, each Dishwasher, etc.")

;;; CleaningImplement
(isa CleaningImplement ExistingObjectType)
(genls CleaningImplement CleaningDevice)
(genls CleaningImplement HandTool)
(comment CleaningImplement "A collection of tools; a subset 
of HandTool and also of CleaningDevice.  An instance of CleaningImplement is any hand-held tool used for cleaning something.  Cleaning implements are used in a wide variety of activities and settings; some subsets include the collections Mop, DentalPick, ElectricToothBrush, WashCloth, FacialTissue, ShoeBrush.  Many cleaning implements are intended for wiping, scrubbing, or polishing surfaces to remove patches of Dirt.")

;;; ClimateCycleType
(isa ClimateCycleType SiblingDisjointCollection)
(genls ClimateCycleType ScriptType)
(genls ClimateCycleType TemporalObjectType)
(comment ClimateCycleType "A collection of collections.  Each element of ClimateCycleType is a collection of (extended) events which are weather processes of one type or another.  Examples of elements of ClimateCycleType are TemperateClimateCycle and SteppeClimateCycle.  
Note: in practice, there is little need to create terms denoting members of the collections belonging to ClimateCycleType; so long as one just wants to state what TYPE of climate a particular region has, simply use the predicate hasClimateType with the appropriate subset of AnnualClimateCycle (q.v.).  See also hasClimateType.")

;;; Cloth
(isa Cloth ExistingStuffType)
(isa Cloth ProductType)
(genls Cloth SolidTangibleThing)
(genls Cloth TextileProduct)
(genls Cloth FreeSheet)
(genls Cloth SheetOfSomeStuff)
(comment Cloth "A collection of tangible things.  Each element of Cloth is a piece of textile sheet woven or knitted or pressed out of fibers.  Pieces of Cloth are commonly used as material inputs to the manufacture of clothing items, towels, sails for sailing craft, parachutes, draperies, etc.  Excludes Leather (q.v.).")

;;; ClothingAccessory
(isa ClothingAccessory ProductType)
(isa ClothingAccessory ExistingObjectType)
(genls ClothingAccessory ClothingItem)
(comment ClothingAccessory "A collection of tangible objects.  Each element of ClothingAccessory is something that is worn as an accessory with other clothing items.  Examples include elements of the collections Jewelry, Scarf, NeckTie, Belt-Clothing, Suspenders, and suchlike.")

;;; ClothingItem
(isa ClothingItem ProductType)
(isa ClothingItem ExistingObjectType)
(genls ClothingItem SheetOfSomeStuff)
(genls ClothingItem SomethingToWear)
(comment ClothingItem "A collection of tangible objects.  Each element of ClothingItem is something that a person wears as a protective and/or decorative covering or ornament.  Items of clothing are usually made of flexible materials, such as cloth, leather, or yarn.  The collection ClothingItem contains primarily individual garments (e.g., elements of the collections Pants, Shirt, Coat, Shoe), together with pairs of shoes, socks, and gloves (since each wearer needs a pair).  Jewelry, suspenders, belts, etc., are in the subset ClothingAccessory.
Note: outfits (esp. specialized outfits) made up of several individual items worn together belong to the collection ClothingOutfit, which is NOT a subset of ClothingItem but IS a subset of the broader collection, SomethingToWear.")

;;; ClothingOutfit
(isa ClothingOutfit ExistingObjectType)
(isa ClothingOutfit ProductType)
(genls ClothingOutfit SheetOfSomeStuff)
(genls ClothingOutfit SomethingToWear)
(genls ClothingOutfit Group)
(comment ClothingOutfit "A collection of objects.  Every element of ClothingOutfit is a group of `coordinated' items that are intended to be worn together; e.g., an instance of ThreePieceSuit, consisting of one suit jacket, one vest, and one pair of long pants.  Clothing outfits are often sold or provided together as a set; e.g., military uniforms, business suits, scuba gear.  A clothing outfit may include some accessories, as well as garments.  Cf. ClothingItem.")

;;; CloudInSky
(isa CloudInSky ExistingObjectType)
(genls CloudInSky CloudOfH2O)
(comment CloudInSky "The collection of clouds (instances of CloudOfH2O) in the sky over some GeographicalRegion (as opposed to being at ground-level).")

;;; CloudOfH2O
(isa CloudOfH2O ExistingObjectType)
(genls CloudOfH2O Suspension)
(comment CloudOfH2O "A cloud of particles of liquid or solid water in the atmosphere covering a GeographicalRegion.")

;;; Cloudiness
(isa Cloudiness PrimitiveAttributeType)
(genls Cloudiness WeatherAttribute)
(genls Cloudiness PhysicalAttribute)
(genls Cloudiness ScalarInterval)
(comment Cloudiness "A collection of attributes; a subset of ScalarInterval.  The elements of Cloudiness characterize the amount of cloud cover at an OutdoorLocation.  A higher value indicates more clouds or more dense cover.  Degrees of cloudiness may be represented qualitatively (e.g., PartialCloudCover, CompleteCloudCover), or using GenericValueFunctions.  The cloudiness of a location can be described with the predicate cloudinessOfRegion.")

;;; Cloudless
(isa Cloudless Cloudiness)
(comment Cloudless "Cloudless is a WeatherAttribute representing a specific degree of Cloudiness.  (cloudinessOfRegion LOC Cloudless) means that the OutdoorLocation LOC has no cloud cover.")

;;; Cloudy
(isa Cloudy Cloudiness)
(comment Cloudy "Cloudy is a WeatherAttribute that characterizes an OutdoorLocation which has at least some cloud cover -- this cloud cover not being situated at ground-level (in which case Foggy would be the applicable WeatherAttribute).")

;;; CodeOfConduct
(isa CodeOfConduct ExistingObjectType)
(isa CodeOfConduct MicrotheoryType)
(genls CodeOfConduct SupposedToBeMicrotheory)
(genls CodeOfConduct IntangibleExistingThing)
(comment CodeOfConduct "A collection of microtheories; a subset of both Obligation and SupposedToBeMicrotheory.  Each element of CodeOfConduct is a microtheory which contains rules and/or expectations governing the behavior of those agents subject to it in certain kinds of situations.")

;;; CohabitationUnit
(isa CohabitationUnit ExistingObjectType)
(genls CohabitationUnit Organization)
(comment CohabitationUnit "A collection of organizations.  Each element of CohabitationUnit is a group of humans or other animals all living together in the same physicalQuarters at the same time, whether that be a house, nest, warren, or other dwelling -- loosely speaking, a household.  As a default, the cohabitants in the group are assumed to be all of the same species.  (See also the more specialized comments in HumanSocialLifeMt and NaiveBiologicalDescentMt.)")

;;; Cohesiveness
(isa Cohesiveness PrimitiveAttributeType)
(genls Cohesiveness ScalarInterval)
(genls Cohesiveness PhysicalAttribute)
(comment Cohesiveness "A collection of attributes; a subset of PhysicalAttribute.  Each element of Cohesiveness represents a specific capacity of a physical object to cohere; e.g., RigidlyCohesive, LiquidCohesiveness, HumanlySeparable.  Cohesiveness of objects is indicated with the predicate cohesivenessOfObject.")

;;; Collection
(isa Collection SetOrCollection)
(isa Collection Collection)
(genls Collection SetOrCollection)
(comment Collection "The collection of all Cyc collections.  Cyc collections are natural kinds or classes, as opposed to mathematical sets; their elements have some common attribute(s).  Each Cyc collection is like a set in so far as it may have elements, subsets, and supersets, and may not have parts or spatial or temporal properties.  Sets, however, differ from collections in that a mathematical set may be an arbitrary set of things which have nothing in common (see Set-Mathematical).  In contrast, the elements of a collection will all have in common some feature(s), some `intensional' qualities.  In addition, two instances of Collection can be co-extensional (i.e., have all the same elements) without being identical, whereas if two arbitrary sets had the same elements, they would be considered equal.   As with any Cyc constant, an instance of Collection should be created only if it is expected to have some purpose or utility.  Moreover, the `best' collections to create are the ones which are impossible to define precisely, yet about which there are rules and other things to say.  E.g., `WhiteCat' is not a good element of Collection to create, because it's easy to define with other Cyc concepts, and there's not much to say about the collection of white cats; but `WhiteCollarWorker' could be a good element of Collection, because it is hard to define exactly, yet there are many things to say about it.")

;;; CollectionDenotingFunction
(isa CollectionDenotingFunction RelationType)
(isa CollectionDenotingFunction Collection)
(genls CollectionDenotingFunction ReifiableFunction)
(comment CollectionDenotingFunction "The collection of all Cyc functions which return elements of Collection.  Examples: SwimmingEventFn, PackageFn, MoleculeFn, all produce collections when applied to their proper arguments; e.g., (MoleculeFn Oxygen) returns the collection of all oxygen molecules.  Note that (genls CollectionDenotingFunction ReifiableFunction).  Cf. IndividualDenotingFunction.")

;;; CollectionEvent
(isa CollectionEvent TemporalObjectType)
(isa CollectionEvent DefaultDisjointScriptType)
(genls CollectionEvent TransferIn)
(comment CollectionEvent "A collection of events.  Each element of CollectionEvent is an event in which tangible or intangible objects are collected from various sources to a single destination via some collection network.")

;;; Color
(isa Color CompositeAttributeType)
(genls Color PhysicalAttribute)
(genls Color SensoryAttribute)
(genls Color CompositeAttribute)
(comment Color "A collection of attributes; a subset of both PhysicalAttribute and SensoryAttribute.  Each element of Color represents a specific color attribute of some object or substance; e.g., GoldColor, LavenderColor, Auburn , Olive-FleshColor.  Elements of Color are CompositeAttributes, since they can vary along several dimensions (e.g., hue, brightness).  Indicate a particular object's Color with the predicate colorOfObject.")
(synonymousExternalConcept Color SENSUS-Information1997 "COLOR")

;;; CombustionProcess
(isa CombustionProcess TemporalStuffType)
(isa CombustionProcess DefaultDisjointScriptType)
(genls CombustionProcess DecompositionProcess)
(genls CombustionProcess EnergyConversionProcess)
(genls CombustionProcess CompositePhysicalAndMentalEvent)
(comment CombustionProcess "A collection of events.  Each CombustionProcess  is an event in which rapid oxidation is taking place.  These always have heat as an output and often involve emission of light as well (typically, flames).  The objectActedOn in a CombustionProcess is at least partly consumed.  See also Flammability.")

;;; Command
(isa Command ObjectType)
(genls Command Request)
(comment Command "A collection of illocutionary forces.  Each instance of Command consists of a piece of information contained (usually implicitly) in a communication, and which expresses the speaker's intention to have the listener either carry out the action described in the utterance and/or bring about the situation described in the utterance.  The speaker in any given instance of Ordering-CommunicationAct presupposes that s/he has the authority to command those s/he adresses.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any senderOfInfo and recipientOfInfo.  See also IllocutionaryForce.")

;;; CommercialActivity
(isa CommercialActivity TemporalObjectType)
(isa CommercialActivity DefaultDisjointScriptType)
(genls CommercialActivity HumanActivity)
(genls CommercialActivity Transaction)
(comment CommercialActivity "This is a large collection of events.  As can be seen from its subsets, it embraces all types of buying, selling, offering to sell, offering to buy, requesting bids, performing services for hire, advertising, manufacturing for sale, etc.")

;;; CommercialFishingBoat
(isa CommercialFishingBoat ExistingObjectType)
(isa CommercialFishingBoat ProductType)
(genls CommercialFishingBoat Boat-WaterTransportationDevice)
(comment CommercialFishingBoat "The subcollection of Boat-WaterTransportationDevice that contains all fishing boats, including trawlers, seiners, junks etc. that are marine-life-catching devices, and the main purpose of the fishing is commercial.  Note that not all instances of CommercialFishingBoat have to be used exclusively in the ocean--they can also be used in rivers and lakes, etc.")

;;; CommercialOrganization
(isa CommercialOrganization ExistingObjectType)
(genls CommercialOrganization Organization)
(comment CommercialOrganization "A collection of organizations.  An element of CommercialOrganization is an organization which buys or sells goods or services for a profit.  It may also be an element of Business or it may merely be a sub-organization of a Business entity.")

;;; CommercialServiceOrganization
(isa CommercialServiceOrganization ExistingObjectType)
(genls CommercialServiceOrganization CommercialOrganization)
(genls CommercialServiceOrganization ServiceOrganization)
(comment CommercialServiceOrganization "A collection of organizations; a subset of CommercialOrganization.  An instance of CommercialServiceOrganization is a commercial organization which sells its services as its main product (rather than tangible goods), for commercial gain.  Some tangible goods may accompany or supplement the main service sold, but only as side products; e.g., some elements of HairSalon sell hair care products.")

;;; Commissioned
(isa Commissioned WorkStatus)
(comment Commissioned "An attribute; an element of WorkStatus.  The attribute of being paid on a commission basis for work done.")

;;; Communicating
(isa Communicating DefaultDisjointScriptType)
(isa Communicating TemporalStuffType)
(genls Communicating InformationTransferEvent)
(genls Communicating SocialOccurrence)
(genls Communicating PurposefulAction)
(comment Communicating "A collection of events.  Each element of Communicating is an event in which the transfer of information between or among agents is a focal action; communicating is the main purpose and/or goal in the event.  That may be contrasted with events which involve communication but wherein the focus is different, e.g., playing cards (wherein the progressive actions--and winning--of the game are focal).  

Communicating may be either a one-way or a two-way transfer of information (cf. CommunicationAct-Single, MultiDirectionalCommunication).  It may be intentional or unintentional.  Every event belonging to Communicating contains at least one transfer of information between at least two agents who participate in the event.  (Note that the latter requirement excludes reading and writing from Communicating, when those events are just the private accessing or generating of information.)  

Communicating may be specialized in various ways, such as, by the method or medium used (e.g., AudioCommunicating, NonVerbalCommunicating, FaceToFacePresenceCommunicating); by the type of information involved (e.g., MakingAnAgreement); by the purpose of the communication (e.g., Teaching, Negotiating); by the agents involved (e.g., IntraOrganizationCommunication, StageProduction).  Examples of Communicating include a symphony performance, an email message, a telephone call, a speech, a handshake, issuing a traffic ticket--all of which normally, and focally, involve communication between two or more agents.")
(overlappingExternalConcept Communicating SENSUS-Information1997 "VERBAL-PROCESS")
(synonymousExternalConcept Communicating SENSUS-Information1997 "COMMUNICATIVE-ACT")

;;; CommunicationAct-Single
(isa CommunicationAct-Single ScriptType)
(isa CommunicationAct-Single TemporalObjectType)
(genls CommunicationAct-Single Action)
(genls CommunicationAct-Single Communicating)
(comment CommunicationAct-Single "A collection of information transfer events; a subset of Communicating.  Each element of CommunicationAct-Single is a single-source transmission of information from ONE senderOfInfo to one or more recipients; such acts may be one-to-one or one-to-many.  Every element of CommunicationAct-Single has a transmission sub-event (which is an element of IBTGeneration-Original) and one or more reception subEvents (which are elements of AccessingAnIBT).  An element of CommunicationAct-Single starts when its transmission sub-event starts and ends when its accessing sub-event(s) end.
Notes: (1) For exchanges of information between or among multiple agents, see MultiDirectionalCommunication.  (2) An important distinction is made between elements of CommunicationAct-Single on the one hand, and their subEvents which are elements of IBTGeneration-Original and AccessingAnIBT, on the other hand; e.g., Speaking and Writing are NOT subsets of CommunicationAct-Single, but rather are subsets of IBTGeneration-Original (because instances of both represent only the generation of information and can even occur without actual communication of it), and ListeningDeliberately and Reading are subsets of AccessingAnIBT, NOT of CommunicationAct-Single, because instances of both represent only the accessing of information (even if by default they imply a prior generation of information).")

;;; CommunicationConvention
(isa CommunicationConvention TemporalStuffType)
(genls CommunicationConvention AbstractInformation)
(genls CommunicationConvention MentalObject)
(comment CommunicationConvention "The collection of conventions used to encode and interpret things which bear information; a syntax together with a semantic mapping.  Instances include natural languages like French or English, database data formats, and computer languages or idiosyncratic systems of gestures or symbols known only by a small group of people.")

;;; CommunityOrganization
(isa CommunityOrganization ExistingObjectType)
(genls CommunityOrganization Organization)
(comment CommunityOrganization "A collection of organizations.  An element of CommunityOrganization is a group that consists of residents of a Neighborhood or apartment building or condominium complex, and which is concerned with issues affecting the Neighborhood or complex.")

;;; CommutativeRelation
(isa CommutativeRelation RelationType)
(isa CommutativeRelation Collection)
(genls CommutativeRelation Relationship)
(comment CommutativeRelation "An important subset of Relationship.  Each element of CommutativeRelation is a relationship whose argument order can be changed without changing the value or meaning of the expression; e.g., PlusFn, TimesFn, or, bordersOn, temporallyIntersects, teammates.  Most Relationships are NOT commutative: if (isa EL COL) is true, it is rare that (isa COL EL) is also true.")

;;; Competence
(isa Competence ScriptPerformanceAttributeType)
(genls Competence ScriptPerformanceAttribute)
(comment Competence "One of the most general attributes for describing the level of skill with which an agent performs some task.  Knowledge enterers will usually want to use some more specific attribute.")

;;; Competition
(isa Competition ScriptType)
(isa Competition TemporalObjectType)
(genls Competition PurposefulAction)
(genls Competition SocialOccurrence)
(comment Competition "The collection of situations in which one or more Agents are striving to be the sole exemplar of some high value judgement, or the highest value along some comparative or metric scale.  Arm wrestling, football, fighting for prey, competitive courting, racing, rodeo events, etc. are examples.  See also competitionExpr.
Note: `striving' may be a bit of overstatement, as sometimes the competitors may even be unaware that a competition has been going on until after it is over, such as the first year a `Best Restaurant in Austin' award is given out.")

;;; CompleteCloudCover
(isa CompleteCloudCover Cloudiness)
(genlAttributes CompleteCloudCover Cloudy)
(comment CompleteCloudCover "CompleteCloudCover is a WeatherAttribute representing a specific degree of Cloudiness.  This attribute describes a location as so clouded over with a uniform layer grey or white clouds that direct sunlight is blocked out.  There are no shadows, the shape or exact location of the sun or moon is impossible to identify.")

;;; ComplexTemporalRelation
(isa ComplexTemporalRelation PredicateCategory)
(genls ComplexTemporalRelation TemporalRelation)
(comment ComplexTemporalRelation "Instances of ComplexTemporalRelation are predicates used to interrelate instances of TemporalThing in time.  Some of them (e.g., startsAfterEndingOf) make statements about the relationship of the beginning and/or end of their first argument to the beginning and/or end of their second argument.  One can think of this as an interval-based theory of time.  Some of them (e.g., temporallyIntersects and temporallySubsumes) make statements about the relationship of the entire set of points that is their first argument to the entire set of points that is their second argument.  One can think of this as a set-theoretic theory of time.")

;;; CompositeAttribute
(isa CompositeAttribute AttributeType)
(genls CompositeAttribute AttributeValue)
(comment CompositeAttribute "A collection of attributes.  Each element of CompositeAttribute is an attribute that is essentially a vector with many dimensions.  Instances of Color are good examples; colors have intensity, hue, and saturation as independent dimensions.  See also primitiveAttributeTypes, PrimitiveAttributeType.")

;;; CompositeAttributeType
(isa CompositeAttributeType Collection)
(genls CompositeAttributeType AttributeType)
(comment CompositeAttributeType "A collection of collections.  Every element of CompositeAttributeType is a collection of attributes which is a subset of CompositeAttribute (q.v.).")

;;; CompositePhysicalAndMentalEvent
(isa CompositePhysicalAndMentalEvent TemporalObjectType)
(isa CompositePhysicalAndMentalEvent ScriptType)
(genls CompositePhysicalAndMentalEvent MentalEvent)
(genls CompositePhysicalAndMentalEvent PhysicalEvent)
(comment CompositePhysicalAndMentalEvent "A collection of events.  Each element of CompositePhysicalAndMentalEvent is an event that involves both some mental event(s) and an interaction of physical objects.  Examples include a news broadcast program, a court trial, inheriting property, writing a letter, a physical examination, a charity ball, traffic on some section of highway during rush hour.  Note that this collection does NOT imply that the events which are its instances have doers (see doneBy).  Subsets of CompositePhysicalAndMentalEvent whose elements all have doers (or performers) -- and there will be many of them -- should have as a second genls Action or the appropriate subset of Action (qq.v.).")

;;; CompositeTangibleAndIntangibleObject
(isa CompositeTangibleAndIntangibleObject ExistingObjectType)
(genls CompositeTangibleAndIntangibleObject PartiallyTangible)
(genls CompositeTangibleAndIntangibleObject PartiallyIntangible)
(genls CompositeTangibleAndIntangibleObject SomethingExisting)
(comment CompositeTangibleAndIntangibleObject "The collection of things which have both a tangible and an intangible component -- e.g., people (with bodies and minds), information bearing objects (intangible information encoded on a tangible substrate, such as music on a CD, or text in a book) and so on.  Like anything else that has at least some tangible component, each element of CompositeTangibleAndIntangibleObject exists in time.  Our representation allows us to separately reify the tangible and intangible components of an object; this is sometimes necessary  (e.g., to state that the age of the Frankenstein monster's mind is x, the age of his body is y, and the age of the new composite is z) but not very often needed --- usually one can just reify the CompositeTangibleAndIntangibleObject and state things about it.")

;;; CompositionPredicate
(isa CompositionPredicate PredicateCategory)
(genls CompositionPredicate PhysicalPartPredicate)
(comment CompositionPredicate "A collection of predicates; one of several subsets of PartPredicate.  The collection CompositionPredicate contains predicates which are used to relate PartiallyTangible things to the substances (pieces of stuffs) which compose them.  CompositionPredicates are instance-level (i.e, they relate Individuals, not Collections), although typically they are used in inferences about specific kinds of things.  Examples include constituents, mainConstituent solvent, solute, suspendingFluid, suspendedPart, atmosphereComponent.")

;;; Compressibility
(isa Compressibility PrimitiveAttributeType)
(genls Compressibility ScalarInterval)
(genls Compressibility PhysicalAttribute)
(comment Compressibility "A collection of attributes; a subset of PhysicalAttribute.   Each element of Compressibility represents a specific capacity of a physical object to be compressed.  Compressibility may be measured with a GenericValueFunction. Compressibilities of objects are indicated with the predicate compressibilityOfObject.")

;;; ComputationalObject
(isa ComputationalObject ObjectType)
(genls ComputationalObject IntangibleIndividual)
(genls ComputationalObject MathematicalOrComputationalThing)
(comment ComputationalObject "A collection of abstract objects; a subset of IntangibleIndividual.  Each element of ComputationalObject is a syntactically structured form, such as a Cyc system expression, a Lisp string, a C variable name, or an equation in a particular canonical form format.")

;;; ComputerProgram
(isa ComputerProgram ProductType)
(isa ComputerProgram ExistingObjectType)
(genls ComputerProgram InanimateThing)
(genls ComputerProgram TangibleProduct)
(genls ComputerProgram Artifact)
(genls ComputerProgram InformationBearingObject)
(comment ComputerProgram "A collection of information bearing objects (IBOs).  Each element of ComputerProgram is an IBO, i.e., a tangible object which contains intangible information, namely instructions written in a code readable by some computer system and which are intended for execution by a computer.  The tangible component of a computer program may be embodied in the memory of a particular instance of Computer (during a particular time), in a static magnetic medium (e.g., a disk or tape), in a hardcopy, even (once upon a time) in a set of punch cards.  Again, note that elements of ComputerProgram are physically embodied programs, which rightly interpreted yield the information and/or instructions in the program.  The elements of Algorithm and of CharacterString (which are abstract) are NOT elements of ComputerProgram, although they may figure in the intangible components of a computer program.  See also containsInformation, InformationBearingObject.")

;;; Concave
(isa Concave CurvatureOfSurface)
(comment Concave "An attribute of a surface meaning that it is bumped or indented inward.  A concave surface has a pair of points which are both closer to a viewer than points on the surface between them.   Dependinhg on the context, it may have relatively small subregions which have convexities (e.g. wrinkles, small dents, corrugations) or are flat so long as the overall shape is concave.  Saddle-shapes, although convex in certain dimensions, are concave in others and are therefore concave.")

;;; Concrete
(isa Concrete TangibleStuffCompositionType)
(genls Concrete BuildingMaterial)
(genls Concrete ArtificialMaterial)
(comment Concrete "A collection of tangible things.  Each element of Concrete is a piece of an artificial mixture of cement, gravel, sand, and (during mixture, pouring, and forming) water.  Used widely in construction, pieces of concrete are formed into the desired shape while fluid and afterward hardened into a sturdy, durable material.  Examples: bridge pilings, foundations of houses, sidewalks, pieces of IH-35.")

;;; Condensing
(isa Condensing TemporalObjectType)
(isa Condensing DefaultDisjointScriptType)
(genls Condensing Translocation)
(genls Condensing PhysicalStateChangeEvent)
(comment Condensing "A collection of events.  In each instance of this collection, an object is cooled to (and then below) its boilingPoint, changing it from GaseousStateOfMatter to LiquidStateOfMatter.")

;;; ConductorResistance
(isa ConductorResistance ElectricalResistance)
(comment ConductorResistance "A measurable physical attribute.  ConductorResistance is the element of ElectricalResistance that represents a very low level of electrical resistance.  An object having ConductorResistance readily conducts electricity.  See also resistanceOfObject.")

;;; ConductsHeatPoorly
(isa ConductsHeatPoorly ThermalConductivity)
(comment ConductsHeatPoorly "A measurable physical attribute.  ConductsHeatPoorly is the element of ThermalConductivity that represents the level of thermal conductivity in an object that conducts virtually no heat.")

;;; ConductsHeatWell
(isa ConductsHeatWell ThermalConductivity)
(comment ConductsHeatWell "A measurable physical attribute.  ConductsHeatWell is the element of ThermalConductivity that represents the level of thermal conductivity in an object that conducts heat very quickly.")

;;; ConductsSomeHeat
(isa ConductsSomeHeat ThermalConductivity)
(comment ConductsSomeHeat "A measurable physical attribute.  ConductsSomeHeat is the element of ThermalConductivity that represents the level of thermal conductivity in an object which conducts heat, but slowly.")

;;; Confidence
(isa Confidence FeelingAttributeType)
(genls Confidence FeelingAttribute)
(comment Confidence "The positive emotion felt when one is free
from doubt about an event or object from which the agent feeling
Confidence expects positive contingencies.  For example, one might
say 'I feel confident that tomorrow it will not be rainy'. Do not
confuse this with a personality disposition, e.g. 'Joe is a confident
person.'  (See PersonalityAttribute.)  This is a collection; for an
explanation of a typical FeelingAttributeType, see Happiness.
More specialized FeelingAttributeTypes include Grief,
SelfConfidence, etc.")

;;; Configuration
(isa Configuration ExistingObjectType)
(isa Configuration SituationType)
(genls Configuration PartiallyTangible)
(genls Configuration StaticSituation)
(comment Configuration "Configuration is a subset of StaticSituation.  Each Configuration is a static configuration, existing over time, of two or more tangible objects.  The StaticSituations that aren't Configurations are those which don't involve tangible objects; for example, reified relationships among agents such as InCustody).")

;;; CongenitalCondition
(isa CongenitalCondition PhysiologicalConditionType)
(genls CongenitalCondition PhysiologicalCondition)
(comment CongenitalCondition "A collection of ailments.  An instance of CongenitalCondition is an AilmentCondition that is present in an afflicted organism from the time of gestation (i.e. before birth), whether or not it is a GeneticCondition.  Two example types of CongenitalCondition are congenital herpes and congenital heroin addiction.  A CongenitalCondition may be caused by behavior of the mother during pregnancy.  Birth defects (such as having an extra toe) are CongenitalConditions.  Injuries sustained during the delivery itself are not CongenitalConditions.  Thus if forceps are used and the infant is scarred, brain-damaged or killed as a result, the situation is not an element of this collection.")

;;; ConnectedPathSystem
(isa ConnectedPathSystem Collection)
(genls ConnectedPathSystem Thing)
(comment ConnectedPathSystem "The collection of all connected PathSystems that are not in separate pieces.  For any different points X and Y in such a system SYS, there is a path PATH in SYS that both X and Y are on.  Another way to put this is that SYS is an instance of ConnectedPathSystem iff for any different points X and Y in SYS, there is a path PATH in SYS such that (pathBetweenInSystem PATH X Y SYS) holds.  Note that according to this definition, a connected path system does not have to contain a link--a path system containing a single node will be a connected path system.  If a connected path system contains a link, nevertheless, every two different points must be connected by a path. Note also that because of our treatment of path (see pathInSystem) and our restriction of points in SYS that are not nodes (see nodeInSystem), that there is a path between every two points in SYS is equivalent to that there is a path between every two nodes in Sys.")

;;; ConnectingTogether
(isa ConnectingTogether TemporalObjectType)
(isa ConnectingTogether DefaultDisjointScriptType)
(genls ConnectingTogether ActionOnObject)
(genls ConnectingTogether PhysicalEvent)
(comment ConnectingTogether "A collection of events.  In a ConnectingTogether event, two or more tangible things get connected together by means of some sort of connector or fastener.  Some specializations of this include welding, buckling-up, using nailing, tying-up, etc.  ConnectingTogether need not be a spec of Movement-TranslationEvent since two objects being connected may be already at rest with each other.")

;;; ConnectionPredicate
(isa ConnectionPredicate RelationType)
(genls ConnectionPredicate CotemporalPredicate)
(comment ConnectionPredicate "A collection of predicates.  Each element of ConnectionPredicate is a predicate that specifies physical connections between objects.  Examples: nailedTo, rivetedTo, connectedTo-Rigidly, rotationallyConnectedTo, hangsFrom, in-Embedded.")

;;; Connector
(isa Connector ExistingObjectType)
(genls Connector NonPoweredDevice)
(comment Connector "A collection of physical devices.  An instance of Connector is a device which connects two objects.  A connector (or part of it) may be a part incorporated into one or both of the objects connected, or a connector may be a totally separate device.  Examples include elements of the collections ButtonTheFastener, Staple, Nail, and many more.")

;;; Constructing
(isa Constructing TemporalStuffType)
(isa Constructing DefaultDisjointScriptType)
(genls Constructing MakingSomething)
(comment Constructing "A collection of events.  In each Constructing event, one or more ConstructionArtifacts, such as a house, are made or incrementally enlarged or remodeled.")

;;; ConstructionArtifact
(isa ConstructionArtifact ExistingObjectType)
(genls ConstructionArtifact Artifact)
(genls ConstructionArtifact SolidTangibleProduct)
(comment ConstructionArtifact "A collection of artificial tangible objects.  Each element of ConstructionArtifact is a structure designed and built by humans.  This collection includes buildings and parts of buildings, as well as things like dams, railroad lines, and roads.  Examples: the RomanColiseum, the ArcDeTriomphe, HooverDam, the WorldTradeCenter, HollyWoodBowl.  For further information, see FixedStructure, an important subset.")

;;; ConstructionCompany
(isa ConstructionCompany ExistingObjectType)
(genls ConstructionCompany Business)
(genls ConstructionCompany CommercialServiceOrganization)
(comment ConstructionCompany "A collection of businesses.  An element of ConstructionCompany is a business whose MainFunction is constructing buildings, houses, dams, roads, bridges, or other large structures.")

;;; Consultant
(isa Consultant OccupationType)
(genls Consultant BusinessPerson)
(genls Consultant Professional)
(comment Consultant "A collection of persons; a subset of Professional.  Each element of Consultant works with some business in a consulting capacity.  Consultants can be self employed, or they can work for a consulting company.")

;;; ConsumableProduct
(isa ConsumableProduct ExistingStuffType)
(isa ConsumableProduct ProductType)
(genls ConsumableProduct TangibleProduct)
(comment ConsumableProduct "A collection of tangible stuff; a subset of TangibleProduct.  Each element of ConsumableProduct is a product of which any portion can be used only once.  A portion of a ConsumableProduct is `used up', i.e., destroyed or transformed into an unusable or waste form, during normal use.  Note: `consumable' here does mean necessarily consumed by mouth; the consumption may be any use of the product.")

;;; ConsumingFoodOrDrink
(isa ConsumingFoodOrDrink TemporalStuffType)
(isa ConsumingFoodOrDrink DefaultDisjointScriptType)
(genls ConsumingFoodOrDrink DirectedTranslation)
(genls ConsumingFoodOrDrink DestructionEvent)
(comment ConsumingFoodOrDrink "A collection of events.  Each element of ConsumingFoodOrDrink is an event in which a person or other animal ingests some portion of food or drink through its mouth.  This collection generically covers eating or drinking, by a single person, of a meal- or snack-sized portion of food.  For more detail, see the subsets EatingEvent and DrinkingEvent.  For eating or drinking with a social group, see HavingAMeal.  Note: ConsumingFoodOrDrink does NOT include intravenous infusion of nutrients or chewing of gum.")

;;; ContactLocation
(isa ContactLocation ContactLocationType)
(genls ContactLocation PartiallyTangible)
(comment ContactLocation "A collection of spatial objects.   Each element of ContactLocation is a point at which some particular agent (e.g., corporation or person) may be contacted by any of several means, for any of several purposes.  ContactLocation includes any place to which one may direct one or more of the following: letters, packages, phone calls or voice messages, bills, email, faxes, pages, subpoenas.  Contact locations must be particular--e.g., my house or my office or even my secretary, but not simply `Austin'.")

;;; ContactLocationType
(isa ContactLocationType Collection)
(genls ContactLocationType ExistingObjectType)
(comment ContactLocationType "A collection of collections.  Each element of ContactLocationType is a collection of places  at which a particular agent may be contacted; such collections may be characterized in several different ways: (a) by method of contact (e.g., VoicePhoneLocation, FaxLocation); (b) by purpose of contact (e.g., BillingLocation, ShippingLocation, EmergencyContact); (c) by the agent's relationship to those places (e.g., HumanResidence, Workplace).  Note that particular places may fall under different subsets of ContactLocationType for different agents; for example, one person's home might be another's vacation location.")

;;; ContainerProduct
(isa ContainerProduct ExistingObjectType)
(genls ContainerProduct SolidTangibleThing)
(genls ContainerProduct PhysicalDevice)
(comment ContainerProduct "A collection of physical devices.  An instance of ContainerProduct is an object whose primaryFunction (or one of whose main functions) is to be a container.  Examples are of staggering variety, including storage containers for books, office records, food, clothing, tools, and materials; containers for transporting the same; passenger compartments of various kinds of vehicles; artificial constructs for housing humans and animals; etc., etc.  Instances of Crib, Sandbox, OfficeSpace, and Coffin.")

;;; Contempt
(isa Contempt FeelingAttributeType)
(genls Contempt Dislike)
(genls Contempt Disapproval)
(comment Contempt "Emotion characterized by vehement condemnation of its object as being low, vile, feeble, or ignominious.  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Contempt are Hate, Abhorrence, etc. ")

;;; Continent
(isa Continent ExistingObjectType)
(genls Continent LandBody)
(genls Continent LandTopographicalFeature)
(comment Continent "A collection of topographical features.  The elements of Continent are the seven main land masses on the surface of the earth (plus Eurasia added as a super-region of Europe and Asia).  Elements: ContinentOfAfrica, ContinentOfAntarctica, ContinentOfAsia, Australia, ContinentOfEurope, ContinentOfEurasia, ContinentOfNorthAmerica, ContinentOfSouthAmerica.")

;;; ContinentOfAfrica
(isa ContinentOfAfrica Entity)
(isa ContinentOfAfrica Continent)
(comment ContinentOfAfrica "The second largest continent, located north and south of the Equator in the EasternHemisphere-Region.  Africa is connected to Asia by the narrow Isthmus of Suez; it includes Madagascar and other offshore islands.")

;;; ContinentOfAsia
(isa ContinentOfAsia Entity)
(isa ContinentOfAsia Continent)
(comment ContinentOfAsia "The world's largest continent, joined in the west with Europe (which may be considered a peninsula of Asia) to form the Eurasian land mass (ContinentOfEurasia).  The ContinentOfAsia occupies much of the northern half of the EasternHemisphere-Region.")

;;; ContinentOfEurope
(isa ContinentOfEurope Entity)
(isa ContinentOfEurope Continent)
(comment ContinentOfEurope "The sixth largest continent; includes adjacent islands.  The ContinentOfEurope is separated from the ContinentOfAsia by the UralMountains.")

;;; ContinentOfNorthAmerica
(isa ContinentOfNorthAmerica Continent)
(isa ContinentOfNorthAmerica Entity)
(comment ContinentOfNorthAmerica "The continent in the northern and WesternHemisphere-Region. North America includes CentralAmerica-Region as well as the WestIndies-Archipelago as geographicalSubRegions.")

;;; ContinentOfSouthAmerica
(isa ContinentOfSouthAmerica Continent)
(isa ContinentOfSouthAmerica Entity)
(comment ContinentOfSouthAmerica "The continent in the western and southern hemisphere.")

;;; ContractNegotiation
(isa ContractNegotiation ScriptType)
(isa ContractNegotiation TemporalObjectType)
(genls ContractNegotiation PurposefulAction)
(genls ContractNegotiation Negotiating)
(comment ContractNegotiation "The collection of negotiations intended to lead to the formation of a contract between the participants (or the parties they represent in the negotiations).")

;;; ControlDevice
(isa ControlDevice ProductType)
(isa ControlDevice ExistingObjectType)
(genls ControlDevice PhysicalDevice)
(comment ControlDevice "A collection of physical devices.  An instance of ControlDevice is a device whose primaryFunction is to control the behavior/functioning/properties of another thing (usually another instance of PhysicalDevice).  Obvious instances of ControlDevice include: the remote control for your TV (an instance of RemoteControlDevice), the brake pedal on your car (an instance of Pedal-ControlDevice), the light switch on your bedroom wall (an instance of ElectricalSwitch); a less obvious instance of ControlDevice is HooverDam (an instance of Dam).")

;;; ControlledLand
(isa ControlledLand ExistingObjectType)
(genls ControlledLand CountrySubsidiary)
(genls ControlledLand GeopoliticalEntity)
(comment ControlledLand "A collection of geopolitical entities.  Each element of ControlledLand is a geopolitical entity that is controlled to some extent by a foreign power.  Examples: PuertoRico, Bermuda, Guadeloupe-TheDependency, Tibet.")

;;; ControllingSomething
(isa ControllingSomething TemporalObjectType)
(isa ControllingSomething ScriptType)
(genls ControllingSomething CompositePhysicalAndMentalEvent)
(genls ControllingSomething PurposefulAction)
(comment ControllingSomething "A collection of events; a subset of PurposefulAction.  An instance of ControllingSomething is a purposeful action in which some Agent intentionally controls some object.  It is not necessary that the agent touch the objectControlled, only that s/he have an efficacious means of controlling its action -- thus, instances of ControllingSomething include all instances of GuidingAMovingObject (some of which involve a RemoteControlDevice).  Further subsets: HandlingAnObject, Braking, SteeringADeviceByHand, PlayingAMusicalInstrument, CuttingFabric,  CarryingWhileLocomoting, FlushingAToilet, etc.  Whenever a ControlDevice (qv) is being used, for its primary function, presumably a ControllingSomething event is taking place.  Borderline examples include having a conversation by telephone, doing the dishes by hand, and having a cat as a pet.")

;;; ConventionalClassificationSystem
(isa ConventionalClassificationSystem ObjectType)
(genls ConventionalClassificationSystem AbstractInformation)
(comment ConventionalClassificationSystem "The collection of all agreed-upon or conventional classification systems, each consisting of ConventionalClassificationTypes.  In such systems, a change or reclassification is possible by a decision of an authority, or by a changed social agreement, without changing the intrinsic facts about the actual objects in the category.  (This applies only to named or known classification systems or schemas, and not to everything under the sun as might be urged by some 1990's-era postmodernist deconstructionist literary criticism theorists.)")

;;; ConventionalClassificationType
(isa ConventionalClassificationType ObjectType)
(genls ConventionalClassificationType AbstractInformation)
(comment ConventionalClassificationType "The collection of all those collections (of Things) that each correspond to a category in some agreed-upon or conventional classification system (a ConventionalClassificationSystem).  In such systems, a change or reclassification is possible by a decision of an authority, or by a changed social agreement, without changing the intrinsic facts about the actual objects in the category.  (This applies only to named, known classification systems or schemas, and not to everything under the sun as might be urged by some 1990's-era postmodernist deconstructionist literary criticism theorists.)")
(synonymousExternalConcept ConventionalClassificationType SENSUS-Information1997 "SOCIAL-OBJECT")

;;; Convex
(isa Convex CurvatureOfSurface)
(comment Convex "A surface attribute meaning that the surface's overall shape is dominated by an outward bulge or mound, or consists of projecting corners between planes.  In most contexts, it may have relatively small subregions which are concave or flat, etc., so long as overall shape is convex.  Viewing something as convex assumes a perspective.  From the opposite perspective, on the `other side', a Convex surface would look Concave.")

;;; ConvexHullFn
(isa ConvexHullFn ReifiableFunction)
(isa ConvexHullFn IndividualDenotingFunction)
(resultIsa ConvexHullFn Surface-Abstract)
(arg1Isa ConvexHullFn SpatialThing)
(comment ConvexHullFn "(ConvexHullFn OBJECT) is a function applied to a SpatialThing (which may be a single object or a Group of several unconnected objects) and returns the surface that is the convex hull of the object or objects.  The convex hull encloses, precisely, all of OBJECT and all space that lies on a straight line between any two points that are parts of OBJECT.  The convex hull is a surface; see also ConvexHullSpaceFn.")

;;; ConvexHullSpaceFn
(isa ConvexHullSpaceFn ReifiableFunction)
(isa ConvexHullSpaceFn IndividualDenotingFunction)
(resultIsa ConvexHullSpaceFn SpatialThing)
(arg1Isa ConvexHullSpaceFn SpatialThing)
(comment ConvexHullSpaceFn "(ConvexHullSpaceFn OBJECT) is a function applied to a SpatialThing (which may be a single object or a Group of several unconnected objects) and returns the spatial region that is enclosed by the convex hull of the object or objects.  The convex hull encloses, precisely, all space that lies on a straight line between any two points that are parts of OBJECT.  The enclosed space is three or two dimensional and is not necessarily the hull surface itself; see also ConvexHullFn.")

;;; ConvexTangibleObject
(isa ConvexTangibleObject ExistingObjectType)
(genls ConvexTangibleObject TangibleThing)
(comment ConvexTangibleObject "The collection of all TangibleThings that are Convex, i.e. have no significant Concave surfaces, cavities or Crevices.  A ConvexTangibleObject occupies about the same space as its convex hull; see ConvexHullFn and ConvexHullSpaceFn.  A solid physical sphere or cube are ConvexTangibleObjects but a cup or doughnut cannot be.  The size of allowable minor concavities depends on the context.")

;;; Conveyance
(isa Conveyance ExistingObjectType)
(genls Conveyance SolidTangibleThing)
(genls Conveyance Artifact)
(comment Conveyance "A collection of concrete physical objects.  Each instance of Conveyance is intended for moving (at least partially tangible) things --- it could be a car, ship, plane, or other vehicle for transporting people; it could be a conveyor belt, a grocery bag, etc.  See also TransportationDevice which is used to axiomatize more specific kinds of conveying events in which the object doing the conveying actually moves along with the object being transported.  See TransportationEvent for the collection of events about this more specific kind of conveying event.  Some positive exemplars:  a gun, a car, a slingshot.  A borderline non-exemplar is a wire over which electricity, signals, etc. are moving.")

;;; Cooked
(isa Cooked PreparationAttribute)
(comment Cooked "The attribute Cooked is a PreparationAttribute (q.v.), describing
how a given item of Food has been prepared.  Food becomes Cooked
as the result of an event of CookingFood.  Specialized forms of
Cooked include Steamed, Baked, Microwaved and Grilled.")

;;; CookingFood
(isa CookingFood DefaultDisjointScriptType)
(isa CookingFood TemporalObjectType)
(genls CookingFood HeatingProcess)
(genls CookingFood PreparingFoodOrDrink)
(comment CookingFood "A collection of events.  Each element of CookingFood is an event in which some item of Food is prepared by heating it.  Typically, the foodstuff is heated until it reaches a certain temperature over some period of time, during which chemical and/or physical changes occur which are supposed to make the foodstuff healthier or tastier (or, in some cases, ethically acceptable).  A CookingFood event may last from a few minutes (e.g., SteamingFood (vegetables), MakingToast) to several hours (e.g., RoastingFood).  
Note:  SmokingFood is not a subset of CookingFood.  Food prepared by smoking (e.g., smoked ham, bacon) is `cured' by a chemical reaction with nitrates in the smoke, rather than being cooked by heat.  Cf. SmokingFood, SaltingFood.")

;;; CoolingProcess
(isa CoolingProcess TemporalStuffType)
(isa CoolingProcess DefaultDisjointScriptType)
(genls CoolingProcess TemperatureChangingProcess)
(comment CoolingProcess "CoolingProcess is a collection of events, and a subset of TemperatureChangingProcess.  During each CoolingProcess event, the temperature of the objectOfStateChange is decreased by removing heat from the object.")

;;; Corner-2d
(isa Corner-2d RegionType)
(genls Corner-2d Corner-2or3d)
(comment Corner-2d "The collection of all regions wherein two linear edges of a two dimensional or sheet-shaped object (i.e., considered in this context to be sheet shaped) meet to form an angle of substantially less than 180 degrees.  Polygons have at least three corners each.")

;;; Corner-2or3d
(isa Corner-2or3d RegionType)
(genls Corner-2or3d PartiallyTangible)
(comment Corner-2or3d "The collection of all regions centered around a point where two edges of a sheet-like object meet at an angle or where three or more surfaces (together with three or more solid edges dividing them) meet at one place forming a solid angle.  Includes 2-dimensional corners and 3 dimensional corners.  Corners are either Convex or Concave with respect to some perspective.")

;;; Corner-3d
(isa Corner-3d RegionType)
(genls Corner-3d Corner-2or3d)
(comment Corner-3d "The collection of all regions where three or more surfaces of an object (which is considered three dimensional in current context), and three or more EdgeOnObjects, meet.  This includes corners of boxes, the tops of pyramids, etc.  Each Corner-3d includes some solid angle of part of the object.")

;;; CorporateOfficer
(isa CorporateOfficer OccupationType)
(genls CorporateOfficer Leader)
(genls CorporateOfficer Administrator)
(comment CorporateOfficer "A collection of people.  An instance of CorporateOfficer is a person who is recognized as an officer of a corporation, as officially recorded in the corporate records of that corporation.  Common types of CorporateOfficer include CompanyPresident, CompanyVicePresident, Secretary and Treasurer of a corporation.")

;;; CorrosionResistance
(isa CorrosionResistance PrimitiveAttributeType)
(genls CorrosionResistance ScalarInterval)
(genls CorrosionResistance PhysicalAttribute)
(comment CorrosionResistance "A collection of attributes; a subset of PhysicalAttribute. Each element of CorrosionResistance represents a specific level of resistance to corrosion of some tangible object.  Degrees of CorrosionResistance may be represented using GenericValueFunctions.  Indicate a particular object's CorrosionResistance with the predicate resistanceToCorrosion.")

;;; CostBreakdownSlot
(isa CostBreakdownSlot PredicateCategory)
(genls CostBreakdownSlot BinaryPredicate)
(genls CostBreakdownSlot Predicate)
(comment CostBreakdownSlot "A collection of predicates.  Each element of CostBreakdownSlot is a binary predicate used to describe some pecuniary aspect of an instance of Buying.  The first argument to every CostBreakdownSlot is an element of Buying and the second argument is always an instance of Money.  Examples: moneyTransferred, discount, salesTax, salesCommission.")

;;; CotemporalObjectsSlot
(isa CotemporalObjectsSlot PredicateCategory)
(genls CotemporalObjectsSlot CotemporalPredicate)
(genls CotemporalObjectsSlot InterExistingObjectSlot)
(comment CotemporalObjectsSlot "This is a subset of BinaryPredicate (hence the anachronistic `Slot' in its name).  It is also a subset of CotemporalPredicate.  Frankly, it is really just the intersection of CotemporalPredicate and BinaryPredicate, so it is strictly speaking superfluous, but has proven itself to be useful.  Suppose predicate P is an instance of CotemporalObjectsSlot.  If (P X Y) holds, then it must be the case that (cotemporal X Y).  For example, consider the binary predicate owns, which is an instance of CotemporalObjectsSlot.  To represent `Nick owned Spot in 1992' we could create the appropriate cotemporal subabstractions of each, and assert (owns NickIn1992 SpotIn1992), and this would satisfy the constraint introduced when we declared owns to be a CotemporalObjectsSlot.  More tersely, we could use holdsIn (qv) and just assert (holdsIn (YearFn 1992) (owns Nick Spot)), since holdsIn implicitly treats instances of SomethingExisting as their appropriate subabstractions.  Alternatively, we could create a context (a microtheory) one of whose assumptions was a temporal one, limiting all axioms to holding during 1992, and then in that context we could simply assert (owns Nick Spot).  But it would be incorrect to assert (owns Nick Spot) in the BaseKB, since Nick as a baby and Nick as an old man didn't/won't own Spot.")

;;; CotemporalPredicate
(isa CotemporalPredicate RelationType)
(genls CotemporalPredicate Predicate)
(comment CotemporalPredicate "A collection of Cyc predicates.  Each element of CotemporalPredicate is a Cyc predicate whose temporal arguments (i.e., arguments having a temporal extent) must be cotemporal, i.e., they have the same temporal starting points and ending points.  Moreover, all the temporal arguments of all the cotemporal predicates involved in a single axiom must be cotemporal.  Since this is a very common and important relationship, we'll consider a detailed example.   If I say `Fred owns a Camaro', what I really mean is that some subAbstrac (i.e., a time-slice) of Fred, over some time interval INT (e.g., 1993-1995), owns some subAbstrac of that Camaro, which exists over that very same time interval INT.  Fred may have owned many cars before and since, and that Camaro may have had many owners before and since, but one time-slice of Fred owned one time-slice of that car.  Common sense tells us that the time interval (INT) must have been the same in both cases; Cyc can infer this commonsensical conclusion from our having told it that owns is a cotemporal relation, i.e., (isa owns CotemporalPredicate).  A ternary example is `between', as in `Lucy is between Fred and Ethel'.  Not all predicates are elements of CotemporalPredicate, of course; consider `remembers' -- I (today) remember my father as he was forty years ago.  There are some borderline cases here; sees clearly belongs to CotemporalPredicate, but in the case of someone smelling another object (cf. smells) it is less clearcut, since one can smell an object that has ceased to exist.")

;;; Coulomb
(isa Coulomb StandardUnitOfMeasure)
(isa Coulomb MKSUnitOfMeasure)
(isa Coulomb UnitOfCharge)
(isa Coulomb UnitOfMeasureNoPrefix)
(resultIsa Coulomb ElectricalCharge)
(resultIsa Coulomb ScalarInterval)
(argsIsa Coulomb CycSystemRealNumber)
(comment Coulomb "This is the basic unit of measure for charge in the metric system and in CYC.")

;;; CounterfactualContext
(isa CounterfactualContext ObjectType)
(isa CounterfactualContext MicrotheoryType)
(genls CounterfactualContext Microtheory)
(comment CounterfactualContext "The collection of microtheories that are each assumed to include at least one counterfactual assertion: an assertion which is believed to be untrue in the real world.  It may be, however, that there is no explicit counterfactual assertion in a given CounterfactualContext.  In particular, it is not required that there be any explicit contradiction of assertions in the genlMts of the CounterfactualContext.  But intuitively speaking, most adults would be reticent about trusting too strongly in a propositon whose only justification was in a CounterfactualContext.  All works of fiction relate events that transpire in counterfactual contexts.  Examples:  WorldMythologyMt, PaddingtonBearStoriesMt, ChristmasMythologyMt.")

;;; Country
(isa Country ExistingObjectType)
(genls Country GeopoliticalEntity)
(comment Country "A collection of geopolitical entities.  An element of Country is a nation-state having its own territory, population, and government, whether or not it is fully independent.  For example, Scotland is an element of Country, even though it is a part of the UnitedKingdomOfGreatBritainAndNorthernIreland.  Cf. IndependentCountry.")

;;; CountrySubsidiary
(isa CountrySubsidiary ExistingObjectType)
(genls CountrySubsidiary GeopoliticalEntity)
(comment CountrySubsidiary "A collection of geopolitical entities.  Each element of CountrySubsidiary is a political region that is a direct subsidiary of some country.  This collection includes states, provinces, territories, and some special districts such as Washington, D.C.  This class is somewhat artificial but is useful when representing addresses.")

;;; County
(isa County SpatiallyDisjointRegionType)
(genls County GeopoliticalEntity)
(comment County "A collection of geopolitical entities.  An element of County is a lesser geopolitical region, having an area typically larger than a City but smaller than a State-Geopolitical.  Traditionally, a County area was within one day's horseback ride from the County Seat.")

;;; CountyGovernment
(isa CountyGovernment ExistingObjectType)
(genls CountyGovernment RegionalGovernment)
(comment CountyGovernment "The collection of all County governments.")

;;; CourseDuringAMeal
(isa CourseDuringAMeal ScriptType)
(genls CourseDuringAMeal HandlingAnObject)
(comment CourseDuringAMeal "A collection of events.  Each element of CourseDuringAMeal is an event in which one or more diners at a meal consume a single course.  Examples include the elements of AppetizerCourse, MainCourse, DessertCourse.")

;;; Court-Judicial
(isa Court-Judicial ExistingObjectType)
(genls Court-Judicial Organization)
(comment Court-Judicial "A collection of organizations which are judicial agents.  An element of Court-Judicial is an established judicial court, i.e., an enduring governmental Organization whose primaryFunction is to settle disputes by means of legal reasoning by one or more Judges.  Typically, a court's orders are enforced by some other agency belonging to the government of which that court is a part.  The collection Court-Judicial includes federal, state, county, and municipal courts, appellate and chancery courts, tax courts, courts of claims, courts-martial (if non-temporary), admiralty courts, courts of chivalry, American Indian tribal courts, and the Permanent Court of International Justice.  It excludes Gypsy/Rom Kris courts, nonjudicial administrative county courts, stannaries, and temporary Tribunals.")

;;; CourtesyTitle
(isa CourtesyTitle LinguisticObjectType)
(genls CourtesyTitle Title)
(comment CourtesyTitle "The collection of Titles, such as  Mr., Ms., Mrs., Miss, Dr., etc., which precede names in Anglo-American addressing custom.")

;;; Cracking
(isa Cracking ScriptType)
(genls Cracking SeparationEvent)
(genls Cracking IntrinsicStateChangeEvent)
(genls Cracking PhysicalEvent)
(comment Cracking "A collection of change events.  In each Cracking, something becomes cracked.  I.e., two or more areas of the thing are separated from one another (though perhaps not divided wholly into parts).  In order to undergo a Cracking, the objectOfStateChange must be in a SolidStateOfMatter.")

;;; CreationEvent
(isa CreationEvent TemporalObjectType)
(isa CreationEvent ScriptType)
(genls CreationEvent Action)
(genls CreationEvent CreationOrDestructionEvent)
(comment CreationEvent "A collection of events.  In each element of CreationEvent, at least one instance of Entity (the outputsCreated) is brought into existence.")

;;; CreationOrDestructionEvent
(isa CreationOrDestructionEvent TemporalObjectType)
(genls CreationOrDestructionEvent PhysicalEvent)
(comment CreationOrDestructionEvent "A collection of events.  During each element of CreationOrDestructionEvent, one or more instances of Entity come into or go out of existence.  Elements of this collection are the sorts of events that have inputs, outputs, products, wasteProducts, and byProducts.  Examples of CreationOrDestructionEvent would include a particular campfire (a CombustionProcess), manufacturing a particular car, etc.")

;;; Credential
(isa Credential ObjectType)
(genls Credential PropositionalInformationThing)
(genls Credential AbstractInformation)
(genls Credential MentalObject)
(genls Credential TemporalThing)
(comment Credential "A collection of intangible objects which consist of propositional information about an agent.  Credential is a subset of PropositionalInformationThing (q.v.).  Each element of Credential is specific information about one agent, provided by another agent; the information content of a credential consists of favorable, enabling, or empowering propositional declarations.  As represented in Cyc, credentials are intangible information, but each element of Credential usually has some associated physical document (e.g., a diploma associated with a college degree, a driver's license).  A credential may certify that the holder (i.e., the subject of the credential) has a particular skill (e.g., legal bar certification, ability to drive); has completed certain training (e.g., GED schooling, Ph.D. requirements; is allowed to do a certain thing (e.g., travel visa, permission slip); and so on.  Recommendations are considered a kind of credential.")

;;; CreditCard
(isa CreditCard MoneyTenderType)
(genls CreditCard TenderObject)
(genls CreditCard Card)
(genls CreditCard IDDocument)
(genls CreditCard OfficialDocument)
(genls CreditCard FinancialAccountTenderObject)
(comment CreditCard "A collection of plastic cards.  Each element of CreditCard is a piece of plastic that enables authorized users to spend the card-issuing company's money, drawn as a (usually unsecured) loan through an associated instance of CreditCardAccount under a pre-arranged credit agreement.  The credit card company credits the vendor of the purchased goods or services and bills the card user, usually with interest.")

;;; Crevice
(isa Crevice ExistingObjectType)
(genls Crevice Cavity)
(comment Crevice "The collection of all long, slender cavities or cracks or furrows in otherwise solid objects.")

;;; CrimeDetection
(isa CrimeDetection TemporalObjectType)
(isa CrimeDetection ScriptType)
(genls CrimeDetection PurposefulAction)
(genls CrimeDetection HumanActivity)
(comment CrimeDetection "This is the actual act of detecting a crime.")

;;; CubicCentimeter
(isa CubicCentimeter UnitOfVolume)
(isa CubicCentimeter UnitOfMeasureNoPrefix)
(isa CubicCentimeter CGSUnitOfMeasure)
(resultIsa CubicCentimeter Volume)
(resultIsa CubicCentimeter ScalarInterval)
(argsIsa CubicCentimeter CycSystemRealNumber)
(comment CubicCentimeter "The measurement function used in Cyc to represent the Metric cc, a unit of measure for volume.  See also CGSUnitOfMeasure, UnitOfMeasure.")

;;; Currency
(isa Currency MoneyTenderType)
(genls Currency PortableObject)
(genls Currency InformationBearingObject)
(genls Currency TenderObject)
(genls Currency VisualInformationSource)
(comment Currency "A collection of physical objects.  An instance of Currency is a physical object generally accepted as legal tender (i.e., not checks or credit cards) and used as a means of transferring a quantity of Money between some elements of Agent.  Elements of Currency may be coins, items of precious metal, paper bills for which precious objects are payable by a government to the bearer on demand, or unbacked paper bills required by a government to be accepted for payment of debts.  Elements of Currency are typically backed by and issued by national governments.
Note: This collection includes all instances of legal tender, worldwide and historically.  But, for better or worse, the notion of legal tender is context-dependent.  Normally what counts as currency is relative to the country one is in; legal tender in the United States is not the same as legal tender in China.  (Though US dollars may have excellent value on the black market.)  What counts as legal tender depends on historical events as well, since a government may change, withdraw, or cancel some types of currency it previously authorized.  Also, conquest of one country by another usually brings about the collapse of the loser's currency.  A Confederate ten dollar bill, e.g., is not an element of Currency in the context of twentieth century Alabama, even though it belongs to Currency in a different context.")

;;; CurvatureOfSurface
(isa CurvatureOfSurface AttributeType)
(genls CurvatureOfSurface AttributeValue)
(comment CurvatureOfSurface "The collection of all surface curvature attributes.  These may apply to a particular piece of a surface of an object, or to the whole surface.  For real-world (non-mathematical) surfaces, there is ordinarily some tolerance for minor surface deviations that depends on the context.  Thus a 'flat' surface may have relatively small bumps and crevices.")

;;; CuttingDevice
(isa CuttingDevice ExistingObjectType)
(genls CuttingDevice PhysicalDevice)
(comment CuttingDevice "A collection of devices.  An instance of CuttingDevice is a device whose primaryFunction is to (enable its user to) cut another object.  Subsets of CuttingDevice include the collections Razors, Scissors, LawnMowers,and more.")

;;; Cyc
(isa Cyc TheTerm)
(isa Cyc Cyclist)
(comment Cyc "A computer program -- in fact, THIS computer program! -- which is also a Cyclist, hence entitled to inspect, modify, add, and delete units.")

;;; CycELVariable
(isa CycELVariable ObjectType)
(isa CycELVariable Collection)
(genls CycELVariable CycSystemVariable)
(genls CycELVariable CycSystemSymbol)
(comment CycELVariable "The collection of variables that appear in elements of CycExpression.  Strings used for elements of CycELVariable must begin with the character `?'; e.g., ?X, ?AGENT, ?PROP.")

;;; CycExpression
(isa CycExpression LinguisticObjectType)
(isa CycExpression Collection)
(genls CycExpression AbstractInformation)
(genls CycExpression ComputationalObject)
(genls CycExpression Individual)
(comment CycExpression "The collection of all syntactically legal CycL expressions.  Note that CycL is NOT just first-order:  this collection includes sets and propositions, as well as individuals and predicates.")

;;; CycFormula
(isa CycFormula LinguisticObjectType)
(isa CycFormula Collection)
(genls CycFormula Proposition)
(genls CycFormula LinguisticObject)
(genls CycFormula CycExpression)
(comment CycFormula "The collection of all well-formed CycL formulas.  Every Cyc formula is a Cyc expression and a proposition; CycFormula is a subset of both CycExpression and Proposition.  Example: (and (isa Pittman HumanCyclist) (residesInRegion Pittman CityOfAustinTX)).   For a thorough discussion of what constitutes a well-formed CycL formula, see the Cyc documentation.")

;;; CycIndexedTerm
(isa CycIndexedTerm Collection)
(genls CycIndexedTerm Thing)
(comment CycIndexedTerm "Elements of CycIndexedTerm are objects that are indexed in the Cyc kb (e.g., kb constants, kb assertions).")

;;; CycSystemAtom
(isa CycSystemAtom ObjectType)
(genls CycSystemAtom CycSystemListOrAtom)
(comment CycSystemAtom "A collection of the atomic data belonging to the CycL substrate of the Cyc System.  Elements of CycSystemAtom cannot be decomposed (e.g., a symbol).")

;;; CycSystemAtomWithValue
(isa CycSystemAtomWithValue ObjectType)
(genls CycSystemAtomWithValue CycSystemAtom)
(comment CycSystemAtomWithValue "A sub-collection of the atomic data belonging to the CycL substrate of the Cyc System.  Each element of CycSystemAtomWithValue is an atomic datum that has a value (e.g., 2) associated with it.")

;;; CycSystemList
(isa CycSystemList ObjectType)
(isa CycSystemList Collection)
(genls CycSystemList List-Sequence)
(genls CycSystemList CycSystemListOrAtom)
(genls CycSystemList Individual)
(comment CycSystemList "A collection of tuples (see Tuple).  Each element of CycSystemList is an ordered list of items enclosed in parentheses.  Cyc system lists are those things that pass the defnIff LISTP, i.e., those things considered by the Cyc System to be lists.")

;;; CycSystemListOrAtom
(isa CycSystemListOrAtom ObjectType)
(genls CycSystemListOrAtom CycSystemObject)
(comment CycSystemListOrAtom "A collection including both the lists and the atomic data belonging to the CycL substrate of the Cyc System.")

;;; CycSystemObject
(isa CycSystemObject ObjectType)
(genls CycSystemObject ComputationalObject)
(comment CycSystemObject "The collection of computational (i.e., abstract, intangible, syntactically structured) objects which make up Cyc's CycL-based system.")

;;; CycSystemRealNumber
(isa CycSystemRealNumber ObjectType)
(isa CycSystemRealNumber Collection)
(genls CycSystemRealNumber CycSystemAtomWithValue)
(genls CycSystemRealNumber RealNumber)
(comment CycSystemRealNumber "CycSystemRealNumber is the set of all numbers which satisfy the defnSufficient NUMBERP (i.e., the set of numbers which are considered reals or integers by CycL).  Thus, 3.14, 0, and -0.004 are legitimate elements of CycSystemRealNumber.  But (Meter 6), (Unity 3.3), :34, PlusInfinity, and Avogadro's number are NOT legitimate elements of CycSystemRealNumber.")

;;; CycSystemString
(isa CycSystemString Collection)
(genls CycSystemString CycSystemAtom)
(genls CycSystemString Individual)
(comment CycSystemString "Each CycSystemString is a sequence of characters enclosed within double quotes")

;;; CycSystemSymbol
(isa CycSystemSymbol ObjectType)
(isa CycSystemSymbol Collection)
(genls CycSystemSymbol CycSystemAtom)
(genls CycSystemSymbol Individual)
(comment CycSystemSymbol "A collection of symbolic atomic terms, namely, all those things that satisfy the  definition of a symbol in the Cyc system.  Every element of CycSystemSymbol satisfies the Heuristic Level (SubL) defnIff SYMBOLP.  Such terms cannot include numbers or strings (i.e., they must be symbolic), nor can they include lists, non-reified function terms, or axioms (i.e., they must be atomic).")

;;; CycSystemVariable
(isa CycSystemVariable ObjectType)
(genls CycSystemVariable CycSystemSymbol)
(comment CycSystemVariable "The collection of atomic data, each element of which denotes a variable within CycL and therefore can have a value associated with it during inferencing.  CycSystemVariable excludes Cyc System symbols which designate constants or strings.")

;;; CyclicalIntervalGroupType
(isa CyclicalIntervalGroupType Collection)
(genls CyclicalIntervalGroupType MutuallyDisjointIntervalCollection)
(comment CyclicalIntervalGroupType "(isa ?X CyclicalIntervalGroupType) means that ?X is a collection of interval types whose instances recur in a set pattern throughout all of calendar history.  ?X must partition all of time: the elements of ?X must be mutually disjoint, and unioned altogether they must encompass all time.  For example, ?X could be the set of the seven calendar days (Monday through Sunday), or the set of the twelve calendar months (January through December).  I.e., (isa DayOfWeekType CyclicalIntervalGroupType) and (isa MonthOfYearType CyclicalIntervalGroupType).  `Recurring in a set pattern' generally means that one can put the elements of ?X in order, say X1, X2,..., Xn, and there will be an instance of X1 immediately followed by an instance of X2 (that instance x2a of X2 will be contiguousAfter that instance x1a of X1),  and there will be an instance of X3 immediately following that particular instance of X2, and there will be an instance of X4 immediately following that instance of X3, etc.  One final note:  when we arrange elements of ?X into such a pattern X1,...Xn (whose repetitions then `tile' all time), n may be larger than the cardinality of ?X.  E.g., ?X might be the set with just the 2 elements WeekendDay (the union of the set Saturday and the set Sunday) and WeekDay, and then the arrangement that tiles all time is 5 contiguous WeekDays followed by 2 contiguous WeekendDays.")

;;; Cyclist
(isa Cyclist Collection)
(genls Cyclist TemporalThing)
(comment Cyclist "The set of actors (mostly people) entitled to inspect and modify the Cyc knowledge base")

;;; CyclistsMt
(isa CyclistsMt Microtheory)
(genlMt CyclistsMt BaseKB)
(comment CyclistsMt "A Microtheory for stating basic hierarchical (isa and genls) information pertaining to users of Cyc.")

;;; CylinderFn
(isa CylinderFn ShapeFunction)
(resultIsa CylinderFn ThreeDimensionalShape)
(resultIsa CylinderFn AbstractShape)
(arg1Isa CylinderFn Distance)
(arg2Isa CylinderFn Distance)
(comment CylinderFn "The Cyc function CylinderFn is a ShapeFunction (q.v.).  (CylinderFn L D) that returns an abstract cylinder of length L and diameter D.  For example, a particular beer mug canContainShapes (CylinderFn (Inch 10) (Inch 5)).")

;;; DailyPersonalCleaning
(isa DailyPersonalCleaning TemporalObjectType)
(isa DailyPersonalCleaning DefaultDisjointScriptType)
(genls DailyPersonalCleaning Cleaning)
(comment DailyPersonalCleaning "A collection of events.  Each DailyPersonalCleaning encompasses the standard cleaning and grooming activities that an animal engages in over the course of a day.  Such a `daily routine' is almost sure to include many brief grooming and cleaning actions, such as licking one's paws, combing one's hair, washing one's hands, shaving, bathing, etc., and those are sub-events of that DailyPersonalCleaning event.  For example, a human's DailyPersonalCleaning might have a TeethCleaning as one of its sub-events, along with a TakingABath, two instances of CombingHair, etc.  
Note:  Those specialized kinds of events, like CombingHair, are NOT subsets of DailyPersonalCleaning, since it would be abnormal for someone to JUST comb their hair each day (and do absolutely no other daily cleaning activity whatsoever).
Note:  In the context HumanActivitiesMt --- where all the performers of actions are, by default, human beings --- DailyPersonalCleaning designates human grooming activities only.  In that microtheory, dog-grooming performed by human beings does not constitute DailyPersonalCleaning, even if it happens on a daily basis for some pampered poodle, as it is not PERSONAL (i.e, self-) cleaning.")

;;; Database-AbstractContent
(isa Database-AbstractContent ObjectType)
(genls Database-AbstractContent IndexedInfoSource)
(comment Database-AbstractContent "The collection of all databases, as abstract repositories of information rather than as physical storage devices.   A database generally has some means of accessing the data from structured records, frames or relational structures, using some query language.  A particular Database-AbstractContent may exist in multiple copies, and may be distributed over several different physical data storage sites: see also Database-Physical.")

;;; Database-Physical
(isa Database-Physical ExistingObjectType)
(genls Database-Physical CompositeTangibleAndIntangibleObject)
(genls Database-Physical InformationBearingObject)
(genls Database-Physical StructuredInformationSource)
(comment Database-Physical "A collection of information 
bearing objects (IBOs); a subset of 
StructuredInformationSource.  Each element of Database-Physical 
is an IBO that stores many pieces of information, organized 
for easy scanning and access.  Typically, a data base 
involves one or more formatted data record schemes, 
together with some device for searching and retrieving data.  
Note that, as an IBO, a Database-Physical is some particular,
tangible copy of a database. To refer to the abstract 'content'
of a database, use Database-AbstractContent.")

;;; Date
(isa Date Collection)
(isa Date TemporalObjectType)
(genls Date TemporalThing)
(genls Date TimeInterval)
(comment Date "Date is a subset of TimeInterval.  A Date is any TimeInterval which can be defined purely by its location on the calendar.  Thus a Date could be a particular calendar day, a particular calendar quarter, a particular calendar month, a particular decade, etc.  So the subsets of Date include CalendarMinute, CalendarQuarter, etc., as well as CalendarDay.")

;;; DateAfterFn
(not 
  (isa DateAfterFn ModalRelationship))
(isa DateAfterFn EvaluatableFunction)
(isa DateAfterFn NonPredicateFunction)
(resultIsa DateAfterFn Date)
(arg1Isa DateAfterFn Date)
(arg2Isa DateAfterFn Time-Quantity)
(comment DateAfterFn "Like PlusFn, but for Dates.  (DateAfterFn ?DATE ?DUR) returns a Date which is ?DUR amount of time after ?DATE.  For example, (DateAfterFn (YearFn 1950) (YearsDuration 10)) returns (YearFn 1960).  See also DateBeforeFn, TimeElapsedFn.")

;;; DateBeforeFn
(not 
  (isa DateBeforeFn ModalRelationship))
(isa DateBeforeFn EvaluatableFunction)
(isa DateBeforeFn NonPredicateFunction)
(resultIsa DateBeforeFn Date)
(arg1Isa DateBeforeFn Date)
(arg2Isa DateBeforeFn Time-Quantity)
(comment DateBeforeFn "Like DifferenceFn, but for Dates.  (DateBeforeFn ?DATE ?DUR) returns a Date which is ?DUR amount of time before ?DATE.  For example, (DateBeforeFn (YearFn 1999) (YearsDuration 1)) returns (YearFn 1998).   See also DateAfterFn, TimeElapsedFn.")

;;; Dawn
(isa Dawn TemporalObjectType)
(isa Dawn ScriptType)
(genls Dawn Twilight)
(genls Dawn QualitativeTimeOfDay)
(comment Dawn "Each instance of Dawn is a dimly-lit period before a Sunrise.")

;;; DayFn
(isa DayFn IndividualDenotingFunction)
(isa DayFn NonPredicateFunction)
(resultIsa DayFn CalendarDay)
(arg1Isa DayFn PositiveInteger)
(arg2Isa DayFn CalendarMonth)
(comment DayFn "(DayFn ?D ?MNTH) denotes a CalendarDay -- in particular, the day number ?D of month ?MNTH.  For example, (DayFn 14 (MonthFn February (YearFn 1966))) denotes Feb. 14th, 1966")

;;; DaysDuration
(isa DaysDuration UnitOfTime)
(isa DaysDuration UnitOfMeasureNoPrefix)
(isa DaysDuration UnitOfMeasure)
(resultIsa DaysDuration ScalarInterval)
(resultIsa DaysDuration Time-Quantity)
(argsIsa DaysDuration CycSystemRealNumber)
(comment DaysDuration "This is a function that takes one or two numbers and returns, as its value, some amount of Time.  An expression of the form (DaysDuration ?min ?max) denotes a quantity of Time that is at least ?min Days and at most ?max Days.  (DaysDuration ?num) denotes a quantity of Time that is exactly ?num days.")

;;; DaytimeWorkingHours
(isa DaytimeWorkingHours TemporalObjectType)
(genls DaytimeWorkingHours TimeOfDay)
(comment DaytimeWorkingHours "DaytimeWorkingHours is a set of time intervals.  The length of each of those intervals, and their startingPoint and endingPoint, are defined by the bulk of a working population performing their daily jobs.  The schedule varies by context -- i.e. which group of workers are being considered -- and the boundaries are fuzzy.  This fuzziness makes the concept more useful in many ways, though, not less useful.")

;;; DeadAnimal
(isa DeadAnimal ExistingObjectType)
(genls DeadAnimal OrganicStuff)
(comment DeadAnimal "A subset of OrganicStuff (and not, of course, of Animal, whose elements must be alive).  Each element of DeadAnimal is a corpse or partial remains of an individual animal, somewhat intact, and prior to any butchering, burning, cooking, dissolving, or fully decomposing.")

;;; DeadLanguage
(isa DeadLanguage ObjectType)
(genls DeadLanguage NaturalLanguage)
(comment DeadLanguage "A subset of NaturalLanguage.  Each element of DeadLanguage is a natural language that is no longer spoken as a native language.")

;;; December
(isa December MonthOfYearType)
(genls December CalendarMonth)

;;; DecidingWhichInstrumentPredicateToUse
(isa DecidingWhichInstrumentPredicateToUse SharedNote)
(comment DecidingWhichInstrumentPredicateToUse "Which instrument predicate you use depends on what level of generality you wish your statement to apply at.  One help is to look at the argument types of each instrument predicate and decide.  Do you want it to apply to every PartiallyTangible which is an instrument?  Then use instrument-Generic since PartiallyTangible is its arg1Isa.  Are you writing a rule which really only applies to PhysicalDevices  Then use deviceUsed.  But be careful!  When you use a more specific predicate such as deviceUsed it may have special extra conditions in its definition aside from the PhysicalDevice arg1Isa constraint.  Also if your first stab at the rule involves deviceUsed in the antecedent, see if it applies more generally to instrument-Generic.")

;;; DeciduousPlant
(isa DeciduousPlant ExistingObjectType)
(genls DeciduousPlant Plant-Woody)
(comment DeciduousPlant "A collection of plants.  Each element of DeciduousPlant is a plant which sheds all of its leaves once a year, seasonally, and subsequently grows new ones.")

;;; DecompositionEvent
(isa DecompositionEvent TemporalObjectType)
(isa DecompositionEvent DefaultDisjointScriptType)
(genls DecompositionEvent DestructionEvent)
(genls DecompositionEvent DecompositionProcess)
(comment DecompositionEvent "The collection of events in which one or more objects decompose more or less completely.  See also the more general concept DecompositionProcess, in whose instances objects at least partially decompose.")

;;; DecompositionProcess
(isa DecompositionProcess TemporalStuffType)
(isa DecompositionProcess DefaultDisjointScriptType)
(genls DecompositionProcess TransformationProcess)
(comment DecompositionProcess "A collection of events in which some object decomposes.  I.e., in a DecompositionProcess event, some object's matter undergoes chemical reactions (sometimes mediated by microorganisms) that eventually result in the object losing its shape and material characteristics.  This may sometimes superficially resemble Melting, but it is a different process.")

;;; Decrypting
(isa Decrypting TemporalObjectType)
(genls Decrypting IBTRecoding)
(comment Decrypting "The collection of actions in which an encrypted IBO (InformationBearingObject) is transformed so that it can be accessed.")

;;; DefaultDisjointFoodType
(isa DefaultDisjointFoodType SiblingDisjointCollection)
(genls DefaultDisjointFoodType ProductType)
(comment DefaultDisjointFoodType "A collection of collections.  Each instance of DefaultDisjointFoodType is a collection of beverages or foodstuffs (a subset of Food or FoodIngredientOnly).  More to the point, this collection-of-collections is a SiblingDisjointCollection (qv).  So every two instances of DefaultDisjointFoodType are either disjoint, or are in a known subset/superset relationship, or have some known (reified) common specialization.  Virtually every commonly-named type of food will be an element of this set-of-sets.  E.g., the collections HotDog, ChickenSoup, Cocoa-ThePowder, Prune, ToasterTart, MilkPowder, and so on.  One could easily define a collection of foodstuff and beverages, such as The-Food-That-Was-Eaten-In-Dallas-Yesterday, that would not be a member of this set-of-sets, but most such collections are not worth naming and keeping around.  See the concept SiblingDisjointCollection for more information about this sort of arrangement.")

;;; DefaultDisjointScriptType
(isa DefaultDisjointScriptType SiblingDisjointCollection)
(genls DefaultDisjointScriptType ScriptType)
(comment DefaultDisjointScriptType "This is a  SiblingDisjointCollection (qv).  So the elements of DefaultDisjointScriptType are kinds of actions (subsets of Event) that can be assumed to be mutually disjoint from each other (unless one is known to be a subset of the other, or there is a known common subset.)")

;;; DefaultMonotonicPredicate
(isa DefaultMonotonicPredicate ObjectType)
(isa DefaultMonotonicPredicate Collection)
(genls DefaultMonotonicPredicate Predicate)
(comment DefaultMonotonicPredicate "A collection of predicates.  Each element of DefaultMonotonicPredicate is a predicate whose use as the predicate of a locally asserted ground formula causes that formula to be entered, by default, as :MONOTONIC.  Examples: isa, genls, disjointWith, equals, arity, arg1Isa.")

;;; DegenerationEvent
(isa DegenerationEvent TemporalObjectType)
(isa DegenerationEvent DefaultDisjointScriptType)
(genls DegenerationEvent IncurringDamage)
(comment DegenerationEvent "A collection of events.  In each DegenerationEvent, some object loses its function(s) through a process of deterioration and/or a series of discrete breakdowns.")

;;; Degree-UnitOfAngularMeasure
(isa Degree-UnitOfAngularMeasure UnitOfAngularDistance)
(isa Degree-UnitOfAngularMeasure UnitOfMeasureNoPrefix)
(resultIsa Degree-UnitOfAngularMeasure PhysicalAttribute)
(resultIsa Degree-UnitOfAngularMeasure ScalarInterval)
(argsIsa Degree-UnitOfAngularMeasure CycSystemRealNumber)
(comment Degree-UnitOfAngularMeasure "The basic unit to measure the size of angles, in the Imperial system of measurement.  360 degrees = 1 complete circle")

;;; DegreeCelsius
(isa DegreeCelsius UnitOfTemperature)
(isa DegreeCelsius MKSUnitOfMeasure)
(isa DegreeCelsius UnitOfMeasureNoPrefix)
(resultIsa DegreeCelsius Temperature)
(resultIsa DegreeCelsius ScalarInterval)
(argsIsa DegreeCelsius CycSystemRealNumber)
(comment DegreeCelsius "The standard unit of temperature in much of the world and also in CYC.")

;;; DegreeFahrenheit
(isa DegreeFahrenheit UnitOfTemperature)
(isa DegreeFahrenheit UnitOfMeasureNoPrefix)
(resultIsa DegreeFahrenheit Temperature)
(resultIsa DegreeFahrenheit ScalarInterval)
(argsIsa DegreeFahrenheit CycSystemRealNumber)
(comment DegreeFahrenheit "The unit of measure on the Fahrenheit scale; mainly used in the USA")

;;; DegreeKelvin
(isa DegreeKelvin UnitOfTemperature)
(isa DegreeKelvin StandardUnitOfMeasure)
(isa DegreeKelvin UnitOfMeasureNoPrefix)
(resultIsa DegreeKelvin Temperature)
(resultIsa DegreeKelvin ScalarInterval)
(argsIsa DegreeKelvin CycSystemRealNumber)
(comment DegreeKelvin "The unit of measure on the Kelvin or Absolute temperature scale; mainly used in science; note that the size of this unit is equal to the size of a DegreeCentrigrade.")

;;; Density
(isa Density DerivedNumericAttributeType)
(genls Density ScalarInterval)
(genls Density PhysicalAttribute)
(comment Density "A collection of physical attributes.  Each element of Density is a measurable physical property of a tangible object, namely, its mass per volume.  Densities may be represented relative to certain substances, e.g., SaltWaterDensity, FreshWaterDensity, DenseAsOil.  Densities of objects are reported using the predicate densityOfObject.")

;;; Dentist
(isa Dentist OccupationType)
(genls Dentist MedicalCareProfessional)
(comment Dentist "The collection of doctors that are trained with diagnosing and treating diseases of the gums and teeth.")

;;; DerivedNumericAttributeType
(isa DerivedNumericAttributeType Collection)
(genls DerivedNumericAttributeType MeasurableAttributeType)
(comment DerivedNumericAttributeType "A collection of collections.  Each element of DerivedNumericAttributeType is a collection of measurable attributes that are measured in complex units, including Volume, Area, Acceleration, etc.  The types of attributes in DerivedNumericAttributeType are `derived' from other, fundamental attributes (such as Distance and Mass) which are measured in simple units.  Cf. FundamentalNumericAttributeType.")

;;; DesertClimateCycle
(isa DesertClimateCycle ClimateCycleType)
(genls DesertClimateCycle AnnualClimateCycle)
(genls DesertClimateCycle TemperateClimateCycle)
(comment DesertClimateCycle "The attribute of having a desert climate.  Wide termperature extremes from very hot in day to cold at night.  Very little precipitation on a year-long basis, although there may be desert storms.")

;;; DeskWorker
(isa DeskWorker OccupationType)
(genls DeskWorker Professional)
(comment DeskWorker "A collection of persons; a subset of Professional.  This is a general category of workers that generally sit at desks, as opposed to those who do factory work or outside work, etc.  Subsets include Administrator, ComputerOperator, and Secretary.")

;;; DestructionEvent
(isa DestructionEvent TemporalObjectType)
(isa DestructionEvent ScriptType)
(genls DestructionEvent CreationOrDestructionEvent)
(comment DestructionEvent "A collection of events.  In each element of DestructionEvent, at least one instance of Entity (the inputsDestroyed) ceases to exist.")

;;; Device-SingleUser
(isa Device-SingleUser ExistingObjectType)
(genls Device-SingleUser PartiallyTangible)
(genls Device-SingleUser PhysicalDevice)
(comment Device-SingleUser "A collection of devices.  
One can classify devices according to how many simultaneous 
users they typically have.  An instance of Device-SingleUser
is any device that typically has/requires exactly one (i.e., 
one and only one) user.  A screwdriver (an instance of 
Screwdriver) is a Device-SingleUser, but a grand piano 
(an instance of GrandPiano) is not.  A borderline non-example 
is a car --- although only one person operates it, several can 
`use' it at once, i.e. derive the value of its primary function 
which is transportation.  So a car is not a Device-SingleUser.
A borderline example is a telephone -- although it requires 
two or more users (each on telephones) for meaningful use, 
each phone generally has just one user at a time.  
So a telephone is a Device-SingleUser but a telephone-circuit is not.")

;;; Device-UserPowered
(isa Device-UserPowered ExistingObjectType)
(genls Device-UserPowered SolidTangibleThing)
(genls Device-UserPowered MusclePoweredDevice)

;;; DeviceRunning
(isa DeviceRunning TemporalStuffType)
(isa DeviceRunning DefaultDisjointScriptType)
(genls DeviceRunning PhysicalEvent)
(comment DeviceRunning "A collection of events.  An instance of DeviceRunning is an event in which some device is running.  This collection includes events which are complete cycles of a device's normal function (see SingleCompleteRunOfADevice) as well as random time slices (timeSlices) of them running.  Examples include instances of the collections AirplaneTakeOff, SkateBoarding, RidingAMotorcycle, etc.  Some stranger examples --- which are not instances of SingleCompleteRunOfADevice --- include: all the the ignition phases of the firing of my Honda's engine during November of 1996; my TV when it was on and showing a commercial this year; my TV when it was on and I was watching it this week.")

;;; DeviceState
(isa DeviceState UnorderedAttributeType)
(genls DeviceState AttributeValue)
(comment DeviceState "A collection of states that devices can be in, including: DeviceOn, DeviceOff, RecordingStates, CockedState, Folded, OffHook, Unlocked, and many others.")

;;; Dexterity
(isa Dexterity ScriptPerformanceAttributeType)
(genls Dexterity ScriptPerformanceAttribute)
(comment Dexterity "Dexterity is the ScriptPerformanceAttributeType for describing actions in which the performer's hands move accurately, quickly, and with economy of motion.")

;;; DiagnosingAndRepairingSomething
(isa DiagnosingAndRepairingSomething DefaultDisjointScriptType)
(genls DiagnosingAndRepairingSomething IntrinsicStateChangeEvent)
(genls DiagnosingAndRepairingSomething ActionOnObject)
(genls DiagnosingAndRepairingSomething PurposefulAction)
(genls DiagnosingAndRepairingSomething HumanActivity)
(comment DiagnosingAndRepairingSomething "The collection of all actions of diagnosing and repairing something, in a very broad sense.  Such events can range from fixing a PhysicalDevice (e.g., the last time you took your car in to be fixed), to killing pests that infest a place.  All such actions involve an intrinsic change in the thing which undergoes repairs.  Notice that a diagnosis action alone, or a repair action alone, would not be elements of this collection; they could be subEvents of an element of this collection.")

;;; DietaryDeficiencyCondition
(isa DietaryDeficiencyCondition PhysiologicalConditionType)
(genls DietaryDeficiencyCondition Malnutrition)
(comment DietaryDeficiencyCondition "The collection of physiological conditions brought on by consuming less of a nutrient than the body requires.")

;;; DifferenceFn
(isa DifferenceFn FunctionFromQuantitiesToQuantities)
(isa DifferenceFn NonPredicateFunction)
(isa DifferenceFn EvaluatableFunction)
(resultIsa DifferenceFn ScalarInterval)
(arg1Isa DifferenceFn ScalarInterval)
(arg2Isa DifferenceFn ScalarInterval)
(comment DifferenceFn "DifferenceFn is Cyc's subtraction operator; it is a binary mathematical function.  (DifferenceFn MINUEND SUBTRAHEND) yields a new quantity that is the result of subtracting SUBTRAHEND from MINUEND.  Both arguments to DifferenceFn must be elements of ScalarInterval, as is its result.  Examples: (DifferenceFn 88 11) returns 77; (DifferenceFn (Kilogram 4.2) (Kilogram 3)) returns (Kilogram 1.2).")

;;; DigestionEvent
(isa DigestionEvent DefaultDisjointScriptType)
(genls DigestionEvent SingleDoerAction)
(genls DigestionEvent BiologicalDecompositionEvent)
(genls DigestionEvent BodyMovementEvent)
(comment DigestionEvent "A collection of events.  For most animals, a DigestionEvent starts at the mouth and, for most vertebrates, end at the anus.  This concept should not be confused with DigestingInStomach, whose instances occur only in an organism's Stomach.  A DigestionEvent spans the whole DigestiveSystem, from start to finish.")

;;; DigestiveSystem
(isa DigestiveSystem AnimalBodyPartType)
(genls DigestiveSystem BiologicalLivingObject)
(genls DigestiveSystem AnimalBodyPart)
(comment DigestiveSystem "The collection of all animals' digestive systems.  A DigestiveSystem is a system of organs and other body parts (typically of Vertebrates) which work together to accomplish the digestion function.")

;;; DimensionlessUnitOfMeasure
(isa DimensionlessUnitOfMeasure InterconvertibleUnitType)
(genls DimensionlessUnitOfMeasure UnitOfMeasure)
(comment DimensionlessUnitOfMeasure "A subset of UnitOfMeasure.  DimensionlessUnitOfMeasure is the collection of measurement functions whose results are elements of ScalarInterval which have no dimension; i.e., they are simply numbers, instances of IntervalOnNumberLine.  Examples include Percent, Unity, Thousandths.  (Percent 50) returns the point-interval, one-half (0.5).  (Unity 3 4) returns the interval that is the range of numbers between 3 and 4, inclusive.")

;;; DirectedTranslation
(isa DirectedTranslation ScriptType)
(isa DirectedTranslation TemporalStuffType)
(genls DirectedTranslation PurposefulAction)
(genls DirectedTranslation Movement-TranslationEvent)
(comment DirectedTranslation "A collection of events; a subset of Movement-TranslationEvent.  Each instance of DirectedTranslation is a movement event that is performedBy an Agent --- that agent intends for the objectMoving to reach a particular target.  Examples:  William Tell shooting the arrow off his son's head,  John Wilkes Booth shooting Abraham Lincoln, the last time you tossed a frisbee to someone, a pilot landing an airplane, and a skiier skiing one run of the downhill course.")

;;; DirectionExpression
(isa DirectionExpression Collection)
(genls DirectionExpression UnitVectorInterval)
(comment DirectionExpression "A collection of vectors; a subset of UnitVectorInterval.  Each element of DirectionExpression is a vector representing a direction.  Typically these expressions are used to indicate direction between two objects or locations.  An important subset of this collection is GeographicalDirection; e.g., South-Directly, NorthWest-Directly.")

;;; Dirtiness
(isa Dirtiness PrimitiveAttributeType)
(genls Dirtiness AttributeValue)
(genls Dirtiness ScalarInterval)
(comment Dirtiness "A collection of attributes.  Dirtiness is a measurable attribute that many tangible objects have.  Each element of the collection Dirtiness represents a specific level of dirtiness (or cleanliness!); e.g., Dirty, ReallyDirty, ALittleDirty, Clean, Sterile.  Indicate a particular object's Dirtiness with the predicate dirtinessOfObject.")

;;; Disappointment
(isa Disappointment FeelingAttributeType)
(genls Disappointment Dissatisfaction)
(genls Disappointment Surprise)
(genls Disappointment Sadness)
(comment Disappointment "The emotion or state of feeling defeated in expectation or hope.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; Disapproval
(isa Disapproval FeelingAttributeType)
(genls Disapproval FeelingAttribute)
(comment Disapproval "The emotion or state of disapproving of something; a negative attitude towards some situation, proposal, person, or thing, implying a judgment based on explicit or implicit standards (rational, moral, pragmatic, or etc.).  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  More specialized FeelingAttributeTypes than Disapproval are Contempt, Hate, Abhorrence, etc.  More subtly, it is often true that feelings of Jealousy or Envy manifest in superficial shows of Disapproval.  Disapproval is a Collection --- for an explanation of that, see Happiness.")

;;; DisasterEvent
(isa DisasterEvent TemporalObjectType)
(isa DisasterEvent ScriptType)
(genls DisasterEvent DestructionEvent)
(comment DisasterEvent "A collection of events.  In each DisasterEvent, a large group of people (or, in decreasing order of likelihood of usage of this concept, a large group of animals, plants, corporations, etc.) are at very high risk of injury or property damage, or in which a lot of injury and property damage occurs even though the risk was low.")

;;; Disgust
(isa Disgust FeelingAttributeType)
(genls Disgust Dislike)
(comment Disgust "A feeling of repulsion or aversion towards something considered distasteful or repugnant.  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Disgust include feelings of Abhorrence.")

;;; DisjointSetOrCollection
(isa DisjointSetOrCollection Collection)
(genls DisjointSetOrCollection SetOrCollection)
(comment DisjointSetOrCollection "A collection of mathematical sets and collections the members of which are themselves mathematical sets or collections.  A set or collection, SETORCOL, of sets or collections is an instance of DisjointSetOrCollection just in case the elements of SETORCOL are mutually disjoint -- that is, no two elements of SETORCOL have any elements in common.")
(synonymousExternalConcept DisjointSetOrCollection SENSUS-Information1997 "DISJUNCTIVE-SET")

;;; Dislike
(isa Dislike FeelingAttributeType)
(genls Dislike FeelingAttribute)
(comment Dislike "A feeling of disaffection or disaffinity for a person or thing.  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Dislike are Disgust, Contempt, Hate, Resentment, etc.")

;;; DisputeEvent
(isa DisputeEvent TemporalObjectType)
(isa DisputeEvent DefaultDisjointScriptType)
(genls DisputeEvent HostileSocialAction)
(comment DisputeEvent "A collection of events with multiple participants.  In each DisputeEvent,  some participants seek to achieve states of affairs that other participants seek to prevent.  Disputes may or may not get settled.  Settlement of a dispute may be by fighting, by competition, by using a mediator or court, by chance, by mutual reasoning, etc.")

;;; Dissatisfaction
(isa Dissatisfaction FeelingAttributeType)
(genls Dissatisfaction FeelingAttribute)
(comment Dissatisfaction "Feeling of discontent, due to a lack of fulfillment of an agent's desires, needs, or requirements.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.   Some more specialized FeelingAttributeTypes than Dissatisfaction are Disappointment, Frustration, Impatience, Anger, etc. ")

;;; Dissolving
(isa Dissolving TemporalStuffType)
(isa Dissolving DefaultDisjointScriptType)
(genls Dissolving DestructionEvent)
(comment Dissolving "A collection of events.  In each instance of this collection, a solvent and a solute mix to form a solution.")

;;; Distance
(isa Distance FundamentalNumericAttributeType)
(genls Distance ScalarInterval)
(genls Distance PhysicalAttribute)
(comment Distance "A collection of physical attributes.  Each element of Distance is the length of a path in space extending from one point to another.  Elements of Distance may be either a fixed interval, such as the height of the WashingtonMonumentInWashingtonDC, or a range, such as WithinAudibleDistance (see ScalarInterval for more explanation).  Also, see UnitOfDistance for the units used by Cyc to measure distances.")

;;; DistributingMetaKnowledgePredicate
(isa DistributingMetaKnowledgePredicate Collection)
(genls DistributingMetaKnowledgePredicate Predicate)
(comment DistributingMetaKnowledgePredicate "instances are predicates which are permitted to distribute over multiple assertions resulting from canonicalizing one (or more) of the formula args")

;;; DistributionEvent
(isa DistributionEvent TemporalObjectType)
(isa DistributionEvent DefaultDisjointScriptType)
(genls DistributionEvent TransferOut)
(comment DistributionEvent "A collection of events.  Each element of DistributionEvent is an event in which tangible or intangible objects are distributed from a source to various destinations via some distribution network.")

;;; Dock
(isa Dock ExistingObjectType)
(genls Dock OutdoorLocation)
(genls Dock FixedStructure)
(comment Dock "The collection of long flat walkways that jut out over water from  shorelines.  A Dock's main function is to provide a place to secure boats and to provide a place where passengers and cargo can be loaded and unloaded.")

;;; Doctor-Medical
(isa Doctor-Medical MedicalSpecialtyType)
(genls Doctor-Medical Prescriber)
(genls Doctor-Medical MedicalCareProfessional)
(genls Doctor-Medical Scientist)
(comment Doctor-Medical "The collection of all medical doctors - MDs and Osteopaths.")

;;; Dog
(isa Dog BiologicalSpecies)
(genls Dog Carnivore)
(genls Dog Mammal)
(genls Dog DomesticPet)
(comment Dog "The collection of all dogs of all breeds.  Elements of Dog may be members of DomesticPet or of WildAnimal; e.g., Dog includes the dingo dogs of Australia.  However, Dog excludes the members of Wolf, Fox, and the other non-dog subsets of CanineAnimal.  Dog is an instance of BiologicalSpecies, Canis familiaris.")

;;; Dollar-UnitedStates
(isa Dollar-UnitedStates UnitOfMoney)
(isa Dollar-UnitedStates UnitOfMeasureNoPrefix)
(isa Dollar-UnitedStates StandardUnitOfMeasure)
(resultIsa Dollar-UnitedStates Money)
(resultIsa Dollar-UnitedStates ScalarInterval)
(argsIsa Dollar-UnitedStates CycSystemRealNumber)
(comment Dollar-UnitedStates "An element of UnitOfMoney.  Dollar-UnitedStates represents the main standard monetary unit of the United States of America.  One Dollar-UnitedStates is equivalent to 100 Cent-UnitedStates.  See UnitOfMeasure for further explanation.")

;;; DollarsPerHour
(isa DollarsPerHour UnitOfMonetaryFlowRate)
(isa DollarsPerHour UnitOfMeasureNoPrefix)
(resultIsa DollarsPerHour MonetaryFlowRate)
(resultIsa DollarsPerHour ScalarInterval)
(resultIsa DollarsPerHour Rate)
(argsIsa DollarsPerHour CycSystemRealNumber)
(comment DollarsPerHour "An element of UnitOfMonetaryFlowRate; the amount of Money in dollars earned, spent, or transferred in an hour.")

;;; DollarsPerYear
(isa DollarsPerYear UnitOfMonetaryFlowRate)
(isa DollarsPerYear UnitOfMeasureNoPrefix)
(resultIsa DollarsPerYear MonetaryFlowRate)
(resultIsa DollarsPerYear ScalarInterval)
(resultIsa DollarsPerYear Rate)
(argsIsa DollarsPerYear CycSystemRealNumber)
(comment DollarsPerYear "An element of UnitOfMonetaryFlowRate; the amount of Money in dollars earned, spent, or transferred in a year.")

;;; DomesticPet
(isa DomesticPet ExistingObjectType)
(genls DomesticPet PortableObject)
(genls DomesticPet DomesticatedAnimal)
(genls DomesticPet HumanOccupationConstructResident)
(comment DomesticPet "The subset of DomesticatedAnimal whose elements are animals kept by humans primarily for their companionship.  (They may, however, do some chores such as catching mice.)  Many members of DomesticPet live in the homes of their owners.")

;;; DomesticatedAnimal
(isa DomesticatedAnimal ExistingObjectType)
(genls DomesticatedAnimal NonPersonAnimal)
(comment DomesticatedAnimal "A subset of Animal; the collection of all animals which are kept by humans for labor, transportation, food, or as pets, and whose relations with humans are more or less cooperative.  DomesticatedAnimal does NOT include instances of Tiger being kept in zoos, though it arguably includes Shamu or Flipper.  Cf. WildAnimal, CaptiveAnimal.")

;;; DomesticatedAnimalFood
(isa DomesticatedAnimalFood ProductType)
(isa DomesticatedAnimalFood ExistingStuffType)
(genls DomesticatedAnimalFood TangibleProduct)
(comment DomesticatedAnimalFood "A collection of tangible stuff; a subset of TangibleProduct.  Each element of DomesticatedAnimalFood is a foodstuff produced by human beings and intended for consumption by domesticated animals.  This collection includes feed manufactured for horses, cattle, chickens, and other farm animals, as well as `pet foods'.")

;;; Doorway
(isa Doorway ExistingObjectType)
(genls Doorway InanimateThing)
(genls Doorway Portal)
(comment Doorway "A collection of portals.  Each element of Doorway is a portal in some instance of ShelterConstruction, suitable for people (and perhaps vehicles) to enter and exit.  For example, doorways to houses, office buildings, elevators, automobiles, airplanes, garages, etc.")

;;; DoorwayCovering
(isa DoorwayCovering ExistingObjectType)
(isa DoorwayCovering ProductType)
(genls DoorwayCovering PortalCovering)
(comment DoorwayCovering "A collection of tangible objects.  Each element of DoorwayCovering is a physical object used to cover some kind of portal, including but not limited to doorways in buildings.  This collection also includes doors of cars, buses, subways, elevators, garages, airplane hangars--coverings over any doors that people (and perhaps vehicles) pass through.")

;;; Down-Directly
(isa Down-Directly TerrestrialDirection)
(isa Down-Directly UnitVector-Precise)
(genlAttributes Down-Directly Down-Generally)
(comment Down-Directly "The direction straight down.  In the terrestrial context, Down-Directly points in the same direction as Earth's gravitational force vector.")

;;; Down-Generally
(isa Down-Generally TerrestrialDirection)
(comment Down-Generally "The element of VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of Down-Directly.")

;;; Dress
(isa Dress ProductType)
(isa Dress ExistingObjectType)
(genls Dress ClothingItem)
(genls Dress WomensClothing)
(comment Dress "The collection of all dresses, a kind of women's clothing")

;;; Drink
(isa Drink ProductType)
(isa Drink ExistingStuffType)
(genls Drink FoodAndDrink)
(comment Drink "The collection of drinkable substances; a collection of edible stuff and a subset of FoodAndDrink.  Each element of the collection Drink is a liquid of a type that is ingestible and commonly consumed by humans or animals.  Drinks are ingested without chewing.  Examples of Drink include all elements of the collections Water-Ingestible, Tea-Hot, HotChocolate, Lemonade, Beer. .  By default they are liquids.  Borderline examples include a thick milkshake or soup, even if there are solid objects suspended in it.  Thus LiquidTangibleThing is not necessarily (monotonically) a genls of Drink, though it is true by default that a Drink be an instance of LiquidTangibleThing.  I.e., by default, elements of Drink are in a LiquidStateOfMatter.  Another borderline example of a Drink is a glassful of poison or urine; it may be unpalatable or unsafe to drink a Drink.  Note that the Drink includes the portion of liquid, but not the container such as the glass or coffee cup or bowl.   So one borderline non-example is a glass of water -- as opposed to a glassful of water; the former includes the glass, the latter doesn't.   Other borderline non-examples include: an ice cube, a grape sno-cone, a scoop of ice cream with hot fudge sauce on it, and a tiny bit of liquid such as a single raindrop even if it enters one's mouth.")

;;; DrinkingEvent
(isa DrinkingEvent TemporalStuffType)
(isa DrinkingEvent ScriptType)
(genls DrinkingEvent Translation-Complete)
(genls DrinkingEvent ConsumingFoodOrDrink)
(comment DrinkingEvent "A collection of events.  In each instance of this collection, a single individual consumes a portion of some drink.  A DrinkingEvent typically consists of several instances of DrinkingASip.  See EatingEvent.")

;;; DrugPrescription
(isa DrugPrescription ExistingObjectType)
(genls DrugPrescription TextualMaterial)
(comment DrugPrescription "The legal document in which a doctor authorizes a patient to purchase a certain amount of a drug and take it according to some specified schedule.")

;;; DrugProduct
(isa DrugProduct ExistingStuffType)
(isa DrugProduct PharmacyProductType)
(genls DrugProduct Artifact)
(genls DrugProduct DrugSubstance)
(genls DrugProduct ConsumableProduct)
(comment DrugProduct "Any kind of drug, including the stuff you take when you are sick.  Note, however, that this is a product (intentionally created or used) not merely the chemical description.  This means that salt-water would not be an element of DrugProduct, even though saline solution would be.")

;;; DrugSubstance
(isa DrugSubstance ExistingStuffType)
(genls DrugSubstance TangibleThing)
(comment DrugSubstance "The class of substances that can be introduced into organism's bodies to produce certain physiological effects.  Includes both stuffs and objects made and/or marketed as DrugProducts, as well as naturally-occurring stuffs and objects that have physiological effects.")

;;; DrugTherapy
(isa DrugTherapy ScriptType)
(genls DrugTherapy MedicalTreatmentEvent)
(comment DrugTherapy "A collection of medical care events in which drugs accomplish a medical purpose.  An instance of DrugTherapy is the result of an instance of AdministeringADrug (q.v.).  An instance of DrugTherapy is the event of the patient's body undergoing the physiological effects of the drug it was given.  
Note: DrugTherapy events do not include the administration of the drug; rather, they are the results of such administrations.  Cf. AdministeringADrug.")

;;; DrugTherapyUseFn
(isa DrugTherapyUseFn CollectionDenotingFunction)
(resultIsa DrugTherapyUseFn TemporalStuffType)
(resultIsa DrugTherapyUseFn ScriptType)
(resultGenl DrugTherapyUseFn DrugTherapy)
(arg1Isa DrugTherapyUseFn ExistingStuffType)
(arg1Genl DrugTherapyUseFn PartiallyTangible)
(comment DrugTherapyUseFn "The collection of events in which instances of ARG1 are used to achieve a medical purpose.  These events do not include the administration of the drug - they are the scripts which result from that administration.")

;;; DryingSomething
(isa DryingSomething TemporalStuffType)
(isa DryingSomething DefaultDisjointScriptType)
(genls DryingSomething IntrinsicStateChangeEvent)
(genls DryingSomething PhysicalEvent)
(comment DryingSomething "A collection of events.  Each DryingSomething event involves reducing the moistness of something -- either its water content or its surface wetness -- by evaporation or by absorbing the moisture (e.g., with towels) or by some other process.  Typical objects of a DryingSomething event include instances of: paint, food, dishes, clothes, humans.  When you run your clothes dryer at home, that event is an element of this collection.")

;;; Ductility
(isa Ductility MaterialStrengthType)
(genls Ductility PhysicalAttribute)
(genls Ductility ScalarInterval)
(comment Ductility "A collection of attributes; a subset of PhysicalAttribute.  Each element of Ductility describes a specific capacity of a physical material to be stretched, drawn, or hammered thin without breaking.  Different degrees of ductility may be represented using a GenericValueFunction.  Ductilities of objects are indicated with the predicate ductilityOfObject.")

;;; Dusk
(isa Dusk TemporalObjectType)
(isa Dusk ScriptType)
(genls Dusk QualitativeTimeOfDay)
(genls Dusk Twilight)
(comment Dusk "Each Dusk is a dimly-lit period of time which is contiguousAfter a Sunset, and is the Event which starts a Night.")

;;; Dying
(isa Dying TemporalObjectType)
(isa Dying DefaultDisjointScriptType)
(genls Dying DestructionEvent)
(genls Dying BiologicalEvent)
(genls Dying SingleDoerAction)
(comment Dying "A collection of events.  Each element of Dying is an event in which a living organism (i.e., an instance of Organism-Whole) ceases to live and thus ceases to exist.  The physical portion of the organism may remain, but that is not considered an instance of Organism-Whole (cf. DeadAnimal).  Note that the expiring animal is related to its dying event by bodilyDoer (q.v.)--in contrast to the role an organism plays when it is the objectActedOn in a Killing-Biological event (which will have some Dying event among its subEvents), and cf. bodilyActedOn.")

;;; ELRelation
(isa ELRelation Collection)
(comment ELRelation "A subset of Relationship such that instances are only permitted at
the EL; that is, the canonicalizer will transform expressions that
reference instances of ELRelation into equivalent expressions that do not
reference instances of ELRelation; this transformation is guided by the
value (arg2) of expansion for each ELRelation")

;;; Ear
(isa Ear SymmetricAnatomicalPartType)
(genls Ear AnimalBodyPart)
(genls Ear VibrationThroughAMediumSensor)
(comment Ear "The organ of hearing, which occur in pairs on most animals")

;;; EarthStuff
(isa EarthStuff TangibleStuffCompositionType)
(genls EarthStuff NaturalTangibleStuff)
(comment EarthStuff "A collection of tangible things.  Each element in EarthStuff is a portion of the stuff that the ground of Earth (at or near its land surface) is made of, including rocks, boulders, sand grains, soil, mud, etc., and mixtures of those things (such as islands or whole continents).  Examples: Australia, CapeCod, ZionHill, GreatSmokyMountains.")

;;; East-Directly
(isa East-Directly UnitVector-Precise)
(isa East-Directly GeographicalDirection)
(genlAttributes East-Directly East-Generally)
(comment East-Directly "Due East, an element of TerrestrialDirection.")

;;; East-Generally
(isa East-Generally GeographicalDirection)
(comment East-Generally "The general direction of East.  The element of VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of East-Directly.")

;;; EatingEvent
(isa EatingEvent TemporalStuffType)
(isa EatingEvent DefaultDisjointScriptType)
(genls EatingEvent DestructionEvent)
(genls EatingEvent SingleDoerAction)
(genls EatingEvent ConsumingFoodOrDrink)
(comment EatingEvent "A collection of events.  Each element of EatingEvent is an event which involves the consumption of a substantial portion of food by a single individual (human or other animal).   An instance of EatingEvent is a meal or snack taken in its entirety; it is a series of individual EatingAMorsel events.
Note:  If a group of people gets together and eats lunch, that activity is represented by an instance of HavingAMeal; during that `super-event' each participant engages in his/her own instance of EatingEvent, and all of those are subEvents of the HavingAMeal event.")

;;; EcholocationPerception
(isa EcholocationPerception TemporalStuffType)
(genls EcholocationPerception Perceiving)
(comment EcholocationPerception "EcholocationPerception is the collection of spatial Perceivings in which a PerceptualAgent (such as a bat or a submarine) generates sounds (potentially ultra- or sub- sonic in frequency), hears the sounds reflected from surfaces, and thereby acquires information about the position of other objects in its environment.")

;;; EcologicalRegion
(isa EcologicalRegion ExistingObjectType)
(genls EcologicalRegion GeographicalRegion)
(comment EcologicalRegion "A collection of geographical regions.  Each element of EcologicalRegion is a region having one or more characteristic ecosystems.  From knowledge of those ecosystems, we can posit whether certain organisms can forage, reproduce, and live successfully there.  Information about ecological regions typically also includes what kinds of organisms are in fact found there.  In theory, any arbitrary continuous region could be analyzed as an ecological region, but most regions identified in practice have some kind of sameness or systematic interconnection in their topology, climate, and biology.  Examples: the WesternDesertOfEgypt, the GreatBarrierReef, the Amazon-Region.")

;;; EdgeOnObject
(isa EdgeOnObject RegionType)
(genls EdgeOnObject Path-Simple)
(genls EdgeOnObject PartiallyTangible)
(comment EdgeOnObject "The collection of all edges on objects.  For a two-dimensional object, its boundaries other than corners are it edges.  For a three dimensional object the edges are the outer portions of those extremities, excluding any corners (Corner-2or3d), that are much more acute in cross section in one direction than in most other directions at the same point.  Some objects, like spheres, hairs, poles and typical burrs, have no edges.  A discus has one, round, edge; a typical sheet has four edges.  A mountain ridge might have only a single edge.  A solid polyhedron has six or more edges.")

;;; EdiblePartFn
(isa EdiblePartFn CollectionDenotingFunction)
(resultIsa EdiblePartFn ExistingObjectType)
(resultGenl EdiblePartFn EdibleStuff)
(arg1Isa EdiblePartFn ExistingObjectType)
(arg1Genl EdiblePartFn PartiallyTangible)
(comment EdiblePartFn "The Cyc function EdiblePartFn is a CollectionDenotingFunction.  When applied to a set of tangible objects OBJ-TYPE, (EdiblePartFn OBJ-TYPE) represents the collection of all the edible parts of objects of OBJ-TYPE.  This collection includes any EdibleStuff (i.e., edible by humans or koalas or whatever the current microtheory is talking about) that is part of instances of OBJ-TYPE.  To represent only parts that humans eat, we may restrict the resultGenl to a specialized subset of FoodAndDrink defined in HumanActivitiesMt or other appropriate microtheory.  Examples: the collection (EdiblePartFn Apple-TheFruit) includes the skin and flesh of all apples, but not --- in the HumanActivitiesMt --- the instances of Stem or Seed found in them; the collection (EdiblePartFn Egg-Chickens) includes the yolks and whites of chicken eggs, but does not  --- in the HumanActivitiesMt ---  include any instances of Eggshell.  Because of cultural or philosophical preferences and prohibitions about food, exactly what parts are edible may differ in different human cultural microtheories; e.g., in a FundamentalistJewish or FundamentalistIslamic cultural Microtheory, the function call (EdiblePartFn Pig) would return NIL; in a vegan Microtheory, even (EdiblePartFn Animal) would return NIL.")

;;; EdibleStuff
(isa EdibleStuff ExistingStuffType)
(genls EdibleStuff TangibleThing)
(genls EdibleStuff ConsumableProduct)
(comment EdibleStuff "A collection of tangible stuff.  Each instance of EdibleStuff is, by default, an item that is ingestible and palatable by most macroscopic animals.  EdibleStuff includes food and drink, but also other things, such as nutrients, drugs, etc.  EdibleStuff presupposes digestion processes resembling those of most terrestrial macroscopic animals.  For inferencing about the diets of people (or koalas or oil-eating microbes), the collection EdibleStuff may have additions and deletions.  See also EdiblePartFn, FoodAndDrink.")

;;; EdiblesRichInFn
(isa EdiblesRichInFn CollectionDenotingFunction)
(resultIsa EdiblesRichInFn ExistingStuffType)
(resultGenl EdiblesRichInFn EdibleStuff)
(arg1Isa EdiblesRichInFn ExistingStuffType)
(arg1Genl EdiblesRichInFn Nutrient)
(comment EdiblesRichInFn "The Cyc function EdiblesRichInFn is a CollectionDenotingFunction.  It is used to represent foodstuffs which have a high concentration of a certain nutrient.  (EdiblesRichInFn NUTRIENT) denotes the collection of edible things that are rich in the type of Nutrient NUTRIENT.  For example, (EdiblesRichInFn EdibleCalcium) denotes the collection of all EdibleStuff rich in calcium; that collection will have the collection DairyProduct as a subset.")

;;; EducationLevelAttribute
(isa EducationLevelAttribute SocialAttributeType)
(genls EducationLevelAttribute ScalarInterval)
(genls EducationLevelAttribute SocialStatusAttribute)
(comment EducationLevelAttribute "A collection of attributes.  Each EducationLevelAttribute, when applied to a person, indicates their level of education or current involvement in a course of study; if applied to a course of study, it indicates the level of it.  The very same attributes apply in both cases, though; some sample elements of this collection are:  PhDLevel, TwelfthGradeLevel, BachelorOfArtsLevel, MedicalDegreeLevel, etc.")

;;; EducationalDegree
(isa EducationalDegree ObjectType)
(genls EducationalDegree Credential)
(comment EducationalDegree "A collection of abstract (intangible) objects which consist of information about an agent.  Each element of EducationalDegree is a credential conferred, by some instance of EducationalOrganization, on a student who has successfully completed a prescribed course of study there.  EducationalDegree includes high school, associate, baccalaureate, licensate, magisterial, professional, and doctoral degrees, etc.")

;;; EducationalOrganization
(isa EducationalOrganization ExistingObjectType)
(genls EducationalOrganization Organization)
(comment EducationalOrganization "A collection of educational organizations.  An element of EducationalOrganization may be a school, system of schools, college, seminary, etc., -- a place where teaching and/or training are programmed and provided as a service for students.  An educational organization may be public or private.  This collection includes AustinISD (i.e., the CityOfAustinTX Independent School District), StanfordUniversity, BrynMawrCollege, UniversityOfPennsylvaniaSchoolOfMedicine, and many other institutions.")

;;; Elasticity
(isa Elasticity MaterialStrengthType)
(genls Elasticity PhysicalAttribute)
(genls Elasticity ScalarInterval)
(comment Elasticity "A collection of attributes; a subset of PhysicalAttribute.  Each element of Elasticity represents a specific ability of a physical material to quickly and completely return to its original shape after deformation that does not induce breakage, without permanent change to its original dimensions.  For example, billiard balls have a high degree of elasticity in this sense.  Elasticities of objects are indicated with the predicate elasticityOfObject.")

;;; ElectricalCharge
(isa ElectricalCharge PolarAttributeType)
(isa ElectricalCharge FundamentalNumericAttributeType)
(genls ElectricalCharge PhysicalAttribute)
(genls ElectricalCharge ScalarInterval)
(comment ElectricalCharge "A collection of physical attributes.  Each element of ElectricalCharge is an amount of net electrical charge (positive or negative) possessed by a particular instance of PartiallyTangible.  Elements of ElectricalCharge may be either a fixed interval, such as the charge on one electron, or a range, such as a usable charge on a flashlight battery; see ScalarInterval.  Also see UnitOfCharge for the units used by Cyc to measure electrical charges.")

;;; ElectricalComponent
(isa ElectricalComponent ProductType)
(isa ElectricalComponent ExistingObjectType)
(genls ElectricalComponent ElectricalDevice)
(comment ElectricalComponent "A collection of electrical devices.  An instance of ElectricalDevice is an electrical device which is normally considered to be a part of some larger, more clearly distinguished device (e.g., clearly distinguished in the sense that it is sold, moved, etc. as a unit).  The ElectricalComponent must be connected with other parts in order to perform its primaryFunction.")

;;; ElectricalConductor
(isa ElectricalConductor ExistingObjectType)
(genls ElectricalConductor PhysicalConductingMedia)
(comment ElectricalConductor "A collection of tangible things; a subset of PhysicalConductingMedia.  Each element of ElectricalConductor is a physical thing that can conduct electricity; e.g., a power cord, an electrical plug, a piece of metal.")

;;; ElectricalDevice
(isa ElectricalDevice ExistingObjectType)
(genls ElectricalDevice SolidTangibleThing)
(genls ElectricalDevice PartiallyTangibleProduct)
(genls ElectricalDevice PoweredDevice)
(genls ElectricalDevice PhysicalDevice)
(comment ElectricalDevice "A collection of physical devices; the most general collection of electrical devices.  Such devices require an input of electrical current (as energySource) in order to perform their intended functions.  Instances of ElectricalDevice include both complex devices (e.g., elements of the collections StereoSystem or Computer) and simpler ones (e.g., elements of ElectricalComponents and ElectronicComponents).
Note:  in some contexts, crystal radios might be classified as inert (unpowered) electrical devices; the same for some sorts of passive radar detectors.  These are exceptional cases, but still elements of this collection.  In other contexts, the power for these devices can be viewed as being supplied from the outside, hence they are clearly `powered' in such contexts.")

;;; ElectricalResistance
(isa ElectricalResistance DerivedNumericAttributeType)
(genls ElectricalResistance ScalarInterval)
(genls ElectricalResistance PhysicalAttribute)
(comment ElectricalResistance "A collection of attributes; a subset of PhysicalAttribute.  Each element of ElectricalResistance is an attribute which measures the resistance to electrical flow through an object.  Examples: InsulatorResistance, ConductorResistance, SemiconductorResistance, SuperconductorResistance.")

;;; ElectroMagneticRadiationSensor
(isa ElectroMagneticRadiationSensor ExistingObjectType)
(genls ElectroMagneticRadiationSensor Sensor)
(comment ElectroMagneticRadiationSensor "A subset of Sensor, namely those sensors that detect ElectromagneticRadiation.")

;;; ElectromagneticRadiation
(isa ElectromagneticRadiation WavePropagationType)
(isa ElectromagneticRadiation DefaultDisjointScriptType)
(genls ElectromagneticRadiation WavePropagation)
(comment ElectromagneticRadiation "A collection of events; a subset of WavePropagation.  Each element of ElectromagneticRadiation is an event that arises from the interaction of an electrical field and a magnetic field.  Examples include the elements of the collections VisibleLight, RadioWaves, and XRays.")

;;; Electron
(isa Electron ExistingObjectType)
(genls Electron SubAtomicParticle)
(comment Electron "A collection of objects; a subset of SubAtomicParticle.  Every instance of Electron is a subatomic particle with an ElectricalCharge of -1.")

;;; ElectronicDevice
(isa ElectronicDevice ProductType)
(isa ElectronicDevice ExistingObjectType)
(genls ElectronicDevice TangibleProduct)
(genls ElectronicDevice ElectricalDevice)
(comment ElectronicDevice "A collection of devices which use electronic circuitry.  More specifically, any instance of ElectronicDevice uses electricity to convey information and not just for power.  Usually transistors, diodes, or other semiconductor circuitry are involved.")

;;; ElementStuff
(isa ElementStuff TangibleStuffCompositionType)
(genls ElementStuff InanimateThing)
(genls ElementStuff TangibleThing)
(comment ElementStuff "A collection of tangible substances; a subset of TangibleThing.  Every instance of ElementStuff is a piece of tangible stuff, composed of a quantity of atoms, all of which are of the same chemical element.  That is, every atom in an individual piece of ElementStuff has the same number of protons in its atomic nucleus as does every other atom in that piece.  For example, all pieces of carbon are instances of ElementStuff.   All pieces of two of Carbon's subsets, Diamond and Graphite, also are instances of ElementStuff.  On the other hand, instances of Water, because they are constituted of both (some) Hydrogen and (some) Oxygen atoms, do not belong to the collection ElementStuff.")

;;; ElementStuffTypeByNumberOfProtons
(isa ElementStuffTypeByNumberOfProtons Collection)
(isa ElementStuffTypeByNumberOfProtons DisjointSetOrCollection)
(genls ElementStuffTypeByNumberOfProtons ChemicalCompoundType)
(comment ElementStuffTypeByNumberOfProtons "A collection of collections.  ElementStuffTypeByNumberOfProtons partitions the collection ElementStuff.  Each instance of ElementStuffTypeByNumberOfProtons is a subset of ElementStuff which is defined ONLY by the atomic composition of its instances -- neither the isotopic composition or physical state of the substances, nor any other additional feature, determines membership in a collection which isa ElementStuffTypeByNumberOfProtons.  All that matters is that the instances of that type (i.e., collection) of stuff are entirely composed of atoms having a particular number of protons in each atomic nucleus.  Thus, the collection Carbon is an instance of ElementStuffTypeByNumberOfProtons, but neither the collection Diamond nor the collection Graphite is (even though they are subsets of Carbon), because their members have additional qualifications.")

;;; Embarrassment
(isa Embarrassment FeelingAttributeType)
(genls Embarrassment FeelingAttribute)
(comment Embarrassment "Mental disturbance and confusion at self-exposure.  Embarrassment is often an impediment to freedom of thought, speech, or action.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  A more specialized FeelingAttributeType than Embarrassment is Shame.")

;;; Embryo
(isa Embryo ExistingObjectType)
(genls Embryo BiologicalLivingObject)
(genls Embryo BiologicalStageOfDevelopment)
(comment Embryo "The collection of not yet fully-formed organisms, including mammals before birth, birds before hatching, and plants before sprouting from their seeds.  Note that the criteria of the collection Embryo do not correspond exactly with the meaning of the English word 'embryo', since Embryo includes zygotes, the set of cells derived from the embryo after the fetus is formed (AmnioticSac + Fetus + Placenta-FetalPortion), etc.")

;;; EmbryoFn
(isa EmbryoFn CollectionDenotingFunction)
(resultIsa EmbryoFn ExistingObjectType)
(resultGenl EmbryoFn Embryo)
(arg1Isa EmbryoFn OrganismClassificationType)
(arg1Genl EmbryoFn Animal)
(comment EmbryoFn "EmbryoFn is an element of CollectionDenotingFunction.  (EmbryoFn LIFETYPE) returns the collection of organisms which are embryonic instances of LIFETYPE.  Note that this use of the word `embryo' does not correspond exactly with the English word, because the collection returned by EmbryoFn includes zygotes, fetuses, etc.")

;;; Emirate-Geopolitical
(isa Emirate-Geopolitical SpatiallyDisjointRegionType)
(genls Emirate-Geopolitical GeopoliticalEntity)
(comment Emirate-Geopolitical "The collection of all Emirates, that is, those geopolitical entities, or territories, each of which is ordinarily ruled by an Amir-HeadOfState or an Emir (Amir) who is not necessariy a HeadOfState of an IndependentCountry, but rules a subsidiary region.  See especially the UnitedArabEmirates.")

;;; Emission
(isa Emission TemporalObjectType)
(genls Emission TransferOut)
(comment Emission "A collection of processes; a subset of GeneralizedTransfer.  Each element of Emission is an event in which something `comes out' of an object that actively contributes to that thing's emission (e.g., it is a providerOfMotiveForce).  The source is indicated with the predicate emitter. An entire Translocation is associated with an emission, and these are related through the predicate transferOutSubEvent.  If the thing which `comes out' is an instance of PartiallyTangible, then the event belongs to a more specific collection, EmittingAnObject (q.v.). If the associated element of Translocation is an instance of WavePropagation, then the emission belongs to the more specialized collection, EmittingAWave (q.v.).")

;;; EmittingAWave
(isa EmittingAWave TemporalStuffType)
(genls EmittingAWave Emission)
(comment EmittingAWave "A collection of events; a subset of Emission.  Each element is an event in which a wave is emitted at a fromLocation.  For example, Themistocles ordering his fleet to withdraw; Miles Davis playing the trumpet; an emergency flare burning by the side of the road.  See also WavePropagation.")

;;; EmittingAnObject
(isa EmittingAnObject TemporalObjectType)
(isa EmittingAnObject DefaultDisjointScriptType)
(genls EmittingAnObject Emission)
(genls EmittingAnObject Translation-LocationChange)
(comment EmittingAnObject "A collection of events; and a subset of Emission.  An instance of EmittingAnObject is an emission event in which there is some PartiallyTangible which is the objectEmitted, i.e., the thing which `comes out' of the emitter of the event.  The objectEmitted goes from (fromLocation) a place inside of the emitter to (toLocation) some place that is not within the emitter.  The emitter plays an active role (doneBy and providerOfMotiveForce) in the emission.  Examples: the birth of a baby, a bullet shot from a gun, a venonous snake depositing poison.  Negative examples:  a person leaving a building (the building is not active), throwing a ball (the ball was not inside the person before the throwing).")

;;; EmittingSound
(isa EmittingSound TemporalStuffType)
(isa EmittingSound DefaultDisjointScriptType)
(genls EmittingSound PhysicalEvent)
(genls EmittingSound EmittingAWave)
(comment EmittingSound "A collection of events; a subset of EmittingAWave.  Each element of EmittingSound is an event in which an instance of Sound is emitted from some waveSource.  Examples: an explosion generating a sound wave; a plucked violin string resonating; a baby crying; a person saying `Hello'.")

;;; Employee
(isa Employee OccupationType)
(genls Employee Professional)
(comment Employee "A collection of persons; a subset of Professional.  Each element of Employee works directly for some business.  Disjoint with SelfEmployedWorker.")

;;; EmployeeHiring
(isa EmployeeHiring TemporalObjectType)
(isa EmployeeHiring DefaultDisjointScriptType)
(genls EmployeeHiring OrganizationalTransferIn)
(genls EmployeeHiring MakingAnAgreement)
(comment EmployeeHiring "A collection of events; a subset of MakingAnAgreement.  Each element of EmployeeHiring is an event in which some agent--either an organization or individual--hires a person to work as its employee. See also employees, WorkAgreement.")

;;; EmploymentTermination
(isa EmploymentTermination TemporalObjectType)
(isa EmploymentTermination DefaultDisjointScriptType)
(genls EmploymentTermination OrganizationalTransferOut)
(genls EmploymentTermination EndingAnAgreement)
(comment EmploymentTermination "A collection of events; a subset of EndingAnAgreement.  Each element of EmploymentTermination is an event in which some employee ceases to work for his or her employer.  The termination may be initiated by either party, or it may have been specified in the original WorkAgreement (q.v.).  Different kinds of EmploymentTermination are specified by the subsets Resigning, EmployeeLayoff, RetirementEvent, etc.")

;;; Encrypting
(isa Encrypting TemporalObjectType)
(genls Encrypting IBTRecoding)
(comment Encrypting "The collection of actions in which some transformation is applied to an IBT (InformationBearingThing) which renders it unaccessible to all but the intended audience, since the method required to decrypt the IBT is secret.")

;;; EndFn
(isa EndFn ReifiableFunction)
(isa EndFn IndividualDenotingFunction)
(resultIsa EndFn TimePoint)
(arg1Isa EndFn TemporalThing)
(comment EndFn "EndFn is a function that takes a TemporalThing and returns the TimePoint it ends.  Thus: (endingPoint ?X (EndFn ?X))")

;;; EndingAnAgreement
(isa EndingAnAgreement TemporalObjectType)
(isa EndingAnAgreement DefaultDisjointScriptType)
(genls EndingAnAgreement PurposefulAction)
(genls EndingAnAgreement HumanActivity)
(genls EndingAnAgreement SocialOccurrence)
(comment EndingAnAgreement "A collection of events.  Each element of the collection EndingAnAgreement is an event in which some instance of Agreement comes to an end.  For example, instances of EmploymentTermination and EndingMembership.")

;;; EnergyConversionProcess
(isa EnergyConversionProcess TemporalStuffType)
(isa EnergyConversionProcess DefaultDisjointScriptType)
(genls EnergyConversionProcess PhysicalEvent)
(genls EnergyConversionProcess TransformationEvent)
(comment EnergyConversionProcess "A collection of events.  In each instance of EnergyConversionProcess, energy is converted from one form to another.")

;;; Engine
(isa Engine ExistingObjectType)
(genls Engine PoweredDevice)
(genls Engine MechanicalDevice)
(comment Engine "A collection of PoweredDevices.  An instance of Engine is a device that changes some form of energy into motion (usually rotation).  An engine may operate by burning some type of fuel (as do jet engines and internal combustion engines), or it may be powered by electricity, fluid flow, etc.")

;;; Engineer
(isa Engineer OccupationType)
(genls Engineer Professional)
(comment Engineer "A collection of persons; a subset of Professional.  Each element of Engineer is a professional who works in some branch of engineering.  Elements of Engineer include the members of the subsets ElectricalEngineer, ChemicalEngineer, CivilEngineer, MechanicalEngineer, etc.")

;;; EnglishWord
(isa EnglishWord LinguisticObjectType)
(genls EnglishWord LexicalWord)
(comment EnglishWord "The collection of all lexical words in English; a subset of LexicalWord.  Different inflectional forms of a word do not count as different words; for example, Eat-TheWord encompasses the strings 'eat', 'eating', 'ate', etc.")

;;; Enjoyment
(isa Enjoyment FeelingAttributeType)
(genls Enjoyment FeelingAttribute)
(comment Enjoyment "The agreeable emotion of taking pleasure or satisfaction in an experience.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  Some more specialized FeelingAttributeTypes are Delight, Celebratory-Emotion, etc.")

;;; EnlistedPerson
(isa EnlistedPerson OccupationType)
(genls EnlistedPerson MilitaryPerson)
(comment EnlistedPerson "A collection of people, a subset 
of MilitaryPerson. Each element of this collection is
somebody who is an enlisted person in some 
MilitaryOrganization, such as a private.")

;;; EntertainmentEvent
(isa EntertainmentEvent TemporalObjectType)
(isa EntertainmentEvent ScriptType)
(genls EntertainmentEvent ServiceEvent)
(genls EntertainmentEvent HumanActivity)
(comment EntertainmentEvent "The collection of activites performed primarily to amuse or entertain Persons.
Note: This is more general than EntertainmentPerformance because it may not entail a performance per se.  E.g., one of its subsets is SightSeeing, but most sightseeing events are not EntertainmentPerformances.
Note:  This is different from the collection RecreationalActivity in the following way: entertainment events are necessarily done for the enjoyment or recreation of someone else; in other words, there is an audience.  Also, the performers of a RecreationalActivity are generally doing it `for fun', and (expect to) enjoy it, whereas some or all of the performers of an EntertainmentEvent may be doing it as a WorkingEvent --- i.e, `for a living' and may (expect to) not enjoy it. ")

;;; EntertainmentOrArtsProfessional
(isa EntertainmentOrArtsProfessional OccupationType)
(genls EntertainmentOrArtsProfessional Professional)
(comment EntertainmentOrArtsProfessional "A collection of persons; a subset of Professional.  Each element of EntertainmentOrArtsProfessional is a person who uses some sort of creative or artistic abilities in the main function of his or her job.  EntertainmentOrArtsProfessional includes both performing artists and producers of tangible artworks, either creative or commercial.  This collection does NOT include people working on the business side of those professions, such as producers or art dealers, whose jobAttributes are more similar to those of other business professionals (e.g., managers, marketers, sales representatives) than to the artists'; cf. EntertainmentOrArtsAdministrator.")

;;; EntertainmentPerformance
(isa EntertainmentPerformance DefaultDisjointScriptType)
(genls EntertainmentPerformance EntertainmentEvent)
(genls EntertainmentPerformance SocialGathering)
(genls EntertainmentPerformance AccessingAnIBT)
(comment EntertainmentPerformance "The collection of public and private entertainment performances, like plays, street performances, ballets, movies.  Each EntertainmentPerformance  is a presentation or exhibition, to a human audience, with artistic or entertainment value.  
Note:  Movies are included even though the Performers aren't performing in the same point in space-time.  But we draw the line at still photographs; i.e., those are not considered EntertainmentPerformances.")

;;; Entity
(isa Entity TemporalObjectType)
(genls Entity SomethingExisting)
(comment Entity "?X is an Entity if it is a `maximal' SomethingExisting.  What we mean by that is that there cannot be another SomethingExisting of which ?X is merely a subabstraction (see subAbstrac).  So AlbertEinstein is an entity, but AlbertEinsteinWhileAtPrinceton is not.  In other words, an Entity represents the entire existence of a thing, not just one or more `temporal chunks' or timeSlices of a thing.")

;;; EthnicGroupType
(isa EthnicGroupType Collection)
(genls EthnicGroupType ConventionalClassificationType)
(genls EthnicGroupType HumanCultureType)
(comment EthnicGroupType "A collection of collections.  An EthnicGroupType is a set of people whose group-organization, practices or characteristics are based on ethnic origins.  E.g., some EthnicGroupTypes are: EthnicGroupOfVietnamese, EthnicGroupOfIndiansOfTheUS, etc.")

;;; EukaryoticCell
(isa EukaryoticCell ExistingObjectType)
(genls EukaryoticCell Cell)
(comment EukaryoticCell "The collection of eukaryotic cells, Cells which serve as the basic structural unit of eukaryotic organisms.  These cells have a membrane-bound nucleus and other organelles.  Multicellular Organisms generally have EukaryoticCells; EukaryoticCell DNA has introns.  Certain EukaryoticCells, like the red blood corpuscles of Persons with heathy Spleens, lack nuclei.")

;;; EvaluatableFunction
(isa EvaluatableFunction Collection)
(genls EvaluatableFunction FunctionTheMathematicalType)
(comment EvaluatableFunction "A collection of Cyc functions.  Each element of EvaluatableFunction is a Cyc function which is associated (via lispDefun) with a piece of Heuristic Level (SubL) code that computes the result of applying the function to legal arguments.  See PlusFn for a good example.  An evaluatable function is evaluated only if none of its arguments is unbound.")

;;; Evaporating
(isa Evaporating TemporalObjectType)
(isa Evaporating DefaultDisjointScriptType)
(genls Evaporating PhysicalStateChangeEvent)
(comment Evaporating "The collection of events in which a piece of stuff is transformed from a LiquidStateOfMatter to a GaseousStateOfMatter by evaporation as opposed to boiling.")

;;; Evening
(isa Evening TemporalObjectType)
(genls Evening QualitativeTimeOfDay)
(comment Evening "Each Evening is started by a Dusk and is temporallyCoterminal with the CalendarDay it's a part of.  Each Evening is contiguousAfter an Afternoon, and each Overnight is contiguousAfter an Evening.")

;;; Event
(isa Event ScriptType)
(isa Event TemporalObjectType)
(genls Event IntangibleIndividual)
(genls Event TemporalThing)
(genls Event Situation)
(comment Event "This is one important subset of 
TemporalThing.  The elements of Event are events or actions,
things that we say are `happening', changes in the state of the 
world.  Event is also a subset of Intangible, since an 
event consists of the `actions' per se, and THEY then refer 
to the tangible objects which participate in them.  
In contrast, the collection SomethingExisting (another 
important subset of TemporalThing) has elements which have 
temporal extent yet are `static', such as a rock at the bottom 
of a pond.  



Note: While `SomethingExisting vs. Event' might seem at 
first to be an 
obvious partition of things with temporal extent, there are 
interesting borderline cases -- 
such as agreements -- which Cyc treats as instances of 
SomethingExisting, but which could also be represented as 
instances of Event.  And there are still other cases,
 such as the pure disembodied elements of TimeInterval, 
which are elements of TemporalThing yet belong neither to 
SomethingExisting nor to Event.")

;;; EvergreenPlant
(isa EvergreenPlant ExistingObjectType)
(genls EvergreenPlant Plant-Woody)
(comment EvergreenPlant "A collection of plants.  Each element of EvergreenPlant is a plant that retains leaves or needles throughout all the seasons of the year.  Cf. DeciduousPlant.")

;;; ExchangeOfUserRights
(isa ExchangeOfUserRights DefaultDisjointScriptType)
(isa ExchangeOfUserRights TemporalObjectType)
(genls ExchangeOfUserRights ChangeInUserRights)
(genls ExchangeOfUserRights SocialOccurrence)
(genls ExchangeOfUserRights HumanActivity)
(comment ExchangeOfUserRights "A collection of events.  In an instance of ExchangeOfUserRights, two Agents (the exchangers) perform two distinct (though related) TransferringPossessions with each other.  Two objects are exchanged.  Each agent gains possession -- in the form of some UserRightsAttribute -- of something (an objectOfPossessionTransfer) from the other.  Each transfer is related to the other as some kind of condition, a precondition or an intended result; e.g., the news seller will hand over a paper if given fifty cents, and I give the news seller my fifty cents so that he will turn over a newspaper to me.  The two TransferringPossession events are subEvents of the ExchangeOfUserRights event.")

;;; Excitement
(isa Excitement FeelingAttributeType)
(genls Excitement FeelingAttribute)
(comment Excitement "A feeling of arousal that stirs up, moves profoundly, or serves as a challenge to one's power, eliciting the desire to do or perceive something.  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Excitement include Enthusiasm, Celebratory-Emotion, Triumph-TheFeeling, etc.")

;;; ExclusiveUserRights
(isa ExclusiveUserRights UserRightsAttribute)
(comment ExclusiveUserRights "An attribute of an object with respect to an Agent, meaning that the agent who holds this kind of UserRightsAttribute to an object has the sole right to use that object.  There can be only one such Agent at a given time; that agent may be an Organization or an individual person.  When you rent a car, you expect ExclusiveUserRights of it for the duration of your rental, even though you don't own the car.")

;;; Executive
(isa Executive OccupationType)
(genls Executive Professional)
(genls Executive Leader)
(comment Executive "A collection of people.  An instance of Executive is a person who holds an executive managerial positions in some Organization.  Among the members of Executive are top managers of organizations, including corporate officers (CompanyPresident, etc.), Chiefs of Staff, Generals, Admirals and others like Chief Corporate Counsel, Managing Partner, Producer, Chief Scientist, Chief Engineer, as well as other upper and upper-middle managers.")

;;; Exercising
(isa Exercising TemporalStuffType)
(isa Exercising ScriptType)
(genls Exercising VoluntaryBodyMovement)
(genls Exercising ActionOnObject)
(genls Exercising PurposefulAction)
(genls Exercising HumanActivity)
(comment Exercising "The collection of events in which humans move their bodies and limbs for the purpose of general physical conditioning and/or strengthening muscles.")

;;; Exhaling
(isa Exhaling TemporalStuffType)
(isa Exhaling DefaultDisjointScriptType)
(genls Exhaling Translation-SinglePath)
(genls Exhaling EmittingAnObject)
(comment Exhaling "Expelling air from the lungs")

;;; ExistingObjectType
(isa ExistingObjectType Collection)
(genls ExistingObjectType TemporalStuffType)
(genls ExistingObjectType ObjectType)
(comment ExistingObjectType "A collection of collections.  Each element of each element of ExistingObjectType is temporally stufflike yet is objectlike in other ways, e.g., spatially.  Any one of many timeSlices of a copy of `Moby Dick' sitting on your shelf is still a copy of `Moby Dick' sitting on your shelf.  Most tangible objects are temporally stufflike in this fashion.   That book is, of course, not spatially stufflike; spatially, it is objectlike:  if we take a scalpel and slice the book into ten pieces, each piece is not a copy of `Moby Dick'.   So (isa Book ExistingObjectType) is true, because each book is temporally stufflike but spatially objectlike. See the comment for StuffType to find out more about the distinctions between, and the need for, these four collections: StuffType, ObjectType, ExistingStuffType, and ExistingObjectType.")

;;; ExistingStuffType
(isa ExistingStuffType Collection)
(genls ExistingStuffType TemporalStuffType)
(genls ExistingStuffType StuffType)
(comment ExistingStuffType "A collection of collections.  Each element of ExistingStuffType is a collection of things (including portions of things) which are temporally and spatially stufflike; they may also be stufflike in other ways, e.g., in some physical property.  Division in time or space does not destroy the stufflike quality of the object.  For example, every piece of wood is temporally stufflike: if W-168 is a piece of wood during 1996, then it's also a piece of wood for the one-minute time-slice 9:05am 7/7/96.  It's also spatially stufflike: if we take that piece of wood W-168 and cut it in half, we have two things which are both pieces of wood.  The fact that every piece of wood is both temporally and spatially stufflike is represented in Cyc by the assertion (isa Wood ExistingStuffType).  Other examples of ExistingStuffType: AppleJuice, IceCream, Diamond, WaxedPaper, StriatedMuscle. See the comment for StuffType to learn more about the distinctions between, and the need for, these four collections: StuffType, ObjectType, ExistingStuffType, and ExistingObjectType.")

;;; ExpFn
(isa ExpFn FunctionFromQuantitiesToQuantities)
(resultIsa ExpFn ScalarInterval)
(arg1Isa ExpFn ScalarInterval)
(comment ExpFn "ExpFn is the exponential operator, i.e., the unary mathematical function that returns e^x for the x value taken as its argument.  (ExpFn 1) returns e.  Its inverse (i.e., inverseFunc) is LogFn.")

;;; ExperiencingHunger
(isa ExperiencingHunger TemporalStuffType)
(isa ExperiencingHunger DefaultDisjointScriptType)
(genls ExperiencingHunger BodilyFunctionEvent-Involuntary)
(comment ExperiencingHunger "Being hungry")

;;; Explosion
(isa Explosion TemporalObjectType)
(isa Explosion ScriptType)
(genls Explosion DecompositionProcess)
(genls Explosion EnergyConversionProcess)
(comment Explosion "A collection of events.  Each instance of Explosion is an event that involve an extremely violent, chaotic release of energy.  It is not exactly controlled, even in the best circumstances, though it may be contained and channelled to do useful work (such as within the cylinders of a car engine, or such as when a hole is blasted for a backyard swimming pool.)")

;;; ExtensionalRepresentationPredicate
(isa ExtensionalRepresentationPredicate PredicateCategory)
(genls ExtensionalRepresentationPredicate Predicate)
(comment ExtensionalRepresentationPredicate "A collection of predicates.  Each element of ExtensionalRepresentationPredicate is a predicate used to form assertions about the properties of individual objects. These predicates implement the extensional structure of the Cyc ontology; e.g., attorneys, objectTakenCareOf, actorPartsAffected, vestedInterest.")

;;; ExteriorRegionFn
(isa ExteriorRegionFn ReifiableFunction)
(isa ExteriorRegionFn IndividualDenotingFunction)
(resultIsa ExteriorRegionFn AnimalBodyRegion)
(arg1Isa ExteriorRegionFn AnimalBodyRegion)
(comment ExteriorRegionFn "The function (ExteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of all the outer parts or sections of REGOROBJ, or the exterior main portion of REGOROBJ.  It applies when REGOROBJ itself has an intrinsic inside/outside orientation (unlike, say, a loop of thread), but if REGOROBJ is an enveloping part, surface membrane, ring or layer within or on a larger region or object that has its own inside/outside orientation, the function returns REGOROBJ's outside portion with respect to the inside and outside of the larger region or object.")

;;; ExternalSurface-WholeThing
(isa ExternalSurface-WholeThing RegionType)
(genls ExternalSurface-WholeThing SurfaceOnTangibleObject)
(comment ExternalSurface-WholeThing "The collection of all entire outer physical surfaces of tangible objects.  Excludes mere patches or portions of the whole surface of an object.")

;;; Eye
(isa Eye SymmetricAnatomicalPartType)
(genls Eye ElectroMagneticRadiationSensor)
(genls Eye Organ)
(comment Eye "The collection of all eyes of Animals. Eyes are the organs of VisualPerception.")

;;; FPSUnitOfMeasure
(isa FPSUnitOfMeasure RelationType)
(genls FPSUnitOfMeasure UnitOfMeasure)
(comment FPSUnitOfMeasure "A subset of UnitOfMeasure.  FPSUnitOfMeasure is the collection of all the measurement functions whose results use the FPS (i.e., foot-pound-second) system of measure to describe physical quantities.  Examples: Gallon-US, SquareMile, CubicFtPerSec.")

;;; FaceOfAnimal
(isa FaceOfAnimal UniqueAnatomicalPartType)
(isa FaceOfAnimal AnimalBodyPartType)
(genls FaceOfAnimal BiologicalLivingObject)
(genls FaceOfAnimal AnimalBodyPart)
(comment FaceOfAnimal "The collection of all faces of animals.  A FaceOfAnimal generally consists of the region where the eyes of the animal are located.  In most terrestrial animals, this is the front region of the animal's head, and also turns out to be where the nose, mouth, etc., are located.")

;;; FallSeason
(isa FallSeason TemporalObjectType)
(genls FallSeason SeasonOfYear)
(comment FallSeason "The collection of Fall seasons.  In the TemperateClimateCycle, Fall is usually the time of harvesting and beginnings of shutting down of growth.  Also the time of harvest celebrations.  FallSeason represents the climatic aspects of Fall; for its purely temporal aspects, see CalendarAutumn.")

;;; False
(isa False TruthValue)
(isa False Individual)
(comment False "An element of TruthValue.  False is logical falsehood in Cyc; this is the abstract logical notion--not to be confused with Lisp's NIL, nor with the English word `false'.")

;;; Family-SocialEntity
(isa Family-SocialEntity ObjectType)
(genls Family-SocialEntity PartiallyTangible)
(genls Family-SocialEntity Group)
(genls Family-SocialEntity SocialBeing)
(comment Family-SocialEntity "A collection of organizations.  Each element of Family-SocialEntity is a group of people or of animals related by birth and mating.  The kinship relation is closer than simply being members of the same species.  Such a family may function together as an Organization.  See also the specialization Family-Human.")

;;; FamilyRelationSlot
(isa FamilyRelationSlot PredicateCategory)
(genls FamilyRelationSlot InterExistingObjectSlot)
(comment FamilyRelationSlot "A collection of predicates.  Each element of FamilyRelationSlot is a binary predicate used to represent relationships among members of human families.  Examples: spouse, siblings, grandmothers, grandfathers, relatives, cohabitingFamilyMembers.")

;;; Famine
(isa Famine ScriptType)
(isa Famine TemporalObjectType)
(genls Famine DisasterEvent)
(comment Famine "A collection of events; a subset of DisasterEvent.  Each instance of Famine is an event taking place in a contiguous geographical area in which a lot of people are undergoing Starvation.")

;;; Farmer
(isa Farmer OccupationType)
(genls Farmer BlueCollarWorker)
(genls Farmer Professional)
(comment Farmer "A collection of persons; a subset of Professional.  Each element of Farmer is a person who makes (or significantly supplements) his or her income by farming.  This includes growing vegetables, grain, or fruit crops, dairy farming, or raising livestock (e.g., cattle, pigs, sheep, fish) for their meat or other animal products (e.g., wool).")

;;; Fear
(isa Fear FeelingAttributeType)
(genls Fear FeelingAttribute)
(comment Fear "Unpleasant emotion manifested by painful agitation in the presence or awareness of danger.   Fear implies anxiety and loss of courage.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.   A more specialized FeelingAttributeType than Fear is Dread.")

;;; February
(isa February MonthOfYearType)
(genls February CalendarMonth)

;;; FeelingAttribute
(isa FeelingAttribute CompositeAttributeType)
(isa FeelingAttribute StuffType)
(genls FeelingAttribute ScalarInterval)
(genls FeelingAttribute MentalAttribute)
(comment FeelingAttribute "The collection of attributes describing emotions and mental feelings.  An element of this set would be a particular `amount' of happiness, of confidence, of fear, etc.  Obviously there are no real `units of measure' for these quantities, but one can certainly say that the `amount' of happiness one felt at one's wedding was `more' than the happiness they felt at their college graduation ceremony, etc.  There are functions, such as LowAmountFn, which take a PrimitiveAttributeType (such as the instances of FeelingAttributeType) and return as their value a certain-sized amount of that attribute-type; e.g., (LowAmountFn Confidence) is an expression whose value is a low amount of confidence, and that in turn will be an element of Confidence, and also an element of FeelingAttribute, and also an element of AttributeValue, etc.  See especially the various subsets of FeelingAttribute.
Note that FeelingAttribute is NOT an element of FeelingAttributeType.  Since FeelingAttributeType is a subset of PrimitiveAttributeType, any element of FeelingAttributeType (such as Happiness) should have a total order among all its elements.  All the elements of FeelingAttribute can't be placed in a total order (for example, how can we compare 'low happiness' with 'low contempt'?), so it should not be an element of FeelingAttributeType.")

;;; FeelingAttributeType
(isa FeelingAttributeType Collection)
(genls FeelingAttributeType PrimitiveAttributeType)
(genls FeelingAttributeType AttributeType)
(comment FeelingAttributeType "A collection of collections.  Each FeelingAttributeType is a type of attribute that describes some sort of emotion and/or mental feeling.  Some elements of FeelingAttributeType are:  Envy, Curiosity, PrideOfAccomplishment, etc.  See also FeelingAttribute.")

;;; FemaleAnimal
(isa FemaleAnimal OrganismClassificationType)
(genls FemaleAnimal Animal)
(comment FemaleAnimal "The collection of all female animals.")
(synonymousExternalConcept FemaleAnimal SENSUS-Information1997 "FEMALE-ANIMAL")

;;; FemaleFn
(isa FemaleFn CollectionDenotingFunction)
(resultIsa FemaleFn ExistingObjectType)
(resultGenl FemaleFn FemaleAnimal)
(arg1Isa FemaleFn OrganismClassificationType)
(arg1Genl FemaleFn Animal)
(comment FemaleFn "FemaleFn is a Cyc function, in particular, an instance of CollectionDenotingFunction.  (FemaleFn ORGTYPE) returns that subset of the animal taxonomic collection ORGTYPE which includes all and only the females of ORGTYPE.  For example, (FemaleFn Person) and FemalePerson denote the same collection, while (FemaleFn Deer) denotes the collection of all female members of Deer.")

;;; FemalePerson
(isa FemalePerson ExistingObjectType)
(genls FemalePerson FemaleAnimal)
(genls FemalePerson Person)
(comment FemalePerson "The collection of all female persons.")
(synonymousExternalConcept FemalePerson SENSUS-Information1997 "FEMALE")

;;; Feminine
(isa Feminine LinguisticObject)
(isa Feminine GenderOfLivingThing)
(comment Feminine "Feminine is a gender, indicating either that an Animal or Plant is female, or that a word has what is called feminine gender.")

;;; Ferry
(isa Ferry ExistingObjectType)
(genls Ferry Ship)
(comment Ferry "The subcollection of Boat-WaterTransportationDevice that contains all ferryboats, i.e., boats that are used to carry people, goods or vehicles across rivers, lakes, canals or channels etc. or even from one side of a harbor to another, but normally not used to cross oceans.")

;;; FictionalContext
(isa FictionalContext MicrotheoryType)
(genls FictionalContext CounterfactualContext)
(comment FictionalContext "The collection of CounterfactualContexts which are (1) created intentionally, not by error or chance or gradual evolution and accretion in a culture, and (2) typically are the information content of some InformationBearingThing, and (3) are not expected (by their creator) to be believed as factual, nor do their creators believe them to be factual.  In addition to asserting fictional propositions about existing things, a FictionalContext may include terms for nonexistent things.  Examples: LordOfTheRings, AdventuresOfHuckleberryFinn.")

;;; FieldOfStudy
(isa FieldOfStudy ObjectType)
(genls FieldOfStudy PropositionalInformationThing)
(comment FieldOfStudy "A collection of microtheories.  Each element of FieldOfStudy is a microtheory containing the knowledge, theory, hypotheses, evidence, and problems covered in a particular field of study (in propositional form).  Examples:  Linguistics, Ethology, ArtificialIntelligence, BusinessAdministration, Nursing-FieldOfStudy, etc.  Fields of study are typically the subject of teaching and/or research within instances of AcademicDepartment, although the correlation between AcademicDepartment and FieldOfStudy is not one-to-one.  Note also that elements of FieldOfStudy are intangible objects (i.e., contexts with propositional content), while academic departments are partially tangible organizations.  For the activity of specialized study in a field, see CourseOfStudy.")

;;; FinancialAccount
(isa FinancialAccount AccountType)
(genls FinancialAccount Account)
(comment FinancialAccount "A collection of intangible objects.  Each element of FinancialAccount is an instance of Account (q.v.) which is denominated in units of Money.  Examples: savings accounts, credit card accounts, vendor accounts.")

;;; FinancialAccountTenderObject
(isa FinancialAccountTenderObject ExistingObjectType)
(genls FinancialAccountTenderObject TenderObject)
(comment FinancialAccountTenderObject "A collection of objects.  Each element of FinancialAccountTenderObject is an object, e.g., a check or a credit card, that serves as a vehicle for offering payment in funds drawn on an associated instance of FinancialAccount.  The liquidity of an element of FinancialAccountTenderObject depends on the accountBalance or accountStatus of the financial account which that object legally represents.  This collection excludes the elements of Currency and TravellersCheck.")

;;; FinancialAssetHoldings
(isa FinancialAssetHoldings ExistingObjectType)
(genls FinancialAssetHoldings Holdings)
(comment FinancialAssetHoldings "A collection of partially tangibles.  An element of FinancialAssetHoldings is a group of financial assets (e.g., stocks, bonds, ... ) owned by individual or corporate Agent(s).  As a default, we assume that the monetary value of each group equals the sum of the monetary values of the individual assets in that group.")

;;; FinancialOrganization
(isa FinancialOrganization ExistingObjectType)
(genls FinancialOrganization CommercialOrganization)
(genls FinancialOrganization CommercialServiceOrganization)
(comment FinancialOrganization "A collection of organizations; a subset of CommercialServiceOrganization.  An element of FinancialOrganization is an organization that buys, sells, trades, converts, or lends money, in the form of currency or negotiable financial instruments (such as stocks, bonds, commodities futures, etc.), as (one of) its major function(s).  The collection FinancialOrganization does not include businesses, such as retailers, which simply exchange goods or non-financial services for money.")

;;; Finger
(isa Finger AnimalBodyPartType)
(genls Finger Appendage-AnimalBodyPart)
(comment Finger "The collection of all digits of all Hands (q.v.).  Fingers are (typically) flexibly jointed and are necessary to enabling the hand (and its owner) to perform grasping and manipulation actions.")

;;; FiscalQuarter
(isa FiscalQuarter TemporalObjectType)
(genls FiscalQuarter TimeInterval)
(comment FiscalQuarter "Each instance of this collection is a 3-month-long interval of time kept track of by an Agent as part of its financial accounting procedures.  Since the start dates and end dates may vary depending on the organization, instances will be things like Fiscal3rdQuarterOf1995ForCycorp.")

;;; FiscalYear
(isa FiscalYear TemporalObjectType)
(genls FiscalYear TimeInterval)
(comment FiscalYear "Each instance of this collection is an annual, year-long interval of time kept track of by an Agent as part of its operational and financial accounting procedures.  Since the start dates and end dates may vary depending on the organization, instances of this collection are time intervals like FiscalYearOf1989ForMicrosoft")

;;; Fish
(isa Fish BiologicalClass)
(genls Fish Vertebrate)
(genls Fish Animal)
(genls Fish NonPersonAnimal)
(genls Fish AquaticOrganism)
(comment Fish "A collection of cold-blooded animals; a subset of Vertebrate.  Each element of Fish has gills, cranium, and fins, and spends all or almost all of its life under water.  The collection Fish excludes so-called star-fish and cuttle-fish, etc., as well as fish-shaped examples of Mammal such as porpoises and whales.  Fish is an instance of BiologicalClass.")

;;; FixedStructure
(isa FixedStructure ExistingObjectType)
(genls FixedStructure ConstructionArtifact)
(comment FixedStructure "A collection of artifacts.  Each element of FixedStructure is a humanly-constructed, freestanding object that exists in a fixed location; e.g., buildings, pyramids, the Great Wall of China, dams, elevated roadways, canals, etc.  Such structures may have parts which are also elements of FixedStructure (e.g., bridge pilings) and parts which are not freestanding (e.g., the span of a bridge, or a room in a building).")

;;; Flammability
(isa Flammability PrimitiveAttributeType)
(genls Flammability PhysicalAttribute)
(genls Flammability ScalarInterval)
(comment Flammability "A collection of attributes; a subset of PhysicalAttribute.  Each element of Flammability represents a specific readiness with which some tangible substance burns.  Different degrees of Flammability are represented either using GenericValueFunctions or qualitatively (e.g., NotFlammable, BurnsEasily, ExplosivelyFlammable).  Flammability of an object is indicated with the predicate flammabilityOfObject.")

;;; FlatPhysicalSurface
(isa FlatPhysicalSurface RegionType)
(genls FlatPhysicalSurface Surface-Physical)
(comment FlatPhysicalSurface "The collection of all surfaces that are substantially flat (by the tolerance standards of the the context).  This means that there are no 'significant' concave depressions or convex bulges or bumps, and that the surface approximates some portion of a Euclidian plane in space.  Note that the surface may have holes or cracks and may be disconnected, in multiple (substantially coplanar) pieces.  A typical table top is a FlatPhysicalSurface.")

;;; Flexible
(isa Flexible PhysicalStructuralAttribute)
(comment Flexible "A physical attribute.  Flexible is the PhysicalStructuralAttribute of a tangible object that can be flexed, twisted, contorted.  Flexible objects which retain their contorted shape are described as Bendable (q.v.).")

;;; FloorInAConstruction
(isa FloorInAConstruction ExistingObjectType)
(genls FloorInAConstruction ConstructionArtifact)
(comment FloorInAConstruction "A physical floor in a building, NOT the level (storey).  The latter is called LevelOfAConstruction.  The floor can include any floor in a building such as the floor of a room on the third floor as well as the floor covering the entire 1st level of the building.  This includes just the horizontal surface -- not the subfloor.  It also doesn't include floor coverings like carpet or tile.")

;;; FlowPath
(isa FlowPath ObjectType)
(genls FlowPath SpatialThing)
(genls FlowPath Path-Simple)
(comment FlowPath "A collection of pathways; a subset of Path-Generic.  Each element of FlowPath is a path whose extent is delineated by the movement of a fluid over an area; for example, the path of a lava flow or the AlaskanPipeline.  Elements of FlowPath may (but need not) be constrained by objects or forces that channel the flow of fluid; see also the subset FluidConduit.")

;;; FloweringPlant
(isa FloweringPlant OrganismClassificationType)
(genls FloweringPlant Plant)
(comment FloweringPlant "The collection of plants whose seeds are enclosed in ovaries; the flowering plants in the botanical sense.  For flowering plants actually in bloom, see FloweryPlant.")

;;; FloweryPlant
(isa FloweryPlant ExistingObjectType)
(genls FloweryPlant FloweringPlant)
(comment FloweryPlant "A collection of plants.  Each element of FloweryPlant is a flowering plant that is actually and visibly in flower (i.e., has flowers showing).  The collection FloweryPlant includes flowering bushes and trees with visible flowers.  This collection represents a commonsense category, not the official BiologicalTaxon FloweringPlant.")

;;; FluidReservoir
(isa FluidReservoir ProductType)
(isa FluidReservoir ExistingObjectType)
(genls FluidReservoir ContainerProduct)
(comment FluidReservoir "A collection of open-ended containers; a subset of ContainerProduct.  An instance of FluidReservoir is a container which was designed to hold liquids.  These include elements of the collections Spoon, ToiletBowl, GlassBottle, etc.  Note a special negative case: natural `reservoirs', such as Lakes, are not ContainerProducts -- though the Dams that create them are artifacts, the reservoir water is contained in the natural landscape -- and hence such reservoirs are not subsets of FluidReservoir.")

;;; FluidTangibleThing
(isa FluidTangibleThing ExistingStuffType)
(genls FluidTangibleThing TangibleThing)
(comment FluidTangibleThing "A collection of tangibles.  Each element of FluidTangibleThing is a tangible thing that flows, including gases, liquids, and semisolid tangible things which are Pourable (e.g., sand).  Examples: the AirInAustin, LakeErie, the snow drifted in my driveway, the sand on the beach at Hippie Hollow, mercury in the thermometer on the balcony.  Note that the granules of a semisolid FluidTangibleThing are not necessarily themselves FluidTangibleThings.  Cf. LiquidTangibleThing.")

;;; Fog
(isa Fog ExistingStuffType)
(genls Fog CloudOfH2O)
(genls Fog GaseousTangibleThing)
(comment Fog "The collection of clouds (instances of CloudOfH2O) that cover a GeographicalRegion at ground-level.")

;;; Foggy
(isa Foggy WeatherAttribute)
(comment Foggy "A WeatherAttribute characterizing an OutdoorLocation covered by a ground-level cloud.")

;;; Foldable
(isa Foldable PhysicalStructuralAttribute)
(genlAttributes Foldable Bendable)
(comment Foldable "A physical attribute.  Foldable is the PhysicalStructuralAttribute of being foldable in a flexible way, like towels or paper.  Note a distinction between Foldable objects and Collapsible objects: Collapsible objects are Rigid objects collapsed by means of HingedJoints, while Foldable objects are flexible overall.")

;;; Food
(isa Food ProductType)
(isa Food ExistingStuffType)
(genls Food TangibleProduct)
(genls Food FoodAndDrink)
(genls Food EdibleStuff)
(genls Food OrganicStuff)
(comment Food "A collection of edible stuff; a subset of FoodAndDrink.  Each element of the collection Food is a particular portion of food of a type which can, and habitually is, eaten (not drunk or inhaled) by humans or animals.  Here the notion of ``eating'' is important --- not drinking or inhaling or osmosing; an element of Food will generally require biting, chewing, etc.  A borderline example is a bowl of Jello; a borderline non-example is a very thick milkshake.  Even closer to the border is a bowl of vegetable soup so thick and chunky that each spoonful require chewing.  The edibles in Food provide calories and/or other nutrients that humans or animals need (e.g., protein, vitamins); this is often true with a Drink as well, but probably less than half the time (since most drinking is of water).")

;;; Food-ReadyToEat
(isa Food-ReadyToEat ProductType)
(isa Food-ReadyToEat ExistingStuffType)
(genls Food-ReadyToEat FoodAndDrink)
(genls Food-ReadyToEat OrganicStuff)
(genls Food-ReadyToEat Food)
(comment Food-ReadyToEat "A collection of food.  Each instance of Food-ReadyToEat is an item of food of a type, and in a state, that people or animals can and normally do eat without any further preparation.  This includes foods which have already been prepared and foods which don't need any preparation before eating.  Hot baked instances of Pizza and ripe instances of Apple-TheFruit all belong in this collection.  To account for differences across cultures or species, use a specialized Microtheory (see comments on FoodAndDrink, EdibleStuff).")

;;; FoodAndDrink
(isa FoodAndDrink ProductType)
(isa FoodAndDrink ExistingStuffType)
(genls FoodAndDrink EdibleStuff)
(comment FoodAndDrink "A collection of edible stuff.  Each element of the collection FoodAndDrink is a food or beverage of a type which people or animals (or whatever the current microtheory is restricting its attention to --- e.g., some species of oil-eating bacteria) can and normally do consume.   Elements of FoodAndDrink may or may not require further preparation before the eaters find them palatable, medically safe, digestable, etc.  See Food-ReadyToEat for the subset of these items that are ready for immediate consumption.  In various microtheories, the elements of FoodAndDrink will be restricted or expanded; e.g., in the HumanActivitiesMt this collection is limited to only foods or beverages that modern-day human beings consume.  Some examples of FoodAndDrink includes a scoop of ice cream (an instance of IceCream), a pepperoni pizza (an instance of Pizza), an apple (an instance of EdibleFruit), a lump of bread-dough (an instance of Dough which, after preparation, will become an instance of edible Bread), a double espresso (an instance of Coffee-Beverage), a mouthful of hay that a horse is about to swallow (an instance of Hay), etc.  The latter (the hay) is not an instance of FoodAndDrink in the HumanActivitiesMt.  Note that FoodAndDrink does NOT include such things as spices, condiments, sauces, drugs, etc., which --- though they are nevertheless EdibleStuff --- do not constitute a food by themselves; those belong to other subsets of EdibleStuff but not to FoodAndDrink.  E.g., a particular pinch of oregano would be an instance of FoodIngredientOnly (q.v.).  Also see: DefaultDisjointFoodTypes.")

;;; FoodGroupType
(isa FoodGroupType Collection)
(genls FoodGroupType ConventionalClassificationType)
(genls FoodGroupType ProductType)
(genls FoodGroupType ExistingStuffType)
(comment FoodGroupType "A collection of collections.  Each element of FoodGroupType is a collection of foodstuffs classified according to their nutritional contents.  When restricted to human foods, the elements of FoodGroupType are familiar as the teaching tools used in public health education in order to promote nutritionally balanced diets.  Examples include: DairyProduct, CerealFoodGroup, FruitAndVegetableFoodGroup, MeatAndLegumeFoodGroup.")

;;; FoodIngredientOnly
(isa FoodIngredientOnly ProductType)
(isa FoodIngredientOnly ExistingStuffType)
(genls FoodIngredientOnly EdibleStuff)
(comment FoodIngredientOnly "A collection of tangible stuff; a subset of EdibleStuff.  Each element of FoodIngredientOnly is an edible substance that is used in making other food but isn't eaten by itself.  These may or may not require some preparation.  For example, TableSalt, VegetableOil, and Ketchup are subsets of FoodIngredientOnly, because all of their instances are used only as ingredients or condiments.   In contrast, Egg-Chickens is not a subset of FoodIngredientOnly; some of its instances serve as ingredients in cooking other dishes, (and those instances are elements of FoodIngredientOnly,) but other eggs are simply eaten after poaching or frying (and those instances belong to the collection Food, not FoodIngredientOnly).  Types of foodlike Pizza, whose instances are never merely ingredients, are just subsets of Food.")

;;; FoodOrDrinkComposite
(isa FoodOrDrinkComposite ProductType)
(isa FoodOrDrinkComposite ExistingStuffType)
(genls FoodOrDrinkComposite Artifact)
(genls FoodOrDrinkComposite EdibleStuff)
(comment FoodOrDrinkComposite "A collection of edible stuff.  Each element of FoodOrDrinkComposite is an edible substance that is made up of two or more foodstuffs as constituents.  Typically, some recipe is, explicitly or implicitly, associated with the production of such substances.  FoodOrDrinkComposite includes both some instances of FoodIngredientOnly (e.g., a dollop of ketchup) and some instances of FoodAndDrink (e.g., a slice of a cheese pizza).")

;;; FoodOrDrinkPreparationDevice
(isa FoodOrDrinkPreparationDevice ExistingObjectType)
(genls FoodOrDrinkPreparationDevice HOCObject)
(genls FoodOrDrinkPreparationDevice PhysicalDevice)
(comment FoodOrDrinkPreparationDevice "A collection of objects; a subset of PhysicalDevice.  An instance of FoodOrDrinkPreparationDevice is a device whose primaryFunction is to prepare food or drink somehow, such as a colander, a spice mill or a pot.")

;;; FoodProfessional
(isa FoodProfessional OccupationType)
(genls FoodProfessional Professional)
(comment FoodProfessional "A collection of persons; a subset of Professional.  Each element of FoodProfessional is a worker in the food and drink industry.  This collection includes bakers, brewers, butchers, and bartenders--everyone from Julia Child to Joe the bartender.")

;;; FoodServiceOrganization
(isa FoodServiceOrganization ExistingObjectType)
(genls FoodServiceOrganization CommercialServiceOrganization)
(genls FoodServiceOrganization Business)
(comment FoodServiceOrganization "A collection of business organizations; a subset of both CommercialServiceOrganization and Business.  An element of FoodServiceOrganization is a business which prepares and/or serves food as its major function(s).  Important subsets of FoodServiceOrganization include Restaurant and CateringCompany.  Note that grocery stores -- and airlines -- are not themselves considered elements of FoodServiceOrganization, even though some of those may have subOrganizations or sub-contractors which areFoodServiceOrganizations.  Bars or taverns, in contrast to Restaurants that also prepare and serve food, are also not considered FoodServiceOrganizations.")

;;; FoodUtensil
(isa FoodUtensil ExistingObjectType)
(genls FoodUtensil HOCObject)
(comment FoodUtensil "A collection of objects.  Each element of FoodUtensil is an implement or a container used in preparing or consuming food.  Among its subsets are: Spoon, CarvingKnife, CookingUtensil, FoodVessel, CuttingBoard, and ChopStick.")

;;; FoodVessel
(isa FoodVessel ProductType)
(isa FoodVessel ExistingObjectType)
(genls FoodVessel ContainerProduct)
(genls FoodVessel FoodUtensil)
(comment FoodVessel "A collection of container products; a subset of FoodUtensil.  An instance of FoodVessel is a container designed for holding, storing, or preparing food.   For example, a dinner plate, a cake pan, a wok, a plastic food storage container, etc.  Subsets include the collections CookingVessel, EatingVessel, FoodStorageContainer, and numerous others.")

;;; Foot-AnimalBodyPart
(isa Foot-AnimalBodyPart SymmetricAnatomicalPartType)
(genls Foot-AnimalBodyPart Appendage-AnimalBodyPart)
(genls Foot-AnimalBodyPart BiologicalLivingObject)
(comment Foot-AnimalBodyPart "The collection of all vertebrates' feet.  A foot is a terminal part of a Vertebrate Leg.  Feet are used in locomotion, support, balance, kicking, etc.")

;;; Foot-UnitOfMeasure
(isa Foot-UnitOfMeasure UnitOfMeasureNoPrefix)
(isa Foot-UnitOfMeasure FPSUnitOfMeasure)
(isa Foot-UnitOfMeasure UnitOfDistance)
(resultIsa Foot-UnitOfMeasure ScalarInterval)
(resultIsa Foot-UnitOfMeasure Distance)
(argsIsa Foot-UnitOfMeasure CycSystemRealNumber)
(comment Foot-UnitOfMeasure "The measurement function used in Cyc to represent the basic unit of length within the British (FPS) system.  See also FPSUnitOfMeasure, UnitOfMeasure.")

;;; Form-StandardizedIBO
(isa Form-StandardizedIBO TemporalStuffType)
(genls Form-StandardizedIBO StructuredInformationSource)
(comment Form-StandardizedIBO "A collection of information bearing objects (IBOs); a subset of StructuredInformationSource.  Each element of Form-StandardizedIBO is an IBO having some standard set of labelled `fields' left blank for the user to fill in with individualized information.  Forms usually accompany some sort of bureaucratic procedure, which they may be used to initiate or to certify.  Examples include the elements of JobApplicationForm, DepositSlip, InsuranceClaimForm, OrderForm, TaxReturn, BirthCertificate, DiplomaDocument, ATMTransactionReceipt, MarriageLicenseDocument, DeathCertificate, etc.")

;;; FormalCOC
(isa FormalCOC ExistingObjectType)
(isa FormalCOC MicrotheoryType)
(genls FormalCOC CodeOfConduct)
(comment FormalCOC "A collection of microtheories; a subset of CodeOfConduct.  Each element of FormalCOC is a  code of conduct which is imposed by an organization.   Formal codes of conduct typically are explicitly stated and publicly promulgated among the group subject to them; also, they are associated with prescribed methods of enforcement and punishment of violators.  Thus, the collection FormalCOC includes the laws of any legal jurisdiction, the rules of deportment imposed by educational institutions, the practices of some strict religious sects, etc.   In contrast, informal codes of conduct are norms that are not prescribed or enforced by formal means; for example, etiquette (MannersCodeOfConduct) and ethics (EthicsCodeOfConduct).")

;;; FormalProduct
(isa FormalProduct ProductType)
(genls FormalProduct Product)
(comment FormalProduct "A collection of products.  Each element of FormalProduct is a complete packaged product, including everything the customer gets when the product is purchased, e.g., the mainProduct, packaging, enclosures, warranties, etc.  The typical packaged product as the retailer stocks it on the shelf and sells it at the register.")

;;; FormalProductType
(isa FormalProductType ObjectType)
(genls FormalProductType ProductType)
(comment FormalProductType "A collection of collections.  Each element of FormalProductType is a collection of products (i.e., tangible products, services, information products, etc.), all of which conform to a standardized product specification (i.e., a `form').  In Western-style capitalistic markets, elements of FormalProductType are often associated with a particular brand name (and perhaps model), since competing providers of products design them to be distinctive.  For example, the collection InternalCombustionEngine is not an element of FormalProductType, but a specific collection of engines manufactured by (e.g.) Mazda would be.  On the service side, the collection HairCuttingEvent is not a FormalProductType, but a subset of hair stylings for men (e.g., at a particular designer's salon) might be.")

;;; Format
(isa Format Collection)
(genls Format IntangibleIndividual)
(genls Format Individual)
(comment Format "Elements of the collection Format are attributes that are used to constrain the multi-valued nature of a Predicate.  Consider a predicate PRED which takes five arguments, and fix any four of those arguments -- say arguments 1, 2, 4, and 5.  The number of different legal values there can be for the third argument (given that we've already chosen the other four) is determined by which Format attribute has been specified for the 3rd argument place of PRED..





(1) If the arg3Format for PRED is SingleEntry, then there can be at most one single term that's legal (and thus at most one assertion), for those given values of arguments 1, 2, 4, and 5.  To illustrate, let's consider a predicate with a lower arity, say (mother CHILD MOM), which says that the mother of CHILD is MOM.  The arg2Format for mother should be SingleEntry, since an animal can have only one biological mother.





(2) If the arg3Format of PRED is SetTheFormat, then there may be any number of assertions with different terms in the third argument position, but sharing the same values for arguments 1, 2, 4, and 5.  E.g., the arg1Format for mother should be SetTheFormat, since a female can have multiple children.





(3) If the arg3Format of PRED is IntervalEntry, then there may be multiple assertions sharing the values of 1, 2, 4, and 5, but with different terms in the 3rd argument; however, all the values for the 3rd argument must be overlapping elements of ScalarInterval (q.v.).  E.g., the height of a person might be specified in several ways, with slightly different margins of error (or approximation), which is fine, but all those alternate values had better have SOME overlap since the person really just has one particular true height at any given time.")

;;; ForwardInferencePSC
(isa ForwardInferencePSC ProblemSolvingCntxt)
(genlMt ForwardInferencePSC BaseKB)
(comment ForwardInferencePSC "The problem solving context which is used during forward inference.")

;;; Fragility
(isa Fragility PrimitiveAttributeType)
(genls Fragility PhysicalAttribute)
(genls Fragility ScalarInterval)
(comment Fragility "A collection of attributes; a subset of PhysicalAttribute.  Each element of Fragility represents a specific property which determines how easily a physical object breaks.  Different fragilities may be designated using a GenericValueFunction.  Fragilities of objects are indicated with the predicate fragilityOfObject.")

;;; FrameOfReference
(isa FrameOfReference ObjectType)
(genls FrameOfReference GeometricThing)
(comment FrameOfReference "A collection of geometric things.  Each element of FrameOfReference is a representation of the context in which certain data are to be interpreted.  Such contexts are typically physical (i.e., spatiotemporal), but contexts may also be purely mathematical.  A Cartesian coordinate system represents a frame of reference.")

;;; FreeSheet
(isa FreeSheet ExistingObjectType)
(genls FreeSheet SheetOfSomeStuff)
(comment FreeSheet "A collection of certain pieces of tangible stuff.  A FreeSheet is a SheetOfSomeStuff which has two sides open to the environment.  I.e. over most of each of its surfaces, it is not sheetSurfaceConnected with something else.")

;;; Freezing
(isa Freezing TemporalObjectType)
(isa Freezing DefaultDisjointScriptType)
(genls Freezing PhysicalStateChangeEvent)
(genls Freezing Translocation)
(comment Freezing "A collection of events.  In each instance of this collection, an object is cooled to (and then below) its freezingPoint and is thereby changed from a LiquidStateOfMatter to a SolidStateOfMatter.")

;;; Frequency
(isa Frequency DerivedNumericAttributeType)
(genls Frequency Rate)
(genls Frequency PhysicalAttribute)
(comment Frequency "A collection of physical attributes; a subset of Rate.  Each element of Frequency is a measurement of the number of times something happens during some time interval.  Elements of Frequency may be either fixed values, such as 103 kiloHertz, or a range, such as Yearly, Hourly, or Rarely.  See UnitOfFrequency for the units used by Cyc to measure instances of Frequency, e.g. (TimesPerSecond 35), (KiloHertz 103).  Instances of Frequency are important in the characterization of types of WavePropagation.")

;;; Fried
(isa Fried PreparationAttribute)
(genlAttributes Fried Cooked)
(comment Fried "The attribute Fried is a specialized form of Cooked.  Food that is Fried has been prepared in an event of Frying.")

;;; Friendliness
(isa Friendliness FeelingAttributeType)
(genls Friendliness Affection)
(genls Friendliness FeelingAttribute)
(comment Friendliness "Emotion manifested by interest in another person (or, more rarely, in some nonhuman agent), good will towards that individual, and an inclination to favor him or her (or it).  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Friendliness are Love and Love-Romantic.")

;;; FrontSide
(isa FrontSide RegionType)
(genls FrontSide Side)
(comment FrontSide "The collection of all the entire front sides (as conventionally understood) of all objects that have distinct Sides, one of which faces in the frontwards direction.")

;;; Fruit
(isa Fruit ExistingObjectType)
(genls Fruit PlantPart)
(comment Fruit "A subset of PlantPart.  Each element of Fruit is a plant structure that contains the seeds of angiosperms.  Many fruits have fleshy walls having high concentrations of sugars or fats, and these are often eaten by humans and other animals.  Fruits usually develop from the ovary wall, although some fruits include other tissues; e.g., the flesh of apples and of strawberries develops from the receptacle, and the fruits of pineapple and fig develop from a whole inflorescence (group of flowers).")

;;; FruitFn
(isa FruitFn CollectionDenotingFunction)
(resultIsa FruitFn ExistingObjectType)
(resultGenl FruitFn Fruit)
(arg1Isa FruitFn OrganismClassificationType)
(arg1Genl FruitFn Plant)
(comment FruitFn "FruitFn is a Cyc function, specifically a CollectionDenotingFunction, which is used to denote the various natural kinds of fruit.  FruitFn takes a single plant collection as its argument and returns the collection of fruits of that type of plant.  (FruitFn PLANTTYPE) denotes the collection of all fruits from the elements of PLANTTYPE.  Examples: (FruitFn AppleTree) denotes the collection of apples (corresponds to Apple-TheFruit); (FruitFn CashewTree) denotes the fruit of the cashew tree (note this does NOT correspond with Cashew-TheNut; the red pulpy fruit is used to make cashew wine).")

;;; Frustration
(isa Frustration FeelingAttributeType)
(genls Frustration Dissatisfaction)
(comment Frustration "A feeling of irritation and dissatisfaction arising from unresolved problems or unfulfilled needs.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; Frying
(isa Frying TemporalObjectType)
(isa Frying DefaultDisjointScriptType)
(genls Frying CookingFood)
(comment Frying "Cooking food by partial or total immersion in hot oil until desired level of doneness")

;;; FullTime
(isa FullTime WorkStatus)
(comment FullTime "Attribute of being a full-time worker.")

;;; FullUseRights
(isa FullUseRights UserRightsAttribute)
(comment FullUseRights "An attribute of an object with respect to an Agent, meaning that if the Agent has this right to the object, it does not place any restrictions on what the Agent may do with the object.  If there are restrictions on what the Agent may do with the object, they arise from other sources, such as formal and informal laws of behavior.  E.g., even if you have FullUseRights to your car, you can't violate traffic laws, kill people with it, blow it up in a parking lot, etc.")

;;; FunctionFromQuantitiesToQuantities
(isa FunctionFromQuantitiesToQuantities RelationType)
(genls FunctionFromQuantitiesToQuantities NonPredicateFunction)
(genls FunctionFromQuantitiesToQuantities EvaluatableFunction)
(comment FunctionFromQuantitiesToQuantities "A collection of mathematical functions.  Each element of FunctionFromQuantitiesToQuantities is a function that takes one or more numbers as its arguments, and it returns a number as its value.  Examples: subtraction (DifferenceFn), square root (SqrtFn), absolute value (AbsoluteValueFn), and logarithm (LogFn).")

;;; FunctionOrFunctionalPredicate
(isa FunctionOrFunctionalPredicate RelationType)
(genls FunctionOrFunctionalPredicate Relationship)
(comment FunctionOrFunctionalPredicate "A collection of mathematical objects.  Each element of FunctionOrFunctionalPredicate is either a function or else a predicate which is functional in at least one argument place (see also FunctionalPredicate).  Examples: SkolemFunction, IntervalMaxFn, ElectricalPotentialDifference, revenueFrom, costRateForType, permeabilityOfSubstThroSubst.")

;;; FunctionTheMathematicalType
(isa FunctionTheMathematicalType RelationType)
(isa FunctionTheMathematicalType Collection)
(genls FunctionTheMathematicalType FunctionOrFunctionalPredicate)
(genls FunctionTheMathematicalType Relationship)
(comment FunctionTheMathematicalType "A collection of mathematical objects.  Each element of FunctionTheMathematicalType takes some arguments and returns a unique value.  Examples: TimeElapsedFn, IntervalMaxFn, SkolemFunction, PlusFn.  Note that Predicate is a subset of FunctionTheMathematicalType, because predicates can be thought of as functions that return only (either) true or false.")

;;; FunctionalPredicate
(isa FunctionalPredicate RelationType)
(genls FunctionalPredicate FunctionOrFunctionalPredicate)
(comment FunctionalPredicate "FunctionalPredicate is the collection of Cyc predicates which are functional in at least one argument place.  Given a set of legal arguments for such a predicate's other argument positions, there will be a single value for the functional argument -- not two legal values, and not zero legal values.  For example, (mother CHILD MOM) is functional in its second argument, since every animal has one and only one biological mother.")

;;; FunctionalSlot
(isa FunctionalSlot PredicateCategory)
(genls FunctionalSlot ProtheticSlot)
(genls FunctionalSlot FunctionalPredicate)
(comment FunctionalSlot "A collection of predicates; a subset of FunctionalPredicate.  Each element of FunctionalSlot is a binary predicate which is also a function, and in which the second of its two arguments is the functional one.  A functional predicate F is an element of FunctionalSlot if and only if, in assertions of the form (F X Y), for any legal value of X, there is always exactly one value of Y.  FunctionalSlot is half of the set intersection of BinaryPredicate and FunctionalPredicate, namely for the cases where the second of the two arguments is the functional one.  Examples: latitude, countryOfAddress, stateOfDevice, femaleParentActor.")

;;; FundamentalNumericAttributeType
(isa FundamentalNumericAttributeType Collection)
(genls FundamentalNumericAttributeType MeasurableAttributeType)
(comment FundamentalNumericAttributeType "A collection of collections.  Each element of FundamentalNumericAttributeType is a collection of measurable attributes, including Distance, Time, Currency, Mass, etc.  The types of attributes in this collection are `fundamental' when contrasted with other attributes which are derived from them (such as Volume, Speed, etc.).  Cf. DerivedNumericAttributeType.")

;;; Fungus
(isa Fungus BiologicalKingdom)
(genls Fungus Organism-Whole)
(comment Fungus "The collection of fungi, the stationary, saprophytic, and symbiotic or parasitic eukaryotic organisms constituting an instance of BiologicalKingdom in many systems of classification.  Fungus includes as subsets the collections Mushroom, Yeast, and RingwormFungus.  Unlike most other instances of Plant, mushrooms are incapable of performing processes of Photosynthesis.")

;;; FurniturePiece
(isa FurniturePiece ExistingObjectType)
(genls FurniturePiece HOCObject)
(genls FurniturePiece PhysicalDevice)
(genls FurniturePiece SolidTangibleProduct)
(comment FurniturePiece "A collection of durable artifacts which are used in HumanShelterConstructions to make human dwelling places more comfortable.  An instance of FurniturePiece is a whole piece of furniture, such as a table, chair, or chest of drawers; an arm of a sofa is not a FurniturePiece.  Its subsets can be classified according to the main functions their elements serve:  (1) providing support for people's bodies while they are seated or reclining (e.g., Bed-PieceOfFurniture, Sofa-PieceOfFurniture, FootStool, FixedTheatreSeat); (2) providing work/action surfaces (e.g., Desk-PieceOfFurniture, DiningRoomTable); (3) providing organized and/or protective storage for people's stuff (e.g., Dresser-PieceOfFurniture, Bookcase-PieceOfFurniture); (4) providing extra illumination or some other function in living and work areas (e.g., ElectricLamp).  Most pieces of furniture belong to the collection NonPoweredDevice (q.v.) in that they don't need any energy input in order to do their function.  
Note: Yes, of course lamps, fancy console TVs, hospital beds, etc. are exceptions to that last rule -- they require power. But in a sense they are really objects performing multiple independent functions.  A fancy console TV is a piece of furniture even when it's turned off; it just so happens to fulfill two roles, one as a piece of furniture and one as an appliance.  When it's turned on, in fact, its users are intended to stop noticing it as a piece of furniture.)")

;;; FusionEvent
(isa FusionEvent TemporalObjectType)
(isa FusionEvent DefaultDisjointScriptType)
(genls FusionEvent CreationEvent)
(comment FusionEvent "A collection of events.  In each FusionEvent, two or more objects fuse together, yielding a product.")

;;; GainingUserRights
(isa GainingUserRights TemporalObjectType)
(genls GainingUserRights TransferIn)
(genls GainingUserRights ChangeInUserRights)
(comment GainingUserRights "A collection of events.  In an instance of GainingUserRights, some Agent gains possession of something.  Thus, in such an event, that agent newly acquires a right (viz., some UserRightsAttribute) to use some item.  The item in question is identified as the objectOfPossessionTransfer, and the agent is the toPossessor (i.e., the one to whom the possession comes).  The Agent may or may not be a deliberateActors in the event; e.g., buying a car is done on purpose, but receiving a car as a gift isn't.  If either of those two events happen to you, though, it is an element of the collection GainingUserRights.")

;;; GammaRay
(isa GammaRay WavePropagationType)
(genls GammaRay ElectromagneticRadiation)
(comment GammaRay "A collection of events; a subset of ElectromagneticRadiation.  Each element of GammaRay is an instance of electromagnetic radiation that has a wavelength less than  1x10^-2 Angstroms.  Low power GammaRays overlap with high power XRays.")

;;; GaseousFn
(isa GaseousFn CollectionDenotingFunction)
(resultIsa GaseousFn TangibleStuffStateType)
(resultGenl GaseousFn GaseousTangibleThing)
(arg1Isa GaseousFn TangibleStuffCompositionType)
(comment GaseousFn "A CollectionDenotingFunction.  GaseousFn takes as an argument a collection COL, membership in which is based only on physical and/or chemical composition and not on any other property (see TangibleStuffCompositionType).  (GaseousFn COL) is the collection of elements of COL that are in the GaseousStateOfMatter.")

;;; GaseousStateOfMatter
(isa GaseousStateOfMatter StateOfMatter-SolidLiquidGaseous)
(comment GaseousStateOfMatter "A basic physical state of matter.  Gaseous objects are characterized at the macroscopic level by having diffuse boundaries (when outside of containers) and by great expandability and compressibility and (in some cases) combustability.  Examples  of things that typically have this attribute are: the Earth's ionosphere; the helium in a child's balloon; the highly compressed air in a diver's scuba tank.")

;;; GaseousTangibleThing
(isa GaseousTangibleThing TangibleStuffStateType)
(genls GaseousTangibleThing FluidTangibleThing)
(comment GaseousTangibleThing "A collection of tangible substances.  Each element of GaseousTangibleThing is a tangible thing which is in a GaseousStateOfMatter; i.e., its shapes would completely conform to the boundaries of a vessel containing it, and it is compressible.  Examples: TheAtmosphereQuaSinglePieceOfStuff, the helium filling a child's balloon, a cloud of poisonous gas released from an Iraqi weapons dump during the Gulf War.  Cf. FluidTangibleThing, LiquidTangibleThing.")

;;; GenValueFn
(isa GenValueFn ReifiableFunction)
(isa GenValueFn IndividualDenotingFunction)
(resultIsa GenValueFn ScalarInterval)
(arg1Isa GenValueFn IntervalBasedQuantitySlot)
(arg2Isa GenValueFn Collection)
(arg3Isa GenValueFn GenericAttribute)
(comment GenValueFn "GenValueFn is a Cyc function, in particular, an element of IndividualDenotingFunction.  It is used to denote an amount of a specified attribute that can be considered a generic value (very low, low, medium, high, or etc.) for members of the indicated group.  Thus, (GenValueFn PRED COL GEN) denotes the amount which can be considered the GEN value of PRED for members of the Collection COL.  Thus (GenValueFn heightOfObject BasketBallPlayer High) denotes the amount of distance which is a high height among basketball players.  See also GenericAttribute.")

;;; GenderOfLivingThing
(isa GenderOfLivingThing UnorderedAttributeType)
(isa GenderOfLivingThing SiblingDisjointAttributeType)
(genls GenderOfLivingThing AttributeValue)
(comment GenderOfLivingThing "The collection of genders that organisms can have.")

;;; GeneralMicrotheory
(isa GeneralMicrotheory ObjectType)
(isa GeneralMicrotheory MicrotheoryType)
(genls GeneralMicrotheory Microtheory)
(comment GeneralMicrotheory "The collection consisting of every Microtheory intended to contain general axioms useful for multiple purposes.  This excludes microtheories which deal with specific situations, such as instances of ProblemSolvingCntxt, microtheories that represent the information content of one specific InformationBearingObject such as the US Declaration of Independence.  Examples of this collection are HumanSocialLifeMt, BuyingMt, and NaiveAnimalsMt.")

;;; GeneralizedTransfer
(isa GeneralizedTransfer TemporalObjectType)
(isa GeneralizedTransfer DefaultDisjointScriptType)
(genls GeneralizedTransfer Event)
(comment GeneralizedTransfer "This collection is a subset of Event.  Each element of GeneralizedTransfer is a general kind of transfer event, in which something (tangible or intangible) is transferred from one `place' to another.  GeneralizedTransfer includes changes in physical location, in ownership or possession, transfer of information, and propagation of wave phenomena through space.  See also the related predicate transferredThing, and the specialized subsets of this collection.")

;;; GenericAttribute
(isa GenericAttribute PrimitiveAttributeType)
(genls GenericAttribute ScalarInterval)
(comment GenericAttribute "GenericAttribute is a collection of basic attributes, such as Low, Medium, High, etc., which are applicable to a wide range of topics.")

;;; GenericValueFunction
(isa GenericValueFunction RelationType)
(genls GenericValueFunction ReifiableFunction)
(genls GenericValueFunction IndividualDenotingFunction)
(comment GenericValueFunction "A collection of Cyc functions; a subset of IndividualDenotingFunction.  Each element of GenericValueFunction is a function that can be applied to an element of PrimitiveAttributeType and returns some `generic' amount (e.g., high, medium, low) of that attribute.  Such functions are particularly useful for qualitative, hard-to-quantify attribute types, e.g., Happiness, Fragility, Absorbency, Glamor, etc.  They save us from having to create individually the various levels of attributes like Happiness, Fragility, etc.  Instead, for example, we need only refer to (HighAmountFn Happiness) as an alternative to painstakingly reifying `HighHappiness' and hand-entering all the formulas that such a constant requires (e.g. isa, followingValue, etc.). The compositionality afforded by the elements of GenericValueFunction allows this overhead to be taken care of automatically.")

;;; GeneticCondition
(isa GeneticCondition PhysiologicalConditionType)
(genls GeneticCondition ChronicCondition)
(genls GeneticCondition CongenitalCondition)
(genls GeneticCondition PhysiologicalCondition)
(comment GeneticCondition "A collection of physiological conditions.  An instance of GeneticCondition is an abnormal condition which developed in a particular organism due to that organism's genetic configuration.  Such conditions are not contagious as infections are, but they may be hereditary.  They are often harmful, in fact they are often AilmentConditions, such as encephalitis.  Occasionally, though the mutation is beneficial, in which case it would be wrong to also label it an AilmentCondition.")

;;; GeographicalDirection
(isa GeographicalDirection ObjectType)
(genls GeographicalDirection TerrestrialDirection)
(genls GeographicalDirection UnitVectorInterval)
(genls GeographicalDirection DirectionExpression)

;;; GeographicalRegion
(isa GeographicalRegion ExistingObjectType)
(genls GeographicalRegion Surface-Physical)
(genls GeographicalRegion Place)
(comment GeographicalRegion "A collection of spatial regions that include some piece of the surface of PlanetEarth.  Each element of GeographicalRegion is a PartiallyTangible entity that may be represented on a map of the Earth.  This includes both purely topographical regions like mountains and underwater spaces, and those defined by demographics, e.g., countries and cities.  In all cases, though, note that the 'region' in question must contain some tangible component with which it is possible to make physical contact.  The elements of GeographicalRegion contrast in this respect with the elements of GeographicalThing-Intangible, which are wholly 'imaginary'.  Examples of GeographicalRegions: CityOfPittsburghPA, RockyMountainStates-USRegion, the Bahamas, YaleUniversity, SinaiPeninsula.  Some important types of regions are represented by the subsets GeopoliticalEntity, LanguageArea, TimeZone, PostalCodeRegion, EcologicalRegion, ConstructionSite.  No elements of GeographicalRegion are wholly indoor locations.")

;;; GeometricThing
(isa GeometricThing ObjectType)
(genls GeometricThing MathematicalObject)
(genls GeometricThing SpatialThing)
(comment GeometricThing "A collection of mathematical objects.  Each element of GeometricThing is a spatial thing that can be described mathematically.  GeometricThing includes abstract shapes of various dimensions (hence points, lines, curves, polygons, polyhedra), tensors, frames of reference, angles, etc.")

;;; GeopoliticalEntity
(isa GeopoliticalEntity ExistingObjectType)
(genls GeopoliticalEntity LegalAgent)
(genls GeopoliticalEntity GeographicalRegion)
(comment GeopoliticalEntity "A collection of geographical regions.  Each element of GeopoliticalEntity is a `thick' geographical region, in other words, a politically defined geographical region taken together with its government, people, artifical habitats, etc.  Important subsets include Country, IndependentCountry, State-Geopolitical, City, Province.  Examples: CityOfTokyoJapan, BoroughOfBronxNY, Alaska-State, Rwanda, Singapore, InnerMongolia, SomershireCountyEngland, Taiwan-RepublicOfChina.  Although the name GeopoliticalEntity may suggest, elements are not necessarily elements of Entity.")
(synonymousExternalConcept GeopoliticalEntity SENSUS-Information1997 "GEOPOLITICAL-ENTITY")

;;; Gesture
(isa Gesture TemporalStuffType)
(genls Gesture Situation)
(genls Gesture VisualInformationSource)
(comment Gesture "A collection of configurations; a subset of VisualInformationSource.  Each element of Gesture is a configuration of animal body parts that has some meaning to an observer with an understanding of the interpretive convention.  A gesture may include some tool or prop.  Gestures may be fleeting (e.g., a hello wave) or may last a long time (e.g., the gesture embodied in the StatueOfLiberty).  Note that, as defined in Cyc, a gesture is a meaningful configuration of body parts, NOT the actions producing the arrangement; for representation of the actions, see MakingAGesture.")

;;; GiftGiving
(isa GiftGiving TemporalObjectType)
(isa GiftGiving DefaultDisjointScriptType)
(genls GiftGiving GivingSomething)
(comment GiftGiving "A collection of events.  In an instance of GiftGiving, one Agent intentionally gives all use rights over an object (see UserRightsAttribute) to another Agent without taking payment in return.")

;;; GivingSomething
(isa GivingSomething TemporalObjectType)
(isa GivingSomething DefaultDisjointScriptType)
(genls GivingSomething TransferringPossession)
(genls GivingSomething AnimalActivity)
(comment GivingSomething "A collection of events.  In an instance of GivingSomething, one Agent gives a tangible thing to another Agent.  Every GivingSomething event can also be thought of as a receiving event.  
Note: The common case in which one Agent gives ownership of an object to another Agent is represented by the subset GiftGiving.")

;;; Glass
(isa Glass TangibleStuffCompositionType)
(genls Glass InanimateThing)
(genls Glass TangibleThing)
(comment Glass "A collection of tangible things.  Each element of Glass is a piece of glass; e.g., a wine bottle, a plate glass window, a microscope slide, a crystal water goblet, the mirrors of a reflecting telescope.")

;;; Goal
(isa Goal StuffType)
(genls Goal MentalObject)
(comment Goal "Each element of this collection is a state of affairs that some Agent prefers would hold; moreover, the agent is/will be taking steps to achieve (or maintain) that state of affairs.  A Goal may be a reified Cyc constant, or may be represented by a CycFormula.   Some subsets of Goal (that is, some classes of goals) include: species preservation (PreservingOwnSpecies), self-preservation (PreservingSelf), accomplishing a milestone (Milestone), avoiding hunger (HungerAvoidanceGoal), etc.")

;;; GoingToSleep
(isa GoingToSleep TemporalObjectType)
(isa GoingToSleep DefaultDisjointScriptType)
(genls GoingToSleep IntrinsicStateChangeEvent)
(genls GoingToSleep SingleDoerAction)
(genls GoingToSleep AnimalActivity)
(comment GoingToSleep "The collection of events in which an Animal goes from the state of being awake to being in a state of sleep.")

;;; GolfCart
(isa GolfCart ProductType)
(isa GolfCart ExistingObjectType)
(genls GolfCart TransportationDevice-Vehicle)
(genls GolfCart LandTransportationDevice)
(comment GolfCart "The collection of all motorized vehicles that are designed for golfers to use to drive around on GolfCourses while they are playing GolfGames.  GolfCarts drive very slowly compared with Automobiles.")

;;; GovernmentCOC
(isa GovernmentCOC ExistingObjectType)
(isa GovernmentCOC MicrotheoryType)
(genls GovernmentCOC FormalCOC)
(comment GovernmentCOC "A collection of microtheories; a subset of FormalCOC (the set of formal codes of conduct).  Each instance of GovernmentCOC is a formal regulation of behavior imposed upon agents -- including citizens, tourists, businesses, government entities, etc., in so far as they are subject to it -- who are located within the legal jurisdiction where that code of conduct holds.  GovernmentCOC includes both individual laws and whole legal codes.  Some examples of GovernmentCOC include: the Napoleonic Code, the United States Constitution and all Federal, State, and local laws of the United States, and the particular laws against stealing found in most, if not all, countries.  Enforcement of a particular instance of GovernmentCOC is authorized by the government associated with that code and carried out by its agents within their jurisdiction(s).  See also LegalCode and Law.")

;;; GovernmentFn
(isa GovernmentFn IndividualDenotingFunction)
(isa GovernmentFn ReifiableFunction)
(resultIsa GovernmentFn RegionalGovernment)
(arg1Isa GovernmentFn GeopoliticalEntity)
(comment GovernmentFn "The Cyc function GovernmentFn is an IndividualDenotingFunction.  Given an element of GeopoliticalEntity as its single argument, GovernmentFn forms a non-atomic term (NAT) used to denote the element of RegionalGovernment that governs that geopolitical entity.  (GovernmentFn REGION) is the NAT used to denote the government of REGION.  For example, what is denoted by UnitedStatesFederalGovernment is the same as -- i.e., equals -- what is denoted by (GovernmentFn UnitedStatesOfAmerica).  See also government.")

;;; GovernmentLeaderNote
(isa GovernmentLeaderNote SharedNote)
(comment GovernmentLeaderNote "The distinction between HeadOfGovernment and HeadOfState is a subtle one.  HeadOfGovernment is the set of Leaders who actually run the government.  HeadOfState is the set of Leaders who are mainly ceremonial figures, fulfilling diplomatic roles such as hosting foreign dignitaries.  For a given Country, these two roles may be filled by the same person, such as BillClinton for the UnitedStatesOfAmerica in 1996, or by two separate individuals; for example, in 1996 the HeadOfState for GreatBritain would be QueenElizabethII, while the HeadOfGovernment would be John Major (PrimeMinister-HeadOfGovernment).  Cyc constant names indicate which government role is associated with a particular title; e.g., Sultan-HeadOfGovernment vs. Sultan-HeadOfState.")

;;; GovernmentMilitaryOrganization
(isa GovernmentMilitaryOrganization ExistingObjectType)
(genls GovernmentMilitaryOrganization LegalGovernmentOrganization)
(genls GovernmentMilitaryOrganization MilitaryOrganization)
(comment GovernmentMilitaryOrganization "The collection of all MilitaryOrganizations which belong to, and are directed by, the governing body of a geographical region or international organization.  The government organization may be a national government, state or provincial government, or an international governing body such as the UnitedNationsOrganization.  The military forces may include armies, navies, air forces, military border patrols, coast guards, etc.  This collection excludes private armies and mercenary forces.")

;;; GovernmentOfCountry
(isa GovernmentOfCountry ExistingObjectType)
(genls GovernmentOfCountry RegionalGovernment)
(comment GovernmentOfCountry "A collection of regional government organizations.  An element of GovernmentOfCountry is the government of some element of Country; e.g., UnitedStatesFederalGovernment.  See also the Cyc function GovernmentFn, which can be used to refer to the government of a political region.  The governments of smaller regions within a country may or may not be subOrganizations of that country's government; in `federal' systems the smaller regions often have partly autonomous governments, as do the elements of State-UnitedStates.")

;;; Gram
(isa Gram UnitOfMass)
(isa Gram UnitOfMeasureNoPrefix)
(isa Gram CGSUnitOfMeasure)
(resultIsa Gram Mass)
(resultIsa Gram ScalarInterval)
(argsIsa Gram CycSystemRealNumber)
(comment Gram "The measurement function used in Cyc to represent the gram used within the Metric system to measure mass.  See also CGSUnitOfMeasure, UnitOfMeasure.")

;;; Granular
(isa Granular PhysicalStructuralAttribute)
(genlAttributes Granular Pourable)
(comment Granular "A physical attribute.  Granular is the PhysicalStructuralAttribute that describes a solid  that consists of granules and has a grainy texture; e.g., sand, sugar, salt.")

;;; GraspingImplement
(isa GraspingImplement ExistingObjectType)
(genls GraspingImplement HandTool)
(comment GraspingImplement "A collection of tools.  An instance of GraspingImplement is a tool which is intended to be used to grasp (and often to subsequently immobilize or control the location/movement of) some other solid object.  Examples include each Vise, each pair of Forceps, each MonkeyWrench, each pair of Tweezers, etc.  But not a balloon, a syringe, a doorstop, a cage, etc.  A marginal positive example would be a magnetic tool designed to pick up something without actually touching it.")

;;; GraspingSomethingWithATool
(isa GraspingSomethingWithATool TemporalStuffType)
(isa GraspingSomethingWithATool DefaultDisjointScriptType)
(genls GraspingSomethingWithATool HandlingADevice)
(comment GraspingSomethingWithATool "A collection of the events in which a tool is used to grasp some object.")

;;; Gratitude
(isa Gratitude FeelingAttributeType)
(genls Gratitude FeelingAttribute)
(comment Gratitude "A feeling of appreciation towards another agent for a benefit or favor received from him/her.  This is a Collection --- for an explanation of that, see Happiness.")

;;; GreetingSomeone
(isa GreetingSomeone TemporalObjectType)
(isa GreetingSomeone DefaultDisjointScriptType)
(genls GreetingSomeone CommunicationAct-Single)
(genls GreetingSomeone SociabilityBasedAction)
(comment GreetingSomeone "The collection of actions performed by one Agent to greet another.  Includes verbal and physical greetings.")

;;; Grilled
(isa Grilled PreparationAttribute)
(genlAttributes Grilled Cooked)
(comment Grilled "The attribute Grilled is a specialized form of Cooked.  Food that is Grilled has been prepared in an event of GrillingFood, using a BBQGrill or an ElectricGrill.")

;;; GrillingFood
(isa GrillingFood ScriptType)
(genls GrillingFood CookingFood)
(comment GrillingFood "Cooking food on a BBQGrill or an ElectricGrill.")

;;; GroundsOfOrganization
(isa GroundsOfOrganization ExistingObjectType)
(genls GroundsOfOrganization OutdoorLocation)
(genls GroundsOfOrganization GeographicalRegion)
(genls GroundsOfOrganization RealEstate)
(comment GroundsOfOrganization "A collection of smallish geographical regions.  Each element of GroundsOfOrganization is an area which contains buildings inhabited by some organization.  Examples: the campus of the UniversityOfTexasAtAustin or the grounds of SetonNorthwestHospital.
Note that the `grounds' of an organization, especially an organization with urban locations, might not include a yard.")

;;; Group
(isa Group ObjectType)
(genls Group TemporalThing)
(genls Group Individual)
(genls Group Situation)
(comment Group "A collection of objects.  Each element of Group is a composite object, made up of individual members which may be either events or objects.  A group is related to its members by the predicate groupMembers (q.v.).  Note that elements of Group are NOT collections; consider: a group has temporal extent and may have spatial extent and location, while a collection is timeless and abstract.  Nonetheless, it is possible to define a collection parallel to any group, so that the groupMembers of that group are also instances (isa's) of the correlated collection; e.g., each toe on my left foot is both an element of the collection of my left toes and a member of the group of toes on my left foot.  But that group (of my left toes) is a spatiotemporal thing, while the correlated collection (of my left toes) is NOT.  Another example: if I consider a certain flock of pigeons as having a location, a spatial extent, and a time of existence, then I am considering (the pigeon flock) a group and NOT a collection.  As a default, a group whose groupMembers are elements of SomethingExisting is itself an element of SomethingExisting; and a group whose groupMembers are elements of Event is itself an element of Event.  Finally, unlike a collection, a group cannot be empty; a group must have some groupMembers, or there is no group (at that point in time).  Examples of Group: QueensGuard, ThreeWiseMen, SantasReindeer, InternationalCommunity.")

;;; GroupFn
(isa GroupFn CollectionDenotingFunction)
(resultIsa GroupFn ObjectType)
(resultGenl GroupFn Group)
(arg1Isa GroupFn ObjectType)
(comment GroupFn "GroupFn is a Cyc CollectionDenotingFunction.  GroupFn is used for referring to specializations of Group; esp. note that applications of GroupFn produce COLLECTIONS (of groups), not individual groups.  GroupFn takes any element of ObjectType as its argument and returns a subset of Group, namely the collection containing those groups whose groupMembers are elements of that ObjectType.  (GroupFn OBJ-TYPE) denotes the collection of all groups whose members belong to (isa) OBJ-TYPE. For example, (GroupFn BallisticMissile) represents the collection of all groups of ballistic missiles, e.g., Russia's ballistic missiles, China's ballistic missiles, the U.S.'s ballistic missiles, etc.  Another example: A group of 101 (particular) Dalmatians isa (GroupFn Dog).  Collections of groups of events may also be denoted; e.g., Columbus's voyages to North America constitute a group (of events) which isa (GroupFn Travel-TripEvent).")

;;; Guest
(isa Guest HumanCyclist)

;;; GuidingAMovingObject
(isa GuidingAMovingObject TemporalStuffType)
(isa GuidingAMovingObject ScriptType)
(genls GuidingAMovingObject ControllingSomething)
(genls GuidingAMovingObject Movement-TranslationEvent)
(comment GuidingAMovingObject "A collection of events; a subset of both ControllingSomething and Movement-TranslationEvent.  An instance of GuidingAMovingObject is an event in which an agent guides or steers an object which is in motion.  For example, someone steering a car or a motorcycle, controlling a surfboard, or flying a kite.  If all you `guide' is a rotation, then that is not quite a GuidingAMovingObject event.  Also, if no motion actually takes place, then it would be stretching things to call that a `guiding.'  So a marginal example is Running (you are guiding yourself) and two marginal non-examples are:  spinning in place, and running in place.")

;;; Guilt
(isa Guilt FeelingAttributeType)
(genls Guilt Shame)
(comment Guilt "Negative, self-accusatory feeling of responsibility and blameworthiness for having caused harm by a past action, usually with conscious intent.  Note that this is not `guilty vs. innocent', but rather the feeling of guiltiness.  An unremorseful killer, though guilty (as opposed to innocent) of the murder, may not feel any Guilt (i.e., guiltiness) about it.    This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; Gulf
(isa Gulf ExistingObjectType)
(genls Gulf BodyOfWater)
(comment Gulf "A collection of topographical features.  Each element of Gulf is a part of a sea extending into a land mass.  Many gulfs are the outlet for a large river system.   Examples of Gulf include the SaronicGulf, GulfOfMexico, GulfOfArkangelsk, GulfOfCalifornia, and PersianGulf.")

;;; Gusty
(isa Gusty WeatherAttribute)
(comment Gusty "A WeatherAttribute indicating that the wind at an OutdoorLocation is subject to sudden changes in direction and intensity.")

;;; HOCObject
(isa HOCObject ExistingObjectType)
(genls HOCObject Artifact)
(comment HOCObject "A collection of artifacts.  HOCObject is a very general collection for all artifacts that are found in places where humans live or work, i.e., in some element of HumanOccupationConstruct (= HOC).  Since these objects are considered to be found indoors, they are all roughly `human-sized'.  Elements include everything from furniture to tools, appliances to artwork, medical examining tables to church altars and pews.")

;;; HPKB-User
(isa HPKB-User HumanCyclist)
(comment HPKB-User "The default Cyclist in the HPKB release.")

;;; HailProcess
(isa HailProcess TemporalStuffType)
(genls HailProcess PrecipitationProcess)
(comment HailProcess "The collection of instances of PrecipitationProcess in which solid particles or small chunks of water ice fall to the earth from clouds.")

;;; HailStone
(isa HailStone ExistingObjectType)
(genls HailStone 
  (SolidFn Water))
(genls HailStone PrecipitationParticle)
(comment HailStone "The collection of solid particles or small chunks of ice emitted from clouds in instances of HailProcess.")

;;; Hand
(isa Hand SymmetricAnatomicalPartType)
(genls Hand Appendage-AnimalBodyPart)
(comment Hand "The collection of all terminal parts of a Vertebrate forelimb which are structurally suited to function as a grasping organ (as in people, newts, etc.).  E.g., FerdinandTheBull has his forelimbs end in hooves, which are not capable of grasping things, so those are NOT considered Hands.")

;;; HandTool
(isa HandTool ExistingObjectType)
(genls HandTool PortableObject)
(genls HandTool Tool)
(genls HandTool Device-SingleUser)
(comment HandTool "The collection HandTool is a subset of Tool.  Each element of HandTool fills all the requirements for a generic tool, plus the requirement that a hand tool is a portable object which is hand-guided throughout its operation.  Examples include the elements of Screwdriver, ManualDrill, and BlowDryer.  See also Tool, PortableObject.")

;;; HandlingADevice
(isa HandlingADevice TemporalStuffType)
(isa HandlingADevice DefaultDisjointScriptType)
(genls HandlingADevice HumanActivity)
(genls HandlingADevice HandlingAnObject)
(comment HandlingADevice "A collection of Events; a subset of HandlingAnObject.  An instance of HandlingADevice is an event in which a device is manipulated (with the operator holding and touching the device) in order to use it for its primaryFunction.  Instances include elements of the subsets Pruning, PlayingAMusicalInstrument, OperatingAHouseholdAppliance, PumpingGasEvent, WritingByHand, and many more.  Just carrying pruning shears around is not a HandlingADevice event.")

;;; HandlingAnObject
(isa HandlingAnObject TemporalStuffType)
(isa HandlingAnObject DefaultDisjointScriptType)
(genls HandlingAnObject ActionOnObject)
(genls HandlingAnObject PhysicalContactSituation)
(genls HandlingAnObject ControllingSomething)
(comment HandlingAnObject "A collection of events; a subset of both ControllingSomething and PhysicalContactEvent.  An instance of HandlingAnObject is an event in which an object is touched and manipulated by some Agent.  Examples of HandlingAnObject include instances of  HoldingAnObject and of CausingAnotherObjectsTranslationalMotion.  So just holding a rock in your hand is a HandlingAnObject; so is washing your cereal bowl (an instance of WashingDishes), cutting a loose thread on your shirt (an instance of CuttingAThread), and carrying the rock from one place to another (an instance of CarryingWhileLocomoting.)  One very important class of HandlingAnObject instances involve operating some hand-held device --- i.e., events which are instances of the collection HandlingADevice.   I.e., the performer handles an object which happens to be a device, but not just lugging it around but actually employing it for its intended primaryFunction --- not merely to look at it or rearrange or relocate it.  For example, if you move a fork from the dishwasher to the silverware drawer, that's just HandlingAnObject; if you use that fork to eat some food, though, that is an instance of HandlingADevice.")

;;; Happiness
(isa Happiness FeelingAttributeType)
(genls Happiness FeelingAttribute)
(comment Happiness "The enjoyment of pleasurable satisfaction that goes with well-being, security, effective accomplishments, or satisfied wishes.  As with all FeelingAttributeTypes, this is a Collection -- the set of all possible amounts of happiness one can feel.  One instance of Happiness is `extremely happy'; another is `just a little bit happy'.  
Note:  Obviously there are no real units of measure for this quantity, ways of objectively measuring the amount of happiness possessed or gained or lost, etc., but still this has proven to be a useful way for Cyc to represent and reason with emotions.  E.g., one can have a rule that says that most people have a greater `amount' of happiness at their wedding than at their high school graduation, etc.  There are functions, such as LowAmountFn, which take a PrimitiveAttributeType (such as the instances of FeelingAttributeType) such as Happiness and return as their value a certain-sized amount of that feeling; e.g., (LowAmountFn Happiness) is an expression whose value is a positive but small amount of happiness, and that in turn will be an element of Happiness (and also will be an element of FeelingAttribute and an element of AttributeValue, etc.)  FeelingAttributeTypes organize into a lattice; e.g., there are several more specialized forms of Happiness that are present in Cyc's ontology, such as Elation, Delight, Triumph-TheFeeling, etc.")

;;; Harbor
(isa Harbor ExistingObjectType)
(genls Harbor OutdoorLocation)
(genls Harbor BodyOfWater)
(comment Harbor "The collection of those parts of a BodyOfWater, each of which is protected from the open sea and deep enough to furnish fairly safe anchorage.")

;;; HardcopyInformationBearingObject
(isa HardcopyInformationBearingObject ExistingObjectType)
(genls HardcopyInformationBearingObject Artifact)
(genls HardcopyInformationBearingObject InformationBearingObject)
(comment HardcopyInformationBearingObject "A collection of information bearing objects (IBOs).  Each element of HardcopyInformationBearingObject is an IBO in a `hard' format, e.g., written on paper, on wood, on palm leaves, engraved in metal, carved on stone.  Humans can read hardcopy IBOs without using a computer or electronic device to access them.  Thus, HardcopyInformationBearingObject does NOT include the tangible IBOs which are embodied in magnetic media (e.g., data or music on tapes or disks).  Examples of HardcopyInformationBearingObject: a billboard, a greeting card, a restaurant check, a magazine, an engraving by Rembrandt, a ten dollar bill, a price tag.")

;;; Hardness
(isa Hardness MaterialStrengthType)
(genls Hardness ScalarInterval)
(genls Hardness PhysicalAttribute)
(comment Hardness "A collection of attributes; a subset of PhysicalAttribute.  Each element of Hardness is an attribute describing how much pressure a tangible material can withstand before deforming or fragmenting.  Hardnesses may be characterized using a GenericValueFunction (q.v.), or relative to certain substances, e.g., HardAsARock.  Hardnesses of objects are reported using the predicate hardnessOfObject.")

;;; HardwareTool
(isa HardwareTool ExistingObjectType)
(genls HardwareTool Tool)
(genls HardwareTool SolidTangibleProduct)
(genls HardwareTool PhysicalDevice)
(comment HardwareTool "A collection of tools.  An instance of HardwareTool is an object used to perform a task, usually by applying a particular kind of force on another object.  The tool is used to produce a physical effect in the position, structure, or arrangement of the other object.  Subsets of HardwareTool include Hammer, Screwdriver, HandSaw.  An electric drill is also a HardwareTool.  Borderline nonexamples include eating utensils, robot servants, screws, nails, and levers.")

;;; HarvestingAPlant
(isa HarvestingAPlant TemporalObjectType)
(isa HarvestingAPlant ScriptType)
(genls HarvestingAPlant DirectedTranslation)
(genls HarvestingAPlant RemovingSomething)
(genls HarvestingAPlant TransportationEvent)
(genls HarvestingAPlant HumanActivity)
(comment HarvestingAPlant "A collection of events.  Each instance of HarvestingAPlant is an event in which a plant is harvested.  Harvesting may involve separating some part of the plant and leaving the rest in place (e.g., fruit trees), or it may involve removing the entire plant from its growing location (e.g., carrots).")

;;; Hat
(isa Hat ProductType)
(isa Hat ExistingObjectType)
(genls Hat ClothingAccessory)
(comment Hat "A collection of objects.  Each element of Hat is either a hat or other headgear or hatlike object.  Subsets include Helmet, SwimmingCap, and Sombrero.")

;;; Hate
(isa Hate FeelingAttributeType)
(genls Hate Dislike)
(genls Hate Contempt)
(genls Hate Hostility)
(comment Hate "An intense feeling of hostility and aversion, usually deriving from fear, anger, or a sense of injury, and usually coupled with enmity and malice.  This is a Collection --- for an explanation of that, see Happiness.")

;;; HavingAMeal
(isa HavingAMeal TemporalObjectType)
(isa HavingAMeal DefaultDisjointScriptType)
(genls HavingAMeal PurposefulAction)
(genls HavingAMeal HumanActivity)
(genls HavingAMeal DestructionEvent)
(comment HavingAMeal "A collection of events.  Each element of HavingAMeal is an event in which one or more diners consume a meal.  In addition to HavingBreakfast, HavingLunch, and HavingDinner, this includes HavingASnack (among other subsets).  Typically, instances of HavingAMeal include people eating some food and drinking one or more beverages.")

;;; Head-AnimalBodyPart
(isa Head-AnimalBodyPart UniqueAnatomicalPartType)
(isa Head-AnimalBodyPart AnimalBodyPartType)
(genls Head-AnimalBodyPart SolidTangibleThing)
(genls Head-AnimalBodyPart AnimalBodyPart)
(comment Head-AnimalBodyPart "The collection of all heads of Animals.
[Note: the hyphenated name reflects the need to have other terms in the knowledge base like Head-Vertebrate, representing a subset of this set, about which some useful specialized information is stated.]")

;;; Head-Vertebrate
(isa Head-Vertebrate UniqueAnatomicalPartType)
(genls Head-Vertebrate BiologicalLivingObject)
(genls Head-Vertebrate Head-AnimalBodyPart)
(comment Head-Vertebrate "The collection of all heads of Vertebrates (animals with backbones).  Vertebrate heads all have faces (see FaceOfAnimal) and connect to the animal's torso via a neck; these things are not generally true for most non-vertebrates.")

;;; HeadOfGovernment
(isa HeadOfGovernment OccupationType)
(genls HeadOfGovernment Politician)
(comment HeadOfGovernment "A collection of persons.  Each element of HeadOfGovernment is a person who holds a political position as the titular head of the government in some element of Country.  Titles that such a person might hold include Prime Minister, President, Premier, King or Queen, Minister of State, Sultan, Chacellor, Chairman.  Examples: John Major, Benjamin Netanyahu, Bill Clinton.  See also titleOfHeadOfGovernment.  Cf. HeadOfState.")

;;; HeadOfState
(isa HeadOfState OccupationType)
(genls HeadOfState Politician)
(genls HeadOfState Leader)
(comment HeadOfState "A collection of persons.  Each element of HeadOfState is a person who holds a political position as the titular leader of some element of Country.  Titles that such a person might hold include President, Premier, Chairman, Sultan, King or Queen, Regent.  Examples of HeadOfState: BillClinton, QueenElizabethII, Yasser Arafat, Hirohito, Jiang Zemin.  See also titleOfHeadOfState.  Cf. HeadOfGovernment.")

;;; HealthProfessional
(isa HealthProfessional OccupationType)
(genls HealthProfessional Professional)
(comment HealthProfessional "The collection of all health-related professionals - including medical professionals as well as professionals not in the medical field.  For example, health inspectors.")

;;; Hearing
(isa Hearing TemporalStuffType)
(isa Hearing DefaultDisjointScriptType)
(genls Hearing Perceiving)
(comment Hearing "The collection of sensory Perceivings in which, by means of vibratory sensors, a PerceptualAgent hears something that is causing (or consisting of) sound waves, and thereby acquires information about it.  See also: ListeningDeliberately, the subset of Hearing events in which the aural stimulus is intentionally attended to.")

;;; Heart
(isa Heart UniqueAnatomicalPartType)
(isa Heart AnimalBodyPartType)
(genls Heart Organ)
(genls Heart MuscleTissue)
(comment Heart "The collection of all hearts.  A Heart is an Organ that pumps blood throughout the body of an Animal.")

;;; HeatingDevice
(isa HeatingDevice ExistingObjectType)
(genls HeatingDevice PhysicalDevice)
(comment HeatingDevice "A collection of physical devices.  The set of PhysicalDevices whose primaryFunction is to generate heat to raise the temperature of something else.  The stuff being heated might be gaseous (air in a room or a hair dryer), liquid (water in a pool or hot water tank), or solid (food in an oven, hair with a curling iron, plastic during its shaping, etc.)  An instance of HeatingDevice typically has some energy input, some way of converting that energy to heat, and some way of delivering the heat to the object(s) to be heated.  A borderline positive example of this is a device which absorbs heat during warm periods such as daytimes, and radiates it back out again during cool periods such as nighttimes.  Note that heating must be a primary function of the device; no matter how little you think of your personal computer, it is not a HeatingDevice.")

;;; HeatingProcess
(isa HeatingProcess TemporalStuffType)
(isa HeatingProcess DefaultDisjointScriptType)
(genls HeatingProcess TemperatureChangingProcess)
(comment HeatingProcess "HeatingProcess is a specialization of TemperatureChangingProcess -- that is, (genls HeatingProcess TemperatureChangingProcess).  During each HeatingProcess event, the temperature of the objectOfStateChange is increased by applying heat to the object.")

;;; HeavenlyBody
(isa HeavenlyBody ExistingObjectType)
(genls HeavenlyBody AstronomicalObject)
(genls HeavenlyBody PartiallyTangible)
(comment HeavenlyBody "A collection of tangible objects.  Each element of HeavenlyBody is an astronomical object located in outer space (including the Earth).  Elements of HeavenlyBody are natural bodies, NOT artificially made objects such as spaceships or communications satellites.  Examples: the Sun, Polaris-TheStar, PlanetPluto, MoonOfEarth.")

;;; Helicopter
(isa Helicopter ProductType)
(isa Helicopter ExistingObjectType)
(genls Helicopter TransportationDevice-Vehicle)
(genls Helicopter ContainerProduct)
(genls Helicopter AirTransportationDevice)
(comment Helicopter "The collection of rotary wing, self-powered mechanical devices that fly.")

;;; HemispheresAndCalendars
(isa HemispheresAndCalendars SharedNote)
(comment HemispheresAndCalendars "CalendarSeasons are defined by the Gregorian calendar and are synchronized with the equinoxes and solstices.  SeasonOfYear instances are climatic seasons, events characterized by the weather in a given region.  The relationship between SeasonOfYear instances and CalendarSeasons depends upon the hemisphere (or, more precisely, upon the lattitude.)  In the northern hemisphere, north of the tropics, a CalendarSummer will significantly intersect with the a SummerSeason each year.   But in the southern hemisphere, that same CalendarSummer (which is the same in both hemispheres) will intersect with what is locally, weatherwise, a WinterSeason.")

;;; Herbivore
(isa Herbivore ExistingObjectType)
(genls Herbivore Animal)
(comment Herbivore "The collection of animals that do not eat other animals, or parts of animals, but instead eat plants or plant parts.  Ruminant and its subsets Deer and Sheep are subsets of Herbivore.")

;;; HerdAnimal
(isa HerdAnimal ExistingObjectType)
(genls HerdAnimal Animal)
(comment HerdAnimal "A subset of Animal; the collection of all large plant-eating animals that travel and graze in social

groups.  Elements of HerdAnimal also belong to Herbivore; they include most instances of Ruminant and may also include

Triceretops.")

;;; Hertz
(isa Hertz UnitOfFrequency)
(isa Hertz StandardUnitOfMeasure)
(isa Hertz UnitOfMeasureNoPrefix)
(resultIsa Hertz Frequency)
(resultIsa Hertz Rate)
(resultIsa Hertz ScalarInterval)
(argsIsa Hertz CycSystemRealNumber)
(comment Hertz "A Cyc function, specifically an IndividualDenotingFunction.  Hertz represents the basic unit of measure for elements of Frequency (1 Hz=1 cycle per second).  (Hertz NUM) denotes the frequency NUM cycles per second.")

;;; HighAmountFn
(isa HighAmountFn GenericValueFunction)
(resultIsa HighAmountFn ScalarInterval)
(arg1Isa HighAmountFn PrimitiveAttributeType)
(arg1Genl HighAmountFn ScalarInterval)
(comment HighAmountFn "HighAmountFn is a Cyc function, in particular, an element of IndividualDenotingFunction.  It is one of several functions used to denote so-called generic values for a wide variety of attributes.  When ATT is a type of attribute, (HighAmountFn ATT) returns an instance of ATT which is considered `a high amount of' ATT in the current context.  A high amount of ATT is more than (MediumAmountFn ATT) but less than (VeryHighAmountFn ATT).")

;;; Highway
(isa Highway ExistingObjectType)
(genls Highway PathForWheeledVehicles)
(comment Highway "The subcollection of PathForWheeledVehicles that contains all highways, inside or outside cities.")

;;; HindiLanguage
(isa HindiLanguage LivingLanguage)
(comment HindiLanguage "Language spoken in the Indic area.")

;;; Holdings
(isa Holdings ExistingObjectType)
(genls Holdings Group)
(comment Holdings "A collection of sets of objects, tangible or intangible, which have some special financial, scientific, cultural, or educational value.  An instance of Holdings is a set of objects kept and usually maintained by some agent for their value, or to preserve the objects, or to make them available for public display or use (as in a museum's `holdings' or a library's `holdings').  The elements in a group of holdings may or may not be all of a similar type (e.g., books, paintings).  An agent's holdings may or may not all be kept in the same location.")

;;; Holiday
(isa Holiday ScriptType)
(isa Holiday TemporalObjectType)
(genls Holiday HumanActivity)
(genls Holiday Event)
(comment Holiday "Each Holiday is an Event wherein social celebrations and/or rituals are performed, typically lasting for one DaysDuration and typically coinciding with a CalendarDay.  While Holidays are often AnnualEvents, they may also be one-time events or scheduled in some other manner.  They are also contextual, as different nationalities, eras, etc. celebrate different ones.")

;;; HolidaySeason
(isa HolidaySeason TemporalObjectType)
(genls HolidaySeason Event)
(comment HolidaySeason "Instances of HolidaySeason are events which encompass the activities around a Holiday (or group of Holidays).  The clearest example is ChristmasSeason.  While the exact boundaries of a HolidaySeason may be vague, it is nonethless a useful concept; in fact, much of the usefulness comes from that very fuzziness: it is hard to define exactly, but there are many things worth saying about it.")

;;; Hope
(isa Hope FeelingAttributeType)
(genls Hope FeelingAttribute)
(comment Hope "Expectation of fulfillment or success.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; Horizon
(isa Horizon ExistingObjectType)
(genls Horizon Place)
(comment Horizon "The collection of all horizons, each being the far-off region within a few degrees of the horizontal plane, where the sky appears to join the distant landscape.   The horizon is always relative to a particular point of observation.")

;;; HorizontalDirection
(isa HorizontalDirection TerrestrialDirection)
(comment HorizontalDirection "The element of VectorInterval that comprises all the vectors which are perpendicular to Up-Directly and Down-Directly.")

;;; HorizontalOrientation
(isa HorizontalOrientation OrientationAttribute)
(comment HorizontalOrientation "(orientation OBJECT HorizontalOrientation) means that OBJECT is horizontal with respect to the current instance of FrameOfReference.  A linear (LongAndThin) object is horizontal if and only if its longest axis lies in the horizontal plane.  A planar (SheetShaped) object is horizontal if and only if its two longest axes lie in the horizontal plane.  Typically, horizontal objects include dinner plates, mousepads, ice skating rinks, parking lots, and stratus clouds.")

;;; HorsePower
(isa HorsePower UnitOfPower)
(isa HorsePower UnitOfMeasureNoPrefix)
(resultIsa HorsePower PhysicalAttribute)
(resultIsa HorsePower ScalarInterval)
(argsIsa HorsePower CycSystemRealNumber)
(comment HorsePower "An english unit of power.  The power that, roughly, a single workhorse can continually supply")

;;; Hospital
(isa Hospital ExistingObjectType)
(genls Hospital MedicalCareInstitution)
(genls Hospital LocalCustomerContactPoint)
(genls Hospital MedicalCareOrganization)
(comment Hospital "Local (at one site) organizations composed of physicians, support personnel, and usually also administrators.  The main function of the organization is to provide medical care (short or long term) to a number of patients/clients, for a fee if the patient/client is able to pay.  A clinic services out-patients, while a hospital has in-patients.  A hospital may have a clinic as a sub-organization, though.")

;;; HospitalCareEvent
(isa HospitalCareEvent TemporalObjectType)
(isa HospitalCareEvent DefaultDisjointScriptType)
(genls HospitalCareEvent MedicalCareEvent)
(comment HospitalCareEvent "What happens when you are in the hospital being treated for a disease like Cancer or Hepatitis or AIDS, or recovering from Surgery.  This is not just a MedicalCareEvent which happens in a hospital; it's the whole event meant by a hospital stay.  Also see HospitalRoomStay which only represents the stay in the room.")

;;; HostileSocialAction
(isa HostileSocialAction TemporalStuffType)
(isa HostileSocialAction DefaultDisjointScriptType)
(genls HostileSocialAction PurposefulAction)
(genls HostileSocialAction SocialOccurrence)
(comment HostileSocialAction "The collection of all hostile or pugnacious events, adverse to someone, in which multiple agents take part, at least one of whom is acting deliberately.  See also PurposefulAction.  An element of this collection is AssassinationOfPresidentLincoln.")

;;; Hostility
(isa Hostility FeelingAttributeType)
(genls Hostility FeelingAttribute)
(comment Hostility "A feeling of strong antagonism towards another agent, organization, or group, sufficient to motivate harmful speech or actions against them.  This is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Hostility include feelings of Hate.")

;;; HotAirBalloon
(isa HotAirBalloon ProductType)
(isa HotAirBalloon ExistingObjectType)
(genls HotAirBalloon AirTransportationDevice)
(genls HotAirBalloon ContainerProduct)
(comment HotAirBalloon "The collection of all hot-air buoyant balloons, AirTransportationDevices that usually lack a motor or a means of steering.  Each consistes of a gas-bag into which hot air is introduced, and from which a basket or passenger compartment hangs.")

;;; HourFn
(isa HourFn IndividualDenotingFunction)
(isa HourFn NonPredicateFunction)
(resultIsa HourFn CalendarHour)
(arg1Isa HourFn NonNegativeInteger)
(arg2Isa HourFn CalendarDay)
(comment HourFn "(HourFn ?H ?D) denotes a CalendarHour -- in particular, hour number ?H (military time) of day ?D.  For example, (HourFn 18 (DayFn 14 (MonthFn February (YearFn 1966)))) denotes 6pm Feb. 14th, 1966")

;;; HourOfDayType
(isa HourOfDayType CyclicalIntervalGroupType)
(genls HourOfDayType TemporallyDisjointIntervalType)
(genls HourOfDayType TimeOfDayType)
(comment HourOfDayType "A collection of collections. Instances HourOfDayType are 24 canonical subsets of CalendarHour, such as TimeOfDay-8AM.  This is a proper subset of TimeOfDayType, which could include larger or smallers times of the day, such as `before noon' (which in Cyc in named TimeOfDay-AM).")

;;; HourlyWork
(isa HourlyWork WorkStatus)
(comment HourlyWork "An attribute; an element of WorkStatus.  The attribute of being paid an hourly rate for work done.")

;;; HoursDuration
(isa HoursDuration UnitOfTime)
(isa HoursDuration UnitOfMeasureNoPrefix)
(isa HoursDuration UnitOfMeasure)
(resultIsa HoursDuration ScalarInterval)
(resultIsa HoursDuration Time-Quantity)
(argsIsa HoursDuration CycSystemRealNumber)
(comment HoursDuration "This is a function that takes one or two numbers and returns, as its value, some amount of Time.  An expression of the form (HoursDuration ?min ?max) denotes a quantity of Time that is at least ?min hours and at most ?max hours.  (HoursDuration ?num) denotes a quantity of Time that is exactly ?num hours.")

;;; HouseholdAppliance
(isa HouseholdAppliance ExistingObjectType)
(genls HouseholdAppliance MechanicalDevice)
(genls HouseholdAppliance PoweredDevice)
(genls HouseholdAppliance HOCObject)
(comment HouseholdAppliance "A collection of devices, a subset of MechanicalDevice. It includes those mechanical devices typically found inside a HumanResidence.  An instance of HouseholdAppliance is a device used in one of the tasks typically carried on in a home, such as food preparation, food storage, laundry, household cleaning, personal cleaning, cooling or heating the house for comfort, etc.  Examples include elements of the collections Oven, Refrigerator, ClothesDryer,  VacuumCleaner, HotWaterHeater, Furnace.  Note that a bed, which naively is thought of as having no moving parts, is not a mechanical device, and hence not a HouseholdAppliance --- the same is true for most chairs, tables, sofas, and other articles of furniture.")

;;; HumanActivity
(isa HumanActivity TemporalObjectType)
(isa HumanActivity ScriptType)
(genls HumanActivity AnimalActivity)
(comment HumanActivity "A collection of events.  Each element of HumanActivity is an activity that is performed by some instance(s) of Person.")

;;; HumanAdult
(isa HumanAdult ConventionalClassificationType)
(isa HumanAdult ExistingObjectType)
(genls HumanAdult Person)
(genls HumanAdult AdultAnimal)
(comment HumanAdult "The collection of human beings old enough to participate as independent, mature members of society.  Since different societies have different age or maturity requirements for people to be considered adults, different axioms in various society-specific microtheories express these requirements.  For most modern, Western, middle-class,... purposes, e.g., the current view is that anyone over 18 is an adult.  In many cultures, adulthood occurs when one reaches puberty.  Adulthood is contiguousAfter childhood; that is, a Person is a HumanChild for a while, and then is a HumanAdult.")

;;; HumanChild
(isa HumanChild ExistingObjectType)
(genls HumanChild 
  (JuvenileFn Person))
(comment HumanChild "The collection of all Persons in the childhood stage of life.  Functionally, this ends when the child begins to take responsibility for themselves, work, have children of their own,... or, at latest, when the person's age greatly exceeds that at which most people reach those milestones.  Generally, this means that it spans the period from birth to teenage years.   This is highly dependent on context, of course; childhood in Shakespeare's culture ended around age 12.")

;;; HumanCultureType
(isa HumanCultureType Collection)
(genls HumanCultureType ConventionalClassificationType)
(genls HumanCultureType ExistingObjectType)
(comment HumanCultureType "A collection of all collections.  Each HumanCultureType is a set of Persons with its own distinctive culture.  Some elements of HumanCultureType are:  FrenchPerson, EthnicGroupOfAustralianAborigines, etc.")

;;; HumanCyclist
(isa HumanCyclist Collection)
(genls HumanCyclist Person)
(genls HumanCyclist Cyclist)
(comment HumanCyclist "Cyclists who are also human (not androids)")

;;; HumanFamilyNameString
(isa HumanFamilyNameString IDStringType)
(genls HumanFamilyNameString IDString)
(genls HumanFamilyNameString HumanNameString)
(comment HumanFamilyNameString "The collection of family name strings such as ``Lenat'', ``Jones'', etc., which are given as last names (in most Western countries), usually at birth.
Note: elements of this collection are really just character strings, not concepts like TheNameSmith that represent character strings.")

;;; HumanGivenNameString
(isa HumanGivenNameString IDStringType)
(genls HumanGivenNameString IDString)
(genls HumanGivenNameString HumanNameString)
(comment HumanGivenNameString "The collection of non-family name strings such ``Betty'' and ``Phillip'' which are given as first or middle names (in most Western countries), usually shortly after birth.   This also includes nicknames like ``Red'' or ``The Refrigerator''.
Note: elements of this collection are really just character strings, not reified concepts like ''TheNameBetty'' that might be used to represent character strings.")

;;; HumanInfant
(isa HumanInfant ExistingObjectType)
(genls HumanInfant HumanChild)
(comment HumanInfant "The collection of Persons in the infant stage of life.  Functionally, this ends when the infant learns to walk (even just toddle) and/or talk (even a few words)... or, at latest, when the person's age greatly exceeds that at which most people develop those skills.  Generally, this means that it spans the period from birth to about 12 - 18 months old.  One of the subsets of this collection is NewbornBaby.")

;;; HumanNameString
(isa HumanNameString IDStringType)
(genls HumanNameString IDString)
(genls HumanNameString ProperNameString)
(comment HumanNameString "This is the class of names which human beings give themselves.  See two of its important subsets, HumanGivenNameString and HumanFamilyNameString, for examples.")

;;; HumanOccupationConstruct
(isa HumanOccupationConstruct ExistingObjectType)
(genls HumanOccupationConstruct ContainerProduct)
(genls HumanOccupationConstruct HumanlyOccupiedSpatialObject)
(genls HumanOccupationConstruct ConstructionArtifact)
(comment HumanOccupationConstruct "A collection of places.  Each HumanOccupationConstruct is a place where people do things, such as: the Empire State Building, an individual office in that building, the White House, the Lincoln Bedroom in the White House, an elevator, a tent, etc.

An instance of HumanOccupationConstruct is an artificial construction belonging to the collection ContainerProduct, and its primaryFunction is as a place in which humans perform activities.  Some large subsets include 
   (a) instances of HumanShelterConstruction (e.g., houses); 
   (b) sub-regions within a HumanShelterConstruction or within any building which are intended for human use (e.g., rooms, shower stalls), and 
   (c) regions in any transportation vehicle which are designed for human occupancy (e.g., the cockpit, passenger compartment).  

Note:  Some buildings which are not themselves instances of HumanOccupationConstruct, such as HooverDam, may have a sub-region which is a HumanOccupationConstruct (e.g., the control room at the top of the dam).

Note:  The collection HumanOccupationConstruct is broad enough to include tents, boiler rooms, elevator shafts, steam tunnels, and the space inside the LincolnMemorialInWashingtonDC.  Thus, an instance of HumanOccupationConstruct need not be strictly Indoors (q.v.), since Indoors is meant to include many characteristics that those places do not necessarily share (such as humanly comfortable temperature, lighting at night, not terribly noisy or windy, clean).  We therefore do not make the default assertion that a HumanOccupationConstruct is Indoors; however, an instance of HumanOccupationConstruct is certainly not a purely OutdoorLocation (q.v.), so we DO assert that those two collections are disjoint.  Certain subsets of HumanOccupationConstruct, however, do have `indoor' characteristics, and so we assert (for example) that anything found inside instances of RoomInAConstruction or ModernShelterConstruction is found Indoors.  Note:  For places designed to be occupied by humans but which are purely outdoor locations (such as elements of Lawn, ParkingLot, and Playground), see HumanlyOccupiedSpatialObject.")

;;; HumanOccupationConstructResident
(isa HumanOccupationConstructResident ExistingObjectType)
(genls HumanOccupationConstructResident Animal)
(comment HumanOccupationConstructResident "The collection of those Animals that (commonly) reside in HumanOccupationConstructs -- i.e., in structures that also house people.  This mostly just includes domestic pets and people.")

;;; HumanResidence
(isa HumanResidence ProductType)
(isa HumanResidence ContactLocationType)
(genls HumanResidence PhysicalContactLocation)
(genls HumanResidence HumanShelterConstruction)
(comment HumanResidence "A collection of construction artifacts.  Each element of HumanResidence is a humanly constructed shelter (or a part of one) in which humans reside--as opposed to, say, their places of employment (though the two might be the same).  HumanResidence includes residential huts, igloos, longhouses, hotels, barracks, palaces, houseboats, mobile homes, as well as apartments, duplexes, and detached houses.  A person's residence is typically the place where she/he usually sleeps and keeps most personal effects.")

;;; HumanResidenceArea
(isa HumanResidenceArea ExistingObjectType)
(genls HumanResidenceArea HumanlyOccupiedSpatialObject)
(genls HumanResidenceArea EcologicalRegion)
(comment HumanResidenceArea "A collection of geographical regions.  Each element of HumanResidenceArea is a region in which a number of people live, at least semi-permanently (i.e., for a year or more).  Examples: SanFranciscoBayArea, ResearchTrianglePark, research stations at the SouthPole, radar posts in the Aleutians.")

;;; HumanShelterConstruction
(isa HumanShelterConstruction ExistingObjectType)
(genls HumanShelterConstruction HumanOccupationConstruct)
(genls HumanShelterConstruction ShelterConstruction)
(genls HumanShelterConstruction ContainerProduct)
(comment HumanShelterConstruction "A collection of artifacts; a subset of HumanOccupationConstruct.  An instance of HumanShelterConstruction is a place made to shelter people from the elements by allowing them to get Indoors.  Subsets include ModernHumanResidence, SchoolBuilding, ShoppingMallBuilding, many others.   An instance of HumanShelterConstruction must have a roof and typically has sides, though the latter may be flimsy (as in elements of TentTheShelter) or even absent (as in some elements of ParkingGarage).")

;;; HumanlyOccupiedSpatialObject
(isa HumanlyOccupiedSpatialObject ExistingObjectType)
(genls HumanlyOccupiedSpatialObject PartiallyTangible)
(comment HumanlyOccupiedSpatialObject "A collection of places.  Each element of HumanlyOccupiedSpatialObject is a place that humans occupy, not restricted to (though including) the interiors of things built by humans, such as houses, office buildings, and ships.  HumanlyOccupiedSpatialObject also extends to campsites, caves, villages, and towns.  Examples: Doug Lenat's house, North Austin, the Five Boroughs of New York, Minnesota, the Vatican, an Antarctic research station, and (briefly) the Moon.")

;;; HumidClimateCycle
(isa HumidClimateCycle ClimateCycleType)
(genls HumidClimateCycle AnnualClimateCycle)
(comment HumidClimateCycle "A collection of annual climate cycles.  Each element of HumidClimateCycle is a year-long event consisting of weather occurring (typically) in various continental and subtropical regions.  Characteristics of a humid climate include copious precipitation and high humidity.")

;;; HumidContinentalClimateCycle
(isa HumidContinentalClimateCycle ClimateCycleType)
(genls HumidContinentalClimateCycle TemperateClimateCycle)
(genls HumidContinentalClimateCycle HumidClimateCycle)
(comment HumidContinentalClimateCycle "A collection of annual climate cycles.  Each element of HumidContinentalClimateCycle is a year-long event consisting of weather occurring (typically) in continental interiors within a temperate climate zone.  Characteristics of a humid continental climate cycle include a warm summer and cold winter, with precipitation throughout.  A good example of a region whose annual climate cycles are instances of HumidContinentalClimateCycle is the American Midwest.  Cf. HumidSubtropicalClimateCycle.")

;;; HumidSubtropicalClimateCycle
(isa HumidSubtropicalClimateCycle ClimateCycleType)
(genls HumidSubtropicalClimateCycle TemperateClimateCycle)
(genls HumidSubtropicalClimateCycle HumidClimateCycle)
(comment HumidSubtropicalClimateCycle "A collection of annual climate cycles.  Each element of HumidSubtropicalClimateCycle is a year-long event consisting of weather occurring (typically) within a temperate climate zone.  Characteristics of a humid subtropical climate cycle include a hot summer and a cool winter, with precipitation and moist air throughout.  Cycles of this kind occur closer to the equator than do instances of HumidContinentalClimateCycle.  For instance, the Southeastern United States is a good example of a region whose annual climate cycles are instances of HumidSubtropicalClimateCycle.")

;;; Hungry
(isa Hungry OrderOfMagnitudeInterval)
(isa Hungry LevelOfHunger)
(comment Hungry "Hungry")

;;; IBOCreation
(isa IBOCreation TemporalObjectType)
(isa IBOCreation ScriptType)
(genls IBOCreation IBTGeneration)
(genls IBOCreation CreationEvent)
(genls IBOCreation InformationTransferEvent)
(genls IBOCreation HumanActivity)
(comment IBOCreation "A collection of events; a subset of IBTGeneration.  Each element of IBOCreation is an event which creates a new IBO (i.e., an element of InformationBearingObject).  An IBO is a relatively long-lasting instance of InformationBearingThing.  Examples of IBOCreation include publishing a book, making a film, printing a photograph, molding a plastic credit card, painting a billboard, minting a coin.  When an IBO is created, its content may be either original or be copied from a prior IBO.  For creation of IBOs with new content, e.g., a personal letter, see the subset IBTGeneration-Original; for creation of IBOs with pre-existing content, e.g., reprinting a photograph, see IBTGeneration-Replication.")

;;; IBTCopying
(isa IBTCopying TemporalObjectType)
(genls IBTCopying IBTGeneration-Replication)
(comment IBTCopying "A collection of events; a subset of IBTGeneration-Replication.  Each element of IBTCopying is an event which generates a new IBT (i.e., an element of InformationBearingThing) by copying the information and format from a source IBT (see informationOrigin).  The new IBT encodes approximately the same information in approximately the same way as the source IBT.  Examples: photocopying a document, faxing a document, duplicating a videotape.")

;;; IBTGeneration
(isa IBTGeneration TemporalObjectType)
(genls IBTGeneration Action)
(genls IBTGeneration TransferOut)
(genls IBTGeneration InformationTransferEvent)
(comment IBTGeneration "A collection of information transfer events.  Each element of IBTGeneration is an event which creates some information-bearing thing--thus, an event in which some idea or information is expressed.  In elements of IBTGeneration, the particular IBT (i.e., element of InformationBearingThing) which is created may be either a transient wave phenomenon (e.g., made of sound, light, or radio waves), or it may be a relatively long-lasting instance of InformationBearingObject (cf. IBOCreation).  Humans frequently generate such IBTs as spoken language, gestures, and handwritten notes.  It is irrelevant for elements of IBTGeneration whether there is another agent who immediately (or, indeed, ever) accesses the resulting IBTs.  Note the difference: reading is NOT an IBT generation event, but writing (usually) is.  IBTs may be generated intentionally or unintentionally.  Also, every communication act starts with an instance of IBTGeneration.  See also: Communicating and its subsets, esp. CommunicationAct-Single.")

;;; IBTGeneration-Original
(isa IBTGeneration-Original DefaultDisjointScriptType)
(isa IBTGeneration-Original TemporalObjectType)
(genls IBTGeneration-Original HumanActivity)
(genls IBTGeneration-Original IBTGeneration)
(genls IBTGeneration-Original PurposefulAction)
(comment IBTGeneration-Original "A collection of events; a subset of IBTGeneration.  Each element of IBTGeneration-Original is an event in which some original idea is expressed; that is, the content of the IBT generated is not a copy of the content of a previously created information-bearing thing.  See also IBTGeneration, Communicating.")

;;; IBTGeneration-Replication
(isa IBTGeneration-Replication TemporalObjectType)
(genls IBTGeneration-Replication IBTGeneration)
(comment IBTGeneration-Replication "A collection events; a subset of IBTGeneration.  Each element of IBTGeneration-Replication is an event in which a new IBT (i.e., an InformationBearingThing) is created whose content is based on that of a preexisting IBT (which is the informationOrigin of the generation event).  The new IBT contains at least part of the information content of the original IBT.  It may use the same or a different way of encoding the information.")

;;; IBTRecoding
(isa IBTRecoding ScriptType)
(isa IBTRecoding TemporalObjectType)
(genls IBTRecoding IBTGeneration-Replication)
(comment IBTRecoding "A collection of events; a subset of IBTGeneration-Replication.  Each element of IBTRecoding is an event which generates a new IBT (i.e., an element of InformationBearingThing), by taking information from a source IBT (see informationOrigin), encoding it a new way, and incorporating it into a new information-bearing thing (see ibtGenerated).  Elements of IBTRecoding may be done either by agents (e.g., people) or by non-agents (e.g., record players, or computers running translation software).  Recoding the content of a pre-existing IBT presupposes some instance of accessing it (i.e., of AccessingAnIBT).")

;;; IDDocument
(isa IDDocument ExistingObjectType)
(genls IDDocument OfficialDocument)
(comment IDDocument "A collection of official documents.  Each element of IDDocument is an accepted credential for identifying some object.  Important subsets of IDDocument include Passport, DriverLicense, SocialSecurityCard.  Other examples include student ID cards, dog tags (worn by military personnel), dog tags (worn by dogs), authentication certificates for a work of art or an antique.")

;;; IDString
(isa IDString IDStringType)
(genls IDString CharacterString)
(comment IDString "A collection of objects; a subset of CharacterString.  Each element of IDString is a character string which is used to denote a specific object in some identification mapping; for example, instances of ModelNumber (e.g., ``JHS146973S2''), or instances of PostalCode (e.g., ``78751'').  See also DenotedObjectFn and objectID.")

;;; IDStringType
(isa IDStringType Collection)
(genls IDStringType ObjectType)
(comment IDStringType "A collection of collections.  Each element in IDStringType is a collection of character strings which is a subset of IDString (q.v.).  A few instances of IDStringType: ProductName, ProductVersion, EMailAddress, PhoneNumber, PostalCode.")

;;; IllocutionaryForce
(isa IllocutionaryForce ObjectType)
(genls IllocutionaryForce PropositionalInformationThing)
(genls IllocutionaryForce SupposedToBeMicrotheory)
(comment IllocutionaryForce "A collection of pieces of information; a subset of PropositionalInformationThing.  Each element of IllocutionaryForce is a specialized component of a communication; its function is to indicate how the speaker in a communication wants the agent(s) whom s/he is addressing to understand, and respond to, the situation--i.e., the state of affairs--described in that communication.  Isolating the `illocutionary force' of a communication allows us to characterize the intention of a speaker; e.g., whether s/he means to assert that the described state of affairs in fact holds; or to express a desire that such a state of affairs hold; or to command someone to make that state of affairs hold; or to offer to make the state of affairs hold.  S/he may even intend to make something true by stating it (e.g., ``I name this ship `The Intrepid'.''). 
Usually, apprehending a speaker's intention is important for understanding what s/he means and what s/he intends the hearer to do.  Although illocutionary forces can be represented propositionally, they are not generally communicated so explicitly.  For example, questions in English are typically communicated by inverting subject-object word order and raising one's intonation at the end of the utterance.  (The intonation marker so strongly indicates a question that it may suffice without the inverted word order, as in `You are going tonight' uttered with a rising intonation.)  Commands in English typically have an (unexpressed) understood subject and perhaps a forceful tone.  In every culture and language there are conventional sets of commonly used illocutionary forces which would be the subsets of IllocutionaryForce for that culture; e.g., in English, they include Inform contexts, Request, Offer, Promise, and Query.
Note: although in this comment IllocutionaryForce is explained in terms of utterances, it applies to communication generally; so `speaker' and `listener' should be broadly interpreted to mean, respectively, any senderOfInfo and recipientOfInfo.  See also Communicating, CommunicationAct-Single.  The portion of a communication's information content that represents the illocutionary force is indicated using componentIF.")

;;; IlluminationModeAttribute
(isa IlluminationModeAttribute UnorderedAttributeType)
(genls IlluminationModeAttribute AttributeValue)
(comment IlluminationModeAttribute "A collection of attributes.  Each element of IlluminationModeAttribute describes something about the type of illumination falling on a region or an object.  For example, DirectIllumination, IndirectIllumination, ReflectedIllumination, PartDirectPartIndirect.")

;;; ImmediateWeatherProcess
(isa ImmediateWeatherProcess TemporalStuffType)
(isa ImmediateWeatherProcess DefaultDisjointScriptType)
(genls ImmediateWeatherProcess WeatherEvent)
(comment ImmediateWeatherProcess "The collection of meteorological events of a duration shorter than seasonal processes.  A particular hurricane event, for example, might be characteristic of a seasonal process for a region; but the hurricane event itself is an instance of ImmediateWeatherProcess.  Another example of an ImmediateWeatherProcess is a single LightningEvent.  (Cf. AnnualClimateCycle.)")

;;; InanimateObject-Natural
(isa InanimateObject-Natural ExistingObjectType)
(genls InanimateObject-Natural InanimateThing-Natural)
(comment InanimateObject-Natural "A collection of natural (i.e. not man-made) objects. It is a subclass of InanimateThing-Natural, distinguished from it mainly by only having subclasses which are existing object-types. Thus, CelestialObject would be a subclass of this collection, but Dirt would not.")
(synonymousExternalConcept InanimateObject-Natural SENSUS-Information1997 "NATURAL-OBJECT")

;;; InanimateThing
(isa InanimateThing ExistingObjectType)
(genls InanimateThing TangibleThing)
(comment InanimateThing "A collection of tangibles.  Each element of InanimateThing is a tangible thing which is not a living structure.  Examples: YaleUniversity, the StatueOfLiberty, a U.S. ten-dollar bill, the MoonOfEarth, a safety pin.")
(synonymousExternalConcept InanimateThing SENSUS-Information1997 "INANIMATE-OBJECT")

;;; InanimateThing-Natural
(isa InanimateThing-Natural TemporalStuffType)
(genls InanimateThing-Natural InanimateThing)
(comment InanimateThing-Natural "A collection of tangibles. Each element of InanimateThing-Natural is an InanimateThing that is not man-made. Thus, the MoonOfEarth and  the AtlanticOcean belong to this class, but the ArcDeTriomphe does not.")

;;; Inch
(isa Inch FPSUnitOfMeasure)
(isa Inch UnitOfDistance)
(isa Inch UnitOfMeasureNoPrefix)
(resultIsa Inch Distance)
(resultIsa Inch ScalarInterval)
(argsIsa Inch CycSystemRealNumber)
(comment Inch "The measurement function used in Cyc to represent the inch used to measure length within the British (FPS) system.  See also FPSUnitOfMeasure, UnitOfMeasure.")

;;; IncurringAnInjury
(isa IncurringAnInjury ScriptType)
(genls IncurringAnInjury SingleDoerAction)
(genls IncurringAnInjury AnimalActivity)
(genls IncurringAnInjury IncurringDamage)
(comment IncurringAnInjury "A collection of events.  An instance of IncurringAnInjury is an event in which an animal becomes injured.  In such events, the animal which is hurt is the bodilyActedOn in the event.  The condition which results of an instance of IncurringAnInjury would be an instance of InjuryCondition (q.v.).  Also see the comment on AilmentCondition.")

;;; IncurringDamage
(isa IncurringDamage ScriptType)
(genls IncurringDamage PhysicalEvent)
(genls IncurringDamage IntrinsicStateChangeEvent)
(comment IncurringDamage "The collection of events in which some sort of damage is incurred to a person or property.")

;;; IndependentCountry
(isa IndependentCountry SpatiallyDisjointRegionType)
(genls IndependentCountry Country)
(comment IndependentCountry "A collection of geopolitical entities. Each element of IndependentCountry is a distinct, independent geopolitical entity generally recognized by the international community. An independent country typically has a (relatively) stable government and enforced borders, its own currency, laws, culture, etc. Examples: UnitedStatesOfAmerica, Germany, Liberia, Mongolia-PeoplesRepublic, India, Taiwan-RepublicOfChina, Honduras.")

;;; IndependentOrganization
(isa IndependentOrganization ExistingObjectType)
(genls IndependentOrganization Organization)
(comment IndependentOrganization "A collection of organizations.  An element of IndependentOrganization is an organization which is not affiliated with any ChainOrganization and that is not a sub-organization of any other Organization.  An independent organization is neither the top-level organization of a chain, nor a lower level organization in a chain, nor is it an element of ChainOrganization.  Note, however, that an IndependentOrganization may have several locations within a small geographical region; e.g., Texas French Bread (a single, independent business) has multiple locations in Austin, TX.")

;;; IndexedInfoSource
(isa IndexedInfoSource ObjectType)
(genls IndexedInfoSource AbstractInformation)
(comment IndexedInfoSource "The collection of all 
information sources in which the information contained theirein 
is indexed by some set of terms, names, CharacterStrings, 
IDNumbers or codes.   Given such an index term, there is a 
specific part of the IndexedInfoSource associated with that 
term.  Each instance has some format or organizing structure 
imposed on the information, although the format might not be 
intrinsically ordered..  An instance of IndexedInfoSource 
is the abstract informational content of the source, not any 
particular physical object in which the information is stored.  
Examples include a Dictionary, Thesaurus, 
Database-AbstractContent, or a KnowledgeBase.  Some examples that do not qualify are PaintingAsArtForm, or a CharacterString without any structuring information about it or that has no 
structure beyond being a string of characters.")

;;; IndexicalConcept
(isa IndexicalConcept Collection)
(genls IndexicalConcept Thing)
(comment IndexicalConcept "IndexicalConcepts are those 
whose referent essentially depends on the occasion of use and 
the user, e.g., Now, I, Here. When I use the concept 'I,' I 
am referring to myself (OKeefe), but 'I' does not mean 
OKeefe, but refers to whomever the user is. Similarly, Now denotes the moment in which it used.")
(overlappingExternalConcept IndexicalConcept SENSUS-Information1997 "RELATIVE-SPATIAL-TEMPORAL")

;;; Individual
(isa Individual Collection)
(genls Individual Thing)
(comment Individual "Individual is the collection of all things that are NOT sets or collections.  Thus, Individual includes (among other things) physical objects, temporal subabstractions of physical objects, numbers, relations, and groups (see Group).  An element of Individual may have parts or a structure (including parts that are discontinuous); but NO instance of Individual can have elements or subsets.

Important distinction:  Though an element of Individual may have parts (e.g., physicalParts or groupMembers), that individual is NOT the same thing as the collection containing those same parts.  For example, your car is an individual, but the collection of all the parts of your car is an instance of Collection.  The latter -- the collection of parts of your car -- is an abstract collection; it doesn't have a location, it doesn't have a top speed, etc. -- it's just a collection! -- but it does have subsets, supersets, and members.  Similarly: `Bill Clinton's immediate family' is an individual; however, the collection of persons who belong to that family is a collection. One final example: A company belongs to Individual and is distinct from the collection of its employees (which isa Collection).")

;;; IndividualAgent
(isa IndividualAgent ExistingObjectType)
(genls IndividualAgent Agent)
(comment IndividualAgent "The collection of all individuals belonging to the collection Agent.  Each person, each animal, etc., is an element of IndividualAgent, in most contexts.  Note that instances of Organization will in general NOT be elements of IndividualAgent.")

;;; IndividualDenotingFunction
(isa IndividualDenotingFunction RelationType)
(genls IndividualDenotingFunction NonPredicateFunction)
(comment IndividualDenotingFunction "The collection of all Cyc functions which return elements of Individual.  Examples: PerimeterFn, InteriorFn, GoalFn, MedalAwardCeremonyFn, all return particular individuals when applied to their proper arguments; e.g., (InteriorFn LincolnMemorialInWashingtonDC) designates the particular space inside the Lincoln Memorial.  Cf. CollectionDenotingFunction.")

;;; Indonesia-TheNation
(isa Indonesia-TheNation IndependentCountry)
(isa Indonesia-TheNation Entity)
(comment Indonesia-TheNation "The country of Indonesia, which comprises 13500 islands. Includes both physical and political aspects.")

;;; Infection
(isa Infection PhysiologicalConditionType)
(genls Infection AilmentCondition)
(comment Infection "A collection of ailments; a subset of AilmentCondition.  An instance of Infection is a disease condition in which microorganisms are abnormally present (or abnormally numerous) within an animal's body.  The microorganisms involved in an infection may be some instance of the collections Bacterium, Virus, or ProtistaKingdom.  Specialized subsets of Infection include: Bronchitis, Tonsillitis, SexuallyTransmittedInfection (which has further subsets).  A particular case of tonsilitis is thus an element of the collection Infection.")

;;; InfectionFn
(isa InfectionFn CollectionDenotingFunction)
(resultIsa InfectionFn InfectionType)
(resultGenl InfectionFn Infection)
(arg1Isa InfectionFn ExistingObjectType)
(arg1Genl InfectionFn AnimalBodyPart)
(comment InfectionFn "InfectionFn is a Cyc function, and in particular a CollectionDenotingFunction.  It is used to decribe ailments according to the region of the animal's body in which they are found.  (InfectionFn REGION) denotes the collection of infections of the region of the body, REGION.  For example, (InfectionFn Throat) is the set of all throat infections, and hence a subset of Infection.  When you get a case of strep throat, that is an element of (InfectionFn Throat).   When you get appendicitis, that is an element of the set represented by (InfectionFn Appendix-OrganPart).")

;;; InfectionTransmissionEvent
(isa InfectionTransmissionEvent TemporalObjectType)
(isa InfectionTransmissionEvent ScriptType)
(genls InfectionTransmissionEvent IntrinsicStateChangeEvent)
(genls InfectionTransmissionEvent GeneralizedTransfer)
(comment InfectionTransmissionEvent "The collection of events in which some instance of Infection is transmitted from one member of BiologicalLivingObject to another.")

;;; InfectionType
(isa InfectionType SiblingDisjointCollection)
(genls InfectionType PhysiologicalConditionType)
(comment InfectionType "Elements are the subsets of Infection.  This type collection may be removed from the KB.")

;;; InferenceRelatedBookkeepingPredicate
(isa InferenceRelatedBookkeepingPredicate PredicateCategory)
(isa InferenceRelatedBookkeepingPredicate Collection)
(genls InferenceRelatedBookkeepingPredicate BookkeepingPredicate)
(comment InferenceRelatedBookkeepingPredicate "A collection of predicates.  Each element of InferenceRelatedBookkeepingPredicate is a predicate involved in assertions used by the Cyc application to direct inferencing.  Examples: defnIff, defnSufficient, termOfUnit, afterAdding.")

;;; InflatableBoat
(isa InflatableBoat ExistingObjectType)
(genls InflatableBoat Boat-WaterTransportationDevice)
(comment InflatableBoat "The collection of all inflatable boats, that is, boats (mostly small watercraft) that are composed of some fabric or membrane and are inflated with air to give them buoyancy in water.")

;;; Inform
(isa Inform ObjectType)
(genls Inform IllocutionaryForce)
(comment Inform "A collection of illocutionary forces.  Each instance of Inform consists of a piece of information contained (usually implicitly) in a communication, and which expresses the speaker's intention to inform the listener that the propositional content of what s/he utters is true.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any senderOfInfo and recipientOfInfo.  See also IllocutionaryForce.")

;;; Inform-CommunicationAct
(isa Inform-CommunicationAct ScriptType)
(isa Inform-CommunicationAct TemporalObjectType)
(genls Inform-CommunicationAct CommunicationAct-Single)
(comment Inform-CommunicationAct "The collection of acts of conveying information by means of intentional communication.")
(synonymousExternalConcept Inform-CommunicationAct SENSUS-Information1997 "ASSERTION")
(synonymousExternalConcept Inform-CommunicationAct SENSUS-Information1997 "ASSERTIVE-ACT")

;;; InformationAdding
(isa InformationAdding TemporalStuffType)
(genls InformationAdding InformationUpdating)
(comment InformationAdding "A collection of events; a subset of InformationUpdating.  Each element of InformationAdding is an event in which information is added to the information content of an IBO (i.e., an element of InformationBearingObject).  After the action, the IBO which is the informationDestination of the update `has' the new information (i.e., infoAdded).  The resulting information content of that IBO includes both its content immediately prior to the addition, plus the newly added information.  Examples of InformationAdding: recording a check in the check register of one's checkbook; taking the next photograph on a roll of film; adding a new constant to the CycKB.")

;;; InformationBearingObject
(isa InformationBearingObject ExistingObjectType)
(genls InformationBearingObject InformationBearingThing)
(genls InformationBearingObject CompositeTangibleAndIntangibleObject)
(comment InformationBearingObject "A collection of objects which are both tangible and intangible.  (See also the comment for its superset CompositeTangibleAndIntangibleObject.)  Each element of InformationBearingObject is an object that can be interpreted, by an interpreter understanding its conventions, to yield a chunk or chunks of information.  InformationBearingObject includes all of the following: (1) artifacts made solely for the purpose of conveying information (e.g., a newspaper, or a children's science video); (2) artifacts that convey information in addition to their intended function (e.g., Neolithic pottery); and (3) non-artifacts, such as a person's fingerprints, gestures, and utterances, which may be interpreted to yield information.  Note: `an IBO' abbreviates `an information bearing object'.  Cf. InformationBearingWavePropagation.  See also containsInformation.")

;;; InformationBearingThing
(isa InformationBearingThing Collection)
(genls InformationBearingThing TemporalThing)
(comment InformationBearingThing "A collection of temporal objects, including actions and events as well as physical objects.  Each element of InformationBearingThing is an item that carries information, for an interpreter who understands its conventions.  Examples: a copy of the novel `Moby Dick'; a signal buoy; a photograph; a flag; an elevator sign in Braille; a map; a US dollar bill; a resume; an account ledger; a word in ASL; a musical score; the Cyc program itself.  Note: `an IBT' abbreviates `an information bearing thing'.  See also SpecifiedInformationBearingThingType.  For representation of the propositional content of information bearing things, see PropositionalInformationThing; but note that not all IBTs have a propositional content (cf. ArtObject).")

;;; InformationBearingWavePropagation
(isa InformationBearingWavePropagation TemporalStuffType)
(genls InformationBearingWavePropagation WavePropagation)
(genls InformationBearingWavePropagation InformationBearingThing)
(comment InformationBearingWavePropagation "A collection of information bearing things (IBTs).  Each element of InformationBearingWavePropagation is a WavePropagation (q.v.) event that carries information, for an interpreter which understands its conventions.  Examples of InformationBearingWavePropagation include sounds, radio signals, and images of visible light.  These eventlike IBTs should be contrasted with the relatively static, persistent, objectlike IBTs in the collection InformationBearingObject.")

;;; InformationRecordingDevice
(isa InformationRecordingDevice ExistingObjectType)
(genls InformationRecordingDevice PhysicalDevice)
(comment InformationRecordingDevice "A collection of physical devices.  An instance of InformationRecordingDevice is a device used for the recording of sensory information (i.e., audio and visual, but not encoded as character strings.)  So an instance would be your answering machine at home (an AnsweringMachine), your cam-corder (a VideoCamera), but NOT your address book or your copy of the Yellow Pages.  
Note: A borderline case is a PDA (such as an Apple Newton) used to record handwritten script.  If it then processes that information and converts it to ASCII characters, it has stopped being an InformationRecordingDevice in the currently intended sense.  Probably a better name for this concept, therefore, would be DeviceToRecordAnalogInformation.")

;;; InformationRecordingProcess
(isa InformationRecordingProcess TemporalStuffType)
(isa InformationRecordingProcess DefaultDisjointScriptType)
(genls InformationRecordingProcess PhysicalEvent)
(genls InformationRecordingProcess IBOCreation)
(comment InformationRecordingProcess "A collection of events in which information is recorded, using an InformationRecordingDevice.  Every InformationRecordingProcess produces an InformationBearingObject.")

;;; InformationRemoving
(isa InformationRemoving TemporalStuffType)
(genls InformationRemoving InformationUpdating)
(comment InformationRemoving "The collection of actions in which information is removed from or erased from an IBO (InformationBearingObject).  After the action, the remaining info content, if any, of the IBO acted on is only a part of what it started out to be.  The removed information doesn't go anywhere; after removal it doesn't end up encoded in something else.")

;;; InformationTransferEvent
(isa InformationTransferEvent TemporalObjectType)
(isa InformationTransferEvent ScriptType)
(genls InformationTransferEvent GeneralizedTransfer)
(comment InformationTransferEvent "A collection of events.  Each element of InformationTransferEvent is an event in which information is transferred from a source (informationOrigin) to a destination (informationDestination), both of which are either intelligent agents or IBTs (i.e., elements of InformationBearingThing).  Examples: reading a book (transfer from book to reader); saying something to someone (transfer from speaker to listener); machine translation (transfer from an encoded IBT in the source language to an encoded IBT in the target language); OCR scanning (transfer of info from visual information source to another IBT in different format); carving initials in a tree (transfer from agent to IBT), etc.  Note: this is a generalization of the `mtrans' operator in Roger Schank's Conceptual Dependency theory.")

;;; InformationUpdating
(isa InformationUpdating TemporalStuffType)
(genls InformationUpdating InformationTransferEvent)
(comment InformationUpdating "A collection of information transfer events.  Each element of InformationUpdating is an event in which the information content of an IBO (i.e., an element of InformationBearingObject) is altered, either by removing or by adding information, or both.  Note that this is possible only for tangible IBOs.")

;;; Ingesting
(isa Ingesting TemporalStuffType)
(isa Ingesting ScriptType)
(genls Ingesting HumanActivity)
(genls Ingesting DirectedTranslation)
(genls Ingesting VoluntaryBodyMovement)
(genls Ingesting BiologicalIntakeEvent)
(genls Ingesting BodilyFunctionEvent)
(comment Ingesting "A collection of events; a subset of BiologicalIntakeEvent.  Each element of Ingesting is a complex process in which a thing is brought into some organism's mouth from the outside, is swallowed, and is moved to the organism's stomach.  Every element of Ingesting has among its subEvents an instance of Swallowing which occurs after the intake.   (Thus, though chewing gum is a BiologicalIntakeEvent, it is not an Ingesting unless the gum is swallowed.)  An ingesting event ends when the ingested stuff reaches the ingester's stomach (where an instance of DigestionEvent begins -- provided that what was ingested is an element of EdibleStuff).")

;;; IngestingFn
(isa IngestingFn CollectionDenotingFunction)
(resultIsa IngestingFn TemporalObjectType)
(resultGenl IngestingFn Ingesting)
(arg1Isa IngestingFn StuffType)
(arg1Genl IngestingFn PartiallyTangible)
(comment IngestingFn "The Cyc function IngestingFn is a CollectionDenotingFunction.  It is used to represent collections of events in which certain types of things are consumed.  (IngestingFn STUFFTYPE) denotes the collection of events in which a tangible substance of the type STUFFTYPE is ingested.  For example, lots of instances of (IngestingFn Popcorn) occur at the movies.")

;;; Inhaling
(isa Inhaling TemporalStuffType)
(isa Inhaling DefaultDisjointScriptType)
(genls Inhaling BodyMovementEvent)
(genls Inhaling BiologicalIntakeEvent)
(comment Inhaling "The collection of all body movement events in which an animal takes air in through an appropriate portal (Mouth, Nose) and passes it into its Lungs.  The elements of Breathing all have subEvents which are Inhalings.")

;;; InorganicStuff
(isa InorganicStuff ExistingStuffType)
(genls InorganicStuff InanimateThing)
(genls InorganicStuff TangibleThing)
(comment InorganicStuff "A collection of tangible things.  Each element of InorganicStuff is a tangible thing which is wholly composed of one or more types of inorganic Molecule.  Instances of InorganicStuff usually didn't originate as parts or products of living things.")

;;; Insect
(isa Insect BiologicalClass)
(genls Insect Arthropod)
(comment Insect "A collection of animals; a subset of Arthropod.  Each element of Insect is a small arthropod whose body is segmented into thirds, with three pairs of legs, and one or two pairs of wings.  The most familiar members of Arthropod are the 'bugs' encountered in human daily life.  Some insects bite, some infest houses, and some carry disease.  Insect is an instance of BiologicalClass.")

;;; InsideSurface
(isa InsideSurface RegionType)
(genls InsideSurface Surface-Physical)
(comment InsideSurface "The collection of all inside surfaces of (surfaces of the interiors of) tangible things.  The tangible thing may have a Cavity or several cavities or passageways.  Often the tangible thing can be thought of as a container of some sort.")

;;; Instructions
(isa Instructions ObjectType)
(genls Instructions PropositionalInformationThing)
(comment Instructions "A collection of executable pieces of information; a subset of PropositionalInformationThing.  Each element of Instructions outlines a sequence of tasks to be performed, such as instructions on a food package, verbal instructions, etc.")

;;; InsulatorResistance
(isa InsulatorResistance ElectricalResistance)
(comment InsulatorResistance "A measurable physical attribute.  InsulatorResistance is the element of ElectricalResistance that represents a very high level of electrical resistance.  An object having InsulatorResistance conducts no electricity at all.  See also resistanceOfObject.")

;;; InsuranceProvider
(isa InsuranceProvider ExistingObjectType)
(genls InsuranceProvider ServiceOrganization)
(comment InsuranceProvider "A collection of organizations; a subset of ServiceOrganization.  An element of InsuranceProvider is an organization whose MainFunction is to provide financial and material protection to its clients in the event of sickness, death, natural disaster, loss, theft, lawsuits, etc.  (Insurers may specialize in one or more of those areas.)  Elements of InsuranceProvider may belong to either CommercialServiceOrganization or NonProfitOrganization (including insurance providers belonging to LegalGovernmentOrganization).  Examples include State Farm Insurance Co., Aetna Casualty Co., Lutheran Brotherhood, and all fifty members of U.S. StateMedicaidAdministrationOrganizations.")

;;; Intangible
(isa Intangible Collection)
(genls Intangible Thing)
(comment Intangible "The collection of things that are not physical -- are not made of, or encoded in, matter.  Every Collection is an Intangible (even if its instances are tangible), and so are some Individuals.  Caution: do not confuse `tangibility' with `perceivability' -- humans can perceive light even though it's intangible--at least in a sense.  For more on this issue, see the relevant cyclistNotes.")

;;; IntangibleExistingThing
(isa IntangibleExistingThing ExistingStuffType)
(isa IntangibleExistingThing ObjectType)
(genls IntangibleExistingThing IntangibleIndividual)
(genls IntangibleExistingThing PartiallyIntangible)
(comment IntangibleExistingThing "The set of things which are intangible yet exist in time.  E.g., the code of conduct for a formal dinner party, the standards for acceptance to Caltech as an undergrad, an account at Sears, etc.")

;;; IntangibleIndividual
(isa IntangibleIndividual ObjectType)
(genls IntangibleIndividual Intangible)
(genls IntangibleIndividual Individual)
(comment IntangibleIndividual "The collection of intangible 
individuals, a subset of Intangible and of Individual.  
The elements of IntangibleIndividual do not have mass, volume, 
color, etc.  E.g., hours, ideas, algorithms, integers, 
distances, and so on. However, as a subset of Individual, 
this collection EXCLUDES sets and collections, which are
elements of Intangible but not of IntangibleIndividual.")

;;; IntangibleObjectPredicate
(isa IntangibleObjectPredicate PredicateCategory)
(genls IntangibleObjectPredicate ExtensionalRepresentationPredicate)
(comment IntangibleObjectPredicate "A collection of predicates.  Each element of IntangibleObjectPredicate is a predicate used in assertions which describe the properties of intangible objects.  For example, knowsAbout, titleOfHeadOfGovernment, religionOfRule, standardUnitMeasuring, territoriesControlled.")

;;; Integer
(isa Integer Collection)
(isa Integer MeasurableAttributeType)
(genls Integer RealNumber)
(genls Integer RationalNumber)
(comment Integer "The collection of all whole numbers; a subset of RationalNumber.  Each element of Integer is a whole number, resolvable into units with no fractional remainder.  An integer may be positive (e.g., 42), zero, or negative (e.g., -42).")

;;; IntelligentAgent
(isa IntelligentAgent ExistingObjectType)
(genls IntelligentAgent Agent)
(comment IntelligentAgent "The collection of all intelligent agents.  Each element of IntelligentAgent is an agent that is capable of having knowledge which it employs in its actions.  An intelligent agent knowsAbout certain things, and having beliefs (and possibly goals) concerning those things may influence its actions.  In addition to persons, Cyc considers certain social beings, such as business and government organizations, and intelligent machines, to be intelligent agents.  See also Agent, performedBy.")

;;; IntendedFunction
(isa IntendedFunction CapacityAttribute)
(comment IntendedFunction "An element of CapacityAttribute.  The attribute IntendedFunction characterizes an entity participating in a situation as doing so in its intended function.")

;;; IntensionalRepresentationPredicate
(isa IntensionalRepresentationPredicate PredicateCategory)
(genls IntensionalRepresentationPredicate Predicate)
(comment IntensionalRepresentationPredicate "A collection of predicates.  Each element of IntensionalRepresentationPredicate is a predicate used to form assertions about the properties of collections.  These predicates implement the intensional structure of the ontology; e.g., citizens, unitsMeasuringThisQuantity, hasDepartmentTypes, granuleOfTime, objectTypeTransported, contraryFeelings.")

;;; InterActorSlot
(isa InterActorSlot PredicateCategory)
(genls InterActorSlot ExtensionalRepresentationPredicate)
(genls InterActorSlot BinaryPredicate)
(comment InterActorSlot "A collection of predicates.  Each element of InterActorSlot is a binary predicate used in assertions that state the relationship between two actors in some event, actual or implied.  The event in which the actors participate may or may not be explicitly represented in the KB.  For example, (authorOfPublication X Y) implies the existence of a Writing event in which X is the author and Y is the book written.  Examples: agreeingAgents, artisticWorksCreated, spouse, wornOn.")

;;; InterExistingObjectSlot
(isa InterExistingObjectSlot PredicateCategory)
(genls InterExistingObjectSlot BinaryPredicate)
(genls InterExistingObjectSlot ExtensionalRepresentationPredicate)
(comment InterExistingObjectSlot "A collection of predicates.  Each element of InterExistingObjectSlot is a binary predicate used in assertions that relate two elements of SomethingExisting (i.e., two objects).  Examples: soldAt, derivedFrom, cohabitants, soilComponent, containsInformation, capitalCity, electricallyConnectedTo.")

;;; InterPersonalRelationSlot
(isa InterPersonalRelationSlot PredicateCategory)
(genls InterPersonalRelationSlot InterExistingObjectSlot)
(comment InterPersonalRelationSlot "A collection of predicates.  Each element of InterPersonalRelationSlot is a binary predicate used to represent relationships between two instances of Animal.  Examples: mate, friends.")

;;; InterconvertibleUnitType
(isa InterconvertibleUnitType Collection)
(genls InterconvertibleUnitType Collection)
(comment InterconvertibleUnitType "A collection of collections.  Each element of InterconvertibleUnitType is a collections of functions (all belonging to UnitOfMeasure) that are used to measure quantities whose units are convertible into one another.  Some collections of interconvertible units include UnitOfTime, UnitOfDistance, UnitOfCPUSpeed.   For example, UnitOfTime includes the functions HoursDuration and SecondsDuration (among others).  Any quantity denoted by applying one of those functions can also be expressed in terms of the other.  For example, (HoursDuration 1) equals (MinutesDuration 60).  On the other hand, not all the instances of UnitOfMeasure constitute types of interconvertible units. UnitOfRate is not an element of InterconvertibleUnitType; therefore, it does not necessarily follow that quantities denoted by its elements are interconvertible.  For example, TimesPerDay and MilesPerHour are both elements of UnitOfRate; however, quantities denoted using either function are not convertible into one another.")

;;; Interior
(isa Interior RegionType)
(genls Interior PieceOfFreeSpace)
(comment Interior "The collection of spatial regions that are physical areas inside the walls or boundary of some object.  The area need not be completely sealed off.  See also Cavity which, unlike Interior, can include walls.")

;;; InteriorFn
(isa InteriorFn ReifiableFunction)
(isa InteriorFn IndividualDenotingFunction)
(resultIsa InteriorFn Interior)
(arg1Isa InteriorFn TangibleThing)
(comment InteriorFn "The function (InteriorFn OBJ), applied to a TangibleThing OBJ, means all the interior space within the Cavity or cavites (chambers, passages, pockets, bubbles, etc.) that occur inside of OBJ.  The result is an instance of Interior.  An Interior, unlike a Cavity, does not include the walls of the chamber or passage, just the interior space itself without any of the the enclosing walls, panels or membranes.")

;;; InteriorRegionFn
(isa InteriorRegionFn ReifiableFunction)
(isa InteriorRegionFn IndividualDenotingFunction)
(resultIsa InteriorRegionFn AnimalBodyRegion)
(arg1Isa InteriorRegionFn AnimalBodyRegion)
(comment InteriorRegionFn "The function (InteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of the core or inner parts or sections of REGOROBJ, or the interior main portion of REGOROBJ.  It applies when REGOROBJ itself has an intrinsic inside/outside orientation (unlike, say, a loop of thread), but if REGOROBJ is an enveloping part, surface membrane, ring or layer within or on a larger region or object that has its own inside/outside orientation, the function returns REGOROBJ's inside portion with respect to the inside and outside of the larger region or object.")

;;; InternalSensoryAttribute
(isa InternalSensoryAttribute UnorderedAttributeType)
(genls InternalSensoryAttribute SensoryAttribute)
(comment InternalSensoryAttribute "A collection of attributes.  Each element of InternalSensoryAttribute is a state of a sentient being in which it experiences within itself some somatic or psycho-somatic feeling, urge, or impulse.  An internal sensory attribute differs from an `external' one in that the sensing agent refers the former to itself and the latter to external objects.  InternalSensoryAttribute includes states of feeling hungry, thirsty, tired, or in pain, as well as various bodily urges such as the urge to sneeze, burp, or urinate.  Sensory attributes that may occur with more or less intensity are represented by indicating a LevelOfPain, LevelOfPhysicalPleasure, LevelOfStress, etc.")

;;; InternationalOrganization
(isa InternationalOrganization ExistingObjectType)
(genls InternationalOrganization Organization)
(comment InternationalOrganization "A collection of organizations.  An element of InternationalOrganization is an organization of international `scope' -- that is, one which has substantial operations, physical facilities, or substantial membership in multiple countries.  International organizations may have individual Persons, Organizations, or countries as members.  They may be political or commercial in nature.  International organizations with countries as members belong to the subset InternationalOrganizationOfCountries.  Examples of InternationalOrganization: UnitedNationsOrganization, OPEC, IBMInc.  See also internationalOrg-MemberCountry.")

;;; InternationalOrganizationOfCountries
(isa InternationalOrganizationOfCountries ExistingObjectType)
(genls InternationalOrganizationOfCountries InternationalOrganization)
(comment InternationalOrganizationOfCountries "A collection of organizations; a subset of InternationalOrganization.  An element of InternationalOrganizationOfCountries is an organization whose members are countries (as represented by their goverments).  Examples: the United Nations, NATO, SEATO, OAU, the League of Arab States, and OPEC.")

;;; IntervalAfterFn
(isa IntervalAfterFn ReifiableFunction)
(isa IntervalAfterFn IndividualDenotingFunction)
(resultIsa IntervalAfterFn TimeInterval)
(arg1Isa IntervalAfterFn TemporalThing)
(arg2Isa IntervalAfterFn Time-Quantity)
(comment IntervalAfterFn "(IntervalAfterFn T-OBJ DUR) denotes the TimeInterval which immediately follows T-OBJ, lasting for duration DUR.")

;;; IntervalBasedQuantitySlot
(isa IntervalBasedQuantitySlot PredicateCategory)
(genls IntervalBasedQuantitySlot QuantitySlot)
(genls IntervalBasedQuantitySlot FunctionalSlot)
(comment IntervalBasedQuantitySlot "A collection of binary predicates (i.e., slots).  Flexibility in the representation of quantities is allowed in assertions made with the binary predicates that are elements of IntervalBasedQuantitySlot.  Each of these predicates, like those in their superset QuantitySlot, is a binary predicate whose second argument must be an element of ScalarInterval, i.e., an interval or point representing the value of some measurement.  For example, take the predicate heightOfObject, which relates an object to its vertical length.  Although we suppose that in reality there is only a single distance that is the height of some one particular object, our measurement systems are in practice less precise--and typically we need a measurement only within a certain tolerance.  For example, in measuring the heightOfObject of a person, usually a measurement to the nearest inch or centimeter will do.  Or we may be even less detailed in our descriptions, perhaps caring only whether someone is more than four feet tall, or `Tall enough to ride' on an amusement park ride.  By allowing an IntervalEntry Format (qq.v.) in the second argument of the measuring predicate, we are telling Cyc that it's okay to describe the (e.g.) heightOfObject in several different ways, with varying levels of precision, SO LONG AS all of the measurements asserted for the same object `overlap'.  For example, it is consistent to say both that Jenny is 4'10'' tall, between four and five feet tall, and that she is `Tall enough to ride' the Dodgems (provided that `Tall enough to ride' is an interval whose minimum is at 4'10'' or lower).  Even though there is only one height of a person in reality, using an IntervalBasedQuantitySlot allows us to represent that height in many different ways, avoiding contradictions while still checking for consistency.  For example, asserting both that Jeff's heightOfObject is 5'9'' and in the range 4.5-5.5 feet tall is an inconsistency.")
(synonymousExternalConcept IntervalBasedQuantitySlot SENSUS-Information1997 "SCALAR-ATTRIBUTE-ASCRIPTION")

;;; IntervalBeforeFn
(isa IntervalBeforeFn ReifiableFunction)
(isa IntervalBeforeFn IndividualDenotingFunction)
(resultIsa IntervalBeforeFn TimeInterval)
(arg1Isa IntervalBeforeFn TemporalThing)
(arg2Isa IntervalBeforeFn Time-Quantity)
(comment IntervalBeforeFn "(IntervalBeforeFn ?X ?D) returns the time interval, of duration ?D, immediately preceding ?X.  So the value is a TimeInterval, it has duration ?D, and  (contiguousAfter  ?X  (IntervalBeforeFn ?X ?D)).")

;;; IntervalEndedByFn
(isa IntervalEndedByFn ReifiableFunction)
(isa IntervalEndedByFn IndividualDenotingFunction)
(resultIsa IntervalEndedByFn TimeInterval)
(arg1Isa IntervalEndedByFn TemporalThing)
(comment IntervalEndedByFn "(IntervalEndedByFn TEMP-OBJ) denotes the time interval which ends when TEMP-OBJ starts.  The beginning of this interval coincides with the beginning of all time (Always-TimeInterval), if it has a beginning.")

;;; IntervalEntry
(isa IntervalEntry Format)
(comment IntervalEntry "Arguments to Cyc predicates may have specified formats that constrain their values.  IntervalEntry is the format used to constrain argument positions that must be filled with measurable quantities.  If IntervalEntry is the entry format of some Nth argument to a predicate PRED, then all assertions with PRED that contain the same particular values in their other arguments must have, in the Nth (i.e., IntervalEntry) argument, quantitative values that `overlap'.  (See ScalarInterval.)  IntervalEntry is provided because, for functional arguments like the second argument to volumeOfObject, we know that a single `real' value does exist, though we may have various ways of concluding limits on that value in the form of intervals.  As long as all the intervals overlap, those assertions are not contradictory.  For more explanation, see Format and the related predicates arg1Format, arg2Format, etc.")

;;; IntervalMaxFn
(isa IntervalMaxFn NonPredicateFunction)
(resultIsa IntervalMaxFn ScalarInterval)
(arg1Isa IntervalMaxFn ScalarInterval)
(comment IntervalMaxFn "(IntervalMaxFn SCALAR) returns an interval of the same type as SCALAR whose maximum value is the maximum value of SCALAR and whose minimum value is MinusInfinity.  For example, (IntervalMaxFn (Mile 3)) is the same as `the interval from negative infinity miles to three miles'. [Technical Note: if that expression were to denote a strictly absolute, as opposed to a relative-or-absolute, distance, then it would mean `the interval from 0 miles to 3 miles'.]   (IntervalMaxFn (Unity 1)) is the same as `the interval from negative infinity to 1', in other words, `no greater than one'.")

;;; IntervalMinFn
(isa IntervalMinFn NonPredicateFunction)
(resultIsa IntervalMinFn ScalarInterval)
(arg1Isa IntervalMinFn ScalarInterval)
(comment IntervalMinFn "(IntervalMinFn SCALAR) returns an interval of the same type as SCALAR whose minimum value is the minimum value of SCALAR and whose maximum value is PlusInfinity.  For example, (IntervalMinFn (Mile 3)) is the same as `the interval from three miles to an infinite number of miles', in other words, `at least three miles'.")

;;; IntervalOnNumberLine
(isa IntervalOnNumberLine MeasurableAttributeType)
(isa IntervalOnNumberLine Collection)
(genls IntervalOnNumberLine ScalarInterval)
(comment IntervalOnNumberLine "A collection of measurable intervals; a subset of ScalarInterval.  Each element of IntervalOnNumberLine is an interval on the real number line; for example, the interval described by `numbers greater than zero and less than or equal to 10'.  A common special case of such intervals is that of a single point on that line, viz., a number such as five or 125.  Note that such an interval need not be contiguous; e.g., `even numbers between Pi and the square root of 1000' describes a legitimate element of IntervalOnNumberLine.  The collection RealNumber is a subset of IntervalOnNumberLine.  The elements of IntervalOnNumberLine are measured by elements of DimensionlessUnitOfMeasure, e.g., units or percentages.  See also Unity, Percent, UnitOfMeasure.")

;;; IntervalStartedByFn
(isa IntervalStartedByFn ReifiableFunction)
(isa IntervalStartedByFn IndividualDenotingFunction)
(resultIsa IntervalStartedByFn TimeInterval)
(arg1Isa IntervalStartedByFn TemporalThing)
(comment IntervalStartedByFn "(IntervalStartedByFn TEMP-OBJ) denotes the time interval which begins when TEMP-OBJ ends.  The end of this interval coincides with the end of all time (Always-TimeInterval), if time has an end.")

;;; IntrinsicAxisOfObject
(isa IntrinsicAxisOfObject ObjectType)
(genls IntrinsicAxisOfObject VectorInterval)
(comment IntrinsicAxisOfObject "The collection of all intrinsic axes of objects, being the conventional or obvious axes depending on shape, movement or function of the object.  For example, for a chest-of-drawers, the intrinsic axes are top-to-bottom, side-to-side, and front-to-back.  See also AxisFn.  Each intrinsic axis is a direction relative to the object's orientation.")

;;; IntrinsicStateChangeEvent
(isa IntrinsicStateChangeEvent TemporalObjectType)
(genls IntrinsicStateChangeEvent Event)
(comment IntrinsicStateChangeEvent "The collection of Events which are characterized primarily by a change in some intrinsic property of one main entity involved in the event (i.e., one of the actors).  Such intrinsic changes may include changes of a thing's color, temperature, device state, size, and so on.  Events where the main change is extrinsic (such as a change in location or ownership) are not IntrinsicStateChangeEvents.  In events which have more than one actor, the event may be an IntrinsicStateChangeEvent for one actor but not for another.  For example, in a FasteningSafetyBelt event, the SafetySeatBelt (the device used) goes from unconnected to connected (to itself), which is an intrinsic change; however, the agent who does the fastening (i.e., who is HandlingADevice) does not change intrinsically, but only in its configuration to the belt, an external object.  Another example: in a HairCuttingEvent, the hair that is barbered undergoes an IntrinsicStateChangeEvent due to its role in that kind of event, but the barber undergoes no intrinsic change due to the hair cutting.

Note: Some events, such as an ice cube melting into a small puddle of water, could be represented in Cyc either as an IntrinsicStateChangeEvent or as a TransformationEvent but not (within a single micro-theory) as both; see the comments on those constants.")
(synonymousExternalConcept IntrinsicStateChangeEvent SENSUS-Information1997 "CHANGE-STATE")

;;; InverseOfIntervalFn
(isa InverseOfIntervalFn FunctionFromQuantitiesToQuantities)
(resultIsa InverseOfIntervalFn ScalarInterval)
(arg1Isa InverseOfIntervalFn ScalarInterval)
(comment InverseOfIntervalFn "InverseOfIntervalFn is the unary mathematical function that returns the inverse of the number taken as its argument.  For example, (InverseOfIntervalFn 7) returns 1/7.")

;;; Invertebrate
(isa Invertebrate OrganismClassificationType)
(genls Invertebrate Animal)
(genls Invertebrate NonPersonAnimal)
(comment Invertebrate "A collection of animals; every element of Invertebrate is an animal that has no backbone.  Invertebrate includes insects, molluscs, sea squirts, worms (in a large variety of worm phyla), and many others. 

Note: Although Invertebrate is a scientific category, it is not a standard taxon in the biological taxonomy, hence it is not an instance of BiologicalTaxon.")
(synonymousExternalConcept Invertebrate SENSUS-Information1997 "INVERTEBRATE")

;;; InvoluntaryBodyMovement
(isa InvoluntaryBodyMovement TemporalStuffType)
(isa InvoluntaryBodyMovement DefaultDisjointScriptType)
(genls InvoluntaryBodyMovement BodilyFunctionEvent-Involuntary)
(genls InvoluntaryBodyMovement BodyMovementEvent)
(comment InvoluntaryBodyMovement "The collection of involuntary bodily movements, those movements in which an Animal's body does the action automatically -- the agent's consent doesn't enter into it.  Subsets of InvoluntaryBodyMovement include Heartbeating, Sneezing, Snoring, etc.")

;;; IrreflexiveBinaryPredicate
(isa IrreflexiveBinaryPredicate Collection)
(isa IrreflexiveBinaryPredicate PredicateCategory)
(genls IrreflexiveBinaryPredicate BinaryPredicate)
(comment IrreflexiveBinaryPredicate "A collection of predicates; the subset of BinaryPredicate whose elements represent antireflexive relations.  A predicate F is an element of IrreflexiveBinaryPredicate if and only if F is a binary predicate and, for every X in the domain of F, (not (F X X)).  Examples: spouse, causes, northOf, temporallyDisjoint. 
Note this additional restriction: A Cyc predicate F can be an element of IrreflexiveBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also NoteOnArgumentTypingAndPropertiesOfRelations.")

;;; IsaVsMainConstituentVsConstituents
(isa IsaVsMainConstituentVsConstituents SharedNote)
(comment IsaVsMainConstituentVsConstituents "When to use isa, mainConstituent, or constituents.  We develop the following example as a basis for explaining the differences.  

Consider X, where (isa X Water). If we add some other substance(s) to X, to the point where the mixture acquires some salient characteristic(s) different from Water while retaining all the main properties, then we should assert (mainConstituent X W), where W is the original water -- i.e., (isa W Water) -- and X is the whole new mixture of W with some other stuff(s).  Suppose we add enough enough other stuff that the physical properties of the mixture become significantly different from those of water; then we should assert only (constituents X W).  

isa - Use isa if X would commonly be referred to as `water', including cases in which a small number of minor characteristics are different due to some admixture.   

Examples (arguably, 3 and 4 are borderline cases): 

1. An instance of (PureFn Water) isa Water.  
2. An instance of Water-Ingestible isa Water (but may have trace constituents).
3. An instance of PoolWater isa Water (but has some Chlorine as a salient constituents). 
4. An instance of SeaWater isa Water (but has some Salt-NaCl as a salient constituents).  


mainConstituent - Use mainConstituent when X contains other substances besides water, would NOT commonly referred to as `water', and yet has MOST of the material properties of water.  As a rule, most of the properties of the mainConstituent transfer to the substance it's a part of.  Often such substances have at least one important and/or perceptible characteristic (due to admixture) that is quite different from the properties of water.  

Examples: 

1. An instance of Lemonade is NOT called `water' but has water as a mainConstituent.  It tastes quite different from water.  It has nutritional (caloric) value.  It is a human-made beverage.  
2. An instance of Coffee-Beverage is NOT called `water' but has water as a mainConstituent.  It tastes quite different from water.  It contains caffeine.  Also, a specific inference about coffee's (lack of) transparency should override the transparency which would otherwise be inferred from the material properties of its mainConstituent.  
3. Aqueous hydrochloric acid has many of the properties of its main constituent, water -- for example, transparency, viscosity, density, freezing point, etc.  But it also has the very important difference that it is highly acidic, caustic, etc. -- and attributing to it water's potability would be disastrous.

constituents - Use constituents when X is NOT commonly referred to as `water' and has FEW properties of water, even though X contains water.  

Examples:

1. An instance of (SolidFn Gelatin) is NOT called `water', and though it has water among its constituents, gelatin has very few of the properties of water. 
2. An instance of Concrete is NOT called `water'; though it has water among its constituents, it has none of the salient characteristics of water.
3. An instance  of Mud is NOT called `water' and has few characteristics of water, though water is among its constituents.  Its mainConstituent is some portion of Soil.")

;;; Island
(isa Island ExistingObjectType)
(genls Island LandBody)
(genls Island IslandsAndIslandGroup)
(comment Island "The collection of all islands, each being a LandBody (smaller than a Continent) surrounded by water.")

;;; IslandArea
(isa IslandArea ExistingObjectType)
(genls IslandArea IslandsAndIslandGroup)

;;; IslandsAndIslandGroup
(isa IslandsAndIslandGroup ExistingObjectType)
(genls IslandsAndIslandGroup LandTopographicalFeature)
(comment IslandsAndIslandGroup "A collection of topographical features.  Each element of IslandsAndIslandGroup is either an island or a group of islands (see Archipelago).  Elements of IslandsAndIslandGroup include groups of scattered islands which do not form a natural geographical area; the chief reasons for representing such groups is that they are geopolitical areas and/or were historically significant.  Examples: FrenchPolynesia, Cyclades, OuterHebrides-Archipelago, Grenadines-Islands.")

;;; ItineraryDocument
(isa ItineraryDocument ExistingObjectType)
(genls ItineraryDocument TextualMaterial)
(comment ItineraryDocument "The collection of documents that contain information about the time/location of each leg of a trip, accomodations, etc.")

;;; January
(isa January MonthOfYearType)
(genls January CalendarMonth)

;;; Jealousy
(isa Jealousy FeelingAttributeType)
(genls Jealousy Resentment)
(comment Jealousy "Intolerance of rivalry; feeling of suspicion and resentment of one's rivals.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.
Note: Envy is related to covetousness, wanting (perhaps in the future) what someone else has; Jealousy is related to possessiveness, wanting to keep what is (or was or could have been) already yours.")

;;; JobAttribute
(isa JobAttribute UnorderedAttributeType)
(genls JobAttribute AttributeValue)
(comment JobAttribute "A collection of attributes.  Each element of JobAttribute describes a general property of a job or type of job.  Examples of JobAttribute include BlueCollar, WhiteCollar, and FlexibleWorkingHours.")

;;; JobCapacity
(isa JobCapacity CapacityAttribute)
(comment JobCapacity "the attribute of performing something as a job")

;;; Joint-AnimalBodyPart
(isa Joint-AnimalBodyPart AnimalBodyPartType)
(genls Joint-AnimalBodyPart SolidTangibleThing)
(genls Joint-AnimalBodyPart Configuration)
(genls Joint-AnimalBodyPart AnimalBodyPart)
(comment Joint-AnimalBodyPart "The collection of all joints of Animals.  A joint is the juncture between the ends or edges of abutting bones of the animal's skeleton.  Joints are of several types mechanically (e.g., ball-and-socket).  Many major joints function as hinges, in which the ends of the abutting bones are joined with ligaments and cushioned by cartilege.")

;;; JointTypeBetweenFn
(isa JointTypeBetweenFn CollectionDenotingFunction)
(resultIsa JointTypeBetweenFn ExistingObjectType)
(resultGenl JointTypeBetweenFn Configuration)
(arg1Isa JointTypeBetweenFn ExistingObjectType)
(arg1Genl JointTypeBetweenFn PartiallyTangible)
(arg2Isa JointTypeBetweenFn ExistingObjectType)
(arg2Genl JointTypeBetweenFn PartiallyTangible)
(comment JointTypeBetweenFn "(JointTypeBetweenFn OBJ-TYPE1 OBJ-TYPE2) denotes the class of Connections found between objects of type OBJ-TYPE1 and OBJ-TYPE2.  For example, (JointTypeBetweenFn TelephoneBody TelephoneReceiver) is the class of Connections between telephone handsets and bodies of telephones.  (JointTypeBetweenFn Humerus Radius-Bone) would be the class of elbows, but we chose to reify that class (ElbowJoint).  JointTypeBetweenFn is most useful when one needs to refer to a type of connection without creating it and naming it specifically.")

;;; July
(isa July MonthOfYearType)
(genls July CalendarMonth)

;;; JunctionOfPaths
(isa JunctionOfPaths SituationType)
(genls JunctionOfPaths PartiallyTangible)
(genls JunctionOfPaths StaticSituation)
(genls JunctionOfPaths 
  (GroupFn SpatialThing))
(comment JunctionOfPaths "The collection of junctions of paths, each being an arrangement of two or more links of Path-Generics such that the parts are in a particular spatial relation to each other (they are all locally connected to each other and join at the place of the JunctionOfPaths).  It includes the case of two or more paths that 'cross' at a junction, but not the case in which the end of one path simply joins the end of another path.  For junctions in PathSystems, see junctionInSystem.")

;;; JunctionOfPipes
(isa JunctionOfPipes RegionType)
(genls JunctionOfPipes JunctionOfPaths)
(comment JunctionOfPipes "The collection of all junctions of pipes or tubes.  Each junction permits flow between any two Pipe-GenericConduits joined at that junction.  At any JunctionOfPipes, three or more Pipe-GenericConduit segments must be joined, although some joined pipes may loop back to the same junction.")

;;; June
(isa June MonthOfYearType)
(genls June CalendarMonth)

;;; JuvenileAnimal
(isa JuvenileAnimal ExistingObjectType)
(genls JuvenileAnimal BiologicalStageOfDevelopment)
(genls JuvenileAnimal PortableObject)
(genls JuvenileAnimal Animal)
(comment JuvenileAnimal "An element of LifeStageType.  JuvenileAnimal is the collection of all animals that are not fully grown nor fully mature.")

;;; JuvenileFn
(isa JuvenileFn CollectionDenotingFunction)
(resultIsa JuvenileFn ExistingObjectType)
(resultGenl JuvenileFn JuvenileAnimal)
(arg1Isa JuvenileFn OrganismClassificationType)
(arg1Genl JuvenileFn Animal)
(comment JuvenileFn "JuvenileFn is a Cyc function, and in particular a CollectionDenotingFunction.  (JuvenileFn ORGCLASSTYPE) represents that subset of JuvenileAnimal whose elements are the juveniles of the group of animals denoted by ORGCLASSTYPE.  E.g., (JuvenileFn Deer) denotes the collection of all fawns.  Certain kinds of organisms have no juveniles (e.g., the members of Amoeba).")

;;; Killing-Biological
(isa Killing-Biological TemporalObjectType)
(isa Killing-Biological DefaultDisjointScriptType)
(genls Killing-Biological DestructionEvent)
(genls Killing-Biological AnimalActivity)
(comment Killing-Biological "A collection of events.  In each instance of this collection, one living organism ends the life of another, either intentionally or unintentionally.")

;;; Kilogram
(isa Kilogram UnitOfMass)
(isa Kilogram StandardUnitOfMeasure)
(isa Kilogram MKSUnitOfMeasure)
(isa Kilogram UnitOfMeasureWithPrefix)
(resultIsa Kilogram Mass)
(resultIsa Kilogram ScalarInterval)
(argsIsa Kilogram CycSystemRealNumber)
(comment Kilogram "The measurement function used in Cyc to represent the basic unit of mass in the Metric system (and in Cyc).  See also MKSUnitOfMeasure, UnitOfMeasure.")

;;; Kilometer
(isa Kilometer UnitOfDistance)
(isa Kilometer UnitOfMeasureWithPrefix)
(isa Kilometer MKSUnitOfMeasure)
(resultIsa Kilometer Distance)
(resultIsa Kilometer ScalarInterval)
(argsIsa Kilometer CycSystemRealNumber)
(comment Kilometer "The measurement function used in Cyc to represent the 1000-meter unit used within the Metric system to measure distance.  Modern countries using the metric system measure their roads - and their road races - in kilometers. See also MKSUnitOfMeasure, UnitOfMeasure.")

;;; KilometersPerHour
(isa KilometersPerHour UnitOfSpeed)
(isa KilometersPerHour MKSUnitOfMeasure)
(resultIsa KilometersPerHour ScalarInterval)
(resultIsa KilometersPerHour Speed)
(resultIsa KilometersPerHour VectorInterval)
(argsIsa KilometersPerHour CycSystemRealNumber)
(comment KilometersPerHour "(KilometersPerHour NUMBER) returns a dimensionless rate or speed of NUMBER kilometers per hour.")

;;; KineticEnergyPoweredDevice
(isa KineticEnergyPoweredDevice ExistingObjectType)
(genls KineticEnergyPoweredDevice PoweredDevice)
(comment KineticEnergyPoweredDevice "A collection of devices; a subset of PoweredDevice.  An instance of KineticEnergyPoweredDevice does not have an `on-board' energy source incorporated into it, at least not one supplying the bulk of the power requirements of the device.  Instead, its operating power is supplied by the kinetic energy from something else in motion -- such as animal muscle power (including human labor), wind energy, or hydraulic power.  Examples include elements of the collections Hammer and Piano-Acoustic. (Contrast with SelfPoweredDevice --- e.g., an electric organ is a SelfPoweredDevice, not a KineticEnergyPoweredDevice.)")

;;; KnowledgeBase
(isa KnowledgeBase ObjectType)
(genls KnowledgeBase Database-AbstractContent)
(genls KnowledgeBase ConventionalClassificationSystem)
(comment KnowledgeBase "A collection of intangible individuals;
a subset of Database-AbstractContent. Each element
of KnowledgeBase is a database that attempts to
represent the structure of at least part of the world.
Instances include Cyc and SENSUS-Information1997.")

;;; Lake
(isa Lake ExistingObjectType)
(genls Lake BodyOfWater)
(comment Lake "A collection of topographical features.  Each instance of Lake is a land-locked body of water, typically but not necessarily of freshwater.  Examples: LakeMaracaibo, LakeWinnipeg, LakeTanganyika, LochNess-Lake, LakeErie, LakeTahoe.  Note that inland saltwater lakes, commonly referred to as `seas', belong to the collection InlandSea (rather than to Lake); e.g., CaspianSea, BlackSea, DeadSea.")

;;; LandBody
(isa LandBody ExistingObjectType)
(genls LandBody TopographicalFeature)
(comment LandBody "A collection of geographical regions.  Each element of LandBody is a cohesive chunk of land whose extent is principally defined by one or more bordering bodies of water (liquid or frozen).  Types of LandBody include the subsets Island and Continent.  Examples: Australia, ContinentOfNorthAmerica, Trinidad-Island, Crete-Island-Greece.  Areas of land defined by human occupation or political boundaries, e.g.,  NorthernCalifornia or NorthernIreland, are elements of GeographicalRegion, but not of LandBody.")

;;; LandTopographicalFeature
(isa LandTopographicalFeature ExistingObjectType)
(genls LandTopographicalFeature EarthStuff)
(genls LandTopographicalFeature SolidTangibleThing)
(genls LandTopographicalFeature TopographicalFeature)
(genls LandTopographicalFeature OutdoorLocation)
(comment LandTopographicalFeature "A collection of geographical regions.  Each element of TopographicalFeature is a region of land distinguishable from surrounding regions by salient physical differences in surface texture, three-dimensional shape, or elevation.   For example, the ArabianPeninsula, ZionHill, the SanAndreasFault, the GreatSmokyMountains.")

;;; LandTransportationDevice
(isa LandTransportationDevice ExistingObjectType)
(genls LandTransportationDevice TransportationDevice)
(comment LandTransportationDevice "A collection of physical devices. An instance of LandTransportationDevice is a device used for transportation on land.  Subsets of LandTransportationDevice include the collections Automobile, Snowmobile, TrainCar, HorseCarriage, BabyCarriage, Bicycle, SkateBoard, and more.")

;;; Language
(isa Language ObjectType)
(genls Language CommunicationConvention)
(genls Language 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE-RELATED-OBJECT"))
(genls Language 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE"))
(comment Language "The collection of systems which use conventionalized signs or symbols. This includes dead languages, computer languages, unspoken languages, codes - anything which relates symbols to meaning.")

;;; LateralRegionFn
(isa LateralRegionFn ReifiableFunction)
(isa LateralRegionFn IndividualDenotingFunction)
(resultIsa LateralRegionFn AnimalBodyRegion)
(arg1Isa LateralRegionFn AnimalBodyRegion)
(comment LateralRegionFn "The function (LateralRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of the flanks or side parts or lateral main sections (away from the mid-line) of REGOROBJ, or the lateral main areas of REGOROBJ as opposed to the medial or middle area; the right and left regions then both include parts of the lateral regions.  LateralRegionFn applies when REGOROBJ itself has an intrinsic right/left orientation (unlike, say, a sphere), but if REGOROBJ is a part within a larger region or object that has its own right/left orientation, the function returns REGOROBJ's portions farthest from the mid-line (with respect to left and right) of the larger region or object.")

;;; LawEnforcementOfficer
(isa LawEnforcementOfficer OccupationType)
(genls LawEnforcementOfficer PublicSectorEmployee)
(genls LawEnforcementOfficer Professional)
(comment LawEnforcementOfficer "A collection of persons; a subset of Professional.  Each element of LawEnforcementOfficer is a person whose job is to prevent, detect, stop, and/or punish people committing illegal activities.  The collection LawEnforcementOfficer includes local, state, and special police (e.g., transit police), and federal agents (e.g., border patrol, national security agents).  An instance of LawEnforcementOfficer typically also belongs to one of the following collections: StateEmployee, LocalGovernmentEmployee, or NationalGovernmentEmployee (see PublicSectorEmployee).")

;;; LawEnforcementOrganization
(isa LawEnforcementOrganization ExistingObjectType)
(genls LawEnforcementOrganization LegalGovernmentOrganization)
(comment LawEnforcementOrganization "The collection of all law enforcement organizations.  An element of LawEnforcementOrganization is any organization which is legally empowered to enforce laws.  This collection includes police forces, national bureaux of investigation, some forest services, park police, hunting and game commission officers, BorderPoliceOrganizations, governmental executive protection services, military police, etc.")

;;; Layer
(isa Layer ExistingObjectType)
(genls Layer SheetOfSomeStuff)
(comment Layer "The collection of all layers of things, each layer being a SheetOfSomeStuff that is sheetSurfaceConnected, or situated adjacent, surface-to-surface, to at least one surface or layer or region on one side, and possibly to other layers or surfaces on both sides.  A layer may be part of a larger object, or it may be an independent whole object such as a hide confined in a stack of hides.  A Layer is not a FreeSheet.  See the OneSidedVsTwoSidedObjectNote.")

;;; Layered
(isa Layered PhysicalStructuralAttribute)
(comment Layered "The physical structural attribute of being layered, laminate, or made of Layers, like stratified rock or an onion.  An object that is Layered has two or more parts that are each Layers.")

;;; Leader
(isa Leader PositionType)
(genls Leader Person)
(genls Leader IntelligentAgent)
(comment Leader "A collection of persons.  Each element of Leader is a person who heads an instance of Organization.  Typically, a leader of an organization makes major decisions on behalf of the whole organization, has the authority to direct the organization's personnel to carry out those decisions, and is empowered to engage or negotiate with external agents to achieve the organization's goals.  This collection includes leaders of subOrganizations, such as department heads within larger organizations.  Also, a single person may be a leader in more than one organization.  In addition, see hasLeaders, Manager, and seniorExecutives.")

;;; LeapYear
(isa LeapYear TemporalObjectType)
(genls LeapYear CalendarYear)
(comment LeapYear "The collection of CalendarYears which are leap years; i.e., calendar years in which February has 29 days")

;;; Learning
(isa Learning ScriptType)
(isa Learning TemporalObjectType)
(genls Learning PurposefulAction)
(genls Learning CompositePhysicalAndMentalEvent)
(comment Learning "The collection of all events, brief or extended, in which an agent is consciously acquiring information or know-how.")

;;; Leather
(isa Leather ExistingStuffType)
(isa Leather ProductType)
(genls Leather SolidTangibleThing)
(genls Leather FreeSheet)
(genls Leather SheetOfSomeStuff)
(comment Leather "A collection of tangible things.  Each element of Leather is a piece of tanned animal hide.  Pieces of Leather are commonly used as material inputs to the manufacture of shoes, gloves, upholstery, satchels and purses, saddles, etc.")

;;; LeftObject
(isa LeftObject ExistingObjectType)
(genls LeftObject PartiallyTangible)
(comment LeftObject "The collection of objects that are meant for, or are found on and distinctively structured for, the left side of some larger entity or ensemble of parts.  Examples include left hands, left shoes, left automobile turning signals.")

;;; LeftRegionFn
(isa LeftRegionFn ReifiableFunction)
(isa LeftRegionFn IndividualDenotingFunction)
(resultIsa LeftRegionFn AnimalBodyRegion)
(arg1Isa LeftRegionFn AnimalBodyRegion)
(comment LeftRegionFn "The function (LeftRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the left half or flank or left main portion of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic left/right orientation, or is part of a larger region or object that has a left/right orientation.")

;;; Leg
(isa Leg SymmetricAnatomicalPartType)
(genls Leg Appendage-AnimalBodyPart)
(comment Leg "The collection of all Animal appendages used for locomotion overland, supporting the animal and moving it along by walking, running, etc.  Thus wings, fins, etc., are not Legs.  The Foot-AnimalBodyPart is considered part of the Leg")

;;; LegalAgent
(isa LegalAgent ExistingObjectType)
(genls LegalAgent SocialBeing)
(comment LegalAgent "The collection of all legal agents; a subset of Agent.  A legal agent is one that has some legal status in a particular legal system.  At the very least, such an agent is recognized by some legal authority as having some kinds of rights and/or responsibilities as an agent (e.g., citizens of Germany), or as being subject to certain restrictions and penalties (e.g., a company that has been blacklisted by Iraq).  Thus, instances of LegalAgent include agents that may have property rights, may be taxed, may have a government identification number, may be sued, may have an address, etc. 
Note: membership in this collection is very much dependent upon context.  In some societies, only adult males and various kinds of state-run organizations would be included in LegalAgents.")

;;; LegalAgreement
(isa LegalAgreement ExistingObjectType)
(genls LegalAgreement Agreement)
(comment LegalAgreement "A collection of microtheories; a subset of Agreement.  Each element of LegalAgreement is an agreement which has a legal status, i.e., is recognized as a valid agreement by a government.  LegalAgreement includes the elements in its subsets SalesContract, PublicHealthRegulations, AssumableLoan, Patent, InsurancePlan, Visa-Permit, and the different kinds of License -- among many others.")

;;; LegalCode
(isa LegalCode ExistingObjectType)
(isa LegalCode MicrotheoryType)
(genls LegalCode GovernmentCOC)
(comment LegalCode "A collection of microtheories.  Each element of LegalCode is a microtheory for collecting all the instances of Law which hold in a given GeopoliticalEntity.  For example, LegalCode-ModernUnitedStates.")

;;; LegalCorporation
(isa LegalCorporation ExistingObjectType)
(genls LegalCorporation Organization)
(genls LegalCorporation LegalAgent)
(comment LegalCorporation "A collection of businesses.  An element of LegalCorporation is a private, legal, corporate entity with the legal rights to own property, manage itself, and sue or be sued.  It is established by a charter or registration granted by a government.  A corporation's owners have Stock in it and normally elect its BoardOfDirectors, but are usually not active in its operation nor liable for its debts, crimes, or torts.")

;;; LegalGovernmentOrganization
(isa LegalGovernmentOrganization ExistingObjectType)
(genls LegalGovernmentOrganization LegalAgent)
(genls LegalGovernmentOrganization Organization)
(comment LegalGovernmentOrganization "A collection of organizations.  An element of LegalGovernmentOrganization is an organization which is a part of, and funded by, the government of a geopolitical entity.  Examples include the InternalRevenueService, UnitedStatesNavy, and CityCouncilOfAustin (TX).  Some elements of LegalGovernmentOrganizations have legal standing in courts.")

;;; LegalHoliday
(isa LegalHoliday ScriptType)
(isa LegalHoliday TemporalObjectType)
(genls LegalHoliday Holiday)
(comment LegalHoliday "The subset of Holidays which are typically declared to be Holidays by the governments of western countries, and which are therefore days on which most people governed by that government do not work and on which students do not attend classes.  Such Holidays may coincide with ReligiousHolidays, especially where there is a government-sanctioned religion.")

;;; LegalProfessional
(isa LegalProfessional OccupationType)
(genls LegalProfessional Professional)
(comment LegalProfessional "A collection of persons; a subset of Professional.  Each element of LegalProfessional is a person working in the field of law. This collection includes lawyers, judges, paralegals, and law clerks.")

;;; LevelOfAConstruction
(isa LevelOfAConstruction ExistingObjectType)
(genls LevelOfAConstruction SpaceInAHOC)
(comment LevelOfAConstruction "The levels, also called floors or storeys, of a ConstructionArtifact.  Levels are regions in space; they are not two-dimensional planes.")

;;; LevelOfDiscomfort
(isa LevelOfDiscomfort SensoryReactionType)
(genls LevelOfDiscomfort AnimalPhysiologicalAttribute)
(genls LevelOfDiscomfort InternalSensoryAttribute)
(comment LevelOfDiscomfort "An AttributeType whose elements represent the various levels of discomfort that may be felt by a perceptual agent.  Typically, the agent must be a living entity.  Typically, the sensation is an internal feeling, and is more of a long-lasting dull ache than a sharp pain (see: LevelOfPain).")

;;; LevelOfExhaustion
(isa LevelOfExhaustion PhysicalUrgeType)
(genls LevelOfExhaustion InternalSensoryAttribute)
(genls LevelOfExhaustion AnimalPhysiologicalAttribute)
(comment LevelOfExhaustion "An AttributeType whose elements represent the qualitative degrees of exhaustion that an animal may feel.
Note that this predicate is NOT properly used for any other purpose (e.g., to describe metal fatigue, or the depletion of natural resources, or the gradual inhibition that a single cell devlops to repeated stimuli, etc., even though in English the words `exhaustion' and `fatigue' have those meanings.)  This is a good example of how Cyc's internal representation must, and does, disambiguate different concepts even though they might be metaphors for each other, and even though those distinct meanings might be mixed together at a word level in a natural language like English.")

;;; LevelOfHunger
(isa LevelOfHunger PhysicalUrgeType)
(genls LevelOfHunger InternalSensoryAttribute)
(genls LevelOfHunger AnimalPhysiologicalAttribute)
(genls LevelOfHunger ScalarInterval)
(comment LevelOfHunger "A collection of AnimalPhysiologicalAttributes that express how hungry an Animal is (e.g., Hungry, NotHungry, Starving).  These LevelOfHunger attributes are the first argument to the predicate hungerLevelOf (q.v.).")

;;; LevelOfPain
(isa LevelOfPain SensoryReactionType)
(genls LevelOfPain LevelOfDiscomfort)
(comment LevelOfPain "An AttributeType whose elements represent the qualitative levels of pain that may be felt by a perceptual agent.  Although the agent is often a living entity, this is not required.  The source of the pain could be either external or internal; in either case, the subjective feeling is generally `sharper' and hopefully shorter-lived than just `a feeling of discomfort' (see: LevelOfDiscomfort.)")

;;; LevelOfRelaxationFeeling
(isa LevelOfRelaxationFeeling SensoryReactionType)
(genls LevelOfRelaxationFeeling InternalSensoryAttribute)
(comment LevelOfRelaxationFeeling "An AttributeType whose elements represent the qualitative levels of comfort/relaxation/ease that an animal may have.  This feeling is generally internal, and relatively long-lasting (compared with, e.g., the duration of a painful twinge.)  Any positive degree of this LevelOfRelaxationFeeling is incompatible with a high level of MuscleTenseness, a high LevelOfPain, or a high LevelOfDiscomfort.")

;;; LexicalItem
(isa LexicalItem LinguisticObjectType)
(genls LexicalItem LinguisticObject)
(comment LexicalItem "The collection of items which form the lexicon of a language. These include both free morphemes, like 'dog', and bound morphemes, like affixes.")

;;; LexicalWord
(isa LexicalWord LinguisticObjectType)
(genls LexicalWord LexicalItem)
(genls LexicalWord LinguisticObject)
(comment LexicalWord "The collection of all words. A lexical word is a free morpheme; it need not be bound to another lexical item.  Note that inflectional forms of a word, if there are such, do not constitute distinct words.  Examples of LexicalWord: Aluminum-TheWord, Confetti-TheWord, To-TheWord, Confetti-TheWord, Hang-Glide-MWW.")
(synonymousExternalConcept LexicalWord SENSUS-Information1997 "WORD")

;;; LifeThreateningCondition
(isa LifeThreateningCondition PhysiologicalConditionType)
(genls LifeThreateningCondition PhysiologicalCondition)
(comment LifeThreateningCondition "A collection of ailments which are distinguished by the shared characteristic that if left untreated, those ailments may cause an organism to die (but will not certainly do so).  Cases of Poisoning and of Pneumonia are often instances of LifeThreateningCondition.  Cf. TerminalPhysiologicalCondition.  ")

;;; LightIntensity
(isa LightIntensity PrimitiveAttributeType)
(genls LightIntensity PhysicalAttribute)
(genls LightIntensity SensoryAttribute)
(genls LightIntensity ScalarInterval)
(comment LightIntensity "A collection of attributes; a subset of ScalarInterval.  Each element of LightIntensity is a characterization of how brightly illuminated a location is.  (At the low extreme is total darkness.)  The light intensity of a location is indicated with the predicate illuminationLevel.")

;;; LightingDevice
(isa LightingDevice ExistingObjectType)
(genls LightingDevice PoweredDevice)
(genls LightingDevice PhysicalDevice)
(comment LightingDevice "A collection of physical devices.  An instance of LightingDevice has the primaryFunction of providing light.  The light provided may be provided in different ways and for different specialized purposes.  For example, it may be for general illumination of a fixed area (as by instances of Candle, Lantern, ElectricLamp, and Streetlight); or it may be for specially directed illumination (as by instances of AutomotiveLight and Flashlight); or it may be for use in a signal or sign (as by instances of TrafficLight and IndicatorLight); or it may be for some other special purposes (as by instances of StrobeLight).")

;;; LightningEvent
(isa LightningEvent TemporalObjectType)
(isa LightningEvent DefaultDisjointScriptType)
(genls LightningEvent ImmediateWeatherProcess)
(comment LightningEvent "The collection of lightning flashes, events in which the atmosphere discharges electricity.")

;;; Line
(isa Line ObjectType)
(genls Line GeometricThing)
(comment Line "A collection of geometical things.  Each instance of Line is a one-dimensional path through two- or three-dimensional space, whether curved or straight.  Formally, this is a 1-manifold.")

;;; LinguisticObject
(isa LinguisticObject LinguisticObjectType)
(genls LinguisticObject 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE-RELATED-OBJECT"))
(genls LinguisticObject MentalObject)
(genls LinguisticObject AbstractInformation)
(comment LinguisticObject "The collection of intangible objects which are parts of language systems.  Subsets of LinguisticObject include LinguisticObject, Title, WordSense, SententialConstituent, NonlexicalLinguisticObject, LinguisticAttribute, etc.)")

;;; LinguisticObjectType
(isa LinguisticObjectType Collection)
(genls LinguisticObjectType ObjectType)
(comment LinguisticObjectType "LinguisticObjectType is the collection of things which are subsets of LinguisticObject.")

;;; LinkFn
(isa LinkFn NonPredicateFunction)
(resultIsa LinkFn SetOrCollection)
(arg1Isa LinkFn Thing)
(comment LinkFn "For each PathSystem SYS, (LinkFn SYS) denotes the set of all links in SYS (see PathSystem).  Note that the function LinkFn and the predicate linkInSystem are interdefinable.  We normally use LinkFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can also replace each (linkInSystem X SYS) by (elementOf X (LinkFn SYS)).")

;;; LiquidAsset
(isa LiquidAsset ExistingObjectType)
(genls LiquidAsset SomethingExisting)
(comment LiquidAsset "A collection of objects.  Each element of LiquidAsset is either an instance of Currency or some asset that is readily convertible to currency by selling or borrowing againstit.  Examples: stocks, bonds, money market accounts.")

;;; LiquidFn
(isa LiquidFn CollectionDenotingFunction)
(resultIsa LiquidFn TangibleStuffStateType)
(resultGenl LiquidFn LiquidTangibleThing)
(arg1Isa LiquidFn TangibleStuffCompositionType)
(comment LiquidFn "A CollectionDenotingFunction.  LiquidFn takes as an argument a collection COL, membership in which is based only on physical and/or chemical composition and not on any other property (see TangibleStuffCompositionType).  (LiquidFn COL) is the collection of elements of COL that are in the LiquidStateOfMatter.  E.g., the mud in my driveway belongs to the collection (LiquidFn EarthStuff).")

;;; LiquidStateOfMatter
(isa LiquidStateOfMatter StateOfMatter-SolidLiquidGaseous)
(comment LiquidStateOfMatter "A basic physical state of matter.  Liquid objects are characterized at the macroscopic level by special qualities of flow, such as being Pourable and conforming to the bottom of whatever container they occupy.  Examples of things that typically have this attribute are: a `piece' of the Pacific Ocean in the tropics; a lump of mercury at room temperature; the blood in the circulatory system of a living mammal; and some molten silver about to be poured into a teapot mold.")

;;; LiquidTangibleThing
(isa LiquidTangibleThing TangibleStuffStateType)
(genls LiquidTangibleThing FluidTangibleThing)
(comment LiquidTangibleThing "A collection of tangible stuff.  Each element of LiquidTangibleThing is a tangible thing which is in a LiquidStateOfMatter; i.e., its shape would conform to the bottom of a vessel containing it.  Cf. FluidTangibleThing and GaseousTangibleThing.")

;;; List-Sequence
(isa List-Sequence ObjectType)
(genls List-Sequence Tuple)
(comment List-Sequence "The collection of all lists or finite sequences of items, as an abstract notion.  A List-Sequence is a special kind of Tuple that is a finite structure with a first and last member-position, and for each member-postion but the last, there is a succesor member-position.   A List-Sequence, like other Tuples, allows repetition of its members -- the same item can appear at multiple member-positions in the list.  A list can be viewed formally as a function from a finite index set of counting numbers, beginning with one or zero, into the domain of Things or perhaps some more restrictive domain.  Unlike Series, List-Sequence is purely abstract and the only implied relation between an item and its successor is the successor relation of the list itself.  List-Sequence is, technically, more specific than Tuple only in that the index set must be the counting numbers in their usual order rather than some other index set.")

;;; ListTheFormat
(isa ListTheFormat Format)
(comment ListTheFormat "A Format or datatype.  Multiple copies of entries, & any number of entries, are OK; and order matters; i.e., if you change the order of two different elements of a list, the resultant list is not equal to the original one")

;;; ListWithoutRepetition
(isa ListWithoutRepetition StuffType)
(genls ListWithoutRepetition TotallyOrderedSet)
(genls ListWithoutRepetition List-Sequence)
(comment ListWithoutRepetition "The collection of all those List-Sequences, for each of which, no element appears more than once in the list.  (In general a List-Sequence and Series may have repeated elements.)  See also SeriesWithoutRepetition.")

;;; ListeningDeliberately
(isa ListeningDeliberately TemporalStuffType)
(isa ListeningDeliberately DefaultDisjointScriptType)
(genls ListeningDeliberately Hearing)
(genls ListeningDeliberately AccessingAnIBT)
(comment ListeningDeliberately "The collection of events in which an Agent deliberately facilitates and does Hearing.")

;;; Liter
(isa Liter UnitOfVolume)
(isa Liter StandardUnitOfMeasure)
(isa Liter MKSUnitOfMeasure)
(isa Liter UnitOfMeasureNoPrefix)
(resultIsa Liter Volume)
(resultIsa Liter ScalarInterval)
(argsIsa Liter CycSystemRealNumber)
(comment Liter "The measurement function used in Cyc to represent the standard unit of capacity in the Metric system (and also in Cyc). See also UnitOfVolume, MKSUnitOfMeasure, UnitOfMeasure.")

;;; Liver
(isa Liver UniqueAnatomicalPartType)
(isa Liver AnimalBodyPartType)
(genls Liver Organ)
(comment Liver "The collection of all living Animal livers.  Each instance of Liver is a large compound InternalOrgan.  A Liver breaks down dead RedBloodCells, removes certain poisons and waste material from the blood stream, creates glycogen from sugars and proteins, stores glycogen, removes certain chemicals from the blood, secretes bile (BileTheSecretion) which is used for digestion,and regulates metabolism of carbohydrates, Proteins, Vitamins, Minerals, and fats.")

;;; LivingLanguage
(isa LivingLanguage ObjectType)
(genls LivingLanguage NaturalLanguage)
(comment LivingLanguage "LivingLanguage, a subset of NaturalLanguage, is the collection of all natural languages which have some native speaker(s).")

;;; LocalCustomerContactPoint
(isa LocalCustomerContactPoint ExistingObjectType)
(genls LocalCustomerContactPoint SingleSiteOrganization)
(genls LocalCustomerContactPoint LocalOrganization)
(comment LocalCustomerContactPoint "A collection of organizations.  Each element of LocalCustomerContactPoint is a single-site organization serving customers in a local area, working from a particular store, office, or other physical quarters where customers (or their agents) go in person to speak with company representatives about the services or products offered.  Elements of LocalCustomerContactPoint may be either stand-alone organizations or sub-organization of a larger company.  Examples of LocalCustomerContactPoint include NewYorkHospital, Threadgills restaurant, the Bank of America office on Jollyville Road, StudtmanPhoto studios, the Village Cinema on Anderson Lane.")

;;; LocalGovernmentOrganization
(isa LocalGovernmentOrganization ExistingObjectType)
(genls LocalGovernmentOrganization LegalGovernmentOrganization)
(genls LocalGovernmentOrganization LocalOrganization)
(comment LocalGovernmentOrganization "A collection of government organizations; a subset of LocalOrganization.  An element of LocalGovernmentOrganization is any government organization -- whether federal, state, county, or municipal -- that is specific to, i.e., has jurisdiction and/or services generally limited to, one (local) location.  For example, a Board of Education of a particular school district is a LocalGovernmentOrganization, because its authority extends to schools in a limited (local) area; in the U.S., such a Board answers to another LocalGovernmentOrganization, typically a city or township government.  In another example, an element of VeteransAdministrationMedicalCenter is a local organization in terms of its service area, but bureaucratically it belongs to the U.S. Federal government; thus, VeteransAdministrationMedicalCenter is a subset of both LocalGovernmentOrganization and USFederalGovernmentOrganization.")

;;; LocalOrganization
(isa LocalOrganization ExistingObjectType)
(genls LocalOrganization Organization)
(comment LocalOrganization "A collection of organizations.  An element of LocalOrganization is an organization having local `scope' -- that is, members distributed in a local area (a Neighborhood, City, rural region, etc.) or having a local area of activity and concern, as opposed to statewide, national, or international organizations.")

;;; LocomotionEvent
(isa LocomotionEvent TemporalObjectType)
(isa LocomotionEvent DefaultDisjointScriptType)
(genls LocomotionEvent AnimalActivity)
(genls LocomotionEvent Translation-SinglePath)
(genls LocomotionEvent Translation-Complete)
(comment LocomotionEvent "A collection of events; a subset of Movement-TranslationEvent.  In an instance of LocomotionEvent, the objectMoving (at least the object that is playing the role of doneBy in the event) moves along some pathway under its own power (i.e. plays the role of providerOfMotiveForce).  In addition to episodes of walking and swimming, LocomotionEvent includes events in which an agent moves itself using a device, with that agent supplying the motive force to the device -- as in instances of PedalingABicycle, IceSkating, InLineSkating, etc.  Since the locomotor virtually always supplies the vast majority of the force required to make the motion happen, it is safe to infer that IF something plays the role of providerOfMotiveForce, THEN it is an objectMoving.  In certain abnormal situations this rule will make the wrong conclusions: e.g. if a mountain climber's assent is aided by another stationary person above.  Some locomotion events are also transportation events, e.g. when someone is walking while carrying something else.
Note: Elements of LocomotionEvent may be `non-homogeneous' (by contrast, each LocomotionProcess is `homogeneous.')  That is, if you take timeSlices of a LocomotionEvent, they may or may not be LocomotionEvents.  E.g., even though a mountain-climbing event is a LocomotionEvent, if you take a time-slice of it  -- even a quite long time-slice of it! -- that whole time-slice could be where you were tying your climbing rope to a piton you'd just pounded into the mountainside, and that tying event is not a LocomotionEvent.  Note that this is not quite the same thing as the granularity of a process, such as AnimalWalkingProcess, where if you take a fine enough time-slice you are just lifting your leg up into the air.  In the case of a LocomotionEvent such as scaling a sheer rock wall, very little of the time actually involves the motion of your body up the wall. ")

;;; LocomotionProcess
(isa LocomotionProcess TemporalStuffType)
(isa LocomotionProcess DefaultDisjointScriptType)
(genls LocomotionProcess LocomotionProcess)
(genls LocomotionProcess Movement-TranslationProcess)
(genls LocomotionProcess LocomotionEvent)
(comment LocomotionProcess "The collection of processes in which an animal moves from one place to another by its own power.  A LocomotionProcess is an activity considered as a TemporalStuffType, in which any time-slice of the activity can also be considered an instance of that activity.  Subsets of LocomotionProcess include: AnimalWalkingProcess, Brachiating, Climbing, WheelchairLocomotionEvent, Boring-Locomotion, etc.")

;;; LogFn
(isa LogFn FunctionFromQuantitiesToQuantities)
(resultIsa LogFn ScalarInterval)
(arg1Isa LogFn ScalarInterval)
(comment LogFn "LogFn is the unary mathematical function that returns the natural logarithm of the number taken as its argument.  Its inverse (i.e., inverseFunc) is ExpFn.")

;;; LogicalConnective
(isa LogicalConnective RelationType)
(genls LogicalConnective Relationship)
(comment LogicalConnective "A collection of mathematical objects, including the basic logical connectives.  Each element of LogicalConnective is a Cyc predicate which takes one or more truth-valued expressions as arguments and returns a truth-valued argument.  The elements of LogicalConnective include and, or, not, and implies.")

;;; Loneliness
(isa Loneliness FeelingAttributeType)
(genls Loneliness FeelingAttribute)
(comment Loneliness "The disagreeable feeling of being without company.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  Some more specialized FeelingAttributeTypes are Loneliness, Solitude, etc.")

;;; LongAndThin
(isa LongAndThin AbstractShape)
(isa LongAndThin PhysicalStructuralAttribute)
(comment LongAndThin "A physical attribute.  LongAndThin is the PhysicalStructuralAttribute that characterizes a tangible object which has one dimension whose length exceeds that of each of the other two dimensions by at least a factor of three.  E.g., pencils, straws, telephone wire, submarines, skyscrapers. Cf. SheetShaped.")

;;; LookingForSomething
(isa LookingForSomething TemporalStuffType)
(isa LookingForSomething DefaultDisjointScriptType)
(genls LookingForSomething PurposefulAction)
(comment LookingForSomething "Searching for something with the intent to find it.  Instances of failure to find the object of the search are still instances of LookingForSomething.")

;;; LoopFn
(isa LoopFn NonPredicateFunction)
(resultIsa LoopFn SetOrCollection)
(arg1Isa LoopFn Thing)
(comment LoopFn "For each PathSystem SYS, (LoopFn SYS) denotes the set of all loops in SYS (see PathSystem).  Note that the function LoopFn and the predicate loopInSystem are interdefinable.  We normally use LoopFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can also replace each (loopInSystem X SYS) by (elementOf X (LoopFn SYS)).")

;;; LosingUserRights
(isa LosingUserRights TemporalObjectType)
(genls LosingUserRights TransferOut)
(genls LosingUserRights ChangeInUserRights)
(comment LosingUserRights "A collection of events.  In an instance of LosingUserRights, some Agent loses possession of something.  Thus, in such an event, that agent loses a previously held right (viz., some UserRightsAttribute) to use some item.  The item in question is identified as the objectOfPossessionTransfer, and the agent is the fromPossessor (i.e., the one from whom possession is taken).  The Agent may or may not be a deliberateActors in the event; e.g., selling one's car is done on purpose, but having one's car repossessed probably isn't.  If either of those two events happen to you, though, it is an element of the collection LosingUserRights.")

;;; Love
(isa Love FeelingAttributeType)
(genls Love Affection)
(comment Love "Strong affection for another agent arising out of kinship or personal ties.  Love may be felt towards things, too: warm attachment, enthusiasm, or devotion.  This does not, however, mean something as specialized/metaphorical as `Fred loves to eat ice cream' or `Ethel loves to get her way.'  Love is a collection, as further explained under Happiness.  Specialized forms of Love are Love-Romantic, platonic love, maternal love, infatuation, agape, etc.")

;;; LowAmountFn
(isa LowAmountFn GenericValueFunction)
(resultIsa LowAmountFn ScalarInterval)
(arg1Isa LowAmountFn PrimitiveAttributeType)
(arg1Genl LowAmountFn ScalarInterval)
(comment LowAmountFn "LowAmountFn is a Cyc function, in particular, an IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' amounts of a wide variety of attributes.  When ATT is a type of attribute, (LowAmountFn ATT) returns an instance of ATT which is considered `a low amount of' ATT in the current context.  A low amount of ATT is more than (VeryLowAmountFn ATT) but less than (MediumAmountFn ATT).")

;;; Lung
(isa Lung SymmetricAnatomicalPartType)
(genls Lung Organ)
(comment Lung "The collection of all lungs, the primary respiratory organs of AirBreathingVertebrates.")

;;; MKSUnitOfMeasure
(isa MKSUnitOfMeasure RelationType)
(genls MKSUnitOfMeasure UnitOfMeasure)
(comment MKSUnitOfMeasure "A subset of UnitOfMeasure.  MKSUnitOfMeasure is the collection of all the measurement functions whose results use the MKS (i.e., meter-kilogram-second) system of measure to describe physical quantities.  Examples: MetersPerSecondPerSecond, Liter, MetricTon.")

;;; Mach-UnitOfSpeed
(isa Mach-UnitOfSpeed UnitOfSpeed)
(isa Mach-UnitOfSpeed UnitOfMeasureNoPrefix)
(resultIsa Mach-UnitOfSpeed ScalarInterval)
(resultIsa Mach-UnitOfSpeed Speed)
(resultIsa Mach-UnitOfSpeed VectorInterval)
(argsIsa Mach-UnitOfSpeed CycSystemRealNumber)
(comment Mach-UnitOfSpeed "The speed of sound on earth at sea level.  344.4 m/s")

;;; MailingLocation
(isa MailingLocation ConventionalClassificationType)
(isa MailingLocation ContactLocationType)
(genls MailingLocation ContactLocation)
(comment MailingLocation "A collection of places; a subset of ContactLocation.  Each element of MailingLocation is a location at which an agent can be contacted by mail, e.g., a home, office, or post office box.")

;;; MainFunction
(isa MainFunction CapacityAttribute)
(genlAttributes MainFunction IntendedFunction)
(comment MainFunction "One of the attributes which characterize the capacity in which some agent does a kind of action.  MainFunction indicates that an agent does a certain type of action (ScriptType) as its main function (rather than, say, as a hobby).  MainFunction can be used to indicate the function that an organization was created to do; e.g., the MainFunction of the USBorderPatrol is Patrolling the U.S. border.  See actsInCapacity.")
(comment MainFunction "An element of CapacityAttribute.  The attribute MainFunction characterizes an entity participating in a situation as doing so in its main function.  It is frequently used to indicate a device employed in doing its primaryFunction, or an organization engaged in the work it was created to do.")

;;; MakingAGesture
(isa MakingAGesture TemporalObjectType)
(isa MakingAGesture DefaultDisjointScriptType)
(genls MakingAGesture VoluntaryBodyMovement)
(genls MakingAGesture IBTGeneration-Original)
(genls MakingAGesture VisualInformationConveyingAct)
(comment MakingAGesture "The collection of acts of IBOCreation
done by an Animal (including Person) arranging its limbs or other
body parts (and whatever objects the limbs might be holding) in some
meaningful configuration (static or dynamic).  Vocal IBTGenerations
are not considered to be gestures (see MakingAnOralSound for this),
but they might be done in conjunction with gestures.


NB:  MakingAGesture is NOT a subset of NonVerbalCommunicating;
at most, an instance of MakingAGesture is only half of a communication event.
And someone can make a gesture while alone, without using it for
communication. Thus, only some gestures are subEvents of
NonVerbalCommunicating. (But note that MakingAGesture IS a subset
of IBTGeneration-Original (q.v.), since every gesture encodes
information, whether or not it is used for communication in a
particular instance.)")

;;; MakingAnAgreement
(isa MakingAnAgreement TemporalObjectType)
(isa MakingAnAgreement DefaultDisjointScriptType)
(genls MakingAnAgreement CreationEvent)
(genls MakingAnAgreement SocialOccurrence)
(genls MakingAnAgreement Communicating)
(comment MakingAnAgreement "A collection of events.  Each element in the collection MakingAnAgreement is an event in which two or more parties specify the terms of an Agreement to which they will be agreeingAgents, and enter into it.  Some types of MakingAnAgreement include its subsets GettingEngaged, EmployeeHiring, DeclaringCeaseFire, and MakingAReservation.")

;;; MakingAnOralSound
(isa MakingAnOralSound DefaultDisjointScriptType)
(genls MakingAnOralSound BodyMovementEvent)
(genls MakingAnOralSound EmittingSound)
(genls MakingAnOralSound SingleDoerAction)
(comment MakingAnOralSound "The collection of actions in which the lips and other mouth parts are
used to make sound. MakingAnOralSound means the event in which sound
is produced more-or-less voluntarily, using the mouth, mouth portal,
lips, and tongue.")

;;; MakingFacialExpression
(isa MakingFacialExpression TemporalStuffType)
(isa MakingFacialExpression DefaultDisjointScriptType)
(genls MakingFacialExpression Action)
(genls MakingFacialExpression BodyMovementEvent)
(comment MakingFacialExpression "The collection of events during which the configuration of an agent's face changes.  This is usually associated with the expression of some emotion.")

;;; MakingFn
(isa MakingFn CollectionDenotingFunction)
(resultIsa MakingFn TemporalObjectType)
(resultIsa MakingFn ScriptType)
(resultGenl MakingFn MakingSomething)
(arg1Isa MakingFn TemporalStuffType)
(arg1Genl MakingFn PartiallyTangible)
(comment MakingFn "MakingFn is a Cyc function, in particular a CollectionDenotingFunction.  (MakingFn TYPE) denotes the set of events in which elements of some TYPE of thing are made (whether manufactured, constructed, produced, etc.)  E.g., (MakingFn Automobile) is the set of events in which cars are manufactured.  Having this function saves us from having to create tens of thousands of new terms for peanut-butter-making, business-card-making, etc.")

;;; MakingSomething
(isa MakingSomething TemporalObjectType)
(isa MakingSomething DefaultDisjointScriptType)
(genls MakingSomething PurposefulAction)
(genls MakingSomething CreationEvent)
(comment MakingSomething "A collection of (very generic) events.  In each MakingSomething event, something (tangible) is made from some raw materials. The end result may or may not be what is called a Product.")

;;; MakingSomethingAvailable
(isa MakingSomethingAvailable TemporalObjectType)
(isa MakingSomethingAvailable DefaultDisjointScriptType)
(genls MakingSomethingAvailable HumanActivity)
(comment MakingSomethingAvailable "The collection of all activities in which an Agent makes it possible for another Agent to use (but not necessarily own) a good or service.")

;;; MakingTravelArrangements
(isa MakingTravelArrangements TemporalObjectType)
(isa MakingTravelArrangements DefaultDisjointScriptType)
(genls MakingTravelArrangements PurposefulAction)
(comment MakingTravelArrangements "The collection of all events in which an agent arranges for some kind of travel event.")

;;; MaleAnimal
(isa MaleAnimal ExistingObjectType)
(genls MaleAnimal Animal)
(comment MaleAnimal "The collection of all male animals.")
(synonymousExternalConcept MaleAnimal SENSUS-Information1997 "MALE-ANIMAL")

;;; MaleFn
(isa MaleFn CollectionDenotingFunction)
(resultIsa MaleFn ExistingObjectType)
(resultGenl MaleFn MaleAnimal)
(arg1Isa MaleFn OrganismClassificationType)
(arg1Genl MaleFn Animal)
(comment MaleFn "MaleFn is a Cyc function, in particular, an instance of CollectionDenotingFunction.  (MaleFn ORGTYPE) returns that subset of the animal taxonomic collection ORGTYPE which includes all and only the males of ORGTYPE.  For example, (MaleFn Person) and MalePerson denote the same collection, while (MaleFn Deer) denotes the collection of all bucks.")

;;; MalePerson
(isa MalePerson ExistingObjectType)
(genls MalePerson MaleAnimal)
(genls MalePerson Person)
(comment MalePerson "The collection of all male persons.")
(synonymousExternalConcept MalePerson SENSUS-Information1997 "MALE")

;;; Malleability
(isa Malleability MaterialStrengthType)
(genls Malleability PhysicalAttribute)
(genls Malleability ScalarInterval)
(comment Malleability "A collection of attributes; a subset of PhysicalAttribute.  Each element of Malleability represents a specific capacity of a physical material to be shaped or formed.  Different degrees of malleability may be designated using a GenericValueFunction.  Malleability of objects is indicated with the predicate malleabilityOfObject.")

;;; Malnutrition
(isa Malnutrition PhysiologicalConditionType)
(genls Malnutrition AilmentCondition)
(comment Malnutrition "A collection of physiological conditions caused by the lack of
essential Nutrients (usually vitamins, minerals or proteins).
Specialized forms of Malnutrition are: (1)
DietaryDeficiencyCondition, in which the necessary nutrients are
not ingested; and (2) Malnutrition-Secondary, in which the necessary
nutrients are not properly metabolized.")

;;; Mammal
(isa Mammal BiologicalClass)
(genls Mammal Vertebrate)
(comment Mammal "The collection of mammals; a subset of Vertebrate.  Each element of Mammal is an air-breathing, warm-blooded animal which, if female, nurses its young with milk secreted by mammary glands.  The collection Mammal includes the subsets Dog, Horse, Person, Elephant, etc.  The skin of mammals is typically covered with hair (or sometimes hair modified into scales or plates (e.g. pangolins)), but some types are almost hairless.  All mammals other than the Monotremes of Australia bear live young rather than laying eggs and have teats, which on females are used for nursing the young.  Monotremes do not have teats, but both male and female produce milk from MammaryGlands.   Mammal is an instance of BiologicalClass.")

;;; Manager
(isa Manager OccupationType)
(genls Manager DeskWorker)
(comment Manager "A collection of people.  An instance of Manager is a person whose primary job is to manage other people, directing their work activity in an Organization or for a Project.  A Manager tells his or her subordinate workers what to do.")

;;; Manufacturing
(isa Manufacturing DefaultDisjointScriptType)
(genls Manufacturing MakingSomething)
(comment Manufacturing "A collection of events.  In each Manufacturing event, raw materials or component parts are combined to produce a product.  In a typical Manufacturing process, the motivation of the manufacturer is that the value of the outputs should exceed the value of the inputs.  Manufacturing does not include related or supportive processes such as transporting the raw materials to the manufacturing site, scheduling done ahead of time, etc. -- the concept ProductionEvent covers that bigger picture.")

;;; ManufacturingOrganization
(isa ManufacturingOrganization ExistingObjectType)
(genls ManufacturingOrganization Organization)
(genls ManufacturingOrganization CommercialOrganization)
(comment ManufacturingOrganization "A collection of organizations.  An element of ManufacturingOrganization is any organization whose MainFunction is Manufacturing or production of goods.  These may be departments, suborganizations, companies, or conglomerate enterprises.")

;;; Map
(isa Map TemporalStuffType)
(isa Map ObjectType)
(genls Map StructuredInformationSource)
(genls Map InformationBearingThing)
(comment Map "A collection of information bearing things (IBTs).  Each element of Map is an IBT which, properly interpreted, models a region of physical space many times its own size by using graphical symbols (or possibly another code), often in conjunction with a natural language, to represent features of one or more of the following kinds: geographical areas (GeographicalRegion), topographical features (TopographicalFeature), political regions (GeopoliticalEntity), climate zones (ClimateCycleType), human artifacts (ConstructionArtifact), population densities (populationDensity), etc.  Maps are generally intended to help an agent to orient itself in space or to understand some aspect(s) of a large spatial area.  The collection Map includes terrestrial and celestial maps, either on paper, in computerized geographical information systems, or in other forms.")

;;; March
(isa March MonthOfYearType)
(genls March CalendarMonth)

;;; MarineCorps
(isa MarineCorps ExistingObjectType)
(genls MarineCorps MilitaryOrganization)
(comment MarineCorps "A collection of military organizations.  An instance of MarineCorps is a military organization, modern or historical, composed mainly of soldiers (i.e., combat personnel) who serve on ships or in conjunction with naval forces, with the purpose of defending or attacking coastal areas.")

;;; MarinePersonnel
(isa MarinePersonnel OccupationType)
(genls MarinePersonnel MilitaryPerson)
(comment MarinePersonnel "A soldier who is in the Marines.")

;;; MaritalStatusOfPeople
(isa MaritalStatusOfPeople SiblingDisjointAttributeType)
(isa MaritalStatusOfPeople UnorderedAttributeType)
(genls MaritalStatusOfPeople AttributeValue)
(comment MaritalStatusOfPeople "The attribute values indicating the maritalStatus of a Person.  Members of this collection include Divorced, Widowed, Single, and Married.")

;;; MarkingOnASurface
(isa MarkingOnASurface TemporalStuffType)
(isa MarkingOnASurface DefaultDisjointScriptType)
(genls MarkingOnASurface IBOCreation)
(genls MarkingOnASurface HandlingAnObject)
(comment MarkingOnASurface "A collection of events.  In a MarkingOnASurface event, visible markings are placed on a surface by an Agent.  The marking may be done by adding material to or removing material from the surface; e.g., by painting or by engraving the surface.")

;;; Masculine
(isa Masculine LinguisticObject)
(isa Masculine GenderOfLivingThing)
(comment Masculine "Masculine is a gender, indicating either that an Animal or Plant is male, or that a word has what is called masculine gender.")

;;; Mass
(isa Mass FundamentalNumericAttributeType)
(genls Mass ScalarInterval)
(genls Mass PhysicalAttribute)
(comment Mass "A collection of physical attributes.  Each element of Mass is an amount of matter present in a given object.  Elements of Mass may be either a fixed interval, such as two pounds, or a range, such as a legal load for a certain type of trailer.  The more mass an object has, the greater is the force required to accelerate it.  See UnitOfMass for the units used by Cyc to measure mass.")

;;; MassNoun
(isa MassNoun LinguisticObjectType)
(genls MassNoun SpeechPart)
(comment MassNoun "The collection of all mass nouns.  Mass nouns are syntactically singular, and often they denote stufflike things. Example: 'water'.")

;;; MaterialStrengthType
(isa MaterialStrengthType Collection)
(genls MaterialStrengthType DerivedNumericAttributeType)
(comment MaterialStrengthType "A collection of collections.  Each element of MaterialStrengthType is a specific collection of attributes used in determining the strength of a material.  Examples: Hardness, Malleability, Ductility, Elasticity, ShearStrength.")

;;; MathematicalObject
(isa MathematicalObject ObjectType)
(genls MathematicalObject IntangibleIndividual)
(genls MathematicalObject MathematicalOrComputationalThing)
(comment MathematicalObject "A collection of intangible objects; a subset of MathematicalThing.  Each element of MathematicalObject is a purely abstract mathematical thing which is an individual (see Individual).  Examples of MathematicalObject include: Quantifiers, RealNumbers, Triangles, TruthValues, etc.  But instances of SetOrCollection are not MathematicalObjects in Cyc, because they are not Individuals.")

;;; MathematicalOrComputationalThing
(isa MathematicalOrComputationalThing ObjectType)
(genls MathematicalOrComputationalThing Intangible)
(comment MathematicalOrComputationalThing "A collection of abstract (Intangible) objects.  Each element of MathematicalOrComputationalThing is a massless, timeless abstraction, such as an algorithm, logical connective, character string, assertion, integer, etc.")
(synonymousExternalConcept MathematicalOrComputationalThing SENSUS-Information1997 "ABSTRACTION")

;;; May
(isa May MonthOfYearType)
(genls May CalendarMonth)

;;; MeaningInSystemFn
(isa MeaningInSystemFn ReifiableFunction)
(resultIsa MeaningInSystemFn Thing)
(arg1Isa MeaningInSystemFn IndexedInfoSource)
(arg2Isa MeaningInSystemFn CharacterString)
(comment MeaningInSystemFn "The function (MeaningInSystemFn INFOSOURCE STRING), applied to a character string or code STRING in some external information system INFOSOURCE, returns whatever concept is meant by that string or code in that system.  For example, the value of (MeaningInSystemFn WordNet-Information ''N221566'') is the concept (or WordNet `synset') represented by the synonyms (rampart|bulwark|wall), meaning 'an embankment built around a space for defensive purposes' in the WordNet system.  The STRING can have any format chosen by the person who builds the representation of the external system; usually it will include some index string that is used as an identifier in the external system.  In addition, the STRING may arbitrarily contain any further characters or information, depending on how the external information is selected and processed.  This function allows you to relate a concept in an external system to an arbitrarily complicated expression composed of Cyc concepts.  If the external concept has a direct, exact mapping to a single Cyc constant, then it is better to use the predicate synonymousExternalConcept rather than this function.  If the there is a direct correspondence to one Cyc constant, but it is only an approximate correspondence of meaning, you can use overlappingExternalConcept.")

;;; MeasurableAttributeType
(isa MeasurableAttributeType Collection)
(genls MeasurableAttributeType PrimitiveAttributeType)
(comment MeasurableAttributeType "A collection of collections.  Each element of MeasurableAttributeType is a collection of attributes, the members of which are quantifiable attributes, i.e., they can be assigned a numeric value.  For example, RateOfRotation and ConcentrationPerVolume.  For the units in which specific attributes are measured, see measuredIn, unitsMeasuringThisQuantity, standardUnitMeasuring.  Note that in Cyc, numbers are classified as measurable attributes; see RealNumber, etc.")

;;; MeasuringDevice
(isa MeasuringDevice ExistingObjectType)
(genls MeasuringDevice PhysicalDevice)
(comment MeasuringDevice "A collection of physical devices.  An instance of MeasuringDevice is a device used for measuring some quantity such as Distance, Volume, Temperature, etc.  Examples include the odometer in your car (an Odometer), the graduated glass measuring cup in your kitchen (a MeasuringCup), and the thermostat on your wall (a TemperatureMeasuringDevice, although it is also a ControlDevice.)")

;;; MeasuringSomething
(isa MeasuringSomething TemporalObjectType)
(isa MeasuringSomething DefaultDisjointScriptType)
(genls MeasuringSomething PurposefulAction)
(genls MeasuringSomething Thinking)
(comment MeasuringSomething "A collection of events.  Each element of MeasuringSomething is an event in which an agent uses a physical device to measure some physical attribute of a tangible object.  The last part of such an event involves the perception (and perhaps recording) of a measurementResult by some instance ofPerceptualAgent.  See also MeasurementFn.")

;;; MechanicalDevice
(isa MechanicalDevice ExistingObjectType)
(genls MechanicalDevice SolidTangibleThing)
(genls MechanicalDevice PhysicalDevice)
(comment MechanicalDevice "A collection of physical devices.  An instance of MechanicalDevice is a physical device which has one part that moves with respect to another of its parts.  Thus a spoon is not one of these, but a pair of scissors is, as are more complex devices such as vacuum cleaners and the SpaceShuttleChallenger.")

;;; MedialRegionFn
(isa MedialRegionFn ReifiableFunction)
(isa MedialRegionFn IndividualDenotingFunction)
(resultIsa MedialRegionFn AnimalBodyRegion)
(arg1Isa MedialRegionFn AnimalBodyRegion)
(comment MedialRegionFn "The function (MedialRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of the center parts or middle section (near the mid-line) of REGOROBJ, or the medial main portion of REGOROBJ as opposed to the right and left portions.  It applies when REGOROBJ itself has an intrinsic right/left orientation (unlike, say, a sphere), but if REGOROBJ is a part within a larger region or object that has its own right/left orientation, the function returns REGOROBJ's portion nearest the mid-line (with respect to left and right) of the larger region or object.")

;;; MedicalCareEvent
(isa MedicalCareEvent ScriptType)
(isa MedicalCareEvent TemporalObjectType)
(genls MedicalCareEvent ActionOnObject)
(genls MedicalCareEvent HumanActivity)
(genls MedicalCareEvent ServiceEvent)
(comment MedicalCareEvent "A collection of events.  When any medical care professional provides a medical service to patients, that is an instance of MedicalCareEvent.  An instance of MedicalCareEvent may be a diagnostic procedure, a treatment, a consultation, routine check-up, a medical test, etc. -- anything a medical care provider can bill for.  E.g., (BirthFn NicoleLenat) represents the birth of a particular person; since she were born in a modern Western hospital, doctors, nurses, and a variety of hospital equipment were present and used, so this is a MedicalCareEvent. ")

;;; MedicalCareInstitution
(isa MedicalCareInstitution ExistingObjectType)
(genls MedicalCareInstitution MedicalCareOrganization)
(comment MedicalCareInstitution "Large organizations that provide medical or psychiatric care and have facilities for patients to stay at least overnight.")

;;; MedicalCareOrganization
(isa MedicalCareOrganization ExistingObjectType)
(genls MedicalCareOrganization ServiceOrganization)
(genls MedicalCareOrganization MedicalCareProvider)
(comment MedicalCareOrganization "A collection of organizations; a subset of both MedicalCareProvider and ServiceOrganization.  An element of MedicalCareOrganization is any organization that provides some kind of medical care; it may be a sub-organization of a larger organization.  Examples include all instances of DoctorsOffice, DentistsOffice, OptometricFacility, or RehabilitationFacility; IndependentPracticeAssociation or Hospital; EmergencyRoom, DialysisUnit, AllergyTestingFacility; HomeNursingServiceOrganization or LongTermMedicalCareFacility; and VeterinaryHospital.")

;;; MedicalCareProfessional
(isa MedicalCareProfessional OccupationType)
(genls MedicalCareProfessional MedicalCareProvider)
(genls MedicalCareProfessional HealthProfessional)
(comment MedicalCareProfessional "A collection of persons; a subset of Professional.  Each element of MedicalCareProfessional is a person whose occupation principally involves medical care of patients, including surgery, psychological care, physical therapy, practical nursing, and dispensing drugs.  The collection MedicalCareProfessional includes members of the subsets Psychiatrist, Pharmacist, EmergencyMedicalTechnician, Nurse, Doctor-Medical, etc., as well as Veterinarian.")

;;; MedicalCareProvider
(isa MedicalCareProvider ExistingObjectType)
(genls MedicalCareProvider SocialBeing)
(comment MedicalCareProvider "The collection of agents who provide medical care in a professional capacity.")

;;; MedicalFacilityType
(isa MedicalFacilityType Collection)
(genls MedicalFacilityType ExistingObjectType)
(comment MedicalFacilityType "Instances are kinds of medical care facilities.  Some may be organizations , some may be places and some are equipment.")

;;; MedicalPatient
(isa MedicalPatient ExistingObjectType)
(genls MedicalPatient Animal)
(comment MedicalPatient "One who is undergoing medical care - which includes routine examinations as well as treatment for injuries or illnesses.")

;;; MedicalSpecialtyType
(isa MedicalSpecialtyType Collection)
(genls MedicalSpecialtyType OccupationType)
(comment MedicalSpecialtyType "The collection of all medical worker types, divided up by specialty.")

;;; MedicalTesting
(isa MedicalTesting ScriptType)
(isa MedicalTesting TemporalObjectType)
(genls MedicalTesting MedicalCareEvent)
(genls MedicalTesting Thinking)
(comment MedicalTesting "A collection of events in which some aspect of a patient's physiological condition is evaluated using medical procedures.  An instance of MedicalTesting is a test done on a patient -- or, often, on a sample taken from the patient's body -- in order to gather information (a) about the patient's general state of health, (b) to help in making a diagnosis, (c) to determine or monitor the severity of a known condition of the patient's.  The collection MedicalTesting includes an enormous variety of procedures in modern Western medicine, from simple blood tests to complex MRIs.")

;;; MedicalTreatmentEvent
(isa MedicalTreatmentEvent DefaultDisjointScriptType)
(isa MedicalTreatmentEvent TemporalObjectType)
(genls MedicalTreatmentEvent SimpleRepairing)
(genls MedicalTreatmentEvent MedicalCareEvent)
(comment MedicalTreatmentEvent "A collection of medical care events; i.e., a subset of MedicalCareEvent.  In any instance of MedicalTreatmentEvent, the procedures performed by a medical professional are done to alleviate or ameliorate an AilmentCondition.  The set of treatments for a specific ailment may be denoted using TreatmentFn (q.v.).")

;;; MediterraneanSea
(isa MediterraneanSea Entity)
(isa MediterraneanSea Sea)
(comment MediterraneanSea "A strategically important small sea between southern Europe, western Asia (the Levant), and northern Africa.")

;;; MediumAmountFn
(isa MediumAmountFn GenericValueFunction)
(resultIsa MediumAmountFn ScalarInterval)
(arg1Isa MediumAmountFn PrimitiveAttributeType)
(arg1Genl MediumAmountFn ScalarInterval)
(comment MediumAmountFn "MediumAmountFn is a Cyc function, in particular, an element of IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' amounts of a variety of attributes.  When ATT is a type of attribute, (MediumAmountFn ATT) returns an instance of ATT which is considered `a medium amount of' ATT in the current context.  A medium amount of ATT is more than (VeryLowAmountFn ATT) but less than (HighAmountFn ATT).")

;;; MeetingSomeone
(isa MeetingSomeone ScriptType)
(genls MeetingSomeone SocialOccurrence)
(comment MeetingSomeone "A collection of actions.  In a MeetingSomeone event, one Agent is moving and meets (comes into close proximity with) another Agent.  This may or may not be purposeful.  It may be performed by non-human animals, and occasionally by other sorts of Agents.
Note: this does not mean `being introduced to someone', but rather `going to meet with someone'.")

;;; MeetingTakingPlace
(isa MeetingTakingPlace TemporalObjectType)
(isa MeetingTakingPlace DefaultDisjointScriptType)
(genls MeetingTakingPlace SocialGathering)
(comment MeetingTakingPlace "The collection of human meeting events, in which Persons gather intentionally at a location in order to communicate or share some experience; business is often transacted at such a meeting.  Examples include: a particular conference, a business lunch, etc.")

;;; MegaHertz
(isa MegaHertz UnitOfFrequency)
(isa MegaHertz UnitOfMeasureWithPrefix)
(resultIsa MegaHertz Frequency)
(resultIsa MegaHertz Rate)
(resultIsa MegaHertz ScalarInterval)
(argsIsa MegaHertz CycSystemRealNumber)
(comment MegaHertz "The measurement function used in Cyc to represent the common unit of frequency.     See also UnitOfFrequency, UnitOfMeasure.")

;;; Megabyte
(isa Megabyte UnitOfMeasureWithPrefix)
(resultIsa Megabyte PhysicalAttribute)
(resultIsa Megabyte ScalarInterval)
(argsIsa Megabyte CycSystemRealNumber)
(comment Megabyte "The measurement function used in Cyc to represent a common unit of computer memory and disk capacity.  The value of (Megabyte 1) equals approximately one million (8-bit) bytes.  See also UnitOfMeasure.")

;;; Melting
(isa Melting TemporalStuffType)
(isa Melting DefaultDisjointScriptType)
(genls Melting MakingSomething)
(genls Melting PhysicalStateChangeEvent)
(comment Melting "A collection of events.  In each instance of this collection, an object is heated to (and then above) its freezingPoint and is thereby changed from a SolidStateOfMatter to a LiquidStateOfMatter.")

;;; Memory
(isa Memory StuffType)
(genls Memory MentalInformation)
(comment Memory "A collection of mental information.  Each element of Memory is the propositional content of a mental state in which a person recalls past events.  Most commonly those memories concern first-person experiences, but they may include recollections of anything that the person has learned in the past.")

;;; MensClothing
(isa MensClothing ProductType)
(isa MensClothing ExistingObjectType)
(genls MensClothing SheetOfSomeStuff)
(genls MensClothing SomethingToWear)
(comment MensClothing "A collection of objects.  Each element of MensClothing is a clothing item worn usually by men, i.e., items normally found in the men's section of department stores.  Subsets include Tuxedos and MensJockeyUnderwear.")

;;; MentalActivity
(isa MentalActivity ScriptType)
(isa MentalActivity TemporalObjectType)
(genls MentalActivity AnimalActivity)
(genls MentalActivity MentalEvent)
(comment MentalActivity "The collection of all actions which involve some mental activity on the part of at least one doer (see doneBy).  Consciously carrying out some activity, solving a math problem, engaging in a conversation, are all examples of MentalActivity.")

;;; MentalAttribute
(isa MentalAttribute AttributeType)
(genls MentalAttribute AttributeValue)
(comment MentalAttribute "A collection of attributes.  Each element of MentalAttribute is an attribute which pertains to an agent's mental state or mental ability.  Examples: HighIntelligence, LegallyDrunk, VisualAwareness, InattentiveMentalActivityLevel.")

;;; MentalEvent
(isa MentalEvent ScriptType)
(isa MentalEvent TemporalObjectType)
(genls MentalEvent Event)
(comment MentalEvent "A collection of events. Each event belonging to MentalEvent has some actor whose mental functions are involved (see actors). Mental events include such things as theorizing about something, dreaming, perceiving, sensing, having a realization, designing something, making a decision, and consciously carrying out a task.  Some of those examples are actions as well as events (see doneBy).  For mental events that are also instances of Action, see the subset MentalActivity.")
(synonymousExternalConcept MentalEvent SENSUS-Information1997 "MENTAL-PROCESS")

;;; MentalInformation
(isa MentalInformation StuffType)
(genls MentalInformation AbstractInformation)
(genls MentalInformation MentalObject)
(genls MentalInformation PropositionalInformationThing)
(comment MentalInformation "A collection of information.  Each element of MentalInformation is the propositional content of a specific mental state of an individual person. Thus, this is information which is embodied in a person having a memory or sensory perception or other type of thought.  Note that elements of MentalInformation are the propositional content of memories, perceptions, judgments, etc.  For example, when I remember that my grandmother's eyes are blue, the mental information contained therein is `my [the rememberer's] grandmother's eyes are blue'; it is NOT `I remember that my grandmother's eyes are blue'.  As a consequence, mental information (as defined in Cyc) is not incorrigible.")

;;; MentalObject
(isa MentalObject StuffType)
(isa MentalObject ObjectType)
(genls MentalObject IntangibleIndividual)
(comment MentalObject "Each element of MentalObject is an intangible object intimately connected in some fashion with mental activity.  This includes objects such as thoughts, emotions, knowledge; events such as thinking and reasoning; and intangible time-like objects such as mental-processing-time and cpu-time.")

;;; MetaAssertionsForPolyCanonicalizingAssertions
(isa MetaAssertionsForPolyCanonicalizingAssertions SharedNote)
(comment MetaAssertionsForPolyCanonicalizingAssertions "If one wishes to state a fact M about an assertion A, i.e. if one wishes to assert the meta-assertion M(A) and if A canonicalizes into multiple assertions, a_1, a_2...a_n,then one must do a non-standard procedure.  Due to the way the canonicalizer currently (Nov 96) handles meta-assertions, rather than simply asserting M(A), one must distribute the meta-assertion over the results of canonicalization.  That is one must assert M(a_1), M(a_2)...M(a_n). Consider the following example:  Suppose one wanted to assert 
`if a movement occurs then there is a friction subEvents, unless the movement is frictionless.'
The way one asserts this is by first asserting the fact without the `unless', i.e.

(ke-assert '(implies
	     (isa ?MOV MovementEvent)
              (thereExists ?FRIC
	      (and
	       (isa ?FRIC FrictionProcess)
	       (subEvents ?MOV ?FRIC)))) BaseKB)

Because there is an and with two literals on the right hand side of this rule it canonicalizes into two assertions which then become part of the KB.  One must next find these assertions as they appear in the KB:

(implies
 (and
  (isa ?MOV MovementEvent)
  (termOfUnit ?FRIC-EVENT146 (SKF-29707602 ?MOV)))
 (isa ?FRIC-EVENT146 FrictionProcess))

(implies
 (and
  (isa ?MOV MovementEvent)
  (termOfUnit ?FRIC-EVENT146 (SKF-29707602 ?MOV)))
 (subEvents ?MOV ?FRIC-EVENT146)).

Now using these one may state the `unless' part of the rule:

(ke-assert
  '(exceptWhen
    (isa ?MOV FrictionlessMotion)
    (implies
     (and
      (isa ?MOV MovementEvent)
      (termOfUnit ?FRIC-EVENT146 (SKF-29707602 ?MOV)))
     (isa ?FRIC-EVENT146 FrictionProcess)))
  BaseKB)

(ke-assert
  '(exceptWhen
    (isa ?MOV FrictionlessMotion)
    (implies
     (and
      (isa ?MOV MovementEvent)
      (termOfUnit ?FRIC-EVENT146 (SKF-29707602 ?MOV)))
     (subEvents ?MOV ?FRIC-EVENT146)))

  BaseKB).

This SharedNote is true about any Relationship which has Assertion as an argument type.")

;;; MetaKnowledgePredicate
(isa MetaKnowledgePredicate PredicateCategory)
(genls MetaKnowledgePredicate ModalRelationship)
(genls MetaKnowledgePredicate Predicate)
(comment MetaKnowledgePredicate "A collection of predicates.  Each element of MetaKnowledgePredicate is a predicate used in assertions about the Cyc ontology itself.  Examples: myCreator, cyclistNotes, sharedNotes, salientAssertions, axiomConclusionActionType.")

;;; MetaPredicate
(isa MetaPredicate PredicateCategory)
(genls MetaPredicate MetaRelation)
(comment MetaPredicate "A collection of predicates. Each element of MetaPredicate can be used to define other predicates.")

;;; MetaRelation
(isa MetaRelation RelationType)
(genls MetaRelation Relationship)
(comment MetaRelation "A collection of relations. Each element of MetaRelation can be used to define other relations.")

;;; Metal
(isa Metal TangibleStuffCompositionType)
(genls Metal InanimateThing)
(genls Metal TangibleThing)
(comment Metal "A collection of tangible stuffs.  Every instance of Metal is a piece of stuff defined as a metal only by its chemical composition, not by its physical properties.  Thus, Metal includes all instances of Mercury and Potassium as well as all pieces of Brass, Lead, Iron.  Cyc infers only by default that metals are solid.  MetalAlloy is a subset of Metal.")

;;; MetalAlloy
(isa MetalAlloy TangibleStuffCompositionType)
(genls MetalAlloy Mixture)
(genls MetalAlloy ArtificialMaterial)
(genls MetalAlloy Metal)
(comment MetalAlloy "A collection of tangible stuffs; a subset of Metal.  Each instance of MetalAlloy is a metallic stuff which is a homogeneous blend of at least one part of UnalloyedMetal with at least one other substance.  MetalAlloy is not a subset of Mixture, because each instance of MetalAlloy is defined not only by the amounts and kinds of its constituents, but also (unlike a mixture) by the internal structures formed during its creation.  Furthermore, the creation process is typically more complex than Mixing.  Common metal alloys include the instances of Bronze, Brass, and Steel.  Note that GalvanizedMetal is NOT a subset of MetalAlloy, because every instance of GalvanizedMetal has a coating of some Zinc on its surface, and thus (unlike an alloy) the components of galvanized metals are not homogenously distributed throughout.")

;;; Meter
(isa Meter UnitOfDistance)
(isa Meter StandardUnitOfMeasure)
(isa Meter MKSUnitOfMeasure)
(isa Meter UnitOfMeasureNoPrefix)
(resultIsa Meter Distance)
(resultIsa Meter ScalarInterval)
(argsIsa Meter CycSystemRealNumber)
(comment Meter "The measurement function used in Cyc to represent the basic unit of measure in the metric system.  The meter is also the basic unit of measure for length in CYC.  See also MKSUnitOfMeasure, UnitOfMeasure.")

;;; MetersPerSecond
(isa MetersPerSecond UnitOfSpeed)
(isa MetersPerSecond StandardUnitOfMeasure)
(isa MetersPerSecond MKSUnitOfMeasure)
(isa MetersPerSecond UnitOfMeasureNoPrefix)
(resultIsa MetersPerSecond ScalarInterval)
(resultIsa MetersPerSecond Speed)
(resultIsa MetersPerSecond VectorInterval)
(argsIsa MetersPerSecond CycSystemRealNumber)
(comment MetersPerSecond "(MetersPerSecond NUMBER) returns a dimensionless rate or speed of NUMBER meters per second.  Notice that this result is not presently thought of as incorporating a vector, although it might be modified to do so at some point in the future if this should prove appropriate.")

;;; MetersPerSecondPerSecond
(isa MetersPerSecondPerSecond StandardUnitOfMeasure)
(isa MetersPerSecondPerSecond MKSUnitOfMeasure)
(isa MetersPerSecondPerSecond UnitOfAcceleration)
(isa MetersPerSecondPerSecond UnitOfMeasureNoPrefix)
(resultIsa MetersPerSecondPerSecond Acceleration)
(resultIsa MetersPerSecondPerSecond ScalarInterval)
(argsIsa MetersPerSecondPerSecond CycSystemRealNumber)
(comment MetersPerSecondPerSecond "The basic measure of acceleration")

;;; MicroscopicScaleObject
(isa MicroscopicScaleObject ExistingObjectType)
(genls MicroscopicScaleObject TangibleThing)
(comment MicroscopicScaleObject "A collection of objects.  Every instance of MicroscopicScaleObject is a material object which is so small that human beings cannot perceive it, except (perhaps) with the use of special devices such as electron microscopes.  Some types of MicroscopicScaleObject include its subsets Molecule, Atom, SubAtomicParticle, Chloroplast, and Mitochondrion.")

;;; Microtheory
(isa Microtheory Collection)
(isa Microtheory MicrotheoryType)
(genls Microtheory AbstractInformation)
(genls Microtheory IntangibleIndividual)
(comment Microtheory "The collection of all microtheories, or `mts' for short.  Microtheories implement contexts in Cyc.  Each mt serves to group a set of assertions together that share some common assumptions.  Thus each mt can be thought of as having two parts: a corpus of assertions that represent the `content' of the mt, and a separate corpus of assertions that represent the `assumptions' which are being made.  E.g., in a normal modern everyday life microtheory, there might be hundreds of content assertions such as `drivers are at least 16 years old', and there might be dozens of assumption assertions about that microtheory's content, such as `all actors are assumed to be law-abiding'.   You can think of the assumptions as a set of extra conjuncts on the left hand side (the antecedent or `if'-part) of every content assertion in the mt.  

Each assertion in the knowledge base must be explicitly stated to be true in at least one mt.  It will then (by inference) also be true in all the more specialized contexts.  If something is true in the `life in North America' mt, then it should by default be true in the `life in Canada' mt.  I.e., the microtheories are organized into a generalization/specialization lattice by the predicate genlMt (q.v.), just as collections are organized into such a lattice by genls, and just as predicates are organized into such a lattice by genlPreds.  Just as a collection may have several incommensurable supersets, so too a microtheory may have several incommensurable genlMts.  Just as each and every collection must have some explicitly recorded superset (except for Thing), each and every mt must have some (expicitly recorded) more general mt (except for the BaseKB, which is the most general context, containing universal, timeless truths).  Just as a Cyc concept may have multiple incommensurable sets of which it is an element (via isa), so too a Cyc assertion may be declared to be true in a set of incommensurable mts.

Every query is made in some mt, so the answer you get might very well depend on the mt in which you ask the question.  Let's call the current context C1, for the remainder of this paragraph.  The only assertions which can be used in C1 to answer the query are those assertions which were explicitly stated to be true in C1 or in some more general mt than C1.  But what if you want and need something like assertion P, to answer the question, but P doesn't fit that criterion, though P is true in some other mts that are unrelated to C1?  You can `import' or `lift' P into C1, by conjoining to its left hand side (if-part) the various assumptions of a context C999 in which P is known to be true.  I.e., what you actually conclude to be true in C1 is an assertion of the form `if a1 and a2 and... then P', where a1, a2,... are the assumptions of a context in which P holds (but which are NOT implied by assumptions of C1).  When there are several contexts to choose from, from which to import P, you will usually prefer the context whose assumptions are most similar to C1's assumptions, so there will be few extra conjuncts that need to be inserted in the `lifting' process.

There is an implicit third component to each Microtheory, namely the Cyc terms which are `known about' in that mt.  E.g., Lenat is not `known about' in a microtheory set in prehistoric times; PhotochemicalEnergyTransduction is not `known about' in a microtheory representing things that a toddler believes to be true; etc.  Unlike the content and the assumptions, however, there is no need to explicitly collect into one list all the terms which are `known about'.  Rather, one could compute such a list by looking at all the terms which are mentioned anywhere in the content assertions of the mt.

Note that Microtheory is itself a `first-class object', as is each and every element of that collection --- e.g., CommercialBuyingMt, WorldGeographyMt, USHealthcareMt, HumanSocialLifeMt, etc.  The assertions about a Microtheory are just like any other Cyc assertions.  

Note that one important predicate we haven't mentioned here yet is the one that says `assertion P is true in microtheory M'.  That predicate is ist.  Thus:  (ist M P).

Note that another important predicate we haven't mentioned here yet is the one that says `microtheory M has the proposition P as a domain assumption'.  Thus: (domainAssumptions M P).")

;;; MicrotheoryPredicate
(isa MicrotheoryPredicate RelationType)
(genls MicrotheoryPredicate Predicate)
(comment MicrotheoryPredicate "A collection of predicates.  Each element of MicrotheoryPredicate is a predicate used to describe the properties and relationships of instances of Microtheory.  Examples: domainAssumptions, mtTime, genlMt, adheresToCodeOfConduct, ist-Agreement, ist-Obligation.")

;;; MicrotheoryType
(isa MicrotheoryType Collection)
(genls MicrotheoryType Collection)
(comment MicrotheoryType "A collection of collections.  Each instance of MicrotheoryType is a type of Microtheory, for example, ProblemSolvingCntxt and GeneralMicrotheory.")

;;; Microwaved
(isa Microwaved PreparationAttribute)
(genlAttributes Microwaved Cooked)
(comment Microwaved "The attribute Microwaved is a specialized form of Cooked.  Food that is Microwaved has been prepared in an event of Microwaving, using a MicrowaveOven.")

;;; Microwaving
(isa Microwaving DefaultDisjointScriptType)
(isa Microwaving TemporalObjectType)
(genls Microwaving CookingFood)
(comment Microwaving "A collection of events in which a MicrowaveOven is used to heat food (or drink).
After a Microwaving event, the food involved has been Microwaved.")

;;; Midday
(isa Midday TemporalObjectType)
(genls Midday QualitativeTimeOfDay)
(comment Midday "A Midday is the daily event where the Sun is near its `highest' position in the daily cycle.  A Midday overlaps the start of an Afternoon, and a Morning overlaps the start of a Midday.")

;;; MigratoryAnimal
(isa MigratoryAnimal ExistingObjectType)
(genls MigratoryAnimal Animal)
(comment MigratoryAnimal "A subset of Animal; the collection of animals that change their dwelling place on a periodic, typically seasonal basis.  Such behavior is usually characteristic of particular types of BiologicalSpecies.")

;;; MilesPerHour
(isa MilesPerHour UnitOfSpeed)
(isa MilesPerHour UnitOfMeasureNoPrefix)
(resultIsa MilesPerHour ScalarInterval)
(resultIsa MilesPerHour Speed)
(resultIsa MilesPerHour VectorInterval)
(argsIsa MilesPerHour CycSystemRealNumber)
(comment MilesPerHour "A unit of speed")

;;; MilitaryAircraft
(isa MilitaryAircraft ProductType)
(isa MilitaryAircraft ExistingObjectType)
(genls MilitaryAircraft SolidTangibleProduct)
(genls MilitaryAircraft AirTransportationDevice)
(comment MilitaryAircraft "The collection of all aircraft used for military purposes, or equipped to be used for such purposes.")

;;; MilitaryOfficer
(isa MilitaryOfficer OccupationType)
(genls MilitaryOfficer Leader)
(genls MilitaryOfficer MilitaryPerson)
(comment MilitaryOfficer "A collection of people, a subset 
of MilitaryPerson. Each element of this collection is
somebody who is an officer in some MilitaryOrganization,
e.g., an element of Admiral or Lieutenant.")

;;; MilitaryOrganization
(isa MilitaryOrganization ExistingObjectType)
(genls MilitaryOrganization Organization)
(comment MilitaryOrganization "A collection of organizations.  An element of MilitaryOrganization is an organization whose function (and expertise) is the use of armed force, or the threat of such use, against enemies, especially other organized, armed enemies.  A military organization includes its fighting forces and their command structure, together with dedicated support services controlled by that military command.  Typically, there are special conditions in the relationships between a MilitaryOrganization and its workers, going beyond what is expected of work agreements in civilian settings, including strict sanctions to enforce obedience.  This collection includes GovernmentMilitaryOrganizations such as the armies, navies, air forces, etc., of the world's governments, and in addition private armies, rebel armies, and organized mercenary units.")

;;; MilitaryPerson
(isa MilitaryPerson OccupationType)
(genls MilitaryPerson Professional)
(comment MilitaryPerson "A collection of persons; a subset of Professional.  Each element of MilitaryPerson is a person who works for some MilitaryOrganization, usually holding some MilitaryTitle or rank.  Subsets include MilitaryOfficer and EnlistedPerson.")

;;; Mineral
(isa Mineral ExistingStuffType)
(genls Mineral SolidTangibleThing)
(genls Mineral NaturalTangibleStuff)
(genls Mineral InorganicStuff)
(comment Mineral "A collection of tangible things.  Each element of Mineral is a piece of homogeneous inorganic physical substance that has a crystalline structure.  For example, instances of Diamond, Turquoise-Gem, Jade-Gem, Corundum.")

;;; MineralOre
(isa MineralOre TangibleStuffCompositionType)
(genls MineralOre EarthStuff)
(comment MineralOre "A collection of tangible things; a subset of EarthStuff.  Each element of MineralOre is a piece of substance from which some useful Mineral can be extracted.  For example, elements of IronOre, BauxiteOre, and Copper-Ore.")

;;; MinusFn
(isa MinusFn FunctionFromQuantitiesToQuantities)
(resultIsa MinusFn ScalarInterval)
(arg1Isa MinusFn ScalarInterval)
(comment MinusFn "MinusFn is the unary mathematical function that changes the sign of the number taken as its argument; e.g., (MinusFn 2) returns -2, and (MinusFn -2) returns 2.")

;;; Minute-UnitOfAngularMeasure
(isa Minute-UnitOfAngularMeasure UnitOfMeasureNoPrefix)
(isa Minute-UnitOfAngularMeasure UnitOfAngularDistance)
(resultIsa Minute-UnitOfAngularMeasure PhysicalAttribute)
(resultIsa Minute-UnitOfAngularMeasure ScalarInterval)
(argsIsa Minute-UnitOfAngularMeasure CycSystemRealNumber)
(comment Minute-UnitOfAngularMeasure "A unit to measure the size of angles, in the Imperial system of measurement.  60 minutes = 1 degree (Degree-UnitOfAngularMeasure)")

;;; MinuteFn
(isa MinuteFn IndividualDenotingFunction)
(isa MinuteFn NonPredicateFunction)
(resultIsa MinuteFn CalendarMinute)
(arg1Isa MinuteFn NonNegativeInteger)
(arg2Isa MinuteFn CalendarHour)
(comment MinuteFn "(MinuteFn ?M ?H) denotes a CalendarMinute -- in particular, minute number ?M of hour ?H.  For example, (MinuteFn 12 (HourFn 18 (DayFn 14 (MonthFn February (YearFn 1966))))) denotes 6:12pm Feb. 14th, 1966")

;;; MinutesDuration
(isa MinutesDuration UnitOfTime)
(isa MinutesDuration UnitOfMeasureNoPrefix)
(isa MinutesDuration UnitOfMeasure)
(resultIsa MinutesDuration ScalarInterval)
(resultIsa MinutesDuration Time-Quantity)
(argsIsa MinutesDuration CycSystemRealNumber)
(comment MinutesDuration "MinutesDuration is a function that takes one or two numbers and returns, as its value, some amount of Time.  An expression of the form (MinutesDuration ?min ?max) denotes a quantity of Time that is at least ?min minutes and at most ?max minutes.  An expression of the form (MinutesDuration ?num) denotes a quantity of Time that is exactly ?num minutes.")

;;; Misty-PhysicalState
(isa Misty-PhysicalState PhysicalStructuralAttribute)
(comment Misty-PhysicalState "A physical attribute.  Misty-PhysicalState is the PhysicalStructuralAttribute that characterizes mist; i.e., being a mixture of a gaseous substance with suspended particles of liquid.")

;;; Mixing
(isa Mixing TemporalStuffType)
(isa Mixing DefaultDisjointScriptType)
(genls Mixing CreationEvent)
(genls Mixing HandlingAnObject)
(comment Mixing "A collection of events.  In each Mixing, two or more substances are combined to form a Mixture.")

;;; Mixture
(isa Mixture ExistingStuffType)
(genls Mixture TangibleThing)
(comment Mixture "A collection of tangible stuffs.  Every instance of Mixture is a tangible stuff composed of two or more different constituents which have been mixed.  The stuffs which were inputs to the mixing do not form chemical bonds between them, and at a later time the mixture may be resolved by some SeparationEvent.  Examples include all elements of the collections Blood, Mud, Air, and CarbonatedBeverage.  A mixture has a composition but not a structure; thus, the following are NOT mixtures, since all have some structure: a wet sponge, a person, or a portion of plywood.
Note: By default, mixtures are assumed to be stable, i.e., they won't separate on their own.  Use separatingConstituent to override this default for a constituent that does separate out spontaneously (e.g. a CarbonatedBeverage going flat).")

;;; Mob
(isa Mob StuffType)
(genls Mob Group)
(comment Mob "A collection of objects; a subset of Group.  Each element of Mob is a group that contains a large number of objects or events of the same type.  Mobs typically have too many members to enumerate or reify; one rarely refers to particular mob members, or at most refers to relatively few of them.  Examples: the Andes-Mountains is a mob of mountains; each element of Galaxy is a mob of stars; a cup of sand is a mob of grains of sand; and making popcorn involves a mob of corn kernel bursting events.")

;;; MobFn
(isa MobFn CollectionDenotingFunction)
(resultIsa MobFn Collection)
(resultGenl MobFn Mob)
(arg1Isa MobFn ObjectType)
(comment MobFn "MobFn is a Cyc CollectionDenotingFunction.  MobFn is used for referring to specializations of Mob; esp. note that applications of MobFn produce COLLECTIONS (of mobs), not individual mobs.  MobFn takes any element of ObjectType as its argument and returns a subset of Mob, namely the collection containing those mobs whose groupMembers are elements of that ObjectType.  (MobFn OBJ-TYPE) denotes the collection of all mobs whose members belong to (isa) OBJ-TYPE.  For example, a clump of hair on my head is an element of (MobFn Hair-Strand).  The collection Galaxy is a subset of (MobFn Star).  And the collection Applauding (i.e., all applause events) could be referred to as (MobFn `HandClappingEvent').")

;;; Modal
(isa Modal LinguisticObjectType)
(genls Modal Verb)
(comment Modal "The collection of all modal auxiliary verbs. Modals have only tensed forms, do not inflect for person and number, and can take contracted negation. Example: `should'.")

;;; ModalRelationship
(isa ModalRelationship RelationType)
(genls ModalRelationship Relationship)
(comment ModalRelationship "A collection of predicates and functions.  Each element of ModalRelationship is a predicate or function wherein substituting equals for equals may not preserve truth.  For example, `believes': even though Jack's age is equal to 29, we can't substitute `29' for `Jack's age' in the sentence `Fred believes that Jack's age is 31', because Fred surely does NOT believe that 29 is 31.  Thus, `believes' is a modal relationship.  So are meta-predicates such as myCreator: e.g., suppose that Doug Lenat added the term FirstUSPresident to the Cyc ontology, and Cyc later is told that that person was George Washington, who in turn is represented by the term GeorgeWashington, which term was NOT entered by Doug but by Karen Pittman; it would be incorrect to substitute equals for equals [that is, to substitute GeorgeWashington for FirstUSPresident] in the assertion (myCreator FirstUSPresident Lenat) and conclude (myCreator GeorgeWashington Lenat), since Doug did not enter the latter term into Cyc's ontology.  Thus, meta-predicates such as myCreator are also modal relationships.  The same applies to functions; e.g., if we had a function such as MyCreatorFn, then (MyCreatorFn FirstUSPresident) would not have the same value as (MyCreatorFn GeorgeWashington).")

;;; ModeratelyAlert
(isa ModeratelyAlert Alertness)
(genlAttributes ModeratelyAlert Awake)
(comment ModeratelyAlert "ModeratelyAlert is an Alertness attribute which is a specialization of Awake.  It is the normal state of an Animal which is awake but paying particular attention to its environment.  It is a higher alertnessLevel than Sleepy, but lower than VeryAlert.")

;;; ModernHumanResidence
(isa ModernHumanResidence ProductType)
(isa ModernHumanResidence ExistingObjectType)
(genls ModernHumanResidence HumanResidence)
(genls ModernHumanResidence ModernShelterConstruction)
(comment ModernHumanResidence "A collection of objects; a subset of both HumanResidence and ModernShelterConstruction.  Each element of ModernHumanResidence is a humanly constructed shelter of a modern type, in which people live.  Such residences are the typical dwellings in the developed world of the late 20th century and may be found in the more affluent regions of the developing world.  Examples include houses in suburban `developments', modern apartment buildings, `modular' homes, etc.")

;;; ModernNavalShip
(isa ModernNavalShip ExistingObjectType)
(genls ModernNavalShip Weapon)
(genls ModernNavalShip Ship)
(comment ModernNavalShip "The collection of all Ships that have been used since the Nineteenth Century primarily for naval purposes, including military attack and defense, reconnaisance, support, rescue, coastal monitoring, etc.  Such a ship is naval in this sense even if it is not operated by a Navy. Most ModernNavalShips are specifically constructed for naval purposes.")

;;; ModernShelterConstruction
(isa ModernShelterConstruction ExistingObjectType)
(genls ModernShelterConstruction Building)
(comment ModernShelterConstruction "A collection of construction artifacts; a subset of Building (q.v.).  An instance of ModernShelterConstruction is a building that provides comfortable shelter for humans during some of their daily activities.  Elements of ModernShelterConstruction have the kinds of features found in modern-day buildings in Europe, the USA, and other technologically developed parts of the world, namely, amenities like doors, plumbing, electricity, and probably some kind of climate control system for maintaining humanly comfortable conditions Indoors.  Examples include the NewYorkHiltonAtBroadway, the SydneyOperaHouse, and instances of the collection ModernHumanResidence (e.g., a newly built home in a suburban development or a renovated brownstone in NYC).")

;;; MolecularStuff
(isa MolecularStuff TangibleStuffCompositionType)
(genls MolecularStuff TangibleThing)
(comment MolecularStuff "A collection of tangible stuff.  Every instance of MolecularStuff is a portion of stuff composed of covalently-bonded molecules.  Thus, Water and DNA are subsets of MolecularStuff; each of their instances consists of covalently bonded molecules.  But instances of Salt-NaCl are not examples of MolecularStuff.  Also, Oxygen is not a subset of MolecularStuff, since Oxygen denotes anything composed of that element, not just O2 (molecular oxygen) and O3 (ozone). ")

;;; Molecule
(isa Molecule ExistingObjectType)
(genls Molecule ChemicalObject)
(comment Molecule "A collection of microscopic-scale objects; a subset of ChemicalObject.  Every instance of Molecule is a microscopic object whose component atoms are all chemically bonded to each other; typically, this means that the atoms are covalently bonded.  Examples: some instances of Molecule, including molecules of oxygen (O2), ozone (O3), water (H2O), carbon monoxide (CO), carbon dioxide (CO2), etc., contain covalently bonded atoms belonging to the collection Oxygen.  Some highly complex examples of Molecule are those belonging to the collection DNA.  See also MoleculeFn.
Note: Diamond and other macroscopic covalent solids are excluded from belonging to Molecule by the constraint that instances of Molecule are microscopic.")

;;; MoleculeFn
(isa MoleculeFn CollectionDenotingFunction)
(resultIsa MoleculeFn ExistingObjectType)
(resultGenl MoleculeFn Molecule)
(arg1Isa MoleculeFn ChemicalCompoundType)
(arg1Genl MoleculeFn MolecularStuff)
(comment MoleculeFn "MoleculeFn is a Cyc function, specifically a CollectionDenotingFunction.  It takes an instance of ChemicalCompoundType as its sole argument and returns the set of all molecules of that compound.  (MoleculeFn X) denotes the collection of all Molecules of MolecularStuff X.  For example, (MoleculeFn Water) is the collection of all water molecules.")

;;; MoneraKingdom
(isa MoneraKingdom BiologicalKingdom)
(comment MoneraKingdom "A biological kingdom including bacteria, blue green algae, and prochlorophytes (recently discovered).  All members are prokaryotes - their cells lack a nuclear membrane and other internal organelles.")

;;; MonetaryExchangeOfUserRights
(isa MonetaryExchangeOfUserRights ScriptType)
(isa MonetaryExchangeOfUserRights TemporalObjectType)
(genls MonetaryExchangeOfUserRights ExchangeOfUserRights)
(genls MonetaryExchangeOfUserRights MoneyTransaction)
(comment MonetaryExchangeOfUserRights "The collection of events in which two Agents (exchangers) perform two TransferringPossessions with each other, one of which is a MoneyTransfer.  The buyer gains possession (i.e., some UserRightsAttribute) of the objectPaidFor  from the seller, who gains possession of the objectTendered.  Note that Renting, as well as Buying, is a MonetaryExchangeOfUserRights")

;;; MonetaryFlowRate
(isa MonetaryFlowRate DerivedNumericAttributeType)
(genls MonetaryFlowRate Rate)
(genls MonetaryFlowRate MoneyRate)
(genls MonetaryFlowRate AttributeValue)
(genls MonetaryFlowRate ScalarInterval)
(comment MonetaryFlowRate "A collection of rates; a subset of ScalarInterval.  Each element of MonetaryFlowRate is a rate at which money is earned, spent, transferred, lost, invested, etc. It is a measurable quantity, expressed as a rate of units of money per unit of time, such as DollarsPerHour (see UnitOfMonetaryFlowRate).  MonetaryFlowRate includes generic intervals, such as those which describe (in a particular context) HighIncomeLevel, LowIncomeLevel, etc.")

;;; Money
(isa Money FundamentalNumericAttributeType)
(genls Money ScalarInterval)
(genls Money AttributeValue)
(comment Money "The collection of amounts of currency or debt, of which payments, wealth, capital, assets, etc., consist.   An instance of Money may be considered as either (1) an amount of actual, valuable tangible goods (such as gold) or (2) an abstract quantity.  That is, from one perspective, elements of Money represent the amount of a debt (or credit), while from another perspective, they represent what is actually transferred to create or discharge a debt.  Typically, money is created by national governments; either (a) money is a backed claim for a certain amount of precious physical wealth payable by the government on demand (e.g., the gold standard), or (b) money is a legally enforced means of debt payment without any backing.  



Elements of Money in Cyc may be either a fixed amount, such as a U.S. five-dollar bill, or a range, such as `the price of a 1997 Mazda Protege'.  See UnitOfMoney for the units used by Cyc to measure instances of Money. 



Note: The tangible coins, bills, checks, etc., that represent certain amounts of Money (but which as physical objects may have little value) are elements of TenderObject, not of Money.  Elements of TenderObject which also belong to Currency are typically associated with some instance of UnitOfMoney (e.g., Dollar-UnitedStates) and have a fixed value.")

;;; MoneyRate
(isa MoneyRate DerivedNumericAttributeType)
(genls MoneyRate ScalarInterval)
(comment MoneyRate "A collection of rates; a subset of ScalarInterval.  Each element of MoneyRate is a measurement applied to something that is measured by money-per-amount; e.g., $1.14 per gallon, $10,000 per acre, $250 per week, $0.89 per pound.  Important subsets of MoneyRate include: MoneyPerVolumeRate, MoneyPerAreaRate, MoneyPerMassRate, MonetaryFlowRate.  The units for MoneyRate measures are terms such as DollarsPerSquareFoot, DollarsPerHour, Yen per kilo, etc.")

;;; MoneyTenderType
(isa MoneyTenderType Collection)
(genls MoneyTenderType ExistingObjectType)
(comment MoneyTenderType "A collection of collections.  Each element of MoneyTenderType is a collection of objects of a type commonly offered in payment for goods, services, fees, wage-work, etc.  Examples include Currency, CreditCard, TravellersCheck, MoneyOrder, PostageStamp, Check-TenderObject, etc.")

;;; MoneyTransaction
(isa MoneyTransaction TemporalObjectType)
(isa MoneyTransaction DefaultDisjointScriptType)
(genls MoneyTransaction MoneyTransfer)
(genls MoneyTransaction CommercialActivity)
(genls MoneyTransaction TransferringPossession)
(genls MoneyTransaction Transaction)
(comment MoneyTransaction "A collection of events.  Each element of MoneyTransaction is an event in which a transfer of money occurs.  Thus, buying something, investing, making a donation, executing a bequest and exchanging currency, are all examples of MoneyTransaction events.")

;;; MoneyTransfer
(isa MoneyTransfer TemporalObjectType)
(isa MoneyTransfer ScriptType)
(genls MoneyTransfer PurposefulAction)
(genls MoneyTransfer GeneralizedTransfer)
(genls MoneyTransfer TransferringPossession)
(comment MoneyTransfer "The most generic collection of events in which Money changes hands.  Thus, in an instance of MoneyTransfer, there is some way in which money transfers possession -- though `ownership' of the funds may or may not be transferred from and/or to the agents involved.  E.g., an ATM withdrawal from the user's own account, a utility payment made at one's local grocery store, buying a newspaper, getting change for a dollar from a cashier, are all examples of MoneyTransfer events.  Compare this collection with its subset MoneyTransaction; in money Transactions, which are also elements of CommercialActivity, not only is there a transfer of money, but it is done as part of an agreement (explicit or implicit) between the two participating agents that one will do something for the other -- something more than bookkeeping -- contingent upon the transfer of funds.")

;;; MonthFn
(isa MonthFn IndividualDenotingFunction)
(isa MonthFn NonPredicateFunction)
(resultIsa MonthFn CalendarMonth)
(arg1Isa MonthFn ConventionalClassificationType)
(arg1Isa MonthFn AnnualEventType)
(arg1Isa MonthFn TemporallyDisjointIntervalType)
(arg1Isa MonthFn MonthOfYearType)
(arg1Genl MonthFn CalendarMonth)
(arg2Isa MonthFn CalendarYear)
(comment MonthFn "(MonthFn ?M ?YR) denotes a CalendarMonth -- in particular, the month of type ?M during ?YR.  For example, (MonthFn February (YearFn 1966)) denotes Feb. of 1966.  Note that MonthFn -- unlike DayFn, HourFn, etc. -- does NOT take a number as its first argument.")

;;; MonthOfYearType
(isa MonthOfYearType SiblingDisjointCollection)
(genls MonthOfYearType Collection)

;;; MonthsDuration
(isa MonthsDuration UnitOfTime)
(isa MonthsDuration UnitOfMeasureNoPrefix)
(isa MonthsDuration UnitOfMeasure)
(resultIsa MonthsDuration ScalarInterval)
(resultIsa MonthsDuration Time-Quantity)
(argsIsa MonthsDuration CycSystemRealNumber)
(comment MonthsDuration "This is a function that takes one or two numbers and returns, as its value, some amount of Time.  An expression of the form (MonthsDuration ?min ?max) denotes a quantity of Time that is at least ?min months and at most ?max months.  (MonthsDuration ?num) denotes a quantity of Time that is exactly ?num months.")

;;; Morning
(isa Morning TemporalObjectType)
(genls Morning QualitativeTimeOfDay)
(comment Morning "A Morning is an Event where the Sun apparently `rises' and `moves' to its `highest' position in the daily cycle, i.e. from a Sunrise to the ensuing noon (the latter of which is the startingPoint of a TimeOfDay-NoonHour)  Each ?M which isa Morning is contiguousAfter an Overnight, and an Afternoon is contiguousAfter ?M; and ?M overlaps the start of a Midday.")

;;; Motorboat
(isa Motorboat ProductType)
(isa Motorboat ExistingObjectType)
(genls Motorboat TransportationDevice-Vehicle)
(genls Motorboat Boat-WaterTransportationDevice)
(comment Motorboat "The collection of all boats usually powered by motors (including in-board and out-board motors).  If a boat is primarily a Sailboat, but has a back-up motor to use when becalmed or piloting, that is not enough to make it a Motorboat.  To be more precise, this collection is the intersection of Boat-WaterTransportationDevice, InternalCombustionPoweredDevice and TransportationDevice-Vehicle.")

;;; Motorcycle
(isa Motorcycle ExistingObjectType)
(genls Motorcycle TransportationDevice-Vehicle)
(genls Motorcycle LandTransportationDevice)
(comment Motorcycle "The collection of all motorcycles, two-wheeled motorized personal transport devices.  A motorcycle lacks a cab or compartment to protect the driver from wind and weather.  Since motorcycles are used both on and off road, this is not a spec of RoadVehicle.")

;;; Mountain
(isa Mountain ExistingObjectType)
(genls Mountain LandTopographicalFeature)
(genls Mountain 
  (SolidFn EarthStuff))
(comment Mountain "A collection of topographical features.  Each element of Mountain is a geographical region of significantly higher elevation than its surrounding area.  Mountains may occur individually or as part of a chain (see MountainRange).  Examples: MountWhitney, DiamondHead-Mountain, MountKosciusko, AyersRock, MountOlympus.")

;;; MountainRange
(isa MountainRange ExistingObjectType)
(genls MountainRange 
  (MobFn Mountain))
(genls MountainRange LandTopographicalFeature)
(comment MountainRange "A collection of topographical features.  Each element of MountainRange is a natural group of mountains.  Examples: the RockyMountains, Andes-Mountains, Alps-Mountains.")

;;; Mouth
(isa Mouth AnimalBodyPartType)
(isa Mouth UniqueAnatomicalPartType)
(genls Mouth BiologicalLivingObject)
(genls Mouth AnimalBodyPart)
(comment Mouth "The collection of all animal mouths.  A mouth is a container AnimalBodyPart of an Animal.  It has an opening (a Portal) to the region outside the organism.  Through that opening, the animal ingests tangible substances from the environment, such as food, water, air, etc.  Additional activities, such as Chewing, may occur in the Mouth, and it may participate in other activities such as talking, kissing, etc.")

;;; Movement-NonPeriodic
(isa Movement-NonPeriodic TemporalObjectType)
(genls Movement-NonPeriodic MovementEvent)
(comment Movement-NonPeriodic "Movement-NonPeriodic is a subset of MovementEvent.  Each element of this collection is an Event in which the objectMoving does not return to a previous location or orientation (either not at all or only in a chaotic fashion).  E.g., the motion of a basketball being dribbled by Magic Johnson as he runs downcourt.  For contrast, see Movement-Periodic.")

;;; Movement-Periodic
(isa Movement-Periodic TemporalStuffType)
(genls Movement-Periodic MovementEvent)
(comment Movement-Periodic "A collection of events, and a subset of MovementEvent.  An element of this collection is an Event in which the objectMoving returns repeatedly to a certain location or orientation at more or less regular time intervals.  E.g., the motion of a seesaw one afternoon; the dribbling of a basketball in place by Magic Johnson; the motion of a slinky going down a staircase as it periodically changes its orientation through a fixed, repetive series of orientations.")

;;; Movement-Rotation
(isa Movement-Rotation TemporalObjectType)
(genls Movement-Rotation MovementEvent)
(comment Movement-Rotation "Movement-Rotation is a subset of MovementEvent.  Elements of Movement-Rotation are those moving events in which the objectMoving rotates about an internal or external axis.  For example, the daily rotation of the Earth on its axis, or the rotation of a clock hand about its fastened end.")

;;; Movement-TranslationEvent
(isa Movement-TranslationEvent TemporalObjectType)
(isa Movement-TranslationEvent ScriptType)
(genls Movement-TranslationEvent Translocation)
(genls Movement-TranslationEvent MovementEvent)
(comment Movement-TranslationEvent "This collection is a subset of MovementEvent.  An element of this set is an Event in which the center of mass of the objectMoving changes location, with respect to the relevant frame of reference.  Moreover, the moving object travels along some pathway-Complete from its origin (fromLocation) to its stopping place (toLocation) and must, at some point during the movement, be in a different location than it was at the start of motion (even if it ultimately returns to the origin).  So:  One special subset of translational movements includes those in which the movement ends in the same place it started from (e.g., one lap of a race car around the Indianapolis race trace; a trip to the grocery store and back); this subset is Translation-NoLocationChange (including its subset Translation-RoundTrip).  The other case is where the fromLocation and toLocation of a Movement-TranslationEvent are different; in that case, the movement event is also an element of Translation-LocationChange (e.g., the movement of the baseball during a home run hit by Roger Maris.)     Note that a Stationary object cannot be an objectMoving in a Movement-TranslationEvent, because it has a zero translational velocity.")

;;; Movement-TranslationProcess
(isa Movement-TranslationProcess TemporalStuffType)
(isa Movement-TranslationProcess ScriptType)
(genls Movement-TranslationProcess MovementProcess)
(genls Movement-TranslationProcess Movement-TranslationEvent)
(comment Movement-TranslationProcess "Movement-TranslationProcess is the subset of Movement-TranslationEvent whose elements can be pragmatically considered to be continuous processes.  In any instance of Movement-TranslationProcess, all time-slices of that process are also themselves elements of Movement-TranslationProcess.  
Note that walking is a type of Movement-TranslationProcess, even though it involves some nonzero accelerations and jerks.
A non-example would be a plot of the various residences you've lived in (``moved to'') over the course of your lifetime; another non-example would be Captain Kirk beaming up to the Enterprise; another would be the ``tunneling'' of an electron in a tunnel diode.
Note:  If you believe in quantum mechanics, then ultimately all physical motion is series of discrete, discontinous ``hops''.   This is where ``PRAGMATICALLY'' continuous vs. discontinuous comes in; i.e., in a quantum physics context some particular motion might be considered discontinuous, whereas in some naive everyday context that same motion is considered continuous.")

;;; MovementEvent
(isa MovementEvent TemporalObjectType)
(isa MovementEvent ScriptType)
(genls MovementEvent PhysicalEvent)
(genls MovementEvent GeneralizedTransfer)
(comment MovementEvent "MovementEvent is the most general collection of events which are physical movements.  Each element of MovementEvent is an action primarily about some element(s) of PartiallyTangible rotating or translating, periodically or nonperiodically, with respect to some frame of reference which is not a part of the objectMoving.  Thus, Neil Armstrong stepping from the lunar landing module onto the Moon's surface is an instance of MovementEvent.  Another element of this collection: the turning of the Earth on its axis 31 times during the month of August 1996.  Li Xiaoshuang's compulsory floor exercise in the 1996 Olympics Men's Gymnastics Team Competition is also a (complex!) movement event.  















Note on what is NOT included in this concept:  Consider a person raising her hand and waving, or a tree whose branches are bending in a strong wind:  the person and the tree are remaining in the same place, so that person and that tree are not moving in the sense of MovementEvent (though the hand and the branches are).  In other words, `performers' which do not, as a whole, rotate or translate are not actors in any element of MovementEvent.  However, the waving person and tree events would have subEvents which DO belong to MovementEvent, in which a hand, a branch, etc., `moves' in this sense.  Note also that elements of TransformationEvent, such as a caterpillar turning into a butterfly, or of ShapingSomething, such as molding a piece of clay into the bust of Napoleon, are also not necessarily elements of this collection, because they do not involve motion of the whole object with respect to some frame of reference that is different from the object's.  (See also FrameOfReference.)















Note: When classifying something into MovementEvent, one should consider (1) is it translational or rotational motion?  (2) is it periodic or nonperiodic?  (3) does it involve a continuous flow or a discrete (an object or objects moving completely from one place to another) motion? (4) does it involve a location change or no location change? (5) does it involve a single pathway or more than one?  Based on the answers to those questions, one or more of these subsets of MovementEvent may more precisely represent the moving: Movement-TranslationEvent, Movement-Rotation, Movement-Periodic, Movement-NonPeriodic, Translation-Flow, Translation-Complete, Translation-SinglePath, Translation-MultiPath.")
(synonymousExternalConcept MovementEvent SENSUS-Information1997 "MOTION-PROCESS")

;;; MovementProcess
(isa MovementProcess TemporalStuffType)
(isa MovementProcess ScriptType)
(genls MovementProcess MovementEvent)
(comment MovementProcess "MovementProcess is a subset of MovementEvent.  Its elements are those MovementEvents which can be considered as continuous motions.  That is, (1) motion happens without interruption throughout a MovementProcess, and thus (2) every time-slice of a MovementProcess is also a MovementProcess.")

;;; MultiDirectionalCommunication
(isa MultiDirectionalCommunication ScriptType)
(genls MultiDirectionalCommunication Communicating)
(comment MultiDirectionalCommunication "A collection of complex information transfer events.  Each element of MultiDirectionalCommunication is an event in which more than one agent is involved as a senderOfInfo.  For example, a conversation or a debate, as opposed to a speech or lecture.  The predicate infoContributed is used to correlate each sending agent with the information s/he transmits in such an event.  For communication acts having only one sender, see CommunicationAct-Single.")

;;; MultiGraph
(isa MultiGraph Collection)
(genls MultiGraph SetWithStructure)
(comment MultiGraph "An instance of PathSystemType and a subcollection of PathSystem.  Each instance of MultiGraph is an instance of PathSystem in which the only points are nodes in the system and all paths are made of links (i.e., no intermediate points along links). Sometime such a system is called a graph or multi-graph in graph theory.  A MultiGraph consists of nodes interconnected by links, with loops on single nodes allowed, and with multiple links between the same two nodes also allowed.  (For a graph with no parallel links and no loops, see SimpleGraph-GraphTheoretic.")

;;; MusclePoweredDevice
(isa MusclePoweredDevice ExistingObjectType)
(genls MusclePoweredDevice KineticEnergyPoweredDevice)
(comment MusclePoweredDevice "A collection of physical devices.  An instance of MusclePoweredDevice is a device which is powered by animal muscle power (including human labor); e.g., hammers, horse-drawn carriages, etc.")

;;; MuscleTissue
(isa MuscleTissue ExistingStuffType)
(genls MuscleTissue BiologicalLivingObject)
(genls MuscleTissue SolidTangibleThing)
(comment MuscleTissue "The collection of all instances of muscle tissue, considered as an OrganicStuff; that is, the collection of all tissue composing the biological organs that convert chemical energy into mechanical energy.  E.g., the elements of Biceps, Triceps, Heart, Stomach, all consist of some type of MuscleTissue.")

;;; MuscularSystem
(isa MuscularSystem AnimalBodyPartType)
(genls MuscularSystem AnimalBodyPart)
(comment MuscularSystem "The collection of all animals' muscle systems.  A MuscularSystem of an animal is composed of all its muscles, considered as a functional whole.  As a system, they work together to enable foot motions in locomotion, pumping in circulation, breathing in respiration, biting and chewing and swallowing in eating, etc.")

;;; Music
(isa Music TemporalStuffType)
(genls Music SoundInformationBearingThing)
(comment Music "A collection of sounds; a subset of SoundInformationBearingThing.  Each element of Music is a sound produced by actions such as singing, whistling, playing an instrument, playing recorded music, etc.  Music has certain features that distinguish it from random noise (though recognizing them may depend upon a specific cultural background); such features usually include variations of pitch over time (i.e., melody), multiple (somehow) related pitches sounding at one time (i.e., some kind of harmony), and/or some regular temporal pattern to the component sounds (i.e., rhythm).  Examples of Music include: the debut performance of Beethoven's Fifth Symphony; Leonard Bernstein's rendition of the Ninth Symphony with the BPO in Berlin in 1989; a particular playing of a particular CD of Bernstein's 1989 Ninth in Berlin; the Messiah sing-in in Austin, TX, in 1995.")

;;; MutuallyDisjointIntervalCollection
(isa MutuallyDisjointIntervalCollection Collection)
(genls MutuallyDisjointIntervalCollection Collection)
(comment MutuallyDisjointIntervalCollection "A collection of collections.  Any element, X, which is an element of MutuallyDisjointIntervalCollection is a collection of interval types X1, X2, X3,..., whose instances are temporallyDisjoint; that is, each instance of X1 has no temporal intersection with any instance of X2 or X3 or...; each instance of X2 has no temporal intersection with any instance of X1 or X3 or...; etc.  For example, consider DayOfWeekType, whose instances are Monday, Tuesday,...   It is true that (isa DayOfWeekType MutuallyDisjointIntervalCollection), because no Monday can temporally intersect any Tuesday or Wednesday or....; no Tuesday can temporally intersect any Monday or Wednesday or...; etc.  Other elements of MutuallyDisjointIntervalCollection include DayOfWeekType, CalendarSeasonType, HourOfDayType, and so on.  See also TemporallyDisjointIntervalType.")

;;; NTupleInterval
(isa NTupleInterval ObjectType)
(genls NTupleInterval Tuple)
(genls NTupleInterval AttributeValue)
(comment NTupleInterval "A collection of mathematical objects; a subset of Tuple.  Each element of NTupleInterval is a tuple (an ordered list of items) whose items are intervals.  For example, vectors and complex numbers, as well as scalar intervals (which are one-tuples).  Note that intervals in Cyc may be numerical, or they may be intervals along any scale with distinguishable gradations (e.g., riskiness, alertness, roughness of texture).")

;;; NamedRoadway
(isa NamedRoadway ExistingObjectType)
(genls NamedRoadway Street-Generic)
(comment NamedRoadway "The collection of named parts (stretches or segments) of roadways.  (Not roadway the stuff.)  Instances are named pieces of roadways (or highways or streets) which have names and lengths, and (usually) intersect with other roads. ")

;;; Narrative
(isa Narrative ObjectType)
(genls Narrative PropositionalInformationThing)
(comment Narrative "A collection of pieces of information; a subset of PropositionalInformationThing.  Each element of Narrative is a recounting of events, told in sequence (or so that their temporal order is decipherable) and involving some agent or members of a set of agents.  Narratives may be factual or fictional; thus, the agents involved may be real people or fictional characters.  Examples: the PeloponnesianWarHistoryByThucydides, the Frankenstein-Novel of Mary Shelley, Mark Twain's AdventuresOfHuckleberryFinn.")

;;; NationalOrganization
(isa NationalOrganization ExistingObjectType)
(genls NationalOrganization Organization)
(comment NationalOrganization "A collection of organizations.  An element of NationalOrganization is an organization which has nationwide `scope' -- that is, nationwide distribution (throughout some Country) of members and/or activities, as opposed to to local, state-wide or international organizations.  Examples: the National Association for the Advancement of Colored People and the Daughters of the American Revolution in the United States; the Red Guards and the Young Pioneers in China (PROC).")

;;; NationalPostalService
(isa NationalPostalService ExistingObjectType)
(genls NationalPostalService ServiceOrganization)
(genls NationalPostalService LegalGovernmentOrganization)
(comment NationalPostalService "A collection of national postal services run by the governments of their particular countries.  The United States Postal Service would be an example, but United Parcel Service, since it is a private business, wouldn't be.")

;;; NationalTaxAgency
(isa NationalTaxAgency ExistingObjectType)
(genls NationalTaxAgency LegalGovernmentOrganization)
(comment NationalTaxAgency "A collection of government organizations.  An element of NationalTaxAgency is a revenue agency that is part of the government of a Country and which is concerned primarily with collecting tax money (from national taxes) from the residents of that Country.  This collection does NOT include customs agencies and agencies that collect minor fees only.")

;;; Nationality
(isa Nationality Collection)
(genls Nationality HumanCultureType)
(comment Nationality "A collection of collections.  Each Nationality is the set of people resident in (or visiting for a long term) some country -- e.g., AmericanPerson, TrinidadAndTobagoPerson, etc.")

;;; NaturalLanguage
(isa NaturalLanguage ObjectType)
(genls NaturalLanguage Language)
(comment NaturalLanguage "The collection of languages which are used for human communication and evolved naturally. This includes dead languages such as Ancient Greek and Latin but excludes concocted languages such as Esperanto.")

;;; NaturalTangibleStuff
(isa NaturalTangibleStuff ExistingStuffType)
(genls NaturalTangibleStuff TangibleThing)
(comment NaturalTangibleStuff "A collection of naturally occurring tangible things.  Each element of NaturalTangibleStuff is a naturally occurring tangible thing, including, for example, elements of its subsets EarthStuff, Wood, and Air.  Man-made materials are NOT included in NaturalTangibleStuff.")

;;; NavalShipBase
(isa NavalShipBase ExistingObjectType)
(genls NavalShipBase ContactLocation)
(genls NavalShipBase HumanlyOccupiedSpatialObject)
(genls NavalShipBase GroundsOfOrganization)
(comment NavalShipBase "The collection of all naval bases with facilities for ModernNavalShips, or operated by a Navy.")

;;; Navigating
(isa Navigating TemporalStuffType)
(isa Navigating ScriptType)
(genls Navigating PurposefulAction)
(genls Navigating Thinking)
(comment Navigating "The collection of all events in which the performer determines the location of an object in some frame of reference, and determines the direction the object should travel to reach some destination.  Navigating usually involves using some devices (compass, clock, etc.) as aids")

;;; NavigationDevice
(isa NavigationDevice ExistingObjectType)
(genls NavigationDevice SolidTangibleThing)
(genls NavigationDevice PhysicalDevice)
(comment NavigationDevice "A collection of physical devices.  An instance of NavigationDevice is a device used for Navigating, i.e., for taking the bearings and plotting the course of someone or something travelling through some medium, usually in some transportation device.  Instances include the simplest elements of Compass, but also sophisticated GPS (geopositioning systems utilizing satellites.)")

;;; Navy
(isa Navy ExistingObjectType)
(genls Navy MilitaryOrganization)
(comment Navy "A collection of military organizations.  An element of Navy is a military organization, modern or historical, composed mainly of seaborne forces and/or forces responsible for military operations on water and adjacent coastal areas.  Includes battleships and aircraft carriers (with their battle groups), submarines, shore patrol vessels, and special forces, as well as the support personnel of naval bases.")

;;; NavyPersonnel
(isa NavyPersonnel OccupationType)
(genls NavyPersonnel MilitaryPerson)
(comment NavyPersonnel "A collection of people, a subset 
of MilitaryPerson. Each element of this collection is
somebody who works for a Navy.")

;;; NegativeInteger
(isa NegativeInteger MeasurableAttributeType)
(genls NegativeInteger Integer)
(genls NegativeInteger NegativeNumber)
(comment NegativeInteger "NegativeInteger is a subset of Integer.  Each element of NegativeInteger is a whole number less than zero; thus, -4, but not 0 or 4 or -4.3.")

;;; NegativeNumber
(isa NegativeNumber MeasurableAttributeType)
(genls NegativeNumber RealNumber)
(comment NegativeNumber "NegativeNumber is a subset of RealNumber.  Each element of NegativeNumber is a real number that is less than zero; thus, it includes -0.17, but not 0 or 5 or 0.17.")

;;; Negotiating
(isa Negotiating TemporalStuffType)
(isa Negotiating DefaultDisjointScriptType)
(genls Negotiating Communicating)
(genls Negotiating Thinking)
(comment Negotiating "A collection of Communicating events.  In a Negotiating, an Agent communicates facts and changes in the Agent's attitude or conditions to another Agent, with the (ostensible) purpose of their reaching an Agreement.")

;;; NervousSystem
(isa NervousSystem UniqueAnatomicalPartType)
(isa NervousSystem AnimalBodyPartType)
(genls NervousSystem AnimalBodyPart)
(comment NervousSystem "The collection of all animals' nervous systems.  A NervousSystem is composed of all its nerves, brain, etc., and enables the animal to sense things and react to them both by instinct (spinal reflex) and deliberation (brain).")

;;; Nervousness
(isa Nervousness FeelingAttributeType)
(genls Nervousness FeelingAttribute)
(comment Nervousness "Feeling of nervousness and excitability.  One can be nervous ABOUT something in particular, or one can have undirected feelings of anxiety.   For the former, state an assertion of the form (feelsTowardsObject ?AGT ?OBJ Nervousness ?DEGREE) or (feelsTowardsEvent ?AGT ?EVNT Nervousness ?DEGREE); but for the latter (undirected feelings of anxiety) use (feelsEmotion ?AGT Nervousness).
Note: This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  A more specialized FeelingAttributeType than Nervousness is Panic.")

;;; Neutron
(isa Neutron ExistingObjectType)
(genls Neutron Nucleon)
(comment Neutron "A collection of objects; a subset of Nucleon.  Each instance of Neutron is a nucleon which has an ElectricalCharge of 0.")

;;; News
(isa News StuffType)
(genls News PropositionalInformationThing)
(comment News "A collection of abstract (intangible) informational items.  Each element of News consists of some factual information about recent events in the world (or geographicalSubRegions thereof).  News is commonly embodied in newspapers and communicated through radio and television news broadcasts.")

;;; Night
(isa Night ScriptType)
(isa Night TemporalObjectType)
(genls Night QualitativeTimeOfDay)
(comment Night "Night is the temporal complement of DaytimeHours:  each Night is contiguousAfter one DaytimeHours, and vice versa.  Each Night intersects two different CalendarDays.  Each Night is temporallyStartedBy a Dusk, temporallyFinishedBy a Dawn, contiguousAfter a Sunset, and has a Sunrise which is contiguousAfter it.")

;;; NoAmountFn
(isa NoAmountFn GenericValueFunction)
(resultIsa NoAmountFn ScalarInterval)
(arg1Isa NoAmountFn PrimitiveAttributeType)
(arg1Genl NoAmountFn ScalarInterval)
(comment NoAmountFn "NoAmountFn is a Cyc function, in particular, an element of IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' values for a wide variety of attributes.  When ATT is a type of attribute, (NoAmountFn ATT) returns a zero amount of ATT.  For example, (NoAmountFn Elasticity) represents zero elasticity and is the property of things that don't re-expand at all following compression; e.g.,instances of Ceramic, Silicon, or Sugar-Generic.")

;;; NobleGas
(isa NobleGas TangibleStuffCompositionType)
(genls NobleGas ElementStuff)
(comment NobleGas "All pieces of all substances that are comprised of one type of noble gas")

;;; NodeFn
(isa NodeFn NonPredicateFunction)
(resultIsa NodeFn SetOrCollection)
(arg1Isa NodeFn Thing)
(comment NodeFn "For each PathSystem SYS, (NodeFn SYS) denotes the set of all nodes in SYS (see PathSystem).  Note that the function NodeFn and the predicate nodeInSystem are interdefinable.  We normally use NodeFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can replace each (nodeInSystem X SYS) by (elementOf X (NodeFn SYS)).")

;;; NonExclusiveUserRights
(isa NonExclusiveUserRights UserRightsAttribute)
(comment NonExclusiveUserRights "An attribute of an object with respect to an Agent, meaning that the Agent has non-exclusive use of the object.  All Agents can claim this use-right to an object if any Agent can.  This attribute is not the same as GroupUserRightsAttribute, as there is no specific group to which Agents must belong in order to claim this right.  This is typically used for things so fundamental we hardly consider them `rights.'  E.g., the right to breathe air, use public parking lots, walk the streets as a free person, drive on public roads, etc.  If you think about it, though, you'll realize that there is an implicit `group' that can exercise each of those rights.  So think of it this way:  one can define the group explicitly as a group, and then assert that each member has GroupUserRightsAttribute (e.g., the group of licensed drivers has the right to drive on public roads), or one could define a context, a Microtheory, in which performers of actions defaulted to members of that group, and in that context the right (e.g., the right to drive on a public road) would be a NonExclusiveUserRights.")

;;; NonLeapYear
(isa NonLeapYear TemporalObjectType)
(genls NonLeapYear CalendarYear)
(comment NonLeapYear "The collection of CalendarYears which are not leap years; i.e., calendar years in which February has 28 days")

;;; NonNegativeInteger
(isa NonNegativeInteger Collection)
(isa NonNegativeInteger MeasurableAttributeType)
(genls NonNegativeInteger Integer)
(genls NonNegativeInteger NonNegativeScalarInterval)
(genls NonNegativeInteger NonNegativeNumber)
(comment NonNegativeInteger "NonNegativeInteger is the subset of Integer that excludes the negative integers.  Each element of NonNegativeInteger is a whole number greater than or equal to zero, e.g., 0, 1, 2, 3, ....")

;;; NonNegativeNumber
(isa NonNegativeNumber MeasurableAttributeType)
(genls NonNegativeNumber RealNumber)
(comment NonNegativeNumber "NonNegativeNumber is the subset of RealNumber that excludes the negative reals.  Each element of NonNegativeNumber is a  number greater than or equal to zero, e.g., 0, 0.173, Pi, 4, 101, ....")

;;; NonNegativeScalarInterval
(isa NonNegativeScalarInterval Collection)
(genls NonNegativeScalarInterval ScalarInterval)
(comment NonNegativeScalarInterval "For a measurable non-negative quantity, the ordered sequence of possible values may be thought of as a line. NonNegativeScalarIntervals are the line segments (or points) on such a line,  representing a range of consecutive values, all equal to or greater than 0.  The most common case is where the line is just the non-negative part of the Real Number Line, and in fact where the NonNegativeScalarInterval is either a contiguous set of points there (i.e., a range of numbers) or just a single point there (i.e., a number). Another common case is where the line has some unit of measure marked off, such as meters.")

;;; NonPersonAnimal
(isa NonPersonAnimal ExistingObjectType)
(genls NonPersonAnimal Animal)
(comment NonPersonAnimal "The collection of all Animals that are not Persons.")
(synonymousExternalConcept NonPersonAnimal SENSUS-Information1997 "NONHUMAN-ANIMAL")

;;; NonPhysicalPartPredicate
(isa NonPhysicalPartPredicate PredicateCategory)
(genls NonPhysicalPartPredicate PartPredicate)
(comment NonPhysicalPartPredicate "A collection of predicates. Instances of NonPhysicalPartPredicate are used to describe the relationship between a PartiallyIntangible and its non-physical parts.")

;;; NonPoweredDevice
(isa NonPoweredDevice ExistingObjectType)
(genls NonPoweredDevice PhysicalDevice)
(comment NonPoweredDevice "A collection of tangible objects; a subset of PhysicalDevice.  An instance of NonPoweredDevice is a device which is `inert' as opposed to being powered in any way.  Non-powered devices do not need to have any kind of energy supplied to them in order to function -- not even kinetic energy supplied by a user (except perhaps to move them into place).  E.g., a coat hanger.  Once you hang a coat up on it, it does its function without any motion, without any energy being converted or used, etc.  So this collection is a much smaller collection that than consisting merely of devices which don't require fuel or electricity (e.g., a hammer).  It should be noted that an inert device need not be Stationary during use (though many are); for example, tires are inert devices in the sense that once they are placed on a vehicle they don't require any energy input to do their job, which is, in essence `hanging onto a wheel no matter what!'.  A steering wheel, on the other hand, is not a NonPoweredDevice.  Further examples of NonPoweredDevices include a table, a floor mat, a bookshelf, an auto ramp, a bookmark, a support column, and a shirt.")

;;; NonPredicateFunction
(isa NonPredicateFunction RelationType)
(isa NonPredicateFunction Collection)
(genls NonPredicateFunction FunctionTheMathematicalType)
(comment NonPredicateFunction "The collection of functions in the Cyc language whose uses are to be treated as NATs (non-atomic terms).  In other words, these functions, when applied to arguments, form new terms that may then freely appear as arguments in other CycL expressions.  For example, consider GovernmentFn.  It takes one argument, such as France, and the resulting NAT --- in this case (GovernmentFn France) --- can be used anywhere in CycL expressions that an instance of RegionalGovernment could occur.  We could, instead, have created a specific new term `GovernmentOfFrance', asserted that it isa RegionalGovernment, etc., but by having NATs we can drastically reduce the total size of the Cyc vocabulary of constant terms.  



This collection does not include: 

1) abstract functions, like the one-to-one function that must exist between the positive integers and the rational numbers; 

2) Lambda functions (functions which bind variables in arbitrary CycL expressions; TheSetOf is an example); 

3) Predicates.  Predicates can be thought of as functions from a set of arguments to a truth value.  Wffs that start with a predicate can even serve as terms, i.e., as arguments to other predicates, but when they do so they can't just be replaced with their truth value!  So Predicate is a subset of FunctionTheMathematicalType but not a subset of NonPredicateFunction.")

;;; NonProfitCorporation
(isa NonProfitCorporation ExistingObjectType)
(genls NonProfitCorporation LegalCorporation)
(genls NonProfitCorporation NonProfitOrganization)
(comment NonProfitCorporation "A collection of corporations; a subset of both LegalCorporation and NonProfitOrganization.  An element of NonProfitCorporation is a LegalCorporation which is engaged in non-profit or not-for-profit activities.  Typically, (unlike commercial corporations,) non-profit corporations have no shareholders or owners, although they are commonly governed by a board (cf. BoardOfDirectors).  Many non-profit organizations are incorporated, including charities, political action groups, clubs, and political parties.  Most have official non-profit standing with a government.  Because they are non-profit organizations, non-profit corporations do not pay corporate income taxes.  For the broader class of non-profit entities, see NonProfitOrganization.")

;;; NonProfitEmployee
(isa NonProfitEmployee OccupationType)
(genls NonProfitEmployee Professional)
(comment NonProfitEmployee "A collection of persons; a subset of Professional.  Each element of NonProfitEmployee is a worker who is employed by a non-profit organization such as a college, museum, or charity foundation.")

;;; NonProfitOrganization
(isa NonProfitOrganization ExistingObjectType)
(genls NonProfitOrganization Organization)
(comment NonProfitOrganization "A collection of organizations.  An element of NonProfitOrganization is an organization whose activities are not conducted for the profit of any owner.  Thus, non-profit organizations are typically exempt from business taxes.  Most non-profit organizations are charities, clubs, schools, political action groups, political parties, or churches.  See also the specialization NonProfitCorporation.")

;;; NonPublishedText
(isa NonPublishedText ExistingObjectType)
(genls NonPublishedText TextualMaterial)
(comment NonPublishedText "A collection of information bearing things (IBTs).  NonPublishedText is that subset of TextualMaterial whose elements are text that has not yet been published (such as a rejected book manuscript) and may not even be intended for publication (such as a memo or personal letter).")

;;; NonVerbalCommunicating
(isa NonVerbalCommunicating TemporalStuffType)
(isa NonVerbalCommunicating DefaultDisjointScriptType)
(genls NonVerbalCommunicating Communicating)
(comment NonVerbalCommunicating "A collection of information
transfer events; a subset of Communicating.  Each element of
NonVerbalCommunicating is a transmission of information by means of
some bodily movement other than speaking.  Subsets include
ShakingHands and Cuddling, since such actions by definition are
communications involving two actors.  (Note that MakingAGesture
(q.v.) is NOT a subset of NonVerbalCommunicating; instances of
MakingAGesture are merely information-encodings.  They may or may
not be subEvents of NonVerbalCommunicating events.)")
(synonymousExternalConcept NonVerbalCommunicating SENSUS-Information1997 "NON-VERBAL-COMMUNICATIVE-ACT")

;;; NonintrusiveJunction
(isa NonintrusiveJunction RegionType)
(genls NonintrusiveJunction JunctionOfPaths)
(comment NonintrusiveJunction "The collection of junctions or crossings of Path-Generics in each of which: one path crosses, or its end joins the side of, another path of the same, or possibly a completely different, type, without so intruding upon or affecting the path as to cause it to be different in nature or name on either side of that junction. (Examples: A small side street joins a major boulevard and the boulevard does not change name or size at the junction.  A hallway ends at another hall, but only allows looking through a window into it.  A railroad crossing.  A small vein is one of the sideBranches of a large vein and the name of the large vein doesn't change at that point.)")

;;; NonlexicalLinguisticObject
(isa NonlexicalLinguisticObject LinguisticObjectType)
(genls NonlexicalLinguisticObject LinguisticObject)
(comment NonlexicalLinguisticObject "The collection of linguistic objects which are not morphemes, but which nonetheless make up part of a language system; e.g., the parts of speech.")

;;; North-Directly
(isa North-Directly UnitVector-Precise)
(isa North-Directly GeographicalDirection)
(genlAttributes North-Directly North-Generally)
(comment North-Directly "Due North, an element of TerrestrialDirection.")

;;; North-Generally
(isa North-Generally GeographicalDirection)
(comment North-Generally "The general direction of North.  The element of VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of North-Directly.")

;;; NorthEast-Directly
(isa NorthEast-Directly UnitVector-Precise)
(isa NorthEast-Directly GeographicalDirection)
(comment NorthEast-Directly "The precise Northeast direction from any geographic point other than a pole.")

;;; NorthEast-Generally
(isa NorthEast-Generally GeographicalDirection)
(comment NorthEast-Generally "The general direction of NorthEast.  The VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as NorthEast-Directly.")

;;; NorthWest-Directly
(isa NorthWest-Directly UnitVector-Precise)
(isa NorthWest-Directly GeographicalDirection)
(comment NorthWest-Directly "The precise Northwest direction from any geographic point other than a pole.")

;;; NorthWest-Generally
(isa NorthWest-Generally GeographicalDirection)
(comment NorthWest-Generally "The general direction of NorthWest.  The VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as NorthWest-Directly.")

;;; Nose
(isa Nose UniqueAnatomicalPartType)
(isa Nose AnimalBodyPartType)
(genls Nose Sensor)
(genls Nose Organ)
(comment Nose "Facial organ used in smelling and breathing")

;;; NoteAboutGivingGenericValueFunctionsNumericValues
(isa NoteAboutGivingGenericValueFunctionsNumericValues SharedNote)
(comment NoteAboutGivingGenericValueFunctionsNumericValues "In some contexts, users may wish to ground elements of GenericValueFunction by linking them to numeric `real world' measurements.  E.g. In a driving-on-the-highway-context, one might wish to define (MediumAmountFn Speed) as `between 50 and 60 miles per hour'.  The way to assert this is as follows:  (and (minQuantValue (MediumAmountFn Speed) (MilesPerHour 50))(maxQuantValue (MediumAmountFn Speed)(MilesPerHour 60))).")

;;; NoteAboutPredicateCategories
(isa NoteAboutPredicateCategories SharedNote)
(comment NoteAboutPredicateCategories "Predicates in Cyc are organized into collections.  While some, like BinaryPredicate, are logically well-founded and are referenced in axioms and in the code which implements Cyc, others, though based on some intuitively plausible criteria, are involved in few (if any) axioms and are therefore not integral to Cyc's ontology.  Collections which fall into the latter class are generally under review at this time and are flagged with this sharedNotes.")

;;; NoteAboutScalarIntervalMaxAndMin
(isa NoteAboutScalarIntervalMaxAndMin SharedNote)
(comment NoteAboutScalarIntervalMaxAndMin "If there are two arguments to a UnitOfMeasure function, as in (Meter 5 6), the first number is interpreted as the (inclusive) minimum, and the second number as the (inclusive) maximum.  Thus, (Meter 5 6) means `between 5 and 6 meters long, inclusive'.  If only one argument follows an element of UnitOfMeasure, as in (Meter 3), it is interpreted as a shorthand for (Meter 3 3).  In other words, (Meter 3 3) means `exactly 3 meters'.  When a function belonging to UnitOfMeasure is applied to a single argument, the value it returns must be an element of ScalarPointValue.")

;;; NoteAboutStatingExceptionsInCycL
(isa NoteAboutStatingExceptionsInCycL SharedNote)
(comment NoteAboutStatingExceptionsInCycL "The formula
  (exceptWhen
    P(?x0 ... ?xn)
    Q(?x0 ... ?xn)))

states that, in situations where assertion Q would apply to a set of
bindings for variables ?x0 ... ?xn, the conclusion is allowed 
`except when'
  P(?x0 ... ?xn)
is true for these variable bindings.  The formula
  (exceptFor [term] Q(?x0))
states that, in situations where assertion Q would apply to a variable
?x0, the conclusion is allowed `except for' the situations where [term]
is the binding for ?x0.  To be well-formed, Q must be a rule with
exactly one free variable.

By definition, exceptFor is merely syntactic sugar:
  (exceptFor [term] Q(?x0)) 
  <=> 
  (exceptWhen (equals ?x0 [term]) Q(?x0))
Since an exceptWhen statement is a meta-statement about some rule 
Q(?x0 ... ?xn), the statement is not well-formed if Q(?x0 ... ?xn) is
not already an assertion in the KB.  Also, strictly speaking, P and Q in
the exceptWhen merely must share some variables rather than all
variables as it's been written above.

These constructs replace `abnormal' at the EL (epistemological level).  Old assertions of the form:

  (implies
    P(?x0 ... ?xn)
    (abnormal R(?x0 ... ?xn) Q(?x0 ... ?xn)))

become:

  (exceptWhen
    P(?x0 ... ?xn)
    Q(?x0 ... ?xn))

The predicate `abnormal' has not actually gone away, but was modified for use as the HL (Heuristic Level) implementation of exceptWhen.  Like termOfUnit, `abnormal' should be viewed as an inference-maintained predicate, and human beings should not be manually asserting things using `abnormal.' 

;;;
;; EXAMPLES
;;;

Rule1: `birds fly'
(implies
  (isa ?BIRD Bird)
  (behaviorCapable ?BIRD Flying-FlappingWings performedBy))

Exception1: `for penguins, the ``birds fly'' rule does not apply'
(exceptWhen (isa ?BIRD Penguin) [Rule1])

Exception2: `the ``birds fly'' rule does not apply to Tweety'
(exceptFor Tweety [Rule1])

Exception3: `for an animal with an injured wing, the ``birds fly'' rule does not apply'
(exceptWhen
  (#and (anatomicalParts ?BIRD ?WING) (isa ?WING Wing-AnimalBodyPart) (hasPhysiologicalAttributes ?WING Injured))
  [Rule1])

Rule2: ``dogs who like the same cat like each other''
(implies
 (?and  (isa ?DOG1 Dog) (isa ?DOG2 Dog) (isa ?CAT Cat) (likesAsFriend ?DOG1 ?CAT) (likesAsFriend ?DOG2 ?CAT))
 (likesAsFriend ?DOG1 ?DOG2))

Exception3: `Rex does not like other dogs according to ``Rule2'''
(exceptWhen (equals ?DOG1 Rex) [Rule2])

Exception4: `Fifi is not liked by other dogs according to `Rule2'''
(exceptWhen (equals ?DOG2 Fifi) [Rule2])

Exception5: `Morris is not such a cat according to ``Rule2'''
(exceptWhen (equals ?CAT Morris) [Rule2])")

;;; NoteForUnitOfMeasureWithPrefixAndNoPrefix
(isa NoteForUnitOfMeasureWithPrefixAndNoPrefix SharedNote)
(comment NoteForUnitOfMeasureWithPrefixAndNoPrefix "Elements of UnitOfMeasureNoPrefix denote units of measure that don't have a multiplicative prefix (e.g. `kilo', `micro', `billion').  Inch and MetersPerSecond are such elements.  On the other hand, elements of UnitOfMeasureWithPrefix do have multiplicative prefixes; examples include CentimetersPerSecond, (Micro Gram), KiloWatt, and GramsPerMilliliter.  We need these constants in order to prevent references to terms such as ((Micro (Micro Gram)) 5) or ((Kilo (CentimetersPerSecond)) 3.2).  If we didn't have these restrictions, equal quantities would allow for an undesirable level of possible names for a quantity, e.g. ((Micro (Kilo Gram)) 1) would refer to the same quantity as ((Kilo (Micro Gram)) 1) would refer to the same quantity as (Gram .001), etc.")

;;; November
(isa November MonthOfYearType)
(genls November CalendarMonth)

;;; Now
(isa Now IndexicalConcept)
(isa Now TimePoint)
(comment Now "Now is a special TimePoint which denotes the `current' moment.  The exact interpretation will vary from one context to another.  In a problem solving context it often means `the time at which the inference is occuring'.")

;;; Nth
(isa Nth ReifiableFunction)
(resultIsa Nth Thing)
(arg1Isa Nth Series)
(arg2Isa Nth PositiveInteger)
(comment Nth "(Nth SER N) denotes the Nth member of the series SER, provided that N is an integer greater than or equal to 1 and less than or equal to the seriesLength of SER.")

;;; NuclearPoweredDevice
(isa NuclearPoweredDevice ExistingObjectType)
(genls NuclearPoweredDevice PoweredDevice)
(comment NuclearPoweredDevice "A collection of physical devices; a subset of PoweredDevice.  An instance of NuclearPoweredDevice is a device which uses nuclear fission or nuclear fusion reactions as a source of power.  Examples include elements of NuclearSubmarine and NuclearWeapon.")

;;; Nucleon
(isa Nucleon ExistingObjectType)
(genls Nucleon SubAtomicParticle)
(comment Nucleon "A collection of objects; a subset of SubAtomicParticle.  Each instance of Nucleon is a subatomic particle normally found in some atomic nucleus.   Nucleon has two subsets, Proton and Neutron.  Every instance of AtomicNucleus is composed of some number of Nucleons.")

;;; NucleusFn
(isa NucleusFn CollectionDenotingFunction)
(resultIsa NucleusFn ExistingObjectType)
(resultGenl NucleusFn AtomicNucleus)
(arg1Isa NucleusFn ElementStuffTypeByNumberOfProtons)
(arg1Genl NucleusFn ElementStuff)
(comment NucleusFn "NucleusFn is a Cyc function, specifically a CollectionDenotingFunction.  NucleusFn takes an instance of ElementStuffTypeByNumberOfProtons (q.v.) as its single argument and returns a collection of all the atomic nucleii belonging to element-stuff of that type.  Thus, (NucleusFn E) denotes a subset of AtomicNucleus whose elements all have the same number of protons. For example, (NucleusFn Carbon) is the collection of Carbon nuclei, each of which has six protons.")

;;; Number-General
(isa Number-General ObjectType)
(genls Number-General MathematicalObject)
(comment Number-General "A collection of mathematical
objects. This is the most general class of numbers,
including RealNumbers, ComplexNumbers, various
values of infinity such as Aleph Null, and whatever else might count
as a number in mathematics.")
(synonymousExternalConcept Number-General SENSUS-Information1997 "NUMBER")

;;; NumericComparison
(isa NumericComparison RelationType)
(genls NumericComparison BinaryPredicate)
(comment NumericComparison "A collection comprising the predicates used to compare elements of ScalarInterval.  Examples: greaterThanOrEqualTo, greaterThan, numericallyEqual.  Note that `less than' and `less than or equal to' are simply inverses of greaterThan and greaterThanOrEqualTo.  E.g., in Cyc `A is less than B' is written as (greaterThan B A).")
(overlappingExternalConcept NumericComparison SENSUS-Information1997 "SCALED-COMPARISON")
(synonymousExternalConcept NumericComparison SENSUS-Information1997 "NUMBER-FOCUSING")

;;; Nurse
(isa Nurse MedicalSpecialtyType)
(genls Nurse MedicalCareProfessional)
(comment Nurse "The class of health professionals who provide various aspects of hands-on health care to patients.  Nurses do not usually diagnose or decide on treatments, but they administer medicines and treatments, perform medical tests, give regular care to hospitalized patients, etc.")

;;; Nutrient
(isa Nutrient TangibleStuffCompositionType)
(genls Nutrient EdibleStuff)
(comment Nutrient "A collection of tangible stuff.  Each element of Nutrient is a substances considered necessary or beneficial in the diet of a person or animal.  Nutrients in food or pills are often listed on the package label.  Some types of Nutrient include its subsets EdibleSodium, Protein, EdibleCalcium, EdibleIron, Vitamin.")

;;; ObjectType
(isa ObjectType Collection)
(genls ObjectType Collection)
(comment ObjectType "A collection of collections.  Elements of ObjectType more or less correspond to count nouns in the following way: If COL is an element of ObjectType, and ITEM is any element of COL, then if you divide ITEM into two pieces, you do NOT generally end up with two elements of COL.  Another way of thinking of this is:  If you take several elements of COL, and put them together, the result is generally not another element of COL.  Sample instances of ObjectType are Automobile (the set of all cars);  LeapYear (the set of all leap years).  See the comment for StuffType to find out more about the distinctions between, and the need for, these four collections: StuffType, ObjectType, ExistingStuffType, and ExistingObjectType.")

;;; ObtainingPermission
(isa ObtainingPermission TemporalObjectType)
(isa ObtainingPermission DefaultDisjointScriptType)
(genls ObtainingPermission Transaction)
(comment ObtainingPermission "The collection of events in which one Agent gets permission from another Agent to do something.")

;;; OccupationType
(isa OccupationType SiblingDisjointCollection)
(genls OccupationType PersonByActivityType)
(genls OccupationType PositionType)
(comment OccupationType "A collection of collections.  Each element of OccupationType is a collection of workers, based on their kinds of work; each of those workers is an element of (isa) Professional.  Elements of OccupationType represent all kinds of jobs, not just the kinds of occupations colloquially considered `professional'.  Elements of OccupationType include the collections ComputerProgrammerProfessional, FoodServiceEmployee, MedicalCareProfessional, BaseballUmpire, SalesRepresentative, Brewer, Gymnast, and many others.  Also see Professional, PositionType.")

;;; Ocean
(isa Ocean SpatiallyDisjointRegionType)
(genls Ocean Sea)
(comment Ocean "A collection of topographical features.  Each instance of Ocean is one of the oceans of the world.  This includes TheOceanSea, the interconnected expanse of salt water covering 71% of the Earth's surface, and of which the other oceans are subregions.  Examples: AtlanticOcean, ArcticOcean, IndianOcean, PacificOcean.")

;;; OceanLiner
(isa OceanLiner ExistingObjectType)
(genls OceanLiner TransportationDevice-Vehicle)
(genls OceanLiner Ship)
(comment OceanLiner "The subcollection of Ship that contains all ocean liners, i.e., ships that by design can transport a large number of people across oceans.")

;;; October
(isa October MonthOfYearType)
(genls October CalendarMonth)

;;; Offer
(isa Offer ObjectType)
(genls Offer IllocutionaryForce)
(comment Offer "A collection of illocutionary forces.  Each instance of Offer consists of a piece of information contained (perhaps implicitly) in a communication, and which expresses the speaker's intention of volunteering to perform the action described in that utterance and/or to bring about the situation described therein, on the condition that the listener accept the offer.  An offer may be made with additional conditions as well.  When an offer is accepted (and all conditions are true), the speaker of the offer incurs an obligation.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any senderOfInfo and recipientOfInfo.  See also IllocutionaryForce, Offering-CommunicationAct.")

;;; Offering-CommunicationAct
(isa Offering-CommunicationAct TemporalObjectType)
(isa Offering-CommunicationAct DefaultDisjointScriptType)
(genls Offering-CommunicationAct CommunicationAct-Single)
(comment Offering-CommunicationAct "A collection of actions, many of which are speech acts.
In each element of this collection,
somebody offers to do something, furnish something, make
something the case, etc. See also the
IllocutionaryForce associated with these actions,
Offer.")
(synonymousExternalConcept Offering-CommunicationAct SENSUS-Information1997 "OFFER")
(synonymousExternalConcept Offering-CommunicationAct SENSUS-Information1997 "COMMISSIVE-ACT")

;;; OfficialDocument
(isa OfficialDocument ExistingObjectType)
(genls OfficialDocument HardcopyInformationBearingObject)
(comment OfficialDocument "A collection of information bearing objects (IBOs).  Each element of OfficialDocument is a document that can be used as the basis, proof, or support of some fact (such as a person's nationality, marital status, credit, or qualifications; or the ownership or transfer of property; etc.).  Official documents are typically generated, issued, and certified by the relevant institutions (as with passports or stock certificates), but they also include unique personal documents (such as holographic wills) which meet certain standards to be accepted in support of facts. Examples of OfficialDocument: birth certificates, tax returns, passports, insurance policies, postage stamps, receipts, packing slips, student ID cards, etc.")

;;; Ohm
(isa Ohm MKSUnitOfMeasure)
(isa Ohm StandardUnitOfMeasure)
(resultIsa Ohm ScalarInterval)
(argsIsa Ohm CycSystemRealNumber)
(comment Ohm "The standard unit of electrical resistance.  The resistance of a circuit in which a 1-Volt ElectricalPotentialDifference produces a 1-Coulomb ElectricalCurrent.")

;;; Oil
(isa Oil TangibleStuffCompositionType)
(genls Oil OrganicStuff)
(comment Oil "A collection of tangible things.  Each element of Oil is a piece of some type of typically viscous, primarily hydrophobic liquid hydrocarbon.  For example, portions of HeatingOil, MotorOil, PeanutOil, OliveOil, etc.")

;;; Omnivore
(isa Omnivore ExistingObjectType)
(genls Omnivore Organism-Whole)
(comment Omnivore "The collection of organisms that feed on both plants and animals, and possibly other things.  Subsets of Omnivore include, for example, Person, Pig, and Bear.")

;;; OneStoryBuilding
(isa OneStoryBuilding ExistingObjectType)
(genls OneStoryBuilding Building)
(comment OneStoryBuilding "Collection of all one story buildings.")

;;; Opaque
(isa Opaque Transparency)
(comment Opaque "Opaque is a PhysicalAttribute representing a specific degree of Transparency.  Opaque objects do not transmit light.  See also transparencyOfObject.")

;;; OrderOfMagnitudeInterval
(isa OrderOfMagnitudeInterval ObjectType)
(genls OrderOfMagnitudeInterval ScalarInterval)
(comment OrderOfMagnitudeInterval "OrderOfMagnitudeInterval, a subset of ScalarInterval, is the collection of intervals which represent significant differences in quantity, for the various types of measurable properties.  The most familiar case is for numbers, in which orders of magnitudes typically correspond with powers of 10; thus, in any given numerical quantity, the 100's dominate the 10's or the units, which are negligible with respect to the hundreds.  In Cyc, we can identify the significant intervals for any measurable property.  For example, for Time, some intervals which represent orders of magnitude are: AFewSecondsDuration, AFewMinutesDuration, AFewHoursDuration, AFewDaysDuration, AFewWeeksDuration, etc.  Similar scales could be identified for any measurable property.  Moreover, orders of magnitude for the same measurable property may differ between microtheories; e.g., the orders of magnitude for Time in a `GeologicalTimeMt' would be much larger than those listed above, which are relevant for human perceptions and activities.  



Any two attributes which represent amounts of the same kind of property (e.g., time, distance) and which are also elements of OrderOfMagnitudeInterval will be assumed to differ so substantially in size that the smaller one (and values associated with it) will be insignificant compared to the larger interval (and values associated with it).  That is, in general and as a default, if ORD1 and ORD2 are two different elements of OrderOfMagnitudeInterval which are also elements of the same type of AttributeValue (e.g., Speed, Mass, Density), then one is negligible with respect to the other.  To know which dominates the other, we need additional knowledge about their relative size, e.g., that ORD2 is a followingValue of (i.e., 'bigger' than) ORD1.  See also negligibleWRT, followingValue.  The predicate orderOfMagnitude (q.v.) is used to relate particular quantities to the appropriate element of OrderOfMagnitudeInterval.  For example, two days -- in Cyc, (DaysDuration 2) -- has the orderOfMagnitude AFewDaysDuration.")

;;; Ordering-CommunicationAct
(isa Ordering-CommunicationAct TemporalObjectType)
(isa Ordering-CommunicationAct DefaultDisjointScriptType)
(genls Ordering-CommunicationAct HumanActivity)
(genls Ordering-CommunicationAct Requesting-CommunicationAct)
(comment Ordering-CommunicationAct "A collection of actions, many of which are speech acts.
In each element of this collection, somebody orders
somebody to do something. See also the IllocutionaryForce
associated with this action, Command.")
(synonymousExternalConcept Ordering-CommunicationAct SENSUS-Information1997 "COMMAND")
(synonymousExternalConcept Ordering-CommunicationAct SENSUS-Information1997 "DIRECTIVE-ACT")

;;; Organ
(isa Organ AnimalBodyPartType)
(genls Organ SolidTangibleThing)
(genls Organ AnimalBodyPart)
(comment Organ "The collection of all the Organs of Animals; i.e., the AnimalBodyParts that have specialized physiological functions and which are more or less localized in the animal.  For example: a heart, a kidney, etc.  A borderline case of this is a person's (whole) skin; in some contexts, it is treated as a sense organ, and in some contexts it is excluded because it is distributed over their entire body.")

;;; OrganicStuff
(isa OrganicStuff TangibleStuffCompositionType)
(genls OrganicStuff TangibleThing)
(comment OrganicStuff "A collection of tangible things.  Each element of OrganicStuff is a tangible thing composed of one or more types of organic Molecule.  Instances of OrganicStuff usually have their origin in the bodies (or other products) of living things.  Since some organic substances can be synthesized, OrganicStuff is not a subset of NaturalTangibleStuff.  Chemically, instances of OrganicStuff have fairly (or very) complex carbon-based structures.  Examples include the elements of the collections Oil, DNA, Alcohol-Compound, Ivory, AnimalBodyPart.")

;;; Organism-Whole
(isa Organism-Whole ExistingObjectType)
(genls Organism-Whole BiologicalLivingObject)
(comment Organism-Whole "The collection of all elements of BiologicalLivingObject which are wholes, not parts of other biological living objects (BLOs).  Most members of Organism-Whole are capable of existing and reproducing while physically separate from other organisms (with allowances for sexual reproduction).  Abnormal BLOs which are nonetheless considered to belong to Organism-Whole include elements of Virus, as well as sterile hybrids and colony organisms like those in slime molds or the elements of PortugueseManOfWar.  All of those organisms operate by DNA- and RNA-controlled mechanisms.")
(synonymousExternalConcept Organism-Whole SENSUS-Information1997 "ANIMATE-OBJECT")

;;; OrganismClassificationType
(isa OrganismClassificationType SiblingDisjointCollection)
(genls OrganismClassificationType ConventionalClassificationType)
(genls OrganismClassificationType ExistingObjectType)
(comment OrganismClassificationType "A collection of collections; OrganismClassificationType is the collection of all biological types used to classify animals, plants, or other elements of Organism-Whole.  The scientific types in OrganismClassificationType may or may not correspond to naive categories of organisms, and, in addition, although they are scientific, they might not be officially accepted biological taxons at the standard taxonomic levels.  (Invertebrate is an example.)  Compare BiologicalTaxonType.







Note that OrganismClassificationType is an element of SiblingDisjointCollection; hence, any two instances of OrganismClassificationType can be assumed to be disjoint, unless we know that one is a subset of the other (also see SiblingDisjointCollection).")

;;; OrganismPart
(isa OrganismPart ExistingObjectType)
(genls OrganismPart BiologicalLivingObject)
(comment OrganismPart "The collection of all the anatomical parts of all living organisms.  It includes gross anatomical parts and microscopic anatomical parts of every individual of every species.")

;;; OrganismTypeByHabitat
(isa OrganismTypeByHabitat SiblingDisjointCollection)
(genls OrganismTypeByHabitat ExistingObjectType)
(comment OrganismTypeByHabitat "A collection of collections.  Each element of OrganismTypeByHabitat is a collection of organisms characterized by the sort of habitat in which they live.  For example, AquaticOrganism or TerrestrialOrganism.")

;;; Organization
(isa Organization ExistingObjectType)
(genls Organization 
  (GroupFn IntelligentAgent))
(genls Organization SocialBeing)
(comment Organization "The collection of all organizations.  Each element of the collection Organization is a group whose groupMembers are instances of IntelligentAgent, and which is established such that certain known relationships and obligations exist between the members, and/or between the organization and its members, and/or between the organization and `outsiders' (individuals or groups).  Organization includes both informal and legally constituted organizations.  Organizations can act as agents --- specifically, group agents, not individuals (cf. IndividualAgent) --- to undertake projects, enter into agreements, own property, etc.   Most organizations have names.  Almost all have at least two members. Examples: Cycorp, NASA, FreeSoftwareFoundation, UnitedStatesArmy, KMartCompany.  Note the specialization OrganizationOfPeople, whose instances have only human members, e.g., an instance of Family-Human such as Joseph Kennedy's family.  Other kinds of Organization have organizations as their groupMembers, e.g., the OrganizationOfAmericanStates.")
(synonymousExternalConcept Organization SENSUS-Information1997 "ORGANIZATION")

;;; OrganizationPolicy
(isa OrganizationPolicy ExistingObjectType)
(isa OrganizationPolicy MicrotheoryType)
(genls OrganizationPolicy Agreement)
(comment OrganizationPolicy "A collection of microtheories; a subset of Agreement.  Each element of OrganizationPolicy is a microtheory which contains the terms of some policy of a particular organization.  For example, U.S. Federal government hiring policies; a policy governing a corporation's charitable or political donations; or a school dress code.")

;;; OrganizationWithBusinessCustomers
(isa OrganizationWithBusinessCustomers ExistingObjectType)
(genls OrganizationWithBusinessCustomers CommercialOrganization)
(comment OrganizationWithBusinessCustomers "A collection of organizations; a subset of CommercialOrganization.  An element of OrganizationWithBusinessCustomers is a commercial organization most of whose customers are other Organizations rather than individual Persons.")

;;; OrganizationWithIndividualCustomers
(isa OrganizationWithIndividualCustomers ExistingObjectType)
(genls OrganizationWithIndividualCustomers CommercialOrganization)
(comment OrganizationWithIndividualCustomers "A collection of organizations; a subset of CommercialOrganization.  An element of OrganizationWithIndividualCustomers is a commercial organization most of whose customers are individual Persons rather than other Organizations.")

;;; OrganizationalChart
(isa OrganizationalChart ExistingObjectType)
(genls OrganizationalChart InformationBearingObject)
(genls OrganizationalChart StructuredInformationSource)
(comment OrganizationalChart "A collection of information bearing objects (IBOs); a subset of StructuredInformationSource.  Each element of OrganizationalChart is an IBO that graphically or in outline fashion depicts information about the control structure or resource use structure of an organization.  E.g., a diagram of Exxon Corporation's top managers showing their reporting structure.")

;;; OrganizationalTransfer
(isa OrganizationalTransfer ScriptType)
(isa OrganizationalTransfer TemporalObjectType)
(genls OrganizationalTransfer PurposefulAction)
(genls OrganizationalTransfer SocialOccurrence)
(genls OrganizationalTransfer GeneralizedTransfer)
(comment OrganizationalTransfer "A collection of events.  An
OrganizationalTransfer occurs when some IntelligentAgent changes
affiliation with some Organization.  This can involve becoming a
member of the organization, ceasing to be a member of it, or switching
from one organization to another.  An OrganizationalTransfer may be
voluntarily undertaken by the transferee but may also be performedBy
some other agent.  Examples include: joining a club, being transferred
from one division of a company to another, and being excommunicated.
Negative examples include: transfer of objects or information between
organizations (since these aren't IntelligentAgents), and changes of
Nationality (since neither Nationality nor Country is currently
a kind of Organization).")

;;; OrganizationalTransferIn
(isa OrganizationalTransferIn ScriptType)
(isa OrganizationalTransferIn TemporalObjectType)
(genls OrganizationalTransferIn TransferIn)
(genls OrganizationalTransferIn OrganizationalTransfer)
(comment OrganizationalTransferIn "A subcollection of OrganizationalTransfer such that elements necessarily have some thing which becomes the member of the 'to organization'.  Exemplars include hiring someone to a company, pledging a fraternal organization, admitting a nation to NATO.  The event of leaving one organization to join another is also an element of OrganizationalTransferIn as well as OrganizationalTransferOut.  Negative exemplars include layoffs, expulsions, and excommunications which do not involve 'from organizations'.")

;;; OrganizationalTransferOut
(isa OrganizationalTransferOut ScriptType)
(isa OrganizationalTransferOut TemporalObjectType)
(genls OrganizationalTransferOut TransferOut)
(genls OrganizationalTransferOut OrganizationalTransfer)
(comment OrganizationalTransferOut "A subcollection of OrganizationalTransfer such that elements necessarily have some thing which stops being the member of the 'from organization'.  Exemplars include laying someone off, expulsions, and excommunications.   The event of leaving one organization to join another is also an element of OrganizationalTransferIn as well as OrganizationalTransferOut.  Negative exemplars include 'admitting a nation to NATO', 'hiring someone', and 'pledging a fraternal organization'.")

;;; OrientationAttribute
(isa OrientationAttribute AttributeType)
(genls OrientationAttribute AttributeValue)
(comment OrientationAttribute "The collection of attributes which characterize an object's orientation relative to whatever instance of FrameOfReference is being used in the current context.  In most contexts, orientation is taken with respect to the TerrestrialFrameOfReference.")

;;; Ounce
(isa Ounce FPSUnitOfMeasure)
(isa Ounce UnitOfMass)
(isa Ounce UnitOfMeasureNoPrefix)
(resultIsa Ounce Mass)
(resultIsa Ounce ScalarInterval)
(argsIsa Ounce CycSystemRealNumber)
(comment Ounce "The measurement function used in Cyc to represent the ounce used for measuring weight within the British (FPS) system.  See also FPSUnitOfMeasure, UnitOfMeasure.")

;;; OutdoorLocation
(isa OutdoorLocation ExistingObjectType)
(genls OutdoorLocation EcologicalRegion)
(comment OutdoorLocation "A collection of geographical regions.  Each element of OutdoorLocation is a region of outdoor space, i.e., a region which is directly subject to atmospheric weather.  Objects found in an outdoor location are in-ImmersedFully in the atmosphere of Earth.  Thus, as defined here, OutdoorLocation does NOT include elements of UnderwaterLocation or places that are Underground.  OutdoorLocations include large geographical regions.  Among the elements of OutdoorLocation are instances of the subsets Lawn, Meadow, SkiSlope, Beach, Swamp (and many others).  Note: OutdoorLocation is a collection of places, rather than an attribute; to represent the concept of being outside, see Outdoors-ExposedToWeather.  Of course, elements of OutdoorLocation have the locationState attribute of being Outdoors-ExposedToWeather.")

;;; OuterGarment
(isa OuterGarment ProductType)
(isa OuterGarment ExistingObjectType)
(genls OuterGarment ClothingItem)
(comment OuterGarment "A collection of objects; a subset of ClothingItem.  Each element of OuterGarment is a piece of clothing that is worn outside of other garments.  A common purpose of outer garments is protection (e.g., the subsets RainCoat, Apron).  An outer garment may also be a robe of office or position, such as an academic gown or a bishop's mantle.")

;;; Ovum
(isa Ovum ExistingObjectType)
(genls Ovum EukaryoticCell)
(comment Ovum "A subset of Cell.  Ovum is the collection of specialized gamete cells produced by meiosis in the reproductive tract of female animals.  Each ovum usually has half the number of chromosomes that regular body cells do, and when fertilized by a spermatozoon, it becomes a zygote and continues to develop into a mature individual.  Also called 'egg'.  See also FemaleAnimal, SexualReproductionEvent.")

;;; OxidationProcess
(isa OxidationProcess TemporalStuffType)
(isa OxidationProcess DefaultDisjointScriptType)
(genls OxidationProcess Emission)
(genls OxidationProcess ChemicalReaction)
(genls OxidationProcess TransformationProcess)
(comment OxidationProcess "A collection of events.  In each instance of this collection, some amount of Oxygen reacts with (`reduces') another substance and releases energy in the process.")

;;; Oxide
(isa Oxide TangibleStuffCompositionType)
(genls Oxide InanimateThing)
(genls Oxide TangibleThing)
(comment Oxide "A collection of tangible things.  Each element of Oxide is a portion of stuff in which each molecule consists of a combination of oxygen atoms with one or more atoms of another element.  For example, instances of Water (H2O), pieces of rust (IronOxide), portions of CarbonDioxide.")

;;; PITOfIBTFn
(isa PITOfIBTFn ReifiableFunction)
(isa PITOfIBTFn IndividualDenotingFunction)
(resultIsa PITOfIBTFn PropositionalInformationThing)
(arg1Isa PITOfIBTFn InformationBearingThing)
(comment PITOfIBTFn "The Cyc function PITOfIBTFn is an element of IndividualDenotingFunction.  Given as its argument a particular instance of InformationBearingThing (q.v.), PITOfIBTFn returns the information content of that thing.  The object returned is an element of PropositionalInformationThing (q.v.).  Thus, (PITOfIBTFn IBT) denotes the abstract, propositional chunk of information that is represented in IBT.  For example: if IBT is a particular printed copy of Psalm 23, then (PITOfIBTFn MyCopyOfPsalm23) refers to the propositional content of Psalm 23.")

;;; PacificOcean
(isa PacificOcean Entity)
(isa PacificOcean Ocean)
(comment PacificOcean "The main body of salt water in the EasternHemisphere-Region, bordering on five continents (Western coast of North and South Americas, Australia, Antarctica, and Eastern coast of Asia).")

;;; Pants
(isa Pants ProductType)
(isa Pants ExistingObjectType)
(genls Pants ClothingItem)
(comment Pants "A collection of objects.  Every element of Pants is a clothing item worn on the lower torso and legs.  The collection Pants includes the subsets ShortPants and LongPants.  There are also very specialized subsets, e.g., FootballPants.")

;;; Paper
(isa Paper TangibleStuffCompositionType)
(isa Paper ProductType)
(genls Paper TangibleProduct)
(genls Paper SolidTangibleThing)
(comment Paper "A collection of tangible things.  
Each element of Paper is a portion of paper, considered
as a 'stuff' out of which things can be made, like
metal or plastic.  Thus, this collection includes
the collection SheetOfPaper, but is wider.
Important sources from which paper may be derivedFrom 
include wood pulp, cotton, papyrus, rice.  
Examples: business stationery, MaxiPads, paper currency, 
toilet paper, newsprint, paper coffee filters, notebook paper.")

;;; PartOfBuilding
(isa PartOfBuilding ExistingObjectType)
(genls PartOfBuilding ConstructionArtifact)
(comment PartOfBuilding "A collection of parts of a building that are 'built-in', that is, built with the intention of remaining as part of the building.")

;;; PartOfRoomInAConstruction
(isa PartOfRoomInAConstruction ExistingObjectType)
(genls PartOfRoomInAConstruction PartOfBuilding)
(comment PartOfRoomInAConstruction "A collection of all parts of all instances of RoomInAConstruction.  This includes both solid parts, like Mantels, and enclosed regions such as are contained by cabinets and Cupboards.  Instances should be features which are 'built-in', that is, built with the intention of remaining as part of the room.")

;;; PartPredicate
(isa PartPredicate PredicateCategory)
(genls PartPredicate ExtensionalRepresentationPredicate)
(comment PartPredicate "A collection of predicates.  Instances of PartPredicate are used to describe the relationship between an Individual and its parts.")

;;; PartTime
(isa PartTime WorkStatus)
(comment PartTime "An attribute; an element of WorkStatus.  The attribute of being a part-time worker.")

;;; PartialCloudCover
(isa PartialCloudCover Cloudiness)
(genlAttributes PartialCloudCover Cloudy)
(comment PartialCloudCover "PartialCloudCover is a WeatherAttribute representing a specific degree of Cloudiness.  This attribute describes a location as having some cloud cover but not enough to completely block out all direct sunlight.  Direct sunlight comes and goes as clouds occluding the sun pass.")

;;; PartiallyIntangible
(isa PartiallyIntangible ObjectType)
(isa PartiallyIntangible TemporalStuffType)
(genls PartiallyIntangible SomethingExisting)
(comment PartiallyIntangible "The collection of things having an intangible component but which exist in time.  Some, but not all, elements of PartiallyIntangible have a tangible component; some are just those elements of Intangible which do exist in time (IntangibleExistingThing), such as the laws of the state of Texas, your bank account, etc.  Since some elements of Intangible have no temporal aspect (e.g., the number 42), Intangible is NOT a subset of PartiallyIntangible.")

;;; PartiallyOrderedSet
(isa PartiallyOrderedSet ObjectType)
(genls PartiallyOrderedSet QuasiOrderedSet)
(comment PartiallyOrderedSet "The collection of all partially ordered sets (also called ordered sets, partial orders, or posets), each being a SetWithStructure consisting of a set together with an ordering relation on that set.   Mathematical directed chains, trees, forests, and lattices are special cases of PartiallyOrderedSet.  The ordering relation is defined on the associated set, and is transitive on that set, reflexive on that set, and antisymmetric on that set.   Sometimes the members of the PartiallyOrderedSet are called its nodes, and the non-redundant (transitively reduced) pairwise relations between the nodes are called the links.  A PartiallyOrderedSet may be finite or infinite, and connected or unconnected.  (Note: A PartiallyOrderedSet is not a SetOrCollection, rather it is a SetWithStructure that has an associated SetOrCollection.)")

;;; PartiallyTangible
(isa PartiallyTangible ExistingStuffType)
(isa PartiallyTangible ObjectType)
(genls PartiallyTangible SpatialThing)
(genls PartiallyTangible SomethingExisting)
(comment PartiallyTangible "Elements of PartiallyTangible have some tangible (i.e., material) part and also have a temporal extent (i.e., they exist in time).  They may or may not also have an intangible part; e.g., a book is made of matter, has a temporal extent, and also has intangible content which is the information content of the text that the author wrote.")
(synonymousExternalConcept PartiallyTangible SENSUS-Information1997 "PHYSICAL-OBJECT")

;;; PartiallyTangibleProduct
(isa PartiallyTangibleProduct ExistingObjectType)
(isa PartiallyTangibleProduct ProductType)
(genls PartiallyTangibleProduct PartiallyTangible)
(genls PartiallyTangibleProduct Product)
(comment PartiallyTangibleProduct "A collection of spatial objects; a subset of Product.  Each element of PartiallyTangibleProduct is a product that has some tangible component and may, but need not, have an intangible component (e.g., information).  (See also PartiallyTangible.)  Examples of PartiallyTangibleProduct: a newspaper, a photograph, a videotape of `Star Wars', a sack of flour, lumber, a mobile home.")

;;; Particle
(isa Particle ExistingObjectType)
(genls Particle InanimateThing)
(genls Particle TangibleThing)
(comment Particle "A collection of tangibles; a subset of TangibleThing.  Each element of Particle is a smallish liquid or solid tangible thing, at least small enough to be blown about by ordinary gusts of wind, and possibly much smaller.  Examples include elements of the collections CornMeal, SandParticle, Sawdust, DustParticle, Sugar-Table.")

;;; Partnership
(isa Partnership ExistingObjectType)
(genls Partnership LegalAgent)
(genls Partnership Business)
(comment Partnership "A collection of businesses.  An element of Partnership is a business which is owned and operated by more than one person but generally fewer than fifty; these owners have the relation businessPartners (q.v.) to one another.  Commonly, the partners are workers in the enterprise.  The partners typically have equal shares in the assets and liablities (except for limited partners), and the partners jointly decide the firm's actions, perhaps by vote.")

;;; PartsFormat
(isa PartsFormat Format)
(comment PartsFormat "Argument positions of Cyc predicates may have specified formats that constrain how many and what kind of terms may occupy that position, given some fixed set of terms in the other argument positions of the predicate.  If a predicate P has PartsFormat for argument position N, then given some particular set of terms that occupy the other argument positions of P, there may be multiple assertions with different terms in position N (keeping the other arguments fixed), but only so long as the terms in position N are all physicalParts of the same PartiallyTangible.  For example, the arg1Format of physicalParts is PartsFormat.  This allows us to represent that JosephsRightThumbnail is a physicalParts of JosephsRightThumb, of JosephsRightHand, and of Joseph.  This is more restrictive than SetTheFormat, which allows multiple unrelated values.  In contrast, specifying only (arg1Format physicalParts SetTheFormat) would not prevent JosephsRightThumb from being a physicalParts of both JosephsRightHand and of JamesRightHand.")

;;; Party-Celebration
(isa Party-Celebration ScriptType)
(genls Party-Celebration SocialGathering)
(comment Party-Celebration "The collection of party events and other similar celebrations such as baby showers.  Persons gather intentionally at a location in order to communicate or share some experience, and to enjoy themselves, but (unlike a MeetingTakingPlace) business is rarely transacted at a Party-Celebration, or at least is beside the official point of the party.
Note: as with most collection worth naming, there are borderline cases here; e.g., Tupperware parties.")

;;; Passport
(isa Passport ExistingObjectType)
(genls Passport IDDocument)
(genls Passport OfficialDocument)
(comment Passport "A collection of official documents.  Each element of Passport is a document issued to a person by a national government in order to identify that person as a citizen of said country while s/he is travelling across or outside of that country's borders.")

;;; Paste-Form
(isa Paste-Form PhysicalStructuralAttribute)
(comment Paste-Form "A physical attribute.  Paste-Form is the PhysicalStructuralAttribute which describes solids that are pastelike in texture and consistency.  They are very easily deformed, and they tend to remain in the deformed shape afterwards, provided that they don't collapse under their own weight.")

;;; Pasteurization
(isa Pasteurization ScriptType)
(genls Pasteurization PreservingFood)
(comment Pasteurization "The heating of a milk product in order to kill off microorganisms that might make it spoil.")

;;; Path-Customary
(isa Path-Customary ExistingObjectType)
(genls Path-Customary SomethingExisting)
(genls Path-Customary Path-Generic)
(comment Path-Customary "The collection of all existing objects that are commonly paths, or are normally used as paths or conduits for people, animals, vehicles, material or information.  A Path-Customary is either designed as a path or it has a significant known function as a path for movement.  Examples include roads, railroads, sea-lanes, cowpaths, boardwalks, tubes, channels, blood vessels, fibers, wires, communication links, etc.   It does not include all the things that may be used as paths in some particular PathSystems, but are otherwise not ordinarily viewed as paths (though the latter are still instances of Path-Generic).  If a Path-Customary is an instance of a certain PathType, it may be assumed to be part of a system (not necessarily explictly given) of such paths.  Or, on the other hand, it may be asserted to be part of a particular specified PathSystem using the predicate pathInSystem.  A Path-Customary is either a Path-Simple (with two distinct ends, not forming a cycle) or else it may be a Path-Cyclic.")

;;; Path-Generic
(isa Path-Generic Collection)
(genls Path-Generic Thing)
(comment Path-Generic "A collection of Things that are paths or can be considered paths.  Each Path-Generic is either a Path-Simple or a Path-Cyclic, i.e., either a non-self-crossing path or a cycle.  A Path-Generic may be abstract (as in Graph Theory), or it may be concrete such as a Path-Customary, for example a road, railroad, sea-lane, cowpath, pipe, blood vessel, fiber or wire, or on the other hand it could be anything that is used as a path in some PathSystem.  If a Path-Generic is a Path-Customary, then it may or may not have a specified PathSystem in which it is a path; if the Path-Generic is not a Path-Customary, then it can only be a path in some given PathSystem.  For example, an orange is not a customary path, but it can be a path for ants in a specified ant path system.  For any Path-Generic, there can be a Traversal of something moving along that path; a single Traversal can cross itself, double back along itself, and/or go back and forth along some part of a Path-Generic any number of times.")

;;; Path-Simple
(isa Path-Simple Collection)
(genls Path-Simple Path-Generic)
(comment Path-Simple "A collection of non-cyclic paths, broadly conceived.  Each instance of Path-Simple has two ends and it forms a pathBetween them.  It can be a road, railroad, air lane, sea lane, channel, blood vessel, part of an electric circuit, part of a pipe system, or even some abstract chain of connections among people or a 'path' in Graph Theory.  A Path-Simple cannot cross itself, return to the same point, nor double back along itself.  Each Path-Simple has two distinct ends that do not 'overlap' each other.  But in general a path may have more than two things that are its 'end-points' -- for example, a path between Austin and Pittsburgh can also be a path between Texas and Pennsylvania.  In such an example Texas and Pennsylvania are required to be spatially disjoint.   (To prohibit multiple things being an end-point of a path simultaneously, specify a PathSystem, because in a specified PathSystem a path's two end points in the system are unique.  The predicate pathBetweenInSystem is restricted to a set of paths and points specified for the particular PathSystem.)  For a Path-Simple any points on it (e.g., pointOnPath X PATH) are connected: 'pathConnects' is true of them.  Any number of intersections may occur along a Path-Simple.   A path is different from a Traversal or a Trajectory: a traversal is the trace of an object moving along a path or in a PathSystem, and the Traversal can cross itself and/or double back along itself any number of times.  While a path is fixed and may have no direction, a traversal has a particular direction.  Many distinct traversals may traverse the same underlying path (see Traversal and traversalInSystem), since a traversal can go back and forth across the same part of a path any number of times.  A Trajectory (a trace of motion) along paths is a Traversal.")

;;; PathArtifact
(isa PathArtifact ExistingObjectType)
(genls PathArtifact Path-Customary)
(genls PathArtifact ConstructionArtifact)
(comment PathArtifact "A collection of artifacts.  Each element of PathArtifact is a path made by agents, whether animal or human.  Elements of PathArtifact range from deer trails to superhighways.  Such paths connect places that animals or people are found in and/or between which they want to travel.  Examples: ErieCanal, WellandShipCanal, ChampsElysee, WallStreet, USHighway80, Highway101CA.")

;;; PathForWheeledVehicles
(isa PathForWheeledVehicles ExistingObjectType)
(genls PathForWheeledVehicles OutdoorLocation)
(genls PathForWheeledVehicles FixedStructure)
(genls PathForWheeledVehicles PathArtifact)
(genls PathForWheeledVehicles Path-Simple)
(comment PathForWheeledVehicles "Each instance of PathForWheeledVehicles is an instance of PathArtifact, whose primary function is to serve as a place along which wheeled vehicles may move or park. Usually but not necessarily they are paved.")

;;; PathType
(isa PathType SiblingDisjointCollection)
(genls PathType ObjectType)
(comment PathType "A collection of collections.  Each instance of PathType is a collection that is a subcollection of Path-Simple.  There are several  types of path, according to the medium or surface the path goes through or over.")

;;; PathsConcatenatedFn
(isa PathsConcatenatedFn NonPredicateFunction)
(resultIsa PathsConcatenatedFn Path-Simple)
(arg1Isa PathsConcatenatedFn Path-Simple)
(arg2Isa PathsConcatenatedFn Path-Simple)
(comment PathsConcatenatedFn "A function joining two paths end-to-end in series.  For each path PATH1 between X and Y, and each path PATH2 between Y and Z, if every point A on both paths satisfies the conditions (pathBetween PATH1 X A) and (pathBetween PATH2 A Z), then (PathsConcatenatedFn PATH1 PATH2) denotes the path obtained by concatenating PATH1 and PATH2, i.e., the path that is a super path of both PATH1 and PATH2 and is between X and Z.  Note that when you use (PathsConcatenatedFn PATH1 PATH2), PATH1 and PATH2 cannot intersect, i.e., no point is on both paths except their end-points.  This function is not defined on the cartesian product Path-Simple x Path-Simple.  It is rather defined on a proper subset of it.")

;;; Paying
(isa Paying TemporalObjectType)
(isa Paying DefaultDisjointScriptType)
(genls Paying MoneyTransfer)
(genls Paying PurposefulAction)
(genls Paying TransferringOwnership)
(comment Paying "A collection of events; a subset ofMoneyTransfer.  Each element of Paying is an event in which one agent pays money to another agent.  The payer is the fromPossessor; the recipient is the toPossessor.  In all payings, the payer gives the payee FullUseRights to the money. Some types of payings: (1) all instances of Buying and Renting contain (at least one) subEvents which are elements of Paying; (2) making charitable contributions; (3) paying off one's gambling debts; (4) paying an employee's salary or a child's allowance.  Writing a check or offering a credit card in payment are firstSubEvents of paying events; such payings are successful only if the check is not lost or stolen, if it clears the bank, etc.  On the other hand, filling out a pledge card, e.g., for United Way, is NOT considered a Paying event or part of one, because it does not involve or initiate any legal reassignment of rights to the money.")

;;; Pensive
(isa Pensive FeelingAttributeType)
(genls Pensive FeelingAttribute)
(comment Pensive "A feeling of deep thoughtfulness, reflection, or introspection, and sometimes melancholia.  This is a Collection --- for an explanation of that, see Happiness.")

;;; Perceiving
(isa Perceiving DefaultDisjointScriptType)
(isa Perceiving TemporalStuffType)
(genls Perceiving CompositePhysicalAndMentalEvent)
(genls Perceiving SingleDoerAction)
(comment Perceiving "Perceiving is the collection of sensory-perceptual events in which a PerceptualAgent perceives, i.e. acquires information, using its senses.")
(overlappingExternalConcept Perceiving SENSUS-Information1997 "PERCEPTION")

;;; Perceiving-Involuntary
(isa Perceiving-Involuntary TemporalStuffType)
(genls Perceiving-Involuntary Perceiving)
(comment Perceiving-Involuntary "A collection of mental events, a subset of Perceiving. Each element of this collection is a perceptual event in which the agent involuntarily receives senory information. Thus, if I am in a room, and a light is turned on, I would see the light reflected off of the walls, but without any effort on my part.  On the other hand, actively searching for something with my eyes would not be a member of this collection.")
(synonymousExternalConcept Perceiving-Involuntary SENSUS-Information1997 "INVOLUNTARY-PERCEPTUAL-EVENT")

;;; Perceiving-Voluntary
(isa Perceiving-Voluntary ScriptType)
(isa Perceiving-Voluntary TemporalStuffType)
(genls Perceiving-Voluntary PurposefulAction)
(genls Perceiving-Voluntary Perceiving)
(comment Perceiving-Voluntary "A collection of mental events, a subset of Perceiving.
Each element of this collection is a perceptual event in which
the agent does not merely passively receive sensory information,
but is actively filtering or directing how he is perceiving.
Thus, searching for a set of lost keys would be an element
of this collection, as would straining to hear something, but
merely hearing a balloon pop next to you would not.")
(synonymousExternalConcept Perceiving-Voluntary SENSUS-Information1997 "VOLUNTARY-PERCEPTUAL-EVENT")

;;; PerceivingSlot
(isa PerceivingSlot RelationType)
(genls PerceivingSlot BinaryPredicate)
(comment PerceivingSlot "A collection of predicates.  Each element of PerceivingSlot is a binary predicate relating a perceiver and an object or event (not a sense-datum) that s/he perceives in the mode specified by the predicate; e.g., sees, hears, smells, perceivesByTouching, tastes.  Assertions that use a predicate belonging to PerceivingSlot imply that some perception event occurs during the time that the assertion holds.  See also Perceiving and its subsets.")

;;; Percent
(isa Percent EvaluatableFunction)
(isa Percent DimensionlessUnitOfMeasure)
(isa Percent UnitOfMeasureNoPrefix)
(resultIsa Percent IntervalOnNumberLine)
(resultIsa Percent ScalarInterval)
(argsIsa Percent CycSystemRealNumber)
(comment Percent "Percent is a function whose results are percentages.  E.g., (Percent 1) represents 1% in Cyc (and is equal to .01); (Percent 110) is the same as 1.1; (Percent 0.1) is the same as 0.1%, which is the same as .001.")

;;; PerceptualAgent
(isa PerceptualAgent ExistingObjectType)
(genls PerceptualAgent IndividualAgent)
(comment PerceptualAgent "The collection of all sentient agents.  Elements of PerceptualAgent are beings capable of doing instances of Perceiving.  Furthermore, in many cases the information that a perceptual agent gathers is input that can influence its other actions.")
(synonymousExternalConcept PerceptualAgent SENSUS-Information1997 "CONSCIOUS-BEING")

;;; Permission
(isa Permission ExistingObjectType)
(genls Permission Agreement)
(comment Permission "A collection of agreements.  Each element of Permission is an agreement specifying some rights or privileges which have been granted to an Agent.  A permission may be an informal agreement between individuals, but many instances are formal and involve permissions granted by a government authority to some agent.  E.g., a driver's license, a marriage license, a visa for entering the U.S., a license to practice medicine.")

;;; Person
(isa Person OrganismClassificationType)
(genls Person LegalAgent)
(genls Person Primate)
(genls Person HumanOccupationConstructResident)
(genls Person Omnivore)
(comment Person "The collection of all human beings.  The collection Person constitutes the species Homo Sapiens; thus, Person is an instance of BiologicalSpecies in the BiologyMt.  (See also HomoGenus, of which Homo Sapiens is the only nonextinct species.)  Persons constitute the most intelligent subset of Primate, and it is the only class whose elements are known to be naturally capable of speaking a language.  All cultural activity requires participation of persons.  Person excludes non-human legal persons; see Agent.")
(synonymousExternalConcept Person SENSUS-Information1997 "PERSON")

;;; PersonByActivityType
(isa PersonByActivityType Collection)
(genls PersonByActivityType ExistingObjectType)
(comment PersonByActivityType "A collection of collections.  Each element of PersonByActivityType is a collection which classifies people by some kind of activity that an individual does regularly.  Some examples are: Student, Tourist, and HornPlayer.  If the differentiating activity is one that can be done as a career or job, it is preferable to make that collection an element of the more specific OccupationType (q.v.).")

;;; PersonalProduct
(isa PersonalProduct ExistingObjectType)
(isa PersonalProduct ProductType)
(genls PersonalProduct Product)
(comment PersonalProduct "A collection of products.  Each element of PersonalProduct is a service or tangible product designed for the physical body of a person, including clothing, accessories, personal care products (e.g., deodorant, hand soap) and devices (e.g., razors, heating pads), cosmetics, and personal services such as massages and manicures.  These are products or services which a person would seek out or apply to him/herself; i.e., it excludes products used on the body of a person by physicians (e.g., scalpels), dentists (e.g., dental drills), or morticians.")

;;; PersonalityAttribute
(isa PersonalityAttribute UnorderedAttributeType)
(genls PersonalityAttribute MentalAttribute)
(comment PersonalityAttribute "The collection of attributes which describe aspects of a person's personality.  E.g., Dependability.  
Note that Gentleness, Viciousness, and other emotive traits common to both humans and other animals, appear under TemperamentAttribute, which is a superset of PersonalityAttribute.")

;;; Pharmacist
(isa Pharmacist MedicalSpecialtyType)
(genls Pharmacist MedicalCareProfessional)
(comment Pharmacist "The collection of professionals who are trained and licensed to prepare and distribute legal drugs.")

;;; Pharmacy
(isa Pharmacy MedicalFacilityType)
(genls Pharmacy LocalCustomerContactPoint)
(genls Pharmacy CommercialOrganization)
(comment Pharmacy "The collection of (local-level) organizations which sell mainly prescription drugs, but usually also carry non-prescription drugs and other medical supplies that might be needed by a family or individual. (i.e. not a supplier to hospitals).  Sometimes these are free-standing stores, sometimes departments within other stores like drugstores and supermarkets.")

;;; PharmacyProductType
(isa PharmacyProductType Collection)
(genls PharmacyProductType ProductType)
(comment PharmacyProductType "The collection of pharmaceutical product types, including drugs and pharmaceutical devices.")

;;; PhoneNumber
(isa PhoneNumber IDStringType)
(genls PhoneNumber IDString)
(genls PhoneNumber CharacterString)
(comment PhoneNumber "A collection of strings. Each element of PhoneNumber is a string that represents a telephone number.")

;;; PhysicalAmountSlot
(isa PhysicalAmountSlot PredicateCategory)
(genls PhysicalAmountSlot IntervalBasedQuantitySlot)
(genls PhysicalAmountSlot TangibleObjectPredicate)
(comment PhysicalAmountSlot "A collection of predicates.  Each element of PhysicalAmountSlot is a slot (i.e., a binary predicate) used in assertions that state (perhaps roughly) `how much' of an object there is.  These can be viewed as different ways of stating the size of an object; e.g., lengthOfObject, volumeOfObject, massOfObject, depthOfObject, interiorFloorSpace.")

;;; PhysicalAttribute
(isa PhysicalAttribute AttributeType)
(genls PhysicalAttribute AttributeValue)
(comment PhysicalAttribute "A collection of attribute
values.  Each element of PhysicalAttribute is an attribute
value could in theory be measured using physical instruments. 
Subsets of this collection include Density, Speed, 
Rigidity, Mass, etc. Elements include ColdToBitterlyCold,
(MediumAmountFn Visibility), and AFewYearsDuration.")
(synonymousExternalConcept PhysicalAttribute SENSUS-Information1997 "MATERIAL-WORLD-QUALITY")

;;; PhysicalAttributeDescriptionSlot
(isa PhysicalAttributeDescriptionSlot RelationType)
(genls PhysicalAttributeDescriptionSlot PhysicalFeatureDescribingPredicate)
(genls PhysicalAttributeDescriptionSlot BinaryPredicate)
(genls PhysicalAttributeDescriptionSlot ExtensionalRepresentationPredicate)
(comment PhysicalAttributeDescriptionSlot "A collection of predicates.  PhysicalAttributeDescriptionSlot is a subset of both BinaryPredicate and PhysicalFeatureDescribingPredicate.  Each element of PhysicalAttributeDescriptionSlot relates some particular tangible object to an instance of PhysicalAttribute which characterizes that object.  The attribute may or may not be a quantifiable property.  Examples of PhysicalAttributeDescriptionSlot: objectEmitsOdor, viscosityOfSubstance, colorOfObject, diameterOfObject, physicalParts, shape, xzCrossSectionShapeType.")

;;; PhysicalConductingMedia
(isa PhysicalConductingMedia ExistingStuffType)
(genls PhysicalConductingMedia TangibleThing)
(comment PhysicalConductingMedia "A collection of tangible stuff.  Each element of PhysicalConductingMedia is a physical thing that can serve as a conductor, e.g., for heat or electricity.  Examples include power lines, pieces of superconductor materials, ceramic, etc.")

;;; PhysicalContactLocation
(isa PhysicalContactLocation ContactLocationType)
(genls PhysicalContactLocation ContactLocation)
(genls PhysicalContactLocation HumanShelterConstruction)
(comment PhysicalContactLocation "A collection of locations; a subset of HumanShelterConstruction.  An instance of PhysicalContactLocation is the principal place(s) where an Agent can be physically found.  For people, that would (probably) be their home and/or office.   For an organization, it would be the location of their place of business, their headquarters, etc.  Note that a purely procedural method for getting in touch with someone, such as their Post Office Box number in a certain city, is not a PhysicalContactLocation.")

;;; PhysicalContactSituation
(isa PhysicalContactSituation TemporalStuffType)
(genls PhysicalContactSituation Situation)
(comment PhysicalContactSituation "The collection of all Situations in which two or more tangible objects are touching (touches).  Includes an object rubbing against another, objects colliding, as well as static touching configurations.  Note that although most PhysicalEvents involve some kind of touching, not all of them should be specs of PhysicalContactSituation.  Only on those in which contact is salient to what the event is about should be PhysicalContactSituations.")

;;; PhysicalDevice
(isa PhysicalDevice ExistingObjectType)
(genls PhysicalDevice PartiallyTangibleProduct)
(genls PhysicalDevice Artifact)
(genls PhysicalDevice InanimateThing)
(comment PhysicalDevice "A collection of tangible things. 
 Each PhysicalDevice is an Artifact which is designed 
for a specific use or 
to perform a specific function. 
Thus, the collections Tool, Condom, BathTub, and
TransportationDevice-Vehicle are all subsets of this
collection, as are many other collections. Excluded are
artifacts which can only be 'used' in a very loose or
metaphorical sense, such as instances of Sculpture,
FlowerBed, or Advertisement. Also, an instance of 
PhysicalDevice should have a relatively rigid, set
shape (which doesn't exclude it having moving parts!);
hence, GasolineFuel or AntiFreeze are not subsets
of PhysicalDevice.")

;;; PhysicalEvent
(isa PhysicalEvent TemporalObjectType)
(isa PhysicalEvent ScriptType)
(genls PhysicalEvent Event)
(genls PhysicalEvent SpatialThing)
(comment PhysicalEvent "A collection of events.  Each element of PhysicalEvent is an event which involves the interaction of some number of physical objects. (For contrast, see MentalEvent or, a collection of much more common occurrences, CompositePhysicalAndMentalEvent.)")
(synonymousExternalConcept PhysicalEvent SENSUS-Information1997 "MATERIAL-PROCESS")

;;; PhysicalFeatureDescribingPredicate
(isa PhysicalFeatureDescribingPredicate RelationType)
(genls PhysicalFeatureDescribingPredicate Predicate)
(comment PhysicalFeatureDescribingPredicate "A collection of predicates.  Each element of PhysicalFeatureDescribingPredicate is a predicate used in assertions that describe spatiophysical aspects of individual objects.  Examples: above-Directly, physicallyContains, touchesDirectly, colorOfObject, temperatureOfObject, spans-Bridgelike.")

;;; PhysicalPartPredicate
(isa PhysicalPartPredicate PredicateCategory)
(genls PhysicalPartPredicate PartPredicate)
(genls PhysicalPartPredicate CotemporalPredicate)
(comment PhysicalPartPredicate "A collection of predicates. Instances of PhysicalPartPredicate are used to describe the relationship between a PartiallyTangible and its physicalParts.")

;;; PhysicalSeries
(isa PhysicalSeries ExistingObjectType)
(genls PhysicalSeries PartiallyTangible)
(genls PhysicalSeries Group)
(genls PhysicalSeries Series)
(comment PhysicalSeries "Each PhysicalSeries is a Group of PartiallyTangibles which is ordered in a linear fashion, most likely according to some spatial relationship.  For example, a group of people in line at a ticket booth, or the vertebrae in one person's spine.")

;;; PhysicalStateChangeEvent
(isa PhysicalStateChangeEvent TemporalObjectType)
(isa PhysicalStateChangeEvent DefaultDisjointScriptType)
(genls PhysicalStateChangeEvent PhysicalEvent)
(genls PhysicalStateChangeEvent IntrinsicStateChangeEvent)
(comment PhysicalStateChangeEvent "PhysicalStateChangeEvent is the collection of events in which some piece of matter changes from one of the physical states of matter to another.  Such changes of state can be induced by changes in temperature (or the equivalent in the manipulation of kinetic energy).  Each particular instance of Boiling, Freezing, Evaporating, Condensing, Melting, etc. is an instance of PhysicalStateChangeEvent.  

Note: Most Cyc microtheories distinguish four states of matter, namely, SolidStateOfMatter, SemiSolidStateOfMatter, LiquidStateOfMatter, GaseousStateOfMatter.  See StateOfMatter-SolidLiquidGaseous and its individual state constants.")

;;; PhysicalStructuralAttribute
(isa PhysicalStructuralAttribute UnorderedAttributeType)
(genls PhysicalStructuralAttribute AttributeValue)
(comment PhysicalStructuralAttribute "A collection of attributes.  Each element of PhysicalStructuralAttribute is a physical attribute that determines or describes the structure of a tangible object.  These attributes are qualitative, not measurable; in that way, they are unlike those described by the elements of Density, Mass, Elasticity, ThermalConductivity, and other attributes which belong to ScalarInterval.  Examples of PhysicalStructuralAttribute: Granular, Powdery, Paste-Form, Brittle, Collapsible, Hollow, Woven, Burnt.   An individual object's PhysicalStructuralAttributes are indicated with the predicate physicalStructuralAttributes.")

;;; PhysicalUrgeType
(isa PhysicalUrgeType PrimitiveAttributeType)
(genls PhysicalUrgeType SensoryReactionType)
(comment PhysicalUrgeType "A collection of collections, and also a subset of SensoryReactionType (qv). Its elements are distinct from SensoryReactionType because they necessarily have a value on urgeTypeSatisfied.  An element of PhysicalUrgeType is an AttributeType that describes one class of urges (to do something) that animals have. The elements of PhysicalUrgeType are rather earthy; some examples are: UrgeToYawn, UrgeToScratch, UrgeToVomit, UrgeToUrinate, etc. ")

;;; PhysicallyAttackingAnAgent
(isa PhysicallyAttackingAnAgent ScriptType)
(genls PhysicallyAttackingAnAgent ActionOnObject)
(genls PhysicallyAttackingAnAgent HostileSocialAction)
(comment PhysicallyAttackingAnAgent "The collection of events in which one Agent (or a small group of Agents) physically attacks another Agent (or small group of Agents.)  Each assassination attempt is an example of such an event.")

;;; PhysiologicalAttribute
(isa PhysiologicalAttribute UnorderedAttributeType)
(genls PhysiologicalAttribute AttributeValue)
(comment PhysiologicalAttribute "The collection of attributes related to a plant or animal organism's physiological characteristics.  Some examples include Flexed, Deaf, Injured, Fertile, Swollen, AcidIndigestion, etc.")

;;; PhysiologicalCondition
(isa PhysiologicalCondition ScriptType)
(genls PhysiologicalCondition BiologicalEvent)
(comment PhysiologicalCondition "The collection of Events in which an organism undergoes (as bodilyDoer) some physiological state or process, which may be normal or abnormal.  An instance of PhysiologicalCondition is, especially, a dynamic physiological state that (1) has important temporal aspects, such as a developmental condition or a progressive disease, and/or (2) affects the organism's physiological condition for a significant period of time, such that (a) the condition may be thought of as an `episode' in the life of the organism or even (b) a permanent aspect of the organism's ongoing life.  PhysiologicalCondition is the most general collection of such states.  In representing particular cases, one of the various subsets of PhysiologicalCondition is likely to be more useful; these include: Pregnancy, Pneumonia, Cancer, KidneyStoneCondition, HeartAttack, AllergicReaction, Phobia, ChronicCondition, Asthma, etc.")

;;; PhysiologicalConditionType
(isa PhysiologicalConditionType Collection)
(genls PhysiologicalConditionType ScriptType)
(comment PhysiologicalConditionType "A collection of collections.  Each PhysiologicalConditionType is a coherent set of PhysiologicalConditions characterizing some non-instantaneous aspect of an organism.  Some sample elements are: Menopause, SickleCellAnemia, Infection, Malnutrition, etc.")

;;; PhysiologicalFunction
(isa PhysiologicalFunction TemporalStuffType)
(isa PhysiologicalFunction DefaultDisjointScriptType)
(genls PhysiologicalFunction PhysiologicalProcess)
(comment PhysiologicalFunction "The collection of those PhysiologicalProcesses that serve some end for their doers, which may be cells, tissues, or whole organisms; for example, Photosynthesis.")

;;; PhysiologicalProcess
(isa PhysiologicalProcess TemporalStuffType)
(isa PhysiologicalProcess DefaultDisjointScriptType)
(genls PhysiologicalProcess BiologicalEvent)
(comment PhysiologicalProcess "The collection of events in which an organism does (typically unconsciously) some process which involves alteration of that agent's physiological state.  A PhysiologicalProcess is normally one that is done by organisms (or parts of organisms) in the course of living.  A large subset of PhysiologicalProcess is BodilyFunctionEvent, including its subsets Respiration, DigestingInStomach, and Heartbeating.  (Compare this collection with PhysiologicalCondition, whose elements are more episodic than process-like.) ")

;;; PieceOfFreeSpace
(isa PieceOfFreeSpace ExistingStuffType)
(genls PieceOfFreeSpace Air)
(genls PieceOfFreeSpace PureSpace)
(genls PieceOfFreeSpace PartiallyTangible)
(comment PieceOfFreeSpace "Elements of PieceOfFreeSpace are contiguous regions of ``empty'' yet tangible space, such as the interior of a room or sky above a city.  Typically (but not necessarily), a PieceOfFreeSpace is associated with a geographical region or some physical boundaries that define its edges.")

;;; Pipe-GenericConduit
(isa Pipe-GenericConduit ExistingObjectType)
(genls Pipe-GenericConduit FlowPath)
(genls Pipe-GenericConduit SolidTangibleThing)
(comment Pipe-GenericConduit "The collection of all enclosed tubular fluid conduits with openings at both ends.  Pipe-GenericConduit encompasses both human-made pipes as well as natural pipes, found naturally occurring in the environment, or found in an organism's body, like BloodVessels.")

;;; PipeEndToCavityJunction
(isa PipeEndToCavityJunction RegionType)
(genls PipeEndToCavityJunction Configuration)
(genls PipeEndToCavityJunction Portal)
(comment PipeEndToCavityJunction "The collection of junctions, in each of which some Pipe-GenericConduit ends at a Cavity of larger diameter than the pipe, allowing flow or access between them.  The flange where a water pipe enters a water tank is one example, as is the junction of the esophagus and the stomach in animals.  See also the predicate pipeEndsAtCavity.")

;;; Pity
(isa Pity FeelingAttributeType)
(genls Pity FeelingAttribute)
(comment Pity "Feeling sorry for another agent on account of the undesirable state of affairs s/he is in.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; Place
(isa Place ExistingObjectType)
(genls Place PartiallyTangible)
(comment Place "The collection of SpatialThings that have a relatively permanent location. Thus, every Place is stationary in the frame of reference of the current microtheory.")
(synonymousExternalConcept Place SENSUS-Information1997 "SPACE-INTERVAL")

;;; Planet
(isa Planet ExistingObjectType)
(genls Planet GeographicalRegion)
(genls Planet HeavenlyBody)
(comment Planet "A collection of heavenly bodies.  Each element of Planet is a planet either in Earth's solar system or elsewhere in the universe.  Examples: PlanetJupiter, PlanetVenus.")

;;; Plant
(isa Plant BiologicalKingdom)
(genls Plant VegetableMatter)
(genls Plant Organism-Whole)
(genls Plant PlantBLO)
(comment Plant "Plant is the collection of all plants; it is a member of the BiologicalKingdom and contains the primary subjects of Biology.  Plants are typically stationary, living, whole organisms; the cells of plants generally lack cholesterol and have cell walls that include substances of Cellulose.  Most, though not all, plants are capable of making sugars by Photosynthesis processes and have green parts.  Some example subsets of Plant are the collections RoseBush, SpruceTree, and Moss.")
(synonymousExternalConcept Plant SENSUS-Information1997 "PLANT")

;;; Plant-NonWoody
(isa Plant-NonWoody ExistingObjectType)
(genls Plant-NonWoody Plant)
(comment Plant-NonWoody "The collection of non-woody, herbaceous Plants.  Those Plants such as grasses, herbs, wildflowers, etc. which are fairly low-growing, often annual, and don't grow woody stems.  Excludes large, hard bamboos, and Balsa.")

;;; Plant-Woody
(isa Plant-Woody ExistingObjectType)
(genls Plant-Woody Plant)
(genls Plant-Woody TerrestrialOrganism)
(comment Plant-Woody "The collection of Plants that have woody or hard trunks, stems or branches (and usually roots). includes large, hard bamboos, and balsa.")

;;; PlantBLO
(isa PlantBLO ExistingObjectType)
(genls PlantBLO BiologicalLivingObject)
(comment PlantBLO "A subset of BiologicalLivingObject.  PlantBLO includes the elements of Plant and of PlantPart.")

;;; PlantPart
(isa PlantPart ExistingObjectType)
(genls PlantPart PlantBLO)
(genls PlantPart OrganismPart)
(comment PlantPart "The collection of all physical parts of Plants of all kinds.
In the traditional view, plant organs are of four types: leaves, stems, roots and flowers.  It seems useful to have a category for smaller plant parts which display a similar level of organization (they have vascular tissue, ground tissue, and an epidermis) but have not been included in the traditional view.")

;;; PlantPhysiologicalAttribute
(isa PlantPhysiologicalAttribute AttributeType)
(genls PlantPhysiologicalAttribute PhysiologicalAttribute)
(comment PlantPhysiologicalAttribute "The collection of attributes referring to the physiological properties of plants.  At the very least, these include seasonal stages, physical properties, and plant health.  These attributes apply to entire Plants rather than just to certain parts of them.")

;;; PlantProduct
(isa PlantProduct ExistingStuffType)
(isa PlantProduct ProductType)
(genls PlantProduct VegetableMatter)
(comment PlantProduct "The collection of Products that are plants or plant parts (individually or in bulk), or substances derived from plants, which are produced by people or countries and made available for use, sale or exchange.")

;;; Plastic
(isa Plastic ProductType)
(isa Plastic TangibleStuffCompositionType)
(genls Plastic ArtificialMaterial)
(comment Plastic "A collection of tangible things.  Each element of Plastic is a piece of some type of plastic.  This collection includes plastics of all kinds: artifical, mostly polymeric, inedible, organic moldable hydrocarbons.  Some common types are rayon, nylon, polyethylene, etc.")

;;; PlumbingFixture
(isa PlumbingFixture ProductType)
(isa PlumbingFixture ExistingObjectType)
(genls PlumbingFixture PhysicalDevice)
(genls PlumbingFixture PartOfBuilding)
(comment PlumbingFixture "A collection of physical devices.  An instance of PlumbingFixture is any object which is -- or was or will be or could be -- part of some plumbing system.  Types of PlumbingFixture include pipes, sinks, and toilets, as well as faucets and drain plugs.  It must be a functional part (so sewage doesn't count) and a significant part (so a label on a pipe doesn't count) and a specialized part (so an individual screw doesn't count, nor does an individual iron atom that's part of a faucet) and a relatively long-lived and localized part (so the water flowing through a pipe doesn't count.)")

;;; PlusFn
(isa PlusFn EvaluatableFunction)
(isa PlusFn NonPredicateFunction)
(isa PlusFn VariableArityRelation)
(isa PlusFn CommutativeRelation)
(isa PlusFn FunctionFromQuantitiesToQuantities)
(resultIsa PlusFn ScalarInterval)
(argsIsa PlusFn ScalarInterval)
(comment PlusFn "PlusFn is Cyc's addition operator; it is a variable-arity mathematical function.  PlusFn takes a variable number of quantities as arguments, and it yields a new quantity which is the result of adding those arguments together.  All of the arguments to PlusFn must be elements of ScalarInterval, as is its result.  Examples: (PlusFn 2 3 4) returns 9; (PlusFn (Meter 1.5) (Meter 0.7)) returns (Meter 2.2).  See also VariableArityRelation.")

;;; PlusInfinity
(isa PlusInfinity RealNumber)
(isa PlusInfinity NonNegativeScalarInterval)
(isa PlusInfinity NonNegativeNumber)
(comment PlusInfinity "PlusInfinity represents an infinitely large positive number (roughly akin to aleph-null).")

;;; PointFn
(isa PointFn NonPredicateFunction)
(resultIsa PointFn SetOrCollection)
(arg1Isa PointFn Thing)
(comment PointFn "For each PathSystem SYS, (PointFn SYS) denotes the set of all points in SYS (see PathSystem).  Note that the function PointFn and the predicate pointInSystem are interdefinable.  We normally use PointFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can replace each (pointInSystem X SYS) by (elementOf X (PointFn SYS)).")

;;; PointyEnded
(isa PointyEnded PhysicalStructuralAttribute)
(comment PointyEnded "Includes anything which tapers to a pointy or sharp end--pens, pencils, needles, pins, nails, and wood-screws, but not wires (no taper).  Most knives would be included, but only because they have pointy ends.  A knife with a rounded ended and a sharp blade would not be included.")

;;; PolarAttributeType
(isa PolarAttributeType Collection)
(genls PolarAttributeType PrimitiveAttributeType)
(comment PolarAttributeType "A collection of collections, a subset of PrimitiveAttributeType.
Each element of PolarAttributeType is a collection of 
attributes which can be possessed either to a positive or
to a negative degree. Thus, ElectricalCharge would be an
instance of this collection, whereas Wetness and BedSize
would not be.")
(synonymousExternalConcept PolarAttributeType SENSUS-Information1997 "POLAR-QUALITY")

;;; PolishingSomething
(isa PolishingSomething TemporalStuffType)
(isa PolishingSomething DefaultDisjointScriptType)
(genls PolishingSomething PhysicalContactSituation)
(genls PolishingSomething VoluntaryBodyMovement)
(genls PolishingSomething Cleaning)
(genls PolishingSomething TransformationEvent)
(comment PolishingSomething "The subset of Cleaning processes in which something is polished by rubbing it.  For example, consider the event in which Aladdin polished his magic lamp for the first time.  Polishing can be done to leather, wood, metal, etc.  A PolishingSomething may be performed either by a person or by a machine.")

;;; PoliticalDispute
(isa PoliticalDispute TemporalObjectType)
(isa PoliticalDispute DefaultDisjointScriptType)
(genls PoliticalDispute DisputeEvent)
(comment PoliticalDispute "The class of all political disputes, including serious political controversies and skirmishes between individuals, organizations or countries.   Such a dispute involves some question of public policy, as opposed to purely personal or commercial issiues.")

;;; PoliticalOrganization
(isa PoliticalOrganization ExistingObjectType)
(genls PoliticalOrganization Organization)
(comment PoliticalOrganization "A collection of organizations.  An element of PoliticalOrganization is an organization whose members share some common political, social, or economic values and goals, and the MainFunction of their organization is to achieve those goals by influencing governmental powers or by helping persons who favor their views and interests to win elections or otherwise obtain governmental power.  The collection PoliticalOrganization includes instances of PoliticalParty and also of PoliticalInterestGroup.
Note that governmental bodies (such as a CityCouncil) are not considered PoliticalOrganizations.  Although such governmental bodies often act in political arenas, that is not their primary function.")

;;; PoliticalParty
(isa PoliticalParty ExistingObjectType)
(genls PoliticalParty Organization)
(genls PoliticalParty PoliticalOrganization)
(comment PoliticalParty "A collection of political organizations.  An element of PoliticalParty is an organization that primarily seeks to elect candidates to public office or have members continue holding public office, and which are identified as party affiliations by persons holding or seeking public office.")

;;; Politician
(isa Politician PersonByActivityType)
(genls Politician Person)
(genls Politician PublicSectorEmployee)
(comment Politician "A collection of persons.  Each element of Politician is a person who is involved in politics.  Subsets of Politician include HeadOfState, PresidentialCandidate, and HeadOfPoliticalParty.")

;;; Porosity
(isa Porosity PrimitiveAttributeType)
(genls Porosity PhysicalAttribute)
(genls Porosity ScalarInterval)
(comment Porosity "A collection of attributes; a subset of PhysicalAttribute.  Each element of Porosity represents a specific porosity of some physical object.  Different porosities may be represented using GenericValueFunctions.  Porosities of objects are indicated with the predicate porosityOfObject.")

;;; PortableObject
(isa PortableObject ExistingObjectType)
(genls PortableObject PartiallyTangible)
(comment PortableObject "A collection of objects.  An 
instance of PortableObject is something that is not 
`fastened down' and which is light enough for an average human 
(or more to the point: for its average intended user) to move 
it easily.  For many PortableObjects, portability is 
important for them to fulfill their primary functions; 
for example, an article of clothing (a SomethingToWear), 
a hand-guided tool (a #HandTool), a coin or dollar bill (an instance of Currency), a flashlight (a Flashlight), etc. would be pretty useless if they weren't portable.  In other cases, making a device portable, or making a portable version of a device, simply provides a convenience, as with the subsets PortableTelevision and PortableStereoSystem.  Note that Tool is not a subset of PortableObject, since many tools are heavy and/or stationary.  A borderline example would be a heart/lung machine; although the beneficiary of its primary function is in no position to move it around, the physicians and nurses who also are `using' it can and do exactly that.  The same goes for a playpen; the kids in it had better NOT be able to move it around, but the adults who set it up and put them there can and do move it.   A borderline non-example would be a car; even though its user can make it move around, that is more a controlling action than a transporting action --- i.e., the car is doing the transporting in that case, not the driver.  A borderline example is a cat; even though it moves under its own power, it is light enough for its owner to pick it up and move around.  A borderline example is a bed or a dresser; though too heavy to lift, its owners can generally move it around (by sliding, disassembling and reassembling, etc.)")

;;; Portal
(isa Portal RegionType)
(genls Portal Cavity)
(comment Portal "The collection of all openings, as in a surface, through a tube, etc., with or without a covering.  This includes doors, mouths, doughnut-holes, etc.")

;;; PortalCovering
(isa PortalCovering ExistingObjectType)
(isa PortalCovering ProductType)
(genls PortalCovering SolidTangibleThing)
(genls PortalCovering SheetOfSomeStuff)
(comment PortalCovering "A collection of tangible objects.  Each element of PortalCovering is something that covers a portal (e.g., window, door, hatch).  Portal coverings may be either flexible or rigid; they may be either fixed in place or removable.  Examples include windows (in buildings or automobiles), doors, shutters, screens, draperies, window blinds, convertible tops, lids, corks.")

;;; Portugal
(isa Portugal IndependentCountry)
(isa Portugal Entity)
(comment Portugal "The nation of Portugal as it has existed throughout time; includes both its physical and its political aspects.")

;;; PositionType
(isa PositionType Collection)
(genls PositionType ExistingObjectType)
(comment PositionType "A collection of collections.  Each element of PositionType is a collection which represents a type of position filled by people within an organization.  Examples of PositionType: Mayor, Admiral, CampaignManager, Director-Movie, Chairman, Resident-Medical.")

;;; PositiveInteger
(isa PositiveInteger Collection)
(isa PositiveInteger MeasurableAttributeType)
(genls PositiveInteger NonNegativeInteger)
(genls PositiveInteger PositiveNumber)
(comment PositiveInteger "PositiveInteger is the subset of Integer that excludes the negative integers and zero.  Each element of PositiveInteger is a whole number greater than zero; thus, it includes 5, but not -5 or 0.")

;;; PositiveNumber
(isa PositiveNumber MeasurableAttributeType)
(genls PositiveNumber NonNegativeNumber)
(comment PositiveNumber "PositiveNumber is a subset of RealNumber.  Each instance of PositiveNumber is a RealNumber that is greaterThan zero; thus, it includes 42 and 0.17 but not 0 or -5.")

;;; PostalCode
(isa PostalCode IDStringType)
(genls PostalCode IDString)
(comment PostalCode "A collection of character strings.  Each element of PostalCode is a string used by a postal service to designate a particular geographic area.  For example, the code used by the USPostalService for central downtown Austin, TX, is `78701'.")

;;; PosteriorRegionFn
(isa PosteriorRegionFn ReifiableFunction)
(isa PosteriorRegionFn IndividualDenotingFunction)
(resultIsa PosteriorRegionFn AnimalBodyRegion)
(arg1Isa PosteriorRegionFn AnimalBodyRegion)
(comment PosteriorRegionFn "The function (PosteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the back or rear half or section, or posterior main portion, of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic front/back orientation, or is a (non-backward-facing) part of a larger region or object that has a front/back orientation.")

;;; Posture
(isa Posture SiblingDisjointAttributeType)
(isa Posture UnorderedAttributeType)
(genls Posture BodyPartPosition)
(genls Posture AnimalPhysiologicalAttribute)
(comment Posture "The collection of postures, which are types of attributes that describe bodily configurations and/or orientations of Animals.  Some Postures are: UprightPosture, KneelingPosture, LyingOnBackPosture, PronePosture, LeaningOnKnucklesPosture, ForwardFlyingPosture.")

;;; Pound-UnitOfMass
(isa Pound-UnitOfMass FPSUnitOfMeasure)
(isa Pound-UnitOfMass UnitOfMass)
(isa Pound-UnitOfMass UnitOfMeasureNoPrefix)
(resultIsa Pound-UnitOfMass Mass)
(resultIsa Pound-UnitOfMass ScalarInterval)
(argsIsa Pound-UnitOfMass CycSystemRealNumber)
(comment Pound-UnitOfMass "The measurement function used in Cyc to represent the basic unit of mass in the British (FPS) system.  Technically, the FPS pound is exclusively a unit of force, analogous to the Newton in the MKS system.  The usage here is occasioned primarily by the fact that interconversions between pounds and kilograms are often used in the terrestrial frame of reference.  In fact, the FPS unit of mass, analogous to the Kilogram in the MKS system, is called the 'slug'.  See also FPSUnitOfMeasure, UnitOfMeasure, Pound-UnitOfForce.")

;;; Pourable
(isa Pourable PhysicalStructuralAttribute)
(comment Pourable "A physical attribute.  Pourable is the structural attribute of a tangible thing that is capable of flowing.  Pourable things don't have intrinsic shape, but instead take the shape of their containers.  When acted on by a force, a Pourable thing changes shape at a rate proportional to the force.  (In addition, Pourable things may be easily separated into multiple pieces; however, such a separation is not a breaking or shearing.)  Semisolid mobs of particles, such as portions of sand or snow, are Pourable; but a gelatin-like semisolid is not.  See also SemiSolidTangibleThing.")

;;; Powdery
(isa Powdery PhysicalStructuralAttribute)
(genlAttributes Powdery Granular)
(genlAttributes Powdery Pourable)
(comment Powdery "A physical attribute.  Powdery is the PhysicalStructuralAttribute which describes a solid that has the form of a powder.  Powdery stuff is Pourable and composed of multiple granules of solids.")

;;; PoweredDevice
(isa PoweredDevice ExistingObjectType)
(genls PoweredDevice PhysicalDevice)
(comment PoweredDevice "A collection of physical devices.  An instance of PoweredDevice is any device which requires some power input in order to perform its function.  The power supplied may be muscle power, kinetic energy, fuel, electricity, etc.
This is much more general than ElectricalDevice (qv), which is one of its subsets. PoweredDevice and NonPoweredDevice partition PhysicalDevice.")

;;; PrecipitationCloud
(isa PrecipitationCloud ExistingObjectType)
(genls PrecipitationCloud CloudInSky)
(comment PrecipitationCloud "The collection of clouds that emit PrecipitationParticles in instances of PrecipitationProcess.")

;;; PrecipitationParticle
(isa PrecipitationParticle ExistingObjectType)
(genls PrecipitationParticle Particle)
(genls PrecipitationParticle Water)
(comment PrecipitationParticle "The collection of particles of liquid or solid water emitted by clouds in instances of PrecipitationProcess.")

;;; PrecipitationProcess
(isa PrecipitationProcess TemporalStuffType)
(genls PrecipitationProcess ImmediateWeatherProcess)
(genls PrecipitationProcess Translation-SinglePath)
(genls PrecipitationProcess Translation-Complete)
(genls PrecipitationProcess Movement-TranslationProcess)
(genls PrecipitationProcess EmittingAnObject)
(genls PrecipitationProcess CompositePhysicalAndMentalEvent)
(comment PrecipitationProcess "A collection of physical processes; a subset of WeatherEvent.  Elements of PrecipitationProcess are meteorological processes in which atmospheric clouds precipitate rain, snow, or other forms of H2O precipitation.")

;;; Predicate
(isa Predicate ObjectType)
(isa Predicate Collection)
(genls Predicate FunctionTheMathematicalType)
(comment Predicate "The set of all Cyc predicates.  Each element of Predicate is a truth-functional relationship in Cyc which takes some number of arguments; each of those arguments must be of some particular type.  For example, the predicate genls, which represents the subset/superset relation between collections, takes two arguments; each argument must be an element of Collection.  The numbers and types of arguments to particular predicates are specified by explicit assertions using arity, arg1Isa, arg2Isa, etc., arg1Genl, arg2Genl, etc.  Our example genls has arity 2, and both its arg1Isa and its arg2Isa have the value Collection.  







Informally, you can think of elements of Predicate as functions that always return either true or false.  More formally, when an element of Predicate is applied to the legal number and type of arguments, an expression is formed which is a well-formed formula (wff) in CycL.  Such expressions are called `atomic formulas' if they contain variables, and `gafs' (short for `ground atomic formulas') if they contain no variables.  







Note that in Cyc, relationships involving opaque contexts (such as modal contexts, propositional attitudes) are NOT included in Predicate; see ModalRelationship instead.  Quantifiers and logical operators are also excluded from Predicate; see Quantifier, LogicalConnective.











Currently (July 1996), the KB includes predicates of 1, 2, 3, 4, and 5 arguments; i.e., arity may have a value between 1 and 5, inclusive.  The KB also includes some predicates of variable arity (see VariableArityRelation).  Unary predicates, which take just one single argument (e.g., `-- is a person' or `-- is white', are usually represented in Cyc by elements of Collection or AttributeValue, rather than of Predicate; but see also UnaryPredicate.  Naming strings for elements of Predicate always begin with a lowercase letter.")
(synonymousExternalConcept Predicate SENSUS-Information1997 "RELATIONALPROCESS")

;;; PredicateCategory
(isa PredicateCategory Collection)
(genls PredicateCategory RelationType)
(comment PredicateCategory "A collection of collections; a subset of RelationType.  Each element of PredicateCategory is a collection of Cyc Predicates.  Examples: TemporalPartSlot, IntervalBasedQuantitySlot, FunctionalSlot, InterActorSlot, TransitiveBinaryPredicate, PropositionalAttitudeSlot.  See also the comment on Predicate.")

;;; PregnancyEndingEvent
(isa PregnancyEndingEvent ScriptType)
(isa PregnancyEndingEvent TemporalObjectType)
(genls PregnancyEndingEvent IntrinsicStateChangeEvent)
(genls PregnancyEndingEvent BiologicalEvent)
(comment PregnancyEndingEvent "The collection of events which terminate a pregnancy, including birth, abortion, and miscarriage.")

;;; PreparationAttribute
(isa PreparationAttribute UnorderedAttributeType)
(genls PreparationAttribute AttributeValue)
(comment PreparationAttribute "A collection of attributes.  Each element of PreparationAttribute is a characteristic of a piece of material (e.g., food) indicating (1) a type of physical preparation which that stuff has already undergone, and (2) something about its current, resulting condition.  Examples of PreparationAttribute which are applicable to food include: Baked, Fried, Toasted, Fermented, Grilled, Frozen, Dried, Raw.")

;;; PreparingFoodOrDrink
(isa PreparingFoodOrDrink TemporalObjectType)
(isa PreparingFoodOrDrink DefaultDisjointScriptType)
(genls PreparingFoodOrDrink IntrinsicStateChangeEvent)
(genls PreparingFoodOrDrink HumanActivity)
(genls PreparingFoodOrDrink HandlingAnObject)
(comment PreparingFoodOrDrink "A collection of events.  Each element of PreparingFoodOrDrink is an event in which a single instance of FoodAndDrink is made ready to eat.  Preparation may begin `from scratch', with raw ingredients, or may use semi-prepared or `convenience' products (such as cake mixes, margarita mixes, or frozen foods).  Typical subEvents in elements of PreparingFoodOrDrink include activities commonly performed by cooks and/or bartenders, including instances of ChoppingSomething, CookingFood, BakingFood, MixingAlcoholicDrinks, etc.  Each PreparingFoodOrDrink event ends when the item prepared is ready to eat.  This collection is NOT to include activities that a diner does with food at table (such as peeling, unwrapping, cutting into bitesized pieces), nor activities that a farmer does before food reaches market or kitchen (e.g., planting, harvesting).")

;;; Preposition
(isa Preposition LinguisticObjectType)
(genls Preposition SpeechPart)
(comment Preposition "The collection of all prepositions. Prepositions are function words which usually take a noun phrase complement. They usually express temporal, spatial, or other relations. Example: `at'.")

;;; Prescriber
(isa Prescriber OccupationType)
(genls Prescriber MedicalCareProfessional)
(comment Prescriber "People who can prescribe medications.  Doctors are prescribers, as well as osteopaths and nurse-practitioners. ")

;;; PrescriptionDrug
(isa PrescriptionDrug ExistingStuffType)
(isa PrescriptionDrug ProductType)
(genls PrescriptionDrug DrugProduct)
(comment PrescriptionDrug "The collection of drugs that require a doctor's permission before obtaining or consuming them.")

;;; Preservative-Food
(isa Preservative-Food ExistingStuffType)
(isa Preservative-Food ProductType)
(genls Preservative-Food FoodIngredientOnly)
(comment Preservative-Food "Preservatives which are added to food to prevent spoilage.")

;;; PreservingFood
(isa PreservingFood TemporalObjectType)
(isa PreservingFood DefaultDisjointScriptType)
(genls PreservingFood IntrinsicStateChangeEvent)
(genls PreservingFood HandlingAnObject)
(genls PreservingFood HumanActivity)
(comment PreservingFood "A collection of events.  Each instance of PreservingFood is an
event in which a single item of food or drink (a member of the
collection FoodAndDrink) is acted on to prevent its Spoiling.")

;;; President-HeadOfGovernmentOrHeadOfState
(isa President-HeadOfGovernmentOrHeadOfState OccupationType)
(genls President-HeadOfGovernmentOrHeadOfState HeadOfState)
(comment President-HeadOfGovernmentOrHeadOfState "A collection of persons.  Each element of President-HeadOfGovernmentOrHeadOfState is a person who holds the title of president of some element of Country, whether that title belongs to a position which is HeadOfState or HeadOfGovernment (or both). Examples: Boris Yeltsin, BillClinton, Jiang Zemin, Lee Dung-Hui.")

;;; Pressure
(isa Pressure DerivedNumericAttributeType)
(genls Pressure PhysicalAttribute)
(genls Pressure ScalarInterval)
(comment Pressure "A collection of attributes; a subset of PhysicalAttribute.  Each element of Pressure represents a specific measure of a force exerted on some surface.  Degrees of Pressure may be represented using GenericValueFunctions or with qualitative collections (e.g., BruisingPressure, FracturingPressure, ImperceptiblePressure).   Indicate the Pressure of a particular fluid with the predicate fluidPressure; indicate atmospheric pressure with barometricPressure.")

;;; Pride
(isa Pride FeelingAttributeType)
(genls Pride SelfConfidence)
(genls Pride Approval)
(comment Pride "Self-esteem based upon one's actions, possessions, or relationships.  Vanity is not necessarily entailed by Pride.  This is a collection; see Happiness.  More specialized FeelingAttributeTypes include PrideOfMembership, PrideOfAccomplishment, Vanity, Patriotism, etc. ")

;;; PrimaryRoleUseRights
(isa PrimaryRoleUseRights UserRightsAttribute)
(comment PrimaryRoleUseRights "An attribute of an object with respect to an Agent, meaning that the agent who holds this kind of UserRightsAttribute to an object is allowed to use that object in events where it performs its primaryFunction.  A rental agreement typically gives the renter this kind of right to use of an object (such as a car, residence, videotape, etc.)  Just because you rent a car, though, does not give you the right to sell it, burn it up, or repaint it.")

;;; PrimaryUserRights
(isa PrimaryUserRights UserRightsAttribute)
(comment PrimaryUserRights "An attribute of an object with respect to an Agent, meaning that the agent who holds this kind of UserRightsAttribute to an object has priority to use that object, over other agents who can also claim a right to use it.  E.g., parents have PrimaryUserRights to the family car.  Note that the attribute PrimaryUserRights makes sense only for objects to which GroupUserRightsAttributes apply, since there must be multiple authorized users in order for priority of claims to occur.")

;;; Primate
(isa Primate BiologicalOrder)
(genls Primate Mammal)
(genls Primate TerrestrialOrganism)
(comment Primate "The collection of all primates.  The collection Primate includes the subsets Person, Ape, Monkey, etc.  Primate is an instance of BiologicalOrder in the BiologicalClass Mammal.")

;;; PrimeMinister-HeadOfGovernment
(isa PrimeMinister-HeadOfGovernment OccupationType)
(genls PrimeMinister-HeadOfGovernment HeadOfGovernment)
(comment PrimeMinister-HeadOfGovernment "A collection of persons.  Each element of PrimeMinister-HeadOfGovernment is a person who holds the political office of Prime Minister in some element of Country.  Examples: John Major, Benjamin Netanyahu, Lien Chen, AndreasPapandreou.")

;;; PrimitiveAttributeType
(isa PrimitiveAttributeType Collection)
(genls PrimitiveAttributeType AttributeType)
(comment PrimitiveAttributeType "A collection of collections.  Each element of PrimitiveAttributeType is a collection of `primitive' attributes such as mass, distance, charge, and others which have a single (total) ordering on (usually) a real line.  Note: PrimitiveAttributeType excludes the elements of UnorderedAttributeType (e.g., gender).  Cf. CompositeAttributeType.")
(overlappingExternalConcept PrimitiveAttributeType SENSUS-Information1997 "SCALABLE-QUALITY")

;;; PrimitiveTemporalRelation
(isa PrimitiveTemporalRelation PredicateCategory)
(genls PrimitiveTemporalRelation TemporalRelation)
(comment PrimitiveTemporalRelation "PrimitiveTemporalRelations specify temporal relations between TimePoints.  The only two binary predicates which are elements of this set are after and simultaneousWith.
Note: The predicate `before' is unnecessary since (before x y) would be the same thing as (after y x))")

;;; PrivateSectorEmployee
(isa PrivateSectorEmployee OccupationType)
(genls PrivateSectorEmployee Professional)
(comment PrivateSectorEmployee "A collection of persons; a subset of Professional.  Each element of PrivateSectorEmployee is a worker who is not paid a salary or wage by a governmental organization.  For example, employees of publicly traded corporations are elements of PrivateSectorEmployee.  Note: Private sector employees may contract with a government organization as consultants, however.")

;;; PrivatelyHeldCorporation
(isa PrivatelyHeldCorporation ExistingObjectType)
(genls PrivatelyHeldCorporation LegalCorporation)
(genls PrivatelyHeldCorporation Business)
(comment PrivatelyHeldCorporation "An incorporated business whose stock, if it exists, is not


traded publicly on some stock exchange. Businesses that are traded publicly are instances of PubliclyHeldCorporation.")

;;; ProblemSolvingCntxt
(isa ProblemSolvingCntxt ObjectType)
(isa ProblemSolvingCntxt MicrotheoryType)
(isa ProblemSolvingCntxt Collection)
(genls ProblemSolvingCntxt Microtheory)
(comment ProblemSolvingCntxt "The collection of microtheories that are used in applications as a means to reason about particular situations.  Every original query takes place in some ProblemSolvingCntxt (as opposed to a GeneralMicrotheory) which has access --- via the genlMt relation --- to other relevant microtheories, all the way up to the most general one, the BaseKB.  A ProblemSolvingCntxt is ususally created temporarily for the problem at hand, and is discarded after the problem is dealt with (unlike a GeneralMicrotheory, which is created for lasting use).")

;;; ProcessPredicate
(isa ProcessPredicate PredicateCategory)
(genls ProcessPredicate ExtensionalRepresentationPredicate)
(comment ProcessPredicate "A collection of predicates.  Each element of ProcessPredicate is a predicate used in assertions that describe processes.  For example, resourcesAvailable, amountOfEnergyUsed, signalState, toPossessor, primaryActivityType, exports, monetaryValue.")

;;; Product
(isa Product ProductType)
(genls Product Individual)
(comment Product "A collection of things.  Elements of Product are individual goods, services, investments, etc.--basically, anything which is offered (or may be exchanged) for money or trade.  Examples: a Lexus sedan, a package of McDonald's french fries, a massage, a bouquet of flowers, a share in a money market fund, the services of a real estate agent, a research satellite.")

;;; ProductStandard
(isa ProductStandard ObjectType)
(genls ProductStandard PropositionalInformationThing)
(genls ProductStandard IntangibleExistingThing)
(comment ProductStandard "A collection of specifications.  Each element of ProductStandard is a precise description applied to the instances of a particular ProductType.  Manufacturers of that product type agree explicitly or in practice, or they may obey a government requirement, to make product designs following the specifications stated in the standard, so that products within the type will all have certain features in common.  For example, telephones and television sets fulfil certain product standards.  The resultant interchangeability allows compatibility with other devices and products, with public utilities, commercial trading expectations, governement purchasing requirements, etc.")

;;; ProductType
(isa ProductType Collection)
(genls ProductType Collection)
(comment ProductType "A collection of collections.  Each element of ProductType is a collection of things--i.e., some kind of substances, objects, actions--at least some of which are produced and/or performed and sold as products.  Not all elements in such a ProductType collection must be products, but some are.  Examples of ProductType: DairyProduct, HardDiskDrive, PlasticWrap, etc.  Note that ProductType is not a subset of either ObjectType or StuffType, because there are products of both kinds (e.g., Rice-Foodstuff is a ProductType but not an ObjectType).  *Many* of the collections which are elements of ProductType will, however, be an isa either ObjectType or StuffType.")

;;; Professional
(isa Professional ExistingObjectType)
(genls Professional Person)
(comment Professional "A set of agents.  Elements of Professional are agents who spend a significant part of their waking hours doing activities that are characteristic of some occupation, skilled or unskilled.  However, elements of Professional need not be working the entire duration of when they are a professional, such as a Professor on summer break, or someone who is temporarily unemployed.  The elements of Professional are persons, most of whom belong to at least one such collection during some portion of their lives.  Typically their actions are performed for pay, but not always (e.g., Artist-Visual).  What are colloquially considered professions or occupations are subsets of Professional; for example, LumberJack, Scientist, Lifeguard, StockBroker, Technician, CraftWorker, Housekeeper, SportsCoach, Athlete, LegalProfessional, Publicist, CrewMemberOnShip, SelfEmployedWorker (and many more).  Additionally, other subsets of Professional classify workers according to other features of their working life besides skills; e.g., SelfEmployedWorker, DeskWorker.   Subsets may be general (e.g., DeskWorker, Doctor-Medical) or specialized (e.g., ContinuingEdProgramCoordinator, PediatricNeuroSurgeon).  Elements of Professional are people: MaryShepherd (HumanCyclist), MichaelJordan (Athlete), AlfredNorthWhitehead (Philosopher), Michelangelo (Sculptor, PainterFineArtist), BillClinton (UnitedStatesPresident), etc.")

;;; ProfessionalOffice
(isa ProfessionalOffice ExistingObjectType)
(genls ProfessionalOffice LocalCustomerContactPoint)
(comment ProfessionalOffice "A collection of organizations.  Every element of ProfessionalOffice is a SingleSiteOrganization comprising one or more professionals (physicians, dentists, lawyers, accountants, etc.) and their support staff.")

;;; ProkaryoticCell
(isa ProkaryoticCell ExistingObjectType)
(genls ProkaryoticCell Cell)
(genls ProkaryoticCell SingleCellOrganism)
(comment ProkaryoticCell "The subset of SingleCellOrganism whose members are single-celled but lack nuclei and mitochondria.  The members of the MoneraKingdom all belong to the collection ProkaryoticCell, which includes the subsets Bacterium and BlueGreenAlgae.  ProkaryoticCell excludes viruses, protista, prions, and rickettsia.  Unlike the elements of EukaryoticCell, prokaryotic cells are never assembled into multicellular organisms.")

;;; Promise
(isa Promise ObjectType)
(genls Promise IllocutionaryForce)
(comment Promise "A collection of illocutionary forces.  Each instance of Promise consists of a piece of information contained (perhaps implicitly) in a communication, and which expresses the speaker's intention of assuring the listener that s/he, the speaker, will in the future perform the action described in that utterance and/or bring about the situation described therein.  A promise, unlike an offer, is not conditional on the acceptance of the listener.   `Speaker' and `listener' are broadly interpreted to mean, respectively, any senderOfInfo and recipientOfInfo.  See also IllocutionaryForce, MakingAPromise.")

;;; Pronoun
(isa Pronoun LinguisticObjectType)
(genls Pronoun SpeechPart)
(comment Pronoun "The collection of all pronouns. Pronouns are indexicals which can replace nouns. Example: `she'.")

;;; ProperNameString
(isa ProperNameString IDStringType)
(genls ProperNameString IDString)
(comment ProperNameString "The collection of all proper names, considered as character strings.  This includes, as elements, city names such as ``Dallas'', people's names such as ``Douglas'', company names such as ``Apple'', conference names, book titles, etc.")

;;; ProperNoun
(isa ProperNoun LinguisticObjectType)
(genls ProperNoun SpeechPart)
(comment ProperNoun "The collection of all proper nouns. Proper nouns are usually capitalized, and they usually denote some particular person, place, or thing.  Many proper nouns cannot be preceded by a determiner, and many have no plural form.  Example: `Dallas'.")

;;; Proposal
(isa Proposal MicrotheoryType)
(genls Proposal Agreement)
(comment Proposal "A collection of agreements.  Each element of Proposal is an agreement to which only one party (namely, the proposer) has agreed.  Proposals are usually part of some Negotiating process.  If a proposal is accepted by all parties, they all then become agreeingAgents in an agreement based on that proposal.  For example, an instance of BidOnSale states the terms at which a potential seller will supply goods to the agent who requested bids.  If a particular seller's bid is accepted, then some instance of SalesContract is drawn up to which both parties agree; it includes the terms of the bid, along with any additions such as information about how or when the buyer will pay.")

;;; Proposition
(isa Proposition ObjectType)
(genls Proposition AbstractInformation)
(genls Proposition ComputationalObject)
(comment Proposition "A collection of computational objects.  Each element of Proposition is an abstract propositional claim that has some truth value in some world.  An abstract proposition is assumed to be representable by a statement in some logical language, and usually in one or more natural languages.  Most formal languages (such as predicate calculus) and natural languages (such as English) are capable of composing propositions from fragments that are other propositions.  Elements of the subset CycFormula (q.v.) are statements in such a language.")

;;; PropositionalAttitudeSlot
(isa PropositionalAttitudeSlot PredicateCategory)
(genls PropositionalAttitudeSlot ModalRelationship)
(genls PropositionalAttitudeSlot IntangibleObjectPredicate)
(genls PropositionalAttitudeSlot BinaryPredicate)
(comment PropositionalAttitudeSlot "The collection of BinaryPredicates in Cyc which represent the various propositional attitudes.  Examples include beliefs, desires, biases, knows, opinions, expects, intends, goals, notices, etc.")

;;; PropositionalInformationThing
(isa PropositionalInformationThing MicrotheoryType)
(isa PropositionalInformationThing ObjectType)
(genls PropositionalInformationThing MentalObject)
(genls PropositionalInformationThing Microtheory)
(comment PropositionalInformationThing "A collection of intangible objects.  Each element of PropositionalInformationThing is a chunk of abstract propositional information (`a PIT' abbreviates `a propositional information thing').  Such a chunk of information may consist of one or more propositions.  The propositional content of a PIT is not intrinsically encoded in any particular language, but it may be representable in many languages.  PITs are used to represent the meaningful contents of information bearing things.  Physical things--objects or events--which are elements of InformationBearingThing are linked to the abstract PIT contents they embody, by using the predicate containsInformation (q.v.).  An element of PropositionalInformationThing may be something as simple as the information content of a command to stop one's vehicle, expressed verbally or symbolically in a road sign or in a traffic officer's gesture; or a PIT may be something as complex as the entire contemporary knowledge of Mathematics, which is embodied in many and various sources.  More examples: the story embodied in a showing of the movie `Citizen Kane', the information in my resume, the content of a conversation in American Sign Language, and the information contained in the CycKB, may all be represented as PITs.
Note that the collection PropositionalInformationThing is a subset of Microtheory, which makes the Cyc inference mechanisms for handling microtheories available to manage the propositional content of information bearing things.  See also Microtheory and ist-Information.")

;;; ProtectiveAttire
(isa ProtectiveAttire ProductType)
(isa ProtectiveAttire ExistingObjectType)
(genls ProtectiveAttire SomethingToWear)
(genls ProtectiveAttire SheetOfSomeStuff)
(comment ProtectiveAttire "A collection of objects.  Each element of ProtectiveAttire is something to wear that is designed for protection from the elements or from injury.  Some subsets of ProtectiveAttire include the collections SnowGoggles, SurgicalGlove, WeldingMask, Helmet, BoxingHeadGear, FaceMaskForCatcher, FirefightersCoat, RainGear.")

;;; ProtheticSlot
(isa ProtheticSlot PredicateCategory)
(genls ProtheticSlot BinaryPredicate)
(comment ProtheticSlot "A collection of predicates.  Each element of ProtheticSlot is a binary predicate whose range of values, for any particular element in its domain, must form at least a partial ordering.  Examples: arity, latitude, pathGrade, faxNumberPrefix, streetOfAddress.")

;;; ProtistaKingdom
(isa ProtistaKingdom BiologicalKingdom)
(comment ProtistaKingdom "A BiologicalKingdom proposed to include primarily single-celled, eukaryotic organisms such as Algae, $#Protozoans, and SlimeMolds.")

;;; Proton
(isa Proton ExistingObjectType)
(genls Proton Nucleon)
(comment Proton "A collection of objects; a subset of Nucleon.  Each instance of Proton is a nucleon which has an ElectricalCharge of +1.")

;;; Protozoan
(isa Protozoan BiologicalSubkingdom)
(genls Protozoan SingleCellOrganism)
(genls Protozoan EukaryoticCell)
(comment Protozoan "The collection of protozoa; a subset of SingleCellOrganism.  Elements of Protozoan are also elements of EukaryoticCell.  Subsets include Amoeba and many others.  Protozoa lack cell walls made of cellulose.  Many protozoa are motile, using pseudopoda, cilia, or flagella to move.  Some cause diseases in larger organisms.  The class Protozoan is an instance of BiologicalSubkingdom in many classification systems, sometimes placed under the ProtistaKingdom.")

;;; PsychologicalAilment
(isa PsychologicalAilment PhysiologicalConditionType)
(genls PsychologicalAilment AilmentCondition)
(comment PsychologicalAilment "The collection of ailments that are classified as psychological due to their origin and/or manifestation in the mind of the sufferer rather than (or at least in addition to, and perhaps causing) manifestations in the sufferer's body.  Having a brain tumor is not an element of this collection, but imagining that you have one is an element of PsychologicalAilment, and so is the deep case of depression you fall into once you believe (rightly or wrongly) that you have a brain tumor.  Some subsets of this collection are the collections Phobia, Depression-PsychologicalCondition, and PanicAttack.")

;;; PublicEvent
(isa PublicEvent TemporalObjectType)
(genls PublicEvent SocialOccurrence)
(comment PublicEvent "The collection of Events which occur in front of, or in the contemporaneous awareness of, a large number of Persons -- ThePublic.  Usually these are intended to be public events, such as the Olympics, a public beheading, etc.")

;;; PublicOfficial
(isa PublicOfficial PositionType)
(genls PublicOfficial PublicSectorEmployee)
(comment PublicOfficial "A collection of persons; a subset of PublicSectorEmployee.  Each element of PublicOfficial is a person who holds a position that is directly involved with some aspect of governing a country (or a sub-region of it).  Many public offices in democratically governed countries are filled by election; some are filled by appointment.  In other countries, public offices are sometimes filled by succession or by military decree.
Note: Cyc represents a public office, such as Mayor or UnitedStatesPresident, as the collection of officials who have held that office, together with axioms describing their responsibilities.  PublicOfficial is a PositionType.")

;;; PublicSectorEmployee
(isa PublicSectorEmployee OccupationType)
(genls PublicSectorEmployee Professional)
(comment PublicSectorEmployee "A collection of persons; a subset of Professional.  Each element of PublicSectorEmployee is a person who is employed by a local, state (or provincial), or national government.  This collection includes both those who are employed directly in government administration (e.g., elected and appointed officials, tax officers, police and military personnel, other regulatory agents) and those who are employed in support services wholly funded by the government (e.g., postal employees, public school teachers, firefighters, unionized government workers, etc.).")

;;; PubliclyHeldCorporation
(isa PubliclyHeldCorporation ExistingObjectType)
(genls PubliclyHeldCorporation Business)
(genls PubliclyHeldCorporation LegalCorporation)
(comment PubliclyHeldCorporation "A collection of businesses; a subset of LegalCorporation.  An element of PubliclyHeldCorporation is an incorporated business whose Stock is traded publicly on some stock exchange or another public securities market.  Businesses that are not traded publicly are instances of PrivatelyHeldCorporation.")

;;; PublishedMaterial
(isa PublishedMaterial ExistingObjectType)
(genls PublishedMaterial InformationBearingObject)
(comment PublishedMaterial "A collection of information bearing objects (IBOs).  Each element of PublishedMaterial is an IBO that belongs to a set of multiple copies which have identical information contents, embodied in similar physical form, and which have been produced for distribution.  PublishedMaterial includes the published elements of TextualMaterial (e.g., books and magazines); software duplicated for sale or distribution; and mass-produced elements of RecordedSoundProduct.  Periodicals, advertisements, commercial films, annual business reports, tax schedules, all are sub-classes of PublishedMaterial.  Examples of PublishedMaterial: Cycorp's copy of `The New York Times' for July 4, 1996; my paperback copy of the novel `Parade's End'; Bill's copy of OS/2; Lisa's copy of `The White Album'.  See also SpecifiedInformationBearingThingType.")

;;; PulverizationEvent
(isa PulverizationEvent DefaultDisjointScriptType)
(genls PulverizationEvent DestructionEvent)
(genls PulverizationEvent Separation-Complete)
(genls PulverizationEvent CompositePhysicalAndMentalEvent)
(comment PulverizationEvent "A collection of events.  In each PulverizationEvent, some SolidTangibleThing is turned into Powder or a LiquidStateOfMatter through the application of a force.")

;;; PureCompound
(isa PureCompound TangibleStuffCompositionType)
(genls PureCompound InanimateThing)
(genls PureCompound TangibleThing)
(comment PureCompound "A collection of tangible stuffs.  Each instance of PureCompound is a chemically pure portion of stuff belonging to some particular ChemicalCompoundType (e.g., Carbon, Water, Cellulose).  `Chemically pure' applies to a piece of stuff which has no sub-portions which fail to conform to the chemical composition of its (single) ChemicalCompoundType.  Since this kind of purity is relative to specified chemical composition only, PureCompound (and PureFn) does not pertain to mixtures in Cyc (such as Air).  Cf. Mixture, ChemicalCompoundType.")

;;; PureCompoundType
(isa PureCompoundType Collection)
(genls PureCompoundType TangibleStuffCompositionType)
(comment PureCompoundType "A collection of collections.  Every instance of PureCompoundType is a collection which is a subset of both PureCompound and of some particular ChemicalCompoundType (e.g., Carbon, Water, Cellulose).  Each instance of PureCompoundType is defined ONLY by the properties of its ChemicalCompoundType, and of PureCompound (q.v.).  For example, (PureFn Fructose) is an instance of PureCompoundType, but the subsets of Fructose, such as (say) `pure fructose derived from honey' would not be instances of PureCompoundType.")

;;; PureFn
(isa PureFn CollectionDenotingFunction)
(resultIsa PureFn PureCompoundType)
(resultGenl PureFn PureCompound)
(arg1Isa PureFn ChemicalCompoundType)
(arg1Genl PureFn TangibleThing)
(comment PureFn "PureFn is a Cyc function, specifically a CollectionDenotingFunction.  (PureFn X) denotes the subset of the ChemicalCompoundType X whose instances are chemically pure.  Note that PureFn can be applied only to instances of ChemicalCompoundType (such as Fructose or Water), but not to mixtures (such as Air).  See also PureCompound.")

;;; PureSpace
(isa PureSpace StuffType)
(genls PureSpace SpatialThing)
(comment PureSpace "The collection of all portions, regions, or quantities of empty space (whether connected in one piece or unconnected, in multiple pieces).  The meaning of `empty' depends on context. A high energy physics microtheory might define `empty' as containing no particles, thus an element of PureSpace would be a complete vacuum.  But an element of PureSpace in AmbientConditionsMt would be a piece of Atmosphere.  An undersea context could treat PureSpace as seawater.  Elements of PureSpace are not committed to tangibility, so elements may be intangible or abstract pieces of space.")
(overlappingExternalConcept PureSpace SENSUS-Information1997 "SPACE")

;;; PureTime
(isa PureTime StuffType)
(genls PureTime IntangibleIndividual)
(comment PureTime "Abstract time itself, including all time from the past, present and future, irrespective of any defining (relevant) Events, or containing no (relevant) Events.   Elements are always intangible, abstract featureless times, either all of time or some temporal event-free or relevant-event-free subpart thereof.  An instance of PureTime need not have any starting or ending points, either defined or implicit.  PureTime is 'empty' of relevant or salient Events;  what is relevant or salient depends on the context.   In a physics context, the background buzz of atoms may be relevant events, whereas that would not be relevant during a non-state-change of an electronic device, or a boring wait for a train.  See also TimeInterval.")
(synonymousExternalConcept PureTime SENSUS-Information1997 "TIME")

;;; PurposefulAction
(isa PurposefulAction TemporalObjectType)
(isa PurposefulAction ScriptType)
(genls PurposefulAction MentalActivity)
(genls PurposefulAction Action)
(comment PurposefulAction "PurposefulAction is the collection of actions in which at least one actor is consciously, volitionally, purposefully doing the action (i.e., there is one or more deliberateActors (q.v.)).")

;;; PuttingOnAClothingItem
(isa PuttingOnAClothingItem TemporalObjectType)
(isa PuttingOnAClothingItem DefaultDisjointScriptType)
(genls PuttingOnAClothingItem HumanActivity)
(genls PuttingOnAClothingItem HandlingAnObject)
(comment PuttingOnAClothingItem "A collection of events.  Each element of PuttingOnAClothingItem is an event in which some wearable item is donned.  Such an event may be performed either by the wearer or by someone else (e.g., putting on a horse's bridle or a child's mittens).  After an element of PuttingOnAClothingItem occurs, there exists an element of WearingSomething (q.v.), i.e., the situation in which the item donned is wornOn the body of the wearer.")

;;; QualitativeTimeOfDay
(isa QualitativeTimeOfDay TemporalObjectType)
(genls QualitativeTimeOfDay Event)
(comment QualitativeTimeOfDay "Instances of QualitativeTimeOfDay are Events, not just TimeIntervals.  They are celestial events such as instances of Dawn, Morning, Evening, etc.   On PlanetEarth, each of these is of course synchronized with the daily cycle of the calendar, but its absolute timing (startingPoint and endingPoint) depends on the season and the observer's location on the planet's surface.")

;;; Quantifier
(isa Quantifier RelationType)
(genls Quantifier Relationship)
(comment Quantifier "A collection of mathematical objects.  Each element of Quantifier represents a relationship between a variable and a formula.  In Cyc, a quantifier binds the variable found in its first argument within the formula that appears as its second argument.  Elements of Quantifier in CycL include forAll, thereExists, thereExistExactly, thereExistAtLeast, thereExistAtMost.")

;;; QuantitySlot
(isa QuantitySlot PredicateCategory)
(genls QuantitySlot ProtheticSlot)
(comment QuantitySlot "A collection of predicates.  Each element of QuantitySlot is a binary predicate that takes a quantity as the value of its second argument.  In Cyc, those quantities are elements of ScalarInterval (q.v.).  Examples of QuantitySlot: distanceTranslated, spatialExtent, densityOfObject.  See also IntervalBasedQuantitySlot.")

;;; QuarterFn
(isa QuarterFn IndividualDenotingFunction)
(isa QuarterFn NonPredicateFunction)
(resultIsa QuarterFn CalendarQuarter)
(arg1Isa QuarterFn PositiveInteger)
(arg2Isa QuarterFn CalendarYear)
(comment QuarterFn "(QuarterFn ?N ?YR) denotes the Nth CalendarQuarter of the year ?YR. For example, (QuarterFn 2 (YearFn 1966)) denotes the second quarter of 1966.")

;;; QuartersDuration
(isa QuartersDuration UnitOfTime)
(isa QuartersDuration UnitOfMeasureNoPrefix)
(isa QuartersDuration UnitOfMeasure)
(resultIsa QuartersDuration ScalarInterval)
(resultIsa QuartersDuration Time-Quantity)
(argsIsa QuartersDuration CycSystemRealNumber)
(comment QuartersDuration "This is a function that takes one or two numbers and returns, as its value, some amount of Time.  An expression of the form (QuartersDuration ?min ?max) denotes a quantity of Time that is at least ?min quarter-years and at most ?max quarter-years.  (QuartersDuration ?num) denotes a quantity of Time that is exactly ?num quarter-years.")

;;; QuasiOrderedSet
(isa QuasiOrderedSet ObjectType)
(genls QuasiOrderedSet SetWithStructure)
(comment QuasiOrderedSet "The collection of all quasiordered sets (also called quasiorders, semiorders, quosets or pseudo-ordered sets), each being a SetWithStructure consisting of a set together with a quasiordering relation on that set.   Mathematical PartiallyOrderedSets, including directed chains, trees, forests, and lattices, are special cases of QuasiOrderedSet, but unlike the former, QuasiOrderedSets can have relational cycles.  The quasiordering relation is defined on the associated set, and is transitive on that set and reflexive on that set (it need not be antisymmetric, asymmetric or symmetric on that set).   Sometimes the members of the QuasiOrderedSet are called its nodes, and the non-redundant (transitively reduced) pairwise relations between the nodes are called its links.  A QuasiOrderedSet may be finite or infinite, and connected or unconnected.  (Note: A QuasiOrderedSet is not a SetOrCollection, rather it is a SetWithStructure that has an associated SetOrCollection.)")

;;; QuaternaryPredicate
(isa QuaternaryPredicate Collection)
(isa QuaternaryPredicate RelationType)
(genls QuaternaryPredicate Predicate)
(comment QuaternaryPredicate "QuaternaryPredicate is the collection of all Cyc predicates which take four arguments.")

;;; Query
(isa Query ObjectType)
(genls Query IllocutionaryForce)
(comment Query "A collection of illocutionary forces.  Each instance of Query consists of a piece of information contained (perhaps implicitly) in a communication, and which expresses the speaker's intention of asking the listener whether the state of affairs described in the utterance in fact holds.  The speaker's ultimate goal may be either to learn the information or to test the knowledge of the agent queried.   `Speaker' and `listener' are broadly interpreted to mean, respectively, any senderOfInfo and recipientOfInfo.  See also IllocutionaryForce, RequestingInformation.")

;;; QuintaryPredicate
(isa QuintaryPredicate RelationType)
(isa QuintaryPredicate Collection)
(genls QuintaryPredicate Predicate)
(comment QuintaryPredicate "QuintaryPredicate is the collection of all Cyc predicates which take five arguments.")

;;; QuotientFn
(isa QuotientFn FunctionFromQuantitiesToQuantities)
(resultIsa QuotientFn ScalarInterval)
(arg1Isa QuotientFn ScalarInterval)
(arg2Isa QuotientFn ScalarInterval)
(comment QuotientFn "QuotientFn is the division operator, a binary mathematical function.  (QuotientFn DIVIDEND DIVISOR) yields a new quantity that is the result of dividing the DIVIDEND by DIVISOR.  For example, (QuotientFn 24 6) returns 4.")

;;; RSTRelation
(isa RSTRelation PredicateCategory)
(genls RSTRelation IntangibleObjectPredicate)
(comment RSTRelation "A set of predicates describing possible relations between text constituents. These predicates are roughly adopted from work in Rhetorical Structure Theory (Mann & Thompson) and the SENSUS ontology (Hovy). Typically, these relations serve as necessary coherence links between segments of a text.")

;;; RadiallySymmetricObject
(isa RadiallySymmetricObject ExistingObjectType)
(genls RadiallySymmetricObject SpatialThing)
(comment RadiallySymmetricObject "The collection of objects which are radially symmetric, such as wheels, starfish, etc.")

;;; Radian
(isa Radian UnitOfAngularDistance)
(isa Radian StandardUnitOfMeasure)
(isa Radian UnitOfMeasureNoPrefix)
(resultIsa Radian PhysicalAttribute)
(resultIsa Radian ScalarInterval)
(argsIsa Radian CycSystemRealNumber)
(comment Radian "This is the basic unit of angular measure.  2
 radians make a complete circle.")

;;; RadiansPerSecond
(isa RadiansPerSecond UnitOfMeasureNoPrefix)
(isa RadiansPerSecond UnitOfAngularSpeed)
(isa RadiansPerSecond MKSUnitOfMeasure)
(isa RadiansPerSecond StandardUnitOfMeasure)
(resultIsa RadiansPerSecond RateOfRotation)
(resultIsa RadiansPerSecond Rate)
(resultIsa RadiansPerSecond ScalarInterval)
(argsIsa RadiansPerSecond CycSystemRealNumber)
(comment RadiansPerSecond "The basic measure of RateOfRotation.")

;;; RadiansPerSecondPerSecond
(isa RadiansPerSecondPerSecond UnitOfMeasureNoPrefix)
(isa RadiansPerSecondPerSecond UnitOfAngularAcceleration)
(isa RadiansPerSecondPerSecond MKSUnitOfMeasure)
(isa RadiansPerSecondPerSecond StandardUnitOfMeasure)
(resultIsa RadiansPerSecondPerSecond AngularAccelerationRate)
(resultIsa RadiansPerSecondPerSecond ScalarInterval)
(argsIsa RadiansPerSecondPerSecond CycSystemRealNumber)
(comment RadiansPerSecondPerSecond "The basic measure of angular acceleration")

;;; RadiationResistance
(isa RadiationResistance PrimitiveAttributeType)
(genls RadiationResistance ScalarInterval)
(genls RadiationResistance PhysicalAttribute)
(comment RadiationResistance "A collection of attributes; a subset of PhysicalAttribute.  Each element of RadiationResistance represents a specific capacity of a tangible object to resist radiation.  Degrees of RadiationResistance may be represented using GenericValueFunctions.  Indicate a particular object's RadiationResistance with the predicate resistanceToRadiation.")

;;; RadioWave
(isa RadioWave TemporalStuffType)
(isa RadioWave ScriptType)
(genls RadioWave ElectromagneticRadiation)
(comment RadioWave "A collection of events; a subset of ElectromagneticRadiation. Each element of RadioWave is an instance of electromagnetic radiation having a wavelength in the range from approximately 1 centimeters (1x10^8 Angstrom) to 3,000,000 meters (3x10^18 Angstrom), and a frequency of approximately 10^8 Hertz to 10^2 Hertz.  This includes the spectrum for RadioWave-UHF, RadioWave-VHF, RadioWave-FM, RadioWave-AM, and several other types of common use ElectromagneticRadiation.")

;;; RailroadStation-Physical
(isa RailroadStation-Physical ExistingObjectType)
(genls RailroadStation-Physical Building)
(comment RailroadStation-Physical "The collection of all railroad stations (train station buildings).  These are buildings located near railroad tracks and their primary purpose is to be a place where trains discharge and receive passengers (and possibly freight).")

;;; Railway
(isa Railway ExistingObjectType)
(genls Railway PathForWheeledVehicles)
(comment Railway "The collection of all pathways made of RailroadTracks and used for train transportation.  It includes main lines and sidings.")

;;; RainProcess
(isa RainProcess TemporalStuffType)
(isa RainProcess DefaultDisjointScriptType)
(genls RainProcess PrecipitationProcess)
(comment RainProcess "The collection of events in which the condensed liquid water in clouds forms droplets (or ice cystals which subsequently melt) substantial enough to fall to the surface of the earth.")

;;; Raindrop
(isa Raindrop ExistingObjectType)
(genls Raindrop 
  (LiquidFn Water))
(genls Raindrop PrecipitationParticle)
(comment Raindrop "The collection of drops of liquid water emitted by clouds in instances of RainProcess.")

;;; Raininess
(isa Raininess PrimitiveAttributeType)
(genls Raininess WeatherAttribute)
(genls Raininess ScalarInterval)
(genls Raininess PhysicalAttribute)
(comment Raininess "A collection of attributes; a subset of ScalarInterval.  Each element of Raininess describes the intensity with which it is raining at an OutdoorLocation.  (At the low extreme, it is not raining at all.)  Degrees of raininess may be represented qualitatively (e.g., Rainy), or using GenericValueFunctions.  The raininess of a location is indicated with the predicate raininessOfRegion.")

;;; Rainy
(isa Rainy Raininess)
(genlAttributes Rainy Cloudy)
(comment Rainy "The WeatherAttribute that characterizes an OutdoorLocation at which it is raining.")

;;; Rate
(isa Rate AttributeType)
(genls Rate ScalarInterval)
(comment Rate "A subset of ScalarInterval, whose elements are an amount of some property, taken with respect to some unit of time.  Elements of Rate include, for example, the instances of Speed (e.g., 55 mph), Frequency (e.g., 55 kHz), MonetaryFlowRate (e.g., 55 cents per minute).  See UnitOfRate for the units used by Cyc to measure rates (e.g., DollarsPerYear, MetersPerSecond).")

;;; RateOfRotation
(isa RateOfRotation MeasurableAttributeType)
(genls RateOfRotation ScalarInterval)
(genls RateOfRotation PhysicalAttribute)
(comment RateOfRotation "A collection of scalar rates of rotation.")

;;; RationalNumber
(isa RationalNumber MeasurableAttributeType)
(genls RationalNumber RealNumber)
(comment RationalNumber "The collection of all rational numbers; a subset of RealNumber.  Each element of RationalNumber is a number that can be expressed as the quotient of two integers, i.e., a ratio.  For example, 3/4, 2 1/8, 0.3333333..., 11/5.")

;;; Reading
(isa Reading TemporalStuffType)
(isa Reading DefaultDisjointScriptType)
(genls Reading AccessingAnIBT)
(genls Reading Perceiving)
(comment Reading "The collection of acts of reading TextualMaterial.  These may be for extracting some sort of information from the text, for entertainment, for prurient stimulation, or to test reading skills.")

;;; RealEstate
(isa RealEstate ExistingObjectType)
(isa RealEstate ProductType)
(genls RealEstate SolidTangibleProduct)
(comment RealEstate "A collection of tangible objects.  Each element of RealEstate is either a parcel of land or a land-based property that can be bought, sold, or rented.  This includes buildings and parts of buildings such as office suites or condominiums, as well as parcels of land.  Some prominent examples: GuantanamoNavalBase, NewYorkHiltonAtBroadway, WorldTradeCenter.")

;;; RealNumber
(isa RealNumber Collection)
(isa RealNumber MeasurableAttributeType)
(genls RealNumber ScalarPointValue)
(genls RealNumber IntervalOnNumberLine)
(genls RealNumber Number-General)
(comment RealNumber "The collection of all the minimal intervals (i.e., points) on the number line; a subset of IntervalOnNumberLine.  Each element of RealNumber is a single point on the real number line, from MinusInfinity to PlusInfinity.  Subsets of RealNumber include Integer, RationalNumber, NegativeNumber, PrimeNumber, and others. 
Note: Real numbers, like other elements of IntervalOnNumberLine, are measured along a single number `line'; but complex numbers, quaternions, etc., are n-tuples of numbers, and therefore are elements of NTupleInterval. For example, ComplexNumber is a subset of NTupleInterval")

;;; Receiving
(isa Receiving TemporalObjectType)
(genls Receiving TransferIn)
(comment Receiving "A collection of events; a subset of GeneralizedTransfer.  Each element of Receiving is an event in which something `comes in' to an object.  Typically, a receiving has associated with it an element of Translocation; a particular receiving and its associated translocation(s) are related by the predicate transferInSubEvent.  If the thing which `comes in' is an instance of PartiallyTangible (such as a baseball, or a SCUD missile), then its reception belongs to the specialized subset, ReceivingAnObject (q.v.).  If the translocation associated with the receiving is an instance of WavePropagation (such as a radio broadcast, or heat radiation from the Sun), then the receiving belongs to the subset ReceivingAWave (q.v.).")

;;; ReceivingAWave
(isa ReceivingAWave TemporalStuffType)
(genls ReceivingAWave Receiving)
(comment ReceivingAWave "A collection of events; a subset of Receiving.  Each element of ReceivingAWave is an event in which an instance of WavePropagation is received at a toLocation.  For example, my CD player receiving an infrared signal from the remote control; hearing a sound of distant thunder; a radio telescope receiving signals from a celestial body. See also WavePropagation.")

;;; ReceivingAnObject
(isa ReceivingAnObject TemporalObjectType)
(genls ReceivingAnObject Receiving)
(comment ReceivingAnObject "A collection of events, ReceivingAnObject is a subset of the collection Receiving.  An instance of ReceivingAnObject is an event in which there is some PartiallyTangible which is the objectMoving, i.e., the thing which `comes in' to the receiver (the toLocation).  For example, the objectMoving on an occasion when Lynn Swann received a pass from Terry Bradshaw during a Steelers' game would be a football (i.e., some instance of Football-American) and the passing/receiving event itself would be a ReceivingAnObject.")

;;; RecordedSoundProduct
(isa RecordedSoundProduct ExistingObjectType)
(isa RecordedSoundProduct ProductType)
(genls RecordedSoundProduct PartiallyTangibleProduct)
(genls RecordedSoundProduct PublishedMaterial)
(comment RecordedSoundProduct "A collection of information bearing objects (IBOs); a subset of PublishedMaterial.  Each element of RecordedSoundProduct is a sound recording which is one of a class of similar recordings with the same information content.  Typically, RecordedSoundProduct includes audio recordings (on audio cassettes, CDs, vinyl records) prepared and duplicated for sale as a product.  See also AudioRecordedObject.")

;;; RecordedVideoProduct
(isa RecordedVideoProduct ExistingObjectType)
(isa RecordedVideoProduct ProductType)
(genls RecordedVideoProduct PublishedMaterial)
(genls RecordedVideoProduct PartiallyTangibleProduct)
(comment RecordedVideoProduct "A collection of information bearing objects (IBOs); a subset of PublishedMaterial.  Each element of RecordedVideoProduct is a video recording which is one of a class of similar recordings with the same information content.  Typically, RecordedVideoProduct includes video recordings (on videotape, laserdiscs, etc.) prepared and duplicated for sale as a product.  See also VideoRecording.")

;;; RecoveringFromAilment
(isa RecoveringFromAilment TemporalObjectType)
(isa RecoveringFromAilment ScriptType)
(genls RecoveringFromAilment IntrinsicStateChangeEvent)
(genls RecoveringFromAilment PhysicalEvent)
(comment RecoveringFromAilment "A collection of events.  In an instance of RecoveringFromAilment, some member of BiologicalLivingObject recovers from an AilmentCondition it has at the beginning of this recovery period.")

;;; RectangularSolidFn
(isa RectangularSolidFn ShapeFunction)
(resultIsa RectangularSolidFn AbstractShape)
(arg1Isa RectangularSolidFn Distance)
(arg2Isa RectangularSolidFn Distance)
(arg3Isa RectangularSolidFn Distance)
(comment RectangularSolidFn "The Cyc function RectangularSolidFn is a ShapeFunction (q.v.).  (RectangularSolidFn LN BR HT) returns an abstract rectangular solid of length LN, breadth BR, and height HT.  For example, the shape of a 2-by-4 stud is Rectangular3DShape; it fitsIn the shape denoted by (RectangularSolidFn (Inch 2) (Inch 4) (Foot-UnitOfMeasure 8)).")

;;; ReferenceWork
(isa ReferenceWork ExistingObjectType)
(genls ReferenceWork TextualMaterial)
(comment ReferenceWork "The set of all documents that provide a more or less non-speculative, `fact-oriented,' comprehensive description of some knowledge domain.")

;;; ReflexiveBinaryPredicate
(isa ReflexiveBinaryPredicate Collection)
(isa ReflexiveBinaryPredicate PredicateCategory)
(genls ReflexiveBinaryPredicate BinaryPredicate)
(comment ReflexiveBinaryPredicate "The collection of all binary predicates ?pred such that  (implies (and (isa ?PRED ReflexiveBinaryPredicate) (arg1Isa ?PRED ?ARG1) (arg2Isa ?PRED ?ARG2) (isa ?OBJ ?ARG1) (isa ?OBJ ?ARG2)) (?PRED ?OBJ ?OBJ)).")

;;; RegionType
(isa RegionType Collection)
(genls RegionType ExistingObjectType)
(comment RegionType "A collection of collections.  Each element of RegionType is a collection of spatial regions.Such collections have elements that are identifiable subregions of objects, but that are not themselves independent objects.  Collections that are elements of RegionType include PalmOfHand, Doorway, Wall-GenericBarrier, WorkSurface, Handle, and many others.")

;;; RegionalGovernment
(isa RegionalGovernment ExistingObjectType)
(genls RegionalGovernment LegalGovernmentOrganization)
(comment RegionalGovernment "A collection of government organizations; a subset of LegalGovernmentOrganization.  An element of RegionalGovernment is a government organization which controls a particular geopolitical region (e.g., a country, state, city, county, etc).  The subOrganizations of an element of RegionalGovernment may include such function-specific Departments (q.v.) as legislatures, cabinets, police departments, Boards of Education, and miscellaneous regulatory agencies (which are also LegalGovernmentOrganizations).  The subOrganizations of a RegionalGovernment do not include other RegionalGovernments.")

;;; ReifiableFunction
(isa ReifiableFunction RelationType)
(isa ReifiableFunction Collection)
(genls ReifiableFunction NonPredicateFunction)
(comment ReifiableFunction "The collection of all Cyc functions whose values can be reified and treated like Cyc constants.  Using reifiable functions allow us to add to the KB efficiently; e.g., (GovernmentFn France) can be treated more or less the same as if we had created a new constant term called `GovernmentOfFrance', and GovernmentFn can be applied to any element of GeopoliticalEntity to produce such a reified term representing the region's government.  On the other hand, it is not desirable to reify every non-atomic term; for example, all the measurable quantities, such as (Inch 5), and the numbers which result from using elements of FunctionFromQuantitiesToQuantities (e.g., PlusFn).  Thus, IndividualDenotingFunction does not and should NOT have ReifiableFunction as a genls, because IndividualDenotingFunction includes the elements of UnitOfMeasure and other functions whose uses we don't want to reify.  See also NonPredicateFunction, ReifiableTerm.")

;;; ReifiableTerm
(isa ReifiableTerm ReifiableTerm)
(isa ReifiableTerm Collection)
(genls ReifiableTerm CycIndexedTerm)
(comment ReifiableTerm "A collection of Cyc terms.  All CycL constants are elements of ReifiableTerms, as is any NAT (non-atomic term; see NonPredicateFunction) whose function is an instance of ReifiableFunction.  E.g., since GovernmentFn is an instance of ReifiableFunction, it is true that (GovernmentFn France) is a ReifiableTerm.





[Implementation-level Footnote:   At the present time, all assertions of the form (isa TERM ReifiableTerm) are recorded and checked specially, as compared to other sorts of assertions; see defnIff.]")

;;; RelationType
(isa RelationType Collection)
(genls RelationType ObjectType)
(comment RelationType "A collection of collections.  Each element of RelationType is a collection of relations used in Cyc, including predicates, lambda functions, mathematical functions, non-atomic terms, and other types.  Examples: UnaryFunction, LogicalConnective, IndividualDenotingFunction, GenericTimePredicate, LanguageDescribingPredicate, ModalRelationship.")

;;; Relationship
(isa Relationship RelationType)
(isa Relationship Collection)
(genls Relationship MathematicalObject)
(genls Relationship Individual)
(comment Relationship "A collection of abstract objects.  Each element of Relationship represents some kind of relation.  Some elements of Relationship are truth-valued, that is, when applied to arguments, they yield statements which are true or false.  That includes elements of the following subsets of Relationship: Predicate, LogicalConnective, and Quantifier.  Other elements of Relationship yield new terms, rather than just true or false -- among them are all the members of NonPredicateFunction.  Syntactically, elements of Relationship are Cyc constants that can legally appear in the `zero-th' argument place of a CycL expression, i.e., immediately after the opening parenthesis in a CycL expression.")

;;; RelationshipPredicate
(isa RelationshipPredicate PredicateCategory)
(genls RelationshipPredicate IntangibleObjectPredicate)
(comment RelationshipPredicate "A collection of predicates.  Each element of RelationshipPredicate is a predicate used to describe relationships between intangible or abstract objects.  Examples: subEquations, subFunctions, maxQuantValue, meanQuantValue, expectedValue, derivativesOfFunction, rangeOfDistribution, inverseFunc, lessLikelyThan.")

;;; RelativeHumidity
(isa RelativeHumidity PrimitiveAttributeType)
(genls RelativeHumidity ScalarInterval)
(genls RelativeHumidity PhysicalAttribute)
(comment RelativeHumidity "A collection of attributes; a subset of ScalarInterval.  The elements of RelativeHumidity represent the extent to which the atmosphere at a location approaches total saturation with water vapor.  The relative humidity of a location is indicated with the predicate ambientRelativeHumidity.")

;;; Relaxed-Emotion
(isa Relaxed-Emotion FeelingAttributeType)
(genls Relaxed-Emotion FeelingAttribute)
(comment Relaxed-Emotion "The feeling of being emotionally relaxed, of having no pressing troubles or duties weighing on one, of being at ease and untroubled.  This is a Collection --- for an explanation of that, see Happiness.  A related FeelingAttributeType is Calm.")

;;; Relief-TheEmotion
(isa Relief-TheEmotion FeelingAttributeType)
(genls Relief-TheEmotion FeelingAttribute)
(comment Relief-TheEmotion "Emotion aroused by the removal or lightening of something oppressive, distressing, or painful.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; Religion
(isa Religion BeliefSystemType)
(genls Religion BeliefSystem)
(comment Religion "The collection of all religions or equivalent sets of beliefs that answer the `big questions' about creation, existence, etc.  Some elements of this are: AnimistReligion, Catholicism, Atheism, etc.")

;;; ReligiousHoliday
(isa ReligiousHoliday ScriptType)
(isa ReligiousHoliday TemporalObjectType)
(genls ReligiousHoliday Holiday)
(comment ReligiousHoliday "Each ReligiousHoliday is a Holiday which is specified by some religious tradition.  Note that individuals may observe or otherwise participate in a ReligiousHoliday without being members of the associated Religion.")

;;; ReligiousOrganization
(isa ReligiousOrganization ExistingObjectType)
(genls ReligiousOrganization Organization)
(comment ReligiousOrganization "A collection of organizations.  An element of ReligiousOrganization is a BeliefSystemFocusGroup whose members share religious beliefs, together with meetings, rituals, or practices related to those beliefs.  The collection ReligiousOrganization includes elements of LocalReligiousCongregation such as local churches, temples, mosques and shrines (qua organizations), as well as worldwide religious organizations such as TheRomanCatholicChurch.")

;;; RemovingSomething
(isa RemovingSomething TemporalObjectType)
(isa RemovingSomething ScriptType)
(genls RemovingSomething Translation-Complete)
(genls RemovingSomething Translation-LocationChange)
(genls RemovingSomething CausingAnotherObjectsTranslationalMotion)
(comment RemovingSomething "A collection of events.  During an instance of RemovingSomething, the objectRemoved is separated from an object or configuration to which it belonged prior to the removal event.  In different types of removals, either the objectRemoved or the thing it was associated with may be destroyed; or both may survive.  Examples of RemovingSomething include: someone unwrapping a present, undressing, digging up a root, removing an appendix, and stripping wax off a floor.")

;;; Renting
(isa Renting DefaultDisjointScriptType)
(isa Renting TemporalObjectType)
(genls Renting MoneyTransaction)
(genls Renting TemporaryChangeOfUserRights)
(genls Renting TransferringPossession)
(genls Renting MakingSomethingAvailable)
(genls Renting CommercialActivity)
(genls Renting MonetaryExchangeOfUserRights)
(genls Renting PurposefulAction)
(comment Renting "A collection of events; a subset of MonetaryExchangeOfUserRights (among other supersets).  Each element of Renting is an event during which one agent grants to another agent the use of an object (owned or controlled by the first agent) in exchange for some remuneration.  The schedule of payment may vary, depending upon the rental period, type of object involved, type of usage granted, and/or other considerations.  The agent providing the object to rent is called the fromPossessor; the agent paying to use the object is called the toPossessor.  Those agents enter into an Agreement (q.v.).  Examples of Renting might include:  Fred renting a particular apartment last year; Jane renting a car all this week; Jack renting a canoe on Saturday morning. See also PrimaryRoleUseRights.")

;;; RentingFn
(isa RentingFn CollectionDenotingFunction)
(resultIsa RentingFn ScriptType)
(resultIsa RentingFn ProductType)
(resultIsa RentingFn TemporalObjectType)
(resultGenl RentingFn Renting)
(arg1Isa RentingFn ExistingObjectType)
(arg1Genl RentingFn PartiallyTangible)
(comment RentingFn "RentingFn is a Cyc function, and in particular a CollectionDenotingFunction.  It returns a subset of actions which are instances of Renting.  (RentingFn TYPE) denotes the collection of events in which an Agent gets the use and/or possession (but not ownership) of an instance of TYPE by paying some Money to the owner.  For instance, (RentingFn Automobile) returns a set of all the events in which an agent rents an automobile.
Note:  That means that the value of (RentingFn Automobile) is both extensionally and intensionally the same as the collection RentingOfAutomobile.")

;;; ReproductiveSystem
(isa ReproductiveSystem AnimalBodyPartType)
(genls ReproductiveSystem AnimalBodyPart)
(comment ReproductiveSystem "The collection of all animals' reproductive systems.  A ReproductiveSystem is a system of organs used by the Animal for reproduction; i.e., for creating an offspring, a new member of that species.  
Note:  Strictly speaking, it might be more accurate to describe a ReproductiveSystem as containing the above sorts of systems for a mated male and female of a sexual species, as only that combined system is capable of actually producing an offspring.  But most of the things one wants to say about a ReproductiveSystem really do only make sense for one single animal at a time.  So think of reproduction as a cooperative activity, such as having a conversation, where we still refer to each animal's incomplete reproductive system as a ReproductiveSystem.")

;;; Reptile
(isa Reptile BiologicalClass)
(genls Reptile Vertebrate)
(genls Reptile NonPersonAnimal)
(comment Reptile "The collection of reptiles; a subset of Vertebrate.  Each element of Reptile is an air-breathing, cold-blooded animal which has a body covered by scales or bony plates.  The collection Reptile includes the subsets Snake, Turtle, Lizard, etc.  Members of most species of Reptile lay eggs; none has milk, hair, feathers, or postembryonic gills.  Reptile is an instance of BiologicalClass.")

;;; Request
(isa Request ObjectType)
(genls Request IllocutionaryForce)
(comment Request "A collection of illocutionary forces.  Each instance of Request consists of a piece of information contained (usually implicitly) in a communication, and which expresses the speaker's intention to ask the listener to perform the action(s) described in his/her utterance.  If the listener responds positively, s/he places him/herself under an obligation to do the indicated action.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any senderOfInfo and recipientOfInfo.  See also IllocutionaryForce.")

;;; Requesting-CommunicationAct
(isa Requesting-CommunicationAct TemporalObjectType)
(isa Requesting-CommunicationAct DefaultDisjointScriptType)
(genls Requesting-CommunicationAct CommunicationAct-Single)
(comment Requesting-CommunicationAct "The collection of communication acts in which one agent requests something of another.  Requests are typically followed by a response.")

;;; RequestingInformation
(isa RequestingInformation TemporalObjectType)
(isa RequestingInformation DefaultDisjointScriptType)
(genls RequestingInformation Requesting-CommunicationAct)
(comment RequestingInformation "A collection of actions, many of which are speech acts.
In each element of this collection, somebody asks
a question or requests some information. See also the IllocutionaryForce
associated with this action, Query.")
(synonymousExternalConcept RequestingInformation SENSUS-Information1997 "ROGATIVE-ACT")
(synonymousExternalConcept RequestingInformation SENSUS-Information1997 "QUESTION")

;;; Research
(isa Research TemporalStuffType)
(isa Research DefaultDisjointScriptType)
(genls Research HumanActivity)
(comment Research "What some members of ResearchOrganizations do")

;;; ResearchOrganization
(isa ResearchOrganization ExistingObjectType)
(genls ResearchOrganization Organization)
(comment ResearchOrganization "A collection of organizations.  An element of ResearchOrganization is an organization that carries out basic or applied research as its MainFunction (or one of its MainFunctions).  It may or may not be a commercial, or a governmental, organization.  For example, UnitedStatesSpaceProgram, Thomas J. Watson Research Laboratory at IBMInc, and the Hoover Institute.")

;;; Researcher
(isa Researcher OccupationType)
(genls Researcher Professional)
(comment Researcher "A collection of persons; a subset of Professional.  Each element of Researcher is a person who performs research as his or her main occupation.  This collection includes academicians, clinical investigators, experimental physicists, market researchers, industrial researchers, etc.")

;;; Resentment
(isa Resentment FeelingAttributeType)
(genls Resentment Dislike)
(genls Resentment Contempt)
(genls Resentment FeelingAttribute)
(comment Resentment "Indignation, displeasure, and ill will felt about something regarded as a slight, affront, insult, or indignity.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  More specialized FeelingAttributeTypes than Resentment are Jealousy and Envy.")

;;; Respect
(isa Respect FeelingAttributeType)
(genls Respect FeelingAttribute)
(comment Respect "A feeling of just regard, consideration, or appreciation for the worth of someone or something.
Note:   Admiration (qv) is different than, or rather a more specialized form of, respect.  To feel Respect towards someone is just to feel that s/he should be treated with politeness and consideration, as having dignity; Admiration and Wonder-Admiration implies all of that, but also implies that the target of the Respect actually did something special or has some special quality that sets them apart from others (or at least from the respecter).  Respect is a Collection --- for an explanation of that, see Happiness.  Some more specialized FeelingAttributeTypes than Respect are Reverence, Wonder-Admiration, Adulation, Awe, etc. ")

;;; Respiration
(isa Respiration TemporalStuffType)
(isa Respiration DefaultDisjointScriptType)
(genls Respiration BodilyFunctionEvent-Involuntary)
(comment Respiration "The subset of PhysiologicalProcesses in which an organism performs respiration; i.e., it exchanges carbon dioxide for Oxygen which is used to oxygenate (in Vertebrates) hemoglobin, an oxygen carrier in the Blood distributed to all of the organism's cells.  Respiration concerns the exchange of Oxygen and waste gasses with the environment.  Circulation concerns distributing the oxygenated Blood to the cells.  The oxygen carrier (hemoglobin) releases the oxygen to the cells, allowing chemical reactions necessary to sustain the cell life, which in turn sustains the life of the breather.")

;;; RespiratorySystem
(isa RespiratorySystem UniqueAnatomicalPartType)
(isa RespiratorySystem AnimalBodyPartType)
(genls RespiratorySystem BiologicalLivingObject)
(genls RespiratorySystem AnimalBodyPart)
(comment RespiratorySystem "The collection of all animals' respiratory systems.  A RespiratorySystem is composed of body parts (such as the lungs) of the animal, which together function so as to enable it to breathe.
Note: it is generally required that the RespiratorySystem (of a Vertebrate) work together with the CirculatorySystem (qv), as the air is used to supply needed substances to the blood and to remove waste products from the blood.")

;;; Restaurant
(isa Restaurant ExistingObjectType)
(genls Restaurant SingleSiteOrganization)
(genls Restaurant ServiceEstablishment)
(genls Restaurant FoodServiceOrganization)
(genls Restaurant Business)
(genls Restaurant LocalCustomerContactPoint)
(comment Restaurant "A collection of organizations; a subset of both FoodServiceOrganization and ServiceEstablishment.  Every element of Restaurant has particular locations (one or more) which serve meals in exchange for money.  Subsets of Restaurant include FineRestaurant and FastFoodRestaurant, among others.")

;;; Resting-Relaxing
(isa Resting-Relaxing TemporalStuffType)
(isa Resting-Relaxing DefaultDisjointScriptType)
(genls Resting-Relaxing BodilyFunctionEvent)
(comment Resting-Relaxing "The collection of events in which an animal abstains from strenuous physical activity.")

;;; Restlessness
(isa Restlessness FeelingAttributeType)
(genls Restlessness FeelingAttribute)
(comment Restlessness "The feeling of being troubled, restless, concerned about something, or in emotional turmoil.  This is a Collection --- for an explanation of that, see Happiness.")

;;; RetailOrganization
(isa RetailOrganization ExistingObjectType)
(genls RetailOrganization SellingOrganization)
(genls RetailOrganization CommercialOrganization)
(comment RetailOrganization "A collection of organizations.  Each element of RetailOrganization is an enterprise that engages primarily in selling goods to end-users or consumers, rather than to wholesale customers.  Examples: SearsTheCompany, WaldenBooksTheCompany, StudtmanPhoto.")

;;; RetailStore
(isa RetailStore ExistingObjectType)
(genls RetailStore SingleSiteOrganization)
(genls RetailStore RetailOrganization)
(genls RetailStore LocalCustomerContactPoint)
(genls RetailStore OrganizationWithIndividualCustomers)
(comment RetailStore "A collection of retail organizations.  Every element of RetailStore is a SingleSiteOrganization (but not necessarily a stand-alone business) which sells goods directly to consumers at store's physicalQuarters.  Note that the Niemann-Marcus store at the Galleria is an instance of RetailStore, but the Niemann-Marcus company as a whole is not, because it is a RetailStore-ParentCompany (with multiple outlets); both are RetailOrganizations.")

;;; RightObject
(isa RightObject ExistingObjectType)
(genls RightObject PartiallyTangible)
(comment RightObject "The collection of objects that are meant for, or are found on and distinctively structured for, the right side of some larger entity or ensemble of parts.  Examples include right hands, right shoes, right automobile turning signals.")

;;; RightRegionFn
(isa RightRegionFn ReifiableFunction)
(isa RightRegionFn IndividualDenotingFunction)
(resultIsa RightRegionFn AnimalBodyRegion)
(arg1Isa RightRegionFn AnimalBodyRegion)
(comment RightRegionFn "The function (RightRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the right half or flank or right main portion of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic left/right orientation, or is part of a larger region or object that has a left/right orientation.")

;;; RightSideUp
(isa RightSideUp OrientationAttribute)
(comment RightSideUp "(orientation OBJECT RightSideUp) means that OBJECT's intrinsic top (e.g., the lid of a teapot) is above (above-Directly) its intrinsic bottom (e.g., bowl of a teapot).")

;;; Rigid
(isa Rigid PhysicalStructuralAttribute)
(comment Rigid "A physical attribute.  Rigid is the PhysicalStructuralAttribute of solids which are stiff--neither flexible nor foldable nor elastic.  Examples of rigid things: bricks, wooden boards, steel.  Non-rigid things: sand, rubber, cloth.  Borderline: lampshades.")

;;; Rigidity
(isa Rigidity PrimitiveAttributeType)
(genls Rigidity PhysicalAttribute)
(genls Rigidity ScalarInterval)
(comment Rigidity "A collection of attributes; a subset of PhysicalAttribute.  Each element of Rigidity is a property of rigidity belonging to physical objects.  Rigidities in Cyc are measured using a GenericValueFunction.  Rigidities of objects are reported using the predicate rigidityOfObject.")

;;; Ritual
(isa Ritual ScriptType)
(genls Ritual PurposefulAction)
(comment Ritual "The collection of highly stylized or formalized actions (or series of actions) performed by Persons (alone or in groups), usually performed with some solemnity.  
Note: as further explained in the comment for SocialRitual, a WeddingCeremony or Inauguration is `more than' just a Ritual, but following the `script' for such a ceremony, and actually carrying it out, is a Ritual.")

;;; River
(isa River ExistingObjectType)
(genls River Stream)
(comment River "A collection of topographical features.  Each element of River is a natural stream of water, normally of a large volume.  Cf. Creek.  Examples of River include the ColoradoRiverOfArizona, the AmazonRiver, the ChangJiangRiver, the ThamesRiver.")

;;; RoadVehicle
(isa RoadVehicle ProductType)
(isa RoadVehicle ExistingObjectType)
(genls RoadVehicle TransportationDevice-Vehicle)
(genls RoadVehicle LandTransportationDevice)
(genls RoadVehicle ContainerProduct)
(comment RoadVehicle "A collection of transportation devices.  An instance of RoadVehicle is a vehicle which would typically be found travelling on roads and (optionally) carrying passengers: cars, busses, vans, pickup trucks, fire trucks, RVs, motorcycles, etc..  Since RoadVehicles are vehicles, i.e. self powered (e.g. see vehicle), LandTransportationDevices such as Bicycles, or Wheelchairs are not in this class.")

;;; RoadWorkVehicle
(isa RoadWorkVehicle ExistingObjectType)
(genls RoadWorkVehicle LandTransportationDevice)
(genls RoadWorkVehicle TransportationDevice-Vehicle)
(comment RoadWorkVehicle "The class of heavy construction equipment vehicles that are used to make roads and in other situations where one needs to move quantities of earth, rocks, etc. around.  These are powered by internal combustion engines, and often have wheels but just as  often have treads like tanks.")

;;; Role
(isa Role RelationType)
(genls Role IntangibleIndividual)
(comment Role "Instances of Role express relations between a Situation and the things involved in it.  ActorSlots (the relationships between Events and the SomethingExistings that act in them) are a special type of Role.")

;;; RoofOfAConstruction
(isa RoofOfAConstruction ExistingObjectType)
(genls RoofOfAConstruction SurfaceOnTangibleObject)
(genls RoofOfAConstruction PartOfBuilding)
(comment RoofOfAConstruction "The collection of all roofs of structures which are instances of HumanShelterConstruction.  Like instances of Wall-Vertical, instances of RoofOfAConstruction may be considered as having one or two sides; the 'inner' side of a roof may or may not qualify as a CeilingOfARoom.  It is understood that one and only one side of a RoofOfAConstruction is 'exposed to the elements.'")

;;; RoomInAConstruction
(isa RoomInAConstruction ExistingObjectType)
(genls RoomInAConstruction SpaceInAHOC)
(comment RoomInAConstruction "The set of rooms in ConstructionArtifacts")

;;; Rotation-NonPeriodic
(isa Rotation-NonPeriodic TemporalObjectType)
(genls Rotation-NonPeriodic Movement-NonPeriodic)
(genls Rotation-NonPeriodic Movement-Rotation)
(comment Rotation-NonPeriodic "The set of all rotational movements in which rotation occurs in a nonperiodic fashion; e.g., the turning of a knob on a kitchen appliance or a radio dial, or movements of a trackball.  See also Rotation-Periodic for the context-sensitive nature of this dichotomy.")

;;; Rotation-Periodic
(isa Rotation-Periodic TemporalObjectType)
(genls Rotation-Periodic Movement-Periodic)
(genls Rotation-Periodic Movement-Rotation)
(comment Rotation-Periodic "A collection of rotational movements; a subset of Movement-Rotation.  In any instance of Rotation-Periodic, either partial rotation (e.g., rocking) or full rotation (e.g., spinning) occurs periodically.  Examples include the swinging of a clock pendulum and the rotation of the Earth on its axis.  Note that the accuracy and duration of the periodic rotation is context-dependent.  E.g., in a context spanning a long enough period of time, and/or if measured sufficiently accurately, the Earth's rotation does not have a fixed period.  In a context short enough, and `approximate' enough, a spinning Olympic ice skater is performing a Rotation-Periodic event, even though a few seconds later they slow down and stop rotating.")

;;; Rowboat
(isa Rowboat ProductType)
(isa Rowboat ExistingObjectType)
(genls Rowboat Boat-WaterTransportationDevice)
(genls Rowboat Device-UserPowered)
(comment Rowboat "A subcollection of 
Boat-WaterTransportationDevice that contains all boats each 
of which is usually powered by one or more persions' rowing.")

;;; RudeAction
(isa RudeAction DefaultDisjointScriptType)
(genls RudeAction Action)
(genls RudeAction SocialOccurrence)
(comment RudeAction "The collection of behaviors that go against the social conventions of politeness.  This will be a different set of behaviors in different circumstances (contexts).  In an office, e.g., it might be rude to make a loud noise, but at a football game it might be rude to not do so.")

;;; RuleMacroPredicate
(isa RuleMacroPredicate PredicateCategory)
(genls RuleMacroPredicate Predicate)
(comment RuleMacroPredicate "Instances of RuleMacroPredicate are predicates that have, implicit in their definition, the schema for a class of quantified formulas.  A ground assertion (GAF) using one of these predicates is in fact shorthand for a rule fitting this schema.  For example, genls is a RuleMacroPredicate and its implicit schema would be (implies (isa ?X ARG1) (isa ?X ARG2)).  Therefore, (genls Poodle Dog) is shorthand for the rule (implies (isa ?X Poodle) (isa ?X Dog)).  RuleMacroPredicates may be supported by system code, as is genls, or they may be defined with an expansionAxiom.  In general, one should only introduce a new RuleMacroPredicate if 1) there is a plan to eventually provide code support for efficient reasoning with its uses, and/or 2) using it enables useful type-level reasoning.")

;;; SENSUS-Information1997
(isa SENSUS-Information1997 KnowledgeBase)
(comment SENSUS-Information1997 "SENSUS is a KnowledgeBase, created by the Information Sciences Institute at USC.  An earlier version of it was known
as Pangloss, and it was devloped primarily in order to
support machine translation.")


;;; STIB
(isa STIB IndividualDenotingFunction)
(isa STIB ReifiableFunction)
(resultIsa STIB TimeInterval)
(arg1Isa STIB TemporalThing)
(comment STIB "(STIB ?X) returns the `Short Time Interval Before' ?X.  The function STIB is used to state axioms which assert propositions about the world just before some TemporalThing.  E.g., just before some event begins, or just before some tangible object comes into being.  Whether the propositions hold beyond the bounds of the short interval specified depends the nature of the proposition.  Consider the axiom `before launching, the Space Shuttle's fuel tanks are full'. The fuel tanks are only known to be full immediately before the launching event, and for some (measurable but potentially short) time interval before that launch, and so we use STIB to specify the time interval in which the assertion of fullness will hold.  Before or after that time, additional axioms are required to conclude whether the tanks are full or not.  Also see:  STIF.")

;;; STIF
(isa STIF IndividualDenotingFunction)
(isa STIF ReifiableFunction)
(resultIsa STIF TimeInterval)
(arg1Isa STIF TemporalThing)
(comment STIF "(STIF ?X) returns the `Short Time Interval Following' ?X.  The function STIF is used to state axioms which assert propositions about the world just after some TemporalThing (i.e., after an event ends, after a tangible object ceases to exist, etc.).  Each of those propositions may or may not hold beyond the bounds of that short interval.  Consider the axiom `after swimming, the swimmer is wet'. The swimmer is only known to be wet for a short time interval immediately following the swimming event, and so we use STIF to specify that short time interval in which the assertion of wetness will hold.  Beyond that time, additional axioms would be required to decide whether the wetness would persist or not.  Also see: STIB.")

;;; Sadness
(isa Sadness FeelingAttributeType)
(genls Sadness FeelingAttribute)
(comment Sadness "Emotion felt when one is unhappy or low-spirited. This is a collection; for more details, see Happiness.  Some more specialized FeelingAttributeTypes are Remorse, Gloominess, Disappointment, Depression-Emotion, Grief, Misery, Despair, Anguish, etc.")

;;; Safeness
(isa Safeness ScriptPerformanceAttributeType)
(genls Safeness ScriptPerformanceAttribute)
(comment Safeness "Safeness is the ScriptPerformanceAttributeType for describing actions in which the performer acts without endangering itself or others.")

;;; Salaried
(isa Salaried WorkStatus)
(comment Salaried "An attribute; an element of WorkStatus.  The attribute of being a salaried worker in some organization.")

;;; SaleByCheck
(isa SaleByCheck ScriptType)
(isa SaleByCheck TemporalObjectType)
(genls SaleByCheck Buying)
(comment SaleByCheck "Sales in which the payment tendered is a check.")

;;; SaleByCreditCard
(isa SaleByCreditCard ScriptType)
(isa SaleByCreditCard TemporalObjectType)
(genls SaleByCreditCard Buying)
(comment SaleByCreditCard "A collection of events; a subset of Buying.  An instance of SaleByCreditCard is a purchase in which the buyer makes payment using some element of CreditCard (the set of all credit cards).
Note: This is different from instances of CreditSale (q.v.), in which the seller (rather than the credit card company) extends credit to the customer.")

;;; SalesActivity
(isa SalesActivity TemporalObjectType)
(isa SalesActivity DefaultDisjointScriptType)
(genls SalesActivity PurposefulAction)
(genls SalesActivity CommercialActivity)
(genls SalesActivity BusinessEvent)
(comment SalesActivity "A collection of events.  Each element of SalesActivity is an event which the performing agent does in an effort to achieve a subsequent sale to a second agent.  Types (i.e., subsets) of SalesActivity include Advertising, telemarketing, showing sample and/or actual products to customers in a show room or a store.  Elements of SalesActivity which are successful lead to corresponding elements of Buying.  Note: SalesActivity does NOT include manufacturing, accounting, and other such ancillary business activities.")

;;; SalesAgreement
(isa SalesAgreement ExistingObjectType)
(genls SalesAgreement Agreement)
(comment SalesAgreement "A collection of agreements.  Each element of SalesAgreement is an agreement which governs aspects of some Buying activity.  This includes bidding activities (in the subset SalesBidOrContract), as well as the instances of SalesContract.")

;;; SalesPerson
(isa SalesPerson OccupationType)
(genls SalesPerson BusinessPerson)
(genls SalesPerson Professional)
(comment SalesPerson "A collection of persons; a subset of Professional.  Each element of SalesPerson is someone whose principal job activity is negotiating with potential buyers, finding out what they want, describing what is available, taking orders, etc.  This collection includes door-to-door salespeople, Avon reprentatives, new and used car salespeople, sales representatives for the product lines of large industrial companies, and store clerks working on a sales commission.")

;;; SaltingFood
(isa SaltingFood ScriptType)
(genls SaltingFood PreservingFood)
(comment SaltingFood "Soaking food in salt to prevent it from rotting.")

;;; SanskritLanguage
(isa SanskritLanguage DeadLanguage)
(isa SanskritLanguage LivingLanguage)
(comment SanskritLanguage "This language was originally spoken in the Indic area and is now a dead language. Its sacred literature, however, was  transmitted orally and eventually written in the then-current Devanagari script")

;;; Satisfaction
(isa Satisfaction FeelingAttributeType)
(genls Satisfaction FeelingAttribute)
(comment Satisfaction "Feeling of appeasement, not only of one's desires or longings but also of his needs or requirements.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.   Some more specialized FeelingAttributeTypes than Satisfaction are:  Approval, Pride, Triumph-TheFeeling, etc. ")

;;; ScalarInterval
(isa ScalarInterval ObjectType)
(isa ScalarInterval Collection)
(genls ScalarInterval NTupleInterval)
(genls ScalarInterval AttributeValue)
(comment ScalarInterval "A collection of mathematical objects; a subset of NTupleInterval.  For a measurable quantity, the ordered sequence of possible values may be thought of as a line.  Each element of ScalarInterval is a line segment (or point) on such a line, representing a range of consecutive values.  The most common case is where the line is just the real number line, and the scalar interval is either a a contiguous set of points there (i.e., a range of numbers) or just a single point there (i.e., a number).  Another common case is where the line has some unit of measure marked off, such as meters.  In relation to the latter kind of interval, see also UnitOfMeasure.")

;;; ScalarPointValue
(isa ScalarPointValue ObjectType)
(isa ScalarPointValue Collection)
(genls ScalarPointValue ScalarInterval)
(comment ScalarPointValue "The collection of minimal scalar intervals.  That is, each element of ScalarPointValue is a scalar interval which has no `width'.  Scalar intervals include both pure numbers, such as 3.14, and linear measurements such as 3.14 meters, which in CycL would be written `(Meter 3.14)'.")

;;; SchoolInstitution-KThrough12
(isa SchoolInstitution-KThrough12 ExistingObjectType)
(genls SchoolInstitution-KThrough12 EducationalOrganization)
(comment SchoolInstitution-KThrough12 "A collection of school organizations.  An element of SchoolInstitution-KThrough12 is an educational institution which provides instruction in all or some of the grades from kindergarten (K) through high school (12th-grade) education.  Commonly, individual schools teach some subset of those grades; see also the specializations ElementarySchoolInstitution, MiddleSchoolInstitution, and HighSchoolInstitution.")

;;; ScientificFieldOfStudy
(isa ScientificFieldOfStudy ObjectType)
(genls ScientificFieldOfStudy FieldOfStudy)
(comment ScientificFieldOfStudy "A collection of fields of study.  Each element of ScientificFieldOfStudy is a specialized body of knowledge, theory, hypothesis, observations, and problems, which are the propositional contents of the systematic endeavor to explain the natural world by rational (and frequently, quantifiable) methods, including induction, falsifiable hypotheses tested by repeatable physical experiments, and deductive proof.  ScientificFieldOfStudy includes the traditional hard sciences (e.g., Physics, Chemistry), the life sciences (e.g., Biology, Genetics, Toxicology), and Mathematics.")

;;; Scientist
(isa Scientist OccupationType)
(genls Scientist Professional)
(comment Scientist "A set of persons; a subset of Professional.  Each element of Scientist is a person who is educated and employed in one (or more) of the natural or abstract sciences.  Elements of Scientist include members of its subsets Astronomer, Chemist, Linguist, Mathematician, Geneticist, CulturalAnthropologist, etc.  Examples of Scientist: CharlesDarwin, RichardFeynman, Noam Chomsky.")

;;; ScriptPerformanceAttribute
(isa ScriptPerformanceAttribute AttributeType)
(genls ScriptPerformanceAttribute AttributeValue)
(comment ScriptPerformanceAttribute "The most general type of attribute describing the manner in which an actor performs an action; specializations of this include CorrectnessOfPosture, Competence, Precision, Dexterity, Gracefulness, Creativity, etc.  The elements of Precision, e.g., represent the various qualitative levels such as high precision, low precision, etc.")

;;; ScriptPerformanceAttributeType
(isa ScriptPerformanceAttributeType Collection)
(genls ScriptPerformanceAttributeType PrimitiveAttributeType)
(comment ScriptPerformanceAttributeType "A collection of collections.  Each ScriptPerformanceAttributeType is a type of attribute that can be used to describe the manner in which actions are performed.  Examples include: Competence, Precision, Dexterity, Gracefulness, Creativity, etc.  So, e.g., one may run a race with some measure of Gracefulness, some measure of Competence, etc.")

;;; ScriptType
(isa ScriptType Collection)
(genls ScriptType SituationType)
(genls ScriptType Collection)
(comment ScriptType "ScriptType is the collection of subsets of Event.  Classifying events and (especially) actions by type allows Cyc to reason about the general characteristics of different kinds of occurrences.")

;;; Sculpture
(isa Sculpture ExistingObjectType)
(genls Sculpture Artifact)
(genls Sculpture ArtObject)
(genls Sculpture VisualInformationSource)
(comment Sculpture "A collection of art objects.  Each element of Sculpture is a tangible three-dimensional work of art; buildings are NOT included, even though sculptural features of buildings (such as friezes) are.  Types of Sculpture include stone statues, friezes, wood carvings, pipes welded into abstract art sculptures, etc.  Examples: the StatueOfLiberty, the MountRushmoreMonument, Michelangelo's David, the friezes on the Parthenon, the Buddhas at Longan.")

;;; Sea
(isa Sea ExistingObjectType)
(genls Sea SeaWater)
(genls Sea Water-Saline)
(genls Sea BodyOfWater)
(comment Sea "A collection of topographical features.  Each element of Sea is a body of salt water as large or larger than a lake.  Ocean is a subset of this collection.  Examples of Sea: PacificOcean, IonianSea, GulfOfCorinth, EastChinaSea, BlackSea.")

;;; SeaWater
(isa SeaWater TangibleStuffStateType)
(genls SeaWater 
  (LiquidFn Water-Saline))
(comment SeaWater "A collection of tangible things; a subset of both LiquidTangibleThing and Water-Saline.  Each element of SeaWater is a portion of salt water with the kind of mineral concentrations found in oceans--including the oceans themselves.")

;;; SeasonOfYear
(isa SeasonOfYear TemporalObjectType)
(genls SeasonOfYear WeatherEvent)
(comment SeasonOfYear "A collection of events -- specifically, the seasons that occur as subEvents of an AnnualClimateCycle.  For example, the elements of WinterSeason are all instances of SeasonOfYear.")

;;; SeatingDevice
(isa SeatingDevice ProductType)
(isa SeatingDevice ExistingObjectType)
(genls SeatingDevice PhysicalDevice)
(comment SeatingDevice "A set of physical objects.  An instance of SeatingDevice is a device whose primaryFunction is to serve as a sitting place for people.  Types of seating devices include sofas, chairs, benches, camp and stadium stools, theatre seats, swings, bicycle seats, saddles, and more.")

;;; Second-UnitOfAngularMeasure
(isa Second-UnitOfAngularMeasure UnitOfAngularDistance)
(isa Second-UnitOfAngularMeasure UnitOfMeasureNoPrefix)
(resultIsa Second-UnitOfAngularMeasure PhysicalAttribute)
(resultIsa Second-UnitOfAngularMeasure ScalarInterval)
(argsIsa Second-UnitOfAngularMeasure CycSystemRealNumber)
(comment Second-UnitOfAngularMeasure "A unit to measure the size of angles, in the Imperial system of measurement.  60 seconds = 1 minute (Minute-UnitOfAngularMeasure)")

;;; SecondFn
(isa SecondFn IndividualDenotingFunction)
(isa SecondFn NonPredicateFunction)
(resultIsa SecondFn CalendarSecond)
(arg1Isa SecondFn NonNegativeInteger)
(arg2Isa SecondFn CalendarMinute)
(comment SecondFn "(SecondFn S MINUTE) denotes second number S of minute MINUTE.  For example, (SecondFn 59 (MinuteFn 12 (HourFn 18 (DayFn 14 (MonthFn February (YearFn 1966)))))) denotes 6:12:59pm Feb. 14th, 1966")

;;; SecondsDuration
(isa SecondsDuration UnitOfMeasure)
(isa SecondsDuration StandardUnitOfMeasure)
(isa SecondsDuration UnitOfMeasureNoPrefix)
(isa SecondsDuration CGSUnitOfMeasure)
(isa SecondsDuration UnitOfTime)
(resultIsa SecondsDuration Time-Quantity)
(resultIsa SecondsDuration ScalarInterval)
(argsIsa SecondsDuration CycSystemRealNumber)
(comment SecondsDuration "Seconds are the standard unit of Time in Cyc.  Think of SecondsDuration as a function; it takes one or two numbers and returns, as its value, some amount of Time.   An expression of the form (SecondsDuration ?num) denotes a quantity of Time that is exactly ?num seconds long.  An expression of the form (SecondsDuration ?min ?max) denotes a quantity of Time that is at least ?min seconds at most ?max seconds long.
Note:  Cyc's ontology contains ways to specify nonuniform distributions (e.g., a normal distribution with a mean and standard deviation), but for most purposes this simple uniform specification of `a piece of time' has proven itself to be the most useful building block.")

;;; Secretion-Bodily
(isa Secretion-Bodily TangibleStuffCompositionType)
(genls Secretion-Bodily NaturalTangibleStuff)
(comment Secretion-Bodily "The collection of all NaturalTangibleStuff secreted by an organism's body.  There are a wide variety of bodily secretions, including Hormones, Mucus, InsulinTheSecretion, and Semen.  Secretions may be deposited either within the body (e.g., BileTheSecretion) or outside of it (e.g., Sweat). 
Note: Secretions are different from ExcretionSubstance in that secretions are not necessarily waste products.  E.g., they may be a release of pheromones to attract a mate, a layer of sweat to cool off the organism, a layer of nectar to attract bees, etc.  Some subsets of Secretion-Bodily, such as Sweat, are also subsets of ExcretionSubstance (i.e., wastes).")

;;; SecretionEvent
(isa SecretionEvent TemporalStuffType)
(isa SecretionEvent DefaultDisjointScriptType)
(genls SecretionEvent BiologicalProductionEvent)
(genls SecretionEvent EmittingAnObject)
(comment SecretionEvent "A collection of events; a subset of BiologicalProductionEvent.  Each element of SecretionEvent is an event in which a living animal or plant secretes a substance.")

;;; Seed
(isa Seed ExistingObjectType)
(genls Seed BiologicalStageOfDevelopment)
(genls Seed PlantBLO)
(comment Seed "The collection of all plant seeds: small nodules or granules consisting of young angiosperms and their protective containers during early (zygotic and embryonic stages) of development.  Seeds, if planted, may grow into adult plants.")

;;; SelfConfidence
(isa SelfConfidence FeelingAttributeType)
(genls SelfConfidence Confidence)
(comment SelfConfidence "Faith in oneself and one's powers without any suggestion of conceit or arrogance.   If one has a large portion of SelfConfidence, their state of mind is often marked by ease and freedom from uncertainty, diffidence, or embarrassment.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  A typical more specialized FeelingAttributeType than SelfConfidence is Vanity.")

;;; SelfEmployedWorker
(isa SelfEmployedWorker OccupationType)
(genls SelfEmployedWorker Professional)
(comment SelfEmployedWorker "A collection of persons; a subset of Professional.  Each element of SelfEmployedWorker is a worker who earns a living from funds paid directly to him/her by customers, or who is paid by a company s/he owns.  An instance of SelfEmployedWorker has no boss but him/herself.")

;;; SelfPoweredDevice
(isa SelfPoweredDevice ExistingObjectType)
(genls SelfPoweredDevice MechanicalDevice)
(genls SelfPoweredDevice PoweredDevice)
(comment SelfPoweredDevice "A collection of MechanicalDevices, classified by the main way of supplying the force needed to operate them.  SelfPoweredDevice is a subset of PoweredDevice.  An instance of SelfPoweredDevice has an `on-board' part which converts some kind of potential energy into force.  That may be a battery and motor to convert electricity stored in the battery into kinetic energy (as in a cordless electric drill); other examples are the elements of Automobile, which (typically) convert gasoline and battery power to get the energy to move the vehicle.  Some muscle power is involved in operating both a cordless drill and an automobile, but not the main part of the power, in either case.  Negative exemplars of a SelfPoweredDevice include a Bicycle (powered by the person that rides it) a Cable Car (pulled along by cabled embedded in the street) and subway train (often powered by an electrified `third rail').")

;;; SellingOrganization
(isa SellingOrganization ExistingObjectType)
(genls SellingOrganization CommercialServiceOrganization)
(comment SellingOrganization "A collection of organizations.  Each element of SellingOrganization is an organization whose main function is to sell things by conducting sales activities.  Examples: sales departments (e.g., the sales department of ToyotaTheCompany); advertising agencies; and retailers (e.g., WaldenBooksTheCompany, KMartCompany).")

;;; SemiSolidStateOfMatter
(isa SemiSolidStateOfMatter StateOfMatter-SolidLiquidGaseous)
(comment SemiSolidStateOfMatter "One of the basic physical states of matter.  Semi-solid objects are characterized at the macroscopic level by (a) their ability to flow under the application of pressure, combined with (b) their high viscosity.  Examples of things that are typically in this stateOfMatter: a squirt of toothpaste on your brush, or a lump of bread dough, at normal room temperatures.  At higher temperatures:  a lava flow, a lump of molten glass about to be blown into a vase, etc.")

;;; SemiSolidTangibleThing
(isa SemiSolidTangibleThing TangibleStuffStateType)
(genls SemiSolidTangibleThing TangibleThing)
(comment SemiSolidTangibleThing "A collection of tangible things.  Each element of SemiSolidTangibleThing is a tangible thing that is intrinsically in a semisolid state.  Some semisolids are pourable (e.g., sand) and some are not (e.g., jello).  When a force is first applied to a semisolid, the object moves or deforms substantially and does not break or crack.  Semisolids are stirrable (thus, rubber is probably not a semisolid).  A semisolid can be deformed into any shape that does not require some dimension of the object to be smaller than all dimensions of the granule size of that stuff; e.g., a Mob of hailstones cannot form a paper-thin sheet.  The granules of a Pourable semisolid, such as sand, may themselves belong to SolidTangibleThing.")

;;; SemiconductorResistance
(isa SemiconductorResistance ElectricalResistance)
(comment SemiconductorResistance "A measurable physical attribute.  SemiconductorResistance is the element of ElectricalResistance that represents the level of resistance found in instances of SemiconductorStuff.  See also resistanceOfObject.")

;;; SemiconductorStuff
(isa SemiconductorStuff ExistingStuffType)
(genls SemiconductorStuff TangibleThing)
(comment SemiconductorStuff "The collection of those elements of TangibleThing that can, under varying electrical fields, behave as an electrical insulator at times and an electrical conductor at other times.")

;;; SendingSomething
(isa SendingSomething TemporalObjectType)
(isa SendingSomething DefaultDisjointScriptType)
(genls SendingSomething DirectedTranslation)
(genls SendingSomething LosingUserRights)
(genls SendingSomething CausingAnotherObjectsTranslationalMotion)
(genls SendingSomething HumanActivity)
(comment SendingSomething "The collection of events in which an Agent intends to have an object (other than itself) delivered to some other Agent. This involves at least a temporary loss of some user rights to the object by the sender.  If successful, an instance of SendingSomething is also an instance of TransferringPossession.")

;;; Sensor
(isa Sensor ExistingObjectType)
(genls Sensor TangibleThing)
(comment Sensor "The collection of devices, biological or artificial, that gather information.  
Note:  If a well-known named part of such an entity does the data-gathering, then generally only those parts are considered sensors, not the whole entity.  E.g., even though a person gathers information, we generally do not consider them to be a sensor, but rather the sensors are their eyes, ears, skin, etc.  In a context such as an ophthalmology convention, `well-known part' has a different binding, and they would consider just certain parts of the eye to be sensors.")

;;; SensoryAttribute
(isa SensoryAttribute UnorderedAttributeType)
(genls SensoryAttribute 
  (MeaningInSystemFn SENSUS-Information1997 "SENSE-AND-MEASURE-QUALITY"))
(genls SensoryAttribute AttributeValue)
(comment SensoryAttribute "A collection of attributes.  Each element of SensoryAttribute is a sensory datum detectable by sentient beings.  SensoryAttribute includes colors, odors, tastes, sounds, and feels, as well as the various feelings represented by its subset InternalSensoryAttribute.  Examples of SensoryAttribute: Rough, Smooth, Slimy, GoldenColor, VeryBrightLightIntensity, (HighAmountFn NoiseLevelAttribute).")

;;; SensoryInformation
(isa SensoryInformation StuffType)
(genls SensoryInformation MentalInformation)
(comment SensoryInformation "A collection of mental information.  Each element of SensoryInformation is the propositional content of a mental state in which the nervous system of an animal or other sentient perceives something.  For example, if I perceive that my office is hot, the information is that my [the perceiver's] office is hot; if you perceive that my eyes are brown, the information is that Deborah's eyes are brown.")

;;; SensoryReactionType
(isa SensoryReactionType Collection)
(genls SensoryReactionType PrimitiveAttributeType)
(genls SensoryReactionType AttributeType)
(comment SensoryReactionType "A collection of collections.  Each element of SensoryReactionType is an AttributeType, describing one natural kind of sensation (e.g., pain, pressure, pleasure, warmth, etc.) that may be felt by PerceptualAgents.  Some examples of SensoryReactionType are LevelOfDizziness, LevelOfSoreness, LevelOfColdSensation, etc.")

;;; SeparatingAMixture
(isa SeparatingAMixture TemporalStuffType)
(isa SeparatingAMixture DefaultDisjointScriptType)
(genls SeparatingAMixture Separation-Complete)
(genls SeparatingAMixture DestructionEvent)
(comment SeparatingAMixture "A collection of events.  In each instance of this collection, a Mixture is separated into two or more constituents.")

;;; Separation-Complete
(isa Separation-Complete TemporalObjectType)
(isa Separation-Complete DefaultDisjointScriptType)
(genls Separation-Complete SeparationEvent)
(genls Separation-Complete PhysicalEvent)
(comment Separation-Complete "A collection of physical separation events.  In each Separation-Complete, one object is separated into two or more distinct pieces.")

;;; SeparationEvent
(isa SeparationEvent TemporalObjectType)
(isa SeparationEvent DefaultDisjointScriptType)
(genls SeparationEvent PhysicalEvent)
(comment SeparationEvent "A collection of events.  In each SeparationEvent, an object is cut, scraped, broken, cracked or pulverized, so that part of the object is no longer attached where it once was.  That part has not necessarily completely separated; it may still be attached in places.  See Separation-Complete for the complete case.")

;;; September
(isa September MonthOfYearType)
(genls September CalendarMonth)

;;; Series
(isa Series Collection)
(genls Series Situation)
(comment Series "The collection of situations in which 2 or more ''parts'' or ''members'' are ordered in some linear fashion.  For example, the line of people at a ticket booth, an alphabetized set of words, or the series of pitches in a baseball game.")

;;; ServiceEstablishment
(isa ServiceEstablishment ExistingObjectType)
(genls ServiceEstablishment LocalCustomerContactPoint)
(genls ServiceEstablishment CommercialServiceOrganization)
(genls ServiceEstablishment Business)
(comment ServiceEstablishment "A collection of organizations.  Each element of ServiceEstablishment is a local service organization at a single physical location.  What an individual retail store or outlet is for tangible products, a service establishment is for services.  Examples: Threadgills restaurant; DaytonaSpeedway; Brake Check store at 35th and Lamar Blvd., Capital Medical Clinic in Medical Park Towers, and the U.S. Post Office on West 6th Street in Austin, TX.")

;;; ServiceEvent
(isa ServiceEvent TemporalObjectType)
(isa ServiceEvent ScriptType)
(genls ServiceEvent CompositePhysicalAndMentalEvent)
(genls ServiceEvent PurposefulAction)
(comment ServiceEvent "A collection of events.  Each element of ServiceEvent is an event in which one agent (or set of agents) does something for another agent (or set of agents).  The former is the providerOfService; the latter is the recipientOfService.  A service event may involve maintenance, repair, or refurbishing of some object belonging to the recipientOfService (including care of his/her person); a service event may involve gathering or transmitting information, providing advice, entertainment, transportation, etc.  Service events may or may not be done for payment.")

;;; ServiceOrganization
(isa ServiceOrganization ExistingObjectType)
(genls ServiceOrganization Organization)
(comment ServiceOrganization "A collection of organizations.  Each element of ServiceOrganization is an organization whose main function is to provide some set of services, i.e., to perform certain service events.  A service organization may be a subsidiary, a department, or an independent organization.  A service organization may or may not be a for-profit organization; see the subset CommercialServiceOrganization.  Examples: FederalExpress; the mail department at MCC; NewYorkHospital; the USMedicareAdministration; the Jiffy Lube at Guadalupe and 38th St; Threadgills restaurant; KEYE-TV in Austin, TX.")

;;; ServingFoodOrDrink
(isa ServingFoodOrDrink DefaultDisjointScriptType)
(isa ServingFoodOrDrink TemporalObjectType)
(genls ServingFoodOrDrink ServiceEvent)
(genls ServingFoodOrDrink HumanActivity)
(genls ServingFoodOrDrink HandlingAnObject)
(genls ServingFoodOrDrink TransportationEvent)
(genls ServingFoodOrDrink DirectedTranslation)
(comment ServingFoodOrDrink "A collection of events.  Each element of ServingFoodOrDrink is an event in which an item of food or drink is served.  It starts when the server picks up the food or drink from a preparation or pickup area and ends when it is deposited at the location where the people being served may eat or drink it.  Such events are typically part of the job of any restaurant server who waits on tables, and they may be performed also by a host or servant at a dinner party or banquet, or by a family member at a home meal.  Note: this collection does not include placing a `serving' of food from a common dish onto a diner's plate.")

;;; Set-Mathematical
(isa Set-Mathematical Collection)
(genls Set-Mathematical SetOrCollection)
(comment Set-Mathematical "The collection of mathematical sets.  An element of Set-Mathematical can be any arbitrary set, including sets whose members have nothing in common.  In contrast, the members of an instance of Set-Mathematical's sibling Collection (q.v.) all have some important, natural properties in common.  Sets and collections also differ in that there cannot exist two distinct sets that have exactly the same elements.  A third point of contrast between sets and collections is that rarely will it be desirable to create a new constant to refer to a set.  Instead, a set will either be intensionally specified by a defining property, using TheSetOf, as in (TheSetOf ?X (likesAsFriend Lenat ?X)), or extensionally specified by listing its elements, using TheSet, as in (TheSet 3 4 5).  (In certain cases, a set will be extensionally specified by means of one of the more specialized functions ThePartition or TheCovering.  See partitionedInto and covering.)")

;;; SetOrCollection
(isa SetOrCollection Collection)
(genls SetOrCollection MathematicalOrComputationalThing)
(comment SetOrCollection "The collection of all mathematical sets and all collections.  Instances of Set-Mathematical and instances of Collection share some basic common features.  They are both abstract entities, lacking spatial and temporal properties.  More specifically, they (can) have elements, and hence may stand to one another in set-theoretic relations such as subsetOf and disjointWith.  Nevertheless, sets and collections differ in two important respects.  Every collection is associated with an intensional criterion for membership -- a more or less natural property or group of properties possessed by its members.  (The criterion for membership need not, and often will not, be precisely definable in any language.)  Collections are thus akin to kinds.  In contrast, the elements of a set are not required to be homogeneous in any respect; any things whatsoever may together comprise the members of a set.  The second major difference between sets and collections is that no two distinct sets can be co-extensional (be such that every element of one is an element of the other and conversely).  Sets are, so to speak, identified on the basis of their extensions.  Collections, on the other hand, are identified by their intensional criteria for membership.  So collections which have exactly the same elements may be distinct, differing in their respective membership criteria.")
(synonymousExternalConcept SetOrCollection SENSUS-Information1997 "COLLECTION")

;;; SetTheFormat
(isa SetTheFormat Format)
(comment SetTheFormat "Any argument place of a Cyc predicate may have a specified format that constrains its possible value(s).  If an argument position has SetTheFormat as its entry format, then --- given some fixed set of values for the other arguments to that predicate --- any number of assertions can still be true in the KB with different terms in that argument position.  E.g., the arg1Format for mother is SetTheFormat, since a woman can have any number of children.  See also Format, and contrast with SingleEntry.")

;;; SetWithStructure
(isa SetWithStructure ObjectType)
(genls SetWithStructure Situation)
(genls SetWithStructure MathematicalObject)
(comment SetWithStructure "The collection of all mathematical structures each consisting of a set with structuring relations (e.g., a BinaryPredicateOnSets) on that set (and, optionally, one or more functions and/or selected other sets, individuals or subsets for that set).  Examples include PartiallyOrderedSets, MultiGraphs, etc.  Sometimes mathematicians specify these using a Tuple of sets, relations, functions, and/or individuals, as specifications.")

;;; Shaft
(isa Shaft ExistingObjectType)
(genls Shaft SolidTangibleThing)
(genls Shaft Artifact)
(comment Shaft "A collection of artifacts.  An instance of Shaft is an object which is long, straight, and cylindrical.  A shaft may be made of wood, metal, etc.")

;;; Shame
(isa Shame FeelingAttributeType)
(genls Shame Embarrassment)
(comment Shame "Painful self-conscious feeling of guilt, shortcoming, or impropriety.  Shame often accompanies social disgrace or disrepute.  It often leads to Remorse.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.")

;;; ShapeDescribingPredicate
(isa ShapeDescribingPredicate PredicateCategory)
(genls ShapeDescribingPredicate ExtensionalRepresentationPredicate)
(genls ShapeDescribingPredicate PhysicalFeatureDescribingPredicate)
(comment ShapeDescribingPredicate "A collection of predicates.  Each element of ShapeDescribingPredicate is a predicate used in assertions about abstract shapes and shape-like configurations, such as posture.  Examples: shape, xyCrossSectionShape, yzCrossSectionShapeType, continuouslyConnectedTo, postureOfAnimal.")

;;; ShapeFunction
(isa ShapeFunction RelationType)
(genls ShapeFunction NonPredicateFunction)
(comment ShapeFunction "A collection of Cyc functions.  Each element of ShapeFunction is a function which returns an element of AbstractShape, an abstract physical region with a specific shape and dimensions.  Elements of ShapeFunction include RectangleFn, EllipseFn, CircleFn, RectangularSolidFn, CylinderFn, etc.  Each shape function takes as argument(s) the dimension(s) of Distance needed to determine a geometric shape of that kind, then returns a shape which has those dimensions.  For example, (CylinderFn L D) denotes an abstract cylinder of length L and diameter D.")

;;; ShapeType
(isa ShapeType Collection)
(genls ShapeType AttributeType)
(genls ShapeType SituationType)
(comment ShapeType "A collection of collections.  Each element of ShapeType is a collection of abstract physical shapes.  These are shapes which, for example, a physical object can have when considered `in outline', as occupying a region of space which has certain dimensions and geometrical characteristics.  Elements of ShapeType include ThreeDimensionalShape, TwoDimensionalShape, Polygon, Square, Circle, SphereShape, CylinderShape, PyramidShape, etc.")

;;; ShapingSomething
(isa ShapingSomething TemporalStuffType)
(isa ShapingSomething DefaultDisjointScriptType)
(genls ShapingSomething HandlingAnObject)
(genls ShapingSomething IntrinsicStateChangeEvent)
(comment ShapingSomething "A collection of events.  In each ShapingSomething, something (usually a more or less `plastic' object) is given a definite shape.  In many, but not all, cases (e.g., MakingPottery), an instance of ShapingSomething is also a CreationEvent,   Normally, elements of ShapingSomething are concerned with the basic, overall shape of an object.  Thus, a PolishingSomething event, which doesn't affect the basic shape of the objectOfStateChange, is not a ShapingSomething.")

;;; SharedNote
(isa SharedNote ObjectType)
(isa SharedNote Collection)
(genls SharedNote TextGroup)
(genls SharedNote Individual)
(comment SharedNote "SharedNote is an element of the Cyc collection DocumentationConstant.  Each instance of SharedNote is a constant which contain only documentation (usually a comment) about two or more constants (not including that documentation constant).  See sharedNotes for more information.")

;;; Sharing
(isa Sharing TemporalObjectType)
(isa Sharing DefaultDisjointScriptType)
(genls Sharing MakingSomethingAvailable)
(genls Sharing GainingUserRights)
(genls Sharing TemporaryChangeOfUserRights)
(comment Sharing "A collection of events; a subset of MakingSomethingAvailable (among other supersets).  In an instance of Sharing, one Agent receives PrimaryRoleUseRights over an object for a limited time from another Agent, who doesn't give up his or her own right to use it, too (but does give up exclusive right to it).  Cf. BorrowingSomething.")

;;; SharpEdged
(isa SharpEdged PhysicalStructuralAttribute)
(comment SharpEdged "Includes anything which has a sharp edge.  Includes knives, scissors, and broken glass.  Does not include the right angle at the edge of a desk--that's not sharp enough.  Does not include the edge of a cotton sheet--that's not hard enough to be sharp.  Does not include a needle--it may be sharp, but it's not an edge.  For needles, nails, etc., see PointyEnded.")

;;; ShatteringEvent
(isa ShatteringEvent ScriptType)
(genls ShatteringEvent Separation-Complete)
(genls ShatteringEvent SeparationEvent)
(genls ShatteringEvent DestructionEvent)
(comment ShatteringEvent "A collection of events.  In each ShatteringEvent, something is destroyed by being broken into a mob of pieces. [A `mob' means `a large but indeterminate number']   Since the salient parts of the inputsDestroyed must be Brittle in order for this to happen, fluids (such as liquid water) and elastic stuff (such as rubber at room temperature) will generally not undergo any ShatteringEvents.  Items which can be an objectActedOn in shattering events are typically made of glass, pottery, bone, plaster, etc.  Many substances, particularly solid metals and alloys, are extremely difficult to shatter.")

;;; ShavingSomething
(isa ShavingSomething TemporalStuffType)
(isa ShavingSomething DefaultDisjointScriptType)
(genls ShavingSomething MovementEvent)
(genls ShavingSomething IntrinsicStateChangeEvent)
(genls ShavingSomething Separation-Complete)
(genls ShavingSomething HandlingADevice)
(comment ShavingSomething "A collection of events.  In each ShavingSomething event, thin pieces of material on an object's surface are removed.  An example would be someone whittling a wooden spoon, someone using a lathe to make a table leg, someone scraping the top layer of mold and cheese off a brick of cheese that was left in the refrigerator just a little too long, etc.  
WARNING: an event in which someone ``shaves'' their body hair (a ShavingBody event) from one's face, legs, etc. with a shaver or razor is NOT a  ShavingSomething event; rather, it is an element of the collection CuttingSomething.  If one uses a depilatory such as Nair, then one could actually ``shave'' (genuinely a ShavingSomething event) the resultant coating of depilatory and separated hair ends away. ")

;;; ShearStrength
(isa ShearStrength PrimitiveAttributeType)
(genls ShearStrength PhysicalAttribute)
(genls ShearStrength ScalarInterval)
(comment ShearStrength "A collection of attributes; a subset of PhysicalAttribute.  Each element of ShearStrength represents a specific capacity of some physical object to resist the slipping of one segment in relation to another.  Shear strengths are designated using a GenericValueFunction; higher value means more resistance to slippage.  Shear strengths of objects are indicated with the predicate shearStrengthOfObject.")

;;; SheetOfSomeStuff
(isa SheetOfSomeStuff ExistingObjectType)
(genls SheetOfSomeStuff PartiallyTangible)
(comment SheetOfSomeStuff "A collection of tangible stuff.  Each element of SheetOfSomeStuff is a substance which (in its `intrinsic' shape) is continuous and, when flattened, uncrumpled, unfurled, etc, has one dimension which is significantly smaller than the other two dimensions.  The requirement of being a continuous sheet does not preclude some type of penetrability, as in instances of Screen, Netting, or LaceCloth.  Belonging to this collection implies nothing about the current configuration of the object; in particular, elements of SheetOfSomeStuff need not be lying flat.  Aluminum foil on a roll or a bedspread crumpled up on a bed are instances of SheetOfSomeStuff. Cf. SheetShaped, TwoDimensionalShape.")

;;; SheetShaped
(isa SheetShaped PhysicalStructuralAttribute)
(comment SheetShaped "A physical attribute.  SheetShaped is the element of PhysicalStructuralAttribute that describes a tangible object that is flat and spread out, planar, and neither fully crumpled nor compactly folded.  In one of the dimensions it is much smaller than in the other two.  Bedspreads, ice over ponds, and sheets of paint on a house are all possible examples of objects having this attribute.  For describing a sheet of something (e.g., waxed paper, aluminum foil, cloth) regardless of its configuration, use SheetOfSomeStuff.")

;;; Shell-AnimalBodyPart
(isa Shell-AnimalBodyPart UniqueAnatomicalPartType)
(isa Shell-AnimalBodyPart AnimalBodyPartType)
(genls Shell-AnimalBodyPart BiologicalLivingObject)
(genls Shell-AnimalBodyPart SkeletalSystem)
(comment Shell-AnimalBodyPart "The collection of all animal shells.  An animal's shell is one of its AnimalBodyParts, and functions as a hard protective outer covering for the animal.")

;;; ShelterConstruction
(isa ShelterConstruction ExistingObjectType)
(genls ShelterConstruction Artifact)
(comment ShelterConstruction "A collection of artificial tangible objects.  Each element of ShelterConstruction is an artifact built by some entity or creature, including but not limited to humans, and intended for use as a shelter.  Elements of ShelterConstruction include bird nests, termite mounds, beaver dams, the SydneyOperaHouse, the PalaceOfFineArts-SanFrancisco, and the NewYorkHiltonAtBroadway.")

;;; Ship
(isa Ship ExistingObjectType)
(genls Ship Boat-WaterTransportationDevice)
(comment Ship "A subcollection of Boat-WaterTransportationDevice, whose instances are large, typically ocean-going vessels.")

;;; Shipping
(isa Shipping TemporalObjectType)
(isa Shipping DefaultDisjointScriptType)
(genls Shipping 
  (TransportViaFn TransportationDevice))
(genls Shipping TransportingGoods)
(genls Shipping ServiceEvent)
(genls Shipping SendingSomething)
(comment Shipping "Shipping of objects from one physical location to another. Shipping from the perspective of being done as a dedicated service, such as what UPS, the US Postal Service, or Dominoes Pizza Delivery might do.")

;;; ShippingLocation
(isa ShippingLocation ConventionalClassificationType)
(isa ShippingLocation ContactLocationType)
(genls ShippingLocation MailingLocation)
(genls ShippingLocation HumanlyOccupiedSpatialObject)
(comment ShippingLocation "A collection of places; a subset of ContactLocation.  Each element of ShippingLocation is a location to which merchandise is physically delivered, e.g., a house, an office, a corporate mailroom, a post office box.")

;;; Shirt
(isa Shirt ProductType)
(isa Shirt ExistingObjectType)
(genls Shirt ClothingItem)
(comment Shirt "A collection of objects.  Every element of Shirt is a clothing item that is worn to cover the upper part of the human torso, with openings for the neck and lower body, and either openings for, or sleeves encircling, the arms.  Subsets include LongSleeveShirt, Blouse, and TankTop.")

;;; Shoe
(isa Shoe ProductType)
(isa Shoe ExistingObjectType)
(genls Shoe ClothingItem)
(comment Shoe "A collection of objects.  Every element of Shoe is a shoe or shoelike thing worn on the feet.  Important subsets include Boot-Footwear, Sandal, Slipper, and CasualShoe.  Elements of the collection Shoe are single shoes.  Pairs of shoes are elements of the collection denoted by (PairFn Shoe).")

;;; ShortPants
(isa ShortPants ProductType)
(isa ShortPants ExistingObjectType)
(genls ShortPants Pants)
(comment ShortPants "A collection of objects; a subset of Pants.  Every element of ShortPants has pantlegs that cover only the upper part of the wearer's legs, being typically knee-length or shorter.")

;;; ShreddingEvent
(isa ShreddingEvent ScriptType)
(genls ShreddingEvent SeparationEvent)
(genls ShreddingEvent DestructionEvent)
(comment ShreddingEvent "A collection of events.  In each ShreddingEvent, the inputsDestroyed are destroyed by a large number of Ripping subEvents.")

;;; SiblingDisjointAttributeType
(isa SiblingDisjointAttributeType SiblingDisjointCollection)
(genls SiblingDisjointAttributeType AttributeType)
(genls SiblingDisjointAttributeType Collection)
(comment SiblingDisjointAttributeType "A collection of collections.  Each element of SiblingDisjointAttributeType is a collection of attributes.  If COL is such a collection, then nothing can have two instances of COL as attributes unless those two instances are related in a genlAttributes relationship to each other.  For example, MaritalStatusOfPeople is an element of SiblingDisjointAttributeType; no person can have (at the same time) the maritalStatus Married and the maritalStatus Single.  However, a person could have both the status Single and the status Divorced, if Single is a genlAttributes of Divorced.  See also SiblingDisjointCollection.")

;;; SiblingDisjointCollection
(isa SiblingDisjointCollection Collection)
(genls SiblingDisjointCollection Collection)
(comment SiblingDisjointCollection "SiblingDisjointCollection captures a very important concept, but one that is rarely given a name.  There are many sets of sets for which any two member sets either will be disjoint (i.e., have no intersection) or else one will be a subset of the other.  For instance, consider the various types (i.e., sets) of animals in the usual Linnaean taxonomy:  Vertebrate, Bird, Dog, Mammal, Invertebrate, Person, etc.; Vertebrates and Invertebrates are mutually disjoint, while Bird, Mammal, Dog, and Person are all subsets of Vertebrate.  Dog and Person are disjoint with each other, but each of them is a subset of Vertebrate.  All of the Linnaean sets, or collections, of animals can be grouped together into one set, or collection, of sets, which in turn is an instance of SiblingDisjointCollection.   
It turns out that the real situation --- and the real definition of SiblingDisjointCollection --- is slightly more complicated than that.  Consider types of appliances: toasters, cars, shavers, clocks, etc.  Is the set of such appliance-types a SiblingDisjointCollection, the way we defined it above, for types of animals?  Almost, but not quite.  One could have an appliance-type `ClockRadio', which would be the set of all clock radios, and clearly each clock radio is both a clock and a radio, yet neither Clock nor RadioReceiver is a subset of the other.  So if we have some item that purports to be both a clock and radio, that is okay if one of the following three conditions is met:
(1) the collection Clock is known to be a subset of RadioReceiver;
(2) the collection RadioReceiver is known to be a subset of Clock;
(3) there is already defined a collection X which is a subset of both Clock and RadioReceiver.
More formally, the axiom that defines SiblingDisjointCollection is as follows: SIB is an element of SiblingDisjointCollection if and only if:
(implies
   (and 
       (isa C1 SIB) 
       (isa C2 SIB) (isa C1-EL C1)
       (different C1 C2))
   (or 
       (not (isa C1-EL C2)) 
       (thereExists C3 (and (genls C3 C2) (genls C3 C1) (isa C1-EL C3)))))
That axiom, together with the minimization of genls, gives us the following characterization of our concept:  If we have a collection SIB that is an element of SiblingDisjointCollection, and if we take two elements C1 and C2 of that collection SIB, then each element of C1 which is not an element of a common specialization (C3) of C1 and C2, MUST NOT BE an element of C2.
In cases where there are a few exceptions --- that is, a couple of elements of SIB might have some overlap --- but it is undesirable to explicitly create a new reified constant (like `ClockRadio', above) for that intersection, Cyc allows you to use an explicit mechanism to override the SiblingDisjointCollection constraints for a particular C1 and C2; namely, you would assert to Cyc (siblingDisjointExceptions C1 C2).  See also siblingDisjointExceptions.")

;;; Side
(isa Side RegionType)
(genls Side Surface-Physical)
(comment Side "Elements are portions of some Surface-Physical which constitute a boundary between the inside and outside of a tangible object.")

;;; SignTheDisplay
(isa SignTheDisplay ExistingObjectType)
(genls SignTheDisplay VisualInformationSource)
(genls SignTheDisplay HardcopyInformationBearingObject)
(comment SignTheDisplay "A collection of information bearing objects (IBOs); a subset of VisualInformationSource.  Each element of SignTheDisplay is a tangible object typically posted where people can see it so that they can obtain information from it.  Uses of signs include identification of objects (e.g., street signs, name tags, species labels at zoos); advertising (e.g., billboards, neon signs, posters for garage sales); warnings (e.g., signs for road hazards or road construction, `No Trespassing' postings, printed tape marking off a police line).")

;;; SimpleContactAcquaintance
(isa SimpleContactAcquaintance AcquaintanceAttribute)
(comment SimpleContactAcquaintance "The attribute which specifies that persons X and Y have met each other at least once, and probably would be able to recall this, and even recognize each other, if they meet again.  I.e., (acquaintances X Y SimpleContactAcquaintance) implies (acquaintances Y X SimpleContactAcquaintance); that is, if X has met Y, then Y has met X.  This assumes that there was a meeting event in which (earlier subabstractions of) X and Y interacted, that both were minimally conscious, etc.")

;;; SimpleGraph-GraphTheoretic
(isa SimpleGraph-GraphTheoretic Collection)
(genls SimpleGraph-GraphTheoretic MultiGraph)
(genls SimpleGraph-GraphTheoretic SimplePathSystem)
(comment SimpleGraph-GraphTheoretic "The collection of all PathSystems that are instances of both SimplePathSystem and MultiGraph.  Each instance of SimpleGraph-GraphTheoretic is a 'graph', as studied in graph theory, in which there are neither loops nor multiple links between the same pair of nodes.")

;;; SimpleNoun
(isa SimpleNoun LinguisticObjectType)
(genls SimpleNoun SpeechPart)
(comment SimpleNoun "The collection of all simple nouns, also called common nouns. Simple nouns can typically be preceded by a determiner, and in English they inflect for number. Example: 'dog'.")

;;; SimplePathSystem
(isa SimplePathSystem Collection)
(genls SimplePathSystem Thing)
(comment SimplePathSystem "An instance of PathSystemType and the collection of PathSystems without loops or parallel links.  This collection includes SimpleGraph-GraphTheoretic when there are no non-node points along links.")

;;; SimpleRepairing
(isa SimpleRepairing ScriptType)
(isa SimpleRepairing TemporalObjectType)
(genls SimpleRepairing IntrinsicStateChangeEvent)
(genls SimpleRepairing HumanActivity)
(genls SimpleRepairing ActionOnObject)
(genls SimpleRepairing PurposefulAction)
(comment SimpleRepairing "The collection of events in which something gets fixed.")

;;; SimpleSegmentOfPath
(isa SimpleSegmentOfPath ObjectType)
(genls SimpleSegmentOfPath Path-Generic)
(comment SimpleSegmentOfPath "The collection of all segments of Path-Generics each of which has no path junctions between its ends.  The two ends of such a segment may or may not coincide at the same location (i.e. a SimpleSegmentOfPath may form a loop.  See also SimpleUnloopedSegmentOfPath).  The only access to something located along a SimpleSegmentOfPath is via the endsOfPathSegment locations for that #SimpleSegmentOfPath.  When the segment is part of a specified PathSystem (as opposed to a mere CustomarySystemOfLinks), the predicate linkInSystem (or else loopInSystem) applies to it and the system.")

;;; SimpleWholeBodyMovement
(isa SimpleWholeBodyMovement ScriptType)
(isa SimpleWholeBodyMovement TemporalStuffType)
(genls SimpleWholeBodyMovement BodyMovementEvent)
(comment SimpleWholeBodyMovement "A collection of common bodily movements (e.g., walking, jumping) in which the whole body is involved in the movement.")

;;; SingleCellOrganism
(isa SingleCellOrganism ExistingObjectType)
(genls SingleCellOrganism Organism-Whole)
(genls SingleCellOrganism Cell)
(comment SingleCellOrganism "The collection of living things which are all elements of both Organism-Whole and Cell.  Each element of SingleCellOrganism is an organism consisting of one self-reproducing living cell.")

;;; SingleDoerAction
(isa SingleDoerAction ScriptType)
(genls SingleDoerAction Action)
(comment SingleDoerAction "A collection of actions.  Each element of SingleDoerAction is an action which can have only one `doer' (i.e., only one agent `doing' it).  Such events may be intentional or not.  Most bodily functions belong to subsets of this collection, because the only agent of a normal bodily function is the agent whose body it is  (e.g., Heartbeating, Bleeding).  For a type of action to be a subset of SingleDoerAction, it must be inconsistent to assert, for any member of the subset, both (doneBy ACT X) and (doneBy ACT Y), where X and Y are different.  In contrast, CarryingWhileLocomoting is NOT a subset of SingleDoerAction.  For, although an action of that kind might often be done by only one performer, it is also common for two or more people to cooperate in carrying something.")

;;; SingleEntry
(isa SingleEntry Format)
(comment SingleEntry "Argument places of Cyc predicates may have specified formats that constrain their values.  SingleEntry is a format constraint used to indicate that there is at most one value in a certain argument place, when all other arguments are fixed.  For example, the arg2Format  of mother is SingleEntry, since an animal can only have one mother.  See also Format, and contrast with SetTheFormat.")

;;; SingleResidenceUnit
(isa SingleResidenceUnit ProductType)
(isa SingleResidenceUnit ExistingObjectType)
(genls SingleResidenceUnit ModernHumanResidence)
(comment SingleResidenceUnit "A collection of human residences.  Each element of SingleResidenceUnit is either a modern-style detached house, an apartment, or another instance of ModernHumanResidence designed to accomodate either a single person or a single family (i.e., instance of FamilyCohabitationUnit).  Usually, each element of SingleResidenceUnit has a unique mailing address.")

;;; SingleSiteOrganization
(isa SingleSiteOrganization ExistingObjectType)
(genls SingleSiteOrganization Organization)
(comment SingleSiteOrganization "A collection of organizations.  An instance of SingleSiteOrganization is an organization which has a single location as its physicalQuarters.  For example, the KMartStore at Parmer Lane, Simon & David at the Arboretum, and Great Hills FireStation Number 2 would be positive instances.  But the KMartCompany, TomThumbTheCompany, and the Austin City Fire Department are negative examples, since those `parent' organizations have several sites as their physicalQuarters.")

;;; SittingPosture
(isa SittingPosture Posture)
(comment SittingPosture "The attribute that describes, most generically, an Animal in a seated position.  The exact nature of the position depends upon the typical body structure of the animal's species.")

;;; Situation
(isa Situation Collection)
(genls Situation Individual)
(comment Situation "Situation is the collection of situations.  A situation is a state of affairs; it identifies roles played by objects involved in the situation, and it articulates the relationships between those roles.  One important partitioning of Situation is:

(1) Event --- the dynamic situations.
(2) StaticSituation. --- they exist in time, but are not dynamic, more a set of relationships among objects.  E.g., consider the situation of Bill Clinton sitting in his easy chair on the evening of 7/4/96.   There are participant objects such as Bill and the chair, there are relationships such as the seat of the chair supporting his bottom and his weight being off his feet, etc.  There is a fuzzy line between Events and StaticSituations: one could think of Bill as `carrying out the process of sitting' while he's in his easy chair.  
(3) atemporal situations.  There are some abstract, non-spatial, non-temporal instances of Situation.  This is not very common, though; most situations of interest have (dynamic or static) temporal properties, and are instances of TemporalThing.  ")

;;; SituationFn
(isa SituationFn CollectionDenotingFunction)
(resultIsa SituationFn SituationType)
(resultGenl SituationFn Situation)
(arg1Isa SituationFn CycFormula)
(comment SituationFn "SituationFn is a Cyc function, specifically a CollectionDenotingFunction.  (SituationFn FORM) denotes a collection of situations in which the CycFormula FORM is true.  FORM may contain variables.  For example, FORM might describe the general situation in which a letter is addressed to a person who has filed a mail forwarding order.  If FORM is true in a particular case, then that is a situation of the (SituationFn FORM) kind, and related axioms may indicate inferences or actions to take.  Every collection denoted by a SituationFn expression is an element of (isa) SituationType.")

;;; SituationType
(isa SituationType Collection)
(genls SituationType Collection)
(comment SituationType "A collection of collections.  SituationType is the collection of subsets of Situation.")

;;; SkeletalSystem
(isa SkeletalSystem UniqueAnatomicalPartType)
(isa SkeletalSystem AnimalBodyPartType)
(genls SkeletalSystem BiologicalLivingObject)
(genls SkeletalSystem AnimalBodyPart)
(comment SkeletalSystem "The collection of all animals' skeletal systems.  A SkeletalSystem is a system of body parts used to support, separate, and protect the other parts of the body, especially the torso and the soft, vulnerable internal organs of the animal.  It can be an external Exoskeleton (see also: Shell-AnimalBodyPart) or an internal interlinking of numerous parts composed of Bone-BodyPart and Cartilage.")

;;; Skin
(isa Skin AnimalBodyPartType)
(genls Skin SolidTangibleThing)
(genls Skin TactileSensor)
(genls Skin VibrationThroughAMediumSensor)
(genls Skin SheetOfSomeStuff)
(genls Skin AnimalBodyPart)
(comment Skin "A (piece of) skin serves as outer protective and tactile sensory covering for (part of) an animal's body.  This is the collection of all pieces of skin.  Some examples include TheGoldenFleece (an entire skin) and YulBrynnersScalp (a small portion of his skin).")

;;; Skirt
(isa Skirt ProductType)
(isa Skirt ExistingObjectType)
(genls Skirt WomensClothing)
(genls Skirt ClothingItem)
(comment Skirt "The collection of all skirts, a category of women's clothing intended to cover the lower part of the body")

;;; SkolemFuncN
(isa SkolemFuncN Collection)
(genls SkolemFuncN SkolemFunction)

;;; SkolemFuncNFn
(isa SkolemFuncNFn FunctionTheMathematicalType)
(resultIsa SkolemFuncNFn Thing)
(arg1Isa SkolemFuncNFn CycSystemList)
(arg2Isa SkolemFuncNFn CycSystemSymbol)
(arg3Isa SkolemFuncNFn NonNegativeScalarInterval)

;;; SkolemFunction
(isa SkolemFunction Collection)
(isa SkolemFunction RelationType)
(genls SkolemFunction ReifiableFunction)
(comment SkolemFunction "SkolemFunction is a collection of Cyc system-generated functions that implement existential quantifications in Cyc.  Whenever someone asserts to Cyc an expression that contains a `thereExists', Cyc automatically creates a new element of SkolemFunction and rewrites the assertion using that skolem function, as described in what follows.  (Most Cyc users don't need to know the following details, which are supplied only for the curious.)







Suppose we tell Cyc that every animal has a birth date; i.e., for each animal, there exists a date such that the animal was born on that date --- in CycL, (implies (isa ?x Animal)(thereExists ?y (birthDate ?x ?y))).  In response to that CycL formula, Cyc would create a new element of SkolemFunction -- we might call it the `BirthDateFn' -- whose single argument would be an animal and whose resultant value would be a date, namely, that animal's date of birth.  Subsequently, Cyc would automatically use the `BirthDateFn' in asserting our rule, eliminating the need for a `thereExists'.  Our formula would thus be rewritten by the system, as follows:







(implies 

   (and

     (isa ?x Animal)

     (termOfUnit ?y (`BirthDateFn' ?x)))

   (birthDate ?x ?y)).





See also termOfUnit. 





Note: Although our example uses the name 'BirthDateFn' for our skolem function, at this time (4/97), skolem functions are automatically named by the Cyc system using the prefix `SKF-' followed by a number.  The system-generated name can be replaced by re-naming, though that is rarely done in practice.")

;;; SkolemFunctionFn
(isa SkolemFunctionFn FunctionTheMathematicalType)
(resultIsa SkolemFunctionFn Thing)
(arg1Isa SkolemFunctionFn CycSystemList)
(arg2Isa SkolemFunctionFn CycSystemSymbol)

;;; Sleeping
(isa Sleeping TemporalStuffType)
(isa Sleeping DefaultDisjointScriptType)
(genls Sleeping BodilyFunctionEvent-Involuntary)
(genls Sleeping Resting-Relaxing)
(comment Sleeping "The collection of all Sleeping events, i.e., natural processes in which an Animal engages in some unconscious mental activity coupled with physical rest.  Sleeping is a subset of BodilyFunctionEvent-Involuntary; the process of Sleeping is essential for the health of sentient animals.")

;;; Sleepy
(isa Sleepy Alertness)
(genlAttributes Sleepy Awake)
(comment Sleepy "Sleepy is the Alertness attribute which is a specialization of Awake.  It is the state an animal normally passes through before GoingToSleep.")

;;; SmellPerception
(isa SmellPerception TemporalStuffType)
(isa SmellPerception DefaultDisjointScriptType)
(genls SmellPerception Perceiving)
(comment SmellPerception "The collection of sensory Perceivings in which a PerceptualAgent smells something and thereby acquires information about it.")

;;; SmokingFood
(isa SmokingFood ScriptType)
(genls SmokingFood PreservingFood)
(comment SmokingFood "A kind of cooking in which the food is exposed to smoke.  This adds nitrates to the food to prevent rotting.")

;;; SnowFlake
(isa SnowFlake ExistingObjectType)
(genls SnowFlake 
  (SolidFn Water))
(genls SnowFlake PrecipitationParticle)
(comment SnowFlake "The collection of frozen water crystals emitted by clouds in instances of SnowProcess.")

;;; SnowProcess
(isa SnowProcess DefaultDisjointScriptType)
(genls SnowProcess PrecipitationProcess)
(comment SnowProcess "The collection of events in which the condensed liquid water in clouds freezes into ice crystals which become substantial enough to fall to the earth as snow.")

;;; Snowy
(isa Snowy WeatherAttribute)
(genlAttributes Snowy Cloudy)
(comment Snowy "The WeatherAttribute that characterizes an OutdoorLocation at which it is snowing.")

;;; SociabilityBasedAction
(isa SociabilityBasedAction TemporalObjectType)
(isa SociabilityBasedAction DefaultDisjointScriptType)
(genls SociabilityBasedAction SocialOccurrence)
(comment SociabilityBasedAction "The collection of socially based actions, those performed mostly for the sake of sociability, in which considerations of socially acceptable interactions with others are important.")

;;; SocialAttributeType
(isa SocialAttributeType Collection)
(genls SocialAttributeType AttributeType)
(comment SocialAttributeType "This is a collection of collections.  Each SocialAttributeType is itself a coherent collection of attributes that pertain to human behavior.  This definition is very broad, and embraces attributes of behavior (personal and social) one might read about in a sociology, psychology, cultural anthropology, economics, political science, or social philosophy course -- in short, in the (human) `behavioral' sciences.  A more specialized concept is SocialStatusAttributeType, which limits the focus to status-related attributes.  This is a superset of that, much more general collection which includes, as elements, AcquaintanceAttribute, InterAgentRelationAttribute, etc., as well as all the elements of SocialStatusAttributeType (qv).")

;;; SocialBeing
(isa SocialBeing ExistingObjectType)
(genls SocialBeing IntelligentAgent)
(comment SocialBeing "The collection of beings whose existence is accepted by some social system.  (Thus, the elements of SocialBeing will vary with social contexts.)  Social beings are entities able to perform social roles in the system that recognizes them.  SocialBeing includes elements of Organization (e.g., the QueensGuard) as well as the elements of LegalAgent (in that system), so, for example, in modern industrial social systems, the elements of LegalCorporation and Person are instances of SocialBeing. ")

;;; SocialClass-Lifestyle
(isa SocialClass-Lifestyle SocialAttributeType)
(genls SocialClass-Lifestyle ScalarInterval)
(genls SocialClass-Lifestyle SocialStatusAttribute)
(comment SocialClass-Lifestyle "The collection of attributes that indicate a person's social class, as determined by the person's general lifestyle, quality of life, and relative access to the (material and security oriented) desiderata of life.  It may depend on a cultural non-material system of social rank, based on birth, office, manners, vocal accent or other factors.  Members of this collection include LowerMiddleClass, UpperClass, etc.")

;;; SocialGathering
(isa SocialGathering ScriptType)
(genls SocialGathering HumanActivity)
(genls SocialGathering PurposefulAction)
(genls SocialGathering SocialOccurrence)
(comment SocialGathering "The collection of intentional social gatherings of people who have the same or similar purposes in attending, and in which there is communication between the participants.  E.g., a party, a conference, a wedding, etc.
Note:  A group of people waiting to board an elevator is not typically a SocialGathering, even though they share a common purpose, since they are not expected to talk to each other.")

;;; SocialOccurrence
(isa SocialOccurrence ScriptType)
(isa SocialOccurrence TemporalObjectType)
(genls SocialOccurrence CompositePhysicalAndMentalEvent)
(genls SocialOccurrence HumanActivity)
(comment SocialOccurrence "A collection of events; a subset of CompositePhysicalAndMentalEvent.  Each element of SocialOccurrence is an event in which two or more agents (and often many more than two) take part.  Often, elements of SocialOccurrence involve communication among the participating agents.   Usually there are some social occurrences in every culture that have very elaborate role structures (e.g., a lawsuit or a wedding), and some that are fairly simple (e.g., belching at the dinner table).  See also: socialParticipants.")

;;; SocialRitual
(isa SocialRitual ScriptType)
(genls SocialRitual SocialGathering)
(genls SocialRitual Ritual)
(comment SocialRitual "The collection of social events in which some kind of ritual is performed.  E.g., a wedding, an awards ceremony, a baptism, an inauguration, a graduation ceremony, etc.
Note: In Cyc's ontology, the collection Inauguration is not exactly a subset of SocialRitual; e.g., it is not true that (isa The1992InaugurationOfGeorgeBushAsPresidentOfTheUSA  SocialRitual).  This is because there are many aspects to an Inauguration, besides the social ritual aspects.  E.g., there is the political aspect, namely the legitimate change of chief executive of a nation.  The carrying out of the `script' for an inauguration (i.e., the ceremony itself) is an element of the collection SocialRitual. ")

;;; SocialStatusAttribute
(isa SocialStatusAttribute CompositeAttributeType)
(isa SocialStatusAttribute SocialStatusAttributeType)
(genls SocialStatusAttribute AttributeValue)
(comment SocialStatusAttribute "The collection of AttributeValues that pertain to human social status; role or rank (formal or informal) in the surrounding culture.  Most assertions should be made in terms of some specialization of this collection (or an instance of some specialization of this collection).  Members of this collection include: LowerMiddleClass, GoodLooking, FourthGradeLevel, etc.")

;;; SocialStatusAttributeType
(isa SocialStatusAttributeType Collection)
(genls SocialStatusAttributeType SocialAttributeType)
(comment SocialStatusAttributeType "This is a collection of collections.  Each SocialStatusAttributeType is itself a coherent collection of attributes that pertain to rank/status along some particular `dimension' related somehow to `status in society.'  Some sample elements of SocialStatusAttributeType are: SocialStatusAttribute, Glamor, SocialPower, Credibility, EducationLevelAttribute, etc. ")

;;; SolarPoweredDevice
(isa SolarPoweredDevice ExistingObjectType)
(genls SolarPoweredDevice PoweredDevice)
(comment SolarPoweredDevice "A collection of physical devices; a subset of PoweredDevice.  An instance of SolarPoweredDevice is a device which is powered by energy from sunlight.  Examples include solar-powered calculators and solar heating systems.")

;;; Soldier
(isa Soldier OccupationType)
(genls Soldier MilitaryPerson)
(genls Soldier Professional)
(comment Soldier "A person having as a profession a branch of Soldiering")

;;; SoleProprietorship
(isa SoleProprietorship ExistingObjectType)
(genls SoleProprietorship LegalAgent)
(genls SoleProprietorship UnincorporatedOrganization)
(genls SoleProprietorship Organization)
(genls SoleProprietorship Business)
(comment SoleProprietorship "A collection of unincorporated businesses organizations.  An element of SoleProprietorship is a business in which an individual Person (or a married couple) owns, operates, and assumes liability for the business.   A SoleProprietorship may or may not have employees.  It has no shareholders or partners.")

;;; SolidFn
(isa SolidFn CollectionDenotingFunction)
(resultIsa SolidFn TangibleStuffStateType)
(resultGenl SolidFn SolidTangibleThing)
(arg1Isa SolidFn TangibleStuffCompositionType)
(comment SolidFn "A CollectionDenotingFunction.  SolidFn takes as an argument a collection COL, membership in which is based only on physical and/or chemical composition and not on any other property (see TangibleStuffCompositionType).  (SolidFn COL) is the collection of elements of COL that are in the SolidStateOfMatter.  E.g., the ice cubes in my lemonade belong to the collection (SolidFn Water-Fresh).")

;;; SolidStateOfMatter
(isa SolidStateOfMatter StateOfMatter-SolidLiquidGaseous)
(comment SolidStateOfMatter "One of the basic physical states of matter.  Solid objects are characterized at the macroscopic level by definite, persistent boundaries, independent of container.  Examples of things that typically have this AttributeValue are: a piece of wood, a lump of coal, a quartz crystal, a gold ingot stored in Fort Knox, a human skull.")

;;; SolidTangibleProduct
(isa SolidTangibleProduct ProductType)
(isa SolidTangibleProduct ExistingObjectType)
(genls SolidTangibleProduct SolidTangibleThing)
(genls SolidTangibleProduct TangibleProduct)
(comment SolidTangibleProduct "A collection of tangible products.  Each element of SolidTangibleProduct is a tangible product that is a solid, either a solid object (e.g., an automobile) or a stuff in solid form (e.g., lumber).")

;;; SolidTangibleThing
(isa SolidTangibleThing TangibleStuffStateType)
(genls SolidTangibleThing TangibleThing)
(comment SolidTangibleThing "A collection of tangible stuff.  Each element of SolidTangibleThing is a substance that is intrinsically in a SolidStateOfMatter.  For example, AyersRock, the quarter-dollar coin I put in the parking meter, the ice cubes in my lemonade, a paper bag and the bagel inside it.  Collections containing the solid phase of any type of stuff can be created using SolidFn (q.v.).")

;;; Solubility
(isa Solubility MeasurableAttributeType)
(genls Solubility ScalarInterval)
(genls Solubility PhysicalAttribute)
(comment Solubility "A collection of attributes; a subset of PhysicalAttribute.  Each element of Solubility describes how readily some tangible substance dissolves in some kind of liquid.  Different levels of Solubility may be represented with GenericValueFunctions or qualitatively (e.g., WillDissolve, Insoluble).")

;;; Solution
(isa Solution ExistingStuffType)
(genls Solution Mixture)
(comment Solution "A collection of tangible stuffs; a subset of Mixture.  Each instance of Solution is a Mixture of two or more chemically distinct substances.  Solutions are homogeneous, meaning that the composition at any one point in the Mixture is the same as that at any other point.  In contrast, a Suspension is a Mixture in which small discontinuous particles are surrounded by a continuous fluid.  Under normal conditions, the solvent of every Solution has the stateOfMatter LiquidStateOfMatter.  Thus Solutions also normally exhibit the properties of a liquid, since solvents are mainConstituents.  Exceptions to this include Gels, in which 'solid-like' properties of the Solution arise from the highly structured orientation of the solute.  Examples of Solutions: a cup of coffee, a tincture of iodine, some vanilla extract.")

;;; SomethingExisting
(isa SomethingExisting TemporalStuffType)
(genls SomethingExisting TemporalThing)
(comment SomethingExisting "SomethingExisting is the subset of TemporalThing whose elements are more or less static, at least compared to the highly dynamic elements of Event.   The clearest examples of SomethingExisting are tangible things, like people, lakes, stars, the Earth's ionosphere, etc.  Some elements of Intangible, such as agreements and obligations, also exist stably in time over their lifetime (rather than `happening'), and thus both Agreement and Obligation are subsets of (i.e., have the genls) SomethingExisting).")

;;; SomethingToWear
(isa SomethingToWear ExistingObjectType)
(genls SomethingToWear NonPoweredDevice)
(genls SomethingToWear PersonalProduct)
(genls SomethingToWear PortableObject)
(genls SomethingToWear TangibleProduct)
(comment SomethingToWear "A collection of tangible objects.  Each instance of SomethingToWear is an object that an animal (usually a person) wears on its body, i.e., in a WearingSomething event.  It is worth remarking that, in such an event, the wearer doesn't have to exert any intentional effort to continue wearing the object.  For example, shirts remain on people's torsos, hats stay on heads, rings on fingers; once in place, dog collars stay on dogs, saddles stay on horses.  By contrast, a hula hoop is NOT an example of SomethingToWear.  A borderline case is a Purse, which at first blush seems to be something to wear, yet requires carrying by the performer, hence is not a member of this collection.  Similarly, a briefcase is not an SomethingToWear.")

;;; Sound
(isa Sound WavePropagationType)
(genls Sound WavePropagation)
(comment Sound "A collection of events; a subset of WavePropagation.  Each element of Sound is an instance of wave propagation in which longitudinal pressure waves travel through matter.  Includes the elements of AudibleSound, UltraSound, and temblors.")

;;; SoundInformationBearingThing
(isa SoundInformationBearingThing TemporalStuffType)
(genls SoundInformationBearingThing InformationBearingThing)
(genls SoundInformationBearingThing InformationBearingWavePropagation)
(genls SoundInformationBearingThing AudibleSound)
(comment SoundInformationBearingThing "A collection of information bearing things (IBTs); a subset of InformationBearingWavePropagation.  Each element of SoundInformationBearingThing is an audible sound that contains information: a spoken utterance, the performance of a sonata, a Morse code message tapped out on a prison wall, etc.")

;;; South-Directly
(isa South-Directly UnitVector-Precise)
(isa South-Directly GeographicalDirection)
(genlAttributes South-Directly South-Generally)
(comment South-Directly "Due South, an element of TerrestrialDirection.")

;;; South-Generally
(isa South-Generally GeographicalDirection)
(comment South-Generally "The general direction of South.  The element of VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as South-Directly.")

;;; SouthEast-Directly
(isa SouthEast-Directly UnitVector-Precise)
(isa SouthEast-Directly GeographicalDirection)
(comment SouthEast-Directly "The precise Southeast direction from any geographic point other than a pole.")

;;; SouthEast-Generally
(isa SouthEast-Generally GeographicalDirection)
(comment SouthEast-Generally "The general direction of SouthEast.  The VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as SouthEast-Directly.")

;;; SouthWest-Directly
(isa SouthWest-Directly UnitVector-Precise)
(isa SouthWest-Directly GeographicalDirection)
(comment SouthWest-Directly "The precise Southwest direction from any geographic point other than a pole.")

;;; SouthWest-Generally
(isa SouthWest-Generally GeographicalDirection)
(comment SouthWest-Generally "The general direction of SouthWest.  The VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as SouthWest-Directly.")

;;; SpaceInAHOC
(isa SpaceInAHOC ExistingObjectType)
(genls SpaceInAHOC Cavity)
(genls SpaceInAHOC HumanOccupationConstruct)
(comment SpaceInAHOC "A collection of open spatial regions.  Each element of SpaceInAHOC is a space found inside some instance of HumanOccupationConstruct (= HOC).  Elements include all major spaces inside any HumanOccupationConstruct, including not only rooms (elements of RoomInAConstruction), but halls, elevator shafts, attics, stairwells, and the spaces inside trains, cars, and airplanes that are designed for human occupation.  Other building parts which are not open spatial regions (e.g., walls, plumbing, etc.) are NOT included in this collection; cf. PartOfBuilding.  SpaceInAHOC is disjointWith the collection OutdoorLocation.")

;;; SpacePoint
(isa SpacePoint ExistingObjectType)
(genls SpacePoint GeometricThing)
(comment SpacePoint "A collection of geometrical things. Each SpacePoint is an extensionless geometrical point, and thus exists in zero dimensions.")
(synonymousExternalConcept SpacePoint SENSUS-Information1997 "SPACE-POINT")
(synonymousExternalConcept SpacePoint SENSUS-Information1997 "ZERO-D-LOCATION")

;;; SpaceTransportationEvent
(isa SpaceTransportationEvent TemporalObjectType)
(genls SpaceTransportationEvent TransportationEvent)
(comment SpaceTransportationEvent "The collection of all space transportation event.")

;;; Spacecraft
(isa Spacecraft ExistingObjectType)
(genls Spacecraft TransportationDevice)
(comment Spacecraft "The collection of transportation devices deployed entirely in outer space, or whose trajectories leave the atmosphere of the planet they're launched from, in order to orbit the planet or to travel away from it beyond its gravitational field.")

;;; SpanishLanguage
(isa SpanishLanguage LivingLanguage)
(comment SpanishLanguage "The indigenous language of Spain and, secondarily, most of Central and South America")

;;; SpatialPredicate
(isa SpatialPredicate RelationType)
(genls SpatialPredicate Predicate)
(genls SpatialPredicate CotemporalPredicate)
(comment SpatialPredicate "The collection predicates about spatial relationships.  Note that when an element of SpatialPredicate has an instance of Group as one of its arguments, the predicate applies to all the members of that group.")
(synonymousExternalConcept SpatialPredicate SENSUS-Information1997 "SPATIAL-RELATION")

;;; SpatialThing
(isa SpatialThing ObjectType)
(genls SpatialThing Individual)
(comment SpatialThing "The collection of all things that have a spatial extent or location relative to some other SpatialThing.  Note well that to say that an entity is a member of this collection is to remain agnostic about two issues.  First, a SpatialThing may be PartiallyTangible, like Texas-State or wholly Intangible, like the ArcticCircle or a line or a plane referenced in a geometric theorem.  Second, although we do insist on location relative to another SpatialThing, a SpatialThing may or may not be located in the physically observable universe.  It is far from clear that all SpatialThings are so located:  eg, a trajectory through the phase space of some physical system.  If the intent is to imply location in the empirically observable cosmos, the user should employ this collection's spec, SpatialThing-Localized.")

;;; SpatiallyDisjointRegionType
(isa SpatiallyDisjointRegionType Collection)
(genls SpatiallyDisjointRegionType RegionType)
(comment SpatiallyDisjointRegionType "A collection of collections; a subset of RegionType.  Each element of SpatiallyDisjointRegionType is a collection of geographical regions, none of whose elements spatially intersects another.  For example, the collection State-UnitedStates is an element of SpatiallyDisjointRegionType, because the territories of U.S. states do not overlap.  Other examples of collections that are elements of SpatiallyDisjointRegionType: CanadianProvince, IndependentCountry, City, and Colony.  A non-example is EcologicalRegion, since ecological regions can overlap.")

;;; Speaking
(isa Speaking TemporalStuffType)
(isa Speaking DefaultDisjointScriptType)
(genls Speaking MakingAnOralSound)
(genls Speaking IBTGeneration)
(comment Speaking "The collection of actions generating 
Utterances which are speech. A subset of Talking: hence,
Speaking normally includes
only those Utterances using Language as a communication convention, unlike
other Utterances, such as Booing and Cheering.")

;;; SpecifiedInformationBearingThingType
(isa SpecifiedInformationBearingThingType Collection)
(genls SpecifiedInformationBearingThingType ExistingObjectType)
(comment SpecifiedInformationBearingThingType "A collection of collections.  Each element of SpecifiedInformationBearingThingType is a subset of InformationBearingThing, all of whose instances have in common all (or nearly all) of their information content and their primary media form.  For example, the collection specified by `the book War and Peace' is an element of SpecifiedInformationBearingThingType; so is the collection described by `the movie Jaws' (even though both the novel `War and Peace' and the film `Jaws' were issued in slightly different variants).  Heterogeneous collections, however, such as those defined by `books written by Mark Twain', or by `the Jaws story in all its forms [movie, book, comic book, tape]', are NOT elements of SpecifiedInformationBearingThingType, although they are subsets of InformationBearingThing.  Examples of SpecifiedInformationBearingThingType: AdventuresOfHuckleberryFinnTheBook, OS-2, Lotus123, PeloponnesianWarHistoryByThucydides-TheBook, CitizenKane-TheMovie.")

;;; SpeechPart
(isa SpeechPart LinguisticObjectType)
(genls SpeechPart NonlexicalLinguisticObject)
(comment SpeechPart "The collection of all parts of speech.  Subsets of SpeechPart include Preposition, Adverb, SimpleNoun, Determiner, QuantifyingIndexical, Punctuation-SP, Pronoun).  To link a specific word with the parts of speech for which it has forms, see posForms; e.g., You-TheWord has aPronoun form, And-TheWord has a CoordinatingConjunction form, Hit-TheWord has both SimpleNoun and Verb forms.")

;;; Speed
(isa Speed DerivedNumericAttributeType)
(genls Speed ScalarInterval)
(genls Speed PhysicalAttribute)
(genls Speed Rate)
(comment Speed "A subset of Rate.  Each element of Speed is a rate of change in position (of an object, wave front, etc.).  Elements of Speed may be either fixed amounts, such as (MilesPerHour 55), or a range, such as WalkingSpeed or Calm-WindSpeed.  See UnitOfSpeed for the units used by Cyc to measure speeds.")

;;; SpermCell
(isa SpermCell ExistingObjectType)
(genls SpermCell EukaryoticCell)
(genls SpermCell AnimalBLO)
(comment SpermCell "A subset of Cell.  SpermCell is the collection of specialized gamete cells which are produced by meiosis in the reproductive tract of male animals.  Each sperm cell usually has half the number of chromosomes that regular body cells do, and when it fertilizes an ovum, the ovum becomes a zygote and continues to develop into a mature individual.  See also MaleAnimal, SexualReproductionEvent.")

;;; SphereFn
(isa SphereFn ShapeFunction)
(resultIsa SphereFn ThreeDimensionalShape)
(resultIsa SphereFn AbstractShape)
(arg1Isa SphereFn Distance)
(comment SphereFn "The Cyc function SphereFn is a ShapeFunction (q.v.).  (SphereFn D) returns an abstract SphereShape which has diameter D.  Examples: the shape of a 2-inch rubber ball is SphereShape; the ball fitsIn the shape denoted by (SphereFn (Inch 2)). The shape of PlanetEarth is also SphereShape; Earth fitsIn the shape denoted by (SphereFn (Mile 8000)).")

;;; SpokenCommunicating
(isa SpokenCommunicating TemporalStuffType)
(isa SpokenCommunicating ScriptType)
(genls SpokenCommunicating AudioCommunicating)
(genls SpokenCommunicating HumanActivity)
(comment SpokenCommunicating "A collection of information transfer events; a subset of AudioCommunicating.  Each element of SpokenCommunicating is a transmission of sound-borne verbal information by spoken words between two (or more) agents.  The communication may be one-way or two-way (or multi-way); see Communicating.  Examples of SpokenCommunicating: a telephone conversation, a classroom discussion, the GettysburgAddress-Speech.  Note that the collection Speaking contains events in which a person generates spoken language but doesn't necessarily communicate it; e.g., a person practicing a speech alone.  If someone who is speaking is also communicating, then her speaking is a subEvents of some element of SpokenCommunicating.  Every element of SpokenCommunicating has at least one communicationToken which is an element of Utterance.")
(synonymousExternalConcept SpokenCommunicating SENSUS-Information1997 "SPEECH-ACT")

;;; SportsEvent
(isa SportsEvent TemporalObjectType)
(isa SportsEvent DefaultDisjointScriptType)
(genls SportsEvent AthleticActivity)
(comment SportsEvent "The collection of individual sports events, such as a single game of baseball, an individual 100M race, etc.  An entire sandlot baseball game would be a SportsEvent, but one inning wouldn't be.  A double-header could be viewed as a single SportsEvent, though, even though each half of it was also a SportsEvent.  Several SportsEvents can be organized into a SportsFormalCompetition.  One single double-header evening of baseball would not be a SportsFormalCompetition, nor one single tennis match, etc.  
note:  The collection SportsEvent does not include every AthleticActivity; e.g., Rocky training for his boxing match, a group of kids racing to the bus stop, a person skiing for pleasure, etc. are not instances of SportsEvent.")

;;; Spreadsheet
(isa Spreadsheet ExistingObjectType)
(genls Spreadsheet StructuredInformationSource)
(genls Spreadsheet InformationBearingObject)
(comment Spreadsheet "A collection of information bearing objects (IBOs); a subset of StructuredInformationSource.  Each element of Spreadsheet is an IBO that presents (usually numeric) data in a two-dimensional matrix of cells that are organized into rows and columns.  A spreadsheet may be produced by hand with pencil and paper or generated by a computer SpreadsheetProgram such as Lotus123.  Associated with every spreadsheet are mathematical definitions of some of its cells as a function of other cells in that spreadsheet.")

;;; SpringSeason
(isa SpringSeason TemporalObjectType)
(genls SpringSeason SeasonOfYear)
(comment SpringSeason "The collection of Spring seasons.  In the TemperateClimateCycle, Spring is the time ice melts, the average temperature starts to increase, the days get longer, plants begin to put forth buds, etc.  SpringSeason represents the climatic aspects of spring; see CalendarSpring for the purely temporal aspects of spring.")

;;; SqrtFn
(isa SqrtFn FunctionFromQuantitiesToQuantities)
(resultIsa SqrtFn RealNumber)
(arg1Isa SqrtFn RealNumber)
(comment SqrtFn "SqrtFn is the unary mathematical function that returns the square root of its argument; e.g., (SqrtFn 4) returns 2.")

;;; SquareMile
(isa SquareMile UnitOfArea)
(isa SquareMile FPSUnitOfMeasure)
(isa SquareMile UnitOfMeasureNoPrefix)
(resultIsa SquareMile Area)
(resultIsa SquareMile ScalarInterval)
(argsIsa SquareMile CycSystemRealNumber)
(comment SquareMile "The measurement function used in Cyc to represent the square mile used as a unit of measure for area, within the British (FPS) system.  See also FPSUnitOfMeasure, UnitOfMeasure.")

;;; SquaredFn
(isa SquaredFn FunctionFromQuantitiesToQuantities)
(resultIsa SquaredFn RealNumber)
(arg1Isa SquaredFn RealNumber)
(comment SquaredFn "SquaredFn is the unary mathematical function that returns the square of the real number taken as its argument; e.g., (SquaredFn 9) returns 81.")

;;; StandardUnitOfMeasure
(isa StandardUnitOfMeasure RelationType)
(genls StandardUnitOfMeasure UnitOfMeasure)
(comment StandardUnitOfMeasure "StandardUnitOfMeasure is a subset of UnitOfMeasure, the collection of units used to measure quantifiable properties.  StandardUnitOfMeasure contains those units which are considered the standardUnit for the property they measure.  Some examples: the standard UnitOfVolume is the Liter; the standard UnitOfTemperature is the DegreeKelvin; the standard UnitOfMass is the Kilogram.  Every unit type has one unit designated as the standard unit for that type.")

;;; StartFn
(isa StartFn ReifiableFunction)
(isa StartFn IndividualDenotingFunction)
(resultIsa StartFn TimePoint)
(arg1Isa StartFn TemporalThing)
(comment StartFn "StartFn is a function that takes a TemporalThing and returns the TimePoint it began.  Thus:  (startingPoint ?X (StartFn ?X))")

;;; Starvation
(isa Starvation ScriptType)
(isa Starvation TemporalStuffType)
(genls Starvation SingleDoerAction)
(genls Starvation DestructionEvent)
(comment Starvation "A collection of events.  Each instance of Starvation is an event in which
an Animal is so hungry as to be Starving.  If prolonged, it results in death.  NB:  Note that this is a SingleDoerAction (q.v.), so it doesn't cover cases wherein one creature withholds food from another.")

;;; Starving
(isa Starving LevelOfHunger)
(isa Starving OrderOfMagnitudeInterval)
(comment Starving "A LevelOfHunger (q.v.) one step beyond Hungry.  Note: this
constant expresses a static AnimalPhysiologicalAttribute, not a
dynamic process.  For the Event that involves Starving, see
Starvation.")

;;; State-Geopolitical
(isa State-Geopolitical ExistingObjectType)
(genls State-Geopolitical CountrySubsidiary)
(genls State-Geopolitical GeopoliticalEntity)
(comment State-Geopolitical "A collection of geopolitical entities which are sub-divisions of countries.  An element of State-Geopolitical is a ``state-equivalent,'' i.e., a region whose political government is at the very next administrative level down from the national level.  In different countries, such a main geopolitical subdivision may be called variously a `region', a `state', a `province', a `prefecture', a `department', a `parish', or something else.  In the U.S.A., it is called a `state'.  See also Province.")

;;; State-UnitedStates
(isa State-UnitedStates SpatiallyDisjointRegionType)
(genls State-UnitedStates State-Geopolitical)
(comment State-UnitedStates "A collection of geopolitical sub-regions.  Each of the (currently 50) elements of State-UnitedStates is a State in the UnitedStatesOfAmerica; i.e., Alabama-State, Alaska-State, Arizona-State, Arkansas-State, etc.")

;;; StateCapital
(isa StateCapital ExistingObjectType)
(genls StateCapital CapitalCityOfRegion)
(genls StateCapital City)
(comment StateCapital "A collection of cities.  Each element of StateCapital is a city that is the capital city of the geopolitical state in which it is located.  Note that this collection is for capitals of all the elements in State-Geopolitical (q.v.), not just members of the subset State-UnitedStates.  Examples: CityOfJuneauAK, CityOfLansingMI, CityOfAnnapolisMD, Quebec City, Edmonton, Perth (Austr.), Xian, Guangzhou, Lahore.")

;;; StateOfMatter-SolidLiquidGaseous
(isa StateOfMatter-SolidLiquidGaseous PrimitiveAttributeType)
(genls StateOfMatter-SolidLiquidGaseous ScalarInterval)
(genls StateOfMatter-SolidLiquidGaseous PhysicalAttribute)
(comment StateOfMatter-SolidLiquidGaseous "StateOfMatter-SolidLiquidGaseous is the collection of attributes which describe the basic physical states that pieces of matter can be in.  Elements of this collection are SolidStateOfMatter, SemiSolidStateOfMatter, LiquidStateOfMatter, and GaseousStateOfMatter.  Although the chemical composition of a substance does not change when its basic physical state changes, many of its intrinsic physical properties do change--including its density, viscosity, brittleness, color, size, etc.  In addition, changing the basic state of pieces of certain compounds may alter their chemical composition (e.g., using distillation to separate alcohol from other fluids) and as a result may effect toxicity and other biological factors.")

;;; StaticSituation
(isa StaticSituation TemporalStuffType)
(genls StaticSituation SomethingExisting)
(genls StaticSituation Situation)
(comment StaticSituation "StaticSituations are states of affairs between two or more things, persisting statically over some time interval. StaticSituations always have a temporal extent; they usually have a tangible and spatial extent.   As an example, consider the situation of Bill Clinton sitting in his easy chair on the evening of 7/4/96.   There are participant objects such as Bill and the chair, there are relationships such as the seat of the chair supporting his bottom and his weight being off his feet, etc.   It happens at a particular time and place, but there is no active, dynamic Event that is going on. ")

;;; Stealing-Generic
(isa Stealing-Generic TemporalObjectType)
(isa Stealing-Generic DefaultDisjointScriptType)
(genls Stealing-Generic UnintendedLossOfUserRights)
(genls Stealing-Generic TransferringPossession)
(genls Stealing-Generic TakingSomething)
(comment Stealing-Generic "A collection of events; a subset of TakingSomething.  In an instance of Stealing-Generic, one Agent takes a possession of another agent's without the owner's permission (and possibly without the owner's knowledge).  Stealing is commonly considered criminal in most contexts.
Note:  It is not the case that every use of another's things without explicit permission is categorized as an instance of Stealing-Generic.  An informal agreement or `understanding' may exist between Agents that would cover casual `borrowing' (and excuse it from being stealing); the closer the relationship the more expensive and personal the items that fall into such an exclusion.  E.g., even if I am in a perfect stranger's office, and they have left for a minute, I feel it is not stealing to take one of their Kleenexes if I am about to sneeze.")

;;; Steamed
(isa Steamed PreparationAttribute)
(genlAttributes Steamed Cooked)
(comment Steamed "The attribute Steamed is a specialized form of Cooked.  Food that is Steamed has been prepared in an event of SteamingFood.")

;;; SteamingFood
(isa SteamingFood DefaultDisjointScriptType)
(genls SteamingFood CookingFood)
(comment SteamingFood "cooking food by surrounding it in steam.")

;;; SteppeClimateCycle
(isa SteppeClimateCycle ClimateCycleType)
(genls SteppeClimateCycle TemperateClimateCycle)
(comment SteppeClimateCycle "A collection of annual climate cycles.  Each element of SteppeClimateCycle is a year-long event consisting of weather occurring (typically) on the steppes (i.e., temperate zone semiarid plains).  Characteristics of a steppe climate include: little precipitation, but wetter than a desert; wide temperature extremes, from very hot in the day to cold at night.")

;;; Stock
(isa Stock ExistingObjectType)
(genls Stock SalesAgreement)
(genls Stock AuthorizedAgreement)
(comment Stock "A collection consisting of all shares of stock.  An element of Stock is a share of ownership in some instance of LegalCorporation; its owner is an Agent who is recorded as a shareholder in the official records of that corporation.  A company may have several classes of Stock, such as Common, Preferred, Class A, Class B, etc.")

;;; StockCertificate
(isa StockCertificate ExistingObjectType)
(genls StockCertificate OfficialDocument)
(genls StockCertificate IDDocument)
(comment StockCertificate "A collection of official documents.  Each element of StockCertificate is a document issued by a company to one of its shareholders, certifying the shareholder's ownership of some number of shares of stock in that corporation.")

;;; StockHoldings
(isa StockHoldings ExistingObjectType)
(genls StockHoldings FinancialAssetHoldings)
(comment StockHoldings "A collection of partially tangibles; a subset of FinancialAssetHoldings.  Each instance of StockHoldings is a group of Stock shares owned by an Agent.  It may consist of shares in only one company or different groups of shares in multiple companies.")

;;; StockInFn
(isa StockInFn CollectionDenotingFunction)
(resultIsa StockInFn Collection)
(resultGenl StockInFn Stock)
(arg1Isa StockInFn LegalCorporation)
(comment StockInFn "StockInFn is a Cyc function, specifically a CollectionDenotingFunction. It is used to represent a collection of stock in a particular company.  (StockInFn COMPANY) applied to a LegalCorporation COMPANY returns the collection of all shares of Stock in that corporation.")

;;; StockType
(isa StockType Collection)
(genls StockType ExistingObjectType)
(comment StockType "A collection of collections.  An instance of StockType is a collection of all shares of stock of a particular type in a particular corporation.  For example, ``General Motors Class E Stock''.")

;;; Stomach
(isa Stomach AnimalBodyPartType)
(isa Stomach UniqueAnatomicalPartType)
(genls Stomach Organ)
(comment Stomach "The collection of all stomachs.  An individual Stomach is an Organ which is part of the DigestiveSystem that churns and digests Food.")

;;; StoneStuff
(isa StoneStuff TangibleStuffCompositionType)
(genls StoneStuff StructuralSupportStuff)
(genls StoneStuff 
  (SolidFn EarthStuff))
(comment StoneStuff "A collection of tangible things; a subset of EarthStuff.  Each element of StoneStuff is a piece or portion of rock or stone; e.g., MountRushmoreMonument.")

;;; Stream
(isa Stream ExistingObjectType)
(genls Stream BodyOfWater)
(comment Stream "Stream is the generic collection for natural, flowing bodies of water, including everything from great rivers to tiny creeks.  Every stream flows in (see in-ContOpen) some conduit (see FluidConduit) such as a streambed or riverbed. Examples: AmazonRiver, LittleMissouriRiver, WoundedKnee-Creek.  Cf. River, Creek.  Note that riverbanks are not streams nor are they part of streams, but rather mark the edge of a stream.")

;;; Street-Generic
(isa Street-Generic ExistingObjectType)
(genls Street-Generic UrbanArea)
(genls Street-Generic PathForWheeledVehicles)
(comment Street-Generic "The subcollection of PathForWheeledVehicles thatcontains all streets inside of cities and towns.")

;;; StreetAddress
(isa StreetAddress ObjectType)
(genls StreetAddress Address-LocationDesignator)
(comment StreetAddress "A collection of strings. Each element of StreetAddress is a string that denotes a street number and street name.  For example, `3721 Executive Center Drive', the street address of Cycorp.")

;;; Strength
(isa Strength ScriptPerformanceAttributeType)
(genls Strength AnimalPhysiologicalAttribute)
(genls Strength ScalarInterval)
(genls Strength ScriptPerformanceAttribute)
(comment Strength "Strength is the ScriptPerformanceAttributeType for describing actions performed by exerting nontrival force at the times it is necessary.")

;;; StructuralSupportStuff
(isa StructuralSupportStuff ExistingStuffType)
(genls StructuralSupportStuff SolidTangibleThing)
(comment StructuralSupportStuff "A collection of tangibles. Each element of StructuralSupportStuff is a hard, rigid substance typically used for structural support.  For example, the instances of Wood, BoneTheStuff, StoneStuff.")

;;; StructuredInformationSource
(isa StructuredInformationSource TemporalStuffType)
(isa StructuredInformationSource ObjectType)
(genls StructuredInformationSource InformationBearingThing)
(comment StructuredInformationSource "A collection of information bearing things (IBTs).  Each element of StructuredInformationSource is an information bearing object or event in which bits of information are represented as related in a systematic way that is easily characterized by some type of formal structure, including spatial or architectural terms (used metaphorically).  Examples include: a database organized in fields and values; a spreadsheet organized in rows and columns with entries; an organizational tree diagram with nodes and branches; a topographical map.")

;;; Student
(isa Student OccupationType)
(genls Student Person)
(comment Student "A collection of persons.  Each element of Student is someone who studies at an academic institution.  This collection includes students at all levels of study in all types of educational institutions.")

;;; StudentStatusAttribute
(isa StudentStatusAttribute AttributeType)
(genls StudentStatusAttribute AttributeValue)
(comment StudentStatusAttribute "A collection of attributes.  Each StudentStatusAttribute indicates the currency or bureaucratic phase of processing a student's participation in an educational course or institution; elements of this collection include Graduate, Enrolled, etc.")

;;; StuffType
(isa StuffType Collection)
(genls StuffType Collection)
(comment StuffType "A collection of collections.   Every element of StuffType is a collection of substances which have the following logical property: such a substance may be subdivided, spatially or temporally, and the resultant portions will also be instances of the StuffType collection to which the original substance belonged.  Elements of StuffType may be collections of any kind of stuff, tangible or intangible, temporal or atemporal, which has that property.  (The notion of StuffType corresponds roughly to that of a mass noun in English.)   Thus, if COL is some collection that is an element of StuffType, and ITEM is an element of COL, then if ITEM is divided into two (or more) segments, each segment is also an element of COL.  Examples of StuffType: Water (the collection of all portions of water, whose spatial sub-portions are also water); Breathing (the collection of all events wherein someone breathes for any amount of time, whose temporal sub-events are also instances of Breathing).  Note that `taking a complete breath' would NOT be stufflike, since not every temporal interval of breathing would be a complete breath from start to finish; cf. ObjectType.  See also these four collections: StuffType, ObjectType, ExistingStuffType, and ExistingObjectType.")

;;; SubAbs
(isa SubAbs Format)
(comment SubAbs "If the predicate P has entry format SubAbs for one of its argument positions N, then, given some fixed set of arguments in the other positions, mutiple assertions may be added to the KB so long as each term appearing in argument position N is a subAbstrac of some common Entity. Note that the case where the entity itself appears as arg N is allowed, since for all x, (subAbstrac X X) is true.  Let's consider an example.  The arg2Format of laterSubAbstractions is SubAbs.  Thus Cyc will allow one to assert that laterSubAbstractions of SamZilkerAsATeenager include SamZilkerAsAnAdult, and SamZilkerDuringHisFirstMarriage, etc., so long as all of those are known to be subabstractions of the very same entity, in this case the one representing Sam Zilker.")

;;; SubAtomicParticle
(isa SubAtomicParticle ExistingObjectType)
(genls SubAtomicParticle MicroscopicScaleObject)
(comment SubAtomicParticle "A collection of objects; a subset of MicroscopicScaleObject.  Every instance of SubAtomicParticle is a physical particle smaller than an atom.  Major subsets of SubAtomicParticle include Electron, Proton, and Neutron.")

;;; SubPathBetweenFn
(isa SubPathBetweenFn NonPredicateFunction)
(resultIsa SubPathBetweenFn Path-Simple)
(arg1Isa SubPathBetweenFn Path-Simple)
(arg2Isa SubPathBetweenFn Thing)
(arg3Isa SubPathBetweenFn Thing)
(comment SubPathBetweenFn "Given a path PATH and different points X and Y on it, (SubPathBetweenFn PATH X Y) gives a unique subpath SUB of PATH that is between X and Y.  This function should not be used without the context of a PathSystem because only with the reference to a path system can we be certain about the existence of such a subpath (e.g., Austin and Texas are different points on I-35, but there is no subpath of I35 that is between Austin and Texas).  To put this in another way, let SYS be any path system.  If PATH is a path in SYS and X and Y are different points in SYS and are also points on PATH, (SubPathBetweenFn PATH X Y) is the only subpath (in SYS) of PATH that is between X and Y.  See pathInSystem.  Note that this function is not defined on the cartesian product Path-Simple x Thing x Thing, but on a proper subset of it.")

;;; SubProcessSlot
(isa SubProcessSlot PredicateCategory)
(genls SubProcessSlot Role)
(genls SubProcessSlot TemporalPartSlot)
(comment SubProcessSlot "A collection of predicates.  Each element of SubProcessSlot is a binary predicate that relates one instance of Event to a second event that is in some way a part of the first.  Examples: subEvents, inPreparationFor, manufacturingSteps, outboundLegOfRoundTrip.")

;;; Submarine
(isa Submarine ProductType)
(isa Submarine ExistingObjectType)
(genls Submarine TransportationDevice-Vehicle)
(genls Submarine Ship)
(comment Submarine "Submarine is the collection of all boats that can operate underwater.")

;;; Subway
(isa Subway ExistingObjectType)
(genls Subway Railway)
(comment Subway "The collection of all underground Railways, under the surfaces of major cities.  Some parts of Subways may be in trenches, on bridges or on elevated tracks, but most of a Subway is in underground tunnels.")

;;; SubwayStation
(isa SubwayStation ExistingObjectType)
(genls SubwayStation HumanOccupationConstruct)
(comment SubwayStation "The collection of all subway (underground railroad) stations.  These are usually located at least partly underground, on subway tracks, and their primary purpose is to be a place where subway trains discharge and receive passengers.")

;;; SuccessorFn
(isa SuccessorFn NonPredicateFunction)
(resultIsa SuccessorFn Integer)
(arg1Isa SuccessorFn Integer)
(comment SuccessorFn "(SuccessorFn ?N) denotes the next Integer after ?N.  This is somewhat broader than the ordinary ''successor'' function on natural numbers, since SuccessorFn applies to all Integers.")

;;; SummerSeason
(isa SummerSeason TemporalObjectType)
(genls SummerSeason SeasonOfYear)
(comment SummerSeason "The collection of Summer seasons.  In the TemperateClimateCycle, Summer is generally the time of greatest warmth.  SummerSeason represents the climatic aspects of summer.  For its purely temporal aspects, see CalendarSummer.")

;;; Sunny
(isa Sunny WeatherAttribute)
(genlAttributes Sunny 
  (HighAmountFn Visibility))
(comment Sunny "The WeatherAttribute that characterizes an OutdoorLocation at which the sun is shining brightly.")

;;; Sunrise
(isa Sunrise ScriptType)
(isa Sunrise TemporalObjectType)
(genls Sunrise QualitativeTimeOfDay)
(comment Sunrise "Each Sunrise is an Event where, at a given location, the Sun appears to clear the horizon as it `rises'.  This event is construed to occur regardless of the visibility of the Sun due to obscuring objects such as clouds.  Every Sunrise is contiguousAfter a Dawn, and every DaytimeHours is temporallyStartedBy a Sunrise.")

;;; Sunset
(isa Sunset ScriptType)
(isa Sunset TemporalObjectType)
(genls Sunset QualitativeTimeOfDay)
(comment Sunset "Each Sunset is an Event where, at a given location, the Sun occludes the horizon as it appears to set.  This event is construed to occur regardless of the visibility of the Sun due to obscuring objects such as clouds.  There is a Dusk which is contiguousAfter each Sunset.  Every DaytimeHours is temporallyFinishedBy a Sunset, as is every Afternoon.")

;;; SuperconductorResistance
(isa SuperconductorResistance ElectricalResistance)
(comment SuperconductorResistance "A measurable physical attribute.  SuperconductorResistance is the element of ElectricalResistance that describes an object which has absolutely no resistance to the passage of electricity.  That level of resistance is found only in superconductors.")

;;; SupplyCompany
(isa SupplyCompany ExistingObjectType)
(genls SupplyCompany OrganizationWithBusinessCustomers)
(comment SupplyCompany "A collection of commercial organizations.  An element of SupplyCompany is a company whose MainFunction is selling supplies to other companies.  For example, elements of ElectricalSupplyCompany or grocery Wholesalers.")

;;; SupposedToBeMicrotheory
(isa SupposedToBeMicrotheory MicrotheoryType)
(genls SupposedToBeMicrotheory Microtheory)
(comment SupposedToBeMicrotheory "The collection of microtheories that describe how things are 'supposed to be' according to some agent or agents.  This technique can be used to represent things like the policies of a company, the laws of a country, the tenets of a religion, the rules of proper conduct for employees of a particular corporation, etc.  The assertions in a SupposedToBeMicrotheory may or may not describe the world as it actually is.  Examples: BasicWesternLegalConceptsMt, SportsRulesOf-BoxingSportsEvent, CycStaffCalendar, and OfficeCodeOfConductMt.")

;;; Surface-Abstract
(isa Surface-Abstract ObjectType)
(genls Surface-Abstract Surface-Generic)
(genls Surface-Abstract AbstractShape)
(comment Surface-Abstract "The collection of all abstract mathematical surfaces - not real physical ones that we can touch.")

;;; Surface-Generic
(isa Surface-Generic ObjectType)
(genls Surface-Generic SpatialThing)
(comment Surface-Generic "The collection of all surfaces (including Surface-Abstract and Surface-Physical); each is a SpatialThing that has extent in at least two dimensions, but either does not have a thickness (i.e. a two dimensional object) or has an insignificant thickness compared with its length and width (Note: if the object is a closed surface, e.g. an apple skin, any significant sub region must have insignificant thickness compared to its length and width).  Surfaces may be two or three dimensional, tangible or intangible.  Such a surface may be curved, folded, crumpled, or flat.  Thus a Euclidian two dimensional disc, a dinner plate, a crumpled sheet of paper, the top of a desk, a ribbon, and a basket ball's skin are exemplars of a Surface-Generic.  They may be spatially connected or not spatially connected.  Thus, both a frisbee and the Milky Way galaxy (as it appears in the sky) are exemples.  Negative exemplars include an entire basket ball (i.e. its skin plus the cavity inside), a planet, and a euclidian solid sphere. All of these are negative exemplars because thickness is not significantly smaller than length and width.  If an object has an areaOfObject it must be a Surface-Generic.  If the object `has two sides' (e.g. a sheet of paper, a frisbee, but not Texas-State or an InsideSurface of a cave or room.  (See OneSidedVsTwoSidedObjectNote.) The areas on either side of a Surface-Generic are equal.")

;;; Surface-Physical
(isa Surface-Physical ExistingObjectType)
(genls Surface-Physical Surface-Generic)
(genls Surface-Physical PartiallyTangible)
(comment Surface-Physical "The collection of all of real physical (hence technically three-dimensional) surfaces.  The thickness of a Surface-Physical is much less than its average length or width, but it is not of zero thickness.  A Surface-Physical may have holes, tears, and may be unconnected, in multiple pieces.")

;;; SurfaceOnTangibleObject
(isa SurfaceOnTangibleObject RegionType)
(genls SurfaceOnTangibleObject SheetOfSomeStuff)
(genls SurfaceOnTangibleObject Surface-Physical)
(comment SurfaceOnTangibleObject "The collection of all physical surfaces (or portions or patches of surfaces) of TangibleThings.")

;;; Surgery
(isa Surgery TemporalObjectType)
(isa Surgery DefaultDisjointScriptType)
(isa Surgery ProductType)
(genls Surgery MedicalCareEvent)
(comment Surgery "A collection of actions.  An instance of Surgery is a medical care event in which a medical professional cuts a part of the living body, either to examine what's inside (a diagnostic, exploratory surgery) or to treat an ailment (a MedicalTreatmentEvent).  Examples of surgeries which are medical treatments include: removal of a foreign body, cancer, an organ that's causing trouble, etc.; insertion of a medical device (e.g, a pacemaker); or repair of some internal structure.")

;;; Surprise
(isa Surprise FeelingAttributeType)
(genls Surprise FeelingAttribute)
(comment Surprise "Impression due to something unexpected, unanticipated, or startling.  This is a collection; for an explanation of a typical FeelingAttributeType, see Happiness.  Some more specialized FeelingAttributeTypes than Surprise are Disappointment and Wonder-Admiration.")

;;; Suspension
(isa Suspension ExistingStuffType)
(genls Suspension Mixture)
(comment Suspension "A collection of tangible stuffs; a subset of Mixture.  Each instance of Suspension is a mixture which has exactly one suspendingFluid and at least one kind of suspendedPart.  Each of the suspendedParts is an instance of Particle, and there are a mob of them.  Some suspensions are fairly stable (e.g., mayonnaise), while others tend to separate quickly (e.g., sugar stirred into cold lemonade).  Other examples of Suspension: a cloud, a spray of aerosol deodorant.")

;;; Swallowing
(isa Swallowing TemporalObjectType)
(isa Swallowing DefaultDisjointScriptType)
(genls Swallowing BodyMovementEvent)
(genls Swallowing BiologicalIntakeEvent)
(genls Swallowing BodilyFunctionEvent)
(comment Swallowing "The collection of actions in which an Animal moves a solid or a liquid from its Mouth to its Stomach.  A type of BodilyFunctionEvent as well as a type of BodyMovementEvent.")

;;; Switzerland
(isa Switzerland IndependentCountry)
(isa Switzerland Entity)
(comment Switzerland "The nation of Switzerland as it has existed throughout time; includes both its physical and its political aspects.")

;;; SymbolicObject
(isa SymbolicObject ExistingObjectType)
(genls SymbolicObject InformationBearingObject)
(comment SymbolicObject "A collection of objects.  Each element of SymbolicObject by convention symbolizes some thing or event or achievement, without describing it propositionally in any detail.  Examples include national flags, military medals and ribbons, school colors, an Oscar, a Crucifix, a caduceus, trademark logos of commercial brands.  Elements of SymbolicObject need not have propositional information contents; probably most do not.  Rather, symbolic objects are typically associated (by an informed interpreter) with the particular entities that originated or appropriated them.  To emotional interpreters, such as humans, symbolic objects are often evocative of certain attitudes associated with the entities symbolized--such as nationalism, respect, school spirit, hatred, reverence, etc.  Only some elements of SymbolicObject have the primaryFunction of serving as symbols (e.g., national flags, war memorials); others are symbolic in a secondary capacity (e.g., a gravestone symbolizes death but its primary function is as a marker).  Some objects are created to serve a symbolic function (primary or secondary), while others acquire symbolic associations in the course of their `lifetimes' (e.g., San Juan Hill, Ellis Island).  Examples of SymbolicObject: the ArcDeTriomphe, the StatueOfLiberty, the PyramidOfCheops, the UnitedStatesCapitolBuilding (and other capitol buildings); a hangman's noose, a Menorah, a white dove, a black armband.")

;;; SymmetricAnatomicalPartType
(isa SymmetricAnatomicalPartType SiblingDisjointCollection)
(genls SymmetricAnatomicalPartType AnimalBodyPartType)
(genls SymmetricAnatomicalPartType ExistingObjectType)
(comment SymmetricAnatomicalPartType "A collection of collections.  Instances are types of anatomicalParts of bilaterally symmetrical organisms (Organism-Whole) which occur in bilaterally symmetric pairs.  This is not intended to include broader categories like Tooth, Rib-AnimalBodyPart, or Finger, but the specific parts of which the organism only has two (EyeTooth, FifthRib, or RingFinger).")

;;; SymmetricBinaryPredicate
(isa SymmetricBinaryPredicate PredicateCategory)
(isa SymmetricBinaryPredicate Collection)
(genls SymmetricBinaryPredicate BinaryPredicate)
(genls SymmetricBinaryPredicate CommutativeRelation)
(comment SymmetricBinaryPredicate "A collection of predicates; the subset of BinaryPredicate whose elements are all symmetric relations.  A predicate F is an element of SymmetricBinaryPredicate if and only if F is binary and (P X Y) implies (P Y X).  Examples: siblings, teammates, connectedTo, bordersOn.")

;;; SymmetryMemberFunction
(isa SymmetryMemberFunction RelationType)
(comment SymmetryMemberFunction "The class of functions which return one member of a symmetric relation.  This class consists of LeftFn and RightFn.")

;;; SystemOfGovernment
(isa SystemOfGovernment UnorderedAttributeType)
(genls SystemOfGovernment AttributeValue)
(comment SystemOfGovernment "A collection of attributes.  Each element of SystemOfGovernment is an attribute describing a type of government that a country might have.  Used with governmentType.  Examples: DemocraticGovernment, Monarchy, SocialistGovernment, MilitaryGovernment.")

;;; TactileSensor
(isa TactileSensor ExistingObjectType)
(genls TactileSensor Sensor)
(comment TactileSensor "A subset of Sensor, namely those sensors that operate by coming into physical contact with the object being perceived.  TactileSensors are capable of perceiving properties such as texture, hardness, roughness, etc.")

;;; TakingCustodyOfAnimal
(isa TakingCustodyOfAnimal ScriptType)
(isa TakingCustodyOfAnimal TemporalObjectType)
(genls TakingCustodyOfAnimal TransferringPossession)
(genls TakingCustodyOfAnimal TakingSomething)
(comment TakingCustodyOfAnimal "A collection of events.  In an instance of TakingCustodyOfAnimal, an Agent takes physical control of a (human or non-human) animal.  This collection includes trapping animals, kidnapping people (or animals), and also what the police do after they arrest a person for a crime.  The animal may or may not be taken alive.")

;;; TakingOffAClothingItem
(isa TakingOffAClothingItem TemporalObjectType)
(isa TakingOffAClothingItem DefaultDisjointScriptType)
(genls TakingOffAClothingItem RemovingSomething)
(genls TakingOffAClothingItem HumanActivity)
(genls TakingOffAClothingItem HandlingAnObject)
(comment TakingOffAClothingItem "A collection of events.  Each element of TakingOffAClothingItem is an event in which something being worn is removed, either by the wearer or by someone else (e.g., removing a child's boots or a horse's saddle).  After an element of TakingOffAClothingItem occurs, the situation (an element of WearingSomething) in which the item was being wornOn the body is over.")

;;; TakingSomething
(isa TakingSomething TemporalObjectType)
(isa TakingSomething DefaultDisjointScriptType)
(genls TakingSomething GainingUserRights)
(genls TakingSomething AnimalActivity)
(comment TakingSomething "A collection of events; a subset of GainingUserRights.  In an instance of TakingSomething, an Agent takes an object, in the sense of taking it away or using or exercising access to it.  The agent may or may not have any legal right or authorization to use that object.  In an instance of TakingSomething, the taker (the toPossessor) must intend and actively (attempt to) acquire the objectOfPossessionTransfer, so the taking event is intentional and thus, strictly speaking, performedBy the taker.")

;;; TangibleObjectPredicate
(isa TangibleObjectPredicate PredicateCategory)
(genls TangibleObjectPredicate ProcessPredicate)
(comment TangibleObjectPredicate "A collection of predicates.  Each element of TangibleObjectPredicate is a predicate used in assertions which describe the properties of tangible objects.  Examples: viscosityOfSubstance, colorOfObject, porosityOfObject, physicalBuild.")

;;; TangibleProduct
(isa TangibleProduct ExistingStuffType)
(isa TangibleProduct ProductType)
(genls TangibleProduct TangibleThing)
(genls TangibleProduct Product)
(genls TangibleProduct PartiallyTangibleProduct)
(comment TangibleProduct "A collection of tangible stuff.  Each element of TangibleProduct is a tangible object or tangible material that is exchanged for money or trade.  Tangible products are purely tangible and do not have an intangible component (cf. PartiallyTangibleProduct, PartiallyTangible).   TangibleProduct is the most general class of tangible products--everything from cotton swabs to coconut oil to F-16s belongs to this collection.")

;;; TangibleStuffCompositionType
(isa TangibleStuffCompositionType Collection)
(genls TangibleStuffCompositionType ExistingStuffType)
(comment TangibleStuffCompositionType "A collection of collections.  Instances are collections of TangibleThing whose membership is based only on the physical and/or chemical composition of the elements, and not on any other property.  Thus TangibleStuffCompositionType does not have as elements any collections whose instances are determined by the physical state they are in.  For example, the collection Water is an instance of TangibleStuffCompositionType: instances of Water are all pieces of substance with the chemical composition H20.   On the other hand , the collection of all pieces of ice [i.e., (SolidFn Water)] is not a TangibleStuffCompositionType, because membership in the collection of ice depends not solely on the substance's composition, but also on its physical state.  More sample instances of TangibleStuffCompositionType:  the collections Nylon, GasolineFuel, CottageCheese, FattyTissue, BabyPowder, Nitrogen, and Glass.")

;;; TangibleStuffStateType
(isa TangibleStuffStateType Collection)
(genls TangibleStuffStateType ExistingStuffType)
(comment TangibleStuffStateType "A collection of collections.  Each element of TangibleStuffStateType is a collection of all pieces of tangible stuff that are associated with only a single physical state (i.e., structural phase).  This includes collections both (1) of substances which exist only in one state (e.g., Diamond) and (2) of stuff which by definition has a certain state (e.g., ice, or gels of any composition).  Thus, ice, water vapor, and liquid water--i.e., (LiquidFn Water)--would be represented by a TangibleStuffStateType.  Water itself, however, can exist in all three states; thus, the collection Water, which includes all instances of water regardless of state, is NOT a TangibleStuffStateType.  Elements of TangibleStuffStateType include the collections SolidTangibleThing, Air, Powder, Gel, Paste, and many others.  Any of the Cyc functions SolidFn, LiquidFn, or GaseousFn can be used to create a collection which isa TangibleStuffStateType.")

;;; TangibleSubstancePredicate
(isa TangibleSubstancePredicate PredicateCategory)
(genls TangibleSubstancePredicate TangibleObjectPredicate)
(comment TangibleSubstancePredicate "A collection of predicates.  Each element of TangibleSubstancePredicate is a predicate that is used to specify or describe the properties (usually physical properties) of tangible substances.  Examples: stateOfMatter, freezingPoint, physicalStructuralIntegrity, solubleIn.")

;;; TangibleThing
(isa TangibleThing ExistingObjectType)
(genls TangibleThing PartiallyTangible)
(comment TangibleThing "The collection of things which are made of some sort of matter and whose nature is primarily material--in the sense that they do not have important non-physical properties (such as encoded information).  (Compare PartiallyTangible.)  TangibleThing includes chemical compounds, natural objects (and their parts), tangible artifacts and man-made materials (but see InformationBearingObject).  Collections that are specializations of TangibleThing may be elements of ExistingObjectType or ExistingStuffType (qq.v.), or of neither.  
Note: TangibleThing has the genls PartiallyTangible in the BaseKB, so its elements are NOT generally excluded from having intangible aspects; however, material things which do have important non-physical aspects should be elements of PartiallyTangible instead.  Moreover, note that in some contexts, all instances of this collection must be 100% tangible and have no intangible aspects (i.e., it is disjointWith PartiallyTangible).")

;;; Tank-Vehicle
(isa Tank-Vehicle ProductType)
(isa Tank-Vehicle ExistingObjectType)
(genls Tank-Vehicle TransportationDevice-Vehicle)
(genls Tank-Vehicle Weapon)
(genls Tank-Vehicle LandTransportationDevice)
(comment Tank-Vehicle "The collection of all tanks, armored vehicles designed for military purposes, with mounted guns, heavy armor, and often tracked wheels.")

;;; TankerShip
(isa TankerShip ProductType)
(isa TankerShip ExistingObjectType)
(genls TankerShip TransportationDevice-Vehicle)
(genls TankerShip CargoShip)
(comment TankerShip "The subcollection of CargoShip that contains all tankers, i.e., ships that by design can transport large amount of liquid or gas materials.")

;;; TastePerception
(isa TastePerception TemporalStuffType)
(isa TastePerception DefaultDisjointScriptType)
(genls TastePerception Perceiving)
(comment TastePerception "The collection of sensory Perceivings in which a PerceptualAgent tastes some object, by means of the appropriate Sensor, and thereby acquires information about it.")

;;; TaxonomicSlot
(isa TaxonomicSlot PredicateCategory)
(genls TaxonomicSlot BinaryPredicate)
(comment TaxonomicSlot "A collection of predicates.  Each element of TaxonomicSlot is a binary predicate used in assertions indicating the position of a Cyc constant in one of Cyc's taxonomies (for Collections, Events, etc.).  Examples: isa, genls, partitionedInto, coExtensional, disjointWith, hasMembers, subBeliefSystem, subGoals.")

;;; TaxonomicSlotForAnyUnit
(isa TaxonomicSlotForAnyUnit PredicateCategory)
(genls TaxonomicSlotForAnyUnit TaxonomicSlot)
(comment TaxonomicSlotForAnyUnit "A collection of predicates; a subset of TaxonomicSlot.  Each element of TaxonomicSlotForAnyUnit is a binary predicate that may be used to define the taxonomy of instances; i.e., the collection of binary predicates applicable to any term.  Examples: isa, generalizations.")

;;; TaxonomicSlotForCollections
(isa TaxonomicSlotForCollections PredicateCategory)
(genls TaxonomicSlotForCollections TaxonomicSlot)
(comment TaxonomicSlotForCollections "A collection of predicates; a subset of TaxonomicSlot. Each element of TaxonomicSlotForCollections is a binary predicate used to form assertions that define the taxonomy of Collections.  Examples: genls, partitionedInto, coExtensional, covering, disjointWith.")

;;; Teaching
(isa Teaching TemporalObjectType)
(isa Teaching DefaultDisjointScriptType)
(genls Teaching AnimalActivity)
(genls Teaching Communicating)
(genls Teaching ServiceEvent)
(comment Teaching "One agent imparting learned knowledge to another.  This may have subEvents of the student asking or responding to questions, but the teacher is the primary performer.")

;;; TeethCleaning
(isa TeethCleaning TemporalObjectType)
(isa TeethCleaning DefaultDisjointScriptType)
(genls TeethCleaning MedicalCareEvent)
(genls TeethCleaning DiagnosingAndRepairingSomething)
(genls TeethCleaning Cleaning)
(genls TeethCleaning SingleDoerAction)
(comment TeethCleaning "A collection of events.  In each TeethCleaning event, an animal's teeth are cleaned.  In order to distinguish, e.g., professional teeth cleaning by a dental technician from daily personal care, different microtheories are used.  Consider just the frequencies of performing this action: in the HumanActivitiesMt, where a person brushes their own teeth as a subevent of DailyPersonalCleaning, this occurs once or twice per day.  In the ProviderOfServicePerspectiveMt, that is from the dental hygienist's point of view, it occurs about ten times per day.  In the RecipientOfServicePerspectiveMt, that is from the point of view of someone going to get their teeth cleaned at a dentist's office, it happens a couple times per year.")

;;; TemperateClimateCycle
(isa TemperateClimateCycle ClimateCycleType)
(genls TemperateClimateCycle AnnualClimateCycle)
(comment TemperateClimateCycle "A collection of annual climate cycles.  Each element of TemperateClimateCycle is a year-long event consisting of weather occurring (typically) in terrestrial regions between (roughly) the Tropic of Cancer and the Arctic Circle in the Northern Hemisphere, and between the Tropic of Capricorn and the Antarctic Circle in the Southern Hemisphere.  Characteristics of a temperate climate include: four distinguishable seasons, Spring, Summer, Fall, and Winter, with variations in temperature and precipitation; overall moderate precipitation.")

;;; Temperature
(isa Temperature FundamentalNumericAttributeType)
(genls Temperature ScalarInterval)
(genls Temperature PhysicalAttribute)
(comment Temperature "A collection of physical attributes.  Each element of Temperature is an amount of heat in a particular instance of PartiallyTangible.  Elements of Temperature may be either a fixed interval, such as 98.6 degrees Fahrenheit, or a range, such as HumanHabitableTemperature.  See UnitOfTemperature for the units used by Cyc to measure temperatures.")

;;; TemperatureChangingProcess
(isa TemperatureChangingProcess TemporalStuffType)
(isa TemperatureChangingProcess DefaultDisjointScriptType)
(genls TemperatureChangingProcess IntrinsicStateChangeEvent)
(genls TemperatureChangingProcess CompositePhysicalAndMentalEvent)
(comment TemperatureChangingProcess "A collection of events.  Each TemperatureChangingProcess is an Event which has, as one of its significant effects, changing the Temperature of some object.  E.g., CookingFood is a subset of this collection.  A particular event in which somone uses a soldering iron to connect a resistor to a circuit board would be an element of this collection.  Note that a change in temperature is one of the kinds of intrinsic change which an object can undergo; i.e., TemperatureChangingProcess is a subset of IntrinsicStateChangeEvent.")

;;; TemporalObjectType
(isa TemporalObjectType Collection)
(genls TemporalObjectType ObjectType)
(comment TemporalObjectType "A collection of collections.  Each element of each element of TemporalObjectType is temporally object-like.  Take an element of TemporalObjectType -- say COL.  Take an element of that -- say OBJ.  Imagine making a videotape of OBJ.  Now play back just a small piece of that videotape.  It won't be an element of COL.  E.g., COL could be the set of events in which an orange is cut into quarters.  Say a videotape of that has been made of one such event, which lasted thirty seconds.  Now imagine some 5-second excerpt of that videotape.  That, in turn, is not a videotape of someone cutting up an orange into four pieces.  So the collection of all orange-quartering events is itself an element of TemporalObjectType; it is NOT an element of TemporalStuffType (q.v.).



If a collection COL isa TemporalObjectType, it is reasonable to state axioms about temporally extrinsic properties of COL's instances -- properties such as duration, distance, cost, etc.  E.g., it makes sense to talk about the duration of a particular Event in which an orange is quartered.")

;;; TemporalPartSlot
(isa TemporalPartSlot PredicateCategory)
(genls TemporalPartSlot BinaryPredicate)
(genls TemporalPartSlot NonPhysicalPartPredicate)
(comment TemporalPartSlot "A collection of predicates.  Each element of TemporalPartSlot is a binary predicate used to relate two things which have temporal extent, asserting either that one thing is a temporal part of the second thing, or that one thing is a temporal composite that includes the second thing.  Examples: developmentalStages, subEvents, firstSubEvents, subAbstrac, manufacturingSteps, beforeActors, afterActors.")

;;; TemporalRelation
(isa TemporalRelation PredicateCategory)
(genls TemporalRelation ExtensionalRepresentationPredicate)
(genls TemporalRelation BinaryPredicate)
(comment TemporalRelation "TemporalRelations specify relative positions of TemporalThings in Time.  PrimitiveTemporalRelations (such as after) interrelate time points, and ComplexTemporalRelations (such as postEvents and laterSubAbstractions) interrelate more complicated temporal objects such as a pair of events, a pair of tangible objects, etc.")
(synonymousExternalConcept TemporalRelation SENSUS-Information1997 "TEMPORAL-RELATION")

;;; TemporalStuffType
(isa TemporalStuffType Collection)
(genls TemporalStuffType StuffType)
(comment TemporalStuffType "A collection of collections.  Each element of each element of TemporalStuffType is temporally substance-like.  Consider, e.g., AnimalWalkingProcess, the set of all walking events.  Consider a particular walking event.  Videotape it.  Play back a few seconds of that videotape, showing one of many timeSlices of the original walking event.  That shorter video is still clearly going to be a video of a walking event.  So the collection AnimalWalkingProcess (the set of all walking events) is an element of TemporalStuffType; it is NOT an element of TemporalObjectType (q.v.).



Of course, there is a granuleOfTime for AnimalWalkingProcess, namely, TakingAStep, such that any timeSlices shorter than that are likely not to be considered real walking events.   This is analogous to granule-size for physical substance types such as peanut butter (the granules there are a peanut piece, a glob of peanut oil, etc.) or wood (the granule there is an individual plant cell).



More esoterically, consider a time slice of a person.   `Albert Einstein while at Princeton' was still a person.  So Person (the set of all people) is an element of TemporalStuffType.  All tangible objects are temporally stuff-like in this fashion.



If a collection COL isa TemporalStuffType, it is reasonable to state axioms about the temporally intrinsic properties of COL's instances --- properties such as rate of speed, cost per pound, kinds of actors, etc.")

;;; TemporalThing
(isa TemporalThing TemporalStuffType)
(isa TemporalThing Collection)
(genls TemporalThing Individual)
(comment TemporalThing "TemporalThing is the collection of all things which have a particular temporal extent, things about which one might sensibly ask `When?'.  TemporalThing therefore includes many things, such as actions, tangible objects, agreements, and abstract pieces of time. Some things are NOT instances of TemporalThing because they are abstract, timeless, etc. -- such as a mathematical set, an attribute, an integer, etc.")

;;; TemporallyDisjointIntervalType
(isa TemporallyDisjointIntervalType Collection)
(genls TemporallyDisjointIntervalType TemporalObjectType)
(comment TemporallyDisjointIntervalType "(isa ?X TemporallyDisjointIntervalType) means that any two distinct instances of ?X are temporallyDisjoint.  It is true that (isa Wednesday TemporallyDisjointIntervalType because no Wednesday can temporally intersect any other (distinct) Wednesday.  [See also MutuallyDisjointIntervalCollection.]")

;;; TemporaryChangeOfUserRights
(isa TemporaryChangeOfUserRights DefaultDisjointScriptType)
(genls TemporaryChangeOfUserRights ChangeInUserRights)
(genls TemporaryChangeOfUserRights Transaction)
(comment TemporaryChangeOfUserRights "A collection of events; a subset of ChangeInUserRights.  In an instance of TemporaryChangeOfUserRights, one agent temporarily gives up user rights over some object (see UserRightsAttribute), while another agent temporarily gains some user rights over that object.  This occurs in renting, loaning, or sharing of things.")

;;; TemporaryWork
(isa TemporaryWork WorkStatus)
(comment TemporaryWork "An attribute; an element of WorkStatus.  The attribute of being a temporary worker for an organization.")

;;; TenderObject
(isa TenderObject ExistingObjectType)
(genls TenderObject LiquidAsset)
(genls TenderObject CompositeTangibleAndIntangibleObject)
(comment TenderObject "A collection of  objects.  Each element of TenderObject is an item presented  by an agent in instances of Paying or Spending.  Typical examples include cash, checks, credit cards, travellers's checks.  Unusual but possible tender objects could be gold, goats, or golf balls.")

;;; TensileStrength
(isa TensileStrength DerivedNumericAttributeType)
(genls TensileStrength ScalarInterval)
(genls TensileStrength PhysicalAttribute)
(comment TensileStrength "A collection of attributes; a subset of PhysicalAttribute.  Each element of TensileStrength describes a specific capacity of a physical object to be deformed.  The higher the deformability, the lower the force required to deform the object.  Different tensile strengths may be represented using a GenericValueFunction.  Tensile strengths of objects are indicated with the predicate tensileStrengthOfSubstance.")

;;; TerminalPhysiologicalCondition
(isa TerminalPhysiologicalCondition PhysiologicalConditionType)
(genls TerminalPhysiologicalCondition LifeThreateningCondition)
(comment TerminalPhysiologicalCondition "A collection of ailments which are distinguished by the shared characteristic that if left untreated, those ailments will certainly cause a patient to die -- and may eventually do so despite treatment.  Subsets of this collection include: Diabetes, Cancer, Botulism, and Rabies.
Note that this does not mean: `are 100% likely to lead to death if untreated'.  It does not mean `the organism will not seek treatment elsewhere,.  Also note that this is somewhat context dependent.")

;;; TernaryPredicate
(isa TernaryPredicate RelationType)
(isa TernaryPredicate Collection)
(genls TernaryPredicate Predicate)
(comment TernaryPredicate "TernaryPredicate is the collection of all Cyc predicates which take three arguments.")

;;; TerrainAttribute
(isa TerrainAttribute AttributeType)
(genls TerrainAttribute AttributeValue)
(comment TerrainAttribute "A collection of attributes.  Each element of TerrainAttribute is an attribute used for describing the terrain in a geographic region.  Examples: Rocky, Sandy, RuggedTerrain, Desertlike, SnowCovered, Mountainous.")

;;; TerrestrialDirection
(isa TerrestrialDirection ObjectType)
(genls TerrestrialDirection UnitVectorInterval)
(comment TerrestrialDirection "The collection of directions used to describe the orientation of objects on or near the surface of the Earth.  Includes terrestrial directions related to compass points (e.g., East-Directly) and to the gravitational vector (e.g., Down-Directly, VerticalDirection).  Note that assertions in different terrestrial contexts can be inconsistent in a neutral context: East in China points in a different direction than East in New York!")

;;; TerrestrialFrameOfReference
(isa TerrestrialFrameOfReference FrameOfReference)
(comment TerrestrialFrameOfReference "The terrestrial frame of reference is the unique individual FrameOfReference that generally regards the surface of the PlanetEarth as fixed in the background space.  It permits fixed notions of VerticalOrientation and HorizontalOrientation.  There are multiple standard coordinate systems based on the TerrestrialFrameOfReference, including latitude and longitude, Earth-Centered Cartesian, and others.  Various local frames of reference and coordinate systems assume the TerrestrialFrameOfReference.")

;;; TerrestrialOrganism
(isa TerrestrialOrganism OrganismTypeByHabitat)
(genls TerrestrialOrganism Organism-Whole)
(comment TerrestrialOrganism "The collection of organisms adapted to life on land, out of water.  Elements of TerrestrialOrganism spend all or most of their time out of the water, in air, either on the land surface or under it.  TerrestrialOrganism includes, for example, members of its subsets Elephant, Ladybug, Bird, Person, etc.")

;;; Territory
(isa Territory ExistingObjectType)
(genls Territory ControlledLand)
(genls Territory CountrySubsidiary)
(comment Territory "A collection of geopolitical entities.  Each element of Territory is a geopolitical region which is distinct from, but dependent on and controlled by, another geopolitical entity.  Examples: PuertoRico, BritishAntarcticTerritory, GalapagosIslands, RyukyuIslands.")

;;; TextGroup
(isa TextGroup ObjectType)
(genls TextGroup CharacterString)
(comment TextGroup "A collection of CharacterStrings. Each element of TextGroup is a CharacterString which forms a 'natural' or meaningful group, above the  level of a word. Thus, 'er#q2' would be a character string, but not a text group, whereas the sentence you are now reading is a text group, as is a paragraph, etc. Note that a TextGroup is the abstract sequence of symbols, not the tangible encoding of them.")
(synonymousExternalConcept TextGroup SENSUS-Information1997 "TEXT-GROUP")

;;; TextMicrotheory
(isa TextMicrotheory ObjectType)
(isa TextMicrotheory MicrotheoryType)
(genls TextMicrotheory PropositionalInformationThing)
(comment TextMicrotheory "The collection of Microtheories each of which contains assertions that convey the information content of a particular text.  The propositional content of a text is a PropositionalInformationThing, and it forms a TextMicrotheory.")

;;; TextileProduct
(isa TextileProduct ExistingObjectType)
(isa TextileProduct ProductType)
(genls TextileProduct Artifact)
(genls TextileProduct SolidTangibleProduct)
(comment TextileProduct "A collection of tangible products.  Each element of TextileProduct is a product made by spinning, weaving, knitting, wrapping, pressing, or other processes used to form fibers into usable materials such as cloth or line.   Examples include elements of the subsets Yarn, Rope, and CottonCloth.")

;;; TextualMaterial
(isa TextualMaterial ExistingObjectType)
(genls TextualMaterial InformationBearingThing)
(comment TextualMaterial "A collection of information bearing things (IBTs).  Each element of TextualMaterial is an IBT whose informational content is encoded in some instance of CommunicationConvention which is a linear symbolic language; e.g., a newspaper printed in English written with the Roman alphabet; a book printed in English using Braille; or a poster written in Chinese using characters.  Textual material always includes some physical representation of one or more elements of CharacterString (which are abstract).  Textual materials may be tangible objects, such as newspapers, but also may include intangibles such as patterns of light projecting words onto a wall.  The subsets of TextualMaterial are multifarious, including, e.g., GroceryList, W2-form, RestaurantMenu, GrantProposal, WillAndTestament, BusinessCard, MusicalText, BalanceSheet-Document.")

;;; TheCovering
(isa TheCovering VariableArityRelation)
(isa TheCovering ReifiableFunction)
(resultIsa TheCovering Set-Mathematical)
(argsIsa TheCovering SetOrCollection)
(comment TheCovering "This is a special variable-arity ReifiableFunction that allows one to specify a set of collections or mathematical sets which cover a given set or collection, in order to conveniently state assertions about covering (see covering).  For example, the fact that the collection CreationOrDestructionEvent is covered by the collections CreationEvent and DestructionEvent can be expressed as (covering CreationOrDestructionEvent (TheCovering CreationEvent DestructionEvent)).")

;;; TheEmptySet
(isa TheEmptySet Set-Mathematical)
(comment TheEmptySet "TheEmptySet is the empty set, i.e., the set that has no element and is sometimes called the null.  Note that TheEmptySet is not an instance of Collection.")

;;; ThePartition
(isa ThePartition VariableArityRelation)
(isa ThePartition ReifiableFunction)
(resultIsa ThePartition Set-Mathematical)
(resultIsa ThePartition DisjointSetOrCollection)
(argsIsa ThePartition SetOrCollection)
(comment ThePartition "This is a special variable-arity ReifiableFunction that allows one to specify a set of collections or mathematical sets which partition a given set or collection, in order to conveniently state assertions about partitioning (see partitionedInto).  For example, the fact that the collection Whale is partitioned into the collections BaleenWhale and ToothedWhale can be expressed as (partitionedInto Whale (ThePartition BaleenWhale ToothedWhale)).")

;;; TheSet
(isa TheSet CommutativeRelation)
(isa TheSet VariableArityRelation)
(isa TheSet NonPredicateFunction)
(resultIsa TheSet Set-Mathematical)
(argsIsa TheSet Thing)
(comment TheSet "(TheSet E1 E2 ... En) denotes the Set-Mathematical consisting of the elements E1 through En.  TheSet is a variable arity relation, taking one or more arguments.  All the arguments must be ground terms; variables are not allowed.")

;;; TheStartOfTheCommonEra
(isa TheStartOfTheCommonEra TimePoint)
(comment TheStartOfTheCommonEra "This is the instant of time between the years BC and AD.")

;;; TheTerm
(isa TheTerm Collection)
(genls TheTerm Thing)
(comment TheTerm "A special kind of term that allows back-reference to any individual thing that satisfies the constraints on the TheTerm.  E.g., 'Suppose a cat walks into a fish store.  The cat is likely to get into a lot of trouble.'  'The cat' in the second sentence refers back to 'a cat' in the first; i.e., any cat that walks into a fish store.  In Cyc, the constraints for a TheTerm in a given context are given by use of the predicate theTermConstraints on the unit representing that context.  In lifting assertions out of that context, the constraints are added as antecedents.")

;;; ThermalConductivity
(isa ThermalConductivity PrimitiveAttributeType)
(genls ThermalConductivity PhysicalAttribute)
(genls ThermalConductivity ScalarInterval)
(comment ThermalConductivity "A collection of attributes; a subset of PhysicalAttribute.  Each element of ThermalConductivity represents a specific ability of some physical object to conduct heat; e.g., ConductsHeatPoorly, ConductsSomeHeat, ConductsHeatWell.  An individual object's ThermalConductivity is indicated with the predicate thermalConductivityOfObject.")

;;; Thing
(isa Thing Collection)
(comment Thing "Thing is the universal set:  the collection of everything!  Every Cyc constant in the Knowledge Base is a member of this collection; in the prefix notation of the language CycL, we express that fact as (isa CONST Thing).  Thus, too, every collection in the Knowledge Base is a subset of the collection Thing; in CycL, we express that fact as (genls COL Thing).  See isa and genls for further explanation of those relationships.  



Note:  There are even a few collections, such as CharacterString and Integer, which have a defnSufficient that recognizes non-constants (such as strings and numbers) as instances of Thing.")
(synonymousExternalConcept Thing SENSUS-Information1997 "OB-THING")

;;; Thinking
(isa Thinking TemporalStuffType)
(isa Thinking DefaultDisjointScriptType)
(genls Thinking MentalEvent)
(comment Thinking "A collection of events; a subset of MentalEvent.  Each element of Thinking is a mental process in the most general sense, involving the acquisition, modification, and/or synthesis of ideas.  Theorizing, remembering, inventing something, free associating, and dreaming are all examples of Thinking.")
(overlappingExternalConcept Thinking SENSUS-Information1997 "COGNITION")

;;; ThreeDimensionalShape
(isa ThreeDimensionalShape ShapeType)
(genls ThreeDimensionalShape GeometricThing)
(comment ThreeDimensionalShape "A collection of shapes 
that exist in 3 (but not less than 3) dimensions. Some
elements of this are basic geometrical shapes, e.g.,
instances of SphereShape and ConeShape, but can also
include irregular shapes, such as the region from the
surface of Russia extending 2 miles up.")
(synonymousExternalConcept ThreeDimensionalShape SENSUS-Information1997 "THREE-D-LOCATION")

;;; ThreeDimensionalShapeType
(isa ThreeDimensionalShapeType Collection)
(genls ThreeDimensionalShapeType ShapeType)
(comment ThreeDimensionalShapeType "A collection of collections.  Each element of ThreeDimensionalShapeType is a collection of things which are subsets of ThreeDimensionalShape.  Examples: CylinderShape, Rectangular3DShape, HumanlikeBodyShape.")

;;; ThreeStoryBuilding
(isa ThreeStoryBuilding ExistingObjectType)
(genls ThreeStoryBuilding Building)
(comment ThreeStoryBuilding "Collection of all three story buildings.")

;;; Time-Quantity
(isa Time-Quantity Collection)
(isa Time-Quantity FundamentalNumericAttributeType)
(genls Time-Quantity ScalarInterval)
(genls Time-Quantity PhysicalAttribute)
(comment Time-Quantity "Time-Quantity is a physical 
quantity possessed by TemporalThings.  An Event transpires 
over a certain amount of Time-Quantity, a SomethingExisting 
exists for a lifetime which is a certain amount of Time-Quantity,
 and of course an abstract TimeInterval has a duration which 
is a certain amount of Time-Quantity.   The standard unit of 
Time-Quantity in Cyc is SecondsDuration (qv) but there can 
be and are many other ways to specify an amount of time; e.g., 
with other UnitOfMeasure instances such as WeeksDuration 
and YearsDuration, and with reified quantities of (instances 
of) Time-Quantity such as LongTime, Immediately, 
AFewDecadesDuration, etc.")
(synonymousExternalConcept Time-Quantity SENSUS-Information1997 "AGE")

;;; TimeInterval
(isa TimeInterval TemporalStuffType)
(genls TimeInterval IntangibleIndividual)
(genls TimeInterval TemporalThing)
(comment TimeInterval "TimeInterval is a subset of TemporalThing.  Each TimeInterval can be characterized fully just by specifying its temporal attributes.  Anything which has a temporal extent is an instance of TemporalThing, but if that is essentially ALL that it has, then it is also a TimeInterval.  For example, `the year 1967' is a just a TimeInterval: although many interesting things happened during that year, the year itself is completely defined by its temporal extent.  `Neil Armstrong Walking on the Moon' is an Event, not a TimeInterval, since it would be defined by many non-temporal assertions. And of course, `Neil Armstrong' is a SomethingExisting, not a TimeInterval, but like all instances of SomethingExisting, he does have temporal extent and is therefore a TemporalThing.  One could, in principle, separately reify (name) the TimeInterval which is the period of existence of any SomethingExisting, or the period of time during which any Event occurred, but in practice that is rarely useful.  Since they all have an implicit TimeInterval associated with them, any predicates which one might apply to time intervals can also be applied to a football game, a football, etc.  E.g., we can talk about the startingPoint of a football game, or for that matter the startingPoint of the football itself (the moment of its creation).")
(synonymousExternalConcept TimeInterval SENSUS-Information1997 "TEMPORAL")

;;; TimeIntervalFromFn
(isa TimeIntervalFromFn IndividualDenotingFunction)
(isa TimeIntervalFromFn ReifiableFunction)
(resultIsa TimeIntervalFromFn TimeInterval)
(arg1Isa TimeIntervalFromFn TemporalThing)
(arg2Isa TimeIntervalFromFn TemporalThing)
(comment TimeIntervalFromFn "(TimeIntervalFromFn ?X ?Y) returns the time interval between ?X and ?Y.  The startingPoint of that interval is the endingPoint of ?X, and the endingPoint of that interval is the startingPoint of ?Y.  It must be true that ?Y starts after ?X ends; i.e., (startsAfterEndingOf ?Y ?X).")

;;; TimeOfDay
(isa TimeOfDay TemporalObjectType)
(genls TimeOfDay TimeInterval)
(comment TimeOfDay "The collection of all temporal intervals marking times of the day.  This includes the twenty-four clock hours, and also longer and shorter pieces of time.")

;;; TimeOfDay-AM
(isa TimeOfDay-AM TimeOfDayType)
(genls TimeOfDay-AM TimeOfDay)
(comment TimeOfDay-AM "The collection of half-days from Midnight to Noon.  See CalendarDay.")

;;; TimeOfDay-PM
(isa TimeOfDay-PM TimeOfDayType)
(genls TimeOfDay-PM TimeOfDay)
(comment TimeOfDay-PM "The collection of half-days from Noon to Midnight.  See CalendarDay.")

;;; TimeOfDayType
(isa TimeOfDayType Collection)
(genls TimeOfDayType ConventionalClassificationType)
(genls TimeOfDayType TemporalObjectType)
(comment TimeOfDayType "A collection of collections, whose elements are some class of time of day, such as TimeOfDay-PM, TimeOfDay-9AM, TimeOfDay-MidnightHour, and so on.")

;;; TimePoint
(isa TimePoint TemporalObjectType)
(genls TimePoint TimeInterval)
(comment TimePoint "A TimePoint is a piece of time which has an infinitely small duration.  In Cyc's basic representation of time, all time is like an infinite straight line, and any TimePoint is like a point on that line.  Many temporal attributes of a TemporalThing may be described in terms of time points; e.g., its startingPoint.  A TimePoint can also be contextual, such as Now.")
(synonymousExternalConcept TimePoint SENSUS-Information1997 "TIME-POINT")
(synonymousExternalConcept TimePoint SENSUS-Information1997 "ZERO-D-TIME")

;;; TimesFn
(isa TimesFn FunctionFromQuantitiesToQuantities)
(isa TimesFn CommutativeRelation)
(isa TimesFn VariableArityRelation)
(resultIsa TimesFn ScalarInterval)
(argsIsa TimesFn ScalarInterval)
(comment TimesFn "TimesFn is the multiplication operator, a mathematical function.  TimesFn takes a variable number of quantities as arguments, and it yields a new quantity which is the result of multiplying the arguments together.  (TimesFn 2 3 4) returns 24.  See also VariableArityRelation.")

;;; TimesPerDay
(isa TimesPerDay UnitOfMeasureNoPrefix)
(isa TimesPerDay UnitOfFrequency)
(resultIsa TimesPerDay Frequency)
(resultIsa TimesPerDay Rate)
(resultIsa TimesPerDay ScalarInterval)
(argsIsa TimesPerDay CycSystemRealNumber)
(comment TimesPerDay "Times per day -- unit of frequency")

;;; TimesPerMinute
(isa TimesPerMinute UnitOfMeasureNoPrefix)
(isa TimesPerMinute UnitOfFrequency)
(resultIsa TimesPerMinute Frequency)
(resultIsa TimesPerMinute Rate)
(resultIsa TimesPerMinute ScalarInterval)
(argsIsa TimesPerMinute CycSystemRealNumber)
(comment TimesPerMinute "Times per minute -- unit of frequency")

;;; TimesPerSecond
(isa TimesPerSecond UnitOfFrequency)
(isa TimesPerSecond UnitOfMeasureNoPrefix)
(resultIsa TimesPerSecond Frequency)
(resultIsa TimesPerSecond ScalarInterval)
(resultIsa TimesPerSecond Rate)
(argsIsa TimesPerSecond CycSystemRealNumber)
(comment TimesPerSecond "A Cyc function, TimesPerSecond represents a UnitOfFrequency.  (TimesPerSecond NUMBER) denotes the frequency NUMBER times per second.  Note that this is more general than a representation of cycles per second, for which the appropriate UnitOfFrequency is Hertz.")

;;; TimesPerWeek
(isa TimesPerWeek UnitOfMeasureNoPrefix)
(isa TimesPerWeek UnitOfFrequency)
(resultIsa TimesPerWeek Frequency)
(resultIsa TimesPerWeek Rate)
(resultIsa TimesPerWeek ScalarInterval)
(argsIsa TimesPerWeek CycSystemRealNumber)
(comment TimesPerWeek "Times per week -- unit of frequency")

;;; TimesPerYear
(isa TimesPerYear UnitOfFrequency)
(isa TimesPerYear UnitOfMeasureNoPrefix)
(resultIsa TimesPerYear Frequency)
(resultIsa TimesPerYear Rate)
(resultIsa TimesPerYear ScalarInterval)
(argsIsa TimesPerYear CycSystemRealNumber)
(comment TimesPerYear "A Cyc function, TimesPerYear is a UnitOfFrequency.  (TimesPerYear NUMBER) denotes a frequency NUMBER times per year.")

;;; Title
(isa Title LinguisticObjectType)
(genls Title LinguisticObject)
(comment Title "The collection of all titles: proper nouns (noun phrases) that relate to a person's status and/or function/role in an organization.  E.g., SeniorVicePresident-Title, MemberOfTechnicalStaff-Title, Reverend-Title, Father-Title, Miss, etc.  Note that this concept is not (closely) related to the title of a book or work of art, nor to the nicknames for a place, etc.")

;;; Tool
(isa Tool ExistingObjectType)
(genls Tool SolidTangibleThing)
(genls Tool PhysicalDevice)
(comment Tool "A collection of devices; a subset of 
PhysicalDevice.  An instance of 
Tool is a device which is used by people to 
manipulate and/or alter other objects or the immediate
environment in some way (hence, it does not include
PomPoms). Tools are also typically guided by
their user during use (see Device-UserGuided)
and can be used more than once (and is thus 
disjoint with the collection Device-OneTimeUse).
Tool includes 
devices used in many different activities.  
A sampling of subsets shows some of that variety: 
WoodworkingTool, CarpentryTool, PlumbingTool, 
MedicalTool, CleaningImplement, WritingImplement.")

;;; TopSide
(isa TopSide RegionType)
(genls TopSide Side)
(comment TopSide "The collection of all the entire top sides (as conventionally understood) of all objects that have distinct Sides, one of which faces up.")

;;; TopographicalFeature
(isa TopographicalFeature ExistingObjectType)
(genls TopographicalFeature OutdoorLocation)
(genls TopographicalFeature SurfaceOnTangibleObject)
(comment TopographicalFeature "A collection of geographical regions.  Each element of TopographicalFeature is a three dimensional feature of a planet's surface, typically with boundaries defined by formations of rock, dirt, water, etc., or by significant changes in elevation.  Some important subsets include the collections Mountain, MountainRange, Peninsula, Harbor, Shoreline, Arroyo.  Collections of regions defined by the presence of human artifacts (e.g., CitySkyline) or ecological characteristics (e.g., Forest-Wild) do NOT belong among the subsets of TopographicalFeature.  Examples of TopographicalFeature: KyushuIsland-Japan, SaintThomas-Island, LakeErie, VictoriaFalls, MalayPeninsula.")

;;; Torso
(isa Torso UniqueAnatomicalPartType)
(isa Torso AnimalBodyPartType)
(genls Torso BiologicalLivingObject)
(genls Torso AnimalBodyPart)
(comment Torso "The collection of all animal torsos.  A torso is the main portion of the animal's body, generally located centrally,
and one can conceive of an animal as a torso to which are connected the head and various appendages which together make up the entire animal.")

;;; TotallyOrderedSet
(isa TotallyOrderedSet ObjectType)
(genls TotallyOrderedSet PartiallyOrderedSet)
(comment TotallyOrderedSet "The collection of all totally ordered sets (also called linearly ordered sets, strict linear orders, or directed chains), each being a SetWithStructure consisting of a set together with an ordering relation on that set.   Mathematical lists, directed chains, finite sequences, infinite series, and number lines are special cases of TotallyOrderedSet.  The ordering relation is defined on the associated set, and is transitive on that set, irreflexive on that set, and asymmetric on that set.   Sometimes the members of the TotallyOrderedSet are called its nodes, and, for the discrete case, the pairwise relations between the adjacent nodes are called the links.  A TotallyOrderedSet may be finite or infinite, and if infinite, it may or may not have a starting end.  (Note: A TotallyOrderedSet is not a SetOrCollection, rather it is a SetWithStructure that has an associated SetOrCollection.)")

;;; TouchPerception
(isa TouchPerception TemporalStuffType)
(isa TouchPerception DefaultDisjointScriptType)
(genls TouchPerception Perceiving)
(genls TouchPerception PhysicalContactSituation)
(comment TouchPerception "The collection of sensory-perceptual events (Perceivings) in which a PerceptualAgent perceives (acquires information) by touch.")

;;; Train-TransportationDevice
(isa Train-TransportationDevice ProductType)
(isa Train-TransportationDevice ExistingObjectType)
(genls Train-TransportationDevice TransportationDevice-Vehicle)
(genls Train-TransportationDevice ContainerProduct)
(genls Train-TransportationDevice LandTransportationDevice)
(comment Train-TransportationDevice "The collection of all trains, the transportation devices that run on Railways and consist of multiple TrainCars coupled together.")

;;; TrainCar
(isa TrainCar ProductType)
(isa TrainCar ExistingObjectType)
(genls TrainCar LandTransportationDevice)
(genls TrainCar ContainerProduct)
(comment TrainCar "The collection of train cars (or train carriages), non-motored wheeled vehicles that run on Railways.  When they are to be moved they are coupled together to form trains pulled by train engines.  There are freight TrainCars, and passenger TrainCars for transporting people.")

;;; TrainEngine
(isa TrainEngine ExistingObjectType)
(isa TrainEngine ProductType)
(genls TrainEngine PoweredDevice)
(genls TrainEngine MechanicalDevice)
(genls TrainEngine LandTransportationDevice)
(comment TrainEngine "The collection of all train engines, each being a fuel-powered, non-steerable, wheeled vehicle that runs on Railway tracks, and has enough power to pull or push a group of TrainCars with it.")

;;; Transaction
(isa Transaction TemporalObjectType)
(isa Transaction DefaultDisjointScriptType)
(genls Transaction PurposefulAction)
(genls Transaction SocialOccurrence)
(comment Transaction "Transaction is the collection of events performed by Agents cooperating (willingly) under some Agreement, each performing actions in exchange for the actions of the other. 
Note:  Attack/counterattack in warfare is not a Transaction.  Neither is fortuitous cooperation without agreement, such as a set of investors who, unknown to each other, all buy the same stock almost at once, and end up driving its price up.  On the other hand, if you see agents acting to mutual benefit, it's not a bad strategy to guess that there is some agreement between them.
Note: The word 'transaction' often means an exchange of user rights (to goods and/or money) between agents; see ExchangeOfUserRights for that concept.  Transaction is a more general concept, and is a superset of ExchangeOfUserRights.")

;;; TransferIn
(isa TransferIn TemporalObjectType)
(genls TransferIn GeneralizedTransfer)
(comment TransferIn "A collection of events.  TransferIn includes all GeneralizedTransfers for which there is a well-defined to-Generic, but not necessarily a from-Generic.  This includes, among other things, CollectionEvent, GainingUserRights, and AccessingAnIBT.  At the end of a TransferIn, transferredThing is 'loccated' at the to-Generic.  Some negative examples of TransferOut are AbandoningSomething (when there is no prospective owner) and IBTGeneration (when the information may go to various unspecified locations.")

;;; TransferOut
(isa TransferOut TemporalObjectType)
(genls TransferOut GeneralizedTransfer)
(comment TransferOut "A collection of events.  TransferOut includes all GeneralizedTransfers for which there is a well-defined from-Generic, but not necessarily a to-Generic.  This includes, among other things, Emission, LosingUserRights, and DistributionEvent.  At the start of a TransferOut, transferredThing is 'loccated' at the from-Generic.  Some negative examples of TransferOut are AppropriatingSomething (when there is no previous owner) and Hearing (when the sounds may come from various unspecified locations.")

;;; TransferringOwnership
(isa TransferringOwnership TemporalObjectType)
(isa TransferringOwnership DefaultDisjointScriptType)
(genls TransferringOwnership TransferringPossession)
(comment TransferringOwnership "A collection of events; a subset of TransferringPossession.  In an instance of TransferringOwnership, a transfer of ownership occurs.  This means that in such an event there is a transfer from one Agent to another of FullUseRights and ExclusiveUserRights (over the objectOfPossessionTransfer).  Often there is some `consideration' for this transfer, of course --- see ExchangeOfUserRights.")

;;; TransferringPossession
(isa TransferringPossession DefaultDisjointScriptType)
(isa TransferringPossession TemporalObjectType)
(genls TransferringPossession SocialOccurrence)
(genls TransferringPossession GainingUserRights)
(genls TransferringPossession LosingUserRights)
(comment TransferringPossession "A collection of events.  In an instance of TransferringPossession, the possession of a single object (i.e., the objectOfPossessionTransfer) is transferred from one Agent to another.  Thus, a TransferringPossession event alters the rights of TWO different agents to use the object in question; one agent loses some UserRightsAttribute over it, while the other agent gains some UserRightsAttribute over it.  Each TransferringPossession event is both a LosingUserRights event and a GainingUserRights event.
Note:  In Buying events, Bartering events, Renting events, TWO such TransferringPossessions occur, because there are TWO objects which transfer possession.  For example, in buying a car, the right to use the buyer's money is transferred to the auto seller, while the ownership of the car is transferred to the buyer.  Both of the TransferringPossession events (one for each object) are subEvents of the instance of Buying, Renting, etc.  See ExchangeOfUserRights.")

;;; TransformationEvent
(isa TransformationEvent ScriptType)
(isa TransformationEvent TemporalObjectType)
(genls TransformationEvent DestructionEvent)
(genls TransformationEvent CreationEvent)
(genls TransformationEvent PhysicalEvent)
(comment TransformationEvent "A collection of events.  In each element of TransformationEvent, at least one thing ceases to exist and at least one thing comes into existence.  Usually at least some portion of the thing(s) destroyed becomes incorporated into the thing(s) that are created.

Note:  this collection is a superset of, but NOT coextensional with, TransformationProcess (q.v.).")

;;; TransformationProcess
(isa TransformationProcess TemporalStuffType)
(isa TransformationProcess DefaultDisjointScriptType)
(genls TransformationProcess TransformationEvent)
(comment TransformationProcess "The collection of TransformationEvents that also are elements of TemporalStuffType.  That is, each of their temporal parts is also a TransformationEvent, in which something is destroyed and something created.  
Note:  It is often the case that a TransformationEvent is NOT a TransformationProcess --- e.g., there may be several preparation stages, and then at the end everything is brought together and the foaming starts, or the butterfly emerges, or whatever transformation occurs.  So TransformationProcess is a small subset of TransformationEvent (qv).")

;;; TransitiveBinaryPredicate
(isa TransitiveBinaryPredicate PredicateCategory)
(isa TransitiveBinaryPredicate Collection)
(genls TransitiveBinaryPredicate BinaryPredicate)
(comment TransitiveBinaryPredicate "A collection of predicates; the subset of BinaryPredicate whose elements are all transitive.  A predicate F is an element of TransitiveBinaryPredicate if and only if F is a binary predicate and (F X Y) and (F Y Z) together imply (F X Z).  Examples: greaterThan, eastOf, geographicalSubRegions, cotemporal.")

;;; Translation-Complete
(isa Translation-Complete TemporalObjectType)
(genls Translation-Complete Movement-TranslationEvent)
(comment Translation-Complete "A collection of translational motion events; hence a subset of Movement-TranslationEvent.  In any element of Translation-Complete, the whole objectMoving moves in its entirety from the origin (fromLocation) to the destination (toLocation).  That is, the object completely leaves the origin and relocates at the destination.  The objectMoving may be either a NonFluidlike object or a FluidTangibleThing all of which moves from one place to another; e.g., a baseball or the gasoline used to fill a gas tank.  Another example: a single molecule of water flowing from point A to B in a river.  Negative example: a river flowing from A to B  (the river itself is not relocated); a rubber band stretching.  A borderline case:  a spider spins a web, leaving part of itself, in effect, extended out behind it.  In most contexts that would still be considered a Translation-Complete event.
Note:  Translation-Complete is noncommittal as to whether net movement has occurred, so round-trip events qualify as complete translations.  (For contrast, see Translation-LocationChange).")

;;; Translation-Flow
(isa Translation-Flow ScriptType)
(isa Translation-Flow TemporalStuffType)
(genls Translation-Flow Movement-TranslationEvent)
(comment Translation-Flow "A collection of translational motion events; hence a subset of Movement-TranslationEvent. In any element of Translation-Flow, the objectMoving is a FluidTangibleThing (i.e., a portion of some fluid, such as a quart of milk) rather than a discrete solid object.  At least some of the objectMoving leaves the fromLocation and some arrives at the toLocation; but it is not necessary that all of the objectMoving go from the origin (fromLocation) to the destination (toLocation).  Such fluid flows include rivers flowing or winds blowing or air filling your lungs when you take a breath.
Note: also intended to be included here are flows of ``fluids'' such as sand, drifting snow, etc., which are composed of multiple solid particles.  So a borderline case would be using a bulldozer to spread out a pile of rocks and gravel over a parking lock; depending on one's context (sensors, purposes, etc.) that might or might not be considered a Translation-Flow event.")

;;; Translation-LocationChange
(isa Translation-LocationChange TemporalObjectType)
(genls Translation-LocationChange Movement-TranslationEvent)
(comment Translation-LocationChange "A collection of translational motion events; a subset of Movement-TranslationEvent.  In each element of Translation-LocationChange, the objectMoving ends up in a different place than it started; i.e., the fromLocation cannot be the same as the toLocation.  Thus, a round trip travel event (Translation-RoundTrip) is NOT an instance of this collection.  See also Translation-NoLocationChange.")

;;; Translation-MultiPath
(isa Translation-MultiPath TemporalObjectType)
(genls Translation-MultiPath Movement-TranslationEvent)
(comment Translation-MultiPath "A collection of translational motion events; a subset of Movement-TranslationEvent.  In any element of Translation-MultiPath, motion may occur simultaneously along two or more instances of Path-Generic (which are not related by subpath/superpath relationships.)  Therefore, there must be at least two objectMovings in such an event.  There may be more than one fromLocation and/or more than one toLocation.  Elements of Translation-MultiPath include scattering, distributing, and collecting things.  E.g., all of the following exhibit multi-pathway translation movements: a rainshower or snowfall; an exploding firework; water being ejected from a sprinkling system; the surrounding objects being sucked up by a tornado; participants running a 100K footrace; pool balls during the opening break.  For non-examples of this, see Translation-SinglePath.")

;;; Translation-NoLocationChange
(isa Translation-NoLocationChange TemporalObjectType)
(genls Translation-NoLocationChange Movement-TranslationEvent)
(comment Translation-NoLocationChange "A collection of translational motion events; hence a subset of Movement-TranslationEvent.  In any instance of Translation-NoLocationChange, the objectMoving undergoes translational motion but ends up where it started --- i.e., there is no NET movement; i.e., its fromLocation and toLocation are the same.  Between the beginning and the end of a Translation-NoLocationChange, the objectMoving may visit the toLocation and the fromLocation any number of times.   E.g., consider the motion of a person who is born in, and 80 years later dies in, the very same hospital, and has been there a few times in between for operations, visiting patients, etc.  A less dramatic example is the motion of your car on a particular day, as it gets moved around, crosses its own path a few times, etc., but ends the day in the same place it started.   Elements of Translation-NoLocationChange may be periodic or nonperiodic movements.  An important subset of Translation-NoLocationChange is Translation-RoundTrip.")

;;; Translation-NonPeriodic
(isa Translation-NonPeriodic TemporalObjectType)
(genls Translation-NonPeriodic Movement-TranslationEvent)
(genls Translation-NonPeriodic Movement-NonPeriodic)
(comment Translation-NonPeriodic "The collection of all non-periodic translational movement
events, i.e., the intersection of Movement-NonPeriodic and
Movement-TranslationEvent.  In each instance of
Translation-NonPeriodic, the objectMoving is in translational
motion and does not move back the same position on the regular
temporal basis (it can visit the same location multiple times, just not regularly).")

;;; Translation-Periodic
(isa Translation-Periodic TemporalObjectType)
(genls Translation-Periodic Movement-TranslationEvent)
(genls Translation-Periodic Movement-Periodic)
(comment Translation-Periodic "A collection of periodic movement events; hence a subset of Movement-Periodic (q.v.)   In any element of Translation-Periodic, the periodic motion of the objectMoving is translational motion (as opposed, e.g., to rotation).  E.g., a ball bouncing in place translates periodically; so does a planet revolving around a star.  But not: a planet rotating on its axis, a top spinning in place.")

;;; Translation-RoundTrip
(isa Translation-RoundTrip TemporalObjectType)
(genls Translation-RoundTrip Translation-NoLocationChange)
(comment Translation-RoundTrip "A collection of events, Translation-RoundTrip is a subset of Translation-NoLocationChange.  Each element of Translation-RoundTrip represents one round trip event.  That is, an instance of Translation-RoundTrip is a complete translational movement that begins and ends in the same place (thus, the fromLocation and toLocation are identical).  However, a round trip is usually a discontinuous motion (cf. Movement-TranslationProcess).  In the simplest case, it has exactly one outboundLegOfRoundTrip and exactly one inboundLegOfRoundTrip, and the trip breaks at the destination-RoundTrip, which is the place that the traveller visits in between the two legs of the journey.  Thus, in addition to a fromLocation and toLocation, an instance of Translation-RoundTrip also has an origin-RoundTrip and destination-RoundTrip.  The origin-RoundTrip is just the same as the fromLocation and toLocation. 
For example, in Doug and Mary's trip to Antarctica, the origin-RoundTrip was CityOfAustinTX, the destination-RoundTrip was the ContinentOfAntarctica.  Thus, the CityOfAustinTX was both the fromLocation and the toLocation of the WHOLE (round) trip, and it was also the toLocation of the homeward leg of their trip (inboundLegOfRoundTrip).   The ContinentOfAntarctica was the toLocation for their outboundLegOfRoundTrip and the fromLocation of their homeward leg (i.e., their inboundLegOfRoundTrip).
Note: to describe a multi-stop `round trip',  instead of using Translation-RoundTrip one can represent it as a circuit composed of a series of one-way legs.")

;;; Translation-SinglePath
(isa Translation-SinglePath TemporalObjectType)
(genls Translation-SinglePath Movement-TranslationEvent)
(comment Translation-SinglePath "A subset of Movement-TranslationEvent.  Each element of Translation-SinglePath is a translational movement which involves exactly one pathway-Complete.  One or more items may have the role of objectMoving in such an event.  Note that although there is a single pathway-Complete, it does not follow that there is a unique fromLocation and a unique toLocation because that depends on our descriptions of locations.  (A single-pathed movement can be described as from TX to PA, or from Austin to Pittsburgh, or even from Northwest in Austin to Oakland in Pittsburgh.)  However, the single pathway-Complete connects fromLocation and toLocation.  Consider a translational motion performed by a whole group; it is likely to be a Translation-SinglePath ---  e.g., a flock of birds flying together, or a snarl of rush-hour traffic on the Beltway.  Negative examples (see Translation-MultiPath) would be: a set of billiard balls during the opening break, a group of water droplets that come together into one big drop.")

;;; Translocation
(isa Translocation TemporalObjectType)
(genls Translocation GeneralizedTransfer)
(comment Translocation "A collection of events; a subset of GeneralizedTransfer.  Each element of Translocation is a transfer of something across a distance.  Translocations may have a toLocation and a fromLocation.  Translocation is the common generalization of (i.e., a superset of) both WavePropagation and Movement-TranslationEvent (q.v.). ")

;;; Translucent
(isa Translucent Transparency)
(comment Translucent "Translucent is a PhysicalAttribute representing a specific degree of Transparency.  Translucent objects can transmit light, but not enough to see clear images.  See also transparencyOfObject.")

;;; Transparency
(isa Transparency MeasurableAttributeType)
(genls Transparency PhysicalAttribute)
(genls Transparency ScalarInterval)
(comment Transparency "A collection of attributes; a subset of PhysicalAttribute.  Each element of Transparency represents a capacity of some tangible object to transmit light.  Degrees of Transparency may be represented qualitatively (e.g., Translucent, Transparent, Murky, Opaque), or using GenericValueFunctions.  Indicate a particular object's Transparency with the predicate transparencyOfObject.")

;;; Transparent
(isa Transparent Transparency)
(comment Transparent "Transparent is a PhysicalAttribute representing a specific degree of Transparency.  Transparent objects transmit enough light to see clear images.  See also transparencyOfObject.")

;;; TransportFn
(isa TransportFn CollectionDenotingFunction)
(resultIsa TransportFn ScriptType)
(resultGenl TransportFn TransportingGoods)
(arg1Isa TransportFn StuffType)
(arg1Genl TransportFn PartiallyTangible)
(comment TransportFn "The function (TransportFn MATERIAL) means an act of transporting materials of type MATERIAL.")

;;; TransportViaFn
(isa TransportViaFn CollectionDenotingFunction)
(resultIsa TransportViaFn TemporalStuffType)
(resultGenl TransportViaFn TransportationEvent)
(arg1Isa TransportViaFn ExistingObjectType)
(arg1Genl TransportViaFn SolidTangibleThing)
(comment TransportViaFn "(TransportViaFn OBJ-TYPE) denotes the collection of TransportationEvents in each of which an instance of OBJ-TYPE is a transporter.  Thus (TransportViaFn RoadVehicle) is the collection of car driving, truck driving etc.. events.")

;;; TransportationCompany
(isa TransportationCompany ExistingObjectType)
(genls TransportationCompany CommercialServiceOrganization)
(genls TransportationCompany Business)
(comment TransportationCompany "A collection of organizations; a subset of ServiceOrganizations.  An element of TransportationCompany is an organization that provide transportation (of goods or persons) to customers for a fee.")

;;; TransportationDevice
(isa TransportationDevice ExistingObjectType)
(genls TransportationDevice Conveyance)
(comment TransportationDevice "A collection of transportation devices; a subset of Conveyance.  Each element of TransportationDevice is an artifact designed to play the role of transporter in transportation events.  Such devices enable something to be moved, by (for example) carrying, pulling, or pushing the transported things (transportees).  Transportation devices may or may not have their own power source (see SelfPoweredDevice).  Those which do, such as automobiles and speedboats, constitute the specialization TransportationDevice-Vehicle.  Other transportation devices require an external motive force, e.g., instances of Wheelbarrow or Bicycle.  (For more examples, see MusclePoweredDevice.)  Because transporter and transportees are specializations of objectMoving, it follows that any object in the role of transporter moves as a whole with those objects playing the role of transportees.  Since any instance of TransportationDevice has playing the role of transporter as its intendend function, stationary objects which cause motion, such as conveyor belts, escalators, rocket launchers, slingshots, etc. are excluded from the category of TransportationDevice.  Also excluded are devices which, although they facilitate travel, are worn rather than 'ridden on', 'ridden with', or 'ridden in'.  Ice skates, shoes, skis and other specializations of WearableConveyance fit this exclusionary criterion. 
Note that this is not the collection of all objects that can be used as transporters. For example, in an event of a man riding on a horse, the horse is the transporter but not an instance of TransportationDevice since a horse is not an artifact. So the main difference between transporters and transportation devices is that the latter have to be artifacts while the former do not.")

;;; TransportationDevice-Vehicle
(isa TransportationDevice-Vehicle ExistingObjectType)
(genls TransportationDevice-Vehicle TransportationDevice)
(genls TransportationDevice-Vehicle SelfPoweredDevice)
(comment TransportationDevice-Vehicle "TransportationDevice-Vehicle is the subcollection of TransportationDevice whose instances are also instances of SelfPoweredDevices, i.e., those that move under their own power.  E.g. jet airplanes, automobiles, but not skateboards, gliders, or rowboats.  Note that hand pushed gas powered lawnmowers, even though they are SelfPoweredDevices, are not instances of TransportationDevice-Vehicle because they are not their own providerOfMotiveForce when they move, whereas instances of LawnMower-Riding are vehicles.")

;;; TransportationEvent
(isa TransportationEvent TemporalObjectType)
(genls TransportationEvent Translation-LocationChange)
(genls TransportationEvent Translation-Complete)
(genls TransportationEvent Translation-SinglePath)
(genls TransportationEvent CausingAnotherObjectsTranslationalMotion)
(comment TransportationEvent "A collection of events.  An instance of TransportationEvent is an event in which one object (in the role of transporter) aids in the translational movement of another object (having the role of transportees), so that both objects move together along the same pathway-Complete.  Optionally, one of these objects, or some third object moving along with them, provides the force to make the movement happen (providerOfMotiveForce).  Examples of transportation events include automobile transporation, dogs pulling goods on a sled, a wagon with groceries rolling down a hill, a person carrying a suitcase down the street, etc.  In that last case, note that the transporter is the suitcase, not the person.  Things which are NOT TransportationEvents (as defined above): a river conveying some flotsam, the wind blowing a leaf, a conveyor belt moving a widget to the next person on the assembly line, or a walking beast of burden without transportees on it.  In the first 3 of those, the would-be transporter doesn't actually change its overall location; in the fourth case, the unburdened beast has no transportees.  
Note:  This is a good example, by the way, of how Cyc concepts must be, and are, less ambiguous than words in English or any other natural language.  The cost of this is a larger vocabulary that must be used carefully, but the benefits are the ability to share knowledge in un-preconceived ways with others who subscribe to the same set of terms and intended meanings.")

;;; TransportingGoods
(isa TransportingGoods DefaultDisjointScriptType)
(isa TransportingGoods TemporalStuffType)
(genls TransportingGoods HandlingAnObject)
(genls TransportingGoods HumanActivity)
(genls TransportingGoods TransportationEvent)
(comment TransportingGoods "Moving some kind of material from one point to another.  Different from just mixing stuff or putting stuff with other stuff.")

;;; TransportingPeople
(isa TransportingPeople DefaultDisjointScriptType)
(isa TransportingPeople TemporalStuffType)
(genls TransportingPeople HumanActivity)
(genls TransportingPeople TransportationEvent)
(comment TransportingPeople "The subcollection of TransportationEvent in each ofwhich instances of Person, i.e., human beings are the mainTransportees or among the mainTransportees.  Surely human beingsare usually not the only transportees in these instances of TransportationEvents (for example, some of these people'spersonal belongings are also among the transportees), andone may even think that in most instances of TransportationEvent, humanbeings are involved as transportees (for example, even adriver can be considered among the transportees).  The maindifference between this collection and the collectionTransportingGoods is that there are human beings as mainTransportees in instances of TransportingPeople, while thereare no human beings as mainTransportees in instances ofTransportingGoods.")

;;; Trapping
(isa Trapping ScriptType)
(isa Trapping TemporalObjectType)
(genls Trapping TakingCustodyOfAnimal)
(comment Trapping "A collection of events.  In an instance of Trapping, an animal is taken into custody by using a device that physically captures the body of the animal.  The animal may or may not be killed in the event.")

;;; TreatmentFn
(isa TreatmentFn CollectionDenotingFunction)
(resultIsa TreatmentFn TemporalStuffType)
(resultIsa TreatmentFn ScriptType)
(resultGenl TreatmentFn MedicalTreatmentEvent)
(arg1Isa TreatmentFn PhysiologicalConditionType)
(arg1Genl TreatmentFn AilmentCondition)
(comment TreatmentFn "TreatmentFn is a Cyc function, and in particular a CollectionDenotingFunction.  (TreatmentFn AILMENT) denotes the subset of MedicalTreatmentEvent whose elements are treatments of the ailment AILMENT.  For a specific AILMENT, the collection returned as the value of (TreatmentFn AILMENT) may be a subset of
some more general collection of medical procedures; e.g., standard processes of (TreatmentFn Depression-PsychologicalCondition) will also
be elements of PsychologicalTherapy.")

;;; Tree-ThePlant
(isa Tree-ThePlant ExistingObjectType)
(genls Tree-ThePlant Plant-Woody)
(comment Tree-ThePlant "A collection of plants; a subset of Plant-Woody.  Each element of Tree-ThePlant is a tree, i.e., a tall woody plant that is usually taller than a person or a bush, generally having a branching form overall, and with roots in the ground, a trunk, and the branches having numerous leaves exposed to the sky.  Cf. Bush.")

;;; TreeOrderedSet
(isa TreeOrderedSet ObjectType)
(genls TreeOrderedSet PartiallyOrderedSet)
(comment TreeOrderedSet "The collection of all sets with abstract rooted tree structures, in which there is a single root-element and all other elements are reachable along branches from the root-element via a 'successor' ordering relation, such that one element may have multiple successors, but no two elements have the same successor.  A TreeOrderedSet is a special case of PartiallyOrderedSet in which no element has multiple 'parent' nodes.  There are no cycles of relations in a TreeOrderedSet: from every element, there is exactly one path to the root-element.  Many, but not all, taxonomic hierarchies are TreeOrderedSets.  The end or 'bottom' nodes are sometime called 'leaf nodes'.  A TotallyOrderedSet or directed chain is a special case of a TreeOrderedSet that happens to have no branchings.  (Note that TreeOrderedSet requires a single root node and therefore excludes mathematical 'forests' consisting of multiple, disconnected TreeOrderedSets.)")

;;; Trial
(isa Trial ScriptType)
(isa Trial TemporalObjectType)
(genls Trial HostileSocialAction)
(comment Trial "The collection of legal conflicts that are heard and decided by a court.")

;;; Truck
(isa Truck ProductType)
(isa Truck ExistingObjectType)
(genls Truck RoadVehicle)
(comment Truck "The collection of all trucks, large RoadVehicles for ground transportation.  Trucks are most often used to haul freight, garbage, materials, liquids and other heavy loads.  FireTrucks take firemen to fires.  In many parts of the world, people routinely ride in the backs of Trucks.  A Truck has a cab for the driver, separate from the cargo area of the Truck.")

;;; True
(isa True TruthValue)
(isa True Individual)
(comment True "An element of TruthValue.  True is logical truth in Cyc; this is the abstract logical notion--not to be confused with Lisp's T, nor with the English word `true'.")

;;; TruthValue
(isa TruthValue ObjectType)
(genls TruthValue MathematicalObject)
(comment TruthValue "TruthValue is a collection of mathematical objects; it contains the abstract, logical objects True and False.")

;;; TubeShape
(isa TubeShape ThreeDimensionalShapeType)
(isa TubeShape AbstractShapeType)
(genls TubeShape ThreeDimensionalShape)
(genls TubeShape AbstractShape)
(comment TubeShape "The collection of all tube-like shapes: long, thin, hollow cylinders.  Pipes, hoses, smokestacks, etc.")

;;; Tumor
(isa Tumor ExistingObjectType)
(genls Tumor BiologicalLivingObject)
(comment Tumor "Each element of this collection is an abnormal tissue mass found in an animal.  Instances of Tumor include both malignant (cancerous -- see Cancer) and benign (non-cancerous) growths which have no normal physiological cause or function within the animal's body.")

;;; Tuple
(isa Tuple ObjectType)
(genls Tuple MathematicalObject)
(genls Tuple Situation)
(comment Tuple "A collection of mathematical objects.  Each element of Tuple is a complex which contains some number (greater than or equal to 1) of ordered (or otherwise indexed) components (it might be a pair, a triple, etc., or there may be a function from column names into their value domains).  For example, BloodPressureReading is a specialized subset of Tuple; each element of BloodPressureReading is an ordered or column-indexed pair (of numbers), in which the first is the systolic reading, the second the diastolic reading.  Components of tuples need not be restricted to numbers; for example, the entries in a data base (e.g., my address book) also qualify as tuples, whose components are name, address, phone, email address, etc.   A significant subset of Tuple is NTupleInterval (q.v.), whose elements are tuples consisting of intervals only; e.g., complex numbers, physical vectors.  Technically, if the index set for the Tuple is the counting numbers in their usual order, then the implied order alone can be used to pick a member of the tuple, and the tuple is in fact a List-Sequence.  In the general case, any index set (distinct column names, for example, in a relational database) may be used to index the members of a tuple, not just their order-postion numbers.")
(synonymousExternalConcept Tuple SENSUS-Information1997 "ORDERED-SET")

;;; TurningOffPoweredDevice
(isa TurningOffPoweredDevice TemporalObjectType)
(isa TurningOffPoweredDevice DefaultDisjointScriptType)
(genls TurningOffPoweredDevice ChangingDeviceState)
(comment TurningOffPoweredDevice "The collection of actions in which the DeviceState of a PhysicalDevice changes from DeviceOn to DeviceOff.")

;;; TurningOnPoweredDevice
(isa TurningOnPoweredDevice TemporalObjectType)
(isa TurningOnPoweredDevice DefaultDisjointScriptType)
(genls TurningOnPoweredDevice ChangingDeviceState)
(comment TurningOnPoweredDevice "The collection of actions in which the DeviceState of a PhysicalDevice changes from DeviceOff to DeviceOn.")

;;; Twilight
(isa Twilight TemporalObjectType)
(genls Twilight QualitativeTimeOfDay)
(comment Twilight "The union of the two collections of time intervals Dawn and Dusk.  Each Twilight is a situation where the sky is indirectly illuminated by the Sun, either just before a Sunrise or just after a Sunset.")

;;; TwoDimensionalShape
(isa TwoDimensionalShape ShapeType)
(genls TwoDimensionalShape GeometricThing)
(comment TwoDimensionalShape "A collection of geometrical 
things.  Each element of TwoDimensionalShape is a 
physical shapes that exist in two (and not less than two) 
dimensions. Some are basic geometrical shapes,
such as instances of Oval, but others can be irregular.")

;;; TwoDimensionalShapeType
(isa TwoDimensionalShapeType Collection)
(genls TwoDimensionalShapeType ShapeType)
(comment TwoDimensionalShapeType "A collection of collections.  Each instance of TwoDimensionalShapeType is a collection of things which are subsets of TwoDimensionalShape.")

;;; TwoStoryBuilding
(isa TwoStoryBuilding ExistingObjectType)
(genls TwoStoryBuilding Building)
(comment TwoStoryBuilding "Collection of all two story buildings.")

;;; TypePredicate
(isa TypePredicate RelationType)
(genls TypePredicate Predicate)
(comment TypePredicate "A collection of predicates.  Each element of TypePredicate is a predicate used in asserting relations between Collections, or between Individuals and Collections, which in turn imply further assertions involving instances of the Collections.  Examples: primaryActivityType, insuredEventTypes, anatomicalPartTypeAffected, frequencyOfActionType, objectTypesCollected.")

;;; USCity
(isa USCity SpatiallyDisjointRegionType)
(genls USCity City)
(comment USCity "A collection of cities.  Each element of USCity is a city in the UnitedStatesOfAmerica.  Note that City (q.v.) is widely construed to include towns and villages.  Examples of USCity: CityOfAustinTX, CityOfGainesvilleFL, CityOfLongBeachCA, CityOfArmonkNewYork, CityOfEssexJunctionVermont, CityOfCambridgeMA, CityOfPaloAltoCA, CityOfRedmondWA.")

;;; USFederalGovernmentOrganization
(isa USFederalGovernmentOrganization ExistingObjectType)
(genls USFederalGovernmentOrganization LegalGovernmentOrganization)
(comment USFederalGovernmentOrganization "A collection of government organizations.  An instance of USFederalGovernmentOrganization is an element of LegalGovernmentOrganization which is part of the UnitedStatesFederalGovernment.  This collection includes the U.S. military, Federal courts, U.S. Congress, U.S. territorial governments, Federal departments and independent agencies, and the city of Washington, D.C.; it does NOT include U.S. states, interstate compacts, and cities (other than Washington, D.C.).")

;;; UltraSound
(isa UltraSound WavePropagationType)
(genls UltraSound Sound)
(comment UltraSound "A collection of events; a subset of Sound.  Each element of UltraSound is a sound wave having a Frequency greater than 20,000 cycles per second, which is above the range of human hearing.")

;;; UnalloyedMetal
(isa UnalloyedMetal TangibleStuffCompositionType)
(genls UnalloyedMetal ElementStuff)
(genls UnalloyedMetal Metal)
(comment UnalloyedMetal "A collection of tangible stuffs; a subset of Metal.  Every instance of UnalloyedMetal is a metal which is also an element, i.e., a substance of unmixed chemical type.  Thus, each subset of UnalloyedMetal is a subset of both Metal and ElementStuff.  Examples of UnalloyedMetal include the instances of Gold, Iron, Uranium, Antimony, Titanium, and many more.")

;;; UnaryPredicate
(isa UnaryPredicate PredicateCategory)
(isa UnaryPredicate Collection)
(genls UnaryPredicate Predicate)
(comment UnaryPredicate "UnaryPredicate is the subset of Predicate whose elements take only a single argument.  Note, however, that most unary properties are implemented in Cyc as elements of Collection or of AttributeValue, rather than of UnaryPredicate.  So there should not be very many instances of this collection.")
(synonymousExternalConcept UnaryPredicate SENSUS-Information1997 "ONE-PLACE-RELATION")

;;; UnaryTypePredicate
(isa UnaryTypePredicate Collection)
(genls UnaryTypePredicate UnaryPredicate)
(genls UnaryTypePredicate InferenceRelatedBookkeepingPredicate)
(comment UnaryTypePredicate "redundant `typing' predicates created for inference efficiency")

;;; Unconscious
(isa Unconscious Alertness)
(comment Unconscious "Unconscious is the Alertness attribute of being Unconscious.  It is the opposite of Awake.  A specialization of this attribute is Asleep.")

;;; Underground
(isa Underground AttributeValue)
(comment Underground "The attribute of a location or region that means that it is below the surface of the ground of a particular place.")

;;; UnderlyingGraphFn
(isa UnderlyingGraphFn NonPredicateFunction)
(arg1Isa UnderlyingGraphFn Thing)
(arg2Isa UnderlyingGraphFn MultiGraph)
(comment UnderlyingGraphFn "For each PathSystem SYS, (UnderlyingGraphFn SYS) denotes the underlying multi-graph of SYS, i.e., the unique MultiGraph GRAPH (or the reduction of SYS) such that (reductionOfPathSystems SYS GRAPH) holds.")

;;; UnemployedPerson
(isa UnemployedPerson PersonByActivityType)
(genls UnemployedPerson Person)
(comment UnemployedPerson "A collection of persons.  Each instance of UnemployedPerson is a worker who is unemployed.  An unemployed worker is someone who either has worked previously and could still do so (if s/he had a job), or someone who is qualified to work (e.g., a recent graduate) but has not yet worked.")

;;; UnincorporatedOrganization
(isa UnincorporatedOrganization ExistingObjectType)
(genls UnincorporatedOrganization Organization)
(comment UnincorporatedOrganization "A collection of organizations.  An element of UnincorporatedOrganization is an organization that is constituted by one or more people but is not formally incorporated by a government charter.  It may be called an association.  In many legal jurisdictions, the organization itself is not a LegalAgent (q.v.); only its participants are.  Typically, an element of UnincorporatedOrganization (and thus its participants) are not protected by the limits on liability which are extended to a LegalCorporation (q.v.).")

;;; UnintendedLossOfUserRights
(isa UnintendedLossOfUserRights TemporalObjectType)
(genls UnintendedLossOfUserRights LosingUserRights)
(comment UnintendedLossOfUserRights "Nondeliberate loss of some UserRightsAttribute; for example, when something is stolen, appropriated, or, in some cases, simply lost.")

;;; UniqueAnatomicalPartType
(isa UniqueAnatomicalPartType SiblingDisjointCollection)
(genls UniqueAnatomicalPartType ExistingObjectType)
(comment UniqueAnatomicalPartType "A collection of collections.  Instances are types of OrganismParts that occur uniquely in the organisms (Organism-Whole) that have them.  For example, Head-AnimalBodyPart.")

;;; UnitOfAcceleration
(isa UnitOfAcceleration InterconvertibleUnitType)
(genls UnitOfAcceleration UnitOfMeasure)
(comment UnitOfAcceleration "The collection of functions which return elements of Acceleration.  For example, the value of the function MetersPerSecondPerSecond applied to the real number 9.8 -- (MetersPerSecondPerSecond 9.8) -- is 9.8 meters per second squared.")

;;; UnitOfAngularAcceleration
(isa UnitOfAngularAcceleration InterconvertibleUnitType)
(genls UnitOfAngularAcceleration UnitOfMeasure)
(comment UnitOfAngularAcceleration "The collection of functions which return elements of AngularAccelerationRate (i.e., the rate of change in the RateOfRotation).")

;;; UnitOfAngularDistance
(isa UnitOfAngularDistance InterconvertibleUnitType)
(genls UnitOfAngularDistance UnitOfMeasure)
(comment UnitOfAngularDistance "The collection of functions which return elements of AngularDistance.  E.g., (Radian 5) denotes 5 radians.")

;;; UnitOfAngularSpeed
(isa UnitOfAngularSpeed InterconvertibleUnitType)
(genls UnitOfAngularSpeed UnitOfMeasure)
(genls UnitOfAngularSpeed UnitOfRate)
(comment UnitOfAngularSpeed "The collection of functions which return elements of RateOfRotation.  E.g., (RadiansPerSecond 5) denotes a change of 5 radians in angular distance per second.")

;;; UnitOfArea
(isa UnitOfArea InterconvertibleUnitType)
(genls UnitOfArea UnitOfMeasure)
(comment UnitOfArea "The collection of functions which return elements of Area; e.g., (SquareYard 4) returns an area of 4 square yards.")

;;; UnitOfCapacitance
(isa UnitOfCapacitance InterconvertibleUnitType)
(genls UnitOfCapacitance UnitOfMeasure)
(comment UnitOfCapacitance "The collection of functions which return elements of ElectricalCapacitance.  E.g., (Farad 20) denotes an electrical capacitance of 20 farads.")

;;; UnitOfCharge
(isa UnitOfCharge InterconvertibleUnitType)
(genls UnitOfCharge UnitOfMeasure)
(comment UnitOfCharge "The collection of functions which return elements of ElectricalCharge.  E.g., (Coulomb 3) denotes an electrical charge of 3 coulombs.")

;;; UnitOfConcentration
(isa UnitOfConcentration InterconvertibleUnitType)
(genls UnitOfConcentration UnitOfMeasure)
(comment UnitOfConcentration "The collection of functions which return elements of ConcentrationStrength-Generic (i.e., mass of some element of ExistingStuffType per unit of Volume).  E.g., (GramsPerMilliliter 0.1) denotes a concentration of 0.1 grams per milliliter of one substance within another.")

;;; UnitOfCurrent
(isa UnitOfCurrent InterconvertibleUnitType)
(genls UnitOfCurrent UnitOfMeasure)
(comment UnitOfCurrent "The collection of functions which return elements of ElectricalCurrent.  E.g., (Ampere 2) denotes an instance of ElectricalCurrent that would measure two amps.")

;;; UnitOfDistance
(isa UnitOfDistance InterconvertibleUnitType)
(genls UnitOfDistance UnitOfMeasure)
(comment UnitOfDistance "The collection of functions which return elements of Distance; e.g., (Mile 26.2) denotes 26.2 miles.")

;;; UnitOfEnergy
(isa UnitOfEnergy InterconvertibleUnitType)
(genls UnitOfEnergy UnitOfMeasure)
(comment UnitOfEnergy "The collection of functions which return elements of EnergyAsAQuantity.  E.g., (Joule 5) denotes 5 joules.")

;;; UnitOfFlowRate
(isa UnitOfFlowRate InterconvertibleUnitType)
(genls UnitOfFlowRate UnitOfMeasure)
(genls UnitOfFlowRate UnitOfRate)
(comment UnitOfFlowRate "The collection of functions which return elements of FlowRate (i.e.,volume of stuff passing a point per unit of time).  E.g., (CubicMeter 2000) denotes a FlowRate of 2000 cubic meters per second.")

;;; UnitOfFrequency
(isa UnitOfFrequency InterconvertibleUnitType)
(genls UnitOfFrequency UnitOfMeasure)
(genls UnitOfFrequency UnitOfRate)
(comment UnitOfFrequency "The collection of functions which are used for expressing how often something occurs during an interval of time, i.e., functions which return an element of Frequency.  E.g., (MegaHertz 89.5) returns a frequency of 89.5 MHz.")

;;; UnitOfMass
(isa UnitOfMass InterconvertibleUnitType)
(genls UnitOfMass UnitOfMeasure)
(comment UnitOfMass "The collection of functions which return elements of Mass.  E.g. (Kilogram 5) denotes 5 kilograms.")

;;; UnitOfMeasure
(isa UnitOfMeasure RelationType)
(isa UnitOfMeasure Collection)
(genls UnitOfMeasure IndividualDenotingFunction)
(genls UnitOfMeasure NonPredicateFunction)
(genls UnitOfMeasure VariableArityRelation)
(comment UnitOfMeasure "UnitOfMeasure is the collection of all functions which return elements of ScalarInterval that describe physical quantities such as Speed, Volume, etc.  Those functions are usually grouped into subsets depending on what they measure (e.g., UnitOfSpeed,UnitOfVolume).  Functions which belong to UnitOfMeasure are variable-arity relations that take either one or two arguments, both of which must be elements of CycSystemRealNumber. If only one argument is given (e.g. (Meter 5)), the expression stands for a precise quantity (here, 5 meters); see also ScalarPointValue.  If two arguments are given (e.g. (Meter 5 10)), the expression stands for a closed interval and the arguments are interpreted as the interval's mininum and maximum, respectively. Following are a few example uses of some elements of UnitOfMeasure:







     `10 years': (YearsDuration 10) 



     `2 feet': (Foot-UnitOfMeasure 2) 



     `50 dollars and 2 cents': (Dollar-UnitedStates 50.02) 



     `between 1 and 50 pounds per square inch, inclusive': (PoundsPerSquareInch 1 50) 



     `dimensionless quantity between 3 and 4.1, inclusive': (Unity 3 4.1).")

;;; UnitOfMeasureNoPrefix
(isa UnitOfMeasureNoPrefix Collection)
(genls UnitOfMeasureNoPrefix UnitOfMeasure)
(comment UnitOfMeasureNoPrefix "Please see the SharedNote NoteForUnitOfMeasureWithPrefixAndNoPrefix.")

;;; UnitOfMeasureWithPrefix
(isa UnitOfMeasureWithPrefix Collection)
(genls UnitOfMeasureWithPrefix UnitOfMeasure)
(comment UnitOfMeasureWithPrefix "Please see the SharedNote NoteForUnitOfMeasureWithPrefixAndNoPrefix.")

;;; UnitOfMonetaryFlowRate
(isa UnitOfMonetaryFlowRate InterconvertibleUnitType)
(genls UnitOfMonetaryFlowRate UnitOfMeasure)
(genls UnitOfMonetaryFlowRate UnitOfRate)
(comment UnitOfMonetaryFlowRate "The collection of functions which return elements of MonetaryFlowRate (i.e. transfer of money per unit of time).  E.g., (DollarsPerHour 10) denotes a MonetaryFlowRate of $10 per hour.")

;;; UnitOfMoney
(isa UnitOfMoney InterconvertibleUnitType)
(genls UnitOfMoney UnitOfMeasure)
(comment UnitOfMoney "A collection of Cyc functions.  Dollar-UnitedStates, Peso-Mexico, and Yen-Japan are each elements of this collection (along with functions for many other nations's monetary units).  Each of these is a function which, given real numbers as arguments, returns an instance of the collection Money (q.v.).  For example, (Dollar-UnitedStates 5.99) denotes an element of Money whose size, or amount, is five dollars and 99 cents, expressed in the `unit of measure' US dollars; in short, (Dollar-UnitedStates 5.99) denotes $5.99.  

Note: The monetary values associated with the members of UnitOfMoney, and the exchange rates between them, fluctuate (sometimes widely) over very short periods of time -- daily, even hourly.  In being heavily time-dependent, UnitOfMoney is unlike most other subsets of UnitOfMeasure.")

;;; UnitOfPower
(isa UnitOfPower InterconvertibleUnitType)
(genls UnitOfPower UnitOfMeasure)
(comment UnitOfPower "The collection of functions which return elements of EnergyAsAQuantity.  E.g., (Watt 5) denotes 5 watts.")

;;; UnitOfPressure
(isa UnitOfPressure InterconvertibleUnitType)
(genls UnitOfPressure UnitOfMeasure)
(comment UnitOfPressure "The collection of functions which return elements of Pressure (i.e., force per unit Area) or Elasticity.  E.g., (Pascal-UnitOfPressure 175) denotes a Pressure of 175 pascals.")

;;; UnitOfRate
(isa UnitOfRate InterconvertibleUnitType)
(genls UnitOfRate UnitOfMeasure)
(comment UnitOfRate "The collection of functions which return elements of Rate.  This includes any measurement function (see UnitOfMeasure) whose unitOfMeasureExpansions list includes the factor (-1 UnitOfTime).  For example, (DollarsPerDay 1000) denotes $1000 per day.")

;;; UnitOfSpeed
(isa UnitOfSpeed InterconvertibleUnitType)
(genls UnitOfSpeed UnitOfRate)
(genls UnitOfSpeed UnitOfMeasure)
(comment UnitOfSpeed "The collection of functions which return elements of Speed.  For example, the value of the function MilesPerHour applied to the number five -- (MilesPerHour 5) -- is five miles per hour.")

;;; UnitOfTemperature
(isa UnitOfTemperature InterconvertibleUnitType)
(genls UnitOfTemperature UnitOfMeasure)
(comment UnitOfTemperature "The collection of functions which return elements of Temperature.  E.g., (DegreeFahrenheit 451) denotes a Temperature of 451 F.")

;;; UnitOfTime
(isa UnitOfTime InterconvertibleUnitType)
(genls UnitOfTime UnitOfMeasure)
(comment UnitOfTime "The collection of functions which return elements of Time; e.g., (YearsDuration 100) returns a time period equal to a century.")

;;; UnitOfVoltage
(isa UnitOfVoltage InterconvertibleUnitType)
(genls UnitOfVoltage UnitOfMeasure)
(comment UnitOfVoltage "The collection of functions which return elements of Voltage.  E.g., (Volt 120) denotes an electrical voltage of 120 volts.")

;;; UnitOfVolume
(isa UnitOfVolume InterconvertibleUnitType)
(genls UnitOfVolume UnitOfMeasure)
(comment UnitOfVolume "The collection of functions which return elements of Volume.  E.g., (Liter 5) denotes 5 liters.")

;;; UnitVector-Precise
(isa UnitVector-Precise ObjectType)
(genls UnitVector-Precise Vector-Precise)
(genls UnitVector-Precise UnitVectorInterval)
(comment UnitVector-Precise "The collection UnitVector-Precise is a subset of Vector-Precise and of UnitVectorInterval.  Each element of UnitVector-Precise is a vector interval with a magnitude of 1 and a precisely specified direction (e.g., due North, straight down).  Thus, one precise unit vector differs from another only in direction, since each vector consists of a magnitude and a direction (in a space of n > 1 dimensions).  So elements of UnitVector-Precise in effect indicate different directions such as `straight up' or `due East'.")

;;; UnitVectorInterval
(isa UnitVectorInterval ObjectType)
(genls UnitVectorInterval VectorInterval)
(comment UnitVectorInterval "The collection UnitVectorInterval is a subset of VectorInterval.  Each element of UnitVectorInterval is a vector interval with a magnitude of 1.  Thus, one unit vector differs from another only in direction, since each vector consists of a magnitude and a direction (in a space of n > 1 dimensions).   An element of UnitVectorInterval may specify either a precise unit vector or a generalized range of directions such as `in front of'.  See also UnitVector-Precise. ")

;;; UnitedStatesPerson
(isa UnitedStatesPerson Nationality)
(genls UnitedStatesPerson Person)
(comment UnitedStatesPerson "A collection of persons.  Each element of UnitedStatesPerson is a person who either was born in the UnitedStatesOfAmerica or is currently among that country's citizens.")

;;; UnitedStatesPresident
(isa UnitedStatesPresident OccupationType)
(genls UnitedStatesPresident Politician)
(genls UnitedStatesPresident PublicOfficial)
(genls UnitedStatesPresident President-HeadOfGovernmentOrHeadOfState)
(genls UnitedStatesPresident UnitedStatesPerson)
(comment UnitedStatesPresident "A collection of persons.  Each element of UnitedStatesPresident is a person who holds the office of UnitedStatesPresident.  Examples: BillClinton from January 1993 till the present (November 1996); RichardNixon from January 1969 till his resignation in 1974; LyndonJohnson from Novemeber 1963 till January 1969.  Note that ex-U.S. Presidents have, in recent journalistic practice, tended to retain the title `President', although those individuals are no longer members of the collection UnitedStatesPresident after they leave office.")

;;; Unity
(isa Unity UnitOfMeasure)
(isa Unity DimensionlessUnitOfMeasure)
(isa Unity UnitOfMeasureNoPrefix)
(isa Unity StandardUnitOfMeasure)
(resultIsa Unity ScalarInterval)
(resultIsa Unity IntervalOnNumberLine)
(argsIsa Unity CycSystemRealNumber)
(comment Unity "Unity is the standard unit of measure for dimensionless quantities.  Like other elements of UnitOfMeasure, Unity is a variable-arity function whose (one or two) arguments are instances of CycSystemRealNumber.  Unlike most other elements of UnitOfMeasure, Unity returns a dimensionless quantity, simply a real number without physical dimensions attached.  Thus, the value of (Unity .10) is equal to the point scalar 0.10, which is also the same quantity as (Percent 10).  Both (Unity .10) and 0.10 are legitimate instances of RealNumber; however, only 0.10 is a legitimate element of CycSystemRealNumber (q.v.).  Unity can be used to return a dimensionless real-number interval as well as a point value; e.g., (Unity 3 4) returns the interval that is the range of numbers between 3 and 4, inclusive.")

;;; University
(isa University ExistingObjectType)
(genls University EducationalOrganization)
(genls University ResearchOrganization)
(comment University "A collection of educational organizations.  An element of University is an organization, usually (but not always) called `University', which does university-level teaching and/or research.  Some universities comprise multiple `colleges' and professional schools.")

;;; UnorderedAttributeType
(isa UnorderedAttributeType SiblingDisjointCollection)
(genls UnorderedAttributeType AttributeType)
(comment UnorderedAttributeType "A collection of collections.  Each element of UnorderedAttributeType is a collection of attributes whose values are not ordered over their whole range of possible values.  A collection belonging to UnorderedAttributeType contains values that are incommensurable with one another.  For example, the `suit' attribute of playing cards (unlike the number or face value of the cards) is an unordered attribute in card games where no suit is considered higher than another.  The `gender' attribute of animals is an UnorderedAttributeType, as well.  By contrast, see PrimitiveAttributeType.")

;;; Up-Directly
(isa Up-Directly TerrestrialDirection)
(isa Up-Directly UnitVector-Precise)
(genlAttributes Up-Directly Up-Generally)
(comment Up-Directly "The direction straight up.  In the terrestrial context, Up-Directly points in the opposite direction of Earth's gravitational force vector.")

;;; Up-Generally
(isa Up-Generally TerrestrialDirection)
(comment Up-Generally "The element of VectorInterval which comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of Up-Directly.")

;;; UpSideDown
(isa UpSideDown OrientationAttribute)
(comment UpSideDown "(orientation OBJECT UpSideDown) means that OBJECT's intrinsic bottom (e.g., the hull of a ship) is above (above-Directly) its intrinsic top (e.g., the masthead).  Many things don't work properly when upside down, e.g., sailboats, salad bowls, newspapers.")

;;; UprightPosture
(isa UprightPosture Posture)
(comment UprightPosture "The attribute that describes an Animal in an upright, i.e. vertically extended, Posture.  (postureOfAnimal ?ANIM UprightPosture) is implied by walking and running, as well as by standing.")

;;; UrbanArea
(isa UrbanArea ExistingObjectType)
(genls UrbanArea HumanResidenceArea)
(comment UrbanArea "A collection of geographical regions; a subset of HumanResidenceArea.  Each element of UrbanArea is a region that has urban features.  Elements of UrbanArea can be as small as an urban neighborhood, or as big as, say, the New York City Metropolitan Area.  By default, urbanness is an intrinsic property of such areas; i.e., every subregion of an element of UrbanArea is also an instance of UrbanArea.  Examples: UTAustinCampus, WestlakeHills, CityOfAustinTX, CityOfToulouseFrance, CityOfMurmanskUSSR, CityOfTaipeiTaiwan, ResearchTrianglePark.")

;;; UrgeToScratch
(isa UrgeToScratch PhysicalUrgeType)
(genls UrgeToScratch InternalSensoryAttribute)
(genls UrgeToScratch AnimalPhysiologicalAttribute)
(comment UrgeToScratch "This is a Collection of physical urges of a certain type, namely the urges that animals have to scratch an itch (and their accompanying internal sensations.)")

;;; UrgeToSneeze
(isa UrgeToSneeze PhysicalUrgeType)
(genls UrgeToSneeze InternalSensoryAttribute)
(genls UrgeToSneeze AnimalPhysiologicalAttribute)
(comment UrgeToSneeze "This is a Collection of physical urges of a certain type, namely the urges that animals have to sneeze (and their accompanying internal sensations.)")

;;; UserRightsAttribute
(isa UserRightsAttribute UnorderedAttributeType)
(genls UserRightsAttribute AttributeValue)
(comment UserRightsAttribute "A collection of attributes.  An instance of UserRightsAttribute describes what right an agent has to use something.  For example, the rights of an owner of a house can be distinguished from the rights of a renter by specifying the appropriate UserRightsAttributes.  Elements of UserRightsAttributes include: FullUseRights (the agent can do whatever s/he wants with it), ExclusiveUserRights (the agent is the only authorized user), PrimaryUserRights (this agent's uses take priority over everyone else's), GroupUserRightsAttribute (the agent's right to use something depends on membership in a group), and more.")

;;; Utterance
(isa Utterance ObjectType)
(isa Utterance TemporalStuffType)
(genls Utterance InformationBearingWavePropagation)
(genls Utterance AnimalSound)
(comment Utterance "A collection of information bearing things (IBTs); a subset of AnimalSound.  Each element of Utterance is a sound which was initially generated by someone speaking or making some sound with the mouth.  If such IBTs are recorded and played back, the sound generated is still considered an element of Utterance.  Examples: your spouse saying `Good morning' today; Ed McMahon saying `Here's Johnny' (on almost innumerable occasions); a child screaming at a playmate; Humphrey Bogart saying `Here's looking at you' on the set of `Casablanca'.")

;;; VariableArityRelation
(isa VariableArityRelation RelationType)
(isa VariableArityRelation Collection)
(genls VariableArityRelation Relationship)
(comment VariableArityRelation "A collection of relationships.  Each element of VariableArityRelation is a relationship that can take a variable number of arguments, making it unlike most relationships, which have a fixed number of argument places.  Examples of VariableArityRelation include conjunction (and) and functions such as addition (PlusFn) that accept a variable number of arguments.")

;;; Vector-Precise
(isa Vector-Precise ObjectType)
(genls Vector-Precise VectorInterval)
(comment Vector-Precise "A collection of vectors; a subset of VectorInterval.  Each element of Vector-Precise is an exactly indicated (i.e., point) vector, such as `5 feet due West'.  Both direction and distance are precise.  Thus, Vector-Precise is to VectorInterval what ScalarPointValue is to ScalarInterval.  Vector-Precise includes all the instances of UnitVector-Precise.")

;;; VectorFromToFn
(isa VectorFromToFn ReifiableFunction)
(isa VectorFromToFn IndividualDenotingFunction)
(resultIsa VectorFromToFn UnitVectorInterval)
(arg1Isa VectorFromToFn SpatialThing)
(arg2Isa VectorFromToFn SpatialThing)
(comment VectorFromToFn "Returns a UnitVectorInterval which corresponds to the set of unit vectors which originate at some point in arg1 and terminate at some point in arg2.  For example, `the ball rolled towards Mecca' would be represented as (directionOfTranslation-Throughout BallRolling01 (VectorFromToFn Ball01 Mecca)).  `a ball rolling away from Mecca' would be represented as (directionOfTranslation-Throughout BallRolling (VectorFromToFn Mecca Ball)).  Note that this admits trajectories which are not directly towards a targeted object but which approach at an angle.  Note further that (VectorFromToFn OBJ REF) assumes that OBJ does not spatiallyIntersects REF.  See also directionBetweenObjects which is roughly interchangeable with VectorFromToFn.  directionBetweenObjects has the advantage that an arbitrarily precise direction may be specified.  VectorFromToFn saves the user from doing the labor involved with reifiing and from having to know the direction between ?obj1 and ?obj2.). ")

;;; VectorInterval
(isa VectorInterval ObjectType)
(genls VectorInterval NTupleInterval)
(genls VectorInterval AttributeValue)
(comment VectorInterval "The collection VectorInterval is a subset of NTupleInterval.  Each element of VectorInterval is an n-tuple of intervals (where n > 1), one of which is a direction.  Like the elements of ScalarInterval, the intervals in an element of VectorInterval may be point-valued or cover a range of values.  The minimal interval (i.e., point-valued) type of vector interval is exemplified by a vector such as `10 meters due east'.   Vectors may also cover a range of values; e.g., `at least 10 feet away and in a horizontal direction'; `between ten to twelve miles NNW'.")

;;; Vegetable-Food
(isa Vegetable-Food DefaultDisjointFoodType)
(isa Vegetable-Food ExistingStuffType)
(genls Vegetable-Food VegetableMatter)
(genls Vegetable-Food Food)
(comment Vegetable-Food "A collection of edible stuff.  Each element of Vegetable-Food is a foodstuff which is derived from a plant and is ordinarily considered a vegetable; e.g., a carrot (an instance of Carrot-Foodstuff), a potato (an instance of Potato-Foodstuff), a lima bean (a Bean-Foodstuff), a tomato (a Tomato-Foodstuff).

Note: Vegetable-Food includes certain plant parts that are technically classified as fruits by botanists, but which are treated as vegetables in food classification -- such as tomatoes.  These would, e.g., be found in the vegetables section of a supermarket, and they satisfy more of the axioms about vegetables than those about fruits (e.g., sweetness.)")

;;; Vegetable-Plant
(isa Vegetable-Plant ExistingObjectType)
(genls Vegetable-Plant Plant-NonWoody)
(comment Vegetable-Plant "A collection of plants that play a special role in human nutrition.  Each element of Vegetable-Plant is a plant that produces the edible things that we normally call `vegetables' (which can include fruits, seeds, stalks, leaves, or other parts, or even the whole plant).  The elements of Vegetable-Plant grow in gardens and produce the vegetables that are eaten; vegetable plants are not necessarily also elements of Food.  See Vegetable-Food for the collection of vegetables--plants or (more usually) plant parts--that are eaten by humans.")

;;; VegetableMatter
(isa VegetableMatter ExistingStuffType)
(genls VegetableMatter NaturalTangibleStuff)
(genls VegetableMatter OrganicStuff)
(comment VegetableMatter "A collection of tangible stuff.  Each element of VegetableMatter is a piece of stuff (solid, liquid, or, improbably but conceivably, gaseous) which is a piece of vegetable material.  This includes all instances of PlantProduct (such as elements of its subsets VegetableOil, TobaccoLeaf, Jute-Fiber, VanillaExtract, etc.), as well as naturally occurring pieces of vegetable matter (e.g., a clod of peat in a bog, an apple hanging on a tree, a mushroom growing wild in a forest).")

;;; Verb
(isa Verb LinguisticObjectType)
(genls Verb SpeechPart)
(comment Verb "The collection of all verbs. Verbs usually denote events, states, or processes. Verbs can be conjugated. Example: `eat'.")

;;; Vermin
(isa Vermin ExistingObjectType)
(genls Vermin NonPersonAnimal)
(comment Vermin "A collection of animals considered undesirable to find living in human habitation buildings or other facilities. ")

;;; Vertebrate
(isa Vertebrate BiologicalTaxon)
(genls Vertebrate Animal)
(comment Vertebrate "A collection of animals; one of the taxonMembers of the ChordataPhylum.   Each element of Vertebrate is an animal that has a backbone or spine made of bony or cartilaginous vertebrae, which may be separate or fused.  Vertebrate includes the most familiar animals, viz., the instances of Mammal, Reptile, Bird, Fish.  Some biologists class the 'Vertebrata' as a sub-phylum of the ChordataPhylum.  Vertebrate excludes Amphioxus.")
(synonymousExternalConcept Vertebrate SENSUS-Information1997 "VERTEBRATE")

;;; VerticalDirection
(isa VerticalDirection TerrestrialDirection)
(comment VerticalDirection "The element of VectorInterval that comprises all the vectors that are parallel to Up-Directly and Down-Directly.")

;;; VerticalOrientation
(isa VerticalOrientation OrientationAttribute)
(comment VerticalOrientation "(orientation OBJECT VerticalOrientation) means that OBJECT is vertical with respect to the current instance of FrameOfReference.  A linear (LongAndThin) object is vertical if and only if its longest dimension is perpendicular to horizontal (HorizontalDirection).  A planar (SheetShaped) object has VerticalOrientation if and only if its planar surface is perpendicular to the current horizontal plane.  Typically, vertical objects include window panes, skyscrapers, trees, radio towers, and walls.")

;;; VeryAlert
(isa VeryAlert Alertness)
(genlAttributes VeryAlert Awake)
(comment VeryAlert "VeryAlert is an Alertness attribute which is a specialization of Awake.  It is the state of an Animal paying particular attention to its environment (or a specific aspect thereof).  It is the state an Antelope is in after smelling a Lion, or a burglar is in after hearing the front door open.")

;;; VeryHighAmountFn
(isa VeryHighAmountFn GenericValueFunction)
(resultIsa VeryHighAmountFn ScalarInterval)
(arg1Isa VeryHighAmountFn PrimitiveAttributeType)
(arg1Genl VeryHighAmountFn ScalarInterval)
(comment VeryHighAmountFn "VeryHighAmountFn is a Cyc function, in particular, an element of IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' values for a wide variety of attributes.  When ATT is a type of attribute, (VeryHighAmountFn ATT) returns an instance of ATT which is considered `a very high amount of' ATT in the current context.  A very high amount of ATT is more than (MediumAmountFn ATT).")

;;; VeryLowAmountFn
(isa VeryLowAmountFn GenericValueFunction)
(resultIsa VeryLowAmountFn ScalarInterval)
(arg1Isa VeryLowAmountFn PrimitiveAttributeType)
(arg1Genl VeryLowAmountFn ScalarInterval)
(comment VeryLowAmountFn "VeryLowAmountFn is a Cyc function, in particular, an element of IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' amounts of a wide variety of attributes.  When ATT is a type of attribute, (VeryLowAmountFn ATT) returns an instance of ATT which is considered a very low amount of ATT in the current context. A very low amount of ATT is more than (NoAmountFn ATT) but less than (LowAmountFn ATT).  For example, it is bad for a politician to have (VeryLowAmountFn Credibility), though not uncommon.")

;;; VeterinaryHospital
(isa VeterinaryHospital ExistingObjectType)
(genls VeterinaryHospital LocalCustomerContactPoint)
(genls VeterinaryHospital MedicalCareOrganization)
(comment VeterinaryHospital "The collection of all local organizations that provide professional medical care to non-human animals.  Note that this is not a specialization of Hospital.  The names may be the same, but hospitals provide medical care to persons only.")

;;; VibrationThroughAMediumSensor
(isa VibrationThroughAMediumSensor ExistingObjectType)
(genls VibrationThroughAMediumSensor Sensor)
(comment VibrationThroughAMediumSensor "A subset of Sensor, namely those sensors that detect amplitude and frequency of vibrations through a physical medium.  This includes ears, skin, and also artificial devices such as microphones, seismographs, etc.  
Note:  Eyes are not VibrationThroughAMediumSensors because there need not be any physical medium for electromagnetic wave propagation.  This is a somewhat close call, and indeed in past centuries most people believed that light propagated through aether, but what it comes down to is this:  consider all the axioms that apply only to the structure, function, and operation, failure, etc. of a VibrationThroughAMediumSensor, and of that set how many hold true for eyes --- and the answer is No, most of them don't.  So parsimony dictates that Eye not be a subset of VibrationThroughAMediumSensor.")

;;; Vine-Plant
(isa Vine-Plant ExistingObjectType)
(genls Vine-Plant Plant)
(genls Vine-Plant TerrestrialOrganism)
(comment Vine-Plant "The collection of vine plants, Plants that are in the form (gross form and habit) of long tendrils or long, narrow, flexible ropy strands.")

;;; Virus
(isa Virus OrganismClassificationType)
(genls Virus Organism-Whole)
(genls Virus BiologicalLivingObject)
(comment Virus "The collection of tiny microbes called viruses, each consisting mainly of a capsid (capsule chamber) containing viral DNA or RNA.  Viruses have no cells, but reproduce by inserting into living cells the viral DNA or RNA, which then uses cellular mechanisms to create new viruses.  Viruses cause many diseases in all other organisms; some can infect elements of Bacterium.  Virus excludes prions, bacteria, rickettsia, and protists.")

;;; Visa-Permit
(isa Visa-Permit ExistingObjectType)
(genls Visa-Permit Credential)
(genls Visa-Permit Permission)
(genls Visa-Permit LegalAgreement)
(comment Visa-Permit "A collection of permissions.  Each element of Visa-Permit is an authorization issued by the government of some country to one (or more) person(s), stating that s/he is allowed to enter that country and remain for a certain period of time while engaging in certain specified activities (e.g., study, travel, work).  Examples: (United States) H1WorkVisa, F1WorkVisa, GreenCard.")

;;; Viscosity
(isa Viscosity MeasurableAttributeType)
(genls Viscosity PhysicalAttribute)
(genls Viscosity ScalarInterval)
(comment Viscosity "A collection of attributes; a subset of PhysicalAttribute.  Each element of Viscosity represents a specific viscosity (i.e., `runniness') of some LiquidTangibleThing.  The lower the viscosity of a liquid, the more easily it flows or spreads out.  Different viscosities may be represented with a GenericValueFunction (q.v.), or by using some common substance as a reference (e.g., ViscousAsWater, ViscousAsHoney).  Vicosities of objects are indicated with the predicate viscosityOfSubstance.")

;;; Visibility
(isa Visibility PrimitiveAttributeType)
(genls Visibility PhysicalAttribute)
(genls Visibility ScalarInterval)
(comment Visibility "A collection of attributes; a subset of ScalarInterval.  Each element of Visibility is a characterization of how clear the ambient fluid at a location is.  Higher values indicate one can see farther (than one could have at lower values at the same location).  Different degrees of visibility may be designated using a GenericValueFunction.  Visibility at a location is expressed with the predicate ambientVisibility.")

;;; VisibleLight
(isa VisibleLight WavePropagationType)
(genls VisibleLight ElectromagneticRadiation)
(comment VisibleLight "A collection of events; a subset of ElectromagneticRadiation.  Each element of VisibleLight is an instance of electromagnetic radiation having a wavelength approximately between 3800 and 7750 Angstroms, i.e., light visible to human eyes.")

;;; VisitingSomeone
(isa VisitingSomeone TemporalObjectType)
(isa VisitingSomeone DefaultDisjointScriptType)
(genls VisitingSomeone DirectedTranslation)
(genls VisitingSomeone Translation-SinglePath)
(genls VisitingSomeone Translation-LocationChange)
(genls VisitingSomeone SociabilityBasedAction)
(comment VisitingSomeone "A collection of actions.  In a VisitingSomeone event, one Agent travels or moves to the vicinity of another Agent for the purpose of meeting with that other Agent.  Each VisitingSomeone is purposeful, at least on the part of the Agent doing the travelling, and that Agent is typically a Person, and the purpose is often social in nature.")

;;; VisualCommunicating
(isa VisualCommunicating TemporalStuffType)
(isa VisualCommunicating DefaultDisjointScriptType)
(genls VisualCommunicating Communicating)
(comment VisualCommunicating "A collection of information transfer events; a subset of Communicating.  Each element of VisualCommunicating is an action in which information is transmitted by visual media.  Every element of VisualCommunicating has at least one communicationToken which is an instance of VisualInformationSource.  Examples of VisualCommunicating: a performance by mime Marcel Marceau; Seiji Ozawa conducting the Boston Symphony Orchestra; a policeman directing traffic; shaking a fist at someone in anger; sending a message with flags, light pulses, or smoke signals.")

;;; VisualImage
(isa VisualImage TemporalStuffType)
(genls VisualImage InformationBearingWavePropagation)
(genls VisualImage VisibleLight)
(comment VisualImage "A collection of information bearing things (IBTs); a subset of InformationBearingWavePropagation.  Each element of VisualImage is a pattern of visible light which contains information for an observer familiar with the interpretive conventions.  An observer sees the pattern.  Visual images may be produced by illuminating some instance of VisualInformationSource, which is a tangible object (e.g., a photograph, movie film, or page of print), or by direct manipulation of light(s) to produce a pattern (e.g., nautical code lights).  Visual images may be instantaneous or extended in time.  Visual images may be classified by features of their appearance (e.g., ColorImage, BlackAndWhiteImage), by their origin (e.g., XRayImage, PenOrPencilDrawing, SatelliteImage), their content (e.g., LandscapeImage), and other distinctions.")

;;; VisualInformationConveyingAct
(isa VisualInformationConveyingAct TemporalObjectType)
(isa VisualInformationConveyingAct DefaultDisjointScriptType)
(genls VisualInformationConveyingAct IBTGeneration-Original)
(comment VisualInformationConveyingAct "The collection of actions that express (transmit) visual information.")

;;; VisualInformationSource
(isa VisualInformationSource TemporalStuffType)
(genls VisualInformationSource InformationBearingThing)
(comment VisualInformationSource "A collection of information bearing things (IBTs).  Each element of VisualInformationSource is an IBT from which information is extracted by viewing it (with the appropriate interpretive conventions).  Examples of VisualInformationSource include handwritten letters; newspapers and other print media objects; paintings, sculpture, and other visual art objects; projected images, neon signs, etc.  The information content of instances of VisualInformationSource may or may not be propositional in nature.")

;;; VisualMark
(isa VisualMark ExistingStuffType)
(genls VisualMark VisualInformationSource)
(comment VisualMark "A collection of information bearing things (IBTs); a subset of VisualInformationSource.  Each element of VisualMark is a visible marking on some object.  Visual markings may be applied to an object using ink, paint, or pencil; they may be engraved into or molded out of the object's material; they may be made of other objects affixed to or resting on the object (e.g., a plaque bearing a house number); or they may consist of contrasting areas of color or light level (e.g., markings on a computer screen).")

;;; VisualPerception
(isa VisualPerception TemporalStuffType)
(isa VisualPerception DefaultDisjointScriptType)
(genls VisualPerception Perceiving)
(comment VisualPerception "The collection of sensory Perceivings in which a PerceptualAgent sees something by means of an ElectroMagneticRadiationSensor detecting wavelengths of visible light, and thereby acquires information about it.
Note:  one eye is sufficient for VisualPerception, and limited short-distance DepthPerception, but `true' long-distance DepthPerception requires two eyes.")

;;; VisualRepresentationMicrotheory
(isa VisualRepresentationMicrotheory MicrotheoryType)
(genls VisualRepresentationMicrotheory PropositionalInformationThing)
(comment VisualRepresentationMicrotheory "A collection of microtheories.  Each element of VisualRepresentationMicrotheory is a context in which to state the propositional content of a particular visual representation.  Visual representations include paintings, photographs, digitized images, moving pictures, statues, etc.  For example, a visual representation microtheory of the StatueOfLiberty would include such assertions as `a woman holds up a torch in her right hand', `the woman is dressed in a neo-Classical robe', etc.; it would NOT include such information as, e.g., the StatueOfLiberty is made of copper or the StatueOfLiberty is in New York harbor.")

;;; Volatility
(isa Volatility MeasurableAttributeType)
(genls Volatility PhysicalAttribute)
(genls Volatility ScalarInterval)
(comment Volatility "A collection of attributes; a subset of PhysicalAttribute.  Each element of Volatility represents the specific readiness of some liquid to evaporate.  Higher volatility indicates a faster rate of evaporation.  Volatilities of substances are indicated with the predicate volatilityOfSubstance.")

;;; Volt
(isa Volt UnitOfVoltage)
(isa Volt UnitOfMeasureNoPrefix)
(isa Volt MKSUnitOfMeasure)
(isa Volt StandardUnitOfMeasure)
(resultIsa Volt PhysicalAttribute)
(resultIsa Volt ScalarInterval)
(argsIsa Volt CycSystemRealNumber)
(comment Volt "The basic unit of electrical potential in the MKS system.  It is defined as one watt per ampere.")

;;; Volume
(isa Volume DerivedNumericAttributeType)
(genls Volume ScalarInterval)
(genls Volume PhysicalAttribute)
(comment Volume "A collection of physical attributes.  Each element of Volume is an amount of three-dimensional space occupied by one or more three-dimensional objects.  Elements of Volume may be either a fixed interval, such as the volume of a five-gallon aquarium, or a range, such as 'fits in a bread box'.  See UnitOfVolume for the units used by Cyc to measure volumes.")

;;; VoluntaryBodyMovement
(isa VoluntaryBodyMovement TemporalObjectType)
(isa VoluntaryBodyMovement DefaultDisjointScriptType)
(genls VoluntaryBodyMovement BodyMovementEvent)
(comment VoluntaryBodyMovement "The collection of acts concerned with an agent's intentionally moving one part of its body relative to another part of its body.  The energy source is the agent's own body, not some external force.  Each instance of WavingAHand is an instance of VoluntaryBodyMovement --- the focus of that action is on the hand moving relative to the body.  By way of constrast, an instance of OpeningADrawer is probably not going to be an instance of VoluntaryBodyMovement, even though the person opening the drawer probably does move their hand relative to their body, because the focus of the OpeningADrawer action is not on the hand moving, but rather on the drawer opening.")

;;; WagingWar
(isa WagingWar TemporalObjectType)
(isa WagingWar DefaultDisjointScriptType)
(genls WagingWar HumanActivity)
(comment WagingWar "The fighting of two or more armies through the use of weapons.  The same as doing battle.")

;;; Wagon
(isa Wagon ProductType)
(isa Wagon ExistingObjectType)
(genls Wagon MusclePoweredDevice)
(genls Wagon LandTransportationDevice)
(genls Wagon ContainerProduct)
(comment Wagon "The collection of all carts and wagons, relatively small non-motorized wheeled devices with two or more wheels, used for moving goods.  Usually they are human-powered or EquineAnimal driven.")

;;; WakingUpFromSleep
(isa WakingUpFromSleep TemporalObjectType)
(isa WakingUpFromSleep DefaultDisjointScriptType)
(genls WakingUpFromSleep IntrinsicStateChangeEvent)
(genls WakingUpFromSleep SingleDoerAction)
(genls WakingUpFromSleep AnimalActivity)
(comment WakingUpFromSleep "The collection of events in which an Animal goes from the state of being asleep to being in a waking state.")

;;; WallOfAConstruction
(isa WallOfAConstruction ExistingObjectType)
(genls WallOfAConstruction ConstructionArtifact)
(comment WallOfAConstruction "Any wall which is a part of a HumanShelterConstruction.  This includes includes the walls on the outside of the building as well as those on the inside such as the wall separating two rooms in a house.")

;;; Warplane
(isa Warplane ProductType)
(isa Warplane ExistingObjectType)
(genls Warplane MilitaryAircraft)
(genls Warplane Airplane)
(genls Warplane Weapon)
(comment Warplane "The collection of all Airplanes which are designed (and often used) as weapons of war.")

;;; Warranty
(isa Warranty ExistingObjectType)
(genls Warranty AuthorizedAgreement)
(comment Warranty "A collection of agreements; a subset of AuthorizedAgreement.  Each element of Warranty is an agreement between the seller (and/or manufacturer) and the purchaser of some object or service.  In a warranty, the seller/manufacturer promises that the object or service will be satisfactory in some indicated way (e.g., free of defects, effective, etc.).  Usually a warranty specifies what compensation an unsatisfied purchaser is entitled to (e.g., free repairs, a refund), and how s/he can claim it.")

;;; Washing
(isa Washing TemporalObjectType)
(isa Washing DefaultDisjointScriptType)
(genls Washing Cleaning)
(comment Washing "A collection of events, and a subset of Cleaning.  In a Washing event, some Water is being employed in the cleaning, typically with some surfactant such as soap dissolved in the water.  If only water (i.e., no soap) is used in a Washing, then the event also belongs to a particular subset of Washing, namely Rinsing.")

;;; WatchingSomething
(isa WatchingSomething TemporalStuffType)
(isa WatchingSomething DefaultDisjointScriptType)
(genls WatchingSomething SingleDoerAction)
(genls WatchingSomething VisualPerception)
(genls WatchingSomething PurposefulAction)
(comment WatchingSomething "A collection of events involving the deliberate direction of VisualPerception
on the part of an Agent.")

;;; Water
(isa Water ObjectType)
(isa Water ChemicalCompoundType)
(genls Water Oxide)
(comment Water "A collection of tangible things; a subset of Oxide.  Each instance of Water is one piece of all the portions of the chemical compound H2O.  Those instances may be in a gaseous, liquid, or solid  stateOfMatter; they may be salty, not salty, drinkable, or not drinkable.  Examples of Water include portions of the ocean, such as the BayOfBiscay and the BayOfBengal (see also SeaWater); bodies of fresh water, such as NiagaraFalls or the GangesRiver; quantities of chlorinated water (see PoolWater); and the contents of bottles of tonic water (see SeltzerWater).  Things that have one or more important properties different from water's, but consist mostly of water, don't belong to the collection Water but have an element of Water as their mainConstituent; e.g., urine, coffee, lemonade.")

;;; Water-Saline
(isa Water-Saline TangibleStuffCompositionType)
(genls Water-Saline Water)
(comment Water-Saline "A collection of tangible things; a subset of Water.  Each element of Water-Saline is a portion of water with some substantial concentration of salt mixed into it.  For example, the RedSea, GreatSaltLake, or the salt water I mix up for gargling.")

;;; WaterTransportationDevice
(isa WaterTransportationDevice ExistingObjectType)
(genls WaterTransportationDevice TransportationDevice)
(comment WaterTransportationDevice "A collection of transportation devices.  An instance of WaterTransportationDevice is a vehicle used for transportation on or through water (not a device for transporting water).  Subsets of WaterTransportationDevice include the collections Ship, Boat-WaterTransportationDevice, Sailboard, JetSki, etc.")

;;; Watt
(isa Watt UnitOfPower)
(isa Watt UnitOfMeasureNoPrefix)
(isa Watt MKSUnitOfMeasure)
(isa Watt StandardUnitOfMeasure)
(resultIsa Watt PhysicalAttribute)
(resultIsa Watt ScalarInterval)
(argsIsa Watt CycSystemRealNumber)
(comment Watt "This is the basic unit of power in the metric system and the basic UnitOfPower in CYC.  It is a newton-meter per second or a joule per second.")

;;; WaveEmissionFn
(isa WaveEmissionFn CollectionDenotingFunction)
(resultIsa WaveEmissionFn ScriptType)
(resultIsa WaveEmissionFn TemporalStuffType)
(resultGenl WaveEmissionFn EmittingAWave)
(arg1Isa WaveEmissionFn WavePropagationType)
(arg1Genl WaveEmissionFn WavePropagation)
(comment WaveEmissionFn "WaveEmissionFn is a Cyc function, specifically a CollectionDenotingFunction.  (WaveEmissionFn WAVETYPE) denotes a collection of events which is a subset of EmittingAWave; each element of (WaveEmissionFn WAVETYPE) is an event in which an instance of WavePropagation of the type WAVETYPE is emitted at a fromLocation.  For example, (WaveEmissionFn VisibleLight) denotes the collection of events in which visible light waves are emitted.")

;;; WavePropagation
(isa WavePropagation TemporalStuffType)
(isa WavePropagation DefaultDisjointScriptType)
(genls WavePropagation PhysicalEvent)
(genls WavePropagation Translocation)
(comment WavePropagation "A collection of events.  Each element of WavePropagation is an event in which a wavelike disturbance propagates through space, with or without a medium.  A wave propagation is like a translational movement in that it can have a fromLocation and a toLocation, but differs in that there is no objectMoving. Sound and ElectromagneticRadiation are types of WavePropagation.  Elements of WavePropagation include the sounds from exploding firecrackers at Penn State's Homecoming celebration in 1989; the light shining from my desk lamp right now; the X-rays generated in the dentist's office last Tuesday, for examining my teeth.")

;;; WavePropagationType
(isa WavePropagationType SiblingDisjointCollection)
(genls WavePropagationType TemporalStuffType)
(genls WavePropagationType Collection)
(comment WavePropagationType "A collection of collections.  Each element of WavePropagationType is itself a collection, containing one type of WavePropagation events.  Examples include the collections ElectromagneticRadiation, Sound, VisibleLight, and XRay.")

;;; WaveReceptionFn
(isa WaveReceptionFn CollectionDenotingFunction)
(resultIsa WaveReceptionFn TemporalStuffType)
(resultGenl WaveReceptionFn ReceivingAWave)
(arg1Isa WaveReceptionFn WavePropagationType)
(arg1Genl WaveReceptionFn WavePropagation)
(comment WaveReceptionFn "WaveReceptionFn is a Cyc function, specifically a CollectionDenotingFunction. (WaveReceptionFn WAVETYPE) denotes a collection of events which is a subset of ReceivingAWave; each element of (WaveReceptionFn WAVETYPE) is an event in which an instance of WavePropagation of the type WAVETYPE is received at some toLocation.  For example, (WaveReceptionFn AudibleSound) denotes the collection of events in which audible sound waves are received.")

;;; Weapon
(isa Weapon ExistingObjectType)
(genls Weapon PhysicalDevice)
(genls Weapon SolidTangibleProduct)
(comment Weapon "A collection of physical devices.  An instance of Weapon is a device primarily designed for destructive action against animals (often against other sentient beings, most often humans) and/or their habitats (or, more rarely, some class of possessions of theirs.)  This collection includes weapons as traditionally defined (e.g., instances of Sword, instances of Gun-Portable, Bombs, etc.) and also miscellaneous military vehicles and hardware used to kill, to destroy, to immobilize, etc. in military operations (such as the elements of Warplane, ModernNavalShip, Tank-Vehicle, etc.)
Note that in the case of missile weapons, both the launcher and the ammunition are considered Weapons in this sense.  E.g., a bow, an arrow, a missile launcher, an ICBM missile, a gun, a bullet.  This may seem odd at first glance, but in many contexts most of the same axioms apply to both.  Even in our linguistic utterances this carries over; e.g., if asked what killed JFK we can say a rifle, or a bullet from a rifle.  Of course there are specializations (subsets) of Weapon that limit themselves to `the real weapon itself' and to `ammunition for missile weapons.'")

;;; WearingSomething
(isa WearingSomething SituationType)
(genls WearingSomething PhysicalContactSituation)
(genls WearingSomething Configuration)
(comment WearingSomething "A collection of situations; a subset of Configuration.  Such a configuration has a temporal as well as a spatial extent, but activity is not implied.  Each element of WearingSomething is an arrangement of tangible objects, one of which is wearing the other(s).  Typically the wearer is a living person or animal, although surrogates are possible (e.g., mannequins, dolls, or corpses).  Objects worn are elements of SomethingToWear.  See also wearer, wearsClothing.")

;;; WeatherAttribute
(isa WeatherAttribute UnorderedAttributeType)
(genls WeatherAttribute AttributeValue)
(comment WeatherAttribute "A collection of attributes.  Each element of WeatherAttribute is an attribute that can be used to describe the weather occurring in a geographic region.  Examples: Snowy, Foggy.  See also weatherAttributes.")

;;; WeatherEvent
(isa WeatherEvent TemporalObjectType)
(isa WeatherEvent DefaultDisjointScriptType)
(genls WeatherEvent 
  (MeaningInSystemFn SENSUS-Information1997 "AMBIENT-PROCESS"))
(genls WeatherEvent PhysicalEvent)
(comment WeatherEvent "A collection of events.  Each element of WeatherEvent is a meteorological event of some duration, occurring over some spatial region.  Some weather events are almost instantaneous (e.g., elements of the collection LightningEvent); others encompass an entire AnnualClimateCycle.  Spatially, weather events may cover a small locality or a large portion of a continent.  Weather events are regional weather (in the short term) and are, or partially constitute, the annual climate of a region (in the long term).")

;;; WeeklyEventType
(isa WeeklyEventType Collection)
(genls WeeklyEventType TemporalObjectType)
(comment WeeklyEventType "The collection of event-types that occur weekly.  Each WeeklyEventType is a collection of events, all of which are synchronized with the calendar and which occur once a week.  E.g., once instance WeeklyEventType is CycStaffMeeting, since there is an instance of CycStaffMeeting once a week.")

;;; West-Directly
(isa West-Directly UnitVector-Precise)
(isa West-Directly GeographicalDirection)
(genlAttributes West-Directly West-Generally)
(comment West-Directly "Due West, an element of TerrestrialDirection.")

;;; West-Generally
(isa West-Generally GeographicalDirection)
(comment West-Generally "The general direction of West.  The element of VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of West-Directly.")

;;; WhiteCollar
(isa WhiteCollar JobAttribute)
(comment WhiteCollar "An attribute; an element of JobAttribute.  White collar jobs are those requiring little or no manual/physical labor; they are usually indoor jobs.")

;;; WildAnimal
(isa WildAnimal ExistingObjectType)
(genls WildAnimal NonPersonAnimal)
(comment WildAnimal "The collection of all animals that are not domesticated or tame.  Note that a captive animal may still be a wild animal, e.g., zoo animals that are not tame or domesticated.  Cf. CaptiveAnimal, DomesticatedAnimal.")

;;; WindPoweredDevice
(isa WindPoweredDevice ExistingObjectType)
(genls WindPoweredDevice KineticEnergyPoweredDevice)
(comment WindPoweredDevice "The subset of KineticEnergyPoweredDevice (q.v.) whose elements are powered by the wind.  For example, instances of the collection Windmill.")

;;; WindProcess
(isa WindProcess TemporalStuffType)
(genls WindProcess Translation-Flow)
(genls WindProcess ImmediateWeatherProcess)
(comment WindProcess "The collection of events in which the ambient air at a GeographicalRegion (or some significant part of the total air mass) is in motion.")

;;; WindowPane
(isa WindowPane ExistingObjectType)
(genls WindowPane SolidTangibleProduct)
(comment WindowPane "Each individual pane in a window. A window may only have one window pane.")

;;; WindowPortal
(isa WindowPortal RegionType)
(genls WindowPortal Portal)
(genls WindowPortal PartOfBuilding)
(comment WindowPortal "Windows are one kind of portal found in a human occupation construct.  They are usually covered by WindowThePortalCovering, which is the physical object made primarily of glass through which one can see.")

;;; WindowThePortalCovering
(isa WindowThePortalCovering ExistingObjectType)
(genls WindowThePortalCovering PortalCovering)
(genls WindowThePortalCovering PartOfBuilding)
(comment WindowThePortalCovering "The physical object which 'covers' or fills in the WindowPortal. It is a physical barrier, but because it is made primarily of glass, it allows light to enter.")

;;; WinterSeason
(isa WinterSeason TemporalObjectType)
(genls WinterSeason SeasonOfYear)
(comment WinterSeason "The collection of Winter seasons.  In the TemperateClimateCycle, generally a time of cold and dormancy.  WinterSeason represents the climatic aspects of Winter; for its purely temporal aspects, see CalendarWinter.")

;;; WomensClothing
(isa WomensClothing ProductType)
(isa WomensClothing ExistingObjectType)
(genls WomensClothing SheetOfSomeStuff)
(genls WomensClothing SomethingToWear)
(comment WomensClothing "A collection of objects.  Each element of WomensClothing is a clothing item worn usually by women, i.e., items normally found in the women's section of department stores.  Subsets include Skirts and HairPins.")

;;; Wood
(isa Wood TangibleStuffCompositionType)
(genls Wood OrganicStuff)
(genls Wood SolidTangibleThing)
(genls Wood PlantProduct)
(genls Wood StructuralSupportStuff)
(comment Wood "A collection of tangible things.  Each element of Wood is a piece of solid, rigid, fibrous organic substance in or derivedFrom the inside of the trunks and limbs of trees.  For example, any pieces of wooden furniture, doors, boards, fences, firewood, wooden spoons, etc.  Use the Cyc function WoodFn with a collection of trees of one species, to designate the collection of all pieces of wood from a particular species of tree; e.g., (WoodFn OakTree).  Note: cork and amber are NOT included in the collection Wood.")

;;; WorkAgreement
(isa WorkAgreement ExistingObjectType)
(genls WorkAgreement Agreement)
(comment WorkAgreement "A collection of intangible objects; a subset of Agreement.  Every element of WorkAgreement is an agreement between an employer and an employee, regarding the duties and remuneration which pertain to that worker's job for that employer.  Elements of WorkAgreement consist of various subAgreements, typically including elements of JobDescription, CompensationPackage, and some CodeOfConduct.")

;;; WorkStatus
(isa WorkStatus AttributeType)
(genls WorkStatus CompositeAttribute)
(comment WorkStatus "A collection of attributes.  Each element of WorkStatus is a classification commonly used by human resources departments to describe the status of workers on the company payroll.  Note that these attributes describe a person's status in a job, rather than the position itself.  Examples of WorkStatus include Commissioned, HourlyWork, FullTime, PartTime, TemporaryWork. Also see employeeStatus.")

;;; Workplace
(isa Workplace ContactLocationType)
(genls Workplace PhysicalContactLocation)
(genls Workplace HumanlyOccupiedSpatialObject)
(comment Workplace "The collection of places where people customarily work (not the employing organizations).  Workplace includes offices, restaurant buildings, construction sites, agricultural sites, the SpaceNeedle, etc.  Some places may be Workplaces only during a small part of their existence (a piece of residential property while the house is being built, perhaps); some may almost always be Workplaces (grocery store buildings, office buildings, smithies, hospitals, etc.).")

;;; Writing
(isa Writing TemporalObjectType)
(isa Writing DefaultDisjointScriptType)
(genls Writing IBOCreation)
(genls Writing VisualInformationConveyingAct)
(genls Writing MakingSomething)
(comment Writing "The collection of actions in which text is produced, either via writing by hand, with a typewriter, with a computer, etc.  Could be a single episode of writing, or a discontinuous set of episodes (as when one writes a letter over a few days).  Writing is not a Communicating, because there is not necessarily a successful transfer of information to some other agent.  Of course, instances of Writing can be subEvents of such transfers.")

;;; WritingByHand
(isa WritingByHand TemporalStuffType)
(isa WritingByHand DefaultDisjointScriptType)
(genls WritingByHand Writing)
(genls WritingByHand HandlingADevice)
(genls WritingByHand MarkingOnASurface)
(comment WritingByHand "Writing is the formation of characters or symbols on a suitable surface for transmitting information.")

;;; WritingImplement
(isa WritingImplement ExistingObjectType)
(genls WritingImplement Shaft)
(genls WritingImplement HandTool)
(comment WritingImplement "A collection of tools.  An instance of WritingImplement is a hand-held tool which is intended to be primarily used, by a person, for writing.  Subsets include the collections Chalk and WritingPen (but not Typewriter).  
Note: A marginal example is a PDA, such as an Apple Newton, with a stylus; both items, the PDA and the stylus, can be held in one's hands and used to record one's handwritten notes.  Another marginal positive example is a stylus designed to held in the mouth by a quadraplegic person; i.e., `hand-held' is not an absolutely hard and fast constraint here.  A close NON-example is a handheld calculator.")

;;; XRay
(isa XRay WavePropagationType)
(genls XRay ElectromagneticRadiation)
(comment XRay "A collection of events; a subset of ElectromagneticRadiation.  Each element of XRay is an instance of electromagnetic radiation that has a wavelength range from about 1 Angstrom to 1x10^-3 Angstroms.  Includes X-rays produced both naturally and artificially.")

;;; YearFn
(isa YearFn NonPredicateFunction)
(isa YearFn IndividualDenotingFunction)
(resultIsa YearFn CalendarYear)
(arg1Isa YearFn Integer)
(comment YearFn "(YearFn ?N) denotes a CalendarYear -- 
in particular, the year ?N in the Gregorian calendar.  
For example (YearFn 1966) denotes the year 1966. Non-positive 
years are permitted: (YearFn -1) denotes 1 B.C., (YearFn -2)
denotes 2 B.C., etc.) 
There is no (YearFn 0), just as in the Gregorian calender
there is no year 0. Note that YearFn -- unlike DayFn, 
MonthFn, etc. -- takes only one argument.")

;;; YearsDuration
(isa YearsDuration UnitOfMeasure)
(isa YearsDuration UnitOfMeasureNoPrefix)
(isa YearsDuration UnitOfTime)
(resultIsa YearsDuration Time-Quantity)
(resultIsa YearsDuration ScalarInterval)
(argsIsa YearsDuration CycSystemRealNumber)
(comment YearsDuration "This is a function that takes one or two numbers and returns, as its value, some amount of Time.  An expression of the form (YearsDuration ?min ?max) denotes a quantity of Time that is at least ?min years and at most ?max years.  (YearsDuration ?num) denotes a quantity of Time that is exactly ?num years.")

;;; abnormal
(isa abnormal DefaultMonotonicPredicate)
(isa abnormal BinaryPredicate)
(arg1Isa abnormal CycSystemList)
(arg2Isa abnormal Assertion)
(comment abnormal "Every default rule in our system

  P(x1,...,xn) => Q(x1,...,xn)

is implicitly treated as

  (not(abnormal(x1,...,xn)) and P(x1,...,xn) => Q(x1,...,xn)

This allows rules without exceptions to never have to incur the
overhead of default reasoning.

Exceptions to rules are written like so:

  (exceptWhen R(x1,...,xn) Rule001)

and get canonicalized into rules concluding abnormal like so:

  R(x1,...,xn) => (abnormal(x1,....,xn) Rule001)

Since a different 'abnormality' predicte is needed for every default
rule in the system, we instead handle this uniqueness requirement by
having a single abnormal predicate which takes the rule in question
as an argument.

Also, the variables over which abnormality is computed is given as a
single list.  This allows abnormal to be binary rather than
arbitrary arity. ")

;;; above-Directly
(isa above-Directly PhysicalFeatureDescribingPredicate)
(isa above-Directly AsymmetricBinaryPredicate)
(not 
  (isa above-Directly TransitiveBinaryPredicate))
(genlPreds above-Directly above-Generally)
(arg1Isa above-Directly PartiallyTangible)
(arg2Isa above-Directly PartiallyTangible)
(comment above-Directly "(above-Directly ABOVE BELOW) means either (1) the volumetric center of ABOVE is directly above some point of BELOW, if ABOVE is smaller than BELOW; or (2) otherwise, it means that some point of ABOVE is directly above the volumetric center of BELOW.")

;;; above-Generally
(not 
  (isa above-Generally TransitiveBinaryPredicate))
(isa above-Generally PhysicalFeatureDescribingPredicate)
(isa above-Generally AsymmetricBinaryPredicate)
(genlPreds above-Generally above-Higher)
(arg1Isa above-Generally PartiallyTangible)
(arg2Isa above-Generally PartiallyTangible)
(comment above-Generally "(above-Higher OBJ1 OBJ2)
means that OBJ1 is more or less above OBJ2. To be more 
precise: if OBJ1 would be within a cone-shaped set of 
vectors within about 45 degrees of Up-Directly 
pointing up from OBJ2 (see Up-Generally), then 
(above-Higher OBJ1 OBJ2). This
is a wider predicate than above-Directly, but narrower
than above-Higher. It probably most closely conforms to
the English word 'above.'")
(synonymousExternalConcept above-Generally SENSUS-Information1997 "ABOVE")

;;; above-Higher
(isa above-Higher CotemporalObjectsSlot)
(isa above-Higher AsymmetricBinaryPredicate)
(isa above-Higher TransitiveBinaryPredicate)
(isa above-Higher SpatialPredicate)
(genlPreds above-Higher cotemporal)
(arg1Isa above-Higher PartiallyTangible)
(arg2Isa above-Higher PartiallyTangible)
(comment above-Higher "(above-Higher ?OBJ-A ?OBJ-B) means that ?OBJ-A is ``higher up'' than ?OBJ-B.  Since most contexts are terrestrial (see TerrestrialFrameOfReferenceMt) ``higher up'' typically means that the altitudeAboveGround of ?OBJ-A is greater than that of ?OBJ-B.")

;;; above-Overhead
(isa above-Overhead IrreflexiveBinaryPredicate)
(not 
  (isa above-Overhead TransitiveBinaryPredicate))
(isa above-Overhead AsymmetricBinaryPredicate)
(isa above-Overhead SpatialPredicate)
(genlPreds above-Overhead above-Generally)
(genlPreds above-Overhead above-Directly)
(arg1Isa above-Overhead PartiallyTangible)
(arg2Isa above-Overhead PartiallyTangible)
(comment above-Overhead "(above-Overhead ABOVE BELOW) means that ABOVE is directly above BELOW, all points of ABOVE are higher than all points of BELOW, and they do NOT touch.  Examples: a bomb falling directly above a bunker; a street lamp shining directly above a person standing below.")

;;; above-Touching
(isa above-Touching SpatialPredicate)
(isa above-Touching AsymmetricBinaryPredicate)
(not 
  (isa above-Touching TransitiveBinaryPredicate))
(isa above-Touching IrreflexiveBinaryPredicate)
(genlPreds above-Touching above-Directly)
(genlPreds above-Touching above-Generally)
(genlPreds above-Touching touches)
(arg1Isa above-Touching PartiallyTangible)
(arg2Isa above-Touching PartiallyTangible)
(comment above-Touching "(above-Touching ABOVE BELOW) means that ABOVE is located over BELOW and they are touching.  More precisely, it implies both (above-Directly ABOVE BELOW) and that ABOVE touches BELOW.  Examples: a person sitting on a chair; coffee in a cup; a boat on water; a hat on a head. (Note that not every point of ABOVE must be higher than every point of BELOW.)")

;;; accountAdministrator
(isa accountAdministrator BinaryPredicate)
(arg1Isa accountAdministrator Account)
(arg2Isa accountAdministrator Agent)
(comment accountAdministrator "The predicate accountAdministrator identifies the agent who administers a particular account.  (accountAdministrator ACCT AGENT) means that the Account ACCT is administered by the individual or organization AGENT.")

;;; accountBalance
(isa accountBalance IntervalBasedQuantitySlot)
(arg1Isa accountBalance FinancialAccount)
(arg2Isa accountBalance Money)
(comment accountBalance "The predicate accountBalance is used to indicate the balance of a particular account.  (accountBalance ACCT BAL) means that the FinancialAccount ACCT has the balance BAL; BAL is the amount of Money either owed by, or available to, the accountHolder (depending upon the type of account).")

;;; accountHolder
(isa accountHolder BinaryPredicate)
(arg1Isa accountHolder Account)
(arg2Isa accountHolder Agent)
(comment accountHolder "The predicate accountHolder identifies the holder of a particular account.  (accountHolder ACCT AGENT) means that the Account ACCT is held by the individual or organization AGENT; thus, money (or some other valuable) is owed to or from AGENT, in the amount shown in the account (see accountBalance).")

;;; accountStatus
(isa accountStatus BinaryPredicate)
(arg1Isa accountStatus Account)
(arg2Isa accountStatus AccountStatusAttribute)
(comment accountStatus "The predicate accountStatus indicates whether a particular account is paid up, overdue, delinquent, etc.  (accountStatus ACCT STATUS) means that the Account ACCT has the attribute STATUS (see also AccountStatusAttribute).")

;;; acknowledgedAct
(isa acknowledgedAct AsymmetricBinaryPredicate)
(isa acknowledgedAct IrreflexiveBinaryPredicate)
(isa acknowledgedAct AntiTransitiveBinaryPredicate)
(genlPreds acknowledgedAct startsAfterEndingOf)
(arg1Isa acknowledgedAct Acknowledging-CommunicationAct)
(arg2Isa acknowledgedAct CommunicationAct-Single)
(comment acknowledgedAct "(acknowledgedAct ?ACKACT ?COMACT) means that the CommunicationAct-Single ?COMACT is acknowledged and replied-to by the responsive Acknowledging-CommunicationAct ?ACKACT.   Particular acceptances or rejections of a particular project proposal would involve examples of this predicate, as would a person responding to a wedding invitation, or a court responding to a motion.  See also responseTo which refers to the abstarct content of the communication.")

;;; acquaintances
(isa acquaintances TernaryPredicate)
(arg1Isa acquaintances Person)
(arg2Isa acquaintances Agent)
(arg3Isa acquaintances AcquaintanceAttribute)
(comment acquaintances "(acquaintances X Y HOW) means that X is acquainted with Y,  at least in the way (and/or to the degree) specified by HOW.  Note that Y must be an Agent, so this is not the predicate to use to express the fact that Fred `is acquainted with' drag racing.  Note that, depending on the value for HOW, there may or may not be some way in which Y is acquainted with X.  E.g., (acquaintances Lenat Madonna TrueFanAcquaintance) but there is no Z such that (acquaintances Madonna Lenat Z).
Note that X and Y should rarely be instances of Entity.  In fact, Doug has only been acqainted with Madonna since 1983, so we should write (holdsIn (TimeIntervalFromFn (YearFn 1983) Now) (acquaintances Lenat Madonna TrueFanAcquaintance)).")

;;; acquaintedWith
(isa acquaintedWith CotemporalObjectsSlot)
(isa acquaintedWith ReflexiveBinaryPredicate)
(isa acquaintedWith SymmetricBinaryPredicate)
(not 
  (isa acquaintedWith TransitiveBinaryPredicate))
(not 
  (isa acquaintedWith AntiSymmetricBinaryPredicate))
(not 
  (isa acquaintedWith AsymmetricBinaryPredicate))
(genlPreds acquaintedWith cotemporal)
(genlInverse acquaintedWith acquaintedWith)
(arg1Isa acquaintedWith IndividualAgent)
(arg2Isa acquaintedWith IndividualAgent)
(comment acquaintedWith "(acquaintedWith AGENT1 AGENT2) means the IndividualAgent AGENT1 is acquainted with the IndividualAgent AGENT2 (in the minimal sense that AGENT1 has come into physical or conversational contact with AGENT2, or that they have somehow knowingly communicated with each other).  This typically means that each IndividualAgent is aware of some facts about the other.  In cases where one of the IndividualAgents is sentient, this typically includes the ability of this agent to recognize the other by appearance, voice, scent, or some other physical attribute.")

;;; actionExpressesFeeling
(isa actionExpressesFeeling BinaryPredicate)
(arg1Isa actionExpressesFeeling Action)
(arg2Isa actionExpressesFeeling FeelingAttributeType)
(arg2Genl actionExpressesFeeling FeelingAttribute)
(comment actionExpressesFeeling "(actionExpressesFeeling ACT EMOTYPE) means that the particular action ACT expresses the doer's feeling of EMOTYPE.
Note: additional complications arise in using this in inference, as people can `fake' actions such as laughing, crying, etc., to mislead other people.")

;;; actorCapacity
(isa actorCapacity TernaryPredicate)
(arg1Isa actorCapacity SomethingExisting)
(arg2Isa actorCapacity Situation)
(arg3Isa actorCapacity CapacityAttribute)
(comment actorCapacity "The predicate actorCapacity is used to indicate the capacity in which some entity participates in a particular event or situation.  (actorCapacity ENTITY SIT CAP) means that ENTITY has an (unspecified) role in SIT with the CapacityAttribute CAP.  An important use of actorCapacity is with the capacity attributes MainFunction or IntendedFunction to state that a device is serving its primaryFunction or intended function (i.e., intendedBehaviorCapable) in a certain situation.")

;;; actorPartsAffected
(isa actorPartsAffected ActorSlot)
(genlPreds actorPartsAffected nonDeliberateActors)
(genlPreds actorPartsAffected objectActedOn)
(arg1Isa actorPartsAffected Event)
(arg2Isa actorPartsAffected OrganismPart)
(arg2Isa actorPartsAffected AnimalBodyPart)
(comment actorPartsAffected "(actorPartsAffected ACT PART) means that PART is an objectActedOn in ACT, and it is one of the anatomicalParts of the organism which is bodilyActedOn in ACT.  For example, during a man's morning shave, his Beard is an actorPartsAffected, but the hand with which he shaves is not, because his beard is changed, but his hand is not changed (`acted on') in any significant way.")

;;; actorPartsInvolved
(isa actorPartsInvolved ActorSlot)
(genlPreds actorPartsInvolved nonDeliberateActors)
(genlPreds actorPartsInvolved preActors)
(arg1Isa actorPartsInvolved Event)
(arg2Isa actorPartsInvolved OrganismPart)
(comment actorPartsInvolved "(actorPartsInvolved ACT PART) means that PART is one of the anatomicalParts of an organism who has an active role in the event ACT, and, moreover, that PART is somehow involved in the action.  Note that the organism to which PART belongs either performs or does ACT; it is not merely an objectActedOn.  Some examples of actorPartsInvolved  include: the eyes of someone who is sneezing (or crying); the left foot of someone playing in a football game; the right hand of someone who is shaking hands; the claws of a cat who is scratching someone.  As a negative example, consider your hair while you are getting a haircut.  It is not an actorPartsInvolved, because you are passive in that event; it is, though, an actorPartsAffected in that event.")

;;; actors
(isa actors ActorSlot)
(genlPreds actors temporallyIntersects)
(arg1Isa actors Event)
(arg2Isa actors SomethingExisting)
(comment actors "The predicate actors is the most general instance of ActorSlot.  All other actor slots are specializations of this predicate.  Thus, actors is a broad concept which includes any entity which is involved in an action.  (actors EVENT ACTOR) means that ACTOR is somehow meaningfully (directly or indirectly) involved in EVENT during EVENT.  Mere cotemporality of objects (somewhere in the universe) with a particular event is not enough `involvement' to make those objects actors of that event.  Nor is a representation of an event among the actors of that event, unless the representation affects the event.")
(synonymousExternalConcept actors SENSUS-Information1997 "PARTICIPANT")

;;; actsInCapacity
(isa actsInCapacity QuaternaryPredicate)
(arg1Isa actsInCapacity Agent)
(arg2Isa actsInCapacity ActorSlot)
(arg3Isa actsInCapacity ScriptType)
(arg4Isa actsInCapacity CapacityAttribute)
(comment actsInCapacity "The predicate actsInCapacity indicates the capacity in which an agent participates in certain kinds of actions.  (actsInCapacity AGENT ROLE SCRIPT-TYPE CAP) means that the agent AGENT plays the role ROLE in instances of SCRIPT-TYPE, and s/he does that role in the capacity CAP.  CAP is a CapacityAttribute (q.v.) which describes the AGENT's mode of participation--e.g., as a job, hobby, main function, support function, etc.  Contrast three cases of acts of GreetingSomeone, when performedBy: (1) instances of Receptionist, in their JobCapacity and as their MainFunction; (2) instances of FlightAttendant, in their JobCapacity but as a SupportFunction; and (3) instances of TrainEngineer, in a HobbyCapacity (though they do it while working, it's not part of their job).")

;;; addressText
(isa addressText FunctionalSlot)
(arg1Isa addressText ContactLocation)
(arg2Isa addressText Address-LocationDesignator)
(comment addressText "The predicate addressText maps a particular element of ContactLocation to its Address-LocationDesignator, ADDRESS.  (addressText LOC ADDRESS) means that the ContactLocation LOC has the address ADDRESS.  For example, the addressText of the Cycorp MailingLocation is `Cycorp, 3721 Executive Center Dr., Ste. 100, Austin, TX 78731-1615.'  See also ContactLocation.")

;;; adjacentPathsAtJunction
(isa adjacentPathsAtJunction CotemporalObjectsSlot)
(isa adjacentPathsAtJunction ConnectionPredicate)
(isa adjacentPathsAtJunction SpatialPredicate)
(genlPreds adjacentPathsAtJunction onPath-Generic)
(genlPreds adjacentPathsAtJunction cotemporal)
(genlPreds adjacentPathsAtJunction physicalDecompositions)
(genlPreds adjacentPathsAtJunction connectedTo)
(arg1Isa adjacentPathsAtJunction JunctionOfPaths)
(arg2Isa adjacentPathsAtJunction Path-Generic)
(comment adjacentPathsAtJunction "(adjacentPathsAtJunction JUNCT PATH) means that the JunctionOfPaths JUNCT has PATH as one of the paths joining it. A junction may connect many paths (it must connect more than one), and a path may pass through many junctions, and may end at a junction.  Examples: all the streets meeting at a certain intersection, or the particular trachea and both primary bronchi meeting at  the TracheobronchialJunction between a certain person's lungs.  Within a specified PathSystem, a node is the end of all the links to that node; this is established with linkBetweenInSystem or pathBetweenInSystem.")

;;; adjacentTo
(not 
  (isa adjacentTo TransitiveBinaryPredicate))
(isa adjacentTo SpatialPredicate)
(isa adjacentTo PhysicalFeatureDescribingPredicate)
(isa adjacentTo SymmetricBinaryPredicate)
(isa adjacentTo InterExistingObjectSlot)
(genlPreds adjacentTo touches)
(genlInverse adjacentTo adjacentTo)
(arg1Isa adjacentTo SpatialThing)
(arg2Isa adjacentTo SpatialThing)
(comment adjacentTo "arg1 and arg2 are touching such that their region of contact is a line (i.e. not a point).  Also arg1 is neither above nor below arg2.")

;;; affiliatedWith
(not 
  (isa affiliatedWith TransitiveBinaryPredicate))
(isa affiliatedWith IrreflexiveBinaryPredicate)
(isa affiliatedWith SymmetricBinaryPredicate)
(isa affiliatedWith CotemporalObjectsSlot)
(genlPreds affiliatedWith cotemporal)
(genlInverse affiliatedWith affiliatedWith)
(arg1Isa affiliatedWith Agent)
(arg2Isa affiliatedWith Agent)
(comment affiliatedWith "(affiliatedWith AGENT1 AGENT2) means Agents AGENT1 and AGENT2 are somehow affiliated.  This is a broad relation, but it involves at least the voluntary entry into an understood relationship, with rights and obligations, by at least one of the affiliated Agents; i.e., they may be business partners, kin, employer/employee, one (say a person) may be a member of the other (say an organization), parent-company/subsidiary, etc.")

;;; after
(isa after IrreflexiveBinaryPredicate)
(isa after PrimitiveTemporalRelation)
(isa after AsymmetricBinaryPredicate)
(isa after TransitiveBinaryPredicate)
(arg1Isa after TimePoint)
(arg2Isa after TimePoint)
(comment after "(after ?X ?Y) means TimePoint ?X is after (occurs later in time than) TimePoint ?Y.   
Note:  Individual TimePoints are seldom mentioned in axioms; rather, the axiom is likely to use some ComplexTemporalRelation, such as startsAfterEndingOf, which holds between two TemporalThing.   These ComplexTemporalRelations are themselves usually defined in terms of PrimitiveTemporalRelations, such as after and simultaneousWith, which relate one TimePoint to another.")
(overlappingExternalConcept after SENSUS-Information1997 "AFTER")

;;; afterAdding
(isa afterAdding InferenceRelatedBookkeepingPredicate)
(isa afterAdding BinaryPredicate)
(arg1Isa afterAdding Predicate)
(arg2Isa afterAdding CycSystemSymbol)
(comment afterAdding "Whenever a source is added to a gaf use of a predicate, each of that predicate's afterAdding functions is called on that source.")

;;; afterRemoving
(isa afterRemoving InferenceRelatedBookkeepingPredicate)
(isa afterRemoving BinaryPredicate)
(arg1Isa afterRemoving Predicate)
(arg2Isa afterRemoving CycSystemSymbol)
(comment afterRemoving "Whenever a source is removed from a gaf use of a predicate, each of that predicate's afterRemoving functions is called on that source.")

;;; age
(isa age IntervalBasedQuantitySlot)
(arg1Isa age SomethingExisting)
(arg2Isa age Time-Quantity)
(comment age "(age THING TIME) means that the thing THING
has the age TIME, where thing can be a person, a galaxy, or
anything else with temporal extent, e.g., (age MaryShepherd 
       (YearsDuration 40)). The previous assertion is not quite right, however:
notice that one can talk about the birthDate of a person quite safely, but whenever one makes a statement about the AGE of a person that statement will only be true `for a while' -- i.e., in some temporal context.  Therefore it would be a mistake to simply assert to Cyc that (age Lenat (YearsDuration 45)), because that would be true in some contexts and false in others.  So what one does is to assert an expression of the form  (holdsIn ?X (age ?Y ?Z)) to indicate that during time interval ?X, the thing ?Y has age ?Z.  For example, (holdsIn (QuarterFn 2 (YearFn 1996)) (age Lenat (YearsDuration 45)), which means that Doug is a 45-year-old during the entire second quarter of 1996.  It is seldom correct to use age outside of some temporal qualification.")
(synonymousExternalConcept age SENSUS-Information1997 "AGE-PROPERTY-ASCRIPTION")

;;; agreeingAgents
(isa agreeingAgents InterActorSlot)
(arg1Isa agreeingAgents Agreement)
(arg2Isa agreeingAgents Agent)
(comment agreeingAgents "The predicate agreeingAgents relates a particular agreement to the agents who are making the agreement.  (agreeingAgents AGR PARTY) means that the Agreement AGR has the Agent PARTY among its agreeing parties.  agreeingAgents may have specialized roles, such as agreeingBuyer or agreeingSeller, insuringAgent or policyHolder, employedAgent or employingAgent.  The agreeingAgents will be mentioned in their agreement.")

;;; agreementForbids
(isa agreementForbids TernaryPredicate)
(arg1Isa agreementForbids Agreement)
(arg2Isa agreementForbids Agent)
(arg3Isa agreementForbids ScriptType)
(comment agreementForbids "The predicate agreementForbids is used to indicate types of actions that a particular agent is forbidden from performing under the terms of a particular agreement.  (agreementForbids AGR AGENT ACT-TYPE) means that the Agreement AGR forbids the Agent AGENT from ACT-TYPE activities.  For example, an instance of PeaceAccord agreementForbids the governments who signed it from WagingWar against one another; or, a business contract may forbid one agent from competing with another after s/he sells rights to a product, design, or practice to the second agent.")

;;; agreementPeriod
(isa agreementPeriod BinaryPredicate)
(arg1Isa agreementPeriod Agreement)
(arg2Isa agreementPeriod TimeInterval)
(comment agreementPeriod "The predicate agreementPeriod is used to indicate the period of time during which a particular agreement is in force.  (agreementPeriod AGR TIME) means that the Agreement AGR holds during the TimeInterval TIME; i.e., TIME is the period during which the assertions made in AGR are supposed to be true.  TIME may or may not begin at the moment that AGR is created; e.g., I may sign an employment contract on the very day I begin working or several weeks before, to begin on a specified future date.  Or an agreementPeriod could begin before the agreement was made, e.g., when an agent agreed to pay disputed royalties retroactively.")

;;; alertnessLevel
(isa alertnessLevel IntervalBasedQuantitySlot)
(arg1Isa alertnessLevel IndividualAgent)
(arg2Isa alertnessLevel Alertness)
(comment alertnessLevel "Predicate (alertnessLevel SENTIENT_BEING LEVEL) indicates how alert SENTIENT_BEING is in the period in which the predicate holds.  The major levels are Unconscious and Awake, but more specific attributes such as Asleep and VeryAlert exist as well.")

;;; ambientRelativeHumidity
(isa ambientRelativeHumidity IntervalBasedQuantitySlot)
(genlPreds ambientRelativeHumidity hasAttributes)
(arg1Isa ambientRelativeHumidity GeographicalRegion)
(arg2Isa ambientRelativeHumidity RelativeHumidity)
(comment ambientRelativeHumidity "(ambientRelativeHumidity LOC DEGREE) indicates the DEGREE to which the water vapor content of the air at LOC approaches the total possible saturation (at that temperature).")

;;; ambientTemperature
(isa ambientTemperature IntervalBasedQuantitySlot)
(arg1Isa ambientTemperature PartiallyTangible)
(arg2Isa ambientTemperature Temperature)
(comment ambientTemperature "The predicate ambientTemperature is used to indicate the average temperature in the free space around a particular object.  (ambientTemperature OBJ TEMP) means that the space around the tangible object OBJ is at the Temperature TEMP.  Used with holdsIn (q.v.), ambientTemperature expresses the surrounding temperature for a given object at some point in time.  For the temperature of the object itself, use temperatureOfObject (q.v.).")

;;; ambientVisibility
(isa ambientVisibility IntervalBasedQuantitySlot)
(genlPreds ambientVisibility hasAttributes)
(arg1Isa ambientVisibility GeographicalRegion)
(arg2Isa ambientVisibility Visibility)
(comment ambientVisibility "(ambientVisibility LOC DEGREE) indicates how clear the ambient fluid is at the location LOC.  Higher values of DEGREE mean one can see farther (than one could have at lower values).")

;;; amountOfSalesByToDuring
(isa amountOfSalesByToDuring FunctionalPredicate)
(isa amountOfSalesByToDuring QuintaryPredicate)
(arg1Isa amountOfSalesByToDuring Agent)
(arg2Isa amountOfSalesByToDuring Agent)
(arg3Isa amountOfSalesByToDuring TimeInterval)
(arg4Isa amountOfSalesByToDuring ProductType)
(arg4Genl amountOfSalesByToDuring Product)
(arg5Isa amountOfSalesByToDuring Money)
(comment amountOfSalesByToDuring "The predicate amountOfSalesByToDuring is used to indicate how much of a certain product was sold by a particular seller to a particular buyer.  (amountOfSalesByToDuring SELLER BUYER TIMEPD PRODTYPE REVENUE) means that, during the TimeInterval TIMEPD, SELLER (an Agent) sold to BUYER (another Agent) some amount of the ProductType PRODTYPE, worth the total amount of Money REVENUE.  For example, to say that a restaurant, Threadgills, sold $3000 worth of their pumpkin pies to a local grocery store in November, we would say: (amountOfSalesByToDuring Threadgills HEBAt2222 (MonthFn November (YearFn 1996)) PumpkinPie (Dollar-UnitedStates 3000)).")

;;; amplitudeOfSignal
(isa amplitudeOfSignal IntervalBasedQuantitySlot)
(arg1Isa amplitudeOfSignal WavePropagation)
(arg2Isa amplitudeOfSignal Distance)
(comment amplitudeOfSignal "(amplitudeOfSignal ?WAVE ?AMP) means the distance from the average to the extremes of the signal ?WAVE is ?AMP.")

;;; analogousFeelings
(isa analogousFeelings IntensionalRepresentationPredicate)
(isa analogousFeelings IrreflexiveBinaryPredicate)
(isa analogousFeelings SymmetricBinaryPredicate)
(not 
  (isa analogousFeelings TransitiveBinaryPredicate))
(genlInverse analogousFeelings analogousFeelings)
(arg1Isa analogousFeelings FeelingAttributeType)
(arg1Genl analogousFeelings FeelingAttribute)
(arg2Isa analogousFeelings FeelingAttributeType)
(arg2Genl analogousFeelings FeelingAttribute)
(comment analogousFeelings "(analogousFeelings EMOTYPE1 EMOTYPE2) means that a feeling of the type EMOTYPE1 is analogous to a feeling of the type EMOTYPE2.  In part, this means that there is a high probability that an agent having an emotion of one type is also feeling an emotion of the other type.  Often the two feelings differ only in degree, context, etc.  E.g., (analogousFeelings Irritation Anger) and (analogousFeelings Irritation Impatience).")

;;; anatomicalPartTypeAffected
(isa anatomicalPartTypeAffected BinaryPredicate)
(isa anatomicalPartTypeAffected TypePredicate)
(arg1Isa anatomicalPartTypeAffected AnimalActivity)
(arg2Isa anatomicalPartTypeAffected ExistingObjectType)
(arg2Genl anatomicalPartTypeAffected AnimalBodyPart)
(comment anatomicalPartTypeAffected "(anatomicalPartTypeAffected ACT BODYPARTTYPE) means that body parts of the AnimalBodyPartType BODYPARTTYPE are affected by the action ACT.  For example, if BRUSHING is a TeethCleaning event, then (anatomicalPartTypeAffected BRUSHING SetOfTeeth).")

;;; anatomicalParts
(isa anatomicalParts PhysicalPartPredicate)
(isa anatomicalParts CotemporalObjectsSlot)
(genlPreds anatomicalParts physicalParts)
(genlPreds anatomicalParts cotemporal)
(arg1Isa anatomicalParts Organism-Whole)
(arg2Isa anatomicalParts OrganismPart)
(comment anatomicalParts "(anatomicalParts ORGM PART) means that PART is an anatomical part of the (whole) organism ORGM.  
Note that to represent the decomposition of parts of subparts --- for example, to say that a finger is part of a hand --- one should use the predicate physicalParts (qv), not anatomicalParts.")

;;; anatomicalResourceRequired
(isa anatomicalResourceRequired TernaryPredicate)
(arg1Isa anatomicalResourceRequired AnimalActivity)
(arg2Isa anatomicalResourceRequired ExistingObjectType)
(arg2Genl anatomicalResourceRequired AnimalBodyPart)
(arg3Isa anatomicalResourceRequired NonNegativeInteger)
(comment anatomicalResourceRequired "(anatomicalResourceRequired ACT BODYPARTTYPE NUM) means that the successful doer of ACT must have this many (NUM) of the AnimalBodyPartType BODYPARTTYPE.  For example, if VOLANT is an element of Flying-FlappingWings, then (anatomicalResourceRequired VOLANT Wing-AnimalBodyPart 2).")

;;; anatomicallyCapableOf
(isa anatomicallyCapableOf TernaryPredicate)
(arg1Isa anatomicallyCapableOf Animal)
(arg2Isa anatomicallyCapableOf Collection)
(arg2Genl anatomicallyCapableOf Situation)
(arg3Isa anatomicallyCapableOf Role)
(comment anatomicallyCapableOf "The predicate anatomicallyCapableOf indicates that an agent is anatomically able to take a certain role in a certain type of situation or event.  (anatomicallyCapableOf AGENT SIT-TYPE ROLE) means that an individual Animal AGENT has the anatomical prerequisites (natural or prosthetic) to act in this ROLE in normal instances of SIT-TYPE.  For example, to express that Karen is capable of walking, Cyc would say (anatomicallyCapableOf Karen BipedWalking performedBy).  AGENT may or may not have the skills (or other prerequisites) for actually doing a SIT-TYPE.  anatomicallyCapableOf entails that AGENT satisfies the relevant anatomicalResourceRequired constraint--e.g., for Karen's BipedWalking, that she has two legs (natural or prosthetic).  As a default, Cyc concludes that animals who have the anatomicalParts needed for a certain kind of activity are anatomicallyCapableOf that activity--for example, that people who have arms and legs are anatomicallyCapableOf swimming; those conclusions would be overridden by the additional information that a person was paralyzed.")

;;; ancestors
(isa ancestors AsymmetricBinaryPredicate)
(isa ancestors TransitiveBinaryPredicate)
(isa ancestors AntiSymmetricBinaryPredicate)
(isa ancestors IrreflexiveBinaryPredicate)
(genlPreds ancestors biologicalRelatives)
(arg1Isa ancestors Animal)
(arg2Isa ancestors Animal)
(comment ancestors "(ancestors YOUNGER OLDER) means OLDER is one of the biological ancestors of YOUNGER.  OLDER could be one of YOUNGER's biological parents, biological grandparents, biological great-grandparents, etc.")

;;; and
(isa and LogicalConnective)
(isa and CommutativeRelation)
(isa and VariableArityRelation)
(argsIsa and CycFormula)
(comment and "The predicate and is the conjunction relation in Cyc.  and is a variable-arity predicate and takes any number of elements of CycFormula as its arguments.  (and P Q ... Z) is true if all of the formulas P, Q, ..., and Z are true in Cyc.")
(resultIsa and CycExpression)

;;; angularAcceleration
(isa angularAcceleration PhysicalAttributeDescriptionSlot)
(arg1Isa angularAcceleration PhysicalEvent)
(arg2Isa angularAcceleration AngularAccelerationRate)
(comment angularAcceleration "The rate at which the angle to an object is accelerating")

;;; appropriateEmotion
(isa appropriateEmotion QuaternaryPredicate)
(arg1Isa appropriateEmotion Situation)
(arg2Isa appropriateEmotion Role)
(arg3Isa appropriateEmotion FeelingAttributeType)
(arg3Genl appropriateEmotion FeelingAttribute)
(arg4Isa appropriateEmotion GenericAttribute)
(comment appropriateEmotion "(appropriateEmotion SIT ROLE EMOTYPE DEGREE) means that in the Situation SIT, an intelligent agent filling the Role ROLE would be expected to feel an emotion of FeelingAttributeType EMOTYPE with the intensity DEGREE.  If such an agent did not feel that emotion, s/he would generally be considered rude or strange. E.g., a High degree of Grief is an appropriateEmotion for someone in the audience at a funeral (but not for the workers, the deceased, etc.)")

;;; approximatePay
(isa approximatePay IntervalBasedQuantitySlot)
(arg1Isa approximatePay OccupationType)
(arg1Genl approximatePay Professional)
(arg2Isa approximatePay MonetaryFlowRate)
(comment approximatePay "The predicate approximatePay is used to estimate a typical amount of pay offered to workers in a specific occupation.  (approximatePay JOBTYPE RATE) means that a person working in the OccupationType JOBTYPE makes approximately the MonetaryFlowRate RATE, as earned income.  RATE might be expressed in, e.g., DollarsPerHour, pounds-per-week, or yen-per-year.  RATE refers to average pay for the occupation JOBTYPE, excluding any unearned pay (such as matching 401K contributions) and the value of other employee benefits.")

;;; areaOfObject
(isa areaOfObject PhysicalAttributeDescriptionSlot)
(isa areaOfObject PhysicalAmountSlot)
(genlPreds areaOfObject 
  (MeaningInSystemFn SENSUS-Information1997 "AREA"))
(arg1Isa areaOfObject PartiallyTangible)
(arg2Isa areaOfObject Area)
(comment areaOfObject "A general slot to denote the area of some object.  This could be the area of a GeographicalRegion, a desk top, or a cross-section of wire.")

;;; areaOfRegion
(isa areaOfRegion IntervalBasedQuantitySlot)
(isa areaOfRegion TangibleObjectPredicate)
(genlPreds areaOfRegion 
  (MeaningInSystemFn SENSUS-Information1997 "AREA"))
(genlPreds areaOfRegion areaOfObject)
(arg1Isa areaOfRegion GeographicalRegion)
(arg2Isa areaOfRegion Area)
(comment areaOfRegion "The predicate areaOfRegion is used to indicate the physical area of a particular region.  (areaOfRegion REGION AREA) means that the physical size of the GeographicalRegion REGION is the Area AREA.  Examples: (areaOfRegion LakeErie (SquareMile 9940)), (areaOfRegion Elba-Island-Italy (SquareMile 86)), (areaOfRegion VaticanCity (SquareMile 0.17)), (areaOfRegion China-PeoplesRepublic (SquareMile 3705390)).  See Area for ways of representing areas.")

;;; areasOfOrigin
(isa areasOfOrigin BinaryPredicate)
(isa areasOfOrigin IntensionalRepresentationPredicate)
(arg1Isa areasOfOrigin EthnicGroupType)
(arg2Isa areasOfOrigin GeographicalRegion)
(comment areasOfOrigin "The predicate areasOfOrigin relates an ethnic group to a particular region in which its members originated.  (areasOfOrigin GROUP REGION) means that the EthnicGroupType GROUP originated in the GeographicalRegion REGION.  For example, to indicate that Circassians originated in Asia, we would say (areasOfOrigin EthnicGroupOfCircassians ContinentOfAsia).  Ethnic groups may have originated in several different areas; e.g., the EthnicGroupOfHutu is native to Rwanda, Burundi, Tanzania, and Uganda.")

;;; arg1Format
(isa arg1Format BinaryPredicate)
(isa arg1Format MetaPredicate)
(arg1Isa arg1Format Predicate)
(arg2Isa arg1Format Format)
(comment arg1Format "(arg1Format PRED FORMAT) means that FORMAT tells how many different first arguments there can be to PRED, given some fixed set of other arguments.  See Format for a description of the possible values for FORMAT.")

;;; arg1Genl
(isa arg1Genl MetaRelation)
(isa arg1Genl IntangibleObjectPredicate)
(isa arg1Genl BinaryPredicate)
(arg1Isa arg1Genl Relationship)
(arg2Isa arg1Genl Collection)
(comment arg1Genl "(arg1Genl REL COL) means that the predicate or function, REL, accepts only first arguments that have the Collection COL among their genls.")

;;; arg1Isa
(isa arg1Isa MetaRelation)
(isa arg1Isa IntangibleObjectPredicate)
(isa arg1Isa FunctionalSlot)
(isa arg1Isa DefaultMonotonicPredicate)
(isa arg1Isa BinaryPredicate)
(arg1Isa arg1Isa Relationship)
(arg2Isa arg1Isa Collection)
(comment arg1Isa "(arg1Isa REL COL) means that anything given as the first argument to the Relationship REL must be an element of the Collection COL.  Examples: (arg1Isa formsBorderBetween SpatialThing), (arg1Isa seriesOrderedBy Series), (arg1Isa uniquePartTypes ExistingObjectType).")

;;; arg2Format
(isa arg2Format BinaryPredicate)
(isa arg2Format MetaPredicate)
(arg1Isa arg2Format Predicate)
(arg2Isa arg2Format Format)
(comment arg2Format "(arg2Format PRED FORMAT) means that FORMAT tells how many different second arguments there can be to PRED, given some fixed set of other arguments.  See Format for a description of the possible values for FORMAT.")

;;; arg2Genl
(isa arg2Genl MetaRelation)
(isa arg2Genl BinaryPredicate)
(arg1Isa arg2Genl Relationship)
(arg2Isa arg2Genl Collection)
(comment arg2Genl "(arg2Genl REL COL) means that the predicate or function, REL, accepts only second arguments that have the Collection COL among their genls.")

;;; arg2Isa
(isa arg2Isa MetaRelation)
(isa arg2Isa IntangibleObjectPredicate)
(isa arg2Isa FunctionalSlot)
(isa arg2Isa DefaultMonotonicPredicate)
(isa arg2Isa BinaryPredicate)
(arg1Isa arg2Isa Relationship)
(arg2Isa arg2Isa Collection)
(comment arg2Isa "(arg2Isa REL COL) means that anything given as the second argument to the Relationship REL must be an element of the Collection COL.  Examples: (arg2Isa sheetSurfaceConnected PartiallyTangible), (arg2Isa salutation CourtesyTitle), (arg2Isa mother FemaleAnimal).")

;;; arg3Format
(isa arg3Format BinaryPredicate)
(isa arg3Format MetaPredicate)
(arg1Isa arg3Format Predicate)
(arg2Isa arg3Format Format)
(comment arg3Format "(arg3Format PRED FORMAT) means that FORMAT tells how many different third arguments there can be to PRED, given some fixed set of other arguments.  See Format for a description of the possible values for FORMAT.")

;;; arg3Genl
(isa arg3Genl MetaRelation)
(isa arg3Genl BinaryPredicate)
(arg1Isa arg3Genl Relationship)
(arg2Isa arg3Genl Collection)
(comment arg3Genl "(arg3Genl REL COL) means that the predicate or function, REL, accepts only third arguments that have the Collection COL among their genls.")

;;; arg3Isa
(isa arg3Isa MetaRelation)
(isa arg3Isa IntangibleObjectPredicate)
(isa arg3Isa FunctionalSlot)
(isa arg3Isa BinaryPredicate)
(isa arg3Isa DefaultMonotonicPredicate)
(arg1Isa arg3Isa Relationship)
(arg2Isa arg3Isa Collection)
(comment arg3Isa "(arg3Isa REL COL) means that anything given as the third argument to the Relationship REL must be an element of the Collection COL.")

;;; arg4Format
(isa arg4Format MetaPredicate)
(isa arg4Format BinaryPredicate)
(arg1Isa arg4Format Predicate)
(arg2Isa arg4Format Format)
(comment arg4Format "(arg4Format PRED FORMAT) means that FORMAT tells how many different fourth arguments there can be to PRED, given some fixed set of other arguments.  See Format for a description of the possible values for FORMAT.")

;;; arg4Genl
(isa arg4Genl MetaRelation)
(isa arg4Genl BinaryPredicate)
(arg1Isa arg4Genl Relationship)
(arg2Isa arg4Genl Collection)
(comment arg4Genl "(arg4Genl REL COL) means that the fourth argument to the Relationship (i.e., predicate or function) REL must be a subset of the Collection COL.")

;;; arg4Isa
(isa arg4Isa MetaRelation)
(isa arg4Isa IntangibleObjectPredicate)
(isa arg4Isa FunctionalSlot)
(isa arg4Isa BinaryPredicate)
(isa arg4Isa DefaultMonotonicPredicate)
(arg1Isa arg4Isa Relationship)
(arg2Isa arg4Isa Collection)
(comment arg4Isa "(arg4Isa REL COL) means that anything given as the fourth argument to the Relationship REL must be an element of the Collection COL.")

;;; arg5Format
(isa arg5Format MetaPredicate)
(isa arg5Format BinaryPredicate)
(arg1Isa arg5Format Predicate)
(arg2Isa arg5Format Format)
(comment arg5Format "(arg5Format PRED FORMAT) means that FORMAT tells how many different fifth arguments there can be to PRED, given some fixed set of other arguments.  See Format for a description of the possible values for FORMAT.")

;;; arg5Genl
(isa arg5Genl MetaRelation)
(isa arg5Genl BinaryPredicate)
(arg1Isa arg5Genl Relationship)
(arg2Isa arg5Genl Collection)
(comment arg5Genl "(arg5Genl REL COL) means that the fifth argument to the Relationship (predicate or function) REL must be a subset of the Collection COL.")

;;; arg5Isa
(isa arg5Isa MetaRelation)
(isa arg5Isa IntangibleObjectPredicate)
(isa arg5Isa FunctionalSlot)
(isa arg5Isa DefaultMonotonicPredicate)
(isa arg5Isa BinaryPredicate)
(arg1Isa arg5Isa Relationship)
(arg2Isa arg5Isa Collection)
(comment arg5Isa "(arg5Isa REL COL) means that anything given as the fifth argument to the Relationship REL must be an element of the Collection COL.")

;;; argsGenl
(isa argsGenl MetaRelation)
(isa argsGenl BinaryPredicate)
(arg1Isa argsGenl Relationship)
(arg2Isa argsGenl Collection)
(comment argsGenl "When a relation REL is an element of VariableArityRelation, i.e., it takes a variable number of arguments, then (argsGenl REL COL) means that all of those arguments must be subsets of COL.")

;;; argsIsa
(isa argsIsa MetaRelation)
(isa argsIsa IntangibleObjectPredicate)
(isa argsIsa BinaryPredicate)
(arg1Isa argsIsa Relationship)
(arg2Isa argsIsa Collection)
(comment argsIsa "The predicate argsIsa is used with elements of Relationship that take an indefinite number of arguments, in order to specify that the values of all the arguments used with that relation must be of a certain type.  E.g., to specify that all the arguments to Cyc's addition function, PlusFn, must be measurable quantities (i.e., elements of ScalarInterval), we assert: (argsIsa PlusFn ScalarInterval).  Additional examples: `paths branch only into other paths', i.e., (argsIsa branchesInto Path-Generic); `dinars are measured only in numbers', i.e., (argsIsa Dinar-Jordan CycSystemRealNumber).")

;;; arity
(isa arity MetaRelation)
(isa arity RelationshipPredicate)
(isa arity FunctionalSlot)
(isa arity BinaryPredicate)
(isa arity DefaultMonotonicPredicate)
(arg1Isa arity Relationship)
(arg2Isa arity Integer)
(comment arity "(arity REL NUMBER) means that the Relationship REL takes the number of arguments given by NUMBER.  For example, the arity of all instances of BinaryPredicate is 2.  In particular, (arity arity 2) since arity takes 2 arguments.")

;;; assistingAgent
(isa assistingAgent ActorSlot)
(genlPreds assistingAgent deliberateActors)
(arg1Isa assistingAgent Event)
(arg2Isa assistingAgent Agent)
(comment assistingAgent "(assistingAgent ACT AGENT) means that AGENT is one of the agents assisting in the performance of ACT; AGENT itself may or may not also be performing ACT.  AGENT is doing some tasks related to ACT but which are not directly subEvents of performing the main or focus action.  Thus, `assisting' here means doing such supporting activities as fetching supplies or tools needed in ACT; helping to manipulate objects involved in ACT; gathering an audience, or booking the performer, if ACT is a public performance, and so forth.")

;;; atomicNumber
(isa atomicNumber IntervalBasedQuantitySlot)
(arg1Isa atomicNumber ElementStuffTypeByNumberOfProtons)
(arg1Genl atomicNumber ElementStuff)
(arg2Isa atomicNumber PositiveInteger)
(comment atomicNumber "The predicate atomicNumber indicates the atomic number of a type of element.  (atomicNumber E N) means that E, a collection belonging to ElementStuffTypeByNumberOfProtons, has the positive integer N for its atomic number.  This means that any instance of (AtomFn E) must have N Protons in its AtomicNucleus.  For example, (atomicNumber Carbon 6), and every instance of (AtomFn Carbon) has six protons in its nucleus.")

;;; attitudeTowardsEvent
(isa attitudeTowardsEvent QuaternaryPredicate)
(arg1Isa attitudeTowardsEvent Animal)
(arg2Isa attitudeTowardsEvent Event)
(arg3Isa attitudeTowardsEvent FeelingAttributeType)
(arg3Genl attitudeTowardsEvent FeelingAttribute)
(arg4Isa attitudeTowardsEvent GenericAttribute)
(comment attitudeTowardsEvent "attitudeTowardsEvent(AGT EVT EMOTYPE DEGREE) means that the SentientAnimal AGT has the attitude EMOTYPE (see FeelingAttributeType) about the Event EVT with DEGREE of intensity.  By `attitude' we mean a feeling which may be latent and/or long-lasting.  To refer to feelings that AGT experiences immediately and consciously towards EVT, use feelsTowardsEvent.")

;;; attitudeTowardsObject
(isa attitudeTowardsObject QuaternaryPredicate)
(isa attitudeTowardsObject FunctionalPredicate)
(arg1Isa attitudeTowardsObject Animal)
(arg2Isa attitudeTowardsObject Individual)
(arg3Isa attitudeTowardsObject FeelingAttributeType)
(arg3Genl attitudeTowardsObject FeelingAttribute)
(arg4Isa attitudeTowardsObject GenericAttribute)
(comment attitudeTowardsObject "attitudeTowardsObject(AGT OBJ EMOTYPE DEGREE) means that the SentientAnimal AGT has the attitude EMOTYPE (see FeelingAttributeType) about the Individual OBJ with DEGREE of intensity.  By `attitude' we mean a possibly latent and/or long-lasting feeling.  To refer to feelings that AGT experiences immediately and consciously towards OBJ, use feelsTowardsObject.")

;;; barometricPressure
(isa barometricPressure TangibleSubstancePredicate)
(isa barometricPressure IntervalBasedQuantitySlot)
(arg1Isa barometricPressure GaseousTangibleThing)
(arg2Isa barometricPressure Pressure)
(comment barometricPressure "(barometricPressure GAS PRESS) means that the instance of GaseousTangibleThing GAS has the Pressure PRESS.  Typically, GAS is a piece of atmosphere; barometricPressure indicates the atmospheric pressure in and around that `object'.")

;;; basicPrice
(isa basicPrice IntervalBasedQuantitySlot)
(arg1Isa basicPrice Individual)
(arg2Isa basicPrice Money)
(comment basicPrice "The predicate basicPrice indicates the price of a particular item.  (basicPrice THING MONEY) means that the object or service, THING, has the basic price MONEY.  (MONEY can be an interval representing a range of prices.)  Note that basicPrice refers to the `ticket price' of an item when it is actually bought or offered for sale; basicPrice does NOT refer to appraised value (where that differs from an actual selling price).  Since prices are time-sensitive, assertions about basicPrice should be suitably qualified.  For example, the price of a fast-food HamburgerSandwich in 1996 is a magnitude greater than what it was in 1965.  For the total charge for purchase of an object, including tax, shipping, handling, etc., use totalCharge (q.v.).")

;;; behaviorCapable
(isa behaviorCapable TernaryPredicate)
(arg1Isa behaviorCapable SomethingExisting)
(arg2Isa behaviorCapable Collection)
(arg2Genl behaviorCapable Situation)
(arg3Isa behaviorCapable Role)
(comment behaviorCapable "The predicate behaviorCapable is used to describe a type of situation (and the role) in which an object can participate due to its intrinsic properties.  (behaviorCapable OBJ SIT-TYPE ROLE) means that the individual, OBJ, is able to act as a ROLE in a situation of type SIT-TYPE.  OBJ may or may not have been designed to function in that way (cf. primaryFunction, intendedBehaviorCapable).  Also, behaviorCapable does not imply that OBJ can unquestionably act in that way in every such situation, since extrinsic factors may prevent it; e.g., the object may be in the wrong location, operated by a person lacking the proper skills, certain legal preconditions may not be satisfied, etc.  Examples: (intended capability) a hammer is behaviorCapable of being the deviceUsed in instances of HammeringANail; (unintended capability) an inner tube is capable of being the deviceUsed in instances of people FloatingInLiquid.")

;;; behind-Directly
(not 
  (isa behind-Directly AsymmetricBinaryPredicate))
(not 
  (isa behind-Directly AntiSymmetricBinaryPredicate))
(not 
  (isa behind-Directly SymmetricBinaryPredicate))
(not 
  (isa behind-Directly TransitiveBinaryPredicate))
(isa behind-Directly BinaryPredicate)
(isa behind-Directly SpatialPredicate)
(arg1Isa behind-Directly PartiallyTangible)
(arg2Isa behind-Directly PartiallyTangible)
(comment behind-Directly "(behind-Directly AFT FORE) means that AFT is directly behind FORE.  More precisely, it implies both (behind-Generally AFT FORE) and that there is at least one line parallel to the backward pointing axis of FORE that intersects both AFT and FORE.  Note that FORE must have a back face.")

;;; behind-Generally
(not 
  (isa behind-Generally AsymmetricBinaryPredicate))
(not 
  (isa behind-Generally AntiSymmetricBinaryPredicate))
(not 
  (isa behind-Generally SymmetricBinaryPredicate))
(not 
  (isa behind-Generally TransitiveBinaryPredicate))
(isa behind-Generally IrreflexiveBinaryPredicate)
(isa behind-Generally SpatialPredicate)
(genlPreds behind-Generally near)
(arg1Isa behind-Generally PartiallyTangible)
(arg2Isa behind-Generally PartiallyTangible)
(comment behind-Generally "(behind-Generally AFT FORE) means that AFT is behind FORE.  More precisely, a line originating at the center of FORE projecting away from the front side of FORE and parallel to the intrinsic front-to-back axis of FORE forms an angle of less than 45 degrees with a line intersecting both AFT and FORE.")
(synonymousExternalConcept behind-Generally SENSUS-Information1997 "BEHIND")

;;; beliefStatements
(isa beliefStatements BinaryPredicate)
(arg1Isa beliefStatements BeliefSystem)
(arg2Isa beliefStatements CycFormula)
(comment beliefStatements "(beliefStatements BSYS PROP) indicates that a belief of the belief system BSYS is stated in the proposition PROP (represented by a CycFormula).  In other words, each BeliefSystems comprises a set of tenets, statements linked to it via this predicate.  
Note: This is NOT the predicate that ties a particular Agent to his/her/its beliefs; for that, see beliefs and hasBeliefSystems.")

;;; beliefs
(isa beliefs PropositionalAttitudeSlot)
(arg1Isa beliefs Agent)
(arg2Isa beliefs CycFormula)
(comment beliefs "(beliefs AGT PROP) means that the Agent AGT subscribes to the truth of the proposition PROP (represented by a CycFormula).  PROP states something that AGT believes to be true, but of course PROP may or may not actually be true.  Another way to think of this is that PROP is true in the context whose epistemological status is `what AGT believes'.  Naturally, PROP may itself be a proposition about beliefs; one would use nested beliefs in this fashion to express a rule such as `most Canadians believe that most Americans believe Canada is a US State.'")
(overlappingExternalConcept beliefs SENSUS-Information1997 "BELIEVE")

;;; beneficiary
(isa beneficiary Role)
(isa beneficiary BinaryPredicate)
(genlInverse beneficiary positiveVestedInterest)
(arg1Isa beneficiary Event)
(arg2Isa beneficiary Agent)
(comment beneficiary "(beneficiary ACT AGT) means that the Agent AGT benefits from the performance of the action ACT.  Some desire or interest of AGT is served, enabled, helped, or satisfied by the performance of ACT.")
(overlappingExternalConcept beneficiary SENSUS-Information1997 "CLIENT")

;;; between
(isa between TernaryPredicate)
(arg1Isa between PartiallyTangible)
(arg2Isa between PartiallyTangible)
(arg3Isa between PartiallyTangible)
(comment between "(between THIS THAT MID-OBJ) means that MID-OBJ is spatially directly between THIS and THAT.  Depending on the context, MID-OBJ may lie on a great circle between THIS and THAT, or on a true Euclidian straight line between them.  Note that between applies only to physical location.  To describe a relationship involving numbers or ScalarIntervals, use greaterThan or followingValue.  To describe a 'between' relationship along some particular physical path (like: Austin is between Dallas and San Antonio on Highway I-35), or on some trajectory, see betweenOnPath.")
(overlappingExternalConcept between SENSUS-Information1997 "BETWEEN")

;;; betweenOnPath
(isa betweenOnPath QuaternaryPredicate)
(arg1Isa betweenOnPath Thing)
(arg2Isa betweenOnPath Thing)
(arg3Isa betweenOnPath Thing)
(arg4Isa betweenOnPath Path-Simple)
(comment betweenOnPath "(betweenOnPath X Y Z PATH) means that X, Y and Z are points on the path PATH and X is between Y and Z.  Note that this gives no ordering of Y and Z; it just claims that X is between them.  Note: Given a Path-Customary PATH and points or places on PATH, betweenOnPath does not in general determine a linear order (TotallyOrderedSet) on the set of all points on PATH when PATH is not part of a specified PathSystem.  However, in a PathSystem SYS, betweenOnPath does determine a linear order on the set of all points on PATH in SYS.")

;;; biases
(isa biases PropositionalAttitudeSlot)
(genlPreds biases beliefs)
(arg1Isa biases IntelligentAgent)
(arg2Isa biases CycFormula)
(comment biases "(biases AGT PROP) means that the Agent AGT has the unsubstantiated belief PROP (represented by a CycFormula).
Biases generally are so deeply rooted in the agent that the agent may not be consciously aware that PROP is rationally undersupported, and it may be concomittantly harder to change their mind about PROP.
Note:  PROP might or might not turn out to be true (in various contexts); often, PROP is some overgeneralization which is sometimes true but often false, or which once was true but now is usually false, etc.")

;;; biologicalFather
(isa biologicalFather AsymmetricBinaryPredicate)
(isa biologicalFather IrreflexiveBinaryPredicate)
(isa biologicalFather AntiTransitiveBinaryPredicate)
(isa biologicalFather FunctionalSlot)
(isa biologicalFather InterExistingObjectSlot)
(genlPreds biologicalFather father)
(genlPreds biologicalFather biologicalParents)
(arg1Isa biologicalFather Animal)
(arg2Isa biologicalFather MaleAnimal)
(comment biologicalFather "(biologicalFather OFFSPRING MALE) means that MaleAnimal MALE is the male biological parent of Animal OFFSPRING.")

;;; biologicalMother
(isa biologicalMother AsymmetricBinaryPredicate)
(isa biologicalMother IrreflexiveBinaryPredicate)
(isa biologicalMother InterExistingObjectSlot)
(isa biologicalMother FunctionalSlot)
(isa biologicalMother AntiTransitiveBinaryPredicate)
(not 
  (isa biologicalMother TransitiveBinaryPredicate))
(genlPreds biologicalMother mother)
(genlPreds biologicalMother biologicalParents)
(arg1Isa biologicalMother Animal)
(arg2Isa biologicalMother FemaleAnimal)
(comment biologicalMother "(biologicalMother OFFSPRING FEMALE) means that FemaleAnimal FEMALE is the female biological parent of the Animal OFFSPRING.")

;;; biologicalParents
(isa biologicalParents AsymmetricBinaryPredicate)
(isa biologicalParents IrreflexiveBinaryPredicate)
(not 
  (isa biologicalParents TransitiveBinaryPredicate))
(isa biologicalParents InterExistingObjectSlot)
(genlPreds biologicalParents biologicalRelatives)
(arg1Isa biologicalParents Animal)
(arg2Isa biologicalParents Animal)
(comment biologicalParents "(biologicalParents OFFSPRING PARENT) means that PARENT is the biological parent of OFFSPRING.")

;;; biologicalRelatives
(isa biologicalRelatives IrreflexiveBinaryPredicate)
(isa biologicalRelatives SymmetricBinaryPredicate)
(not 
  (isa biologicalRelatives TransitiveBinaryPredicate))
(genlPreds biologicalRelatives relatives)
(genlInverse biologicalRelatives biologicalRelatives)
(arg1Isa biologicalRelatives Animal)
(arg2Isa biologicalRelatives Animal)
(comment biologicalRelatives "(biologicalRelatives ORG1 ORG2) means that ORG1 and ORG2 are biological relatives, related by birth.")

;;; birthChild
(isa birthChild ActorSlot)
(genlPreds birthChild objectOfStateChange)
(genlPreds birthChild bodilyActedOn)
(arg1Isa birthChild BirthEvent)
(arg2Isa birthChild Animal)
(comment birthChild "(birthChild BIRTH ANIM) means that ANIM is the Animal that is born in the BirthEvent BIRTH.")

;;; birthDate
(isa birthDate BinaryPredicate)
(genlPreds birthDate startingDate)
(arg1Isa birthDate Entity)
(arg2Isa birthDate Date)
(comment birthDate "(birthDate ?X ?Y) indicates that the Entity ?X came into existance during Date ?Y.  For people, this is the date at which they were born, hence the name of this predicate.  The first argument to this predicate must be an Entity, and not just any old SomethingExisting, because we don't want to talk about the birthDate or dateOfDeath of a subabstraction like AlbertEinsteinWhileAtPrinceton; in other words, proper subabstractions will have startingDates and endingDates, but only true Entitys will have a birthDate or dateOfDeath")

;;; birthParent
(isa birthParent IrreflexiveBinaryPredicate)
(isa birthParent AsymmetricBinaryPredicate)
(isa birthParent ActorSlot)
(genlPreds birthParent objectOfStateChange)
(genlPreds birthParent bodilyDoer)
(arg1Isa birthParent BirthEvent)
(arg2Isa birthParent Animal)
(comment birthParent "(birthParent BIRTH PAR) means that PAR is the parent who is bodilyDoer in the BirthEvent BIRTH - typically this is also the femaleParentActor of the preceding BiologicalReproductionEvent.")

;;; boardMembers
(isa boardMembers BinaryPredicate)
(isa boardMembers ExtensionalRepresentationPredicate)
(genlPreds boardMembers hasMembers)
(arg1Isa boardMembers Organization)
(arg2Isa boardMembers Person)
(comment boardMembers "The predicate boardMembers relates a particular organization to the persons who serve on its board of directors.  (boardMembers ORG PERSON) means PERSON belongs to that instance of BoardOfDirectors which is responsible for oversight of the Organization ORG.  A member of the Board of Directors of an organization may or may not be an executive of the organization.")

;;; bodilyActedOn
(isa bodilyActedOn ActorSlot)
(genlPreds bodilyActedOn objectActedOn)
(arg1Isa bodilyActedOn Event)
(arg2Isa bodilyActedOn Organism-Whole)
(comment bodilyActedOn "The predicate bodilyActedOn is used to describe an event in which a living organism is acted on by some external agency.  (bodilyActedOn EVENT ORG) means that ORG is a living organism (i.e., an Organism-Whole) that is being affected in EVENT.  ORG itself may be intentionally participating in EVENT (e.g., a person voluntarily getting a haircut) or not (e.g., an animal hit by a car).  Either way, the organism ORG is not an active primary `doer' of EVENT.  This predicate is appropriately used to identify actors who undergo (instances of) DrugTherapy or IncurringAnInjury.
Note an important contrast with bodilyDoer (q.v.):  bodilyActedOn is for events that merely happen to the body, as opposed to actions the body does.  Because the body of an organism is an active `doer' in its instances of PhysiologicalCondition, including any InjuryCondition (which is the physical process of a body sustaining an injury and responding by healing or deteriorating), an organism is related to events of those kinds with bodilyDoer rather than bodilyActedOn.  By contrast, organisms involved in instances of DrugTherapy (which refers to the effect of a drug on the patient) or IncurringAnInjury (which refers to the event in which an organism gets injured, rather than the process of its being in an injured and hopefully healing state) should be related to events of those types with bodilyActedOn.")

;;; bodilyDoer
(isa bodilyDoer ActorSlot)
(genlPreds bodilyDoer nonDeliberateActors)
(genlPreds bodilyDoer doneBy)
(arg1Isa bodilyDoer PhysicalEvent)
(arg2Isa bodilyDoer Organism-Whole)
(comment bodilyDoer "The predicate bodilyDoer relates an event to an organism which does it non-deliberately, which in Cyc means without conscious intention or volition.  (bodilyDoer EVENT DOER) means that DOER does EVENT (i.e., DOER is not merely subjected to EVENT by external forces), but DOER does EVENT non-deliberately.  Note that for certain kinds of actions, considered as a class, organisms are necessarily merely bodilyDoers; for example, physical growth, peristalsis, and reflex actions.  For other actions, such as breathing, flinching, or shouting, an organism commonly (but not necessarily) acts as bodilyDoer; some cases of such events may be deliberately performedBy the doer.
Note: an organism which dies of natural causes (Dying) is the bodilyDoer of that event, because of the internal processes the body performs during Dying.  Also, in certain PhysiologicalConditions, including an AilmentCondition (such as Diabetes) or a healing process, organisms are considered to be bodilyDoers because their own bodily processes are creating or sustaining those conditions.  An organism killed by an external agent, however, is just the bodilyActedOn (q.v.) in that event; therefore, instances of Killing-Biological should use bodilyActedOn to refer to the organism killed.")

;;; boilingPoint
(isa boilingPoint IntervalBasedQuantitySlot)
(isa boilingPoint TangibleSubstancePredicate)
(arg1Isa boilingPoint PartiallyTangible)
(arg2Isa boilingPoint Temperature)
(comment boilingPoint "(boilingPoint STUFF TEMP) means that TEMP is the temperature at which the substance STUFF changes from having the attribute LiquidStateOfMatter to GaseousStateOfMatter (when sufficient energy is input to raise STUFF's temperature through that point).  Note that the boiling point of most substances is context-dependent; on a mountaintop in Tibet the boiling point of water is much lower than it is in New York City.")

;;; bordersOn
(isa bordersOn SymmetricBinaryPredicate)
(genlPreds bordersOn adjacentTo)
(genlPreds bordersOn touchesDirectly)
(genlInverse bordersOn bordersOn)
(arg1Isa bordersOn GeographicalRegion)
(arg2Isa bordersOn GeographicalRegion)
(comment bordersOn "(bordersOn REGION-1 REGION-2) means that the GeographicalRegion REGION-1 and the GeographicalRegion REGION-2 are physically adjacent to each other.  Examples: (bordersOn CentralUSATimeZone MountainUSATimeZone), (bordersOn Nepal Tibet).")

;;; boss
(not 
  (isa boss IrreflexiveBinaryPredicate))
(not 
  (isa boss ReflexiveBinaryPredicate))
(not 
  (isa boss TransitiveBinaryPredicate))
(isa boss AntiSymmetricBinaryPredicate)
(isa boss CotemporalObjectsSlot)
(genlPreds boss cotemporal)
(genlPreds boss acquaintedWith)
(arg1Isa boss Person)
(arg2Isa boss Person)
(comment boss "(boss PERSON1 PERSON2) means PERSON1 has PERSON2 for his or her immediate boss or supervisor.  
Note:  There can be more than one boss of a person, even cotemporally.
Note: (genlPreds boss acquaintedWith) means that if (boss x y), then (acquaintedWith x y), which in turn means (acquaintances x y SimpleContactAcquaintance).  I.e., a person and their direct boss are at least simple contact acquaintances.")

;;; businessPartners
(not 
  (isa businessPartners TransitiveBinaryPredicate))
(isa businessPartners IrreflexiveBinaryPredicate)
(isa businessPartners SymmetricBinaryPredicate)
(genlPreds businessPartners positiveVestedInterest)
(genlInverse businessPartners businessPartners)
(arg1Isa businessPartners Agent)
(arg2Isa businessPartners Agent)
(comment businessPartners "The predicate businessPartners indicates that two agents have jointly undertaken some business project; they are combining resources in some way to further their interests.  (businessPartners AGENT1 AGENT2) means AGENT1 is in partnership with AGENT2 to engage in business activities.  The partners are instances of Agent and may belong to either Person or Organization.  The partnership may be formally recognized (e.g., a Partnership or some other form of business) or informal.")

;;; buyer
(isa buyer ActorSlot)
(isa buyer AsymmetricBinaryPredicate)
(isa buyer IrreflexiveBinaryPredicate)
(genlPreds buyer exchangers)
(arg1Isa buyer CommercialActivity)
(arg2Isa buyer Agent)
(comment buyer "The predicate buyer relates an agent to a business activity.  (buyer EVENT AGENT) means that the Agent AGENT purchases the goods for sale in the CommercialActivity EVENT.")

;;; buyingAgent
(isa buyingAgent IrreflexiveBinaryPredicate)
(isa buyingAgent AntiTransitiveBinaryPredicate)
(isa buyingAgent AsymmetricBinaryPredicate)
(isa buyingAgent ActorSlot)
(isa buyingAgent FunctionalSlot)
(genlPreds buyingAgent buyingPerformer)
(genlPreds buyingAgent mediators)
(arg1Isa buyingAgent CommercialActivity)
(arg2Isa buyingAgent LegalAgent)
(comment buyingAgent "A buying agent acts on behalf of a would-be buyer to bring about a buying event involving his/her/its client as the buyer. ")

;;; buyingPerformer
(isa buyingPerformer IrreflexiveBinaryPredicate)
(isa buyingPerformer AntiTransitiveBinaryPredicate)
(isa buyingPerformer AsymmetricBinaryPredicate)
(isa buyingPerformer ActorSlot)
(genlPreds buyingPerformer performedBy)
(genlPreds buyingPerformer socialParticipants)
(arg1Isa buyingPerformer CommercialActivity)
(arg2Isa buyingPerformer LegalAgent)
(comment buyingPerformer "(buyingPerformer ?COM ?AGENT) means that ?AGENT is the Agent who actually pursues and attempts to obtain goods or services in a purchase, by performing an active role in the CommercialActivity ?COM.  Frequently this agent is the same as the buyer, but occasionally it is a buyingAgent representing the buyer.")

;;; byProducts
(isa byProducts ActorSlot)
(genlPreds byProducts outputs)
(arg1Isa byProducts CreationOrDestructionEvent)
(arg2Isa byProducts PartiallyTangible)
(comment byProducts "(byProducts EV OBJ) means that OBJ is one of the outputs of EV, but not one of its intended outputs.  For intended outputs, see products.  For a particular EV and OBJ, it will not be true that both (products EV OBJ) and (byProducts EV OBJ).")

;;; canContainShapes
(isa canContainShapes BinaryPredicate)
(arg1Isa canContainShapes PartiallyTangible)
(arg2Isa canContainShapes AbstractShape)
(comment canContainShapes "The predicate canContainShapes is used to give an approximation of the internal size and shape of particular tangible objects, by relating an object to an abstract region of space described as a geometric shape with definite dimensions.  (canContainShapes OBJ SHAPE) gives an upper bound for the size of things that can be contained in the object OBJ, by specifying the dimensions of an abstract shape which OBJ can contain.  canContainShapes uses the elements of ShapeFunction (q.v.) for reference, especially the basic shapes generated by RectangularSolidFn, CylinderFn, and SphereFn.  For example, the trunk of my Honda Civic canContainShapes of (RectangularSolidFn (Meter 1) (Meter 0.5) (Meter 0.75)).  Cf. fitsIn.")

;;; capableOf
(isa capableOf TernaryPredicate)
(genlPreds capableOf anatomicallyCapableOf)
(genlPreds capableOf legallyCapableOf)
(genlPreds capableOf fiscallyCapableOf)
(genlPreds capableOf skillCapableOf)
(arg1Isa capableOf Agent)
(arg2Isa capableOf Collection)
(arg2Genl capableOf Situation)
(arg3Isa capableOf Role)
(comment capableOf "The predicate capableOf indicates that an agent is fully able to carry out a certain role in a certain type of situation.  (capableOf AGT SIT-TYPE ROLE) means that the Agent AGT is able to act as described by ROLE in Situations of the type SIT-TYPE.  capableOf entails that AGT is qualified in ALL the relevant ways to fill that ROLE; e.g., AGT is anatomicallyCapableOf, fiscallyCapableOf, legallyCapableOf, and skillCapableOf playing that ROLE in SIT-TYPE.")

;;; capitalCity
(isa capitalCity FunctionalSlot)
(isa capitalCity InterExistingObjectSlot)
(genlPreds capitalCity geographicalSubRegions)
(genlPreds capitalCity controls)
(genlInverse capitalCity subOrganizations)
(arg1Isa capitalCity GeopoliticalEntity)
(arg2Isa capitalCity CapitalCityOfRegion)
(comment capitalCity "The predicate capitalCity is used to indicate the capital of a country (only).  (capitalCity CNTRY CITY) means that CITY is the capital city of the Country CNTRY.  Examples: the capitalCity of the UnitedStatesOfAmerica is the CityOfWashingtonDC; the capitalCity of Armenia is Yerevan.  Note: for regional capitals, use capitalCityOfThisState.")

;;; cardinality
(isa cardinality IntensionalRepresentationPredicate)
(isa cardinality FunctionalSlot)
(arg1Isa cardinality SetOrCollection)
(arg2Isa cardinality Integer)
(comment cardinality "(cardinality SETORCOL INTEGER)
means that the SetOrCollection SETORCOL has INTEGER number
of members. For instance, TheEmptySet has a cardinality
of 0.")

;;; carriesInfectionType
(isa carriesInfectionType BinaryPredicate)
(arg1Isa carriesInfectionType TangibleThing)
(arg2Isa carriesInfectionType InfectionType)
(arg2Genl carriesInfectionType Infection)
(comment carriesInfectionType "The predicate (carriesInfectionType OBJECT INFECT_TYPE) relates a particular organism or other object to a type of infection that it carries.  (carriesInfectionType OBJ INFTYP) means that the individual OBJ is a carrier of the InfectionType INFTYP.  For example, (carriesInfectionType TyphoidMary TyphoidFever) or (carriesInfectionType Needle0567 AIDS).")

;;; catalyst
(isa catalyst IrreflexiveBinaryPredicate)
(isa catalyst AsymmetricBinaryPredicate)
(isa catalyst ActorSlot)
(genlPreds catalyst unchangedActors)
(arg1Isa catalyst ChemicalReaction)
(arg2Isa catalyst PartiallyTangible)
(comment catalyst "The predicate catalyst identifies the particular thing that acts as a catalyst in a particular chemical reaction.  (catalyst R X) means that the ChemicalReaction R has the particular quantity of substance X as a catalyst.  For example, every instance of Photosynthesis has some portion of Chlorophyll as a catalyst; an amount of Water may be a catalyst in some OxidationProcess of a Metal.")

;;; causedBy
(isa causedBy IrreflexiveBinaryPredicate)
(not 
  (isa causedBy TransitiveBinaryPredicate))
(isa causedBy AsymmetricBinaryPredicate)
(isa causedBy InterExistingObjectSlot)
(genlPreds causedBy startsAfterStartingOf)
(genlPreds causedBy 
  (MeaningInSystemFn SENSUS-Information1997 "CAUSE-EFFECT"))
(arg1Isa causedBy Event)
(arg2Isa causedBy Event)
(comment causedBy "causedBy is the predicate used for 
token-token event causation, i.e., causation between individual
events. (causedBy EVENT1 EVENT2) means that EVENT1 is causedBy
EVENT2.")

;;; causes
(not 
  (isa causes AsymmetricBinaryPredicate))
(not 
  (isa causes AntiSymmetricBinaryPredicate))
(not 
  (isa causes SymmetricBinaryPredicate))
(isa causes TransitiveBinaryPredicate)
(isa causes IrreflexiveBinaryPredicate)
(genlPreds causes 
  (MeaningInSystemFn SENSUS-Information1997 "CAUSE-EFFECT"))
(arg1Isa causes CycFormula)
(arg2Isa causes CycFormula)
(comment causes "(causes p1 p2) means that p1 causes p2.  That is, the state of affairs described by proposition p1 causally leads to the state of affairs described by p2.  This is stronger than material implication; i.e., it must also be the case that (implies p1 p2).  Note that causes means more than implies, of course: there is a temporal ordering involved, there is a presumed mechanism of causation, etc.  Unlike implies, causes is not reflexive; one would not say that p1 causes p1, even though p1 implies p1.  Another difference between implies and causes is that causes is a predicate, not a logical connective.  Just because (causes p1 p2) is true that does NOT entail that (causes (not p2) (not p1)) is true.Note that (causes p1 p2) is generally a more accurate way of talking about causation than saying that some event e1 caused event e2 (which one can do in Cyc, using the predicate causedBy) since often there are a few key aspects of e1 that caused a few key aspects of e2, and the remaining details of e1 and e2 were, to first order, irrelevant.  Note that, similarly, (causes p1 p2) is generally a more accurate way of talking about causation than saying that some agent AGT caused something to be true (which one can do in Cyc, using the predicate causesProp) since often there is some specific aspect of the agent, or something they were involved in or did, that is the cause of the proposition's becoming satisfied.  Because this predicate is asymetric and since effect (p2) can not temporally precede cause (p1), causes may not be used to express mutual causation, e.g. feedback loops for which it may be said that two events (probably more process-like) cause each other.  We consider mutual causation to be a different form of causation and should be expressed using some as of yet (Dec 96) unreified relationship.")
(overlappingExternalConcept causes SENSUS-Information1997 "CAUSE-EFFECT")

;;; causesProp
(isa causesProp BinaryPredicate)
(genlPreds causesProp 
  (MeaningInSystemFn SENSUS-Information1997 "CAUSE-EFFECT"))
(arg1Isa causesProp TemporalThing)
(arg2Isa causesProp CycFormula)
(comment causesProp "(causesProp INDIV PROP) means that the TemporalThing INDIV causes the proposition PROP to become true.  INDIV may be an Agent or an Event.  PROP is a CycFormula.  
Note:  A much simpler predicate is causedBy, in which both arguments are just Events.")

;;; cavityConnectedAlongPathSide
(isa cavityConnectedAlongPathSide ConnectionPredicate)
(isa cavityConnectedAlongPathSide BinaryPredicate)
(genlPreds cavityConnectedAlongPathSide connectedTo-Rigidly)
(genlPreds cavityConnectedAlongPathSide connectedTo)
(genlPreds cavityConnectedAlongPathSide hasPortalToRegion)
(arg1Isa cavityConnectedAlongPathSide PartiallyTangible)
(arg2Isa cavityConnectedAlongPathSide PartiallyTangible)
(arg2Isa cavityConnectedAlongPathSide Path-Simple)
(comment cavityConnectedAlongPathSide "(cavityConnectedAlongPathSide PATH CAVITY) means that there is a portal somewhere along the wall of the Path-Generic (which must also be PartiallyTangible) PATH which leads to the CavityOrContainer CAVITY. It does not apply if an end of PATH is the portal, nor to a branching of the path, nor a small hole in an otherwise dead end of the path. The portal is substantially smaller in width than the path, and instead of a smaller path connected there, the portal opens into a neighboring CavityOrContainer.  Example: an Alveolus attached to a RespiratoryBronchiole in the Lung is so connected.  Or, a room opening along the side of a hallway.")

;;; cavityHasWall
(not 
  (isa cavityHasWall TransitiveBinaryPredicate))
(isa cavityHasWall AsymmetricBinaryPredicate)
(isa cavityHasWall PartPredicate)
(genlPreds cavityHasWall physicalParts)
(arg1Isa cavityHasWall Cavity)
(arg2Isa cavityHasWall SolidTangibleThing)
(comment cavityHasWall "(cavityHasWall CAV WALL) means that the the Cavity CAV has WALL as one of its walls (or part of one of its walls), or partly-enclosing inner surfaces.  cavityHasWall is often used for describing the relationship between some space or part of a ConstructionArtifact and the substructures that bound or enclose it (e.g., the relationship between a room and its walls, floor(s), and ceiling(s)).")

;;; chiefPorts
(isa chiefPorts InterExistingObjectSlot)
(genlPreds chiefPorts geographicalSubRegions)
(arg1Isa chiefPorts GeopoliticalEntity)
(arg2Isa chiefPorts UrbanArea)
(comment chiefPorts "This is a list of the chief ports for a given geographical region.")

;;; children
(isa children AsymmetricBinaryPredicate)
(not 
  (isa children TransitiveBinaryPredicate))
(genlPreds children cotemporal)
(genlPreds children relatives)
(arg1Isa children Animal)
(arg2Isa children Animal)
(comment children "(children PARENT CHILD) means that CHILD is a child of PARENT in the sense that PARENT cares for CHILD as a parent would, whether or not they are biologically related.")
(comment children "(children PARENT CHILD) means that CHILD is the biological offspring of PARENT.")

;;; circumferenceOfObject
(isa circumferenceOfObject PhysicalAttributeDescriptionSlot)
(isa circumferenceOfObject TangibleObjectPredicate)
(isa circumferenceOfObject IntervalBasedQuantitySlot)
(arg1Isa circumferenceOfObject PartiallyTangible)
(arg2Isa circumferenceOfObject Distance)
(comment circumferenceOfObject "The distance around a circular object")

;;; citizens
(isa citizens BinaryPredicate)
(isa citizens IntensionalRepresentationPredicate)
(arg1Isa citizens GeopoliticalEntity)
(arg2Isa citizens Person)
(comment citizens "The predicate citizens indicates that a particular person is a citizen of a particular country/state/... .  (citizens GEOPOL PERSON) means that GEOPOL is a GeopoliticalEntity in which the Person PERSON has full rights of citizenship (whatever those rights might consist of in GEOPOL).")

;;; cityInState
(isa cityInState NonPhysicalPartPredicate)
(isa cityInState FunctionalSlot)
(arg1Isa cityInState UrbanArea)
(arg2Isa cityInState CountrySubsidiary)
(comment cityInState "(cityInState CITY STATE) means that the UrbanArea CITY is physically located in the geopolitical sub-region STATE.  Note that STATE may be an element of State-Geopolitical (q.v.), or it may be some other kind of CountrySubsidiary, such as Territory. Examples: the CityOfDurhamNC in a cityInState of NorthCarolina-State; Xiamen (Amoy) is a cityInState of Fujian.")

;;; cityOfAddress
(isa cityOfAddress FunctionalSlot)
(genlPreds cityOfAddress objectFoundInLocation)
(arg1Isa cityOfAddress ContactLocation)
(arg2Isa cityOfAddress City)
(comment cityOfAddress "(cityOfAddress LOC CITY) means that the ContactLocation LOC is located in the City CITY.  For example, Cycorp's cityOfAddress is the CityOfAustinTX.  See also ContactLocation.")

;;; clients
(not 
  (isa clients AsymmetricBinaryPredicate))
(not 
  (isa clients SymmetricBinaryPredicate))
(not 
  (isa clients TransitiveBinaryPredicate))
(isa clients IrreflexiveBinaryPredicate)
(genlPreds clients positiveVestedInterest)
(arg1Isa clients Agent)
(arg2Isa clients Agent)
(comment clients "The predicate clients represents a relationship between two Agents.  (clients AGENT1 AGENT2) means that AGENT1 provides goods and/or services to AGENT2.  AGENT2 may or may not pay AGENT1 for the goods/services received.  The predicate clients can indicate either a one-time relationship or a more long-term relationship.  See also suppliers and customers.")

;;; cloudinessOfRegion
(isa cloudinessOfRegion IntervalBasedQuantitySlot)
(genlPreds cloudinessOfRegion hasAttributes)
(arg1Isa cloudinessOfRegion OutdoorLocation)
(arg2Isa cloudinessOfRegion Cloudiness)
(comment cloudinessOfRegion "(cloudinessOfRegion LOC DEGREE) means that the OutdoorLocation LOC has this DEGREE of cloud cover.")

;;; coExtensional
(isa coExtensional SymmetricBinaryPredicate)
(isa coExtensional ReflexiveBinaryPredicate)
(isa coExtensional TransitiveBinaryPredicate)
(genlInverse coExtensional coExtensional)
(arg1Isa coExtensional Collection)
(arg2Isa coExtensional Collection)
(comment coExtensional "the sets v1 which are such that ( x (u instances) (isa x v1))")

;;; cohabitants
(isa cohabitants CotemporalObjectsSlot)
(isa cohabitants IrreflexiveBinaryPredicate)
(isa cohabitants SymmetricBinaryPredicate)
(not 
  (isa cohabitants TransitiveBinaryPredicate))
(genlPreds cohabitants acquaintedWith)
(genlPreds cohabitants cotemporal)
(genlInverse cohabitants cohabitants)
(arg1Isa cohabitants Animal)
(arg2Isa cohabitants Animal)
(comment cohabitants "(cohabitants X Y) means that X and Y live together in the same dwelling structure, nest, etc.  
Note: in some contexts (in the real Cyc knowledge base) the arguments to this predicate are restricted to being Persons.
Note: in many parts of the world, esp. in past centuries, people cohabit (have cohabitetd) with domesticated animals that are/were not pets.")

;;; cohabitingFamilyMembers
(isa cohabitingFamilyMembers IrreflexiveBinaryPredicate)
(isa cohabitingFamilyMembers FamilyRelationSlot)
(isa cohabitingFamilyMembers SymmetricBinaryPredicate)
(not 
  (isa cohabitingFamilyMembers TransitiveBinaryPredicate))
(genlPreds cohabitingFamilyMembers relatives)
(genlPreds cohabitingFamilyMembers cohabitants)
(genlPreds cohabitingFamilyMembers positiveVestedInterest)
(genlInverse cohabitingFamilyMembers cohabitingFamilyMembers)
(arg1Isa cohabitingFamilyMembers Animal)
(arg2Isa cohabitingFamilyMembers Animal)
(comment cohabitingFamilyMembers "(cohabitingFamilyMembers X Y) means that X and Y are family members (relatives, spouses, in-laws) living with one another.  If the members of a family no longer live together, they are still members of a Family-SocialEntity, but they are no longer members of the same FamilyCohabitationUnit.
Note: In the HumanSocialLifeMt context, X and Y must be Persons.  In the NaiveBiologicalDescentMt context, they can be any Animals at all.")

;;; cohesivenessOfObject
(isa cohesivenessOfObject IntervalBasedQuantitySlot)
(isa cohesivenessOfObject TangibleObjectPredicate)
(isa cohesivenessOfObject PhysicalAttributeDescriptionSlot)
(arg1Isa cohesivenessOfObject PartiallyTangible)
(arg2Isa cohesivenessOfObject Cohesiveness)
(comment cohesivenessOfObject "(cohesivenessOfObject OBJ DEGREE) indicates how tightly a tangible object OBJ coheres.  A higher value of DEGREE means that it is harder to separate away chunks from the object.")

;;; colorOfObject
(isa colorOfObject TangibleObjectPredicate)
(isa colorOfObject PhysicalAttributeDescriptionSlot)
(genlPreds colorOfObject hasAttributes)
(arg1Isa colorOfObject PartiallyTangible)
(arg2Isa colorOfObject Color)
(comment colorOfObject "(colorOfObject OBJ COLOR) means that a significant fraction of some visible part of the tangible object OBJ has the Color COLOR.")
(synonymousExternalConcept colorOfObject SENSUS-Information1997 "COLOR-PROPERTY-ASCRIPTION")

;;; comment
(isa comment FunctionalSlot)
(isa comment MetaKnowledgePredicate)
(isa comment BinaryPredicate)
(arg1Isa comment Thing)
(arg1Isa comment CycIndexedTerm)
(arg2Isa comment CycSystemAtom)
(arg2Isa comment CharacterString)
(arg2Isa comment CycSystemString)
(comment comment "comment is a predicate belonging to the Cyc collection DocumentationConstant.  comment is used to relate Cyc constants to (usually) brief English explanations of their meaning and use, as an aid to humans browsing through the Cyc Knowledge Base.  (comment CONST STRING) means that STRING is an instance of CycSystemString that contains an explanation of the Cyc constant CONST.  Example: what you are reading now.")

;;; commitsForFutureUses
(isa commitsForFutureUses IrreflexiveBinaryPredicate)
(isa commitsForFutureUses AsymmetricBinaryPredicate)
(isa commitsForFutureUses ActorSlot)
(genlPreds commitsForFutureUses preActors)
(arg1Isa commitsForFutureUses Event)
(arg2Isa commitsForFutureUses PartiallyTangible)
(comment commitsForFutureUses "(commitsForFutureUses EVENT OBJECT) means that as a result of EVENT, OBJECT is subsequently put into a configuration and/or a form where it is serving some ongoing Role.  Things which are re-usable in their typical uses: a videocassette, a battery, a brick, an artist's canvas, a canvas tent.  Non-reusable things: paint, glue, mortar.  See also inputsCommitted, recyclableActors.   Consider a brick in a wall in a building.  It is `committed for future use' in the role of part-of-a-wall in the event of that building existing.  While the building is standing, it can't be part-of-a-wall in another building, though it could serve other roles such as an artistic accent, or to anchor a coat-hook.  After the building is torn down, that brick might still be intact, and could be used as part-of-a-wall in a future building.  Notice that the brick isn't necessarily transformed by being part of a wall.  However, so long as OBJECT serves the use to which it is `assigned' by EVENT, OBJECT is unavailable to be assigned the same Role by another event of the same type, at least an event that would temporally intersect with this committed use of OBJECT.  That is what is meant by it being `committed' for a particular future use.  An object may be re-used in a similar event, ONLY IF the Role to which it was assigned in EVENT either comes to its natural end or is given up (or thwarted), or in cases where EVENT is composed of discontinous pieces of time --- to illustrate that latter case, consider a tent that's used to shelter a certain group of workers on weekdays, but is used to shelter a different group in a different location on weekends.")

;;; communicationTarget
(isa communicationTarget IrreflexiveBinaryPredicate)
(isa communicationTarget AsymmetricBinaryPredicate)
(isa communicationTarget ActorSlot)
(genlPreds communicationTarget preActors)
(arg1Isa communicationTarget CommunicationAct-Single)
(arg2Isa communicationTarget PartiallyTangible)
(comment communicationTarget "The predicate communicationTarget is used to indicate the intended recipient in a communication.  (communicationTarget COMM OBJ) means that the agent who originates the CommunicationAct-Single COM intends the recipientOfInfo to be OBJ.  Normally, OBJ is an instance of Agent.")

;;; communicationToken
(isa communicationToken BinaryPredicate)
(isa communicationToken Role)
(arg1Isa communicationToken Communicating)
(arg2Isa communicationToken InformationBearingThing)
(comment communicationToken "The predicate communicationToken is used to indicate the particular IBT (i.e., element of InformationBearingThing) that is instrumental in a particular communication.  (communicationToken COM IBT) means that IBT is an InformationBearingThing that carries the information transferred in the Communicating COM.  A communication event transfers the information content of IBT from one agent to some other(s).  IBT may be a tangible object (e.g., a newspaper), a sound (e.g., a voice), an image (e.g., from a television broadcast), or even a touch (e.g., a staying hand).")

;;; competingAgents
(isa competingAgents IrreflexiveBinaryPredicate)
(isa competingAgents AsymmetricBinaryPredicate)
(isa competingAgents ActorSlot)
(genlPreds competingAgents socialParticipants)
(arg1Isa competingAgents Competition)
(arg2Isa competingAgents Agent)
(comment competingAgents "(competingAgents COMPETITN AGT) means that the Agent AGT is a competitor in the contest or competition COMPETITN.  This excludes many participants of such events, such as referees, judges, and spectators.")

;;; compressibilityOfObject
(isa compressibilityOfObject PhysicalAttributeDescriptionSlot)
(isa compressibilityOfObject TangibleObjectPredicate)
(isa compressibilityOfObject IntervalBasedQuantitySlot)
(arg1Isa compressibilityOfObject PartiallyTangible)
(arg2Isa compressibilityOfObject Compressibility)
(comment compressibilityOfObject "(compressibilityOfObject OBJ DEGREE) indicates how readily the tangible object OBJ can be compressed to a smaller volume.  The higher the DEGREE of compressibility, the more easily the object can be compressed to a smaller volume.  A related concept is elasticityOfObject.")

;;; connectedByPathType
(isa connectedByPathType TernaryPredicate)
(isa connectedByPathType SpatialPredicate)
(arg1Isa connectedByPathType Thing)
(arg2Isa connectedByPathType PartiallyTangible)
(arg3Isa connectedByPathType PartiallyTangible)
(comment connectedByPathType "(connectedByPathType PATHTYPE THING1 THING2) means that there is some path of PATHTYPE links connecting THING1 and THING2, where PATHTYPE is some type of linking object that can link two things, like a road, wire, tie-rod, tube, nerve, rope, etc.  This means that the two are connected somehow by one or more paths consisting of links of type PATHTYPE, and that there is no permanent barrier or gap preventing all forms of access along all of those paths.")

;;; connectedTo
(isa connectedTo SymmetricBinaryPredicate)
(isa connectedTo SpatialPredicate)
(isa connectedTo ConnectionPredicate)
(isa connectedTo ReflexiveBinaryPredicate)
(not 
  (isa connectedTo TransitiveBinaryPredicate))
(genlInverse connectedTo connectedTo)
(arg1Isa connectedTo PartiallyTangible)
(arg2Isa connectedTo PartiallyTangible)
(comment connectedTo "(connectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are configured in a way that allows only certain types of relative motion between them.  A hinged connection, for example, allows limited rotational motion between OBJ1 and OBJ2.  OBJ2 at least must be in a SolidStateOfMatter.  In many cases, being connectedTo implicitly involves a third object; e.g., a door frame that is connectedTo a door by a separate piece, a door hinge.")

;;; connectedTo-Rigidly
(isa connectedTo-Rigidly InterExistingObjectSlot)
(isa connectedTo-Rigidly SpatialPredicate)
(isa connectedTo-Rigidly ConnectionPredicate)
(isa connectedTo-Rigidly SymmetricBinaryPredicate)
(genlPreds connectedTo-Rigidly touchesDirectly)
(genlPreds connectedTo-Rigidly connectedTo)
(genlInverse connectedTo-Rigidly connectedTo-Rigidly)
(arg1Isa connectedTo-Rigidly SolidTangibleThing)
(arg2Isa connectedTo-Rigidly SolidTangibleThing)
(comment connectedTo-Rigidly "(connectedTo-Rigidly OBJ1 OBJ2) means that OBJ1 and OBJ2 are joined so that no relative motion between them can occur unless the connection is severed by breakage of some part of the connected objects or by disassembly of the connection.  Both of the connected objects are solid.")

;;; connectedTo-SemiRigidly
(not 
  (isa connectedTo-SemiRigidly TransitiveBinaryPredicate))
(isa connectedTo-SemiRigidly IrreflexiveBinaryPredicate)
(isa connectedTo-SemiRigidly SymmetricBinaryPredicate)
(isa connectedTo-SemiRigidly ConnectionPredicate)
(isa connectedTo-SemiRigidly InterExistingObjectSlot)
(isa connectedTo-SemiRigidly SpatialPredicate)
(genlPreds connectedTo-SemiRigidly connectedTo)
(genlInverse connectedTo-SemiRigidly connectedTo-SemiRigidly)
(arg1Isa connectedTo-SemiRigidly SolidTangibleThing)
(arg2Isa connectedTo-SemiRigidly SolidTangibleThing)
(comment connectedTo-SemiRigidly "(connectedTo-SemiRigidly OBJ1 OBJ2) means that there is a physical connection between OBJ1 and OBJ2 such that due to the flexibility of a connector, OBJ1, or OBJ2, limited movement around the point of connection is possible.  Positive exemplars include a book flap hinged to the spine of a book (see flapHingedTo), the GallBladder's attachment to the Liver.  Negative exemplars include a wheel and axle or a door hinged to a door frame because the degrees of freedom of the object arise out of geometrical/mechanical properties of the objects and their connectors, not out of the flexibity of said objects.  Note that all flexible connections have a limit to their relative motion.  An extreme example of such a limit is in the connection between a propeller and the fuselage of a rubber band powered airplane.")

;;; connotes
(isa connotes CotemporalPredicate)
(isa connotes TernaryPredicate)
(arg1Isa connotes Individual)
(arg1Isa connotes SpatialThing)
(arg2Isa connotes Thing)
(arg3Isa connotes GenericAttribute)
(comment connotes "(connotes OBJ-1 OBJ-2 DEGREE) means that as a consequence of perceiving one thing (OBJ-1), a typical sane intelligent perceiving agent would likely think of another thing (OBJ-2) with a strength of association indicated by DEGREE.  E.g., (connotes GermanNaziParty Prejudice High), (connotes Lenat Cyc High).  This predicate is sometimes symmetric, but often not.")

;;; constituents
(isa constituents CompositionPredicate)
(isa constituents AntiSymmetricBinaryPredicate)
(isa constituents ReflexiveBinaryPredicate)
(isa constituents TransitiveBinaryPredicate)
(isa constituents CotemporalObjectsSlot)
(genlPreds constituents cotemporal)
(genlPreds constituents physicalDecompositions)
(arg1Isa constituents PartiallyTangible)
(arg2Isa constituents PartiallyTangible)
(comment constituents "The predicate constituents is used to indicate a particular PartiallyTangible which makes up another (possibly non-distinct) PartiallyTangible thing.  (constituents WHL PART) means that the individual object WHL is partially constituted by PART, and PART is more or less uniformly distributed in WHL.  For example, the two teaspoons of chocolate syrup that I put in my milk become constituents of my glass of chocolate milk.  Note that constituents does not entail any special kind of association or bond among the constituents of a thing; they might be simply mixed, they might be chemically bonded, and they might be part of some complex structure.")
(synonymousExternalConcept constituents SENSUS-Information1997 "MADE-OF")

;;; constrainingObject
(isa constrainingObject IrreflexiveBinaryPredicate)
(isa constrainingObject AsymmetricBinaryPredicate)
(isa constrainingObject ActorSlot)
(genlPreds constrainingObject postActors)
(genlPreds constrainingObject preActors)
(arg1Isa constrainingObject MovementEvent)
(arg2Isa constrainingObject PartiallyTangible)
(comment constrainingObject "(constrainingObject MOTION OBJ) means that OBJ physically constrains the motion of some objectMoving in the MovementEvent MOTION.  The constrainingObject necessarily touches the objectMoving during at least part of MOTION.  Examples of constrainingObjects include: an axle constraining a wheel turning, a car or other transporter carrying passengers, and a railroad track guiding a train.  As these examples show, a constrainingObject may or may not be moving.  A road driven on by a car is a marginally negative example of a constrainingObject, because the car can drive off the road, though the road does facilitate its motion.")

;;; consumesPortion
(isa consumesPortion AsymmetricBinaryPredicate)
(isa consumesPortion ActorSlot)
(genlPreds consumesPortion objectActedOn)
(arg1Isa consumesPortion Event)
(arg2Isa consumesPortion PartiallyTangible)
(comment consumesPortion "(consumesPortion ?EV ?OBJ) means that a portion of the object ?OBJ is used up (consumed) in the event ?EV.  However, enough of ?OBJ remains at the end of ?EV for it to maintain its identity.  Thus consumesPortion would be appropriate for an apple that has a bite taken out of it in an eating event, but not for an apple that has been eaten to its core, since the latter is no longer an apple.")

;;; containsCavity
(isa containsCavity FunctionalSlot)
(isa containsCavity PhysicalPartPredicate)
(isa containsCavity CotemporalObjectsSlot)
(genlPreds containsCavity cotemporal)
(genlPreds containsCavity physicalDecompositions)
(arg1Isa containsCavity PartiallyTangible)
(arg2Isa containsCavity Cavity)
(comment containsCavity "(containsCavity OBJ CAV) means that the object OBJ contains the Cavity CAV somewhere in it or on its surface.  The cavity of a container could be, e.g., the interior of a box with its walls.")

;;; containsInformation
(isa containsInformation InterExistingObjectSlot)
(isa containsInformation NonPhysicalPartPredicate)
(arg1Isa containsInformation InformationBearingThing)
(arg2Isa containsInformation AbstractInformation)
(comment containsInformation "(containsInformation ?IBT ?INFO) means that ?INFO is part of the information content of the InformationBearingThing, ?IBT.")

;;; containsPortals
(isa containsPortals CotemporalObjectsSlot)
(isa containsPortals PhysicalPartPredicate)
(genlPreds containsPortals cotemporal)
(genlPreds containsPortals physicalParts)
(genlPreds containsPortals containsCavity)
(arg1Isa containsPortals PartiallyTangible)
(arg2Isa containsPortals Portal)
(arg2Isa containsPortals PartiallyTangible)
(comment containsPortals "The portals of this container.")

;;; contiguousAfter
(isa contiguousAfter IrreflexiveBinaryPredicate)
(isa contiguousAfter ComplexTemporalRelation)
(isa contiguousAfter AsymmetricBinaryPredicate)
(isa contiguousAfter AntiTransitiveBinaryPredicate)
(genlPreds contiguousAfter startsAfterEndingOf)
(arg1Isa contiguousAfter TemporalThing)
(arg2Isa contiguousAfter TemporalThing)
(comment contiguousAfter "(contiguousAfter AFTER BEFORE) means that AFTER starts immediately following BEFORE.  The two events have no time points in common, but there is no time point between them --- i.e., between the ending of the first one (BEFORE) and the starting of the second one (AFTER).  E.g., one can use this predicate to state an axiom that adolescence is contiguousAfter childhood.

Note:  This Cyc temporal relation is similar, but not equivalent to, what James Allen independently dubbed the METBY relation.")
(overlappingExternalConcept contiguousAfter SENSUS-Information1997 "SINCE")

;;; continuouslyConnectedTo
(not 
  (isa continuouslyConnectedTo TransitiveBinaryPredicate))
(isa continuouslyConnectedTo IrreflexiveBinaryPredicate)
(isa continuouslyConnectedTo ShapeDescribingPredicate)
(isa continuouslyConnectedTo SymmetricBinaryPredicate)
(isa continuouslyConnectedTo CotemporalObjectsSlot)
(genlPreds continuouslyConnectedTo touchesDirectly)
(genlInverse continuouslyConnectedTo continuouslyConnectedTo)
(arg1Isa continuouslyConnectedTo PartiallyTangible)
(arg2Isa continuouslyConnectedTo PartiallyTangible)
(comment continuouslyConnectedTo "(continuouslyConnectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are PartiallyTangibles which are are directly and almost seamlessly connected (e.g. they are formed from the same chunk of material, with no substantial barrier or surface or gap separating them.).")

;;; contraryFeelings
(isa contraryFeelings SymmetricBinaryPredicate)
(isa contraryFeelings FunctionalSlot)
(isa contraryFeelings IntensionalRepresentationPredicate)
(isa contraryFeelings AntiTransitiveBinaryPredicate)
(not 
  (isa contraryFeelings TransitiveBinaryPredicate))
(genlPreds contraryFeelings contrastedFeelings)
(genlInverse contraryFeelings contraryFeelings)
(arg1Isa contraryFeelings FeelingAttributeType)
(arg1Genl contraryFeelings FeelingAttribute)
(arg2Isa contraryFeelings FeelingAttributeType)
(arg2Genl contraryFeelings FeelingAttribute)
(comment contraryFeelings "(contraryFeelings EMOTYPE CONTTYPE) means that a feeling of the type EMOTYPE is contrary to a feeling of the type CONTTYPE.  One feeling is contrary to another if they are opposed in almost all their components.  See also contrastedFeelings.  It would be very rare for someone to feel both an EMOTYPE and CONTTYPE at the same time, especially about the same thing/event/situation.  E.g., (contraryFeelings Gloominess Cheerfulness), (contraryFeelings Respect Contempt), (contraryFeelings Shame Pride), and so on.")

;;; contrastedFeelings
(isa contrastedFeelings IntensionalRepresentationPredicate)
(isa contrastedFeelings IrreflexiveBinaryPredicate)
(isa contrastedFeelings SymmetricBinaryPredicate)
(not 
  (isa contrastedFeelings TransitiveBinaryPredicate))
(genlInverse contrastedFeelings contrastedFeelings)
(arg1Isa contrastedFeelings FeelingAttributeType)
(arg1Genl contrastedFeelings FeelingAttribute)
(arg2Isa contrastedFeelings FeelingAttributeType)
(arg2Genl contrastedFeelings FeelingAttribute)
(comment contrastedFeelings "(contrastedFeelings EMOTYPE CONTTYPE) means that a feeling of the type EMOTYPE differs in enough components from a feeling of the type CONTTYPE that it is unlikely (but not virtually impossible, as in the case of contraryFeelings) that someone would simultaneously experience feelings of both types EMOTYPE and CONTTYPE, especially with respect to the same object. E.g., (contrastedFeelings Pride Remorse),  (contrastedFeelings Abhorrence Respect), (contrastedFeelings Entertained-Emotion Panic), etc.  That last assertion expresses the rule of thumb that one does not often feel both entertained and panicy at the same time, though those two emotions are clearly not each other's `opposite' by any means.")

;;; contrastive-RST
(isa contrastive-RST RSTRelation)
(isa contrastive-RST SymmetricBinaryPredicate)
(genlInverse contrastive-RST contrastive-RST)
(arg1Isa contrastive-RST LinguisticObject)
(arg2Isa contrastive-RST LinguisticObject)
(comment contrastive-RST "The discourse relation that holds between two segments of text when ARG1 and ARG2 are presented as being similar in many ways but contrasting in ways the speaker wants to point out.")
(synonymousExternalConcept contrastive-RST SENSUS-Information1997 "RST-CONTRASTIVE")

;;; controls
(not 
  (isa controls IrreflexiveBinaryPredicate))
(not 
  (isa controls ReflexiveBinaryPredicate))
(not 
  (isa controls AsymmetricBinaryPredicate))
(not 
  (isa controls AntiSymmetricBinaryPredicate))
(not 
  (isa controls SymmetricBinaryPredicate))
(not 
  (isa controls TransitiveBinaryPredicate))
(isa controls CotemporalObjectsSlot)
(genlPreds controls cotemporal)
(genlPreds controls positiveVestedInterest)
(arg1Isa controls Agent)
(arg2Isa controls Individual)
(comment controls "(controls X Y) represents that assertion that agent X controls the object Y, in one of the following 2 senses:  X can influence (prohibit, enable or constrain) the behavior of Y; or else X can at least influence (prohibit, enable or constrain) the behavior of other Agents in/concerning Y.  For example, Fred may control his horse directly, forcing it to do things, or not do them; and he also could control the horse indirectly, by deciding who else has access to and use of that horse.  Control of one agent over another agent is rarely total, of course, so this predicate is most likely to apply to a Y which is a non-living possession, and/or to apply in a very narrow context.  X's control over Y is usually either actual (de facto) control or legal (de jure) control.  It is usually cotemporal, meaning that some time slice of X controls the same temporal time slice of Y.")

;;; conveyor-Stationary
(isa conveyor-Stationary ActorSlot)
(isa conveyor-Stationary AsymmetricBinaryPredicate)
(genlPreds conveyor-Stationary instrument-Generic)
(arg1Isa conveyor-Stationary TransportationEvent)
(arg2Isa conveyor-Stationary TangibleThing)
(comment conveyor-Stationary "(conveyor-Stationary ?TRAN ?CONV) means that in the transportation event ?TRAN, ?CONV is a conveyor just like a transporter except it does not move together with the transportee along the path of the transportation.  For example, a river can move aboat from a location to another, and a conveyor belt can move some objects from one place to another, without itself moving with them inthe literal sense, i.e., the river does not change its location(though some pieces of water in the river do) together with the boat, nor does the conveyor belt move with the objects on it from place to place (though some parts of it do).")

;;; cost
(isa cost IntervalBasedQuantitySlot)
(arg1Isa cost Individual)
(arg2Isa cost Money)
(comment cost "(cost OBJECT MONEY) means that buying OBJECT costs the amount MONEY, where this amount can be an interval.  The cost of something is time- and seller-dependent.  For example, the cost of a particular mansion Grey Gables is US$800,000 in an actual sale, or when offered for sale; cost does not refer to appraised value.")

;;; costPerQuantity
(isa costPerQuantity QuaternaryPredicate)
(arg1Isa costPerQuantity ProductType)
(arg1Isa costPerQuantity StuffType)
(arg1Genl costPerQuantity Product)
(arg2Isa costPerQuantity PhysicalAmountSlot)
(arg3Isa costPerQuantity ScalarInterval)
(arg4Isa costPerQuantity Money)
(comment costPerQuantity "The predicate costPerQuantity gives the price for a measured amount of some type of stuff.  (costPerQuantity STUFF UNITS QUANTITY PRICE) means that this kind of STUFF costs PRICE for each QUANTITY of UNITS.  For example, Milk, as measured by volume (i.e., by the predicate volumeOfObject), costs about US $3 per gallon.")

;;; cotemporal
(isa cotemporal ReflexiveBinaryPredicate)
(isa cotemporal SymmetricBinaryPredicate)
(isa cotemporal ComplexTemporalRelation)
(isa cotemporal TransitiveBinaryPredicate)
(genlPreds cotemporal temporallySubsumes)
(genlPreds cotemporal temporalBoundsIdentical)
(genlInverse cotemporal cotemporal)
(arg1Isa cotemporal TemporalThing)
(arg2Isa cotemporal TemporalThing)
(comment cotemporal "(cotemporal X Y) means that X and Y have the exact same temporal extent.  This is a much stronger relation than temporalBoundsIdentical (q.v.).







Note:  Cyc's cotemporal relation is equivalent to what James Allen independently dubbed the EQUALS relation.")

;;; cotemporalSubEvents
(isa cotemporalSubEvents TransitiveBinaryPredicate)
(isa cotemporalSubEvents SubProcessSlot)
(genlPreds cotemporalSubEvents cotemporal)
(genlPreds cotemporalSubEvents subEvents)
(arg1Isa cotemporalSubEvents Event)
(arg2Isa cotemporalSubEvents Event)
(comment cotemporalSubEvents "The Cyc predicate cotemporalSubEvents is used to relate an event to some sub-portion of the event which has the same duration as the whole event but doesn't include everything that happens.  (cotemporalSubEvents WHOLE PART) means that WHOLE and PART are cotemporal events (i.e., they have the same exact duration), and PART is a component of WHOLE.  For example, a particular element of RainStorm may have distinguishable cotemporalSubEvents for (1) raining and (2) wind blowing.  Or, an instance of swimming Backstroke has separable events for (1) kicking and (2) arm motion throughout the swimming.  cotemporalSubEvents allows us to identify them and state different things about the distinct processes.  See also cotemporal, subEvents.")

;;; countryOfAddress
(isa countryOfAddress FunctionalSlot)
(genlPreds countryOfAddress objectFoundInLocation)
(arg1Isa countryOfAddress PartiallyTangible)
(arg2Isa countryOfAddress Country)
(comment countryOfAddress "(countryOfAddress LOC COUNTRY) means that the ContactLocation LOC is located in the Country COUNTRY.  For example, Cycorp's countryOfAddress is the UnitedStatesOfAmerica.  See also ContactLocation.")

;;; covering
(isa covering TaxonomicSlot)
(arg1Isa covering SetOrCollection)
(arg2Isa covering SetOrCollection)
(comment covering "(covering SETORCOL COVER) means that the mathematical set or collection COVER is a covering of the mathematical set or collection SETORCOL -- that is, the elements of COVER are themselves mathematical sets or collections, and every element of SETORCOL is an element of at least one of the elements of COVER.  For example, the Linnaean taxonomy of types of living things (Dog, Mammal, Chordate, Fungus, etc.) is a covering of the set of all animals alive today.  Every animal alive today is a member of one or more of the Linnaean categories.  A covering set or collection COVER may contain `extra' elements, which are not members of SETORCOL.  For example, the union of all the Linnaean categories (see OrganismClassificationType) is actually much larger than the set of animals alive today, encompassing plants, extinct animal species, etc.  In order to express an assertion about covering, one need not create a new constant from scratch to play the role of COVER if such a constant doesn't already exist.  Instead, one can specify a covering set by enumerating its elements, using the function TheCovering.  (This is a special ReifiableFunction whose principal reason-for-being is to facilitate the inference heuristics associated with assertions about covering.)")

;;; covers-Baglike
(isa covers-Baglike IrreflexiveBinaryPredicate)
(isa covers-Baglike AsymmetricBinaryPredicate)
(isa covers-Baglike CotemporalObjectsSlot)
(isa covers-Baglike TransitiveBinaryPredicate)
(isa covers-Baglike SpatialPredicate)
(genlPreds covers-Baglike surroundsCompletely)
(genlPreds covers-Baglike touches)
(genlInverse covers-Baglike cotemporal)
(arg1Isa covers-Baglike PartiallyTangible)
(arg2Isa covers-Baglike PartiallyTangible)
(comment covers-Baglike "(covers-Baglike WRAP OBJECT) means that WRAP covers OBJECT as a continuous sheet wrapping wholly around object.  WRAP touches OBJECT, so there is nothing greater than a sheet thickness separating them.  OBJECT is totally enclosed in WRAP.")

;;; covers-Hairlike
(not 
  (isa covers-Hairlike AsymmetricBinaryPredicate))
(not 
  (isa covers-Hairlike AntiSymmetricBinaryPredicate))
(not 
  (isa covers-Hairlike SymmetricBinaryPredicate))
(not 
  (isa covers-Hairlike TransitiveBinaryPredicate))
(isa covers-Hairlike CotemporalObjectsSlot)
(isa covers-Hairlike IrreflexiveBinaryPredicate)
(isa covers-Hairlike SpatialPredicate)
(genlPreds covers-Hairlike cotemporal)
(genlInverse covers-Hairlike cotemporal)
(arg1Isa covers-Hairlike PartiallyTangible)
(arg2Isa covers-Hairlike PartiallyTangible)
(comment covers-Hairlike "(covers-Hairlike HAIR OBJECT) means that HAIR consists of a mob of things that are embedded close together in OBJECT and cover some portion of its surface.  See also Mob.")

;;; covers-Paintlike
(isa covers-Paintlike CotemporalObjectsSlot)
(isa covers-Paintlike AsymmetricBinaryPredicate)
(isa covers-Paintlike TransitiveBinaryPredicate)
(isa covers-Paintlike SpatialPredicate)
(genlPreds covers-Paintlike touches)
(genlPreds covers-Paintlike cotemporal)
(genlInverse covers-Paintlike cotemporal)
(arg1Isa covers-Paintlike PartiallyTangible)
(arg2Isa covers-Paintlike PartiallyTangible)
(comment covers-Paintlike "(covers-Paintlike COATING OBJECT) means that COATING adheres to and covers OBJECT like a coat of paint. COATING touchesDirectly onto OBJECT. COATING may be either dry (e.g., dried paint) or liquid (e.g., lubricant spread on a surface, like cooking oil on a baking pan). Like paint, COATING isn't more cohesive with itself thanit is with OBJECT, so (if dry) it would tend to peel or flake off in small pieces, rather than as a whole.")

;;; covers-Ruglike
(not 
  (isa covers-Ruglike AsymmetricBinaryPredicate))
(not 
  (isa covers-Ruglike AntiSymmetricBinaryPredicate))
(not 
  (isa covers-Ruglike SymmetricBinaryPredicate))
(not 
  (isa covers-Ruglike TransitiveBinaryPredicate))
(isa covers-Ruglike CotemporalObjectsSlot)
(isa covers-Ruglike IrreflexiveBinaryPredicate)
(isa covers-Ruglike SpatialPredicate)
(genlPreds covers-Ruglike cotemporal)
(genlInverse covers-Ruglike cotemporal)
(arg1Isa covers-Ruglike SolidTangibleThing)
(arg2Isa covers-Ruglike PartiallyTangible)
(comment covers-Ruglike "(covers-Ruglike MAT OBJECT) means that MAT covers at least part of one surface of OBJECT.  MAT is SheetShaped, and MAT lies with its two longer dimensions parallel to OBJECT.  See also coversWithConformity.")

;;; covers-Skinlike
(not 
  (isa covers-Skinlike TransitiveBinaryPredicate))
(isa covers-Skinlike CotemporalObjectsSlot)
(isa covers-Skinlike AntiTransitiveBinaryPredicate)
(isa covers-Skinlike AsymmetricBinaryPredicate)
(isa covers-Skinlike FunctionalSlot)
(isa covers-Skinlike SpatialPredicate)
(genlPreds covers-Skinlike touches)
(genlPreds covers-Skinlike cotemporal)
(genlInverse covers-Skinlike cotemporal)
(arg1Isa covers-Skinlike PartiallyTangible)
(arg2Isa covers-Skinlike PartiallyTangible)
(comment covers-Skinlike "(covers-Skinlike SKIN OBJECT) means that SKIN forms all or part of OBJECT's outer surface, shell, or skin.  The predicate is agnostic as to whether SKIN is a part of OBJECT.")

;;; coversWithConformity
(isa coversWithConformity SpatialPredicate)
(isa coversWithConformity TernaryPredicate)
(isa coversWithConformity FunctionalPredicate)
(arg1Isa coversWithConformity SolidTangibleThing)
(arg2Isa coversWithConformity SheetOfSomeStuff)
(arg3Isa coversWithConformity GenericAttribute)
(comment coversWithConformity "(coversWithConformity OBJ SHEET LEVEL) means that OBJ is covered by SHEET, and SHEET conforms to the surface features of OBJ to the degree LEVEL.  SHEET may cover OBJ in either the sense of covers-Ruglike or covers-Baglike.  For example, hosiery covers legs with a High degree of conformity; sweat pants have Low conformity to legs.")

;;; customers
(isa customers CotemporalObjectsSlot)
(isa customers IrreflexiveBinaryPredicate)
(not 
  (isa customers TransitiveBinaryPredicate))
(not 
  (isa customers SymmetricBinaryPredicate))
(not 
  (isa customers AntiSymmetricBinaryPredicate))
(not 
  (isa customers AsymmetricBinaryPredicate))
(genlPreds customers doesBusinessWith)
(genlPreds customers clients)
(genlPreds customers cotemporal)
(arg1Isa customers Agent)
(arg2Isa customers Agent)
(comment customers "The predicate customers represents a relationship between two Agents.  (customers AGENT1 AGENT2) means AGENT1 sells goods and/or services to AGENT2.  AGENT2 must actually buy something from AGENT1 in order to be one of AGENT1's customers.  (Thus, customers has a narrower meaning than `customer' in colloquial English, which includes potential buyers.)  See also clients.  Cf. buyingAgent (in a particular sales event). ")

;;; cycleInSystem
(isa cycleInSystem AsymmetricBinaryPredicate)
(arg1Isa cycleInSystem Path-Generic)
(arg2Isa cycleInSystem Thing)
(comment cycleInSystem "(cycleInSystem CYCLE SYS) means that CYCLE is a cycle in the path system SYS.  A cycle in SYS is either a loop in SYS or the concatenation of two different paths PATH1 and PATH2 in SYS satisfying (i) there are two points X and Y in SYS such that (pathBetweenInSystem PATH1 X Y SYS) and (pathBetweenInSystem PATH2 X Y SYS), and (ii) no point in SYS other than X and Y is on both PATH1 and PATH2.")

;;; cyclistNotes
(isa cyclistNotes DistributingMetaKnowledgePredicate)
(isa cyclistNotes BinaryPredicate)
(arg1Isa cyclistNotes CycIndexedTerm)
(arg2Isa cyclistNotes CycSystemString)
(comment cyclistNotes "(cyclistNotes X S) means that S is a string of text that usually conveys a message useful to others involved in building the Cyc KB.  This might include warnings ('don't use this!'), plans for future expansion or changes, etc.")

;;; dailyHighTemperature
(isa dailyHighTemperature IntervalBasedQuantitySlot)
(arg1Isa dailyHighTemperature GeographicalRegion)
(arg2Isa dailyHighTemperature Temperature)
(comment dailyHighTemperature "(dailyHighTemperature PLACE TEMP) means that the Temperature TEMP is the high temperature for a day at the GeographicalRegion PLACE.  dailyHighTemperature is typically used for a specified period of time (e.g., a particular day or a specific season); it may be used with generic temperature ranges as well as precise temperatures.  Examples: using holdsIn, we can say that Austin's temperature for 7/20/96 is 102 degrees Fahrenheit; or we can say that for any SummerSeason, Austin's [typical] dailyHighTemperature is VeryHot.")

;;; dailyLowTemperature
(isa dailyLowTemperature IntervalBasedQuantitySlot)
(arg1Isa dailyLowTemperature GeographicalRegion)
(arg2Isa dailyLowTemperature Temperature)
(comment dailyLowTemperature "(dailyLowTemperature PLACE TEMP) means that the Temperature TEMP is the low temperature for a day at the GeographicalRegion PLACE.  dailyLowTemperature is typically used for a specified period of time (e.g., a particular day or a specific season); it may be used with generic temperature ranges as well as precise temperatures.")

;;; damages
(isa damages ActorSlot)
(isa damages AsymmetricBinaryPredicate)
(isa damages IrreflexiveBinaryPredicate)
(genlPreds damages objectActedOn)
(genlPreds damages maleficiary)
(arg1Isa damages Event)
(arg2Isa damages SomethingExisting)
(comment damages "(damages EV OBJ) means that OBJ is acted on in EV in such a way as to end up damaged.  Destruction is considered an extreme form of damage.")

;;; dateOfDeath
(isa dateOfDeath BinaryPredicate)
(genlPreds dateOfDeath endingDate)
(arg1Isa dateOfDeath Entity)
(arg2Isa dateOfDeath Date)
(comment dateOfDeath "(dateOfDeath ?X ?Y) indicates that the Entity ?X ceased to exist during Date ?Y. For people, this is the date at which they died, hence the name of the predicate.  The first argument to this predicate must be an Entity, and not just any old SomethingExisting, because we don't want to talk about the birthDate or dateOfDeath of a subabstraction like AlbertEinsteinWhileAtPrinceton; in other words, proper subabstractions will have startingDates and endingDates, but only true Entitys will have a birthDate or dateOfDeath")

;;; deadEndInSystem
(isa deadEndInSystem AsymmetricBinaryPredicate)
(genlPreds deadEndInSystem pointInSystem)
(arg1Isa deadEndInSystem Thing)
(arg2Isa deadEndInSystem Thing)
(comment deadEndInSystem "(deadEndInSystem END SYS) means that END is a dead-end node in the specified PathSystem SYS.  A node X in SYS is a dead-end node in SYS if there is exactly one link LINK in SYS that END is on and END is not on any loop in SYS.  One easy way to illustrate a deadend X in SYS is to picture it as a node with only one path (possibly very 'short') in the system through which one can approach or leave X.  Note that no totally isolated node in SYS can be a deadend in SYS, neither can any point in SYS that is on a loop in SYS.  If there is no specified PathSystem in which the path ends, but the ending is a dead end of a Path-Customary like a road or wire, then use pathTerminus instead.")

;;; dealerFor
(not 
  (isa dealerFor IrreflexiveBinaryPredicate))
(not 
  (isa dealerFor ReflexiveBinaryPredicate))
(not 
  (isa dealerFor AsymmetricBinaryPredicate))
(not 
  (isa dealerFor AntiSymmetricBinaryPredicate))
(not 
  (isa dealerFor SymmetricBinaryPredicate))
(not 
  (isa dealerFor TransitiveBinaryPredicate))
(isa dealerFor BinaryPredicate)
(arg1Isa dealerFor RetailOrganization)
(arg2Isa dealerFor ManufacturingOrganization)
(comment dealerFor "The predicate dealerFor relates a retailer to the manufacturer(s) whose products are sold by that retailer.  (dealerFor RETAILER MANUF) means that the RetailOrganization RETAILER is a dealer for products made by the ManufacturingOrganization MANUF.  RETAILER may be only one of many dealers.  RETAIL sells MANUF's products to the final consumers.")

;;; defendants
(isa defendants IrreflexiveBinaryPredicate)
(isa defendants AsymmetricBinaryPredicate)
(isa defendants ActorSlot)
(genlPreds defendants litigants)
(arg1Isa defendants Trial)
(arg2Isa defendants Agent)
(comment defendants " (defendants ARG1 ARG2) means that the agent ARG2 is the accused party in the lawsuit ARG1.")

;;; defnIff
(isa defnIff BinaryPredicate)
(isa defnIff InferenceRelatedBookkeepingPredicate)
(isa defnIff FunctionalSlot)
(genlPreds defnIff defnSufficient)
(arg1Isa defnIff Collection)
(arg2Isa defnIff CycSystemSymbol)
(comment defnIff "(defnIff COL TEST) means that TEST is the name of a piece of code in the Cyc system substrate, and TEST acts as a necessary and sufficient test for inclusion in the Collection COL.  If TEST returns T [True] when applied to a particular item, that item is considered an element of COL; all elements of COL must fulfill TEST's requirements.  Cf. defnNecessary, defnSufficient.")

;;; defnNecessary
(isa defnNecessary BinaryPredicate)
(arg1Isa defnNecessary Collection)
(arg2Isa defnNecessary CycSystemSymbol)
(comment defnNecessary "(defnNecessary COL TEST) means that TEST is the name of a piece of code in the Cyc system substrate, and TEST acts as a necessary definition for membership in the Cyc Collection COL.   Only if TEST returns T [True] when applied to a particular item can that item be considered an element of COL; all elements of COL must fulfill TEST's requirements, although there may be additional requirements for membership in COL as well.  Cf. defnIff and defnSufficient.")

;;; defnSufficient
(isa defnSufficient InferenceRelatedBookkeepingPredicate)
(isa defnSufficient BinaryPredicate)
(arg1Isa defnSufficient Collection)
(arg2Isa defnSufficient CycSystemSymbol)
(comment defnSufficient "(defnSufficient COL TEST) means that TEST is the name of a piece of code in the Cyc system substrate, and TEST acts as a sufficient definition for inclusion in the Cyc Collection COL.  If TEST returns T [True] when applied to a particular item, that item is considered an element of COL.  Note that TEST isn't necessarily a necessary test for membership in COL; i.e., not all elements of COL must pass the test, unless TEST is also a defnNecessary for COL.  Cf. defnNecessary, defnIff.")

;;; deliberateActors
(isa deliberateActors ActorSlot)
(genlPreds deliberateActors preActors)
(arg1Isa deliberateActors Event)
(arg2Isa deliberateActors Agent)
(comment deliberateActors "(deliberateActors ACT ACTR) means that the Agent ACTR is conscious, volitional, purposeful in the event ACT.   ACTR is aware of acting in ACT and chooses to play the role he/she/it has in that event; i.e., ACTR has some purpose in mind.
Note:  If you do something deliberately but you fail, you are still a deliberateActors.  For instance, you are a near-sighted doer of ShowingSupportForSomeone at a fencing match, and it turns out you were cheering for Fred when you thought you were cheering for Joe; nevertheless, you are still one of the deliberateActors in the ShowingSupportForSomeone event.
Note: Legal responsibility is a separte issue from `deliberateness.'  Doing something in a fit of rage (e.g. a crime of passion) still involves purpose, volition, and consciousness even if considered for only an instant, and even if the laws and courts find you not guilty.")

;;; denotation
(isa denotation IntangibleObjectPredicate)
(isa denotation QuaternaryPredicate)
(arg1Isa denotation EnglishWord)
(arg2Isa denotation LinguisticObjectType)
(arg2Genl denotation SpeechPart)
(arg3Isa denotation Integer)
(arg4Isa denotation Thing)
(comment denotation "The predicate denotation is used to relate English words to their denotations within the Cyc Knowledge Base.  Some words have multiple denotations associated with different word senses, which may or may not occur in the same parts of speech. (denotation WORD PART NUM CONST) means that the denotation of WORD, with part of speech PART and word sense number NUM, is the Cyc constant CONST.  Examples: (1) Place-TheWord, an instance of EnglishWord, has the denotation PuttingSomethingSomewhere when used as a Verb with its word sense 0, and the denotation Place when used as a SimpleNoun with that same word sense; (2) Ring-TheWord currently has four denotation assertions in the KB: EmittingSound (as a Verb with its 1st word sense); AudibleSound (as a SimpleNoun with its 1st word sense); RingShape (as a SimpleNoun with its 0th word sense); and Ring-Jewelry (as a SimpleNoun with its 2nd word sense).  Note that denotation may reference the results of Cyc functions, as well as Cyc constants; e.g., Density-TheWord denotes (IntervalMinFn (LowAmountFn Density)).  See also WordSense, SpeechPart.")

;;; densityOfObject
(isa densityOfObject TangibleObjectPredicate)
(isa densityOfObject IntervalBasedQuantitySlot)
(arg1Isa densityOfObject PartiallyTangible)
(arg2Isa densityOfObject Density)
(comment densityOfObject "(densityOfObject OBJ DENS) means that the tangible thing OBJ has the Density DENS.")

;;; desires
(isa desires PropositionalAttitudeSlot)
(arg1Isa desires IntelligentAgent)
(arg2Isa desires CycFormula)
(comment desires "(desires AGT PROP) means that the Agent AGT desires that the world be as the proposition PROP (represented by a CycFormula) describes it to be.  desires is implied by goals, but is weaker:  PROP might be some desirable state of affairs that the agent is not actively working, or planning, to make/keep true; e.g., WorldPeace.  See also goals and intends.")
(overlappingExternalConcept desires SENSUS-Information1997 "WANTING")

;;; destination-RoundTrip
(isa destination-RoundTrip ActorSlot)
(genlPreds destination-RoundTrip nonDeliberateActors)
(arg1Isa destination-RoundTrip Translation-RoundTrip)
(arg2Isa destination-RoundTrip PartiallyTangible)
(comment destination-RoundTrip "(destination-RoundTrip TRIP PLACE) means that PLACE is the destination (i.e., the toLocation) of the OUTBOUND leg of the round-trip event TRIP.  PLACE is where the objectMoving in TRIP goes and then returns from.  See also origin-RoundTrip, Translation-RoundTrip, outboundLegOfRoundTrip.")

;;; developerOfIBTType
(isa developerOfIBTType IntangibleObjectPredicate)
(isa developerOfIBTType BinaryPredicate)
(arg1Isa developerOfIBTType SpecifiedInformationBearingThingType)
(arg2Isa developerOfIBTType Agent)
(comment developerOfIBTType "The predicate developerOfIBTType relates a specific work to its creator(s).  (developerOfIBTType IBTTYPE AGENT) means that AGENT is one of the people, corporations, publishers, etc., responsible for the invention or bringing into being of the SpecifiedInformationBearingThingType IBTTYPE, which may be a book, television show, computer program, musical score, etc.  Examples: Lenat is a developerOfIBTType for the CycKB; OrsonWelles is a developerOfIBTType for CitizenKane-TheMovie.")

;;; deviceControlledBy
(isa deviceControlledBy AntiSymmetricBinaryPredicate)
(not 
  (isa deviceControlledBy TransitiveBinaryPredicate))
(isa deviceControlledBy AsymmetricBinaryPredicate)
(arg1Isa deviceControlledBy PhysicalDevice)
(arg2Isa deviceControlledBy ControlDevice)
(comment deviceControlledBy "(deviceControlledBy DEV CONTROL) means that CONTROL is a ControlDevice that controls PhysicalDevice DEV.  Most of the time, the controls will be physicalParts of the device.  However there are some notable exceptions -- one's TV remote control, for example -- which control a device but are not physicalParts of that device.")

;;; deviceUsed
(isa deviceUsed ActorSlot)
(genlPreds deviceUsed instrument-Generic)
(arg1Isa deviceUsed Event)
(arg2Isa deviceUsed PhysicalDevice)
(comment deviceUsed "The predicate deviceUsed indicates that a particular device is used in a particular event. (deviceUsed EVENT OBJECT) means that the PhysicalDevice OBJECT plays an instrumental role in the Event EVENT.  (See also instrument-Generic.) OBJECT is intentionally used in EVENT, and standardly (e.g., in the HumanActivitiesMt) OBJECT's role in EVENT is consistent with the object's primaryFunction.")

;;; different
(isa different Predicate)
(isa different EvaluatableFunction)
(isa different VariableArityRelation)
(isa different CommutativeRelation)
(argsIsa different Thing)
(comment different "The variable-arity predicate different is used to state the non-identity of two or more objects. (different X1 X2 ... Xn) means that each Xi given as an argument is not equal to any of the other Xi's.  different is an element of EvaluatableFunction (q.v.).  See also equals.



different can be used to simplify formulas when several things need to be tested for mutual inequality.")

;;; differentInAttribute
(isa differentInAttribute TernaryPredicate)
(arg1Isa differentInAttribute Thing)
(arg2Isa differentInAttribute Thing)
(arg3Isa differentInAttribute AttributeType)
(comment differentInAttribute "(differentInAttribute THING1 THING2 ATTRIBUTE) means that the two things THING1 and THING2 do not have the same values of the AttributeType ATTRIBUTE.  Here 'the same' could mean means complete identity or close resemblance -- what this 'different' means, and what the standard of closeness or identity is, depends on the context, but differentInAttribute and identicalInAttribute cannot both be correctly asserted of the same two things.  See also resemblesInAttribute, and differentInAttribute.")

;;; directingAgent
(isa directingAgent ActorSlot)
(genlPreds directingAgent deliberateActors)
(arg1Isa directingAgent Event)
(arg2Isa directingAgent Agent)
(comment directingAgent "(directingAgent ACT AGENT) means that AGENT is one of the agents that is in control of or directing ACT, but not necessarily directly performing it.  If, in the event ACT, an agent other than AGENT has the performedBy role, then that performer's actions in ACT are directed by AGENT.  For example, (directingAgent PSOBicentennialConcertOfBeethovensNinth #WilliamSteinberg) is true, because Steinberg was the conductor of that concert; he directed the many other musicians who performed in that event.  Another case: (directingAgent MassacreAtMyLai LtWilliamCalley).  The type of direction implied by directingAgent is the kind that can be accomplished by AGENT communicating its desires to the actual performer(s) of ACT.  So, a person would be the directingAgent in a clothes-washing event doneBy a washing machine ONLY in those contexts in which we can consider the machine an agent, acting intentionally.")

;;; direction-Pointing
(isa direction-Pointing BinaryPredicate)
(isa direction-Pointing SpatialPredicate)
(arg1Isa direction-Pointing PartiallyTangible)
(arg2Isa direction-Pointing UnitVectorInterval)
(comment direction-Pointing "(direction-Pointing OBJ DIR) means that the intrinsic pointing axis of OBJ points in the direction DIR (which is described using an instance of UnitVectorInterval).  Pointing axes may be ascribed to certain objects especially in relation to their function(s); e.g., objects which are intended to indicate direction (e.g., a pointer stick, a compass needle); objects which cause motion in a certain direction (e.g., a gun, a train); objects which are accessed from a certain direction (e.g., cupboards, couches).")

;;; directionBetweenObjects
(isa directionBetweenObjects TernaryPredicate)
(arg1Isa directionBetweenObjects PartiallyTangible)
(arg2Isa directionBetweenObjects PartiallyTangible)
(arg3Isa directionBetweenObjects UnitVectorInterval)
(comment directionBetweenObjects "(directionBetweenObjects OBJ1 OBJ2 UVI) means that UVI, an element of UnitVectorInterval, is a vector or set of vectors which point(s) from a point (or set of points) in OBJ1 to a point (or set of points) in OBJ2.  See also VectorFromToFn which is roughly interchangeable with directionBetweenObjects.  directionBetweenObjects has the advantage that an arbitrarily precise direction may be specified.  VectorFromToFn saves the user from doing the labor involved with reifiing and from having to know the direction between OBJ1 and OBJ2.")

;;; directionOfTranslation-Throughout
(isa directionOfTranslation-Throughout BinaryPredicate)
(arg1Isa directionOfTranslation-Throughout Movement-TranslationEvent)
(arg2Isa directionOfTranslation-Throughout UnitVectorInterval)
(comment directionOfTranslation-Throughout "(directionOfTranslation-Throughout MOVEMENT DIR) means that the objectMoving in the MOVEMENT Event translates in the direction DIR throughout MOVEMENT.  In a Translation-MultiPath event, where there are several objects moving and following different pathways, this means that at least one of those objects moves in direction DIR.
Note: It may turn out, in the future, to be worth creating a ternary version of this, which specifies which direction each particular objectMoving moves in.")

;;; dirtinessOfObject
(isa dirtinessOfObject IntervalBasedQuantitySlot)
(arg1Isa dirtinessOfObject PartiallyTangible)
(arg2Isa dirtinessOfObject Dirtiness)
(comment dirtinessOfObject "(dirtinessOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of Dirtiness.")

;;; disjointWith
(isa disjointWith IrreflexiveBinaryPredicate)
(isa disjointWith SymmetricBinaryPredicate)
(isa disjointWith DefaultMonotonicPredicate)
(isa disjointWith TaxonomicSlot)
(isa disjointWith RuleMacroPredicate)
(not 
  (isa disjointWith TransitiveBinaryPredicate))
(not 
  (isa disjointWith AntiSymmetricBinaryPredicate))
(genlInverse disjointWith disjointWith)
(arg1Isa disjointWith SetOrCollection)
(arg2Isa disjointWith SetOrCollection)
(comment disjointWith "(disjointWith SETORCOL1 SETORCOL2) means that the mathematical set or collection SETORCOL1 is disjoint with the mathematical set or collection SETORCOL2 -- that is, the two have no elements in common.")

;;; dislikesObject
(not 
  (isa dislikesObject IrreflexiveBinaryPredicate))
(not 
  (isa dislikesObject ReflexiveBinaryPredicate))
(not 
  (isa dislikesObject AsymmetricBinaryPredicate))
(not 
  (isa dislikesObject AntiSymmetricBinaryPredicate))
(not 
  (isa dislikesObject SymmetricBinaryPredicate))
(not 
  (isa dislikesObject TransitiveBinaryPredicate))
(isa dislikesObject BinaryPredicate)
(arg1Isa dislikesObject Agent)
(arg2Isa dislikesObject PartiallyTangible)
(comment dislikesObject "(dislikesObject AGT OBJ) means that AGT feels an emotion of Dislike when interacting with OBJ in some way.  See likesObject for elaboration.  A specialization of dislikesObject is dislikesSensorially (qv). ")

;;; dislikesRoleInActivity
(isa dislikesRoleInActivity TernaryPredicate)
(arg1Isa dislikesRoleInActivity Agent)
(arg2Isa dislikesRoleInActivity ActorSlot)
(arg3Isa dislikesRoleInActivity Event)
(comment dislikesRoleInActivity "(dislikesRoleInActivity AGT ROLE EVT) means that if the Agent AGT has the relation ROLE to the Event EVT, then AGT is likely to feel Dissatisfaction.  This predicate is useful to represent sentences such as `Joe dislikes running' or `Fred disliked receiving the flogging'.")

;;; dislikesSensorially
(not 
  (isa dislikesSensorially IrreflexiveBinaryPredicate))
(not 
  (isa dislikesSensorially ReflexiveBinaryPredicate))
(not 
  (isa dislikesSensorially AsymmetricBinaryPredicate))
(not 
  (isa dislikesSensorially AntiSymmetricBinaryPredicate))
(not 
  (isa dislikesSensorially SymmetricBinaryPredicate))
(isa dislikesSensorially BinaryPredicate)
(genlPreds dislikesSensorially dislikesObject)
(arg1Isa dislikesSensorially PerceptualAgent)
(arg2Isa dislikesSensorially SensoryAttribute)
(comment dislikesSensorially "(dislikesSensorially AGT SENSUM) means that the PerceptualAgent AGT feels some physical discomfort from the sensory experience of SENSUM (a taste, an odor, a particular level of pain, etc. --- see SensoryAttribute).
Note: this is a stronger statement than (not (likesSensorially AGT SENSUM)), as there may be many SensoryAttributes which one neither particularly likes nor dislikes.")

;;; distanceAboveSeaLevel
(isa distanceAboveSeaLevel IntervalBasedQuantitySlot)
(arg1Isa distanceAboveSeaLevel GeographicalRegion)
(arg2Isa distanceAboveSeaLevel Distance)
(comment distanceAboveSeaLevel "(distanceAboveSeaLevel REG DIST) means that the altitude above sea level of the GeographicalRegion REG is the Distance DIST.  For elements of Mountain, distance is measured from sea level to the peak; for elements of Lake, from the surface to sea level; for cities, from the center of town to sea level.  Examples: (distanceAboveSeaLevel PikesPeak-Mount (Foot-UnitOfMeasure 14110)); (distanceAboveSeaLevel MountEverest (Foot-UnitOfMeasure 29028)); (distanceAboveSeaLevel MountFuji-Volcano (Foot-UnitOfMeasure 12389)); (distanceAboveSeaLevel LakeHuron (Foot-UnitOfMeasure 580)).")

;;; distanceBetween
(isa distanceBetween CotemporalPredicate)
(isa distanceBetween TernaryPredicate)
(isa distanceBetween FunctionalPredicate)
(arg1Isa distanceBetween SpatialThing)
(arg2Isa distanceBetween SpatialThing)
(arg3Isa distanceBetween Distance)
(comment distanceBetween "(distanceBetween THIS THAT DIST) means that the distance between two things, THIS and THAT, is DIST.  DIST is the length of the shortest straight line which extends from a point on THIS to a point on THAT.  For example, (distanceBetween LaGuardiaAirport NewYorkHiltonAtBroadway (Kilometer 12)).  The notion of 'straight line' depends on the context; in a Geography-related context it would be a great circle line on the Earth's surface rather than a true Euclidian straight line going through the Earth.")

;;; distanceOfRotation
(isa distanceOfRotation BinaryPredicate)
(isa distanceOfRotation Role)
(arg1Isa distanceOfRotation Movement-Rotation)
(arg2Isa distanceOfRotation PhysicalAttribute)
(arg2Isa distanceOfRotation ScalarInterval)
(comment distanceOfRotation "This predicate indicates, for a particular rotational motion event, the total absolute value of the angular distance travelled by the objectMoving in that event.  (distanceOfRotation ROT DIST) means that in the event ROT, the objectMoving travelled the angular distance DIST.  Note that this is not the same as the net angular displacement of the objectMoving, but rather the entire angular distance travelled.  So if you unscrew a jar lid 1/6 of a turn, and later screw it back on, the distanceOfRotation is 120 degrees, not zero; and if you spin around ten times, your distanceOfRotation is 3600 degrees, not zero.  Angular distance is measured in degrees, radians, etc.")

;;; distanceTranslated
(isa distanceTranslated Role)
(isa distanceTranslated IntervalBasedQuantitySlot)
(arg1Isa distanceTranslated Movement-TranslationEvent)
(arg2Isa distanceTranslated Distance)
(comment distanceTranslated "This predicate relates a translational movement event to the total distance travelled by the objectMoving in that event.  (distanceTranslated MOVE DIST) means that in the event MOVE, the objectMoving covered the distance DIST.  Note that DIST is the actual distance travelled by the object, not merely its net change in position; so if the pathway-Complete of MOVE is a round trip a mile each way to the store, the distanceTranslated would be 2 miles, not zero.")

;;; doesBusinessWith
(not 
  (isa doesBusinessWith ReflexiveBinaryPredicate))
(not 
  (isa doesBusinessWith TransitiveBinaryPredicate))
(isa doesBusinessWith IrreflexiveBinaryPredicate)
(isa doesBusinessWith SymmetricBinaryPredicate)
(isa doesBusinessWith CotemporalObjectsSlot)
(genlPreds doesBusinessWith cotemporal)
(genlInverse doesBusinessWith doesBusinessWith)
(arg1Isa doesBusinessWith Agent)
(arg2Isa doesBusinessWith Agent)
(comment doesBusinessWith "The predicate doesBusinessWith relates two agents who do business with each other.  (doesBusinessWith AGENT1 AGENT2) means that AGENT1 does some business with AGENT2.  Minimally, that means the two agents at least occasionally negotiate to buy or sell products or services from one other. The two agents may or may not complete the sales/purchase and enter into actual contracts.")

;;; domainAssumptions
(isa domainAssumptions BinaryPredicate)
(isa domainAssumptions MicrotheoryPredicate)
(arg1Isa domainAssumptions Microtheory)
(arg2Isa domainAssumptions CycFormula)
(comment domainAssumptions "(domainAssumptions M P) means that the microtheory M has the proposition P as a domain assumption.  See the comment for Microtheory for a detailed explanation of what the `assumptions' of a mt are, as opposed to its `content'.  In brief, it means that all the `content' assertions of M assume that P is true.  Another way of thinking of this is that one is `in' context M only if all its domain assumptions are true.  Another way of thinking of this is that the various `content' assertions of M only apply to objects that satisfy all its domainAssumptions.  Yes, that means that the `domain of quantifiers' (forAll and thereExists) is limited to the universe of such objects.  So if it's true in M that (forAll ?x Q), and if we lift this axiom to another theory M2 that does not make the domain assumption P, then the axiom becomes (forAll ?x (implies P Q)).  

Note:  Actually, what becomes true in M2 is slightly more complicated, namely: (forAll ?x (implies (and P1 P2 P3...) Q)), where P1, P2, P3,... are all the domain assumptions of M which are not implied by the domain assumptions of M2.

Note:  Domain assumption propositions --- in this case P --- must have a special format:  P must contain the free variable ?U, and this ?U represents `some term which is talked about in M'.  The idea is that one could have a domain assumption that said `if ?U is a person, ?U must have been born after 1950', or which said `if ?U is the performer of an event, then ?U is a person' etc.  For example:  (implies (isa ?U PhysicalStateChangeEvent) (isa ?U CreationOrDestructionEvent)) is one of the domainAssumptions of the NaiveStateChangeMt context.  It says that, in that context, physical state changes of an object (e.g., melting or boiling) are viewed as creations and destructions, in which elements of Entity come into or go out of existence, rather than viewing them as events which preserve entityhood.")

;;; doneBy
(isa doneBy ActorSlot)
(genlPreds doneBy preActors)
(genlPreds doneBy actors)
(arg1Isa doneBy Event)
(arg2Isa doneBy SomethingExisting)
(comment doneBy "The predicate doneBy relates an event to its `doer'.  (doneBy EVENT DOER) means that DOER is the `doer' in the event EVENT.  Some action on the part of the doer causes or carries out the event.  This predicate is agnostic as to whether DOER does EVENT intentionally or not (DOER need not even be animate; e.g., the event in which Mount Vesuvius erupted and buried Pompeii was doneBy Mount Vesuvius).  See performedBy and bodilyDoer for the more specific senses of `doer' when DOER is, respectively, an agent (Agent) acting deliberately or a biological organism (Organism-Whole).")

;;; doorwayHasCovering
(isa doorwayHasCovering PhysicalPartPredicate)
(isa doorwayHasCovering BinaryPredicate)
(genlPreds doorwayHasCovering portalHasCovering)
(arg1Isa doorwayHasCovering Doorway)
(arg2Isa doorwayHasCovering DoorwayCovering)
(comment doorwayHasCovering "Relates a Doorway to the physical covering used to seal it.  The user should be aware that Doorway, the designated arg1 for this predicate, is currently constrained to be a physical part of some instance of ShelterConstruction.  This is because, in normal English parlance, doorways are the portals through which people pass to get in and out of shelter constructions, and from room to room.  Planes, trains, automobiles, and other vehicles are not conventionally said to have Doorways, and if the aim is to assert something about the PortalCoverings of a vehicle, portalHasCovering would be the appropriate predicate to use.")

;;; driverActor
(isa driverActor ActorSlot)
(isa driverActor AsymmetricBinaryPredicate)
(isa driverActor IrreflexiveBinaryPredicate)
(genlPreds driverActor transportees)
(genlPreds driverActor performedBy)
(arg1Isa driverActor TransportationEvent)
(arg2Isa driverActor Person)
(comment driverActor "(driverActor DRIVE DRIVER) means that DRIVER controls (see ControllingATransporter) the transporter in DRIVE.  DRIVER steers the wheel, graps the tiller, controls the throttle, the reins, the brakes etc of the transporter, e.g. a boat, train, windsurfer, mule, plane, horse and carriage, spaceship, sled, etc..   DRIVER is not a passengers in DRIVE.  Because transporter and transportees are disjoint and driverActor has transportees as a genlPreds, DRIVER is distinct from the value on transporter.  Thus a person walking while carrying a watermelon would not be a driverActor in their own walking.  DRIVER is usually in SittingPosture during DRIVE.  For any given instant of DRIVE there is exactly one DRIVER.  Until we have more extensive vocabulary, the transportees is the most specific we can be about events in which multiple drivers share driving responsibility throughout the event or if there is a pilot/co-pilot combination.")

;;; ductilityOfObject
(isa ductilityOfObject TangibleObjectPredicate)
(isa ductilityOfObject IntervalBasedQuantitySlot)
(arg1Isa ductilityOfObject SolidTangibleThing)
(arg2Isa ductilityOfObject Ductility)
(comment ductilityOfObject "(ductilityOfObject OBJ DEGREE) means that the instance of SolidTangibleThing OBJ has this DEGREE of Ductility (q.v.).")

;;; duration
(isa duration IntervalBasedQuantitySlot)
(arg1Isa duration TemporalThing)
(arg2Isa duration Time-Quantity)
(comment duration "(duration ?X ?Y) means that ?Y is length of time TemporalThing ?X happened/existed.  For a continuous TemporalThing, this is the same as its measure (the elapsed time from start to end.)  But for a discontinuous TemporalThing, the duration is strictly less than the measure.  For example, the duration of `the Mondays during May of 1996' is (DaysDuration 4), whereas the measure of that same temporal object is (DaysDuration 22).
Note:  Unfortunately, in some disciplines, such as Real Analysis, these two terms' definitions are switched!  In such contexts, one could assert to Cyc that the preferred denotation of duration was Measure-TheWord, and that the preferred denotation of measure was Duration-TheWord, but notice that the two concepts --- measure and duration --- are still distinct and useful in that discipline, they just happen to have different names there.")

;;; eastOf
(isa eastOf TransitiveBinaryPredicate)
(isa eastOf AsymmetricBinaryPredicate)
(arg1Isa eastOf GeographicalRegion)
(arg2Isa eastOf GeographicalRegion)
(comment eastOf "(eastOf REGION-1 REGION-2) means that the GeographicalRegion REGION-1 is to the east of the GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore west of REGION-1; thus, no distinct predicate is needed to represent `west of'.  Example: (eastOf EasternUSATimeZone CentralUSATimeZone).")

;;; eatsWillingly
(isa eatsWillingly BinaryPredicate)
(arg1Isa eatsWillingly Animal)
(arg2Isa eatsWillingly TemporalStuffType)
(arg2Genl eatsWillingly PartiallyTangible)
(comment eatsWillingly "The predicate eatsWillingly is used to relate an Animal to the type of food
it will willingly eat.  In a normal EatingEvent, the food consumed is of a type
that the eater eatsWillingly.  As negative examples, no vegetarian or herbivore
eatsWillingly meat.")

;;; educationLevel
(isa educationLevel BinaryPredicate)
(arg1Isa educationLevel Person)
(arg2Isa educationLevel EducationLevelAttribute)
(comment educationLevel "(educationLevel PRSN LVL) means Person PRSN has had formal schooling up to the highest level EducationLevelAttribute LVL at one or more EducationalOrganizations.  This will refer to a particular subAbstrac of a Person, not to the person as a whole lifetime Entity.")

;;; elasticityOfObject
(isa elasticityOfObject TangibleObjectPredicate)
(isa elasticityOfObject IntervalBasedQuantitySlot)
(arg1Isa elasticityOfObject SolidTangibleThing)
(arg2Isa elasticityOfObject Elasticity)
(comment elasticityOfObject "(elasticityOfObject OBJ DEGREE) indicates how readily the solid tangible thing OBJ returns to its original shape after being deformed (but not broken).  The higher the DEGREE of elasticity, the more quickly and completely the object returns to its previous shape.  Billiard balls, for example, are highly elastic in this sense.  A related concept is compressibilityOfObject.")

;;; elementOf
(isa elementOf BinaryPredicate)
(not 
  (isa elementOf AsymmetricBinaryPredicate))
(not 
  (isa elementOf SymmetricBinaryPredicate))
(not 
  (isa elementOf AntiSymmetricBinaryPredicate))
(not 
  (isa elementOf TransitiveBinaryPredicate))
(not 
  (isa elementOf IrreflexiveBinaryPredicate))
(not 
  (isa elementOf ReflexiveBinaryPredicate))
(arg1Isa elementOf Thing)
(arg2Isa elementOf SetOrCollection)
(comment elementOf "(elementOf THNG SETORCOL) means that THNG is an element of the mathematical set or collection SETORCOL.  elementOf is a more general relation than the more-heavily-used isa, which is used to talk about membership in a natural kind (an element of Collection).  elementOf can also be used to talk about membership in an arbitrarily-defined mathematical set (an instance of Set-Mathematical), such as those denoted by TheSet expressions.")

;;; emitter
(isa emitter ActorSlot)
(isa emitter AsymmetricBinaryPredicate)
(isa emitter IrreflexiveBinaryPredicate)
(genlPreds emitter providerOfMotiveForce)
(genlPreds emitter fromLocation)
(genlPreds emitter doneBy)
(arg1Isa emitter Emission)
(arg2Isa emitter PartiallyTangible)
(comment emitter "The Cyc predicate emitter is used to identify the source of an emission.  (emitter EMIT OBJ) means that OBJ provides the force involved in making the objectEmitted move from OBJ to someplace outside of OBJ.  See also providerOfMotiveForce, fromLocation.")

;;; employedAgent
(isa employedAgent BinaryPredicate)
(genlPreds employedAgent agreeingAgents)
(arg1Isa employedAgent WorkAgreement)
(arg2Isa employedAgent Agent)
(comment employedAgent "The predicate employedAgent identifies the particular employee who is covered by a particular work agreement.  (employedAgent AGREE WORKER) means that AGREE is an instance of WorkAgreement covering the employee WORKER.")

;;; employeeStatus
(isa employeeStatus BinaryPredicate)
(arg1Isa employeeStatus Person)
(arg1Isa employeeStatus Agent)
(arg2Isa employeeStatus WorkStatus)
(comment employeeStatus "The predicate employeeStatus describes a worker's job as full-time, part-time, salaried, commissioned, paid by the hour, or etc.  More than one may apply.  (employeeStatus WORKER STATUS) means that STATUS indicates the WorkStatus of WORKER.  For example, the employeeStatus of an auto worker at GM probably includes the WorkStatus attributes FullTime and HourlyWork.")

;;; employees
(isa employees AsymmetricBinaryPredicate)
(isa employees CotemporalObjectsSlot)
(not 
  (isa employees TransitiveBinaryPredicate))
(genlPreds employees hasWorkers)
(genlPreds employees affiliatedWith)
(genlPreds employees cotemporal)
(arg1Isa employees Agent)
(arg2Isa employees Agent)
(comment employees "The predicate employees relates a particular employer to one of its paid employees.  (employees EMPLOYER WORKER) means WORKER regularly performs work for EMPLOYER, and EMPLOYER pays WORKER for that activity (often by paycheck).  EMPLOYER directs the manner in which WORKER performs the work and may provide the workplace, tools, capital, and other assistance for the work.  EMPLOYER is commonly an organization but may be a person. E.g., (employees PerryMason PaulDrake); (employees Cycorp Lenat).  This predicate is true during all or any part of the period that the employment continues; e.g., (holdsIn (YearFn 1995) (employees CarnegieMellonUniversity Derthick)).")

;;; employingAgent
(isa employingAgent BinaryPredicate)
(genlPreds employingAgent agreeingAgents)
(arg1Isa employingAgent WorkAgreement)
(arg2Isa employingAgent Agent)
(comment employingAgent "The predicate employingAgent identifies the employer in a particular work agreement.  (employingAgent AGREE EMPLOYER) means that the Agent EMPLOYER has entered into the WorkAgreement AGREE with some employee, and AGREE obligates EMPLOYER to compensate that employee for specified work.  See also Agreement, obligatedAgent.")

;;; emptiesInto
(not 
  (isa emptiesInto TransitiveBinaryPredicate))
(isa emptiesInto AntiTransitiveBinaryPredicate)
(isa emptiesInto AsymmetricBinaryPredicate)
(isa emptiesInto FunctionalSlot)
(arg1Isa emptiesInto Stream)
(arg2Isa emptiesInto BodyOfWater)
(comment emptiesInto "The predicate emptiesInto is used to indicate that a particular flowing body of water disgorges into another body of water.  (emptiesInto RIV WAT) means that the Stream RIV flows into WAT, an element of BodyOfWater.  Examples: (emptiesInto AmazonRiver AtlanticOcean); (emptiesInto HuangHeRiver #YellowSea).")

;;; endToEndConnected
(isa endToEndConnected InterExistingObjectSlot)
(isa endToEndConnected ConnectionPredicate)
(isa endToEndConnected SpatialPredicate)
(isa endToEndConnected SymmetricBinaryPredicate)
(genlPreds endToEndConnected connectedTo-Rigidly)
(genlInverse endToEndConnected endToEndConnected)
(genlInverse endToEndConnected connectedTo-Rigidly)
(arg1Isa endToEndConnected Path-Simple)
(arg2Isa endToEndConnected Path-Simple)
(comment endToEndConnected "(endToEndConnected PATH1 PATH2) means that one end of a Path-Simple or a SimpleUnloopedSegmentOfPath, PATH1, is connected to one end of another Path-Simple or SimpleUnloopedSegmentOfPath, PATH2, end-to-end, allowing flow or transport between them.  This kind of connection is not currently included as a JunctionOfPaths.  In pipe welding, these connections are called butt welds or circumferential pipe welds.")

;;; endingDate
(isa endingDate BinaryPredicate)
(genlPreds endingDate endsDuring)
(arg1Isa endingDate TemporalThing)
(arg2Isa endingDate Date)
(comment endingDate "(endingDate ?X ?Y) indicates that ?Y is a Date such that (temporallySubsumes ?Y (EndFn ?X)). This is NOT the same as endingPoint.  Rather, it means that ?X stopped happening (went out of existence, etc.) sometime on that date.
Note:  the date is tied to a time interval on a calendar, but need not be a particular day; it might be a particular calendar month, a particular calendar year, etc.")

;;; endingPoint
(isa endingPoint TemporalRelation)
(arg1Isa endingPoint TemporalThing)
(arg2Isa endingPoint TimePoint)
(comment endingPoint "(endingPoint ?X ?T) indicates that ?T is the TimePoint at which ?X ends, the latest moment of its temporal extent.")

;;; endsAfterEndingOf
(isa endsAfterEndingOf IrreflexiveBinaryPredicate)
(isa endsAfterEndingOf ComplexTemporalRelation)
(isa endsAfterEndingOf AsymmetricBinaryPredicate)
(isa endsAfterEndingOf TransitiveBinaryPredicate)
(genlPreds endsAfterEndingOf endsAfterStartingOf)
(arg1Isa endsAfterEndingOf TemporalThing)
(arg2Isa endsAfterEndingOf TemporalThing)
(comment endsAfterEndingOf "(endsAfterEndingOf LATER EARLY) means that LATER ends after EARLY ends -- in Cyc terms, (after (EndFn LATER) (EndFn EARLY)).  That is, the endingPoint of LATER is later than the endingPoint of EARLY.   This implies nothing about whether LATER and EARLY overlap, or how much they overlap, except that they can't be fully cotemporal.  Examples: rinsing while showering ends after soaping while showering; the process of hiring a contractor ends after the process of collecting bids.")

;;; endsAfterStartingOf
(isa endsAfterStartingOf ComplexTemporalRelation)
(isa endsAfterStartingOf ReflexiveBinaryPredicate)
(not 
  (isa endsAfterStartingOf TransitiveBinaryPredicate))
(not 
  (isa endsAfterStartingOf SymmetricBinaryPredicate))
(not 
  (isa endsAfterStartingOf AntiSymmetricBinaryPredicate))
(not 
  (isa endsAfterStartingOf AsymmetricBinaryPredicate))
(arg1Isa endsAfterStartingOf TemporalThing)
(arg2Isa endsAfterStartingOf TemporalThing)
(comment endsAfterStartingOf "(endsAfterStartingOf ?X ?Y) means (after (EndFn ?X) (StartFn ?Y)).  That is, the endingPoint of ?X is later than the startingPoint of ?Y.  This implies nothing about whether ?X and ?Y overlap, or how much they overlap.")

;;; endsDuring
(isa endsDuring ComplexTemporalRelation)
(isa endsDuring AsymmetricBinaryPredicate)
(not 
  (isa endsDuring TransitiveBinaryPredicate))
(not 
  (isa endsDuring SymmetricBinaryPredicate))
(genlPreds endsDuring endsAfterStartingOf)
(genlPreds endsDuring temporalBoundsIntersect)
(genlInverse endsDuring endsAfterEndingOf)
(arg1Isa endsDuring TemporalThing)
(arg2Isa endsDuring TemporalThing)
(comment endsDuring "(endsDuring ?X ?Y) means ?Y covers the end of ?X, i.e. the endingPoint of ?X is properly contained in (temporalBoundsContain) ?Y.  Note that ?X and ?Y don't necessarily intersect, however, if ?Y is continuous, they do.")

;;; endsOfPathSegment
(isa endsOfPathSegment CotemporalObjectsSlot)
(isa endsOfPathSegment AsymmetricBinaryPredicate)
(genlPreds endsOfPathSegment cotemporal)
(genlPreds endsOfPathSegment physicalParts)
(genlInverse endsOfPathSegment onPath)
(arg1Isa endsOfPathSegment Path-Simple)
(arg2Isa endsOfPathSegment Thing)
(comment endsOfPathSegment "(endsOfPathSegment PATH LOC) means that LOC is one end of the Path-Simple segment PATH; LOC may be either a junction or a genuine terminal-end of the path segment.  This refers to the ends of any kind of simple path.")

;;; english
(isa english BinaryPredicate)
(arg1Isa english Thing)
(arg2Isa english CycSystemString)

;;; equals
(isa equals TransitiveBinaryPredicate)
(isa equals ReflexiveBinaryPredicate)
(isa equals SymmetricBinaryPredicate)
(isa equals DefaultMonotonicPredicate)
(genlInverse equals equals)
(arg1Isa equals Thing)
(arg2Isa equals Thing)
(comment equals "The predicate equals is the Cyc version of identity of predicate logic.  (equals A B) means A and B denote the same thing.")

;;; equiv
(isa equiv ELRelation)
(isa equiv CommutativeRelation)
(arg1Isa equiv CycFormula)
(arg2Isa equiv CycFormula)
(comment equiv "The logical connective equiv represents bi-directional implication.
 equiv takes two arguments, each of which must be an element of 
 CycFormula. (equiv FORMULA-1 FORMULA-2) means that formula FORMULA-1 
 is true precisely when formula FORMULA-2 is true; in other words, 
 FORMULA-1 is true if and only if FORMULA-2 is true.  An EL formula that
 mentions equiv is translated during canonicalization into an equivalent
 (though less compact) formula that mentions implies and does not mention
 equiv (see the expansion gaf for equiv).")

;;; ethnicGroupsHere
(isa ethnicGroupsHere BinaryPredicate)
(isa ethnicGroupsHere IntangibleObjectPredicate)
(arg1Isa ethnicGroupsHere GeopoliticalEntity)
(arg2Isa ethnicGroupsHere EthnicGroupType)
(comment ethnicGroupsHere "The ethnic groups that inhabit a geographical region.")

;;; ethnicity
(isa ethnicity BinaryPredicate)
(genlPreds ethnicity isa)
(arg1Isa ethnicity Person)
(arg2Isa ethnicity EthnicGroupType)
(arg2Genl ethnicity Person)
(comment ethnicity "(ethnicity PERSON GROUPTYPE) means Person PERSON belongs to the EthnicGroupType GROUPTYPE.   E.g., (ethnicity JohnWilkesBooth CensusGroupOfCaucasians).  One Person may belong to more than one EthnicGroupType.")

;;; evaluate
(isa evaluate BinaryPredicate)
(arg1Isa evaluate CycELVariable)
(arg2Isa evaluate Thing)
(comment evaluate "(evaluate VAR EXPRESSION) is satisfied by an HL module which evaluates EXPRESSION and binds VAR to the result.  For example, (evaluate ?SUM (PlusFn 1 2)) would bind ?SUM to 3.")

;;; eventHonors
(isa eventHonors IrreflexiveBinaryPredicate)
(isa eventHonors Role)
(isa eventHonors AsymmetricBinaryPredicate)
(arg1Isa eventHonors SocialOccurrence)
(arg2Isa eventHonors Agent)
(comment eventHonors "(eventHonors OCCURRENCE AGENT) means that AGENT is honored or commemorated by OCCURRENCE.  If AGENT is a living Person, AGENT is probably present at OCCURRENCE.  This is the appropriate predicate for relating a Funeral to the deceased person for whom the Funeral is in honor.")

;;; eventOccursAt
(isa eventOccursAt ActorSlot)
(genlPreds eventOccursAt temporallyIntersects)
(genlPreds eventOccursAt actors)
(genlPreds eventOccursAt inRegion)
(arg1Isa eventOccursAt Event)
(arg2Isa eventOccursAt PartiallyTangible)
(comment eventOccursAt "The predicate eventOccursAt relates a particular event to the instance of PartiallyTangible in which it occurs.  (eventOccursAt EVENT PT) means that the spatial extent of EVENT is within PT.  For example, (eventOccursAt LomaPrietaEarthquake SanFranciscoBayArea).")

;;; eventOccursNear
(isa eventOccursNear ActorSlot)
(arg1Isa eventOccursNear Event)
(arg2Isa eventOccursNear PartiallyTangible)
(comment eventOccursNear "The predicate eventOccursNear is used to give an approximate location for an event.  (eventOccursNear EVENT LOC) means that EVENT occurs at a place near LOC.  eventOccursNear is useful when the more exact eventOccursAt is unknown, hard to specify, or not worth reifying.  For example, eventOccursNear is useful for describing the location of events in scenarios such as `Bob was cycling by the dam', `We played checkers near the TV', and `He is standing by the horse's hind legs'.  See cyclistNotes for ideas on how to formalize this.")

;;; eventTypeTemporalLocality
(isa eventTypeTemporalLocality IntervalBasedQuantitySlot)
(arg1Isa eventTypeTemporalLocality ScriptType)
(arg1Genl eventTypeTemporalLocality Event)
(arg2Isa eventTypeTemporalLocality Time-Quantity)
(comment eventTypeTemporalLocality "The time period over which the effects of this type of event may be felt. This could be infinite for certain events (such as killing a person), but for most events this is a much shorter period.  E.g., some of the effects of swimming are being wet, being tired, being out of breath, etc. but those effect generally only persist for a period of minutes after the swimming ends.")

;;; evokes
(isa evokes CotemporalPredicate)
(isa evokes TernaryPredicate)
(arg1Isa evokes Individual)
(arg2Isa evokes FeelingAttributeType)
(arg2Genl evokes FeelingAttribute)
(arg3Isa evokes GenericAttribute)
(comment evokes "(evokes OBJ EMOTYPE DEGREE) means that as a consequence of perceiving OBJ, a typical sane intelligent perceiving agent would experience a feeling of EMOTYPE with degree of intensity DEGREE.  E.g., in some contexts, (evokes StatueOfLiberty Pride High).")

;;; exceptFor
(isa exceptFor LogicalConnective)
(isa exceptFor Relationship)
(arg1Isa exceptFor ReifiableTerm)
(arg2Isa exceptFor Assertion)
(comment exceptFor "(exceptFor TERM ASSERTION) means that TERM is a thing, about which ASSERTION is not known to hold.  

exceptFor is a special case of exceptWhen (q.v.), applicable when ASSERTION has only one universally quantified variable.  (exceptFor TERM ASSERTION) prevents TERM from binding to that variable, thereby blocking the conclusions about TERM that Cyc might otherwise draw from ASSERTION.  In other words, if ASSERTION is an implication, then whatever proposition(s) -- call that Q -- that Cyc might have concluded about TERM from ASSERTION may or may not be true in Cyc, but (due to the exception) they would no longer be justified, even partially, by ASSERTION.

Note that the exception TERM  should be a particular binding for
the rule, not a collection, all of whose members the rule
does not apply to. Example: I have the rule 
(implies (isa ?X Cyclist) (loves ?X RichardNixon)).
I could use exceptFor to state that this rule does not
apply to some particular cyclist, e.g., Foxvog. But if
I wanted to make an exception to this rule for all 
MalePersons, I would not use exceptFor, but exceptWhen.")

;;; exceptWhen
(isa exceptWhen LogicalConnective)
(isa exceptWhen Relationship)
(arg1Isa exceptWhen CycFormula)
(arg2Isa exceptWhen Assertion)
(comment exceptWhen "(exceptWhen FORMULA ASSERTION) means that FORMULA gives a set of conditions under which ASSERTION is known not to hold (or, more precisely, conditions under which ASSERTION should not be relied upon as the justification for some other inferences).  The universally quantified variables in ASSERTION's formula may be used in FORMULA to refer to the same objects.  A common special case of exceptWhen is handled by exceptFor (q.v.)")

;;; exchangers
(isa exchangers ActorSlot)
(isa exchangers AsymmetricBinaryPredicate)
(isa exchangers IrreflexiveBinaryPredicate)
(genlPreds exchangers socialParticipants)
(genlPreds exchangers performedBy)
(genlPreds exchangers postActors)
(genlPreds exchangers preActors)
(arg1Isa exchangers ExchangeOfUserRights)
(arg2Isa exchangers Agent)
(comment exchangers "The predicate exchangers is used to identify the (typically, two) Agents involved in an instance of ExchangeOfUserRights.   In such an event, each of the exchangers gives up possession of one thing and gains possession of another which was previously possessed by the other agent.  (exchangers EXCH AGENT) means that AGENT is one of the parties having such a dual role in the ExchangeOfUserRights EXCH.  Every instance of ExchangeOfUserRights has two sub-events which are instances of TransferringPossession (e.g., a dollar bill goes in one direction and some french fries and a few coins go in the other direction.)  Each of the exchangers is both a toPossessor (in one of the two TransferringPossession sub-events of EXCH) and a fromPossessor (in the other sub-event).")

;;; exhibitors
(isa exhibitors IrreflexiveBinaryPredicate)
(isa exhibitors AsymmetricBinaryPredicate)
(isa exhibitors ActorSlot)
(genlPreds exhibitors socialParticipants)
(arg1Isa exhibitors SocialGathering)
(arg2Isa exhibitors Agent)
(comment exhibitors "(exhibitors GATHERING AGENT) means that AGENT actively presents information, markets a product, displays merchandise or artwork to the attendees of GATHERING.")

;;; expansion
(isa expansion BinaryPredicate)
(arg1Isa expansion Relationship)
(arg2Isa expansion CycSystemList)
(comment expansion "The complex functions/relations can be explained in terms of more primitive functions. This slot contains such a primitive expansion.")

;;; expansionAxiom
(isa expansionAxiom MetaKnowledgePredicate)
(isa expansionAxiom BinaryPredicate)
(arg1Isa expansionAxiom RuleMacroPredicate)
(arg2Isa expansionAxiom Assertion)
(comment expansionAxiom "(expansionAxiom PRED ASSERT) means that the assertion ASSERT is part of the expansion of PRED.")

;;; expects
(isa expects PropositionalAttitudeSlot)
(arg1Isa expects IntelligentAgent)
(arg2Isa expects CycFormula)
(comment expects "(expects AGT PROP) means that the agent AGT believes the proposition PROP (represented by a CycFormula) will be true sometime in the future.  A use of this predicate is to state rules such as: when someone confirms that they will be participating in a social event, the host(ess) expects that they will participate.")

;;; exports
(isa exports ProcessPredicate)
(isa exports BinaryPredicate)
(arg1Isa exports GeopoliticalEntity)
(arg2Isa exports ProductType)
(arg2Genl exports PartiallyTangible)
(comment exports "(exports REGION THING) means that the region REGION has substantial regular exports of the commodity THING.")

;;; externalParts
(isa externalParts PhysicalPartPredicate)
(isa externalParts TransitiveBinaryPredicate)
(isa externalParts AntiSymmetricBinaryPredicate)
(isa externalParts CotemporalObjectsSlot)
(genlPreds externalParts physicalParts)
(genlPreds externalParts cotemporal)
(arg1Isa externalParts PartiallyTangible)
(arg2Isa externalParts PartiallyTangible)
(comment externalParts "(externalParts OBJ PART) means that OBJ has PART as one of its external physicalParts.")

;;; eyeColor
(isa eyeColor TangibleObjectPredicate)
(isa eyeColor PhysicalAttributeDescriptionSlot)
(arg1Isa eyeColor Animal)
(arg2Isa eyeColor Color)
(comment eyeColor "(eyeColor ANIMAL COLOR) means that the Animal ANIMAL has eyes whose Color is COLOR  (more precisely, this means that their irises appear to have that color, in sunlight).  E.g., (eyeColor AmyIrving PurpleColor).")

;;; facesDirection
(isa facesDirection BinaryPredicate)
(isa facesDirection SpatialPredicate)
(arg1Isa facesDirection PartiallyTangible)
(arg2Isa facesDirection UnitVectorInterval)
(comment facesDirection "(facesDirection OBJ DIR) means that the intrinsic forward axis of OBJ (i.e., the vector normal to its intrinsic front side) points in the direction DIR.  Note that an object only has an intrinsic forward axis if it has some intrinsic front side by virtue of its design or function.  For example, trains, cars, and bullets have intrinsic front faces by virtue of the direction in which they are intended to travel.  Other objects, such as refrigerators, bookshelves against walls, and televisions, have front faces by virtue of how people usually view the object.  Spheres, being symmetric, do not have an intrinsic forward axis.")

;;; facesObject
(isa facesObject TernaryPredicate)
(arg1Isa facesObject PartiallyTangible)
(arg2Isa facesObject IntrinsicAxisOfObject)
(arg3Isa facesObject PartiallyTangible)
(comment facesObject "The Cyc predicate facesObject is used to represent the orientation of one object to another. (facesObject OBJ1 AXIS1 OBJ2) means that an intrinsic axis projected through OBJ1 (i.e., AXIS1) spatially intersects with the second object, OBJ2.  See also IntrinsicAxisOfObject, AxisFn.")

;;; failureForAgents
(isa failureForAgents ActorSlot)
(genlPreds failureForAgents performedBy)
(arg1Isa failureForAgents PurposefulAction)
(arg2Isa failureForAgents Agent)
(comment failureForAgents "The predicate failureForAgents is used to indicate that a particular agent fails to achieve (at least one of) its goals in a particular action.  (failureForAgents ENDEAVOR AGT) means that the Agent AGT had some purpose in performing ENDEAVOR that was not realized.  See also purposeInEvent.")

;;; fanOutArg
(isa fanOutArg BinaryPredicate)
(arg1Isa fanOutArg TransitiveBinaryPredicate)
(arg2Isa fanOutArg PositiveInteger)
(comment fanOutArg "(fanOutArg ?PRED ?N) means that transitively-related assertions using ?PRED usually ''fan out'' in the direction of argument position ?N.  For example, (fanOutArg geographicalSubRegions 2).  This means there are more non-subsumed arg2s for a given arg1 to geographicalSubRegions than there would be non-subsumed arg1s for a given arg2.")

;;; fastenedTo
(not 
  (isa fastenedTo IrreflexiveBinaryPredicate))
(not 
  (isa fastenedTo ReflexiveBinaryPredicate))
(not 
  (isa fastenedTo TransitiveBinaryPredicate))
(isa fastenedTo SymmetricBinaryPredicate)
(isa fastenedTo ConnectionPredicate)
(isa fastenedTo SpatialPredicate)
(genlPreds fastenedTo connectedTo-Rigidly)
(genlInverse fastenedTo fastenedTo)
(arg1Isa fastenedTo SolidTangibleThing)
(arg2Isa fastenedTo SolidTangibleThing)
(comment fastenedTo "(fastenedTo OBJ1 OBJ2) means that there is an assembly consisting of OBJ1, OBJ2, and one or more fasteners configured so that OBJ1 and OBJ2 are rigidly connected.  Many types of fastener are covered by fastenedTo; e.g., screws, nails, rivets, nuts and bolts.  The fastener penetrates all the way through OBJ1 and may or may not go all the way through OBJ2.  Examples: a utility shelf screwed into the wall; paper notices stapled to a bulletin board; shingles nailed to the roof of a house.")

;;; father
(isa father CotemporalObjectsSlot)
(isa father AntiTransitiveBinaryPredicate)
(isa father AsymmetricBinaryPredicate)
(isa father FamilyRelationSlot)
(isa father IrreflexiveBinaryPredicate)
(genlPreds father cotemporal)
(arg1Isa father Animal)
(arg2Isa father MaleAnimal)
(comment father "(father OFFSPRING MALE) means that MaleAnimal MALE is the male biological parent of Animal OFFSPRING.")
(comment father "(father CHILD FATHER) means FATHER is one of the persons who fulfill the role of father for CHILD.  This may or may not include CHILD's biological father, and might include CHILD's step father(s) or foster father(s).")

;;; faxNumberText
(isa faxNumberText BinaryPredicate)
(arg1Isa faxNumberText ContactLocation)
(arg2Isa faxNumberText PhoneNumber)
(comment faxNumberText "The predicate faxNumberText relates a particular location to the fax number at that location.  (faxNumberText LOC NUM) means that NUM is a string denoting (one of) the fax number(s) of the ContactLocation LOC.")

;;; feelsEmotion
(isa feelsEmotion CotemporalPredicate)
(isa feelsEmotion TernaryPredicate)
(arg1Isa feelsEmotion IntelligentAgent)
(arg2Isa feelsEmotion FeelingAttributeType)
(arg2Genl feelsEmotion FeelingAttribute)
(arg3Isa feelsEmotion GenericAttribute)
(comment feelsEmotion "(feelsEmotion AGT EMOTYPE DEGREE) means that the IntelligentAgent AGT feels a feeling of the type EMOTYPE with the intensity DEGREE.  For example, (feelsEmotion Lenat Pride High).  As you might imagine, such statements are generally embedded in a context, or within some other statement (such as holdsIn some small time interval).  See also feelsTowardsEvent, feelsTowardsObject.
Note: the first argument can be a non-human intelligent agent, such as a dog or a company, because we often ascribe feelings and emotions to them, and they often behave consistently with having such feelings and emotions.")
(overlappingExternalConcept feelsEmotion SENSUS-Information1997 "REACTION")

;;; feelsResponseOnBodyRegion
(isa feelsResponseOnBodyRegion QuaternaryPredicate)
(isa feelsResponseOnBodyRegion FunctionalPredicate)
(arg1Isa feelsResponseOnBodyRegion PerceptualAgent)
(arg2Isa feelsResponseOnBodyRegion ExistingObjectType)
(arg2Genl feelsResponseOnBodyRegion AnimalBodyRegion)
(arg3Isa feelsResponseOnBodyRegion SensoryReactionType)
(arg4Isa feelsResponseOnBodyRegion GenericAttribute)
(comment feelsResponseOnBodyRegion "The Cyc predicate feelsResponseOnBodyRegion is used to represent localized somatic feelings of a perceptive being. (feelsResponseOnBodyRegion AGT BODYPARTTYPE SENS DEGREE) means that the PerceptualAgent AGT feels on its body, in the area specified by BODYPARTTYPE, the sensory reaction SENS with an intensity of DEGREE.  For example, Cyc's knowledge base contains an assertion that the very same part of one's body doesn't feel both hot and cold at the same time.  feelsResponseOnBodyRegion can also be used to state symptoms, e.g., when you're feverish, your head feels hot.  See also SensoryReactionType.")

;;; feelsSensation
(isa feelsSensation TernaryPredicate)
(isa feelsSensation FunctionalPredicate)
(arg1Isa feelsSensation BiologicalLivingObject)
(arg2Isa feelsSensation SensoryReactionType)
(arg2Genl feelsSensation SensoryAttribute)
(arg3Isa feelsSensation GenericAttribute)
(comment feelsSensation "(feelsSensation BLO SENSTYPE DEGREE) means that the BiologicalLivingObject BLO feels a sensation of type SENSTYPE with the intensity DEGREE.  feelsSensation may be used to describe an organism's feeling during a particular time period or activity (see holdsIn); for example, we might say of a particular person who is doing yoga: (holdsIn `TodaysYoga' (feelsSensation Prakriti LevelOfRelaxationFeeling VeryHigh).  Note that the first argument of feelsSensation could also be filled by a part of an organism, e.g., `John F. Kennedy's head'; however, by using the more specialized predicate feelsResponseOnBodyRegion (q.v.), we can express localized feelings without reifying each such region.")

;;; feelsTowardsEvent
(isa feelsTowardsEvent QuaternaryPredicate)
(arg1Isa feelsTowardsEvent Person)
(arg1Isa feelsTowardsEvent IntelligentAgent)
(arg2Isa feelsTowardsEvent Event)
(arg3Isa feelsTowardsEvent FeelingAttributeType)
(arg3Genl feelsTowardsEvent FeelingAttribute)
(arg4Isa feelsTowardsEvent GenericAttribute)
(comment feelsTowardsEvent "(feelsTowardsEvent AGT EVT EMOTYPE DEGREE) means that the IntelligentAgent AGT feels a feeling of the FeelingAttributeType EMOTYPE towards the Event EVT, with intensity DEGREE.
Note: the first argument can be a non-human intelligent agent, such as a dog or a company, because we often ascribe feelings and emotions to them, and they often behave consistently with having such feelings and emotions. ")

;;; feelsTowardsObject
(isa feelsTowardsObject QuaternaryPredicate)
(arg1Isa feelsTowardsObject Person)
(arg1Isa feelsTowardsObject IntelligentAgent)
(arg2Isa feelsTowardsObject Individual)
(arg3Isa feelsTowardsObject FeelingAttributeType)
(arg3Genl feelsTowardsObject FeelingAttribute)
(arg4Isa feelsTowardsObject GenericAttribute)
(comment feelsTowardsObject "(feelsTowardsObject AGT OBJ EMOTYPE DEGREE) means that the IntelligentAgent AGT feels a feeling of the FeelingAttributeType EMOTYPE towards the Individual OBJ, with intensity DEGREE.
Note: the first argument can be a non-human intelligent agent, such as a dog or a company, because we often ascribe feelings and emotions to them, and they often behave consistently with having such feelings and emotions.")

;;; femaleParentActor
(isa femaleParentActor IrreflexiveBinaryPredicate)
(isa femaleParentActor AntiTransitiveBinaryPredicate)
(isa femaleParentActor AsymmetricBinaryPredicate)
(isa femaleParentActor ActorSlot)
(isa femaleParentActor FunctionalSlot)
(genlPreds femaleParentActor parentActors)
(arg1Isa femaleParentActor BiologicalReproductionEvent)
(arg2Isa femaleParentActor BiologicalLivingObject)
(comment femaleParentActor "(femaleParentActor ?EVENT ?ORGANISM) means that ?ORGANISM is the female parent in the SexualReproductionEvent ?EVENT.")

;;; fieldsOfActivity
(isa fieldsOfActivity BinaryPredicate)
(genlPreds fieldsOfActivity fieldsOfCompetence)
(arg1Isa fieldsOfActivity Person)
(arg2Isa fieldsOfActivity FieldOfStudy)
(comment fieldsOfActivity "(fieldsOfActivity X FLD) means the Person X was or is active in the FieldOfStudy FLD, and usually is making, has made, or intends to make some contribution to FLD.  E.g., (fieldsOfActivity Thales MilesianSchool) and, to take a more recent example, (fieldsOfActivity Lenat ArtificialIntelligence).")

;;; fieldsOfCompetence
(isa fieldsOfCompetence BinaryPredicate)
(arg1Isa fieldsOfCompetence Person)
(arg2Isa fieldsOfCompetence FieldOfStudy)
(comment fieldsOfCompetence "(fieldsOfCompetence Z FLD) means the Person Z has actual competence and knowledgeability in the FieldOfStudy FLD, or else at least is recognized by peers and colleagues in the same field as being competent in that field.  E.g., (fieldsOfCompetence Nichols PhilosophyAncient)")

;;; fieldsOfFormalEducation
(isa fieldsOfFormalEducation BinaryPredicate)
(genlPreds fieldsOfFormalEducation fieldsOfCompetence)
(arg1Isa fieldsOfFormalEducation Person)
(arg2Isa fieldsOfFormalEducation FieldOfStudy)
(comment fieldsOfFormalEducation "(fieldsOfFormalEducation Z FLD) means that Person Z has had formal academic or tutorial education in the FieldOfStudy FLD.  E.g., (fieldsOfFormalEducation Colvin Linguistics).  This is a good example of a predicate whose precise meaning, and associated heuristic rules, vary quite a bit from context to context, such as from culture to culture, from century to century, etc.")

;;; firstName
(isa firstName BinaryPredicate)
(isa firstName IntangibleObjectPredicate)
(genlPreds firstName nameOfAgent)
(arg1Isa firstName Person)
(arg2Isa firstName HumanGivenNameString)
(comment firstName "(firstName X STRNG) means that Person X is known by the HumanGivenNameString STRNG as his or her first name.  E.g., (firstName Lenat ``Douglas'').  A person rarely has more than one first name, though they may have many nicknames which acquaintences use almost interchangably with the person's first and/or last names.")

;;; firstSubEvents
(isa firstSubEvents TransitiveBinaryPredicate)
(isa firstSubEvents SubProcessSlot)
(genlPreds firstSubEvents temporallyStartedBy)
(genlPreds firstSubEvents subEvents)
(arg1Isa firstSubEvents Event)
(arg2Isa firstSubEvents Event)
(comment firstSubEvents "(firstSubEvents ?X ?Y) implies (subEvents ?X ?Y) and (temporallyStartedBy ?X ?Y).  For example, if one is RelievingPain by taking a pill, then the firstSubEvents in that event is an Ingesting event.  See also lastSubEvents.")

;;; fiscallyCapableOf
(isa fiscallyCapableOf TernaryPredicate)
(arg1Isa fiscallyCapableOf IntelligentAgent)
(arg2Isa fiscallyCapableOf Collection)
(arg2Genl fiscallyCapableOf Situation)
(arg3Isa fiscallyCapableOf Role)
(comment fiscallyCapableOf "The predicate fiscallyCapableOf indicates that an agent has the economic prerequisites needed for taking a certain role in a certain type of situation or event.  (fiscallyCapableOf AGT SIT-TYPE ROLE) means that a particular Agent AGT has the financial resources for acting in this ROLE in normal instances of SIT-TYPE.  For example, we could say that Mary is fiscallyCapableOf being the buyer in a Buying of a Humvee (i.e., (BuyingFn Humvee)).  However, fiscallyCapableOf is noncommittal as to whether Mary does or will in fact buy a Humvee.")

;;; fitsIn
(isa fitsIn BinaryPredicate)
(arg1Isa fitsIn PartiallyTangible)
(arg2Isa fitsIn AbstractShape)
(comment fitsIn "The predicate fitsIn is used to give an approximation of the external size and shape of particular tangible objects, by relating an object to an abstract region of space described as a geometric shape with definite dimensions.  (fitsIn OBJ SHAPE) gives an upper bound for the size of the object OBJ, by stating what sized shape OBJ will fit inside.  fitsIn uses the elements of ShapeFunction (q.v.) for reference, especially the basic shapes generated by RectangularSolidFn, CylinderFn, and SphereFn.  (Note: actual instances of AbstractPhysicalShape are NOT used for assertions made with fitsIn.)  Examples: (fitsIn Pittman (RectangularSolidFn (Meter 2) (Meter 0.35) (Meter 0.25))) and (fitsIn HopeDiamond (CylinderFn (Centimeter 10) (Centimeter 10))).  When fitsIn is used in a rule to represent a class of objects with variable sizes, the ShapeFunction used should refer to the largest size that such objects normally have.  For example, by default, any sandwich SW (fitsIn SW (RectangularSolidFn (Inch 12) (Inch 12) (Inch 6))).")

;;; flammabilityOfObject
(isa flammabilityOfObject TangibleObjectPredicate)
(isa flammabilityOfObject IntervalBasedQuantitySlot)
(isa flammabilityOfObject PhysicalAttributeDescriptionSlot)
(arg1Isa flammabilityOfObject PartiallyTangible)
(arg2Isa flammabilityOfObject Flammability)
(comment flammabilityOfObject "(flammabilityOfObject SUBST DEGREE) means that the tangible SUBST has this DEGREE of Flammability.  A higher value of DEGREE describes objects that catch fire and burn more quickly and easily than those with a lower value.")

;;; fluidPressure
(isa fluidPressure IntervalBasedQuantitySlot)
(isa fluidPressure TangibleSubstancePredicate)
(arg1Isa fluidPressure FluidTangibleThing)
(arg2Isa fluidPressure Pressure)
(comment fluidPressure "(fluidPressure FLUID PRESS) means that the FluidTangibleThing FLUID exerts the Pressure PRESS at its surface.")

;;; followingIntervalType
(isa followingIntervalType TemporalRelation)
(not 
  (isa followingIntervalType TransitiveBinaryPredicate))
(not 
  (isa followingIntervalType SymmetricBinaryPredicate))
(not 
  (isa followingIntervalType AntiSymmetricBinaryPredicate))
(not 
  (isa followingIntervalType AsymmetricBinaryPredicate))
(not 
  (isa followingIntervalType ReflexiveBinaryPredicate))
(not 
  (isa followingIntervalType IrreflexiveBinaryPredicate))
(arg1Isa followingIntervalType TemporalObjectType)
(arg2Isa followingIntervalType TemporalObjectType)
(comment followingIntervalType "(followingIntervalType ?X ?Y) indicates that every instance of ?X is followed by some instance of ?Y, and every instance of ?Y is preceded by some instance of ?X.  The instance of ?Y is contiguousAfter the instance of ?X.  For example,  (followingIntervalType Saturday Sunday).  Every Saturday is followed by a Sunday, and every Sunday is preceded by a Saturday; the Sunday is contiguousAfter the Saturday.")

;;; followingValue
(isa followingValue IrreflexiveBinaryPredicate)
(isa followingValue ExtensionalRepresentationPredicate)
(isa followingValue AsymmetricBinaryPredicate)
(isa followingValue TransitiveBinaryPredicate)
(genlInverse followingValue greaterThan)
(arg1Isa followingValue ScalarInterval)
(arg2Isa followingValue ScalarInterval)
(argsIsa followingValue ScalarInterval)
(comment followingValue "The Cyc predicate followingValue is used to represent an ordering of generic attributes.  (followingValue VAL1 VAL2) means that VAL2 is a greater value than VAL1 on a scale that they share.  (followingValue VAL1 VAL2) implies (greaterThan VAL2 VAL1).  Typically, one uses followingValue when the values VAL1 and VAL2 are elements of GenericAttribute, and they are not grounded in numerically quantifiable units of measure (see NoteAboutGivingGenericValueFunctionsNumericValues).  If VAL1 and VAL2 do have numerical grounding, a followingValue formula is unnecessary since numericallyEqual, greaterThanOrEqualTo, and greaterThan, are automatically computable using arithmetic relations holding between the minimum and maximum of val1 and val2.  (See minQuantValue, maxQuantValue.)  For example, one must use followingValue to state that (HighAmountFn Glamor) is more glamorous than (LowAmountFn Glamor).  On the other hand, it is unnecessary to assert a followingValue relation between (MilesPerHour 5) and (MilesPerHour 25 60) since greaterThan is arithmetically determinable.  See also GenericAttribute, GenericValueFunction.")

;;; foodSourceFor
(isa foodSourceFor BinaryPredicate)
(arg1Isa foodSourceFor Organism-Whole)
(arg2Isa foodSourceFor TemporalStuffType)
(arg2Genl foodSourceFor PartiallyTangible)
(comment foodSourceFor "The predicate foodSourceFor is used to relate a particular organism to the kinds of things it usually eats.  (foodSourceFor ORG OBJTYPE) means ORG is an organism that typically eats some instances of OBJTYPE for food.  Note that OBJTYPE refers to a type of food source, not a particular object that ORG eats.  For example, (foodSourceFor BillJ Popcorn) means that Popcorn is a foodSourceFor Bill, i.e., Bill often eats (instances of) popcorn.")

;;; forAll
(isa forAll Quantifier)
(isa forAll Relationship)
(arg1Isa forAll CycELVariable)
(arg2Isa forAll CycFormula)
(comment forAll "The predicate forAll is Cyc's version of the universal quantifier of predicate calculus (i.e., the operator symbolized in one common notation by an upside-down `A').  As its two arguments, forAll takes a variable (which is an element of CycELVariable) and an element of CycFormula, respectively.  (forAll VAR FORM) means that FORM is true whenever all the occurrences of the variable VAR in the formula FORM are replaced by any object in the Cyc universe.  For example, to say that every person is a mammal, we could assert: (forAll ?X (implies (isa ?X Person) (isa ?X Mammal))).  In addition, CycL follows a convention that allows forAll to be omitted; that is, when no explicit quantifier is used, seemingly unbound variables inside formulas are assumed to be universally quantified.  With that convention, the sample assertion could be written more compactly as: (implies (isa ?X Person) (isa ?X Mammal)).



[Developer-level footnote:  There are many `flavors' of quantification `on the market' these days; here is how the Cyc system currently handles axioms that involve forAll:



When processing an FI-ASK about whether an assertion of the form (forAll VAR FORM) is true or not, Cyc determines extensionally whether or not any known VAR (anything in the knowledge base) could make FORM false.



When processing an FI-PROVE about whether an assertion of the form (forAll VAR FORM) is true or not, Cyc tries to construct an intensional proof (at least at a default-true level) that FORM must be true regardless of what VAR is ever inserted therein.



When processing an FI-ASSERT in which a user or program tells Cyc that an assertion of the form (forAll VAR FORM) is true, Cyc records it intensionally so that it can later serve as part of an intensional proof, when some future FI-PROVE request is processed.]")

;;; forceActingOnObject
(isa forceActingOnObject IntervalBasedQuantitySlot)
(isa forceActingOnObject TangibleObjectPredicate)
(arg1Isa forceActingOnObject PartiallyTangible)
(arg2Isa forceActingOnObject VectorInterval)
(arg2Isa forceActingOnObject PhysicalAttribute)
(comment forceActingOnObject "forceActingOnObject is a predicate relating an instance of PartiallyTangible to any force which changes its direction of travel or the speed at which it is traveling.")

;;; forceCapacity
(isa forceCapacity IntervalBasedQuantitySlot)
(arg1Isa forceCapacity BiologicalLivingObject)
(arg2Isa forceCapacity Strength)
(comment forceCapacity "The slot describing the capability of an animal to exert force.")

;;; formedByConfluenceOf
(isa formedByConfluenceOf AntiTransitiveBinaryPredicate)
(isa formedByConfluenceOf AsymmetricBinaryPredicate)
(arg1Isa formedByConfluenceOf River)
(arg2Isa formedByConfluenceOf River)
(comment formedByConfluenceOf "(formedByConfluenceOf WATER1 WATER2) means that WATER1 is formed, or increased in volume, by the confuence of the rivers including RIVER2 which merge to form RIVER1.")

;;; formsBorderBetween
(isa formsBorderBetween SpatialPredicate)
(isa formsBorderBetween TernaryPredicate)
(arg1Isa formsBorderBetween SpatialThing)
(arg2Isa formsBorderBetween SpatialThing)
(arg3Isa formsBorderBetween SpatialThing)
(comment formsBorderBetween "(formsBorderBetween BORDER REG1 REG2) means that BORDER comprises at least part of the border between REG1 and REG2.  BORDER may be a surface separating two regions of space, or a curve separating two regions of a surface.  The arguments REG1 and REG2 may be physical objects, geographical regions, or abstract entities.  Note that BORDER need not comprise the entire border between REG1 and REG2.  By contrast, BorderBetweenFn returns the entire border between the regions that serve as arguments.")

;;; fourWayJunctionInSystem
(isa fourWayJunctionInSystem AsymmetricBinaryPredicate)
(genlPreds fourWayJunctionInSystem junctionInSystem)
(comment fourWayJunctionInSystem "(fourWayJunctionInSystem JUNCT SYS) means that JUNCT is a 4-way junction in the specified PathSystem SYS.  (See also FourWayJunctionOfPaths for the general case.)  Formally, a 4-way junction in SYS is any point (actually, a node) X in SYS such that either there are exactly 4 links and no loops in SYS that X is on, or there are exactly 2 loops and no links in SYS that X is on, or there are exactly 2 links and 1 loop in SYS that X is on.  See junctionInSystem.")

;;; fragilityOfObject
(isa fragilityOfObject TangibleObjectPredicate)
(isa fragilityOfObject IntervalBasedQuantitySlot)
(arg1Isa fragilityOfObject PartiallyTangible)
(arg2Isa fragilityOfObject Fragility)
(comment fragilityOfObject "(fragilityOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of Fragility.  The higher the fragility, the more easily the object can be broken.")

;;; freezingPoint
(isa freezingPoint IntervalBasedQuantitySlot)
(isa freezingPoint TangibleSubstancePredicate)
(arg1Isa freezingPoint PartiallyTangible)
(arg2Isa freezingPoint Temperature)
(comment freezingPoint "(freezingPoint STUFF TEMP) means that TEMP is the temperature at which the substance STUFF changes from having the attribute LiquidStateOfMatter to SolidStateOfMatter (when sufficient energy is output to lower STUFF's temperature through this point).  Note that the freezing point of most substances is context-dependent (e.g., based on altitude and other factors.)")

;;; frequencyOfActionType
(isa frequencyOfActionType QuaternaryPredicate)
(isa frequencyOfActionType FunctionalPredicate)
(isa frequencyOfActionType TypePredicate)
(arg1Isa frequencyOfActionType Collection)
(arg1Genl frequencyOfActionType Situation)
(arg2Isa frequencyOfActionType Collection)
(arg3Isa frequencyOfActionType ActorSlot)
(arg4Isa frequencyOfActionType Frequency)
(comment frequencyOfActionType "(frequencyOfActionType ?X ?Y ?R ?F) indicates that instances of ?Y play the role ?R in a number of instances of ?X, and they occur with the frequency ?F.  One axiom in Cyc that uses this predicate expresses the rule of thumb that each military typically wages war about once a generation: (frequencyOfActionType  WagingWar MilitaryOrganization performedBy OnceAGeneration).  Another use of it is to express the fact that animals are virtually always breathing:  (frequencyOfActionType Breathing Vertebrate bodilyDoer Continuously).  Even more interesting examples of this predicate express the the rules of thumb that in a modern Western personal... context a person engages in a toothbrushing event about once a day, while as the recipient of professional service that happens 0.5 - 4 times per year, while as the provider of such a service that happens 4 - 20 times per day.  Those three axioms would be written -- in the appropriate contexts of course -- (frequencyOfActionType TeethCleaning Person performedBy (TimesPerDay 1)) and (frequencyOfActionType TeethCleaning Person recipientOfService (TimesPerYear 0.5 4)) and (frequencyOfActionType TeethCleaning Person providerOfService (TimesPerDay 4 20)).   Two additional notes are in order about this predicate:
Note that ?X must be a set of Situations [there is an argument constraint on this predicate that enforces this, namely (arg1Genl frequencyOfActionType Situation)],.
Note that this predicate is functional in its fourth argument position.  That is, given a legal set of values for ?X, ?Y, and ?R, there is one and only one meaningful value for the frequency ?F [this is specified by the Cyc axiom (functionalInTheNthArg frequencyOfActionType 4)].")

;;; frequencyOfSignal
(isa frequencyOfSignal BinaryPredicate)
(arg1Isa frequencyOfSignal WavePropagation)
(arg2Isa frequencyOfSignal Frequency)
(comment frequencyOfSignal "(frequencyOfSignal WAVE FREQ) means that the WavePropagation event WAVE consists of waves that occur at intervals of FREQ.  FREQ is a measure of Frequency generally expressed as cycles per unit of time; frequency of electromagnetic radiation is standardly measured in Hertz.")

;;; friends
(isa friends CotemporalObjectsSlot)
(isa friends InterPersonalRelationSlot)
(isa friends SymmetricBinaryPredicate)
(isa friends IrreflexiveBinaryPredicate)
(not 
  (isa friends TransitiveBinaryPredicate))
(genlPreds friends likesAsFriend)
(genlPreds friends cotemporal)
(genlInverse friends friends)
(arg1Isa friends Animal)
(arg2Isa friends Animal)
(comment friends "(friends X Y) means X and Y are friends; typically they have a close relationship of reciprocal care, concern, respect, enjoyment, and mutual regard based on emotional (and/or ideological and intellectual) compatibility, shared interests, etc.
Note:  In the cases of assertions of two non-human animals being friends, there may be some anthropomorphism going on.")

;;; fromLocation
(isa fromLocation ActorSlot)
(isa fromLocation AsymmetricBinaryPredicate)
(isa fromLocation IrreflexiveBinaryPredicate)
(genlPreds fromLocation 
  (MeaningInSystemFn SENSUS-Information1997 "SOURCE-DESTINATION"))
(genlPreds fromLocation preActors)
(arg1Isa fromLocation Translocation)
(arg2Isa fromLocation PartiallyTangible)
(comment fromLocation "The predicate fromLocation is used to indicate the starting point of a particular movement.  (fromLocation MOVE LOC) means that LOC is where the objectMoving in the Movement-TranslationEvent MOVE is found at the beginning of MOVE and is where it begins this motion.  The objectMoving may or may not be Stationary at LOC.  If MOVE is a single-pathway translation (see Translation-SinglePath), then every objectMoving is found at LOC when MOVE starts.  If MOVE has multiple movers and multiple pathways (see Translation-MultiPath), then at least some of the objectMoving(s) can be found at LOC at the start of MOVE.  If MOVE is a flow (including rivers flowing, winds blowing, tornado, typhoon, clouds moving and even air filling your lungs when you take breath, see Translation-Flow), then at least some portion of the fluid objectMoving can be found at LOC at the start of MOVE.  See also pathway-Complete, pathConnects.")
(synonymousExternalConcept fromLocation SENSUS-Information1997 "SOURCE")

;;; fromOrientation
(isa fromOrientation Role)
(isa fromOrientation BinaryPredicate)
(arg1Isa fromOrientation Movement-Rotation)
(arg2Isa fromOrientation OrientationAttribute)
(comment fromOrientation "This predicate indicates, for the particular rotational motion ROT, the orientation that the objectMoving in that event has at the beginning of that motion.  (fromOrientation ROT ORIENT) means that when ROT begins, the object that moves in ROT has the position ORIENT, with respect to the current frame of reference.  For example, the object may have a HorizontalOrientation, VerticalOrientation, RightSideUp orientation, etc.  See also toOrientation, OrientationAttribute.")

;;; fromPossessor
(isa fromPossessor ActorSlot)
(isa fromPossessor AsymmetricBinaryPredicate)
(isa fromPossessor IrreflexiveBinaryPredicate)
(genlPreds fromPossessor preActors)
(arg1Isa fromPossessor LosingUserRights)
(arg2Isa fromPossessor Agent)
(comment fromPossessor "This predicate identifies an Agent who loses some right to use an object.  (fromPossessor LOSS AGENT) means that AGENT enjoys some UserRightsAttribute over the objectOfPossessionTransfer at the start of the LosingUserRights event LOSS, but no longer has that particular UserRightsAttribute after the LOSS ends.")

;;; fromState
(isa fromState BinaryPredicate)
(arg1Isa fromState ChangingDeviceState)
(arg2Isa fromState DeviceState)
(comment fromState "This predicate is used in connection with ChangingDeviceState, to identify the DeviceState that a device is in before the change.  (fromState EVENT DEVICE-STATE) means that immediately prior to EVENT (which is the device state-changing action), the device that is changed in EVENT has the state DEVICE-STATE (and during the EVENT the device changes from that to another state).  For example, prior to any X which is a TurningOnAnElectricalSwitch, the switch involved has (fromState X DeviceOff).")

;;; genFormat
(isa genFormat TernaryPredicate)
(arg1Isa genFormat Relationship)
(arg2Isa genFormat CycSystemString)
(arg3Isa genFormat CycSystemList)

;;; genMassNoun
(isa genMassNoun UnaryPredicate)
(arg1Isa genMassNoun ReifiableTerm)
(comment genMassNoun "This predicate is a flag to indicate when a given constant should be treated as a mass noun in English paraphrases.  See also prettyName.")

;;; genlAttributes
(not 
  (isa genlAttributes AsymmetricBinaryPredicate))
(not 
  (isa genlAttributes AntiSymmetricBinaryPredicate))
(not 
  (isa genlAttributes SymmetricBinaryPredicate))
(isa genlAttributes RuleMacroPredicate)
(isa genlAttributes IntangibleObjectPredicate)
(isa genlAttributes TransitiveBinaryPredicate)
(isa genlAttributes ReflexiveBinaryPredicate)
(arg1Isa genlAttributes AttributeValue)
(arg2Isa genlAttributes AttributeValue)
(comment genlAttributes "(genlAttributes S-ATT G-ATT) means that G-ATT is a more general attribute than S-ATT.  If we know, for some object, THING, (hasAttributes THING S-ATT), the system will be able to derive (hasAttributes THING G-ATT).  genlAttributes is transitive, so (genlAttributes A B) and (genlAttributes B C) lets the system derive (genlAttributes A C).  For example, if a certain portion of the atmosphere has the attribute Hazy, Cyc can conclude through its genlAttributes knowledge that there is only moderate Visibility there.")

;;; genlInverse
(not 
  (isa genlInverse IrreflexiveBinaryPredicate))
(not 
  (isa genlInverse ReflexiveBinaryPredicate))
(not 
  (isa genlInverse AsymmetricBinaryPredicate))
(not 
  (isa genlInverse AntiSymmetricBinaryPredicate))
(not 
  (isa genlInverse SymmetricBinaryPredicate))
(not 
  (isa genlInverse TransitiveBinaryPredicate))
(isa genlInverse RuleMacroPredicate)
(isa genlInverse BinaryPredicate)
(arg1Isa genlInverse BinaryPredicate)
(arg2Isa genlInverse BinaryPredicate)
(comment genlInverse "(genlInverse NARROW BROAD) means that binary predicate BROAD is a more general version of binary predicate NARROW, but with the arguments reversed. Thus  (NARROW ARG1 ARG2) implies (BROAD ARG2 ARG1).   



Note:  Notice that if two predicates are true inverses of each other, such as the pair parents and children, or the pair greater-than and less-than, then each member of the pair will be a genlInverse of the other.  Creating two predicates like that is considered poor KEing style, however, because in that case the second predicate in the pair adds no new `expressive power' over what the first already provides.  One might decide to write an end-user interface which acts as though both predicates exist, so that the user doesn't have to remember which is `the real one' in the system, but there is no gain at the representation language level to having both predicates.")

;;; genlMt
(isa genlMt TransitiveBinaryPredicate)
(isa genlMt ReflexiveBinaryPredicate)
(isa genlMt AntiSymmetricBinaryPredicate)
(isa genlMt DefaultMonotonicPredicate)
(isa genlMt MicrotheoryPredicate)
(isa genlMt RuleMacroPredicate)
(arg1Isa genlMt Microtheory)
(arg2Isa genlMt Microtheory)
(comment genlMt "(genlMt SMT GMT) means Microtheory SMT is a specialization of Microtheory GMT.   E.g., (genlMt ModernMilitaryMt OrganizationMt), which means that all the assertions which are true `content' in the general OrganizationMt context are also true in the more specialized ModernMilitaryMt context.  Another way to think of this is that SMT `has access to' the content of GMT.   Each proposition which is true in GMT is also true in SMT.  The genlMt relation is transitive; it induces a partial ordering on the set of all microtheories.   


Each assertion in the knowledge base must be explicitly stated to be true in at least one mt.  It will then (by inference) also be true in all the more specialized contexts.  If something is true in the `life in North America' mt, then it should by default be true in the `life in Canada' mt.  I.e., the microtheories are organized into a generalization/specialization lattice by the predicate genlMt, just as collections are organized into such a lattice by genls, and just as predicates are organized into such a lattice by genlPreds.  Just as a collection may have several incommensurable supersets, so too a microtheory may have several incommensurable genlMts.  Just as each and every collection must have some explicitly recorded superset (except for Thing), each and every mt must have some (expicitly recorded) more general mt (except for the BaseKB, which is the most general context, containing universal, timeless truths).  Just as a Cyc concept may have multiple incommensurable sets of which it is an element (via isa), so too a Cyc assertion may be declared to be true in a set of incommensurable mts.  For virtually all intents and purposes, genlMt assertions should go in BaseKB.")

;;; genlPreds
(isa genlPreds RuleMacroPredicate)
(isa genlPreds TransitiveBinaryPredicate)
(isa genlPreds ReflexiveBinaryPredicate)
(isa genlPreds AntiSymmetricBinaryPredicate)
(arg1Isa genlPreds Predicate)
(arg2Isa genlPreds Predicate)
(comment genlPreds "(genlPreds NARROW BROAD) means that predicate BROAD is a more general version of predicate NARROW; e.g., (genlPreds biologicalMother biologicalParents), (genlPreds greaterThan greaterThanOrEqualTo).   (genlPreds NARROW BROAD) is shorthand for the axiom schema (NARROW ARG1 ... ARGN) => (BROAD ARG1 ... ARGN).  See also genlInverse, which can handle cases where NARROW and BROAD are both binary but their order of arguments is reversed.  If the arity of NARROW differs from the arity of BROAD (or their order of arguments differs and they're not binary), then we just assert the whole appropriate axiom into the Cyc knowledge base; of course, such axioms are absent from the public release of the Upper Cyc Ontology.")

;;; genls
(not 
  (isa genls AsymmetricBinaryPredicate))
(not 
  (isa genls AntiSymmetricBinaryPredicate))
(not 
  (isa genls SymmetricBinaryPredicate))
(isa genls RuleMacroPredicate)
(isa genls TaxonomicSlotForCollections)
(isa genls DefaultMonotonicPredicate)
(isa genls ReflexiveBinaryPredicate)
(isa genls TransitiveBinaryPredicate)
(genlPreds genls subsetOf)
(arg1Isa genls Collection)
(arg2Isa genls Collection)
(comment genls "(genls COL SUPER) means that SUPER is one of the supersets of COL.  Both arguments must be elements of Collection.  Cyc knows that genls is transitive; that is, if one asserts (genls COL SUPER) and (genls SUPER BIGGER), Cyc will infer that (genls COL BIGGER). Therefore, in practice one only manually asserts a small fraction of the genls assertions --- the vast majority are inferred automatically by Cyc.")

;;; geographicalSubRegions
(isa geographicalSubRegions TransitiveBinaryPredicate)
(isa geographicalSubRegions SpatialPredicate)
(isa geographicalSubRegions ReflexiveBinaryPredicate)
(genlPreds geographicalSubRegions surfaceParts)
(genlInverse geographicalSubRegions inRegion)
(arg1Isa geographicalSubRegions GeographicalRegion)
(arg2Isa geographicalSubRegions GeographicalRegion)
(comment geographicalSubRegions "(geographicalSubRegions SUPER SUB) means that SUPER and SUB are both elements of GeographicalRegion, and the area SUB lies wholly within the region SUPER (see inRegion).  SUPER may or may not completely surround SUB (i.e., they may share an outer boundary, as do Texas and the USA).  See also surroundsHorizontally, bordersOn.")

;;; gerund
(isa gerund IntangibleObjectPredicate)
(isa gerund BinaryPredicate)
(arg1Isa gerund EnglishWord)
(arg2Isa gerund CharacterString)
(comment gerund "(gerund WORD STRING) means that STRING is the gerund form of WORD.  Also known as present participle or progressive. The regular gerund is formed from the infinitive verb form with an `ing' suffix. Verbs in the Cyc lexicon will have a gerund entry only if they are irregular. Regular forms are generated by the morphology component. Regular example: `singing'. Irregular example: `swimming'.")

;;; goals
(isa goals PropositionalAttitudeSlot)
(genlPreds goals desires)
(arg1Isa goals Agent)
(arg2Isa goals Goal)
(comment goals "(goals AGT G) means that the Agent AGT has the Goal G.  That is, G is one of their goals.  This implies (desires AGT G), but goals is stronger than desires, in that an agent will take action (or at least intend to take action, and plan accordingly) to make their goals true, while their desires may include things s/he merely wishes were true, but about which s/he has no intention of undertaking action.  Additionally, goals are generally about the future, whereas desires can be about the present, future, or even the past.  For further information about goals, see Goal.  Also see intends.")

;;; governedByAgreement
(isa governedByAgreement ActorSlot)
(genlPreds governedByAgreement preActors)
(arg1Isa governedByAgreement SocialOccurrence)
(arg2Isa governedByAgreement Agreement)
(comment governedByAgreement "The predicate governedByAgreement relates an event to an agreement which stipulates that certain conditions are to hold during that event.  (governedByAgreement EVT AGR) means that some aspects of the SocialOccurrence EVT are controlled by the Agreement AGR.  For example, a BuyingGroup may have SalesContracts with its suppliers that specify what prices may be charged for goods bought by members of the group during the agreement period.")

;;; government
(isa government BinaryPredicate)
(arg1Isa government GeopoliticalEntity)
(arg2Isa government RegionalGovernment)
(comment government "The predicate government identifies the political entity which has governing authority over a particular geopolitical region.  (government GEOPOL GOV) means that the RegionalGovernment GOV is the government of the GeopoliticalEntity GEOPOL.  That is, GOV claims to be the government of GEOPOL, is recognized as such at least informally, and effectively functions as such -- administering the internal and external affairs of GEOPOL --  whether or not GOV has formal diplomatic recognition.  Effectively functioning as a government includes having the power to settle disputes, collect revenue, and provide services.  Examples include the UnitedStatesFederalGovernment, the CityCouncilOfAustin (TX), and all of the entities returned by the Cyc function GovernmentFn (q.v.) -- e.g., (GovernmentFn Taiwan-RepublicOfChina), (GovernmentFn Russia).")

;;; governmentType
(isa governmentType IntangibleObjectPredicate)
(isa governmentType BinaryPredicate)
(arg1Isa governmentType GeopoliticalEntity)
(arg2Isa governmentType SystemOfGovernment)
(comment governmentType "The predicate governmentType indicates what kind of system of government a geopolitical entity has.  (governmentType REGION GOVSYSTEM) means that the government of the GeopoliticalEntity REGION is an element of the SystemOfGovernment type denoted by GOVSYSTEM.  For example, the governmentType of the UnitedStatesOfAmerica is a FederalRepublic and a RepresentativeDemocracy.")

;;; grandchildren
(isa grandchildren AsymmetricBinaryPredicate)
(not 
  (isa grandchildren TransitiveBinaryPredicate))
(genlPreds grandchildren relatives)
(genlPreds grandchildren positiveVestedInterest)
(arg1Isa grandchildren Animal)
(arg2Isa grandchildren Animal)
(comment grandchildren "(grandchildren PERSON1 PERSON2) means PERSON2 is the grandchild of PERSON1, howsoever the relationship is traced, biologically or through custom, rearing or adoption.")
(comment grandchildren "(grandchildren OLDER YOUNGER) means YOUNGER is the biological grandchild of OLDER.")
(comment grandchildren "(grandchildren OLDER YOUNGER) means YOUNGER is the grandchild of OLDER.")

;;; granuleOfStuff
(isa granuleOfStuff BinaryPredicate)
(arg1Isa granuleOfStuff ExistingStuffType)
(arg2Isa granuleOfStuff ExistingObjectType)
(arg2Genl granuleOfStuff PartiallyTangible)
(comment granuleOfStuff "(granuleOfStuff STUFFTYPE OBJTYPE) means 
that the collection STUFFTYPE has as its spatial granules (or granularity level) the 
collection OBJTYPE. If some collection is spatially stuff-like, that means that 
the instances of that collection can be divided spatially, and the physical portions 
remaining will still be instances of that collection; e.g., a physcial portion of 
some instance of SandMob is still sand (cf. ExistingStuffType). Such division cannot 
go on indefinitely in this way,
however: eventually, division of something spatially stuff-like will result in the 
object-like 'granules' out of which the stuff-like thing is composed. For instances, 
division of sand would eventually result in individual grains of sand, division of 
water would eventually get down to individual molecules of water, etc. At this level 
of division or below, the remaining physical portions do NOT count as instances of 
the stuff-type from which they were divided. This may seem counter-intuitive: isn't 
an individual molecule of water still water? Perhaps in some sense, but since the 
individual granules of a stuff typically do NOT have most of the properties that 
the groups made of the granules have (including the property of being stuff-like), 
we do not count the individual granules as instances of the collection of which 
they are granules.")

;;; granuleOfTime
(isa granuleOfTime BinaryPredicate)
(arg1Isa granuleOfTime TemporalStuffType)
(arg2Isa granuleOfTime TemporalObjectType)
(comment granuleOfTime "(granuleOfTime STUFFTYPE OBJTYPE) means 
that the collection STUFFTYPE has as its temporal granules (or granularity level) the 
collection OBJTYPE. If some collection is temporally stuff-like, that means that 
the instances of that collection can be divided temporally, and the temporal slices 
remaining will still be instances of that collection; e.g., a time slice of 
some instance of Person is still a person, and a temporal slice of a walking process
is still a walking process (cf. TemporalStuffType). Such division cannot 
always go on indefinitely, however: eventually, division of something temporally 
stuff-like will result in the 
temporally object-like 'granules' out of which the stuff-like thing is composed. 
For instances, 
division of a walking process would eventually result in individual steps. At this level 
of division or below, the remaining temporal slices do NOT count as instances of 
the temporal stuff-type from which they were divided. This may seem counter-intuitive,
but since the 
individual temporal granules of a temporal stuff typically do NOT have most of the 
properties that the groups made of the granules have (including the property of being 
temporally stuff-like),  we do not count the individual granules as instances of the 
collection of which they are granules. See also granuleOfStuff.")

;;; greaterThan
(isa greaterThan NumericComparison)
(isa greaterThan EvaluatableFunction)
(isa greaterThan TransitiveBinaryPredicate)
(isa greaterThan AsymmetricBinaryPredicate)
(arg1Isa greaterThan ScalarInterval)
(arg2Isa greaterThan ScalarInterval)
(comment greaterThan "The predicate greaterThan is Cyc's representation of the `greater than' ( > ) relation in mathematics, adapted to use with Cyc's scalars, which include quantitative intervals as well as point values.  Formally, there are two conditions under which (greaterThan SI-1 SI-2) is true, for two elements of ScalarInterval: (1) (followingValue SI-1 SI-2) is true, or (2) the minimum of SI-1 is greater than the maximum of SI-2.  Note that `A is less than B' is expressed in CycL as (greaterThan B A).")
(overlappingExternalConcept greaterThan SENSUS-Information1997 "GREATER-THAN")
(synonymousExternalConcept greaterThan SENSUS-Information1997 "GREATER-THAN-COMPARISON")

;;; greaterThanOrEqualTo
(isa greaterThanOrEqualTo NumericComparison)
(isa greaterThanOrEqualTo EvaluatableFunction)
(isa greaterThanOrEqualTo AntiSymmetricBinaryPredicate)
(isa greaterThanOrEqualTo ReflexiveBinaryPredicate)
(isa greaterThanOrEqualTo TransitiveBinaryPredicate)
(arg1Isa greaterThanOrEqualTo ScalarInterval)
(arg2Isa greaterThanOrEqualTo ScalarInterval)
(comment greaterThanOrEqualTo "The predicate greaterThanOrEqualTo is Cyc's representation of the `greater than or equal to' ( >= ) relation in mathematics, adapted to use with Cyc's scalars, which include quantitative intervals as well as point values.  (See ScalarInterval.) Formally, there are three conditions under which (greaterThanOrEqualTo SI-1 SI-2) is true, for two elements of ScalarInterval: (1) (equals SI-1 SI-2) is true; (2) (followingValue SI-1 SI-2) is true; or (3) the minimum of SI-1 is greater than or equal to the maximum of SI-2.  Note that `A is less than or equal to B' is expressed in CycL as (greaterThanOrEqualTo B A).")
(overlappingExternalConcept greaterThanOrEqualTo SENSUS-Information1997 "AT-LEAST")

;;; groundOf
(isa groundOf BinaryPredicate)
(isa groundOf SpatialPredicate)
(arg1Isa groundOf PartiallyTangible)
(arg2Isa groundOf Surface-Physical)
(comment groundOf "(groundOf OBJ GROUND) means that GROUND is the stationary surface on which OBJ is located and possibly supported.")

;;; groupCardinality
(isa groupCardinality IntervalBasedQuantitySlot)
(arg1Isa groupCardinality Group)
(arg2Isa groupCardinality NonNegativeInteger)
(comment groupCardinality "The predicate groupCardinality is used to indicate the total number of members there are in a particular group.  (groupCardinality GROUP INTEGER) means that the number of members in the Group GROUP is INTEGER.  For example, the groupCardinality of the SevenWondersOfTheAncientWorld is 7.  Cyc infers that the groupCardinality of any group that is a pair is 2, and that of a dozen is 12.")

;;; groupMemberType
(isa groupMemberType BinaryPredicate)
(arg1Isa groupMemberType Group)
(arg2Isa groupMemberType ObjectType)
(arg2Genl groupMemberType TemporalThing)
(comment groupMemberType "The predicate groupMemberType is used in characterizing the members of a particular group.  (groupMemberType GROUP TYPE) means that all of GROUP's members are elements of the collection TYPE.  For example, to state that the groupMembers of the Austin City Council are humans, one would write (groupMemberType AustinCityCouncil Person).  The members of a particular group might be characterized in more than one way; e.g., a Hispanic Business Council may have both the groupMemberType EthnicGroupOfHispanics and the groupMemberType BusinessPerson (provided that all of its members are Hispanic business people).")

;;; groupMembers
(isa groupMembers CotemporalObjectsSlot)
(genlPreds groupMembers cotemporal)
(genlPreds groupMembers structureMembers)
(arg1Isa groupMembers Group)
(arg2Isa groupMembers TemporalThing)
(comment groupMembers "The predicate groupMembers is used to relate a particular group to its individual members.  (groupMembers GROUP MEMBER) means that MEMBER is a member of GROUP.  For example,  the PyramidOfCheops is a member of the SevenWondersOfTheAncientWorld.  Or, to say that President Bill Clinton was a member of the Democratic Party throughout 1996, we would say: (holdsIn (YearFn 1996) (groupMembers DemocraticParty BillClinton)).")

;;; hairColor
(isa hairColor TangibleObjectPredicate)
(isa hairColor TernaryPredicate)
(arg1Isa hairColor Mammal)
(arg1Isa hairColor Animal)
(arg2Isa hairColor ExistingObjectType)
(arg2Genl hairColor AnimalBodyPart)
(arg3Isa hairColor Color)
(comment hairColor "(hairColor ANIMAL BODYPARTTYPE COLOR) means that the hair which the Animal ANIMAL has on its BODYPARTTYPE has the Color COLOR.  E.g., (hairColor SantaClaus Chin WhiteColor).  This is normally Mammal hair, but certain Invertebrates also have hair.")

;;; hangsAround
(isa hangsAround IrreflexiveBinaryPredicate)
(isa hangsAround AsymmetricBinaryPredicate)
(not 
  (isa hangsAround TransitiveBinaryPredicate))
(isa hangsAround ConnectionPredicate)
(isa hangsAround SpatialPredicate)
(genlPreds hangsAround hangsFrom)
(genlPreds hangsAround on-Physical)
(arg1Isa hangsAround SolidTangibleThing)
(arg2Isa hangsAround SolidTangibleThing)
(comment hangsAround "(hangsAround ?loop ?obj) means that ?loop is a semi-flexible loop, looped around a piece of ?obj.  ?loop is supported by gripping friction and/or ?loop's limited ability to elongate as it moves down on ?obj.  See also hangsFrom.")

;;; hangsFrom
(isa hangsFrom AsymmetricBinaryPredicate)
(isa hangsFrom TransitiveBinaryPredicate)
(isa hangsFrom ConnectionPredicate)
(isa hangsFrom SpatialPredicate)
(genlPreds hangsFrom supportedBy)
(arg1Isa hangsFrom SolidTangibleThing)
(arg2Isa hangsFrom SolidTangibleThing)
(comment hangsFrom "(hangsFrom ?obj1 ?obj2) means that ?obj1 is suspended from ?obj2, either directly touching it (like a weight attached to a line) or through some intermediary object (like a weight suspended from the ceiling).  All of the weight of ?obj1 is supportedBy ?obj2.  Most if not all of ?obj1 is below ?obj2. Certainly, the center of ?obj1 is below the connection point.  If pushed, ?obj1 will undergo Swinging without necessarily dislodging it.")

;;; hardnessOfObject
(isa hardnessOfObject TangibleObjectPredicate)
(isa hardnessOfObject IntervalBasedQuantitySlot)
(arg1Isa hardnessOfObject SolidTangibleThing)
(arg2Isa hardnessOfObject Hardness)
(comment hardnessOfObject "(hardnessOfObject OBJ DEGREE) means that the instance of SolidTangibleThing OBJ has this DEGREE of Hardness.")

;;; hasAsTributary
(isa hasAsTributary PhysicalPartPredicate)
(isa hasAsTributary AsymmetricBinaryPredicate)
(arg1Isa hasAsTributary River)
(arg2Isa hasAsTributary River)
(comment hasAsTributary "The predicate hasAsTributary is used to indicate the tributaries of a particular river.  (hasAsTributary BIGRIV SMALLRIV) means that BIGRIV has SMALLRIV as one of its tributaries.  SMALLRIV flows into BIGRIV.  Examples: the MississippiRiver has the WisconsinRiver, OhioRiver, ArkansasRiver, RedRiverOfTexas, and others as its tributaries.  Cf. formedByConfluenceOf.")

;;; hasAttributes
(isa hasAttributes BinaryPredicate)
(arg1Isa hasAttributes TemporalThing)
(arg2Isa hasAttributes AttributeValue)
(comment hasAttributes "A very general predicate. (hasAttributes THING ATT) means that THING has the attribute ATT.  See also AttributeType and AttributeValue.")
(overlappingExternalConcept hasAttributes SENSUS-Information1997 "PROPERTY-ASCRIPTION")

;;; hasBeliefSystems
(isa hasBeliefSystems BinaryPredicate)
(arg1Isa hasBeliefSystems IntelligentAgent)
(arg2Isa hasBeliefSystems BeliefSystem)
(comment hasBeliefSystems "(hasBeliefSystems AGT BSYS) means that the Agent AGT has the belief system BSYS.   E.g., (hasBeliefSystems BorisYeltsin RussianOrthodoxReligion).")

;;; hasClimateType
(isa hasClimateType BinaryPredicate)
(arg1Isa hasClimateType GeographicalRegion)
(arg2Isa hasClimateType ClimateCycleType)
(arg2Genl hasClimateType AnnualClimateCycle)
(comment hasClimateType "The predicate hasClimateType is used to specify the type of climate that occurs in a particular region.  (hasClimateType AREA CLIME) means that the climate in the GeographicalRegion AREA is of the ClimateCycleType CLIME; i.e., any individual annual cycle falls under the type CLIME.  For example, to describe the climate of Houston, we would say: (hasClimateType CityOfHoustonTX HumidSubtropicalClimateCycle).  See also ClimateCycleType, AnnualClimateCycle.")

;;; hasCommConvention
(isa hasCommConvention BinaryPredicate)
(arg1Isa hasCommConvention Agent)
(arg2Isa hasCommConvention CommunicationConvention)
(comment hasCommConvention "(hasCommConvention AGENT CONV) means that the agent AGENT knows the CommunicationConvention CONV and can use it to encode or decode information.")

;;; hasGender
(isa hasGender FunctionalSlot)
(arg1Isa hasGender BiologicalLivingObject)
(arg2Isa hasGender GenderOfLivingThing)
(comment hasGender "(hasGender BLO SEX) means that the BiologicalLivingObject BLO is of the gender SEX.")

;;; hasHabitat
(isa hasHabitat FunctionalSlot)
(arg1Isa hasHabitat Organism-Whole)
(arg2Isa hasHabitat EcologicalRegion)
(comment hasHabitat "The predicate hasHabitat is used to relate an organism to the region where it lives.  (hasHabitat ORG REGION) means that the organism ORG lives in the EcologicalRegion REGION. Typically, REGION will belong to one of the subsets of EcologicalRegion which represent specific biomes (e.g., Desert, CoralReef).")

;;; hasHeadquartersInCountry
(isa hasHeadquartersInCountry BinaryPredicate)
(arg1Isa hasHeadquartersInCountry Organization)
(arg2Isa hasHeadquartersInCountry Country)
(comment hasHeadquartersInCountry "The predicate hasHeadquartersInCountry identifies the country in which a particular organization has its headquarters.  (hasHeadquartersInCountry ORG COUNTRY) means that the Organization ORG has its world-wide headquarters and place of primary central control in the Country COUNTRY.")

;;; hasLevels
(isa hasLevels BinaryPredicate)
(isa hasLevels PartPredicate)
(genlPreds hasLevels physicalParts)
(arg1Isa hasLevels ConstructionArtifact)
(arg2Isa hasLevels LevelOfAConstruction)
(comment hasLevels "Levels which are part of this building")

;;; hasMembers
(isa hasMembers TaxonomicSlot)
(isa hasMembers SubProcessSlot)
(isa hasMembers CotemporalObjectsSlot)
(genlPreds hasMembers cotemporal)
(arg1Isa hasMembers Organization)
(arg2Isa hasMembers Agent)
(comment hasMembers "The predicate hasMembers relates a particular organization to the agents which are members of that organization.  This predicate indicates `generic' membership, although there may be specialized kinds of membership in the same organization.  (hasMembers ORG AGENT) means that AGENT is a member of the Organization ORG; typically, membership elegibility is determined by ORG and accepted with AGENT's voluntary affiliation.  For example, (hasMembers 'PeanutsBaseballTeam' CharlieBrown).   A member may be any Agent, including other Organizations (such as member countries in the United Nations).  The truth of an assertion made with hasMembers may be time-dependent and, if so, should be qualified appropriately.  E.g., (holdsIn (YearFn 1975) (hasMembers UnitedNationsOrganization Taiwan-RepublicOfChina)) is true, but (holdsIn (YearFn 1995) (hasMembers UnitedNationsOrganization Taiwan-RepublicOfChina)) is not.")

;;; hasOwnershipIn
(isa hasOwnershipIn BinaryPredicate)
(arg1Isa hasOwnershipIn Agent)
(arg2Isa hasOwnershipIn SomethingExisting)
(comment hasOwnershipIn "The predicate hasOwnershipIn relates a particular agent to some thing of which it has part or whole ownership.  (hasOwnershipIn AGENT SOMETHING) means that the Agent AGENT owns a part (or possibly the whole) of the thing SOMETHING.  For example, Ted Turner hasOwnershipIn Atlanta's Olympic Stadium. There may be other owners.  See also legalOwnerOf and ownsShare.")

;;; hasPatients
(not 
  (isa hasPatients IrreflexiveBinaryPredicate))
(not 
  (isa hasPatients ReflexiveBinaryPredicate))
(not 
  (isa hasPatients AsymmetricBinaryPredicate))
(not 
  (isa hasPatients AntiSymmetricBinaryPredicate))
(not 
  (isa hasPatients SymmetricBinaryPredicate))
(not 
  (isa hasPatients TransitiveBinaryPredicate))
(isa hasPatients BinaryPredicate)
(genlPreds hasPatients clients)
(arg1Isa hasPatients MedicalCareProvider)
(arg2Isa hasPatients Animal)
(comment hasPatients "The predicate hasPatients represents a relationship between a medical professional and a patient (including nonhuman animals).  (hasPatients MEDIC PATIENT) means that the MedicalCareProvider MEDIC is treating the recipient-of-care PATIENT.  PATIENT may be a human or a nonhuman animal.  An assertion using hasPatients holds only during the time that PATIENT has a condition that is being treated by MEDIC; it does not represent or imply a long term doctor-patient relationship.")

;;; hasPhysiologicalAttributes
(isa hasPhysiologicalAttributes BinaryPredicate)
(genlPreds hasPhysiologicalAttributes hasAttributes)
(arg1Isa hasPhysiologicalAttributes BiologicalLivingObject)
(arg2Isa hasPhysiologicalAttributes PhysiologicalAttribute)
(comment hasPhysiologicalAttributes "(hasPhysiologicalAttributes ?BLO  ?ATT) means that the BiologicalLivingObject ?BLO has the PhysiologicalAttribute ?ATT.  PhysiologicalAttributes are concerned with the physiological functions of a living animal, especially with the physical and/or (bio)chemical basis of those functions.  However, PhysiologicalAttributes need not be specified in scientific detail.  Many common PhysiologicalAttributes permit commonsense inference about further features of an individual having a certain physiological state or condition.  Note that many, perhaps most, assertions made with hasPhysiologicalAttributes will be time-dependent; e.g., an individual person is not SexuallyMature throughout his or her life, but only during a portion of it.  Thus, it is necessary to make these assertions only about the appropriate temporal subAbstrac; one way to do that is by using holdsIn; e.g., (holdsIn (YearFn 1820)  (hasPhysiologicalAttributes LudwigVanBeethoven Deaf)).")

;;; hasPortalToRegion
(isa hasPortalToRegion BinaryPredicate)
(genlPreds hasPortalToRegion cotemporal)
(arg1Isa hasPortalToRegion PartiallyTangible)
(arg2Isa hasPortalToRegion PartiallyTangible)
(comment hasPortalToRegion "ARG1 is connected to ARG2 through some type of portal (e.g. hasPortalToRegion(MyMasterBedroom MyMaterBathroom))")

;;; hasPositionIn
(isa hasPositionIn TernaryPredicate)
(arg1Isa hasPositionIn Person)
(arg2Isa hasPositionIn Organization)
(arg3Isa hasPositionIn PositionType)
(comment hasPositionIn "The predicate hasPositionIn is used to relate a particular person to his or her position in a particular organization.  (hasPositionIn PER ORG POS-TYPE) means that the Person PER works in the Organization ORG, in a position of type POS-TYPE.  POS-TYPE may or may not specifically indicate PER's occupational field or training; that is, one individual occupying a position of Manager may be a MarketingPerson, while another is an ElectricalEngineer.  In addition, POS-TYPE may or may not correspond to an official `Job Title' (cf. hasTitle) or be the primary occupation of PER.  Contrast, e.g., (hasPositionIn JerryLewis MarchOfDimes Spokesman) with (hasPositionIn DellaStreet PerryMasonsLawOffice Secretary).  Note that assertions using hasPositionIn should be properly time-constrained, for example with holdsIn.")

;;; hasPreparationAttributes
(isa hasPreparationAttributes BinaryPredicate)
(arg1Isa hasPreparationAttributes EdibleStuff)
(arg2Isa hasPreparationAttributes PreparationAttribute)
(comment hasPreparationAttributes "The predicate hasPreparationAttributes is used to indicate the way in which a particular food item was prepared.  (hasPreparationAttributes EDIBLE PREP) means the EdibleStuff EDIBLE has been processed so that it has the food PreparationAttribute PREP (e.g., Cooked, Roasted, Chilled -- or Raw).  For example, a piece of Toast hasPreparationAttributes Toasted; any quantity of Beer that is ready to drink hasPreparationAttributes Fermented.")

;;; hasRooms
(isa hasRooms PhysicalPartPredicate)
(isa hasRooms CotemporalObjectsSlot)
(genlPreds hasRooms cotemporal)
(genlPreds hasRooms internalParts)
(genlPreds hasRooms physicalParts)
(genlPreds hasRooms containsCavity)
(arg1Isa hasRooms ConstructionArtifact)
(arg2Isa hasRooms SpaceInAHOC)
(comment hasRooms "The predicate hasRooms allows us to say that a particular space is within a particular building.  (hasRooms BUILD ROOM) means that ROOM is a room or demarcated space which is physically contained within BUILD, a ConstructionArtifact.  ROOM is not removable from BUILD.  Spaces that can be identified in this way include lobbies, hallways, kitchens, closets, dining rooms, gymnasia, studios, stairwells, bedrooms, etc.")

;;; hasSameEntityAs
(isa hasSameEntityAs TransitiveBinaryPredicate)
(isa hasSameEntityAs ReflexiveBinaryPredicate)
(isa hasSameEntityAs SymmetricBinaryPredicate)
(isa hasSameEntityAs InterExistingObjectSlot)
(genlInverse hasSameEntityAs hasSameEntityAs)
(arg1Isa hasSameEntityAs SomethingExisting)
(arg2Isa hasSameEntityAs SomethingExisting)
(comment hasSameEntityAs "(hasSameEntityAs ?X ?Y) indicates that ?X and ?Y are both subabstractions of the same Entity.  The unique myEntity of ?X is the same as the unique myEntity of ?Y.  For instance, AlbertEinsteinAsAnAdult and AlbertEinsteinWhileAtPrinceton are in this relationship.")

;;; hasTitle
(isa hasTitle TernaryPredicate)
(arg1Isa hasTitle Person)
(arg2Isa hasTitle Title)
(arg3Isa hasTitle Organization)
(comment hasTitle "The predicate hasTitle relates a person to a title that s/he holds in an organization.  (hasTitle PER TITLE ORG) means that the Person PER has the Title TITLE in the Organization ORG.  Elements of Title are linguistic objects usually related to positions or other qualifications that a person has.  A person generally has a title only while actually holding the related position; e.g., (hasTitle Lenat PrincipalScientist-Title CycGroup) tells us Doug Lenat's title at the Cyc Project while under MCC's organizational structure.  A noteworthy class of exceptions is CourtesyTitle (q.v.), which include forms of address such as `Mr.' and `Ms.', plus some titles which by courtesy the holders retain for life, such as (in the U.S.) `President' and military rank designations (e.g., officers retired from the armed services).
Note: Elements of Title belong to the set LinguisticObject, while positions themselves are represented by persons (cf. PositionType).  Cf. hasPositionIn.")

;;; hasWorkers
(isa hasWorkers CotemporalObjectsSlot)
(isa hasWorkers AsymmetricBinaryPredicate)
(not 
  (isa hasWorkers TransitiveBinaryPredicate))
(genlPreds hasWorkers cotemporal)
(genlPreds hasWorkers worksWith)
(arg1Isa hasWorkers Agent)
(arg2Isa hasWorkers Agent)
(comment hasWorkers "The predicate hasWorkers relates an
organization or individual agent to those who work for it in any capacity.  (hasWorkers
AGENT1 AGENT2) says that the second agent regularly
 works for the first agent.  This includes employees,
managers, soldiers, sailors, certain prison inmates, volunteers,
apprentices, slaves, servants, sharecroppers, and indentured workers
(as well as other organizations, e.g. subcontractors).  The truth of
an assertion made with hasWorkers is time-relative; e.g.,
(hasWorkers Cycorp Dexter) is true when asserted for the period
(or any sub-period) from May 1989 to July 1994.  Note that `workers'
in the sense of hasWorkers need not be employees (e.g., they could
be volunteers); cf. employees.")

;;; headquarters
(isa headquarters BinaryPredicate)
(genlPreds headquarters physicalQuarters)
(arg1Isa headquarters Organization)
(arg2Isa headquarters ConstructionArtifact)
(comment headquarters "The predicate headquarters indicates the building(s) where a particular organization has its headquarters.  (headquarters ORG BUILDING) means that BUILDING is the buildings, rooms, offices, etc., which house the main administrative and decision-making functions of the Organization ORG.")

;;; hears
(isa hears TangibleObjectPredicate)
(isa hears PerceivingSlot)
(genlPreds hears perceives)
(arg1Isa hears PerceptualAgent)
(arg2Isa hears TemporalThing)
(comment hears "(hears AGT OBJ) means that the PerceptualAgent AGT percieves sounds emananating from or as the result of OBJ.  Events such as the shooting of a gun and tangible objects such as telephones are things which can emit audible sound and thus be perceived auditorily. ")

;;; heightOfObject
(isa heightOfObject PhysicalAmountSlot)
(arg1Isa heightOfObject PartiallyTangible)
(arg2Isa heightOfObject Distance)
(comment heightOfObject "(heightOfObject OBJ HEIGHT) means that the Distance from OBJ's top boundary to its bottom boundary is HEIGHT.  Note that top and bottom are determined by an object's default orientation, if it has one (as do, e.g., people, houses, cars, trees); otherwise, by the orientation of the object in its environment.")

;;; hingedTo
(not 
  (isa hingedTo TransitiveBinaryPredicate))
(isa hingedTo IrreflexiveBinaryPredicate)
(isa hingedTo ConnectionPredicate)
(isa hingedTo SpatialPredicate)
(isa hingedTo SymmetricBinaryPredicate)
(isa hingedTo ExtensionalRepresentationPredicate)
(isa hingedTo PhysicalFeatureDescribingPredicate)
(genlPreds hingedTo rotationallyConnectedTo)
(genlInverse hingedTo hingedTo)
(arg1Isa hingedTo SolidTangibleThing)
(arg2Isa hingedTo SolidTangibleThing)
(comment hingedTo "(hingedTo OBJ1 OBJ2) means that there is some hinge connecting OBJ1 and OBJ2 which allows limited rotational motion between them.  That is the only relative motion that can occur between them.  The hinged pivoting motion may be repeated.  hingedTo is noncommittal about whether the hinge is a distinct object or is part of OBJ1 or OBJ2.  Some edge of OBJ1 adjoins an edge of OBJ2.")

;;; holdsIn
(isa holdsIn BinaryPredicate)
(arg1Isa holdsIn TemporalThing)
(arg2Isa holdsIn CycFormula)
(comment holdsIn "(holdsIn ?X ?P) means that the proposition ?P is true during the temporal extent of TemporalThing ?X.  To represent `Nick owned Spot in 1992' we could create the appropriate cotemporal subabstractions of each, and assert (owns NickIn1992 SpotIn1992).  More tersely, we could use holdsIn and simply assert (holdsIn (YearFn 1992) (owns Nick Spot)), since holdsIn implicitly treats instances of SomethingExisting as their appropriate temporal subabstractions.  Alternatively, we could create a context (a microtheory) one of whose assumptions was a temporal one, limiting all axioms to holding during 1992, and then in that context we could simply assert (owns Nick Spot).  But it would be incorrect to assert (owns Nick Spot) in the BaseKB --- i.e., devoid of context --- since Nick as a baby and Nick as an old man didn't/won't own Spot.")

;;; hostOfEvent
(isa hostOfEvent AsymmetricBinaryPredicate)
(isa hostOfEvent ActorSlot)
(genlPreds hostOfEvent socialParticipants)
(arg1Isa hostOfEvent SocialGathering)
(arg2Isa hostOfEvent Agent)
(comment hostOfEvent "(hostOfEvent GATHERING AGENT) means that AGENT is a host and sponsor of the SocialGathering GATHERING.")

;;; hungerLevelOf
(isa hungerLevelOf BinaryPredicate)
(isa hungerLevelOf IntangibleObjectPredicate)
(arg1Isa hungerLevelOf LevelOfHunger)
(arg2Isa hungerLevelOf Animal)
(comment hungerLevelOf "The predicate hungerLevelOf is used to express how hungry an Animal is.  The first argument is a LevelOfHunger (q.v.):  for instance, Hungry, Starving, Stuffed.  The second argument is the Animal who feels hunger at this level.")
(comment hungerLevelOf "Just what it says")

;;; iboCreated
(isa iboCreated ActorSlot)
(genlPreds iboCreated ibtGenerated)
(genlPreds iboCreated informationDestination)
(genlPreds iboCreated outputsCreated)
(arg1Isa iboCreated IBOCreation)
(arg2Isa iboCreated InformationBearingObject)
(comment iboCreated "The predicate iboCreated is used to link a particular information bearing object (IBO) to the event in which it is created.  (iboCreated CREATION IBO) means that the InformationBearingObject IBO is created in the event CREATION.  For example, my copy of today's `Austin American-Statesman' morning paper was created during the previous night's paper-publishing event.")

;;; ibtGenerated
(isa ibtGenerated Role)
(isa ibtGenerated BinaryPredicate)
(arg1Isa ibtGenerated IBTGeneration)
(arg2Isa ibtGenerated InformationBearingThing)
(comment ibtGenerated "The predicate ibtGenerated is used to link a particular information bearing thing (IBT) to the event in which it is created.  (ibtGenerated GEN IBT) means that the InformationBearingThing IBT comes about, happens, or comes into existence in or as an immediate consequence of the event GEN.")

;;; ibtHasInfoAbout
(not 
  (isa ibtHasInfoAbout IrreflexiveBinaryPredicate))
(not 
  (isa ibtHasInfoAbout ReflexiveBinaryPredicate))
(not 
  (isa ibtHasInfoAbout AsymmetricBinaryPredicate))
(not 
  (isa ibtHasInfoAbout AntiSymmetricBinaryPredicate))
(not 
  (isa ibtHasInfoAbout SymmetricBinaryPredicate))
(not 
  (isa ibtHasInfoAbout TransitiveBinaryPredicate))
(isa ibtHasInfoAbout BinaryPredicate)
(arg1Isa ibtHasInfoAbout InformationBearingThing)
(arg2Isa ibtHasInfoAbout Thing)
(comment ibtHasInfoAbout "(ibtHasInfoAbout ?IBT ?THING) means that the InformationBearingThing ?IBT is generally 'about' ?THING -- which may be any Thing at all.  This is a very general notion of aboutness, which does not require that ?THING be explicitly named in ?IBT, nor that it be the main topic.")

;;; identicalInAttribute
(isa identicalInAttribute TernaryPredicate)
(arg1Isa identicalInAttribute Thing)
(arg2Isa identicalInAttribute Thing)
(arg3Isa identicalInAttribute AttributeType)
(comment identicalInAttribute "(identicalInAttribute THING1 THING2 ATTRIBUTE) means that the two things THING1 and THING2 have the same values of the AttributeType ATTRIBUTE.  Here 'the same' means complete identity or very close resemblance -- what this means, and what the standard of closeness or identity is, depends on the context, but identicalInAttribute and differentInAttribute cannot both be correctly asserted of the same two things.  See also resemblesInAttribute, and differentInAttribute.")

;;; illuminationLevel
(isa illuminationLevel IntervalBasedQuantitySlot)
(arg1Isa illuminationLevel PartiallyTangible)
(arg2Isa illuminationLevel LightIntensity)
(comment illuminationLevel "(illuminationLevel LOC DEGREE) indicates how brightly illuminated the location LOC is.  Higher values of DEGREE mean greater light intensity.")

;;; implies
(isa implies LogicalConnective)
(isa implies Relationship)
(arg1Isa implies CycFormula)
(arg2Isa implies CycFormula)
(comment implies "The predicate implies represents the material implication relation in Cyc.  implies is a logical connective taking two arguments, each of which must be an element of CycFormula.   (implies ANTE CONSEQ) means that whenever the formula ANTE is true, the formula CONSEQ must also be true; in other words, it is not the case that ANTE is true while CONSEQ is false.  Cyc assertions that begin with implies are used during inference, both in modus ponens and modus tollens.")

;;; in-Among
(isa in-Among CotemporalObjectsSlot)
(isa in-Among SpatialPredicate)
(genlPreds in-Among cotemporal)
(genlPreds in-Among objectFoundInLocation)
(arg1Isa in-Among PartiallyTangible)
(arg2Isa in-Among Group)
(comment in-Among "(in-Among OBJ GROUP) means that the tangible thing OBJ is physically located within the spatial cluster GROUP, which is composed of individuals.  OBJ may (but need not) be a member of GROUP.  OBJ is spatially distinct from any (other) member of GROUP; cf. spatiallyIntersects.  Examples: a bird in the branches of a tree; a zebra in its herd; a flea in a dog's pelt; a bee in a swarm of bees; a snake in the grass.")

;;; in-ContClosed
(isa in-ContClosed IrreflexiveBinaryPredicate)
(isa in-ContClosed CotemporalObjectsSlot)
(isa in-ContClosed AsymmetricBinaryPredicate)
(isa in-ContClosed TransitiveBinaryPredicate)
(isa in-ContClosed SpatialPredicate)
(genlPreds in-ContClosed cotemporal)
(genlPreds in-ContClosed in-ContGeneric)
(genlInverse in-ContClosed surroundsCompletely)
(arg1Isa in-ContClosed PartiallyTangible)
(arg2Isa in-ContClosed SolidTangibleThing)
(comment in-ContClosed "(in-ContClosed OBJ CONT) means that OBJ is contained in CONT and cannot leave CONT unless CONT opens or breaks, or OBJ is broken into pieces small enough to escape from CONT.  Examples: water in a bottle; CD in a CD case; food in a plastic zip bag; books in a backpack; spare tire in the trunk.  In order for a relation to count as in-ContClosed, the container must have a portal, even though that portal is closed while this relation holds.  So, for example, it is NOT proper to use in-ContClosed to say that an egg is in its eggshell, or that a brain is in its skull.  See also Portal.")

;;; in-ContFullOf
(isa in-ContFullOf IrreflexiveBinaryPredicate)
(not 
  (isa in-ContFullOf ReflexiveBinaryPredicate))
(isa in-ContFullOf CotemporalObjectsSlot)
(isa in-ContFullOf AsymmetricBinaryPredicate)
(isa in-ContFullOf TransitiveBinaryPredicate)
(isa in-ContFullOf SpatialPredicate)
(genlPreds in-ContFullOf cotemporal)
(genlPreds in-ContFullOf touchesDirectly)
(genlPreds in-ContFullOf in-ContGeneric)
(arg1Isa in-ContFullOf PartiallyTangible)
(arg2Isa in-ContFullOf SolidTangibleThing)
(comment in-ContFullOf "(in-ContFullOf STUFF CONT) means that STUFF is the substance that fills CONT.  STUFF is unique in that it is the only substance that `fills' CONT, even though other things may be with it in CONT (e.g., as in-ContGeneric).  Filling the container means that the inside surface of CONT touches the filling STUFF at virtually all points of CONT's inner surface, rather than touching whatever stuff CONT itself is immersed in and which CONT's outside surface touches (e.g., air).  The only thing which can override this touches (i.e., get alongside CONT's inside wall without being STUFF) would be some other object which is also in CONT (e.g., with in-ContGeneric).  In order to fill the container, STUFF must be Pourable or have a shape which conforms to the shape of CONT's cavity.  Cf. in-ContGeneric to cover cases of stuff which is in a container without filling it. ")

;;; in-ContGeneric
(isa in-ContGeneric SpatialPredicate)
(isa in-ContGeneric AsymmetricBinaryPredicate)
(isa in-ContGeneric TransitiveBinaryPredicate)
(isa in-ContGeneric CotemporalObjectsSlot)
(genlPreds in-ContGeneric objectFoundInLocation)
(genlPreds in-ContGeneric cotemporal)
(arg1Isa in-ContGeneric PartiallyTangible)
(arg2Isa in-ContGeneric SolidTangibleThing)
(comment in-ContGeneric "(in-ContGeneric OBJ CONT) means that OBJ is contained, confined, or held in CONT.  CONT may be open or closed. See also in-ContOpen, in-ContClosed, in-ContFullOf, inRegion.")
(synonymousExternalConcept in-ContGeneric SENSUS-Information1997 "CONTAINED")

;;; in-ContOpen
(isa in-ContOpen IrreflexiveBinaryPredicate)
(isa in-ContOpen CotemporalObjectsSlot)
(isa in-ContOpen AsymmetricBinaryPredicate)
(isa in-ContOpen TransitiveBinaryPredicate)
(isa in-ContOpen SpatialPredicate)
(genlPreds in-ContOpen cotemporal)
(genlPreds in-ContOpen in-ContGeneric)
(arg1Isa in-ContOpen PartiallyTangible)
(arg2Isa in-ContOpen SolidTangibleThing)
(comment in-ContOpen "(in-ContOpen OBJ CONT) means that OBJ is contained in CONT -- CONT confines or holds OBJ in -- but OBJ can be removed from CONT without having to open any portals in CONT.  In gravity fields, CONT is right-side-up, and if CONT is turned over, OBJ will fall out.  Cf. in-ContClosed.")

;;; in-Embedded
(not 
  (isa in-Embedded AsymmetricBinaryPredicate))
(not 
  (isa in-Embedded AntiSymmetricBinaryPredicate))
(not 
  (isa in-Embedded SymmetricBinaryPredicate))
(not 
  (isa in-Embedded TransitiveBinaryPredicate))
(isa in-Embedded CotemporalObjectsSlot)
(isa in-Embedded IrreflexiveBinaryPredicate)
(isa in-Embedded ConnectionPredicate)
(isa in-Embedded SpatialPredicate)
(genlPreds in-Embedded connectedTo)
(genlPreds in-Embedded touchesDirectly)
(genlPreds in-Embedded cotemporal)
(genlPreds in-Embedded objectFoundInLocation)
(arg1Isa in-Embedded SolidTangibleThing)
(arg2Isa in-Embedded SolidTangibleThing)
(comment in-Embedded "(in-Embedded OBJ1 OBJ2) means that some portion of OBJ1 is embedded in OBJ2 at least semi-permanently.  OBJ1 is thus connectedTo OBJ2.  The remaining portion of OBJ1 is not embedded in OBJ2. In many cases, an in-Embedded relationship comes about during the formation of OBJ1 or OBJ2.  Examples: grass in the ground, hair in the scalp, or eyes in sockets.")

;;; in-Floating
(isa in-Floating AsymmetricBinaryPredicate)
(isa in-Floating AntiTransitiveBinaryPredicate)
(isa in-Floating SpatialPredicate)
(genlPreds in-Floating in-ImmersedPartly)
(genlPreds in-Floating above-Touching)
(arg1Isa in-Floating SolidTangibleThing)
(arg2Isa in-Floating LiquidTangibleThing)
(comment in-Floating "(in-Floating OBJ LIQUID) means that OBJ is floating in LIQUID.  Thus, OBJ is buoyant and is in-ImmersedPartly in LIQUID.")

;;; in-Held
(not 
  (isa in-Held TransitiveBinaryPredicate))
(isa in-Held CotemporalObjectsSlot)
(isa in-Held AntiSymmetricBinaryPredicate)
(isa in-Held SpatialPredicate)
(genlPreds in-Held cotemporal)
(genlPreds in-Held in-ContGeneric)
(genlPreds in-Held touches)
(arg1Isa in-Held SolidTangibleThing)
(arg2Isa in-Held SolidTangibleThing)
(comment in-Held "(in-Held OBJ HOLDER) means that OBJ is being held or restrained by HOLDER, which is applying pressure to OBJ.  HOLDER touches OBJ.  HOLDER may be either a deviceUsed or an anatomicalPartTypeAffected in an instance of HoldingAnObject; OBJ would be the objectActedOn by that holding.")

;;; in-ImmersedFully
(isa in-ImmersedFully IrreflexiveBinaryPredicate)
(isa in-ImmersedFully SpatialPredicate)
(isa in-ImmersedFully AsymmetricBinaryPredicate)
(isa in-ImmersedFully AntiTransitiveBinaryPredicate)
(isa in-ImmersedFully CotemporalObjectsSlot)
(not 
  (isa in-ImmersedFully TransitiveBinaryPredicate))
(genlPreds in-ImmersedFully objectFoundInLocation)
(genlPreds in-ImmersedFully in-ImmersedGeneric)
(genlPreds in-ImmersedFully cotemporal)
(genlInverse in-ImmersedFully surroundsCompletely)
(arg1Isa in-ImmersedFully PartiallyTangible)
(arg2Isa in-ImmersedFully PartiallyTangible)
(comment in-ImmersedFully "(in-ImmersedFully OBJ FLUID) means that FLUID is the unique fluid in which OBJ is completely immersed.  Thus, as a default inference, every outside surface region of OBJ touches FLUID.  E.g., (live) fish are fully immersed in water, and people are usually immersed in air (even though the bottoms of their feet touch the ground and not the air).  Examples like air bubbles in water or mercury globules immersed in air suggest that the arg1Isa should be kept general, i.e., PartiallyTangible rather than SolidTangibleThing.")

;;; in-ImmersedGeneric
(isa in-ImmersedGeneric AntiTransitiveBinaryPredicate)
(isa in-ImmersedGeneric AsymmetricBinaryPredicate)
(isa in-ImmersedGeneric SpatialPredicate)
(genlPreds in-ImmersedGeneric touches)
(genlInverse in-ImmersedGeneric surroundsHorizontally)
(arg1Isa in-ImmersedGeneric PartiallyTangible)
(arg2Isa in-ImmersedGeneric FluidTangibleThing)
(comment in-ImmersedGeneric "(in-ImmersedGeneric OBJ FLUID) means that OBJ is immersed in FLUID.  in-ImmersedGeneric is noncomittal as to whether OBJ is completely or partially immersed.  But FLUID touches OBJ and conforms to a significant portion of the surface of OBJ.   See also in-ImmersedFully, in-ImmersedPartly.")

;;; in-ImmersedPartly
(isa in-ImmersedPartly AsymmetricBinaryPredicate)
(isa in-ImmersedPartly IrreflexiveBinaryPredicate)
(isa in-ImmersedPartly AntiTransitiveBinaryPredicate)
(isa in-ImmersedPartly SpatialPredicate)
(genlPreds in-ImmersedPartly in-ImmersedGeneric)
(arg1Isa in-ImmersedPartly PartiallyTangible)
(arg2Isa in-ImmersedPartly FluidTangibleThing)
(comment in-ImmersedPartly "(in-ImmersedPartly OBJ FLUID) means that a portion of OBJ is immersed in FLUID, but OBJ is not completely surrounded by FLUID.  In gravitational fields, in-ImmersedPartly entails surroundsHorizontally, because in that context fluid surfaces are of generally HorizontalOrientation.")

;;; in-Lodged
(isa in-Lodged AsymmetricBinaryPredicate)

;;; in-Permeates
(isa in-Permeates IrreflexiveBinaryPredicate)
(genlPreds in-Permeates objectFoundInLocation)
(arg1Isa in-Permeates LiquidTangibleThing)
(arg2Isa in-Permeates SolidTangibleThing)
(comment in-Permeates "(in-Permeates LIQUID SOLID)
means that LIQUID permeates SOLID.  LIQUID must be separable from SOLID
by physical, not chemical means.  If LIQUID is not a constituent (see
constituents) of SOLID, then SOLID is porous (see Porous).
Exemplars include water permeating a wet sponge, oil soaking a sponge,
or water in soil.  Negative exemplars include vapor suspended in air
(see, e.g. suspendingFluid or solute) .  Other negative exemplars
include liquids which undergoe a chemical change and combine with some
other substance, e.g. water which becomes a chemical part of plant
material in photosynthesis.")

;;; in-Snugly
(not 
  (isa in-Snugly AntiTransitiveBinaryPredicate))
(not 
  (isa in-Snugly TransitiveBinaryPredicate))
(not 
  (isa in-Snugly SymmetricBinaryPredicate))
(not 
  (isa in-Snugly AsymmetricBinaryPredicate))
(isa in-Snugly CotemporalObjectsSlot)
(isa in-Snugly SpatialPredicate)
(genlPreds in-Snugly cotemporal)
(genlPreds in-Snugly touches)
(genlPreds in-Snugly in-ContGeneric)
(arg1Isa in-Snugly SolidTangibleThing)
(arg2Isa in-Snugly SolidTangibleThing)
(comment in-Snugly "The BinaryPredicate (in-Snugly ?INNER ?OUTER) means that ?INNER is in-ContGeneric ?OUTER, that ?INNER touches ?OUTER, and that a FrictionProcess would be necessary for a RemovingSomething in which ?INNER is the objectMoving and ?OUTER is the fromLocation.")

;;; in-Spiked
(not 
  (isa in-Spiked TransitiveBinaryPredicate))
(isa in-Spiked AsymmetricBinaryPredicate)
(isa in-Spiked ConnectionPredicate)
(isa in-Spiked SpatialPredicate)
(genlPreds in-Spiked in-Lodged)
(genlPreds in-Spiked in-Embedded)
(genlPreds in-Spiked connectedTo-Rigidly)
(arg1Isa in-Spiked SolidTangibleThing)
(arg2Isa in-Spiked SolidTangibleThing)
(comment in-Spiked "(in-Spiked OBJ REG) means that an object, OBJ, is spiked into another object, REG, in the way that nails, push pins, needles, and other pointed objects stick into other objects.  Thus, OBJ must be LongAndThin and must be harder than REG.  Typically, the rigid connection between REG and OBJ can support forces substantially greater than the weight of OBJ.")

;;; inFrontOf-Directly
(not 
  (isa inFrontOf-Directly AsymmetricBinaryPredicate))
(not 
  (isa inFrontOf-Directly AntiSymmetricBinaryPredicate))
(not 
  (isa inFrontOf-Directly SymmetricBinaryPredicate))
(not 
  (isa inFrontOf-Directly TransitiveBinaryPredicate))
(isa inFrontOf-Directly IrreflexiveBinaryPredicate)
(isa inFrontOf-Directly SpatialPredicate)
(genlPreds inFrontOf-Directly inFrontOf-Generally)
(arg1Isa inFrontOf-Directly PartiallyTangible)
(arg2Isa inFrontOf-Directly PartiallyTangible)
(comment inFrontOf-Directly "(inFrontOf-Directly FORE AFT) means that FORE is directly in front of AFT.  More precisely, it implies both (inFrontOf-Generally FORE AFT) and that there is at least one line parallel to the forward pointing axis of AFT that intersects both FORE and AFT.")

;;; inFrontOf-Generally
(not 
  (isa inFrontOf-Generally AsymmetricBinaryPredicate))
(not 
  (isa inFrontOf-Generally AntiSymmetricBinaryPredicate))
(not 
  (isa inFrontOf-Generally SymmetricBinaryPredicate))
(not 
  (isa inFrontOf-Generally TransitiveBinaryPredicate))
(isa inFrontOf-Generally IrreflexiveBinaryPredicate)
(isa inFrontOf-Generally SpatialPredicate)
(genlPreds inFrontOf-Generally near)
(arg1Isa inFrontOf-Generally PartiallyTangible)
(arg2Isa inFrontOf-Generally PartiallyTangible)
(comment inFrontOf-Generally "(inFrontOf-Generally FORE AFT) means that the tangible object FORE is in front of the tangible object AFT.  More precisely, the intrinsic back-to-front axis of AFT is within 45 degrees of some line intersecting both FORE and AFT.")
(synonymousExternalConcept inFrontOf-Generally SENSUS-Information1997 "FACING")

;;; inPlane
(isa inPlane BinaryPredicate)
(isa inPlane SpatialPredicate)
(genlPreds inPlane spatiallyIntersects)
(arg1Isa inPlane SpatialThing)
(arg2Isa inPlane Surface-Abstract)
(comment inPlane "(inPlane OBJ SURFACE) means that OBJ spatially intersects with the FlatSurface SURFACE.")

;;; inRegion
(isa inRegion AntiSymmetricBinaryPredicate)
(isa inRegion TransitiveBinaryPredicate)
(isa inRegion ExtensionalRepresentationPredicate)
(arg1Isa inRegion SpatialThing)
(arg2Isa inRegion SpatialThing)
(comment inRegion "(inRegion OBJECT AREA) means that all points in OBJECT are found within the boundaries of AREA, which is another spatial thing (of which OBJECT may or may not be a part).  OBJECT is totally included spatially within the region demarcated by AREA.  







Note, regarding whether OBJECT is a part of AREA: Two subordinate, but contrasting, predicates are physicalDecompositions (a genlInverse of inRegion) and objectFoundInLocation (a genlPreds of inRegion).  (1) OBJECT is a physicalDecompositions of AREA if the set of points occupied by OBJECT is a subset of the points actually occupied by AREA; i.e., OBJECT is spatially a part of AREA.  (2) On the other hand, if OBJECT is merely present in AREA, but is not a part of it, then objectFoundInLocation applies.")

;;; includedItems
(isa includedItems PartPredicate)
(isa includedItems AsymmetricBinaryPredicate)
(isa includedItems AntiTransitiveBinaryPredicate)
(genlPreds includedItems parts)
(arg1Isa includedItems FormalProduct)
(arg2Isa includedItems Individual)
(comment includedItems "The predicate includedItems is used to identify the peripheral items that come with a particular packaged product.  (includedItems FORM ITEM) means that the Individual ITEM is one of the things that are included in the FormalProduct FORM, along with its mainProduct; but ITEM is not the main product itself.  ITEM can be an accessory, owner's manual, warranty agreement, or included service.  ITEM is something that is a regular part of the package.  ITEM does NOT refer to free samples or extras thrown in--for that, see includesWithProductType.")

;;; includesWithProductType
(isa includesWithProductType TernaryPredicate)
(arg1Isa includesWithProductType CommercialOrganization)
(arg2Isa includesWithProductType ProductType)
(arg2Genl includesWithProductType Product)
(arg3Isa includesWithProductType ProductType)
(arg3Genl includesWithProductType Product)
(comment includesWithProductType "The predicate includesWithProductType is used to specify `extras' that a particular seller includes with a specific product.  (includesWithProductType SELLER MAINTYPE EXTRATYPE) means that the CommercialOrganization SELLER provides an item of the ProductType EXTRATYPE free of charge to its customers who purchase a product of ProductType MAINTYPE.  For example, to say that Ernie's Garage provides towing free with a car repair, we could say (includesWithProductType ErniesGarage CarRepairing TowingAnAutomobile).")

;;; income
(isa income IntervalBasedQuantitySlot)
(arg1Isa income Agent)
(arg2Isa income MonetaryFlowRate)
(comment income "The predicate income is used to state the income of a person or other agent.  (income AGT RATE) means that the Agent AGT has the income RATE, where RATE is a MonetaryFlowRate, e.g., a number of DollarsPerHour or DollarsPerYear.  See MonetaryFlowRate.")

;;; infectingOrganism
(isa infectingOrganism IrreflexiveBinaryPredicate)
(isa infectingOrganism AsymmetricBinaryPredicate)
(isa infectingOrganism ActorSlot)
(genlPreds infectingOrganism preActors)
(arg1Isa infectingOrganism Infection)
(arg2Isa infectingOrganism Organism-Whole)
(comment infectingOrganism "This predicate relates a particular instance of Infection to an organism which causes that infection.  (infectingOrganism INFECT ORG) means that the organism ORG is one of the causes of the infection INFECT.  For example, if INFECT is a case of  StrepThroat, then ORG is an instance of Streptococcus.  I.e., 
(forAll ?x
  (forAll ?y
     (implies 
         (and
             (isa ?x StrepThroat) 
             (infectingOrganism ?x ?y))
         (isa ?y Streptococcus))))
")

;;; infectionHost
(isa infectionHost ActorSlot)
(isa infectionHost AsymmetricBinaryPredicate)
(isa infectionHost AntiTransitiveBinaryPredicate)
(isa infectionHost IrreflexiveBinaryPredicate)
(genlPreds infectionHost bodilyDoer)
(arg1Isa infectionHost Infection)
(arg2Isa infectionHost Organism-Whole)
(comment infectionHost "This predicate relates a particular case of Infection to the organism it is infecting.  (infectionHost INF ORG) means that INF is an Infection in which the host organism is ORG.")

;;; infinitive
(isa infinitive IntangibleObjectPredicate)
(isa infinitive BinaryPredicate)
(arg1Isa infinitive EnglishWord)
(arg2Isa infinitive CharacterString)
(comment infinitive "(infinitive WORD STRING) means that STRING is the infinitive verb form of WORD.  For example, `to hit' is the infinitive form of Hit-TheWord.")

;;; infoAdded
(isa infoAdded BinaryPredicate)
(isa infoAdded Role)
(genlPreds infoAdded infoTransferred)
(arg1Isa infoAdded InformationUpdating)
(arg2Isa infoAdded AbstractInformation)
(comment infoAdded "(infoAdded CHANGE INFO) means that in the InformationUpdating action, CHANGE, INFO was added to the IBO (InformationBearingObject) acted on.")

;;; infoContributed
(isa infoContributed TernaryPredicate)
(arg1Isa infoContributed MultiDirectionalCommunication)
(arg2Isa infoContributed Agent)
(arg3Isa infoContributed PropositionalInformationThing)
(comment infoContributed "The predicate infoContributed is used to identify which agent said what in a particular complex communication activity.  (infoContributed MULTICOM AGENT INFO) means that in the MultiDirectionalCommunication event MULTICOM, AGENT does something that expresses INFO.  Note that speaking, writing, or otherwise signalling are all viable methods of `saying'.  The (unspecified) thing that AGENT does in MULTICOM generates the message, and INFO is a propositional item expressing the content of AGENT's message.  See also PropositionalInformationThing and IBTGeneration.")

;;; infoRemoved
(isa infoRemoved BinaryPredicate)
(isa infoRemoved Role)
(genlPreds infoRemoved infoTransferred)
(arg1Isa infoRemoved InformationUpdating)
(arg2Isa infoRemoved AbstractInformation)
(comment infoRemoved "(infoRemoved CHANGE INFO) means that in the InformationUpdating action, CHANGE, INFO was removed from the IBO (InformationBearingObject) acted on.")

;;; infoTransferred
(isa infoTransferred Role)
(isa infoTransferred BinaryPredicate)
(arg1Isa infoTransferred InformationTransferEvent)
(arg2Isa infoTransferred AbstractInformation)
(comment infoTransferred "The predicate infoTransferred is used to indicate the propositional content of a particular transferral of information.  (infoTransferred TRANSFER INFO) means that INFO is information that is transferred due to the InformationTransferEvent TRANSFER.  INFO originates from some agent or IBT (i.e., element of InformationBearingThing).  After TRANSFER, INFO is contained in another IBT or agent; INFO may persist in the source as well.  For example, when I read the front page of the newspaper, some information about current world events is transferred from the newspaper to me.   See also informationOrigin, informationDestination.")
(synonymousExternalConcept infoTransferred SENSUS-Information1997 "SAYING")

;;; informStatement
(isa informStatement MicrotheoryPredicate)
(isa informStatement BinaryPredicate)
(genlPreds informStatement ist-Information)
(arg1Isa informStatement PropositionalInformationThing)
(arg2Isa informStatement CycFormula)
(comment informStatement "(informStatement ?MT ?PROP) means that the CycFormula ?PROP is true in the information context ?MT.  (An information context here usually means a particular database application of Cyc.  In these applications, ?PROP is communicated to Cyc directly as an explicit informStatement, and is not inferred to be true.)  Note that (informStatement ?mt ?clpe) implies that (ist ?mt ?clpe).")

;;; informationDestination
(isa informationDestination Role)
(isa informationDestination BinaryPredicate)
(arg1Isa informationDestination InformationTransferEvent)
(arg2Isa informationDestination TemporalThing)
(comment informationDestination "The predicate informationDestination is used to indicate where information is transferred in a particular information transfer event.  (informationDestination TRANSFER DEST) means that in the InformationTransferEvent TRANSFER, the information being transferred is sent, given to, or impressed upon DEST.  DEST is an IBT (i.e., an element of InformationBearingThing) or an agent.  Note that if DEST is an agent, you should probably use the more specific actor slot, recipientOfInfo.  Note also that if DEST existed before the transfer, it may have already contained the information.")

;;; informationOrigin
(isa informationOrigin Role)
(isa informationOrigin BinaryPredicate)
(arg1Isa informationOrigin InformationTransferEvent)
(arg2Isa informationOrigin TemporalThing)
(comment informationOrigin "The predicate informationOrigin is used to indicate the source of information for a particular communication event.  (informationOrigin TRANSFER ORIGIN) means that in the InformationTransferEvent TRANSFER, the information being transferred is coming from ORIGIN.  ORIGIN is either an IBT (i.e., element of InformationBearingThing) or an agent.  Note that if ORIGIN still exists past the transfer, it presumably still contains the information.")

;;; ingredients
(isa ingredients CompositionPredicate)
(isa ingredients CotemporalObjectsSlot)
(isa ingredients TransitiveBinaryPredicate)
(genlPreds ingredients cotemporal)
(genlPreds ingredients physicalDecompositions)
(arg1Isa ingredients Artifact)
(arg2Isa ingredients PartiallyTangible)
(comment ingredients "The predicate ingredients is used to indicate a particular input used to make a particular artifact.  (ingredients ART INGR) means that the PartiallyTangible thing INGR was one of the inputs to the creation of the Artifact ART, and INGR is one of ART's physicalDecompositions.  Note that ingredients applies only to those inputs which retain their identity in the creation process and which are incorporated into the resulting Artifact.  For example, a meatball can be considered an ingredient of a plate of spaghetti, and a portion of ground beef can be considered an ingredient of the meatball.  On the other hand, we would not say that an egg is an ingredient of the meatball, even though it was an input to the creation process, because its identity was not preserved.")

;;; inhabitantTypes
(isa inhabitantTypes IntensionalRepresentationPredicate)
(isa inhabitantTypes BinaryPredicate)
(arg1Isa inhabitantTypes GeographicalRegion)
(arg2Isa inhabitantTypes ExistingObjectType)
(arg2Genl inhabitantTypes Person)
(comment inhabitantTypes "The predicate inhabitantTypes is used to indicate the type(s) of people who live in a region.  (inhabitantTypes REGION TYPE) means that TYPE is (one of) the (primary) type(s) of people who live in the GeographicalRegion REGION.  For example, to say that Chileans are among the primary groups of inhabitants of Chile, we assert (inhabitantTypes Chile ChileanPerson).  TYPE may be based on ethnicity, nationality, age, economics--in short, any demographic class.  E.g., (inhabitantTypes UnitedStatesOfAmerica AdultMiddleClassAmerican), (inhabitantTypes UnitedStatesOfAmerica WorkingAdultAmericanWoman), (inhabitantTypes UnitedStatesOfAmerica MexicanImmigrantToUSA).")

;;; inputs
(isa inputs IrreflexiveBinaryPredicate)
(isa inputs ActorSlot)
(isa inputs AsymmetricBinaryPredicate)
(genlPreds inputs preActors)
(genlPreds inputs startsAfterStartingOf)
(genlPreds inputs objectActedOn)
(arg1Isa inputs CreationOrDestructionEvent)
(arg2Isa inputs SomethingExisting)
(comment inputs "The predicate inputs relates a particular event to things which are `inputs', i.e., materials used in that event and somehow altered by it.  (inputs EVENT OBJECT) means that OBJECT is an input to the CreationOrDestructionEvent EVENT.  During and due to the event, OBJECT is either destroyed or incorporated into a new entity.  For example, the pigments used to paint the Mona Lisa were inputs to Leonardo's painting process; however, his brushes were not inputs, even though they were changed a little by it.  In general, in instances of Manufacturing, materials or objects are inputs if they find their way into the product manufactured, or if they are destroyed -- such as the coke used in manufacturing steel -- as part of that manufacturing process.  
Note: One should use the specialized predicates inputsDestroyed or inputsCommitted whenever they are appropriate, rather than the more general predicate inputs.")

;;; inputsCommitted
(isa inputsCommitted AsymmetricBinaryPredicate)
(isa inputsCommitted ActorSlot)
(genlPreds inputsCommitted commitsForFutureUses)
(genlPreds inputsCommitted inputs)
(genlPreds inputsCommitted postActors)
(arg1Isa inputsCommitted CreationEvent)
(arg2Isa inputsCommitted SomethingExisting)
(comment inputsCommitted "The predicate inputsCommitted is used when some inputs to a particular event is incorporated into some outputs of that event, but remains recognizable rather than being destroyed.  (inputsCommitted EVENT OBJECT) means that OBJECT exists before EVENT and continues to exist afterwards, and as a result of EVENT, OBJECT becomes incorporated into something created during EVENT.  For example, bricks that are used to build a house continue to exist as bricks once the house has been built.  (See also outputsCreated.)
Note: there is a grey area between inputsCommitted and inputsDestroyed; the less possible it is to take apart the relevant outputs of EVENT and get OBJECT back as an independent thing, the more likely it is that the relationship between EVENT and OBJECT should be inputsDestroyed, rather than inputsCommitted.")

;;; inputsDestroyed
(isa inputsDestroyed IrreflexiveBinaryPredicate)
(isa inputsDestroyed ActorSlot)
(isa inputsDestroyed AsymmetricBinaryPredicate)
(isa inputsDestroyed AntiTransitiveBinaryPredicate)
(genlPreds inputsDestroyed inputs)
(genlPreds inputsDestroyed endsAfterEndingOf)
(genlInverse inputsDestroyed endsDuring)
(arg1Isa inputsDestroyed DestructionEvent)
(arg2Isa inputsDestroyed SomethingExisting)
(comment inputsDestroyed "The predicate inputsDestroyed is used to relate a particular event to the items which are destroyed by it.  (inputsDestroyed EVENT OBJECT) means that OBJECT exists before EVENT, is affected by EVENT, and due to that involvement, ends its existence as an Entity sometime during EVENT.  OBJECT may or may not be a deliberateActors in EVENT.")

;;; insIsJobOf
(isa insIsJobOf BinaryPredicate)
(isa insIsJobOf TypePredicate)
(arg1Isa insIsJobOf ScriptType)
(arg2Isa insIsJobOf Professional)
(comment insIsJobOf "The predicate insIsJobOf indicates a type of work done by a particular individual.  (insIsJobOf SCRIPT-TYPE PER) means that the person PER performs instances of SCRIPT-TYPE as part of his or her job.  E.g., KeithRichards performs instances of WritingMusic as part of his work; Goolsbey performs instances of ProgrammingAComputer in his job at Cycorp; a SecurityGuard performs instances of ProtectingSomething.  Note that assertions using insIsJobOf are true for some specific period of time, which may be indicated with holdsIn.")

;;; instrument-Container
(isa instrument-Container ActorSlot)
(genlPreds instrument-Container instrument-Generic)
(arg1Isa instrument-Container Event)
(arg2Isa instrument-Container SolidTangibleThing)
(comment instrument-Container "(instrument-Container ?EVENT ?CONT) means that the objectActedOn in ?EVENT is contained in (in-ContGeneric) ?CONT during ?EVENT, and that ?CONT facilitates ?EVENT being accomplished.")

;;; instrument-Generic
(isa instrument-Generic ActorSlot)
(genlPreds instrument-Generic actors)
(arg1Isa instrument-Generic Event)
(arg2Isa instrument-Generic PartiallyTangible)
(comment instrument-Generic "The predicate instrument-Generic is used to link a particular event to any of the objects which play an instrumental role in it.  (instrument-Generic EVENT OBJECT) means that OBJECT plays an intermediate causal role in EVENT, facilitating its occurrence and serving some purpose of some Agent.  This can happen in at least two ways: a. the `doer' of EVENT acts on OBJECT, which in turn acts on something else (as when someone uses a hammer to pound in a nail) or b. the `doer' of EVENT acts on something, making it possible for OBJECT to act on that thing (as when someone puts wet clothes out in the sun to dry).  Typically, an instrument-Generic is not significantly altered by playing that role in an event.  deviceUsed is an important specialization predicate of instrument-Generic.")
(overlappingExternalConcept instrument-Generic SENSUS-Information1997 "INSTRUMENTAL")
(synonymousExternalConcept instrument-Generic SENSUS-Information1997 "INSTRUMENT")

;;; intangibleComponent
(not 
  (isa intangibleComponent IrreflexiveBinaryPredicate))
(not 
  (isa intangibleComponent ReflexiveBinaryPredicate))
(isa intangibleComponent NonPhysicalPartPredicate)
(isa intangibleComponent TransitiveBinaryPredicate)
(genlPreds intangibleComponent parts)
(arg1Isa intangibleComponent CompositeTangibleAndIntangibleObject)
(arg2Isa intangibleComponent IntangibleIndividual)
(comment intangibleComponent "(intangibleComponent WHOLE PART) means that PART is the intangible part of the CompositeTangibleAndIntangibleObject WHOLE.")

;;; intendedAudience
(isa intendedAudience BinaryPredicate)
(arg1Isa intendedAudience InformationBearingThing)
(arg2Isa intendedAudience Agent)
(comment intendedAudience "The predicate intendedAudience indicates an individual who is the intended recipient of the information in a particular IBT (i.e., element of InformationBearingThing).  (intendedAudience IBT AGT) means that the InformationBearingThing IBT has the individual Agent AGT as its intended audience--viewer, reader, listener, etc.  AGT (possibly along with other agents) is an individual who is supposed to access the information represented in IBT.  For example, the intendedAudience of a personal letter is usually its addressee.")

;;; intendedAudienceType
(isa intendedAudienceType BinaryPredicate)
(arg1Isa intendedAudienceType AbstractInformation)
(arg2Isa intendedAudienceType ExistingObjectType)
(arg2Genl intendedAudienceType Agent)
(comment intendedAudienceType "The predicate intendedAudienceType indicates the type of agents who are the intended recipients of the information in a particular IBT (i.e., element of InformationBearingThing).  (intendedAudienceType PIT TYPE) means that agents who are elements of TYPE are in the intended audience of the particular PropositionalInformationThing PIT.  Examples: the intendedAudienceType for the information in a copy of `AMA Journal' is the collection of American physicians; the intendedAudienceType of TV commercials for sugary packaged cereals are those members of HumanChild living in the broadcast area.")

;;; intendedBehaviorCapable
(isa intendedBehaviorCapable TernaryPredicate)
(genlPreds intendedBehaviorCapable behaviorCapable)
(arg1Isa intendedBehaviorCapable SomethingExisting)
(arg2Isa intendedBehaviorCapable Collection)
(arg2Genl intendedBehaviorCapable Situation)
(arg3Isa intendedBehaviorCapable Role)
(comment intendedBehaviorCapable "The predicate intendedBehaviorCapable is used to describe ways in which an object was designed to function.  (intendedBehaviorCapable OBJ SITTYPE ROLE) means that the individual, OBJ, was designed to serve as a ROLE in situations or events of type SITTYPE.  For example, a LandTransportationDevice such as an automobile is intended to serve the vehicle role in instances of (TransportViaFn LandTransportationDevice); an element of Sphygmomanometer is intended to serve as the deviceUsed in instances of SystolicBloodPressureTest; an element of RestArea is intended to be where a Resting-Relaxing eventOccursAt.  A thing may be able to play the same kind of ROLE in different kinds of situations; e.g., an element of StoveTopCookingPot can be the instrument-Container in either BoilingFood or SteamingFood events.  Or something may serve more than one function; e.g., a VacuumCleaner serves both as the deviceUsed in instances of Vacuuming and (in virtue of its VacuumDustBag) as the instrument-Container.")
(overlappingExternalConcept intendedBehaviorCapable SENSUS-Information1997 "USE-PROPERTY-ASCRIPTION")

;;; intendedForUseBy
(isa intendedForUseBy BinaryPredicate)
(arg1Isa intendedForUseBy Product)
(arg2Isa intendedForUseBy ExistingObjectType)
(arg2Genl intendedForUseBy Organism-Whole)
(comment intendedForUseBy "(intendedForUseBy PROD TYPE) means that the Product PROD is intended to be used by individuals of the ExistingObjectType TYPE, where TYPE must be a subset of Organism-Whole.  E.g., many types of products are only for use by adults, by women, by dogs, etc.
Note:  This is a good example of a predicate which is redundant but useful.  `Redundant' means that any assertion one states using intendedForUseBy could be stated, albeit less tersely, using other, more basic predicates in the KB, in this case intends and usesObject.  Often, a huge number of axioms can be drastically shortened by introducing such a redundant predicate, and writing axioms that define it in terms of the more-basic predicates.")

;;; intends
(isa intends PropositionalAttitudeSlot)
(arg1Isa intends IntelligentAgent)
(arg2Isa intends CycFormula)
(comment intends "(intends AGT PROP) means that the Agent AGT intends the proposition PROP (represented by a CycFormula) to become (or remain) true.  This predicate is obviously similar to goals (q.v.), but PROP is likely to be more short-lived (at least as far as the agent's intending) and more event-centered (`I did it because I intended that...') and more mechanically satisfied (`I intend to turn off the lamp') than any of the agent's goals.  You may intend to turn off the lamp, but it would be odd to call that one of your goals.")

;;; interArgIsa1-2
(isa interArgIsa1-2 TernaryPredicate)
(isa interArgIsa1-2 MetaRelation)
(isa interArgIsa1-2 RuleMacroPredicate)
(arg1Isa interArgIsa1-2 Predicate)
(arg2Isa interArgIsa1-2 Collection)
(arg3Isa interArgIsa1-2 Collection)
(comment interArgIsa1-2 "(interArgIsa1-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa1-3
(isa interArgIsa1-3 TernaryPredicate)
(arg1Isa interArgIsa1-3 Predicate)
(arg2Isa interArgIsa1-3 Collection)
(arg3Isa interArgIsa1-3 Collection)
(comment interArgIsa1-3 "(interArgIsa1-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa1-4
(isa interArgIsa1-4 TernaryPredicate)
(arg1Isa interArgIsa1-4 Predicate)
(arg2Isa interArgIsa1-4 Collection)
(arg3Isa interArgIsa1-4 Collection)
(comment interArgIsa1-4 "(interArgIsa1-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa1-5
(isa interArgIsa1-5 TernaryPredicate)
(arg1Isa interArgIsa1-5 Predicate)
(arg2Isa interArgIsa1-5 Collection)
(arg3Isa interArgIsa1-5 Collection)
(comment interArgIsa1-5 "(interArgIsa1-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa2-1
(isa interArgIsa2-1 TernaryPredicate)
(isa interArgIsa2-1 MetaRelation)
(isa interArgIsa2-1 RuleMacroPredicate)
(arg1Isa interArgIsa2-1 Predicate)
(arg2Isa interArgIsa2-1 Collection)
(arg3Isa interArgIsa2-1 Collection)
(comment interArgIsa2-1 "(interArgIsa2-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa2-3
(isa interArgIsa2-3 TernaryPredicate)
(arg1Isa interArgIsa2-3 Predicate)
(arg2Isa interArgIsa2-3 Collection)
(arg3Isa interArgIsa2-3 Collection)
(comment interArgIsa2-3 "(interArgIsa2-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa2-4
(isa interArgIsa2-4 TernaryPredicate)
(arg1Isa interArgIsa2-4 Predicate)
(arg2Isa interArgIsa2-4 Collection)
(arg3Isa interArgIsa2-4 Collection)
(comment interArgIsa2-4 "(interArgIsa2-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa2-5
(isa interArgIsa2-5 TernaryPredicate)
(arg1Isa interArgIsa2-5 Predicate)
(arg2Isa interArgIsa2-5 Collection)
(arg3Isa interArgIsa2-5 Collection)
(comment interArgIsa2-5 "(interArgIsa2-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa3-1
(isa interArgIsa3-1 TernaryPredicate)
(arg1Isa interArgIsa3-1 Predicate)
(arg2Isa interArgIsa3-1 Collection)
(arg3Isa interArgIsa3-1 Collection)
(comment interArgIsa3-1 "(interArgIsa3-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa3-2
(isa interArgIsa3-2 TernaryPredicate)
(arg1Isa interArgIsa3-2 Predicate)
(arg2Isa interArgIsa3-2 Collection)
(arg3Isa interArgIsa3-2 Collection)
(comment interArgIsa3-2 "(interArgIsa3-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa3-4
(isa interArgIsa3-4 TernaryPredicate)
(arg1Isa interArgIsa3-4 Predicate)
(arg2Isa interArgIsa3-4 Collection)
(arg3Isa interArgIsa3-4 Collection)
(comment interArgIsa3-4 "(interArgIsa3-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa3-5
(isa interArgIsa3-5 TernaryPredicate)
(arg1Isa interArgIsa3-5 Predicate)
(arg2Isa interArgIsa3-5 Collection)
(arg3Isa interArgIsa3-5 Collection)
(comment interArgIsa3-5 "(interArgIsa3-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa4-1
(isa interArgIsa4-1 TernaryPredicate)
(arg1Isa interArgIsa4-1 Predicate)
(arg2Isa interArgIsa4-1 Collection)
(arg3Isa interArgIsa4-1 Collection)
(comment interArgIsa4-1 "(interArgIsa4-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa4-2
(isa interArgIsa4-2 TernaryPredicate)
(arg1Isa interArgIsa4-2 Predicate)
(arg2Isa interArgIsa4-2 Collection)
(arg3Isa interArgIsa4-2 Collection)
(comment interArgIsa4-2 "(interArgIsa4-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa4-3
(isa interArgIsa4-3 TernaryPredicate)
(arg1Isa interArgIsa4-3 Predicate)
(arg2Isa interArgIsa4-3 Collection)
(arg3Isa interArgIsa4-3 Collection)
(comment interArgIsa4-3 "(interArgIsa4-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa4-5
(isa interArgIsa4-5 TernaryPredicate)
(arg1Isa interArgIsa4-5 Predicate)
(arg2Isa interArgIsa4-5 Collection)
(arg3Isa interArgIsa4-5 Collection)
(comment interArgIsa4-5 "(interArgIsa4-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa5-1
(isa interArgIsa5-1 TernaryPredicate)
(arg1Isa interArgIsa5-1 QuintaryPredicate)
(arg2Isa interArgIsa5-1 Collection)
(arg3Isa interArgIsa5-1 Collection)
(comment interArgIsa5-1 "(interArgIsa5-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa5-2
(isa interArgIsa5-2 TernaryPredicate)
(arg1Isa interArgIsa5-2 QuintaryPredicate)
(arg2Isa interArgIsa5-2 Collection)
(arg3Isa interArgIsa5-2 Collection)
(comment interArgIsa5-2 "(interArgIsa5-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa5-3
(isa interArgIsa5-3 TernaryPredicate)
(arg1Isa interArgIsa5-3 QuintaryPredicate)
(arg2Isa interArgIsa5-3 Collection)
(arg3Isa interArgIsa5-3 Collection)
(comment interArgIsa5-3 "(interArgIsa5-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; interArgIsa5-4
(isa interArgIsa5-4 TernaryPredicate)
(arg1Isa interArgIsa5-4 QuintaryPredicate)
(arg2Isa interArgIsa5-4 Collection)
(arg3Isa interArgIsa5-4 Collection)
(comment interArgIsa5-4 "(interArgIsa5-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")

;;; internalParts
(isa internalParts PhysicalPartPredicate)
(isa internalParts TransitiveBinaryPredicate)
(isa internalParts AsymmetricBinaryPredicate)
(isa internalParts CotemporalObjectsSlot)
(isa internalParts IrreflexiveBinaryPredicate)
(genlPreds internalParts physicalParts)
(genlPreds internalParts cotemporal)
(arg1Isa internalParts PartiallyTangible)
(arg2Isa internalParts PartiallyTangible)
(comment internalParts "the internal parts of this tangible object")

;;; internationalOrg-MemberCountry
(isa internationalOrg-MemberCountry IntangibleObjectPredicate)
(isa internationalOrg-MemberCountry BinaryPredicate)
(arg1Isa internationalOrg-MemberCountry InternationalOrganizationOfCountries)
(arg1Isa internationalOrg-MemberCountry InternationalOrganization)
(arg2Isa internationalOrg-MemberCountry Country)
(comment internationalOrg-MemberCountry "The predicate internationalOrg-MemberCountry is used to indicate that a particular country belongs to a particular international organization.  (internationalOrg-MemberCountry INTORG NATION) means that the Country NATION (as represented by its national government or other legally designated body) is a member of the InternationalOrganization INTORG.  For example, Bahrain is an internationalOrg-MemberCountry of the LeagueOfArabStates and of the UnitedNationsOrganization; or, China-PeoplesRepublic is a internationalOrg-MemberCountry of the UnitedNationsOrganization -- but Taiwan-RepublicOfChina is not.
Note: Cyc requires that members of organizations be Agents.  Since geographical regions (such as countries) are not Agents, the usual Cyc predicate for indicating membership -- hasMembers -- refers to the governments of the countries which are mentioned in assertions made with internationalOrg-MemberCountry.")

;;; intersectsIntervalType
(isa intersectsIntervalType TemporalRelation)
(isa intersectsIntervalType SymmetricBinaryPredicate)
(isa intersectsIntervalType ReflexiveBinaryPredicate)
(not 
  (isa intersectsIntervalType TransitiveBinaryPredicate))
(genlInverse intersectsIntervalType intersectsIntervalType)
(arg1Isa intersectsIntervalType TemporalObjectType)
(arg2Isa intersectsIntervalType TemporalObjectType)
(comment intersectsIntervalType "(intersectsIntervalType ?X ?Y) indicates that every instance of ?X temporallyIntersects some instance ?Y.  For example, in the nontropics, (intersectsIntervalType SummerSeason CalendarSummer).  The `summer season' may not coincide exactly with the time between the summer solstice and autumnal equinox, but there is an (enormous) overlap between those two time periods.  This relation, intersectsIntervalType, is commutative but not transitive.")

;;; interviewee
(isa interviewee IrreflexiveBinaryPredicate)
(isa interviewee AsymmetricBinaryPredicate)
(isa interviewee ActorSlot)
(genlPreds interviewee socialParticipants)
(arg1Isa interviewee SpokenCommunicating)
(arg1Isa interviewee MultiDirectionalCommunication)
(arg2Isa interviewee Person)
(comment interviewee "(interviewee INTERVIEW AGT) means that the Agent AGT is an interviewee in the Interviewing event INTERVIEW.")

;;; interviewer
(isa interviewer IrreflexiveBinaryPredicate)
(isa interviewer AsymmetricBinaryPredicate)
(isa interviewer ActorSlot)
(genlPreds interviewer socialParticipants)
(genlPreds interviewer performedBy)
(arg1Isa interviewer SpokenCommunicating)
(arg1Isa interviewer MultiDirectionalCommunication)
(arg2Isa interviewer Person)
(comment interviewer "(interviewer INTERVIEW AGT) means that the Agent AGT is an interviewer in the Interviewing event INTERVIEW.")

;;; inverseFunc
(not 
  (isa inverseFunc IrreflexiveBinaryPredicate))
(not 
  (isa inverseFunc ReflexiveBinaryPredicate))
(not 
  (isa inverseFunc AsymmetricBinaryPredicate))
(not 
  (isa inverseFunc AntiSymmetricBinaryPredicate))
(not 
  (isa inverseFunc SymmetricBinaryPredicate))
(not 
  (isa inverseFunc TransitiveBinaryPredicate))
(isa inverseFunc FunctionalSlot)
(isa inverseFunc RelationshipPredicate)
(genlInverse inverseFunc inverseFunc)
(arg1Isa inverseFunc FunctionFromQuantitiesToQuantities)
(arg2Isa inverseFunc FunctionFromQuantitiesToQuantities)
(comment inverseFunc "The predicate inverseFunc relates a mathematical function to a unique inverse.  Both arguments to inverseFunc are elements of FunctionFromQuantitiesToQuantities.  (inverseFunc FN INVFN) relates the function FN to its inverse INVFN; e.g., the inverseFunc of the logarithm function (LogFn) would be the exponential function (ExpFn).")

;;; inverseRelationType
(isa inverseRelationType TernaryPredicate)
(isa inverseRelationType RuleMacroPredicate)
(arg1Isa inverseRelationType BinaryPredicate)
(arg2Isa inverseRelationType Collection)
(arg3Isa inverseRelationType Collection)
(comment inverseRelationType "(inverseRelationType SLOT COL1 COL2) means that, for every INS2 which is an instance of COL2, there is some INS1 which is an instance of COL1, such that (SLOT INS1 INS2) holds.  inverseRelationType is thus redundant with a huge set of commonly-occurring axioms.  By having this predicate (along with an axiom that defines it, and, eventually, support in code for quick inferencing with it), axioms in that set can be stated more tersely, and collection-level reasoning with it is possible.")

;;; inverseRelationTypeCount
(isa inverseRelationTypeCount QuaternaryPredicate)
(arg1Isa inverseRelationTypeCount BinaryPredicate)
(arg2Isa inverseRelationTypeCount Collection)
(arg3Isa inverseRelationTypeCount Collection)
(arg4Isa inverseRelationTypeCount NonNegativeInteger)
(comment inverseRelationTypeCount "(inverseRelationTypeCount SLOT COL1 COL2 NUM) means that, for every instance of COL2 (INS2) there are exactly NUM instances of COL1 (INS1, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS3 INS2), ..., hold.  Thus (inverseRelationTypeCount anatomicalParts Animal Head-AnimalBodyPart 1) would mean `every animal head belongs to exactly one animal'.")

;;; inverseRelationTypeMax
(isa inverseRelationTypeMax QuaternaryPredicate)
(arg1Isa inverseRelationTypeMax BinaryPredicate)
(arg2Isa inverseRelationTypeMax Collection)
(arg3Isa inverseRelationTypeMax Collection)
(arg4Isa inverseRelationTypeMax NonNegativeInteger)
(comment inverseRelationTypeMax "(inverseRelationTypeMax SLOT COL1 COL2 NUM) means that, for every instance of COL2 (INS2) there are at most NUM instances of COL1 (INS1, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS3 INS2), ..., hold.  Thus (inverseRelationTypeMax physicalParts Hand Finger 1) means `every finger is part of at most one hand'.")

;;; inverseRelationTypeMin
(isa inverseRelationTypeMin QuaternaryPredicate)
(arg1Isa inverseRelationTypeMin BinaryPredicate)
(arg2Isa inverseRelationTypeMin Collection)
(arg3Isa inverseRelationTypeMin Collection)
(arg4Isa inverseRelationTypeMin NonNegativeInteger)
(comment inverseRelationTypeMin "(inverseRelationTypeMin SLOT COL1 COL2 NUM) means that, for every instance of COL2 (INS2) there are at least NUM instances of COL1 (INS1, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS3 INS2), ..., hold.  Thus (inverseRelationTypeMin children Person HumanChild 1) means literally `every child is the child of at least one person' or `every child has at least one parent'.")

;;; isa
(not 
  (isa isa IrreflexiveBinaryPredicate))
(not 
  (isa isa ReflexiveBinaryPredicate))
(not 
  (isa isa TransitiveBinaryPredicate))
(isa isa TaxonomicSlotForAnyUnit)
(isa isa DefaultMonotonicPredicate)
(isa isa BinaryPredicate)
(genlPreds isa elementOf)
(arg1Isa isa ReifiableTerm)
(arg2Isa isa Collection)
(comment isa "(isa EL COL) means that EL is an element of the collection COL.   Cyc knows that isa distributes over genls; that is, if one asserts (isa EL COL) and (genls COL SUPER), Cyc will infer that (isa EL SUPER). Therefore, in practice one only manually asserts a small fraction of the isa assertions --- the vast majority are inferred automatically by Cyc.")
(overlappingExternalConcept isa SENSUS-Information1997 "CLASS-ASCRIPTION")

;;; isolatedNodeInSystem
(isa isolatedNodeInSystem AsymmetricBinaryPredicate)
(genlPreds isolatedNodeInSystem pointInSystem)
(arg1Isa isolatedNodeInSystem Thing)
(arg2Isa isolatedNodeInSystem Thing)
(comment isolatedNodeInSystem "(isolatedNodeInSystem X SYS) means that the node X in the PathSystem SYS is an isolated point in SYS, i.e., X is not on any link or loop in the PathSystem SYS.  Note that an isolated point must be a node in SYS.")

;;; ist
(isa ist MicrotheoryPredicate)
(isa ist BinaryPredicate)
(arg1Isa ist Microtheory)
(arg2Isa ist CycFormula)
(comment ist "(ist MICRO PROP) means that the Cyc assertion PROP is true in the Cyc Microtheory MICRO.  E.g., one might assert (ist Image8093Mt (age Lenat (YearsDuration 5)) to state that in the context of a certain photograph, Doug was 5 years old.  In other microtheories, Doug would have different ages, or not be `known about' at all.")

;;; ist-Agreement
(isa ist-Agreement BinaryPredicate)
(isa ist-Agreement MicrotheoryPredicate)
(genlPreds ist-Agreement ist)
(arg1Isa ist-Agreement Agreement)
(arg2Isa ist-Agreement CycFormula)
(comment ist-Agreement "The predicate ist-Agreement is used to indicate the propositions which have been agreed upon in a particular agreement.  (ist-Agreement AGR PROP) means that the proposition PROP is and should be true, according to the Agreement AGR.  PROP is expressed as a CycFormula and is considered true within the microtheory which represents AGR.  PROP may or may not be true in reality.
Note the distinction between ist and ist-Agreement:  ist relates any particular microtheory to all assertions that happen to be true in that microtheory; but ist-Agreement specially indicates those assertions in an Agreement microtheory which belong to the agreement itself and are not just something that happens to be true in it (e.g., that one of the agreeingAgents is named Joe).")

;;; ist-Information
(isa ist-Information BinaryPredicate)
(isa ist-Information MicrotheoryPredicate)
(genlPreds ist-Information ist)
(arg1Isa ist-Information PropositionalInformationThing)
(arg2Isa ist-Information CycFormula)
(comment ist-Information "This is a form of ist that applies to the explicit content of a chunk of information.  It is needed so we can distinguish between things that are true in an information context because they were explicitly stated, and things that are true because they can be inferred.")

;;; itemWorn
(isa itemWorn BinaryPredicate)
(isa itemWorn Role)
(arg1Isa itemWorn WearingSomething)
(arg2Isa itemWorn SomethingToWear)
(comment itemWorn "The predicate itemWorn is used to indicate a particular article of clothing (or other wearable item) that is worn in a particular situation.  (itemWorn WEARING ITEM) means that ITEM is the ClothingItem worn during the situation WEARING, an element of WearingSomething (q.v.).")

;;; jobAttributes
(isa jobAttributes IntangibleObjectPredicate)
(isa jobAttributes BinaryPredicate)
(arg1Isa jobAttributes OccupationType)
(arg2Isa jobAttributes JobAttribute)
(comment jobAttributes "The predicate jobAttributes describes a type of job as BlueCollar, WhiteCollar, Unionized, etc.  (jobAttributes JOBTYPE ATTRIBUTE) means that ATTRIBUTE describes a general property of the OccupationType JOBTYPE.  Note that this predicate talks about elements of OccupationType (kinds of occupations), not about a particular job held by some individual.")

;;; judicialAgents
(isa judicialAgents IrreflexiveBinaryPredicate)
(isa judicialAgents AsymmetricBinaryPredicate)
(isa judicialAgents ActorSlot)
(genlPreds judicialAgents mediators)
(arg1Isa judicialAgents SocialOccurrence)
(arg2Isa judicialAgents Agent)
(comment judicialAgents "(judicialAgents EV JUDGE) means that the Agent JUDGE is acting as a judge in the event EV.")

;;; junctionInSystem
(isa junctionInSystem AsymmetricBinaryPredicate)
(genlPreds junctionInSystem pointInSystem)
(arg1Isa junctionInSystem Thing)
(arg2Isa junctionInSystem Thing)
(comment junctionInSystem "(junctionInSystem JUNCTION SYS) means that JUNCTION is a junction in the PathSystem SYS, i.e., a node in SYS that is an 'intersection' or 'branching point' of links or loops in SYS.  (For the case when no SYS is specified, see JunctionOfPaths.)  Formally, a node X in SYS is a junction in SYS iff either there are three (different) links in SYS such that X is on all of them, or there are two (different) loops in SYS such that X is on both of them, or there is a link in SYS and there is a loop in SYS such that X is on both of them.  For different kinds of junctions in a path system, see threeWayJunctionInSystem, fourWayJunctionInSystem.")

;;; knows
(isa knows PropositionalAttitudeSlot)
(genlPreds knows beliefs)
(arg1Isa knows IntelligentAgent)
(arg2Isa knows CycFormula)
(comment knows "(knows AGT PROP) means that the Agent AGT believes the proposition PROP (represented by a CycFormula), is sure about the truth of PROP (may or may not have a rational argument for PROP), and furthermore PROP is in fact true at least in the current context (Microtheory).
Note: Knowledge is stronger than belief; it implies belief.  So if (knows AGT PROP), then (beliefs AGT PROP) is true.
Note: Knowledge is stronger than truth; it implies truth (in the current Microtheory): if (knows AGT PROP), then PROP is true.
Note:  Opinion and knowledge are mutually exclusive: if (knows AGT PROP), then it is NOT true that (opinions AGT PROP).
Note: Knowledge implies awareness.  Since Abraham Lincoln died a century before we were born, it is impossible for (knows AbrahamLincoln (likesAsFriend Lenat MaryShepherd)) to hold, except in some fictional context.
")
(overlappingExternalConcept knows SENSUS-Information1997 "KNOW")

;;; knowsAbout
(isa knowsAbout BinaryPredicate)
(not 
  (isa knowsAbout TransitiveBinaryPredicate))
(not 
  (isa knowsAbout SymmetricBinaryPredicate))
(not 
  (isa knowsAbout AntiSymmetricBinaryPredicate))
(not 
  (isa knowsAbout AsymmetricBinaryPredicate))
(not 
  (isa knowsAbout ReflexiveBinaryPredicate))
(not 
  (isa knowsAbout IrreflexiveBinaryPredicate))
(arg1Isa knowsAbout IntelligentAgent)
(arg2Isa knowsAbout Thing)
(comment knowsAbout "(knowsAbout AGT X) means that the IntelligentAgent AGT knows something about X.  This predicate represents more than simple awareness, but exactly what is known -- the content of AGT's knowledge about X -- is not specified.  Examples: (knowsAbout Lenat Cyc),  (knowsAbout MichaelJordan BasketBallGame). 
Note: many commonsense rules can conclude (knowsAbout AGT X) -- e.g., those having to do with AGT's occupation, college degrees, city of residence,... in fact, almost any assertion about AGT can lead to presumptions that he/she probably knowsAbout something.  knowsAbout in turn can serve (weakly) in arguments about whether or not AGT knows (qv) specific common assertions involving X, and in arguments about whether or not AGT knowsValue of some particular predicate applied to X, etc.")

;;; knowsValue
(isa knowsValue ModalRelationship)
(isa knowsValue TernaryPredicate)
(arg1Isa knowsValue IntelligentAgent)
(arg2Isa knowsValue Thing)
(arg3Isa knowsValue BinaryPredicate)
(comment knowsValue "(knowsValue AGT X PRED) means that, if (PRED X VAL) is true, then the Agent ?AGT knows that; i.e., (knows AGT (PRED X VAL)).  E.g., this is a more compact way of expressing `people know their own date of birth' than if one had to use knows.  One could just write  (implies (isa ?A Agent) (knowsValue ?A ?A birthDate); presumably this would be asserted in a context (Microtheory) in which all actions were performed by human beings, or else there would have to be an extra qualifier to that effect added to the rule.")

;;; languageOfCommunication
(isa languageOfCommunication Role)
(isa languageOfCommunication FunctionalSlot)
(arg1Isa languageOfCommunication Communicating)
(arg2Isa languageOfCommunication Language)
(comment languageOfCommunication "The predicate languageOfCommunication is used to indicate a language used by agents in a particular communication event.  (languageOfCommunication COM LANG) means that in the Communicating COM, the information transferred is expressed in the language LANG.  LANG may be a natural language, a computer language, a musical system, or other symbolic system such as AmericanSignLanguage.")

;;; languageSpoken
(isa languageSpoken BinaryPredicate)
(genlPreds languageSpoken hasCommConvention)
(genlPreds languageSpoken knowsAbout)
(arg1Isa languageSpoken IntelligentAgent)
(arg2Isa languageSpoken NaturalLanguage)
(comment languageSpoken "(languageSpoken INTAGENT NATLANG) means the IntelligentAgent INTAGENT speaks the natural human language NATLANG at least somewhat fluently.  The language must be speakable by humans, as are English, Latin, or Japanese, but not LISP, C or LINCOS.  So, for example, (languageSpoken Lenat EnglishLanguage).   See NaturalLanguage.")

;;; lastName
(isa lastName BinaryPredicate)
(isa lastName IntangibleObjectPredicate)
(genlPreds lastName nameOfAgent)
(arg1Isa lastName Person)
(arg2Isa lastName HumanFamilyNameString)
(comment lastName "(lastName X STRNG) means that Person X is known by the HumanFamilyNameString STRNG as his or her last name (surname).  E.g., (lastName Lenat ``Lenat'').  A person rarely has more than one last name at any one time.  Last names may change as a result of certain actions, such as marriages, deaths, etc., in various cultures.")

;;; lastSubEvents
(isa lastSubEvents SubProcessSlot)
(genlPreds lastSubEvents subEvents)
(genlPreds lastSubEvents temporallyFinishedBy)
(arg1Isa lastSubEvents Event)
(arg2Isa lastSubEvents Event)
(comment lastSubEvents "(lastSubEvents ?X ?Y) implies (subEvents ?X ?Y) and (temporallyFinishedBy ?X ?Y).  For example, one Cyc axiom says that if ?X is a WagingWar event, and (lastSubEvents ?X ?Y) is true, and ?Y is a Surrendering event, then the the identity of those for whom the war was successfulForAgents can be inferred from the particular roles that are played by the various parties during the surrender.  This is how one might infer, from Lee surrendering to Grant, that the South lost the American Civil War.")

;;; laterSubAbstractions
(isa laterSubAbstractions AsymmetricBinaryPredicate)
(isa laterSubAbstractions TransitiveBinaryPredicate)
(isa laterSubAbstractions ComplexTemporalRelation)
(arg1Isa laterSubAbstractions SomethingExisting)
(arg2Isa laterSubAbstractions SomethingExisting)
(comment laterSubAbstractions "(laterSubAbstractions SUB1 SUB2) means that SUB1 and SUB2 are both a subAbstrac of the same entity (i.e., (hasSameEntityAs SUB1 SUB2)) and the sub-abstraction SUB2 starts sometime after the beginning of SUB1 (i.e., (startsAfterStartingOf SUB2 SUB1)).  For example, RichardFeynman while working on the Manhattan Project was a laterSubAbstractions than RichardFeynman in his first year of graduate school at Princeton.")

;;; laterThan
(isa laterThan AsymmetricBinaryPredicate)
(isa laterThan TransitiveBinaryPredicate)
(isa laterThan EvaluatableFunction)
(arg1Isa laterThan Date)
(arg2Isa laterThan Date)
(comment laterThan "laterThan is similar to greaterThan, but takes Dates as arguments.  (laterThan DATE1 DATE2) is true when DATE1 and DATE2 are Dates, and DATE1 starts after DATE2 is over.  laterThan is evaluatable.")

;;; laws
(isa laws CotemporalObjectsSlot)
(genlPreds laws cotemporal)
(arg1Isa laws GeopoliticalEntity)
(arg2Isa laws GovernmentCOC)
(comment laws "The predicate laws is used to relate a geopolitical region (country, state, city, etc.) to a law or entire legal code which applies there.  (laws GEOPOL CODE) means that the GeopoliticalEntity GEOPOL officially has the law (or set of laws) CODE.  See also GovernmentCOC for the representation of a Law or a LegalCode as a Microtheory.")

;;; legallyCapableOf
(isa legallyCapableOf TernaryPredicate)
(arg1Isa legallyCapableOf Agent)
(arg2Isa legallyCapableOf Collection)
(arg2Genl legallyCapableOf Situation)
(arg3Isa legallyCapableOf Role)
(comment legallyCapableOf "The predicate legallyCapableOf indicates that an agent is legally able to take a certain role in a certain type of action.  (legallyCapableOf AGT SIT-TYPE ROLE) means that the individual AGT is legally qualified and/or entitled to act in this ROLE in Situations of the type SIT-TYPE.  For example, a person over 21 years of age is legallyCapableOf smoking cigarettes in the United States.")

;;; lengthOfObject
(isa lengthOfObject PhysicalAmountSlot)
(genlPreds lengthOfObject 
  (MeaningInSystemFn SENSUS-Information1997 "LINEAR-SIZE"))
(genlPreds lengthOfObject 
  (MeaningInSystemFn SENSUS-Information1997 "SIZE-PROPERTY-ASCRIPTION"))
(arg1Isa lengthOfObject SpatialThing)
(arg2Isa lengthOfObject Distance)
(comment lengthOfObject "(lengthOfObject OBJ LEN) means that the tangible object OBJ has a length LEN.  Which dimension counts as length depends upon the object's orientation (which may be intrinsic or determined relative to its environment).")

;;; levelWith
(isa levelWith TransitiveBinaryPredicate)
(isa levelWith ReflexiveBinaryPredicate)
(isa levelWith SpatialPredicate)
(isa levelWith SymmetricBinaryPredicate)
(genlInverse levelWith levelWith)
(arg1Isa levelWith PartiallyTangible)
(arg2Isa levelWith PartiallyTangible)
(comment levelWith "(levelWith OBJ1 OBJ2) means that OBJ1 and OBJ2 are roughly the same vertical distance from some horizontal surface in the frame of reference.")

;;; lightSource
(isa lightSource TernaryPredicate)
(arg1Isa lightSource PartiallyTangible)
(arg2Isa lightSource PartiallyTangible)
(arg3Isa lightSource IlluminationModeAttribute)
(comment lightSource "The predicate lightSource is used to indicate the source of an illumination falling on a particular object.  (lightSource OBJ SOURCE MODE) means that OBJ is illuminated by SOURCE with the type of illumination (IlluminationModeAttribute) MODE.")

;;; likesAsFriend
(isa likesAsFriend BinaryPredicate)
(not 
  (isa likesAsFriend TransitiveBinaryPredicate))
(not 
  (isa likesAsFriend SymmetricBinaryPredicate))
(not 
  (isa likesAsFriend AntiSymmetricBinaryPredicate))
(not 
  (isa likesAsFriend AsymmetricBinaryPredicate))
(not 
  (isa likesAsFriend ReflexiveBinaryPredicate))
(not 
  (isa likesAsFriend IrreflexiveBinaryPredicate))
(genlPreds likesAsFriend likesObject)
(genlPreds likesAsFriend acquaintedWith)
(arg1Isa likesAsFriend Animal)
(arg2Isa likesAsFriend Animal)
(comment likesAsFriend "(likesAsFriend AGT1 AGT2) means that AGT1 enjoys interacting socially with AGT2.  See also the FeelingAttributeTypes Friendliness. 
Note: this predicate does not imply that AGT1 likes AGT2 only as a friend -- there may be romantic feelings, and other feelings, as well.")

;;; likesObject
(not 
  (isa likesObject IrreflexiveBinaryPredicate))
(not 
  (isa likesObject ReflexiveBinaryPredicate))
(not 
  (isa likesObject AsymmetricBinaryPredicate))
(not 
  (isa likesObject AntiSymmetricBinaryPredicate))
(not 
  (isa likesObject SymmetricBinaryPredicate))
(not 
  (isa likesObject TransitiveBinaryPredicate))
(isa likesObject BinaryPredicate)
(arg1Isa likesObject Animal)
(arg2Isa likesObject PartiallyTangible)
(comment likesObject "(likesObject AGT OBJ) means that when the sentient agent AGT is interacting in some way with OBJ, that agent feels some measure of Enjoyment  --- that is, (feelsEmotion AGT Enjoyment).  The kind of interactions that produce Enjoyment depend largely on what kind of thing OBJ is.  Thus, `Joe likes the Mona Lisa' implies that Joe feels Enjoyment when viewing the Mona Lisa.  But `Joe likes pizza' implies that Joe feels Enjoyment when eating that kind of food.  There are some specialized predicates of likesObject that give more information about the kind of interaction between AGT and OBJ that results in Enjoyment; see, e.g., likesSensorially and likesAsFriend.")

;;; likesRoleInActivity
(isa likesRoleInActivity TernaryPredicate)
(arg1Isa likesRoleInActivity Agent)
(arg2Isa likesRoleInActivity ActorSlot)
(arg3Isa likesRoleInActivity Event)
(comment likesRoleInActivity "(likesRoleInActivity AGT ROLE EVT) means that if the Agent AGT has the relation ROLE to the Event EVT, then AGT is likely to feel some positive measure of Enjoyment.  This predicate is useful to represent sentences such as `Joe likes running' or `Fred liked receiving the money'.")

;;; likesSensorially
(not 
  (isa likesSensorially IrreflexiveBinaryPredicate))
(not 
  (isa likesSensorially ReflexiveBinaryPredicate))
(not 
  (isa likesSensorially AsymmetricBinaryPredicate))
(not 
  (isa likesSensorially AntiSymmetricBinaryPredicate))
(not 
  (isa likesSensorially SymmetricBinaryPredicate))
(not 
  (isa likesSensorially TransitiveBinaryPredicate))
(isa likesSensorially BinaryPredicate)
(arg1Isa likesSensorially PerceptualAgent)
(arg2Isa likesSensorially SensoryAttribute)
(comment likesSensorially "(likesSensorially AGT SENSUM) means that the PerceptualAgent AGT derives some physical pleasure from the sensory experience of SENSUM (a taste, odor, or other SensoryAttribute).")

;;; linkBetweenInSystem
(isa linkBetweenInSystem QuaternaryPredicate)
(arg1Isa linkBetweenInSystem Path-Simple)
(arg2Isa linkBetweenInSystem Thing)
(arg3Isa linkBetweenInSystem Thing)
(arg4Isa linkBetweenInSystem Thing)
(comment linkBetweenInSystem "(linkBetweenInSystem LINK X Y SYS) means that in the PathSystem SYS, LINK (a link in SYS) has its two end points X and Y (nodes in SYS).  A link in a path system is one of the paths in the system whose end points are nodes in the system and that have no other nodes along them.  For each link LINK in SYS, there is a unique pair {X, Y} of different nodes in SYS such that (linkBetweenInSystem LINK X Y SYS) and (linkBetweenInSystem LINK Y X SYS) hold, and for two points (nodes) in SYS, there could be several different ('parallel') links between them.  No point in SYS that is not a node can be an end point of a link.  If node X is an end-point of LINK and (linkBetweenInSystem LINK X Y SYS) holds, then (pointOnPath X LINK) holds.  A link in SYS may have many points on it other than its end-points, but these points cannot be nodes in SYS (another way to put this is to say that there are exactly two nodes on a link, though there can be any number, greater than 1, of points on the link).  Only nodes in SYS can be 'intersection' point in SYS (see junctionInSystem), which implies that there is, in the system SYS, no point on a link LINK between X and Y that is an 'intersection' point of LINK and another link or a loop.  When defining a path system, it is convenient (and also quite safe) to start with a name of the system, say SYS1 (with an assertion (isa SYS1 PathSystem)), and enter the names of links in SYS, say Link1, Link2 etc. (with assertions (isa Link1 Path-Simple) etc.), and then only enter assertions of the form (linkBetweenInSystem LINK X Y SYS1) for each link in SYS1 and its end points X and Y--the rules related to a path systems will generate assertions like (nodeInSystem X SYS1), (pointInSystem X SYS1), (linkInSystem LINK SYS1) and (pathInSystem LINK SYS1) etc.  If one later needs to add something else to the system, say a point A on a link LINK other than its end nodes X and Y, he/she may further enter (betweenOnPath A X Y LINK) and (pointInSystem A SYS1) without changing anything else.  Note that (linkBetweenInSystem LINK X Y SYS) is actually an abbreviation of (and (linkInSystem LINK SYS) (nodeInSystem X SYS) (nodeInSystem Y SYS) (pathBetween LINK X Y)).")

;;; linkClosedSubSystems
(isa linkClosedSubSystems ReflexiveBinaryPredicate)
(isa linkClosedSubSystems TransitiveBinaryPredicate)
(isa linkClosedSubSystems AntiSymmetricBinaryPredicate)
(genlPreds linkClosedSubSystems subPathSystems)
(arg1Isa linkClosedSubSystems Thing)
(arg2Isa linkClosedSubSystems Thing)
(comment linkClosedSubSystems "(linkClosedSubSystems SYS SUBSYS) means that the path system SUBSYS is a subsystem of the path system SYS (i.e., (subPathSystems SYS SUBSYS) holds) and SUBSYS 'preserves' all links in SYS between nodes in SUBSYS, i.e., if (linkBetweenInSystem LINK X Y SYS) holds and X and Y are in SUBSYS, LINK is a link in SUBSYS.")

;;; linkInSystem
(isa linkInSystem AsymmetricBinaryPredicate)
(arg1Isa linkInSystem Path-Simple)
(arg2Isa linkInSystem Thing)
(comment linkInSystem "(linkInSystem LINK SYS) means that LINK is an instance of Path-Simple taken as a primitive path (called a link) in the PathSystem SYS.  For each link LINK in a path system SYS, there is a unique pair {X, Y} of different nodes in SYS (see nodeInSystem) such that X and Y are the two end-points of LINK in SYS.  Other 'points' can also be on LINK, but they cannot be nodes in SYS.  There can be no point on a link that is different from its end points but nevertheless on another link, i.e., no matter how many points there are on a particular link in a path system, none of them can be an 'intersection' (see junctionInSystem) except the end points of the link, which are nodes in the system.  See linkBetweenInSystem.  Each link in SYS is also a path in SYS, i.e., (linkInSystem LINK SYS) implies (pathInSystem LINK SYS).  Note that there is no general collection of all links.  Any path can be a link if you can somehow ignore the intersection points on it--it all depends on the PathSystem.")

;;; lispDefun
(isa lispDefun BinaryPredicate)
(isa lispDefun FunctionalSlot)
(isa lispDefun RelationshipPredicate)
(arg1Isa lispDefun EvaluatableFunction)
(arg2Isa lispDefun CycSystemSymbol)
(comment lispDefun "The Cyc predicate lispDefun is used to relate an evaluatable Cyc function to the name of the piece of code that is used to evaluate it.  (lispDefun E-FUN NAME) means that the CycSystemSymbol NAME is the name of a piece of Heuristic Level (SubL) code in the Cyc system which is used to compute the value of expressions containing the EvaluatableFunction E-FUN.")

;;; litigants
(isa litigants IrreflexiveBinaryPredicate)
(isa litigants AsymmetricBinaryPredicate)
(isa litigants ActorSlot)
(genlPreds litigants socialParticipants)
(arg1Isa litigants Trial)
(arg2Isa litigants Agent)
(comment litigants "(litigants ARG1 ARG2) means that the agent ARG2 is one of the contending parties in the lawsuit ARG1.")

;;; loopInSystem
(isa loopInSystem AsymmetricBinaryPredicate)
(genlPreds loopInSystem cycleInSystem)
(arg1Isa loopInSystem Path-Generic)
(arg2Isa loopInSystem Thing)
(comment loopInSystem "(loopInSystem LOOP SYS) means that LOOP is a 'loop' in SYS, which is like a link in SYS except that it has exactly one node on it as if it is a link whose two end nodes are the same.  Each loop in SYS is also a cycle in SYS, see cycleInSystem.  The differences between a loop and a (non-loop) cycle in SYS include that (i) there is exactly one point in SYS on a loop (which must be a node in SYS), but there may in general be any finite number of nodes (and even as many points as there are real numbers) on some (non-loop) cycle in SYS, and that (ii) The unique node in SYS on a loop may or may not be an end point of a link in SYS, but each node on a (non-loop) cycle in SYS must be an end point of at least two links in SYS.  These imply that there can be at most one 'intersection point' on a loop in SYS but there can be any finite number of 'intersection points' on a (non-loop) cycle in SYS.  See pointOnCycle and junctionInSystem. Note that under current treatment of loops in a path system, if one would like to talk about a 'loop' in a path system a 'part' of which is a path in the system, then he/she should make it a cycle rather than a loop in the system because according to what we said above, no 'part' of a loop in the system can be presented as a path in the system.")

;;; loves
(isa loves BinaryPredicate)
(not 
  (isa loves TransitiveBinaryPredicate))
(not 
  (isa loves SymmetricBinaryPredicate))
(not 
  (isa loves AntiSymmetricBinaryPredicate))
(not 
  (isa loves AsymmetricBinaryPredicate))
(not 
  (isa loves ReflexiveBinaryPredicate))
(not 
  (isa loves IrreflexiveBinaryPredicate))
(genlPreds loves likesAsFriend)
(genlPreds loves positiveVestedInterest)
(arg1Isa loves Animal)
(arg2Isa loves Agent)
(comment loves "(loves AGENT1 AGENT2) means AGENT1 loves AGENT2; AGENT2 has a strong emotional affect on AGENT1 whereby AGENT1 is usually loyal and devoted to and wishes well AGENT2, seeks AGENT2's companionship, and will incur substantial personal cost to help AGENT2.  Any Agent can love any other Agent, though there are specialized types of love which are restricted to two animals, two adult people, two corporations, a person and a corporation, etc.")

;;; madeBy
(isa madeBy BinaryPredicate)
(arg1Isa madeBy Product)
(arg2Isa madeBy CommercialOrganization)
(comment madeBy "The predicate madeBy was used to indicate that a particular product was made by a particular company.  (madeBy PROD COMORG) means that PROD, an individual instance of Product, was manufactured by the CommercialOrganization COMORG.  Cf. makesProductType.")

;;; mainConstituent
(isa mainConstituent CompositionPredicate)
(isa mainConstituent FunctionalSlot)
(isa mainConstituent CotemporalObjectsSlot)
(not 
  (isa mainConstituent TransitiveBinaryPredicate))
(genlPreds mainConstituent constituents)
(genlPreds mainConstituent cotemporal)
(arg1Isa mainConstituent PartiallyTangible)
(arg2Isa mainConstituent PartiallyTangible)
(comment mainConstituent "The predicate mainConstituent is used to indicate the most significant portion of an element of ExistingStuffType that makes up a particular PartiallyTangible thing.  (mainConstituent X Y) means that X's constituents include Y, and (as a default) the physical properties of the thing X are those of its main constituent, Y.  For example, for a particular instance of Lemonade, there is an instance of Water which is the mainConstituent, and most of the physical properties of the Lemonade derive from Water.  On the other hand, a person is NOT considered to have some portion of Water as mainConstituent, even though much of a person's mass is Water, because the physical properties of a person are not the same as those of water.")

;;; mainProduct
(not 
  (isa mainProduct IrreflexiveBinaryPredicate))
(not 
  (isa mainProduct ReflexiveBinaryPredicate))
(isa mainProduct TransitiveBinaryPredicate)
(isa mainProduct AntiSymmetricBinaryPredicate)
(isa mainProduct PartPredicate)
(genlPreds mainProduct physicalParts)
(arg1Isa mainProduct FormalProduct)
(arg2Isa mainProduct Product)
(comment mainProduct "The predicate mainProduct is used to identify the main item in a particular set of stuff that a customer gets when buying a packaged product.  (mainProduct FORM PROD) means that the particular Product PROD is the main item of the FormalProduct FORM--as distinct from the accessories, agreements, packaging, literature, etc., that come along with it.")

;;; mainTransportees
(isa mainTransportees BinaryPredicate)
(genlPreds mainTransportees transportees)
(arg1Isa mainTransportees TransportationEvent)
(arg2Isa mainTransportees PartiallyTangible)
(comment mainTransportees "(mainTransportees TRAN MT) means that MT is one of the main transportees, or of the primary things intended to be transported (as opposed to incidentals), in the instance TRAN of TransportationEvent.")

;;; majorUndertakingsOf
(isa majorUndertakingsOf IrreflexiveBinaryPredicate)
(isa majorUndertakingsOf AsymmetricBinaryPredicate)
(isa majorUndertakingsOf ActorSlot)
(genlPreds majorUndertakingsOf temporallyIntersects)
(genlPreds majorUndertakingsOf performedBy)
(arg1Isa majorUndertakingsOf Action)
(arg2Isa majorUndertakingsOf Agent)
(comment majorUndertakingsOf "(majorUndertakingsOf ACTION AGENT) means that AGENT consciously performed ACTION.  The success and consequence(s) of ACTION are important to AGENT.  As a result, for a sentient AGENT, failure usually results in AGENT feeling negative emotions, and success positive emotions.")

;;; makesProductType
(isa makesProductType BinaryPredicate)
(arg1Isa makesProductType CommercialOrganization)
(arg2Isa makesProductType ProductType)
(arg2Genl makesProductType Product)
(comment makesProductType "The predicate makesProductType is used to indicate that a particular company makes a specific (i.e., type of) product.  (makesProductType ORG PRODTYP) means that the CommercialOrganization ORG manufactures the ProductType PRODTYP.  Cf. madeBy.")

;;; maleParentActor
(isa maleParentActor IrreflexiveBinaryPredicate)
(isa maleParentActor AntiTransitiveBinaryPredicate)
(isa maleParentActor AsymmetricBinaryPredicate)
(isa maleParentActor ActorSlot)
(isa maleParentActor FunctionalSlot)
(genlPreds maleParentActor parentActors)
(arg1Isa maleParentActor BiologicalReproductionEvent)
(arg2Isa maleParentActor Organism-Whole)
(comment maleParentActor "(maleParentActor ?EVENT ?ORGANISM) means that ?ORGANISM is the male parent in the SexualReproductionEvent ?EVENT.")

;;; maleficiary
(isa maleficiary BinaryPredicate)
(genlPreds maleficiary preActors)
(arg1Isa maleficiary Event)
(arg2Isa maleficiary Agent)
(comment maleficiary "(maleficiary ACT AGT) means that the Agent AGT is harmed by the occurrence of the action ACT.  That is, the interest or welfare of AGT is thwarted, blocked, or harmed in ACT.")

;;; malleabilityOfObject
(isa malleabilityOfObject TangibleObjectPredicate)
(isa malleabilityOfObject IntervalBasedQuantitySlot)
(arg1Isa malleabilityOfObject SolidTangibleThing)
(arg2Isa malleabilityOfObject Malleability)
(comment malleabilityOfObject "(malleabilityOfObject OBJ DEGREE) indicates that the instance of SolidTangibleThing OBJ has the degree of Malleability DEGREE.")

;;; maritalStatus
(isa maritalStatus FunctionalSlot)
(arg1Isa maritalStatus Person)
(arg2Isa maritalStatus MaritalStatusOfPeople)
(comment maritalStatus "(maritalStatus PRSN MSTAT) means Person PRSN has the MaritalStatusOfPeople MSTAT.  The latter may be: Married, Widowed, Single, etc.  E.g., (maritalStatus KeithRichards Married).  The marital status of a person depends on whether, and when, that person was married to another person, and how the marriage ended.")

;;; massNumber
(isa massNumber IntangibleObjectPredicate)
(isa massNumber BinaryPredicate)
(arg1Isa massNumber EnglishWord)
(arg2Isa massNumber CharacterString)
(comment massNumber "(massNumber WORD STRING) means that STRING is the mass noun form of WORD.  For example, `paper' is the mass noun form of Paper-TheWord.")

;;; massOfObject
(isa massOfObject PhysicalAttributeDescriptionSlot)
(isa massOfObject PhysicalAmountSlot)
(arg1Isa massOfObject PartiallyTangible)
(arg2Isa massOfObject Mass)
(comment massOfObject "(massOfObject OBJ MASS) means that the tangible object OBJ has Mass MASS.")

;;; mate
(isa mate CotemporalObjectsSlot)
(isa mate AntiTransitiveBinaryPredicate)
(isa mate InterPersonalRelationSlot)
(isa mate SymmetricBinaryPredicate)
(not 
  (isa mate TransitiveBinaryPredicate))
(genlPreds mate positiveVestedInterest)
(genlPreds mate friends)
(genlInverse mate mate)
(arg1Isa mate Animal)
(arg2Isa mate Animal)
(comment mate "(mate ANIM1 ANIM2) means ANIM1 and ANIM2 mate (at least once) from time to time.")
(comment mate "(mate PER1 PER2) means that PER1 and PER2 are long-term companions.  More general in meaning than spouse, this can also be used to refer to one's `significant other(s)', including boyfriend(s), girlfriend(s), one's partner in a gay relationship, etc.  The assumption in the HumanSocialLifeMt is that mates are bound together by relatively enduring emotional ties.")
(comment mate "(mate PERSON1 PERSON2) means that PERSON1 and PERSON2 are mates and long-term monogamous companions.  In the AngloAmericanSocialLifeMt each person has at most only one mate at a time.  Hence, this predicate has SingleEntry arguments.")

;;; maxQuantValue
(isa maxQuantValue RelationshipPredicate)
(isa maxQuantValue ReflexiveBinaryPredicate)
(arg1Isa maxQuantValue ScalarInterval)
(arg2Isa maxQuantValue ScalarPointValue)
(comment maxQuantValue "(maxQuantValue SCALAR POINT) means that the upper limit of the quantity SCALAR is POINT, an element of ScalarPointValue.  SCALAR is an element of ScalarInterval.  For example, the maxQuantValue for the pay of mail room employees might be (DollarsPerHour 6.5); e.g., (maxQuantValue `MailPay' (DollarsPerHour 6.5)).  Another example: (maxQuantValue (Unity 5 10) 10).")

;;; maximalConnectedSubSystems
(isa maximalConnectedSubSystems AntiSymmetricBinaryPredicate)
(isa maximalConnectedSubSystems TransitiveBinaryPredicate)
(genlPreds maximalConnectedSubSystems linkClosedSubSystems)
(genlPreds maximalConnectedSubSystems pointClosedSubSystems)
(arg1Isa maximalConnectedSubSystems Thing)
(arg2Isa maximalConnectedSubSystems ConnectedPathSystem)
(comment maximalConnectedSubSystems "(maximalConnectedSubSystems SYS SUB) means that SUB is a 'maximal' connected subsystem of SYS, i.e., that SUB is an entire connected piece of SYS without other disconnected pieces of SYS.  That is to say, (i) SUB is a connected path system, and consequently must have at least one node, say NODE, in it, and (ii) SUB is a subsystem of SYS, and (iii) for every connected subsystem SUB1 of SYS containing NODE, SUB1 is a subsystem of SUB.  Thus a maximal connected subsystem SUB of a path system SYS must satisfy the conditions that (a) for each point X in SUB and each point Y in SYS that is not in SUB, X and Y are not connected in SYS, and that (b) for any nodes X and Y in SUB, for any link LINK in SYS between X and Y, LINK must also be in SUB, and that (c) for each point X in SYS, if X is on a link in SYS which is also a link in SUB, then X must also be in SUB.  It follows that if SUB is a maximal connected subsystem of SYS, SUB must be a link-closed subsystem as well as a point-closed subsystem of SYS.  Another consequence is that if SUB is a maximal connected subsystem of SYS, and if X is a point in SUB and is on a loop in SYS, then the loop must also be in SUB.")

;;; measure
(isa measure IntervalBasedQuantitySlot)
(arg1Isa measure TemporalThing)
(arg2Isa measure Time-Quantity)
(comment measure "(measure ?X ?Y) indicates that ?Y is total elapsed time from the start of ?X to its end.  For continuous TemporalThings, the measure of the object is the same as its duration (qv).  But if the TemporalThing is discontinuous, then the measure will be greater than the duration.  For example, `GeorgeWashingtonSleeping' has a measure that is about three times as long as its duration, assuming he slept about 8 hours a night.  Note:  Unfortunately, in some disciplines, such as Real Analysis, these two terms' definitions are switched!  In such contexts, one could assert to Cyc that the preferred denotation of duration was Measure-TheWord, and that the preferred denotation of measure was Duration-TheWord, but notice that the two concepts --- measure and duration --- are still distinct and useful in that discipline, they just happen to have different names there.")

;;; mediators
(isa mediators ActorSlot)
(isa mediators AsymmetricBinaryPredicate)
(isa mediators IrreflexiveBinaryPredicate)
(genlPreds mediators socialParticipants)
(arg1Isa mediators SocialOccurrence)
(arg2Isa mediators Agent)
(comment mediators "The facilitators of a process including the agents, brokers, or mediators that assist in arranging a contract, transaction, or agreement among several parties.")

;;; memberOfSpecies
(isa memberOfSpecies FunctionalSlot)
(genlPreds memberOfSpecies isa)
(arg1Isa memberOfSpecies Organism-Whole)
(arg2Isa memberOfSpecies BiologicalSpecies)
(arg2Genl memberOfSpecies Organism-Whole)
(comment memberOfSpecies "(memberOfSpecies ORG SPECIES) means that the organism ORG is a member of the BiologicalSpecies SPECIES.")

;;; memberOfThisPoliticalParty
(isa memberOfThisPoliticalParty TaxonomicSlot)
(genlPreds memberOfThisPoliticalParty hasMembers)
(arg1Isa memberOfThisPoliticalParty PoliticalParty)
(arg2Isa memberOfThisPoliticalParty HumanAdult)
(comment memberOfThisPoliticalParty "(memberOfThisPoliticalParty PARTY PERS) means that Person PERS is a (registered) member of PoliticalParty PARTY.  For example, (memberOfThisPoliticalParty DemocraticParty BillClinton).")

;;; middleName
(isa middleName BinaryPredicate)
(isa middleName IntangibleObjectPredicate)
(genlPreds middleName nameOfAgent)
(arg1Isa middleName Person)
(arg2Isa middleName HumanGivenNameString)
(comment middleName "(middleName X STRNG) means that Person X is known by the HumanGivenNameString STRNG as his or her middle name.  E.g., (middleName Lenat ``Bruce'').  A person rarely has more than one middle name.  In some cultures, when a wedding occurs, one party changes their middle name to whatever their lastName used to be, thus leading to cases where the person's new middle name is actually a HumanFamilyNameString rather than a HumanGivenNameString --- the same is true in some cultures when an infant is born and given, as a middle name, the last name of a grandparent (other than the infant's last name).")

;;; minQuantValue
(isa minQuantValue RelationshipPredicate)
(isa minQuantValue ReflexiveBinaryPredicate)
(arg1Isa minQuantValue ScalarInterval)
(arg2Isa minQuantValue ScalarPointValue)
(comment minQuantValue "(minQuantValue SCALAR POINT) means that the lower limit of SCALAR is POINT, an element of ScalarPointValue.  SCALAR is an element of ScalarInterval.  For example, the minQuantValue for the pay of mail room employees might be (DollarsPerHour 4.5); e.g., (minQuantValue `MailPay' (DollarsPerHour 4.5)).  Another example: (minQuantValue (Unity 5 10) 5).")

;;; monetaryValue
(isa monetaryValue IntervalBasedQuantitySlot)
(arg1Isa monetaryValue SomethingExisting)
(arg2Isa monetaryValue Money)
(comment monetaryValue "The value of an element of SomethingExisting. For the time being, expressed in a monetary curency.")

;;; moneyTransferMode
(isa moneyTransferMode BinaryPredicate)
(arg1Isa moneyTransferMode MoneyTransfer)
(arg2Isa moneyTransferMode MoneyTenderType)
(arg2Genl moneyTransferMode TenderObject)
(comment moneyTransferMode "(moneyTransferMode TRANSACTION
TYPE) means that in some particular money transfer TRANSACTION,
the MoneyTenderType used in that transaction was TYPE, e.g.,
CreditCard, Check-TenderObject, etc.")

;;; moneyTransferred
(isa moneyTransferred Role)
(isa moneyTransferred IntervalBasedQuantitySlot)
(isa moneyTransferred CostBreakdownSlot)
(arg1Isa moneyTransferred Buying)
(arg1Isa moneyTransferred MoneyTransfer)
(arg2Isa moneyTransferred Money)
(comment moneyTransferred "This predicate indicates the amount of money involved in a particular transfer of funds.  (moneyTransferred TRANS MONEY) means that MONEY is the quantity of Money transferred in the money transfer event TRANS.  
Note: MONEY is distinct from the physical TenderObjects (q.v.) used to accomplish that transfer (cf. objectTendered).  For example, the moneyTransferred to pay a car payment might be the amount US$400, while the objectTendered in the paying is an instance of Check-TenderObject.")

;;; mother
(isa mother AsymmetricBinaryPredicate)
(isa mother CotemporalObjectsSlot)
(isa mother AntiTransitiveBinaryPredicate)
(isa mother FamilyRelationSlot)
(not 
  (isa mother TransitiveBinaryPredicate))
(genlPreds mother biologicalMother)
(genlPreds mother cotemporal)
(arg1Isa mother Animal)
(arg2Isa mother FemaleAnimal)
(comment mother "(mother CHILD MOM) means MOM is one of the persons who fulfill the role of mother for CHILD.  This may or may not include CHILD's biological mother, and might include CHILD's step mother(s) or foster mother(s).")
(comment mother "(mother OFFSPRING FEMALE) means that the FemaleAnimal FEMALE is the female biological parent of the Animal OFFSPRING



.")

;;; mtInferenceFunction
(isa mtInferenceFunction BinaryPredicate)
(arg1Isa mtInferenceFunction Microtheory)
(arg2Isa mtInferenceFunction CycSystemSymbol)
(comment mtInferenceFunction "The function which is used to perform inference within this microtheory.")

;;; multiplicationUnits
(isa multiplicationUnits TernaryPredicate)
(isa multiplicationUnits BookkeepingPredicate)
(arg1Isa multiplicationUnits UnitOfMeasure)
(arg2Isa multiplicationUnits UnitOfMeasure)
(arg3Isa multiplicationUnits UnitOfMeasure)
(comment multiplicationUnits "The Cyc predicate multiplicationUnits is used to state what measurement units should be used for the product of two physical quantities, given the units measuring each of the quantities multiplied.  (multiplicationUnits UM-1 UM-2 PROD-UM) means that the value of (TimesFn (UM-1 x) (UM-2 y)) should be given in the units PROD-UM.  For example, (multiplicationUnits Mile Mile SquareMile).  See also UnitOfMeasure, TimesFn.")

;;; myCreationTime
(isa myCreationTime BinaryPredicate)
(isa myCreationTime BookkeepingPredicate)
(arg1Isa myCreationTime ReifiableTerm)
(arg2Isa myCreationTime PositiveInteger)
(comment myCreationTime "(myCreationTime X TIME) means that the constant X was created at time TIME.  TIME is not, however, an instance of Date.  This assertion is not intended for inference, only for documentation, so the format is a simple one, designed for human readability and for use by internal Cyc functions.  The format of TIME is YYYYMMDD, so for example, 19870911 is September 11, 1987.")

;;; myCreator
(isa myCreator BinaryPredicate)
(isa myCreator BookkeepingPredicate)
(arg1Isa myCreator ReifiableTerm)
(arg2Isa myCreator Cyclist)
(comment myCreator "(myCreator X Y) means that Y is the constant representing the person who introduced the constant X into the Cyc vocabulary. In general, the editing interfaces to the Cyc KB only allow the KB to be modified when an instance of Cyclist is designated as the author of the changes.")

;;; myEntity
(isa myEntity FunctionalSlot)
(isa myEntity InterExistingObjectSlot)
(genlInverse myEntity subAbstrac)
(arg1Isa myEntity SomethingExisting)
(arg2Isa myEntity Entity)
(comment myEntity "(myEntity ?X ?Y) indicates that ?Y is an Entity (qv) and that ?X is some subabstraction of ?Y.  That is, (subAbstrac ?Y ?X).  Note that each SomethingExisting ?X will generally have one unique Entity ?Y of which it is a subAbstrac.  E.g., (myEntity AlbertEinsteinWhileAtPrinceton AlbertEinstein).")

;;; nameOfAgent
(isa nameOfAgent IntangibleObjectPredicate)
(isa nameOfAgent BinaryPredicate)
(genlPreds nameOfAgent nameString)
(arg1Isa nameOfAgent Agent)
(arg2Isa nameOfAgent ProperNameString)
(comment nameOfAgent "(nameOfAgent AGT STRING) means STRING is the name(s) of AGT.  AGT can be a Person, Animal, Organization, etc.  In most contexts, this means that AGT may normally be called STRING, in that context, and should therefore include their salutation if the context is a formal one, should omit their lastName if it is unambiguous and the context is an intimate one, etc..")

;;; nameString
(isa nameString BinaryPredicate)
(isa nameString IntangibleObjectPredicate)
(arg1Isa nameString ReifiableTerm)
(arg2Isa nameString ProperNameString)
(comment nameString "(nameString THING STRING) means that
the name of the thing THING is the string STRING. Use it to connect
constants or NATS with their names. For agents, use the more 
specific predicate nameOfAgent.")
(synonymousExternalConcept nameString SENSUS-Information1997 "NAME-RELATION")
(synonymousExternalConcept nameString SENSUS-Information1997 "NAME-OF")

;;; nativeLanguage
(isa nativeLanguage BinaryPredicate)
(genlPreds nativeLanguage languageSpoken)
(arg1Isa nativeLanguage Person)
(arg2Isa nativeLanguage Language)
(comment nativeLanguage "The first language spoken by a person.  EntryFormat is SetTheFormat, to cover cases of bi-lingual childhoods.")

;;; near
(isa near SymmetricBinaryPredicate)
(isa near SpatialPredicate)
(isa near IrreflexiveBinaryPredicate)
(not 
  (isa near TransitiveBinaryPredicate))
(genlInverse near near)
(arg1Isa near SpatialThing)
(arg2Isa near SpatialThing)
(comment near "(near THIS THAT) means that the distance between THIS and THAT doesn't exceed the maximum dimension of the smaller object.  Thus, two pebbles one mile apart would not be near each other, but a pebble one centimeter above the earth would be near the earth.")

;;; negationAttribute
(isa negationAttribute IrreflexiveBinaryPredicate)
(isa negationAttribute SymmetricBinaryPredicate)
(not 
  (isa negationAttribute TransitiveBinaryPredicate))
(genlInverse negationAttribute negationAttribute)
(arg1Isa negationAttribute AttributeValue)
(arg2Isa negationAttribute AttributeValue)
(comment negationAttribute "(negationAttribute ATT1 ATT2) means that a thing cannot have both ATT1 and ATT2 as attributes at the same or overlapping times.")

;;; negationInverse
(isa negationInverse IrreflexiveBinaryPredicate)
(isa negationInverse SymmetricBinaryPredicate)
(isa negationInverse RuleMacroPredicate)
(not 
  (isa negationInverse TransitiveBinaryPredicate))
(genlInverse negationInverse negationInverse)
(arg1Isa negationInverse BinaryPredicate)
(arg2Isa negationInverse BinaryPredicate)
(comment negationInverse "The predicate negationInverse is used to describe a relationship between some elements of BinaryPredicate.  (negationInverse PRED INV) means that if PRED holds between a pair of items <X,Y>, then INV does NOT hold between the inverted pair <Y,X>.  In other words, negationInverse is syntactic shorthand for (implies (PRED X Y) (not (INV Y X))).  Note that PRED and INV may take the same value; e.g., (negationInverse father father) is true and means that if X's father is Y, then X is NOT Y's father.  Thus, negationInverse is true for all elements of AsymmetricBinaryPredicate.")

;;; negationPreds
(isa negationPreds SymmetricBinaryPredicate)
(isa negationPreds RuleMacroPredicate)
(not 
  (isa negationPreds TransitiveBinaryPredicate))
(genlInverse negationPreds negationPreds)
(arg1Isa negationPreds Predicate)
(arg2Isa negationPreds Predicate)
(comment negationPreds "The predicate negationPreds is used to represent a relation between some elements of Predicate.  (negationPreds PRED1 PRED2) means that PRED1 is a negation of PRED2 in the sense that any tuple in the extension of PRED1 is NOT also a tuple in the extension of PRED1.  In other words, (negationPreds PRED1 PRED2) is shorthand for (implies (PRED1 {arg-list}) (not (PRED2 {arg-list}))).  For example, (negationPreds transportees transporter).")

;;; negativeVestedInterest
(not 
  (isa negativeVestedInterest IrreflexiveBinaryPredicate))
(not 
  (isa negativeVestedInterest ReflexiveBinaryPredicate))
(not 
  (isa negativeVestedInterest TransitiveBinaryPredicate))
(isa negativeVestedInterest BinaryPredicate)
(arg1Isa negativeVestedInterest Agent)
(arg2Isa negativeVestedInterest TemporalThing)
(comment negativeVestedInterest "(negativeVestedInterest  AGT OBJ) means Agent AGT has a negative interest in the object OBJ or in the good fortune of OBJ, and a positive interest in its misfortune.  Generally, AGT will be helped or pleased by the destruction, diminution, weakening, or retarding of OBJ, and will be hurt or displeased if OBJ is preserved or enhanced.  See positiveVestedInterest.")

;;; nonDeliberateActors
(isa nonDeliberateActors ActorSlot)
(genlPreds nonDeliberateActors actors)
(arg1Isa nonDeliberateActors Event)
(arg2Isa nonDeliberateActors PartiallyTangible)
(comment nonDeliberateActors "(nonDeliberateActors ACT ACTR) means that ACTR has a Role in the Event ACT but is not acting deliberately.  Examples: (1) President JohnKennedy was a nonDeliberateActors in his assassination; (2) a person is a nonDeliberateActors in his/her own autonomic bodily functioning (e.g., heart beating, digesting); (3) Mount Vesuvius-Volcano was a nonDeliberateActors in the event of its eruption that destroyed Pompeii.  nonDeliberateActors is a negative specification of the role an actor has in an event; the role of particular nonDeliberateActors might be further specified positively, e.g., with bodilyActedOn or bodilyDoer.")

;;; nonVolitionalResult-RST
(isa nonVolitionalResult-RST RSTRelation)
(isa nonVolitionalResult-RST AsymmetricBinaryPredicate)
(arg1Isa nonVolitionalResult-RST LinguisticObject)
(arg2Isa nonVolitionalResult-RST LinguisticObject)
(comment nonVolitionalResult-RST "The discourse relation that holds between two segments of text when ARG1 specifies something which could be a nonvolitional cause of ARG2.")
(synonymousExternalConcept nonVolitionalResult-RST SENSUS-Information1997 "RST-NONVOLITIONAL-RESULT")

;;; northOf
(isa northOf TransitiveBinaryPredicate)
(isa northOf AsymmetricBinaryPredicate)
(arg1Isa northOf GeographicalRegion)
(arg2Isa northOf GeographicalRegion)
(comment northOf "(northOf REGION-1 REGION-2) means that the GeographicalRegion REGION-1 is to the north of the GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore south of REGION-1; thus, no distinct predicate is needed to represent `south of'.  Example: (northOf CityOfPhiladelphiaPA CityOfWashingtonDC).")

;;; northeastOf
(isa northeastOf TransitiveBinaryPredicate)
(isa northeastOf AsymmetricBinaryPredicate)
(arg1Isa northeastOf GeographicalRegion)
(arg2Isa northeastOf GeographicalRegion)
(comment northeastOf "(northeastOf REGION-1 REGION-2) means that the GeographicalRegion REGION-1 is to the north-east of the GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore southwest of REGION-1; thus, no distinct predicate is needed to represent `southwest of'.  Example: (northeastOf Philippines Taiwan-RepublicOfChina).")

;;; northwestOf
(isa northwestOf IrreflexiveBinaryPredicate)
(isa northwestOf TransitiveBinaryPredicate)
(isa northwestOf AsymmetricBinaryPredicate)
(arg1Isa northwestOf GeographicalRegion)
(arg2Isa northwestOf GeographicalRegion)
(comment northwestOf "(northwestOf REGION-1 REGION-2) means that the GeographicalRegion REGION-1 is to the northwest of the GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore southeast of REGION-1; thus, no distinct predicate is needed to represent `southeast of'.  Example: (northwestOf UnitedKingdomOfGreatBritainAndNorthernIreland France).")

;;; not
(isa not LogicalConnective)
(isa not Relationship)
(arg1Isa not CycFormula)
(comment not "The predicate not is the negation operator in Cyc.  not takes a single element of CycFormula as its argument.  (not FORM) is true if and only if the formula FORM is false in Cyc.")

;;; notices
(isa notices PropositionalAttitudeSlot)
(genlPreds notices beliefs)
(arg1Isa notices IntelligentAgent)
(arg2Isa notices CycFormula)
(comment notices "(notices AGT PROP) means that
AGT believes the proposition PROP because AGT has seen, heard,
smelled, etc. PROP via some element of Perceiving.  Although
(notices AGT PROP) implies (beliefs AGT PROP) {via the assertion
(genlPreds notices beliefs)}, exceptions occur if AGT believes
they have been hallucinating or drugged, for example.  The predicate
beliefs, unlike notices, can include propositions gathered through
inferring, dreaming, intuiting.  The temporal extent of (notices AGT
PROP) is at least a 'short time' following the perceiving of PROP.
The extent of this time is a function of the type of fact perceived
noticed, when forgetting or other overriding information comes into
play.")

;;; numInhabitants
(isa numInhabitants IntervalBasedQuantitySlot)
(isa numInhabitants IntangibleObjectPredicate)
(arg1Isa numInhabitants GeographicalRegion)
(arg1Isa numInhabitants Agent)
(arg2Isa numInhabitants Integer)
(comment numInhabitants "The predicate numInhabitants is used to indicate the number of people living in a region.  (numInhabitants REGION NUMBER) means that the GeographicalAgent REGION has this Integer NUMBER of inhabitants.  Note that, for any particular country, NUMBER is not necessarily the same as the number of its citizens, since citizens may be living abroad, and aliens may be residing in the country.  Examples: (numInhabitants CityOfRomeItaly 2800000); (numInhabitants CityOfTokyoJapan 8300000).")

;;; numericallyEqual
(isa numericallyEqual TransitiveBinaryPredicate)
(isa numericallyEqual ReflexiveBinaryPredicate)
(isa numericallyEqual SymmetricBinaryPredicate)
(isa numericallyEqual EvaluatableFunction)
(isa numericallyEqual NumericComparison)
(genlInverse numericallyEqual numericallyEqual)
(arg1Isa numericallyEqual ScalarInterval)
(arg2Isa numericallyEqual ScalarInterval)
(comment numericallyEqual "The predicate numericallyEqual is Cyc's representation of the equals ( = ) of arithmetic, adapted to use with Cyc's scalars, which include quantitative intervals as well as point values.  For any two instances of ScalarInterval, (numericallyEqual SI-1 SI-2) means that the minimum of SI-1 is equal to the mininum of SI-2 and that the maximum of SI-1 is equal to the maximum of SI-2.  See also ScalarInterval.")
(synonymousExternalConcept numericallyEqual SENSUS-Information1997 "EXACTLY")

;;; objectActedOn
(isa objectActedOn IrreflexiveBinaryPredicate)
(isa objectActedOn ActorSlot)
(isa objectActedOn AsymmetricBinaryPredicate)
(genlPreds objectActedOn preActors)
(arg1Isa objectActedOn Event)
(arg2Isa objectActedOn SomethingExisting)
(comment objectActedOn "The predicate objectActedOn is used to relate an event to an entity (or entities) significantly affected in that event.  That entity must exist before the event, but may be either destroyed in the event (see inputsDestroyed), or merely affected by it (e.g., see damages, objectOfStateChange). (objectActedOn EVENT OBJECT) means that OBJECT is altered or affected in EVENT, and the change that OBJECT undergoes is central or focal to understanding EVENT.  Thus, scissors are NOT an objectActedOn in a HairCuttingEvent.  The focal change in a haircut is hair getting shorter; thus, hair is a legitimate objectActedOn in a HairCuttingEvent.  The almost microscopic dulling that scissors undergo in a single haircut is a comparatively insignificant change with respect to a single haircut, considered as a HairCuttingEvent.  

Note: long-term effects of usage on devices should be axiomatized in connection with UsingAFn constants.")
(synonymousExternalConcept objectActedOn SENSUS-Information1997 "ACTEE")

;;; objectControlled
(isa objectControlled AsymmetricBinaryPredicate)
(isa objectControlled ActorSlot)
(genlPreds objectControlled objectActedOn)
(arg1Isa objectControlled ControllingSomething)
(arg2Isa objectControlled PartiallyTangible)
(comment objectControlled "This predicate is used to indicate that a particular object is being controlled in a particular event.  (objectControlled EVENT OBJ) means that the object OBJ is being controlled in the Event EVENT.
Note: objectControlled does not assume or require physical contact between controller and object controlled.")

;;; objectEmitted
(isa objectEmitted ActorSlot)
(isa objectEmitted AsymmetricBinaryPredicate)
(genlPreds objectEmitted objectMoving)
(arg1Isa objectEmitted EmittingAnObject)
(arg2Isa objectEmitted PartiallyTangible)
(comment objectEmitted "This predicate is used in connection with particular instances of EmittingAnObject, to identify the object which `comes out' during the event.  (objectEmitted EMIT OBJ) means that OBJ is emitted from the emitter during the emission event EMIT.  The objectEmitted is also an objectMoving in EMIT.  For example, in a particular human BirthEvent, some particular HumanInfant is an objectEmitted.")

;;; objectFoundInLocation
(isa objectFoundInLocation ReflexiveBinaryPredicate)
(isa objectFoundInLocation TransitiveBinaryPredicate)
(isa objectFoundInLocation CotemporalObjectsSlot)
(not 
  (isa objectFoundInLocation SymmetricBinaryPredicate))
(not 
  (isa objectFoundInLocation AntiSymmetricBinaryPredicate))
(not 
  (isa objectFoundInLocation AsymmetricBinaryPredicate))
(genlPreds objectFoundInLocation inRegion)
(genlPreds objectFoundInLocation cotemporal)
(arg1Isa objectFoundInLocation PartiallyTangible)
(arg2Isa objectFoundInLocation SpatialThing)
(comment objectFoundInLocation "(objectFoundInLocation OBJ LOC) means that OBJ has the location LOC. OBJ is not a part of LOC.  Examples: the ArcDeTriomphe is located in the CityOfParisFrance; the AlaskanPipeline is found in Alaska-State; the TownOfGettysburgPA is located in the Eastern region of Pennsylvania (note that the town's territory is part of Pennsylvania, but the town as a social organization is distinct).  See also the comment on inRegion.  Cf., for cases where OBJ is a spatial part of LOC, physicalDecompositions, geographicalSubRegions.")

;;; objectMoving
(isa objectMoving ActorSlot)
(isa objectMoving AsymmetricBinaryPredicate)
(genlPreds objectMoving transferredThing)
(genlPreds objectMoving temporallyIntersects)
(arg1Isa objectMoving MovementEvent)
(arg2Isa objectMoving PartiallyTangible)
(comment objectMoving "The predicate objectMoving is used to refer to an object which is moving in a particular MovementEvent.  (objectMoving MOVE OBJECT) means that OBJECT is in motion at some point during the MovementEvent MOVE and this movement is focal in MOVE.  In some cases, such as an instance of LocomotionEvent, OBJECT causes MOVE directly.  OBJECT's motion in MOVE may be translational, rotational, or some combination of these.  OBJECT may be a solid -- such as an animal, an automobile, or a tennis ball -- or a fluid, such as lava flowing or a warm air mass rising.")

;;; objectOfPossessionTransfer
(isa objectOfPossessionTransfer ActorSlot)
(isa objectOfPossessionTransfer AsymmetricBinaryPredicate)
(genlPreds objectOfPossessionTransfer transferredThing)
(arg1Isa objectOfPossessionTransfer ChangeInUserRights)
(arg2Isa objectOfPossessionTransfer SomethingExisting)
(comment objectOfPossessionTransfer "The predicate objectOfPossessionTransfer identifies the object which `changes hands' in a particular event wherein some user's rights to it are changed.  (objectOfPossessionTransfer EVENT OBJECT) means that in EVENT, all or some rights to use OBJECT are transferred from one agent (the fromPossessor) to another (the toPossessor).  EVENT is an element of ChangeInUserRights (q.v.), for example, a buying, renting, lending, repossessing, etc.")

;;; objectOfStateChange
(isa objectOfStateChange ActorSlot)
(isa objectOfStateChange AsymmetricBinaryPredicate)
(isa objectOfStateChange AntiTransitiveBinaryPredicate)
(genlPreds objectOfStateChange objectActedOn)
(genlPreds objectOfStateChange postActors)
(arg1Isa objectOfStateChange IntrinsicStateChangeEvent)
(arg2Isa objectOfStateChange PartiallyTangible)
(comment objectOfStateChange "The predicate objectOfStateChange is used to identify the object of an instance of IntrinsicStateChangeEvent.  (objectOfStateChange EVENT OBJECT) means that OBJECT is an Entity that undergoes some kind of intrinsic change of state in EVENT.  OBJECT exists before EVENT, is directly involved in EVENT, and persists after EVENT.  (Accordingly, this predicate inherits the genlPreds preActors and postActors through objectActedOn.)  The change which OBJECT undergoes is internal or intrinsic; this predicate is not used for extrinsic changes, e.g., in location, orientation, ownership, status, etc.  



Note: If OBJECT were destroyed by EVENT and went out of existence in the course of EVENT, then the right predicate to use would be inputsDestroyed, rather than objectOfStateChange.")

;;; objectPaidFor
(isa objectPaidFor ActorSlot)
(genlPreds objectPaidFor objectOfPossessionTransfer)
(arg1Isa objectPaidFor MonetaryExchangeOfUserRights)
(arg2Isa objectPaidFor SomethingExisting)
(comment objectPaidFor "(objectPaidFor EVENT OBJECT) means that in the MonetaryExchangeOfUserRights EVENT, the right to possess OBJECT is transferred from one Agent to another.  OBJ is not the objectTendered but the goods that are bought or rented.")

;;; objectRemoved
(isa objectRemoved ActorSlot)
(isa objectRemoved AsymmetricBinaryPredicate)
(genlPreds objectRemoved objectMoving)
(genlPreds objectRemoved objectActedOn)
(genlPreds objectRemoved postActors)
(arg1Isa objectRemoved RemovingSomething)
(arg2Isa objectRemoved PartiallyTangible)
(comment objectRemoved "(objectRemoved REMOVING OBJ) means OBJ is removed from its previous location in the removing event REMOVING.  The force that does the REMOVING comes from some other object than OBJ.")

;;; objectSelected
(isa objectSelected ActorSlot)
(isa objectSelected FunctionalSlot)
(genlPreds objectSelected actors)
(arg1Isa objectSelected PurposefulAction)
(arg1Isa objectSelected HumanActivity)
(arg2Isa objectSelected Individual)
(comment objectSelected "(objectSelected SEL OBJ) means that OBJ is the object that is chosen in the event SEL, an instance of SelectingSomething.  If what is selected in SEL is a collection, rather than an individual object, then use the predicate activityObjectType to represent the object of SEL.")

;;; objectTakenCareOf
(isa objectTakenCareOf ActorSlot)
(isa objectTakenCareOf AsymmetricBinaryPredicate)
(isa objectTakenCareOf IrreflexiveBinaryPredicate)
(genlPreds objectTakenCareOf objectActedOn)
(genlPreds objectTakenCareOf postActors)
(arg1Isa objectTakenCareOf PurposefulAction)
(arg1Isa objectTakenCareOf ActionOnObject)
(arg1Isa objectTakenCareOf HumanActivity)
(arg2Isa objectTakenCareOf SomethingExisting)
(comment objectTakenCareOf "(objectTakenCareOf EV OBJ) means that OBJ is acted on in EV by some Agent in order to maintain, preserve, or promote the health

or good condition of OBJ.")

;;; objectTendered
(isa objectTendered IrreflexiveBinaryPredicate)
(isa objectTendered AsymmetricBinaryPredicate)
(isa objectTendered ActorSlot)
(genlPreds objectTendered objectOfPossessionTransfer)
(arg1Isa objectTendered MoneyTransfer)
(arg2Isa objectTendered TenderObject)
(comment objectTendered "This predicate indicates the financial instrument which is used in a particular transfer of money.  (objectTendered TRANS OBJECT) means that the TenderObject OBJECT is used to transfer funds in the MoneyTransfer event TRANS.  See also TenderObject.
Note: OBJECT is distinct from the quantity of Money transferred (see moneyTransferred) although of course OBJECT has some value --- is `worth' a certain amount, generally calculated from the numbers printed or stamped or engraved on the TenderObject OBJECT --- which in turn is an element of Money.")

;;; objectTested
(isa objectTested AsymmetricBinaryPredicate)
(genlPreds objectTested objectActedOn)
(arg1Isa objectTested PurposefulAction)
(arg1Isa objectTested Thinking)
(arg2Isa objectTested PartiallyTangible)
(comment objectTested "(objectTested EVAL OBJ) mean that OBJ is the specific object or portion being tested in EVAL.  For example, if someone has a blood test, then the object tested is the portion of blood used to run the test fulfulls the role of objectTested, rather than the person or the collection of that person's blood.")

;;; objectsInContact
(isa objectsInContact TernaryPredicate)
(isa objectsInContact Role)
(arg1Isa objectsInContact PhysicalContactSituation)
(arg2Isa objectsInContact PartiallyTangible)
(arg3Isa objectsInContact PartiallyTangible)
(comment objectsInContact "The predicate objectsInContact indicates that two objects physically touch in a particular PhysicalContactSituation.  (objectsInContact SIT OBJ-1 OBJ-2) means that OBJ-1 and OBJ-2 are in contact in the PhysicalContactSituation SIT.  For example, a ClothingItem and its wearer are objectsInContact during the wearing.  A father and son in a CarryingPiggyback event are objectsInContact.  (objectsInContact SIT OBJ-1 OBJ-2) entails (holdsIn SIT (touches OBJ-1 OBJ-2)); touches covers both direct touching and touching indirectly (i.e., through a thin layer, e.g., through clothing).")

;;; obscuresFrom
(isa obscuresFrom TernaryPredicate)
(arg1Isa obscuresFrom PartiallyTangible)
(arg2Isa obscuresFrom PartiallyTangible)
(arg3Isa obscuresFrom Agent)
(comment obscuresFrom "(obscuresFrom OBJ1 OBJ2 OBJ3) means that OBJ1 visually blocks OBJ2 from OBJ3's view.")

;;; occurrencesPerPeriod
(isa occurrencesPerPeriod TernaryPredicate)
(arg1Isa occurrencesPerPeriod TemporalObjectType)
(arg2Isa occurrencesPerPeriod TemporalObjectType)
(arg3Isa occurrencesPerPeriod Integer)
(comment occurrencesPerPeriod "(occurrencesPerPeriod ?X ?Y ?N) indicates that ?N instances of ?X occur during each instance of ?Y.  For example, to indicate that there are seven calendar days in each calendar week, we would write the axiom (occurrencesPerPeriod CalendarDay CalendarWeek 7).")

;;; officiator
(isa officiator IrreflexiveBinaryPredicate)
(isa officiator AsymmetricBinaryPredicate)
(isa officiator ActorSlot)
(genlPreds officiator socialParticipants)
(arg1Isa officiator SocialOccurrence)
(arg2Isa officiator Agent)
(comment officiator "The predicate officiator points to the agent who performs official functions at an event. For example, it is used to indicate the person who plays the role of a priest or justice of the peace at a wedding; also, a master of ceremonies, a judge, a referee.  An officiator is one of the performers at the social event where s/he officiates, usually not the only one.")

;;; offspringActors
(isa offspringActors ActorSlot)
(genlPreds offspringActors outputsCreated)
(arg1Isa offspringActors BiologicalReproductionEvent)
(arg2Isa offspringActors BiologicalLivingObject)
(comment offspringActors "(offspringActors EVENT ORGANISM) means that ORGANISM is an offspring created in the BiologicalReproductionEvent EVENT .")

;;; oilSolubility
(isa oilSolubility IntervalBasedQuantitySlot)
(isa oilSolubility TangibleObjectPredicate)
(isa oilSolubility PhysicalAttributeDescriptionSlot)
(arg1Isa oilSolubility PartiallyTangible)
(arg2Isa oilSolubility Solubility)
(comment oilSolubility "(oilSolubility OBJ DEGREE) means that the particular tangible OBJ has this DEGREE of Solubility in Oil.")

;;; oldConstantName
(isa oldConstantName BinaryPredicate)
(arg1Isa oldConstantName Thing)
(arg2Isa oldConstantName CycSystemString)
(comment oldConstantName "If this constant has been renamed after Oct 95, and if the system variable cyc::*note-old-constant-name* is set to t on the machine on which the name change occurred, then this slot automatically records the most recent name that this constant had.")

;;; on-Physical
(not 
  (isa on-Physical AsymmetricBinaryPredicate))
(isa on-Physical IrreflexiveBinaryPredicate)
(isa on-Physical SpatialPredicate)
(not 
  (isa on-Physical TransitiveBinaryPredicate))
(not 
  (isa on-Physical SymmetricBinaryPredicate))
(not 
  (isa on-Physical AntiSymmetricBinaryPredicate))
(genlPreds on-Physical above-Touching)
(genlPreds on-Physical supportedBy)
(arg1Isa on-Physical PartiallyTangible)
(arg2Isa on-Physical PartiallyTangible)
(comment on-Physical "(on-Physical OVER UNDER) means that the object OVER is above, supported by, and touching the object UNDER.  OVER and UNDER may be at rest or in motion, or one may be in motion and the other at rest (relative to it).  Examples: a person on a bicycle; groceries on a checkout conveyor belt; a statue on a pedestal.  Note that only touches (and not touchesDirectly) is implied.")

;;; onLine
(isa onLine BinaryPredicate)
(isa onLine SpatialPredicate)
(genlPreds onLine spatiallyIntersects)
(arg1Isa onLine SpatialThing)
(arg2Isa onLine Line)
(comment onLine "(onLine OBJ LINE) means that OBJ is an object or region with one or more dimensions much smaller than the length of the Line LINE, and OBJ spatiallyIntersects or touches LINE but does not include all of LINE.  One object can be on several different Lines.  See also onPath and onPath-Generic.")

;;; onPath
(isa onPath TransitiveBinaryPredicate)
(isa onPath IrreflexiveBinaryPredicate)
(isa onPath CotemporalObjectsSlot)
(genlPreds onPath objectFoundInLocation)
(genlPreds onPath cotemporal)
(genlPreds onPath onPath-Generic)
(arg1Isa onPath PartiallyTangible)
(arg2Isa onPath Path-Simple)
(comment onPath "(onPath ARG1 PATH) means that ARG1 is located along (on or adjacent to) the Path-Generic PATH.  ARG1 could be a moving object or it could be a stationary point (see the more specific predicate pointOnPath)  For example, Saint Louis, Missouri was onPath U.S. Route 66, as was Missouri, any car driving along it, and any lamp-post on it.")

;;; onPath-Generic
(isa onPath-Generic BinaryPredicate)
(arg1Isa onPath-Generic PartiallyTangible)
(arg2Isa onPath-Generic Path-Generic)
(comment onPath-Generic "(onPath-Generic LOC PATH) means that LOC, a location, is on the path PATH.  Here at least a part of LOC should be a part of PATH (e.g., as a part of the meaning of the sentence that Austin is on I35, a part of Austin is a part of I35).  Note that onPath-Generic is used for Path-Generic.  If one wants to be clear that the path PATH is an instance of Path-Simple, then onPath rather than onPath-Generic should be used.")

;;; opinions
(isa opinions PropositionalAttitudeSlot)
(genlPreds opinions beliefs)
(arg1Isa opinions IntelligentAgent)
(arg2Isa opinions CycFormula)
(comment opinions "(opinions AGT PROP) means that the Agent AGT believes that PROP (represented by a CycFormula) may be true, but they aren't sure about it, their mind might be changed, they are usually aware that PROP is just an opinion, etc.  They may or may not have an argument to justify PROP.  
Note: Opinion implies belief.  So if (opinions AGT PROP), then (beliefs AGT PROP) is true.
Note:  Opinion and knowledge are mutually exclusive: if (knows AGT PROP), then it is NOT true that (opinions AGT PROP).")

;;; oppositeAttributeValue
(isa oppositeAttributeValue AntiTransitiveBinaryPredicate)
(isa oppositeAttributeValue SymmetricBinaryPredicate)
(genlPreds oppositeAttributeValue negationAttribute)
(genlInverse oppositeAttributeValue oppositeAttributeValue)
(arg1Isa oppositeAttributeValue AttributeValue)
(arg2Isa oppositeAttributeValue AttributeValue)
(comment oppositeAttributeValue "(oppositeAttributeValue ATT1 ATT2) means that ATT2 is the opposite of ATT1.  E.g., DeviceOn and DeviceOff.")

;;; oppositeDirection-Interval
(not 
  (isa oppositeDirection-Interval TransitiveBinaryPredicate))
(isa oppositeDirection-Interval SymmetricBinaryPredicate)
(isa oppositeDirection-Interval AntiTransitiveBinaryPredicate)
(isa oppositeDirection-Interval SpatialPredicate)
(genlPreds oppositeDirection-Interval oppositeAttributeValue)
(genlInverse oppositeDirection-Interval oppositeDirection-Interval)
(arg1Isa oppositeDirection-Interval UnitVectorInterval)
(arg2Isa oppositeDirection-Interval UnitVectorInterval)
(comment oppositeDirection-Interval "(oppositeDirection-Interval COMING GOING) means that the vector which points in the opposite direction to the vector COMING is the vector GOING.  More technically, COMING and GOING are both elements of UnitVectorInterval in Cyc's spatial representation, and the midpoint of the direction interval COMING is 180 degrees from the midpoint of the direction interval GOING.  Examples: (oppositeDirection-Interval North-Generally South-Generally), (oppositeDirection-Interval DorsalDirection VentralDirection).  If a precise opposite direction is needed, use oppositeDirection-Precise.")

;;; oppositeDirection-Precise
(not 
  (isa oppositeDirection-Precise TransitiveBinaryPredicate))
(isa oppositeDirection-Precise SymmetricBinaryPredicate)
(isa oppositeDirection-Precise AntiTransitiveBinaryPredicate)
(genlPreds oppositeDirection-Precise oppositeDirection-Interval)
(genlInverse oppositeDirection-Precise oppositeDirection-Precise)
(arg1Isa oppositeDirection-Precise Vector-Precise)
(arg2Isa oppositeDirection-Precise Vector-Precise)

;;; or
(isa or LogicalConnective)
(isa or CommutativeRelation)
(isa or VariableArityRelation)
(argsIsa or CycFormula)
(comment or "The predicate or is the disjunction relation in Cyc.  or is a variable-arity relation and takes any number of elements of CycFormula as its arguments.  (or P Q ... Z) is true if at least one of the formulas P, Q, ..., or Z is true in Cyc.")
(resultIsa or CycExpression)

;;; orientation
(isa orientation SpatialPredicate)
(isa orientation BinaryPredicate)
(arg1Isa orientation PartiallyTangible)
(arg2Isa orientation OrientationAttribute)
(comment orientation "(orientation OBJECT ORTN) means that the tangible OBJECT is oriented in the way described by the OrientationAttribute ORTN.  Examples: (orientation OBJ RightSideUp), (orientation OBJ VerticalOrientation).  orientation is asserted with respect to the current context's FrameOfReference.")

;;; origin-RoundTrip
(isa origin-RoundTrip IrreflexiveBinaryPredicate)
(isa origin-RoundTrip AsymmetricBinaryPredicate)
(isa origin-RoundTrip ActorSlot)
(genlPreds origin-RoundTrip nonDeliberateActors)
(genlPreds origin-RoundTrip toLocation)
(genlPreds origin-RoundTrip fromLocation)
(arg1Isa origin-RoundTrip Translation-RoundTrip)
(arg2Isa origin-RoundTrip PartiallyTangible)
(comment origin-RoundTrip "(origin-RoundTrip TRIP PLACE) means that the Translation-RoundTrip event TRIP leaves from and returns to the location PLACE.  PLACE is both the fromLocation and toLocation of the entire TRIP, considered as a whole.  For example, some commuters to Manhattan leave and return each day to Connecticut-State, which is their origin-RoundTrip.  See also destination-RoundTrip.")

;;; orthography
(isa orthography BinaryPredicate)
(arg1Isa orthography Language)
(arg2Isa orthography CommunicationConvention)
(comment orthography "(orthography ?LANG ?WRIT) means that the WritingSystem ?WRIT is the usual mode of writing used to encode the Language ?LANG; that it is used by most of the people who customarily engage in writing ?LANG.")

;;; outputs
(isa outputs ActorSlot)
(genlPreds outputs postActors)
(genlPreds outputs actors)
(arg1Isa outputs CreationOrDestructionEvent)
(arg2Isa outputs SomethingExisting)
(comment outputs "The predicate outputs is used to relate a particular event to any of the outputs from that event.  (outputs EVENT OBJECT) means that OBJECT is an output from the CreationOrDestructionEvent EVENT; i.e., OBJECT is either created as a result of EVENT, or it is something left after another thing was destroyed in EVENT.  For example, silicon chips are outputsCreated in a chip manufacturing process, while scrap metal is outputsRemaining after cars are put through a crusher.
Note that those two types of cases should be distinguished by using (respectively) the specialized predicates outputsCreated or outputsRemaining whenever they are appropriate, rather than only the more general predicate outputs.")

;;; outputsCreated
(isa outputsCreated ActorSlot)
(genlPreds outputsCreated outputs)
(genlPreds outputsCreated nonDeliberateActors)
(genlPreds outputsCreated startsDuring)
(arg1Isa outputsCreated CreationEvent)
(arg2Isa outputsCreated SomethingExisting)
(comment outputsCreated "The predicate outputsCreated is used to identify items created by a particular event.  (outputsCreated EVENT OBJECT) means that OBJECT doesn't exist before EVENT but comes into existence sometime during EVENT, as a result of EVENT.  outputsCreated is a specialization of nonDeliberateActors, since it would in general be impossible for OBJECT to act deliberately in its own creation.")

;;; outputsRemaining
(isa outputsRemaining IrreflexiveBinaryPredicate)
(isa outputsRemaining AsymmetricBinaryPredicate)
(isa outputsRemaining ActorSlot)
(genlPreds outputsRemaining outputs)
(genlPreds outputsRemaining preActors)
(arg1Isa outputsRemaining DestructionEvent)
(arg2Isa outputsRemaining SomethingExisting)
(comment outputsRemaining "The predicate outputsRemaining is used to identify leftovers which survive from the inputs to a particular event.  (outputsRemaining EVENT OBJECT) means that OBJECT persists after EVENT, and that it existed before EVENT as an identifiable part of one of the things destroyed during EVENT (see inputsDestroyed).  Examples: (1) when a sheet of plywood is sawn through in a cutting event, the original board is destroyed and the outputsRemaining are the two smaller plywood pieces; (2) after a FiltrationProcess, the suspendedPart and the suspendingFluid are the outputsRemaining from the original mixture which has been destroyed.")

;;; overlappingExternalConcept
(isa overlappingExternalConcept TernaryPredicate)
(arg1Isa overlappingExternalConcept Thing)
(arg2Isa overlappingExternalConcept IndexedInfoSource)
(arg3Isa overlappingExternalConcept CharacterString)
(comment overlappingExternalConcept "(overlappingExternalConcept ?TERM ?SOURCE ?STRING) means that the Cyc
concept ?TERM overlaps semantically with the concept named by ?STRING in the
external data source ?SOURCE.")

;;; overlapsStart
(isa overlapsStart ComplexTemporalRelation)
(isa overlapsStart AsymmetricBinaryPredicate)
(not 
  (isa overlapsStart TransitiveBinaryPredicate))
(genlPreds overlapsStart endsDuring)
(genlInverse overlapsStart startsDuring)
(arg1Isa overlapsStart TemporalThing)
(arg2Isa overlapsStart TemporalThing)
(comment overlapsStart "(overlapsStart FIRST SECOND) means that FIRST starts before SECOND and ends during SECOND.  That is, the startingPoint of FIRST is before the startingPoint of SECOND, and the endingPoint of FIRST is before the endingPoint of SECOND.  So this is actually a STRONGER relation than might be suggested just by its name alone, since the name alone does not suggest that FIRST must end during SECOND.  If all you mean to say, in some situation, is that FIRST starts before SECOND, then do NOT use overlapsStart; just use the startsAfterStartingOf relation; i.e., say (startsAfterStartingOf SECOND FIRST).  Also note that overlapsStart is, in a way, a WEAKER relation than might be suggested by its name alone.  Namely, the startingPoint of SECOND might not even be a point of FIRST (if FIRST is discontinuous).







Note:  This Cyc temporal relation is equivalent to what James Allen independently dubbed the OVERLAPS relation.")

;;; overrides
(isa overrides TransitiveBinaryPredicate)
(isa overrides AsymmetricBinaryPredicate)
(isa overrides MetaKnowledgePredicate)
(arg1Isa overrides Assertion)
(arg2Isa overrides Assertion)
(comment overrides "The predicate overrides is used to tell Cyc which rule to prefer when it encounters two conflicting rules while reasoning with default assertions.  (overrides FIRST SECOND) means that if the assertions FIRST and SECOND both appear in conflicting arguments for and against some proposition, favor the argument that contains FIRST.")

;;; owns
(isa owns CotemporalObjectsSlot)
(isa owns AsymmetricBinaryPredicate)
(not 
  (isa owns TransitiveBinaryPredicate))
(not 
  (isa owns ReflexiveBinaryPredicate))
(genlPreds owns hasOwnershipIn)
(genlPreds owns cotemporal)
(arg1Isa owns Agent)
(arg2Isa owns SomethingExisting)
(comment owns "(owns AGENT OBJECT) means that AGENT owns OBJECT -- that is, AGENT enjoys FullUseRights (q.v.) over OBJECT.  
Note:  There are commonsense rules relating owns to controls.  E.g., ownership typically implies control.  But they are just default rules, as there are many exceptions (e.g., when the owner of a building leases it to a company for ten years, the owner gives up almost all `control' over it during that decade).")
(synonymousExternalConcept owns SENSUS-Information1997 "OWNERSHIP")

;;; ownsShare
(isa ownsShare TernaryPredicate)
(arg1Isa ownsShare Agent)
(arg2Isa ownsShare SomethingExisting)
(arg3Isa ownsShare NonNegativeNumber)
(comment ownsShare "The predicate ownsShare is used to state how much of some thing is owned by a particular Agent.  (ownsShare AGENT SOMETHING SHARE) means that the Agent AGENT has SHARE Percent (q.v.) ownership of the object or company SOMETHING.  Note that SHARE is a percentage and does not refer directly to a number of shares of Stock.")

;;; parallelObjects
(isa parallelObjects ReflexiveBinaryPredicate)
(isa parallelObjects TransitiveBinaryPredicate)
(isa parallelObjects SymmetricBinaryPredicate)
(isa parallelObjects SpatialPredicate)
(genlInverse parallelObjects parallelObjects)
(arg1Isa parallelObjects SpatialThing)
(arg2Isa parallelObjects SpatialThing)
(comment parallelObjects "(parallelObjects OBJ1 OBJ2) means that both OBJ1 and OBJ2 have a lengthwise axis, and those axes are parallel to each other.")

;;; parallelVectors
(isa parallelVectors TransitiveBinaryPredicate)
(isa parallelVectors ReflexiveBinaryPredicate)
(isa parallelVectors SymmetricBinaryPredicate)
(genlInverse parallelVectors parallelVectors)
(arg1Isa parallelVectors VectorInterval)
(arg2Isa parallelVectors VectorInterval)
(comment parallelVectors "(parallelVectors VECTOR1 VECTOR2) means that VECTOR1 is parallel to VECTOR2.")

;;; parentActors
(isa parentActors IrreflexiveBinaryPredicate)
(isa parentActors AsymmetricBinaryPredicate)
(isa parentActors ActorSlot)
(genlPreds parentActors preActors)
(arg1Isa parentActors BiologicalProductionEvent)
(arg2Isa parentActors BiologicalLivingObject)
(comment parentActors "(parentActors EV P) means that organism P is one of the parents in the BiologicalReproductionEvent EV.")

;;; parentCompany
(isa parentCompany BinaryPredicate)
(arg1Isa parentCompany Organization)
(arg2Isa parentCompany Business)
(comment parentCompany "The predicate parentCompany relates an organization to the business which is its parent company.  (parentCompany ORG1 ORG2) means that ORG1 is a (partly or wholly owned) subsidiary of ORG2.  ORG2 is the parent company that owns and substantially controls ORG1.  E.g., (parentCompany TheLAWeekly TheVillageVoice).")

;;; partitionedInto
(isa partitionedInto TaxonomicSlot)
(genlPreds partitionedInto covering)
(arg1Isa partitionedInto SetOrCollection)
(arg2Isa partitionedInto DisjointSetOrCollection)
(comment partitionedInto "(partitionedInto SETORCOL PART) means that the mathematical set or collection PART is a partition of the mathematical set or collection SETORCOL -- that is, the elements of PART are themselves mathematical sets or collections, and every element of SETORCOL is an element of exactly one element of PART, and every element of PART is a subset of SETORCOL.  Or to put it another way, PART is a set or collection of disjoint sets or collections whose union is co-extensional with SETORCOL.  Typically, the DisjointSetOrCollection that plays the role of PART in an assertion about partitioning will be a set specified by enumerating its elements, using the function ThePartition.  (This is a special ReifiableFunction whose principal reason-for-being is to facilitate the inference heuristics associated with assertions about partitioning.)")

;;; parts
(isa parts PartPredicate)
(isa parts TransitiveBinaryPredicate)
(isa parts AntiSymmetricBinaryPredicate)
(isa parts ReflexiveBinaryPredicate)
(genlPreds parts 
  (MeaningInSystemFn SENSUS-Information1997 "GENERALIZED-POSSESSION"))
(arg1Isa parts Individual)
(arg2Isa parts Individual)
(comment parts "(parts WHOLE PART) means that Individual PART is a part of Individual WHOLE.  This predicate is very general.  It can be used to refer to concepts including physicalParts, subEvents, timeSlices, and groupMembers.")

;;; passengers
(isa passengers ActorSlot)
(isa passengers AsymmetricBinaryPredicate)
(isa passengers IrreflexiveBinaryPredicate)
(genlPreds passengers transportees)
(arg1Isa passengers TransportationEvent)
(arg2Isa passengers Person)
(comment passengers "(passengers MOVE PAS) means that PAS is a human transportees in MOVE who is not a driverActor for any subEvents of Move.  Any PAS is not a driverActor for any subEvents of MOVE.  PAS is likely to be sitting (see SittingPosture) during the MOVE.")

;;; pastTense
(isa pastTense IntangibleObjectPredicate)
(isa pastTense BinaryPredicate)
(arg1Isa pastTense EnglishWord)
(arg2Isa pastTense CharacterString)
(comment pastTense "(pastTense WORD STRING) means that STRING is the past tense verb form of WORD. The regular past tense form is formed from the infinitive verb form with an `-ed' suffix.  Verbs in the Cyc lexicon will have a pastTense entry only if they are irregular. Regular forms are generated by the morphology component. Regular example: `helped'. Irregular example: `ate'.")

;;; pathBetween
(isa pathBetween TernaryPredicate)
(arg1Isa pathBetween Path-Simple)
(arg2Isa pathBetween Thing)
(arg3Isa pathBetween Thing)
(comment pathBetween "(pathBetween PATH X Y) means that the Path-Simple PATH goes between points (or places) X and Y, where X and Y do not 'overlap', and no further.  Both X and Y have to be on PATH (see pointOnPath).  Note that (pathBetween PATH X Y) is more specific than (pathConnects PATH X Y) because here the PATH cannot extend beyond X and Y.  Within a particular PathSystem, a path's end points in the system are unique, and pathBetweenInSystem is restricted to paths and points in the system.  When considered without a context of a path system, a path may have several different places at one end, such as Austin and Texas both being at the same end of some path along Highway I-35.")

;;; pathConnects
(isa pathConnects TernaryPredicate)
(isa pathConnects SpatialPredicate)
(arg1Isa pathConnects Path-Simple)
(arg2Isa pathConnects SpatialThing)
(arg3Isa pathConnects SpatialThing)
(comment pathConnects "(pathConnects PATH HERE THERE) means that PATH is an individual element of Path-Simple that connects HERE and THERE.  Often PATH is a physical path or connection along which objects or information capable of using that path may travel, back and forth, between HERE and THERE.  Note that (pathConnects ?PATH ?A ?B) doesn't mean that PATH cant't extend beyond ?A and ?B (in contrast with pathBetween ?A ?B).")

;;; pathTerminus
(isa pathTerminus BinaryPredicate)
(arg1Isa pathTerminus Path-Simple)
(arg2Isa pathTerminus PartiallyTangible)
(comment pathTerminus "pathTerminus (PATH END) means that END is a terminating end of a Path-Customary PATH, and that there are no further paths of the same type issuing from END.  The terminal end of any Path-Customary may be a dead-end, closed off path end, or it may be open, or it may be a terminus of motion; it is not generally a JunctionOfPaths with one or more paths of the same basic type issuing beyond it.  Contrast this with the predicate deadEndInSystem that indicates a terminus with respect to a specified PathSystem only.")

;;; pathway-Complete
(isa pathway-Complete ActorSlot)
(isa pathway-Complete FunctionalSlot)
(genlPreds pathway-Complete pathway-Partial)
(arg1Isa pathway-Complete Movement-TranslationEvent)
(arg2Isa pathway-Complete Path-Generic)
(comment pathway-Complete "The predicate pathway-Complete is used to indicate the whole route travelled by a moving object in a particular event.  (pathway-Complete MOVE PATH) means that PATH is the entire trajectory along which an objectMoving travels in the Movement-TranslationEvent MOVE.  There is exactly one pathway-Complete if (and only if) MOVE is an element of Translation-SinglePath.  If MOVE is an element of Translation-MultiPath, then there are at least two pathway-Completes; i.e., at least two distinct values of PATH such that (pathway-Complete MOVE PATH) is true.  PATH may be a marked or unmarked Path-Generic (q.v.).  By definition, the pathway-Complete of a Movement-TranslationEvent connects the starting and stopping points (fromLocation, toLocation) of the whole movement event.  (See also pathConnects.)  Use pathwayPassesThrough to state that an object passes through a particular location on the Path-Generic. 



Note:  Compare pathway-Complete with pathway-Partial; the former refers to the entire route of a particular Translation-Complete.  A sub-region of a pathway-Complete is NOT itself considered a pathway-Complete of the same movement event; i.e., if (pathway-Complete MOVE PATH) is true, and we cut PATH up into ten pieces PATH1, ..., PATH10, then it will generally not be true that (pathway-Complete MOVE PATH8),  but it will be true that (pathway-Partial MOVE PATH8).")
(synonymousExternalConcept pathway-Complete SENSUS-Information1997 "PATH")

;;; pathway-Partial
(isa pathway-Partial ActorSlot)
(genlPreds pathway-Partial eventOccursAt)
(genlPreds pathway-Partial temporallyIntersects)
(arg1Isa pathway-Partial Movement-TranslationEvent)
(arg2Isa pathway-Partial Path-Generic)
(comment pathway-Partial "(pathway-Partial EVENT PATH) means that EVENT is a movement along a trajectory (see pathway-Complete) which has a sub-path in common with a sub-path of PATH.  For example, if a certain trip to Dallas from Austin is via highway I-35, that does not mean either that the whole journey is along I-35 (it also may be along driveways and side streets), or that it is along all of I-35 (which would take you from the Mexican border all the way to the Canadian border).  A part of the journey is along a part of I-35.  This is in contrast to pathway-Complete, which relates a movement to its entire path.")

;;; pathwayPassesThrough
(isa pathwayPassesThrough ActorSlot)
(genlPreds pathwayPassesThrough nonDeliberateActors)
(arg1Isa pathwayPassesThrough Translation-SinglePath)
(arg2Isa pathwayPassesThrough PartiallyTangible)
(comment pathwayPassesThrough "(pathwayPassesThrough MOVE LOC) means that the pathway-Complete of MOVE, which is an instance of Translation-SinglePath, passes through LOC, which is an instance of PartiallyTangible, and thus can be a location, a river or another path, etc.  More formally, any objectMoving which undergoes motion from the fromLocation to the toLocation passes through LOC.  Here `passes through LOC' means that OBJ both arrives and leaves LOC.  Thus, LOC can not be a super region of any fromLocation nor any toLocations of MOVE. Otherwise it would be possible to state (pathwayPassesThrough TripToTheStore01 TheUniverse).  On the other hand, LOC can be a sub region of some toLocation or some fromLocation.")

;;; perceives
(isa perceives PerceivingSlot)
(arg1Isa perceives PerceptualAgent)
(arg2Isa perceives SpatialThing)
(arg2Isa perceives TemporalThing)
(comment perceives "(perceives AGENT OBJ) means that AGENT has come to know of OBJ via the action of at least one of its senses (e.g. sight, hearing, smell, etc).  Precisely what tangible aspects of OBJ have been apprehended depend on the sensory modality used (see predicates which have perceives as a genlPreds).  For example, if (sees AGENT OBJ), then AGENT knows of some visual aspects of OBJ.  Whereas if (smells AGENT OBJ), then AGENT knows of some olfactory aspects of OBJ.  Only tangible things, PhysicalEvents or PartiallyTangibles, can be perceived")

;;; perfect
(isa perfect IntangibleObjectPredicate)
(isa perfect BinaryPredicate)
(arg1Isa perfect EnglishWord)
(arg2Isa perfect CharacterString)
(comment perfect "(perfect WORD STRING) means that STRING is the perfect verb form of WORD. This form is also known as the past participle. The regular perfect verb form is often the same as the past tense verb form. Verbs in the Cyc lexicon will have a perfect entry only if they are irregular. Regular forms are generated by the morphology component. Regular example: `helped'. Irregular example: `eaten'.")

;;; performanceLevel
(isa performanceLevel QuintaryPredicate)
(isa performanceLevel FunctionalPredicate)
(arg1Isa performanceLevel SomethingExisting)
(arg2Isa performanceLevel Event)
(arg3Isa performanceLevel ActorSlot)
(arg4Isa performanceLevel ScriptPerformanceAttributeType)
(arg4Genl performanceLevel ScriptPerformanceAttribute)
(arg5Isa performanceLevel GenericAttribute)
(comment performanceLevel "This predicate relates performers to particular individual actions.  (performanceLevel OBJ EVT ROLE PERF-ATT LEVEL) means that the individual OBJ plays the role ROLE in the action EVT, and does so with the performance attribute PERF-ATT to the degree LEVEL.  Such an assertion expresses actual performance in a particular action; for example, (performanceLevel Joe DiggingHole54001 performedBy Strength Low) means Joe exerted a low level of strength while digging that particular hole.  This does not imply much about Joe's potential to exert strength, about strength required in general for hole-digging, etc., it just talks about that one single event.  To talk about typical or expected performance, use skillLevel.")

;;; performedBy
(isa performedBy ActorSlot)
(genlPreds performedBy doneBy)
(genlPreds performedBy deliberateActors)
(arg1Isa performedBy Action)
(arg2Isa performedBy Agent)
(comment performedBy "The predicate performedBy relates an event to an agent who performs it deliberately, which in Cyc means, intentionally and volitionally.  (performedBy ACT DOER) means that the agent DOER deliberately does the action ACT.  DOER must be an Agent.  For example, (performedBy AssassinationOfPresidentLincoln JohnWilkesBooth).  If ACT has multiple performers, ACT will be performedBy each of them.  See also deliberateActors, doneBy.")

;;; performedByPart
(isa performedByPart ActorSlot)
(genlPreds performedByPart performedBy)
(arg1Isa performedByPart Action)
(arg2Isa performedByPart Organization)
(comment performedByPart "(performedByPart ACT ORG) means that the Organization ORG is considered to be the performer of the Action ACT, though in fact only some subordinate part of ORG (i.e., a member or a sub-organization), rather than all of the organization, is directly involved in ACT.  For example, (performedByPart OperationDesertStorm USArmy) since only certain divisions of the US Army participated in Operation Desert Storm.")

;;; perpendicularObjects
(not 
  (isa perpendicularObjects TransitiveBinaryPredicate))
(isa perpendicularObjects IrreflexiveBinaryPredicate)
(isa perpendicularObjects SymmetricBinaryPredicate)
(isa perpendicularObjects SpatialPredicate)
(genlInverse perpendicularObjects perpendicularObjects)
(arg1Isa perpendicularObjects PartiallyTangible)
(arg2Isa perpendicularObjects PartiallyTangible)
(comment perpendicularObjects "(perpendicularObjects OBJ1 OBJ2) means that the longest axis of OBJ1 is perpendicular to the longest axis of OBJ2.")

;;; perpendicularVectors
(isa perpendicularVectors SymmetricBinaryPredicate)
(not 
  (isa perpendicularVectors TransitiveBinaryPredicate))
(not 
  (isa perpendicularVectors ReflexiveBinaryPredicate))
(not 
  (isa perpendicularVectors IrreflexiveBinaryPredicate))
(genlInverse perpendicularVectors perpendicularVectors)
(arg1Isa perpendicularVectors VectorInterval)
(arg2Isa perpendicularVectors VectorInterval)
(comment perpendicularVectors "(perpendicularVectors VECTOR1 VECTOR2) means that VECTOR1 is perpendicular to VECTOR2.  E.g., (perpendicularVectors SouthEast-Directly SouthWest-Directly),  (perpendicularVectors East-Directly North-Directly).")

;;; perpetrator
(isa perpetrator IrreflexiveBinaryPredicate)
(isa perpetrator AsymmetricBinaryPredicate)
(isa perpetrator ActorSlot)
(genlPreds perpetrator performedBy)
(arg1Isa perpetrator Action)
(arg2Isa perpetrator SocialBeing)
(comment perpetrator "The Agent(s) that performed this possibly criminal act.")

;;; phoneNumberText
(isa phoneNumberText BinaryPredicate)
(arg1Isa phoneNumberText ContactLocation)
(arg2Isa phoneNumberText PhoneNumber)
(comment phoneNumberText "The predicate phoneNumberText is used to relate a telephone number to a contact location.  (phoneNumberText LOC NUM) means NUM is a string denoting (one of) the phone number(s) of the ContactLocation LOC.")

;;; physicalDecompositions
(isa physicalDecompositions PhysicalPartPredicate)
(isa physicalDecompositions TransitiveBinaryPredicate)
(isa physicalDecompositions AntiSymmetricBinaryPredicate)
(isa physicalDecompositions ReflexiveBinaryPredicate)
(isa physicalDecompositions CotemporalObjectsSlot)
(genlPreds physicalDecompositions parts)
(genlPreds physicalDecompositions spatiallyIntersects)
(genlPreds physicalDecompositions cotemporal)
(genlInverse physicalDecompositions inRegion)
(arg1Isa physicalDecompositions PartiallyTangible)
(arg2Isa physicalDecompositions PartiallyTangible)
(comment physicalDecompositions "(physicalDecompositions WHOLE PART) -- PART is any spatial part or decomposition of WHOLE.  PART may be discontinuous, diffused throughout the object, discrete and identifiable, etc.")

;;; physicalExtent
(isa physicalExtent FunctionalSlot)
(isa physicalExtent TransitiveBinaryPredicate)
(isa physicalExtent AntiSymmetricBinaryPredicate)
(not 
  (isa physicalExtent ReflexiveBinaryPredicate))
(not 
  (isa physicalExtent IrreflexiveBinaryPredicate))
(genlPreds physicalExtent parts)
(arg1Isa physicalExtent CompositeTangibleAndIntangibleObject)
(arg2Isa physicalExtent PartiallyTangible)
(comment physicalExtent "(physicalExtent WHOLE PART) means that PART is the physical part of the CompositeTangibleAndIntangibleObject WHOLE.")

;;; physicalParts
(isa physicalParts PhysicalPartPredicate)
(isa physicalParts TransitiveBinaryPredicate)
(isa physicalParts ReflexiveBinaryPredicate)
(isa physicalParts AntiSymmetricBinaryPredicate)
(isa physicalParts CotemporalObjectsSlot)
(isa physicalParts PhysicalFeatureDescribingPredicate)
(genlPreds physicalParts physicalDecompositions)
(genlPreds physicalParts cotemporal)
(arg1Isa physicalParts PartiallyTangible)
(arg2Isa physicalParts PartiallyTangible)
(comment physicalParts "(physicalParts WHOLE PART) -- WHOLE is a physical object and PART is one of its distinct, non-diffuse, identifiable parts, such as the relationship between a car and its wheels or bumpers.  The physicalParts of an object include only those spatial decompositions which are distinct, identifiable parts.")

;;; physicalPortions
(isa physicalPortions PhysicalPartPredicate)
(isa physicalPortions CotemporalObjectsSlot)
(genlPreds physicalPortions physicalDecompositions)
(genlPreds physicalPortions cotemporal)
(arg1Isa physicalPortions PartiallyTangible)
(arg2Isa physicalPortions PartiallyTangible)
(comment physicalPortions "(physicalPortions ?WHOLE ?PART) means ?PART is a representative spatial chunk of ?WHOLE.  Every intrinsic property which is true of ?WHOLE should be true of ?PART.  Spatial parts of ?WHOLE which are not representative of the whole would be physicalParts or physicalDecompositions , not physicalPortions.  For example, the SpaghettiSauce001 which is part of SpaghettiDinner001 is a physicalParts of the dinner.  A physicalPortions of the dinner would include some sauce, some noodles, some parmesan cheese, etc. - parts of all the constituents.   This is the spatial analog of timeSlices (not subEvents).")

;;; physicalQuarters
(isa physicalQuarters SubProcessSlot)
(arg1Isa physicalQuarters Organization)
(arg2Isa physicalQuarters ConstructionArtifact)
(comment physicalQuarters "The predicate physicalQuarters is used to relate an organization to the building(s) it occupies.  (physicalQuarters ORG BLDG) means that the Organization ORG is located in the ConstructionArtifact BLDG, which may consist of one or more buildings, rooms, offices, etc.")

;;; physicalStructuralAttributes
(isa physicalStructuralAttributes BinaryPredicate)
(isa physicalStructuralAttributes TangibleSubstancePredicate)
(genlPreds physicalStructuralAttributes hasAttributes)
(arg1Isa physicalStructuralAttributes PartiallyTangible)
(arg2Isa physicalStructuralAttributes PhysicalStructuralAttribute)
(comment physicalStructuralAttributes "(physicalStructuralAttributes OBJ ATT) means that the physical structure of the tangible object OBJ is (at least partially) determined or described by its attribute ATT.  See also PhysicalStructuralAttribute.")

;;; physicalStructuralIntegrity
(isa physicalStructuralIntegrity BinaryPredicate)
(isa physicalStructuralIntegrity TangibleSubstancePredicate)
(arg1Isa physicalStructuralIntegrity PartiallyTangible)
(arg2Isa physicalStructuralIntegrity GenericAttribute)
(comment physicalStructuralIntegrity "(physicalStructuralIntegrity SUBST DEGREE) means that the tangible object SUBST has DEGREE ability to maintain its physical structure intact in the face of various forces.  DEGREE is a GenericAttribute.  The physicalStructuralIntegrity of an object may be inferred from some of its other physical attributes; e.g., something with the physicalStructuralAttributes Granular has a Low degree of physicalStructuralIntegrity; things whose stateOfMatter is LiquidStateOfMatter have VeryLow physicalStructuralIntegrity.")

;;; pipeEndsAtCavity
(isa pipeEndsAtCavity ConnectionPredicate)
(isa pipeEndsAtCavity SpatialPredicate)
(isa pipeEndsAtCavity AsymmetricBinaryPredicate)
(genlPreds pipeEndsAtCavity connectedTo-Rigidly)
(genlPreds pipeEndsAtCavity pathTerminus)
(arg1Isa pipeEndsAtCavity Pipe-GenericConduit)
(arg2Isa pipeEndsAtCavity PartiallyTangible)
(comment pipeEndsAtCavity "(pipeEndsAtCavity PIPE CAV) means that PIPE is a Pipe-GenericConduit that joins the larger-diameter Cavity CAV at a PipeEndToCavityJunction, allowing flow or access between them.  The flange where a water pipe enters a water tank is one example, as is the junction of the Esophagus and the Stomach in animals.  See also the collection PipeEndToCavityJunction.")

;;; pipesDirectlyConnected
(isa pipesDirectlyConnected ConnectionPredicate)
(isa pipesDirectlyConnected SymmetricBinaryPredicate)
(genlPreds pipesDirectlyConnected connectedTo)
(genlInverse pipesDirectlyConnected pipesDirectlyConnected)
(arg1Isa pipesDirectlyConnected Pipe-GenericConduit)
(arg2Isa pipesDirectlyConnected Pipe-GenericConduit)
(comment pipesDirectlyConnected "(pipesDirectlyConnected PIPE1 PIPE2) means that there is a JunctionOfPipes connecting two Pipe-GenericConduits, PIPE1 to PIPE2, (or else they are endToEndConnected) allowing flow of FluidTangibleThings between them.")

;;; plaintiffs
(isa plaintiffs IrreflexiveBinaryPredicate)
(isa plaintiffs AsymmetricBinaryPredicate)
(isa plaintiffs ActorSlot)
(genlPreds plaintiffs litigants)
(arg1Isa plaintiffs Trial)
(arg2Isa plaintiffs Agent)
(comment plaintiffs "(plaintiffs ARG1 ARG2) means that the agent ARG2 is the complaining party (the party bringing an accusation of wrong-doing) in the lawsuit ARG1.")

;;; plural
(isa plural IntangibleObjectPredicate)
(isa plural BinaryPredicate)
(arg1Isa plural EnglishWord)
(arg2Isa plural CharacterString)
(comment plural "(plural WORD STRING) means that STRING is the plural noun form of WORD.  For example, the plural form of Hit-TheWord is `hits', and the plural form of Goose-TheWord is `geese'.")

;;; pointClosedSubSystems
(isa pointClosedSubSystems ReflexiveBinaryPredicate)
(isa pointClosedSubSystems TransitiveBinaryPredicate)
(isa pointClosedSubSystems AntiSymmetricBinaryPredicate)
(genlPreds pointClosedSubSystems subPathSystems)
(arg1Isa pointClosedSubSystems Thing)
(arg2Isa pointClosedSubSystems Thing)
(comment pointClosedSubSystems "(pointClosedSubSystems SYS SUBSYS) means that the path system SUBSYS is a subsystem of the path system SYS (i.e., (subPathSystems SYS SUBSYS) holds) and SUBSYS 'preserves' all points in SYS that are on links in SUBSYS, i.e., if LINK is a link in SUBSYS (and hence is a link in SYS) and X is a point in SYS and is on LINK, then X must be a point in SUBSYS.")

;;; pointInSystem
(isa pointInSystem AsymmetricBinaryPredicate)
(arg1Isa pointInSystem Thing)
(arg2Isa pointInSystem Thing)
(comment pointInSystem "(pointInSystem POINT SYS) means that POINT is an instance of Thing, SYS is an instance of PathSystem, and POINT is a 'point' on a path in SYS or is a 'node' in SYS.  Note that for each path system SYS there is at least one POINT such that (pointInSystem POINT SYS) holds.  For any path system SYS, the set of all points in SYS has an important subset, the set of all 'nodes' in SYS.  See nodeInSystem for the difference between nodes and points that are not nodes in a path system.  Note that in some cases (such as making a 'closed world' or talking about different systems), using (PointFn SYS) to denote the set of all points in a path system SYS is more convenient than using the predicate pointInSystem.")

;;; pointOfContact
(isa pointOfContact TernaryPredicate)
(arg1Isa pointOfContact Agent)
(arg2Isa pointOfContact ContactLocationType)
(arg2Genl pointOfContact ContactLocation)
(arg3Isa pointOfContact ContactLocation)
(comment pointOfContact "The predicate pointOfContact (pointOfContact AGENT LOCTYPE LOC) means the Agent AGENT has as its LOCTYPE (a ContactLocationType such as Workplace, HumanResidence, BillingLocation, etc.) a particular ContactLocation LOC, where that agent can be contacted.  Typically, LOC is a complete address, i.e., it is not a generic location such as Austin, TX.")

;;; pointOfContactInfo
(isa pointOfContactInfo QuaternaryPredicate)
(arg1Isa pointOfContactInfo Agent)
(arg2Isa pointOfContactInfo ContactLocationType)
(arg2Genl pointOfContactInfo ContactLocation)
(arg3Isa pointOfContactInfo BinaryPredicate)
(arg4Isa pointOfContactInfo Thing)
(comment pointOfContactInfo "The predicate pointOfContactInfo allows us to characterize a string of information as belonging to a certain kind of contact location for a particular person, without actually reifying those contact locations.  (pointOfContactInfo AGENT LOC-TYPE INFO-TYPE STRING) means that AGENT's contact locations of type LOC-TYPE (e.g., Workplace) have STRING as their contact address of INFO-TYPE (e.g., phoneNumberText, faxNumberText, addressText).  For example, to say that Keith Goolsbey's home phone number is 512-123-4567, we write: (pointOfContactInfo Goolsbey HumanResidence phoneNumberText ``(512) 123-4567'').  Note: the disadvantage of this shorthand method is that all of AGENT's contact locations of the type LOC-TYPE are assumed to have the same STRING of INFO-TYPE.")

;;; pointingToward
(not 
  (isa pointingToward AsymmetricBinaryPredicate))
(not 
  (isa pointingToward AntiSymmetricBinaryPredicate))
(not 
  (isa pointingToward SymmetricBinaryPredicate))
(not 
  (isa pointingToward TransitiveBinaryPredicate))
(isa pointingToward BinaryPredicate)
(isa pointingToward SpatialPredicate)
(arg1Isa pointingToward PartiallyTangible)
(arg2Isa pointingToward PartiallyTangible)
(comment pointingToward "(pointingToward OBJ1 OBJ2) means that OBJ1 has a pointing axis and that its axis points toward OBJ2.  A pointing axis is ascribed to objects that have directionality (e.g., a gun, a projectile, an arrow, an extended finger).")

;;; pointsOfContact
(isa pointsOfContact BinaryPredicate)
(arg1Isa pointsOfContact Agent)
(arg2Isa pointsOfContact ContactLocation)
(comment pointsOfContact "The predicate pointsOfContact indicates the places at which a particular agent can be reached.  (pointsOfContact AGENT LOC) means that the Agent AGENT can be contacted at the ContactLocation LOC.")

;;; porosityOfObject
(isa porosityOfObject IntervalBasedQuantitySlot)
(isa porosityOfObject TangibleObjectPredicate)
(isa porosityOfObject PhysicalAttributeDescriptionSlot)
(arg1Isa porosityOfObject PartiallyTangible)
(arg2Isa porosityOfObject Porosity)
(comment porosityOfObject "(porosityOfObject OBJ DEGREE) means that the tangible object OBJ has the degree of Porosity DEGREE.")

;;; portalConnectsRegions
(isa portalConnectsRegions TernaryPredicate)
(arg1Isa portalConnectsRegions Portal)
(arg2Isa portalConnectsRegions PartiallyTangible)
(arg3Isa portalConnectsRegions PartiallyTangible)
(comment portalConnectsRegions "(portalConnectsRegions PORTAL HERE THERE) means that the regions HERE and THERE each contain PORTAL as a physical part.")

;;; portalHasCovering
(isa portalHasCovering CotemporalObjectsSlot)
(isa portalHasCovering PhysicalPartPredicate)
(genlPreds portalHasCovering physicalParts)
(arg1Isa portalHasCovering Portal)
(arg2Isa portalHasCovering PortalCovering)
(comment portalHasCovering "A general predicate for relating instances of portal to their coverings.  Specpreds include doorwayHasCovering and windowHasCovering.")

;;; posForms
(isa posForms BinaryPredicate)
(arg1Isa posForms EnglishWord)
(arg2Isa posForms LinguisticObjectType)
(arg2Genl posForms SpeechPart)
(comment posForms "The predicate posForms is used to indicate the different parts of speech that a particular English word has associated with it.  (posForms WORD POS) means that the EnglishWord WORD has a form that can serve as the SpeechPart POS.  For example, Dot-TheWord has forms for both SimpleNoun and Verb.  Forms of a word used for different parts of speech may or may not differ from each other in sound and/or spelling.  To find out, or to specify, the string that represents a particular POS form of a specific word, use partOfSpeech.")

;;; positiveVestedInterest
(isa positiveVestedInterest BinaryPredicate)
(not 
  (isa positiveVestedInterest TransitiveBinaryPredicate))
(not 
  (isa positiveVestedInterest SymmetricBinaryPredicate))
(not 
  (isa positiveVestedInterest AntiSymmetricBinaryPredicate))
(not 
  (isa positiveVestedInterest AsymmetricBinaryPredicate))
(not 
  (isa positiveVestedInterest ReflexiveBinaryPredicate))
(not 
  (isa positiveVestedInterest IrreflexiveBinaryPredicate))
(arg1Isa positiveVestedInterest Agent)
(arg2Isa positiveVestedInterest TemporalThing)
(comment positiveVestedInterest "(positiveVestedInterest AGT OBJ) means Agent AGT has a positive interest in the object OBJ or in the good fortune of OBJ.  Generally, AGT will be helped or pleased by the preservation or enhancement of OBJ.
Note:  the restriction of OBJ to TemporalThing means that it would be incorrect to use this predicate to say that Douglas Adams has a positiveVestedInterest in the number 42.  Rather, what he has a vested interest in is public popularity and faddism focusing on that number.  A fad is a TemporalThing, but the number 42 isn't.")

;;; possesses
(isa possesses Predicate)
(arg1Isa possesses Agent)
(arg2Isa possesses SomethingExisting)
(comment possesses "(possesses AGENT OBJECT) means that OBJECT is in the physical possession of AGENT.  Compare with owns.")

;;; postActors
(isa postActors ActorSlot)
(genlPreds postActors actors)
(genlInverse postActors endsAfterEndingOf)
(arg1Isa postActors Event)
(arg2Isa postActors SomethingExisting)
(comment postActors "The predicate postActors is used to indicate a participant that continues to exist after a particular event.  (postActors EVENT OBJECT) means that OBJECT exists after EVENT ends.  It makes no commitment about OBJECT's condition before or during EVENT.  postActors is a very general element of ActorSlot; it subsumes outputsCreated, doneBy, and many others.")

;;; postConfiguration
(isa postConfiguration BinaryPredicate)
(genlInverse postConfiguration startsAfterEndingOf)
(arg1Isa postConfiguration Event)
(arg2Isa postConfiguration StaticSituation)
(comment postConfiguration "(postConfiguration EVT CONFIG) means CONFIG is a Configuration that begins immediately after the action EVT ends, and is directly (probably causally) related to EVT.  See postEvents and preConfiguration for related predicates.")
(overlappingExternalConcept postConfiguration SENSUS-Information1997 "POSTCONDITION")

;;; postEvents
(isa postEvents Role)
(isa postEvents ComplexTemporalRelation)
(isa postEvents TransitiveBinaryPredicate)
(isa postEvents AsymmetricBinaryPredicate)
(genlInverse postEvents startsAfterEndingOf)
(arg1Isa postEvents Event)
(arg2Isa postEvents Event)
(comment postEvents "This predicate relates one event to another that follows it.  (postEvents BEFORE AFTER) implies two things: 

(1) BEFORE occurs strictly before AFTER; i.e., AFTER starts after BEFORE has ended; i.e., (startsAfterEndingOf AFTER BEFORE); and

(2) BEFORE and AFTER are significantly relevant to each other.  This required `relevance' of the two arguments to each other is difficult to formalize but often intuitively clearcut.  Often, e.g., AFTER is caused by BEFORE.")

;;; postalCodeOfAddress
(isa postalCodeOfAddress FunctionalSlot)
(arg1Isa postalCodeOfAddress ContactLocation)
(arg2Isa postalCodeOfAddress PostalCode)
(comment postalCodeOfAddress "The predicate postalCodeOfAddress maps from a particular element of ContactLocation to a corresponding element of PostalCode.  (postalCodeOfAddress LOC PC) means that the location LOC has the PostalCode PC.  For example, if LOC had the address: P.O. Box 1677-B, New York, NY, 10014, PC would be the string `10014'.  See also ContactLocation.")

;;; postureOfAnimal
(isa postureOfAnimal ShapeDescribingPredicate)
(isa postureOfAnimal FunctionalSlot)
(genlPreds postureOfAnimal hasAttributes)
(arg1Isa postureOfAnimal Animal)
(arg2Isa postureOfAnimal Posture)
(comment postureOfAnimal "(postureOfAnimal ?AN ?POS) means that the Animal ?AN is in the Posture ?POS.  Postures are types of attributes that describe bodily configurations and/or orientations of Animals.  See Posture for examples.")

;;; preActors
(isa preActors IrreflexiveBinaryPredicate)
(isa preActors ActorSlot)
(isa preActors AsymmetricBinaryPredicate)
(genlPreds preActors actors)
(genlPreds preActors startsAfterStartingOf)
(arg1Isa preActors Event)
(arg2Isa preActors SomethingExisting)
(comment preActors "The predicate preActors is used to indicate a participant that pre-exists a particular event.  (preActors EVENT OBJECT) means that OBJECT exists before EVENT begins.  It makes no commitment about OBJECT's condition during or after EVENT.  preActors is a very general ActorSlot, subsuming doneBy, objectActedOn, objectMoving, and many others.")

;;; preConfiguration
(isa preConfiguration IrreflexiveBinaryPredicate)
(isa preConfiguration AsymmetricBinaryPredicate)
(isa preConfiguration AntiTransitiveBinaryPredicate)
(genlPreds preConfiguration startsAfterEndingOf)
(arg1Isa preConfiguration Event)
(arg2Isa preConfiguration StaticSituation)
(comment preConfiguration "(preConfiguration EVT CONFIG) means CONFIG is an element of Configuration that holds just prior to the start of EVT, and CONFIG is directly related to EVT.  The required `salience' of the two arguments to each other is difficult to formalize but usually intuitively clearcut.  Commonly, CONFIG and EVT share many of the same objects involved in various roles, and there is often a causal connection as well.   For instance, the configuration CONFIG might be somehow `taken apart' by event EVT, might `trigger' EVT, etc.")
(overlappingExternalConcept preConfiguration SENSUS-Information1997 "PRECONDITION")

;;; presenter
(isa presenter IrreflexiveBinaryPredicate)
(isa presenter AsymmetricBinaryPredicate)
(isa presenter ActorSlot)
(genlPreds presenter socialParticipants)
(arg1Isa presenter SocialGathering)
(arg2Isa presenter Person)
(comment presenter "(presenter GATHERING PERSON) means that PERSON speaks to a set of audience members who have a role in GATHERING.")

;;; prettyName
(isa prettyName BinaryPredicate)
(arg1Isa prettyName CycIndexedTerm)
(arg2Isa prettyName CycSystemString)
(comment prettyName "(prettyName TERM STRING) means that STRING is the English word or           expression (sequence of words) commonly used to refer to the Cyc           term TERM.  The predicate prettyName is used by the code which           generates CycL to English paraphrases, but its applicability is not           restricted to this use.")

;;; primaryFunction
(isa primaryFunction TernaryPredicate)
(genlPreds primaryFunction intendedBehaviorCapable)
(arg1Isa primaryFunction Artifact)
(arg2Isa primaryFunction Collection)
(arg2Genl primaryFunction Situation)
(arg3Isa primaryFunction Role)
(comment primaryFunction "The predicate primaryFunction is used to indicate what an artifact was primarily designed to do.  (primaryFunction ART SITTYPE ROLE) means that the primary function of the Artifact OBJ is to serve as described by ROLE in situations of the type SITTYPE.  Examples: the primaryFunction of instances of MammographyFacility is to be the providerOfService in instances of MammographicBreastCancerScreening; the primaryFunction of a pump is to be the providerOfMotiveForce in instances of TransportingGoods in which liquids are transported.
Note: in the SimpleDeviceFunctioningMt, it is assumed that every PhysicalDevice has only one primary function.")

;;; primitiveAttributeTypes
(isa primitiveAttributeTypes BinaryPredicate)
(arg1Isa primitiveAttributeTypes CompositeAttributeType)
(arg2Isa primitiveAttributeTypes PrimitiveAttributeType)
(comment primitiveAttributeTypes "The Cyc predicate primitiveAttributeTypes is used to relate a type of complex attribute to its basic components.  (primitiveAttributeTypes COMP PRIM) means that PRIM is an element of PrimitiveAttributeType that makes up the CompositeAttributeType, COMP.  PRIM can be thought of as one axis for the composite scale.  For example, hue, intensity, and saturation are each a primitive scale for the composite attribute `color'.  Another case: Speed is a primitive component of the composite attribute VelocityVector.")

;;; products
(isa products ActorSlot)
(genlPreds products outputs)
(arg1Isa products CreationOrDestructionEvent)
(arg2Isa products PartiallyTangible)
(comment products "(products EV OBJ) means that OBJ is one of the intended outputs of event EV.  For unintended outputs, see byProducts.  For a particular EV and OBJ, it will not be true that both (products EV OBJ) and (byProducts EV OBJ).")

;;; programUsed
(isa programUsed IrreflexiveBinaryPredicate)
(isa programUsed AsymmetricBinaryPredicate)
(isa programUsed ActorSlot)
(genlPreds programUsed instrument-Generic)
(genlPreds programUsed unchangedActors)
(arg1Isa programUsed Action)
(arg2Isa programUsed ComputerProgram)
(comment programUsed "(programUsed EV PROG) means that PROG is the computer program used in the action EV.")

;;; propositionalInfoAbout
(isa propositionalInfoAbout BinaryPredicate)
(arg1Isa propositionalInfoAbout PropositionalInformationThing)
(arg2Isa propositionalInfoAbout Thing)
(comment propositionalInfoAbout "(propositionalInfoAbout ?MT ?OBJ) means that the PropositionalInformationThing ?MT is 'about' ?OBJ, i.e. it is a Microtheory with assertions concerning this object.  For example, a microtheory which is the propositional content of a portrait of GeorgeWashington might only have GeorgeWashington as the ?OBJ of this predicate.")

;;; propositionsPerceived
(isa propositionsPerceived BinaryPredicate)
(arg1Isa propositionsPerceived Perceiving)
(arg2Isa propositionsPerceived CycFormula)
(comment propositionsPerceived "(propositionsPerceived PERCEIVING PROP) means that in the Perceiving event PERCEIVING, the perceiver mentally grasps the proposition(s) PROP.  E.g., ten people witness a particular car crash, and yet each one gets their own particular set of propositions which they later can relate to the police; there are ten separate Perceivings in this case, and each one has its own unique set of propositionsPerceived.")

;;; providerOfMotiveForce
(isa providerOfMotiveForce ActorSlot)
(genlPreds providerOfMotiveForce preActors)
(arg1Isa providerOfMotiveForce MovementEvent)
(arg2Isa providerOfMotiveForce PartiallyTangible)
(comment providerOfMotiveForce "(providerOfMotiveForce ACT OBJ) means that OBJ provides, through its expenditure of energy, a significant fraction of the physical force required to make ACT happen. For example, if ACT is an element of PedalingABicycle, OBJ will be the person who is operating the bike.  Another example: in the use of a belt sanding tool, there will be two values for providerOfMotiveForce, the electric sander and the person operating the sander.  In that case, although force is transmitted and applied through the sandpaper, the paper doesn't count as a providerOfMotiveForce, because it only transmits force and does not itself expend energy.   Note that inferences involving this constant require that every providerOfMotiveForce be a whole object, not just a part of an object.  For example: (=> (and (isa ?LOCO LocomotionEvent) (providerOfMotiveForce ?LOCO ?OBJ)) (objectMoving ?LOCO ?OBJ)) or (=> (and (isa ?LOC LocomotionEvent) (providerOfMotiveForce ?LOC ?PROV)) (doneBy ?LOC ?PROV)) or (domainAssumptions ManualHumanActivitiesMt (forAll ?U (forAll ?PERS (implies (and (isa ?U Action) (providerOfMotiveForce ?U ?PERS)) (isa ?PERS Person)))))).")

;;; providerOfService
(isa providerOfService ActorSlot)
(isa providerOfService AsymmetricBinaryPredicate)
(isa providerOfService IrreflexiveBinaryPredicate)
(genlPreds providerOfService deliberateActors)
(genlPreds providerOfService preActors)
(genlPreds providerOfService performedBy)
(arg1Isa providerOfService ServiceEvent)
(arg2Isa providerOfService Agent)
(comment providerOfService "The Cyc predicate providerOfService is used to relate a service to the agent that provides it.  (providerOfService SEVT AGT) means that the ServiceEvent SEVT is performed or provided by the Agent AGT.  Typically, AGT acts in order to serve the recipientOfService in SEVT.")

;;; purpose-RST
(isa purpose-RST RSTRelation)
(isa purpose-RST AsymmetricBinaryPredicate)
(arg1Isa purpose-RST LinguisticObject)
(arg2Isa purpose-RST LinguisticObject)
(comment purpose-RST "The discourse relation that holds between two segments of text when ARG1 specifies something which is initiated with the purpose of achieving ARG2. purpose-RST is agnostic as to volition; see also volitionalCause-RST.")
(synonymousExternalConcept purpose-RST SENSUS-Information1997 "RST-PURPOSE")

;;; purposeInEvent
(isa purposeInEvent ModalRelationship)
(isa purposeInEvent TernaryPredicate)
(arg1Isa purposeInEvent Agent)
(arg2Isa purposeInEvent PurposefulAction)
(arg3Isa purposeInEvent Goal)
(comment purposeInEvent "(purposeInEvent AGT EVT G) means that the agent AGT is taking part in event EVT because (1) AGT wants G to become true, and also (2) AGT expects and believes that EVT occurring will (help) make G true.")
(overlappingExternalConcept purposeInEvent SENSUS-Information1997 "PURPOSE")

;;; quotientUnits
(isa quotientUnits TernaryPredicate)
(isa quotientUnits BookkeepingPredicate)
(arg1Isa quotientUnits UnitOfMeasure)
(arg2Isa quotientUnits UnitOfMeasure)
(arg3Isa quotientUnits UnitOfMeasure)
(comment quotientUnits "The Cyc predicate quotientUnits is used to state what measurement units should be used for the quotient of two physical quantities, given the units measuring the dividend and divisor.  (quotientUnits UM-1 UM-2 QUOT-UM) means that the value of (QuotientFn (UM-1 x) (UM-2 y)) should be given in the units QUOT-UM.  Examples: (quotientUnits Newton SquareMeter Pascal-UnitOfPressure); (quotientUnits Unity DaysDuration PerDay); (quotientUnits (Micro Gram) (Milli Liter) MicrogramsPerMilliliter).  See also UnitOfMeasure, QuotientFn.")

;;; radius
(isa radius IntervalBasedQuantitySlot)
(isa radius PhysicalAttributeDescriptionSlot)
(arg1Isa radius PartiallyTangible)
(arg2Isa radius Distance)
(comment radius "The radius of an object with a circular shape.")

;;; raininessOfRegion
(isa raininessOfRegion IntervalBasedQuantitySlot)
(genlPreds raininessOfRegion hasAttributes)
(arg1Isa raininessOfRegion OutdoorLocation)
(arg2Isa raininessOfRegion Raininess)
(comment raininessOfRegion "(raininessOfRegion LOC DEGREE) indicates the intensity with which it is raining at the OutdoorLocation LOC.  (If it is not raining at LOC, it will be the case that (raininessOfRegion LOC (NoAmountFn Raininess)).)")

;;; rateOfRotationOfObject
(isa rateOfRotationOfObject PhysicalAttributeDescriptionSlot)
(arg1Isa rateOfRotationOfObject PartiallyTangible)
(arg2Isa rateOfRotationOfObject RateOfRotation)
(comment rateOfRotationOfObject "rateOfRotationOfObject relates an instance of PartiallyTangible to the rate of change of its physical component's angular separation from a reference vector as measured from a point of origin.")

;;; recipientOfInfo
(isa recipientOfInfo ActorSlot)
(genlPreds recipientOfInfo informationDestination)
(arg1Isa recipientOfInfo InformationTransferEvent)
(arg2Isa recipientOfInfo Agent)
(comment recipientOfInfo "The predicate recipientOfInfo is used to indicate who receives information in a particular communication event.  (recipientOfInfo TRANSFER RECIP) means that the information transferred in the InformationTransferEvent TRANSFER is received by the Agent RECIP.  After TRANSFER, RECIP understands or conceives of the information transferred in TRANSFER; Cyc does NOT conclude that s/he knows the information or counts it among his/her beliefs, because RECIP might not believe it.  In receiving the information transferred, RECIP may be acting intentionally or unintentionally.  See also infoTransferred.")
(synonymousExternalConcept recipientOfInfo SENSUS-Information1997 "ADDRESSEE")

;;; recipientOfService
(isa recipientOfService ActorSlot)
(genlPreds recipientOfService beneficiary)
(genlPreds recipientOfService preActors)
(genlPreds recipientOfService postActors)
(arg1Isa recipientOfService ServiceEvent)
(arg2Isa recipientOfService Agent)
(comment recipientOfService "(recipientOfService ACT AGNT) means the Agent AGNT is the recipient of the ServiceEvent ACT.  The service is performed on, for, or to AGNT, and AGNT is correspondingly affected by it.")

;;; reciprocalTransfers
(isa reciprocalTransfers AntiTransitiveBinaryPredicate)
(isa reciprocalTransfers SymmetricBinaryPredicate)
(genlInverse reciprocalTransfers reciprocalTransfers)
(arg1Isa reciprocalTransfers TransferringPossession)
(arg2Isa reciprocalTransfers TransferringPossession)
(comment reciprocalTransfers "(reciprocalTransfers ?T1 ?T2) means that ?T1 and ?T2 are transfers of possession done in exchange for each other.  They are part of some ExchangeOfUserRights.")

;;; reductionOfPathSystems
(isa reductionOfPathSystems TransitiveBinaryPredicate)
(isa reductionOfPathSystems AntiSymmetricBinaryPredicate)
(genlPreds reductionOfPathSystems linkClosedSubSystems)
(arg1Isa reductionOfPathSystems Thing)
(arg2Isa reductionOfPathSystems MultiGraph)
(comment reductionOfPathSystems "(reductionOfPathSystems SYS RED) means that (i) every node in SYS is a node in RED, (ii) every point in RED is a node in RED (and hence a node in SYS), and (iii) (linkClosedSubSystems SYS RED) holds. It is easy to see that when (reductionOfPathSystems SYS RED) holds, RED must be an instance of MultiGraph.  But RED is not only a multi-graph, it is THE multi-graph that underlies the path system SYS, i.e., the only difference between SYS and RED is that SYS is obtainable by adding to RED some points that are on a link in RED between the end-nodes.")

;;; referredServiceProvider
(isa referredServiceProvider IrreflexiveBinaryPredicate)
(isa referredServiceProvider AsymmetricBinaryPredicate)
(isa referredServiceProvider ActorSlot)
(genlPreds referredServiceProvider providerOfService)
(arg1Isa referredServiceProvider ServiceEvent)
(arg2Isa referredServiceProvider Agent)
(comment referredServiceProvider "The agent ARG2 who provides the service ARG1 was referred by another agent.")

;;; relationType
(isa relationType TernaryPredicate)
(isa relationType RuleMacroPredicate)
(arg1Isa relationType BinaryPredicate)
(arg2Isa relationType Collection)
(arg3Isa relationType Collection)
(comment relationType "(relationType SLOT COL1 COL2) means that, for every instance of COL1 (INS1), there is some instance of COL2 (INS2) such that (SLOT INS1 INS2) holds.  relationType is thus redundant with a huge set of commonly-occurring rules.  By having this predicate (along with an axiom defining it, and, eventually, coded support for quick inferencing with it), those rules can be stated more tersely and reasoning at the collection level is possible.")

;;; relationTypeCount
(isa relationTypeCount QuaternaryPredicate)
(arg1Isa relationTypeCount BinaryPredicate)
(arg2Isa relationTypeCount Collection)
(arg3Isa relationTypeCount Collection)
(arg4Isa relationTypeCount NonNegativeInteger)
(comment relationTypeCount "(relationTypeCount SLOT COL1 COL2 NUM) means that, for every instance of COL1 (INS1) there are exactly NUM instances of COL2 (INS2, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS1 INS3), ..., hold.  Thus, (relationTypeCount anatomicalParts Dog Leg 4) means simply `dogs have four legs'.")

;;; relationTypeMax
(isa relationTypeMax QuaternaryPredicate)
(arg1Isa relationTypeMax BinaryPredicate)
(arg2Isa relationTypeMax Collection)
(arg3Isa relationTypeMax Collection)
(arg4Isa relationTypeMax PositiveInteger)
(comment relationTypeMax "(relationTypeMax SLOT COL1 COL2 NUM) means that, for every instance of COL1 (INS1) there are at most NUM instances of COL2 (INS2, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS1 INS3), ..., hold.  Thus (relationTypeMax anatomicalParts Mammal Leg 4) would mean `every mammal has at most four legs'.")

;;; relationTypeMin
(isa relationTypeMin QuaternaryPredicate)
(arg1Isa relationTypeMin BinaryPredicate)
(arg2Isa relationTypeMin Collection)
(arg3Isa relationTypeMin Collection)
(arg4Isa relationTypeMin NonNegativeInteger)
(comment relationTypeMin "(relationTypeMin SLOT COL1 COL2 NUM) means that, for every instance of COL1 (INS1) there are at least NUM instances of COL2 (INS2, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS1 INS3), ..., hold.  Thus (relationTypeMin subEvents EatingEvent Swallowing 1) would mean `every eating event has at least one swallowing sub-event'.")

;;; relatives
(isa relatives FamilyRelationSlot)
(isa relatives SymmetricBinaryPredicate)
(isa relatives ReflexiveBinaryPredicate)
(not 
  (isa relatives TransitiveBinaryPredicate))
(genlInverse relatives relatives)
(arg1Isa relatives Animal)
(arg2Isa relatives Animal)
(comment relatives "(relatives PERSON1 PERSON2) means PERSON2 is some relative of PERSON1, howsoever the relationship is traced, biologically or through custom, rearing or adoption.")
(comment relatives "(relatives ANIM1 ANIM2) means ANIM2 is some biological relative of ANIM1.")

;;; rents
(isa rents CotemporalObjectsSlot)
(genlPreds rents cotemporal)
(arg1Isa rents Agent)
(arg2Isa rents PartiallyTangible)
(comment rents "The predicate rents relates an agent to something that s/he is renting.  (rents AGT OBJ) means that the Agent AGT is renting the object (possibly a piece of real estate) OBJ from another, unspecified agent.   AGT is the borrower, renter, lessee or tenant.  AGT has temporary use and enjoyment of OBJ, for a charge.  See also TemporaryUserRightsAgreement, TemporaryChangeOfUserRights, Renting.")

;;; representsAgentInEvent
(isa representsAgentInEvent TernaryPredicate)
(arg1Isa representsAgentInEvent Agent)
(arg2Isa representsAgentInEvent Agent)
(arg3Isa representsAgentInEvent TemporalThing)
(comment representsAgentInEvent "ARG1 represents ARG2 in the event ARG3.  ARG2 often has multiple entries, when ARG1 is appointed to represent the group's interests.")

;;; representsAgentToAgent
(isa representsAgentToAgent TernaryPredicate)
(arg1Isa representsAgentToAgent Agent)
(arg2Isa representsAgentToAgent Agent)
(arg3Isa representsAgentToAgent Agent)
(comment representsAgentToAgent "(representsAgentToAgent AGENT1 AGENT2 AGENT3) means that in in dealings with AGENT3,  AGENT1 represents AGENT2.  For example, if Joe Terwilliger is a salesman working for IBM, and is their sales rep to NASA, then we could represent that by asserting to Cyc  (representsAgentToAgent JoeTerwilliger IBM NASA).")

;;; requiredArg1Pred
(isa requiredArg1Pred BinaryPredicate)
(isa requiredArg1Pred RuleMacroPredicate)
(arg1Isa requiredArg1Pred Collection)
(arg2Isa requiredArg1Pred Predicate)
(comment requiredArg1Pred "(requiredArg1Pred COL PRED) means that for every instance INS of COL, there exists some X1..Xn-1 such that (PRED INS X1 .. Xn-1), where the arity of PRED is n.")

;;; requiredArg2Pred
(isa requiredArg2Pred RuleMacroPredicate)
(isa requiredArg2Pred BinaryPredicate)
(arg1Isa requiredArg2Pred Collection)
(arg2Isa requiredArg2Pred Predicate)
(comment requiredArg2Pred "(requiredArg2Pred COL PRED) means that for every instance INS of COL, there exists some X1..Xn-1 such that (PRED X INS .. Xn-1), where the arity of PRED is n. ")

;;; requiresForRole
(isa requiresForRole TernaryPredicate)
(arg1Isa requiresForRole Situation)
(arg2Isa requiresForRole Collection)
(arg3Isa requiresForRole Role)
(comment requiresForRole "(requiresForRole ?SIT ?COL ?ROLE) means that success of the Situation ?SIT depends upon the existence of an element of the collection ?COL playing the role ?ROLE in ?SIT.")

;;; resemblesInAttribute
(isa resemblesInAttribute TernaryPredicate)
(arg1Isa resemblesInAttribute Thing)
(arg2Isa resemblesInAttribute Thing)
(arg3Isa resemblesInAttribute AttributeType)
(comment resemblesInAttribute "(resemblesInAttribute THING1 THING2 ATTRIBUTE) means that the two things THING1 and THING2 resemble each other in their values of the AttributeType ATTRIBUTE.  Here 'resembles' means has a 'close' or similar value in that attribute -- what this means, and what the standard of closeness or similarity is, depends on the context.  See also identicalInAttribute and differentInAttribute.")
(overlappingExternalConcept resemblesInAttribute SENSUS-Information1997 "SIMILARITY")

;;; residenceOfOrganization
(isa residenceOfOrganization BinaryPredicate)
(arg1Isa residenceOfOrganization Organization)
(arg2Isa residenceOfOrganization GeographicalRegion)
(comment residenceOfOrganization "The predicate residenceOfOrganization indicates the geographical location of a particular organization's main offices.  (residenceOfOrganization ORG GEOGREG) means that the Organization ORG has its chief office at the location GEOGREG.  GEOGREG is typically a City but may be a larger or smaller GeographicalRegion.  For example, the residenceOfOrganization of the UnitedStatesFederalGovernment is the CityOfWashingtonDC.")

;;; residesInDwelling
(isa residesInDwelling CotemporalObjectsSlot)
(genlPreds residesInDwelling cotemporal)
(arg1Isa residesInDwelling Animal)
(arg1Isa residesInDwelling Person)
(arg2Isa residesInDwelling ShelterConstruction)
(arg2Isa residesInDwelling HumanResidence)
(comment residesInDwelling "(residesInDwelling X SHELT) means the Person or Animal X resides or lives in the ShelterConstruction SHELT -- meaning the place where it sleeps, spends much of its time, lays its eggs, a place which it cleans and maintains and repairs, a place it defends against intrusion, etc.  A person or animal may reside in more than one dwelling.  For example, a person on a camping trip might residesInDwelling some tent, during that trip, and at the same time it would still be true that he or she residesInDwelling  their `normal' apartment or house.    See also occupantsAre and residesInRegion.  A couple other notes:

Note:  residesInDwelling is not the same as legal domicile, though often of course they coincide. 

Note:  residesInDwelling is not appropriate for one animal living in/on another, as a parasite or symbiote.  A more general predicate, objectFoundInLocation, would be the appropriate one to use for the case of a Flea living on a Dog.")

;;; residesInRegion
(isa residesInRegion CotemporalObjectsSlot)
(genlPreds residesInRegion cotemporal)
(arg1Isa residesInRegion Animal)
(arg2Isa residesInRegion GeographicalRegion)
(comment residesInRegion "(residesInRegion X REG) means the individual Animal or Person X lives or resides primarily in the GeographicalRegion REG.  Notice that everyone (every first argument X) is likely to have many different regions REG that make the assertion (residesInRegion X REG) true.  E.g., Karen resides in Austin, in Texas, in the United States, in North America, etc.  See also residesInDwelling.")

;;; resistanceOfObject
(isa resistanceOfObject TangibleObjectPredicate)
(isa resistanceOfObject IntervalBasedQuantitySlot)
(arg1Isa resistanceOfObject PartiallyTangible)
(arg2Isa resistanceOfObject ElectricalResistance)
(comment resistanceOfObject "(resistanceOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of ElectricalResistance.  A lower value of DEGREE indicates OBJ is a better conductor, i.e., one that conducts with less energy lost to heat.")

;;; resistanceToBioDeterioration
(isa resistanceToBioDeterioration IntervalBasedQuantitySlot)
(isa resistanceToBioDeterioration TangibleObjectPredicate)
(isa resistanceToBioDeterioration PhysicalAttributeDescriptionSlot)
(arg1Isa resistanceToBioDeterioration PartiallyTangible)
(arg2Isa resistanceToBioDeterioration BioDeteriorationResistance)
(comment resistanceToBioDeterioration "(resistanceToBioDeterioration OBJ DEGREE) means that the tangible object OBJ has the indicated DEGREE of resistance to biological deterioration.")

;;; resistanceToCorrosion
(isa resistanceToCorrosion IntervalBasedQuantitySlot)
(isa resistanceToCorrosion TangibleObjectPredicate)
(isa resistanceToCorrosion PhysicalAttributeDescriptionSlot)
(arg1Isa resistanceToCorrosion PartiallyTangible)
(arg2Isa resistanceToCorrosion CorrosionResistance)
(comment resistanceToCorrosion "(resistanceToCorrosion OBJ DEGREE) means that the tangible object OBJ has the stated DEGREE of CorrosionResistance.  The higher DEGREE is, the less readily OBJ will corrode.")

;;; resistanceToRadiation
(isa resistanceToRadiation IntervalBasedQuantitySlot)
(isa resistanceToRadiation TangibleObjectPredicate)
(isa resistanceToRadiation PhysicalAttributeDescriptionSlot)
(arg1Isa resistanceToRadiation PartiallyTangible)
(arg2Isa resistanceToRadiation RadiationResistance)
(comment resistanceToRadiation "(resistanceToRadiation OBJ DEGREE) indicates how resistant a tangible object OBJ is to radiation.  A higher DEGREE of resistance means that an object is less penetrable by ElectromagneticRadiation.")

;;; responseTo
(isa responseTo BinaryPredicate)
(arg1Isa responseTo Acknowledging-CommunicationAct)
(arg2Isa responseTo PropositionalInformationThing)
(comment responseTo "(responseTo ?ACT ?PIT) means that ?ACT is an acknowledging act to signify receipt of the abstract information ?PIT that is being acknowledged and to indicate a response.  The ?ACT may be an Accepting-CommunicationAct or a Rejecting-CommunicationAct, or several others.  Some may be combinations, e.g. David may accept part of Wanda's order (say the part about cleaning the kitchen) but not the other part (say cleaning the bathroom).  See also acknowledgedAct which relates the two acts directly.")

;;; resultGenl
(isa resultGenl BinaryPredicate)
(isa resultGenl FunctionalSlot)
(isa resultGenl RuleMacroPredicate)
(arg1Isa resultGenl CollectionDenotingFunction)
(arg2Isa resultGenl Collection)
(comment resultGenl "The Cyc predicate resultGenl is used to specify that a certain collection is a superset of the value returned by a particular collection-denoting function.  (resultGenl CDF COL) means that when the CollectionDenotingFunction CDF is applied to its legal number and type of arguments, the result will be a subset of the Collection COL -- i.e., the genls of (CDF ARG1 [ARG2 ... ARGN]) will include COL.  Examples: (resultGenl UsingAFn Action), i.e., `every using of a [particular kind of] object is an action'; (resultGenl AttemptingFn PurposefulAction), i.e., `every attempt [at a specific action] is a purposeful act'; (resultGenl BachelorsDegreeInFn BachelorsDegree), i.e., `every bachelor's degree [in some subject] is a bachelor's degree'; (resultGenl JointTypeBetweenFn Connection), i.e., `every joint [between specific things] is a connection'.  See also resultIsa.")

;;; resultIsa
(isa resultIsa RuleMacroPredicate)
(isa resultIsa IntangibleObjectPredicate)
(isa resultIsa BinaryPredicate)
(arg1Isa resultIsa Relationship)
(arg2Isa resultIsa Collection)
(comment resultIsa "The Cyc predicate resultIsa is used to indicate that the value returned by a particular function is an element of a certain Cyc collection.  In other words, when FUNC is applied to its legal number of valid arguments in a non-atomic term, that resultant term is an element of the Collection COL; Thus, (resultIsa FUNC COL) means that applications of FUNC return elements of COL; i.e., (resultIsa FUNC COL) implies that (isa (FUNC ARG1 [ARG2 ... ARGN]) COL).  For example, since legal uses of PlusFn always return a quantity, (resultIsa PlusFn ScalarInterval) is asserted in Cyc.  Another example: because Cyc knows that (resultIsa GovernmentFn RegionalGovernment), Cyc concludes that the government of France is an element of RegionalGovernment; i.e., (isa (GovernmentFn France) RegionalGovernment).  See also resultGenl.")

;;; resultantMentalObjects
(isa resultantMentalObjects BinaryPredicate)
(arg1Isa resultantMentalObjects Perceiving)
(arg2Isa resultantMentalObjects MentalObject)
(comment resultantMentalObjects "(resultantMentalObjects PEVT PERCEPT) means that during the Perceiving event PEVT, the perceiver acquires the MentalObject PERCEPT (i.e., feeling some emotion, deducing some conclusion, observing some facts, etc.)")

;;; rightsGranted
(isa rightsGranted BinaryPredicate)
(arg1Isa rightsGranted ChangeInUserRights)
(arg2Isa rightsGranted UserRightsAttribute)
(comment rightsGranted "This predicate is used to indicate what UserRightsAttributes are acquired in events which bring about a ChangeInUserRights.  (rightsGranted EVENT URA) means that in the ChangeInUserRights EVENT, the UserRightsAttribute URA is granted (to some agent).  For example, (rightsGranted ''LouisianaPurchase'' ExclusiveUserRights), since no country other than the USA could then claim it as one of their territories.   If EVENT is a Buying event, then almost always both (rightsGranted EVENT FullUseRights) and (rightsGranted EVENT ExclusiveUserRights) are true.")

;;; rigidityOfObject
(isa rigidityOfObject PhysicalAttributeDescriptionSlot)
(isa rigidityOfObject TangibleObjectPredicate)
(isa rigidityOfObject IntervalBasedQuantitySlot)
(arg1Isa rigidityOfObject PartiallyTangible)
(arg2Isa rigidityOfObject Rigidity)
(comment rigidityOfObject "(rigidityOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of Rigidity.  A higher DEGREE of Rigidity means more force is required to change the shape of OBJ than for a lower DEGREE.")

;;; rotationallyConnectedTo
(not 
  (isa rotationallyConnectedTo TransitiveBinaryPredicate))
(isa rotationallyConnectedTo IrreflexiveBinaryPredicate)
(isa rotationallyConnectedTo SymmetricBinaryPredicate)
(isa rotationallyConnectedTo ConnectionPredicate)
(isa rotationallyConnectedTo SpatialPredicate)
(genlPreds rotationallyConnectedTo connectedTo)
(genlInverse rotationallyConnectedTo rotationallyConnectedTo)
(arg1Isa rotationallyConnectedTo SolidTangibleThing)
(arg2Isa rotationallyConnectedTo SolidTangibleThing)
(comment rotationallyConnectedTo "(rotationallyConnectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are connected in such a way that rotational motion, and only rotational motion, can happen between them.  The rotational motion may be fully or partially rotational.  Non-rotational movement between two rotationally connected objects at their connection point can occur only if the connection is broken, deformed, or disassembled.  Positive examples: Femurs are rotationally connected to hips, doors are rotationally connected to door frames, doorknobs are rotationally connected to doors, and propellers are rotationally connected to airplanes; in computer trackballs the ball is rotationally connected to the housing.  Negative examples: a planet orbiting around a star (they are not connected).  Cf. MovingInACircle.")

;;; salientAssertions
(isa salientAssertions BinaryPredicate)
(isa salientAssertions MetaKnowledgePredicate)
(arg1Isa salientAssertions ReifiableTerm)
(arg2Isa salientAssertions Assertion)
(comment salientAssertions "(salientAssertions ?TERM ?ASSERTION) means that some Cyclist has deemed it useful to mark ?ASSERTION as one of the assertions which is most useful to examine when trying to figure out the intended meaning of ?TERM.  Statements using salientAssertions are wholly intended for human consumption; they are not used by Cyc's inference engine in any way. ")

;;; salutation
(isa salutation BinaryPredicate)
(isa salutation IntangibleObjectPredicate)
(arg1Isa salutation Person)
(arg2Isa salutation CourtesyTitle)
(comment salutation "(salutation PRSN TITLE) means the Person PRSN's name may have the CourtesyTitle TITLE attached to it, such as: Mr., Ms., Mrs., Miss, Dr., etc., when that person is addressed.")

;;; satisfiesDescription
(isa satisfiesDescription TernaryPredicate)
(arg1Isa satisfiesDescription CycSystemList)
(arg2Isa satisfiesDescription CycSystemList)
(arg3Isa satisfiesDescription Microtheory)
(comment satisfiesDescription "ARG1 is a list of things (item1, item2, ...) which, taken together, satisfy the descriptions in the MT ARG3 of the roles listed in ARG2 (role1, role2, ...).  For example, we might see (satisfiesDescription (Joe Jane) (TheHusband TheWife) HumanSocialLifeMt).")

;;; satisfiesStandard
(isa satisfiesStandard BinaryPredicate)
(arg1Isa satisfiesStandard FormalProductType)
(arg1Genl satisfiesStandard Product)
(arg2Isa satisfiesStandard ProductStandard)
(comment satisfiesStandard "The predicate satisfiesStandard is used to identify a product standard that applies to a certain type of products.  (satisfiesStandard PRODTYPE STAND) means that every instance of the FormalProductType PRODTYPE satisfies the ProductStandard STAND.  STAND will contain a description of the desired physical form and/or function for the type of product (or service) denoted by PRODTYPE, and the instances of PRODTYPE fulfill those specifications.  See also ProductStandard.")

;;; schooling
(isa schooling TernaryPredicate)
(arg1Isa schooling Person)
(arg2Isa schooling EducationalOrganization)
(arg3Isa schooling StudentStatusAttribute)
(comment schooling "(schooling PERSN SCHL LVL) means Person PERSN has attained formal schooling up to EducationLevelAttribute LVL at the EducationalOrganization SCHL.  This will refer to a particular subAbstrac of a Person, not the person as a whole lifetime Entity.  And of course the schooling itself generally occurs at but one of many timeSlices of the school.")

;;; sees
(isa sees PerceivingSlot)
(genlPreds sees perceives)
(arg1Isa sees PerceptualAgent)
(arg2Isa sees TemporalThing)
(arg2Isa sees SpatialThing)
(comment sees "(sees AGENT OBJ) means that the PerceptualAgent AGENT perceives at least some of the visual properties (color, shape, texture, etc) of the object(s) or event(s) OBJ.")

;;; seller
(isa seller ActorSlot)
(isa seller AsymmetricBinaryPredicate)
(genlPreds seller exchangers)
(arg1Isa seller CommercialActivity)
(arg2Isa seller Agent)
(comment seller "The predicate seller relates an agent to a sales event.  (seller EVENT AGENT) means that the Agent AGENT sells something in the CommercialActivity EVENT.")

;;; sellingAgent
(isa sellingAgent FunctionalSlot)
(isa sellingAgent ActorSlot)
(isa sellingAgent AsymmetricBinaryPredicate)
(isa sellingAgent AntiTransitiveBinaryPredicate)
(isa sellingAgent IrreflexiveBinaryPredicate)
(genlPreds sellingAgent sellingPerformer)
(genlPreds sellingAgent mediators)
(arg1Isa sellingAgent CommercialActivity)
(arg2Isa sellingAgent LegalAgent)
(comment sellingAgent "A selling agent acts on behalf of a would be seller to bring about a buying event involving his/her/its client as the seller. ")

;;; sellingPerformer
(isa sellingPerformer IrreflexiveBinaryPredicate)
(isa sellingPerformer AntiTransitiveBinaryPredicate)
(isa sellingPerformer AsymmetricBinaryPredicate)
(isa sellingPerformer ActorSlot)
(genlPreds sellingPerformer performedBy)
(genlPreds sellingPerformer socialParticipants)
(arg1Isa sellingPerformer CommercialActivity)
(arg2Isa sellingPerformer LegalAgent)
(comment sellingPerformer "(sellingPerformer COM AGENT) means that the CommercialActivity COM is performedBy the Agent AGENT, who in that event actually pursues and attempts to make a sale.  AGENT may also be (and in many cases is) the seller of the goods or services sold, or s/he may be the sellingAgent representing the seller.")

;;; sellsProductType
(isa sellsProductType BinaryPredicate)
(arg1Isa sellsProductType MedicalCareOrganization)
(arg1Isa sellsProductType InsuranceProvider)
(arg2Isa sellsProductType ProductType)
(comment sellsProductType "The predicate sellsProductType identifies a particular seller of a specific product.  (sellsProductType AGT PRODTYPE) means that the individual Agent AGT sells the ProductType PRODTYPE.  For example, the Wendy's in the Texas Student Union sells hamburgers.  The implication is that AGT typically and often sells products of PRODTYPE, not just as a one-time sale.")

;;; senderOfInfo
(isa senderOfInfo ActorSlot)
(isa senderOfInfo AsymmetricBinaryPredicate)
(genlPreds senderOfInfo informationOrigin)
(genlPreds senderOfInfo doneBy)
(genlPreds senderOfInfo deliberateActors)
(arg1Isa senderOfInfo InformationTransferEvent)
(arg2Isa senderOfInfo Agent)
(comment senderOfInfo "The predicate senderOfInfo is used to indicate the sending agent in a particular transfer of information.  (senderOfInfo TRANSFER SENDER) means that SENDER is an agent who is the source of information transferred in the InformationTransferEvent TRANSFER.  At the time of TRANSFER (and typically for some period beforehand), SENDER conceives of the information transferred in TRANSFER.  It's not the case that SENDER necessarily knows the `information' or has it among his/her beliefs, because TRANSFER could involve lying; e.g., GeorgeWashington's telling his father, `I didn't chop down the cherry tree'.  SENDER normally performs TRANSFER intentionally, but some transfers may be unintentional; e.g., when one repeats some gossip unwittingly within earshot of the person being discussed, the transfer to the overhearer is unintentional.  See also infoTransferred.")

;;; seniorExecutives
(isa seniorExecutives CotemporalObjectsSlot)
(isa seniorExecutives AsymmetricBinaryPredicate)
(isa seniorExecutives AntiTransitiveBinaryPredicate)
(genlPreds seniorExecutives hasWorkers)
(genlPreds seniorExecutives cotemporal)
(arg1Isa seniorExecutives Organization)
(arg2Isa seniorExecutives Person)
(comment seniorExecutives "The predicate seniorExecutives is used to identify the upper-level managers in a particular organization.  (seniorExecutives ORG PERSON) means PERSON is an employee with a high executive position in the Organization ORG.  seniorExecutives relates an organization to the people who hold its principal corporate offices (CompanyPresident, etc.) and also positions like Chief of Staff, General, Admiral, Chief Corporate Counsel, Managing Partner, Chief Scientist, Chief Engineer, etc.")

;;; sensoryResponse
(isa sensoryResponse QuaternaryPredicate)
(isa sensoryResponse FunctionalPredicate)
(arg1Isa sensoryResponse PhysicalEvent)
(arg2Isa sensoryResponse ActorSlot)
(arg3Isa sensoryResponse SensoryReactionType)
(arg3Genl sensoryResponse SensoryAttribute)
(arg4Isa sensoryResponse GenericAttribute)
(comment sensoryResponse "(sensoryResponse EVT ROLE SENSTYPE DEGREE) means that a PerceptualAgent who participates in the PhysicalEvent EVT in the manner ROLE has an immediate sensory reaction of the SensoryReactionType SENSTYPE with DEGREE of intensity. For example, Cyc's knowledge base contains a rule that says that if $E is a touching-something-very-cold event, then (sensoryResponse $E doneBy LevelOfDiscomfort Positive) --- i.e., that whoever does that touching action is likely to feel some discomfort. Note that sensoryResponse is one of the few predicates that are quaternary; i.e., that take four arguments.")

;;; seriesLength
(isa seriesLength BinaryPredicate)
(arg1Isa seriesLength Series)
(arg2Isa seriesLength PositiveInteger)
(comment seriesLength "(seriesLength SER LEN) means that the series, SER, is LEN members long.  Note that some Series have an unknown or infinite number of members.")

;;; seriesOrderedBy
(isa seriesOrderedBy BinaryPredicate)
(arg1Isa seriesOrderedBy Series)
(arg2Isa seriesOrderedBy BinaryPredicate)
(comment seriesOrderedBy "(seriesOrderedBy SER PRED) means that PRED is the relation that imposes an order on the members of SER.  Each member of the series stands in the relation PRED to the succeeding members of the series.  For example, if SER is a line of cars driving north, the ordering relation might be northOf (or ''aheadOf''). ")

;;; seriesOrderedByInverse
(isa seriesOrderedByInverse BinaryPredicate)
(arg1Isa seriesOrderedByInverse Series)
(arg2Isa seriesOrderedByInverse BinaryPredicate)
(comment seriesOrderedByInverse "(seriesOrderedByInverse SER PRED) means that PRED is the relation that imposes an order on the members of SER.  Each member of the series stands in the relation PRED to the series members that come before it.  For example, if SER is a line of cars driving south, the ordering relation might be northOf (or ''behind'').  See also seriesOrderedBy.")

;;; shape
(isa shape PhysicalAttributeDescriptionSlot)
(isa shape ShapeDescribingPredicate)
(arg1Isa shape PartiallyTangible)
(arg2Isa shape ShapeType)
(arg2Genl shape AbstractShape)
(comment shape "The predicate shape is used to indicate the type of geometrical shape that characterizes a particular object.  (shape OBJ SHAPETYPE) means that the tangible object OBJ has an overall geometrical shape of the kind SHAPETYPE.  For example, the shape of the Transamerica Building in San Francisco is a PyramidShape.  Other elements of ShapeType include Square, Circle, SphereShape, CylinderShape, etc.")
(synonymousExternalConcept shape SENSUS-Information1997 "SHAPE-PROPERTY-ASCRIPTION")

;;; sharedNotes
(isa sharedNotes BinaryPredicate)
(isa sharedNotes DistributingMetaKnowledgePredicate)
(isa sharedNotes MetaKnowledgePredicate)
(arg1Isa sharedNotes CycIndexedTerm)
(arg1Isa sharedNotes Thing)
(arg2Isa sharedNotes SharedNote)
(comment sharedNotes "sharedNotes is a predicate belonging to the Cyc collection DocumentationConstant.  Often KB builders wish to repeat the same documentation in the comment of many constants.  Rather than actually duplicating text in the KB, it is possible to create a special constant to 'hold' the documentation; this constant will be an instance of SharedNote.  (sharedNotes X N) means that N is an element of SharedNote whose comment contains shared documentation about the constant X.  Since sharedNotes are usually shared, it is reasonable to expect other axioms, such as (sharedNotes Y N) and (sharedNotes Z N) to be in the KB as well.")

;;; shareholders
(not 
  (isa shareholders IrreflexiveBinaryPredicate))
(not 
  (isa shareholders ReflexiveBinaryPredicate))
(not 
  (isa shareholders AsymmetricBinaryPredicate))
(not 
  (isa shareholders AntiSymmetricBinaryPredicate))
(not 
  (isa shareholders SymmetricBinaryPredicate))
(not 
  (isa shareholders TransitiveBinaryPredicate))
(isa shareholders BinaryPredicate)
(arg1Isa shareholders Organization)
(arg2Isa shareholders Agent)
(comment shareholders "The predicate shareholders identifies particular agents as owners of shares in a particular organization.  (shareholders ORG AGENT) means AGENT owns one or more shares of Stock in the company ORG and hence is an owner of the company and may receive dividends from the company.  shareholders indicates owners of a company's stock generically, whether they hold common or preferred shares.  Voting shareholders may vote (one vote per share) for the Board of Directors.  Shareholders do not normally participate in the operation of a company, and they are not personally liable for the debts of the company.")

;;; shearStrengthOfObject
(isa shearStrengthOfObject TangibleObjectPredicate)
(isa shearStrengthOfObject IntervalBasedQuantitySlot)
(arg1Isa shearStrengthOfObject PartiallyTangible)
(arg2Isa shearStrengthOfObject ShearStrength)
(comment shearStrengthOfObject "(shearStrengthOfObject OBJ DEGREE) means that the tangible object OBJ has a DEGREE amount of ShearStrength, i.e., resistance to shearing stress.")

;;; sheetSurfaceConnected
(not 
  (isa sheetSurfaceConnected AsymmetricBinaryPredicate))
(not 
  (isa sheetSurfaceConnected SymmetricBinaryPredicate))
(not 
  (isa sheetSurfaceConnected TransitiveBinaryPredicate))
(not 
  (isa sheetSurfaceConnected ReflexiveBinaryPredicate))
(isa sheetSurfaceConnected InterExistingObjectSlot)
(isa sheetSurfaceConnected ConnectionPredicate)
(isa sheetSurfaceConnected SpatialPredicate)
(genlPreds sheetSurfaceConnected touchesDirectly)
(genlPreds sheetSurfaceConnected connectedTo)
(arg1Isa sheetSurfaceConnected SheetOfSomeStuff)
(arg2Isa sheetSurfaceConnected PartiallyTangible)
(comment sheetSurfaceConnected "(sheetSurfaceConnected MEMBRANE OBJ2) means that  MEMBRANE is connected all over most of one surface to a surface of OBJ2.  For example, a bi-layer membrane would have two parts sheetSurfaceConnected to each other.  Or, a membrane could be attached over most of its surface to an object's surface, as the VisceralPleura is attached to the surface of the Lung in the  body.  The membrane(s) may be flexible, but the surface connection is firm (i.e. no sliding can occur without a separation, tearing, or breaking occurring).")

;;; siblingDisjointExceptions
(isa siblingDisjointExceptions IrreflexiveBinaryPredicate)
(isa siblingDisjointExceptions SymmetricBinaryPredicate)
(not 
  (isa siblingDisjointExceptions TransitiveBinaryPredicate))
(genlInverse siblingDisjointExceptions siblingDisjointExceptions)
(arg1Isa siblingDisjointExceptions Collection)
(arg2Isa siblingDisjointExceptions Collection)
(comment siblingDisjointExceptions "The predicate siblingDisjointExceptions is used to state exceptions to constraints normally imposed from SiblingDisjointCollection.  (siblingDisjointExceptions COL1 COL2) means that the relationship between the collections COL1 and COL2 is exempt from the disjointness constraint which would otherwise be imposed because COL1 and COL2 are both instances of some element of SiblingDisjointCollection.  (See SiblingDisjointCollection for a full explanation of the constraints.)   For example, Killing-Biological and PhysicallyAttackingAnAgent are both elements of DefaultDisjointScriptType, which in turn is an element of SiblingDisjointCollection.  The exception is useful in this case because it lifts the constraint that physically attacking and killing an agent must be disjoint from each other, while letting us continue to conclude that killing and attacking are each disjoint from many other kinds of actions.  By asserting (siblingDisjointExceptions Killing-Biological PhysicallyAttackingAnAgent), we block the disjointness constraint between those two collections, without disturbing the constraints between each of those collections and all the other instances of their parent (disjoint) collection, DefaultDisjointScriptType.  In other words, (siblingDisjointExceptions COL1 COL2) prevents COL1 and COL2 from being considered disjoint if they would otherwise be disjoint due to their being both instances of the same SiblingDisjointCollection.")

;;; siblingOrganizations
(not 
  (isa siblingOrganizations TransitiveBinaryPredicate))
(isa siblingOrganizations IrreflexiveBinaryPredicate)
(isa siblingOrganizations SymmetricBinaryPredicate)
(genlInverse siblingOrganizations siblingOrganizations)
(arg1Isa siblingOrganizations Organization)
(arg2Isa siblingOrganizations Organization)
(comment siblingOrganizations "The predicate siblingOrganizations relates two organizations which are immediate subOrganizations of a common (unspecified) parent organization.  (siblingOrganizations ORG1 ORG2) means that the Organizations ORG1 and ORG2 are sister organizations within some hierarchically structured organization; ORG1 and ORG2 are at the same `level' from the top.")

;;; siblings
(isa siblings IrreflexiveBinaryPredicate)
(isa siblings SymmetricBinaryPredicate)
(isa siblings FamilyRelationSlot)
(not 
  (isa siblings TransitiveBinaryPredicate))
(genlPreds siblings acquaintedWith)
(genlPreds siblings positiveVestedInterest)
(genlPreds siblings biologicalRelatives)
(genlInverse siblings siblings)
(arg1Isa siblings Animal)
(arg2Isa siblings Animal)
(comment siblings "(siblings ANIM1 ANIM2) means that ANIM1 and ANIM2 are siblings.  Either they share one or more biological parents, or are siblings by adoption, marriage, or some other social arrangement.  Generally siblings are reasonably close in age (within 15 years or so) and have grown up together in the same family.")

;;; simultaneousWith
(isa simultaneousWith TransitiveBinaryPredicate)
(isa simultaneousWith ReflexiveBinaryPredicate)
(isa simultaneousWith SymmetricBinaryPredicate)
(isa simultaneousWith PrimitiveTemporalRelation)
(genlPreds simultaneousWith cotemporal)
(genlInverse simultaneousWith simultaneousWith)
(arg1Isa simultaneousWith TimePoint)
(arg2Isa simultaneousWith TimePoint)
(comment simultaneousWith "(simultaneousWith ?X ?Y) means that TimePoints ?X and ?Y occur at exactly the same time. 
Note:  Individual TimePoints are seldom mentioned in axioms; rather, the axiom is likely to use some ComplexTemporalRelation, such as cotemporal or temporalBoundsIdentical, which holds between two TemporalThings.   These ComplexTemporalRelations are themselves usually defined in terms of PrimitiveTemporalRelations, such as after and simultaneousWith, which relate one TimePoint to another.")

;;; singular
(isa singular IntangibleObjectPredicate)
(isa singular BinaryPredicate)
(arg1Isa singular EnglishWord)
(arg2Isa singular CharacterString)
(comment singular "(singular WORD STRING) means that STRING is the singular noun form of WORD.  For example, the singular form of Hit-TheWord is `hit'.")

;;; skillCapableOf
(isa skillCapableOf TernaryPredicate)
(arg1Isa skillCapableOf Animal)
(arg2Isa skillCapableOf Collection)
(arg2Genl skillCapableOf Situation)
(arg3Isa skillCapableOf Role)
(comment skillCapableOf "The predicate skillCapableOf indicates that an agent has the skill to take a certain role in a certain type of situation or event.  (skillCapableOf AGT SIT-TYPE ROLE) means that a particular Agent AGT has the necessary skills to act in this ROLE in normal instances of SIT-TYPE.  For example, to express that Gumby is capable of swimming, Cyc would say (skillCapableOf Gumby Swimming-Generic performedBy).  skillCapableOf entails that AGT has any anatomical and/or intellectual prerequisites for performing the skill; however, it is neutral as to whether AGT has the necessary resources of time, money, opportunity, etc., to use the skill in any particular situation of SIT-TYPE.")

;;; skillLevel
(isa skillLevel QuintaryPredicate)
(arg1Isa skillLevel SomethingExisting)
(arg2Isa skillLevel Collection)
(arg2Genl skillLevel Event)
(arg3Isa skillLevel ActorSlot)
(arg4Isa skillLevel ScriptPerformanceAttributeType)
(arg4Genl skillLevel ScriptPerformanceAttribute)
(arg5Isa skillLevel GenericAttribute)
(comment skillLevel "This predicate relates performers to types of actions.  (skillLevel OBJ ACT-TYPE ROLE PERF-ATT LEVEL) means that the SomethingExisting OBJ has the ability to play the role ROLE in elements of the type of Event ACT-TYPE, with LEVEL degree of PERF-ATT.  For example, (skillLevel Joe DiggingAHole performedBy Agility High) means that, in general, Joe can dig holes with great agility.  To talk about actual performance in a particular action, use performanceLevel.")

;;; skillRequired
(isa skillRequired QuaternaryPredicate)
(arg1Isa skillRequired ScriptType)
(arg1Genl skillRequired AnimalActivity)
(arg2Isa skillRequired ScriptType)
(arg2Genl skillRequired AnimalActivity)
(arg3Isa skillRequired ScriptPerformanceAttributeType)
(arg3Genl skillRequired ScriptPerformanceAttribute)
(arg4Isa skillRequired GenericAttribute)
(comment skillRequired "(skillRequired ACT-TYPE OTHER-TYPE PERF-ATT LEVEL) means that if one is to successfully perform an instance of some kind of action (ACT-TYPE), then one must be capable of performing instances of another kind of action (OTHER-TYPE) with the performance attribute PERF-ATT at a level of at least LEVEL.  For example, (skillRequired PlayingVolleyball ServingAVolleyball Competence Low).  If you can't even serve a volleyball at a `Low' competence level, you're not so much `playing' volleyball as developing the skills to play it.")

;;; skinColor
(isa skinColor FunctionalSlot)
(isa skinColor PhysicalAttributeDescriptionSlot)
(arg1Isa skinColor Person)
(arg2Isa skinColor Color)
(comment skinColor "(skinColor PERSON SKINCOL) means Person PERSON has the HumanSkinColor SKINCOL.")

;;; smells
(isa smells PerceivingSlot)
(isa smells CotemporalObjectsSlot)
(genlPreds smells cotemporal)
(genlPreds smells perceives)
(arg1Isa smells PerceptualAgent)
(arg2Isa smells SpatialThing)
(arg2Isa smells TemporalThing)
(comment smells "(smells ?AGT ?OBJ) means that OBJ releases a scent (see Odor) which the PerceptualAgent ?AGT is able to perceive.  In the situation 'Joe smells the coffee burning' Cyc should know both (smells Joe Coffee01) and (smells Joe BurningOfCoffeeEvent01).")

;;; socialClass
(isa socialClass IntervalBasedQuantitySlot)
(arg1Isa socialClass Person)
(arg2Isa socialClass SocialClass-Lifestyle)
(comment socialClass "(socialClass PRSN CLS) means that in the surrounding culture, the Person PRSN has the SocialClass-Lifestyle CLS.  As the name suggests, this predicate indicates PRSN's approximate social status as determined by his or her style of life -- quality of life, access to material goods and services, and social associations.  It may also depend on a cultural non-material system of social rank, based on birth, office, manners, vocal accent or other factors.  E.g., (socialClass DonaldTrump UpperClass) was true even when he lost his fortune and was (temporarily) bankrupt; and (socialClass BillGates UpperMiddleClass) was true, at least for a while, after he became a billionaire.  This is a good example of a predicate whose precise meaning, and associated heuristic rules, vary quite a bit from context to context, such as from country to country, from century to century, etc.")

;;; socialParticipants
(isa socialParticipants IrreflexiveBinaryPredicate)
(isa socialParticipants ActorSlot)
(isa socialParticipants AsymmetricBinaryPredicate)
(genlPreds socialParticipants preActors)
(arg1Isa socialParticipants SocialOccurrence)
(arg2Isa socialParticipants Agent)
(comment socialParticipants "(socialParticipants SO AGT) means that the Agent AGT participates --- in some social role --- in the SocialOccurrence SO.  In every culture there are many specializations of this ActorSlot; some SocialOccurrences have very elaborate role structures (e.g., a lawsuit in 1990's America), and some are fairly simple (e.g., rudely bumping into someone.)  See SocialOccurrence.")

;;; socialStatus
(isa socialStatus FunctionalPredicate)
(isa socialStatus QuaternaryPredicate)
(arg1Isa socialStatus Person)
(arg2Isa socialStatus SocialStatusAttributeType)
(arg3Isa socialStatus ExistingObjectType)
(arg3Genl socialStatus Person)
(arg4Isa socialStatus GenericAttribute)
(comment socialStatus "(socialStatus PRSN STAT GROUP DEGREE) means that the Person PRSN has the social status type STAT (such qualities as Glamor, Credibility, etc.) at the generic strength level DEGREE (e.g., High, VeryLow, Low, etc.), according to the reference population group GROUP.  For example, in the context of 1980s America, it was true that (socialStatus Madonna Glamor HumanTeenager VeryHigh).  I.e., Madonna had a `high glamor' status among American teenagers in the 1980's.")

;;; solubleIn
(isa solubleIn InterExistingObjectSlot)
(isa solubleIn TangibleSubstancePredicate)
(arg1Isa solubleIn PartiallyTangible)
(arg2Isa solubleIn LiquidTangibleThing)
(comment solubleIn "(solubleIn SOLUTE SOLVENT) means that the piece of PartiallyTangible stuff SOLUTE will ordinarily dissolve if placed into the LiquidTangibleThing SOLVENT.  See also Solubility.")

;;; solute
(isa solute CotemporalObjectsSlot)
(isa solute AntiTransitiveBinaryPredicate)
(isa solute CompositionPredicate)
(genlPreds solute cotemporal)
(genlPreds solute constituents)
(arg1Isa solute Solution)
(arg2Isa solute PartiallyTangible)
(comment solute "The predicate solute indicates a particular TangibleThing in a Solution which is dissolved in the solvent of that Solution.")

;;; solvent
(isa solvent CotemporalObjectsSlot)
(isa solvent CompositionPredicate)
(genlPreds solvent cotemporal)
(genlPreds solvent mainConstituent)
(arg1Isa solvent Solution)
(arg2Isa solvent PartiallyTangible)
(comment solvent "The predicate solvent indicates a particular liquid in a Solution in which the solute is dissolved.")

;;; spaceRegionPortals
(isa spaceRegionPortals BinaryPredicate)
(isa spaceRegionPortals PhysicalPartPredicate)
(genlPreds spaceRegionPortals cotemporal)
(arg1Isa spaceRegionPortals Interior)
(arg2Isa spaceRegionPortals Portal)
(comment spaceRegionPortals "(spaceRegionPortals REGION HOLE) means that HOLE is a Portal into the interior region REGION.  All the portals of this Interior space region are related to it by spaceRegionPortals.")

;;; spatiallyIntersects
(isa spatiallyIntersects SymmetricBinaryPredicate)
(isa spatiallyIntersects ReflexiveBinaryPredicate)
(not 
  (isa spatiallyIntersects TransitiveBinaryPredicate))
(genlPreds spatiallyIntersects near)
(genlInverse spatiallyIntersects spatiallyIntersects)
(arg1Isa spatiallyIntersects SpatialThing)
(arg2Isa spatiallyIntersects SpatialThing)
(comment spatiallyIntersects "(spatiallyIntersects REGION1 REGION2) is true if and only if REGION1 and REGION2 share a common sub-region.")

;;; spatiallyIntrinsicArg
(isa spatiallyIntrinsicArg BinaryPredicate)
(arg1Isa spatiallyIntrinsicArg Predicate)
(arg2Isa spatiallyIntrinsicArg PositiveInteger)
(comment spatiallyIntrinsicArg "(spatiallyIntrinsicArg PRED N) means that the Cyc predicate PRED expresses a property that is spatially intrinsic for its argument position N. That means, if a formula using PRED



is true for some object OBJ (in the Nth argument position), we can assume the truth of every similar formula in which any spatial part of OBJ is substituted in for OBJ. For



example, since (spatiallyIntrinsicArg temperatureOfObject 1) is true, if we know (temperatureOfObject `Coffee007' (DegreeCelsius 90)), we can expect that any spatial part of `Coffee007' will also have that temperature. An example of a property that is NOT spatially intrinsic is massOfObject; though a whole rock may weigh two pounds, there are spatial parts of the rock that don't.  Another example of a relation that is not spatially intrinsic, but might at first seem to be, is constituents.  In (constituents `ChocolateMilk37' `Milk36'), it is not the case that every spatial part of `ChocolateMilk37' has `Milk36' among its constituents.  constituents means, rather, that every part of its first argument has some part of the second argument among its components, but that is different from the intended meaning of spatiallyIntrinsicArg.")

;;; spectators
(isa spectators IrreflexiveBinaryPredicate)
(isa spectators AsymmetricBinaryPredicate)
(isa spectators ActorSlot)
(genlPreds spectators preActors)
(arg1Isa spectators Event)
(arg2Isa spectators Agent)
(comment spectators "(spectators E AGT) means that in the Event E,  the Agent AGT is an onlooker of E but not actively acting in it in any other way.   AGT will observe all or part of E.")

;;; speedOfObject-Translation
(isa speedOfObject-Translation IntervalBasedQuantitySlot)
(arg1Isa speedOfObject-Translation PartiallyTangible)
(arg2Isa speedOfObject-Translation Speed)
(comment speedOfObject-Translation "The predicate speedOfObject-Translation is used to give the speed with which an object is moving in a particular translational motion.  As you should remember from freshman physics, velocity has a speed and direction.  Speed is a scalar quantity, i.e., it has no direction, only magnitude.  Thus, `100 miles per hour straight up' is a velocity, and `100 miles per hour' is the corresponding speed.")

;;; spouse
(isa spouse AntiTransitiveBinaryPredicate)
(isa spouse SymmetricBinaryPredicate)
(isa spouse InterActorSlot)
(isa spouse FamilyRelationSlot)
(not 
  (isa spouse TransitiveBinaryPredicate))
(genlPreds spouse loves)
(genlPreds spouse mate)
(genlPreds spouse cohabitingFamilyMembers)
(genlInverse spouse spouse)
(arg1Isa spouse Person)
(arg2Isa spouse Person)
(comment spouse "(spouse PERSON1 PERSON2) means the two Persons PERSON1 and PERSON2 are married.  
Note: in some contexts (cultures), a person is not restricted to having only one cotemporal spouse.")

;;; startingDate
(isa startingDate BinaryPredicate)
(genlPreds startingDate startsDuring)
(arg1Isa startingDate TemporalThing)
(arg2Isa startingDate Date)
(comment startingDate "(startingDate ?X ?Y) indicates that ?Y is a Date such that (temporallySubsumes ?Y (StartFn ?X)). This is NOT the same as startingPoint (qv).  Rather, it means that ?X happened (started to happen, came into existence, etc.) sometime on that date.
Note:  the date is tied to a time interval on a calendar, but need not be a particular day; it might be a particular calendar month, a particular calendar year, etc.")

;;; startingPoint
(isa startingPoint TemporalRelation)
(arg1Isa startingPoint TemporalThing)
(arg2Isa startingPoint TimePoint)
(comment startingPoint "(startingPoint ?X ?T) indicates that ?T is the TimePoint at which ?X begins, the earliest moment of its temporal extent.")

;;; startsAfterEndingOf
(isa startsAfterEndingOf ComplexTemporalRelation)
(isa startsAfterEndingOf TransitiveBinaryPredicate)
(isa startsAfterEndingOf AsymmetricBinaryPredicate)
(isa startsAfterEndingOf IrreflexiveBinaryPredicate)
(genlPreds startsAfterEndingOf startsAfterStartingOf)
(genlPreds startsAfterEndingOf endsAfterEndingOf)
(genlPreds startsAfterEndingOf temporallyDisjoint)
(arg1Isa startsAfterEndingOf TemporalThing)
(arg2Isa startsAfterEndingOf TemporalThing)
(comment startsAfterEndingOf "(startsAfterEndingOf AFTER BEFORE) means (after (StartFn AFTER) (EndFn BEFORE)).   That is, the startingPoint of AFTER is later than the endingPoint of BEFORE.



Note:  Cyc's startsAfterEndingOf relation is equivalent to what James Allen independently dubbed the AFTER relation.")

;;; startsAfterStartingOf
(isa startsAfterStartingOf IrreflexiveBinaryPredicate)
(isa startsAfterStartingOf ComplexTemporalRelation)
(isa startsAfterStartingOf TransitiveBinaryPredicate)
(isa startsAfterStartingOf AsymmetricBinaryPredicate)
(genlPreds startsAfterStartingOf endsAfterStartingOf)
(arg1Isa startsAfterStartingOf TemporalThing)
(arg2Isa startsAfterStartingOf TemporalThing)
(comment startsAfterStartingOf "(startsAfterStartingOf X Y) means (after (StartFn X) (StartFn Y)).  That is, the startingPoint of X is later than the startingPoint of Y.  This implies nothing about whether X and Y overlap, or how much they overlap, except that they can't be fully cotemporal.")
(overlappingExternalConcept startsAfterStartingOf SENSUS-Information1997 "FOLLOW")

;;; startsDuring
(isa startsDuring IrreflexiveBinaryPredicate)
(isa startsDuring ComplexTemporalRelation)
(isa startsDuring AsymmetricBinaryPredicate)
(not 
  (isa startsDuring TransitiveBinaryPredicate))
(genlPreds startsDuring startsAfterStartingOf)
(genlPreds startsDuring temporalBoundsIntersect)
(genlInverse startsDuring endsAfterStartingOf)
(arg1Isa startsDuring TemporalThing)
(arg2Isa startsDuring TemporalThing)
(comment startsDuring "(startsDuring ?X ?Y) means ?Y covers the start of ?X, i.e. the startingPoint of ?X is properly contained (temporalBoundsContain) within ?Y.  Note that ?X and ?Y do not necessarily intersect in time, however, they would if ?Y were temporallyContinuous.")

;;; startsRelativeToEndOf
(isa startsRelativeToEndOf TernaryPredicate)
(arg1Isa startsRelativeToEndOf TemporalThing)
(arg2Isa startsRelativeToEndOf Time-Quantity)
(arg3Isa startsRelativeToEndOf TemporalThing)
(comment startsRelativeToEndOf " (startsRelativeToEndOf ?X ?D ?Y) means that the ?X starts duration ?D after ?Y ends.  That is, the startingPoint of ?X is after the endingPoint of ?Y, by an amount of time ?D.")

;;; startsRelativeToStartOf
(isa startsRelativeToStartOf TernaryPredicate)
(arg1Isa startsRelativeToStartOf TemporalThing)
(arg2Isa startsRelativeToStartOf Time-Quantity)
(arg3Isa startsRelativeToStartOf TemporalThing)
(comment startsRelativeToStartOf " (startsRelativeToStartOf ?X ?D ?Y) means that ?X starts duration ?D after ?Y starts.  That is, the startingPoint of ?X is after the startingPoint of ?Y, by an amount of time ?D.")

;;; stateOfAddress
(isa stateOfAddress FunctionalSlot)
(genlPreds stateOfAddress objectFoundInLocation)
(arg1Isa stateOfAddress ContactLocation)
(arg2Isa stateOfAddress CountrySubsidiary)
(comment stateOfAddress "(stateOfAddress LOC STATE) means that the ContactLocation LOC is located in STATE.  Note that STATE may be an element of State-Geopolitical (q.v.), or it may belong to some other kind of CountrySubsidiary.  For example, Cycorp's stateOfAddress is Texas-State.  See also ContactLocation.")

;;; stateOfDevice
(isa stateOfDevice TangibleObjectPredicate)
(isa stateOfDevice FunctionalSlot)
(genlPreds stateOfDevice hasAttributes)
(arg1Isa stateOfDevice PhysicalDevice)
(arg2Isa stateOfDevice DeviceState)
(comment stateOfDevice "This predicate is used to identify the state of operation that a particular device is in.  (stateOfDevice DEV STATE) means that the PhysicalDevice DEV is in the DeviceState STATE.  Thus, (stateOfDevice HAL DeviceOff) says that the computer HAL is switched off.")

;;; stateOfMatter
(isa stateOfMatter IntervalBasedQuantitySlot)
(isa stateOfMatter TangibleSubstancePredicate)
(arg1Isa stateOfMatter PartiallyTangible)
(arg2Isa stateOfMatter StateOfMatter-SolidLiquidGaseous)
(comment stateOfMatter "The predicate stateOfMatter is used to indicate the physical state of a tangible thing.  (stateOfMatter SUBST STATE) means that the tangible substance SUBST is in the physical state STATE.  STATE is an element of StateOfMatter-SolidLiquidGaseous (solid, semi-solid, liquid, or gaseous).")

;;; streetAddressText
(isa streetAddressText FunctionalSlot)
(arg1Isa streetAddressText ContactLocation)
(arg2Isa streetAddressText StreetAddress)
(comment streetAddressText "The predicate streetAddressText maps from a particular place to a string representing its street address.  (streetAddressText LOC STREET) means that LOC is found at the number and street given in the string STREET.  See also ContactLocation.")

;;; structureMemberIsa
(isa structureMemberIsa BinaryPredicate)
(arg1Isa structureMemberIsa Situation)
(arg2Isa structureMemberIsa Collection)
(comment structureMemberIsa "(structureMemberIsa SIT COL) means that each of the structureMembers of the situation SIT is an element of the collection COL.")

;;; structureMembers
(isa structureMembers BinaryPredicate)
(genlPreds structureMembers parts)
(arg1Isa structureMembers Situation)
(arg2Isa structureMembers Thing)
(comment structureMembers "structureMembers is a very general predicate, encompassing all the ways a Situation's structure can be composed out of parts.  In (structureMembers WHOL PRT), PRT could be a member of a Group or Series (if WHOL is a Group or Series), the subEvents of an Event (if WHOL is an Event), and so on.")

;;; stuckTo
(not 
  (isa stuckTo IrreflexiveBinaryPredicate))
(not 
  (isa stuckTo ReflexiveBinaryPredicate))
(not 
  (isa stuckTo TransitiveBinaryPredicate))
(isa stuckTo SymmetricBinaryPredicate)
(isa stuckTo ConnectionPredicate)
(isa stuckTo SpatialPredicate)
(genlPreds stuckTo connectedTo-Rigidly)
(genlInverse stuckTo stuckTo)
(arg1Isa stuckTo PartiallyTangible)
(arg2Isa stuckTo PartiallyTangible)
(comment stuckTo "(stuckTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are held together by an adhesive force that is at least strong enough to support the whole weight of (the lighter of) OBJ1 or OBJ2.  Either OBJ1 or OBJ2 must be `sticky' or have a sticky surface; e.g., duct tape, honey, chewing gum, and perhaps magnetism.  stuckTo may represent a weak form of connection, one that may be separated by manual force.







Note: If a third object (such as glue) supplies the adhesive force holding OBJ1 and OBJ2 together, or if OBJ1 or OBJ2 were acted on non-trivially (e.g., welding, not simply contact or pressure), then see bondedTo and its specializations.")

;;; stuffUsed
(isa stuffUsed ActorSlot)
(genlPreds stuffUsed instrument-Generic)
(arg1Isa stuffUsed Event)
(arg2Isa stuffUsed PartiallyTangible)
(comment stuffUsed "The predicate stuffUsed relates an event to some tangible substance which facilitates that event.  (stuffUsed EVENT STUFF) means that STUFF is a portion of an element of ExistingStuffType which plays an instrumental role in EVENT.  STUFF may or may not be consumed in the course of EVENT.  Examples: portions of Water are stuffUsed in instances of WashingDishes, WashingHair, WashingClothesInAMachine, etc.; portions of EdibleOil are stuffUsed in some instances of Frying food and BakingBread.")

;;; subAbsOfEntityAfter
(isa subAbsOfEntityAfter TernaryPredicate)
(arg1Isa subAbsOfEntityAfter Entity)
(arg2Isa subAbsOfEntityAfter SomethingExisting)
(arg3Isa subAbsOfEntityAfter TemporalThing)
(comment subAbsOfEntityAfter "(subAbsOfEntityAfter ?X ?Y ?Z) indicates that ?X is an Entity,  ?Y is some subabstraction of ?X, and (contiguousAfter ?Y ?Z).  This provides one way to talk about the effects wrought by some state-changing process.  For example, for Washing001 involving Hair001, (subAbsOfEntityAfter Hair001 ?SUB Washing001) would imply that ?SUB is Wet.  Usually the preferred alternative is to use the holdsIn representation: (holdsIn (STIF Washing001) 'Hair001 is Wet').")

;;; subAbsOfEntityBefore
(isa subAbsOfEntityBefore TernaryPredicate)
(arg1Isa subAbsOfEntityBefore Entity)
(arg2Isa subAbsOfEntityBefore SomethingExisting)
(arg3Isa subAbsOfEntityBefore TemporalThing)
(comment subAbsOfEntityBefore "(subAbsOfEntityBefore ?X ?Y ?Z) indicates that ?X is an Entity,  ?Y is some subabstraction of ?X, and (contiguousAfter ?Z ?Y). This provides one way to talk about pre-conditions for some state-changing process.  For example, 'Egg001 was raw before being scrambled' -- if (subAbsOfEntityBefore Egg001 ?SUB Scrambling001), then ?SUB is raw.  Usually the preferred alternative is to use the holdsIn representation: (holdsIn (STIB Scrambling001) 'Egg001 is raw').")

;;; subAbsOfEntityDuring
(isa subAbsOfEntityDuring TernaryPredicate)
(arg1Isa subAbsOfEntityDuring Entity)
(arg2Isa subAbsOfEntityDuring SomethingExisting)
(arg3Isa subAbsOfEntityDuring TemporalThing)
(comment subAbsOfEntityDuring "(subAbsOfEntityDuring ENTITY SUB TEMP) -- SUB is a subAbstrac (a time-slice) of the Entity ENTITY, and SUB is cotemporal with the TemporalThing TEMP.  For example, (subAbsOfEntityDuring Karen KarenDuring1992 TheYear1992).")

;;; subAbstrac
(isa subAbstrac TemporalPartSlot)
(isa subAbstrac TransitiveBinaryPredicate)
(isa subAbstrac AntiSymmetricBinaryPredicate)
(isa subAbstrac ReflexiveBinaryPredicate)
(genlPreds subAbstrac timeSlices)
(genlPreds subAbstrac temporallySubsumes)
(genlPreds subAbstrac parts)
(arg1Isa subAbstrac SomethingExisting)
(arg2Isa subAbstrac SomethingExisting)
(comment subAbstrac "(subAbstrac WHOLE SUB) means SUB is a temporal part 
(one of the timeSlices) of WHOLE, where WHOLE and SUB are both elements of 
SomethingExisting.  Both entities and subabstractions are subabstactions of 
themselves.  So the predicate subAbstrac is the restriction of the predicate 
timeSlices to the domain, and hence also range, SomethingExisting.  
`AlbertEinsteinWhileAtPrinceton' is a subAbstrac of `AlbertEinsteinAsAnAdult',
 which in turn is a subAbstrac of 'AlbertEinstein', which in turn is a 
subAbstrac only of itself (hence 'AlbertEinstein' is an element of 
Entity (q.v.)).")

;;; subAgreements
(isa subAgreements AsymmetricBinaryPredicate)
(isa subAgreements TransitiveBinaryPredicate)
(arg1Isa subAgreements Agreement)
(arg2Isa subAgreements Agreement)
(comment subAgreements "The predicate subAgreements relates a particular agreement to the subordinate agreements it comprises.  (subAgreements AGR SUB) means that both AGR and SUB are elements of Agreement, and AGR has SUB as a sub-part.")

;;; subBeliefSystem
(isa subBeliefSystem AsymmetricBinaryPredicate)
(isa subBeliefSystem TransitiveBinaryPredicate)
(isa subBeliefSystem TaxonomicSlot)
(arg1Isa subBeliefSystem BeliefSystem)
(arg2Isa subBeliefSystem BeliefSystem)
(comment subBeliefSystem "(subBeliefSystem SYS SUB) indicates that SUB is a more specialized `branch' of belief system BSYS.  Thus the beliefStatements of SUB will be a superset of the beliefStatements of BSYS (sometimes with a few changes and deletions.)  Some examples of this are:  (subBeliefSystem Islam ShiiteIslam), (subBeliefSystem ProtestantReligion PresbyterianReligion), and (subBeliefSystem MilesianSchoolBeliefs AnaximandersPhilosophy).")

;;; subEvents
(isa subEvents ComplexTemporalRelation)
(isa subEvents SubProcessSlot)
(isa subEvents TransitiveBinaryPredicate)
(isa subEvents AntiSymmetricBinaryPredicate)
(isa subEvents ReflexiveBinaryPredicate)
(genlPreds subEvents temporallySubsumes)
(genlPreds subEvents parts)
(arg1Isa subEvents Event)
(arg2Isa subEvents Event)
(comment subEvents "(subEvents WHOLE PART) means that the event PART is a meaningful part of the event WHOLE.  So both WHOLE and PART are elements of Event.  The predicate subEvents can be used to decompose events in time, in space, and/or in other ways.  Following a recipe often has this property:  the task is broken down into several sub-tasks, some of which happen before others, and some of which happen simultaneously but involve different ingredients.  One could also decompose `making dinner' into subEvents according to how dangerous they are, which might be useful if one had kids of various ages helping.  Often, a more specialized relation than subEvents can be used; e.g., if you have subevents that decompose an action in time only, then the more specialized predicate subProcesses should be used.")
(synonymousExternalConcept subEvents SENSUS-Information1997 "SUBEVENT")

;;; subGoals
(isa subGoals TransitiveBinaryPredicate)
(isa subGoals AsymmetricBinaryPredicate)
(isa subGoals TaxonomicSlot)
(arg1Isa subGoals Goal)
(arg2Isa subGoals Goal)
(comment subGoals "(subGoals G SUB) means that SUB is a subordinate goal of G.  In other words, SUB is an intermediate objective or milestone to be accomplished in the course of pursuing the overall Goal G.")

;;; subGroups
(isa subGroups CotemporalObjectsSlot)
(isa subGroups TransitiveBinaryPredicate)
(isa subGroups ReflexiveBinaryPredicate)
(isa subGroups PartPredicate)
(genlPreds subGroups cotemporal)
(arg1Isa subGroups Group)
(arg2Isa subGroups Group)
(comment subGroups "The predicate subGroups is used to relate a particular group to its subgroups.  (subGroups GROUP SUB) means that (1) GROUP includes all the groupMembers of SUB, and (2) SUB and GROUP co-exist as groups.  Examples: the stars in the constellation Big Dipper constitute a group which is one of the subGroups of the Milky Way galaxy; Democrats in the House of Representatives in 1997 are a subgroup of the group of U.S. House Members for that year.")

;;; subOrganizations
(isa subOrganizations CotemporalObjectsSlot)
(isa subOrganizations NonPhysicalPartPredicate)
(isa subOrganizations IrreflexiveBinaryPredicate)
(isa subOrganizations TransitiveBinaryPredicate)
(genlPreds subOrganizations affiliatedWith)
(genlPreds subOrganizations subGroups)
(arg1Isa subOrganizations Organization)
(arg2Isa subOrganizations Organization)
(comment subOrganizations "The predicate subOrganizations relates a particular organization to
one of its sub-organizations. (subOrganizations ORG1 ORG2) means ORG2 is a
 sub-organization of ORG1, whether it is at the very next organizational level
down, e.g., (subOrganizations NationalLeague-Baseball NationalLeagueEast-Baseball),
or several levels down the heirarchy, e.g., (subOrganizations NationalLeague-Baseball NewYorkMets).")

;;; subPathSystems
(isa subPathSystems AntiSymmetricBinaryPredicate)
(isa subPathSystems TransitiveBinaryPredicate)
(isa subPathSystems ReflexiveBinaryPredicate)
(arg1Isa subPathSystems Thing)
(arg2Isa subPathSystems Thing)
(comment subPathSystems "(subPathSystems SYS SUBSYS) means that the path system SUBSYS is a subsystem of the path system SYS.  Technically, this means the following: (i) Every point in SUBSYS is a point in SYS, (ii) every node in SUBSYS is a node in SYS, (iii) every link in SUBSYS is a link in SYS, and (iv) every loop in SUBSYS is a loop in SYS.  Some consequences of these conditions are as follows.  (a) Every point in SUBSYS that is a node in SYS is a node in SUBSYS.  (b) For any nodes X and Y in SUBSYS and each link LINK in SUBSYS, LINK is between X and Y in SYS iff it is between X and Y in SUBSYS.  (c) For each point X in SYS that is not a node in SYS, if X is on a link in SYS that is not in SUBSYS, X is not in SUBSYS.  (d) Isolated points and deadends in SUBSYS must be nodes in SYS.  (e) For each loop LOOP in SUBSYS, the only node in SYS on LOOP must be a node in SUBSYS.  (f) If SYS is a SimpleGraph-GraphTheoretic (or a MultiGraph), all subsystems of SYS are SimpleGraph-GraphTheoretics (or MultiGraphs).  Predicates concerning particular kinds of subsystems of path systems, i.e., predicates that take subPathSystems as genlPreds, include linkClosedSubSystems, pointClosedSubSystems, maximalConnectedSubSystems, reductionOfPathSystems, etc.")

;;; subPaths
(isa subPaths TransitiveBinaryPredicate)
(isa subPaths AntiSymmetricBinaryPredicate)
(isa subPaths CotemporalObjectsSlot)
(isa subPaths ReflexiveBinaryPredicate)
(genlPreds subPaths cotemporal)
(genlPreds subPaths subPaths-Generic)
(arg1Isa subPaths Path-Simple)
(arg2Isa subPaths Path-Simple)
(comment subPaths "Provided PATH1 and PATH2 are instances of Path-Simple, (subPaths PATH1 PATH2) means that PATH2 is a sub-path of PATH1, and that any 'point' on PATH2 must also be on PATH1.")

;;; subPaths-Generic
(isa subPaths-Generic CotemporalObjectsSlot)
(isa subPaths-Generic SpatialPredicate)
(isa subPaths-Generic PhysicalPartPredicate)
(isa subPaths-Generic AntiSymmetricBinaryPredicate)
(isa subPaths-Generic TransitiveBinaryPredicate)
(isa subPaths-Generic ReflexiveBinaryPredicate)
(genlPreds subPaths-Generic physicalParts)
(genlPreds subPaths-Generic cotemporal)
(arg1Isa subPaths-Generic Path-Generic)
(arg2Isa subPaths-Generic Path-Generic)
(comment subPaths-Generic "If PATH1 and PATH2 are instances of Path-Generic, which includes Path-Simple and Path-Cyclic, then (subPaths-Generic PATH1 PATH2) means that PATH2 is a sub-path of PATH1, and that any object onPath PATH2 must also be onPath PATH1.  See also subPaths which does not apply to Path-Cyclic, just to Path-Simple.")

;;; subSeries
(isa subSeries BinaryPredicate)
(arg1Isa subSeries Series)
(arg2Isa subSeries Series)
(comment subSeries "(subSeries SER1 SER2) means that SER2 is a sub-series of SER1.  This means that all the members of SER2 are members of SER1, that SER1 and SER2 share the same ordering principle, and that, if the first member of SER2 is the Mth member of SER1, the Nth member of SER2 is the (N + M - 1)th member of SER1.  So a subseries is an uninterrupted ''slice'' of the whole.")

;;; subsetOf
(isa subsetOf TransitiveBinaryPredicate)
(isa subsetOf ReflexiveBinaryPredicate)
(not 
  (isa subsetOf AsymmetricBinaryPredicate))
(not 
  (isa subsetOf SymmetricBinaryPredicate))
(not 
  (isa subsetOf AntiSymmetricBinaryPredicate))
(not 
  (isa subsetOf IrreflexiveBinaryPredicate))
(arg1Isa subsetOf SetOrCollection)
(arg2Isa subsetOf SetOrCollection)
(comment subsetOf "(subsetOf SUB SUPER) means that every element of the mathematical set or collection SUB is an element of the mathematical set or collection SUPER.")

;;; subsumedByIntervalType
(isa subsumedByIntervalType IntensionalRepresentationPredicate)
(isa subsumedByIntervalType BinaryPredicate)
(arg1Isa subsumedByIntervalType TemporalThing)
(arg2Isa subsumedByIntervalType TemporalObjectType)
(comment subsumedByIntervalType "(subsumedByIntervalType ?X ?Y) means that a time interval of type ?Y (i.e., something which isa ?Y) temporallySubsumes ?X.  For example, (subsumedByIntervalType FredsBirth Wednesday) means that Fred was born on a Wednesday.  As another example, Cyc contains an axiom which says, in a typical modern service-providing context, that each instance of HairCuttingEvent is subsumedByIntervalType DaytimeWorkingHours -- i.e., it is true as a default that the typical professional haircut is given during normal daytime working hours.")

;;; subsumesIntervalType
(isa subsumesIntervalType TemporalRelation)
(isa subsumesIntervalType AntiSymmetricBinaryPredicate)
(isa subsumesIntervalType ReflexiveBinaryPredicate)
(isa subsumesIntervalType TransitiveBinaryPredicate)
(genlPreds subsumesIntervalType intersectsIntervalType)
(arg1Isa subsumesIntervalType TemporalObjectType)
(arg2Isa subsumesIntervalType TemporalObjectType)
(comment subsumesIntervalType "(subsumesIntervalType X Y) indicates that every instance of X temporallySubsumes some instance of Y.  For example, one of Cyc's axioms states that in the NorthernHemisphereMt (the context in which the location is assumed to be somewhere north of the equator) it is true that (subsumesIntervalType CalendarWinter January).  That is, in that micro-theory, each Winter contains a January.  In the base KB -- that is, independent of context -- it is true that (subsumesIntervalType CalendarQuarter CalendarMonth), which means that every calendar quarter contains at least one entire calendar month.")

;;; successfulForAgents
(isa successfulForAgents ActorSlot)
(genlPreds successfulForAgents performedBy)
(arg1Isa successfulForAgents PurposefulAction)
(arg2Isa successfulForAgents Agent)
(comment successfulForAgents "The predicate successfulForAgents is used to indicate that a particular agent achieves its goal in a particular action.  (successfulForAgents ENDEAVOR AGT) means that the Agent AGT is successful in accomplishing the PurposefulAction ENDEAVOR.  This means that each of the purposes AGT had in doing ENDEAVOR has come true.  See also purposeInEvent.")

;;; succession-RST
(isa succession-RST TransitiveBinaryPredicate)
(isa succession-RST RSTRelation)
(arg1Isa succession-RST LinguisticObject)
(arg2Isa succession-RST LinguisticObject)
(comment succession-RST "The discourse relation that holds between two segments of text when they describe events which are related to one another by succession.")
(synonymousExternalConcept succession-RST SENSUS-Information1997 "RST-SEQUENCE")

;;; superTaxons
(isa superTaxons NonPhysicalPartPredicate)
(isa superTaxons AsymmetricBinaryPredicate)
(isa superTaxons TransitiveBinaryPredicate)
(genlPreds superTaxons genls)
(genlInverse superTaxons genls)
(arg1Isa superTaxons BiologicalTaxon)
(arg2Isa superTaxons BiologicalTaxon)
(comment superTaxons "The predicate superTaxons is used to relate elements of BiologicalTaxon.  (superTaxons TAXON  GEN-TAXON) means that GEN-TAXON is a BiologicalTaxon above (i.e., more general and inclusive than) the more specific BiologicalTaxon TAXON.  Every instance of TAXON must therefore also be an instance of GEN-TAXON; the same holds for the taxonMembers relation.  Example: (superTaxons DomesticCat FelisGenus).  See also taxonMembers.")

;;; suppliers
(not 
  (isa suppliers IrreflexiveBinaryPredicate))
(not 
  (isa suppliers ReflexiveBinaryPredicate))
(not 
  (isa suppliers AsymmetricBinaryPredicate))
(not 
  (isa suppliers SymmetricBinaryPredicate))
(not 
  (isa suppliers TransitiveBinaryPredicate))
(isa suppliers CotemporalObjectsSlot)
(genlPreds suppliers cotemporal)
(genlPreds suppliers doesBusinessWith)
(genlInverse suppliers clients)
(arg1Isa suppliers Organization)
(arg2Isa suppliers Agent)
(comment suppliers "The predicate suppliers represents a relationship between an organization and an agent.  (suppliers ORG AGT) means that the Agent AGT supplies some goods or services to the Organization ORG on an ongoing basis, usually for payment.")

;;; supportedBy
(not 
  (isa supportedBy AsymmetricBinaryPredicate))
(not 
  (isa supportedBy AntiSymmetricBinaryPredicate))
(not 
  (isa supportedBy SymmetricBinaryPredicate))
(isa supportedBy TransitiveBinaryPredicate)
(isa supportedBy IrreflexiveBinaryPredicate)
(arg1Isa supportedBy PartiallyTangible)
(arg2Isa supportedBy PartiallyTangible)
(comment supportedBy "(supportedBy OBJECT SUPPORTER) means that SUPPORTER is at least partially responsible for OBJECT maintaining its current position.  If OBJECT were not supportedBy this supporter, it would fall.")

;;; surfaceAttributeOfSurf
(isa surfaceAttributeOfSurf BinaryPredicate)
(arg1Isa surfaceAttributeOfSurf Surface-Physical)
(arg2Isa surfaceAttributeOfSurf AttributeValue)
(comment surfaceAttributeOfSurf "(surfaceAttributeOfSurf SURF SURFATT) means that the particular individual Surface-Physical SURF has the SurfaceAttribute SURFATT over most or all of its area.  It may have more than one such surface attribute.")

;;; surfaceParts
(isa surfaceParts PhysicalPartPredicate)
(isa surfaceParts AntiSymmetricBinaryPredicate)
(isa surfaceParts TransitiveBinaryPredicate)
(not 
  (isa surfaceParts ReflexiveBinaryPredicate))
(not 
  (isa surfaceParts IrreflexiveBinaryPredicate))
(genlPreds surfaceParts externalParts)
(arg1Isa surfaceParts PartiallyTangible)
(arg2Isa surfaceParts PartiallyTangible)
(comment surfaceParts "(surfaceParts BIG LITTLE) means that LITTLE is a physical part of a surface of BIG, or that LITTLE is a physical part of BIG itself and a surface of LITTLE is part of a surface of BIG.  Positive exemplars: the skin of an orange is a surfaceParts of the orange, Texas-State is a surfaceParts of UnitedStatesOfAmerica, a window of a house is a surfaceParts of that house.  Borderline positive exemplars: the inside surface of a coffee cup is one of the surfaceParts of the cup; the inside surface of a beer-can in some contexts is a #surfaceParts of the can.  Negative exemplars:  the brain is not a surfaceParts of a person.")

;;; surroundsCompletely
(isa surroundsCompletely AsymmetricBinaryPredicate)
(isa surroundsCompletely SpatialPredicate)
(isa surroundsCompletely TransitiveBinaryPredicate)
(genlPreds surroundsCompletely surroundsHorizontally)
(arg1Isa surroundsCompletely PartiallyTangible)
(arg2Isa surroundsCompletely PartiallyTangible)
(comment surroundsCompletely "(surroundsCompletely OUTSIDE INSIDE) means that OUTSIDE completely surrounds INSIDE.  In other words, all rays with origins at INSIDE pass through OUTSIDE by default (with some exceptions).  OUTSIDE is not a part of INSIDE (or vice versa).  Examples: a candy bar inside its wrapper; the body of a pregnant mammalian female containing a foetus; a fish in water.")

;;; surroundsHorizontally
(not 
  (isa surroundsHorizontally TransitiveBinaryPredicate))
(isa surroundsHorizontally CotemporalObjectsSlot)
(isa surroundsHorizontally AsymmetricBinaryPredicate)
(isa surroundsHorizontally SpatialPredicate)
(genlPreds surroundsHorizontally cotemporal)
(genlInverse surroundsHorizontally objectFoundInLocation)
(arg1Isa surroundsHorizontally PartiallyTangible)
(arg2Isa surroundsHorizontally PartiallyTangible)
(comment surroundsHorizontally "(surroundsHorizontally OUTSIDE INSIDE) means that OUTSIDE surrounds a horizontal slice of INSIDE.  That is, there is some horizontal cross section of INSIDE such that all rays drawn horizontally from points in that cross section pass through OUTSIDE, and along each of those rays there are points which are in OUTSIDE and beyond all points of INSIDE.  Thus, (surroundsHorizontally OUTSIDE INSIDE) is NOT true if INSIDE shares a boundary with OUTSIDE; e.g., Texas is not surrounded by the USA.  Positive cases: water surrounds islands; foothills may surround a mountain range.  See also surroundsCompletely.")

;;; suspendedIn
(isa suspendedIn AntiTransitiveBinaryPredicate)
(isa suspendedIn AsymmetricBinaryPredicate)
(isa suspendedIn SpatialPredicate)
(genlPreds suspendedIn in-ImmersedFully)
(arg1Isa suspendedIn PartiallyTangible)
(arg2Isa suspendedIn FluidTangibleThing)
(comment suspendedIn "(suspendedIn OBJ FLUID) means that OBJ is fully immersed in FLUID, and OBJ is suspended in FLUID by the kind of force that supports any suspension particle.  Note that while suspendedIn correctly describes the condition of a suspendedPart in its suspendingFluid (e.g., a dirt particle suspended in water), suspendedIn can also be used more broadly (e.g., a hot air balloon is suspendedIn air).  See also Suspension.")

;;; suspendedPart
(not 
  (isa suspendedPart TransitiveBinaryPredicate))
(isa suspendedPart CotemporalObjectsSlot)
(isa suspendedPart CompositionPredicate)
(genlPreds suspendedPart cotemporal)
(genlPreds suspendedPart constituents)
(arg1Isa suspendedPart Suspension)
(arg2Isa suspendedPart Particle)
(comment suspendedPart "The predicate suspendedPart indicates an individual particle of TangibleThing which is suspended in a particular instance of Suspension.  Thus, (suspendedPart SUS PART) means that PART is a Particle suspended in the suspendingFluid of the Suspension SUS.  Examples: in an instance of CloudlikeObject, the (typical) suspendedPart is a Particle of water; in muddy water, the (typical) suspendedPart is a Particle of soil.")

;;; suspendingFluid
(not 
  (isa suspendingFluid TransitiveBinaryPredicate))
(isa suspendingFluid AntiTransitiveBinaryPredicate)
(isa suspendingFluid CotemporalObjectsSlot)
(isa suspendingFluid AsymmetricBinaryPredicate)
(isa suspendingFluid CompositionPredicate)
(genlPreds suspendingFluid mainConstituent)
(genlPreds suspendingFluid cotemporal)
(arg1Isa suspendingFluid Suspension)
(arg2Isa suspendingFluid PartiallyTangible)
(comment suspendingFluid "The predicate suspendingFluid indicates the particular fluid in which particles are suspended in a particular instance of Suspension.  Thus, (suspendingFluid SUS FLU) means that FLU is among the constituents of the Suspension SUS, FLU is a fluid (i.e., liquid OR gas), and FLU is the fluid constituent which suspends the particles in SUS.  For example, in an instance of CloudlikeObject, the suspendingFluid is the portion of Air that is surrounding and supporting the droplets of water vapour in the cloud.  In muddy water, the suspendingFluid is that instance of Water which is supporting the particles of soil.")

;;; symbolizes
(not 
  (isa symbolizes TransitiveBinaryPredicate))
(isa symbolizes AsymmetricBinaryPredicate)
(arg1Isa symbolizes SymbolicObject)
(arg2Isa symbolizes Thing)
(comment symbolizes "(symbolizes SYMBOL OBJ) means that the SymbolicObject SYMBOL represents the thing OBJ for some abstract agent.  E.g., the US flag symbolizes the USA.  It is usually true that (symbolizes x y) implies (connotes x y High).
Note that the 'abstract agent' may be context-specific -- a given object may represent one thing in one culture, and nothing at all or a different thing in another culture.")

;;; symmetricPartTypes
(isa symmetricPartTypes BinaryPredicate)
(arg1Isa symmetricPartTypes ExistingObjectType)
(arg1Genl symmetricPartTypes PartiallyTangible)
(arg2Isa symmetricPartTypes ExistingObjectType)
(arg2Genl symmetricPartTypes PartiallyTangible)
(comment symmetricPartTypes "(symmetricPartTypes ?BIG ?SMALL) means that every instance of ?BIG has exactly two, symmetrically positioned, instance of ?SMALL as parts.")

;;; synonymousExternalConcept
(isa synonymousExternalConcept TernaryPredicate)
(arg1Isa synonymousExternalConcept Thing)
(arg2Isa synonymousExternalConcept IndexedInfoSource)
(arg3Isa synonymousExternalConcept CharacterString)
(comment synonymousExternalConcept "(synonymousExternalConcept ?TERM ?SOURCE ?STRING) means that the Cyc
concept ?TERM is synonymous with the concept named by ?STRING in the
external data source ?SOURCE.")

;;; target
(isa target ActorSlot)
(genlPreds target actors)
(arg1Isa target GeneralizedTransfer)
(arg2Isa target PartiallyTangible)
(comment target "(target TRANS PLACE) means that the performedBy (or directingAgent) of the event TRANS intends that the transferredThing end up at PLACE.")

;;; tastes
(isa tastes PerceivingSlot)
(genlPreds tastes perceives)
(arg1Isa tastes PerceptualAgent)
(arg2Isa tastes TemporalThing)
(comment tastes "(tastes AGT OBJ) means that AGT perceives the tastes of OBJ.  We can taste objects, such as lollipops, or events, such as the 'finish' of a wine, as long as they have some tangible aspect.")

;;; temperatureOfObject
(isa temperatureOfObject PhysicalAttributeDescriptionSlot)
(isa temperatureOfObject IntervalBasedQuantitySlot)
(arg1Isa temperatureOfObject PartiallyTangible)
(arg2Isa temperatureOfObject Temperature)
(comment temperatureOfObject "(temperatureOfObject OBJECT TEMPERATURE) means that the individual OBJECT has the Temperature TEMPERATURE. Note that OBJECT may be a piece of stuff -- for example, a particular spot in the ocean.")

;;; temporalBoundsContain
(isa temporalBoundsContain ComplexTemporalRelation)
(isa temporalBoundsContain AsymmetricBinaryPredicate)
(isa temporalBoundsContain TransitiveBinaryPredicate)
(isa temporalBoundsContain IrreflexiveBinaryPredicate)
(genlPreds temporalBoundsContain temporalBoundsIntersect)
(genlInverse temporalBoundsContain endsDuring)
(genlInverse temporalBoundsContain startsDuring)
(arg1Isa temporalBoundsContain TemporalThing)
(arg2Isa temporalBoundsContain TemporalThing)
(comment temporalBoundsContain "(temporalBoundsContain LONGER SHORTER) means that LONGER strictly contains SHORTER.  There is a positive non-zero time after LONGER starts before SHORTER starts, and there is a positive non-zero time after SHORTER ends before LONGER ends.   That is, the startingPoint of LONGER is a finite amount of time earlier than the startingPoint of SHORTER, and the endingPoint of LONGER is a finite amount of time later than the endingPoint of SHORTER.   Naturally, temporalBoundsContain is a stronger relation than temporalBoundsIntersect.  If LONGER is temporallyContinuous, then (temporalBoundsContain LONGER SHORTER) further implies (temporallySubsumes LONGER SHORTER).  Note:  This Cyc temporal relation is equivalent to what James Allen independently dubbed the CONTAINS relation.")

;;; temporalBoundsIdentical
(isa temporalBoundsIdentical ReflexiveBinaryPredicate)
(isa temporalBoundsIdentical SymmetricBinaryPredicate)
(isa temporalBoundsIdentical ComplexTemporalRelation)
(isa temporalBoundsIdentical TransitiveBinaryPredicate)
(genlPreds temporalBoundsIdentical temporallyCoterminal)
(genlPreds temporalBoundsIdentical temporallyCooriginating)
(genlInverse temporalBoundsIdentical temporalBoundsIdentical)
(arg1Isa temporalBoundsIdentical TemporalThing)
(arg2Isa temporalBoundsIdentical TemporalThing)
(comment temporalBoundsIdentical "(temporalBoundsIdentical ?X ?Y) means that ?X and ?Y are both temporallyCooriginating and temporallyCoterminal.  That is, ?X and ?Y have the same startingPoints and also have the same endingPoints.  Note that if ?X and ?Y are continuous temporal objects, such as a pair of ashtrays, then this means that they must in fact be completely cotemporal.")

;;; temporalBoundsIntersect
(isa temporalBoundsIntersect ComplexTemporalRelation)
(isa temporalBoundsIntersect SymmetricBinaryPredicate)
(isa temporalBoundsIntersect ReflexiveBinaryPredicate)
(not 
  (isa temporalBoundsIntersect TransitiveBinaryPredicate))
(genlPreds temporalBoundsIntersect endsAfterStartingOf)
(genlInverse temporalBoundsIntersect temporalBoundsIntersect)
(genlInverse temporalBoundsIntersect endsAfterStartingOf)
(arg1Isa temporalBoundsIntersect TemporalThing)
(arg2Isa temporalBoundsIntersect TemporalThing)
(comment temporalBoundsIntersect "(temporalBoundsIntersect ?X ?Y) means that the closed solid time interval between from the start of ?X to the end of ?X, inclusive, intersects the solid time interval from the start of ?Y and the end of ?Y, inclusive.  Clearly, if ?X and ?Y are continuous events, then the stronger assertion (temporallyIntersects ?X ?Y) must also hold.  But if either is a discontinuous event, it is possible to have a situation where their bounds intersect but where there is no time point in common.  For example, the discontinuous event of `Fred sleeping this week' could intersects the bounds of `Fred driving this week' even though the two events share no time points (we hope).")

;;; temporallyContinuous
(isa temporallyContinuous UnaryPredicate)
(arg1Isa temporallyContinuous TemporalThing)
(comment temporallyContinuous "If (temporallyContinuous TEMP-OBJ), then TEMP-OBJ occupies one continous chunk of time.  There are no time intervals between the start and end of TEMP-OBJ during which TEMP-OBJ is not occurring/existing.")

;;; temporallyCooriginating
(isa temporallyCooriginating ComplexTemporalRelation)
(isa temporallyCooriginating SymmetricBinaryPredicate)
(isa temporallyCooriginating ReflexiveBinaryPredicate)
(isa temporallyCooriginating TransitiveBinaryPredicate)
(genlPreds temporallyCooriginating temporallyIntersects)
(genlInverse temporallyCooriginating temporallyCooriginating)
(arg1Isa temporallyCooriginating TemporalThing)
(arg2Isa temporallyCooriginating TemporalThing)
(comment temporallyCooriginating "(temporallyCooriginating ?X ?Y) means (simultaneousWith (StartFn ?X) (StartFn ?Y)).  That is, the startingPoint of ?X is the same as the startingPoint of ?Y.  This implies that ?X and ?Y overlap, in at least one point (namely, their startingPoints are the same.)")

;;; temporallyCoterminal
(isa temporallyCoterminal TransitiveBinaryPredicate)
(isa temporallyCoterminal ComplexTemporalRelation)
(isa temporallyCoterminal SymmetricBinaryPredicate)
(isa temporallyCoterminal ReflexiveBinaryPredicate)
(genlPreds temporallyCoterminal temporallyIntersects)
(genlInverse temporallyCoterminal temporallyCoterminal)
(arg1Isa temporallyCoterminal TemporalThing)
(arg2Isa temporallyCoterminal TemporalThing)
(comment temporallyCoterminal "(temporallyCoterminal ?X ?Y) means (simultaneousWith (EndFn ?X) (EndFn ?Y)).  That is, the endingPoint of ?X is the same as the endingPoint of ?Y.  This implies that ?X and ?Y overlap, in at least one point (namely, their endingPoints are the same.)")

;;; temporallyDisjoint
(not 
  (isa temporallyDisjoint TransitiveBinaryPredicate))
(isa temporallyDisjoint IrreflexiveBinaryPredicate)
(isa temporallyDisjoint SymmetricBinaryPredicate)
(isa temporallyDisjoint ComplexTemporalRelation)
(genlInverse temporallyDisjoint temporallyDisjoint)
(arg1Isa temporallyDisjoint TemporalThing)
(arg2Isa temporallyDisjoint TemporalThing)
(comment temporallyDisjoint "(temporallyDisjoint ?X ?Y) means that there are no time points in common between ?X and ?Y.  If you view each of them as a set of TimePoints, the two sets are disjoint.  For example, consider the discontinuous events `Fred sleeping this week' and `Fred driving this week'. These are presumably temporallyDisjoint even if they `interlock' during the week.")

;;; temporallyFinishedBy
(isa temporallyFinishedBy ComplexTemporalRelation)
(isa temporallyFinishedBy TransitiveBinaryPredicate)
(isa temporallyFinishedBy AsymmetricBinaryPredicate)
(isa temporallyFinishedBy IrreflexiveBinaryPredicate)
(genlPreds temporallyFinishedBy temporallyCoterminal)
(genlInverse temporallyFinishedBy startsDuring)
(arg1Isa temporallyFinishedBy TemporalThing)
(arg2Isa temporallyFinishedBy TemporalThing)
(comment temporallyFinishedBy "(temporallyFinishedBy PERIOD FINISH) means that PERIOD and FINISH are temporallyCoterminal, and that FINISH starts within the bounds of PERIOD.   That is, the endingPoint of PERIOD and FINISH are the same element of TimePoint, and the startingPoint of FINISH is no earlier than the startingPoint of PERIOD.



Note:  This Cyc temporal relation is equivalent to what James Allen dubbed the FINISHEDBY relation.  We liked his name better than the one we had been using, and so we renamed this predicate accordingly.")

;;; temporallyIntersects
(isa temporallyIntersects ComplexTemporalRelation)
(isa temporallyIntersects SymmetricBinaryPredicate)
(isa temporallyIntersects ReflexiveBinaryPredicate)
(not 
  (isa temporallyIntersects TransitiveBinaryPredicate))
(genlPreds temporallyIntersects temporalBoundsIntersect)
(genlInverse temporallyIntersects temporallyIntersects)
(arg1Isa temporallyIntersects TemporalThing)
(arg2Isa temporallyIntersects TemporalThing)
(comment temporallyIntersects "(temporallyIntersects ?X ?Y) means that there is at least one TimePoint which ?X temporallySubsumes and ?Y temporallySubsumes.  If you think of ?X and ?Y as sets of TimePoints, then those two sets intersect.")

;;; temporallyIntrinsicArg
(isa temporallyIntrinsicArg BinaryPredicate)
(arg1Isa temporallyIntrinsicArg Predicate)
(arg2Isa temporallyIntrinsicArg PositiveInteger)
(comment temporallyIntrinsicArg "(temporallyIntrinsicArg PRED N) means that PRED expresses a property that is temporally intrinsic for its argument position N. That means, if a formula using PRED







is true for some object OBJ (in the Nth argument position), we can assume the truth of every similar formula in which any temporal part of OBJ is substituted in for OBJ. For







example, since (temporallyIntrinsicArg massOfObject 1) is true, if we know (massOfObject `Rock37' (Gram 37)), we can expect that any temporal part of `Rock37', such as







`Rock37Today', will also have a mass of 37 grams. An example of a property which is not temporally intrinsic would be `average speed'. The average speed of a car







on a drive from Austin to Dallas might be 50 mph, but during particular sub-intervals of that drive the average speed could vary from 0 to 75 mph.  The collection CotemporalPredicate is a class of relations which 







are not temporally intrinsic but might at first seem to be, e.g., physicalParts. In (physicalParts `Joe' `JoesHead'), it is not the case







that every temporal part of `Joe' (such as `JoeToday') has `JoesHead' as a physical part.  Rather, `JoeToday' would have `JoesHeadToday' among its physicalParts. With physicalParts,







as with all other elements of CotemporalPredicate, every time-slice of the first argument is related to a cotemporal time-slice of the second argument, but that is not covered by







temporallyIntrinsicArg and its associated axioms.")

;;; temporallyStartedBy
(isa temporallyStartedBy IrreflexiveBinaryPredicate)
(isa temporallyStartedBy ComplexTemporalRelation)
(isa temporallyStartedBy TransitiveBinaryPredicate)
(isa temporallyStartedBy AsymmetricBinaryPredicate)
(genlPreds temporallyStartedBy temporallyCooriginating)
(genlInverse temporallyStartedBy endsDuring)
(arg1Isa temporallyStartedBy TemporalThing)
(arg2Isa temporallyStartedBy TemporalThing)
(comment temporallyStartedBy "(temporallyStartedBy PERIOD START) means that PERIOD and START are temporallyCooriginating and that START ends within the bounds of PERIOD.   That is, the startingPoint of PERIOD and START are the same TimePoint, and the endingPoint of START is no later than the endingPoint of PERIOD.







Note:  This Cyc temporal relation is equivalent to what James Allen dubbed the STARTEDBY relation.  We liked his name better than the one we had been using, and so we renamed this predicate accordingly.")

;;; temporallySubsumes
(isa temporallySubsumes ComplexTemporalRelation)
(isa temporallySubsumes TransitiveBinaryPredicate)
(isa temporallySubsumes ReflexiveBinaryPredicate)
(not 
  (isa temporallySubsumes SymmetricBinaryPredicate))
(not 
  (isa temporallySubsumes AntiSymmetricBinaryPredicate))
(not 
  (isa temporallySubsumes AsymmetricBinaryPredicate))
(genlPreds temporallySubsumes temporallyIntersects)
(arg1Isa temporallySubsumes TemporalThing)
(arg2Isa temporallySubsumes TemporalThing)
(comment temporallySubsumes "(temporallySubsumes ?X ?Y) means that all time points of ?Y are contained in ?X.   This implies that ?Y doesn't start before ?X, and doesn't end after ?X.  And if there's some time point or interval that ?X isn't happening, then neither is ?Y.  
Note:  This relation is weaker than cotemporal, which can be thought of as requiring that ?X and ?Y temporallySubsumes each other.   
Note: This relation is a strictly temporal relationship between ?X and ?Y; it is weaker than subEvents, which can be thought of as requiring that ?X not only temporallySubsumes ?Y but also that ?Y is a `part' of ?X.")
(synonymousExternalConcept temporallySubsumes SENSUS-Information1997 "TEMPORAL-INCLUSIVE")

;;; tensileStrengthOfSubstance
(isa tensileStrengthOfSubstance TangibleSubstancePredicate)
(isa tensileStrengthOfSubstance IntervalBasedQuantitySlot)
(arg1Isa tensileStrengthOfSubstance PartiallyTangible)
(arg2Isa tensileStrengthOfSubstance TensileStrength)
(comment tensileStrengthOfSubstance "(tensileStrengthOfSubstance OBJ DEGREE) indicates the relative force needed to deform the tangible OBJ.  A higher DEGREE of TensileStrength indicates more force is required to deform the object.")

;;; termOfUnit
(isa termOfUnit BinaryPredicate)
(isa termOfUnit InferenceRelatedBookkeepingPredicate)
(isa termOfUnit DefaultMonotonicPredicate)
(arg1Isa termOfUnit ReifiableTerm)
(arg2Isa termOfUnit CycSystemList)
(comment termOfUnit "termOfUnit is an inference-related Cyc predicate which appears in system-generated assertions; termOfUnit represents a mapping between a non-atomic term (NAT) and a Cyc constant that was reified by the system especially for that NAT.  Assertions with termOfUnit are created by the system when a certain kind of non-atomic term (NAT) first appears in a Cyc formula; such a NAT consists of a Cyc function that is an element of ReifiableFunction, together with the correct number and type of arguments.  When such a NAT is first used in a formula, the Cyc system automatically creates a Cyc-constant data-structure to reify the NAT.  A name is automatically assigned to the new constant (i.e., the data-structure) by the Cyc system; currently (1997), the system is using for most of those constant names a string which is identical to the NAT.  One should not be misled by that into thinking that termOfUnit is a specialization of equals. 

The predicate termOfUnit maps between the system-generated data-structure and the original non-atomic term.  (termOfUnit NAT-CONSTANT NAT-EXPRESSION) tells us that the constant data-structure NAT-CONSTANT was created to reify the value of the non-atomic term NAT-EXPRESSION.  From now on, NAT-EXPRESSION will refer to the constant NAT-CONSTANT.

Examples of non-atomic terms (NATs) include: (Giga DollarsPerYear), (RepairingFn Automobile), and (TheScriptFn WashingClothesInAMachine). See also NonPredicateFunction, ReifiableTerm.

Note: termOfUnit assertions are entered in the BaseKB because the mapping between a NAT and the constant that was reified for it holds universally.  One should view termOfUnit assertions as bits of bookkeeping knowledge which are very rarely, if ever, entered into the KB by hand.")

;;; terrainAttributes
(isa terrainAttributes BinaryPredicate)
(genlPreds terrainAttributes hasAttributes)
(arg1Isa terrainAttributes GeographicalRegion)
(arg2Isa terrainAttributes TerrainAttribute)
(comment terrainAttributes "The predicate terrainAttributes is used to describe the type of terrain in a particular geographical region. (terrainAttributes REGION ATTRIB) means that GeographicalRegion REGION has the TerrainAttribute ATTRIB.  For example, the Matterhorn-Mount has terrainAttributes, RuggedTerrain. ")

;;; territoriesControlled
(not 
  (isa territoriesControlled IrreflexiveBinaryPredicate))
(not 
  (isa territoriesControlled ReflexiveBinaryPredicate))
(not 
  (isa territoriesControlled TransitiveBinaryPredicate))
(isa territoriesControlled AntiSymmetricBinaryPredicate)
(isa territoriesControlled IntangibleObjectPredicate)
(arg1Isa territoriesControlled GeopoliticalEntity)
(arg2Isa territoriesControlled GeographicalRegion)
(arg2Isa territoriesControlled Agent)
(comment territoriesControlled "(territoriesControlled ?REG1 ?REG2) means the ?REG2 is under the political control of ?REG1.   This refers to actaul practical political control, not mere legal or unenforced territorial claims.")

;;; thereExistAtLeast
(isa thereExistAtLeast Quantifier)
(isa thereExistAtLeast Relationship)
(arg1Isa thereExistAtLeast PositiveInteger)
(arg2Isa thereExistAtLeast CycELVariable)
(arg3Isa thereExistAtLeast CycFormula)
(comment thereExistAtLeast "The predicate thereExistAtLeast is a specialized form of thereExists (q.v.).  (thereExistAtLeast 5 X FORM) means that there are at least five distinct objects in the Cyc universe which, when substituted for the CycELVariable X in the CycFormula FORM, make FORM true.  See thereExists for more information about existential quantification.")
(resultIsa thereExistAtLeast CycFormula)

;;; thereExistAtMost
(isa thereExistAtMost Quantifier)
(isa thereExistAtMost Relationship)
(arg1Isa thereExistAtMost PositiveInteger)
(arg2Isa thereExistAtMost CycELVariable)
(arg3Isa thereExistAtMost CycFormula)
(comment thereExistAtMost "The predicate thereExistAtMost is a specialized form of thereExists (q.v.).  (thereExistAtMost 5 X FORM) means that there are no more than five distinct objects in the (relevant)  universe of discourse which, when substituted for the CycELVariable X in the CycFormula FORM, make FORM true.  See thereExists for more information about existential quantification.")
(resultIsa thereExistAtMost CycFormula)

;;; thereExistExactly
(isa thereExistExactly Quantifier)
(isa thereExistExactly Relationship)
(arg1Isa thereExistExactly PositiveInteger)
(arg2Isa thereExistExactly CycELVariable)
(arg3Isa thereExistExactly CycFormula)
(comment thereExistExactly "The predicate thereExistExactly is a specialized form of thereExists (q.v.).  (thereExistExactly 5 X FORM) means that there are no more and no less than five distinct objects in the (relevant) universe of discourse which, when substituted for the CycELVariable X in the CycFormula FORM, make FORM true.  See thereExists for more information about existential quantification.")
(resultIsa thereExistExactly CycFormula)

;;; thereExists
(isa thereExists Quantifier)
(isa thereExists Relationship)
(arg1Isa thereExists CycELVariable)
(arg2Isa thereExists CycFormula)
(comment thereExists "The predicate thereExists is Cyc's version of the existential quantifier of predicate calculus (i.e., the operator symbolized in one common notation by a backwards 'E').  As its two arguments, thereExists  takes a variable (which is an element of CycELVariable) and an element of CycFormula, respectively.  (thereExists VAR FORM) means that FORM is true in at least one case (and possibly more) in which all occurrences of the variable VAR in FORM are replaced by an object in the Cyc universe.  For example, to say that every person has a mother, we could assert: (forAll ?X (implies (isa ?X Person) (thereExists ?Y (mother ?X ?Y)))).   



[Developer-level footnote:  There are many `flavors' of quantification `on the market' these days; here is how the Cyc system currently handles axioms that involve thereExists:



When processing an FI-ASK about whether (thereExists VAR FORM) is true or not, Cyc determines extensionally whether or not any known VAR (anything in the knowledge base) satisfies FORM (makes it true.)



When processing an FI-PROVE about whether (thereExists VAR FORM) is true or not, Cyc tries to construct an intensional proof (at least at a default-true level) that there must exist some value of VAR --- which may or may not already be known in the KB -- for which FORM must be true.



When processing an FI-ASSERT in which a user or program tells Cyc that (thereExists VAR FORM) is true, Cyc records the assertion intensionally so that it can later serve as part of an intensional proof, when some future FI-PROVE request is processed.  It does this by creating a new SkolemFunction (q.v.).  



When modus ponens is used with a rule of the form (implies ANTECEDENT (thereExists VAR FORM)), and the formula ANTECEDENT is true, then Cyc will generate a new term for VAR, add that to its language, and assert that the new term satisfies FORM.]")
(overlappingExternalConcept thereExists SENSUS-Information1997 "EXISTENCE")

;;; thermalConductivityOfObject
(isa thermalConductivityOfObject IntervalBasedQuantitySlot)
(isa thermalConductivityOfObject TangibleObjectPredicate)
(isa thermalConductivityOfObject PhysicalAttributeDescriptionSlot)
(arg1Isa thermalConductivityOfObject PartiallyTangible)
(arg2Isa thermalConductivityOfObject ThermalConductivity)
(comment thermalConductivityOfObject "(thermalConductivityOfObject OBJ DEGREE) means that the tangible object OBJ has the ThermalConductivity attribute DEGREE.  Objects with higher values of DEGREE conduct heat faster and better (i.e., with less heat loss) than those with a lower ThermalConductivity.")

;;; threeWayJunctionInSystem
(isa threeWayJunctionInSystem AsymmetricBinaryPredicate)
(genlPreds threeWayJunctionInSystem junctionInSystem)
(arg1Isa threeWayJunctionInSystem Thing)
(arg2Isa threeWayJunctionInSystem Thing)
(comment threeWayJunctionInSystem "(threeWayJunctionInSystem JUNCT SYS) means that JUNCT is a 3-way junction in the specified PathSystem SYS.  Formally, a 3-way junction in SYS is any point (actually, any node) X in SYS such that either there are exactly 3 links and no loops in SYS that X is on, or there are exactly 1 link and 1 loop in SYS that X is on.  See junctionInSystem.  When the junction is is simply a customary junction not based on a specified PathSystem, use ThreeWayJunctionOfPaths.")

;;; timeSlices
(isa timeSlices TransitiveBinaryPredicate)
(isa timeSlices ReflexiveBinaryPredicate)
(isa timeSlices AntiSymmetricBinaryPredicate)
(genlPreds timeSlices temporallySubsumes)
(genlPreds timeSlices parts)
(arg1Isa timeSlices TemporalThing)
(arg2Isa timeSlices TemporalThing)
(comment timeSlices "(timeSlices WHOLE PART) means that PART is one of the temporal decompositions of WHOLE.  PART is part of WHOLE and is thus temporally included in WHOLE (see temporallySubsumes).  There is no other part of WHOLE that happens at the same time but is not included in PART.  Unlike subEvents, which can divide up an Event both in space and time, timeSlices divides up its first argument in time only.  So timeSlices is more specialized than subEvents.  On the other hand, it has broader application; timeSlices makes sense for any TemporalThing, not just Events; e.g., one can talk about year-long timeSlices of a rock.")

;;; titleOfPerson-String
(isa titleOfPerson-String BinaryPredicate)
(arg1Isa titleOfPerson-String Person)
(arg2Isa titleOfPerson-String CharacterString)
(comment titleOfPerson-String "(titleOfPerson-String PRSN STRNG) relates the Person PRSN to a CharacterString, STRNG, which is a word for a title PRSN has.  E.g., (titleOfPerson-String Lenat ``Dr.'').  A person may have more than one title, even cotemporally.")

;;; toLocation
(isa toLocation ActorSlot)
(genlPreds toLocation 
  (MeaningInSystemFn SENSUS-Information1997 "SOURCE-DESTINATION"))
(genlPreds toLocation postActors)
(arg1Isa toLocation Translocation)
(arg2Isa toLocation PartiallyTangible)
(comment toLocation "The predicate toLocation is used to indicate the ending point of a particular movement.  (toLocation MOVE LOC) means that LOC is where the objectMoving in MOVE (a Movement-TranslationEvent) is found when the event MOVE ends; the final location of the objectMoving in that event is LOC.  The objectMoving may or may not be Stationary at LOC.  If MOVE is a single-pathway translation (see Translation-SinglePath), then every objectMoving in it is found at LOC when MOVE ends.  If MOVE has multiple movers and multiple pathways (see Translation-MultiPath), then at least some of the objectMoving(s) can be found at LOC at the end of MOVE.  If MOVE is a fluid flow (see Translation-Flow), then at least some portion of the fluid objectMoving can be found at location LOC at the end of MOVE.  See also pathway-Complete, pathConnects.")
(synonymousExternalConcept toLocation SENSUS-Information1997 "DESTINATION")

;;; toOrientation
(isa toOrientation Role)
(isa toOrientation BinaryPredicate)
(arg1Isa toOrientation Movement-Rotation)
(arg2Isa toOrientation OrientationAttribute)
(comment toOrientation "This predicate indicates, for the particular rotational motion ROT, the orientation that the objectMoving in that event has after that motion.  (toOrientation ROT ORIENT) means that when ROT ends, the object that moved in ROT has the final position ORIENT, with respect to the current frame of reference.  Examples of orientations include: HorizontalOrientation, VerticalOrientation, UpSideDown.  See also fromOrientation, OrientationAttribute.")

;;; toPossessor
(isa toPossessor ProcessPredicate)
(isa toPossessor ActorSlot)
(genlPreds toPossessor postActors)
(arg1Isa toPossessor GainingUserRights)
(arg2Isa toPossessor Agent)
(comment toPossessor "This predicate identifies an Agent who gains some right to use an object.  (toPossessor GAIN AGENT) means that after the event GAIN (a GainingUserRights), AGENT enjoys some UserRightsAttribute over the objectOfPossessionTransfer which that agent did not have at the start of GAIN.")
(synonymousExternalConcept toPossessor SENSUS-Information1997 "RECIPIENT")

;;; toState
(isa toState BinaryPredicate)
(arg1Isa toState ChangingDeviceState)
(arg2Isa toState DeviceState)
(comment toState "This predicate is used in connection with ChangingDeviceState, to identify the DeviceState a device is in immediately after the change.  (toState EVENT DEVICE-STATE) means that the new state of a device following the device state-changing action, EVENT, is the state DEVICE-STATE.  For example, after any X which is a TurningOnAnElectricalSwitch, the switch involved has (toState X DeviceOn).")

;;; topicOfInfoTransfer
(isa topicOfInfoTransfer Role)
(isa topicOfInfoTransfer BinaryPredicate)
(arg1Isa topicOfInfoTransfer InformationTransferEvent)
(arg2Isa topicOfInfoTransfer Thing)
(comment topicOfInfoTransfer "The predicate topicOfInfoTransfer is used to indicate what a particular communication is about.  (topicOfInfoTransfer TRANS TOPIC) means that TOPIC is a primary topic of the information communicated in the InformationTransferEvent TRANS.  For example, a result reported after an instance of BloodTest will contain information about the objectTested (viz., the blood sample); the patient's blood is thus a topicOfInfoTransfer of that report.")

;;; totalDisplacement
(isa totalDisplacement IntervalBasedQuantitySlot)
(arg1Isa totalDisplacement MovementProcess)
(arg2Isa totalDisplacement Distance)
(comment totalDisplacement "The accumulated total displacement along the trajectory at any point in time during the duration of the moving process")

;;; touches
(isa touches SymmetricBinaryPredicate)
(isa touches SpatialPredicate)
(isa touches IrreflexiveBinaryPredicate)
(not 
  (isa touches TransitiveBinaryPredicate))
(genlPreds touches near)
(genlInverse touches touches)
(arg1Isa touches SpatialThing)
(arg2Isa touches SpatialThing)
(comment touches "(touches THIS THAT) means that THIS and THAT are in contact, directly or indirectly.  THIS touchesDirectly on THAT if and only if there is nothing between them.  THIS touches THAT indirectly if there is some very thin object or substance between them.  `Very thin' means that the distance between the surfaces of THIS and THAT is very much less than the distance between their center points.  Some examples of touches: an airplane touches the air around it; my feet touch the floor (even though I am wearing shoes); a blanket touches the person sleeping under it (even if there is a sheet); a hovercraft touches the water (even though a cushion of air is between them).  For cases where immediate surface contact needs to be indicated, use touchesDirectly (q.v.).")

;;; touchesDirectly
(isa touchesDirectly SymmetricBinaryPredicate)
(isa touchesDirectly PhysicalFeatureDescribingPredicate)
(isa touchesDirectly SpatialPredicate)
(isa touchesDirectly ReflexiveBinaryPredicate)
(isa touchesDirectly CotemporalObjectsSlot)
(not 
  (isa touchesDirectly TransitiveBinaryPredicate))
(genlPreds touchesDirectly cotemporal)
(genlPreds touchesDirectly touches)
(genlInverse touchesDirectly touchesDirectly)
(arg1Isa touchesDirectly PartiallyTangible)
(arg2Isa touchesDirectly PartiallyTangible)
(comment touchesDirectly "(touchesDirectly THIS THAT) means that THIS and THAT are in direct physical contact.  That is, there exists a region on both objects where the distance between their surfaces is zero.  If in doubt, use touches rather than touchesDirectly.")

;;; transferInSubEvent
(isa transferInSubEvent AntiSymmetricBinaryPredicate)
(isa transferInSubEvent TransitiveBinaryPredicate)
(isa transferInSubEvent Role)
(genlPreds transferInSubEvent lastSubEvents)
(arg1Isa transferInSubEvent GeneralizedTransfer)
(arg2Isa transferInSubEvent TransferIn)
(comment transferInSubEvent "The Cyc predicate transferInSubEvent indicates the final stage of a particular GeneralizedTransfer in which the transferredThing reaches the destination.  For example, (transferInSubEvent COMM LISTENING) means that LISTENING is the final stage (see lastSubEvents) of the CommunicationAct-Single COMM.")

;;; transferOutSubEvent
(isa transferOutSubEvent Role)
(isa transferOutSubEvent ReflexiveBinaryPredicate)
(isa transferOutSubEvent AntiSymmetricBinaryPredicate)
(isa transferOutSubEvent TransitiveBinaryPredicate)
(genlPreds transferOutSubEvent firstSubEvents)
(arg1Isa transferOutSubEvent GeneralizedTransfer)
(arg2Isa transferOutSubEvent TransferOut)
(comment transferOutSubEvent "The Cyc predicate transferOutSubEvent indicates the initial stage of a particular GeneralizedTransfer in which the transferredThing leaves the point of origin.  For example, (transferOutSubEvent TRANSLOC EMISSION) means that EMISSION is the initial stage (see firstSubEvents) of the Translocation TRANSLOC.  (The emitter in EMISSION is a fromLocation of TRANSLOC.)")

;;; transferredThing
(isa transferredThing ActorSlot)
(isa transferredThing AsymmetricBinaryPredicate)
(isa transferredThing IrreflexiveBinaryPredicate)
(genlPreds transferredThing preActors)
(genlPreds transferredThing postActors)
(arg1Isa transferredThing GeneralizedTransfer)
(arg2Isa transferredThing SomethingExisting)
(comment transferredThing "The Cyc predicate transferredThing is used to identify the object whose external relationships change in some event considered generically as a `transfer'.  (transferredThing TRANSFER OBJ) means that OBJ is being moved, transferred, exchanged, etc., in the GeneralizedTransfer event TRANSFER.  In general, and if possible, it is preferable to use a more specialized instance of ActorSlot than transferredThing (e.g., objectMoving for physical transfer of an object; objectOfPossessionTransfer for an object that changes possession but not necessarily location; and so on).")

;;; transformedInto
(isa transformedInto IrreflexiveBinaryPredicate)
(not 
  (isa transformedInto TransitiveBinaryPredicate))
(isa transformedInto AntiTransitiveBinaryPredicate)
(isa transformedInto AsymmetricBinaryPredicate)
(arg1Isa transformedInto Entity)
(arg2Isa transformedInto Entity)
(comment transformedInto "(transformedInto ?X ?Y) means that ?X stops existing at the instant that ?Y is created.  Furthermore, the material which made up ?X when it ceased to exist will generally make up ?Y when it is created, which in turn implies things about the location of ?Y at that moment, etc.")

;;; transparencyOfObject
(isa transparencyOfObject IntervalBasedQuantitySlot)
(isa transparencyOfObject TangibleObjectPredicate)
(arg1Isa transparencyOfObject PartiallyTangible)
(arg2Isa transparencyOfObject Transparency)
(comment transparencyOfObject "(transparencyOfObject OBJ DEGREE) means that the tangible object OBJ has an intrinsic Transparency to light of the specified DEGREE.  Higher values indicate that more light will pass through the substance and with less distortion.")

;;; transportees
(isa transportees ActorSlot)
(isa transportees AsymmetricBinaryPredicate)
(isa transportees IrreflexiveBinaryPredicate)
(genlPreds transportees objectMoving)
(arg1Isa transportees TransportationEvent)
(arg2Isa transportees PartiallyTangible)
(comment transportees "The predicate transportees relates a translational motion event to the object which is transported by another one of the actors in that event.  (transportees MOVE OBJ) means that some transporter facilitates the conveyance of OBJ in MOVE.  For example, in a dumptruck driving event, the dirt in the back of the truck is a transportees.  Any humans in the truck cab (or truck bed) during the trip are also transportees; however, a more precise role designation for humans riding in the truck would be either passengers or (for the driver) driverActor.  See also the comments on TransportationEvent and transporter.")

;;; transporter
(isa transporter IrreflexiveBinaryPredicate)
(isa transporter ActorSlot)
(isa transporter AsymmetricBinaryPredicate)
(genlPreds transporter objectMoving)
(genlPreds transporter instrument-Generic)
(genlPreds transporter constrainingObject)
(arg1Isa transporter TransportationEvent)
(arg2Isa transporter SolidTangibleThing)
(comment transporter "This predicate relates, e.g., a sleigh-ride event to the sleigh being used to transport the people and goods.  (transporter MOVE OBJ) means that OBJ enables or facilitates the conveyance of what is transported (the animals, goods, people, etc. that are the transportees) in the TransportationEvent MOVE.  OBJ itself is an objectMoving in MOVE, so a catapult is not a transporter because it doesn't come with its victims.  OBJ will generally hold, support, contain, etc. the transportees throughout the MOVE event.  OBJ may or may not supply the motive force in the event MOVE; e.g., a child's wagon, a bicycle, a sleigh, and a paper bag can all be transporters.  More examples are automobiles, wheelchairs, dogsleds, and parachutes.  Carrier pigeons are transporters when performing the function for which they were bred; a horse is a transporter when it is being ridden but a providerOfMotiveForce when pulling a cart or plow or sleigh.Some cautions and refinements, however: (i) although automobiles are transporters, they should have the more specific role designation of vehicle (q.v.) because they are also SelfPoweredDevices.   When your car is being towed by a towtruck, and you are riding along inside as it gets towed, then in that special case the car is just a transporter (of you) and the towtruck is the vehicle of that event.  (ii) Another more specific role designation for some transporters -- those which are PhysicalDevices -- is deviceUsed (q.v.); e.g., the use of crutches in hobbling, ice skates in skating, and sneakers in walking.  See also the comment on TransportationEvent.  (iii) The organism locomoting in a LocomotionEvent may be a transporter if carrying something other than itself (CarryingWhileLocomoting qv.) .  In other cases an organism may be a transportees, e.g. someone riding a bike or skating.  Note that the organism must be the providerOfMotiveForce in these cases.")

;;; travelTime
(isa travelTime QuaternaryPredicate)
(arg1Isa travelTime SpatialThing)
(arg2Isa travelTime SpatialThing)
(arg3Isa travelTime ScriptType)
(arg3Genl travelTime Movement-TranslationEvent)
(arg4Isa travelTime Time-Quantity)
(comment travelTime "(travelTime OBJ1 OBJ2 MOVEMENT) means how long it would usually take the transported object to get from OBJ1 to OBJ2 in an event of type MOVEMENT.")

;;; unchangedActors
(isa unchangedActors ActorSlot)
(isa unchangedActors AsymmetricBinaryPredicate)
(isa unchangedActors IrreflexiveBinaryPredicate)
(genlPreds unchangedActors preActors)
(genlPreds unchangedActors postActors)
(arg1Isa unchangedActors Event)
(arg2Isa unchangedActors PartiallyTangible)
(comment unchangedActors "(unchangedActors EV OBJ) means that the object OBJ remains virtually unchanged by its participation in the event EV. This means that OBJ does not appreciably move, nor does it undergo some internal change in its properties, nor is it created or destroyed in the course of EV.")

;;; undergroundOf
(not 
  (isa undergroundOf TransitiveBinaryPredicate))
(isa undergroundOf AsymmetricBinaryPredicate)
(isa undergroundOf SpatialPredicate)
(arg1Isa undergroundOf Place)
(arg2Isa undergroundOf SpatialThing)
(comment undergroundOf "(undergroundOf OBJ GROUND) means that OBJ is beneath the surface of ground and has the locationState Underground.")

;;; uniquePartTypes
(isa uniquePartTypes BinaryPredicate)
(arg1Isa uniquePartTypes ExistingObjectType)
(arg1Genl uniquePartTypes PartiallyTangible)
(arg2Isa uniquePartTypes ExistingObjectType)
(arg2Genl uniquePartTypes PartiallyTangible)
(comment uniquePartTypes "(uniquePartTypes ?BIG ?SMALL) means that every instance of ?BIG has exactly one instance of ?SMALL as a part.")

;;; unitExpansions
(isa unitExpansions BinaryPredicate)
(isa unitExpansions RelationshipPredicate)
(arg1Isa unitExpansions UnitOfMeasure)
(arg2Isa unitExpansions CycSystemList)
(comment unitExpansions "The Cyc predicate unitExpansions is used to express the relationship between a derived unit of measurement and the units from which it is derived, e.g., miles per second from miles and seconds.  (unitExpansions UNIT FACTOR-LIST) means that UNIT is derived from the factors on the list UNIT-FACTOR.  UNIT-FACTOR is an instance of CycSystemList.  There are two kinds of items in the UNIT-FACTOR list: (1) all items except the last are themselves lists that consist of an element of UnitOfMeasure followed by an exponent for that unit; (2) the last element is the constant multiplier.  Some examples:





     (unitExpansions MilesPerHour (((Mile 1)(HoursDuration -1)) 1),



     (unitExpansions SpeedOfLight (((Mile 1)(SecondsDuration -1)) 186000)),



     (unitExpansions MetersPerSecondPerSecond (((Meter 1)(SecondsDuration -2)) 1).")

;;; unitMultiplicationFactor
(isa unitMultiplicationFactor TernaryPredicate)
(isa unitMultiplicationFactor FunctionalPredicate)
(arg1Isa unitMultiplicationFactor UnitOfMeasure)
(arg2Isa unitMultiplicationFactor UnitOfMeasure)
(arg3Isa unitMultiplicationFactor RealNumber)
(comment unitMultiplicationFactor "(unitMultiplicationFactor UNIT1 UNIT2 NUM) means that the conversion factor between quantities specified in units of UNIT1 and quantities specified in terms of UNIT2 is NUM.  For example, (unitMultiplicationFactor Inch Foot-UnitOfMeasure 12).  UNIT1 and UNIT2 must belong to the same InterconvertibleUnitType.  unitMultiplicationFactor is a simplified version of unitConversions which can be used when a multiplicative scaling relation exists between the two units.")

;;; upAxisPoints
(isa upAxisPoints BinaryPredicate)
(isa upAxisPoints SpatialPredicate)
(arg1Isa upAxisPoints SpatialThing)
(arg2Isa upAxisPoints UnitVectorInterval)
(comment upAxisPoints "(upAxisPoints OBJ DIR) means OBJ's intrinsic up-axis points in the direction DIR.  An object has an intrinsic up-axis only if it has an intrisic top by virtue of its design or function.  People, rockets, cars, and cups are examples of objects with intrinsic tops.  A sphere has no intrinsic top, due to its symmetry.  If an object with an intrinsic up-axis, OBJ, is on its side, one asserts (upAxisPoints OBJ HorizontalDirection).  If OBJ is upside-down, one asserts (upAxisPoints OBJ Down-Directly) or (upAxisPoints OBJ Down-Generally), depending on how precise one wishes to be.")

;;; urgeSatisfied
(isa urgeSatisfied BinaryPredicate)
(arg1Isa urgeSatisfied PhysicalEvent)
(arg2Isa urgeSatisfied PhysicalUrgeType)
(arg2Genl urgeSatisfied AnimalPhysiologicalAttribute)
(comment urgeSatisfied "(urgeSatisfied EVT URGETYPE) means that the sensory event EVT satisfies an instance of a physical urge of type URGETYPE.   Use the predicate, urgeTypeSatisfied, to stateg rules about what sorts of actions relieve what sorts of urges.  E.g., scratching relieves an UrgeToScratch.")

;;; urgeTypeSatisfied
(isa urgeTypeSatisfied BinaryPredicate)
(arg1Isa urgeTypeSatisfied ScriptType)
(arg1Genl urgeTypeSatisfied AnimalActivity)
(arg2Isa urgeTypeSatisfied PhysicalUrgeType)
(arg2Genl urgeTypeSatisfied AnimalPhysiologicalAttribute)
(comment urgeTypeSatisfied "The urge of type arg2 is satisfied in the event of type arg1.")

;;; userRightsRelation
(isa userRightsRelation TernaryPredicate)
(arg1Isa userRightsRelation Agent)
(arg2Isa userRightsRelation PartiallyTangible)
(arg3Isa userRightsRelation UserRightsAttribute)
(comment userRightsRelation "This predicate relates an agent to the use rights which that agent has over an object.  (userRightsRelation AGENT OBJECT URA) means that AGENT enjoys the UserRightsAttribute URA over OBJECT.  For example, if AGENT owns OBJECT, then AGENT has FullUseRights over it.  E.g., (userRightsRelation DonaldTrump TrumpCastleCasino FullUseRights) stopped being true when he went into debt.   See also UserRightsAttribute.")

;;; usesCommConventionForInfo
(isa usesCommConventionForInfo TernaryPredicate)
(arg1Isa usesCommConventionForInfo AbstractInformation)
(arg2Isa usesCommConventionForInfo CommunicationConvention)
(arg3Isa usesCommConventionForInfo InformationBearingThing)
(comment usesCommConventionForInfo "(usesCommConventionForInfo INFO CC IBT) means that the InformationBearingThing IBT contains the information INFO, and INFO was encoded using the CommunicationConvention CC.  INFO need not be propositional (see also PropositionalInformationThing).")

;;; vehicle
(isa vehicle IrreflexiveBinaryPredicate)
(isa vehicle ActorSlot)
(isa vehicle AsymmetricBinaryPredicate)
(isa vehicle AntiTransitiveBinaryPredicate)
(genlPreds vehicle deviceUsed)
(genlPreds vehicle transporter)
(genlPreds vehicle providerOfMotiveForce)
(arg1Isa vehicle 
  (TransportViaFn TransportationDevice-Vehicle))
(arg2Isa vehicle TransportationDevice-Vehicle)
(comment vehicle "(vehicle EVENT VEHICLE) means that VEHICLE is a TransportationDevice-Vehicle which is both the providerOfMotiveForce and the transporter in EVENT.  If an object is a TransportationDevice-Vehicle and plays the role of transporter in some moving event, then it generally  will play the role of vehicle in that event.  Examples: a car plays the role of vehicle in driving.  Note, however, that a bicycle does not play the role of vehicle in bike riding since it is not a provider of motive force.  A borderline non-example is someone sitting in their car while it's being pulled by a towtruck; their car is not playing the role of vehicle in that event.")

;;; victim
(isa victim IrreflexiveBinaryPredicate)
(isa victim AsymmetricBinaryPredicate)
(isa victim ActorSlot)
(genlPreds victim maleficiary)
(genlPreds victim damages)
(arg1Isa victim Event)
(arg2Isa victim SocialBeing)
(comment victim "The Agent(s) most directly harmed by this possibly criminal act.  In so-called victimless crimes, some would consider the state to be the victim, but we will not follow that convention here.")

;;; viscosityOfSubstance
(isa viscosityOfSubstance TangibleSubstancePredicate)
(isa viscosityOfSubstance IntervalBasedQuantitySlot)
(isa viscosityOfSubstance PhysicalAttributeDescriptionSlot)
(arg1Isa viscosityOfSubstance LiquidTangibleThing)
(arg2Isa viscosityOfSubstance Viscosity)
(comment viscosityOfSubstance "(viscosityOfSubstance LIQ VISC) means that the LiquidTangibleThing LIQ has the Viscosity VISC.")

;;; visuallyDepicts
(not 
  (isa visuallyDepicts IrreflexiveBinaryPredicate))
(not 
  (isa visuallyDepicts ReflexiveBinaryPredicate))
(not 
  (isa visuallyDepicts AsymmetricBinaryPredicate))
(not 
  (isa visuallyDepicts AntiSymmetricBinaryPredicate))
(not 
  (isa visuallyDepicts SymmetricBinaryPredicate))
(not 
  (isa visuallyDepicts TransitiveBinaryPredicate))
(isa visuallyDepicts BinaryPredicate)
(arg1Isa visuallyDepicts VisualInformationSource)
(arg2Isa visuallyDepicts SpatialThing)
(comment visuallyDepicts "(visuallyDepicts ?IBT ?OBJ) means the object ?OBJ is depicted by the visual information source ?IBT.")

;;; volatilityOfSubstance
(isa volatilityOfSubstance PhysicalAttributeDescriptionSlot)
(isa volatilityOfSubstance IntervalBasedQuantitySlot)
(isa volatilityOfSubstance TangibleSubstancePredicate)
(arg1Isa volatilityOfSubstance PartiallyTangible)
(arg2Isa volatilityOfSubstance Volatility)
(comment volatilityOfSubstance "(volatilityOfSubstance SUBST DEGREE) indicates how volatile SUBST is.  Objects with a higher DEGREE of Volatility evaporate more readily than objects with a lower DEGREE.")

;;; volitionalCause-RST
(isa volitionalCause-RST AsymmetricBinaryPredicate)
(isa volitionalCause-RST RSTRelation)
(arg1Isa volitionalCause-RST LinguisticObject)
(comment volitionalCause-RST "The discourse relation that holds between two segments of text when ARG2 specifies something which could be a cause of the volitional action described in ARG1.")
(synonymousExternalConcept volitionalCause-RST SENSUS-Information1997 "RST-VOLITIONAL-CAUSE")

;;; volumeContained
(isa volumeContained IntervalBasedQuantitySlot)
(arg1Isa volumeContained PartiallyTangible)
(arg2Isa volumeContained Volume)
(comment volumeContained "Indicates the total volume enclosed by a given container.  (volumeContained ?CONT ?VOL) means that the total available volume of ?CONT is ?VOL.")

;;; volumeOfObject
(isa volumeOfObject PhysicalAmountSlot)
(genlPreds volumeOfObject 
  (MeaningInSystemFn SENSUS-Information1997 "SIZE-PROPERTY-ASCRIPTION"))
(arg1Isa volumeOfObject PartiallyTangible)
(arg2Isa volumeOfObject Volume)
(comment volumeOfObject "(volumeOfObject OBJ VOL) means that the TangibleThing OBJ has the Volume VOL.")

;;; wasteProducts
(isa wasteProducts ActorSlot)
(genlPreds wasteProducts byProducts)
(arg1Isa wasteProducts CreationOrDestructionEvent)
(arg2Isa wasteProducts PartiallyTangible)
(comment wasteProducts "(wasteProducts EV OBJ) means that OBJ is one of the by-products of EV which is disposed of, rather than used or sold.")

;;; waterSolubility
(isa waterSolubility IntervalBasedQuantitySlot)
(isa waterSolubility TangibleObjectPredicate)
(isa waterSolubility PhysicalAttributeDescriptionSlot)
(arg1Isa waterSolubility PartiallyTangible)
(arg2Isa waterSolubility Solubility)
(comment waterSolubility "(waterSolubility OBJ DEGREE) means that the tangible OBJ has this DEGREE of Solubility in water.  A higher value of DEGREE indicates that a substance dissolves more readily and completely than one with a lower solubility.")

;;; waveSource
(isa waveSource TernaryPredicate)
(arg1Isa waveSource SomethingExisting)
(arg2Isa waveSource SomethingExisting)
(arg3Isa waveSource WavePropagationType)
(arg3Genl waveSource WavePropagation)
(comment waveSource "The predicate waveSource is used to indicate that a type of wave is travelling between a source and a reception point.  (waveSource SOURCE ENDPOINT WAVETYPE) means that there is a WavePropagation of type WAVETYPE propagating between the fromLocation SOURCE and the toLocation ENDPOINT.  For example, (waveSource VoiceOfAmerica-Seoul CityOfBeijingChina RadioWave).")

;;; waveSource-Direct
(isa waveSource-Direct TernaryPredicate)
(genlPreds waveSource-Direct waveSource)
(arg1Isa waveSource-Direct SomethingExisting)
(arg2Isa waveSource-Direct SomethingExisting)
(arg3Isa waveSource-Direct WavePropagationType)
(arg3Genl waveSource-Direct WavePropagation)
(comment waveSource-Direct "The predicate waveSource-Direct is used to indicate that there is a wave propagation of some type directly between two points.  (waveSource-Direct SOURCE ENDPOINT WAVETYPE) means that there is a WavePropagation of type WAVETYPE between the fromLocation SOURCE and the toLocation ENDPOINT, and the propagation is direct in the sense that there are no significant diffusion or reflection subevents of that WavePropagation.")

;;; wavelength
(isa wavelength BinaryPredicate)
(arg1Isa wavelength WavePropagation)
(arg2Isa wavelength Distance)
(comment wavelength "(wavelength WAVE LENGTH) means that the WavePropagation WAVE consists of waves having the length LENGTH.  LENGTH is a Distance measuring one complete wave in a WavePropagation event.")

;;; wearer
(isa wearer BinaryPredicate)
(isa wearer Role)
(arg1Isa wearer WearingSomething)
(arg2Isa wearer Animal)
(comment wearer "The predicate wearer is used to indicate an individual who is wearing some article of clothing (or other wearable item) in a particular situation.  (wearer WEARING ANIMAL) means that ANIMAL is the wearer during WEARING, an element of WearingSomething (q.v.).")

;;; wearsClothing
(isa wearsClothing CotemporalObjectsSlot)
(genlPreds wearsClothing owns)
(genlPreds wearsClothing cotemporal)
(genlInverse wearsClothing in-ContGeneric)
(arg1Isa wearsClothing PartiallyTangible)
(arg2Isa wearsClothing SomethingToWear)
(comment wearsClothing "(wearsClothing ANIMAL ITEM) means that ANIMAL is wearing ITEM, an element of SomethingToWear.  The first argument of wearsClothing is loosely constrained (by PartiallyTangible), so that this predicate may be used to describe mannequins, animals, and other individuals (of whatever kinds) that might wear clothes, as well as humans; however, by default Cyc assumes that an individual who wearsClothing is an element of Person.  See also wornOn, which relates the item worn to the body part on which it is worn.")

;;; weatherAttributes
(isa weatherAttributes BinaryPredicate)
(genlPreds weatherAttributes hasAttributes)
(arg1Isa weatherAttributes OutdoorLocation)
(arg2Isa weatherAttributes WeatherAttribute)
(comment weatherAttributes "The predicate weatherAttributes is used to describe the weather at a particular outdoor location.  (weatherAttributes LOC WEATHER) means that the OutdoorLocation LOC has the WeatherAttribute WEATHER.  For example, to say that it's snowy in Lake Tahoe, we would say: (weatherAttributes LakeTahoe Snowy).  See also WeatherAttribute.")

;;; widthOfObject
(isa widthOfObject PhysicalAmountSlot)
(arg1Isa widthOfObject SpatialThing)
(arg2Isa widthOfObject Distance)
(comment widthOfObject "(widthOfObject OBJ WIDTH) means that the Distance across OBJ from one side boundary to the opposite side boundary is WIDTH.  Side boundaries are roughly perpendicular to the top and bottom of the object.  Note that some objects have an intrinsic default orientation (i.e., a top and bottom); for others, orientation is determined only in relation to the environment.")

;;; windowHasCovering
(isa windowHasCovering BinaryPredicate)
(isa windowHasCovering PhysicalPartPredicate)
(genlPreds windowHasCovering portalHasCovering)
(arg1Isa windowHasCovering WindowPortal)
(arg2Isa windowHasCovering WindowThePortalCovering)
(comment windowHasCovering "A restriction of portalHasCovering.  This predicate can take as it's arg1 any instance of WindowPortal, eg., a car window, or a window in a ModernHumanResidence.")

;;; worksWith
(not 
  (isa worksWith TransitiveBinaryPredicate))
(isa worksWith IrreflexiveBinaryPredicate)
(isa worksWith SymmetricBinaryPredicate)
(isa worksWith CotemporalObjectsSlot)
(genlPreds worksWith cotemporal)
(genlInverse worksWith worksWith)
(arg1Isa worksWith Agent)
(arg2Isa worksWith Agent)
(comment worksWith "The predicate worksWith relates two agents who in some way work together.  The two Agents may be people or organizations.  (worksWith AGENT1 AGENT2) means that AGENT1 and AGENT2 work together or cooperate in some activity for mutual benefit.  They may or may not work for the same employer.  Some types of relationships that provide a basis for assertions using worksWith include:  coworkers in a company, an employee and his boss, organizations affiliated in some endeavor, a professional and her client, professionals and their representatives.  Examples: a research organization worksWith its shareholding companies; a Novelist worksWith his or her PublishingCompany; an EntertainmentOrArtsProfessional worksWith his or her agent (i.e., ArtistOrEntertainerRepresentative).")

;;; wornOn
(isa wornOn InterActorSlot)
(genlPreds wornOn supportedBy)
(genlPreds wornOn touches)
(arg1Isa wornOn SomethingToWear)
(arg2Isa wornOn AnimalBodyPart)
(comment wornOn "The predicate wornOn is used to describe on what part of an individual's body a particular device or garment is worn.  (wornOn ITEM BODYPART) means that ITEM is being worn on the body part BODYPART.  wornOn can apply to human or animal wearers, and the items worn can include clothing, jewelry, medical devices, harnesses, carrying devices, wigs--basically, anything which can be attached to or borne upon a body part without intentionally holding or carrying it. See SomethingToWear for its subsets of things that can be worn.  See also wearsClothing, which relates the wearer, rather than the body part, to the item worn.")

;;; xor
(isa xor ELRelation)
(isa xor CommutativeRelation)
(arg1Isa xor CycFormula)
(arg2Isa xor CycFormula)
(comment xor "The logical connective xor represents exclusive-or.
  xor takes two arguments, each of which must be an
  element of CycFormula. (xor FORMULA-1 FORMULA-2) means
  that formula FORMULA-1 is true precisely when formula
  FORMULA-2 is false; in other words, one but not both of
  FORMULA-1 and FORMULA-2 is true. An EL formula that mentions 
  xor is translated during canonicalization into an equivalent 
  (though less compact) formula that mentions or, and, and not 
  and does not mention xor (see the expansion gaf for xor).")

;;; (MediumAmountFn CorrosionResistance)
(isa 
  (MediumAmountFn CorrosionResistance) CorrosionResistance)
(isa 
  (MediumAmountFn CorrosionResistance) ScalarInterval)

;;; (VeryLowAmountFn Porosity)
(isa 
  (VeryLowAmountFn Porosity) Porosity)
(isa 
  (VeryLowAmountFn Porosity) ScalarInterval)

;;; (HighAmountFn Elasticity)
(isa 
  (HighAmountFn Elasticity) Elasticity)
(isa 
  (HighAmountFn Elasticity) ScalarInterval)
(comment 
  (HighAmountFn Elasticity) "completely re-expands almost instantly after compression")

;;; (TheCovering TransferIn TransferOut)
(isa 
  (TheCovering TransferIn TransferOut) Set-Mathematical)

;;; (LiquidFn Water)
(isa 
  (LiquidFn Water) TangibleStuffStateType)
(genls 
  (LiquidFn Water) Water)
(genls 
  (LiquidFn Water) LiquidTangibleThing)

;;; (TheCovering OrganizationalTransferIn OrganizationalTransferOut)
(isa 
  (TheCovering OrganizationalTransferIn OrganizationalTransferOut) Set-Mathematical)

;;; (TransportViaFn AirTransportationDevice)
(isa 
  (TransportViaFn AirTransportationDevice) TemporalStuffType)
(isa 
  (TransportViaFn AirTransportationDevice) ScriptType)
(isa 
  (TransportViaFn AirTransportationDevice) DefaultDisjointScriptType)
(genls 
  (TransportViaFn AirTransportationDevice) TransportationEvent)
(genls 
  (TransportViaFn AirTransportationDevice) 
  (TransportViaFn TransportationDevice))
(comment 
  (TransportViaFn AirTransportationDevice) "A collection of events.  An instance of (TransportViaFn AirTransportationDevice) is a transportation event in which a vehicle designed to travel through the atmosphere or outer space is used.  Examples include instances of the would-be collections hang gliding, airplane tranportation, flying the space shuttle, hot air ballon transport.  Note: This collection does not include Flying-FlappingWings, which is what birds do.")

;;; (SolidFn Water)
(isa 
  (SolidFn Water) TangibleStuffStateType)
(genls 
  (SolidFn Water) Water)
(genls 
  (SolidFn Water) SolidTangibleThing)

;;; (LowAmountFn Ductility)
(isa 
  (LowAmountFn Ductility) Ductility)
(isa 
  (LowAmountFn Ductility) ScalarInterval)

;;; (TransportFn SolidTangibleThing)
(isa 
  (TransportFn SolidTangibleThing) ScriptType)
(genls 
  (TransportFn SolidTangibleThing) TransportingGoods)

;;; (MediumAmountFn Raininess)
(isa 
  (MediumAmountFn Raininess) Raininess)
(isa 
  (MediumAmountFn Raininess) ScalarInterval)
(genlAttributes 
  (MediumAmountFn Raininess) Rainy)

;;; (MeaningInSystemFn SENSUS-Information1997 "LESS-THAN-COMPARISON")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LESS-THAN-COMPARISON") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LESS-THAN-COMPARISON") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "OWNED-BY")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "OWNED-BY") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "OWNED-BY") Thing)

;;; (VeryLowAmountFn ShearStrength)
(isa 
  (VeryLowAmountFn ShearStrength) ShearStrength)
(isa 
  (VeryLowAmountFn ShearStrength) ScalarInterval)

;;; (SolidFn Plastic)
(isa 
  (SolidFn Plastic) TangibleStuffStateType)
(genls 
  (SolidFn Plastic) Plastic)
(genls 
  (SolidFn Plastic) SolidTangibleThing)

;;; (TransportFn SemiSolidTangibleThing)
(isa 
  (TransportFn SemiSolidTangibleThing) ScriptType)
(genls 
  (TransportFn SemiSolidTangibleThing) TransportingGoods)

;;; (LowAmountFn Rigidity)
(isa 
  (LowAmountFn Rigidity) Rigidity)
(isa 
  (LowAmountFn Rigidity) ScalarInterval)

;;; (ThePartition Invertebrate Vertebrate)
(isa 
  (ThePartition Invertebrate Vertebrate) DisjointSetOrCollection)
(isa 
  (ThePartition Invertebrate Vertebrate) Set-Mathematical)

;;; (HighAmountFn Visibility)
(isa 
  (HighAmountFn Visibility) Visibility)
(isa 
  (HighAmountFn Visibility) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "NOTCONTAINED")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NOTCONTAINED") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NOTCONTAINED") Thing)

;;; (TransportViaFn Device-UserPowered)
(isa 
  (TransportViaFn Device-UserPowered) TemporalStuffType)
(isa 
  (TransportViaFn Device-UserPowered) ScriptType)
(genls 
  (TransportViaFn Device-UserPowered) TransportationEvent)
(genls 
  (TransportViaFn Device-UserPowered) Exercising)

;;; (TransportViaFn RoadVehicle)
(isa 
  (TransportViaFn RoadVehicle) DefaultDisjointScriptType)
(isa 
  (TransportViaFn RoadVehicle) ScriptType)
(isa 
  (TransportViaFn RoadVehicle) TemporalStuffType)
(genls 
  (TransportViaFn RoadVehicle) TransportationEvent)
(genls 
  (TransportViaFn RoadVehicle) 
  (TransportViaFn TransportationDevice-Vehicle))
(genls 
  (TransportViaFn RoadVehicle) 
  (TransportViaFn LandTransportationDevice))
(comment 
  (TransportViaFn RoadVehicle) "The collection of transportion events in which a (more or less conventional) road vehicle (see RoadVehicle) is the transportation device (see transporter and vehicle).")

;;; (MediumAmountFn Porosity)
(isa 
  (MediumAmountFn Porosity) Porosity)
(isa 
  (MediumAmountFn Porosity) ScalarInterval)

;;; (WaveEmissionFn AudibleSound)
(isa 
  (WaveEmissionFn AudibleSound) ScriptType)
(isa 
  (WaveEmissionFn AudibleSound) TemporalStuffType)
(genls 
  (WaveEmissionFn AudibleSound) EmittingAWave)

;;; (TransportViaFn Train-TransportationDevice)
(isa 
  (TransportViaFn Train-TransportationDevice) ScriptType)
(isa 
  (TransportViaFn Train-TransportationDevice) TemporalStuffType)
(genls 
  (TransportViaFn Train-TransportationDevice) TransportationEvent)
(genls 
  (TransportViaFn Train-TransportationDevice) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn Train-TransportationDevice) 
  (TransportViaFn TransportationDevice-Vehicle))
(genls 
  (TransportViaFn Train-TransportationDevice) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn Train-TransportationDevice) 
  (TransportViaFn Train-TransportationDevice))

;;; (VeryHighAmountFn Flammability)
(isa 
  (VeryHighAmountFn Flammability) Flammability)
(isa 
  (VeryHighAmountFn Flammability) ScalarInterval)

;;; (MediumAmountFn ShearStrength)
(isa 
  (MediumAmountFn ShearStrength) ShearStrength)
(isa 
  (MediumAmountFn ShearStrength) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "ADDRESSEE-ORIENTED-VERBAL-PROCESS")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ADDRESSEE-ORIENTED-VERBAL-PROCESS") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ADDRESSEE-ORIENTED-VERBAL-PROCESS") ScriptType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ADDRESSEE-ORIENTED-VERBAL-PROCESS") TemporalStuffType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ADDRESSEE-ORIENTED-VERBAL-PROCESS") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "ADDRESSEE-ORIENTED-VERBAL-PROCESS") Communicating)

;;; (MeaningInSystemFn SENSUS-Information1997 "GAS-MATERIAL")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "GAS-MATERIAL") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "GAS-MATERIAL") Thing)

;;; (MobFn Particle)
(isa 
  (MobFn Particle) Collection)
(isa 
  (MobFn Particle) ExistingStuffType)
(genls 
  (MobFn Particle) Mob)

;;; (NoAmountFn Porosity)
(isa 
  (NoAmountFn Porosity) Porosity)
(isa 
  (NoAmountFn Porosity) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "LIQUID-MATERIAL")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LIQUID-MATERIAL") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LIQUID-MATERIAL") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "NON-DIRECTED-ACTION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NON-DIRECTED-ACTION") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NON-DIRECTED-ACTION") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "NON-DIRECTED-ACTION") PhysicalEvent)

;;; (HighAmountFn TensileStrength)
(isa 
  (HighAmountFn TensileStrength) TensileStrength)
(isa 
  (HighAmountFn TensileStrength) ScalarInterval)

;;; (VeryLowAmountFn Ductility)
(isa 
  (VeryLowAmountFn Ductility) Ductility)
(isa 
  (VeryLowAmountFn Ductility) ScalarInterval)

;;; (ThePartition NonLeapYear LeapYear)
(isa 
  (ThePartition NonLeapYear LeapYear) DisjointSetOrCollection)
(isa 
  (ThePartition NonLeapYear LeapYear) Set-Mathematical)

;;; (ThePartition AdultAnimal JuvenileAnimal)
(isa 
  (ThePartition AdultAnimal JuvenileAnimal) DisjointSetOrCollection)
(isa 
  (ThePartition AdultAnimal JuvenileAnimal) Set-Mathematical)

;;; (VeryLowAmountFn Rigidity)
(isa 
  (VeryLowAmountFn Rigidity) Rigidity)
(isa 
  (VeryLowAmountFn Rigidity) ScalarInterval)

;;; (NoAmountFn Volatility)
(isa 
  (NoAmountFn Volatility) Volatility)
(isa 
  (NoAmountFn Volatility) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "CAUSAL-RELATION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CAUSAL-RELATION") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CAUSAL-RELATION") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "PHYSICAL-MATERIAL")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "PHYSICAL-MATERIAL") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "PHYSICAL-MATERIAL") Thing)

;;; (ThePartition NonPoweredDevice PoweredDevice)
(isa 
  (ThePartition NonPoweredDevice PoweredDevice) DisjointSetOrCollection)
(isa 
  (ThePartition NonPoweredDevice PoweredDevice) Set-Mathematical)

;;; (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE-RELATED-OBJECT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE-RELATED-OBJECT") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE-RELATED-OBJECT") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE-RELATED-OBJECT") CommunicationConvention)

;;; (JuvenileFn Person)
(isa 
  (JuvenileFn Person) ExistingObjectType)
(genls 
  (JuvenileFn Person) Person)
(genls 
  (JuvenileFn Person) JuvenileAnimal)

;;; (HighAmountFn Compressibility)
(isa 
  (HighAmountFn Compressibility) Compressibility)
(isa 
  (HighAmountFn Compressibility) ScalarInterval)
(comment 
  (HighAmountFn Compressibility) "Can be compressed almost any amount")

;;; (ThePartition Artifact InanimateThing-Natural)
(isa 
  (ThePartition Artifact InanimateThing-Natural) DisjointSetOrCollection)
(isa 
  (ThePartition Artifact InanimateThing-Natural) Set-Mathematical)

;;; (VeryHighAmountFn Hardness)
(isa 
  (VeryHighAmountFn Hardness) Hardness)
(isa 
  (VeryHighAmountFn Hardness) ScalarInterval)

;;; (LowAmountFn Elasticity)
(isa 
  (LowAmountFn Elasticity) Elasticity)
(isa 
  (LowAmountFn Elasticity) ScalarInterval)
(comment 
  (LowAmountFn Elasticity) "re-expands somewhat after compression, but not all the way back")

;;; (LowAmountFn Hardness)
(isa 
  (LowAmountFn Hardness) Hardness)
(isa 
  (LowAmountFn Hardness) ScalarInterval)

;;; (TransportViaFn Truck)
(isa 
  (TransportViaFn Truck) ScriptType)
(isa 
  (TransportViaFn Truck) TemporalStuffType)
(genls 
  (TransportViaFn Truck) TransportationEvent)
(genls 
  (TransportViaFn Truck) 
  (TransportViaFn Truck))
(genls 
  (TransportViaFn Truck) 
  (TransportViaFn TransportationDevice-Vehicle))
(genls 
  (TransportViaFn Truck) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn Truck) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn Truck) 
  (TransportViaFn RoadVehicle))

;;; (ThePartition NonPersonAnimal Person)
(isa 
  (ThePartition NonPersonAnimal Person) DisjointSetOrCollection)
(isa 
  (ThePartition NonPersonAnimal Person) Set-Mathematical)

;;; (VeryHighAmountFn BioDeteriorationResistance)
(isa 
  (VeryHighAmountFn BioDeteriorationResistance) BioDeteriorationResistance)
(isa 
  (VeryHighAmountFn BioDeteriorationResistance) ScalarInterval)

;;; (TheCovering GainingUserRights LosingUserRights)
(isa 
  (TheCovering GainingUserRights LosingUserRights) Set-Mathematical)

;;; (HighAmountFn Malleability)
(isa 
  (HighAmountFn Malleability) Malleability)
(isa 
  (HighAmountFn Malleability) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "ELEMENT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ELEMENT") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ELEMENT") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "SUBJECT-MATTER")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SUBJECT-MATTER") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SUBJECT-MATTER") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "DECOMPOSABLE-OBJECT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "DECOMPOSABLE-OBJECT") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "DECOMPOSABLE-OBJECT") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "DECOMPOSABLE-OBJECT") Thing)

;;; (VeryLowAmountFn Flammability)
(isa 
  (VeryLowAmountFn Flammability) Flammability)
(isa 
  (VeryLowAmountFn Flammability) ScalarInterval)

;;; (MediumAmountFn Rigidity)
(isa 
  (MediumAmountFn Rigidity) ScalarInterval)
(isa 
  (MediumAmountFn Rigidity) Rigidity)

;;; (ThePartition Dusk Dawn)
(isa 
  (ThePartition Dusk Dawn) DisjointSetOrCollection)
(isa 
  (ThePartition Dusk Dawn) Set-Mathematical)

;;; (NoAmountFn Ductility)
(isa 
  (NoAmountFn Ductility) Ductility)
(isa 
  (NoAmountFn Ductility) ScalarInterval)

;;; (LowAmountFn Visibility)
(isa 
  (LowAmountFn Visibility) Visibility)
(isa 
  (LowAmountFn Visibility) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "ABSTRACT-OBJECT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ABSTRACT-OBJECT") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ABSTRACT-OBJECT") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "ABSTRACT-OBJECT") Individual)

;;; (GovernmentFn Country)
(isa 
  (GovernmentFn Country) 
  (GroupFn IntelligentAgent))
(isa 
  (GovernmentFn Country) RegionalGovernment)

;;; (MeaningInSystemFn SENSUS-Information1997 "ORDERING-RELATION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ORDERING-RELATION") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ORDERING-RELATION") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "ORDERING-RELATION") BinaryPredicate)

;;; (ThePartition Intangible PartiallyTangible)
(isa 
  (ThePartition Intangible PartiallyTangible) DisjointSetOrCollection)
(isa 
  (ThePartition Intangible PartiallyTangible) Set-Mathematical)

;;; (NoAmountFn Rigidity)
(isa 
  (NoAmountFn Rigidity) Rigidity)
(isa 
  (NoAmountFn Rigidity) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "SEPARABLE-ENTITY")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SEPARABLE-ENTITY") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SEPARABLE-ENTITY") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "SEPARABLE-ENTITY") SomethingExisting)

;;; (TransportViaFn Bus-RoadVehicle)
(isa 
  (TransportViaFn Bus-RoadVehicle) TemporalStuffType)
(isa 
  (TransportViaFn Bus-RoadVehicle) ScriptType)
(genls 
  (TransportViaFn Bus-RoadVehicle) TransportationEvent)
(genls 
  (TransportViaFn Bus-RoadVehicle) 
  (TransportViaFn Bus-RoadVehicle))
(genls 
  (TransportViaFn Bus-RoadVehicle) 
  (TransportViaFn TransportationDevice-Vehicle))
(genls 
  (TransportViaFn Bus-RoadVehicle) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn Bus-RoadVehicle) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn Bus-RoadVehicle) 
  (TransportViaFn RoadVehicle))

;;; (NoAmountFn Flammability)
(isa 
  (NoAmountFn Flammability) Flammability)
(isa 
  (NoAmountFn Flammability) ScalarInterval)

;;; (MakingFn VisualImage)
(isa 
  (MakingFn VisualImage) TemporalObjectType)
(isa 
  (MakingFn VisualImage) ScriptType)
(genls 
  (MakingFn VisualImage) MakingSomething)

;;; (TransportViaFn Motorcycle)
(isa 
  (TransportViaFn Motorcycle) TemporalStuffType)
(isa 
  (TransportViaFn Motorcycle) ScriptType)
(genls 
  (TransportViaFn Motorcycle) TransportationEvent)
(genls 
  (TransportViaFn Motorcycle) 
  (TransportViaFn TransportationDevice-Vehicle))
(genls 
  (TransportViaFn Motorcycle) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn Motorcycle) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn Motorcycle) 
  (TransportViaFn Motorcycle))
(genls 
  (TransportViaFn Motorcycle) 
  (TransportViaFn RoadVehicle))

;;; (MeaningInSystemFn SENSUS-Information1997 "AMBIENT-PROCESS")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "AMBIENT-PROCESS") ScriptType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "AMBIENT-PROCESS") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "AMBIENT-PROCESS") PhysicalEvent)

;;; (TheCovering Movement-TranslationEvent Movement-Rotation)
(isa 
  (TheCovering Movement-TranslationEvent Movement-Rotation) Set-Mathematical)

;;; (MediumAmountFn Flammability)
(isa 
  (MediumAmountFn Flammability) Flammability)
(isa 
  (MediumAmountFn Flammability) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "INTERPERSONAL-THING")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "INTERPERSONAL-THING") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "INTERPERSONAL-THING") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "INTERPERSONAL-THING") IntangibleIndividual)

;;; (VeryLowAmountFn Hardness)
(isa 
  (VeryLowAmountFn Hardness) Hardness)
(isa 
  (VeryLowAmountFn Hardness) ScalarInterval)

;;; (LiquidFn Water-Saline)
(isa 
  (LiquidFn Water-Saline) TangibleStuffStateType)
(genls 
  (LiquidFn Water-Saline) Water-Saline)
(genls 
  (LiquidFn Water-Saline) LiquidTangibleThing)

;;; (MeaningInSystemFn SENSUS-Information1997 "SOLID-MATERIAL")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SOLID-MATERIAL") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SOLID-MATERIAL") Thing)

;;; (HighAmountFn CorrosionResistance)
(isa 
  (HighAmountFn CorrosionResistance) CorrosionResistance)
(isa 
  (HighAmountFn CorrosionResistance) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "SPATIAL-LOCATING")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SPATIAL-LOCATING") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SPATIAL-LOCATING") Thing)

;;; (VeryHighAmountFn TensileStrength)
(isa 
  (VeryHighAmountFn TensileStrength) TensileStrength)
(isa 
  (VeryHighAmountFn TensileStrength) ScalarInterval)

;;; (LowAmountFn TensileStrength)
(isa 
  (LowAmountFn TensileStrength) TensileStrength)
(isa 
  (LowAmountFn TensileStrength) ScalarInterval)

;;; (GroupFn IntelligentAgent)
(isa 
  (GroupFn IntelligentAgent) ObjectType)
(genls 
  (GroupFn IntelligentAgent) Group)
(genls 
  (GroupFn IntelligentAgent) SpatialThing)

;;; (MobFn PrecipitationParticle)
(isa 
  (MobFn PrecipitationParticle) Collection)
(isa 
  (MobFn PrecipitationParticle) ExistingStuffType)
(genls 
  (MobFn PrecipitationParticle) Mob)

;;; (SolidFn Concrete)
(isa 
  (SolidFn Concrete) TangibleStuffStateType)
(genls 
  (SolidFn Concrete) Concrete)
(genls 
  (SolidFn Concrete) SolidTangibleThing)

;;; (GroupFn SpatialThing)
(isa 
  (GroupFn SpatialThing) ObjectType)
(genls 
  (GroupFn SpatialThing) SpatialThing)
(genls 
  (GroupFn SpatialThing) Group)

;;; (GroupFn Currency)
(isa 
  (GroupFn Currency) ObjectType)
(genls 
  (GroupFn Currency) SpatialThing)
(genls 
  (GroupFn Currency) Group)

;;; (MeaningInSystemFn SENSUS-Information1997 "SENSE-AND-MEASURE-QUALITY")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SENSE-AND-MEASURE-QUALITY") AttributeType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SENSE-AND-MEASURE-QUALITY") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "SENSE-AND-MEASURE-QUALITY") AttributeValue)

;;; (MeaningInSystemFn SENSUS-Information1997 "ORDERED-SET")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ORDERED-SET") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ORDERED-SET") Thing)

;;; (HighAmountFn Raininess)
(isa 
  (HighAmountFn Raininess) Raininess)
(isa 
  (HighAmountFn Raininess) ScalarInterval)
(genlAttributes 
  (HighAmountFn Raininess) Rainy)

;;; (LowAmountFn Malleability)
(isa 
  (LowAmountFn Malleability) Malleability)
(isa 
  (LowAmountFn Malleability) ScalarInterval)

;;; (TransportViaFn Bicycle)
(isa 
  (TransportViaFn Bicycle) ScriptType)
(isa 
  (TransportViaFn Bicycle) DefaultDisjointScriptType)
(isa 
  (TransportViaFn Bicycle) TemporalStuffType)
(genls 
  (TransportViaFn Bicycle) TransportationEvent)
(genls 
  (TransportViaFn Bicycle) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn Bicycle) LocomotionProcess)
(genls 
  (TransportViaFn Bicycle) Exercising)

;;; (TransportViaFn Automobile)
(isa 
  (TransportViaFn Automobile) TemporalStuffType)
(isa 
  (TransportViaFn Automobile) ScriptType)
(genls 
  (TransportViaFn Automobile) TransportationEvent)
(genls 
  (TransportViaFn Automobile) 
  (TransportViaFn Automobile))
(genls 
  (TransportViaFn Automobile) 
  (TransportViaFn TransportationDevice-Vehicle))
(genls 
  (TransportViaFn Automobile) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn Automobile) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn Automobile) 
  (TransportViaFn RoadVehicle))

;;; (LowAmountFn Compressibility)
(isa 
  (LowAmountFn Compressibility) Compressibility)
(isa 
  (LowAmountFn Compressibility) ScalarInterval)
(comment 
  (LowAmountFn Compressibility) "can be compressed somewhat")

;;; (MeaningInSystemFn SENSUS-Information1997 "TEMPORAL-NONINCLUSIVE")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "TEMPORAL-NONINCLUSIVE") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "TEMPORAL-NONINCLUSIVE") Thing)

;;; (MediumAmountFn Elasticity)
(isa 
  (MediumAmountFn Elasticity) Elasticity)
(isa 
  (MediumAmountFn Elasticity) ScalarInterval)
(comment 
  (MediumAmountFn Elasticity) "will eventually re-expand after compression")

;;; (TransportViaFn WaterTransportationDevice)
(isa 
  (TransportViaFn WaterTransportationDevice) TemporalStuffType)
(isa 
  (TransportViaFn WaterTransportationDevice) ScriptType)
(isa 
  (TransportViaFn WaterTransportationDevice) DefaultDisjointScriptType)
(genls 
  (TransportViaFn WaterTransportationDevice) TransportationEvent)
(genls 
  (TransportViaFn WaterTransportationDevice) 
  (TransportViaFn WaterTransportationDevice))
(genls 
  (TransportViaFn WaterTransportationDevice) 
  (TransportViaFn TransportationDevice))
(comment 
  (TransportViaFn WaterTransportationDevice) "A collection of events.  An instance of (TransportViaFn WaterTransportationDevice) is a transportation event in which a vehicle designed to float on or travel through water is used.  Examples include instances of Sailing in boats, WaterSkiing, and Windsurfing.  Note: This collection does not include swimming, which is a LocomotionProcess (q.v.), not a form of transportation as defined (intended and axiomatized) in Cyc.")

;;; (MediumAmountFn Hardness)
(isa 
  (MediumAmountFn Hardness) Hardness)
(isa 
  (MediumAmountFn Hardness) ScalarInterval)

;;; (TheCovering CreationEvent DestructionEvent)
(isa 
  (TheCovering CreationEvent DestructionEvent) Set-Mathematical)

;;; (GovernmentFn Indonesia-TheNation)
(isa 
  (GovernmentFn Indonesia-TheNation) RegionalGovernment)
(comment 
  (GovernmentFn Indonesia-TheNation) "GOVERNMENT OF INDONESIA")

;;; (MeaningInSystemFn SENSUS-Information1997 "ELEMENT-OF")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ELEMENT-OF") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ELEMENT-OF") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "SIZE-PROPERTY-ASCRIPTION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SIZE-PROPERTY-ASCRIPTION") PhysicalAmountSlot)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SIZE-PROPERTY-ASCRIPTION") Thing)

;;; (MediumAmountFn BioDeteriorationResistance)
(isa 
  (MediumAmountFn BioDeteriorationResistance) BioDeteriorationResistance)
(isa 
  (MediumAmountFn BioDeteriorationResistance) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "CAUSE-EFFECT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CAUSE-EFFECT") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CAUSE-EFFECT") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "NAMED-OBJECT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NAMED-OBJECT") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NAMED-OBJECT") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "NAMED-OBJECT") SomethingExisting)

;;; (ThePartition Corner-2d Corner-3d)
(isa 
  (ThePartition Corner-2d Corner-3d) DisjointSetOrCollection)
(isa 
  (ThePartition Corner-2d Corner-3d) Set-Mathematical)

;;; (VeryHighAmountFn Fragility)
(isa 
  (VeryHighAmountFn Fragility) Fragility)
(isa 
  (VeryHighAmountFn Fragility) ScalarInterval)

;;; (HighAmountFn Porosity)
(isa 
  (HighAmountFn Porosity) Porosity)
(isa 
  (HighAmountFn Porosity) ScalarInterval)

;;; (STIB (YearFn -902))
(isa 
  (STIB 
    (YearFn -902)) TimeInterval)

;;; (NoAmountFn Elasticity)
(isa 
  (NoAmountFn Elasticity) Elasticity)
(isa 
  (NoAmountFn Elasticity) ScalarInterval)
(comment 
  (NoAmountFn Elasticity) "does not re-expand at all after compression")

;;; (LowAmountFn Fragility)
(isa 
  (LowAmountFn Fragility) Fragility)
(isa 
  (LowAmountFn Fragility) ScalarInterval)

;;; (HighAmountFn ShearStrength)
(isa 
  (HighAmountFn ShearStrength) ShearStrength)
(isa 
  (HighAmountFn ShearStrength) ScalarInterval)

;;; (SolidFn EarthStuff)
(isa 
  (SolidFn EarthStuff) TangibleStuffStateType)
(genls 
  (SolidFn EarthStuff) EarthStuff)
(genls 
  (SolidFn EarthStuff) SolidTangibleThing)

;;; (MeaningInSystemFn SENSUS-Information1997 "DISTANCE")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "DISTANCE") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "DISTANCE") Thing)

;;; (VeryLowAmountFn TensileStrength)
(isa 
  (VeryLowAmountFn TensileStrength) TensileStrength)
(isa 
  (VeryLowAmountFn TensileStrength) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "TIME-INTERVAL")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "TIME-INTERVAL") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "TIME-INTERVAL") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "TIME-INTERVAL") TimeInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "AREA")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "AREA") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "AREA") Thing)

;;; (TransportViaFn Spacecraft)
(isa 
  (TransportViaFn Spacecraft) ScriptType)
(isa 
  (TransportViaFn Spacecraft) DefaultDisjointScriptType)
(isa 
  (TransportViaFn Spacecraft) TemporalStuffType)
(genls 
  (TransportViaFn Spacecraft) TransportationEvent)
(genls 
  (TransportViaFn Spacecraft) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn Spacecraft) 
  (TransportViaFn Spacecraft))
(comment 
  (TransportViaFn Spacecraft) "The collection of all events in which vehicles, manned or unmanned, leave the atmosphere of earth to orbit around it or travel to other regions of the universe.")

;;; (TransportViaFn LandTransportationDevice)
(isa 
  (TransportViaFn LandTransportationDevice) TemporalStuffType)
(isa 
  (TransportViaFn LandTransportationDevice) ScriptType)
(isa 
  (TransportViaFn LandTransportationDevice) DefaultDisjointScriptType)
(genls 
  (TransportViaFn LandTransportationDevice) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn LandTransportationDevice) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn LandTransportationDevice) TransportationEvent)
(comment 
  (TransportViaFn LandTransportationDevice) "A collection of events.  An instance of (TransportViaFn LandTransportationDevice) is a transportation event in which a vehicle designed to travel over land is used.  Examples include instances of the collections (TransportViaFn RoadVehicle), SkateBoarding, and SnowSkiing.  Note: This collection does not include instances of AnimalWalkingProcess, which is a LocomotionProcess (q.v.), not a form of transportation as defined in Cyc.  A marginal example of this would be a (fictional) event in which someone burrowed through the earth in a Jules-Vernesque real-time tunnel-digging machine.")

;;; (MeaningInSystemFn SENSUS-Information1997 "STRIVING")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "STRIVING") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "STRIVING") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "STRIVING") IntangibleIndividual)

;;; (TransportViaFn Ambulance)
(isa 
  (TransportViaFn Ambulance) TemporalStuffType)
(isa 
  (TransportViaFn Ambulance) ScriptType)
(genls 
  (TransportViaFn Ambulance) TransportationEvent)
(genls 
  (TransportViaFn Ambulance) 
  (TransportViaFn RoadVehicle))
(genls 
  (TransportViaFn Ambulance) 
  (TransportViaFn TransportationDevice-Vehicle))
(genls 
  (TransportViaFn Ambulance) 
  (TransportViaFn LandTransportationDevice))
(genls 
  (TransportViaFn Ambulance) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn Ambulance) 
  (TransportViaFn Ambulance))
(genls 
  (TransportViaFn Ambulance) ServiceEvent)

;;; (MobFn Mountain)
(isa 
  (MobFn Mountain) Collection)
(isa 
  (MobFn Mountain) ExistingStuffType)
(genls 
  (MobFn Mountain) Mob)

;;; (TransportViaFn TransportationDevice-Vehicle)
(isa 
  (TransportViaFn TransportationDevice-Vehicle) TemporalStuffType)
(isa 
  (TransportViaFn TransportationDevice-Vehicle) ScriptType)
(genls 
  (TransportViaFn TransportationDevice-Vehicle) TransportationEvent)
(genls 
  (TransportViaFn TransportationDevice-Vehicle) 
  (TransportViaFn TransportationDevice))
(genls 
  (TransportViaFn TransportationDevice-Vehicle) 
  (TransportViaFn TransportationDevice-Vehicle))

;;; (VeryHighAmountFn RelativeHumidity)
(isa 
  (VeryHighAmountFn RelativeHumidity) RelativeHumidity)
(isa 
  (VeryHighAmountFn RelativeHumidity) ScalarInterval)

;;; (LowAmountFn RelativeHumidity)
(isa 
  (LowAmountFn RelativeHumidity) RelativeHumidity)
(isa 
  (LowAmountFn RelativeHumidity) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "NONDECOMPOSABLE-OBJECT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NONDECOMPOSABLE-OBJECT") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NONDECOMPOSABLE-OBJECT") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "NONDECOMPOSABLE-OBJECT") Individual)

;;; (MeaningInSystemFn SENSUS-Information1997 "INTENSIVE")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "INTENSIVE") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "INTENSIVE") Thing)

;;; (VeryHighAmountFn CorrosionResistance)
(isa 
  (VeryHighAmountFn CorrosionResistance) CorrosionResistance)
(isa 
  (VeryHighAmountFn CorrosionResistance) ScalarInterval)

;;; (ThePartition FemalePerson MalePerson)
(isa 
  (ThePartition FemalePerson MalePerson) DisjointSetOrCollection)
(isa 
  (ThePartition FemalePerson MalePerson) Set-Mathematical)

;;; (MeaningInSystemFn SENSUS-Information1997 "GENERALIZED-POSSESSION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "GENERALIZED-POSSESSION") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "GENERALIZED-POSSESSION") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "MISC-STUFF")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "MISC-STUFF") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "MISC-STUFF") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "MISC-STUFF") Thing)

;;; (VeryLowAmountFn Malleability)
(isa 
  (VeryLowAmountFn Malleability) Malleability)
(isa 
  (VeryLowAmountFn Malleability) ScalarInterval)

;;; (MediumAmountFn TensileStrength)
(isa 
  (MediumAmountFn TensileStrength) TensileStrength)
(isa 
  (MediumAmountFn TensileStrength) ScalarInterval)

;;; (ThePartition SetOrCollection Individual)
(isa 
  (ThePartition SetOrCollection Individual) DisjointSetOrCollection)
(isa 
  (ThePartition SetOrCollection Individual) Set-Mathematical)

;;; (VeryLowAmountFn Fragility)
(isa 
  (VeryLowAmountFn Fragility) Fragility)
(isa 
  (VeryLowAmountFn Fragility) ScalarInterval)

;;; (SolidFn Glass)
(isa 
  (SolidFn Glass) TangibleStuffStateType)
(genls 
  (SolidFn Glass) Glass)
(genls 
  (SolidFn Glass) SolidTangibleThing)

;;; (MeaningInSystemFn SENSUS-Information1997 "DIRECTED-ACTION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "DIRECTED-ACTION") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "DIRECTED-ACTION") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "DIRECTED-ACTION") PhysicalEvent)

;;; (MeaningInSystemFn SENSUS-Information1997 "CARDINALITY")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CARDINALITY") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CARDINALITY") Thing)

;;; (LowAmountFn Raininess)
(isa 
  (LowAmountFn Raininess) Raininess)
(isa 
  (LowAmountFn Raininess) ScalarInterval)
(genlAttributes 
  (LowAmountFn Raininess) Rainy)

;;; (MeaningInSystemFn SENSUS-Information1997 "NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS") ScriptType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS") TemporalStuffType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS") Communicating)

;;; (HighAmountFn Rigidity)
(isa 
  (HighAmountFn Rigidity) Rigidity)
(isa 
  (HighAmountFn Rigidity) ScalarInterval)

;;; (MediumAmountFn Compressibility)
(isa 
  (MediumAmountFn Compressibility) Compressibility)
(isa 
  (MediumAmountFn Compressibility) ScalarInterval)
(comment 
  (MediumAmountFn Compressibility) "Can be compressed to less than half its volume")

;;; (MeaningInSystemFn SENSUS-Information1997 "LINEAR-SIZE")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LINEAR-SIZE") PhysicalAmountSlot)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LINEAR-SIZE") Thing)
(arg2Isa 
  (MeaningInSystemFn SENSUS-Information1997 "LINEAR-SIZE") Distance)

;;; (TransportFn LiquidTangibleThing)
(isa 
  (TransportFn LiquidTangibleThing) ScriptType)
(genls 
  (TransportFn LiquidTangibleThing) TransportingGoods)

;;; (MeaningInSystemFn SENSUS-Information1997 "SET")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SET") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SET") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "SIZE")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SIZE") MeasurableAttributeType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SIZE") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "SIZE") PhysicalAttribute)

;;; (MeaningInSystemFn SENSUS-Information1997 "REPRESENTATIONAL-OBJECT")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "REPRESENTATIONAL-OBJECT") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "REPRESENTATIONAL-OBJECT") Thing)

;;; (NoAmountFn Compressibility)
(isa 
  (NoAmountFn Compressibility) Compressibility)
(isa 
  (NoAmountFn Compressibility) ScalarInterval)
(comment 
  (NoAmountFn Compressibility) "essentially cannot be compressed")

;;; (VeryHighAmountFn Porosity)
(isa 
  (VeryHighAmountFn Porosity) Porosity)
(isa 
  (VeryHighAmountFn Porosity) ScalarInterval)

;;; (LowAmountFn Porosity)
(isa 
  (LowAmountFn Porosity) Porosity)
(isa 
  (LowAmountFn Porosity) ScalarInterval)

;;; (VeryLowAmountFn RelativeHumidity)
(isa 
  (VeryLowAmountFn RelativeHumidity) RelativeHumidity)
(isa 
  (VeryLowAmountFn RelativeHumidity) ScalarInterval)

;;; (MediumAmountFn Fragility)
(isa 
  (MediumAmountFn Fragility) Fragility)
(isa 
  (MediumAmountFn Fragility) ScalarInterval)

;;; (ThePartition Translation-Flow Translation-Complete)
(isa 
  (ThePartition Translation-Flow Translation-Complete) DisjointSetOrCollection)
(isa 
  (ThePartition Translation-Flow Translation-Complete) Set-Mathematical)

;;; (LowAmountFn ShearStrength)
(isa 
  (LowAmountFn ShearStrength) ShearStrength)
(isa 
  (LowAmountFn ShearStrength) ScalarInterval)

;;; (VeryHighAmountFn ShearStrength)
(isa 
  (VeryHighAmountFn ShearStrength) ShearStrength)
(isa 
  (VeryHighAmountFn ShearStrength) ScalarInterval)

;;; (HighAmountFn Flammability)
(isa 
  (HighAmountFn Flammability) Flammability)
(isa 
  (HighAmountFn Flammability) ScalarInterval)

;;; (SolidFn Metal)
(isa 
  (SolidFn Metal) TangibleStuffStateType)
(genls 
  (SolidFn Metal) Metal)
(genls 
  (SolidFn Metal) SolidTangibleThing)

;;; (NoAmountFn Malleability)
(isa 
  (NoAmountFn Malleability) Malleability)
(isa 
  (NoAmountFn Malleability) ScalarInterval)

;;; (MeaningInSystemFn SENSUS-Information1997 "NON-CONSCIOUS-BEING")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NON-CONSCIOUS-BEING") ExistingObjectType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "NON-CONSCIOUS-BEING") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "NON-CONSCIOUS-BEING") PartiallyTangible)

;;; (MeaningInSystemFn SENSUS-Information1997 "SOURCE-DESTINATION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SOURCE-DESTINATION") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "SOURCE-DESTINATION") Thing)

;;; (TransportFn Person)
(isa 
  (TransportFn Person) ScriptType)
(genls 
  (TransportFn Person) TransportingGoods)

;;; (MeaningInSystemFn SENSUS-Information1997 "LOCATING")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LOCATING") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LOCATING") Thing)

;;; (ThePartition Set-Mathematical Collection)
(isa 
  (ThePartition Set-Mathematical Collection) DisjointSetOrCollection)
(isa 
  (ThePartition Set-Mathematical Collection) Set-Mathematical)

;;; (WaveEmissionFn VisibleLight)
(isa 
  (WaveEmissionFn VisibleLight) ScriptType)
(isa 
  (WaveEmissionFn VisibleLight) TemporalStuffType)
(genls 
  (WaveEmissionFn VisibleLight) EmittingAWave)
(comment 
  (WaveEmissionFn VisibleLight) "A collection of events; a subset of EmittingAWave. Each element of (WaveEmissionFn VisibleLight) is an event in which an instance of VisibleLight is emitted from some waveSource. Examples: the burning of a candle; the shining of a light bulb; a firefly's glowing. Almost every instance of (WaveEmissionFn VisibleLight) will also emit instances of other types of ElectromagneticRadiation other than VisibleLight.")

;;; (TransportViaFn Airplane)
(isa 
  (TransportViaFn Airplane) ScriptType)
(isa 
  (TransportViaFn Airplane) DefaultDisjointScriptType)
(isa 
  (TransportViaFn Airplane) TemporalStuffType)
(genls 
  (TransportViaFn Airplane) TransportationEvent)
(genls 
  (TransportViaFn Airplane) 
  (TransportViaFn AirTransportationDevice))
(genls 
  (TransportViaFn Airplane) 
  (TransportViaFn TransportationDevice-Vehicle))
(comment 
  (TransportViaFn Airplane) "Transportation in an Airplane. This includes not only flying (moving through the air, with the plane supoorted by the air), but also such events as taxiing, takeoff and landing.")

;;; (TransportViaFn Animal)
(isa 
  (TransportViaFn Animal) TemporalStuffType)
(isa 
  (TransportViaFn Animal) ScriptType)
(genls 
  (TransportViaFn Animal) TransportationEvent)
(genls 
  (TransportViaFn Animal) PurposefulAction)
(comment 
  (TransportViaFn Animal) "Transportation in which an animal provides the force for movement.  Includes horses and other animals carrying people and objects, people carrying objects and other people, etc.")

;;; (GaseousFn Water)
(isa 
  (GaseousFn Water) TangibleStuffStateType)
(genls 
  (GaseousFn Water) Water)
(genls 
  (GaseousFn Water) GaseousTangibleThing)

;;; (GroupFn Event)
(isa 
  (GroupFn Event) ObjectType)
(genls 
  (GroupFn Event) Event)
(genls 
  (GroupFn Event) Group)

;;; (TransportViaFn TransportationDevice)
(isa 
  (TransportViaFn TransportationDevice) ScriptType)
(isa 
  (TransportViaFn TransportationDevice) TemporalStuffType)
(genls 
  (TransportViaFn TransportationDevice) TransportationEvent)
(genls 
  (TransportViaFn TransportationDevice) HumanActivity)
(genls 
  (TransportViaFn TransportationDevice) Translation-SinglePath)
(genls 
  (TransportViaFn TransportationDevice) 
  (TransportViaFn TransportationDevice))
(comment 
  (TransportViaFn TransportationDevice) "A collection of events.  An instance of (TransportViaFn TransportationDevice) is a TransportationEvent in which the transporter is a TransportationDevice; e.g., driving a car, riding a train, sending scientific instruments to Mars on an unmanned space probe.")

;;; (MeaningInSystemFn SENSUS-Information1997 "ONE-OR-TWO-D-LOCATION")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ONE-OR-TWO-D-LOCATION") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ONE-OR-TWO-D-LOCATION") ShapeType)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "ONE-OR-TWO-D-LOCATION") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "ONE-OR-TWO-D-LOCATION") GeometricThing)

;;; (MeaningInSystemFn SENSUS-Information1997 "CONTAINED")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CONTAINED") BinaryPredicate)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "CONTAINED") Thing)

;;; (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE")
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE") Collection)
(isa 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE") Thing)
(genls 
  (MeaningInSystemFn SENSUS-Information1997 "LANGUAGE") CommunicationConvention)

;;; (TransportFn GaseousTangibleThing)
(isa 
  (TransportFn GaseousTangibleThing) ScriptType)
(genls 
  (TransportFn GaseousTangibleThing) TransportingGoods)

;;; (VeryHighAmountFn Rigidity)
(isa 
  (VeryHighAmountFn Rigidity) Rigidity)
(isa 
  (VeryHighAmountFn Rigidity) ScalarInterval)



