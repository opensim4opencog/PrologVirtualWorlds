/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class jpl_fli_Prolog */

#ifndef _Included_jpl_fli_Prolog
#define _Included_jpl_fli_Prolog
#ifdef __cplusplus
extern "C" {
#endif
#undef jpl_fli_Prolog_VARIABLE
#define jpl_fli_Prolog_VARIABLE 1L
#undef jpl_fli_Prolog_ATOM
#define jpl_fli_Prolog_ATOM 2L
#undef jpl_fli_Prolog_INTEGER
#define jpl_fli_Prolog_INTEGER 3L
#undef jpl_fli_Prolog_FLOAT
#define jpl_fli_Prolog_FLOAT 4L
#undef jpl_fli_Prolog_STRING
#define jpl_fli_Prolog_STRING 5L
#undef jpl_fli_Prolog_TERM
#define jpl_fli_Prolog_TERM 6L
#undef jpl_fli_Prolog_FUNCTOR
#define jpl_fli_Prolog_FUNCTOR 10L
#undef jpl_fli_Prolog_LIST
#define jpl_fli_Prolog_LIST 11L
#undef jpl_fli_Prolog_CHARS
#define jpl_fli_Prolog_CHARS 12L
#undef jpl_fli_Prolog_POINTER
#define jpl_fli_Prolog_POINTER 13L
#undef jpl_fli_Prolog_succeed
#define jpl_fli_Prolog_succeed 1L
#undef jpl_fli_Prolog_fail
#define jpl_fli_Prolog_fail 0L
#undef jpl_fli_Prolog_Q_NORMAL
#define jpl_fli_Prolog_Q_NORMAL 2L
#undef jpl_fli_Prolog_Q_NODEBUG
#define jpl_fli_Prolog_Q_NODEBUG 4L
#undef jpl_fli_Prolog_Q_CATCH_EXCEPTION
#define jpl_fli_Prolog_Q_CATCH_EXCEPTION 8L
#undef jpl_fli_Prolog_Q_PASS_EXCEPTION
#define jpl_fli_Prolog_Q_PASS_EXCEPTION 16L
#undef jpl_fli_Prolog_CVT_ATOM
#define jpl_fli_Prolog_CVT_ATOM 1L
#undef jpl_fli_Prolog_CVT_STRING
#define jpl_fli_Prolog_CVT_STRING 2L
#undef jpl_fli_Prolog_VT_LIST
#define jpl_fli_Prolog_VT_LIST 4L
#undef jpl_fli_Prolog_CVT_INTEGER
#define jpl_fli_Prolog_CVT_INTEGER 8L
#undef jpl_fli_Prolog_CVT_FLOAT
#define jpl_fli_Prolog_CVT_FLOAT 16L
#undef jpl_fli_Prolog_CVT_VARIABLE
#define jpl_fli_Prolog_CVT_VARIABLE 32L
#undef jpl_fli_Prolog_CVT_NUMBER
#define jpl_fli_Prolog_CVT_NUMBER 24L
#undef jpl_fli_Prolog_CVT_ATOMIC
#define jpl_fli_Prolog_CVT_ATOMIC 27L
#undef jpl_fli_Prolog_CVT_ALL
#define jpl_fli_Prolog_CVT_ALL 255L
#undef jpl_fli_Prolog_BUF_DISCARDABLE
#define jpl_fli_Prolog_BUF_DISCARDABLE 0L
#undef jpl_fli_Prolog_BUF_RING
#define jpl_fli_Prolog_BUF_RING 256L
#undef jpl_fli_Prolog_BUF_MALLOC
#define jpl_fli_Prolog_BUF_MALLOC 512L
/*
 * Class:     jpl_fli_Prolog
 * Method:    new_term_refs
 * Signature: (I)Ljpl/fli/term_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_new_1term_1refs
  (JNIEnv *, jclass, jint);

/*
 * Class:     jpl_fli_Prolog
 * Method:    new_term_ref
 * Signature: ()Ljpl/fli/term_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_new_1term_1ref
  (JNIEnv *, jclass);

/*
 * Class:     jpl_fli_Prolog
 * Method:    copy_term_ref
 * Signature: (Ljpl/fli/term_t;)Ljpl/fli/term_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_copy_1term_1ref
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    reset_term_refs
 * Signature: (Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_reset_1term_1refs
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    new_atom
 * Signature: (Ljava/lang/String;)Ljpl/fli/atom_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_new_1atom
  (JNIEnv *, jclass, jstring);

/*
 * Class:     jpl_fli_Prolog
 * Method:    atom_chars
 * Signature: (Ljpl/fli/atom_t;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_jpl_fli_Prolog_atom_1chars
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    new_functor
 * Signature: (Ljpl/fli/atom_t;I)Ljpl/fli/functor_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_new_1functor
  (JNIEnv *, jclass, jobject, jint);

/*
 * Class:     jpl_fli_Prolog
 * Method:    functor_name
 * Signature: (Ljpl/fli/functor_t;)Ljpl/fli/atom_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_functor_1name
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    functor_arity
 * Signature: (Ljpl/fli/functor_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_functor_1arity
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_atom
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/atom_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1atom
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_atom_chars
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/StringHolder;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1atom_1chars
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_string
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/StringHolder;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1string
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_list_chars
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/StringHolder;I)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1list_1chars
  (JNIEnv *, jclass, jobject, jobject, jint);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_chars
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/StringHolder;I)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1chars
  (JNIEnv *, jclass, jobject, jobject, jint);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_integer
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/IntHolder;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1integer
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_long
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/LongHolder;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1long
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_pointer
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/PointerHolder;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1pointer
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_float
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/DoubleHolder;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1float
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_functor
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/functor_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1functor
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_name_arity
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/atom_t;Ljpl/fli/IntHolder;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1name_1arity
  (JNIEnv *, jclass, jobject, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_module
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/module_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1module
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_arg
 * Signature: (ILjpl/fli/term_t;Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1arg
  (JNIEnv *, jclass, jint, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_list
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/term_t;Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1list
  (JNIEnv *, jclass, jobject, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_head
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1head
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_tail
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1tail
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    get_nil
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_get_1nil
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    term_type
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_term_1type
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_variable
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1variable
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_atom
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1atom
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_integer
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1integer
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_string
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1string
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_float
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1float
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_compound
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1compound
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_functor
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/functor_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1functor
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_list
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1list
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_atomic
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1atomic
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    is_number
 * Signature: (Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_is_1number
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_variable
 * Signature: (Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1variable
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_atom
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/atom_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1atom
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_atom_chars
 * Signature: (Ljpl/fli/term_t;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1atom_1chars
  (JNIEnv *, jclass, jobject, jstring);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_string_chars
 * Signature: (Ljpl/fli/term_t;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1string_1chars
  (JNIEnv *, jclass, jobject, jstring);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_list_chars
 * Signature: (Ljpl/fli/term_t;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1list_1chars
  (JNIEnv *, jclass, jobject, jstring);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_integer
 * Signature: (Ljpl/fli/term_t;J)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1integer
  (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_pointer
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/PointerHolder;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1pointer
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_float
 * Signature: (Ljpl/fli/term_t;D)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1float
  (JNIEnv *, jclass, jobject, jdouble);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_functor
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/functor_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1functor
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_list
 * Signature: (Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1list
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_nil
 * Signature: (Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1nil
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    put_term
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_put_1term
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    cons_functor
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/functor_t;[Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_cons_1functor
  (JNIEnv *, jclass, jobject, jobject, jobjectArray);

/*
 * Class:     jpl_fli_Prolog
 * Method:    cons_functor_v
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/functor_t;Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_cons_1functor_1v
  (JNIEnv *, jclass, jobject, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    cons_list
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/term_t;Ljpl/fli/term_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_cons_1list
  (JNIEnv *, jclass, jobject, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    unify
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_unify
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    context
 * Signature: ()Ljpl/fli/module_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_context
  (JNIEnv *, jclass);

/*
 * Class:     jpl_fli_Prolog
 * Method:    module_name
 * Signature: (Ljpl/fli/module_t;)Ljpl/fli/atom_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_module_1name
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    new_module
 * Signature: (Ljpl/fli/atom_t;)Ljpl/fli/module_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_new_1module
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    strip_module
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/module_t;Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_strip_1module
  (JNIEnv *, jclass, jobject, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    open_foreign_frame
 * Signature: ()Ljpl/fli/fid_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_open_1foreign_1frame
  (JNIEnv *, jclass);

/*
 * Class:     jpl_fli_Prolog
 * Method:    close_foreign_frame
 * Signature: (Ljpl/fli/fid_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_close_1foreign_1frame
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    discard_foreign_frame
 * Signature: (Ljpl/fli/fid_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_discard_1foreign_1frame
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    pred
 * Signature: (Ljpl/fli/functor_t;Ljpl/fli/module_t;)Ljpl/fli/predicate_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_pred
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    predicate
 * Signature: (Ljava/lang/String;ILjava/lang/String;)Ljpl/fli/predicate_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_predicate
  (JNIEnv *, jclass, jstring, jint, jstring);

/*
 * Class:     jpl_fli_Prolog
 * Method:    predicate_info
 * Signature: (Ljpl/fli/predicate_t;Ljpl/fli/atom_t;Ljpl/fli/IntHolder;Ljpl/fli/module_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_predicate_1info
  (JNIEnv *, jclass, jobject, jobject, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    open_query
 * Signature: (Ljpl/fli/module_t;ILjpl/fli/predicate_t;Ljpl/fli/term_t;)Ljpl/fli/qid_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_open_1query
  (JNIEnv *, jclass, jobject, jint, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    next_solution
 * Signature: (Ljpl/fli/qid_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_next_1solution
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    close_query
 * Signature: (Ljpl/fli/qid_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_close_1query
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    cut_query
 * Signature: (Ljpl/fli/qid_t;)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_cut_1query
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    call
 * Signature: (Ljpl/fli/term_t;Ljpl/fli/module_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_call
  (JNIEnv *, jclass, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    call_predicate
 * Signature: (Ljpl/fli/module_t;ILjpl/fli/predicate_t;Ljpl/fli/term_t;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_call_1predicate
  (JNIEnv *, jclass, jobject, jint, jobject, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    exception
 * Signature: (Ljpl/fli/qid_t;)Ljpl/fli/term_t;
 */
JNIEXPORT jobject JNICALL Java_jpl_fli_Prolog_exception
  (JNIEnv *, jclass, jobject);

/*
 * Class:     jpl_fli_Prolog
 * Method:    initialise
 * Signature: (I[Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_jpl_fli_Prolog_initialise
  (JNIEnv *, jclass, jint, jobjectArray);

/*
 * Class:     jpl_fli_Prolog
 * Method:    halt
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jpl_fli_Prolog_halt
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
