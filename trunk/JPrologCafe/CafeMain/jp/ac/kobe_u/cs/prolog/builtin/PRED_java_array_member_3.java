package jp.ac.kobe_u.cs.prolog.builtin;

import java.util.Collection;
import java.util.List;

import jp.ac.kobe_u.cs.prolog.lang.NonDetPredicate;
import jp.ac.kobe_u.cs.prolog.lang.PInstantiationException;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StaticProlog;

/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>java_array_member/3</code> defined in callbox.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_java_array_member_3 extends NonDetPredicate {
  //  static public class ArrayControl implements CallControl {
  int lastIndex = -1;
  int currentIndex = -1;
  Object args[], arg1, arg2, arg3;

  public PRED_java_array_member_3() {
  }

  public PRED_java_array_member_3(Object a1, Object a2, Object a3, Predicate cont) {
    this.arg1 = a1;
    this.arg2 = a2;
    this.arg3 = a3;
    this.cont = cont;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.builtin.PRED_java_array_member_3.CallControl#advance(jp.ac.kobe_u.cs.prolog.lang.Prolog)
   */
  @Override
  public boolean advance(Prolog engine) {
    if (!this.hasNext()) return false;
    this.currentIndex++;
    return true;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.lang.Predicate#arity()
   */
  @Override
  public int arity() {
    // TODO Auto-generated method stub
    return 3;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.builtin.PRED_java_array_member_3.CallControl#redo(jp.ac.kobe_u.cs.prolog.lang.Prolog)
   */
  @Override
  public boolean call(Prolog engine) {
    if (this.currentIndex > this.lastIndex) return false;
    Object a1, a2, a3;
    final Predicate cont = engine.cont;
    Object[] enginearegs = engine.getAreg();
    a1 = enginearegs[1];
    a2 = enginearegs[2];
    a3 = enginearegs[3];

    a2 = deref(a2);
    if (isInteger(a2)) {
      if (intValue(a2) != this.currentIndex) return false;
    } else if (isVariable(a2)) {
      bind(a2, StaticProlog.makeInteger(this.currentIndex));
    } else {
      return false;
    }
    a3 = deref(a3);
    if (!unify(a1, this.args[this.currentIndex])) return false;
    return true;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.builtin.PRED_java_array_member_3.CallControl#hasNext()
   */
  @Override
  public boolean hasNext() {
    return !(this.currentIndex > this.lastIndex);
  }

  @Override
  public boolean init(Prolog engine) {
    Object[] enginearegs = engine.getAreg();
    enginearegs[1] = this.arg1;
    enginearegs[2] = this.arg2;
    enginearegs[3] = this.arg3;
    engine.cont = this.cont;
    final Object arg3 = deref(this.arg3);
    if (isVariable(arg3)) throw new PInstantiationException(this, 3);
    if (convertible(arg3, Object[].class)) {
      this.args = (Object[]) toJava(deref(arg3));
    } else if (isCompound(arg3)) {
      this.args = args(arg3);//.args();
    } else if (arg3 instanceof List) {
      this.args = (Object[]) ((List) arg3).toArray(new Object[((List) arg3).size()]);
    } else {
      return false;
    }

    final Object a2 = deref(this.arg2);
    if (isVariable(a2)) {
      this.currentIndex = 0;
      this.lastIndex = this.args.length - 1;
    } else {
      this.currentIndex = (int) intValue(a2);
      this.lastIndex = this.currentIndex;
    }
    return true;
  }

  /**
  * (non-Javadoc)
  * @see jp.ac.kobe_u.cs.prolog.builtin.ThisPredicate#setArgument(com.cyc.tool.subl.jrtl.nativeCode.type.core.Object[], jp.ac.kobe_u.cs.prolog.lang.Predicate)
  */

  @Override
  public void setArgument(Object[] args, Predicate cont) {
    this.arg1 = args[0];
    this.arg2 = args[1];
    this.arg3 = args[2];
    this.cont = cont;
  }

  //@Override
  public String toPrologString(Collection newParam) {
    return "java_array_member(" + argString(this.arg1, newParam) + "," + argString(this.arg2, newParam) + "," + argString(this.arg3, newParam) + ")";
  }
}
