package jp.ac.kobe_u.cs.prolog.builtin;

import java.util.Collection;
import java.util.Iterator;

import jp.ac.kobe_u.cs.prolog.lang.NonDetPredicate;
import jp.ac.kobe_u.cs.prolog.lang.PInstantiationException;
import jp.ac.kobe_u.cs.prolog.lang.Predicate;
import jp.ac.kobe_u.cs.prolog.lang.Prolog;
import jp.ac.kobe_u.cs.prolog.lang.StaticProlog;
import jp.ac.kobe_u.cs.prolog.lang.*;

/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>java_iterate/3</code> defined in callbox.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_java_iterate_2 extends NonDetPredicate {
  //  static public class ArrayControl implements CallControl {
  //int lastIndex    = -1;
  Iterator iter; // = -1;
  Object arg1, arg2;

  public PRED_java_iterate_2() {
  }

  public PRED_java_iterate_2(Object a1, Object a2, Predicate cont) {
    this.arg1 = a1;
    this.arg2 = a2;
    this.cont = cont;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.builtin.PRED_java_iterate_2.CallControl#advance(jp.ac.kobe_u.cs.prolog.lang.Prolog)
   */
  @Override
  public boolean advance(Prolog engine) {
    if (!this.hasNext()) return false;
    return true;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.lang.Predicate#arity()
   */
  @Override
  public int arity() {
    // TODO Auto-generated method stub
    return 2;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.builtin.PRED_java_iterate_2.CallControl#redo(jp.ac.kobe_u.cs.prolog.lang.Prolog)
   */
  @Override
  public boolean call(Prolog engine) {
    /// Object a1, a2;
    // final Predicate cont = engine.cont;
    Object[] enginearegs = engine.getAreg();
    Object a1 = enginearegs[1];
    final Object a2 = deref(enginearegs[2]);
    //a2 = deref(a2);
    boolean hasNext = this.iter.hasNext();

    while (hasNext) {
      final Object next = this.iter.next();
      final Object a3 = makeTerm(next);
      if (unify(a2, a3)) return true;
      hasNext = this.iter.hasNext();
    }
    return false;
  }

  /** (non-Javadoc)
   * @see jp.ac.kobe_u.cs.prolog.builtin.PRED_java_iterate_2.CallControl#hasNext()
   */
  @Override
  public boolean hasNext() {
    return this.iter.hasNext();
  }

  @Override
  public boolean init(Prolog engine) {
    Object[] enginearegs = engine.getAreg();
    enginearegs[1] = this.arg1;
    enginearegs[2] = this.arg2;
    engine.cont = this.cont;

    final Object arg1 = deref(this.arg1);
    if (isVariable(arg1)) throw new PInstantiationException(this, 1);
    if (StaticProlog.convertible(arg1,Iterator.class)) {
      this.iter = (Iterator)toJava( deref(arg1));
    } else if (arg1 instanceof Iterable) {
      this.iter = ((Iterable) arg1).iterator();
    } else if (convertible(arg1,Iterable.class)) {
      this.iter = ((Iterable) toJava(deref(arg1))).iterator();
    } else {
      return false;
    }
    return true;
  }

  /**
  * (non-Javadoc)
  * @see jp.ac.kobe_u.cs.prolog.builtin.ThisPredicate#setArgument(com.cyc.tool.subl.jrtl.nativeCode.type.core.Object[], jp.ac.kobe_u.cs.prolog.lang.Predicate)
  */

  @Override
  public void setArgument(Object[] args, Predicate cont) {
    this.arg1 = args[0];
    this.arg2 = args[1];
    this.cont = cont;
  }

  // @Override
  public String toPrologString(Collection newParam) {
    return "java_iterate(" + this.arg1 + "," + this.arg2 + ")";
  }
}
