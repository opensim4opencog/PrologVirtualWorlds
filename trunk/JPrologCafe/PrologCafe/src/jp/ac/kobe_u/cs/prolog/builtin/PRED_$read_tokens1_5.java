package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$read_tokens1'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$read_tokens1_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("error", 1);
    static /*Symbol*/Object s2 = makeAtom("[]");
    static /*Symbol*/Object s3 = makeAtom("{SYNTAX ERROR}");
    static /*Symbol*/Object s4 = makeAtom("** ");
    static /*Symbol*/Object s5 = makeAtom(" **");
    static /*Symbol*/Object s6 = makeAtom("end_of_file");
    static /*Symbol*/Object s7 = makeAtom(".");
    static /*List*/Object s8 = makeList(s7, s2);
    static /*List*/Object s9 = makeList(s6, s8);
    static /*Symbol*/Object s10 = makeAtom("var", 1);
    static /*Symbol*/Object s11 = makeAtom("_");
    static Object[] s12 = {s11};
    static /*Structure*/Object s13 = makeStructure(s10, s12);
    static /*Symbol*/Object s14 = makeAtom("var", 2);
    static /*Symbol*/Object s15 = makeAtom("=", 2);
    static Predicate _$read_tokens1_5_sub_1 = new PRED_$read_tokens1_5_sub_1();
    static Predicate _$read_tokens1_5_sub_2 = new PRED_$read_tokens1_5_sub_2();
    static Predicate _$read_tokens1_5_sub_3 = new PRED_$read_tokens1_5_sub_3();
    static Predicate _$read_tokens1_5_sub_4 = new PRED_$read_tokens1_5_sub_4();
    static Predicate _$read_tokens1_5_sub_5 = new PRED_$read_tokens1_5_sub_5();
    static Predicate _$read_tokens1_5_sub_6 = new PRED_$read_tokens1_5_sub_6();
    static Predicate _$read_tokens1_5_1 = new PRED_$read_tokens1_5_1();
    static Predicate _$read_tokens1_5_2 = new PRED_$read_tokens1_5_2();
    static Predicate _$read_tokens1_5_3 = new PRED_$read_tokens1_5_3();
    static Predicate _$read_tokens1_5_4 = new PRED_$read_tokens1_5_4();
    static Predicate _$read_tokens1_5_5 = new PRED_$read_tokens1_5_5();
    static Predicate _$read_tokens1_5_6 = new PRED_$read_tokens1_5_6();
    static Predicate _$read_tokens1_5_7 = new PRED_$read_tokens1_5_7();

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$read_tokens1_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$read_tokens1_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$read_tokens1"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$read_tokens1'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$read_tokens1_5_1, _$read_tokens1_5_sub_1);
    }
}

class PRED_$read_tokens1_5_sub_1 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_tokens1_5_2, _$read_tokens1_5_sub_2);
    }
}

class PRED_$read_tokens1_5_sub_2 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_tokens1_5_3, _$read_tokens1_5_sub_3);
    }
}

class PRED_$read_tokens1_5_sub_3 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_tokens1_5_4, _$read_tokens1_5_sub_4);
    }
}

class PRED_$read_tokens1_5_sub_4 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_tokens1_5_5, _$read_tokens1_5_sub_5);
    }
}

class PRED_$read_tokens1_5_sub_5 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_tokens1_5_6, _$read_tokens1_5_sub_6);
    }
}

class PRED_$read_tokens1_5_sub_6 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$read_tokens1_5_7);
    }
}

class PRED_$read_tokens1_5_1 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens1'(A, error(B), [], C, D):-!, write('{SYNTAX ERROR}'), nl, write('** '), write(B), write(' **'), nl, '$read_tokens_until_fullstop'(A), fail
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$read_tokens1'(A, error(B), [], C, D):-['$neck_cut', write('{SYNTAX ERROR}'), nl, write('** '), write(B), write(' **'), nl, '$read_tokens_until_fullstop'(A), fail]
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s1,a2))
                return fail(engine);
            Object[] args = args(a2);
            a6 = args[0];
        } else if (isVariable(a2)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a2,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s2))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s2);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_$read_tokens_until_fullstop_1(a1, p1);
        p3 = new PRED_nl_0(p2);
        p4 = new PRED_write_1(s5, p3);
        p5 = new PRED_write_1(a6, p4);
        p6 = new PRED_write_1(s4, p5);
        p7 = new PRED_nl_0(p6);
        return exit(engine, new PRED_write_1(s3, p7));
    }
}

class PRED_$read_tokens1_5_2 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens1'(A, end_of_file, [end_of_file, '.'], [], B):-!
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$read_tokens1'(A, end_of_file, [end_of_file, '.'], [], B):-['$neck_cut']
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s6))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s6);
        } else {
            return fail(engine);
        }
        if (! unify(s9,a3))
            return fail(engine);
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s2))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s2);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_tokens1_5_3 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens1'(A, '.', ['.'], [], B):-!
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$read_tokens1'(A, '.', ['.'], [], B):-['$neck_cut']
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s7))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s7);
        } else {
            return fail(engine);
        }
        if (! unify(s8,a3))
            return fail(engine);
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s2))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s2);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_tokens1_5_4 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens1'(A, var('_'), [var('_', B)|C], ['_'=B|D], E):-!, '$read_tokens'(A, C, D, ['_'=B|E])
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$read_tokens1'(A, var('_'), [var('_', B)|C], ['_'=B|D], E):-['$neck_cut', '$read_tokens'(A, C, D, ['_'=B|E])]
        if (! unify(s13,a2))
            return fail(engine);
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a3)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a3,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s14,a6))
                return fail(engine);
            Object[] args = args(a6);
            if (!unify( s11,args[0]))
                return fail(engine);
            a8 = args[1];
        } else if (isVariable(a6)){
            a8 = engine.makeVariable(this);
            Object[] args = {s11, a8};
            bind(/*VAR*/ a6,makeStructure(s14, args));
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a9 = args[0];
            a10 = args[1];
        } else if (isVariable(a4)){
            a9 = engine.makeVariable(this);
            a10 = engine.makeVariable(this);
             bind(a4,makeList(a9, a10));
        } else {
            return fail(engine);
        }
        a9 = deref( a9);
        if (isCompound(a9)){
            if (!functorOf( s15,a9))
                return fail(engine);
            Object[] args = args(a9);
            if (!unify( s11,args[0]))
                return fail(engine);
            if (!unify( a8,args[1]))
                return fail(engine);
        } else if (isVariable(a9)){
            Object[] args = {s11, a8};
            bind(/*VAR*/ a9,makeStructure(s15, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {s11, a8};
        a11 = makeStructure(s15, y1);
        a12 = makeList(a11, a5);
        return exit(engine, new PRED_$read_tokens_4(a1, a7, a10, a12, cont));
    }
}

class PRED_$read_tokens1_5_5 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens1'(A, var(B), [var(B, C)|D], E, F):-'$mem_pair'(B=C, F), !, '$read_tokens'(A, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$read_tokens1'(A, var(B), [var(B, C)|D], E, F):-['$get_level'(G), '$mem_pair'(B=C, F), '$cut'(G), '$read_tokens'(A, D, E, F)]
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s10,a2))
                return fail(engine);
            Object[] args = args(a2);
            a6 = args[0];
        } else if (isVariable(a2)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a2,makeStructure(s10, args));
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a3)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
             bind(a3,makeList(a7, a8));
        } else {
            return fail(engine);
        }
        a7 = deref( a7);
        if (isCompound(a7)){
            if (!functorOf( s14,a7))
                return fail(engine);
            Object[] args = args(a7);
            if (!unify( a6,args[0]))
                return fail(engine);
            a9 = args[1];
        } else if (isVariable(a7)){
            a9 = engine.makeVariable(this);
            Object[] args = {a6, a9};
            bind(/*VAR*/ a7,makeStructure(s14, args));
        } else {
            return fail(engine);
        }
        a10 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(10))
        if (! unify(a10,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {a6, a9};
        a11 = makeStructure(s15, y1);
        p1 = new PRED_$read_tokens_4(a1, a8, a4, a5, cont);
        p2 = new PRED_$cut_1(a10, p1);
        return exit(engine, new PRED_$mem_pair_2(a11, a5, p2));
    }
}

class PRED_$read_tokens1_5_6 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens1'(A, var(B), [var(B, C)|D], [B=C|E], F):-!, '$read_tokens'(A, D, E, [B=C|F])
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$read_tokens1'(A, var(B), [var(B, C)|D], [B=C|E], F):-['$neck_cut', '$read_tokens'(A, D, E, [B=C|F])]
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s10,a2))
                return fail(engine);
            Object[] args = args(a2);
            a6 = args[0];
        } else if (isVariable(a2)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a2,makeStructure(s10, args));
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a3)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
             bind(a3,makeList(a7, a8));
        } else {
            return fail(engine);
        }
        a7 = deref( a7);
        if (isCompound(a7)){
            if (!functorOf( s14,a7))
                return fail(engine);
            Object[] args = args(a7);
            if (!unify( a6,args[0]))
                return fail(engine);
            a9 = args[1];
        } else if (isVariable(a7)){
            a9 = engine.makeVariable(this);
            Object[] args = {a6, a9};
            bind(/*VAR*/ a7,makeStructure(s14, args));
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a10 = args[0];
            a11 = args[1];
        } else if (isVariable(a4)){
            a10 = engine.makeVariable(this);
            a11 = engine.makeVariable(this);
             bind(a4,makeList(a10, a11));
        } else {
            return fail(engine);
        }
        a10 = deref( a10);
        if (isCompound(a10)){
            if (!functorOf( s15,a10))
                return fail(engine);
            Object[] args = args(a10);
            if (!unify( a6,args[0]))
                return fail(engine);
            if (!unify( a9,args[1]))
                return fail(engine);
        } else if (isVariable(a10)){
            Object[] args = {a6, a9};
            bind(/*VAR*/ a10,makeStructure(s15, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a6, a9};
        a12 = makeStructure(s15, y1);
        a13 = makeList(a12, a5);
        return exit(engine, new PRED_$read_tokens_4(a1, a8, a11, a13, cont));
    }
}

class PRED_$read_tokens1_5_7 extends PRED_$read_tokens1_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens1'(A, B, [B|C], D, E):-'$read_tokens'(A, C, D, E)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$read_tokens1'(A, B, [B|C], D, E):-['$read_tokens'(A, C, D, E)]
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            if (!unify( a2,args[0]))
                return fail(engine);
            a6 = args[1];
        } else if (isVariable(a3)){
            a6 = engine.makeVariable(this);
             bind(a3,makeList(a2, a6));
        } else {
            return fail(engine);
        }
        return exit(engine, new PRED_$read_tokens_4(a1, a6, a4, a5, cont));
    }
}
