package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>set_prolog_flag/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_set_prolog_flag_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*Symbol*/Object s2 = makeAtom("set_prolog_flag", 2);
    static /*IntegerTerm*/Object si3 = makeInteger(1);
    static /*IntegerTerm*/Object si4 = makeInteger(2);
    static /*Symbol*/Object s5 = makeAtom("type", 1);
    static /*Symbol*/Object s6 = makeAtom("atom");
    static Object[] s7 = {s6};
    static /*Structure*/Object s8 = makeStructure(s5, s7);
    static Predicate _set_prolog_flag_2_sub_1 = new PRED_set_prolog_flag_2_sub_1();
    static Predicate _set_prolog_flag_2_sub_2 = new PRED_set_prolog_flag_2_sub_2();
    static Predicate _set_prolog_flag_2_sub_3 = new PRED_set_prolog_flag_2_sub_3();
    static Predicate _set_prolog_flag_2_1 = new PRED_set_prolog_flag_2_1();
    static Predicate _set_prolog_flag_2_2 = new PRED_set_prolog_flag_2_2();
    static Predicate _set_prolog_flag_2_3 = new PRED_set_prolog_flag_2_3();
    static Predicate _set_prolog_flag_2_4 = new PRED_set_prolog_flag_2_4();

    public Object arg1, arg2;

    public PRED_set_prolog_flag_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_set_prolog_flag_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "set_prolog_flag"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'set_prolog_flag'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_set_prolog_flag_2_1, _set_prolog_flag_2_sub_1);
    }
}

class PRED_set_prolog_flag_2_sub_1 extends PRED_set_prolog_flag_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_set_prolog_flag_2_2, _set_prolog_flag_2_sub_2);
    }
}

class PRED_set_prolog_flag_2_sub_2 extends PRED_set_prolog_flag_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_set_prolog_flag_2_3, _set_prolog_flag_2_sub_3);
    }
}

class PRED_set_prolog_flag_2_sub_3 extends PRED_set_prolog_flag_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_set_prolog_flag_2_4);
    }
}

class PRED_set_prolog_flag_2_1 extends PRED_set_prolog_flag_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // set_prolog_flag(A, B):-var(A), !, illarg(var, set_prolog_flag(A, B), 1)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // set_prolog_flag(A, B):-['$get_level'(C), var(A), '$cut'(C), illarg(var, set_prolog_flag(A, B), 1)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        Object[] y1 = {a1, a2};
        a4 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s1, a4, si3, cont));
    }
}

class PRED_set_prolog_flag_2_2 extends PRED_set_prolog_flag_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // set_prolog_flag(A, B):-var(B), !, illarg(var, set_prolog_flag(A, B), 2)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // set_prolog_flag(A, B):-['$get_level'(C), var(B), '$cut'(C), illarg(var, set_prolog_flag(A, B), 2)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(2))
        a2 = deref( a2);
        if (! isVariable(a2)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        Object[] y1 = {a1, a2};
        a4 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s1, a4, si4, cont));
    }
}

class PRED_set_prolog_flag_2_3 extends PRED_set_prolog_flag_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // set_prolog_flag(A, B):-atom(A), !, '$set_prolog_flag0'(A, B)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // set_prolog_flag(A, B):-['$get_level'(C), atom(A), '$cut'(C), '$set_prolog_flag0'(A, B)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = deref( a1);
        if (! isAtomTerm(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        return exit(engine, new PRED_$set_prolog_flag0_2(a1, a2, cont));
    }
}

class PRED_set_prolog_flag_2_4 extends PRED_set_prolog_flag_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // set_prolog_flag(A, B):-illarg(type(atom), set_prolog_flag(A, B), 1)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // set_prolog_flag(A, B):-[illarg(type(atom), set_prolog_flag(A, B), 1)]
        Object[] y1 = {a1, a2};
        a3 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s8, a3, si3, cont));
    }
}
