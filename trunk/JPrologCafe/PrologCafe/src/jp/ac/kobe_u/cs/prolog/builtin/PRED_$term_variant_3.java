package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$term_variant'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$term_variant_3 extends PredicateBase {
    static Predicate _$term_variant_3_top = new PRED_$term_variant_3_top();
    static Predicate _$term_variant_3_var = new PRED_$term_variant_3_var();
    static Predicate _$term_variant_3_var_1 = new PRED_$term_variant_3_var_1();
    static Predicate _$term_variant_3_var_2 = new PRED_$term_variant_3_var_2();
    static Predicate _$term_variant_3_var_3 = new PRED_$term_variant_3_var_3();
    static Predicate _$term_variant_3_var_4 = new PRED_$term_variant_3_var_4();
    static Predicate _$term_variant_3_int = new PRED_$term_variant_3_int();
    static Predicate _$term_variant_3_int_1 = new PRED_$term_variant_3_int_1();
    static Predicate _$term_variant_3_int_2 = new PRED_$term_variant_3_int_2();
    static Predicate _$term_variant_3_int_3 = new PRED_$term_variant_3_int_3();
    static Predicate _$term_variant_3_1 = new PRED_$term_variant_3_1();
    static Predicate _$term_variant_3_2 = new PRED_$term_variant_3_2();
    static Predicate _$term_variant_3_3 = new PRED_$term_variant_3_3();
    static Predicate _$term_variant_3_4 = new PRED_$term_variant_3_4();
    static Predicate _$term_variant_3_5 = new PRED_$term_variant_3_5();

    public Object arg1, arg2, arg3;

    public PRED_$term_variant_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$term_variant_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$term_variant"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$term_variant'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        return exit(engine, _$term_variant_3_top);
    }
}

class PRED_$term_variant_3_top extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$term_variant_3_var, _$term_variant_3_int, _$term_variant_3_int, _$term_variant_3_int, _$term_variant_3_int, _$term_variant_3_var);
    }
}

class PRED_$term_variant_3_var extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$term_variant_3_1, _$term_variant_3_var_1);
    }
}

class PRED_$term_variant_3_var_1 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_variant_3_2, _$term_variant_3_var_2);
    }
}

class PRED_$term_variant_3_var_2 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_variant_3_3, _$term_variant_3_var_3);
    }
}

class PRED_$term_variant_3_var_3 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_variant_3_4, _$term_variant_3_var_4);
    }
}

class PRED_$term_variant_3_var_4 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$term_variant_3_5);
    }
}

class PRED_$term_variant_3_int extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$term_variant_3_1, _$term_variant_3_int_1);
    }
}

class PRED_$term_variant_3_int_1 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_variant_3_2, _$term_variant_3_int_2);
    }
}

class PRED_$term_variant_3_int_2 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_variant_3_3, _$term_variant_3_int_3);
    }
}

class PRED_$term_variant_3_int_3 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$term_variant_3_5);
    }
}

class PRED_$term_variant_3_1 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_variant'(A, B, C):-var(A), !, '$dummy_13_builtins.pl'(A, B, C, D)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$term_variant'(A, B, C):-['$get_level'(D), var(A), '$cut'(D), '$dummy_13_builtins.pl'(A, B, C, E)]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine, new PRED_$dummy_13_builtins$002Epl_4(a1, a2, a3, engine.makeVariable(this), cont));
    }
}

class PRED_$term_variant_3_2 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_variant'(A, B, C):-ground(A), !, A==B
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$term_variant'(A, B, C):-['$get_level'(D), ground(A), '$cut'(D), '$equality_of_term'(A, B)]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of ground(a(1))
        a1 = deref( a1);
        if (! isGround(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(1), a(2))
        a1 = deref( a1);
        a2 = deref( a2);
        if (! prologEquals(a1,a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$term_variant_3_3 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_variant'(A, B, C):-var(B), !, fail
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$term_variant'(A, B, C):-['$get_level'(D), var(B), '$cut'(D), fail]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(2))
        a2 = deref( a2);
        if (! isVariable(a2)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        //START inline expansion of fail
        return fail(engine);
        //END inline expansion
    }
}

class PRED_$term_variant_3_4 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_variant'([A|B], [C|D], E):-!, '$term_variant'(A, C, E), '$term_variant'(B, D, E)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$term_variant'([A|B], [C|D], E):-['$neck_cut', '$term_variant'(A, C, E), '$term_variant'(B, D, E)]
        a1 = deref( a1);
        if (isListTerm(a1)){
            Object[] args = consArgs(a1);
            a4 = args[0];
            a5 = args[1];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
             bind(a1,makeList(a4, a5));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isListTerm(a2)){
            Object[] args = consArgs(a2);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a2)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a2,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$term_variant_3(a5, a7, a3, cont);
        engine_aregs[1] = a4;
        engine_aregs[2] = a6;
        engine_aregs[3] = a3;
        engine.cont = p1;
        return exit(engine, _$term_variant_3_top);
    }
}

class PRED_$term_variant_3_5 extends PRED_$term_variant_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_variant'(A, B, C):-A=..D, B=..E, '$term_variant'(D, E, C)
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$term_variant'(A, B, C):-['$univ'(A, D), '$univ'(B, E), '$term_variant'(D, E, C)]
        a4 = engine.makeVariable(this);
        a5 = engine.makeVariable(this);
        p1 = new PRED_$term_variant_3(a4, a5, a3, cont);
        p2 = new PRED_$univ_2(a2, a5, p1);
        return exit(engine, new PRED_$univ_2(a1, a4, p2));
    }
}
