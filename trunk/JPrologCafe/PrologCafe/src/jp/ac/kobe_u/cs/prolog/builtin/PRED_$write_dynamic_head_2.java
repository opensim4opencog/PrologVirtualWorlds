package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_dynamic_head'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_dynamic_head_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("user");
    static /*Symbol*/Object s2 = makeAtom(":");
    static Predicate _$write_dynamic_head_2_var = new PRED_$write_dynamic_head_2_var();
    static Predicate _$write_dynamic_head_2_var_1 = new PRED_$write_dynamic_head_2_var_1();
    static Predicate _$write_dynamic_head_2_1 = new PRED_$write_dynamic_head_2_1();
    static Predicate _$write_dynamic_head_2_2 = new PRED_$write_dynamic_head_2_2();

    public Object arg1, arg2;

    public PRED_$write_dynamic_head_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$write_dynamic_head_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$write_dynamic_head"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_dynamic_head'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$write_dynamic_head_2_var, _$write_dynamic_head_2_2, _$write_dynamic_head_2_2, _$write_dynamic_head_2_var, _$write_dynamic_head_2_2, _$write_dynamic_head_2_2);
    }
}

class PRED_$write_dynamic_head_2_var extends PRED_$write_dynamic_head_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_dynamic_head_2_1, _$write_dynamic_head_2_var_1);
    }
}

class PRED_$write_dynamic_head_2_var_1 extends PRED_$write_dynamic_head_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_dynamic_head_2_2);
    }
}

class PRED_$write_dynamic_head_2_1 extends PRED_$write_dynamic_head_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_head'(user, A):-!, writeq(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_head'(user, A):-['$neck_cut', writeq(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_writeq_1(a2, cont));
    }
}

class PRED_$write_dynamic_head_2_2 extends PRED_$write_dynamic_head_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_head'(A, B):-write(A), write(:), writeq(B)
        Object a1, a2;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_head'(A, B):-[write(A), write(:), writeq(B)]
        p1 = new PRED_writeq_1(a2, cont);
        p2 = new PRED_write_1(s2, p1);
        return exit(engine, new PRED_write_1(a1, p2));
    }
}
