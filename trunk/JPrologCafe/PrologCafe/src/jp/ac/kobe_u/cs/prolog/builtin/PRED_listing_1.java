package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>listing/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_listing_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*Symbol*/Object s2 = makeAtom("listing", 1);
    static /*IntegerTerm*/Object si3 = makeInteger(1);
    static /*Symbol*/Object s4 = makeAtom("/", 2);
    static /*Symbol*/Object s5 = makeAtom("user");
    static /*Symbol*/Object s6 = makeAtom(":", 2);
    static /*Symbol*/Object s7 = makeAtom("type", 1);
    static /*Symbol*/Object s8 = makeAtom("predicate_indicator");
    static Object[] s9 = {s8};
    static /*Structure*/Object s10 = makeStructure(s7, s9);
    static Predicate _listing_1_var = new PRED_listing_1_var();
    static Predicate _listing_1_var_1 = new PRED_listing_1_var_1();
    static Predicate _listing_1_var_2 = new PRED_listing_1_var_2();
    static Predicate _listing_1_var_3 = new PRED_listing_1_var_3();
    static Predicate _listing_1_var_4 = new PRED_listing_1_var_4();
    static Predicate _listing_1_int = new PRED_listing_1_int();
    static Predicate _listing_1_int_1 = new PRED_listing_1_int_1();
    static Predicate _listing_1_int_2 = new PRED_listing_1_int_2();
    static Predicate _listing_1_str = new PRED_listing_1_str();
    static Predicate _listing_1_str_0 = new PRED_listing_1_str_0();
    static Predicate _listing_1_str_0_1 = new PRED_listing_1_str_0_1();
    static Predicate _listing_1_str_0_2 = new PRED_listing_1_str_0_2();
    static Predicate _listing_1_str_0_3 = new PRED_listing_1_str_0_3();
    static Predicate _listing_1_str_1 = new PRED_listing_1_str_1();
    static Predicate _listing_1_str_1_1 = new PRED_listing_1_str_1_1();
    static Predicate _listing_1_str_1_2 = new PRED_listing_1_str_1_2();
    static Predicate _listing_1_str_1_3 = new PRED_listing_1_str_1_3();
    static Predicate _listing_1_1 = new PRED_listing_1_1();
    static Predicate _listing_1_2 = new PRED_listing_1_2();
    static Predicate _listing_1_3 = new PRED_listing_1_3();
    static Predicate _listing_1_4 = new PRED_listing_1_4();
    static Predicate _listing_1_5 = new PRED_listing_1_5();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(2);
    static {
        str.put(s4, _listing_1_str_0);
        str.put(s6, _listing_1_str_1);
    }

    public Object arg1;

    public PRED_listing_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_listing_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "listing"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'listing'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_listing_1_var, _listing_1_int, _listing_1_int, _listing_1_int, _listing_1_str, _listing_1_int);
    }
}

class PRED_listing_1_var extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_listing_1_1, _listing_1_var_1);
    }
}

class PRED_listing_1_var_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_2, _listing_1_var_2);
    }
}

class PRED_listing_1_var_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_3, _listing_1_var_3);
    }
}

class PRED_listing_1_var_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_4, _listing_1_var_4);
    }
}

class PRED_listing_1_var_4 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_int extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_listing_1_1, _listing_1_int_1);
    }
}

class PRED_listing_1_int_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_2, _listing_1_int_2);
    }
}

class PRED_listing_1_int_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_str extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _listing_1_int);
    }
}

class PRED_listing_1_str_0 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_listing_1_1, _listing_1_str_0_1);
    }
}

class PRED_listing_1_str_0_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_2, _listing_1_str_0_2);
    }
}

class PRED_listing_1_str_0_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_3, _listing_1_str_0_3);
    }
}

class PRED_listing_1_str_0_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_str_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_listing_1_1, _listing_1_str_1_1);
    }
}

class PRED_listing_1_str_1_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_2, _listing_1_str_1_2);
    }
}

class PRED_listing_1_str_1_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_listing_1_4, _listing_1_str_1_3);
    }
}

class PRED_listing_1_str_1_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_listing_1_5);
    }
}

class PRED_listing_1_1 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // listing(A):-var(A), !, illarg(var, listing(A), 1)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // listing(A):-['$get_level'(B), var(A), '$cut'(B), illarg(var, listing(A), 1)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = deref( a2);
        if (! isCutter/*Integer*/(a2)) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(( a2));
        }
        //END inline expansion
        Object[] y1 = {a1};
        a3 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s1, a3, si3, cont));
    }
}

class PRED_listing_1_2 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // listing(A):-atom(A), !, '$listing'(B, A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // listing(A):-['$get_level'(B), atom(A), '$cut'(B), '$listing'(C, A)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = deref( a1);
        if (! isAtomTerm(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = deref( a2);
        if (! isCutter/*Integer*/(a2)) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(( a2));
        }
        //END inline expansion
        return exit(engine, new PRED_$listing_2(engine.makeVariable(this), a1, cont));
    }
}

class PRED_listing_1_3 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // listing(A/B):-!, '$listing'(A/B, user)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // listing(A/B):-['$neck_cut', '$listing'(A/B, user)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s4,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            Object[] args = {a2, a3};
            bind(/*VAR*/ a1,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a3};
        a4 = makeStructure(s4, y1);
        return exit(engine, new PRED_$listing_2(a4, s5, cont));
    }
}

class PRED_listing_1_4 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // listing(A:B):-atom(A), !, '$listing'(B, A)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // listing(A:B):-['$get_level'(C), atom(A), '$cut'(C), '$listing'(B, A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s6,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            Object[] args = {a2, a3};
            bind(/*VAR*/ a1,makeStructure(s6, args));
        } else {
            return fail(engine);
        }
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(2))
        a2 = deref( a2);
        if (! isAtomTerm(a2)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine, new PRED_$listing_2(a3, a2, cont));
    }
}

class PRED_listing_1_5 extends PRED_listing_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // listing(A):-illarg(type(predicate_indicator), listing(A), 1)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // listing(A):-[illarg(type(predicate_indicator), listing(A), 1)]
        Object[] y1 = {a1};
        a2 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s10, a2, si3, cont));
    }
}
