package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$retract_spypoint'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$retract_spypoint_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("/", 2);
    static /*Symbol*/Object s3 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s4 = makeAtom("$current_spypoint", 3);
    static /*Symbol*/Object s5 = makeAtom("info");
    static /*Symbol*/Object s6 = makeAtom("spypoint");
    static /*Symbol*/Object s7 = makeAtom("is");
    static /*Symbol*/Object s8 = makeAtom("removed");
    static /*Symbol*/Object s9 = makeAtom("[]");
    static /*List*/Object s10 = makeList(s8, s9);
    static /*List*/Object s11 = makeList(s7, s10);
    static Predicate _$retract_spypoint_1_var = new PRED_$retract_spypoint_1_var();
    static Predicate _$retract_spypoint_1_var_1 = new PRED_$retract_spypoint_1_var_1();
    static Predicate _$retract_spypoint_1_1 = new PRED_$retract_spypoint_1_1();
    static Predicate _$retract_spypoint_1_2 = new PRED_$retract_spypoint_1_2();

    public Object arg1;

    public PRED_$retract_spypoint_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$retract_spypoint_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$retract_spypoint"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$retract_spypoint'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$retract_spypoint_1_var, _$retract_spypoint_1_2, _$retract_spypoint_1_2, _$retract_spypoint_1_2, _$retract_spypoint_1_var, _$retract_spypoint_1_2);
    }
}

class PRED_$retract_spypoint_1_var extends PRED_$retract_spypoint_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$retract_spypoint_1_1, _$retract_spypoint_1_var_1);
    }
}

class PRED_$retract_spypoint_1_var_1 extends PRED_$retract_spypoint_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$retract_spypoint_1_2);
    }
}

class PRED_$retract_spypoint_1_1 extends PRED_$retract_spypoint_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$retract_spypoint'(A:B/C):-retract('$current_spypoint'(A, B, C)), print_message(info, [spypoint, A:B/C, is, removed]), !
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$retract_spypoint'(A:B/C):-['$get_level'(D), retract('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(A, B, C)), print_message(info, [spypoint, A:B/C, is, removed]), '$cut'(D)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            Object[] args = {a2, a3};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s2,a3))
                return fail(engine);
            Object[] args = args(a3);
            a4 = args[0];
            a5 = args[1];
        } else if (isVariable(a3)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a4, a5};
            bind(/*VAR*/ a3,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {a2, a4, a5};
        a7 = makeStructure(s4, y1);
        Object[] y2 = {s3, a7};
        a8 = makeStructure(s1, y2);
        Object[] y3 = {a4, a5};
        a9 = makeStructure(s2, y3);
        Object[] y4 = {a2, a9};
        a10 = makeStructure(s1, y4);
        a11 = makeList(a10, s11);
        a12 = makeList(s6, a11);
        p1 = new PRED_$cut_1(a6, cont);
        p2 = new PRED_print_message_2(s5, a12, p1);
        return exit(engine, new PRED_retract_1(a8, p2));
    }
}

class PRED_$retract_spypoint_1_2 extends PRED_$retract_spypoint_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$retract_spypoint'(A):-true
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$retract_spypoint'(A):-[]
        return exit(engine,cont);
    }
}
