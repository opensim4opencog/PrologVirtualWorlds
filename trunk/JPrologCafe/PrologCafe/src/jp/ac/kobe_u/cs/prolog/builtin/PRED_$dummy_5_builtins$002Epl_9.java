package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_5_builtins.pl'/9</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$dummy_5_builtins$002Epl_9 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(">");
    static /*Symbol*/Object s2 = makeAtom("=");
    static Predicate _$dummy_5_builtins$002Epl_9_sub_1 = new PRED_$dummy_5_builtins$002Epl_9_sub_1();
    static Predicate _$dummy_5_builtins$002Epl_9_1 = new PRED_$dummy_5_builtins$002Epl_9_1();
    static Predicate _$dummy_5_builtins$002Epl_9_2 = new PRED_$dummy_5_builtins$002Epl_9_2();

    public Object arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9;

    public PRED_$dummy_5_builtins$002Epl_9(Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Object a7, Object a8, Object a9, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        arg9 = a9;
        this.cont = cont;
    }

    public PRED_$dummy_5_builtins$002Epl_9(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        arg9 = args[8];
        this.cont = cont;
    }

    public int arity() { return 9; }

    public String nameUQ() { return "$dummy_5_builtins.pl"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
         case 5: arg6 = val;break ;
         case 6: arg7 = val;break ;
         case 7: arg8 = val;break ;
         case 8: arg9 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
         case 5: return arg6;
         case 6: return arg7;
         case 7: return arg8;
         case 8: return arg9;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$dummy_5_builtins.pl'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + "," + argString(arg6,newParam) + "," + argString(arg7,newParam) + "," + argString(arg8,newParam) + "," + argString(arg9,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine_aregs[6] = arg6;
        engine_aregs[7] = arg7;
        engine_aregs[8] = arg8;
        engine_aregs[9] = arg9;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_5_builtins$002Epl_9_1, _$dummy_5_builtins$002Epl_9_sub_1);
    }
}

class PRED_$dummy_5_builtins$002Epl_9_sub_1 extends PRED_$dummy_5_builtins$002Epl_9 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dummy_5_builtins$002Epl_9_2);
    }
}

class PRED_$dummy_5_builtins$002Epl_9_1 extends PRED_$dummy_5_builtins$002Epl_9 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-I= (>), !, E=C, '$merge'([A|B], D, F, G, H)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        a9 = engine_aregs[9];
        cont = engine.cont;
    // '$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-['$get_level'(J), '$unify'(I, >), '$cut'(J), '$unify'(E, C), '$merge'([A|B], D, F, G, H)]
        a10 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(10))
        if (! unify(a10,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $unify(a(9), s(1))
        if (! unify(a9,s1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(10))
        a10 = deref( a10);
        if (! isCutter/*Integer*/(a10)) {
            throw new IllegalTypeException("integer", a10);
        } else {
            engine.cut(( a10));
        }
        //END inline expansion
        //START inline expansion of $unify(a(5), a(3))
        if (! unify(a5,a3)) {
            return fail(engine);
        }
        //END inline expansion
        a11 = makeList(a1, a2);
        return exit(engine, new PRED_$merge_5(a11, a4, a6, a7, a8, cont));
    }
}

class PRED_$dummy_5_builtins$002Epl_9_2 extends PRED_$dummy_5_builtins$002Epl_9 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-I= (=), !, E=A, '$merge'(B, D, F, G, H)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        a9 = engine_aregs[9];
        cont = engine.cont;
    // '$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-['$get_level'(J), '$unify'(I, =), '$cut'(J), '$unify'(E, A), '$merge'(B, D, F, G, H)]
        a10 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(10))
        if (! unify(a10,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $unify(a(9), s(2))
        if (! unify(a9,s2)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(10))
        a10 = deref( a10);
        if (! isCutter/*Integer*/(a10)) {
            throw new IllegalTypeException("integer", a10);
        } else {
            engine.cut(( a10));
        }
        //END inline expansion
        //START inline expansion of $unify(a(5), a(1))
        if (! unify(a5,a1)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine, new PRED_$merge_5(a2, a4, a6, a7, a8, cont));
    }
}
