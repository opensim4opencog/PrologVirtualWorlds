package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$give_answers_with_prompt'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$give_answers_with_prompt_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("[]");
    static /*Symbol*/Object s2 = makeAtom(" ? ");
    static /*IntegerTerm*/Object si3 = makeInteger(59);
    static /*List*/Object s4 = makeList(si3, s1);
    static Predicate _$give_answers_with_prompt_1_var = new PRED_$give_answers_with_prompt_1_var();
    static Predicate _$give_answers_with_prompt_1_var_1 = new PRED_$give_answers_with_prompt_1_var_1();
    static Predicate _$give_answers_with_prompt_1_1 = new PRED_$give_answers_with_prompt_1_1();
    static Predicate _$give_answers_with_prompt_1_2 = new PRED_$give_answers_with_prompt_1_2();

    public Object arg1;

    public PRED_$give_answers_with_prompt_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$give_answers_with_prompt_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$give_answers_with_prompt"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$give_answers_with_prompt'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$give_answers_with_prompt_1_var, _$give_answers_with_prompt_1_2, _$give_answers_with_prompt_1_2, _$give_answers_with_prompt_1_var, _$give_answers_with_prompt_1_2, _$give_answers_with_prompt_1_2);
    }
}

class PRED_$give_answers_with_prompt_1_var extends PRED_$give_answers_with_prompt_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$give_answers_with_prompt_1_1, _$give_answers_with_prompt_1_var_1);
    }
}

class PRED_$give_answers_with_prompt_1_var_1 extends PRED_$give_answers_with_prompt_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$give_answers_with_prompt_1_2);
    }
}

class PRED_$give_answers_with_prompt_1_1 extends PRED_$give_answers_with_prompt_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$give_answers_with_prompt'([]):-!
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$give_answers_with_prompt'([]):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$give_answers_with_prompt_1_2 extends PRED_$give_answers_with_prompt_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$give_answers_with_prompt'(A):-'$give_an_answer'(A), '$fast_write'(' ? '), flush_output, read_line(B), B\==[59], nl
        Object a1, a2;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$give_answers_with_prompt'(A):-['$give_an_answer'(A), '$fast_write'(' ? '), flush_output, read_line(B), '$inequality_of_term'(B, [59]), nl]
        a2 = engine.makeVariable(this);
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$inequality_of_term_2(a2, s4, p1);
        p3 = new PRED_read_line_1(a2, p2);
        p4 = new PRED_flush_output_0(p3);
        p5 = new PRED_$fast_write_1(s2, p4);
        return exit(engine, new PRED_$give_an_answer_1(a1, p5));
    }
}
