package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$term_to_predicateindicator'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$term_to_predicateindicator_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*IntegerTerm*/Object si2 = makeInteger(1);
    static /*Symbol*/Object s3 = makeAtom(":", 2);
    static /*Symbol*/Object s4 = makeAtom("/", 2);
    static /*Symbol*/Object s5 = makeAtom("type", 1);
    static /*Symbol*/Object s6 = makeAtom("predicate_indicator");
    static Object[] s7 = {s6};
    static /*Structure*/Object s8 = makeStructure(s5, s7);
    static /*Symbol*/Object s9 = makeAtom("atom");
    static Object[] s10 = {s9};
    static /*Structure*/Object s11 = makeStructure(s5, s10);
    static /*Symbol*/Object s12 = makeAtom("integer");
    static Object[] s13 = {s12};
    static /*Structure*/Object s14 = makeStructure(s5, s13);
    static Predicate _$term_to_predicateindicator_5_top = new PRED_$term_to_predicateindicator_5_top();
    static Predicate _$term_to_predicateindicator_5_var = new PRED_$term_to_predicateindicator_5_var();
    static Predicate _$term_to_predicateindicator_5_var_1 = new PRED_$term_to_predicateindicator_5_var_1();
    static Predicate _$term_to_predicateindicator_5_var_2 = new PRED_$term_to_predicateindicator_5_var_2();
    static Predicate _$term_to_predicateindicator_5_var_3 = new PRED_$term_to_predicateindicator_5_var_3();
    static Predicate _$term_to_predicateindicator_5_var_4 = new PRED_$term_to_predicateindicator_5_var_4();
    static Predicate _$term_to_predicateindicator_5_var_5 = new PRED_$term_to_predicateindicator_5_var_5();
    static Predicate _$term_to_predicateindicator_5_var_6 = new PRED_$term_to_predicateindicator_5_var_6();
    static Predicate _$term_to_predicateindicator_5_int = new PRED_$term_to_predicateindicator_5_int();
    static Predicate _$term_to_predicateindicator_5_int_1 = new PRED_$term_to_predicateindicator_5_int_1();
    static Predicate _$term_to_predicateindicator_5_int_2 = new PRED_$term_to_predicateindicator_5_int_2();
    static Predicate _$term_to_predicateindicator_5_int_3 = new PRED_$term_to_predicateindicator_5_int_3();
    static Predicate _$term_to_predicateindicator_5_str = new PRED_$term_to_predicateindicator_5_str();
    static Predicate _$term_to_predicateindicator_5_str_0 = new PRED_$term_to_predicateindicator_5_str_0();
    static Predicate _$term_to_predicateindicator_5_str_0_1 = new PRED_$term_to_predicateindicator_5_str_0_1();
    static Predicate _$term_to_predicateindicator_5_str_0_2 = new PRED_$term_to_predicateindicator_5_str_0_2();
    static Predicate _$term_to_predicateindicator_5_str_0_3 = new PRED_$term_to_predicateindicator_5_str_0_3();
    static Predicate _$term_to_predicateindicator_5_str_0_4 = new PRED_$term_to_predicateindicator_5_str_0_4();
    static Predicate _$term_to_predicateindicator_5_str_1 = new PRED_$term_to_predicateindicator_5_str_1();
    static Predicate _$term_to_predicateindicator_5_str_1_1 = new PRED_$term_to_predicateindicator_5_str_1_1();
    static Predicate _$term_to_predicateindicator_5_str_1_2 = new PRED_$term_to_predicateindicator_5_str_1_2();
    static Predicate _$term_to_predicateindicator_5_str_1_3 = new PRED_$term_to_predicateindicator_5_str_1_3();
    static Predicate _$term_to_predicateindicator_5_str_1_4 = new PRED_$term_to_predicateindicator_5_str_1_4();
    static Predicate _$term_to_predicateindicator_5_str_1_5 = new PRED_$term_to_predicateindicator_5_str_1_5();
    static Predicate _$term_to_predicateindicator_5_1 = new PRED_$term_to_predicateindicator_5_1();
    static Predicate _$term_to_predicateindicator_5_2 = new PRED_$term_to_predicateindicator_5_2();
    static Predicate _$term_to_predicateindicator_5_3 = new PRED_$term_to_predicateindicator_5_3();
    static Predicate _$term_to_predicateindicator_5_4 = new PRED_$term_to_predicateindicator_5_4();
    static Predicate _$term_to_predicateindicator_5_5 = new PRED_$term_to_predicateindicator_5_5();
    static Predicate _$term_to_predicateindicator_5_6 = new PRED_$term_to_predicateindicator_5_6();
    static Predicate _$term_to_predicateindicator_5_7 = new PRED_$term_to_predicateindicator_5_7();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(2);
    static {
        str.put(s3, _$term_to_predicateindicator_5_str_0);
        str.put(s4, _$term_to_predicateindicator_5_str_1);
    }

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$term_to_predicateindicator_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$term_to_predicateindicator_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$term_to_predicateindicator"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$term_to_predicateindicator'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        return exit(engine, _$term_to_predicateindicator_5_top);
    }
}

class PRED_$term_to_predicateindicator_5_top extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$term_to_predicateindicator_5_var, _$term_to_predicateindicator_5_int, _$term_to_predicateindicator_5_int, _$term_to_predicateindicator_5_int, _$term_to_predicateindicator_5_str, _$term_to_predicateindicator_5_int);
    }
}

class PRED_$term_to_predicateindicator_5_var extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$term_to_predicateindicator_5_1, _$term_to_predicateindicator_5_var_1);
    }
}

class PRED_$term_to_predicateindicator_5_var_1 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_2, _$term_to_predicateindicator_5_var_2);
    }
}

class PRED_$term_to_predicateindicator_5_var_2 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_3, _$term_to_predicateindicator_5_var_3);
    }
}

class PRED_$term_to_predicateindicator_5_var_3 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_4, _$term_to_predicateindicator_5_var_4);
    }
}

class PRED_$term_to_predicateindicator_5_var_4 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_5, _$term_to_predicateindicator_5_var_5);
    }
}

class PRED_$term_to_predicateindicator_5_var_5 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_6, _$term_to_predicateindicator_5_var_6);
    }
}

class PRED_$term_to_predicateindicator_5_var_6 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$term_to_predicateindicator_5_7);
    }
}

class PRED_$term_to_predicateindicator_5_int extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$term_to_predicateindicator_5_1, _$term_to_predicateindicator_5_int_1);
    }
}

class PRED_$term_to_predicateindicator_5_int_1 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_2, _$term_to_predicateindicator_5_int_2);
    }
}

class PRED_$term_to_predicateindicator_5_int_2 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_4, _$term_to_predicateindicator_5_int_3);
    }
}

class PRED_$term_to_predicateindicator_5_int_3 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$term_to_predicateindicator_5_7);
    }
}

class PRED_$term_to_predicateindicator_5_str extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$term_to_predicateindicator_5_int);
    }
}

class PRED_$term_to_predicateindicator_5_str_0 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$term_to_predicateindicator_5_1, _$term_to_predicateindicator_5_str_0_1);
    }
}

class PRED_$term_to_predicateindicator_5_str_0_1 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_2, _$term_to_predicateindicator_5_str_0_2);
    }
}

class PRED_$term_to_predicateindicator_5_str_0_2 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_3, _$term_to_predicateindicator_5_str_0_3);
    }
}

class PRED_$term_to_predicateindicator_5_str_0_3 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_4, _$term_to_predicateindicator_5_str_0_4);
    }
}

class PRED_$term_to_predicateindicator_5_str_0_4 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$term_to_predicateindicator_5_7);
    }
}

class PRED_$term_to_predicateindicator_5_str_1 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$term_to_predicateindicator_5_1, _$term_to_predicateindicator_5_str_1_1);
    }
}

class PRED_$term_to_predicateindicator_5_str_1_1 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_2, _$term_to_predicateindicator_5_str_1_2);
    }
}

class PRED_$term_to_predicateindicator_5_str_1_2 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_4, _$term_to_predicateindicator_5_str_1_3);
    }
}

class PRED_$term_to_predicateindicator_5_str_1_3 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_5, _$term_to_predicateindicator_5_str_1_4);
    }
}

class PRED_$term_to_predicateindicator_5_str_1_4 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$term_to_predicateindicator_5_6, _$term_to_predicateindicator_5_str_1_5);
    }
}

class PRED_$term_to_predicateindicator_5_str_1_5 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$term_to_predicateindicator_5_7);
    }
}

class PRED_$term_to_predicateindicator_5_1 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_to_predicateindicator'(A, B, C, D, E):-var(A), !, illarg(var, E, 1)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$term_to_predicateindicator'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, E, 1)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        return exit(engine, new PRED_illarg_3(s1, a5, si2, cont));
    }
}

class PRED_$term_to_predicateindicator_5_2 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_to_predicateindicator'(A, B, C, D, E):-var(C), !, illarg(var, E, 1)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$term_to_predicateindicator'(A, B, C, D, E):-['$get_level'(F), var(C), '$cut'(F), illarg(var, E, 1)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(3))
        a3 = deref( a3);
        if (! isVariable(a3)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        return exit(engine, new PRED_illarg_3(s1, a5, si2, cont));
    }
}

class PRED_$term_to_predicateindicator_5_3 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_to_predicateindicator'(A:B, C, D, E, F):-!, '$term_to_predicateindicator'(B, C, A, E, F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$term_to_predicateindicator'(A:B, C, D, E, F):-['$neck_cut', '$term_to_predicateindicator'(B, C, A, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s3,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a7;
        engine_aregs[2] = a2;
        engine_aregs[3] = a6;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine.cont = cont;
        return exit(engine, _$term_to_predicateindicator_5_top);
    }
}

class PRED_$term_to_predicateindicator_5_4 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_to_predicateindicator'(A, B, C, D, E):-A\=F/G, !, illarg(type(predicate_indicator), E, 1)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$term_to_predicateindicator'(A, B, C, D, E):-['$get_level'(F), '$not_unifiable'(A, G/H), '$cut'(F), illarg(type(predicate_indicator), E, 1)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {engine.makeVariable(this), engine.makeVariable(this)};
        a7 = makeStructure(s4, y1);
        //START inline expansion of $not_unifiable(a(1), a(7))
        if (unify(a1,a7)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        return exit(engine, new PRED_illarg_3(s8, a5, si2, cont));
    }
}

class PRED_$term_to_predicateindicator_5_5 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_to_predicateindicator'(A/B, C, D, E, F):-'$dummy_10_builtins.pl'(A), !, illarg(type(atom), F, 1)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$term_to_predicateindicator'(A/B, C, D, E, F):-['$get_level'(G), '$dummy_10_builtins.pl'(A), '$cut'(G), illarg(type(atom), F, 1)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s4,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6, engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_illarg_3(s11, a5, si2, cont);
        p2 = new PRED_$cut_1(a7, p1);
        return exit(engine, new PRED_$dummy_10_builtins$002Epl_1(a6, p2));
    }
}

class PRED_$term_to_predicateindicator_5_6 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_to_predicateindicator'(A/B, C, D, E, F):-'$dummy_11_builtins.pl'(B), !, illarg(type(integer), F, 1)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$term_to_predicateindicator'(A/B, C, D, E, F):-['$get_level'(G), '$dummy_11_builtins.pl'(B), '$cut'(G), illarg(type(integer), F, 1)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s4,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {engine.makeVariable(this), a6};
            bind(/*VAR*/ a1,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_illarg_3(s14, a5, si2, cont);
        p2 = new PRED_$cut_1(a7, p1);
        return exit(engine, new PRED_$dummy_11_builtins$002Epl_1(a6, p2));
    }
}

class PRED_$term_to_predicateindicator_5_7 extends PRED_$term_to_predicateindicator_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$term_to_predicateindicator'(A, A, B, B, C):-true
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$term_to_predicateindicator'(A, A, B, B, C):-[]
        if (! unify(a1,a2))
            return fail(engine);
        if (! unify(a3,a4))
            return fail(engine);
        return exit(engine,cont);
    }
}
