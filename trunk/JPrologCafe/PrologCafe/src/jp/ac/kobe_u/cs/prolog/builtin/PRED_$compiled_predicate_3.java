package jp.ac.kobe_u.cs.prolog.builtin;

import jp.ac.kobe_u.cs.prolog.lang.*;

/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$compiled_predicate'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$compiled_predicate_3 extends PredicateBase {

  public Object arg1, arg2, arg3;

  public PRED_$compiled_predicate_3(Object a1, Object a2, Object a3, Predicate cont) {
    arg1 = a1;
    arg2 = a2;
    arg3 = a3;
    this.cont = cont;
  }

  public PRED_$compiled_predicate_3() {
  }

  public void setArgument(Object[] args, Predicate cont) {
    arg1 = args[0];
    arg2 = args[1];
    arg3 = args[2];
    this.cont = cont;
  }

  public int arity() {
    return 3;
  }

  public String nameUQ() {
    return "$compiled_predicate";
  }

  public void sArg(int i0, Object val) {
    switch (i0) {
      case 0:
        arg1 = val;
        break;
      case 1:
        arg2 = val;
        break;
      case 2:
        arg3 = val;
        break;
      default:
        newIndexOutOfBoundsException("setarg", i0, val);
    }
  }

  public Object gArg(int i0) {
    switch (i0) {
      case 0:
        return arg1;
      case 1:
        return arg2;
      case 2:
        return arg3;
      default:
        return newIndexOutOfBoundsException("getarg", i0, null);
    }
  }

  public String toPrologString(java.util.Collection newParam) {
    return "'$compiled_predicate'(" + argString(arg1, newParam) + "," + argString(arg2, newParam) + "," + argString(arg3, newParam) + ")";
  }

  public Predicate exec(Prolog engine) {
    enter(engine);
    Object[] engine_aregs = engine.getAreg();
    // '$compiled_predicate'(A, B, C):-'$INSERT_AM'([deref(a(1), a(1)), deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! engine.pcl.definedPredicate(((/*SymbolTerm*/Object)a1).name(), ((/*SymbolTerm*/Object)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();'])
    engine.setB0();
    Object a1, a2, a3;
    a1 = arg1;
    a2 = arg2;
    a3 = arg3;
    // '$compiled_predicate'(A, B, C):-['$INSERT_AM'([deref(a(1), a(1)), deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! engine.pcl.definedPredicate(((/*SymbolTerm*/Object)a1).name(), ((/*SymbolTerm*/Object)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();'])]
    a1 = deref(a1);
    a2 = deref(a2);
    a3 = deref(a3);
    if (!engine.pcl.definedPredicate(nameUQ(a1), nameUQ(a2), (int)intValue(a3))) return engine.fail();
    return exit(engine, cont);
  }
}
