package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$consult_cls'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$consult_cls_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":-", 2);
    static /*Symbol*/Object s2 = makeAtom("true");
    static Predicate _$consult_cls_1_var = new PRED_$consult_cls_1_var();
    static Predicate _$consult_cls_1_var_1 = new PRED_$consult_cls_1_var_1();
    static Predicate _$consult_cls_1_1 = new PRED_$consult_cls_1_1();
    static Predicate _$consult_cls_1_2 = new PRED_$consult_cls_1_2();

    public Object arg1;

    public PRED_$consult_cls_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$consult_cls_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$consult_cls"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$consult_cls'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$consult_cls_1_var, _$consult_cls_1_2, _$consult_cls_1_2, _$consult_cls_1_2, _$consult_cls_1_var, _$consult_cls_1_2);
    }
}

class PRED_$consult_cls_1_var extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$consult_cls_1_1, _$consult_cls_1_var_1);
    }
}

class PRED_$consult_cls_1_var_1 extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$consult_cls_1_2);
    }
}

class PRED_$consult_cls_1_1 extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_cls'((A:-B)):-!, '$assert_consulted_clause'((A:-B))
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_cls'((A:-B)):-['$neck_cut', '$assert_consulted_clause'((A:-B))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            Object[] args = {a2, a3};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a3};
        a4 = makeStructure(s1, y1);
        return exit(engine, new PRED_$assert_consulted_clause_1(a4, cont));
    }
}

class PRED_$consult_cls_1_2 extends PRED_$consult_cls_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_cls'(A):-'$assert_consulted_clause'((A:-true))
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_cls'(A):-['$assert_consulted_clause'((A:-true))]
        Object[] y1 = {a1, s2};
        a2 = makeStructure(s1, y1);
        return exit(engine, new PRED_$assert_consulted_clause_1(a2, cont));
    }
}
