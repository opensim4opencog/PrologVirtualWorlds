package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$match_type'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$match_type_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("term");
    static /*Symbol*/Object s2 = makeAtom("variable");
    static /*Symbol*/Object s3 = makeAtom("atom");
    static /*Symbol*/Object s4 = makeAtom("atomic");
    static /*Symbol*/Object s5 = makeAtom("byte");
    static /*IntegerTerm*/Object si6 = makeInteger(0);
    static /*IntegerTerm*/Object si7 = makeInteger(255);
    static /*Symbol*/Object s8 = makeAtom("in_byte");
    static /*IntegerTerm*/Object si9 = makeInteger(-1);
    static /*Symbol*/Object s10 = makeAtom("character");
    static /*IntegerTerm*/Object si11 = makeInteger(1);
    static /*Symbol*/Object s12 = makeAtom("in_character");
    static /*Symbol*/Object s13 = makeAtom("number");
    static /*Symbol*/Object s14 = makeAtom("integer");
    static /*Symbol*/Object s15 = makeAtom("float");
    static /*Symbol*/Object s16 = makeAtom("callable");
    static /*Symbol*/Object s17 = makeAtom("compound");
    static /*Symbol*/Object s18 = makeAtom("list");
    static /*Symbol*/Object s19 = makeAtom("java");
    static /*Symbol*/Object s20 = makeAtom("stream");
    static /*Symbol*/Object s21 = makeAtom("stream_or_alias");
    static /*Symbol*/Object s22 = makeAtom("hash");
    static /*Symbol*/Object s23 = makeAtom("jp.ac.kobe_u.cs.prolog.lang.HashtableOfTerm");
    static /*Symbol*/Object s24 = makeAtom("hash_or_alias");
    static /*Symbol*/Object s25 = makeAtom("predicate_indicator");
    static /*Symbol*/Object s26 = makeAtom(":", 2);
    static /*Symbol*/Object s27 = makeAtom("/", 2);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$match_type_2_var = new PRED_$match_type_2_var();
    static Predicate _$match_type_2_var_1 = new PRED_$match_type_2_var_1();
    static Predicate _$match_type_2_var_2 = new PRED_$match_type_2_var_2();
    static Predicate _$match_type_2_var_3 = new PRED_$match_type_2_var_3();
    static Predicate _$match_type_2_var_4 = new PRED_$match_type_2_var_4();
    static Predicate _$match_type_2_var_5 = new PRED_$match_type_2_var_5();
    static Predicate _$match_type_2_var_6 = new PRED_$match_type_2_var_6();
    static Predicate _$match_type_2_var_7 = new PRED_$match_type_2_var_7();
    static Predicate _$match_type_2_var_8 = new PRED_$match_type_2_var_8();
    static Predicate _$match_type_2_var_9 = new PRED_$match_type_2_var_9();
    static Predicate _$match_type_2_var_10 = new PRED_$match_type_2_var_10();
    static Predicate _$match_type_2_var_11 = new PRED_$match_type_2_var_11();
    static Predicate _$match_type_2_var_12 = new PRED_$match_type_2_var_12();
    static Predicate _$match_type_2_var_13 = new PRED_$match_type_2_var_13();
    static Predicate _$match_type_2_var_14 = new PRED_$match_type_2_var_14();
    static Predicate _$match_type_2_var_15 = new PRED_$match_type_2_var_15();
    static Predicate _$match_type_2_var_16 = new PRED_$match_type_2_var_16();
    static Predicate _$match_type_2_var_17 = new PRED_$match_type_2_var_17();
    static Predicate _$match_type_2_var_18 = new PRED_$match_type_2_var_18();
    static Predicate _$match_type_2_var_19 = new PRED_$match_type_2_var_19();
    static Predicate _$match_type_2_con = new PRED_$match_type_2_con();
    static Predicate _$match_type_2_1 = new PRED_$match_type_2_1();
    static Predicate _$match_type_2_2 = new PRED_$match_type_2_2();
    static Predicate _$match_type_2_3 = new PRED_$match_type_2_3();
    static Predicate _$match_type_2_4 = new PRED_$match_type_2_4();
    static Predicate _$match_type_2_5 = new PRED_$match_type_2_5();
    static Predicate _$match_type_2_6 = new PRED_$match_type_2_6();
    static Predicate _$match_type_2_7 = new PRED_$match_type_2_7();
    static Predicate _$match_type_2_8 = new PRED_$match_type_2_8();
    static Predicate _$match_type_2_9 = new PRED_$match_type_2_9();
    static Predicate _$match_type_2_10 = new PRED_$match_type_2_10();
    static Predicate _$match_type_2_11 = new PRED_$match_type_2_11();
    static Predicate _$match_type_2_12 = new PRED_$match_type_2_12();
    static Predicate _$match_type_2_13 = new PRED_$match_type_2_13();
    static Predicate _$match_type_2_14 = new PRED_$match_type_2_14();
    static Predicate _$match_type_2_15 = new PRED_$match_type_2_15();
    static Predicate _$match_type_2_16 = new PRED_$match_type_2_16();
    static Predicate _$match_type_2_17 = new PRED_$match_type_2_17();
    static Predicate _$match_type_2_18 = new PRED_$match_type_2_18();
    static Predicate _$match_type_2_19 = new PRED_$match_type_2_19();
    static Predicate _$match_type_2_20 = new PRED_$match_type_2_20();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(20);
    static {
        con.put(s1, _$match_type_2_1);
        con.put(s2, _$match_type_2_2);
        con.put(s3, _$match_type_2_3);
        con.put(s4, _$match_type_2_4);
        con.put(s5, _$match_type_2_5);
        con.put(s8, _$match_type_2_6);
        con.put(s10, _$match_type_2_7);
        con.put(s12, _$match_type_2_8);
        con.put(s13, _$match_type_2_9);
        con.put(s14, _$match_type_2_10);
        con.put(s15, _$match_type_2_11);
        con.put(s16, _$match_type_2_12);
        con.put(s17, _$match_type_2_13);
        con.put(s18, _$match_type_2_14);
        con.put(s19, _$match_type_2_15);
        con.put(s20, _$match_type_2_16);
        con.put(s21, _$match_type_2_17);
        con.put(s22, _$match_type_2_18);
        con.put(s24, _$match_type_2_19);
        con.put(s25, _$match_type_2_20);
    }

    public Object arg1, arg2;

    public PRED_$match_type_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$match_type_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$match_type"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$match_type'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$match_type_2_var, _fail_0, _fail_0, _$match_type_2_con, _fail_0, _fail_0);
    }
}

class PRED_$match_type_2_var extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$match_type_2_1, _$match_type_2_var_1);
    }
}

class PRED_$match_type_2_var_1 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_2, _$match_type_2_var_2);
    }
}

class PRED_$match_type_2_var_2 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_3, _$match_type_2_var_3);
    }
}

class PRED_$match_type_2_var_3 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_4, _$match_type_2_var_4);
    }
}

class PRED_$match_type_2_var_4 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_5, _$match_type_2_var_5);
    }
}

class PRED_$match_type_2_var_5 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_6, _$match_type_2_var_6);
    }
}

class PRED_$match_type_2_var_6 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_7, _$match_type_2_var_7);
    }
}

class PRED_$match_type_2_var_7 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_8, _$match_type_2_var_8);
    }
}

class PRED_$match_type_2_var_8 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_9, _$match_type_2_var_9);
    }
}

class PRED_$match_type_2_var_9 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_10, _$match_type_2_var_10);
    }
}

class PRED_$match_type_2_var_10 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_11, _$match_type_2_var_11);
    }
}

class PRED_$match_type_2_var_11 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_12, _$match_type_2_var_12);
    }
}

class PRED_$match_type_2_var_12 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_13, _$match_type_2_var_13);
    }
}

class PRED_$match_type_2_var_13 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_14, _$match_type_2_var_14);
    }
}

class PRED_$match_type_2_var_14 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_15, _$match_type_2_var_15);
    }
}

class PRED_$match_type_2_var_15 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_16, _$match_type_2_var_16);
    }
}

class PRED_$match_type_2_var_16 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_17, _$match_type_2_var_17);
    }
}

class PRED_$match_type_2_var_17 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_18, _$match_type_2_var_18);
    }
}

class PRED_$match_type_2_var_18 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$match_type_2_19, _$match_type_2_var_19);
    }
}

class PRED_$match_type_2_var_19 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$match_type_2_20);
    }
}

class PRED_$match_type_2_con extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$match_type_2_1 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(term, A):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(term, A):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_2 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(variable, A):-var(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(variable, A):-[var(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s2))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s2);
        } else {
            return fail(engine);
        }
        //START inline expansion of var(a(2))
        a2 = deref( a2);
        if (! isVariable(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_3 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(atom, A):-atom(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(atom, A):-[atom(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s3))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s3);
        } else {
            return fail(engine);
        }
        //START inline expansion of atom(a(2))
        a2 = deref( a2);
        if (! isAtomTerm(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_4 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(atomic, A):-atomic(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(atomic, A):-[atomic(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s4))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s4);
        } else {
            return fail(engine);
        }
        //START inline expansion of atomic(a(2))
        a2 = deref( a2);
        if (! isAtomTerm(a2) && ! isNumber(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_5 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(byte, A):-integer(A), 0=<A, A=<255
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(byte, A):-[integer(A), '$less_or_equal'(0, A), '$less_or_equal'(A, 255)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s5))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s5);
        } else {
            return fail(engine);
        }
        //START inline expansion of integer(a(2))
        a2 = deref( a2);
        if (! isInteger(a2)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $less_or_equal(si(6), a(2))
        try {
            if (arithCompareTo(si6,Arithmetic.evaluate(a2)) > 0) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $less_or_equal(a(2), si(7))
        try {
            if (arithCompareTo(Arithmetic.evaluate(a2),si7) > 0) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_6 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(in_byte, A):-integer(A), -1=<A, A=<255
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(in_byte, A):-[integer(A), '$less_or_equal'(-1, A), '$less_or_equal'(A, 255)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s8))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s8);
        } else {
            return fail(engine);
        }
        //START inline expansion of integer(a(2))
        a2 = deref( a2);
        if (! isInteger(a2)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $less_or_equal(si(9), a(2))
        try {
            if (arithCompareTo(si9,Arithmetic.evaluate(a2)) > 0) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $less_or_equal(a(2), si(7))
        try {
            if (arithCompareTo(Arithmetic.evaluate(a2),si7) > 0) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_7 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(character, A):-atom(A), atom_length(A, 1)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(character, A):-[atom(A), atom_length(A, 1)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s10))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s10);
        } else {
            return fail(engine);
        }
        //START inline expansion of atom(a(2))
        a2 = deref( a2);
        if (! isAtomTerm(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine, new PRED_atom_length_2(a2, si11, cont));
    }
}

class PRED_$match_type_2_8 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(in_character, A):-'$dummy_32_builtins.pl'(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(in_character, A):-['$dummy_32_builtins.pl'(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s12))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s12);
        } else {
            return fail(engine);
        }
        return exit(engine, new PRED_$dummy_32_builtins$002Epl_1(a2, cont));
    }
}

class PRED_$match_type_2_9 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(number, A):-number(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(number, A):-[number(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s13))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s13);
        } else {
            return fail(engine);
        }
        //START inline expansion of number(a(2))
        a2 = deref( a2);
        if (! isNumber(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_10 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(integer, A):-integer(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(integer, A):-[integer(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s14))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s14);
        } else {
            return fail(engine);
        }
        //START inline expansion of integer(a(2))
        a2 = deref( a2);
        if (! isInteger(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_11 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(float, A):-float(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(float, A):-[float(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s15))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s15);
        } else {
            return fail(engine);
        }
        //START inline expansion of float(a(2))
        a2 = deref( a2);
        if (! isDouble(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_12 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(callable, A):-callable(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(callable, A):-[callable(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s16))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s16);
        } else {
            return fail(engine);
        }
        return exit(engine, new PRED_callable_1(a2, cont));
    }
}

class PRED_$match_type_2_13 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(compound, A):-compound(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(compound, A):-[compound(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s17))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s17);
        } else {
            return fail(engine);
        }
        return exit(engine, new PRED_compound_1(a2, cont));
    }
}

class PRED_$match_type_2_14 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(list, A):-nonvar(A), '$dummy_33_builtins.pl'(A, B, C)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(list, A):-[nonvar(A), '$dummy_33_builtins.pl'(A, B, C)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s18))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s18);
        } else {
            return fail(engine);
        }
        //START inline expansion of nonvar(a(2))
        a2 = deref( a2);
        if (isVariable(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine, new PRED_$dummy_33_builtins$002Epl_3(a2, engine.makeVariable(this), engine.makeVariable(this), cont));
    }
}

class PRED_$match_type_2_15 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(java, A):-java(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(java, A):-[java(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s19))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s19);
        } else {
            return fail(engine);
        }
        //START inline expansion of java(a(2))
        a2 = deref( a2);
        if (! isJavaObject(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_16 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(stream, A):-'$dummy_34_builtins.pl'(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(stream, A):-['$dummy_34_builtins.pl'(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s20))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s20);
        } else {
            return fail(engine);
        }
        return exit(engine, new PRED_$dummy_34_builtins$002Epl_1(a2, cont));
    }
}

class PRED_$match_type_2_17 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(stream_or_alias, A):-'$dummy_35_builtins.pl'(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(stream_or_alias, A):-['$dummy_35_builtins.pl'(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s21))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s21);
        } else {
            return fail(engine);
        }
        return exit(engine, new PRED_$dummy_35_builtins$002Epl_1(a2, cont));
    }
}

class PRED_$match_type_2_18 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(hash, A):-java(A, 'jp.ac.kobe_u.cs.prolog.lang.HashtableOfTerm')
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(hash, A):-[java(A, 'jp.ac.kobe_u.cs.prolog.lang.HashtableOfTerm')]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s22))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s22);
        } else {
            return fail(engine);
        }
        //START inline expansion of java(a(2), s(23))
        a2 = deref( a2);
        if (! isJavaObject(a2)) {
            return fail(engine);
        }
        if (! unify(s23,makeAtom(getName(getClass(object(a2)))))) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$match_type_2_19 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(hash_or_alias, A):-'$dummy_36_builtins.pl'(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(hash_or_alias, A):-['$dummy_36_builtins.pl'(A)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s24))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s24);
        } else {
            return fail(engine);
        }
        return exit(engine, new PRED_$dummy_36_builtins$002Epl_1(a2, cont));
    }
}

class PRED_$match_type_2_20 extends PRED_$match_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$match_type'(predicate_indicator, A):-nonvar(A), A=B:C/D, atom(B), atom(C), integer(D)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$match_type'(predicate_indicator, A):-[nonvar(A), '$unify'(A, B:C/D), atom(B), atom(C), integer(D)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s25))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s25);
        } else {
            return fail(engine);
        }
        //START inline expansion of nonvar(a(2))
        a2 = deref( a2);
        if (isVariable(a2)) {
            return fail(engine);
        }
        //END inline expansion
        a3 = engine.makeVariable(this);
        a4 = engine.makeVariable(this);
        a5 = engine.makeVariable(this);
        Object[] y1 = {a4, a5};
        a6 = makeStructure(s27, y1);
        Object[] y2 = {a3, a6};
        a7 = makeStructure(s26, y2);
        //START inline expansion of $unify(a(2), a(7))
        if (! unify(a2,a7)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(3))
        a3 = deref( a3);
        if (! isAtomTerm(a3)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(4))
        a4 = deref( a4);
        if (! isAtomTerm(a4)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of integer(a(5))
        a5 = deref( a5);
        if (! isInteger(a5)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}
