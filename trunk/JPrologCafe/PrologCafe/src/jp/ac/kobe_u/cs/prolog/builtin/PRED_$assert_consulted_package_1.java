package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$assert_consulted_package'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$assert_consulted_package_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s3 = makeAtom("$consulted_package", 1);
    static Predicate _$assert_consulted_package_1_sub_1 = new PRED_$assert_consulted_package_1_sub_1();
    static Predicate _$assert_consulted_package_1_1 = new PRED_$assert_consulted_package_1_1();
    static Predicate _$assert_consulted_package_1_2 = new PRED_$assert_consulted_package_1_2();

    public Object arg1;

    public PRED_$assert_consulted_package_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$assert_consulted_package_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$assert_consulted_package"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$assert_consulted_package'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$assert_consulted_package_1_1, _$assert_consulted_package_1_sub_1);
    }
}

class PRED_$assert_consulted_package_1_sub_1 extends PRED_$assert_consulted_package_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$assert_consulted_package_1_2);
    }
}

class PRED_$assert_consulted_package_1_1 extends PRED_$assert_consulted_package_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$assert_consulted_package'(A):-clause('$consulted_package'(A), B), !
        Object a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$assert_consulted_package'(A):-['$get_level'(B), clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(A), C), '$cut'(B)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {a1};
        a3 = makeStructure(s3, y1);
        Object[] y2 = {s2, a3};
        a4 = makeStructure(s1, y2);
        p1 = new PRED_$cut_1(a2, cont);
        return exit(engine, new PRED_clause_2(a4, engine.makeVariable(this), p1));
    }
}

class PRED_$assert_consulted_package_1_2 extends PRED_$assert_consulted_package_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$assert_consulted_package'(A):-retractall('$consulted_package'(B)), assertz('$consulted_package'(A))
        Object a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$assert_consulted_package'(A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(B)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(A))]
        Object[] y1 = {engine.makeVariable(this)};
        a2 = makeStructure(s3, y1);
        Object[] y2 = {s2, a2};
        a3 = makeStructure(s1, y2);
        Object[] y3 = {a1};
        a4 = makeStructure(s3, y3);
        Object[] y4 = {s2, a4};
        a5 = makeStructure(s1, y4);
        p1 = new PRED_assertz_1(a5, cont);
        return exit(engine, new PRED_retractall_1(a3, p1));
    }
}
