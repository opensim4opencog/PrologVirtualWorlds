package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$op_specifier'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$op_specifier_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("fx");
    static /*Symbol*/Object s2 = makeAtom("prefix");
    static /*Symbol*/Object s3 = makeAtom("fy");
    static /*Symbol*/Object s4 = makeAtom("xfx");
    static /*Symbol*/Object s5 = makeAtom("infix");
    static /*Symbol*/Object s6 = makeAtom("xfy");
    static /*Symbol*/Object s7 = makeAtom("yfx");
    static /*Symbol*/Object s8 = makeAtom("xf");
    static /*Symbol*/Object s9 = makeAtom("postfix");
    static /*Symbol*/Object s10 = makeAtom("yf");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$op_specifier_2_var = new PRED_$op_specifier_2_var();
    static Predicate _$op_specifier_2_var_1 = new PRED_$op_specifier_2_var_1();
    static Predicate _$op_specifier_2_var_2 = new PRED_$op_specifier_2_var_2();
    static Predicate _$op_specifier_2_var_3 = new PRED_$op_specifier_2_var_3();
    static Predicate _$op_specifier_2_var_4 = new PRED_$op_specifier_2_var_4();
    static Predicate _$op_specifier_2_var_5 = new PRED_$op_specifier_2_var_5();
    static Predicate _$op_specifier_2_var_6 = new PRED_$op_specifier_2_var_6();
    static Predicate _$op_specifier_2_con = new PRED_$op_specifier_2_con();
    static Predicate _$op_specifier_2_1 = new PRED_$op_specifier_2_1();
    static Predicate _$op_specifier_2_2 = new PRED_$op_specifier_2_2();
    static Predicate _$op_specifier_2_3 = new PRED_$op_specifier_2_3();
    static Predicate _$op_specifier_2_4 = new PRED_$op_specifier_2_4();
    static Predicate _$op_specifier_2_5 = new PRED_$op_specifier_2_5();
    static Predicate _$op_specifier_2_6 = new PRED_$op_specifier_2_6();
    static Predicate _$op_specifier_2_7 = new PRED_$op_specifier_2_7();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(7);
    static {
        con.put(s1, _$op_specifier_2_1);
        con.put(s3, _$op_specifier_2_2);
        con.put(s4, _$op_specifier_2_3);
        con.put(s6, _$op_specifier_2_4);
        con.put(s7, _$op_specifier_2_5);
        con.put(s8, _$op_specifier_2_6);
        con.put(s10, _$op_specifier_2_7);
    }

    public Object arg1, arg2;

    public PRED_$op_specifier_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$op_specifier_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$op_specifier"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$op_specifier'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$op_specifier_2_var, _fail_0, _fail_0, _$op_specifier_2_con, _fail_0, _fail_0);
    }
}

class PRED_$op_specifier_2_var extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$op_specifier_2_1, _$op_specifier_2_var_1);
    }
}

class PRED_$op_specifier_2_var_1 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$op_specifier_2_2, _$op_specifier_2_var_2);
    }
}

class PRED_$op_specifier_2_var_2 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$op_specifier_2_3, _$op_specifier_2_var_3);
    }
}

class PRED_$op_specifier_2_var_3 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$op_specifier_2_4, _$op_specifier_2_var_4);
    }
}

class PRED_$op_specifier_2_var_4 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$op_specifier_2_5, _$op_specifier_2_var_5);
    }
}

class PRED_$op_specifier_2_var_5 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$op_specifier_2_6, _$op_specifier_2_var_6);
    }
}

class PRED_$op_specifier_2_var_6 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$op_specifier_2_7);
    }
}

class PRED_$op_specifier_2_con extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$op_specifier_2_1 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$op_specifier'(fx, prefix):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$op_specifier'(fx, prefix):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s2))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s2);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$op_specifier_2_2 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$op_specifier'(fy, prefix):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$op_specifier'(fy, prefix):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s3))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s3);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s2))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s2);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$op_specifier_2_3 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$op_specifier'(xfx, infix):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$op_specifier'(xfx, infix):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s4))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s4);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s5))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s5);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$op_specifier_2_4 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$op_specifier'(xfy, infix):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$op_specifier'(xfy, infix):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s6))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s6);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s5))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s5);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$op_specifier_2_5 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$op_specifier'(yfx, infix):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$op_specifier'(yfx, infix):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s7))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s7);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s5))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s5);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$op_specifier_2_6 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$op_specifier'(xf, postfix):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$op_specifier'(xf, postfix):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s8))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s8);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s9))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s9);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$op_specifier_2_7 extends PRED_$op_specifier_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$op_specifier'(yf, postfix):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$op_specifier'(yf, postfix):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s10))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s10);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s9))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s9);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}
