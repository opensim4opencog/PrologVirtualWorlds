package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>illarg/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_illarg_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*Symbol*/Object s2 = makeAtom("instantiation_error", 2);
    static /*Symbol*/Object s3 = makeAtom("type", 1);
    static /*Symbol*/Object s4 = makeAtom("domain", 2);
    static /*Symbol*/Object s5 = makeAtom("existence", 3);
    static /*Symbol*/Object s6 = makeAtom("existence_error", 5);
    static /*Symbol*/Object s7 = makeAtom("permission", 4);
    static /*Symbol*/Object s8 = makeAtom("permission_error", 5);
    static /*Symbol*/Object s9 = makeAtom("representation", 1);
    static /*Symbol*/Object s10 = makeAtom("representation_error", 3);
    static /*Symbol*/Object s11 = makeAtom("evaluation", 1);
    static /*Symbol*/Object s12 = makeAtom("evaluation_error", 3);
    static /*Symbol*/Object s13 = makeAtom("syntax", 3);
    static /*Symbol*/Object s14 = makeAtom("syntax_error", 5);
    static /*Symbol*/Object s15 = makeAtom("system", 1);
    static /*Symbol*/Object s16 = makeAtom("system_error", 1);
    static /*Symbol*/Object s17 = makeAtom("internal", 1);
    static /*Symbol*/Object s18 = makeAtom("internal_error", 1);
    static /*Symbol*/Object s19 = makeAtom("java", 1);
    static /*Symbol*/Object s20 = makeAtom("java_error", 3);
    static Predicate _illarg_3_top = new PRED_illarg_3_top();
    static Predicate _illarg_3_var = new PRED_illarg_3_var();
    static Predicate _illarg_3_var_1 = new PRED_illarg_3_var_1();
    static Predicate _illarg_3_var_2 = new PRED_illarg_3_var_2();
    static Predicate _illarg_3_var_3 = new PRED_illarg_3_var_3();
    static Predicate _illarg_3_var_4 = new PRED_illarg_3_var_4();
    static Predicate _illarg_3_var_5 = new PRED_illarg_3_var_5();
    static Predicate _illarg_3_var_6 = new PRED_illarg_3_var_6();
    static Predicate _illarg_3_var_7 = new PRED_illarg_3_var_7();
    static Predicate _illarg_3_var_8 = new PRED_illarg_3_var_8();
    static Predicate _illarg_3_var_9 = new PRED_illarg_3_var_9();
    static Predicate _illarg_3_var_10 = new PRED_illarg_3_var_10();
    static Predicate _illarg_3_var_11 = new PRED_illarg_3_var_11();
    static Predicate _illarg_3_var_12 = new PRED_illarg_3_var_12();
    static Predicate _illarg_3_int = new PRED_illarg_3_int();
    static Predicate _illarg_3_int_1 = new PRED_illarg_3_int_1();
    static Predicate _illarg_3_con = new PRED_illarg_3_con();
    static Predicate _illarg_3_con_1 = new PRED_illarg_3_con_1();
    static Predicate _illarg_3_con_2 = new PRED_illarg_3_con_2();
    static Predicate _illarg_3_str = new PRED_illarg_3_str();
    static Predicate _illarg_3_str_0 = new PRED_illarg_3_str_0();
    static Predicate _illarg_3_str_0_1 = new PRED_illarg_3_str_0_1();
    static Predicate _illarg_3_str_0_2 = new PRED_illarg_3_str_0_2();
    static Predicate _illarg_3_str_1 = new PRED_illarg_3_str_1();
    static Predicate _illarg_3_str_1_1 = new PRED_illarg_3_str_1_1();
    static Predicate _illarg_3_str_1_2 = new PRED_illarg_3_str_1_2();
    static Predicate _illarg_3_str_2 = new PRED_illarg_3_str_2();
    static Predicate _illarg_3_str_2_1 = new PRED_illarg_3_str_2_1();
    static Predicate _illarg_3_str_2_2 = new PRED_illarg_3_str_2_2();
    static Predicate _illarg_3_str_3 = new PRED_illarg_3_str_3();
    static Predicate _illarg_3_str_3_1 = new PRED_illarg_3_str_3_1();
    static Predicate _illarg_3_str_3_2 = new PRED_illarg_3_str_3_2();
    static Predicate _illarg_3_str_4 = new PRED_illarg_3_str_4();
    static Predicate _illarg_3_str_4_1 = new PRED_illarg_3_str_4_1();
    static Predicate _illarg_3_str_4_2 = new PRED_illarg_3_str_4_2();
    static Predicate _illarg_3_str_5 = new PRED_illarg_3_str_5();
    static Predicate _illarg_3_str_5_1 = new PRED_illarg_3_str_5_1();
    static Predicate _illarg_3_str_5_2 = new PRED_illarg_3_str_5_2();
    static Predicate _illarg_3_str_6 = new PRED_illarg_3_str_6();
    static Predicate _illarg_3_str_6_1 = new PRED_illarg_3_str_6_1();
    static Predicate _illarg_3_str_6_2 = new PRED_illarg_3_str_6_2();
    static Predicate _illarg_3_str_7 = new PRED_illarg_3_str_7();
    static Predicate _illarg_3_str_7_1 = new PRED_illarg_3_str_7_1();
    static Predicate _illarg_3_str_7_2 = new PRED_illarg_3_str_7_2();
    static Predicate _illarg_3_str_8 = new PRED_illarg_3_str_8();
    static Predicate _illarg_3_str_8_1 = new PRED_illarg_3_str_8_1();
    static Predicate _illarg_3_str_8_2 = new PRED_illarg_3_str_8_2();
    static Predicate _illarg_3_str_9 = new PRED_illarg_3_str_9();
    static Predicate _illarg_3_str_9_1 = new PRED_illarg_3_str_9_1();
    static Predicate _illarg_3_str_9_2 = new PRED_illarg_3_str_9_2();
    static Predicate _illarg_3_1 = new PRED_illarg_3_1();
    static Predicate _illarg_3_2 = new PRED_illarg_3_2();
    static Predicate _illarg_3_3 = new PRED_illarg_3_3();
    static Predicate _illarg_3_4 = new PRED_illarg_3_4();
    static Predicate _illarg_3_5 = new PRED_illarg_3_5();
    static Predicate _illarg_3_6 = new PRED_illarg_3_6();
    static Predicate _illarg_3_7 = new PRED_illarg_3_7();
    static Predicate _illarg_3_8 = new PRED_illarg_3_8();
    static Predicate _illarg_3_9 = new PRED_illarg_3_9();
    static Predicate _illarg_3_10 = new PRED_illarg_3_10();
    static Predicate _illarg_3_11 = new PRED_illarg_3_11();
    static Predicate _illarg_3_12 = new PRED_illarg_3_12();
    static Predicate _illarg_3_13 = new PRED_illarg_3_13();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(10);
    static {
        str.put(s3, _illarg_3_str_0);
        str.put(s4, _illarg_3_str_1);
        str.put(s5, _illarg_3_str_2);
        str.put(s7, _illarg_3_str_3);
        str.put(s9, _illarg_3_str_4);
        str.put(s11, _illarg_3_str_5);
        str.put(s13, _illarg_3_str_6);
        str.put(s15, _illarg_3_str_7);
        str.put(s17, _illarg_3_str_8);
        str.put(s19, _illarg_3_str_9);
    }

    public Object arg1, arg2, arg3;

    public PRED_illarg_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_illarg_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "illarg"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'illarg'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        return exit(engine, _illarg_3_top);
    }
}

class PRED_illarg_3_top extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_illarg_3_var, _illarg_3_int, _illarg_3_int, _illarg_3_con, _illarg_3_str, _illarg_3_int);
    }
}

class PRED_illarg_3_var extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_var_1);
    }
}

class PRED_illarg_3_var_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_2, _illarg_3_var_2);
    }
}

class PRED_illarg_3_var_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_3, _illarg_3_var_3);
    }
}

class PRED_illarg_3_var_3 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_4, _illarg_3_var_4);
    }
}

class PRED_illarg_3_var_4 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_5, _illarg_3_var_5);
    }
}

class PRED_illarg_3_var_5 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_6, _illarg_3_var_6);
    }
}

class PRED_illarg_3_var_6 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_7, _illarg_3_var_7);
    }
}

class PRED_illarg_3_var_7 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_8, _illarg_3_var_8);
    }
}

class PRED_illarg_3_var_8 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_9, _illarg_3_var_9);
    }
}

class PRED_illarg_3_var_9 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_10, _illarg_3_var_10);
    }
}

class PRED_illarg_3_var_10 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_11, _illarg_3_var_11);
    }
}

class PRED_illarg_3_var_11 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_12, _illarg_3_var_12);
    }
}

class PRED_illarg_3_var_12 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_int extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_int_1);
    }
}

class PRED_illarg_3_int_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_con extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_con_1);
    }
}

class PRED_illarg_3_con_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_2, _illarg_3_con_2);
    }
}

class PRED_illarg_3_con_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _illarg_3_int);
    }
}

class PRED_illarg_3_str_0 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_0_1);
    }
}

class PRED_illarg_3_str_0_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_3, _illarg_3_str_0_2);
    }
}

class PRED_illarg_3_str_0_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_1_1);
    }
}

class PRED_illarg_3_str_1_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_4, _illarg_3_str_1_2);
    }
}

class PRED_illarg_3_str_1_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_2_1);
    }
}

class PRED_illarg_3_str_2_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_5, _illarg_3_str_2_2);
    }
}

class PRED_illarg_3_str_2_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_3 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_3_1);
    }
}

class PRED_illarg_3_str_3_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_6, _illarg_3_str_3_2);
    }
}

class PRED_illarg_3_str_3_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_4 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_4_1);
    }
}

class PRED_illarg_3_str_4_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_7, _illarg_3_str_4_2);
    }
}

class PRED_illarg_3_str_4_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_5 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_5_1);
    }
}

class PRED_illarg_3_str_5_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_8, _illarg_3_str_5_2);
    }
}

class PRED_illarg_3_str_5_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_6 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_6_1);
    }
}

class PRED_illarg_3_str_6_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_9, _illarg_3_str_6_2);
    }
}

class PRED_illarg_3_str_6_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_7 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_7_1);
    }
}

class PRED_illarg_3_str_7_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_10, _illarg_3_str_7_2);
    }
}

class PRED_illarg_3_str_7_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_8 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_8_1);
    }
}

class PRED_illarg_3_str_8_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_11, _illarg_3_str_8_2);
    }
}

class PRED_illarg_3_str_8_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_str_9 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_illarg_3_1, _illarg_3_str_9_1);
    }
}

class PRED_illarg_3_str_9_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_illarg_3_12, _illarg_3_str_9_2);
    }
}

class PRED_illarg_3_str_9_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_illarg_3_13);
    }
}

class PRED_illarg_3_1 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(A, B, C):-var(A), !, illarg(var, B, C)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(A, B, C):-['$get_level'(D), var(A), '$cut'(D), illarg(var, B, C)]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        engine_aregs[1] = s1;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine.cont = cont;
        return exit(engine, _illarg_3_top);
    }
}

class PRED_illarg_3_2 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(var, A, B):-raise_exception(instantiation_error(A, B))
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(var, A, B):-[raise_exception(instantiation_error(A, B))]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        Object[] y1 = {a2, a3};
        a4 = makeStructure(s2, y1);
        return exit(engine, new PRED_raise_exception_1(a4, cont));
    }
}

class PRED_illarg_3_3 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(type(A), B, C):-arg(C, B, D), '$dummy_29_builtins.pl'(A, B, C, D, E), raise_exception(E)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(type(A), B, C):-[arg(C, B, D), '$dummy_29_builtins.pl'(A, B, C, D, E), raise_exception(E)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s3,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {a4};
            bind(/*VAR*/ a1,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        a5 = engine.makeVariable(this);
        a6 = engine.makeVariable(this);
        p1 = new PRED_raise_exception_1(a6, cont);
        p2 = new PRED_$dummy_29_builtins$002Epl_5(a4, a2, a3, a5, a6, p1);
        return exit(engine, new PRED_arg_3(a3, a2, a5, p2));
    }
}

class PRED_illarg_3_4 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(domain(A, B), C, D):-arg(D, C, E), '$dummy_30_builtins.pl'(A, B, C, D, E, F), raise_exception(F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(domain(A, B), C, D):-[arg(D, C, E), '$dummy_30_builtins.pl'(A, B, C, D, E, F), raise_exception(F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s4,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
            a5 = args[1];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a4, a5};
            bind(/*VAR*/ a1,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        a6 = engine.makeVariable(this);
        a7 = engine.makeVariable(this);
        p1 = new PRED_raise_exception_1(a7, cont);
        p2 = new PRED_$dummy_30_builtins$002Epl_6(a4, a5, a2, a3, a6, a7, p1);
        return exit(engine, new PRED_arg_3(a3, a2, a6, p2));
    }
}

class PRED_illarg_3_5 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(existence(A, B, C), D, E):-raise_exception(existence_error(D, E, A, B, C))
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(existence(A, B, C), D, E):-[raise_exception(existence_error(D, E, A, B, C))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s5,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
            a5 = args[1];
            a6 = args[2];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a4, a5, a6};
            bind(/*VAR*/ a1,makeStructure(s5, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a2, a3, a4, a5, a6};
        a7 = makeStructure(s6, y1);
        return exit(engine, new PRED_raise_exception_1(a7, cont));
    }
}

class PRED_illarg_3_6 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(permission(A, B, C, D), E, F):-raise_exception(permission_error(E, A, B, C, D))
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(permission(A, B, C, D), E, F):-[raise_exception(permission_error(E, A, B, C, D))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s7,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
            a5 = args[1];
            a6 = args[2];
            a7 = args[3];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a4, a5, a6, a7};
            bind(/*VAR*/ a1,makeStructure(s7, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a2, a4, a5, a6, a7};
        a8 = makeStructure(s8, y1);
        return exit(engine, new PRED_raise_exception_1(a8, cont));
    }
}

class PRED_illarg_3_7 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(representation(A), B, C):-raise_exception(representation_error(B, C, A))
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(representation(A), B, C):-[raise_exception(representation_error(B, C, A))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s9,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {a4};
            bind(/*VAR*/ a1,makeStructure(s9, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a2, a3, a4};
        a5 = makeStructure(s10, y1);
        return exit(engine, new PRED_raise_exception_1(a5, cont));
    }
}

class PRED_illarg_3_8 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(evaluation(A), B, C):-raise_exception(evaluation_error(B, C, A))
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(evaluation(A), B, C):-[raise_exception(evaluation_error(B, C, A))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s11,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {a4};
            bind(/*VAR*/ a1,makeStructure(s11, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a2, a3, a4};
        a5 = makeStructure(s12, y1);
        return exit(engine, new PRED_raise_exception_1(a5, cont));
    }
}

class PRED_illarg_3_9 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(syntax(A, B, C), D, E):-raise_exception(syntax_error(D, E, A, B, C))
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(syntax(A, B, C), D, E):-[raise_exception(syntax_error(D, E, A, B, C))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s13,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
            a5 = args[1];
            a6 = args[2];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a4, a5, a6};
            bind(/*VAR*/ a1,makeStructure(s13, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a2, a3, a4, a5, a6};
        a7 = makeStructure(s14, y1);
        return exit(engine, new PRED_raise_exception_1(a7, cont));
    }
}

class PRED_illarg_3_10 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(system(A), B, C):-raise_exception(system_error(A))
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(system(A), B, C):-[raise_exception(system_error(A))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s15,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {a4};
            bind(/*VAR*/ a1,makeStructure(s15, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a4};
        a5 = makeStructure(s16, y1);
        return exit(engine, new PRED_raise_exception_1(a5, cont));
    }
}

class PRED_illarg_3_11 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(internal(A), B, C):-raise_exception(internal_error(A))
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(internal(A), B, C):-[raise_exception(internal_error(A))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s17,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {a4};
            bind(/*VAR*/ a1,makeStructure(s17, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a4};
        a5 = makeStructure(s18, y1);
        return exit(engine, new PRED_raise_exception_1(a5, cont));
    }
}

class PRED_illarg_3_12 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(java(A), B, C):-raise_exception(java_error(B, C, A))
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(java(A), B, C):-[raise_exception(java_error(B, C, A))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s19,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {a4};
            bind(/*VAR*/ a1,makeStructure(s19, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {a2, a3, a4};
        a5 = makeStructure(s20, y1);
        return exit(engine, new PRED_raise_exception_1(a5, cont));
    }
}

class PRED_illarg_3_13 extends PRED_illarg_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // illarg(A, B, C):-raise_exception(A)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // illarg(A, B, C):-[raise_exception(A)]
        return exit(engine, new PRED_raise_exception_1(a1, cont));
    }
}
