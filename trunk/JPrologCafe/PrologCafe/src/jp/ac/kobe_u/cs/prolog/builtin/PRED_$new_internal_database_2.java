package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$new_internal_database'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$new_internal_database_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("alias", 1);
    static /*Symbol*/Object s2 = makeAtom("[]");
    static Predicate _$new_internal_database_2_sub_1 = new PRED_$new_internal_database_2_sub_1();
    static Predicate _$new_internal_database_2_1 = new PRED_$new_internal_database_2_1();
    static Predicate _$new_internal_database_2_2 = new PRED_$new_internal_database_2_2();

    public Object arg1, arg2;

    public PRED_$new_internal_database_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$new_internal_database_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$new_internal_database"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$new_internal_database'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$new_internal_database_2_1, _$new_internal_database_2_sub_1);
    }
}

class PRED_$new_internal_database_2_sub_1 extends PRED_$new_internal_database_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$new_internal_database_2_2);
    }
}

class PRED_$new_internal_database_2_1 extends PRED_$new_internal_database_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$new_internal_database'(A, B):-hash_contains_key(A, B), !
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$new_internal_database'(A, B):-['$get_level'(C), hash_contains_key(A, B), '$cut'(C)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return exit(engine, new PRED_hash_contains_key_2(a1, a2, p1));
    }
}

class PRED_$new_internal_database_2_2 extends PRED_$new_internal_database_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$new_internal_database'(A, B):-new_hash(C, [alias(B)]), '$init_internal_database'(B)
        Object a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$new_internal_database'(A, B):-[new_hash(C, [alias(B)]), '$init_internal_database'(B)]
        Object[] y1 = {a2};
        a3 = makeStructure(s1, y1);
        a4 = makeList(a3, s2);
        p1 = new PRED_$init_internal_database_1(a2, cont);
        return exit(engine, new PRED_new_hash_2(engine.makeVariable(this), a4, p1));
    }
}
