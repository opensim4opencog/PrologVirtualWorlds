package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$head_to_term'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$head_to_term_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*IntegerTerm*/Object si2 = makeInteger(1);
    static /*Symbol*/Object s3 = makeAtom(":", 2);
    static /*Symbol*/Object s4 = makeAtom("type", 1);
    static /*Symbol*/Object s5 = makeAtom("callable");
    static Object[] s6 = {s5};
    static /*Structure*/Object s7 = makeStructure(s4, s6);
    static Predicate _$head_to_term_5_top = new PRED_$head_to_term_5_top();
    static Predicate _$head_to_term_5_var = new PRED_$head_to_term_5_var();
    static Predicate _$head_to_term_5_var_1 = new PRED_$head_to_term_5_var_1();
    static Predicate _$head_to_term_5_var_2 = new PRED_$head_to_term_5_var_2();
    static Predicate _$head_to_term_5_var_3 = new PRED_$head_to_term_5_var_3();
    static Predicate _$head_to_term_5_int = new PRED_$head_to_term_5_int();
    static Predicate _$head_to_term_5_int_1 = new PRED_$head_to_term_5_int_1();
    static Predicate _$head_to_term_5_int_2 = new PRED_$head_to_term_5_int_2();
    static Predicate _$head_to_term_5_1 = new PRED_$head_to_term_5_1();
    static Predicate _$head_to_term_5_2 = new PRED_$head_to_term_5_2();
    static Predicate _$head_to_term_5_3 = new PRED_$head_to_term_5_3();
    static Predicate _$head_to_term_5_4 = new PRED_$head_to_term_5_4();

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$head_to_term_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$head_to_term_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$head_to_term"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$head_to_term'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        return exit(engine, _$head_to_term_5_top);
    }
}

class PRED_$head_to_term_5_top extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$head_to_term_5_var, _$head_to_term_5_int, _$head_to_term_5_int, _$head_to_term_5_int, _$head_to_term_5_var, _$head_to_term_5_int);
    }
}

class PRED_$head_to_term_5_var extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$head_to_term_5_1, _$head_to_term_5_var_1);
    }
}

class PRED_$head_to_term_5_var_1 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$head_to_term_5_2, _$head_to_term_5_var_2);
    }
}

class PRED_$head_to_term_5_var_2 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$head_to_term_5_3, _$head_to_term_5_var_3);
    }
}

class PRED_$head_to_term_5_var_3 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$head_to_term_5_4);
    }
}

class PRED_$head_to_term_5_int extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$head_to_term_5_1, _$head_to_term_5_int_1);
    }
}

class PRED_$head_to_term_5_int_1 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$head_to_term_5_3, _$head_to_term_5_int_2);
    }
}

class PRED_$head_to_term_5_int_2 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$head_to_term_5_4);
    }
}

class PRED_$head_to_term_5_1 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$head_to_term'(A, B, C, D, E):-var(A), !, illarg(var, E, 1)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, E, 1)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        return exit(engine, new PRED_illarg_3(s1, a5, si2, cont));
    }
}

class PRED_$head_to_term_5_2 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$head_to_term'(A:B, C, D, E, F):-!, '$head_to_term'(B, C, A, E, F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A:B, C, D, E, F):-['$neck_cut', '$head_to_term'(B, C, A, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s3,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a7;
        engine_aregs[2] = a2;
        engine_aregs[3] = a6;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine.cont = cont;
        return exit(engine, _$head_to_term_5_top);
    }
}

class PRED_$head_to_term_5_3 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$head_to_term'(A, A, B, B, C):-callable(A), atom(B), !
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A, A, B, B, C):-['$get_level'(D), callable(A), atom(B), '$cut'(D)]
        if (! unify(a1,a2))
            return fail(engine);
        if (! unify(a3,a4))
            return fail(engine);
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a6, cont);
        p2 = new PRED_atom_1(a3, p1);
        return exit(engine, new PRED_callable_1(a1, p2));
    }
}

class PRED_$head_to_term_5_4 extends PRED_$head_to_term_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$head_to_term'(A, B, C, D, E):-illarg(type(callable), E, 1)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$head_to_term'(A, B, C, D, E):-[illarg(type(callable), E, 1)]
        return exit(engine, new PRED_illarg_3(s7, a5, si2, cont));
    }
}
