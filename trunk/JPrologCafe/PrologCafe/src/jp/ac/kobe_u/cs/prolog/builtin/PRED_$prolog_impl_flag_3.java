package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$prolog_impl_flag'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$prolog_impl_flag_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("max_integer");
    static /*Symbol*/Object s2 = makeAtom("changeable", 1);
    static /*Symbol*/Object s3 = makeAtom("no");
    static Object[] s4 = {s3};
    static /*Structure*/Object s5 = makeStructure(s2, s4);
    static /*Symbol*/Object s6 = makeAtom("min_integer");
    static /*Symbol*/Object s7 = makeAtom("debug");
    static /*Symbol*/Object s8 = makeAtom("on");
    static /*Symbol*/Object s9 = makeAtom("off");
    static /*Symbol*/Object s10 = makeAtom("[]");
    static /*List*/Object s11 = makeList(s9, s10);
    static /*List*/Object s12 = makeList(s8, s11);
    static /*Symbol*/Object s13 = makeAtom("yes");
    static Object[] s14 = {s13};
    static /*Structure*/Object s15 = makeStructure(s2, s14);
    static /*Symbol*/Object s16 = makeAtom("max_arity");
    static /*Symbol*/Object s17 = makeAtom("unknown");
    static /*Symbol*/Object s18 = makeAtom("error");
    static /*Symbol*/Object s19 = makeAtom("fail");
    static /*Symbol*/Object s20 = makeAtom("warning");
    static /*List*/Object s21 = makeList(s20, s10);
    static /*List*/Object s22 = makeList(s19, s21);
    static /*List*/Object s23 = makeList(s18, s22);
    static /*Symbol*/Object s24 = makeAtom("double_quotes");
    static /*Symbol*/Object s25 = makeAtom("chars");
    static /*Symbol*/Object s26 = makeAtom("codes");
    static /*Symbol*/Object s27 = makeAtom("atom");
    static /*List*/Object s28 = makeList(s27, s10);
    static /*List*/Object s29 = makeList(s26, s28);
    static /*List*/Object s30 = makeList(s25, s29);
    static /*Symbol*/Object s31 = makeAtom("print_stack_trace");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$prolog_impl_flag_3_var = new PRED_$prolog_impl_flag_3_var();
    static Predicate _$prolog_impl_flag_3_var_1 = new PRED_$prolog_impl_flag_3_var_1();
    static Predicate _$prolog_impl_flag_3_var_2 = new PRED_$prolog_impl_flag_3_var_2();
    static Predicate _$prolog_impl_flag_3_var_3 = new PRED_$prolog_impl_flag_3_var_3();
    static Predicate _$prolog_impl_flag_3_var_4 = new PRED_$prolog_impl_flag_3_var_4();
    static Predicate _$prolog_impl_flag_3_var_5 = new PRED_$prolog_impl_flag_3_var_5();
    static Predicate _$prolog_impl_flag_3_var_6 = new PRED_$prolog_impl_flag_3_var_6();
    static Predicate _$prolog_impl_flag_3_con = new PRED_$prolog_impl_flag_3_con();
    static Predicate _$prolog_impl_flag_3_1 = new PRED_$prolog_impl_flag_3_1();
    static Predicate _$prolog_impl_flag_3_2 = new PRED_$prolog_impl_flag_3_2();
    static Predicate _$prolog_impl_flag_3_3 = new PRED_$prolog_impl_flag_3_3();
    static Predicate _$prolog_impl_flag_3_4 = new PRED_$prolog_impl_flag_3_4();
    static Predicate _$prolog_impl_flag_3_5 = new PRED_$prolog_impl_flag_3_5();
    static Predicate _$prolog_impl_flag_3_6 = new PRED_$prolog_impl_flag_3_6();
    static Predicate _$prolog_impl_flag_3_7 = new PRED_$prolog_impl_flag_3_7();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(7);
    static {
        con.put(s1, _$prolog_impl_flag_3_1);
        con.put(s6, _$prolog_impl_flag_3_2);
        con.put(s7, _$prolog_impl_flag_3_3);
        con.put(s16, _$prolog_impl_flag_3_4);
        con.put(s17, _$prolog_impl_flag_3_5);
        con.put(s24, _$prolog_impl_flag_3_6);
        con.put(s31, _$prolog_impl_flag_3_7);
    }

    public Object arg1, arg2, arg3;

    public PRED_$prolog_impl_flag_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$prolog_impl_flag_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$prolog_impl_flag"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$prolog_impl_flag'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$prolog_impl_flag_3_var, _fail_0, _fail_0, _$prolog_impl_flag_3_con, _fail_0, _fail_0);
    }
}

class PRED_$prolog_impl_flag_3_var extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$prolog_impl_flag_3_1, _$prolog_impl_flag_3_var_1);
    }
}

class PRED_$prolog_impl_flag_3_var_1 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$prolog_impl_flag_3_2, _$prolog_impl_flag_3_var_2);
    }
}

class PRED_$prolog_impl_flag_3_var_2 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$prolog_impl_flag_3_3, _$prolog_impl_flag_3_var_3);
    }
}

class PRED_$prolog_impl_flag_3_var_3 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$prolog_impl_flag_3_4, _$prolog_impl_flag_3_var_4);
    }
}

class PRED_$prolog_impl_flag_3_var_4 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$prolog_impl_flag_3_5, _$prolog_impl_flag_3_var_5);
    }
}

class PRED_$prolog_impl_flag_3_var_5 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$prolog_impl_flag_3_6, _$prolog_impl_flag_3_var_6);
    }
}

class PRED_$prolog_impl_flag_3_var_6 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$prolog_impl_flag_3_7);
    }
}

class PRED_$prolog_impl_flag_3_con extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$prolog_impl_flag_3_1 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_impl_flag'(max_integer, A, changeable(no)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(max_integer, A, changeable(no)):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        if (! unify(s5,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}

class PRED_$prolog_impl_flag_3_2 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_impl_flag'(min_integer, A, changeable(no)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(min_integer, A, changeable(no)):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s6))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s6);
        } else {
            return fail(engine);
        }
        if (! unify(s5,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}

class PRED_$prolog_impl_flag_3_3 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_impl_flag'(debug, [on, off], changeable(yes)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(debug, [on, off], changeable(yes)):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s7))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s7);
        } else {
            return fail(engine);
        }
        if (! unify(s12,a2))
            return fail(engine);
        if (! unify(s15,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}

class PRED_$prolog_impl_flag_3_4 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_impl_flag'(max_arity, A, changeable(no)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(max_arity, A, changeable(no)):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s16))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s16);
        } else {
            return fail(engine);
        }
        if (! unify(s5,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}

class PRED_$prolog_impl_flag_3_5 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_impl_flag'(unknown, [error, fail, warning], changeable(yes)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(unknown, [error, fail, warning], changeable(yes)):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s17))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s17);
        } else {
            return fail(engine);
        }
        if (! unify(s23,a2))
            return fail(engine);
        if (! unify(s15,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}

class PRED_$prolog_impl_flag_3_6 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_impl_flag'(double_quotes, [chars, codes, atom], changeable(no)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(double_quotes, [chars, codes, atom], changeable(no)):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s24))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s24);
        } else {
            return fail(engine);
        }
        if (! unify(s30,a2))
            return fail(engine);
        if (! unify(s5,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}

class PRED_$prolog_impl_flag_3_7 extends PRED_$prolog_impl_flag_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_impl_flag'(print_stack_trace, [on, off], changeable(yes)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$prolog_impl_flag'(print_stack_trace, [on, off], changeable(yes)):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s31))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s31);
        } else {
            return fail(engine);
        }
        if (! unify(s12,a2))
            return fail(engine);
        if (! unify(s15,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}
