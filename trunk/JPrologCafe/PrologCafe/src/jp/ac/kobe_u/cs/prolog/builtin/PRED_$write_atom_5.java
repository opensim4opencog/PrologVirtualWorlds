package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_atom'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_atom_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("quoted", 1);
    static /*Symbol*/Object s2 = makeAtom("true");
    static Object[] s3 = {s2};
    static /*Structure*/Object s4 = makeStructure(s1, s3);
    static Predicate _$write_atom_5_sub_1 = new PRED_$write_atom_5_sub_1();
    static Predicate _$write_atom_5_1 = new PRED_$write_atom_5_1();
    static Predicate _$write_atom_5_2 = new PRED_$write_atom_5_2();

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$write_atom_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$write_atom_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$write_atom"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_atom'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$write_atom_5_1, _$write_atom_5_sub_1);
    }
}

class PRED_$write_atom_5_sub_1 extends PRED_$write_atom_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_atom_5_2);
    }
}

class PRED_$write_atom_5_1 extends PRED_$write_atom_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_atom'(A, B, C, D, E):-'$builtin_member'(quoted(true), D), !, '$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_writeq'(E, A)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$write_atom'(A, B, C, D, E):-['$get_level'(F), '$builtin_member'(quoted(true), D), '$cut'(F), '$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_writeq'(E, A)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$fast_writeq_2(a5, a1, cont);
        p2 = new PRED_$write_space_if_needed_3(a2, a3, a5, p1);
        p3 = new PRED_$atom_type_2(a1, a3, p2);
        p4 = new PRED_$cut_1(a6, p3);
        return exit(engine, new PRED_$builtin_member_2(s4, a4, p4));
    }
}

class PRED_$write_atom_5_2 extends PRED_$write_atom_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_atom'(A, B, C, D, E):-'$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_write'(E, A)
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$write_atom'(A, B, C, D, E):-['$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_write'(E, A)]
        p1 = new PRED_$fast_write_2(a5, a1, cont);
        p2 = new PRED_$write_space_if_needed_3(a2, a3, a5, p1);
        return exit(engine, new PRED_$atom_type_2(a1, a3, p2));
    }
}
