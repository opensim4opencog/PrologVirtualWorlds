package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_and'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$dcg_and_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("true");
    static /*Symbol*/Object s2 = makeAtom(",", 2);
    static Predicate _$dcg_and_3_sub_1 = new PRED_$dcg_and_3_sub_1();
    static Predicate _$dcg_and_3_sub_2 = new PRED_$dcg_and_3_sub_2();
    static Predicate _$dcg_and_3_1 = new PRED_$dcg_and_3_1();
    static Predicate _$dcg_and_3_2 = new PRED_$dcg_and_3_2();
    static Predicate _$dcg_and_3_3 = new PRED_$dcg_and_3_3();

    public Object arg1, arg2, arg3;

    public PRED_$dcg_and_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$dcg_and_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$dcg_and"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$dcg_and'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dcg_and_3_1, _$dcg_and_3_sub_1);
    }
}

class PRED_$dcg_and_3_sub_1 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_and_3_2, _$dcg_and_3_sub_2);
    }
}

class PRED_$dcg_and_3_sub_2 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_and_3_3);
    }
}

class PRED_$dcg_and_3_1 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_and'(A, B, C):-A==true, !, C=B
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_and'(A, B, C):-['$get_level'(D), '$equality_of_term'(A, true), '$cut'(D), '$unify'(C, B)]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(1), s(1))
        a1 = deref( a1);
        if (! prologEquals(a1,s1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        //START inline expansion of $unify(a(3), a(2))
        if (! unify(a3,a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_and_3_2 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_and'(A, B, C):-B==true, !, C=A
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_and'(A, B, C):-['$get_level'(D), '$equality_of_term'(B, true), '$cut'(D), '$unify'(C, A)]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $equality_of_term(a(2), s(1))
        a2 = deref( a2);
        if (! prologEquals(a2,s1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        //START inline expansion of $unify(a(3), a(1))
        if (! unify(a3,a1)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_and_3_3 extends PRED_$dcg_and_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_and'(A, B, (A, B)):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_and'(A, B, (A, B)):-[]
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s2,a3))
                return fail(engine);
            Object[] args = args(a3);
            if (!unify( a1,args[0]))
                return fail(engine);
            if (!unify( a2,args[1]))
                return fail(engine);
        } else if (isVariable(a3)){
            Object[] args = {a1, a2};
            bind(/*VAR*/ a3,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}
