package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_translate_dcg'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$dcg_translate_dcg_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("[]");
    static /*Symbol*/Object s3 = makeAtom("true");
    static /*Symbol*/Object s4 = makeAtom("C", 3);
    static /*Symbol*/Object s5 = makeAtom("\\+", 1);
    static /*Symbol*/Object s6 = makeAtom(";", 2);
    static /*Symbol*/Object s7 = makeAtom("->", 2);
    static /*Symbol*/Object s8 = makeAtom("fail");
    static /*Symbol*/Object s9 = makeAtom("=", 2);
    static /*Symbol*/Object s10 = makeAtom(",", 2);
    static /*Symbol*/Object s11 = makeAtom("if", 3);
    static /*Symbol*/Object s12 = makeAtom("!");
    static /*Symbol*/Object s13 = makeAtom("{}", 1);
    static /*Symbol*/Object s14 = makeAtom("call", 1);
    static Predicate _$dcg_translate_dcg_5_top = new PRED_$dcg_translate_dcg_5_top();
    static Predicate _$dcg_translate_dcg_5_var = new PRED_$dcg_translate_dcg_5_var();
    static Predicate _$dcg_translate_dcg_5_var_1 = new PRED_$dcg_translate_dcg_5_var_1();
    static Predicate _$dcg_translate_dcg_5_var_2 = new PRED_$dcg_translate_dcg_5_var_2();
    static Predicate _$dcg_translate_dcg_5_var_3 = new PRED_$dcg_translate_dcg_5_var_3();
    static Predicate _$dcg_translate_dcg_5_var_4 = new PRED_$dcg_translate_dcg_5_var_4();
    static Predicate _$dcg_translate_dcg_5_var_5 = new PRED_$dcg_translate_dcg_5_var_5();
    static Predicate _$dcg_translate_dcg_5_var_6 = new PRED_$dcg_translate_dcg_5_var_6();
    static Predicate _$dcg_translate_dcg_5_var_7 = new PRED_$dcg_translate_dcg_5_var_7();
    static Predicate _$dcg_translate_dcg_5_var_8 = new PRED_$dcg_translate_dcg_5_var_8();
    static Predicate _$dcg_translate_dcg_5_var_9 = new PRED_$dcg_translate_dcg_5_var_9();
    static Predicate _$dcg_translate_dcg_5_var_10 = new PRED_$dcg_translate_dcg_5_var_10();
    static Predicate _$dcg_translate_dcg_5_var_11 = new PRED_$dcg_translate_dcg_5_var_11();
    static Predicate _$dcg_translate_dcg_5_var_12 = new PRED_$dcg_translate_dcg_5_var_12();
    static Predicate _$dcg_translate_dcg_5_int = new PRED_$dcg_translate_dcg_5_int();
    static Predicate _$dcg_translate_dcg_5_int_1 = new PRED_$dcg_translate_dcg_5_int_1();
    static Predicate _$dcg_translate_dcg_5_con = new PRED_$dcg_translate_dcg_5_con();
    static Predicate _$dcg_translate_dcg_5_con_0 = new PRED_$dcg_translate_dcg_5_con_0();
    static Predicate _$dcg_translate_dcg_5_con_0_1 = new PRED_$dcg_translate_dcg_5_con_0_1();
    static Predicate _$dcg_translate_dcg_5_con_0_2 = new PRED_$dcg_translate_dcg_5_con_0_2();
    static Predicate _$dcg_translate_dcg_5_con_1 = new PRED_$dcg_translate_dcg_5_con_1();
    static Predicate _$dcg_translate_dcg_5_con_1_1 = new PRED_$dcg_translate_dcg_5_con_1_1();
    static Predicate _$dcg_translate_dcg_5_con_1_2 = new PRED_$dcg_translate_dcg_5_con_1_2();
    static Predicate _$dcg_translate_dcg_5_str = new PRED_$dcg_translate_dcg_5_str();
    static Predicate _$dcg_translate_dcg_5_str_0 = new PRED_$dcg_translate_dcg_5_str_0();
    static Predicate _$dcg_translate_dcg_5_str_0_1 = new PRED_$dcg_translate_dcg_5_str_0_1();
    static Predicate _$dcg_translate_dcg_5_str_0_2 = new PRED_$dcg_translate_dcg_5_str_0_2();
    static Predicate _$dcg_translate_dcg_5_str_1 = new PRED_$dcg_translate_dcg_5_str_1();
    static Predicate _$dcg_translate_dcg_5_str_1_1 = new PRED_$dcg_translate_dcg_5_str_1_1();
    static Predicate _$dcg_translate_dcg_5_str_1_2 = new PRED_$dcg_translate_dcg_5_str_1_2();
    static Predicate _$dcg_translate_dcg_5_str_2 = new PRED_$dcg_translate_dcg_5_str_2();
    static Predicate _$dcg_translate_dcg_5_str_2_1 = new PRED_$dcg_translate_dcg_5_str_2_1();
    static Predicate _$dcg_translate_dcg_5_str_2_2 = new PRED_$dcg_translate_dcg_5_str_2_2();
    static Predicate _$dcg_translate_dcg_5_str_3 = new PRED_$dcg_translate_dcg_5_str_3();
    static Predicate _$dcg_translate_dcg_5_str_3_1 = new PRED_$dcg_translate_dcg_5_str_3_1();
    static Predicate _$dcg_translate_dcg_5_str_3_2 = new PRED_$dcg_translate_dcg_5_str_3_2();
    static Predicate _$dcg_translate_dcg_5_str_4 = new PRED_$dcg_translate_dcg_5_str_4();
    static Predicate _$dcg_translate_dcg_5_str_4_1 = new PRED_$dcg_translate_dcg_5_str_4_1();
    static Predicate _$dcg_translate_dcg_5_str_4_2 = new PRED_$dcg_translate_dcg_5_str_4_2();
    static Predicate _$dcg_translate_dcg_5_str_5 = new PRED_$dcg_translate_dcg_5_str_5();
    static Predicate _$dcg_translate_dcg_5_str_5_1 = new PRED_$dcg_translate_dcg_5_str_5_1();
    static Predicate _$dcg_translate_dcg_5_str_5_2 = new PRED_$dcg_translate_dcg_5_str_5_2();
    static Predicate _$dcg_translate_dcg_5_str_6 = new PRED_$dcg_translate_dcg_5_str_6();
    static Predicate _$dcg_translate_dcg_5_str_6_1 = new PRED_$dcg_translate_dcg_5_str_6_1();
    static Predicate _$dcg_translate_dcg_5_str_6_2 = new PRED_$dcg_translate_dcg_5_str_6_2();
    static Predicate _$dcg_translate_dcg_5_str_6_3 = new PRED_$dcg_translate_dcg_5_str_6_3();
    static Predicate _$dcg_translate_dcg_5_lis = new PRED_$dcg_translate_dcg_5_lis();
    static Predicate _$dcg_translate_dcg_5_lis_1 = new PRED_$dcg_translate_dcg_5_lis_1();
    static Predicate _$dcg_translate_dcg_5_lis_2 = new PRED_$dcg_translate_dcg_5_lis_2();
    static Predicate _$dcg_translate_dcg_5_1 = new PRED_$dcg_translate_dcg_5_1();
    static Predicate _$dcg_translate_dcg_5_2 = new PRED_$dcg_translate_dcg_5_2();
    static Predicate _$dcg_translate_dcg_5_3 = new PRED_$dcg_translate_dcg_5_3();
    static Predicate _$dcg_translate_dcg_5_4 = new PRED_$dcg_translate_dcg_5_4();
    static Predicate _$dcg_translate_dcg_5_5 = new PRED_$dcg_translate_dcg_5_5();
    static Predicate _$dcg_translate_dcg_5_6 = new PRED_$dcg_translate_dcg_5_6();
    static Predicate _$dcg_translate_dcg_5_7 = new PRED_$dcg_translate_dcg_5_7();
    static Predicate _$dcg_translate_dcg_5_8 = new PRED_$dcg_translate_dcg_5_8();
    static Predicate _$dcg_translate_dcg_5_9 = new PRED_$dcg_translate_dcg_5_9();
    static Predicate _$dcg_translate_dcg_5_10 = new PRED_$dcg_translate_dcg_5_10();
    static Predicate _$dcg_translate_dcg_5_11 = new PRED_$dcg_translate_dcg_5_11();
    static Predicate _$dcg_translate_dcg_5_12 = new PRED_$dcg_translate_dcg_5_12();
    static Predicate _$dcg_translate_dcg_5_13 = new PRED_$dcg_translate_dcg_5_13();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(2);
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(7);
    static {
        con.put(s2, _$dcg_translate_dcg_5_con_0);
        con.put(s12, _$dcg_translate_dcg_5_con_1);
        str.put(s1, _$dcg_translate_dcg_5_str_0);
        str.put(s5, _$dcg_translate_dcg_5_str_1);
        str.put(s10, _$dcg_translate_dcg_5_str_2);
        str.put(s7, _$dcg_translate_dcg_5_str_3);
        str.put(s11, _$dcg_translate_dcg_5_str_4);
        str.put(s6, _$dcg_translate_dcg_5_str_5);
        str.put(s13, _$dcg_translate_dcg_5_str_6);
    }

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$dcg_translate_dcg_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$dcg_translate_dcg_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$dcg_translate_dcg"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$dcg_translate_dcg'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        return exit(engine, _$dcg_translate_dcg_5_top);
    }
}

class PRED_$dcg_translate_dcg_5_top extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$dcg_translate_dcg_5_var, _$dcg_translate_dcg_5_int, _$dcg_translate_dcg_5_int, _$dcg_translate_dcg_5_con, _$dcg_translate_dcg_5_str, _$dcg_translate_dcg_5_lis);
    }
}

class PRED_$dcg_translate_dcg_5_var extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_var_1);
    }
}

class PRED_$dcg_translate_dcg_5_var_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_2, _$dcg_translate_dcg_5_var_2);
    }
}

class PRED_$dcg_translate_dcg_5_var_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_3, _$dcg_translate_dcg_5_var_3);
    }
}

class PRED_$dcg_translate_dcg_5_var_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_4, _$dcg_translate_dcg_5_var_4);
    }
}

class PRED_$dcg_translate_dcg_5_var_4 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_5, _$dcg_translate_dcg_5_var_5);
    }
}

class PRED_$dcg_translate_dcg_5_var_5 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_6, _$dcg_translate_dcg_5_var_6);
    }
}

class PRED_$dcg_translate_dcg_5_var_6 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_7, _$dcg_translate_dcg_5_var_7);
    }
}

class PRED_$dcg_translate_dcg_5_var_7 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_8, _$dcg_translate_dcg_5_var_8);
    }
}

class PRED_$dcg_translate_dcg_5_var_8 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_9, _$dcg_translate_dcg_5_var_9);
    }
}

class PRED_$dcg_translate_dcg_5_var_9 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_10, _$dcg_translate_dcg_5_var_10);
    }
}

class PRED_$dcg_translate_dcg_5_var_10 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_11, _$dcg_translate_dcg_5_var_11);
    }
}

class PRED_$dcg_translate_dcg_5_var_11 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_12, _$dcg_translate_dcg_5_var_12);
    }
}

class PRED_$dcg_translate_dcg_5_var_12 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_int extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_int_1);
    }
}

class PRED_$dcg_translate_dcg_5_int_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_con extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _$dcg_translate_dcg_5_int);
    }
}

class PRED_$dcg_translate_dcg_5_con_0 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_con_0_1);
    }
}

class PRED_$dcg_translate_dcg_5_con_0_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_3, _$dcg_translate_dcg_5_con_0_2);
    }
}

class PRED_$dcg_translate_dcg_5_con_0_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_con_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_con_1_1);
    }
}

class PRED_$dcg_translate_dcg_5_con_1_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_10, _$dcg_translate_dcg_5_con_1_2);
    }
}

class PRED_$dcg_translate_dcg_5_con_1_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$dcg_translate_dcg_5_int);
    }
}

class PRED_$dcg_translate_dcg_5_str_0 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_0_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_0_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_2, _$dcg_translate_dcg_5_str_0_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_0_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_1_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_1_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_5, _$dcg_translate_dcg_5_str_1_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_1_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_2_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_2_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_6, _$dcg_translate_dcg_5_str_2_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_2_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_3_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_3_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_7, _$dcg_translate_dcg_5_str_3_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_3_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_4 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_4_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_4_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_8, _$dcg_translate_dcg_5_str_4_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_4_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_5 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_5_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_5_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_9, _$dcg_translate_dcg_5_str_5_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_5_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_str_6 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_str_6_1);
    }
}

class PRED_$dcg_translate_dcg_5_str_6_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_11, _$dcg_translate_dcg_5_str_6_2);
    }
}

class PRED_$dcg_translate_dcg_5_str_6_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_12, _$dcg_translate_dcg_5_str_6_3);
    }
}

class PRED_$dcg_translate_dcg_5_str_6_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_lis extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_translate_dcg_5_1, _$dcg_translate_dcg_5_lis_1);
    }
}

class PRED_$dcg_translate_dcg_5_lis_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_translate_dcg_5_4, _$dcg_translate_dcg_5_lis_2);
    }
}

class PRED_$dcg_translate_dcg_5_lis_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_translate_dcg_5_13);
    }
}

class PRED_$dcg_translate_dcg_5_1 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'(A, B, C, D, C):-var(A), !, '$dcg_translate_dcg_atom'(A, B, D, C)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(A, B, C, D, C):-['$get_level'(E), var(A), '$cut'(E), '$dcg_translate_dcg_atom'(A, B, D, C)]
        if (! unify(a3,a5))
            return fail(engine);
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        return exit(engine, new PRED_$dcg_translate_dcg_atom_4(a1, a2, a4, a3, cont));
    }
}

class PRED_$dcg_translate_dcg_5_2 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'(A:B, A:C, D, E, F):-!, '$dcg_translate_dcg'(B, C, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(A:B, A:C, D, E, F):-['$neck_cut', '$dcg_translate_dcg'(B, C, D, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s1,a2))
                return fail(engine);
            Object[] args = args(a2);
            if (!unify( a6,args[0]))
                return fail(engine);
            a8 = args[1];
        } else if (isVariable(a2)){
            a8 = engine.makeVariable(this);
            Object[] args = {a6, a8};
            bind(/*VAR*/ a2,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a7;
        engine_aregs[2] = a8;
        engine_aregs[3] = a3;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine.cont = cont;
        return exit(engine, _$dcg_translate_dcg_5_top);
    }
}

class PRED_$dcg_translate_dcg_5_3 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'([], true, A, A, B):-!
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'([], true, A, A, B):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s2))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s2);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s3))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s3);
        } else {
            return fail(engine);
        }
        if (! unify(a3,a4))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_translate_dcg_5_4 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'([A|B], C, D, E, F):-!, '$dcg_translate_dcg'(B, G, D, H, F), '$dcg_and'('C'(E, A, H), G, C)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'([A|B], C, D, E, F):-['$neck_cut', '$dcg_translate_dcg'(B, G, D, H, F), '$dcg_and'('C'(E, A, H), G, C)]
        a1 = deref( a1);
        if (isListTerm(a1)){
            Object[] args = consArgs(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a1,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a8 = engine.makeVariable(this);
        a9 = engine.makeVariable(this);
        Object[] y1 = {a4, a6, a9};
        a10 = makeStructure(s4, y1);
        p1 = new PRED_$dcg_and_3(a10, a8, a2, cont);
        engine_aregs[1] = a7;
        engine_aregs[2] = a8;
        engine_aregs[3] = a3;
        engine_aregs[4] = a9;
        engine_aregs[5] = a5;
        engine.cont = p1;
        return exit(engine, _$dcg_translate_dcg_5_top);
    }
}

class PRED_$dcg_translate_dcg_5_5 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'(\+A, (B->fail;C=D), C, D, C):-!, '$dcg_translate_dcg'(A, B, E, D, E)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(\+A, (B->fail;C=D), C, D, C):-['$neck_cut', '$dcg_translate_dcg'(A, B, E, D, E)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s5,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s5, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s6,a2))
                return fail(engine);
            Object[] args = args(a2);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a2)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a7, a8};
            bind(/*VAR*/ a2,makeStructure(s6, args));
        } else {
            return fail(engine);
        }
        a7 = deref( a7);
        if (isCompound(a7)){
            if (!functorOf( s7,a7))
                return fail(engine);
            Object[] args = args(a7);
            a9 = args[0];
            if (!unify( s8,args[1]))
                return fail(engine);
        } else if (isVariable(a7)){
            a9 = engine.makeVariable(this);
            Object[] args = {a9, s8};
            bind(/*VAR*/ a7,makeStructure(s7, args));
        } else {
            return fail(engine);
        }
        a8 = deref( a8);
        if (isCompound(a8)){
            if (!functorOf( s9,a8))
                return fail(engine);
            Object[] args = args(a8);
            a10 = args[0];
            a11 = args[1];
        } else if (isVariable(a8)){
            a10 = engine.makeVariable(this);
            a11 = engine.makeVariable(this);
            Object[] args = {a10, a11};
            bind(/*VAR*/ a8,makeStructure(s9, args));
        } else {
            return fail(engine);
        }
        if (! unify(a10,a3))
            return fail(engine);
        if (! unify(a11,a4))
            return fail(engine);
        if (! unify(a10,a5))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = engine.makeVariable(this);
        engine_aregs[1] = a6;
        engine_aregs[2] = a9;
        engine_aregs[3] = a12;
        engine_aregs[4] = a11;
        engine_aregs[5] = a12;
        engine.cont = cont;
        return exit(engine, _$dcg_translate_dcg_5_top);
    }
}

class PRED_$dcg_translate_dcg_5_6 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'((A, B), C, D, E, F):-!, '$dcg_translate_dcg'(A, G, H, E, H), '$dcg_translate_dcg'(B, I, D, H, F), '$dcg_and'(G, I, C)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'((A, B), C, D, E, F):-['$neck_cut', '$dcg_translate_dcg'(A, G, H, E, H), '$dcg_translate_dcg'(B, I, D, H, F), '$dcg_and'(G, I, C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s10,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s10, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a8 = engine.makeVariable(this);
        a9 = engine.makeVariable(this);
        a10 = engine.makeVariable(this);
        p1 = new PRED_$dcg_and_3(a8, a10, a2, cont);
        p2 = new PRED_$dcg_translate_dcg_5(a7, a10, a3, a9, a5, p1);
        engine_aregs[1] = a6;
        engine_aregs[2] = a8;
        engine_aregs[3] = a9;
        engine_aregs[4] = a4;
        engine_aregs[5] = a9;
        engine.cont = p2;
        return exit(engine, _$dcg_translate_dcg_5_top);
    }
}

class PRED_$dcg_translate_dcg_5_7 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'((A->B), (C->D), E, F, G):-!, '$dcg_translate_dcg'(A, C, H, F, H), '$dcg_translate_dcg'(B, D, E, H, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'((A->B), (C->D), E, F, G):-['$neck_cut', '$dcg_translate_dcg'(A, C, H, F, H), '$dcg_translate_dcg'(B, D, E, H, G)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s7,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s7, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s7,a2))
                return fail(engine);
            Object[] args = args(a2);
            a8 = args[0];
            a9 = args[1];
        } else if (isVariable(a2)){
            a8 = engine.makeVariable(this);
            a9 = engine.makeVariable(this);
            Object[] args = {a8, a9};
            bind(/*VAR*/ a2,makeStructure(s7, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a10 = engine.makeVariable(this);
        p1 = new PRED_$dcg_translate_dcg_5(a7, a9, a3, a10, a5, cont);
        engine_aregs[1] = a6;
        engine_aregs[2] = a8;
        engine_aregs[3] = a10;
        engine_aregs[4] = a4;
        engine_aregs[5] = a10;
        engine.cont = p1;
        return exit(engine, _$dcg_translate_dcg_5_top);
    }
}

class PRED_$dcg_translate_dcg_5_8 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'(if(A, B, C), if(D, E, F), G, H, G):-!, '$dcg_translate_dcg'(A, D, H, I), '$dcg_translate_dcg'(B, E, I, G), '$dcg_translate_dcg'(C, F, I, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(if(A, B, C), if(D, E, F), G, H, G):-['$neck_cut', '$dcg_translate_dcg'(A, D, H, I), '$dcg_translate_dcg'(B, E, I, G), '$dcg_translate_dcg'(C, F, I, G)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s11,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a6, a7, a8};
            bind(/*VAR*/ a1,makeStructure(s11, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s11,a2))
                return fail(engine);
            Object[] args = args(a2);
            a9 = args[0];
            a10 = args[1];
            a11 = args[2];
        } else if (isVariable(a2)){
            a9 = engine.makeVariable(this);
            a10 = engine.makeVariable(this);
            a11 = engine.makeVariable(this);
            Object[] args = {a9, a10, a11};
            bind(/*VAR*/ a2,makeStructure(s11, args));
        } else {
            return fail(engine);
        }
        if (! unify(a3,a5))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = engine.makeVariable(this);
        p1 = new PRED_$dcg_translate_dcg_4(a8, a11, a12, a3, cont);
        p2 = new PRED_$dcg_translate_dcg_4(a7, a10, a12, a3, p1);
        return exit(engine, new PRED_$dcg_translate_dcg_4(a6, a9, a4, a12, p2));
    }
}

class PRED_$dcg_translate_dcg_5_9 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'((A;B), (C;D), E, F, E):-!, '$dcg_translate_dcg'(A, C, F, E), '$dcg_translate_dcg'(B, D, F, E)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'((A;B), (C;D), E, F, E):-['$neck_cut', '$dcg_translate_dcg'(A, C, F, E), '$dcg_translate_dcg'(B, D, F, E)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s6,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s6, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s6,a2))
                return fail(engine);
            Object[] args = args(a2);
            a8 = args[0];
            a9 = args[1];
        } else if (isVariable(a2)){
            a8 = engine.makeVariable(this);
            a9 = engine.makeVariable(this);
            Object[] args = {a8, a9};
            bind(/*VAR*/ a2,makeStructure(s6, args));
        } else {
            return fail(engine);
        }
        if (! unify(a3,a5))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$dcg_translate_dcg_4(a7, a9, a4, a3, cont);
        return exit(engine, new PRED_$dcg_translate_dcg_4(a6, a8, a4, a3, p1));
    }
}

class PRED_$dcg_translate_dcg_5_10 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'(!, !, A, A, B):-!
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(!, !, A, A, B):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s12))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s12);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s12))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s12);
        } else {
            return fail(engine);
        }
        if (! unify(a3,a4))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_translate_dcg_5_11 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'({A}, call(A), B, B, C):-var(A), !
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'({A}, call(A), B, B, C):-['$get_level'(D), var(A), '$cut'(D)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s13,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s13, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s14,a2))
                return fail(engine);
            Object[] args = args(a2);
            if (!unify( a6,args[0]))
                return fail(engine);
        } else if (isVariable(a2)){
            Object[] args = {a6};
            bind(/*VAR*/ a2,makeStructure(s14, args));
        } else {
            return fail(engine);
        }
        if (! unify(a3,a4))
            return fail(engine);
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(6))
        a6 = deref( a6);
        if (! isVariable(a6)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = deref( a7);
        if (! isCutter/*Integer*/(a7)) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(( a7));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_translate_dcg_5_12 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'({A}, A, B, B, C):-!
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'({A}, A, B, B, C):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s13,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s13, args));
        } else {
            return fail(engine);
        }
        if (! unify(a6,a2))
            return fail(engine);
        if (! unify(a3,a4))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_translate_dcg_5_13 extends PRED_$dcg_translate_dcg_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_translate_dcg'(A, B, C, D, C):-'$dcg_translate_dcg_atom'(A, B, D, C)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$dcg_translate_dcg'(A, B, C, D, C):-['$dcg_translate_dcg_atom'(A, B, D, C)]
        if (! unify(a3,a5))
            return fail(engine);
        return exit(engine, new PRED_$dcg_translate_dcg_atom_4(a1, a2, a4, a3, cont));
    }
}
