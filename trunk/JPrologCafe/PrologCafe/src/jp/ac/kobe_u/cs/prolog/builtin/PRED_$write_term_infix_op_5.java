package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_term_infix_op'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_term_infix_op_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(",");
    static /*Symbol*/Object s2 = makeAtom("punct");
    static Predicate _$write_term_infix_op_5_var = new PRED_$write_term_infix_op_5_var();
    static Predicate _$write_term_infix_op_5_var_1 = new PRED_$write_term_infix_op_5_var_1();
    static Predicate _$write_term_infix_op_5_1 = new PRED_$write_term_infix_op_5_1();
    static Predicate _$write_term_infix_op_5_2 = new PRED_$write_term_infix_op_5_2();

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$write_term_infix_op_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$write_term_infix_op_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$write_term_infix_op"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_term_infix_op'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$write_term_infix_op_5_var, _$write_term_infix_op_5_2, _$write_term_infix_op_5_2, _$write_term_infix_op_5_var, _$write_term_infix_op_5_2, _$write_term_infix_op_5_2);
    }
}

class PRED_$write_term_infix_op_5_var extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_term_infix_op_5_1, _$write_term_infix_op_5_var_1);
    }
}

class PRED_$write_term_infix_op_5_var_1 extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_term_infix_op_5_2);
    }
}

class PRED_$write_term_infix_op_5_1 extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_infix_op'((','), A, punct, B, C):-!, '$write_space_if_needed'(A, punct, C), put_char(C, (','))
        Object a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$write_term_infix_op'((','), A, punct, B, C):-['$neck_cut', '$write_space_if_needed'(A, punct, C), put_char(C, (','))]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s2))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s2);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_put_char_2(a5, s1, cont);
        return exit(engine, new PRED_$write_space_if_needed_3(a2, s2, a5, p1));
    }
}

class PRED_$write_term_infix_op_5_2 extends PRED_$write_term_infix_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_infix_op'(A, B, C, D, E):-'$write_atom'(A, B, C, D, E)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$write_term_infix_op'(A, B, C, D, E):-['$write_atom'(A, B, C, D, E)]
        return exit(engine, new PRED_$write_atom_5(a1, a2, a3, a4, a5, cont));
    }
}
