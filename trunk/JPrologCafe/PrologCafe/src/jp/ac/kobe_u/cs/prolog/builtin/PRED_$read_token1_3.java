package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$read_token1'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$read_token1_3 extends PredicateBase {
    static /*IntegerTerm*/Object si1 = makeInteger(-2);
    static /*Symbol*/Object s2 = makeAtom("[]");
    static /*List*/Object s3 = makeList(si1, s2);
    static /*Symbol*/Object s4 = makeAtom("error", 1);
    static /*IntegerTerm*/Object si5 = makeInteger(73);
    static /*List*/Object s6 = makeList(si5, s2);
    static /*Symbol*/Object s7 = makeAtom("number", 1);
    static /*IntegerTerm*/Object si8 = makeInteger(68);
    static /*List*/Object s9 = makeList(si8, s2);
    static /*IntegerTerm*/Object si10 = makeInteger(65);
    static /*List*/Object s11 = makeList(si10, s2);
    static /*Symbol*/Object s12 = makeAtom("atom", 1);
    static /*IntegerTerm*/Object si13 = makeInteger(86);
    static /*List*/Object s14 = makeList(si13, s2);
    static /*Symbol*/Object s15 = makeAtom("var", 1);
    static /*IntegerTerm*/Object si16 = makeInteger(83);
    static /*List*/Object s17 = makeList(si16, s2);
    static /*Symbol*/Object s18 = makeAtom("string", 1);
    static Predicate _$read_token1_3_var = new PRED_$read_token1_3_var();
    static Predicate _$read_token1_3_var_1 = new PRED_$read_token1_3_var_1();
    static Predicate _$read_token1_3_var_2 = new PRED_$read_token1_3_var_2();
    static Predicate _$read_token1_3_var_3 = new PRED_$read_token1_3_var_3();
    static Predicate _$read_token1_3_var_4 = new PRED_$read_token1_3_var_4();
    static Predicate _$read_token1_3_var_5 = new PRED_$read_token1_3_var_5();
    static Predicate _$read_token1_3_var_6 = new PRED_$read_token1_3_var_6();
    static Predicate _$read_token1_3_1 = new PRED_$read_token1_3_1();
    static Predicate _$read_token1_3_2 = new PRED_$read_token1_3_2();
    static Predicate _$read_token1_3_3 = new PRED_$read_token1_3_3();
    static Predicate _$read_token1_3_4 = new PRED_$read_token1_3_4();
    static Predicate _$read_token1_3_5 = new PRED_$read_token1_3_5();
    static Predicate _$read_token1_3_6 = new PRED_$read_token1_3_6();
    static Predicate _$read_token1_3_7 = new PRED_$read_token1_3_7();

    public Object arg1, arg2, arg3;

    public PRED_$read_token1_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$read_token1_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$read_token1"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$read_token1'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$read_token1_3_var, _$read_token1_3_7, _$read_token1_3_7, _$read_token1_3_7, _$read_token1_3_7, _$read_token1_3_var);
    }
}

class PRED_$read_token1_3_var extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$read_token1_3_1, _$read_token1_3_var_1);
    }
}

class PRED_$read_token1_3_var_1 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_token1_3_2, _$read_token1_3_var_2);
    }
}

class PRED_$read_token1_3_var_2 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_token1_3_3, _$read_token1_3_var_3);
    }
}

class PRED_$read_token1_3_var_3 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_token1_3_4, _$read_token1_3_var_4);
    }
}

class PRED_$read_token1_3_var_4 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_token1_3_5, _$read_token1_3_var_5);
    }
}

class PRED_$read_token1_3_var_5 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_token1_3_6, _$read_token1_3_var_6);
    }
}

class PRED_$read_token1_3_var_6 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$read_token1_3_7);
    }
}

class PRED_$read_token1_3_1 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_token1'([-2], A, error(A)):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$read_token1'([-2], A, error(A)):-['$neck_cut']
        if (! unify(s3,a1))
            return fail(engine);
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s4,a3))
                return fail(engine);
            Object[] args = args(a3);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a3)){
            Object[] args = {a2};
            bind(/*VAR*/ a3,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_token1_3_2 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_token1'([73], A, number(A)):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$read_token1'([73], A, number(A)):-['$neck_cut']
        if (! unify(s6,a1))
            return fail(engine);
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s7,a3))
                return fail(engine);
            Object[] args = args(a3);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a3)){
            Object[] args = {a2};
            bind(/*VAR*/ a3,makeStructure(s7, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_token1_3_3 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_token1'([68], A, number(A)):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$read_token1'([68], A, number(A)):-['$neck_cut']
        if (! unify(s9,a1))
            return fail(engine);
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s7,a3))
                return fail(engine);
            Object[] args = args(a3);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a3)){
            Object[] args = {a2};
            bind(/*VAR*/ a3,makeStructure(s7, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_token1_3_4 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_token1'([65], A, atom(A)):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$read_token1'([65], A, atom(A)):-['$neck_cut']
        if (! unify(s11,a1))
            return fail(engine);
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s12,a3))
                return fail(engine);
            Object[] args = args(a3);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a3)){
            Object[] args = {a2};
            bind(/*VAR*/ a3,makeStructure(s12, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_token1_3_5 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_token1'([86], A, var(A)):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$read_token1'([86], A, var(A)):-['$neck_cut']
        if (! unify(s14,a1))
            return fail(engine);
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s15,a3))
                return fail(engine);
            Object[] args = args(a3);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a3)){
            Object[] args = {a2};
            bind(/*VAR*/ a3,makeStructure(s15, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_token1_3_6 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_token1'([83], A, string(A)):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$read_token1'([83], A, string(A)):-['$neck_cut']
        if (! unify(s17,a1))
            return fail(engine);
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s18,a3))
                return fail(engine);
            Object[] args = args(a3);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a3)){
            Object[] args = {a2};
            bind(/*VAR*/ a3,makeStructure(s18, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_token1_3_7 extends PRED_$read_token1_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_token1'(A, B, B):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$read_token1'(A, B, B):-['$neck_cut']
        if (! unify(a2,a3))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}
