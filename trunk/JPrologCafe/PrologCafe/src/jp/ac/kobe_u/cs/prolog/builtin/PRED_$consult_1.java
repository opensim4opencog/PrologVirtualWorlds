package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$consult'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$consult_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("read");
    static /*Symbol*/Object s2 = makeAtom("file_name", 1);
    static /*Symbol*/Object s3 = makeAtom("info");
    static /*Symbol*/Object s4 = makeAtom("consulting");
    static /*Symbol*/Object s5 = makeAtom("...");
    static /*Symbol*/Object s6 = makeAtom("[]");
    static /*List*/Object s7 = makeList(s5, s6);
    static /*Symbol*/Object s8 = makeAtom("runtime");
    static /*Symbol*/Object s9 = makeAtom("end_of_file");
    static /*Symbol*/Object s10 = makeAtom("consulted,");
    static /*Symbol*/Object s11 = makeAtom("msec");
    static /*List*/Object s12 = makeList(s11, s6);

    public Object arg1;

    public PRED_$consult_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$consult_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$consult"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$consult'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
    // '$consult'(A):-'$prolog_file_name'(A, B), open(B, read, C), stream_property(C, file_name(D)), print_message(info, [consulting, D, ...]), statistics(runtime, E), '$consult_init'(D), repeat, read(C, F), '$consult_clause'(F), F==end_of_file, !, statistics(runtime, [G, H]), print_message(info, [D, 'consulted,', H, msec]), close(C)
        engine.setB0();
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13;
        a1 = arg1;
    // '$consult'(A):-['$get_level'(B), '$prolog_file_name'(A, C), open(C, read, D), stream_property(D, file_name(E)), print_message(info, [consulting, E, ...]), statistics(runtime, F), '$consult_init'(E), repeat, read(D, G), '$consult_clause'(G), '$equality_of_term'(G, end_of_file), '$cut'(B), statistics(runtime, [H, I]), print_message(info, [E, 'consulted,', I, msec]), close(D)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a3 = engine.makeVariable(this);
        a4 = engine.makeVariable(this);
        a5 = engine.makeVariable(this);
        Object[] y1 = {a5};
        a6 = makeStructure(s2, y1);
        a7 = makeList(a5, s7);
        a8 = makeList(s4, a7);
        a9 = engine.makeVariable(this);
        a10 = engine.makeVariable(this);
        a11 = makeList(a10, s6);
        a12 = makeList(engine.makeVariable(this), a11);
        a13 = makeList(a10, s12);
        a14 = makeList(s10, a13);
        a15 = makeList(a5, a14);
        p1 = new PRED_close_1(a4, cont);
        p2 = new PRED_print_message_2(s3, a15, p1);
        p3 = new PRED_statistics_2(s8, a12, p2);
        p4 = new PRED_$cut_1(a2, p3);
        p5 = new PRED_$equality_of_term_2(a9, s9, p4);
        p6 = new PRED_$consult_clause_1(a9, p5);
        p7 = new PRED_read_2(a4, a9, p6);
        p8 = new PRED_repeat_0(p7);
        p9 = new PRED_$consult_init_1(a5, p8);
        p10 = new PRED_statistics_2(s8, engine.makeVariable(this), p9);
        p11 = new PRED_print_message_2(s3, a8, p10);
        p12 = new PRED_stream_property_2(a4, a6, p11);
        p13 = new PRED_open_3(a3, s1, a4, p12);
        return exit(engine, new PRED_$prolog_file_name_2(a1, a3, p13));
    }
}
