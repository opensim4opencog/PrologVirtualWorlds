package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$atom_type'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$atom_type_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("alpha");
    static /*IntegerTerm*/Object si2 = makeInteger(0);
    static /*Symbol*/Object s3 = makeAtom("symbol");
    static /*IntegerTerm*/Object si4 = makeInteger(1);
    static /*Symbol*/Object s5 = makeAtom("punct");
    static /*IntegerTerm*/Object si6 = makeInteger(2);
    static /*Symbol*/Object s7 = makeAtom("other");
    static /*IntegerTerm*/Object si8 = makeInteger(3);
    static Predicate _$atom_type_2_sub_1 = new PRED_$atom_type_2_sub_1();
    static Predicate _$atom_type_2_sub_2 = new PRED_$atom_type_2_sub_2();
    static Predicate _$atom_type_2_sub_3 = new PRED_$atom_type_2_sub_3();
    static Predicate _$atom_type_2_1 = new PRED_$atom_type_2_1();
    static Predicate _$atom_type_2_2 = new PRED_$atom_type_2_2();
    static Predicate _$atom_type_2_3 = new PRED_$atom_type_2_3();
    static Predicate _$atom_type_2_4 = new PRED_$atom_type_2_4();

    public Object arg1, arg2;

    public PRED_$atom_type_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$atom_type_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$atom_type"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$atom_type'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$atom_type_2_1, _$atom_type_2_sub_1);
    }
}

class PRED_$atom_type_2_sub_1 extends PRED_$atom_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$atom_type_2_2, _$atom_type_2_sub_2);
    }
}

class PRED_$atom_type_2_sub_2 extends PRED_$atom_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$atom_type_2_3, _$atom_type_2_sub_3);
    }
}

class PRED_$atom_type_2_sub_3 extends PRED_$atom_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$atom_type_2_4);
    }
}

class PRED_$atom_type_2_1 extends PRED_$atom_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$atom_type'(A, alpha):-'$atom_type0'(A, 0), !
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$atom_type'(A, alpha):-['$get_level'(B), '$atom_type0'(A, 0), '$cut'(B)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s1))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s1);
        } else {
            return fail(engine);
        }
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return exit(engine, new PRED_$atom_type0_2(a1, si2, p1));
    }
}

class PRED_$atom_type_2_2 extends PRED_$atom_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$atom_type'(A, symbol):-'$atom_type0'(A, 1), !
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$atom_type'(A, symbol):-['$get_level'(B), '$atom_type0'(A, 1), '$cut'(B)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s3))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s3);
        } else {
            return fail(engine);
        }
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return exit(engine, new PRED_$atom_type0_2(a1, si4, p1));
    }
}

class PRED_$atom_type_2_3 extends PRED_$atom_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$atom_type'(A, punct):-'$atom_type0'(A, 2), !
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$atom_type'(A, punct):-['$get_level'(B), '$atom_type0'(A, 2), '$cut'(B)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s5))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s5);
        } else {
            return fail(engine);
        }
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return exit(engine, new PRED_$atom_type0_2(a1, si6, p1));
    }
}

class PRED_$atom_type_2_4 extends PRED_$atom_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$atom_type'(A, other):-'$atom_type0'(A, 3), !
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$atom_type'(A, other):-['$get_level'(B), '$atom_type0'(A, 3), '$cut'(B)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s7))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s7);
        } else {
            return fail(engine);
        }
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return exit(engine, new PRED_$atom_type0_2(a1, si8, p1));
    }
}
