package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_dynamic_body'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_dynamic_body_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(",", 2);
    static /*Symbol*/Object s2 = makeAtom(",");
    static /*Symbol*/Object s3 = makeAtom(";", 2);
    static /*IntegerTerm*/Object si4 = makeInteger(4);
    static /*Symbol*/Object s5 = makeAtom("(");
    static /*Symbol*/Object s6 = makeAtom(";");
    static /*Symbol*/Object s7 = makeAtom(")");
    static /*Symbol*/Object s8 = makeAtom("->", 2);
    static /*Symbol*/Object s9 = makeAtom("->");
    static Predicate _$write_dynamic_body_2_top = new PRED_$write_dynamic_body_2_top();
    static Predicate _$write_dynamic_body_2_var = new PRED_$write_dynamic_body_2_var();
    static Predicate _$write_dynamic_body_2_var_1 = new PRED_$write_dynamic_body_2_var_1();
    static Predicate _$write_dynamic_body_2_var_2 = new PRED_$write_dynamic_body_2_var_2();
    static Predicate _$write_dynamic_body_2_var_3 = new PRED_$write_dynamic_body_2_var_3();
    static Predicate _$write_dynamic_body_2_str = new PRED_$write_dynamic_body_2_str();
    static Predicate _$write_dynamic_body_2_str_0 = new PRED_$write_dynamic_body_2_str_0();
    static Predicate _$write_dynamic_body_2_str_0_1 = new PRED_$write_dynamic_body_2_str_0_1();
    static Predicate _$write_dynamic_body_2_str_1 = new PRED_$write_dynamic_body_2_str_1();
    static Predicate _$write_dynamic_body_2_str_1_1 = new PRED_$write_dynamic_body_2_str_1_1();
    static Predicate _$write_dynamic_body_2_str_2 = new PRED_$write_dynamic_body_2_str_2();
    static Predicate _$write_dynamic_body_2_str_2_1 = new PRED_$write_dynamic_body_2_str_2_1();
    static Predicate _$write_dynamic_body_2_1 = new PRED_$write_dynamic_body_2_1();
    static Predicate _$write_dynamic_body_2_2 = new PRED_$write_dynamic_body_2_2();
    static Predicate _$write_dynamic_body_2_3 = new PRED_$write_dynamic_body_2_3();
    static Predicate _$write_dynamic_body_2_4 = new PRED_$write_dynamic_body_2_4();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(3);
    static {
        str.put(s1, _$write_dynamic_body_2_str_0);
        str.put(s3, _$write_dynamic_body_2_str_1);
        str.put(s8, _$write_dynamic_body_2_str_2);
    }

    public Object arg1, arg2;

    public PRED_$write_dynamic_body_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$write_dynamic_body_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$write_dynamic_body"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_dynamic_body'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        return exit(engine, _$write_dynamic_body_2_top);
    }
}

class PRED_$write_dynamic_body_2_top extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$write_dynamic_body_2_var, _$write_dynamic_body_2_4, _$write_dynamic_body_2_4, _$write_dynamic_body_2_4, _$write_dynamic_body_2_str, _$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_var extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_dynamic_body_2_1, _$write_dynamic_body_2_var_1);
    }
}

class PRED_$write_dynamic_body_2_var_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_dynamic_body_2_2, _$write_dynamic_body_2_var_2);
    }
}

class PRED_$write_dynamic_body_2_var_2 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_dynamic_body_2_3, _$write_dynamic_body_2_var_3);
    }
}

class PRED_$write_dynamic_body_2_var_3 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str_0 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_dynamic_body_2_1, _$write_dynamic_body_2_str_0_1);
    }
}

class PRED_$write_dynamic_body_2_str_0_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_dynamic_body_2_2, _$write_dynamic_body_2_str_1_1);
    }
}

class PRED_$write_dynamic_body_2_str_1_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_str_2 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_dynamic_body_2_3, _$write_dynamic_body_2_str_2_1);
    }
}

class PRED_$write_dynamic_body_2_str_2_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_dynamic_body_2_4);
    }
}

class PRED_$write_dynamic_body_2_1 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_body'((A, B), C):-!, '$write_dynamic_body'(A, C), write((',')), nl, '$write_dynamic_body'(B, C)
        Object a1, a2, a3, a4;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'((A, B), C):-['$neck_cut', '$write_dynamic_body'(A, C), write((',')), nl, '$write_dynamic_body'(B, C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$write_dynamic_body_2(a4, a2, cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_write_1(s2, p2);
        engine_aregs[1] = a3;
        engine_aregs[2] = a2;
        engine.cont = p3;
        return exit(engine, _$write_dynamic_body_2_top);
    }
}

class PRED_$write_dynamic_body_2_2 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_body'((A;B), C):-!, D is C+4, tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((;)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')')
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'((A;B), C):-['$neck_cut', '$plus'(C, 4, D), tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((;)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')')]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s3,a1))
                return fail(engine);
            Object[] args = args(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a1,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a5 = engine.makeVariable(this);
        //START inline expansion of $plus(a(2), si(4), a(5))
        try {
            if (! unify(a5,add(Arithmetic.evaluate(a2),si4))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        p1 = new PRED_write_1(s7, cont);
        p2 = new PRED_tab_1(a2, p1);
        p3 = new PRED_nl_0(p2);
        p4 = new PRED_$write_dynamic_body_2(a4, a5, p3);
        p5 = new PRED_nl_0(p4);
        p6 = new PRED_write_1(s6, p5);
        p7 = new PRED_tab_1(a2, p6);
        p8 = new PRED_nl_0(p7);
        p9 = new PRED_$write_dynamic_body_2(a3, a5, p8);
        p10 = new PRED_nl_0(p9);
        p11 = new PRED_write_1(s5, p10);
        return exit(engine, new PRED_tab_1(a2, p11));
    }
}

class PRED_$write_dynamic_body_2_3 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_body'((A->B), C):-!, D is C+4, tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((->)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')')
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'((A->B), C):-['$neck_cut', '$plus'(C, 4, D), tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((->)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')')]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s8,a1))
                return fail(engine);
            Object[] args = args(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a1,makeStructure(s8, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a5 = engine.makeVariable(this);
        //START inline expansion of $plus(a(2), si(4), a(5))
        try {
            if (! unify(a5,add(Arithmetic.evaluate(a2),si4))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        p1 = new PRED_write_1(s7, cont);
        p2 = new PRED_tab_1(a2, p1);
        p3 = new PRED_nl_0(p2);
        p4 = new PRED_$write_dynamic_body_2(a4, a5, p3);
        p5 = new PRED_nl_0(p4);
        p6 = new PRED_write_1(s9, p5);
        p7 = new PRED_tab_1(a2, p6);
        p8 = new PRED_nl_0(p7);
        p9 = new PRED_$write_dynamic_body_2(a3, a5, p8);
        p10 = new PRED_nl_0(p9);
        p11 = new PRED_write_1(s5, p10);
        return exit(engine, new PRED_tab_1(a2, p11));
    }
}

class PRED_$write_dynamic_body_2_4 extends PRED_$write_dynamic_body_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_body'(A, B):-tab(B), writeq(A)
        Object a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_body'(A, B):-[tab(B), writeq(A)]
        p1 = new PRED_writeq_1(a1, cont);
        return exit(engine, new PRED_tab_1(a2, p1));
    }
}
