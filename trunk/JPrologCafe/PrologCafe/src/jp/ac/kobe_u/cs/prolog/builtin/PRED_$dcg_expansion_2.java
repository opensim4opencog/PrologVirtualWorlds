package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_expansion'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$dcg_expansion_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("-->", 2);
    static /*Symbol*/Object s3 = makeAtom(":-", 2);
    static /*Symbol*/Object s4 = makeAtom(",", 2);
    static Predicate _$dcg_expansion_2_top = new PRED_$dcg_expansion_2_top();
    static Predicate _$dcg_expansion_2_var = new PRED_$dcg_expansion_2_var();
    static Predicate _$dcg_expansion_2_var_1 = new PRED_$dcg_expansion_2_var_1();
    static Predicate _$dcg_expansion_2_var_2 = new PRED_$dcg_expansion_2_var_2();
    static Predicate _$dcg_expansion_2_var_3 = new PRED_$dcg_expansion_2_var_3();
    static Predicate _$dcg_expansion_2_str = new PRED_$dcg_expansion_2_str();
    static Predicate _$dcg_expansion_2_str_0 = new PRED_$dcg_expansion_2_str_0();
    static Predicate _$dcg_expansion_2_str_0_1 = new PRED_$dcg_expansion_2_str_0_1();
    static Predicate _$dcg_expansion_2_str_1 = new PRED_$dcg_expansion_2_str_1();
    static Predicate _$dcg_expansion_2_str_1_1 = new PRED_$dcg_expansion_2_str_1_1();
    static Predicate _$dcg_expansion_2_str_1_2 = new PRED_$dcg_expansion_2_str_1_2();
    static Predicate _$dcg_expansion_2_1 = new PRED_$dcg_expansion_2_1();
    static Predicate _$dcg_expansion_2_2 = new PRED_$dcg_expansion_2_2();
    static Predicate _$dcg_expansion_2_3 = new PRED_$dcg_expansion_2_3();
    static Predicate _$dcg_expansion_2_4 = new PRED_$dcg_expansion_2_4();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(2);
    static {
        str.put(s1, _$dcg_expansion_2_str_0);
        str.put(s2, _$dcg_expansion_2_str_1);
    }

    public Object arg1, arg2;

    public PRED_$dcg_expansion_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$dcg_expansion_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$dcg_expansion"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$dcg_expansion'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        return exit(engine, _$dcg_expansion_2_top);
    }
}

class PRED_$dcg_expansion_2_top extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$dcg_expansion_2_var, _$dcg_expansion_2_1, _$dcg_expansion_2_1, _$dcg_expansion_2_1, _$dcg_expansion_2_str, _$dcg_expansion_2_1);
    }
}

class PRED_$dcg_expansion_2_var extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_expansion_2_1, _$dcg_expansion_2_var_1);
    }
}

class PRED_$dcg_expansion_2_var_1 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_expansion_2_2, _$dcg_expansion_2_var_2);
    }
}

class PRED_$dcg_expansion_2_var_2 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_expansion_2_3, _$dcg_expansion_2_var_3);
    }
}

class PRED_$dcg_expansion_2_var_3 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_expansion_2_4);
    }
}

class PRED_$dcg_expansion_2_str extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$dcg_expansion_2_1);
    }
}

class PRED_$dcg_expansion_2_str_0 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_expansion_2_1, _$dcg_expansion_2_str_0_1);
    }
}

class PRED_$dcg_expansion_2_str_0_1 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_expansion_2_2);
    }
}

class PRED_$dcg_expansion_2_str_1 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_expansion_2_1, _$dcg_expansion_2_str_1_1);
    }
}

class PRED_$dcg_expansion_2_str_1_1 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_expansion_2_3, _$dcg_expansion_2_str_1_2);
    }
}

class PRED_$dcg_expansion_2_str_1_2 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_expansion_2_4);
    }
}

class PRED_$dcg_expansion_2_1 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_expansion'(A, B):-var(A), !, A=B
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$dcg_expansion'(A, B):-['$get_level'(C), var(A), '$cut'(C), '$unify'(A, B)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        //START inline expansion of $unify(a(1), a(2))
        if (! unify(a1,a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_expansion_2_2 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_expansion'(A:B, A:C):-!, '$dcg_expansion'(B, C)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$dcg_expansion'(A:B, A:C):-['$neck_cut', '$dcg_expansion'(B, C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s1,a2))
                return fail(engine);
            Object[] args = args(a2);
            if (!unify( a3,args[0]))
                return fail(engine);
            a5 = args[1];
        } else if (isVariable(a2)){
            a5 = engine.makeVariable(this);
            Object[] args = {a3, a5};
            bind(/*VAR*/ a2,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a4;
        engine_aregs[2] = a5;
        engine.cont = cont;
        return exit(engine, _$dcg_expansion_2_top);
    }
}

class PRED_$dcg_expansion_2_3 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_expansion'((A-->B), (C:-D, E)):-nonvar(A), A= (F, G), !, '$dcg_translate_dcg_atom'(F, C, H, I), '$dcg_translate_dcg'(B, D, H, J), '$dcg_translate_dcg'(G, E, I, J)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$dcg_expansion'((A-->B), (C:-D, E)):-['$get_level'(F), nonvar(A), '$unify'(A, (G, H)), '$cut'(F), '$dcg_translate_dcg_atom'(G, C, I, J), '$dcg_translate_dcg'(B, D, I, K), '$dcg_translate_dcg'(H, E, J, K)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s3,a2))
                return fail(engine);
            Object[] args = args(a2);
            a5 = args[0];
            a6 = args[1];
        } else if (isVariable(a2)){
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a5, a6};
            bind(/*VAR*/ a2,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s4,a6))
                return fail(engine);
            Object[] args = args(a6);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a6)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a7, a8};
            bind(/*VAR*/ a6,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        a9 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(9))
        if (! unify(a9,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of nonvar(a(3))
        a3 = deref( a3);
        if (isVariable(a3)) {
            return fail(engine);
        }
        //END inline expansion
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        Object[] y1 = {a10, a11};
        a12 = makeStructure(s4, y1);
        //START inline expansion of $unify(a(3), a(12))
        if (! unify(a3,a12)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(9))
        a9 = deref( a9);
        if (! isCutter/*Integer*/(a9)) {
            throw new IllegalTypeException("integer", a9);
        } else {
            engine.cut(( a9));
        }
        //END inline expansion
        a13 = engine.makeVariable(this);
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        p1 = new PRED_$dcg_translate_dcg_4(a11, a8, a14, a15, cont);
        p2 = new PRED_$dcg_translate_dcg_4(a4, a7, a13, a15, p1);
        return exit(engine, new PRED_$dcg_translate_dcg_atom_4(a10, a5, a13, a14, p2));
    }
}

class PRED_$dcg_expansion_2_4 extends PRED_$dcg_expansion_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_expansion'((A-->B), (C:-D)):-'$dcg_translate_dcg_atom'(A, C, E, F), '$dcg_translate_dcg'(B, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$dcg_expansion'((A-->B), (C:-D)):-['$dcg_translate_dcg_atom'(A, C, E, F), '$dcg_translate_dcg'(B, D, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s3,a2))
                return fail(engine);
            Object[] args = args(a2);
            a5 = args[0];
            a6 = args[1];
        } else if (isVariable(a2)){
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a5, a6};
            bind(/*VAR*/ a2,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        a8 = engine.makeVariable(this);
        p1 = new PRED_$dcg_translate_dcg_4(a4, a6, a7, a8, cont);
        return exit(engine, new PRED_$dcg_translate_dcg_atom_4(a3, a5, a7, a8, p1));
    }
}
