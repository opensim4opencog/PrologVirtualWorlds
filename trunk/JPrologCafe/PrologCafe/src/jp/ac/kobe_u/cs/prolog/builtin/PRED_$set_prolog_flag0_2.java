package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$set_prolog_flag0'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$set_prolog_flag0_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("changeable", 1);
    static /*Symbol*/Object s2 = makeAtom("domain", 2);
    static /*Symbol*/Object s3 = makeAtom("atom");
    static /*Symbol*/Object s4 = makeAtom("prolog_flag");
    static Object[] s5 = {s3, s4};
    static /*Structure*/Object s6 = makeStructure(s2, s5);
    static /*Symbol*/Object s7 = makeAtom("set_prolog_flag", 2);
    static /*IntegerTerm*/Object si8 = makeInteger(1);
    static Predicate _$set_prolog_flag0_2_sub_1 = new PRED_$set_prolog_flag0_2_sub_1();
    static Predicate _$set_prolog_flag0_2_1 = new PRED_$set_prolog_flag0_2_1();
    static Predicate _$set_prolog_flag0_2_2 = new PRED_$set_prolog_flag0_2_2();

    public Object arg1, arg2;

    public PRED_$set_prolog_flag0_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$set_prolog_flag0_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$set_prolog_flag0"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$set_prolog_flag0'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$set_prolog_flag0_2_1, _$set_prolog_flag0_2_sub_1);
    }
}

class PRED_$set_prolog_flag0_2_sub_1 extends PRED_$set_prolog_flag0_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$set_prolog_flag0_2_2);
    }
}

class PRED_$set_prolog_flag0_2_1 extends PRED_$set_prolog_flag0_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$set_prolog_flag0'(A, B):-'$prolog_impl_flag'(A, C, changeable(D)), !, '$set_prolog_flag0'(D, A, B, C)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$set_prolog_flag0'(A, B):-['$get_level'(C), '$prolog_impl_flag'(A, D, changeable(E)), '$cut'(C), '$set_prolog_flag0'(E, A, B, D)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a4 = engine.makeVariable(this);
        a5 = engine.makeVariable(this);
        Object[] y1 = {a5};
        a6 = makeStructure(s1, y1);
        p1 = new PRED_$set_prolog_flag0_4(a5, a1, a2, a4, cont);
        p2 = new PRED_$cut_1(a3, p1);
        return exit(engine, new PRED_$prolog_impl_flag_3(a1, a4, a6, p2));
    }
}

class PRED_$set_prolog_flag0_2_2 extends PRED_$set_prolog_flag0_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$set_prolog_flag0'(A, B):-illarg(domain(atom, prolog_flag), set_prolog_flag(A, B), 1)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$set_prolog_flag0'(A, B):-[illarg(domain(atom, prolog_flag), set_prolog_flag(A, B), 1)]
        Object[] y1 = {a1, a2};
        a3 = makeStructure(s7, y1);
        return exit(engine, new PRED_illarg_3(s6, a3, si8, cont));
    }
}
