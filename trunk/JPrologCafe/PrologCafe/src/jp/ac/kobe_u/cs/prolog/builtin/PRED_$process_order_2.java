package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$process_order'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$process_order_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*Symbol*/Object s2 = makeAtom("?-", 1);
    static /*IntegerTerm*/Object si3 = makeInteger(1);
    static /*Symbol*/Object s4 = makeAtom("end_of_file");
    static /*Symbol*/Object s5 = makeAtom("debug");
    static /*Symbol*/Object s6 = makeAtom("yes");
    static /*Symbol*/Object s7 = makeAtom("no");
    static Predicate _$process_order_2_var = new PRED_$process_order_2_var();
    static Predicate _$process_order_2_var_1 = new PRED_$process_order_2_var_1();
    static Predicate _$process_order_2_var_2 = new PRED_$process_order_2_var_2();
    static Predicate _$process_order_2_var_3 = new PRED_$process_order_2_var_3();
    static Predicate _$process_order_2_var_4 = new PRED_$process_order_2_var_4();
    static Predicate _$process_order_2_int = new PRED_$process_order_2_int();
    static Predicate _$process_order_2_int_1 = new PRED_$process_order_2_int_1();
    static Predicate _$process_order_2_int_2 = new PRED_$process_order_2_int_2();
    static Predicate _$process_order_2_con = new PRED_$process_order_2_con();
    static Predicate _$process_order_2_con_1 = new PRED_$process_order_2_con_1();
    static Predicate _$process_order_2_con_2 = new PRED_$process_order_2_con_2();
    static Predicate _$process_order_2_con_3 = new PRED_$process_order_2_con_3();
    static Predicate _$process_order_2_lis = new PRED_$process_order_2_lis();
    static Predicate _$process_order_2_lis_1 = new PRED_$process_order_2_lis_1();
    static Predicate _$process_order_2_lis_2 = new PRED_$process_order_2_lis_2();
    static Predicate _$process_order_2_lis_3 = new PRED_$process_order_2_lis_3();
    static Predicate _$process_order_2_1 = new PRED_$process_order_2_1();
    static Predicate _$process_order_2_2 = new PRED_$process_order_2_2();
    static Predicate _$process_order_2_3 = new PRED_$process_order_2_3();
    static Predicate _$process_order_2_4 = new PRED_$process_order_2_4();
    static Predicate _$process_order_2_5 = new PRED_$process_order_2_5();

    public Object arg1, arg2;

    public PRED_$process_order_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$process_order_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$process_order"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$process_order'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$process_order_2_var, _$process_order_2_int, _$process_order_2_int, _$process_order_2_con, _$process_order_2_int, _$process_order_2_lis);
    }
}

class PRED_$process_order_2_var extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$process_order_2_1, _$process_order_2_var_1);
    }
}

class PRED_$process_order_2_var_1 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_2, _$process_order_2_var_2);
    }
}

class PRED_$process_order_2_var_2 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_3, _$process_order_2_var_3);
    }
}

class PRED_$process_order_2_var_3 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_4, _$process_order_2_var_4);
    }
}

class PRED_$process_order_2_var_4 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$process_order_2_5);
    }
}

class PRED_$process_order_2_int extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$process_order_2_1, _$process_order_2_int_1);
    }
}

class PRED_$process_order_2_int_1 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_4, _$process_order_2_int_2);
    }
}

class PRED_$process_order_2_int_2 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$process_order_2_5);
    }
}

class PRED_$process_order_2_con extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$process_order_2_1, _$process_order_2_con_1);
    }
}

class PRED_$process_order_2_con_1 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_2, _$process_order_2_con_2);
    }
}

class PRED_$process_order_2_con_2 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_4, _$process_order_2_con_3);
    }
}

class PRED_$process_order_2_con_3 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$process_order_2_5);
    }
}

class PRED_$process_order_2_lis extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$process_order_2_1, _$process_order_2_lis_1);
    }
}

class PRED_$process_order_2_lis_1 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_3, _$process_order_2_lis_2);
    }
}

class PRED_$process_order_2_lis_2 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$process_order_2_4, _$process_order_2_lis_3);
    }
}

class PRED_$process_order_2_lis_3 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$process_order_2_5);
    }
}

class PRED_$process_order_2_1 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$process_order'(A, B):-var(A), !, illarg(var, (?-A), 1)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$process_order'(A, B):-['$get_level'(C), var(A), '$cut'(C), illarg(var, (?-A), 1)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        Object[] y1 = {a1};
        a4 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s1, a4, si3, cont));
    }
}

class PRED_$process_order_2_2 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$process_order'(end_of_file, A):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$process_order'(end_of_file, A):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s4))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s4);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$process_order_2_3 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$process_order'([A|B], C):-!, consult([A|B])
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$process_order'([A|B], C):-['$neck_cut', consult([A|B])]
        a1 = deref( a1);
        if (isListTerm(a1)){
            Object[] args = consArgs(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
             bind(a1,makeList(a3, a4));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a5 = makeList(a3, a4);
        return exit(engine, new PRED_consult_1(a5, cont));
    }
}

class PRED_$process_order_2_4 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$process_order'(A, B):-current_prolog_flag(debug, C), '$dummy_26_builtins.pl'(A, C), nl, '$rm_redundant_vars'(B, D), '$give_answers_with_prompt'(D), !, '$fast_write'(yes), nl
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$process_order'(A, B):-['$get_level'(C), current_prolog_flag(debug, D), '$dummy_26_builtins.pl'(A, D), nl, '$rm_redundant_vars'(B, E), '$give_answers_with_prompt'(E), '$cut'(C), '$fast_write'(yes), nl]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a4 = engine.makeVariable(this);
        a5 = engine.makeVariable(this);
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s6, p1);
        p3 = new PRED_$cut_1(a3, p2);
        p4 = new PRED_$give_answers_with_prompt_1(a5, p3);
        p5 = new PRED_$rm_redundant_vars_2(a2, a5, p4);
        p6 = new PRED_nl_0(p5);
        p7 = new PRED_$dummy_26_builtins$002Epl_2(a1, a4, p6);
        return exit(engine, new PRED_current_prolog_flag_2(s5, a4, p7));
    }
}

class PRED_$process_order_2_5 extends PRED_$process_order_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$process_order'(A, B):-nl, '$fast_write'(no), nl
        Object a1, a2;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$process_order'(A, B):-[nl, '$fast_write'(no), nl]
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s7, p1);
        return exit(engine, new PRED_nl_0(p2));
    }
}
