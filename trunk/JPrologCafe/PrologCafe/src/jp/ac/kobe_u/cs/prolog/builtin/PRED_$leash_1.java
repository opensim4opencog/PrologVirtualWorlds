package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$leash'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$leash_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("[]");
    static /*Symbol*/Object s2 = makeAtom(":", 2);
    static /*Symbol*/Object s3 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s4 = makeAtom("$current_leash", 1);
    static /*Symbol*/Object s5 = makeAtom("info");
    static /*Symbol*/Object s6 = makeAtom("no");
    static /*Symbol*/Object s7 = makeAtom("leashing");
    static /*List*/Object s8 = makeList(s7, s1);
    static /*List*/Object s9 = makeList(s6, s8);
    static /*Symbol*/Object s10 = makeAtom("stopping");
    static /*Symbol*/Object s11 = makeAtom("on");
    static Predicate _$leash_1_var = new PRED_$leash_1_var();
    static Predicate _$leash_1_var_1 = new PRED_$leash_1_var_1();
    static Predicate _$leash_1_1 = new PRED_$leash_1_1();
    static Predicate _$leash_1_2 = new PRED_$leash_1_2();

    public Object arg1;

    public PRED_$leash_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$leash_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$leash"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$leash'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$leash_1_var, _$leash_1_2, _$leash_1_2, _$leash_1_var, _$leash_1_2, _$leash_1_2);
    }
}

class PRED_$leash_1_var extends PRED_$leash_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$leash_1_1, _$leash_1_var_1);
    }
}

class PRED_$leash_1_var_1 extends PRED_$leash_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$leash_1_2);
    }
}

class PRED_$leash_1_1 extends PRED_$leash_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$leash'([]):-!, retractall('$current_leash'(A)), print_message(info, [no, leashing])
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$leash'([]):-['$neck_cut', retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(A)), print_message(info, [no, leashing])]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {engine.makeVariable(this)};
        a2 = makeStructure(s4, y1);
        Object[] y2 = {s3, a2};
        a3 = makeStructure(s2, y2);
        p1 = new PRED_print_message_2(s5, s9, cont);
        return exit(engine, new PRED_retractall_1(a3, p1));
    }
}

class PRED_$leash_1_2 extends PRED_$leash_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$leash'(A):-retractall('$current_leash'(B)), '$assert_leash'(A), print_message(info, [leashing, stopping, on, A])
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$leash'(A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(B)), '$assert_leash'(A), print_message(info, [leashing, stopping, on, A])]
        Object[] y1 = {engine.makeVariable(this)};
        a2 = makeStructure(s4, y1);
        Object[] y2 = {s3, a2};
        a3 = makeStructure(s2, y2);
        a4 = makeList(a1, s1);
        a5 = makeList(s11, a4);
        a6 = makeList(s10, a5);
        a7 = makeList(s7, a6);
        p1 = new PRED_print_message_2(s5, a7, cont);
        p2 = new PRED_$assert_leash_1(a1, p1);
        return exit(engine, new PRED_retractall_1(a3, p2));
    }
}
