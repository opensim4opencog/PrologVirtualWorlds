package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_term_op1'/8</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_term_op1_8 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("fx");
    static /*Symbol*/Object s2 = makeAtom("[]");
    static /*IntegerTerm*/Object si3 = makeInteger(1);
    static /*Symbol*/Object s4 = makeAtom("fy");
    static /*Symbol*/Object s5 = makeAtom("xf");
    static /*Symbol*/Object s6 = makeAtom("yf");
    static /*Symbol*/Object s7 = makeAtom("xfx");
    static /*Symbol*/Object s8 = makeAtom("xfy");
    static /*Symbol*/Object s9 = makeAtom("yfx");
    static Predicate _$write_term_op1_8_sub_1 = new PRED_$write_term_op1_8_sub_1();
    static Predicate _$write_term_op1_8_sub_2 = new PRED_$write_term_op1_8_sub_2();
    static Predicate _$write_term_op1_8_sub_3 = new PRED_$write_term_op1_8_sub_3();
    static Predicate _$write_term_op1_8_sub_4 = new PRED_$write_term_op1_8_sub_4();
    static Predicate _$write_term_op1_8_sub_5 = new PRED_$write_term_op1_8_sub_5();
    static Predicate _$write_term_op1_8_sub_6 = new PRED_$write_term_op1_8_sub_6();
    static Predicate _$write_term_op1_8_1 = new PRED_$write_term_op1_8_1();
    static Predicate _$write_term_op1_8_2 = new PRED_$write_term_op1_8_2();
    static Predicate _$write_term_op1_8_3 = new PRED_$write_term_op1_8_3();
    static Predicate _$write_term_op1_8_4 = new PRED_$write_term_op1_8_4();
    static Predicate _$write_term_op1_8_5 = new PRED_$write_term_op1_8_5();
    static Predicate _$write_term_op1_8_6 = new PRED_$write_term_op1_8_6();
    static Predicate _$write_term_op1_8_7 = new PRED_$write_term_op1_8_7();

    public Object arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8;

    public PRED_$write_term_op1_8(Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Object a7, Object a8, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        this.cont = cont;
    }

    public PRED_$write_term_op1_8(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        this.cont = cont;
    }

    public int arity() { return 8; }

    public String nameUQ() { return "$write_term_op1"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
         case 5: arg6 = val;break ;
         case 6: arg7 = val;break ;
         case 7: arg8 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
         case 5: return arg6;
         case 6: return arg7;
         case 7: return arg8;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_term_op1'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + "," + argString(arg6,newParam) + "," + argString(arg7,newParam) + "," + argString(arg8,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine_aregs[6] = arg6;
        engine_aregs[7] = arg7;
        engine_aregs[8] = arg8;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$write_term_op1_8_1, _$write_term_op1_8_sub_1);
    }
}

class PRED_$write_term_op1_8_sub_1 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term_op1_8_2, _$write_term_op1_8_sub_2);
    }
}

class PRED_$write_term_op1_8_sub_2 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term_op1_8_3, _$write_term_op1_8_sub_3);
    }
}

class PRED_$write_term_op1_8_sub_3 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term_op1_8_4, _$write_term_op1_8_sub_4);
    }
}

class PRED_$write_term_op1_8_sub_4 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term_op1_8_5, _$write_term_op1_8_sub_5);
    }
}

class PRED_$write_term_op1_8_sub_5 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term_op1_8_6, _$write_term_op1_8_sub_6);
    }
}

class PRED_$write_term_op1_8_sub_6 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_term_op1_8_7);
    }
}

class PRED_$write_term_op1_8_1 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_op1'(A, fx, [B], C, D, E, F, G):-!, '$write_atom'(A, D, H, F, G), I is C-1, '$write_term0'(B, I, H, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$write_term_op1'(A, fx, [B], C, D, E, F, G):-['$neck_cut', '$write_atom'(A, D, H, F, G), '$minus'(C, 1, I), '$write_term0'(B, I, H, E, F, G)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s1))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s1);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a9 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
             bind(a3,makeList(a9, s2));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        p1 = new PRED_$write_term0_6(a9, a11, a10, a6, a7, a8, cont);
        p2 = new PRED_$minus_3(a4, si3, a11, p1);
        return exit(engine, new PRED_$write_atom_5(a1, a5, a10, a7, a8, p2));
    }
}

class PRED_$write_term_op1_8_2 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_op1'(A, fy, [B], C, D, E, F, G):-!, '$write_atom'(A, D, H, F, G), I is C, '$write_term0'(B, I, H, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$write_term_op1'(A, fy, [B], C, D, E, F, G):-['$neck_cut', '$write_atom'(A, D, H, F, G), I is C, '$write_term0'(B, I, H, E, F, G)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s4))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s4);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a9 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
             bind(a3,makeList(a9, s2));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        p1 = new PRED_$write_term0_6(a9, a11, a10, a6, a7, a8, cont);
        p2 = new PRED_is_2(a11, a4, p1);
        return exit(engine, new PRED_$write_atom_5(a1, a5, a10, a7, a8, p2));
    }
}

class PRED_$write_term_op1_8_3 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_op1'(A, xf, [B], C, D, E, F, G):-!, H is C-1, '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$write_term_op1'(A, xf, [B], C, D, E, F, G):-['$neck_cut', '$minus'(C, 1, H), '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s5))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s5);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a9 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
             bind(a3,makeList(a9, s2));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a10 = engine.makeVariable(this);
        //START inline expansion of $minus(a(4), si(3), a(10))
        try {
            if (! unify(a10,subtract(Arithmetic.evaluate(a4),si3))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a11 = engine.makeVariable(this);
        p1 = new PRED_$write_atom_5(a1, a11, a6, a7, a8, cont);
        return exit(engine, new PRED_$write_term0_6(a9, a10, a5, a11, a7, a8, p1));
    }
}

class PRED_$write_term_op1_8_4 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_op1'(A, yf, [B], C, D, E, F, G):-!, H is C, '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$write_term_op1'(A, yf, [B], C, D, E, F, G):-['$neck_cut', H is C, '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s6))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s6);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a9 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
             bind(a3,makeList(a9, s2));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a10 = engine.makeVariable(this);
        //START inline expansion of a(10)is a(4)
        try {
            if (! unify(a10,Arithmetic.evaluate(a4))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a11 = engine.makeVariable(this);
        p1 = new PRED_$write_atom_5(a1, a11, a6, a7, a8, cont);
        return exit(engine, new PRED_$write_term0_6(a9, a10, a5, a11, a7, a8, p1));
    }
}

class PRED_$write_term_op1_8_5 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_op1'(A, xfx, [B, C], D, E, F, G, H):-!, I is D-1, J is D-1, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$write_term_op1'(A, xfx, [B, C], D, E, F, G, H):-['$neck_cut', '$minus'(D, 1, I), '$minus'(D, 1, J), '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s7))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s7);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a9 = args[0];
            a10 = args[1];
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
            a10 = engine.makeVariable(this);
             bind(a3,makeList(a9, a10));
        } else {
            return fail(engine);
        }
        a10 = deref( a10);
        if (isListTerm(a10)){
            Object[] args = consArgs(a10);
            a11 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a10)){
            a11 = engine.makeVariable(this);
             bind(a10,makeList(a11, s2));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = engine.makeVariable(this);
        //START inline expansion of $minus(a(4), si(3), a(12))
        try {
            if (! unify(a12,subtract(Arithmetic.evaluate(a4),si3))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a13 = engine.makeVariable(this);
        //START inline expansion of $minus(a(4), si(3), a(13))
        try {
            if (! unify(a13,subtract(Arithmetic.evaluate(a4),si3))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        p1 = new PRED_$write_term0_6(a11, a13, a15, a6, a7, a8, cont);
        p2 = new PRED_$write_term_infix_op_5(a1, a14, a15, a7, a8, p1);
        return exit(engine, new PRED_$write_term0_6(a9, a12, a5, a14, a7, a8, p2));
    }
}

class PRED_$write_term_op1_8_6 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_op1'(A, xfy, [B, C], D, E, F, G, H):-!, I is D-1, J is D, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$write_term_op1'(A, xfy, [B, C], D, E, F, G, H):-['$neck_cut', '$minus'(D, 1, I), J is D, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s8))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s8);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a9 = args[0];
            a10 = args[1];
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
            a10 = engine.makeVariable(this);
             bind(a3,makeList(a9, a10));
        } else {
            return fail(engine);
        }
        a10 = deref( a10);
        if (isListTerm(a10)){
            Object[] args = consArgs(a10);
            a11 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a10)){
            a11 = engine.makeVariable(this);
             bind(a10,makeList(a11, s2));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = engine.makeVariable(this);
        //START inline expansion of $minus(a(4), si(3), a(12))
        try {
            if (! unify(a12,subtract(Arithmetic.evaluate(a4),si3))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a13 = engine.makeVariable(this);
        //START inline expansion of a(13)is a(4)
        try {
            if (! unify(a13,Arithmetic.evaluate(a4))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        p1 = new PRED_$write_term0_6(a11, a13, a15, a6, a7, a8, cont);
        p2 = new PRED_$write_term_infix_op_5(a1, a14, a15, a7, a8, p1);
        return exit(engine, new PRED_$write_term0_6(a9, a12, a5, a14, a7, a8, p2));
    }
}

class PRED_$write_term_op1_8_7 extends PRED_$write_term_op1_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term_op1'(A, yfx, [B, C], D, E, F, G, H):-!, I is D, J is D-1, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$write_term_op1'(A, yfx, [B, C], D, E, F, G, H):-['$neck_cut', I is D, '$minus'(D, 1, J), '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)]
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s9))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s9);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            a9 = args[0];
            a10 = args[1];
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
            a10 = engine.makeVariable(this);
             bind(a3,makeList(a9, a10));
        } else {
            return fail(engine);
        }
        a10 = deref( a10);
        if (isListTerm(a10)){
            Object[] args = consArgs(a10);
            a11 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a10)){
            a11 = engine.makeVariable(this);
             bind(a10,makeList(a11, s2));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a12 = engine.makeVariable(this);
        //START inline expansion of a(12)is a(4)
        try {
            if (! unify(a12,Arithmetic.evaluate(a4))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a13 = engine.makeVariable(this);
        //START inline expansion of $minus(a(4), si(3), a(13))
        try {
            if (! unify(a13,subtract(Arithmetic.evaluate(a4),si3))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        p1 = new PRED_$write_term0_6(a11, a13, a15, a6, a7, a8, cont);
        p2 = new PRED_$write_term_infix_op_5(a1, a14, a15, a7, a8, p1);
        return exit(engine, new PRED_$write_term0_6(a9, a12, a5, a14, a7, a8, p2));
    }
}
