package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$prolog_file_name'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$prolog_file_name_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(".");
    static /*IntegerTerm*/Object si2 = makeInteger(0);
    static /*Symbol*/Object s3 = makeAtom(".pl");
    static Predicate _$prolog_file_name_2_sub_1 = new PRED_$prolog_file_name_2_sub_1();
    static Predicate _$prolog_file_name_2_1 = new PRED_$prolog_file_name_2_1();
    static Predicate _$prolog_file_name_2_2 = new PRED_$prolog_file_name_2_2();

    public Object arg1, arg2;

    public PRED_$prolog_file_name_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$prolog_file_name_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$prolog_file_name"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$prolog_file_name'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$prolog_file_name_2_1, _$prolog_file_name_2_sub_1);
    }
}

class PRED_$prolog_file_name_2_sub_1 extends PRED_$prolog_file_name_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$prolog_file_name_2_2);
    }
}

class PRED_$prolog_file_name_2_1 extends PRED_$prolog_file_name_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_file_name'(A, A):-sub_atom(A, B, C, D, '.'), D>0, !
        Object a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$prolog_file_name'(A, A):-['$get_level'(B), sub_atom(A, C, D, E, '.'), '$greater_than'(E, 0), '$cut'(B)]
        if (! unify(a1,a2))
            return fail(engine);
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a4 = engine.makeVariable(this);
        p1 = new PRED_$cut_1(a3, cont);
        p2 = new PRED_$greater_than_2(a4, si2, p1);
        return exit(engine, new PRED_sub_atom_5(a1, engine.makeVariable(this), engine.makeVariable(this), a4, s1, p2));
    }
}

class PRED_$prolog_file_name_2_2 extends PRED_$prolog_file_name_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$prolog_file_name'(A, B):-atom_concat(A, '.pl', B)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$prolog_file_name'(A, B):-[atom_concat(A, '.pl', B)]
        return exit(engine, new PRED_atom_concat_3(a1, s3, a2, cont));
    }
}
