package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_dynamic_clause'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_dynamic_clause_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":-", 2);
    static /*Symbol*/Object s2 = makeAtom("true");
    static /*IntegerTerm*/Object si3 = makeInteger(0);
    static /*Symbol*/Object s4 = makeAtom(".");
    static /*Symbol*/Object s5 = makeAtom(" :-");
    static /*IntegerTerm*/Object si6 = makeInteger(8);
    static Predicate _$write_dynamic_clause_2_sub_1 = new PRED_$write_dynamic_clause_2_sub_1();
    static Predicate _$write_dynamic_clause_2_sub_2 = new PRED_$write_dynamic_clause_2_sub_2();
    static Predicate _$write_dynamic_clause_2_1 = new PRED_$write_dynamic_clause_2_1();
    static Predicate _$write_dynamic_clause_2_2 = new PRED_$write_dynamic_clause_2_2();
    static Predicate _$write_dynamic_clause_2_3 = new PRED_$write_dynamic_clause_2_3();

    public Object arg1, arg2;

    public PRED_$write_dynamic_clause_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$write_dynamic_clause_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$write_dynamic_clause"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_dynamic_clause'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$write_dynamic_clause_2_1, _$write_dynamic_clause_2_sub_1);
    }
}

class PRED_$write_dynamic_clause_2_sub_1 extends PRED_$write_dynamic_clause_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_dynamic_clause_2_2, _$write_dynamic_clause_2_sub_2);
    }
}

class PRED_$write_dynamic_clause_2_sub_2 extends PRED_$write_dynamic_clause_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_dynamic_clause_2_3);
    }
}

class PRED_$write_dynamic_clause_2_1 extends PRED_$write_dynamic_clause_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_clause'(A, B):-var(B), !, fail
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_clause'(A, B):-['$get_level'(C), var(B), '$cut'(C), fail]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(2))
        a2 = deref( a2);
        if (! isVariable(a2)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        //START inline expansion of fail
        return fail(engine);
        //END inline expansion
    }
}

class PRED_$write_dynamic_clause_2_2 extends PRED_$write_dynamic_clause_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_clause'(A, (B:-true)):-!, numbervars(B, 0, C), '$write_dynamic_head'(A, B), write('.'), nl
        Object a1, a2, a3;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_clause'(A, (B:-true)):-['$neck_cut', numbervars(B, 0, C), '$write_dynamic_head'(A, B), write('.'), nl]
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s1,a2))
                return fail(engine);
            Object[] args = args(a2);
            a3 = args[0];
            if (!unify( s2,args[1]))
                return fail(engine);
        } else if (isVariable(a2)){
            a3 = engine.makeVariable(this);
            Object[] args = {a3, s2};
            bind(/*VAR*/ a2,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_write_1(s4, p1);
        p3 = new PRED_$write_dynamic_head_2(a1, a3, p2);
        return exit(engine, new PRED_numbervars_3(a3, si3, engine.makeVariable(this), p3));
    }
}

class PRED_$write_dynamic_clause_2_3 extends PRED_$write_dynamic_clause_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_dynamic_clause'(A, (B:-C)):-!, numbervars((B:-C), 0, D), '$write_dynamic_head'(A, B), write(' :-'), nl, '$write_dynamic_body'(C, 8), write('.'), nl
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_dynamic_clause'(A, (B:-C)):-['$neck_cut', numbervars((B:-C), 0, D), '$write_dynamic_head'(A, B), write(' :-'), nl, '$write_dynamic_body'(C, 8), write('.'), nl]
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s1,a2))
                return fail(engine);
            Object[] args = args(a2);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a2)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a2,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a3, a4};
        a5 = makeStructure(s1, y1);
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_write_1(s4, p1);
        p3 = new PRED_$write_dynamic_body_2(a4, si6, p2);
        p4 = new PRED_nl_0(p3);
        p5 = new PRED_write_1(s5, p4);
        p6 = new PRED_$write_dynamic_head_2(a1, a3, p5);
        return exit(engine, new PRED_numbervars_3(a5, si3, engine.makeVariable(this), p6));
    }
}
