package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$consult_init'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$consult_init_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s3 = makeAtom("$consulted_file", 1);
    static /*Symbol*/Object s4 = makeAtom("$consulted_package", 1);
    static /*Symbol*/Object s5 = makeAtom("$consulted_predicate", 3);
    static /*Symbol*/Object s6 = makeAtom("user");
    static Object[] s7 = {s6};
    static /*Structure*/Object s8 = makeStructure(s4, s7);
    static Object[] s9 = {s2, s8};
    static /*Structure*/Object s10 = makeStructure(s1, s9);
    static Predicate _$consult_init_1_sub_1 = new PRED_$consult_init_1_sub_1();
    static Predicate _$consult_init_1_1 = new PRED_$consult_init_1_1();
    static Predicate _$consult_init_1_2 = new PRED_$consult_init_1_2();

    public Object arg1;

    public PRED_$consult_init_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$consult_init_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$consult_init"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$consult_init'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$consult_init_1_1, _$consult_init_1_sub_1);
    }
}

class PRED_$consult_init_1_sub_1 extends PRED_$consult_init_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$consult_init_1_2);
    }
}

class PRED_$consult_init_1_1 extends PRED_$consult_init_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_init'(A):-retractall('$consulted_file'(B)), retractall('$consulted_package'(C)), retract('$consulted_predicate'(D, E, A)), abolish(D:E), fail
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_init'(A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(B)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(C)), retract('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(D, E, A)), abolish(D:E), fail]
        Object[] y1 = {engine.makeVariable(this)};
        a2 = makeStructure(s3, y1);
        Object[] y2 = {s2, a2};
        a3 = makeStructure(s1, y2);
        Object[] y3 = {engine.makeVariable(this)};
        a4 = makeStructure(s4, y3);
        Object[] y4 = {s2, a4};
        a5 = makeStructure(s1, y4);
        a6 = engine.makeVariable(this);
        a7 = engine.makeVariable(this);
        Object[] y5 = {a6, a7, a1};
        a8 = makeStructure(s5, y5);
        Object[] y6 = {s2, a8};
        a9 = makeStructure(s1, y6);
        Object[] y7 = {a6, a7};
        a10 = makeStructure(s1, y7);
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_abolish_1(a10, p1);
        p3 = new PRED_retract_1(a9, p2);
        p4 = new PRED_retractall_1(a5, p3);
        return exit(engine, new PRED_retractall_1(a3, p4));
    }
}

class PRED_$consult_init_1_2 extends PRED_$consult_init_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_init'(A):-assertz('$consulted_file'(A)), assertz('$consulted_package'(user))
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_init'(A):-[assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(A)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(user))]
        Object[] y1 = {a1};
        a2 = makeStructure(s3, y1);
        Object[] y2 = {s2, a2};
        a3 = makeStructure(s1, y2);
        p1 = new PRED_assertz_1(s10, cont);
        return exit(engine, new PRED_assertz_1(a3, p1));
    }
}
