package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$show_debug_option'/0</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$show_debug_option_0 extends PredicateBase {
    static /*IntegerTerm*/Object si1 = makeInteger(4);
    static /*Symbol*/Object s2 = makeAtom("Debuggin options:");
    static /*Symbol*/Object s3 = makeAtom("a      abort");
    static /*Symbol*/Object s4 = makeAtom("RET    creep");
    static /*Symbol*/Object s5 = makeAtom("c      creep");
    static /*Symbol*/Object s6 = makeAtom("l      leap");
    static /*Symbol*/Object s7 = makeAtom("+      spy this");
    static /*Symbol*/Object s8 = makeAtom("-      nospy this");
    static /*Symbol*/Object s9 = makeAtom("?      help");
    static /*Symbol*/Object s10 = makeAtom("h      help");

    public PRED_$show_debug_option_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_$show_debug_option_0(){}

    public void setArgument(Object[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String nameUQ() { return "$show_debug_option"; }

    public void sArg(int i0, Object val) {  switch (i0) {default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$show_debug_option";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
    // '$show_debug_option':-tab(4), '$fast_write'('Debuggin options:'), nl, tab(4), '$fast_write'('a      abort'), nl, tab(4), '$fast_write'('RET    creep'), nl, tab(4), '$fast_write'('c      creep'), nl, tab(4), '$fast_write'('l      leap'), nl, tab(4), '$fast_write'('+      spy this'), nl, tab(4), '$fast_write'('-      nospy this'), nl, tab(4), '$fast_write'('?      help'), nl, tab(4), '$fast_write'('h      help'), nl
        engine.setB0();
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26;
    // '$show_debug_option':-[tab(4), '$fast_write'('Debuggin options:'), nl, tab(4), '$fast_write'('a      abort'), nl, tab(4), '$fast_write'('RET    creep'), nl, tab(4), '$fast_write'('c      creep'), nl, tab(4), '$fast_write'('l      leap'), nl, tab(4), '$fast_write'('+      spy this'), nl, tab(4), '$fast_write'('-      nospy this'), nl, tab(4), '$fast_write'('?      help'), nl, tab(4), '$fast_write'('h      help'), nl]
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s10, p1);
        p3 = new PRED_tab_1(si1, p2);
        p4 = new PRED_nl_0(p3);
        p5 = new PRED_$fast_write_1(s9, p4);
        p6 = new PRED_tab_1(si1, p5);
        p7 = new PRED_nl_0(p6);
        p8 = new PRED_$fast_write_1(s8, p7);
        p9 = new PRED_tab_1(si1, p8);
        p10 = new PRED_nl_0(p9);
        p11 = new PRED_$fast_write_1(s7, p10);
        p12 = new PRED_tab_1(si1, p11);
        p13 = new PRED_nl_0(p12);
        p14 = new PRED_$fast_write_1(s6, p13);
        p15 = new PRED_tab_1(si1, p14);
        p16 = new PRED_nl_0(p15);
        p17 = new PRED_$fast_write_1(s5, p16);
        p18 = new PRED_tab_1(si1, p17);
        p19 = new PRED_nl_0(p18);
        p20 = new PRED_$fast_write_1(s4, p19);
        p21 = new PRED_tab_1(si1, p20);
        p22 = new PRED_nl_0(p21);
        p23 = new PRED_$fast_write_1(s3, p22);
        p24 = new PRED_tab_1(si1, p23);
        p25 = new PRED_nl_0(p24);
        p26 = new PRED_$fast_write_1(s2, p25);
        return exit(engine, new PRED_tab_1(si1, p26));
    }
}
