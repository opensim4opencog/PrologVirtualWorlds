package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>parse_tokens/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_parse_tokens_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s3 = makeAtom("$tokens", 1);
    static /*IntegerTerm*/Object si4 = makeInteger(1201);
    static /*Symbol*/Object s5 = makeAtom(".");
    static /*Symbol*/Object s6 = makeAtom("[]");
    static /*List*/Object s7 = makeList(s5, s6);

    public Object arg1, arg2;

    public PRED_parse_tokens_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_parse_tokens_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "parse_tokens"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'parse_tokens'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
    // parse_tokens(A, B):-retractall('$tokens'(C)), assertz('$tokens'(B)), '$parse_tokens'(A, 1201, B, ['.']), retract('$tokens'(B)), !
        engine.setB0();
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4;
        a1 = arg1;
        a2 = arg2;
    // parse_tokens(A, B):-['$get_level'(C), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$tokens'(D)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$tokens'(B)), '$parse_tokens'(A, 1201, B, ['.']), retract('jp.ac.kobe_u.cs.prolog.builtin':'$tokens'(B)), '$cut'(C)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {engine.makeVariable(this)};
        a4 = makeStructure(s3, y1);
        Object[] y2 = {s2, a4};
        a5 = makeStructure(s1, y2);
        Object[] y3 = {a2};
        a6 = makeStructure(s3, y3);
        Object[] y4 = {s2, a6};
        a7 = makeStructure(s1, y4);
        Object[] y5 = {a2};
        a8 = makeStructure(s3, y5);
        Object[] y6 = {s2, a8};
        a9 = makeStructure(s1, y6);
        p1 = new PRED_$cut_1(a3, cont);
        p2 = new PRED_retract_1(a9, p1);
        p3 = new PRED_$parse_tokens_4(a1, si4, a2, s7, p2);
        p4 = new PRED_assertz_1(a7, p3);
        return exit(engine, new PRED_retractall_1(a5, p4));
    }
}
