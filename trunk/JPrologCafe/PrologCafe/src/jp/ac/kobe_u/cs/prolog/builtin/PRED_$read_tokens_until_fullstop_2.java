package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$read_tokens_until_fullstop'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$read_tokens_until_fullstop_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("end_of_file");
    static /*Symbol*/Object s2 = makeAtom(".");
    static Predicate _$read_tokens_until_fullstop_2_sub_1 = new PRED_$read_tokens_until_fullstop_2_sub_1();
    static Predicate _$read_tokens_until_fullstop_2_sub_2 = new PRED_$read_tokens_until_fullstop_2_sub_2();
    static Predicate _$read_tokens_until_fullstop_2_1 = new PRED_$read_tokens_until_fullstop_2_1();
    static Predicate _$read_tokens_until_fullstop_2_2 = new PRED_$read_tokens_until_fullstop_2_2();
    static Predicate _$read_tokens_until_fullstop_2_3 = new PRED_$read_tokens_until_fullstop_2_3();

    public Object arg1, arg2;

    public PRED_$read_tokens_until_fullstop_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$read_tokens_until_fullstop_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$read_tokens_until_fullstop"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$read_tokens_until_fullstop'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$read_tokens_until_fullstop_2_1, _$read_tokens_until_fullstop_2_sub_1);
    }
}

class PRED_$read_tokens_until_fullstop_2_sub_1 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$read_tokens_until_fullstop_2_2, _$read_tokens_until_fullstop_2_sub_2);
    }
}

class PRED_$read_tokens_until_fullstop_2_sub_2 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$read_tokens_until_fullstop_2_3);
    }
}

class PRED_$read_tokens_until_fullstop_2_1 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens_until_fullstop'(A, end_of_file):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$read_tokens_until_fullstop'(A, end_of_file):-['$neck_cut']
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s1))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_tokens_until_fullstop_2_2 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens_until_fullstop'(A, '.'):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$read_tokens_until_fullstop'(A, '.'):-['$neck_cut']
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s2))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s2);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$read_tokens_until_fullstop_2_3 extends PRED_$read_tokens_until_fullstop_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$read_tokens_until_fullstop'(A, B):-read_token(A, C), '$read_tokens_until_fullstop'(A, C)
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$read_tokens_until_fullstop'(A, B):-[read_token(A, C), '$read_tokens_until_fullstop'(A, C)]
        a3 = engine.makeVariable(this);
        p1 = new PRED_$read_tokens_until_fullstop_2(a1, a3, cont);
        return exit(engine, new PRED_read_token_2(a1, a3, p1));
    }
}
