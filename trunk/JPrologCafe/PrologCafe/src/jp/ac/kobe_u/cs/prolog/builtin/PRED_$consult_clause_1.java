package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$consult_clause'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$consult_clause_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("end_of_file");
    static /*Symbol*/Object s2 = makeAtom(":-", 1);
    static /*Symbol*/Object s3 = makeAtom("module", 2);
    static /*Symbol*/Object s4 = makeAtom("package", 1);
    static /*Symbol*/Object s5 = makeAtom("import", 1);
    static /*Symbol*/Object s6 = makeAtom("dynamic", 1);
    static /*Symbol*/Object s7 = makeAtom("public", 1);
    static /*Symbol*/Object s8 = makeAtom("meta_predicate", 1);
    static /*Symbol*/Object s9 = makeAtom("mode", 1);
    static /*Symbol*/Object s10 = makeAtom("multifile", 1);
    static /*Symbol*/Object s11 = makeAtom("block", 1);
    static /*Symbol*/Object s12 = makeAtom(":", 2);
    static /*Symbol*/Object s13 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s14 = makeAtom("$consulted_package", 1);
    static Predicate _$consult_clause_1_var = new PRED_$consult_clause_1_var();
    static Predicate _$consult_clause_1_var_1 = new PRED_$consult_clause_1_var_1();
    static Predicate _$consult_clause_1_var_2 = new PRED_$consult_clause_1_var_2();
    static Predicate _$consult_clause_1_var_3 = new PRED_$consult_clause_1_var_3();
    static Predicate _$consult_clause_1_var_4 = new PRED_$consult_clause_1_var_4();
    static Predicate _$consult_clause_1_var_5 = new PRED_$consult_clause_1_var_5();
    static Predicate _$consult_clause_1_var_6 = new PRED_$consult_clause_1_var_6();
    static Predicate _$consult_clause_1_var_7 = new PRED_$consult_clause_1_var_7();
    static Predicate _$consult_clause_1_var_8 = new PRED_$consult_clause_1_var_8();
    static Predicate _$consult_clause_1_var_9 = new PRED_$consult_clause_1_var_9();
    static Predicate _$consult_clause_1_var_10 = new PRED_$consult_clause_1_var_10();
    static Predicate _$consult_clause_1_var_11 = new PRED_$consult_clause_1_var_11();
    static Predicate _$consult_clause_1_con = new PRED_$consult_clause_1_con();
    static Predicate _$consult_clause_1_con_1 = new PRED_$consult_clause_1_con_1();
    static Predicate _$consult_clause_1_str = new PRED_$consult_clause_1_str();
    static Predicate _$consult_clause_1_str_1 = new PRED_$consult_clause_1_str_1();
    static Predicate _$consult_clause_1_str_2 = new PRED_$consult_clause_1_str_2();
    static Predicate _$consult_clause_1_str_3 = new PRED_$consult_clause_1_str_3();
    static Predicate _$consult_clause_1_str_4 = new PRED_$consult_clause_1_str_4();
    static Predicate _$consult_clause_1_str_5 = new PRED_$consult_clause_1_str_5();
    static Predicate _$consult_clause_1_str_6 = new PRED_$consult_clause_1_str_6();
    static Predicate _$consult_clause_1_str_7 = new PRED_$consult_clause_1_str_7();
    static Predicate _$consult_clause_1_str_8 = new PRED_$consult_clause_1_str_8();
    static Predicate _$consult_clause_1_str_9 = new PRED_$consult_clause_1_str_9();
    static Predicate _$consult_clause_1_str_10 = new PRED_$consult_clause_1_str_10();
    static Predicate _$consult_clause_1_1 = new PRED_$consult_clause_1_1();
    static Predicate _$consult_clause_1_2 = new PRED_$consult_clause_1_2();
    static Predicate _$consult_clause_1_3 = new PRED_$consult_clause_1_3();
    static Predicate _$consult_clause_1_4 = new PRED_$consult_clause_1_4();
    static Predicate _$consult_clause_1_5 = new PRED_$consult_clause_1_5();
    static Predicate _$consult_clause_1_6 = new PRED_$consult_clause_1_6();
    static Predicate _$consult_clause_1_7 = new PRED_$consult_clause_1_7();
    static Predicate _$consult_clause_1_8 = new PRED_$consult_clause_1_8();
    static Predicate _$consult_clause_1_9 = new PRED_$consult_clause_1_9();
    static Predicate _$consult_clause_1_10 = new PRED_$consult_clause_1_10();
    static Predicate _$consult_clause_1_11 = new PRED_$consult_clause_1_11();
    static Predicate _$consult_clause_1_12 = new PRED_$consult_clause_1_12();

    public Object arg1;

    public PRED_$consult_clause_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$consult_clause_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$consult_clause"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$consult_clause'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$consult_clause_1_var, _$consult_clause_1_12, _$consult_clause_1_12, _$consult_clause_1_con, _$consult_clause_1_str, _$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_var extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$consult_clause_1_1, _$consult_clause_1_var_1);
    }
}

class PRED_$consult_clause_1_var_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_2, _$consult_clause_1_var_2);
    }
}

class PRED_$consult_clause_1_var_2 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_3, _$consult_clause_1_var_3);
    }
}

class PRED_$consult_clause_1_var_3 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_4, _$consult_clause_1_var_4);
    }
}

class PRED_$consult_clause_1_var_4 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_5, _$consult_clause_1_var_5);
    }
}

class PRED_$consult_clause_1_var_5 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_6, _$consult_clause_1_var_6);
    }
}

class PRED_$consult_clause_1_var_6 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_7, _$consult_clause_1_var_7);
    }
}

class PRED_$consult_clause_1_var_7 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_8, _$consult_clause_1_var_8);
    }
}

class PRED_$consult_clause_1_var_8 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_9, _$consult_clause_1_var_9);
    }
}

class PRED_$consult_clause_1_var_9 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_10, _$consult_clause_1_var_10);
    }
}

class PRED_$consult_clause_1_var_10 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_11, _$consult_clause_1_var_11);
    }
}

class PRED_$consult_clause_1_var_11 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_con extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$consult_clause_1_1, _$consult_clause_1_con_1);
    }
}

class PRED_$consult_clause_1_con_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_str extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$consult_clause_1_2, _$consult_clause_1_str_1);
    }
}

class PRED_$consult_clause_1_str_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_3, _$consult_clause_1_str_2);
    }
}

class PRED_$consult_clause_1_str_2 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_4, _$consult_clause_1_str_3);
    }
}

class PRED_$consult_clause_1_str_3 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_5, _$consult_clause_1_str_4);
    }
}

class PRED_$consult_clause_1_str_4 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_6, _$consult_clause_1_str_5);
    }
}

class PRED_$consult_clause_1_str_5 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_7, _$consult_clause_1_str_6);
    }
}

class PRED_$consult_clause_1_str_6 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_8, _$consult_clause_1_str_7);
    }
}

class PRED_$consult_clause_1_str_7 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_9, _$consult_clause_1_str_8);
    }
}

class PRED_$consult_clause_1_str_8 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_10, _$consult_clause_1_str_9);
    }
}

class PRED_$consult_clause_1_str_9 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$consult_clause_1_11, _$consult_clause_1_str_10);
    }
}

class PRED_$consult_clause_1_str_10 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$consult_clause_1_12);
    }
}

class PRED_$consult_clause_1_1 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'(end_of_file):-!
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'(end_of_file):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_2 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-module(A, B))):-!, '$assert_consulted_package'(A)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-module(A, B))):-['$neck_cut', '$assert_consulted_package'(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s3,a2))
                return fail(engine);
            Object[] args = args(a2);
            a3 = args[0];
        } else if (isVariable(a2)){
            a3 = engine.makeVariable(this);
            Object[] args = {a3, engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$assert_consulted_package_1(a3, cont));
    }
}

class PRED_$consult_clause_1_3 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-package A)):-!, '$assert_consulted_package'(A)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-package A)):-['$neck_cut', '$assert_consulted_package'(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s4,a2))
                return fail(engine);
            Object[] args = args(a2);
            a3 = args[0];
        } else if (isVariable(a2)){
            a3 = engine.makeVariable(this);
            Object[] args = {a3};
            bind(/*VAR*/ a2,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$assert_consulted_package_1(a3, cont));
    }
}

class PRED_$consult_clause_1_4 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-import A)):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-import A)):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s5,a2))
                return fail(engine);
            Object[] args = args(a2);
        } else if (isVariable(a2)){
            Object[] args = {engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s5, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_5 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-dynamic A)):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-dynamic A)):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s6,a2))
                return fail(engine);
            Object[] args = args(a2);
        } else if (isVariable(a2)){
            Object[] args = {engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s6, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_6 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-public A)):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-public A)):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s7,a2))
                return fail(engine);
            Object[] args = args(a2);
        } else if (isVariable(a2)){
            Object[] args = {engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s7, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_7 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-meta_predicate A)):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-meta_predicate A)):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s8,a2))
                return fail(engine);
            Object[] args = args(a2);
        } else if (isVariable(a2)){
            Object[] args = {engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s8, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_8 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-mode A)):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-mode A)):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s9,a2))
                return fail(engine);
            Object[] args = args(a2);
        } else if (isVariable(a2)){
            Object[] args = {engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s9, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_9 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-multifile A)):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-multifile A)):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s10,a2))
                return fail(engine);
            Object[] args = args(a2);
        } else if (isVariable(a2)){
            Object[] args = {engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s10, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_10 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-block A)):-!
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-block A)):-['$neck_cut']
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s11,a2))
                return fail(engine);
            Object[] args = args(a2);
        } else if (isVariable(a2)){
            Object[] args = {engine.makeVariable(this)};
            bind(/*VAR*/ a2,makeStructure(s11, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$consult_clause_1_11 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'((:-A)):-!, clause('$consulted_package'(B), C), once(B:A)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'((:-A)):-['$neck_cut', clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(B), C), once(B:A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a3 = engine.makeVariable(this);
        Object[] y1 = {a3};
        a4 = makeStructure(s14, y1);
        Object[] y2 = {s13, a4};
        a5 = makeStructure(s12, y2);
        Object[] y3 = {a3, a2};
        a6 = makeStructure(s12, y3);
        p1 = new PRED_once_1(a6, cont);
        return exit(engine, new PRED_clause_2(a5, engine.makeVariable(this), p1));
    }
}

class PRED_$consult_clause_1_12 extends PRED_$consult_clause_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$consult_clause'(A):-'$consult_preprocess'(A, B), '$consult_cls'(B)
        Object a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$consult_clause'(A):-['$consult_preprocess'(A, B), '$consult_cls'(B)]
        a2 = engine.makeVariable(this);
        p1 = new PRED_$consult_cls_1(a2, cont);
        return exit(engine, new PRED_$consult_preprocess_2(a1, a2, p1));
    }
}
