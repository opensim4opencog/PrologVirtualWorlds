package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>trace/0</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_trace_0 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("debug");
    static /*Symbol*/Object s2 = makeAtom("on");
    static /*Symbol*/Object s3 = makeAtom("{Small debugger is switch on}");
    static Predicate _trace_0_sub_1 = new PRED_trace_0_sub_1();
    static Predicate _trace_0_1 = new PRED_trace_0_1();
    static Predicate _trace_0_2 = new PRED_trace_0_2();

    public PRED_trace_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_trace_0(){}

    public void setArgument(Object[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String nameUQ() { return "trace"; }

    public void sArg(int i0, Object val) {  switch (i0) {default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'trace";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_trace_0_1, _trace_0_sub_1);
    }
}

class PRED_trace_0_sub_1 extends PRED_trace_0 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_trace_0_2);
    }
}

class PRED_trace_0_1 extends PRED_trace_0 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // trace:-current_prolog_flag(debug, on), !
        Object a1;
        Predicate p1;
        Predicate cont;
        cont = engine.cont;
    // trace:-['$get_level'(A), current_prolog_flag(debug, on), '$cut'(A)]
        a1 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(1))
        if (! unify(a1,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a1, cont);
        return exit(engine, new PRED_current_prolog_flag_2(s1, s2, p1));
    }
}

class PRED_trace_0_2 extends PRED_trace_0 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // trace:-set_prolog_flag(debug, on), '$trace_init', '$fast_write'('{Small debugger is switch on}'), nl, !
        Object a1;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        cont = engine.cont;
    // trace:-['$get_level'(A), set_prolog_flag(debug, on), '$trace_init', '$fast_write'('{Small debugger is switch on}'), nl, '$cut'(A)]
        a1 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(1))
        if (! unify(a1,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a1, cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_$fast_write_1(s3, p2);
        p4 = new PRED_$trace_init_0(p3);
        return exit(engine, new PRED_set_prolog_flag_2(s1, s2, p4));
    }
}
