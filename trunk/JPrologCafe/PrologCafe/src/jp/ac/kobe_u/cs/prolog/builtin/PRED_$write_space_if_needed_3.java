package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_space_if_needed'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_space_if_needed_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("punct");
    static /*Symbol*/Object s2 = makeAtom(" ");
    static /*Symbol*/Object s3 = makeAtom("other");
    static /*Symbol*/Object s4 = makeAtom("alpha");
    static Predicate _$write_space_if_needed_3_var = new PRED_$write_space_if_needed_3_var();
    static Predicate _$write_space_if_needed_3_var_1 = new PRED_$write_space_if_needed_3_var_1();
    static Predicate _$write_space_if_needed_3_var_2 = new PRED_$write_space_if_needed_3_var_2();
    static Predicate _$write_space_if_needed_3_var_3 = new PRED_$write_space_if_needed_3_var_3();
    static Predicate _$write_space_if_needed_3_int = new PRED_$write_space_if_needed_3_int();
    static Predicate _$write_space_if_needed_3_int_1 = new PRED_$write_space_if_needed_3_int_1();
    static Predicate _$write_space_if_needed_3_con = new PRED_$write_space_if_needed_3_con();
    static Predicate _$write_space_if_needed_3_con_0 = new PRED_$write_space_if_needed_3_con_0();
    static Predicate _$write_space_if_needed_3_con_0_1 = new PRED_$write_space_if_needed_3_con_0_1();
    static Predicate _$write_space_if_needed_3_con_0_2 = new PRED_$write_space_if_needed_3_con_0_2();
    static Predicate _$write_space_if_needed_3_con_1 = new PRED_$write_space_if_needed_3_con_1();
    static Predicate _$write_space_if_needed_3_con_1_1 = new PRED_$write_space_if_needed_3_con_1_1();
    static Predicate _$write_space_if_needed_3_con_1_2 = new PRED_$write_space_if_needed_3_con_1_2();
    static Predicate _$write_space_if_needed_3_1 = new PRED_$write_space_if_needed_3_1();
    static Predicate _$write_space_if_needed_3_2 = new PRED_$write_space_if_needed_3_2();
    static Predicate _$write_space_if_needed_3_3 = new PRED_$write_space_if_needed_3_3();
    static Predicate _$write_space_if_needed_3_4 = new PRED_$write_space_if_needed_3_4();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(2);
    static {
        con.put(s1, _$write_space_if_needed_3_con_0);
        con.put(s3, _$write_space_if_needed_3_con_1);
    }

    public Object arg1, arg2, arg3;

    public PRED_$write_space_if_needed_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$write_space_if_needed_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$write_space_if_needed"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_space_if_needed'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$write_space_if_needed_3_var, _$write_space_if_needed_3_int, _$write_space_if_needed_3_int, _$write_space_if_needed_3_con, _$write_space_if_needed_3_int, _$write_space_if_needed_3_int);
    }
}

class PRED_$write_space_if_needed_3_var extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_space_if_needed_3_1, _$write_space_if_needed_3_var_1);
    }
}

class PRED_$write_space_if_needed_3_var_1 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_space_if_needed_3_2, _$write_space_if_needed_3_var_2);
    }
}

class PRED_$write_space_if_needed_3_var_2 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_space_if_needed_3_3, _$write_space_if_needed_3_var_3);
    }
}

class PRED_$write_space_if_needed_3_var_3 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_space_if_needed_3_4);
    }
}

class PRED_$write_space_if_needed_3_int extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_space_if_needed_3_2, _$write_space_if_needed_3_int_1);
    }
}

class PRED_$write_space_if_needed_3_int_1 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_space_if_needed_3_4);
    }
}

class PRED_$write_space_if_needed_3_con extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _$write_space_if_needed_3_int);
    }
}

class PRED_$write_space_if_needed_3_con_0 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_space_if_needed_3_1, _$write_space_if_needed_3_con_0_1);
    }
}

class PRED_$write_space_if_needed_3_con_0_1 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_space_if_needed_3_2, _$write_space_if_needed_3_con_0_2);
    }
}

class PRED_$write_space_if_needed_3_con_0_2 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_space_if_needed_3_4);
    }
}

class PRED_$write_space_if_needed_3_con_1 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_space_if_needed_3_2, _$write_space_if_needed_3_con_1_1);
    }
}

class PRED_$write_space_if_needed_3_con_1_1 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_space_if_needed_3_3, _$write_space_if_needed_3_con_1_2);
    }
}

class PRED_$write_space_if_needed_3_con_1_2 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_space_if_needed_3_4);
    }
}

class PRED_$write_space_if_needed_3_1 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_space_if_needed'(punct, A, B):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$write_space_if_needed'(punct, A, B):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$write_space_if_needed_3_2 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_space_if_needed'(A, A, B):-!, put_char(B, ' ')
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$write_space_if_needed'(A, A, B):-['$neck_cut', put_char(B, ' ')]
        if (! unify(a1,a2))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_put_char_2(a3, s2, cont));
    }
}

class PRED_$write_space_if_needed_3_3 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_space_if_needed'(other, alpha, A):-!, put_char(A, ' ')
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$write_space_if_needed'(other, alpha, A):-['$neck_cut', put_char(A, ' ')]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s3))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s3);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s4))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s4);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_put_char_2(a3, s2, cont));
    }
}

class PRED_$write_space_if_needed_3_4 extends PRED_$write_space_if_needed_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_space_if_needed'(A, B, C):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$write_space_if_needed'(A, B, C):-[]
        return exit(engine,cont);
    }
}
