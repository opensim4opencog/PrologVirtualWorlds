package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$check_procedure_permission'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$check_procedure_permission_4 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("/", 2);
    static /*Symbol*/Object s3 = makeAtom("permission", 4);
    static Predicate _$check_procedure_permission_4_var = new PRED_$check_procedure_permission_4_var();
    static Predicate _$check_procedure_permission_4_var_1 = new PRED_$check_procedure_permission_4_var_1();
    static Predicate _$check_procedure_permission_4_var_2 = new PRED_$check_procedure_permission_4_var_2();
    static Predicate _$check_procedure_permission_4_1 = new PRED_$check_procedure_permission_4_1();
    static Predicate _$check_procedure_permission_4_2 = new PRED_$check_procedure_permission_4_2();
    static Predicate _$check_procedure_permission_4_3 = new PRED_$check_procedure_permission_4_3();

    public Object arg1, arg2, arg3, arg4;

    public PRED_$check_procedure_permission_4(Object a1, Object a2, Object a3, Object a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$check_procedure_permission_4(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String nameUQ() { return "$check_procedure_permission"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$check_procedure_permission'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$check_procedure_permission_4_var, _$check_procedure_permission_4_3, _$check_procedure_permission_4_3, _$check_procedure_permission_4_3, _$check_procedure_permission_4_var, _$check_procedure_permission_4_3);
    }
}

class PRED_$check_procedure_permission_4_var extends PRED_$check_procedure_permission_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$check_procedure_permission_4_1, _$check_procedure_permission_4_var_1);
    }
}

class PRED_$check_procedure_permission_4_var_1 extends PRED_$check_procedure_permission_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$check_procedure_permission_4_2, _$check_procedure_permission_4_var_2);
    }
}

class PRED_$check_procedure_permission_4_var_2 extends PRED_$check_procedure_permission_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$check_procedure_permission_4_3);
    }
}

class PRED_$check_procedure_permission_4_1 extends PRED_$check_procedure_permission_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$check_procedure_permission'(A:B/C, D, E, F):-hash_contains_key(A, B/C), !
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$check_procedure_permission'(A:B/C, D, E, F):-['$get_level'(G), hash_contains_key(A, B/C), '$cut'(G)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a5 = args[0];
            a6 = args[1];
        } else if (isVariable(a1)){
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a5, a6};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s2,a6))
                return fail(engine);
            Object[] args = args(a6);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a6)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a7, a8};
            bind(/*VAR*/ a6,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a9 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(9))
        if (! unify(a9,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {a7, a8};
        a10 = makeStructure(s2, y1);
        p1 = new PRED_$cut_1(a9, cont);
        return exit(engine, new PRED_hash_contains_key_2(a5, a10, p1));
    }
}

class PRED_$check_procedure_permission_4_2 extends PRED_$check_procedure_permission_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$check_procedure_permission'(A:B/C, D, E, F):-'$compiled_predicate_or_builtin'(A, B, C), !, illarg(permission(D, E, A:B/C, G), F, H)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$check_procedure_permission'(A:B/C, D, E, F):-['$get_level'(G), '$compiled_predicate_or_builtin'(A, B, C), '$cut'(G), illarg(permission(D, E, A:B/C, H), F, I)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a5 = args[0];
            a6 = args[1];
        } else if (isVariable(a1)){
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a5, a6};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s2,a6))
                return fail(engine);
            Object[] args = args(a6);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a6)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a7, a8};
            bind(/*VAR*/ a6,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a9 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(9))
        if (! unify(a9,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {a7, a8};
        a10 = makeStructure(s2, y1);
        Object[] y2 = {a5, a10};
        a11 = makeStructure(s1, y2);
        Object[] y3 = {a2, a3, a11, engine.makeVariable(this)};
        a12 = makeStructure(s3, y3);
        p1 = new PRED_illarg_3(a12, a4, engine.makeVariable(this), cont);
        p2 = new PRED_$cut_1(a9, p1);
        return exit(engine, new PRED_$compiled_predicate_or_builtin_3(a5, a7, a8, p2));
    }
}

class PRED_$check_procedure_permission_4_3 extends PRED_$check_procedure_permission_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$check_procedure_permission'(A, B, C, D):-true
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$check_procedure_permission'(A, B, C, D):-[]
        return exit(engine,cont);
    }
}
