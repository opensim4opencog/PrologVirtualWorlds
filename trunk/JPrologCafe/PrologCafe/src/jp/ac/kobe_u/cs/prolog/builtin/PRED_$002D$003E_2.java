package jp.ac.kobe_u.cs.prolog.builtin;

import jp.ac.kobe_u.cs.prolog.lang.*;

/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>(->)/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_$002D$003E_2 extends PredicateBase {
  static/*Symbol*/Object s1 = makeAtom(":", 2);
  static/*Symbol*/Object s2 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");

  public Object arg1, arg2;

  public PRED_$002D$003E_2(Object a1, Object a2, Predicate cont) {
    arg1 = a1;
    arg2 = a2;
    this.cont = cont;
  }

  public PRED_$002D$003E_2() {
  }

  public void setArgument(Object[] args, Predicate cont) {
    arg1 = args[0];
    arg2 = args[1];
    this.cont = cont;
  }

  public int arity() {
    return 2;
  }

  public String nameUQ() {
    return "->";
  }

  public void sArg(int i0, Object val) {
    switch (i0) {
      case 0:
        arg1 = val;
        break;
      case 1:
        arg2 = val;
        break;
      default:
        newIndexOutOfBoundsException("setarg", i0, val);
    }
  }

  public Object gArg(int i0) {
    switch (i0) {
      case 0:
        return arg1;
      case 1:
        return arg2;
      default:
        return newIndexOutOfBoundsException("getarg", i0, null);
    }
  }

  public String toPrologString(java.util.Collection newParam) {
    return "'->'(" + argString(arg1, newParam) + "," + argString(arg2, newParam) + ")";
  }

  public Predicate exec(Prolog engine) {
    enter(engine);
    Object[] engine_aregs = engine.getAreg();
    // A->B:-call(A), !, call(B)
    engine.setB0();
    Object a1, a2, a3, a4, a5;
    Predicate p1, p2;
    a1 = arg1;
    a2 = arg2;
    // A->B:-['$get_level'(C), call('jp.ac.kobe_u.cs.prolog.builtin':A), '$cut'(C), call('jp.ac.kobe_u.cs.prolog.builtin':B)]
    a3 = engine.makeVariable(this);
    //START inline expansion of $get_level(a(3))
    if (!unify(a3, makeInteger(engine.B0))) {
      return fail(engine);
    }
    //END inline expansion
    Object[] y1 = { s2, a1 };
    a4 = makeStructure(s1, y1);
    Object[] y2 = { s2, a2 };
    a5 = makeStructure(s1, y2);
    p1 = new PRED_call_1(a5, cont);
    p2 = new PRED_$cut_1(a3, p1);
    return exit(engine, new PRED_call_1(a4, p2));
  }
}
