package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$meta_call'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$meta_call_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*Symbol*/Object s2 = makeAtom("call", 1);
    static /*IntegerTerm*/Object si3 = makeInteger(1);
    static /*Symbol*/Object s4 = makeAtom("true");
    static /*Symbol*/Object s5 = makeAtom("trace");
    static /*Symbol*/Object s6 = makeAtom("debug");
    static /*Symbol*/Object s7 = makeAtom("notrace");
    static /*Symbol*/Object s8 = makeAtom("nodebug");
    static /*Symbol*/Object s9 = makeAtom("spy", 1);
    static /*Symbol*/Object s10 = makeAtom("nospy", 1);
    static /*Symbol*/Object s11 = makeAtom("nospyall");
    static /*Symbol*/Object s12 = makeAtom("leash", 1);
    static /*Symbol*/Object s13 = makeAtom("^", 2);
    static /*Symbol*/Object s14 = makeAtom(":", 2);
    static /*Symbol*/Object s15 = makeAtom("!");
    static /*Symbol*/Object s16 = makeAtom("no");
    static /*Symbol*/Object s17 = makeAtom("context", 2);
    static /*Symbol*/Object s18 = makeAtom("if");
    static /*Symbol*/Object s19 = makeAtom("cut");
    static Object[] s20 = {s18, s19};
    static /*Structure*/Object s21 = makeStructure(s17, s20);
    static /*IntegerTerm*/Object si22 = makeInteger(0);
    static /*Symbol*/Object s23 = makeAtom(",", 2);
    static /*Symbol*/Object s24 = makeAtom(";", 2);
    static /*Symbol*/Object s25 = makeAtom("->", 2);
    static /*Symbol*/Object s26 = makeAtom("\\+", 1);
    static /*Symbol*/Object s27 = makeAtom("findall", 3);
    static /*Symbol*/Object s28 = makeAtom("bagof", 3);
    static /*Symbol*/Object s29 = makeAtom("setof", 3);
    static /*Symbol*/Object s30 = makeAtom("once", 1);
    static /*Symbol*/Object s31 = makeAtom("on_exception", 3);
    static /*Symbol*/Object s32 = makeAtom("catch", 3);
    static /*Symbol*/Object s33 = makeAtom("synchronized", 2);
    static /*Symbol*/Object s34 = makeAtom("clause", 2);
    static /*Symbol*/Object s35 = makeAtom("assert", 1);
    static /*Symbol*/Object s36 = makeAtom("assertz", 1);
    static /*Symbol*/Object s37 = makeAtom("asserta", 1);
    static /*Symbol*/Object s38 = makeAtom("retract", 1);
    static /*Symbol*/Object s39 = makeAtom("abolish", 1);
    static /*Symbol*/Object s40 = makeAtom("retractall", 1);
    static /*Symbol*/Object s41 = makeAtom("type", 1);
    static /*Symbol*/Object s42 = makeAtom("callable");
    static Object[] s43 = {s42};
    static /*Structure*/Object s44 = makeStructure(s41, s43);
    static Predicate _$meta_call_5_top = new PRED_$meta_call_5_top();
    static Predicate _$meta_call_5_var = new PRED_$meta_call_5_var();
    static Predicate _$meta_call_5_var_1 = new PRED_$meta_call_5_var_1();
    static Predicate _$meta_call_5_var_2 = new PRED_$meta_call_5_var_2();
    static Predicate _$meta_call_5_var_3 = new PRED_$meta_call_5_var_3();
    static Predicate _$meta_call_5_var_4 = new PRED_$meta_call_5_var_4();
    static Predicate _$meta_call_5_var_5 = new PRED_$meta_call_5_var_5();
    static Predicate _$meta_call_5_var_6 = new PRED_$meta_call_5_var_6();
    static Predicate _$meta_call_5_var_7 = new PRED_$meta_call_5_var_7();
    static Predicate _$meta_call_5_var_8 = new PRED_$meta_call_5_var_8();
    static Predicate _$meta_call_5_var_9 = new PRED_$meta_call_5_var_9();
    static Predicate _$meta_call_5_var_10 = new PRED_$meta_call_5_var_10();
    static Predicate _$meta_call_5_var_11 = new PRED_$meta_call_5_var_11();
    static Predicate _$meta_call_5_var_12 = new PRED_$meta_call_5_var_12();
    static Predicate _$meta_call_5_var_13 = new PRED_$meta_call_5_var_13();
    static Predicate _$meta_call_5_var_14 = new PRED_$meta_call_5_var_14();
    static Predicate _$meta_call_5_var_15 = new PRED_$meta_call_5_var_15();
    static Predicate _$meta_call_5_var_16 = new PRED_$meta_call_5_var_16();
    static Predicate _$meta_call_5_var_17 = new PRED_$meta_call_5_var_17();
    static Predicate _$meta_call_5_var_18 = new PRED_$meta_call_5_var_18();
    static Predicate _$meta_call_5_var_19 = new PRED_$meta_call_5_var_19();
    static Predicate _$meta_call_5_var_20 = new PRED_$meta_call_5_var_20();
    static Predicate _$meta_call_5_var_21 = new PRED_$meta_call_5_var_21();
    static Predicate _$meta_call_5_var_22 = new PRED_$meta_call_5_var_22();
    static Predicate _$meta_call_5_var_23 = new PRED_$meta_call_5_var_23();
    static Predicate _$meta_call_5_var_24 = new PRED_$meta_call_5_var_24();
    static Predicate _$meta_call_5_var_25 = new PRED_$meta_call_5_var_25();
    static Predicate _$meta_call_5_var_26 = new PRED_$meta_call_5_var_26();
    static Predicate _$meta_call_5_var_27 = new PRED_$meta_call_5_var_27();
    static Predicate _$meta_call_5_var_28 = new PRED_$meta_call_5_var_28();
    static Predicate _$meta_call_5_var_29 = new PRED_$meta_call_5_var_29();
    static Predicate _$meta_call_5_var_30 = new PRED_$meta_call_5_var_30();
    static Predicate _$meta_call_5_var_31 = new PRED_$meta_call_5_var_31();
    static Predicate _$meta_call_5_var_32 = new PRED_$meta_call_5_var_32();
    static Predicate _$meta_call_5_var_33 = new PRED_$meta_call_5_var_33();
    static Predicate _$meta_call_5_var_34 = new PRED_$meta_call_5_var_34();
    static Predicate _$meta_call_5_var_35 = new PRED_$meta_call_5_var_35();
    static Predicate _$meta_call_5_var_36 = new PRED_$meta_call_5_var_36();
    static Predicate _$meta_call_5_int = new PRED_$meta_call_5_int();
    static Predicate _$meta_call_5_int_1 = new PRED_$meta_call_5_int_1();
    static Predicate _$meta_call_5_int_2 = new PRED_$meta_call_5_int_2();
    static Predicate _$meta_call_5_int_3 = new PRED_$meta_call_5_int_3();
    static Predicate _$meta_call_5_con = new PRED_$meta_call_5_con();
    static Predicate _$meta_call_5_con_0 = new PRED_$meta_call_5_con_0();
    static Predicate _$meta_call_5_con_0_1 = new PRED_$meta_call_5_con_0_1();
    static Predicate _$meta_call_5_con_0_2 = new PRED_$meta_call_5_con_0_2();
    static Predicate _$meta_call_5_con_0_3 = new PRED_$meta_call_5_con_0_3();
    static Predicate _$meta_call_5_con_0_4 = new PRED_$meta_call_5_con_0_4();
    static Predicate _$meta_call_5_con_1 = new PRED_$meta_call_5_con_1();
    static Predicate _$meta_call_5_con_1_1 = new PRED_$meta_call_5_con_1_1();
    static Predicate _$meta_call_5_con_1_2 = new PRED_$meta_call_5_con_1_2();
    static Predicate _$meta_call_5_con_1_3 = new PRED_$meta_call_5_con_1_3();
    static Predicate _$meta_call_5_con_1_4 = new PRED_$meta_call_5_con_1_4();
    static Predicate _$meta_call_5_con_2 = new PRED_$meta_call_5_con_2();
    static Predicate _$meta_call_5_con_2_1 = new PRED_$meta_call_5_con_2_1();
    static Predicate _$meta_call_5_con_2_2 = new PRED_$meta_call_5_con_2_2();
    static Predicate _$meta_call_5_con_2_3 = new PRED_$meta_call_5_con_2_3();
    static Predicate _$meta_call_5_con_2_4 = new PRED_$meta_call_5_con_2_4();
    static Predicate _$meta_call_5_con_3 = new PRED_$meta_call_5_con_3();
    static Predicate _$meta_call_5_con_3_1 = new PRED_$meta_call_5_con_3_1();
    static Predicate _$meta_call_5_con_3_2 = new PRED_$meta_call_5_con_3_2();
    static Predicate _$meta_call_5_con_3_3 = new PRED_$meta_call_5_con_3_3();
    static Predicate _$meta_call_5_con_3_4 = new PRED_$meta_call_5_con_3_4();
    static Predicate _$meta_call_5_con_4 = new PRED_$meta_call_5_con_4();
    static Predicate _$meta_call_5_con_4_1 = new PRED_$meta_call_5_con_4_1();
    static Predicate _$meta_call_5_con_4_2 = new PRED_$meta_call_5_con_4_2();
    static Predicate _$meta_call_5_con_4_3 = new PRED_$meta_call_5_con_4_3();
    static Predicate _$meta_call_5_con_4_4 = new PRED_$meta_call_5_con_4_4();
    static Predicate _$meta_call_5_con_5 = new PRED_$meta_call_5_con_5();
    static Predicate _$meta_call_5_con_5_1 = new PRED_$meta_call_5_con_5_1();
    static Predicate _$meta_call_5_con_5_2 = new PRED_$meta_call_5_con_5_2();
    static Predicate _$meta_call_5_con_5_3 = new PRED_$meta_call_5_con_5_3();
    static Predicate _$meta_call_5_con_5_4 = new PRED_$meta_call_5_con_5_4();
    static Predicate _$meta_call_5_con_6 = new PRED_$meta_call_5_con_6();
    static Predicate _$meta_call_5_con_6_1 = new PRED_$meta_call_5_con_6_1();
    static Predicate _$meta_call_5_con_6_2 = new PRED_$meta_call_5_con_6_2();
    static Predicate _$meta_call_5_con_6_3 = new PRED_$meta_call_5_con_6_3();
    static Predicate _$meta_call_5_con_6_4 = new PRED_$meta_call_5_con_6_4();
    static Predicate _$meta_call_5_con_6_5 = new PRED_$meta_call_5_con_6_5();
    static Predicate _$meta_call_5_str = new PRED_$meta_call_5_str();
    static Predicate _$meta_call_5_str_0 = new PRED_$meta_call_5_str_0();
    static Predicate _$meta_call_5_str_0_1 = new PRED_$meta_call_5_str_0_1();
    static Predicate _$meta_call_5_str_0_2 = new PRED_$meta_call_5_str_0_2();
    static Predicate _$meta_call_5_str_0_3 = new PRED_$meta_call_5_str_0_3();
    static Predicate _$meta_call_5_str_0_4 = new PRED_$meta_call_5_str_0_4();
    static Predicate _$meta_call_5_str_1 = new PRED_$meta_call_5_str_1();
    static Predicate _$meta_call_5_str_1_1 = new PRED_$meta_call_5_str_1_1();
    static Predicate _$meta_call_5_str_1_2 = new PRED_$meta_call_5_str_1_2();
    static Predicate _$meta_call_5_str_1_3 = new PRED_$meta_call_5_str_1_3();
    static Predicate _$meta_call_5_str_1_4 = new PRED_$meta_call_5_str_1_4();
    static Predicate _$meta_call_5_str_2 = new PRED_$meta_call_5_str_2();
    static Predicate _$meta_call_5_str_2_1 = new PRED_$meta_call_5_str_2_1();
    static Predicate _$meta_call_5_str_2_2 = new PRED_$meta_call_5_str_2_2();
    static Predicate _$meta_call_5_str_2_3 = new PRED_$meta_call_5_str_2_3();
    static Predicate _$meta_call_5_str_2_4 = new PRED_$meta_call_5_str_2_4();
    static Predicate _$meta_call_5_str_3 = new PRED_$meta_call_5_str_3();
    static Predicate _$meta_call_5_str_3_1 = new PRED_$meta_call_5_str_3_1();
    static Predicate _$meta_call_5_str_3_2 = new PRED_$meta_call_5_str_3_2();
    static Predicate _$meta_call_5_str_3_3 = new PRED_$meta_call_5_str_3_3();
    static Predicate _$meta_call_5_str_3_4 = new PRED_$meta_call_5_str_3_4();
    static Predicate _$meta_call_5_str_4 = new PRED_$meta_call_5_str_4();
    static Predicate _$meta_call_5_str_4_1 = new PRED_$meta_call_5_str_4_1();
    static Predicate _$meta_call_5_str_4_2 = new PRED_$meta_call_5_str_4_2();
    static Predicate _$meta_call_5_str_4_3 = new PRED_$meta_call_5_str_4_3();
    static Predicate _$meta_call_5_str_4_4 = new PRED_$meta_call_5_str_4_4();
    static Predicate _$meta_call_5_str_5 = new PRED_$meta_call_5_str_5();
    static Predicate _$meta_call_5_str_5_1 = new PRED_$meta_call_5_str_5_1();
    static Predicate _$meta_call_5_str_5_2 = new PRED_$meta_call_5_str_5_2();
    static Predicate _$meta_call_5_str_5_3 = new PRED_$meta_call_5_str_5_3();
    static Predicate _$meta_call_5_str_5_4 = new PRED_$meta_call_5_str_5_4();
    static Predicate _$meta_call_5_str_6 = new PRED_$meta_call_5_str_6();
    static Predicate _$meta_call_5_str_6_1 = new PRED_$meta_call_5_str_6_1();
    static Predicate _$meta_call_5_str_6_2 = new PRED_$meta_call_5_str_6_2();
    static Predicate _$meta_call_5_str_6_3 = new PRED_$meta_call_5_str_6_3();
    static Predicate _$meta_call_5_str_6_4 = new PRED_$meta_call_5_str_6_4();
    static Predicate _$meta_call_5_str_7 = new PRED_$meta_call_5_str_7();
    static Predicate _$meta_call_5_str_7_1 = new PRED_$meta_call_5_str_7_1();
    static Predicate _$meta_call_5_str_7_2 = new PRED_$meta_call_5_str_7_2();
    static Predicate _$meta_call_5_str_7_3 = new PRED_$meta_call_5_str_7_3();
    static Predicate _$meta_call_5_str_7_4 = new PRED_$meta_call_5_str_7_4();
    static Predicate _$meta_call_5_str_7_5 = new PRED_$meta_call_5_str_7_5();
    static Predicate _$meta_call_5_str_8 = new PRED_$meta_call_5_str_8();
    static Predicate _$meta_call_5_str_8_1 = new PRED_$meta_call_5_str_8_1();
    static Predicate _$meta_call_5_str_8_2 = new PRED_$meta_call_5_str_8_2();
    static Predicate _$meta_call_5_str_8_3 = new PRED_$meta_call_5_str_8_3();
    static Predicate _$meta_call_5_str_8_4 = new PRED_$meta_call_5_str_8_4();
    static Predicate _$meta_call_5_str_9 = new PRED_$meta_call_5_str_9();
    static Predicate _$meta_call_5_str_9_1 = new PRED_$meta_call_5_str_9_1();
    static Predicate _$meta_call_5_str_9_2 = new PRED_$meta_call_5_str_9_2();
    static Predicate _$meta_call_5_str_9_3 = new PRED_$meta_call_5_str_9_3();
    static Predicate _$meta_call_5_str_9_4 = new PRED_$meta_call_5_str_9_4();
    static Predicate _$meta_call_5_str_10 = new PRED_$meta_call_5_str_10();
    static Predicate _$meta_call_5_str_10_1 = new PRED_$meta_call_5_str_10_1();
    static Predicate _$meta_call_5_str_10_2 = new PRED_$meta_call_5_str_10_2();
    static Predicate _$meta_call_5_str_10_3 = new PRED_$meta_call_5_str_10_3();
    static Predicate _$meta_call_5_str_10_4 = new PRED_$meta_call_5_str_10_4();
    static Predicate _$meta_call_5_str_11 = new PRED_$meta_call_5_str_11();
    static Predicate _$meta_call_5_str_11_1 = new PRED_$meta_call_5_str_11_1();
    static Predicate _$meta_call_5_str_11_2 = new PRED_$meta_call_5_str_11_2();
    static Predicate _$meta_call_5_str_11_3 = new PRED_$meta_call_5_str_11_3();
    static Predicate _$meta_call_5_str_11_4 = new PRED_$meta_call_5_str_11_4();
    static Predicate _$meta_call_5_str_12 = new PRED_$meta_call_5_str_12();
    static Predicate _$meta_call_5_str_12_1 = new PRED_$meta_call_5_str_12_1();
    static Predicate _$meta_call_5_str_12_2 = new PRED_$meta_call_5_str_12_2();
    static Predicate _$meta_call_5_str_12_3 = new PRED_$meta_call_5_str_12_3();
    static Predicate _$meta_call_5_str_12_4 = new PRED_$meta_call_5_str_12_4();
    static Predicate _$meta_call_5_str_13 = new PRED_$meta_call_5_str_13();
    static Predicate _$meta_call_5_str_13_1 = new PRED_$meta_call_5_str_13_1();
    static Predicate _$meta_call_5_str_13_2 = new PRED_$meta_call_5_str_13_2();
    static Predicate _$meta_call_5_str_13_3 = new PRED_$meta_call_5_str_13_3();
    static Predicate _$meta_call_5_str_13_4 = new PRED_$meta_call_5_str_13_4();
    static Predicate _$meta_call_5_str_14 = new PRED_$meta_call_5_str_14();
    static Predicate _$meta_call_5_str_14_1 = new PRED_$meta_call_5_str_14_1();
    static Predicate _$meta_call_5_str_14_2 = new PRED_$meta_call_5_str_14_2();
    static Predicate _$meta_call_5_str_14_3 = new PRED_$meta_call_5_str_14_3();
    static Predicate _$meta_call_5_str_14_4 = new PRED_$meta_call_5_str_14_4();
    static Predicate _$meta_call_5_str_15 = new PRED_$meta_call_5_str_15();
    static Predicate _$meta_call_5_str_15_1 = new PRED_$meta_call_5_str_15_1();
    static Predicate _$meta_call_5_str_15_2 = new PRED_$meta_call_5_str_15_2();
    static Predicate _$meta_call_5_str_15_3 = new PRED_$meta_call_5_str_15_3();
    static Predicate _$meta_call_5_str_15_4 = new PRED_$meta_call_5_str_15_4();
    static Predicate _$meta_call_5_str_16 = new PRED_$meta_call_5_str_16();
    static Predicate _$meta_call_5_str_16_1 = new PRED_$meta_call_5_str_16_1();
    static Predicate _$meta_call_5_str_16_2 = new PRED_$meta_call_5_str_16_2();
    static Predicate _$meta_call_5_str_16_3 = new PRED_$meta_call_5_str_16_3();
    static Predicate _$meta_call_5_str_16_4 = new PRED_$meta_call_5_str_16_4();
    static Predicate _$meta_call_5_str_17 = new PRED_$meta_call_5_str_17();
    static Predicate _$meta_call_5_str_17_1 = new PRED_$meta_call_5_str_17_1();
    static Predicate _$meta_call_5_str_17_2 = new PRED_$meta_call_5_str_17_2();
    static Predicate _$meta_call_5_str_17_3 = new PRED_$meta_call_5_str_17_3();
    static Predicate _$meta_call_5_str_17_4 = new PRED_$meta_call_5_str_17_4();
    static Predicate _$meta_call_5_str_18 = new PRED_$meta_call_5_str_18();
    static Predicate _$meta_call_5_str_18_1 = new PRED_$meta_call_5_str_18_1();
    static Predicate _$meta_call_5_str_18_2 = new PRED_$meta_call_5_str_18_2();
    static Predicate _$meta_call_5_str_18_3 = new PRED_$meta_call_5_str_18_3();
    static Predicate _$meta_call_5_str_18_4 = new PRED_$meta_call_5_str_18_4();
    static Predicate _$meta_call_5_str_19 = new PRED_$meta_call_5_str_19();
    static Predicate _$meta_call_5_str_19_1 = new PRED_$meta_call_5_str_19_1();
    static Predicate _$meta_call_5_str_19_2 = new PRED_$meta_call_5_str_19_2();
    static Predicate _$meta_call_5_str_19_3 = new PRED_$meta_call_5_str_19_3();
    static Predicate _$meta_call_5_str_19_4 = new PRED_$meta_call_5_str_19_4();
    static Predicate _$meta_call_5_str_20 = new PRED_$meta_call_5_str_20();
    static Predicate _$meta_call_5_str_20_1 = new PRED_$meta_call_5_str_20_1();
    static Predicate _$meta_call_5_str_20_2 = new PRED_$meta_call_5_str_20_2();
    static Predicate _$meta_call_5_str_20_3 = new PRED_$meta_call_5_str_20_3();
    static Predicate _$meta_call_5_str_20_4 = new PRED_$meta_call_5_str_20_4();
    static Predicate _$meta_call_5_str_21 = new PRED_$meta_call_5_str_21();
    static Predicate _$meta_call_5_str_21_1 = new PRED_$meta_call_5_str_21_1();
    static Predicate _$meta_call_5_str_21_2 = new PRED_$meta_call_5_str_21_2();
    static Predicate _$meta_call_5_str_21_3 = new PRED_$meta_call_5_str_21_3();
    static Predicate _$meta_call_5_str_21_4 = new PRED_$meta_call_5_str_21_4();
    static Predicate _$meta_call_5_str_22 = new PRED_$meta_call_5_str_22();
    static Predicate _$meta_call_5_str_22_1 = new PRED_$meta_call_5_str_22_1();
    static Predicate _$meta_call_5_str_22_2 = new PRED_$meta_call_5_str_22_2();
    static Predicate _$meta_call_5_str_22_3 = new PRED_$meta_call_5_str_22_3();
    static Predicate _$meta_call_5_str_22_4 = new PRED_$meta_call_5_str_22_4();
    static Predicate _$meta_call_5_lis = new PRED_$meta_call_5_lis();
    static Predicate _$meta_call_5_lis_1 = new PRED_$meta_call_5_lis_1();
    static Predicate _$meta_call_5_lis_2 = new PRED_$meta_call_5_lis_2();
    static Predicate _$meta_call_5_lis_3 = new PRED_$meta_call_5_lis_3();
    static Predicate _$meta_call_5_lis_4 = new PRED_$meta_call_5_lis_4();
    static Predicate _$meta_call_5_1 = new PRED_$meta_call_5_1();
    static Predicate _$meta_call_5_2 = new PRED_$meta_call_5_2();
    static Predicate _$meta_call_5_3 = new PRED_$meta_call_5_3();
    static Predicate _$meta_call_5_4 = new PRED_$meta_call_5_4();
    static Predicate _$meta_call_5_5 = new PRED_$meta_call_5_5();
    static Predicate _$meta_call_5_6 = new PRED_$meta_call_5_6();
    static Predicate _$meta_call_5_7 = new PRED_$meta_call_5_7();
    static Predicate _$meta_call_5_8 = new PRED_$meta_call_5_8();
    static Predicate _$meta_call_5_9 = new PRED_$meta_call_5_9();
    static Predicate _$meta_call_5_10 = new PRED_$meta_call_5_10();
    static Predicate _$meta_call_5_11 = new PRED_$meta_call_5_11();
    static Predicate _$meta_call_5_12 = new PRED_$meta_call_5_12();
    static Predicate _$meta_call_5_13 = new PRED_$meta_call_5_13();
    static Predicate _$meta_call_5_14 = new PRED_$meta_call_5_14();
    static Predicate _$meta_call_5_15 = new PRED_$meta_call_5_15();
    static Predicate _$meta_call_5_16 = new PRED_$meta_call_5_16();
    static Predicate _$meta_call_5_17 = new PRED_$meta_call_5_17();
    static Predicate _$meta_call_5_18 = new PRED_$meta_call_5_18();
    static Predicate _$meta_call_5_19 = new PRED_$meta_call_5_19();
    static Predicate _$meta_call_5_20 = new PRED_$meta_call_5_20();
    static Predicate _$meta_call_5_21 = new PRED_$meta_call_5_21();
    static Predicate _$meta_call_5_22 = new PRED_$meta_call_5_22();
    static Predicate _$meta_call_5_23 = new PRED_$meta_call_5_23();
    static Predicate _$meta_call_5_24 = new PRED_$meta_call_5_24();
    static Predicate _$meta_call_5_25 = new PRED_$meta_call_5_25();
    static Predicate _$meta_call_5_26 = new PRED_$meta_call_5_26();
    static Predicate _$meta_call_5_27 = new PRED_$meta_call_5_27();
    static Predicate _$meta_call_5_28 = new PRED_$meta_call_5_28();
    static Predicate _$meta_call_5_29 = new PRED_$meta_call_5_29();
    static Predicate _$meta_call_5_30 = new PRED_$meta_call_5_30();
    static Predicate _$meta_call_5_31 = new PRED_$meta_call_5_31();
    static Predicate _$meta_call_5_32 = new PRED_$meta_call_5_32();
    static Predicate _$meta_call_5_33 = new PRED_$meta_call_5_33();
    static Predicate _$meta_call_5_34 = new PRED_$meta_call_5_34();
    static Predicate _$meta_call_5_35 = new PRED_$meta_call_5_35();
    static Predicate _$meta_call_5_36 = new PRED_$meta_call_5_36();
    static Predicate _$meta_call_5_37 = new PRED_$meta_call_5_37();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(7);
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(23);
    static {
        con.put(s4, _$meta_call_5_con_0);
        con.put(s5, _$meta_call_5_con_1);
        con.put(s6, _$meta_call_5_con_2);
        con.put(s7, _$meta_call_5_con_3);
        con.put(s8, _$meta_call_5_con_4);
        con.put(s11, _$meta_call_5_con_5);
        con.put(s15, _$meta_call_5_con_6);
        str.put(s9, _$meta_call_5_str_0);
        str.put(s10, _$meta_call_5_str_1);
        str.put(s12, _$meta_call_5_str_2);
        str.put(s13, _$meta_call_5_str_3);
        str.put(s14, _$meta_call_5_str_4);
        str.put(s23, _$meta_call_5_str_5);
        str.put(s25, _$meta_call_5_str_6);
        str.put(s24, _$meta_call_5_str_7);
        str.put(s26, _$meta_call_5_str_8);
        str.put(s27, _$meta_call_5_str_9);
        str.put(s28, _$meta_call_5_str_10);
        str.put(s29, _$meta_call_5_str_11);
        str.put(s30, _$meta_call_5_str_12);
        str.put(s31, _$meta_call_5_str_13);
        str.put(s32, _$meta_call_5_str_14);
        str.put(s33, _$meta_call_5_str_15);
        str.put(s34, _$meta_call_5_str_16);
        str.put(s35, _$meta_call_5_str_17);
        str.put(s36, _$meta_call_5_str_18);
        str.put(s37, _$meta_call_5_str_19);
        str.put(s38, _$meta_call_5_str_20);
        str.put(s39, _$meta_call_5_str_21);
        str.put(s40, _$meta_call_5_str_22);
    }

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$meta_call_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$meta_call_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$meta_call"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$meta_call'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        return exit(engine, _$meta_call_5_top);
    }
}

class PRED_$meta_call_5_top extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$meta_call_5_var, _$meta_call_5_int, _$meta_call_5_int, _$meta_call_5_con, _$meta_call_5_str, _$meta_call_5_lis);
    }
}

class PRED_$meta_call_5_var extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_var_1);
    }
}

class PRED_$meta_call_5_var_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_var_2);
    }
}

class PRED_$meta_call_5_var_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_3, _$meta_call_5_var_3);
    }
}

class PRED_$meta_call_5_var_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_4, _$meta_call_5_var_4);
    }
}

class PRED_$meta_call_5_var_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_5, _$meta_call_5_var_5);
    }
}

class PRED_$meta_call_5_var_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_6, _$meta_call_5_var_6);
    }
}

class PRED_$meta_call_5_var_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_7, _$meta_call_5_var_7);
    }
}

class PRED_$meta_call_5_var_7 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_8, _$meta_call_5_var_8);
    }
}

class PRED_$meta_call_5_var_8 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_9, _$meta_call_5_var_9);
    }
}

class PRED_$meta_call_5_var_9 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_10, _$meta_call_5_var_10);
    }
}

class PRED_$meta_call_5_var_10 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_11, _$meta_call_5_var_11);
    }
}

class PRED_$meta_call_5_var_11 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_12, _$meta_call_5_var_12);
    }
}

class PRED_$meta_call_5_var_12 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_13, _$meta_call_5_var_13);
    }
}

class PRED_$meta_call_5_var_13 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_14, _$meta_call_5_var_14);
    }
}

class PRED_$meta_call_5_var_14 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_15, _$meta_call_5_var_15);
    }
}

class PRED_$meta_call_5_var_15 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_16, _$meta_call_5_var_16);
    }
}

class PRED_$meta_call_5_var_16 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_17, _$meta_call_5_var_17);
    }
}

class PRED_$meta_call_5_var_17 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_18, _$meta_call_5_var_18);
    }
}

class PRED_$meta_call_5_var_18 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_19, _$meta_call_5_var_19);
    }
}

class PRED_$meta_call_5_var_19 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_20, _$meta_call_5_var_20);
    }
}

class PRED_$meta_call_5_var_20 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_21, _$meta_call_5_var_21);
    }
}

class PRED_$meta_call_5_var_21 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_22, _$meta_call_5_var_22);
    }
}

class PRED_$meta_call_5_var_22 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_23, _$meta_call_5_var_23);
    }
}

class PRED_$meta_call_5_var_23 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_24, _$meta_call_5_var_24);
    }
}

class PRED_$meta_call_5_var_24 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_25, _$meta_call_5_var_25);
    }
}

class PRED_$meta_call_5_var_25 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_26, _$meta_call_5_var_26);
    }
}

class PRED_$meta_call_5_var_26 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_27, _$meta_call_5_var_27);
    }
}

class PRED_$meta_call_5_var_27 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_28, _$meta_call_5_var_28);
    }
}

class PRED_$meta_call_5_var_28 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_29, _$meta_call_5_var_29);
    }
}

class PRED_$meta_call_5_var_29 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_30, _$meta_call_5_var_30);
    }
}

class PRED_$meta_call_5_var_30 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_31, _$meta_call_5_var_31);
    }
}

class PRED_$meta_call_5_var_31 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_32, _$meta_call_5_var_32);
    }
}

class PRED_$meta_call_5_var_32 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_33, _$meta_call_5_var_33);
    }
}

class PRED_$meta_call_5_var_33 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_34, _$meta_call_5_var_34);
    }
}

class PRED_$meta_call_5_var_34 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_35, _$meta_call_5_var_35);
    }
}

class PRED_$meta_call_5_var_35 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_var_36);
    }
}

class PRED_$meta_call_5_var_36 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_int extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_int_1);
    }
}

class PRED_$meta_call_5_int_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_int_2);
    }
}

class PRED_$meta_call_5_int_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_int_3);
    }
}

class PRED_$meta_call_5_int_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_con extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _$meta_call_5_int);
    }
}

class PRED_$meta_call_5_con_0 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_0_1);
    }
}

class PRED_$meta_call_5_con_0_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_0_2);
    }
}

class PRED_$meta_call_5_con_0_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_3, _$meta_call_5_con_0_3);
    }
}

class PRED_$meta_call_5_con_0_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_con_0_4);
    }
}

class PRED_$meta_call_5_con_0_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_con_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_1_1);
    }
}

class PRED_$meta_call_5_con_1_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_1_2);
    }
}

class PRED_$meta_call_5_con_1_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_4, _$meta_call_5_con_1_3);
    }
}

class PRED_$meta_call_5_con_1_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_con_1_4);
    }
}

class PRED_$meta_call_5_con_1_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_con_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_2_1);
    }
}

class PRED_$meta_call_5_con_2_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_2_2);
    }
}

class PRED_$meta_call_5_con_2_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_5, _$meta_call_5_con_2_3);
    }
}

class PRED_$meta_call_5_con_2_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_con_2_4);
    }
}

class PRED_$meta_call_5_con_2_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_con_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_3_1);
    }
}

class PRED_$meta_call_5_con_3_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_3_2);
    }
}

class PRED_$meta_call_5_con_3_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_6, _$meta_call_5_con_3_3);
    }
}

class PRED_$meta_call_5_con_3_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_con_3_4);
    }
}

class PRED_$meta_call_5_con_3_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_con_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_4_1);
    }
}

class PRED_$meta_call_5_con_4_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_4_2);
    }
}

class PRED_$meta_call_5_con_4_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_7, _$meta_call_5_con_4_3);
    }
}

class PRED_$meta_call_5_con_4_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_con_4_4);
    }
}

class PRED_$meta_call_5_con_4_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_con_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_5_1);
    }
}

class PRED_$meta_call_5_con_5_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_5_2);
    }
}

class PRED_$meta_call_5_con_5_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_10, _$meta_call_5_con_5_3);
    }
}

class PRED_$meta_call_5_con_5_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_con_5_4);
    }
}

class PRED_$meta_call_5_con_5_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_con_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_con_6_1);
    }
}

class PRED_$meta_call_5_con_6_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_con_6_2);
    }
}

class PRED_$meta_call_5_con_6_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_15, _$meta_call_5_con_6_3);
    }
}

class PRED_$meta_call_5_con_6_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_16, _$meta_call_5_con_6_4);
    }
}

class PRED_$meta_call_5_con_6_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_con_6_5);
    }
}

class PRED_$meta_call_5_con_6_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$meta_call_5_int);
    }
}

class PRED_$meta_call_5_str_0 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_0_1);
    }
}

class PRED_$meta_call_5_str_0_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_0_2);
    }
}

class PRED_$meta_call_5_str_0_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_8, _$meta_call_5_str_0_3);
    }
}

class PRED_$meta_call_5_str_0_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_0_4);
    }
}

class PRED_$meta_call_5_str_0_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_1_1);
    }
}

class PRED_$meta_call_5_str_1_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_1_2);
    }
}

class PRED_$meta_call_5_str_1_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_9, _$meta_call_5_str_1_3);
    }
}

class PRED_$meta_call_5_str_1_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_1_4);
    }
}

class PRED_$meta_call_5_str_1_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_2_1);
    }
}

class PRED_$meta_call_5_str_2_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_2_2);
    }
}

class PRED_$meta_call_5_str_2_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_11, _$meta_call_5_str_2_3);
    }
}

class PRED_$meta_call_5_str_2_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_2_4);
    }
}

class PRED_$meta_call_5_str_2_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_3_1);
    }
}

class PRED_$meta_call_5_str_3_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_3_2);
    }
}

class PRED_$meta_call_5_str_3_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_13, _$meta_call_5_str_3_3);
    }
}

class PRED_$meta_call_5_str_3_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_3_4);
    }
}

class PRED_$meta_call_5_str_3_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_4_1);
    }
}

class PRED_$meta_call_5_str_4_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_4_2);
    }
}

class PRED_$meta_call_5_str_4_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_14, _$meta_call_5_str_4_3);
    }
}

class PRED_$meta_call_5_str_4_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_4_4);
    }
}

class PRED_$meta_call_5_str_4_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_5_1);
    }
}

class PRED_$meta_call_5_str_5_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_5_2);
    }
}

class PRED_$meta_call_5_str_5_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_17, _$meta_call_5_str_5_3);
    }
}

class PRED_$meta_call_5_str_5_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_5_4);
    }
}

class PRED_$meta_call_5_str_5_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_6_1);
    }
}

class PRED_$meta_call_5_str_6_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_6_2);
    }
}

class PRED_$meta_call_5_str_6_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_19, _$meta_call_5_str_6_3);
    }
}

class PRED_$meta_call_5_str_6_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_6_4);
    }
}

class PRED_$meta_call_5_str_6_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_7 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_7_1);
    }
}

class PRED_$meta_call_5_str_7_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_7_2);
    }
}

class PRED_$meta_call_5_str_7_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_18, _$meta_call_5_str_7_3);
    }
}

class PRED_$meta_call_5_str_7_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_20, _$meta_call_5_str_7_4);
    }
}

class PRED_$meta_call_5_str_7_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_7_5);
    }
}

class PRED_$meta_call_5_str_7_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_8 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_8_1);
    }
}

class PRED_$meta_call_5_str_8_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_8_2);
    }
}

class PRED_$meta_call_5_str_8_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_21, _$meta_call_5_str_8_3);
    }
}

class PRED_$meta_call_5_str_8_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_8_4);
    }
}

class PRED_$meta_call_5_str_8_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_9 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_9_1);
    }
}

class PRED_$meta_call_5_str_9_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_9_2);
    }
}

class PRED_$meta_call_5_str_9_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_22, _$meta_call_5_str_9_3);
    }
}

class PRED_$meta_call_5_str_9_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_9_4);
    }
}

class PRED_$meta_call_5_str_9_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_10 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_10_1);
    }
}

class PRED_$meta_call_5_str_10_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_10_2);
    }
}

class PRED_$meta_call_5_str_10_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_23, _$meta_call_5_str_10_3);
    }
}

class PRED_$meta_call_5_str_10_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_10_4);
    }
}

class PRED_$meta_call_5_str_10_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_11 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_11_1);
    }
}

class PRED_$meta_call_5_str_11_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_11_2);
    }
}

class PRED_$meta_call_5_str_11_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_24, _$meta_call_5_str_11_3);
    }
}

class PRED_$meta_call_5_str_11_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_11_4);
    }
}

class PRED_$meta_call_5_str_11_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_12 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_12_1);
    }
}

class PRED_$meta_call_5_str_12_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_12_2);
    }
}

class PRED_$meta_call_5_str_12_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_25, _$meta_call_5_str_12_3);
    }
}

class PRED_$meta_call_5_str_12_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_12_4);
    }
}

class PRED_$meta_call_5_str_12_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_13 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_13_1);
    }
}

class PRED_$meta_call_5_str_13_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_13_2);
    }
}

class PRED_$meta_call_5_str_13_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_26, _$meta_call_5_str_13_3);
    }
}

class PRED_$meta_call_5_str_13_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_13_4);
    }
}

class PRED_$meta_call_5_str_13_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_14 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_14_1);
    }
}

class PRED_$meta_call_5_str_14_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_14_2);
    }
}

class PRED_$meta_call_5_str_14_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_27, _$meta_call_5_str_14_3);
    }
}

class PRED_$meta_call_5_str_14_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_14_4);
    }
}

class PRED_$meta_call_5_str_14_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_15 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_15_1);
    }
}

class PRED_$meta_call_5_str_15_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_15_2);
    }
}

class PRED_$meta_call_5_str_15_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_28, _$meta_call_5_str_15_3);
    }
}

class PRED_$meta_call_5_str_15_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_15_4);
    }
}

class PRED_$meta_call_5_str_15_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_16 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_16_1);
    }
}

class PRED_$meta_call_5_str_16_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_16_2);
    }
}

class PRED_$meta_call_5_str_16_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_29, _$meta_call_5_str_16_3);
    }
}

class PRED_$meta_call_5_str_16_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_16_4);
    }
}

class PRED_$meta_call_5_str_16_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_17 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_17_1);
    }
}

class PRED_$meta_call_5_str_17_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_17_2);
    }
}

class PRED_$meta_call_5_str_17_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_30, _$meta_call_5_str_17_3);
    }
}

class PRED_$meta_call_5_str_17_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_17_4);
    }
}

class PRED_$meta_call_5_str_17_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_18 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_18_1);
    }
}

class PRED_$meta_call_5_str_18_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_18_2);
    }
}

class PRED_$meta_call_5_str_18_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_31, _$meta_call_5_str_18_3);
    }
}

class PRED_$meta_call_5_str_18_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_18_4);
    }
}

class PRED_$meta_call_5_str_18_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_19 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_19_1);
    }
}

class PRED_$meta_call_5_str_19_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_19_2);
    }
}

class PRED_$meta_call_5_str_19_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_32, _$meta_call_5_str_19_3);
    }
}

class PRED_$meta_call_5_str_19_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_19_4);
    }
}

class PRED_$meta_call_5_str_19_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_20 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_20_1);
    }
}

class PRED_$meta_call_5_str_20_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_20_2);
    }
}

class PRED_$meta_call_5_str_20_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_33, _$meta_call_5_str_20_3);
    }
}

class PRED_$meta_call_5_str_20_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_20_4);
    }
}

class PRED_$meta_call_5_str_20_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_21 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_21_1);
    }
}

class PRED_$meta_call_5_str_21_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_21_2);
    }
}

class PRED_$meta_call_5_str_21_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_34, _$meta_call_5_str_21_3);
    }
}

class PRED_$meta_call_5_str_21_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_21_4);
    }
}

class PRED_$meta_call_5_str_21_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_str_22 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_str_22_1);
    }
}

class PRED_$meta_call_5_str_22_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_str_22_2);
    }
}

class PRED_$meta_call_5_str_22_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_35, _$meta_call_5_str_22_3);
    }
}

class PRED_$meta_call_5_str_22_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_str_22_4);
    }
}

class PRED_$meta_call_5_str_22_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_lis extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$meta_call_5_1, _$meta_call_5_lis_1);
    }
}

class PRED_$meta_call_5_lis_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_2, _$meta_call_5_lis_2);
    }
}

class PRED_$meta_call_5_lis_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_12, _$meta_call_5_lis_3);
    }
}

class PRED_$meta_call_5_lis_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$meta_call_5_36, _$meta_call_5_lis_4);
    }
}

class PRED_$meta_call_5_lis_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$meta_call_5_37);
    }
}

class PRED_$meta_call_5_1 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(A, B, C, D, E):-var(A), !, illarg(var, call(A), 1)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, call(A), 1)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        Object[] y1 = {a1};
        a7 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s1, a7, si3, cont));
    }
}

class PRED_$meta_call_5_2 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(A, B, C, D, E):-closure(A), !, '$call_closure'(A)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(A, B, C, D, E):-['$get_level'(F), closure(A), '$cut'(F), '$call_closure'(A)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of closure(a(1))
        a1 = deref( a1);
        if (! isClosure(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        return exit(engine, new PRED_$call_closure_1(a1, cont));
    }
}

class PRED_$meta_call_5_3 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(true, A, B, C, D):-!
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(true, A, B, C, D):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s4))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s4);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$meta_call_5_4 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(trace, A, B, C, D):-!, trace
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(trace, A, B, C, D):-['$neck_cut', trace]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s5))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s5);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_trace_0(cont));
    }
}

class PRED_$meta_call_5_5 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(debug, A, B, C, D):-!, debug
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(debug, A, B, C, D):-['$neck_cut', debug]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s6))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s6);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_debug_0(cont));
    }
}

class PRED_$meta_call_5_6 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(notrace, A, B, C, D):-!, notrace
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(notrace, A, B, C, D):-['$neck_cut', notrace]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s7))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s7);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_notrace_0(cont));
    }
}

class PRED_$meta_call_5_7 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(nodebug, A, B, C, D):-!, nodebug
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(nodebug, A, B, C, D):-['$neck_cut', nodebug]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s8))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s8);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_nodebug_0(cont));
    }
}

class PRED_$meta_call_5_8 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(spy(A), B, C, D, E):-!, spy(A)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(spy(A), B, C, D, E):-['$neck_cut', spy(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s9,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s9, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_spy_1(a6, cont));
    }
}

class PRED_$meta_call_5_9 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(nospy(A), B, C, D, E):-!, nospy(A)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(nospy(A), B, C, D, E):-['$neck_cut', nospy(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s10,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s10, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_nospy_1(a6, cont));
    }
}

class PRED_$meta_call_5_10 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(nospyall, A, B, C, D):-!, nospyall
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(nospyall, A, B, C, D):-['$neck_cut', nospyall]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s11))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s11);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_nospyall_0(cont));
    }
}

class PRED_$meta_call_5_11 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(leash(A), B, C, D, E):-!, leash(A)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(leash(A), B, C, D, E):-['$neck_cut', leash(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s12,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s12, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_leash_1(a6, cont));
    }
}

class PRED_$meta_call_5_12 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'([A|B], C, D, E, F):-!, consult([A|B])
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'([A|B], C, D, E, F):-['$neck_cut', consult([A|B])]
        a1 = deref( a1);
        if (isListTerm(a1)){
            Object[] args = consArgs(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a1,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a8 = makeList(a6, a7);
        return exit(engine, new PRED_consult_1(a8, cont));
    }
}

class PRED_$meta_call_5_13 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(A^B, C, D, E, F):-!, '$meta_call'(B, C, D, E, F)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(A^B, C, D, E, F):-['$neck_cut', '$meta_call'(B, C, D, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s13,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {engine.makeVariable(this), a6};
            bind(/*VAR*/ a1,makeStructure(s13, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a6;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine.cont = cont;
        return exit(engine, _$meta_call_5_top);
    }
}

class PRED_$meta_call_5_14 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(A:B, C, D, E, F):-!, '$meta_call'(B, A, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(A:B, C, D, E, F):-['$neck_cut', '$meta_call'(B, A, D, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s14,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s14, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a7;
        engine_aregs[2] = a6;
        engine_aregs[3] = a3;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine.cont = cont;
        return exit(engine, _$meta_call_5_top);
    }
}

class PRED_$meta_call_5_15 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(!, A, no, B, C):-!, illarg(context(if, cut), !, 0)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(!, A, no, B, C):-['$neck_cut', illarg(context(if, cut), !, 0)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s15))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s15);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s16))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s16);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_illarg_3(s21, s15, si22, cont));
    }
}

class PRED_$meta_call_5_16 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(!, A, B, C, D):-!, '$cut'(B)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(!, A, B, C, D):-['$neck_cut', '$cut'(B)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s15))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s15);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$meta_call_5_17 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'((A, B), C, D, E, F):-!, '$meta_call'(A, C, D, E, F), '$meta_call'(B, C, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'((A, B), C, D, E, F):-['$neck_cut', '$meta_call'(A, C, D, E, F), '$meta_call'(B, C, D, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s23,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s23, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$meta_call_5(a7, a2, a3, a4, a5, cont);
        engine_aregs[1] = a6;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine.cont = p1;
        return exit(engine, _$meta_call_5_top);
    }
}

class PRED_$meta_call_5_18 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'((A->B;C), D, E, F, G):-!, '$dummy_0_builtins.pl'(A, B, C, D, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'((A->B;C), D, E, F, G):-['$neck_cut', '$dummy_0_builtins.pl'(A, B, C, D, E, F, G)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s24,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s24, args));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s25,a6))
                return fail(engine);
            Object[] args = args(a6);
            a8 = args[0];
            a9 = args[1];
        } else if (isVariable(a6)){
            a8 = engine.makeVariable(this);
            a9 = engine.makeVariable(this);
            Object[] args = {a8, a9};
            bind(/*VAR*/ a6,makeStructure(s25, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$dummy_0_builtins$002Epl_7(a8, a9, a7, a2, a3, a4, a5, cont));
    }
}

class PRED_$meta_call_5_19 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'((A->B), C, D, E, F):-!, '$dummy_1_builtins.pl'(A, B, C, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'((A->B), C, D, E, F):-['$neck_cut', '$dummy_1_builtins.pl'(A, B, C, D, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s25,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s25, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$dummy_1_builtins$002Epl_6(a6, a7, a2, a3, a4, a5, cont));
    }
}

class PRED_$meta_call_5_20 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'((A;B), C, D, E, F):-!, '$dummy_2_builtins.pl'(A, B, C, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'((A;B), C, D, E, F):-['$neck_cut', '$dummy_2_builtins.pl'(A, B, C, D, E, F)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s24,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s24, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$dummy_2_builtins$002Epl_6(a6, a7, a2, a3, a4, a5, cont));
    }
}

class PRED_$meta_call_5_21 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(\+A, B, C, D, E):-!, '$dummy_3_builtins.pl'(A, B, D, E)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(\+A, B, C, D, E):-['$neck_cut', '$dummy_3_builtins.pl'(A, B, D, E)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s26,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s26, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$dummy_3_builtins$002Epl_4(a6, a2, a4, a5, cont));
    }
}

class PRED_$meta_call_5_22 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(findall(A, B, C), D, E, F, G):-!, findall(A, '$meta_call'(B, D, E, F, G), C)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(findall(A, B, C), D, E, F, G):-['$neck_cut', findall(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s27,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a6, a7, a8};
            bind(/*VAR*/ a1,makeStructure(s27, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a9 = makeClosure(new PRED_$meta_call_5(a7, a2, a3, a4, a5, null));
        return exit(engine, new PRED_findall_3(a6, a9, a8, cont));
    }
}

class PRED_$meta_call_5_23 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(bagof(A, B, C), D, E, F, G):-!, bagof(A, '$meta_call'(B, D, E, F, G), C)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(bagof(A, B, C), D, E, F, G):-['$neck_cut', bagof(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s28,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a6, a7, a8};
            bind(/*VAR*/ a1,makeStructure(s28, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a9 = makeClosure(new PRED_$meta_call_5(a7, a2, a3, a4, a5, null));
        return exit(engine, new PRED_bagof_3(a6, a9, a8, cont));
    }
}

class PRED_$meta_call_5_24 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(setof(A, B, C), D, E, F, G):-!, setof(A, '$meta_call'(B, D, E, F, G), C)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(setof(A, B, C), D, E, F, G):-['$neck_cut', setof(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s29,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a6, a7, a8};
            bind(/*VAR*/ a1,makeStructure(s29, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a9 = makeClosure(new PRED_$meta_call_5(a7, a2, a3, a4, a5, null));
        return exit(engine, new PRED_setof_3(a6, a9, a8, cont));
    }
}

class PRED_$meta_call_5_25 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(once(A), B, C, D, E):-!, once('$meta_call'(A, B, C, D, E))
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(once(A), B, C, D, E):-['$neck_cut', once('jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(A, B, C, D, E))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s30,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s30, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a7 = makeClosure(new PRED_$meta_call_5(a6, a2, a3, a4, a5, null));
        return exit(engine, new PRED_once_1(a7, cont));
    }
}

class PRED_$meta_call_5_26 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(on_exception(A, B, C), D, E, F, G):-!, on_exception(A, '$meta_call'(B, D, E, F, G), '$meta_call'(C, D, E, F, G))
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(on_exception(A, B, C), D, E, F, G):-['$neck_cut', on_exception(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(C, D, E, F, G))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s31,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a6, a7, a8};
            bind(/*VAR*/ a1,makeStructure(s31, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a9 = makeClosure(new PRED_$meta_call_5(a7, a2, a3, a4, a5, null));
        a10 = makeClosure(new PRED_$meta_call_5(a8, a2, a3, a4, a5, null));
        return exit(engine, new PRED_on_exception_3(a6, a9, a10, cont));
    }
}

class PRED_$meta_call_5_27 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(catch(A, B, C), D, E, F, G):-!, catch('$meta_call'(A, D, E, F, G), B, '$meta_call'(C, D, E, F, G))
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(catch(A, B, C), D, E, F, G):-['$neck_cut', catch('jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(A, D, E, F, G), B, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(C, D, E, F, G))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s32,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
            a8 = args[2];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a6, a7, a8};
            bind(/*VAR*/ a1,makeStructure(s32, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a9 = makeClosure(new PRED_$meta_call_5(a6, a2, a3, a4, a5, null));
        a10 = makeClosure(new PRED_$meta_call_5(a8, a2, a3, a4, a5, null));
        return exit(engine, new PRED_catch_3(a9, a7, a10, cont));
    }
}

class PRED_$meta_call_5_28 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(synchronized(A, B), C, D, E, F):-!, synchronized(A, '$meta_call'(B, C, D, E, F))
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(synchronized(A, B), C, D, E, F):-['$neck_cut', synchronized(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, C, D, E, F))]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s33,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s33, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a8 = makeClosure(new PRED_$meta_call_5(a7, a2, a3, a4, a5, null));
        return exit(engine, new PRED_synchronized_2(a6, a8, cont));
    }
}

class PRED_$meta_call_5_29 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(clause(A, B), C, D, E, F):-!, clause(C:A, B)
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(clause(A, B), C, D, E, F):-['$neck_cut', clause(C:A, B)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s34,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a6, a7};
            bind(/*VAR*/ a1,makeStructure(s34, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a6};
        a8 = makeStructure(s14, y1);
        return exit(engine, new PRED_clause_2(a8, a7, cont));
    }
}

class PRED_$meta_call_5_30 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(assert(A), B, C, D, E):-!, assertz(B:A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(assert(A), B, C, D, E):-['$neck_cut', assertz(B:A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s35,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s35, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a6};
        a7 = makeStructure(s14, y1);
        return exit(engine, new PRED_assertz_1(a7, cont));
    }
}

class PRED_$meta_call_5_31 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(assertz(A), B, C, D, E):-!, assertz(B:A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(assertz(A), B, C, D, E):-['$neck_cut', assertz(B:A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s36,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s36, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a6};
        a7 = makeStructure(s14, y1);
        return exit(engine, new PRED_assertz_1(a7, cont));
    }
}

class PRED_$meta_call_5_32 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(asserta(A), B, C, D, E):-!, asserta(B:A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(asserta(A), B, C, D, E):-['$neck_cut', asserta(B:A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s37,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s37, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a6};
        a7 = makeStructure(s14, y1);
        return exit(engine, new PRED_asserta_1(a7, cont));
    }
}

class PRED_$meta_call_5_33 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(retract(A), B, C, D, E):-!, retract(B:A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(retract(A), B, C, D, E):-['$neck_cut', retract(B:A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s38,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s38, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a6};
        a7 = makeStructure(s14, y1);
        return exit(engine, new PRED_retract_1(a7, cont));
    }
}

class PRED_$meta_call_5_34 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(abolish(A), B, C, D, E):-!, abolish(B:A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(abolish(A), B, C, D, E):-['$neck_cut', abolish(B:A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s39,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s39, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a6};
        a7 = makeStructure(s14, y1);
        return exit(engine, new PRED_abolish_1(a7, cont));
    }
}

class PRED_$meta_call_5_35 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(retractall(A), B, C, D, E):-!, retractall(B:A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(retractall(A), B, C, D, E):-['$neck_cut', retractall(B:A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s40,a1))
                return fail(engine);
            Object[] args = args(a1);
            a6 = args[0];
        } else if (isVariable(a1)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6};
            bind(/*VAR*/ a1,makeStructure(s40, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a2, a6};
        a7 = makeStructure(s14, y1);
        return exit(engine, new PRED_retractall_1(a7, cont));
    }
}

class PRED_$meta_call_5_36 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(A, B, C, D, E):-atom(B), callable(A), !, '$meta_call'(E, D, B, A)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(A, B, C, D, E):-['$get_level'(F), atom(B), callable(A), '$cut'(F), '$meta_call'(E, D, B, A)]
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(2))
        a2 = deref( a2);
        if (! isAtomTerm(a2)) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$meta_call_4(a5, a4, a2, a1, cont);
        p2 = new PRED_$cut_1(a6, p1);
        return exit(engine, new PRED_callable_1(a1, p2));
    }
}

class PRED_$meta_call_5_37 extends PRED_$meta_call_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$meta_call'(A, B, C, D, E):-illarg(type(callable), call(B:A), 1)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$meta_call'(A, B, C, D, E):-[illarg(type(callable), call(B:A), 1)]
        Object[] y1 = {a2, a1};
        a6 = makeStructure(s14, y1);
        Object[] y2 = {a6};
        a7 = makeStructure(s2, y2);
        return exit(engine, new PRED_illarg_3(s44, a7, si3, cont));
    }
}
