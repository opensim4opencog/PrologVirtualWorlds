package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>(;)/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_$003B_2 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("->", 2);
    static /*Symbol*/Object s2 = makeAtom(":", 2);
    static /*Symbol*/Object s3 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static Predicate _$003B_2_var = new PRED_$003B_2_var();
    static Predicate _$003B_2_var_1 = new PRED_$003B_2_var_1();
    static Predicate _$003B_2_var_2 = new PRED_$003B_2_var_2();
    static Predicate _$003B_2_var_3 = new PRED_$003B_2_var_3();
    static Predicate _$003B_2_int = new PRED_$003B_2_int();
    static Predicate _$003B_2_int_1 = new PRED_$003B_2_int_1();
    static Predicate _$003B_2_1 = new PRED_$003B_2_1();
    static Predicate _$003B_2_2 = new PRED_$003B_2_2();
    static Predicate _$003B_2_3 = new PRED_$003B_2_3();
    static Predicate _$003B_2_4 = new PRED_$003B_2_4();

    public Object arg1, arg2;

    public PRED_$003B_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$003B_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return ";"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "';'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$003B_2_var, _$003B_2_int, _$003B_2_int, _$003B_2_int, _$003B_2_var, _$003B_2_int);
    }
}

class PRED_$003B_2_var extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$003B_2_1, _$003B_2_var_1);
    }
}

class PRED_$003B_2_var_1 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$003B_2_2, _$003B_2_var_2);
    }
}

class PRED_$003B_2_var_2 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$003B_2_3, _$003B_2_var_3);
    }
}

class PRED_$003B_2_var_3 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$003B_2_4);
    }
}

class PRED_$003B_2_int extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$003B_2_1, _$003B_2_int_1);
    }
}

class PRED_$003B_2_int_1 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$003B_2_2);
    }
}

class PRED_$003B_2_1 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // A;B:-A\= (C->D), call(A)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // A;B:-['$not_unifiable'(A, (C->D)), call('jp.ac.kobe_u.cs.prolog.builtin':A)]
        Object[] y1 = {engine.makeVariable(this), engine.makeVariable(this)};
        a3 = makeStructure(s1, y1);
        //START inline expansion of $not_unifiable(a(1), a(3))
        if (unify(a1,a3)) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y2 = {s3, a1};
        a4 = makeStructure(s2, y2);
        return exit(engine, new PRED_call_1(a4, cont));
    }
}

class PRED_$003B_2_2 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // A;B:-B\= (C->D), call(B)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // A;B:-['$not_unifiable'(B, (C->D)), call('jp.ac.kobe_u.cs.prolog.builtin':B)]
        Object[] y1 = {engine.makeVariable(this), engine.makeVariable(this)};
        a3 = makeStructure(s1, y1);
        //START inline expansion of $not_unifiable(a(2), a(3))
        if (unify(a2,a3)) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y2 = {s3, a2};
        a4 = makeStructure(s2, y2);
        return exit(engine, new PRED_call_1(a4, cont));
    }
}

class PRED_$003B_2_3 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // A->B;C:-call(A), !, call(B)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // A->B;C:-['$get_level'(D), call('jp.ac.kobe_u.cs.prolog.builtin':A), '$cut'(D), call('jp.ac.kobe_u.cs.prolog.builtin':B)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a3 = args[0];
            a4 = args[1];
        } else if (isVariable(a1)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a3, a4};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a5 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(5))
        if (! unify(a5,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {s3, a3};
        a6 = makeStructure(s2, y1);
        Object[] y2 = {s3, a4};
        a7 = makeStructure(s2, y2);
        p1 = new PRED_call_1(a7, cont);
        p2 = new PRED_$cut_1(a5, p1);
        return exit(engine, new PRED_call_1(a6, p2));
    }
}

class PRED_$003B_2_4 extends PRED_$003B_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // A->B;C:-call(C)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // A->B;C:-[call('jp.ac.kobe_u.cs.prolog.builtin':C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
        } else if (isVariable(a1)){
            Object[] args = {engine.makeVariable(this), engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        Object[] y1 = {s3, a2};
        a3 = makeStructure(s2, y1);
        return exit(engine, new PRED_call_1(a3, cont));
    }
}
