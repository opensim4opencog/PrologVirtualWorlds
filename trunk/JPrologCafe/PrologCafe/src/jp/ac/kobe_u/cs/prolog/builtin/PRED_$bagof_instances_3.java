package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$bagof_instances'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$bagof_instances_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("[]");
    static /*Symbol*/Object s2 = makeAtom("+", 2);
    static Predicate _$bagof_instances_3_var = new PRED_$bagof_instances_3_var();
    static Predicate _$bagof_instances_3_var_1 = new PRED_$bagof_instances_3_var_1();
    static Predicate _$bagof_instances_3_1 = new PRED_$bagof_instances_3_1();
    static Predicate _$bagof_instances_3_2 = new PRED_$bagof_instances_3_2();

    public Object arg1, arg2, arg3;

    public PRED_$bagof_instances_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$bagof_instances_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$bagof_instances"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$bagof_instances'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$bagof_instances_3_var, _$bagof_instances_3_2, _$bagof_instances_3_2, _$bagof_instances_3_var, _$bagof_instances_3_2, _$bagof_instances_3_2);
    }
}

class PRED_$bagof_instances_3_var extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$bagof_instances_3_1, _$bagof_instances_3_var_1);
    }
}

class PRED_$bagof_instances_3_var_1 extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$bagof_instances_3_2);
    }
}

class PRED_$bagof_instances_3_1 extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$bagof_instances'([], A, B):-fail
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$bagof_instances'([], A, B):-[fail]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of fail
        return fail(engine);
        //END inline expansion
    }
}

class PRED_$bagof_instances_3_2 extends PRED_$bagof_instances_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$bagof_instances'(A, B, C):-A=[D+E|F], '$variants_subset'(F, D, G, H, I), '$bagof_instances0'(I, B, C, [D+E|G], [E|H])
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$bagof_instances'(A, B, C):-['$unify'(A, [D+E|F]), '$variants_subset'(F, D, G, H, I), '$bagof_instances0'(I, B, C, [D+E|G], [E|H])]
        a4 = engine.makeVariable(this);
        a5 = engine.makeVariable(this);
        Object[] y1 = {a4, a5};
        a6 = makeStructure(s2, y1);
        a7 = engine.makeVariable(this);
        a8 = makeList(a6, a7);
        //START inline expansion of $unify(a(1), a(8))
        if (! unify(a1,a8)) {
            return fail(engine);
        }
        //END inline expansion
        a9 = engine.makeVariable(this);
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        Object[] y2 = {a4, a5};
        a12 = makeStructure(s2, y2);
        a13 = makeList(a12, a9);
        a14 = makeList(a5, a10);
        p1 = new PRED_$bagof_instances0_5(a11, a2, a3, a13, a14, cont);
        return exit(engine, new PRED_$variants_subset_5(a7, a4, a9, a10, a11, p1));
    }
}
