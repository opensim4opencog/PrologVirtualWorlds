package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$gen_indexing_keys0'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$gen_indexing_keys0_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("all");
    static /*Symbol*/Object s2 = makeAtom("lis");
    static /*Symbol*/Object s3 = makeAtom("[]");
    static /*List*/Object s4 = makeList(s2, s3);
    static /*List*/Object s5 = makeList(s1, s4);
    static /*Symbol*/Object s6 = makeAtom("str");
    static /*List*/Object s7 = makeList(s6, s3);
    static /*List*/Object s8 = makeList(s1, s7);
    static /*Symbol*/Object s9 = makeAtom("type", 1);
    static /*Symbol*/Object s10 = makeAtom("term");
    static Object[] s11 = {s10};
    static /*Structure*/Object s12 = makeStructure(s9, s11);
    static /*Symbol*/Object s13 = makeAtom("$gen_indexing_keys0", 3);
    static /*IntegerTerm*/Object si14 = makeInteger(1);
    static Predicate _$gen_indexing_keys0_3_sub_1 = new PRED_$gen_indexing_keys0_3_sub_1();
    static Predicate _$gen_indexing_keys0_3_sub_2 = new PRED_$gen_indexing_keys0_3_sub_2();
    static Predicate _$gen_indexing_keys0_3_sub_3 = new PRED_$gen_indexing_keys0_3_sub_3();
    static Predicate _$gen_indexing_keys0_3_sub_4 = new PRED_$gen_indexing_keys0_3_sub_4();
    static Predicate _$gen_indexing_keys0_3_1 = new PRED_$gen_indexing_keys0_3_1();
    static Predicate _$gen_indexing_keys0_3_2 = new PRED_$gen_indexing_keys0_3_2();
    static Predicate _$gen_indexing_keys0_3_3 = new PRED_$gen_indexing_keys0_3_3();
    static Predicate _$gen_indexing_keys0_3_4 = new PRED_$gen_indexing_keys0_3_4();
    static Predicate _$gen_indexing_keys0_3_5 = new PRED_$gen_indexing_keys0_3_5();

    public Object arg1, arg2, arg3;

    public PRED_$gen_indexing_keys0_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$gen_indexing_keys0_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$gen_indexing_keys0"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$gen_indexing_keys0'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$gen_indexing_keys0_3_1, _$gen_indexing_keys0_3_sub_1);
    }
}

class PRED_$gen_indexing_keys0_3_sub_1 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$gen_indexing_keys0_3_2, _$gen_indexing_keys0_3_sub_2);
    }
}

class PRED_$gen_indexing_keys0_3_sub_2 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$gen_indexing_keys0_3_3, _$gen_indexing_keys0_3_sub_3);
    }
}

class PRED_$gen_indexing_keys0_3_sub_3 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$gen_indexing_keys0_3_4, _$gen_indexing_keys0_3_sub_4);
    }
}

class PRED_$gen_indexing_keys0_3_sub_4 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$gen_indexing_keys0_3_5);
    }
}

class PRED_$gen_indexing_keys0_3_1 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$gen_indexing_keys0'(A, B, C):-var(A), !, hash_keys(B, C)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A, B, C):-['$get_level'(D), var(A), '$cut'(D), hash_keys(B, C)]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine, new PRED_hash_keys_2(a2, a3, cont));
    }
}

class PRED_$gen_indexing_keys0_3_2 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$gen_indexing_keys0'(A, B, [all, lis]):-A=[C|D], !
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A, B, [all, lis]):-['$get_level'(C), '$unify'(A, [D|E]), '$cut'(C)]
        if (! unify(s5,a3))
            return fail(engine);
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a5 = makeList(engine.makeVariable(this), engine.makeVariable(this));
        //START inline expansion of $unify(a(1), a(5))
        if (! unify(a1,a5)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$gen_indexing_keys0_3_3 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$gen_indexing_keys0'(A, B, [all, str]):-compound(A), !
        Object a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A, B, [all, str]):-['$get_level'(C), compound(A), '$cut'(C)]
        if (! unify(s8,a3))
            return fail(engine);
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a4, cont);
        return exit(engine, new PRED_compound_1(a1, p1));
    }
}

class PRED_$gen_indexing_keys0_3_4 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$gen_indexing_keys0'(A, B, [all, C]):-ground(A), !, '$term_hash'(A, C), '$dummy_12_builtins.pl'(C, B, D)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A, B, [all, C]):-['$get_level'(D), ground(A), '$cut'(D), '$term_hash'(A, C), '$dummy_12_builtins.pl'(C, B, E)]
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            if (!unify( s1,args[0]))
                return fail(engine);
            a4 = args[1];
        } else if (isVariable(a3)){
            a4 = engine.makeVariable(this);
             bind(a3,makeList(s1, a4));
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a5 = args[0];
            if (!unify( s3,args[1]))
                return fail(engine);
        } else if (isVariable(a4)){
            a5 = engine.makeVariable(this);
             bind(a4,makeList(a5, s3));
        } else {
            return fail(engine);
        }
        a6 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(6))
        if (! unify(a6,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of ground(a(1))
        a1 = deref( a1);
        if (! isGround(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = deref( a6);
        if (! isCutter/*Integer*/(a6)) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(( a6));
        }
        //END inline expansion
        p1 = new PRED_$dummy_12_builtins$002Epl_3(a5, a2, engine.makeVariable(this), cont);
        return exit(engine, new PRED_$term_hash_2(a1, a5, p1));
    }
}

class PRED_$gen_indexing_keys0_3_5 extends PRED_$gen_indexing_keys0_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$gen_indexing_keys0'(A, B, C):-illarg(type(term), '$gen_indexing_keys0'(A, B, C), 1)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$gen_indexing_keys0'(A, B, C):-[illarg(type(term), '$gen_indexing_keys0'(A, B, C), 1)]
        Object[] y1 = {a1, a2, a3};
        a4 = makeStructure(s13, y1);
        return exit(engine, new PRED_illarg_3(s12, a4, si14, cont));
    }
}
