package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>leash/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_leash_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("type", 1);
    static /*Symbol*/Object s2 = makeAtom("leash_specifier");
    static Object[] s3 = {s2};
    static /*Structure*/Object s4 = makeStructure(s1, s3);
    static /*Symbol*/Object s5 = makeAtom("leash", 1);
    static /*IntegerTerm*/Object si6 = makeInteger(1);
    static Predicate _leash_1_sub_1 = new PRED_leash_1_sub_1();
    static Predicate _leash_1_1 = new PRED_leash_1_1();
    static Predicate _leash_1_2 = new PRED_leash_1_2();

    public Object arg1;

    public PRED_leash_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_leash_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "leash"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'leash'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_leash_1_1, _leash_1_sub_1);
    }
}

class PRED_leash_1_sub_1 extends PRED_leash_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_leash_1_2);
    }
}

class PRED_leash_1_1 extends PRED_leash_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // leash(A):-nonvar(A), '$leash'(A), !
        Object a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // leash(A):-['$get_level'(B), nonvar(A), '$leash'(A), '$cut'(B)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of nonvar(a(1))
        a1 = deref( a1);
        if (isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a2, cont);
        return exit(engine, new PRED_$leash_1(a1, p1));
    }
}

class PRED_leash_1_2 extends PRED_leash_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // leash(A):-illarg(type(leash_specifier), leash(A), 1)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // leash(A):-[illarg(type(leash_specifier), leash(A), 1)]
        Object[] y1 = {a1};
        a2 = makeStructure(s5, y1);
        return exit(engine, new PRED_illarg_3(s4, a2, si6, cont));
    }
}
