package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_op'/8</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$parse_tokens_op_8 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(",");
    static /*Symbol*/Object s2 = makeAtom("atom", 1);
    static Object[] s3 = {s1};
    static /*Structure*/Object s4 = makeStructure(s2, s3);
    static /*Symbol*/Object s5 = makeAtom("|");
    static /*Symbol*/Object s6 = makeAtom(";");
    static Object[] s7 = {s6};
    static /*Structure*/Object s8 = makeStructure(s2, s7);
    static /*Symbol*/Object s9 = makeAtom("xf");
    static /*IntegerTerm*/Object si10 = makeInteger(1);
    static /*Symbol*/Object s11 = makeAtom("yf");
    static /*Symbol*/Object s12 = makeAtom("xfx");
    static /*IntegerTerm*/Object si13 = makeInteger(2);
    static /*Symbol*/Object s14 = makeAtom("xfy");
    static /*Symbol*/Object s15 = makeAtom("yfx");
    static Predicate _$parse_tokens_op_8_top = new PRED_$parse_tokens_op_8_top();
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$parse_tokens_op_8_var = new PRED_$parse_tokens_op_8_var();
    static Predicate _$parse_tokens_op_8_var_1 = new PRED_$parse_tokens_op_8_var_1();
    static Predicate _$parse_tokens_op_8_var_2 = new PRED_$parse_tokens_op_8_var_2();
    static Predicate _$parse_tokens_op_8_var_3 = new PRED_$parse_tokens_op_8_var_3();
    static Predicate _$parse_tokens_op_8_var_4 = new PRED_$parse_tokens_op_8_var_4();
    static Predicate _$parse_tokens_op_8_var_5 = new PRED_$parse_tokens_op_8_var_5();
    static Predicate _$parse_tokens_op_8_var_6 = new PRED_$parse_tokens_op_8_var_6();
    static Predicate _$parse_tokens_op_8_con = new PRED_$parse_tokens_op_8_con();
    static Predicate _$parse_tokens_op_8_str = new PRED_$parse_tokens_op_8_str();
    static Predicate _$parse_tokens_op_8_str_1 = new PRED_$parse_tokens_op_8_str_1();
    static Predicate _$parse_tokens_op_8_str_2 = new PRED_$parse_tokens_op_8_str_2();
    static Predicate _$parse_tokens_op_8_str_3 = new PRED_$parse_tokens_op_8_str_3();
    static Predicate _$parse_tokens_op_8_str_4 = new PRED_$parse_tokens_op_8_str_4();
    static Predicate _$parse_tokens_op_8_1 = new PRED_$parse_tokens_op_8_1();
    static Predicate _$parse_tokens_op_8_2 = new PRED_$parse_tokens_op_8_2();
    static Predicate _$parse_tokens_op_8_3 = new PRED_$parse_tokens_op_8_3();
    static Predicate _$parse_tokens_op_8_4 = new PRED_$parse_tokens_op_8_4();
    static Predicate _$parse_tokens_op_8_5 = new PRED_$parse_tokens_op_8_5();
    static Predicate _$parse_tokens_op_8_6 = new PRED_$parse_tokens_op_8_6();
    static Predicate _$parse_tokens_op_8_7 = new PRED_$parse_tokens_op_8_7();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(2);
    static {
        con.put(s1, _$parse_tokens_op_8_1);
        con.put(s5, _$parse_tokens_op_8_2);
    }

    public Object arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8;

    public PRED_$parse_tokens_op_8(Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Object a7, Object a8, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        this.cont = cont;
    }

    public PRED_$parse_tokens_op_8(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        this.cont = cont;
    }

    public int arity() { return 8; }

    public String nameUQ() { return "$parse_tokens_op"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
         case 5: arg6 = val;break ;
         case 6: arg7 = val;break ;
         case 7: arg8 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
         case 5: return arg6;
         case 6: return arg7;
         case 7: return arg8;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$parse_tokens_op'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + "," + argString(arg6,newParam) + "," + argString(arg7,newParam) + "," + argString(arg8,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine_aregs[6] = arg6;
        engine_aregs[7] = arg7;
        engine_aregs[8] = arg8;
        engine.cont = cont;
        return exit(engine, _$parse_tokens_op_8_top);
    }
}

class PRED_$parse_tokens_op_8_top extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$parse_tokens_op_8_var, _fail_0, _fail_0, _$parse_tokens_op_8_con, _$parse_tokens_op_8_str, _fail_0);
    }
}

class PRED_$parse_tokens_op_8_var extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$parse_tokens_op_8_1, _$parse_tokens_op_8_var_1);
    }
}

class PRED_$parse_tokens_op_8_var_1 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_2, _$parse_tokens_op_8_var_2);
    }
}

class PRED_$parse_tokens_op_8_var_2 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_3, _$parse_tokens_op_8_var_3);
    }
}

class PRED_$parse_tokens_op_8_var_3 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_4, _$parse_tokens_op_8_var_4);
    }
}

class PRED_$parse_tokens_op_8_var_4 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_5, _$parse_tokens_op_8_var_5);
    }
}

class PRED_$parse_tokens_op_8_var_5 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_6, _$parse_tokens_op_8_var_6);
    }
}

class PRED_$parse_tokens_op_8_var_6 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_op_8_7);
    }
}

class PRED_$parse_tokens_op_8_con extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$parse_tokens_op_8_str extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$parse_tokens_op_8_3, _$parse_tokens_op_8_str_1);
    }
}

class PRED_$parse_tokens_op_8_str_1 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_4, _$parse_tokens_op_8_str_2);
    }
}

class PRED_$parse_tokens_op_8_str_2 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_5, _$parse_tokens_op_8_str_3);
    }
}

class PRED_$parse_tokens_op_8_str_3 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_op_8_6, _$parse_tokens_op_8_str_4);
    }
}

class PRED_$parse_tokens_op_8_str_4 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_op_8_7);
    }
}

class PRED_$parse_tokens_op_8_1 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_op'((','), A, B, C, D, E, F, G):-!, '$parse_tokens_op'(atom((',')), A, B, C, D, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'((','), A, B, C, D, E, F, G):-['$neck_cut', '$parse_tokens_op'(atom((',')), A, B, C, D, E, F, G)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = s4;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine_aregs[6] = a6;
        engine_aregs[7] = a7;
        engine_aregs[8] = a8;
        engine.cont = cont;
        return exit(engine, _$parse_tokens_op_8_top);
    }
}

class PRED_$parse_tokens_op_8_2 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_op'(('|'), A, B, C, D, E, F, G):-!, '$parse_tokens_op'(atom((;)), A, B, C, D, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(('|'), A, B, C, D, E, F, G):-['$neck_cut', '$parse_tokens_op'(atom((;)), A, B, C, D, E, F, G)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s5))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s5);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = s8;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine_aregs[4] = a4;
        engine_aregs[5] = a5;
        engine_aregs[6] = a6;
        engine_aregs[7] = a7;
        engine_aregs[8] = a8;
        engine.cont = cont;
        return exit(engine, _$parse_tokens_op_8_top);
    }
}

class PRED_$parse_tokens_op_8_3 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, xf, A), I=G), (F=<B, J=I), (D<F, K=J), (functor(E, A, 1), L=K), arg(1, E, C), H=L
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-[current_op(F, xf, A), '$unify'(I, G), '$less_or_equal'(F, B), '$unify'(J, I), '$less_than'(D, F), '$unify'(K, J), functor(E, A, 1), '$unify'(L, K), arg(1, E, C), '$unify'(H, L)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a9 = args[0];
        } else if (isVariable(a1)){
            a9 = engine.makeVariable(this);
            Object[] args = {a9};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a8, a13, cont);
        p2 = new PRED_arg_3(si10, a5, a3, p1);
        p3 = new PRED_$unify_2(a13, a12, p2);
        p4 = new PRED_functor_3(a5, a9, si10, p3);
        p5 = new PRED_$unify_2(a12, a11, p4);
        p6 = new PRED_$less_than_2(a4, a6, p5);
        p7 = new PRED_$unify_2(a11, a10, p6);
        p8 = new PRED_$less_or_equal_2(a6, a2, p7);
        p9 = new PRED_$unify_2(a10, a7, p8);
        return exit(engine, new PRED_current_op_3(a6, s9, a9, p9));
    }
}

class PRED_$parse_tokens_op_8_4 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, yf, A), I=G), (F=<B, J=I), (D=<F, K=J), (functor(E, A, 1), L=K), arg(1, E, C), H=L
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-[current_op(F, yf, A), '$unify'(I, G), '$less_or_equal'(F, B), '$unify'(J, I), '$less_or_equal'(D, F), '$unify'(K, J), functor(E, A, 1), '$unify'(L, K), arg(1, E, C), '$unify'(H, L)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a9 = args[0];
        } else if (isVariable(a1)){
            a9 = engine.makeVariable(this);
            Object[] args = {a9};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a8, a13, cont);
        p2 = new PRED_arg_3(si10, a5, a3, p1);
        p3 = new PRED_$unify_2(a13, a12, p2);
        p4 = new PRED_functor_3(a5, a9, si10, p3);
        p5 = new PRED_$unify_2(a12, a11, p4);
        p6 = new PRED_$less_or_equal_2(a4, a6, p5);
        p7 = new PRED_$unify_2(a11, a10, p6);
        p8 = new PRED_$less_or_equal_2(a6, a2, p7);
        p9 = new PRED_$unify_2(a10, a7, p8);
        return exit(engine, new PRED_current_op_3(a6, s11, a9, p9));
    }
}

class PRED_$parse_tokens_op_8_5 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, xfx, A), I=G), (F=<B, J=I), (D<F, K=J), (L is F-1, M=K), '$parse_tokens'(N, L, M, O), !, (functor(E, A, 2), P=O), (arg(1, E, C), Q=P), arg(2, E, N), H=Q
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-['$get_level'(I), current_op(F, xfx, A), '$unify'(J, G), '$less_or_equal'(F, B), '$unify'(K, J), '$less_than'(D, F), '$unify'(L, K), '$minus'(F, 1, M), '$unify'(N, L), '$parse_tokens'(O, M, N, P), '$cut'(I), functor(E, A, 2), '$unify'(Q, P), arg(1, E, C), '$unify'(R, Q), arg(2, E, O), '$unify'(H, R)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a9 = args[0];
        } else if (isVariable(a1)){
            a9 = engine.makeVariable(this);
            Object[] args = {a9};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a10 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(10))
        if (! unify(a10,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a11 = engine.makeVariable(this);
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        a16 = engine.makeVariable(this);
        a17 = engine.makeVariable(this);
        a18 = engine.makeVariable(this);
        a19 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a8, a19, cont);
        p2 = new PRED_arg_3(si13, a5, a16, p1);
        p3 = new PRED_$unify_2(a19, a18, p2);
        p4 = new PRED_arg_3(si10, a5, a3, p3);
        p5 = new PRED_$unify_2(a18, a17, p4);
        p6 = new PRED_functor_3(a5, a9, si13, p5);
        p7 = new PRED_$cut_1(a10, p6);
        p8 = new PRED_$parse_tokens_4(a16, a14, a15, a17, p7);
        p9 = new PRED_$unify_2(a15, a13, p8);
        p10 = new PRED_$minus_3(a6, si10, a14, p9);
        p11 = new PRED_$unify_2(a13, a12, p10);
        p12 = new PRED_$less_than_2(a4, a6, p11);
        p13 = new PRED_$unify_2(a12, a11, p12);
        p14 = new PRED_$less_or_equal_2(a6, a2, p13);
        p15 = new PRED_$unify_2(a11, a7, p14);
        return exit(engine, new PRED_current_op_3(a6, s12, a9, p15));
    }
}

class PRED_$parse_tokens_op_8_6 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, xfy, A), I=G), (F=<B, J=I), (D<F, K=J), (L is F, M=K), '$parse_tokens'(N, L, M, O), !, (functor(E, A, 2), P=O), (arg(1, E, C), Q=P), arg(2, E, N), H=Q
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-['$get_level'(I), current_op(F, xfy, A), '$unify'(J, G), '$less_or_equal'(F, B), '$unify'(K, J), '$less_than'(D, F), '$unify'(L, K), M is F, '$unify'(N, L), '$parse_tokens'(O, M, N, P), '$cut'(I), functor(E, A, 2), '$unify'(Q, P), arg(1, E, C), '$unify'(R, Q), arg(2, E, O), '$unify'(H, R)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a9 = args[0];
        } else if (isVariable(a1)){
            a9 = engine.makeVariable(this);
            Object[] args = {a9};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a10 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(10))
        if (! unify(a10,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a11 = engine.makeVariable(this);
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        a16 = engine.makeVariable(this);
        a17 = engine.makeVariable(this);
        a18 = engine.makeVariable(this);
        a19 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a8, a19, cont);
        p2 = new PRED_arg_3(si13, a5, a16, p1);
        p3 = new PRED_$unify_2(a19, a18, p2);
        p4 = new PRED_arg_3(si10, a5, a3, p3);
        p5 = new PRED_$unify_2(a18, a17, p4);
        p6 = new PRED_functor_3(a5, a9, si13, p5);
        p7 = new PRED_$cut_1(a10, p6);
        p8 = new PRED_$parse_tokens_4(a16, a14, a15, a17, p7);
        p9 = new PRED_$unify_2(a15, a13, p8);
        p10 = new PRED_is_2(a14, a6, p9);
        p11 = new PRED_$unify_2(a13, a12, p10);
        p12 = new PRED_$less_than_2(a4, a6, p11);
        p13 = new PRED_$unify_2(a12, a11, p12);
        p14 = new PRED_$less_or_equal_2(a6, a2, p13);
        p15 = new PRED_$unify_2(a11, a7, p14);
        return exit(engine, new PRED_current_op_3(a6, s14, a9, p15));
    }
}

class PRED_$parse_tokens_op_8_7 extends PRED_$parse_tokens_op_8 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, yfx, A), I=G), (F=<B, J=I), (D=<F, K=J), (L is F-1, M=K), '$parse_tokens'(N, L, M, O), !, (functor(E, A, 2), P=O), (arg(1, E, C), Q=P), arg(2, E, N), H=Q
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        a7 = engine_aregs[7];
        a8 = engine_aregs[8];
        cont = engine.cont;
    // '$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-['$get_level'(I), current_op(F, yfx, A), '$unify'(J, G), '$less_or_equal'(F, B), '$unify'(K, J), '$less_or_equal'(D, F), '$unify'(L, K), '$minus'(F, 1, M), '$unify'(N, L), '$parse_tokens'(O, M, N, P), '$cut'(I), functor(E, A, 2), '$unify'(Q, P), arg(1, E, C), '$unify'(R, Q), arg(2, E, O), '$unify'(H, R)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a9 = args[0];
        } else if (isVariable(a1)){
            a9 = engine.makeVariable(this);
            Object[] args = {a9};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a10 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(10))
        if (! unify(a10,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a11 = engine.makeVariable(this);
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        a16 = engine.makeVariable(this);
        a17 = engine.makeVariable(this);
        a18 = engine.makeVariable(this);
        a19 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a8, a19, cont);
        p2 = new PRED_arg_3(si13, a5, a16, p1);
        p3 = new PRED_$unify_2(a19, a18, p2);
        p4 = new PRED_arg_3(si10, a5, a3, p3);
        p5 = new PRED_$unify_2(a18, a17, p4);
        p6 = new PRED_functor_3(a5, a9, si13, p5);
        p7 = new PRED_$cut_1(a10, p6);
        p8 = new PRED_$parse_tokens_4(a16, a14, a15, a17, p7);
        p9 = new PRED_$unify_2(a15, a13, p8);
        p10 = new PRED_$minus_3(a6, si10, a14, p9);
        p11 = new PRED_$unify_2(a13, a12, p10);
        p12 = new PRED_$less_or_equal_2(a4, a6, p11);
        p13 = new PRED_$unify_2(a12, a11, p12);
        p14 = new PRED_$less_or_equal_2(a6, a2, p13);
        p15 = new PRED_$unify_2(a11, a7, p14);
        return exit(engine, new PRED_current_op_3(a6, s15, a9, p15));
    }
}
