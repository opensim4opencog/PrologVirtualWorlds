package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$term_to_clause'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$term_to_clause_4 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("/", 2);
    static /*Symbol*/Object s3 = makeAtom("user");
    static /*Symbol*/Object s4 = makeAtom(":-", 2);

    public Object arg1, arg2, arg3, arg4;

    public PRED_$term_to_clause_4(Object a1, Object a2, Object a3, Object a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$term_to_clause_4(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String nameUQ() { return "$term_to_clause"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$term_to_clause'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
    // '$term_to_clause'(A, B, C:D/E, F):-'$term_to_clause'(A, B, user, C, F), B= (G:-H), functor(G, D, E)
        engine.setB0();
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2;
        a1 = arg1;
        a2 = arg2;
        a3 = arg3;
        a4 = arg4;
    // '$term_to_clause'(A, B, C:D/E, F):-['$term_to_clause'(A, B, user, C, F), '$unify'(B, (G:-H)), functor(G, D, E)]
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s1,a3))
                return fail(engine);
            Object[] args = args(a3);
            a5 = args[0];
            a6 = args[1];
        } else if (isVariable(a3)){
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a5, a6};
            bind(/*VAR*/ a3,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s2,a6))
                return fail(engine);
            Object[] args = args(a6);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a6)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
            Object[] args = {a7, a8};
            bind(/*VAR*/ a6,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a9 = engine.makeVariable(this);
        Object[] y1 = {a9, engine.makeVariable(this)};
        a10 = makeStructure(s4, y1);
        p1 = new PRED_functor_3(a9, a7, a8, cont);
        p2 = new PRED_$unify_2(a2, a10, p1);
        return exit(engine, new PRED_$term_to_clause_5(a1, a2, s3, a5, a4, p2));
    }
}
