package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>expand_term/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_expand_term_2 extends PredicateBase {
    static Predicate _expand_term_2_sub_1 = new PRED_expand_term_2_sub_1();
    static Predicate _expand_term_2_sub_2 = new PRED_expand_term_2_sub_2();
    static Predicate _expand_term_2_1 = new PRED_expand_term_2_1();
    static Predicate _expand_term_2_2 = new PRED_expand_term_2_2();
    static Predicate _expand_term_2_3 = new PRED_expand_term_2_3();

    public Object arg1, arg2;

    public PRED_expand_term_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_expand_term_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "expand_term"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'expand_term'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_expand_term_2_1, _expand_term_2_sub_1);
    }
}

class PRED_expand_term_2_sub_1 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_expand_term_2_2, _expand_term_2_sub_2);
    }
}

class PRED_expand_term_2_sub_2 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_expand_term_2_3);
    }
}

class PRED_expand_term_2_1 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // expand_term(A, B):-var(A), !, A=B
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // expand_term(A, B):-['$get_level'(C), var(A), '$cut'(C), '$unify'(A, B)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        //START inline expansion of $unify(a(1), a(2))
        if (! unify(a1,a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_expand_term_2_2 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // expand_term(A, B):-'$dcg_expansion'(A, C), !, C=B
        Object a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // expand_term(A, B):-['$get_level'(C), '$dcg_expansion'(A, D), '$cut'(C), '$unify'(D, B)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a4 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a4, a2, cont);
        p2 = new PRED_$cut_1(a3, p1);
        return exit(engine, new PRED_$dcg_expansion_2(a1, a4, p2));
    }
}

class PRED_expand_term_2_3 extends PRED_expand_term_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // expand_term(A, A):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // expand_term(A, A):-[]
        if (! unify(a1,a2))
            return fail(engine);
        return exit(engine,cont);
    }
}
