package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>consult/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_consult_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("var");
    static /*Symbol*/Object s2 = makeAtom("consult", 1);
    static /*IntegerTerm*/Object si3 = makeInteger(1);
    static /*Symbol*/Object s4 = makeAtom("[]");
    static Predicate _consult_1_top = new PRED_consult_1_top();
    static Predicate _consult_1_var = new PRED_consult_1_var();
    static Predicate _consult_1_var_1 = new PRED_consult_1_var_1();
    static Predicate _consult_1_var_2 = new PRED_consult_1_var_2();
    static Predicate _consult_1_var_3 = new PRED_consult_1_var_3();
    static Predicate _consult_1_int = new PRED_consult_1_int();
    static Predicate _consult_1_int_1 = new PRED_consult_1_int_1();
    static Predicate _consult_1_con = new PRED_consult_1_con();
    static Predicate _consult_1_con_1 = new PRED_consult_1_con_1();
    static Predicate _consult_1_con_2 = new PRED_consult_1_con_2();
    static Predicate _consult_1_lis = new PRED_consult_1_lis();
    static Predicate _consult_1_lis_1 = new PRED_consult_1_lis_1();
    static Predicate _consult_1_lis_2 = new PRED_consult_1_lis_2();
    static Predicate _consult_1_1 = new PRED_consult_1_1();
    static Predicate _consult_1_2 = new PRED_consult_1_2();
    static Predicate _consult_1_3 = new PRED_consult_1_3();
    static Predicate _consult_1_4 = new PRED_consult_1_4();

    public Object arg1;

    public PRED_consult_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_consult_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "consult"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'consult'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        return exit(engine, _consult_1_top);
    }
}

class PRED_consult_1_top extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_consult_1_var, _consult_1_int, _consult_1_int, _consult_1_con, _consult_1_int, _consult_1_lis);
    }
}

class PRED_consult_1_var extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_consult_1_1, _consult_1_var_1);
    }
}

class PRED_consult_1_var_1 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_consult_1_2, _consult_1_var_2);
    }
}

class PRED_consult_1_var_2 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_consult_1_3, _consult_1_var_3);
    }
}

class PRED_consult_1_var_3 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_consult_1_4);
    }
}

class PRED_consult_1_int extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_consult_1_1, _consult_1_int_1);
    }
}

class PRED_consult_1_int_1 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_consult_1_4);
    }
}

class PRED_consult_1_con extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_consult_1_1, _consult_1_con_1);
    }
}

class PRED_consult_1_con_1 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_consult_1_2, _consult_1_con_2);
    }
}

class PRED_consult_1_con_2 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_consult_1_4);
    }
}

class PRED_consult_1_lis extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_consult_1_1, _consult_1_lis_1);
    }
}

class PRED_consult_1_lis_1 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_consult_1_3, _consult_1_lis_2);
    }
}

class PRED_consult_1_lis_2 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_consult_1_4);
    }
}

class PRED_consult_1_1 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // consult(A):-var(A), !, illarg(var, consult(A), 1)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // consult(A):-['$get_level'(B), var(A), '$cut'(B), illarg(var, consult(A), 1)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = deref( a2);
        if (! isCutter/*Integer*/(a2)) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(( a2));
        }
        //END inline expansion
        Object[] y1 = {a1};
        a3 = makeStructure(s2, y1);
        return exit(engine, new PRED_illarg_3(s1, a3, si3, cont));
    }
}

class PRED_consult_1_2 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // consult([]):-!
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // consult([]):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s4))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s4);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_consult_1_3 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // consult([A|B]):-!, consult(A), consult(B)
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // consult([A|B]):-['$neck_cut', consult(A), consult(B)]
        a1 = deref( a1);
        if (isListTerm(a1)){
            Object[] args = consArgs(a1);
            a2 = args[0];
            a3 = args[1];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
             bind(a1,makeList(a2, a3));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_consult_1(a3, cont);
        engine_aregs[1] = a2;
        engine.cont = p1;
        return exit(engine, _consult_1_top);
    }
}

class PRED_consult_1_4 extends PRED_consult_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // consult(A):-atom(A), !, '$consult'(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // consult(A):-['$get_level'(B), atom(A), '$cut'(B), '$consult'(A)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = deref( a1);
        if (! isAtomTerm(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(2))
        a2 = deref( a2);
        if (! isCutter/*Integer*/(a2)) {
            throw new IllegalTypeException("integer", a2);
        } else {
            engine.cut(( a2));
        }
        //END inline expansion
        return exit(engine, new PRED_$consult_1(a1, cont));
    }
}
