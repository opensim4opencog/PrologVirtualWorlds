package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_connect'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$dcg_connect_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("->", 2);
    static /*Symbol*/Object s2 = makeAtom(",", 2);
    static /*Symbol*/Object s3 = makeAtom("true");
    static Predicate _$dcg_connect_3_var = new PRED_$dcg_connect_3_var();
    static Predicate _$dcg_connect_3_var_1 = new PRED_$dcg_connect_3_var_1();
    static Predicate _$dcg_connect_3_var_2 = new PRED_$dcg_connect_3_var_2();
    static Predicate _$dcg_connect_3_int = new PRED_$dcg_connect_3_int();
    static Predicate _$dcg_connect_3_int_1 = new PRED_$dcg_connect_3_int_1();
    static Predicate _$dcg_connect_3_1 = new PRED_$dcg_connect_3_1();
    static Predicate _$dcg_connect_3_2 = new PRED_$dcg_connect_3_2();
    static Predicate _$dcg_connect_3_3 = new PRED_$dcg_connect_3_3();

    public Object arg1, arg2, arg3;

    public PRED_$dcg_connect_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$dcg_connect_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$dcg_connect"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$dcg_connect'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$dcg_connect_3_var, _$dcg_connect_3_int, _$dcg_connect_3_int, _$dcg_connect_3_int, _$dcg_connect_3_var, _$dcg_connect_3_int);
    }
}

class PRED_$dcg_connect_3_var extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_connect_3_1, _$dcg_connect_3_var_1);
    }
}

class PRED_$dcg_connect_3_var_1 extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$dcg_connect_3_2, _$dcg_connect_3_var_2);
    }
}

class PRED_$dcg_connect_3_var_2 extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_connect_3_3);
    }
}

class PRED_$dcg_connect_3_int extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_connect_3_2, _$dcg_connect_3_int_1);
    }
}

class PRED_$dcg_connect_3_int_1 extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_connect_3_3);
    }
}

class PRED_$dcg_connect_3_1 extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_connect'((A->B), C, C):-C= (D->E), !
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_connect'((A->B), C, C):-['$get_level'(D), '$unify'(C, (E->F)), '$cut'(D)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
        } else if (isVariable(a1)){
            Object[] args = {engine.makeVariable(this), engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        if (! unify(a2,a3))
            return fail(engine);
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        Object[] y1 = {engine.makeVariable(this), engine.makeVariable(this)};
        a5 = makeStructure(s1, y1);
        //START inline expansion of $unify(a(2), a(5))
        if (! unify(a2,a5)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_connect_3_2 extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_connect'(A, (B->C), ((B->C), true)):-!
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_connect'(A, (B->C), ((B->C), true)):-['$neck_cut']
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s1,a2))
                return fail(engine);
            Object[] args = args(a2);
            a4 = args[0];
            a5 = args[1];
        } else if (isVariable(a2)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a4, a5};
            bind(/*VAR*/ a2,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isCompound(a3)){
            if (!functorOf( s2,a3))
                return fail(engine);
            Object[] args = args(a3);
            a6 = args[0];
            if (!unify( s3,args[1]))
                return fail(engine);
        } else if (isVariable(a3)){
            a6 = engine.makeVariable(this);
            Object[] args = {a6, s3};
            bind(/*VAR*/ a3,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s1,a6))
                return fail(engine);
            Object[] args = args(a6);
            if (!unify( a4,args[0]))
                return fail(engine);
            if (!unify( a5,args[1]))
                return fail(engine);
        } else if (isVariable(a6)){
            Object[] args = {a4, a5};
            bind(/*VAR*/ a6,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_connect_3_3 extends PRED_$dcg_connect_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_connect'(A, B, B):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_connect'(A, B, B):-[]
        if (! unify(a2,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}
