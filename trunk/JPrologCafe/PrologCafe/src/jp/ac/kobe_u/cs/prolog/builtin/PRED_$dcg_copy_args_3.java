package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dcg_copy_args'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$dcg_copy_args_3 extends PredicateBase {
    static /*IntegerTerm*/Object si1 = makeInteger(0);
    static /*IntegerTerm*/Object si2 = makeInteger(1);
    static Predicate _$dcg_copy_args_3_var = new PRED_$dcg_copy_args_3_var();
    static Predicate _$dcg_copy_args_3_var_1 = new PRED_$dcg_copy_args_3_var_1();
    static Predicate _$dcg_copy_args_3_1 = new PRED_$dcg_copy_args_3_1();
    static Predicate _$dcg_copy_args_3_2 = new PRED_$dcg_copy_args_3_2();

    public Object arg1, arg2, arg3;

    public PRED_$dcg_copy_args_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$dcg_copy_args_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$dcg_copy_args"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$dcg_copy_args'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$dcg_copy_args_3_var, _$dcg_copy_args_3_var, _$dcg_copy_args_3_2, _$dcg_copy_args_3_2, _$dcg_copy_args_3_2, _$dcg_copy_args_3_2);
    }
}

class PRED_$dcg_copy_args_3_var extends PRED_$dcg_copy_args_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$dcg_copy_args_3_1, _$dcg_copy_args_3_var_1);
    }
}

class PRED_$dcg_copy_args_3_var_1 extends PRED_$dcg_copy_args_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dcg_copy_args_3_2);
    }
}

class PRED_$dcg_copy_args_3_1 extends PRED_$dcg_copy_args_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_copy_args'(0, A, B):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_copy_args'(0, A, B):-['$neck_cut']
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 0)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$dcg_copy_args_3_2 extends PRED_$dcg_copy_args_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dcg_copy_args'(A, B, C):-arg(A, B, D), arg(A, C, D), E is A-1, '$dcg_copy_args'(E, B, C)
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$dcg_copy_args'(A, B, C):-[arg(A, B, D), arg(A, C, D), '$minus'(A, 1, E), '$dcg_copy_args'(E, B, C)]
        a4 = engine.makeVariable(this);
        a5 = engine.makeVariable(this);
        p1 = new PRED_$dcg_copy_args_3(a5, a2, a3, cont);
        p2 = new PRED_$minus_3(a1, si2, a5, p1);
        p3 = new PRED_arg_3(a1, a3, a4, p2);
        return exit(engine, new PRED_arg_3(a1, a2, a4, p3));
    }
}
