package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_13_builtins.pl'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$dummy_13_builtins$002Epl_4 extends PredicateBase {
    static Predicate _$dummy_13_builtins$002Epl_4_sub_1 = new PRED_$dummy_13_builtins$002Epl_4_sub_1();
    static Predicate _$dummy_13_builtins$002Epl_4_1 = new PRED_$dummy_13_builtins$002Epl_4_1();
    static Predicate _$dummy_13_builtins$002Epl_4_2 = new PRED_$dummy_13_builtins$002Epl_4_2();

    public Object arg1, arg2, arg3, arg4;

    public PRED_$dummy_13_builtins$002Epl_4(Object a1, Object a2, Object a3, Object a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$dummy_13_builtins$002Epl_4(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String nameUQ() { return "$dummy_13_builtins.pl"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$dummy_13_builtins.pl'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_13_builtins$002Epl_4_1, _$dummy_13_builtins$002Epl_4_sub_1);
    }
}

class PRED_$dummy_13_builtins$002Epl_4_sub_1 extends PRED_$dummy_13_builtins$002Epl_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$dummy_13_builtins$002Epl_4_2);
    }
}

class PRED_$dummy_13_builtins$002Epl_4_1 extends PRED_$dummy_13_builtins$002Epl_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dummy_13_builtins.pl'(A, B, C, D):-hash_contains_key(C, A), !, hash_get(C, A, D), B==D
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$dummy_13_builtins.pl'(A, B, C, D):-['$get_level'(E), hash_contains_key(C, A), '$cut'(E), hash_get(C, A, D), '$equality_of_term'(B, D)]
        a5 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(5))
        if (! unify(a5,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$equality_of_term_2(a2, a4, cont);
        p2 = new PRED_hash_get_3(a3, a1, a4, p1);
        p3 = new PRED_$cut_1(a5, p2);
        return exit(engine, new PRED_hash_contains_key_2(a3, a1, p3));
    }
}

class PRED_$dummy_13_builtins$002Epl_4_2 extends PRED_$dummy_13_builtins$002Epl_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$dummy_13_builtins.pl'(A, B, C, D):-var(B), hash_put(C, A, B)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$dummy_13_builtins.pl'(A, B, C, D):-[var(B), hash_put(C, A, B)]
        //START inline expansion of var(a(2))
        a2 = deref( a2);
        if (! isVariable(a2)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine, new PRED_hash_put_3(a3, a1, a2, cont));
    }
}
