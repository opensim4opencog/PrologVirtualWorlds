package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_VAR'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_VAR_2 extends PredicateBase {
    static /*IntegerTerm*/Object si1 = makeInteger(26);
    static /*IntegerTerm*/Object si2 = makeInteger(65);
    static Predicate _$write_VAR_2_sub_1 = new PRED_$write_VAR_2_sub_1();
    static Predicate _$write_VAR_2_1 = new PRED_$write_VAR_2_1();
    static Predicate _$write_VAR_2_2 = new PRED_$write_VAR_2_2();

    public Object arg1, arg2;

    public PRED_$write_VAR_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$write_VAR_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$write_VAR"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_VAR'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$write_VAR_2_1, _$write_VAR_2_sub_1);
    }
}

class PRED_$write_VAR_2_sub_1 extends PRED_$write_VAR_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_VAR_2_2);
    }
}

class PRED_$write_VAR_2_1 extends PRED_$write_VAR_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_VAR'(A, B):-A<26, !, C is A mod 26+[65], put_code(B, C)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_VAR'(A, B):-['$get_level'(C), '$less_than'(A, 26), '$cut'(C), '$mod'(A, 26, D), '$plus'(D, 65, E), put_code(B, E)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(3))
        if (! unify(a3,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $less_than(a(1), si(1))
        try {
            if (arithCompareTo(Arithmetic.evaluate(a1),si1) >= 0) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = deref( a3);
        if (! isCutter/*Integer*/(a3)) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(( a3));
        }
        //END inline expansion
        a4 = engine.makeVariable(this);
        //START inline expansion of $mod(a(1), si(1), a(4))
        try {
            if (! unify(a4,mod(Arithmetic.evaluate(a1),si1))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a5 = engine.makeVariable(this);
        //START inline expansion of $plus(a(4), si(2), a(5))
        try {
            if (! unify(a5,add(Arithmetic.evaluate(a4),si2))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return exit(engine, new PRED_put_code_2(a2, a5, cont));
    }
}

class PRED_$write_VAR_2_2 extends PRED_$write_VAR_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_VAR'(A, B):-C is A mod 26+[65], put_code(B, C), D is A//26, '$fast_write'(B, D)
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_VAR'(A, B):-['$mod'(A, 26, C), '$plus'(C, 65, D), put_code(B, D), '$int_quotient'(A, 26, E), '$fast_write'(B, E)]
        a3 = engine.makeVariable(this);
        //START inline expansion of $mod(a(1), si(1), a(3))
        try {
            if (! unify(a3,mod(Arithmetic.evaluate(a1),si1))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a4 = engine.makeVariable(this);
        //START inline expansion of $plus(a(3), si(2), a(4))
        try {
            if (! unify(a4,add(Arithmetic.evaluate(a3),si2))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a5 = engine.makeVariable(this);
        p1 = new PRED_$fast_write_2(a2, a5, cont);
        p2 = new PRED_$int_quotient_3(a1, si1, a5, p1);
        return exit(engine, new PRED_put_code_2(a2, a4, p2));
    }
}
