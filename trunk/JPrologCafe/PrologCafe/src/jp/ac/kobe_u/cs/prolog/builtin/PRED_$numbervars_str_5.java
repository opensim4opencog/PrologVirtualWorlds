package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$numbervars_str'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$numbervars_str_5 extends PredicateBase {
    static /*IntegerTerm*/Object si1 = makeInteger(1);
    static Predicate _$numbervars_str_5_sub_1 = new PRED_$numbervars_str_5_sub_1();
    static Predicate _$numbervars_str_5_1 = new PRED_$numbervars_str_5_1();
    static Predicate _$numbervars_str_5_2 = new PRED_$numbervars_str_5_2();

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$numbervars_str_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$numbervars_str_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$numbervars_str"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$numbervars_str'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$numbervars_str_5_1, _$numbervars_str_5_sub_1);
    }
}

class PRED_$numbervars_str_5_sub_1 extends PRED_$numbervars_str_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$numbervars_str_5_2);
    }
}

class PRED_$numbervars_str_5_1 extends PRED_$numbervars_str_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$numbervars_str'(A, A, B, C, D):-!, arg(A, B, E), '$numbervars'(E, C, D)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$numbervars_str'(A, A, B, C, D):-['$neck_cut', arg(A, B, E), '$numbervars'(E, C, D)]
        if (! unify(a1,a2))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a6 = engine.makeVariable(this);
        p1 = new PRED_$numbervars_3(a6, a4, a5, cont);
        return exit(engine, new PRED_arg_3(a1, a3, a6, p1));
    }
}

class PRED_$numbervars_str_5_2 extends PRED_$numbervars_str_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$numbervars_str'(A, B, C, D, E):-arg(A, C, F), '$numbervars'(F, D, G), H is A+1, '$numbervars_str'(H, B, C, G, E)
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$numbervars_str'(A, B, C, D, E):-[arg(A, C, F), '$numbervars'(F, D, G), '$plus'(A, 1, H), '$numbervars_str'(H, B, C, G, E)]
        a6 = engine.makeVariable(this);
        a7 = engine.makeVariable(this);
        a8 = engine.makeVariable(this);
        p1 = new PRED_$numbervars_str_5(a8, a2, a3, a7, a5, cont);
        p2 = new PRED_$plus_3(a1, si1, a8, p1);
        p3 = new PRED_$numbervars_3(a6, a4, a7, p2);
        return exit(engine, new PRED_arg_3(a1, a3, a6, p3));
    }
}
