package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$assert_consulted_clause'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$assert_consulted_clause_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":-", 2);
    static /*Symbol*/Object s2 = makeAtom(":", 2);
    static /*Symbol*/Object s3 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s4 = makeAtom("$consulted_file", 1);
    static /*Symbol*/Object s5 = makeAtom("$consulted_package", 1);
    static /*Symbol*/Object s6 = makeAtom("$consulted_predicate", 3);
    static /*Symbol*/Object s7 = makeAtom("/", 2);

    public Object arg1;

    public PRED_$assert_consulted_clause_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$assert_consulted_clause_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$assert_consulted_clause"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$assert_consulted_clause'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
    // '$assert_consulted_clause'(A):-A= (B:-C), functor(B, D, E), clause('$consulted_file'(F), G), clause('$consulted_package'(H), I), assertz(H:A), assertz('$consulted_predicate'(H, D/E, F)), !
        engine.setB0();
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16;
        Predicate p1, p2, p3, p4, p5;
        a1 = arg1;
    // '$assert_consulted_clause'(A):-['$get_level'(B), '$unify'(A, (C:-D)), functor(C, E, F), clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(G), H), clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(I), J), assertz(I:A), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(I, E/F, G)), '$cut'(B)]
        a2 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(2))
        if (! unify(a2,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a3 = engine.makeVariable(this);
        Object[] y1 = {a3, engine.makeVariable(this)};
        a4 = makeStructure(s1, y1);
        //START inline expansion of $unify(a(1), a(4))
        if (! unify(a1,a4)) {
            return fail(engine);
        }
        //END inline expansion
        a5 = engine.makeVariable(this);
        a6 = engine.makeVariable(this);
        a7 = engine.makeVariable(this);
        Object[] y2 = {a7};
        a8 = makeStructure(s4, y2);
        Object[] y3 = {s3, a8};
        a9 = makeStructure(s2, y3);
        a10 = engine.makeVariable(this);
        Object[] y4 = {a10};
        a11 = makeStructure(s5, y4);
        Object[] y5 = {s3, a11};
        a12 = makeStructure(s2, y5);
        Object[] y6 = {a10, a1};
        a13 = makeStructure(s2, y6);
        Object[] y7 = {a5, a6};
        a14 = makeStructure(s7, y7);
        Object[] y8 = {a10, a14, a7};
        a15 = makeStructure(s6, y8);
        Object[] y9 = {s3, a15};
        a16 = makeStructure(s2, y9);
        p1 = new PRED_$cut_1(a2, cont);
        p2 = new PRED_assertz_1(a16, p1);
        p3 = new PRED_assertz_1(a13, p2);
        p4 = new PRED_clause_2(a12, engine.makeVariable(this), p3);
        p5 = new PRED_clause_2(a9, engine.makeVariable(this), p4);
        return exit(engine, new PRED_functor_3(a3, a5, a6, p5));
    }
}
