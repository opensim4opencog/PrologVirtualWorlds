package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$numbervars'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$numbervars_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("$VAR", 1);
    static /*IntegerTerm*/Object si2 = makeInteger(1);
    static Predicate _$numbervars_3_sub_1 = new PRED_$numbervars_3_sub_1();
    static Predicate _$numbervars_3_sub_2 = new PRED_$numbervars_3_sub_2();
    static Predicate _$numbervars_3_sub_3 = new PRED_$numbervars_3_sub_3();
    static Predicate _$numbervars_3_1 = new PRED_$numbervars_3_1();
    static Predicate _$numbervars_3_2 = new PRED_$numbervars_3_2();
    static Predicate _$numbervars_3_3 = new PRED_$numbervars_3_3();
    static Predicate _$numbervars_3_4 = new PRED_$numbervars_3_4();

    public Object arg1, arg2, arg3;

    public PRED_$numbervars_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$numbervars_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$numbervars"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$numbervars'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$numbervars_3_1, _$numbervars_3_sub_1);
    }
}

class PRED_$numbervars_3_sub_1 extends PRED_$numbervars_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$numbervars_3_2, _$numbervars_3_sub_2);
    }
}

class PRED_$numbervars_3_sub_2 extends PRED_$numbervars_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$numbervars_3_3, _$numbervars_3_sub_3);
    }
}

class PRED_$numbervars_3_sub_3 extends PRED_$numbervars_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$numbervars_3_4);
    }
}

class PRED_$numbervars_3_1 extends PRED_$numbervars_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$numbervars'(A, B, C):-var(A), !, A='$VAR'(B), C is B+1
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$numbervars'(A, B, C):-['$get_level'(D), var(A), '$cut'(D), '$unify'(A, '$VAR'(B)), '$plus'(B, 1, C)]
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        Object[] y1 = {a2};
        a5 = makeStructure(s1, y1);
        //START inline expansion of $unify(a(1), a(5))
        if (! unify(a1,a5)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $plus(a(2), si(2), a(3))
        try {
            if (! unify(a3,add(Arithmetic.evaluate(a2),si2))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$numbervars_3_2 extends PRED_$numbervars_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$numbervars'(A, B, B):-atomic(A), !
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$numbervars'(A, B, B):-['$get_level'(C), atomic(A), '$cut'(C)]
        if (! unify(a2,a3))
            return fail(engine);
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atomic(a(1))
        a1 = deref( a1);
        if (! isAtomTerm(a1) && ! isNumber(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$numbervars_3_3 extends PRED_$numbervars_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$numbervars'(A, B, B):-java(A), !
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$numbervars'(A, B, B):-['$get_level'(C), java(A), '$cut'(C)]
        if (! unify(a2,a3))
            return fail(engine);
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of java(a(1))
        a1 = deref( a1);
        if (! isJavaObject(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$numbervars_3_4 extends PRED_$numbervars_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$numbervars'(A, B, C):-functor(A, D, E), '$numbervars_str'(1, E, A, B, C)
        Object a1, a2, a3, a4;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$numbervars'(A, B, C):-[functor(A, D, E), '$numbervars_str'(1, E, A, B, C)]
        a4 = engine.makeVariable(this);
        p1 = new PRED_$numbervars_str_5(si2, a4, a1, a2, a3, cont);
        return exit(engine, new PRED_functor_3(a1, engine.makeVariable(this), a4, p1));
    }
}
