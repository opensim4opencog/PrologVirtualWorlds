package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$statistics_mode'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$statistics_mode_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("runtime");
    static /*Symbol*/Object s2 = makeAtom("trail");
    static /*Symbol*/Object s3 = makeAtom("choice");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$statistics_mode_1_var = new PRED_$statistics_mode_1_var();
    static Predicate _$statistics_mode_1_var_1 = new PRED_$statistics_mode_1_var_1();
    static Predicate _$statistics_mode_1_var_2 = new PRED_$statistics_mode_1_var_2();
    static Predicate _$statistics_mode_1_con = new PRED_$statistics_mode_1_con();
    static Predicate _$statistics_mode_1_1 = new PRED_$statistics_mode_1_1();
    static Predicate _$statistics_mode_1_2 = new PRED_$statistics_mode_1_2();
    static Predicate _$statistics_mode_1_3 = new PRED_$statistics_mode_1_3();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(3);
    static {
        con.put(s1, _$statistics_mode_1_1);
        con.put(s2, _$statistics_mode_1_2);
        con.put(s3, _$statistics_mode_1_3);
    }

    public Object arg1;

    public PRED_$statistics_mode_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$statistics_mode_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$statistics_mode"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$statistics_mode'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$statistics_mode_1_var, _fail_0, _fail_0, _$statistics_mode_1_con, _fail_0, _fail_0);
    }
}

class PRED_$statistics_mode_1_var extends PRED_$statistics_mode_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$statistics_mode_1_1, _$statistics_mode_1_var_1);
    }
}

class PRED_$statistics_mode_1_var_1 extends PRED_$statistics_mode_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$statistics_mode_1_2, _$statistics_mode_1_var_2);
    }
}

class PRED_$statistics_mode_1_var_2 extends PRED_$statistics_mode_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$statistics_mode_1_3);
    }
}

class PRED_$statistics_mode_1_con extends PRED_$statistics_mode_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$statistics_mode_1_1 extends PRED_$statistics_mode_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$statistics_mode'(runtime):-true
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$statistics_mode'(runtime):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$statistics_mode_1_2 extends PRED_$statistics_mode_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$statistics_mode'(trail):-true
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$statistics_mode'(trail):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s2))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s2);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$statistics_mode_1_3 extends PRED_$statistics_mode_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$statistics_mode'(choice):-true
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$statistics_mode'(choice):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s3))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s3);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}
