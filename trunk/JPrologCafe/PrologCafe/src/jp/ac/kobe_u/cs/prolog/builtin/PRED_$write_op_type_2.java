package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_op_type'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_op_type_2 extends PredicateBase {
    static /*IntegerTerm*/Object si1 = makeInteger(1);
    static /*Symbol*/Object s2 = makeAtom("fx");
    static /*Symbol*/Object s3 = makeAtom("fy");
    static /*Symbol*/Object s4 = makeAtom("xf");
    static /*Symbol*/Object s5 = makeAtom("yf");
    static /*IntegerTerm*/Object si6 = makeInteger(2);
    static /*Symbol*/Object s7 = makeAtom("xfx");
    static /*Symbol*/Object s8 = makeAtom("xfy");
    static /*Symbol*/Object s9 = makeAtom("yfx");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$write_op_type_2_var = new PRED_$write_op_type_2_var();
    static Predicate _$write_op_type_2_var_1 = new PRED_$write_op_type_2_var_1();
    static Predicate _$write_op_type_2_var_2 = new PRED_$write_op_type_2_var_2();
    static Predicate _$write_op_type_2_var_3 = new PRED_$write_op_type_2_var_3();
    static Predicate _$write_op_type_2_var_4 = new PRED_$write_op_type_2_var_4();
    static Predicate _$write_op_type_2_var_5 = new PRED_$write_op_type_2_var_5();
    static Predicate _$write_op_type_2_var_6 = new PRED_$write_op_type_2_var_6();
    static Predicate _$write_op_type_2_int = new PRED_$write_op_type_2_int();
    static Predicate _$write_op_type_2_int_0 = new PRED_$write_op_type_2_int_0();
    static Predicate _$write_op_type_2_int_0_1 = new PRED_$write_op_type_2_int_0_1();
    static Predicate _$write_op_type_2_int_0_2 = new PRED_$write_op_type_2_int_0_2();
    static Predicate _$write_op_type_2_int_0_3 = new PRED_$write_op_type_2_int_0_3();
    static Predicate _$write_op_type_2_int_1 = new PRED_$write_op_type_2_int_1();
    static Predicate _$write_op_type_2_int_1_1 = new PRED_$write_op_type_2_int_1_1();
    static Predicate _$write_op_type_2_int_1_2 = new PRED_$write_op_type_2_int_1_2();
    static Predicate _$write_op_type_2_1 = new PRED_$write_op_type_2_1();
    static Predicate _$write_op_type_2_2 = new PRED_$write_op_type_2_2();
    static Predicate _$write_op_type_2_3 = new PRED_$write_op_type_2_3();
    static Predicate _$write_op_type_2_4 = new PRED_$write_op_type_2_4();
    static Predicate _$write_op_type_2_5 = new PRED_$write_op_type_2_5();
    static Predicate _$write_op_type_2_6 = new PRED_$write_op_type_2_6();
    static Predicate _$write_op_type_2_7 = new PRED_$write_op_type_2_7();
    static HashtableOfTerm<Predicate> Int = new HashtableOfTerm<Predicate>(2);
    static {
        Int.put(si1, _$write_op_type_2_int_0);
        Int.put(si6, _$write_op_type_2_int_1);
    }

    public Object arg1, arg2;

    public PRED_$write_op_type_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$write_op_type_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$write_op_type"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_op_type'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$write_op_type_2_var, _$write_op_type_2_int, _fail_0, _fail_0, _fail_0, _fail_0);
    }
}

class PRED_$write_op_type_2_var extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_op_type_2_1, _$write_op_type_2_var_1);
    }
}

class PRED_$write_op_type_2_var_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_2, _$write_op_type_2_var_2);
    }
}

class PRED_$write_op_type_2_var_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_3, _$write_op_type_2_var_3);
    }
}

class PRED_$write_op_type_2_var_3 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_4, _$write_op_type_2_var_4);
    }
}

class PRED_$write_op_type_2_var_4 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_5, _$write_op_type_2_var_5);
    }
}

class PRED_$write_op_type_2_var_5 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_6, _$write_op_type_2_var_6);
    }
}

class PRED_$write_op_type_2_var_6 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_op_type_2_7);
    }
}

class PRED_$write_op_type_2_int extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(Int, _fail_0);
    }
}

class PRED_$write_op_type_2_int_0 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_op_type_2_1, _$write_op_type_2_int_0_1);
    }
}

class PRED_$write_op_type_2_int_0_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_2, _$write_op_type_2_int_0_2);
    }
}

class PRED_$write_op_type_2_int_0_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_3, _$write_op_type_2_int_0_3);
    }
}

class PRED_$write_op_type_2_int_0_3 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_op_type_2_4);
    }
}

class PRED_$write_op_type_2_int_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$write_op_type_2_5, _$write_op_type_2_int_1_1);
    }
}

class PRED_$write_op_type_2_int_1_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_op_type_2_6, _$write_op_type_2_int_1_2);
    }
}

class PRED_$write_op_type_2_int_1_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_op_type_2_7);
    }
}

class PRED_$write_op_type_2_1 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_op_type'(1, fx):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1, fx):-[]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 1)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si1);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s2))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s2);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$write_op_type_2_2 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_op_type'(1, fy):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1, fy):-[]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 1)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si1);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s3))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s3);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$write_op_type_2_3 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_op_type'(1, xf):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1, xf):-[]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 1)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si1);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s4))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s4);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$write_op_type_2_4 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_op_type'(1, yf):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_op_type'(1, yf):-[]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 1)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si1);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s5))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s5);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$write_op_type_2_5 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_op_type'(2, xfx):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_op_type'(2, xfx):-[]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 2)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si6);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s7))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s7);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$write_op_type_2_6 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_op_type'(2, xfy):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_op_type'(2, xfy):-[]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 2)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si6);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s8))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s8);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$write_op_type_2_7 extends PRED_$write_op_type_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_op_type'(2, yfx):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$write_op_type'(2, yfx):-[]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 2)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si6);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s9))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s9);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}
