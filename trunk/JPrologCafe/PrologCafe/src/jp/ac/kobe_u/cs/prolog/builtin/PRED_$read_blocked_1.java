package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$read_blocked'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$read_blocked_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(" ? ");

    public Object arg1;

    public PRED_$read_blocked_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$read_blocked_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$read_blocked"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$read_blocked'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
    // '$read_blocked'(A):-'$fast_write'(' ? '), flush_output, read_line(B), '$dummy_28_builtins.pl'(B, C, D), '$debug_option'(C, A)
        engine.setB0();
        Object a1, a2, a3;
        Predicate p1, p2, p3, p4;
        a1 = arg1;
    // '$read_blocked'(A):-['$fast_write'(' ? '), flush_output, read_line(B), '$dummy_28_builtins.pl'(B, C, D), '$debug_option'(C, A)]
        a2 = engine.makeVariable(this);
        a3 = engine.makeVariable(this);
        p1 = new PRED_$debug_option_2(a3, a1, cont);
        p2 = new PRED_$dummy_28_builtins$002Epl_3(a2, a3, engine.makeVariable(this), p1);
        p3 = new PRED_read_line_1(a2, p2);
        p4 = new PRED_flush_output_0(p3);
        return exit(engine, new PRED_$fast_write_1(s1, p4));
    }
}
