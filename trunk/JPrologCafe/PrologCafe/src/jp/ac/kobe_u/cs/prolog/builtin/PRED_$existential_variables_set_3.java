package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$existential_variables_set'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$existential_variables_set_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("^", 2);
    static /*Symbol*/Object s3 = makeAtom("$meta_call", 5);
    static Predicate _$existential_variables_set_3_top = new PRED_$existential_variables_set_3_top();
    static Predicate _$existential_variables_set_3_var = new PRED_$existential_variables_set_3_var();
    static Predicate _$existential_variables_set_3_var_1 = new PRED_$existential_variables_set_3_var_1();
    static Predicate _$existential_variables_set_3_var_2 = new PRED_$existential_variables_set_3_var_2();
    static Predicate _$existential_variables_set_3_var_3 = new PRED_$existential_variables_set_3_var_3();
    static Predicate _$existential_variables_set_3_var_4 = new PRED_$existential_variables_set_3_var_4();
    static Predicate _$existential_variables_set_3_var_5 = new PRED_$existential_variables_set_3_var_5();
    static Predicate _$existential_variables_set_3_int = new PRED_$existential_variables_set_3_int();
    static Predicate _$existential_variables_set_3_int_1 = new PRED_$existential_variables_set_3_int_1();
    static Predicate _$existential_variables_set_3_int_2 = new PRED_$existential_variables_set_3_int_2();
    static Predicate _$existential_variables_set_3_str = new PRED_$existential_variables_set_3_str();
    static Predicate _$existential_variables_set_3_str_0 = new PRED_$existential_variables_set_3_str_0();
    static Predicate _$existential_variables_set_3_str_0_1 = new PRED_$existential_variables_set_3_str_0_1();
    static Predicate _$existential_variables_set_3_str_0_2 = new PRED_$existential_variables_set_3_str_0_2();
    static Predicate _$existential_variables_set_3_str_0_3 = new PRED_$existential_variables_set_3_str_0_3();
    static Predicate _$existential_variables_set_3_str_1 = new PRED_$existential_variables_set_3_str_1();
    static Predicate _$existential_variables_set_3_str_1_1 = new PRED_$existential_variables_set_3_str_1_1();
    static Predicate _$existential_variables_set_3_str_1_2 = new PRED_$existential_variables_set_3_str_1_2();
    static Predicate _$existential_variables_set_3_str_1_3 = new PRED_$existential_variables_set_3_str_1_3();
    static Predicate _$existential_variables_set_3_str_2 = new PRED_$existential_variables_set_3_str_2();
    static Predicate _$existential_variables_set_3_str_2_1 = new PRED_$existential_variables_set_3_str_2_1();
    static Predicate _$existential_variables_set_3_str_2_2 = new PRED_$existential_variables_set_3_str_2_2();
    static Predicate _$existential_variables_set_3_str_2_3 = new PRED_$existential_variables_set_3_str_2_3();
    static Predicate _$existential_variables_set_3_1 = new PRED_$existential_variables_set_3_1();
    static Predicate _$existential_variables_set_3_2 = new PRED_$existential_variables_set_3_2();
    static Predicate _$existential_variables_set_3_3 = new PRED_$existential_variables_set_3_3();
    static Predicate _$existential_variables_set_3_4 = new PRED_$existential_variables_set_3_4();
    static Predicate _$existential_variables_set_3_5 = new PRED_$existential_variables_set_3_5();
    static Predicate _$existential_variables_set_3_6 = new PRED_$existential_variables_set_3_6();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(3);
    static {
        str.put(s1, _$existential_variables_set_3_str_0);
        str.put(s2, _$existential_variables_set_3_str_1);
        str.put(s3, _$existential_variables_set_3_str_2);
    }

    public Object arg1, arg2, arg3;

    public PRED_$existential_variables_set_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$existential_variables_set_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$existential_variables_set"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$existential_variables_set'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        return exit(engine, _$existential_variables_set_3_top);
    }
}

class PRED_$existential_variables_set_3_top extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$existential_variables_set_3_var, _$existential_variables_set_3_int, _$existential_variables_set_3_int, _$existential_variables_set_3_int, _$existential_variables_set_3_str, _$existential_variables_set_3_int);
    }
}

class PRED_$existential_variables_set_3_var extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$existential_variables_set_3_1, _$existential_variables_set_3_var_1);
    }
}

class PRED_$existential_variables_set_3_var_1 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_2, _$existential_variables_set_3_var_2);
    }
}

class PRED_$existential_variables_set_3_var_2 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_3, _$existential_variables_set_3_var_3);
    }
}

class PRED_$existential_variables_set_3_var_3 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_4, _$existential_variables_set_3_var_4);
    }
}

class PRED_$existential_variables_set_3_var_4 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_5, _$existential_variables_set_3_var_5);
    }
}

class PRED_$existential_variables_set_3_var_5 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$existential_variables_set_3_6);
    }
}

class PRED_$existential_variables_set_3_int extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$existential_variables_set_3_1, _$existential_variables_set_3_int_1);
    }
}

class PRED_$existential_variables_set_3_int_1 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_2, _$existential_variables_set_3_int_2);
    }
}

class PRED_$existential_variables_set_3_int_2 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$existential_variables_set_3_6);
    }
}

class PRED_$existential_variables_set_3_str extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$existential_variables_set_3_int);
    }
}

class PRED_$existential_variables_set_3_str_0 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$existential_variables_set_3_1, _$existential_variables_set_3_str_0_1);
    }
}

class PRED_$existential_variables_set_3_str_0_1 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_2, _$existential_variables_set_3_str_0_2);
    }
}

class PRED_$existential_variables_set_3_str_0_2 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_3, _$existential_variables_set_3_str_0_3);
    }
}

class PRED_$existential_variables_set_3_str_0_3 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$existential_variables_set_3_6);
    }
}

class PRED_$existential_variables_set_3_str_1 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$existential_variables_set_3_1, _$existential_variables_set_3_str_1_1);
    }
}

class PRED_$existential_variables_set_3_str_1_1 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_2, _$existential_variables_set_3_str_1_2);
    }
}

class PRED_$existential_variables_set_3_str_1_2 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_4, _$existential_variables_set_3_str_1_3);
    }
}

class PRED_$existential_variables_set_3_str_1_3 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$existential_variables_set_3_6);
    }
}

class PRED_$existential_variables_set_3_str_2 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$existential_variables_set_3_1, _$existential_variables_set_3_str_2_1);
    }
}

class PRED_$existential_variables_set_3_str_2_1 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_2, _$existential_variables_set_3_str_2_2);
    }
}

class PRED_$existential_variables_set_3_str_2_2 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$existential_variables_set_3_5, _$existential_variables_set_3_str_2_3);
    }
}

class PRED_$existential_variables_set_3_str_2_3 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$existential_variables_set_3_6);
    }
}

class PRED_$existential_variables_set_3_1 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$existential_variables_set'(A, B, B):-var(A), !
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$existential_variables_set'(A, B, B):-['$get_level'(C), var(A), '$cut'(C)]
        if (! unify(a2,a3))
            return fail(engine);
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$existential_variables_set_3_2 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$existential_variables_set'(A, B, B):-atomic(A), !
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$existential_variables_set'(A, B, B):-['$get_level'(C), atomic(A), '$cut'(C)]
        if (! unify(a2,a3))
            return fail(engine);
        a4 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(4))
        if (! unify(a4,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atomic(a(1))
        a1 = deref( a1);
        if (! isAtomTerm(a1) && ! isNumber(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = deref( a4);
        if (! isCutter/*Integer*/(a4)) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(( a4));
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$existential_variables_set_3_3 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$existential_variables_set'(A:B, C, D):-!, '$existential_variables_set'(B, C, D)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$existential_variables_set'(A:B, C, D):-['$neck_cut', '$existential_variables_set'(B, C, D)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[1];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {engine.makeVariable(this), a4};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a4;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine.cont = cont;
        return exit(engine, _$existential_variables_set_3_top);
    }
}

class PRED_$existential_variables_set_3_4 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$existential_variables_set'(A^B, C, D):-!, '$variables_set'(A, C, E), '$existential_variables_set'(B, E, D)
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$existential_variables_set'(A^B, C, D):-['$neck_cut', '$variables_set'(A, C, E), '$existential_variables_set'(B, E, D)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
            a5 = args[1];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a4, a5};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a6 = engine.makeVariable(this);
        p1 = new PRED_$existential_variables_set_3(a5, a6, a3, cont);
        return exit(engine, new PRED_$variables_set_3(a4, a2, a6, p1));
    }
}

class PRED_$existential_variables_set_3_5 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$existential_variables_set'('$meta_call'(A, B, C, D, E), F, G):-!, '$existential_variables_set'(A, F, G)
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$existential_variables_set'('$meta_call'(A, B, C, D, E), F, G):-['$neck_cut', '$existential_variables_set'(A, F, G)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s3,a1))
                return fail(engine);
            Object[] args = args(a1);
            a4 = args[0];
        } else if (isVariable(a1)){
            a4 = engine.makeVariable(this);
            Object[] args = {a4, engine.makeVariable(this), engine.makeVariable(this), engine.makeVariable(this), engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a4;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine.cont = cont;
        return exit(engine, _$existential_variables_set_3_top);
    }
}

class PRED_$existential_variables_set_3_6 extends PRED_$existential_variables_set_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$existential_variables_set'(A, B, B):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$existential_variables_set'(A, B, B):-[]
        if (! unify(a2,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}
