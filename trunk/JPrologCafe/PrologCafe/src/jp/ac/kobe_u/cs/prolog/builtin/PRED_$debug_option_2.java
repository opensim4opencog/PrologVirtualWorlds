package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$debug_option'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$debug_option_2 extends PredicateBase {
    static /*IntegerTerm*/Object si1 = makeInteger(97);
    static /*IntegerTerm*/Object si2 = makeInteger(99);
    static /*Symbol*/Object s3 = makeAtom("leap");
    static /*Symbol*/Object s4 = makeAtom("no");
    static /*IntegerTerm*/Object si5 = makeInteger(108);
    static /*Symbol*/Object s6 = makeAtom("yes");
    static /*IntegerTerm*/Object si7 = makeInteger(43);
    static /*Symbol*/Object s8 = makeAtom("print_procedure_box", 5);
    static /*Symbol*/Object s9 = makeAtom(":", 2);
    static /*IntegerTerm*/Object si10 = makeInteger(45);
    static /*IntegerTerm*/Object si11 = makeInteger(63);
    static /*Symbol*/Object s12 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*IntegerTerm*/Object si13 = makeInteger(104);
    static Predicate _$debug_option_2_var = new PRED_$debug_option_2_var();
    static Predicate _$debug_option_2_var_1 = new PRED_$debug_option_2_var_1();
    static Predicate _$debug_option_2_var_2 = new PRED_$debug_option_2_var_2();
    static Predicate _$debug_option_2_var_3 = new PRED_$debug_option_2_var_3();
    static Predicate _$debug_option_2_var_4 = new PRED_$debug_option_2_var_4();
    static Predicate _$debug_option_2_var_5 = new PRED_$debug_option_2_var_5();
    static Predicate _$debug_option_2_var_6 = new PRED_$debug_option_2_var_6();
    static Predicate _$debug_option_2_var_7 = new PRED_$debug_option_2_var_7();
    static Predicate _$debug_option_2_int = new PRED_$debug_option_2_int();
    static Predicate _$debug_option_2_int_0 = new PRED_$debug_option_2_int_0();
    static Predicate _$debug_option_2_int_0_1 = new PRED_$debug_option_2_int_0_1();
    static Predicate _$debug_option_2_int_1 = new PRED_$debug_option_2_int_1();
    static Predicate _$debug_option_2_int_1_1 = new PRED_$debug_option_2_int_1_1();
    static Predicate _$debug_option_2_int_2 = new PRED_$debug_option_2_int_2();
    static Predicate _$debug_option_2_int_2_1 = new PRED_$debug_option_2_int_2_1();
    static Predicate _$debug_option_2_int_3 = new PRED_$debug_option_2_int_3();
    static Predicate _$debug_option_2_int_3_1 = new PRED_$debug_option_2_int_3_1();
    static Predicate _$debug_option_2_int_4 = new PRED_$debug_option_2_int_4();
    static Predicate _$debug_option_2_int_4_1 = new PRED_$debug_option_2_int_4_1();
    static Predicate _$debug_option_2_int_5 = new PRED_$debug_option_2_int_5();
    static Predicate _$debug_option_2_int_5_1 = new PRED_$debug_option_2_int_5_1();
    static Predicate _$debug_option_2_int_6 = new PRED_$debug_option_2_int_6();
    static Predicate _$debug_option_2_int_6_1 = new PRED_$debug_option_2_int_6_1();
    static Predicate _$debug_option_2_1 = new PRED_$debug_option_2_1();
    static Predicate _$debug_option_2_2 = new PRED_$debug_option_2_2();
    static Predicate _$debug_option_2_3 = new PRED_$debug_option_2_3();
    static Predicate _$debug_option_2_4 = new PRED_$debug_option_2_4();
    static Predicate _$debug_option_2_5 = new PRED_$debug_option_2_5();
    static Predicate _$debug_option_2_6 = new PRED_$debug_option_2_6();
    static Predicate _$debug_option_2_7 = new PRED_$debug_option_2_7();
    static Predicate _$debug_option_2_8 = new PRED_$debug_option_2_8();
    static HashtableOfTerm<Predicate> Int = new HashtableOfTerm<Predicate>(7);
    static {
        Int.put(si1, _$debug_option_2_int_0);
        Int.put(si2, _$debug_option_2_int_1);
        Int.put(si5, _$debug_option_2_int_2);
        Int.put(si7, _$debug_option_2_int_3);
        Int.put(si10, _$debug_option_2_int_4);
        Int.put(si11, _$debug_option_2_int_5);
        Int.put(si13, _$debug_option_2_int_6);
    }

    public Object arg1, arg2;

    public PRED_$debug_option_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$debug_option_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$debug_option"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$debug_option'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$debug_option_2_var, _$debug_option_2_int, _$debug_option_2_8, _$debug_option_2_8, _$debug_option_2_8, _$debug_option_2_8);
    }
}

class PRED_$debug_option_2_var extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_1, _$debug_option_2_var_1);
    }
}

class PRED_$debug_option_2_var_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$debug_option_2_2, _$debug_option_2_var_2);
    }
}

class PRED_$debug_option_2_var_2 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$debug_option_2_3, _$debug_option_2_var_3);
    }
}

class PRED_$debug_option_2_var_3 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$debug_option_2_4, _$debug_option_2_var_4);
    }
}

class PRED_$debug_option_2_var_4 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$debug_option_2_5, _$debug_option_2_var_5);
    }
}

class PRED_$debug_option_2_var_5 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$debug_option_2_6, _$debug_option_2_var_6);
    }
}

class PRED_$debug_option_2_var_6 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$debug_option_2_7, _$debug_option_2_var_7);
    }
}

class PRED_$debug_option_2_var_7 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(Int, _$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int_0 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_1, _$debug_option_2_int_0_1);
    }
}

class PRED_$debug_option_2_int_0_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_2, _$debug_option_2_int_1_1);
    }
}

class PRED_$debug_option_2_int_1_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int_2 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_3, _$debug_option_2_int_2_1);
    }
}

class PRED_$debug_option_2_int_2_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int_3 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_4, _$debug_option_2_int_3_1);
    }
}

class PRED_$debug_option_2_int_3_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int_4 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_5, _$debug_option_2_int_4_1);
    }
}

class PRED_$debug_option_2_int_4_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int_5 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_6, _$debug_option_2_int_5_1);
    }
}

class PRED_$debug_option_2_int_5_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_int_6 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$debug_option_2_7, _$debug_option_2_int_6_1);
    }
}

class PRED_$debug_option_2_int_6_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$debug_option_2_8);
    }
}

class PRED_$debug_option_2_1 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(97, A):-!, notrace, abort
        Object a1, a2;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(97, A):-['$neck_cut', notrace, abort]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 97)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_abort_0(cont);
        return exit(engine, new PRED_notrace_0(p1));
    }
}

class PRED_$debug_option_2_2 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(99, A):-!, '$set_debug_flag'(leap, no)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(99, A):-['$neck_cut', '$set_debug_flag'(leap, no)]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 99)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si2);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$set_debug_flag_2(s3, s4, cont));
    }
}

class PRED_$debug_option_2_3 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(108, A):-!, '$set_debug_flag'(leap, yes)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(108, A):-['$neck_cut', '$set_debug_flag'(leap, yes)]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 108)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si5);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_$set_debug_flag_2(s3, s6, cont));
    }
}

class PRED_$debug_option_2_4 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(43, print_procedure_box(A, B, C, D, E)):-!, spy(C:D), call(print_procedure_box(A, B, C, D, E))
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(43, print_procedure_box(A, B, C, D, E)):-['$neck_cut', spy(C:D), call('jp.ac.kobe_u.cs.prolog.builtin':print_procedure_box(A, B, C, D, E))]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 43)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si7);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s8,a2))
                return fail(engine);
            Object[] args = args(a2);
            a3 = args[0];
            a4 = args[1];
            a5 = args[2];
            a6 = args[3];
            a7 = args[4];
        } else if (isVariable(a2)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a3, a4, a5, a6, a7};
            bind(/*VAR*/ a2,makeStructure(s8, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a5, a6};
        a8 = makeStructure(s9, y1);
        a9 = makeClosure(new PRED_print_procedure_box_5(a3, a4, a5, a6, a7, null));
        p1 = new PRED_call_1(a9, cont);
        return exit(engine, new PRED_spy_1(a8, p1));
    }
}

class PRED_$debug_option_2_5 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(45, print_procedure_box(A, B, C, D, E)):-!, nospy(C:D), call(print_procedure_box(A, B, C, D, E))
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(45, print_procedure_box(A, B, C, D, E)):-['$neck_cut', nospy(C:D), call('jp.ac.kobe_u.cs.prolog.builtin':print_procedure_box(A, B, C, D, E))]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 45)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si10);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isCompound(a2)){
            if (!functorOf( s8,a2))
                return fail(engine);
            Object[] args = args(a2);
            a3 = args[0];
            a4 = args[1];
            a5 = args[2];
            a6 = args[3];
            a7 = args[4];
        } else if (isVariable(a2)){
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
            Object[] args = {a3, a4, a5, a6, a7};
            bind(/*VAR*/ a2,makeStructure(s8, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {a5, a6};
        a8 = makeStructure(s9, y1);
        a9 = makeClosure(new PRED_print_procedure_box_5(a3, a4, a5, a6, a7, null));
        p1 = new PRED_call_1(a9, cont);
        return exit(engine, new PRED_nospy_1(a8, p1));
    }
}

class PRED_$debug_option_2_6 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(63, A):-!, '$show_debug_option', call(A)
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(63, A):-['$neck_cut', '$show_debug_option', call('jp.ac.kobe_u.cs.prolog.builtin':A)]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 63)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si11);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {s12, a2};
        a3 = makeStructure(s9, y1);
        p1 = new PRED_call_1(a3, cont);
        return exit(engine, new PRED_$show_debug_option_0(p1));
    }
}

class PRED_$debug_option_2_7 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(104, A):-!, '$show_debug_option', call(A)
        Object a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(104, A):-['$neck_cut', '$show_debug_option', call('jp.ac.kobe_u.cs.prolog.builtin':A)]
        a1 = deref( a1);
        if (isInteger(a1)){
            if (intValue( a1) != 104)
                return fail(engine);
        } else if (isVariable(a1)){
            bind(/*VAR*/ a1,si13);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {s12, a2};
        a3 = makeStructure(s9, y1);
        p1 = new PRED_call_1(a3, cont);
        return exit(engine, new PRED_$show_debug_option_0(p1));
    }
}

class PRED_$debug_option_2_8 extends PRED_$debug_option_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$debug_option'(A, B):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$debug_option'(A, B):-[]
        return exit(engine,cont);
    }
}
