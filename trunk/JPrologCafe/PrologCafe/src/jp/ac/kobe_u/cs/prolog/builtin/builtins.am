:-op(1150, fx, (package)).
:-op(1170, xfx, (:-)).
:-op(1170, xfx, (-->)).
:-op(1170, fx, (:-)).
:-op(1170, fx, (?-)).
:-op(1150, fx, (import)).
:-op(1150, fx, (public)).
:-op(1150, fx, (dynamic)).
:-op(1150, fx, (meta_predicate)).
:-op(1150, fx, (mode)).
:-op(1150, fx, (multifile)).
:-op(1150, fx, (block)).
begin_predicate((package)/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (package)/1, 'builtins.pl']).
main((package)/1, non- (public)) :
(package)/1 :
        comment((package A:-true)).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((package A:-[])).
        execute(cont).
end_predicate((package)/1).

begin_predicate(true/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([true/0, 'builtins.pl']).
main(true/0, (public)) :
true/0 :
        comment((true:-true)).
        setB0.
        comment((true:-[])).
        execute(cont).
end_predicate(true/0).

begin_predicate(otherwise/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([otherwise/0, 'builtins.pl']).
main(otherwise/0, non- (public)) :
otherwise/0 :
        comment((otherwise:-true)).
        setB0.
        comment((otherwise:-[])).
        execute(cont).
end_predicate(otherwise/0).

begin_predicate(fail/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([fail/0, 'builtins.pl']).
main(fail/0, (public)) :
fail/0 :
        comment((fail:-fail)).
        setB0.
        comment((fail:-[fail])).
        inline(fail).
end_predicate(fail/0).

begin_predicate(false/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([false/0, 'builtins.pl']).
main(false/0, (public)) :
false/0 :
        comment((false:-fail)).
        setB0.
        comment((false:-[fail])).
        inline(fail).
end_predicate(false/0).

begin_predicate(!/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([!/0, 'builtins.pl']).
main(!/0, (public)) :
!/0 :
        comment((!:-true)).
        setB0.
        comment((!:-[])).
        execute(cont).
end_predicate(!/0).

begin_predicate('$get_level'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$get_level'/1, 'builtins.pl']).
main('$get_level'/1, (public)) :
'$get_level'/1 :
        comment(('$get_level'(A):-'$get_level'(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment(('$get_level'(A):-['$get_level'(A)])).
        inline('$get_level'(a(1))).
        execute(cont).
end_predicate('$get_level'/1).

begin_predicate('$neck_cut'/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$neck_cut'/0, 'builtins.pl']).
main('$neck_cut'/0, (public)) :
'$neck_cut'/0 :
        comment(('$neck_cut':-'$neck_cut')).
        setB0.
        comment(('$neck_cut':-['$neck_cut'])).
        inline('$neck_cut').
        execute(cont).
end_predicate('$neck_cut'/0).

begin_predicate('$cut'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$cut'/1, 'builtins.pl']).
main('$cut'/1, (public)) :
'$cut'/1 :
        comment(('$cut'(A):-'$cut'(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment(('$cut'(A):-['$cut'(A)])).
        inline('$cut'(a(1))).
        execute(cont).
end_predicate('$cut'/1).

begin_predicate(^ / 2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([^ / 2, 'builtins.pl']).
main(^ / 2, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
^ / 2 :
        comment((A^B:-call(B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A^B:-[call('jp.ac.kobe_u.cs.prolog.builtin':B)])).
        put_str_args([s(2), a(2)], y(1)).
        put_str(s(1), y(1), a(3)).
        execute(call(a(3), cont)).
end_predicate(^ / 2).

begin_predicate((',')/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (',')/2, 'builtins.pl']).
main((',')/2, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
(',')/2 :
        comment((A, B:-call(A), call(B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A, B:-[call('jp.ac.kobe_u.cs.prolog.builtin':A), call('jp.ac.kobe_u.cs.prolog.builtin':B)])).
        put_str_args([s(2), a(1)], y(1)).
        put_str(s(1), y(1), a(3)).
        put_str_args([s(2), a(2)], y(2)).
        put_str(s(1), y(2), a(4)).
        put_cont(call(a(4), cont), p(1)).
        execute(call(a(3), p(1))).
end_predicate((',')/2).

begin_predicate((;)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (;)/2, 'builtins.pl']).
main((;)/2, (public)) :
        put_con((->)/2, s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        label((;)/2+var).
        label((;)/2+var+1).
        label((;)/2+var+2).
        label((;)/2+var+3).
        label((;)/2+int).
        label((;)/2+int+1).
        label((;)/2+1).
        label((;)/2+2).
        label((;)/2+3).
        label((;)/2+4).
(;)/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term((;)/2+var, (;)/2+int, (;)/2+int, (;)/2+int, (;)/2+var, (;)/2+int).
(;)/2+var :
        try((;)/2+1, (;)/2+var+1).
(;)/2+var+1 :
        retry((;)/2+2, (;)/2+var+2).
(;)/2+var+2 :
        retry((;)/2+3, (;)/2+var+3).
(;)/2+var+3 :
        trust((;)/2+4).
(;)/2+int :
        try((;)/2+1, (;)/2+int+1).
(;)/2+int+1 :
        trust((;)/2+2).
(;)/2+1 :
        comment((A;B:-A\= (C->D), call(A))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((A;B:-['$not_unifiable'(A, (C->D)), call('jp.ac.kobe_u.cs.prolog.builtin':A)])).
        put_str_args([void, void], y(1)).
        put_str(s(1), y(1), a(3)).
        inline('$not_unifiable'(a(1), a(3))).
        put_str_args([s(3), a(1)], y(2)).
        put_str(s(2), y(2), a(4)).
        execute(call(a(4), cont)).
(;)/2+2 :
        comment((A;B:-B\= (C->D), call(B))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((A;B:-['$not_unifiable'(B, (C->D)), call('jp.ac.kobe_u.cs.prolog.builtin':B)])).
        put_str_args([void, void], y(1)).
        put_str(s(1), y(1), a(3)).
        inline('$not_unifiable'(a(2), a(3))).
        put_str_args([s(3), a(2)], y(2)).
        put_str(s(2), y(2), a(4)).
        execute(call(a(4), cont)).
(;)/2+3 :
        comment((A->B;C:-call(A), !, call(B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((A->B;C:-['$get_level'(D), call('jp.ac.kobe_u.cs.prolog.builtin':A), '$cut'(D), call('jp.ac.kobe_u.cs.prolog.builtin':B)])).
        get_str((->)/2, s(1), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_str_args([s(3), a(3)], y(1)).
        put_str(s(2), y(1), a(6)).
        put_str_args([s(3), a(4)], y(2)).
        put_str(s(2), y(2), a(7)).
        put_cont(call(a(7), cont), p(1)).
        put_cont('$cut'(a(5), p(1)), p(2)).
        execute(call(a(6), p(2))).
(;)/2+4 :
        comment((A->B;C:-call(C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((A->B;C:-[call('jp.ac.kobe_u.cs.prolog.builtin':C)])).
        get_str((->)/2, s(1), a(1)).
        unify_void(1).
        unify_void(1).
        put_str_args([s(3), a(2)], y(1)).
        put_str(s(2), y(1), a(3)).
        execute(call(a(3), cont)).
end_predicate((;)/2).

begin_predicate((->)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (->)/2, 'builtins.pl']).
main((->)/2, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
(->)/2 :
        comment((A->B:-call(A), !, call(B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A->B:-['$get_level'(C), call('jp.ac.kobe_u.cs.prolog.builtin':A), '$cut'(C), call('jp.ac.kobe_u.cs.prolog.builtin':B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_str_args([s(2), a(1)], y(1)).
        put_str(s(1), y(1), a(4)).
        put_str_args([s(2), a(2)], y(2)).
        put_str(s(1), y(2), a(5)).
        put_cont(call(a(5), cont), p(1)).
        put_cont('$cut'(a(3), p(1)), p(2)).
        execute(call(a(4), p(2))).
end_predicate((->)/2).

begin_predicate(call/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([call/1, 'builtins.pl']).
main(call/1, (public)) :
        put_con(user, s(1)).
        put_int(0, si(2)).
        put_con(interpret, s(3)).
call/1 :
        comment((call(A):-'$get_level'(B), '$meta_call'(A, user, B, 0, interpret))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        comment((call(A):-['$get_level'(B), '$meta_call'(A, user, B, 0, interpret)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        execute('$meta_call'(a(1), s(1), a(2), si(2), s(3), cont)).
end_predicate(call/1).

begin_predicate('$meta_call'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$meta_call'/5, 'builtins.pl']).
main('$meta_call'/5, non- (public)) :
        put_con(var, s(1)).
        put_con(call/1, s(2)).
        put_int(1, si(3)).
        put_con(true, s(4)).
        put_con(trace, s(5)).
        put_con(debug, s(6)).
        put_con(notrace, s(7)).
        put_con(nodebug, s(8)).
        put_con(spy/1, s(9)).
        put_con(nospy/1, s(10)).
        put_con(nospyall, s(11)).
        put_con(leash/1, s(12)).
        put_con(^ / 2, s(13)).
        put_con((:)/2, s(14)).
        put_con(!, s(15)).
        put_con(no, s(16)).
        put_con(context/2, s(17)).
        put_con(if, s(18)).
        put_con(cut, s(19)).
        put_str_args([s(18), s(19)], s(20)).
        put_str(s(17), s(20), s(21)).
        put_int(0, si(22)).
        put_con((',')/2, s(23)).
        put_con((;)/2, s(24)).
        put_con((->)/2, s(25)).
        put_con((\+)/1, s(26)).
        put_con(findall/3, s(27)).
        put_con(bagof/3, s(28)).
        put_con(setof/3, s(29)).
        put_con(once/1, s(30)).
        put_con(on_exception/3, s(31)).
        put_con(catch/3, s(32)).
        put_con(synchronized/2, s(33)).
        put_con(clause/2, s(34)).
        put_con(assert/1, s(35)).
        put_con(assertz/1, s(36)).
        put_con(asserta/1, s(37)).
        put_con(retract/1, s(38)).
        put_con(abolish/1, s(39)).
        put_con(retractall/1, s(40)).
        put_con(type/1, s(41)).
        put_con(callable, s(42)).
        put_str_args([s(42)], s(43)).
        put_str(s(41), s(43), s(44)).
        label('$meta_call'/5+top).
        label('$meta_call'/5+var).
        label('$meta_call'/5+var+1).
        label('$meta_call'/5+var+2).
        label('$meta_call'/5+var+3).
        label('$meta_call'/5+var+4).
        label('$meta_call'/5+var+5).
        label('$meta_call'/5+var+6).
        label('$meta_call'/5+var+7).
        label('$meta_call'/5+var+8).
        label('$meta_call'/5+var+9).
        label('$meta_call'/5+var+10).
        label('$meta_call'/5+var+11).
        label('$meta_call'/5+var+12).
        label('$meta_call'/5+var+13).
        label('$meta_call'/5+var+14).
        label('$meta_call'/5+var+15).
        label('$meta_call'/5+var+16).
        label('$meta_call'/5+var+17).
        label('$meta_call'/5+var+18).
        label('$meta_call'/5+var+19).
        label('$meta_call'/5+var+20).
        label('$meta_call'/5+var+21).
        label('$meta_call'/5+var+22).
        label('$meta_call'/5+var+23).
        label('$meta_call'/5+var+24).
        label('$meta_call'/5+var+25).
        label('$meta_call'/5+var+26).
        label('$meta_call'/5+var+27).
        label('$meta_call'/5+var+28).
        label('$meta_call'/5+var+29).
        label('$meta_call'/5+var+30).
        label('$meta_call'/5+var+31).
        label('$meta_call'/5+var+32).
        label('$meta_call'/5+var+33).
        label('$meta_call'/5+var+34).
        label('$meta_call'/5+var+35).
        label('$meta_call'/5+var+36).
        label('$meta_call'/5+int).
        label('$meta_call'/5+int+1).
        label('$meta_call'/5+int+2).
        label('$meta_call'/5+int+3).
        label('$meta_call'/5+con).
        label('$meta_call'/5+con+0).
        label('$meta_call'/5+con+0+1).
        label('$meta_call'/5+con+0+2).
        label('$meta_call'/5+con+0+3).
        label('$meta_call'/5+con+0+4).
        label('$meta_call'/5+con+1).
        label('$meta_call'/5+con+1+1).
        label('$meta_call'/5+con+1+2).
        label('$meta_call'/5+con+1+3).
        label('$meta_call'/5+con+1+4).
        label('$meta_call'/5+con+2).
        label('$meta_call'/5+con+2+1).
        label('$meta_call'/5+con+2+2).
        label('$meta_call'/5+con+2+3).
        label('$meta_call'/5+con+2+4).
        label('$meta_call'/5+con+3).
        label('$meta_call'/5+con+3+1).
        label('$meta_call'/5+con+3+2).
        label('$meta_call'/5+con+3+3).
        label('$meta_call'/5+con+3+4).
        label('$meta_call'/5+con+4).
        label('$meta_call'/5+con+4+1).
        label('$meta_call'/5+con+4+2).
        label('$meta_call'/5+con+4+3).
        label('$meta_call'/5+con+4+4).
        label('$meta_call'/5+con+5).
        label('$meta_call'/5+con+5+1).
        label('$meta_call'/5+con+5+2).
        label('$meta_call'/5+con+5+3).
        label('$meta_call'/5+con+5+4).
        label('$meta_call'/5+con+6).
        label('$meta_call'/5+con+6+1).
        label('$meta_call'/5+con+6+2).
        label('$meta_call'/5+con+6+3).
        label('$meta_call'/5+con+6+4).
        label('$meta_call'/5+con+6+5).
        label('$meta_call'/5+str).
        label('$meta_call'/5+str+0).
        label('$meta_call'/5+str+0+1).
        label('$meta_call'/5+str+0+2).
        label('$meta_call'/5+str+0+3).
        label('$meta_call'/5+str+0+4).
        label('$meta_call'/5+str+1).
        label('$meta_call'/5+str+1+1).
        label('$meta_call'/5+str+1+2).
        label('$meta_call'/5+str+1+3).
        label('$meta_call'/5+str+1+4).
        label('$meta_call'/5+str+2).
        label('$meta_call'/5+str+2+1).
        label('$meta_call'/5+str+2+2).
        label('$meta_call'/5+str+2+3).
        label('$meta_call'/5+str+2+4).
        label('$meta_call'/5+str+3).
        label('$meta_call'/5+str+3+1).
        label('$meta_call'/5+str+3+2).
        label('$meta_call'/5+str+3+3).
        label('$meta_call'/5+str+3+4).
        label('$meta_call'/5+str+4).
        label('$meta_call'/5+str+4+1).
        label('$meta_call'/5+str+4+2).
        label('$meta_call'/5+str+4+3).
        label('$meta_call'/5+str+4+4).
        label('$meta_call'/5+str+5).
        label('$meta_call'/5+str+5+1).
        label('$meta_call'/5+str+5+2).
        label('$meta_call'/5+str+5+3).
        label('$meta_call'/5+str+5+4).
        label('$meta_call'/5+str+6).
        label('$meta_call'/5+str+6+1).
        label('$meta_call'/5+str+6+2).
        label('$meta_call'/5+str+6+3).
        label('$meta_call'/5+str+6+4).
        label('$meta_call'/5+str+7).
        label('$meta_call'/5+str+7+1).
        label('$meta_call'/5+str+7+2).
        label('$meta_call'/5+str+7+3).
        label('$meta_call'/5+str+7+4).
        label('$meta_call'/5+str+7+5).
        label('$meta_call'/5+str+8).
        label('$meta_call'/5+str+8+1).
        label('$meta_call'/5+str+8+2).
        label('$meta_call'/5+str+8+3).
        label('$meta_call'/5+str+8+4).
        label('$meta_call'/5+str+9).
        label('$meta_call'/5+str+9+1).
        label('$meta_call'/5+str+9+2).
        label('$meta_call'/5+str+9+3).
        label('$meta_call'/5+str+9+4).
        label('$meta_call'/5+str+10).
        label('$meta_call'/5+str+10+1).
        label('$meta_call'/5+str+10+2).
        label('$meta_call'/5+str+10+3).
        label('$meta_call'/5+str+10+4).
        label('$meta_call'/5+str+11).
        label('$meta_call'/5+str+11+1).
        label('$meta_call'/5+str+11+2).
        label('$meta_call'/5+str+11+3).
        label('$meta_call'/5+str+11+4).
        label('$meta_call'/5+str+12).
        label('$meta_call'/5+str+12+1).
        label('$meta_call'/5+str+12+2).
        label('$meta_call'/5+str+12+3).
        label('$meta_call'/5+str+12+4).
        label('$meta_call'/5+str+13).
        label('$meta_call'/5+str+13+1).
        label('$meta_call'/5+str+13+2).
        label('$meta_call'/5+str+13+3).
        label('$meta_call'/5+str+13+4).
        label('$meta_call'/5+str+14).
        label('$meta_call'/5+str+14+1).
        label('$meta_call'/5+str+14+2).
        label('$meta_call'/5+str+14+3).
        label('$meta_call'/5+str+14+4).
        label('$meta_call'/5+str+15).
        label('$meta_call'/5+str+15+1).
        label('$meta_call'/5+str+15+2).
        label('$meta_call'/5+str+15+3).
        label('$meta_call'/5+str+15+4).
        label('$meta_call'/5+str+16).
        label('$meta_call'/5+str+16+1).
        label('$meta_call'/5+str+16+2).
        label('$meta_call'/5+str+16+3).
        label('$meta_call'/5+str+16+4).
        label('$meta_call'/5+str+17).
        label('$meta_call'/5+str+17+1).
        label('$meta_call'/5+str+17+2).
        label('$meta_call'/5+str+17+3).
        label('$meta_call'/5+str+17+4).
        label('$meta_call'/5+str+18).
        label('$meta_call'/5+str+18+1).
        label('$meta_call'/5+str+18+2).
        label('$meta_call'/5+str+18+3).
        label('$meta_call'/5+str+18+4).
        label('$meta_call'/5+str+19).
        label('$meta_call'/5+str+19+1).
        label('$meta_call'/5+str+19+2).
        label('$meta_call'/5+str+19+3).
        label('$meta_call'/5+str+19+4).
        label('$meta_call'/5+str+20).
        label('$meta_call'/5+str+20+1).
        label('$meta_call'/5+str+20+2).
        label('$meta_call'/5+str+20+3).
        label('$meta_call'/5+str+20+4).
        label('$meta_call'/5+str+21).
        label('$meta_call'/5+str+21+1).
        label('$meta_call'/5+str+21+2).
        label('$meta_call'/5+str+21+3).
        label('$meta_call'/5+str+21+4).
        label('$meta_call'/5+str+22).
        label('$meta_call'/5+str+22+1).
        label('$meta_call'/5+str+22+2).
        label('$meta_call'/5+str+22+3).
        label('$meta_call'/5+str+22+4).
        label('$meta_call'/5+lis).
        label('$meta_call'/5+lis+1).
        label('$meta_call'/5+lis+2).
        label('$meta_call'/5+lis+3).
        label('$meta_call'/5+lis+4).
        label('$meta_call'/5+1).
        label('$meta_call'/5+2).
        label('$meta_call'/5+3).
        label('$meta_call'/5+4).
        label('$meta_call'/5+5).
        label('$meta_call'/5+6).
        label('$meta_call'/5+7).
        label('$meta_call'/5+8).
        label('$meta_call'/5+9).
        label('$meta_call'/5+10).
        label('$meta_call'/5+11).
        label('$meta_call'/5+12).
        label('$meta_call'/5+13).
        label('$meta_call'/5+14).
        label('$meta_call'/5+15).
        label('$meta_call'/5+16).
        label('$meta_call'/5+17).
        label('$meta_call'/5+18).
        label('$meta_call'/5+19).
        label('$meta_call'/5+20).
        label('$meta_call'/5+21).
        label('$meta_call'/5+22).
        label('$meta_call'/5+23).
        label('$meta_call'/5+24).
        label('$meta_call'/5+25).
        label('$meta_call'/5+26).
        label('$meta_call'/5+27).
        label('$meta_call'/5+28).
        label('$meta_call'/5+29).
        label('$meta_call'/5+30).
        label('$meta_call'/5+31).
        label('$meta_call'/5+32).
        label('$meta_call'/5+33).
        label('$meta_call'/5+34).
        label('$meta_call'/5+35).
        label('$meta_call'/5+36).
        label('$meta_call'/5+37).
        new_hash(con, 7).
        new_hash(str, 23).
        static([put_hash(s(4), '$meta_call'/5+con+0, con), put_hash(s(5), '$meta_call'/5+con+1, con), put_hash(s(6), '$meta_call'/5+con+2, con), put_hash(s(7), '$meta_call'/5+con+3, con), put_hash(s(8), '$meta_call'/5+con+4, con), put_hash(s(11), '$meta_call'/5+con+5, con), put_hash(s(15), '$meta_call'/5+con+6, con), put_hash(s(9), '$meta_call'/5+str+0, str), put_hash(s(10), '$meta_call'/5+str+1, str), put_hash(s(12), '$meta_call'/5+str+2, str), put_hash(s(13), '$meta_call'/5+str+3, str), put_hash(s(14), '$meta_call'/5+str+4, str), put_hash(s(23), '$meta_call'/5+str+5, str), put_hash(s(25), '$meta_call'/5+str+6, str), put_hash(s(24), '$meta_call'/5+str+7, str), put_hash(s(26), '$meta_call'/5+str+8, str), put_hash(s(27), '$meta_call'/5+str+9, str), put_hash(s(28), '$meta_call'/5+str+10, str), put_hash(s(29), '$meta_call'/5+str+11, str), put_hash(s(30), '$meta_call'/5+str+12, str), put_hash(s(31), '$meta_call'/5+str+13, str), put_hash(s(32), '$meta_call'/5+str+14, str), put_hash(s(33), '$meta_call'/5+str+15, str), put_hash(s(34), '$meta_call'/5+str+16, str), put_hash(s(35), '$meta_call'/5+str+17, str), put_hash(s(36), '$meta_call'/5+str+18, str), put_hash(s(37), '$meta_call'/5+str+19, str), put_hash(s(38), '$meta_call'/5+str+20, str), put_hash(s(39), '$meta_call'/5+str+21, str), put_hash(s(40), '$meta_call'/5+str+22, str)]).
'$meta_call'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$meta_call'/5+top).
'$meta_call'/5+top :
        setB0.
        switch_on_term('$meta_call'/5+var, '$meta_call'/5+int, '$meta_call'/5+int, '$meta_call'/5+con, '$meta_call'/5+str, '$meta_call'/5+lis).
'$meta_call'/5+var :
        try('$meta_call'/5+1, '$meta_call'/5+var+1).
'$meta_call'/5+var+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+var+2).
'$meta_call'/5+var+2 :
        retry('$meta_call'/5+3, '$meta_call'/5+var+3).
'$meta_call'/5+var+3 :
        retry('$meta_call'/5+4, '$meta_call'/5+var+4).
'$meta_call'/5+var+4 :
        retry('$meta_call'/5+5, '$meta_call'/5+var+5).
'$meta_call'/5+var+5 :
        retry('$meta_call'/5+6, '$meta_call'/5+var+6).
'$meta_call'/5+var+6 :
        retry('$meta_call'/5+7, '$meta_call'/5+var+7).
'$meta_call'/5+var+7 :
        retry('$meta_call'/5+8, '$meta_call'/5+var+8).
'$meta_call'/5+var+8 :
        retry('$meta_call'/5+9, '$meta_call'/5+var+9).
'$meta_call'/5+var+9 :
        retry('$meta_call'/5+10, '$meta_call'/5+var+10).
'$meta_call'/5+var+10 :
        retry('$meta_call'/5+11, '$meta_call'/5+var+11).
'$meta_call'/5+var+11 :
        retry('$meta_call'/5+12, '$meta_call'/5+var+12).
'$meta_call'/5+var+12 :
        retry('$meta_call'/5+13, '$meta_call'/5+var+13).
'$meta_call'/5+var+13 :
        retry('$meta_call'/5+14, '$meta_call'/5+var+14).
'$meta_call'/5+var+14 :
        retry('$meta_call'/5+15, '$meta_call'/5+var+15).
'$meta_call'/5+var+15 :
        retry('$meta_call'/5+16, '$meta_call'/5+var+16).
'$meta_call'/5+var+16 :
        retry('$meta_call'/5+17, '$meta_call'/5+var+17).
'$meta_call'/5+var+17 :
        retry('$meta_call'/5+18, '$meta_call'/5+var+18).
'$meta_call'/5+var+18 :
        retry('$meta_call'/5+19, '$meta_call'/5+var+19).
'$meta_call'/5+var+19 :
        retry('$meta_call'/5+20, '$meta_call'/5+var+20).
'$meta_call'/5+var+20 :
        retry('$meta_call'/5+21, '$meta_call'/5+var+21).
'$meta_call'/5+var+21 :
        retry('$meta_call'/5+22, '$meta_call'/5+var+22).
'$meta_call'/5+var+22 :
        retry('$meta_call'/5+23, '$meta_call'/5+var+23).
'$meta_call'/5+var+23 :
        retry('$meta_call'/5+24, '$meta_call'/5+var+24).
'$meta_call'/5+var+24 :
        retry('$meta_call'/5+25, '$meta_call'/5+var+25).
'$meta_call'/5+var+25 :
        retry('$meta_call'/5+26, '$meta_call'/5+var+26).
'$meta_call'/5+var+26 :
        retry('$meta_call'/5+27, '$meta_call'/5+var+27).
'$meta_call'/5+var+27 :
        retry('$meta_call'/5+28, '$meta_call'/5+var+28).
'$meta_call'/5+var+28 :
        retry('$meta_call'/5+29, '$meta_call'/5+var+29).
'$meta_call'/5+var+29 :
        retry('$meta_call'/5+30, '$meta_call'/5+var+30).
'$meta_call'/5+var+30 :
        retry('$meta_call'/5+31, '$meta_call'/5+var+31).
'$meta_call'/5+var+31 :
        retry('$meta_call'/5+32, '$meta_call'/5+var+32).
'$meta_call'/5+var+32 :
        retry('$meta_call'/5+33, '$meta_call'/5+var+33).
'$meta_call'/5+var+33 :
        retry('$meta_call'/5+34, '$meta_call'/5+var+34).
'$meta_call'/5+var+34 :
        retry('$meta_call'/5+35, '$meta_call'/5+var+35).
'$meta_call'/5+var+35 :
        retry('$meta_call'/5+36, '$meta_call'/5+var+36).
'$meta_call'/5+var+36 :
        trust('$meta_call'/5+37).
'$meta_call'/5+int :
        try('$meta_call'/5+1, '$meta_call'/5+int+1).
'$meta_call'/5+int+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+int+2).
'$meta_call'/5+int+2 :
        retry('$meta_call'/5+36, '$meta_call'/5+int+3).
'$meta_call'/5+int+3 :
        trust('$meta_call'/5+37).
'$meta_call'/5+con :
        switch_on_hash(con, 7, '$meta_call'/5+int, [true:'$meta_call'/5+con+0, trace:'$meta_call'/5+con+1, debug:'$meta_call'/5+con+2, notrace:'$meta_call'/5+con+3, nodebug:'$meta_call'/5+con+4, nospyall:'$meta_call'/5+con+5, !:'$meta_call'/5+con+6]).
'$meta_call'/5+con+0 :
        try('$meta_call'/5+1, '$meta_call'/5+con+0+1).
'$meta_call'/5+con+0+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+con+0+2).
'$meta_call'/5+con+0+2 :
        retry('$meta_call'/5+3, '$meta_call'/5+con+0+3).
'$meta_call'/5+con+0+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+con+0+4).
'$meta_call'/5+con+0+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+con+1 :
        try('$meta_call'/5+1, '$meta_call'/5+con+1+1).
'$meta_call'/5+con+1+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+con+1+2).
'$meta_call'/5+con+1+2 :
        retry('$meta_call'/5+4, '$meta_call'/5+con+1+3).
'$meta_call'/5+con+1+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+con+1+4).
'$meta_call'/5+con+1+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+con+2 :
        try('$meta_call'/5+1, '$meta_call'/5+con+2+1).
'$meta_call'/5+con+2+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+con+2+2).
'$meta_call'/5+con+2+2 :
        retry('$meta_call'/5+5, '$meta_call'/5+con+2+3).
'$meta_call'/5+con+2+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+con+2+4).
'$meta_call'/5+con+2+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+con+3 :
        try('$meta_call'/5+1, '$meta_call'/5+con+3+1).
'$meta_call'/5+con+3+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+con+3+2).
'$meta_call'/5+con+3+2 :
        retry('$meta_call'/5+6, '$meta_call'/5+con+3+3).
'$meta_call'/5+con+3+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+con+3+4).
'$meta_call'/5+con+3+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+con+4 :
        try('$meta_call'/5+1, '$meta_call'/5+con+4+1).
'$meta_call'/5+con+4+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+con+4+2).
'$meta_call'/5+con+4+2 :
        retry('$meta_call'/5+7, '$meta_call'/5+con+4+3).
'$meta_call'/5+con+4+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+con+4+4).
'$meta_call'/5+con+4+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+con+5 :
        try('$meta_call'/5+1, '$meta_call'/5+con+5+1).
'$meta_call'/5+con+5+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+con+5+2).
'$meta_call'/5+con+5+2 :
        retry('$meta_call'/5+10, '$meta_call'/5+con+5+3).
'$meta_call'/5+con+5+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+con+5+4).
'$meta_call'/5+con+5+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+con+6 :
        try('$meta_call'/5+1, '$meta_call'/5+con+6+1).
'$meta_call'/5+con+6+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+con+6+2).
'$meta_call'/5+con+6+2 :
        retry('$meta_call'/5+15, '$meta_call'/5+con+6+3).
'$meta_call'/5+con+6+3 :
        retry('$meta_call'/5+16, '$meta_call'/5+con+6+4).
'$meta_call'/5+con+6+4 :
        retry('$meta_call'/5+36, '$meta_call'/5+con+6+5).
'$meta_call'/5+con+6+5 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str :
        switch_on_hash(str, 23, '$meta_call'/5+int, [spy/1:'$meta_call'/5+str+0, nospy/1:'$meta_call'/5+str+1, leash/1:'$meta_call'/5+str+2, ^ / 2:'$meta_call'/5+str+3, (:)/2:'$meta_call'/5+str+4, (',')/2:'$meta_call'/5+str+5, (->)/2:'$meta_call'/5+str+6, (;)/2:'$meta_call'/5+str+7, (\+)/1:'$meta_call'/5+str+8, findall/3:'$meta_call'/5+str+9, bagof/3:'$meta_call'/5+str+10, setof/3:'$meta_call'/5+str+11, once/1:'$meta_call'/5+str+12, on_exception/3:'$meta_call'/5+str+13, catch/3:'$meta_call'/5+str+14, synchronized/2:'$meta_call'/5+str+15, clause/2:'$meta_call'/5+str+16, assert/1:'$meta_call'/5+str+17, assertz/1:'$meta_call'/5+str+18, asserta/1:'$meta_call'/5+str+19, retract/1:'$meta_call'/5+str+20, abolish/1:'$meta_call'/5+str+21, retractall/1:'$meta_call'/5+str+22]).
'$meta_call'/5+str+0 :
        try('$meta_call'/5+1, '$meta_call'/5+str+0+1).
'$meta_call'/5+str+0+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+0+2).
'$meta_call'/5+str+0+2 :
        retry('$meta_call'/5+8, '$meta_call'/5+str+0+3).
'$meta_call'/5+str+0+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+0+4).
'$meta_call'/5+str+0+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+1 :
        try('$meta_call'/5+1, '$meta_call'/5+str+1+1).
'$meta_call'/5+str+1+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+1+2).
'$meta_call'/5+str+1+2 :
        retry('$meta_call'/5+9, '$meta_call'/5+str+1+3).
'$meta_call'/5+str+1+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+1+4).
'$meta_call'/5+str+1+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+2 :
        try('$meta_call'/5+1, '$meta_call'/5+str+2+1).
'$meta_call'/5+str+2+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+2+2).
'$meta_call'/5+str+2+2 :
        retry('$meta_call'/5+11, '$meta_call'/5+str+2+3).
'$meta_call'/5+str+2+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+2+4).
'$meta_call'/5+str+2+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+3 :
        try('$meta_call'/5+1, '$meta_call'/5+str+3+1).
'$meta_call'/5+str+3+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+3+2).
'$meta_call'/5+str+3+2 :
        retry('$meta_call'/5+13, '$meta_call'/5+str+3+3).
'$meta_call'/5+str+3+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+3+4).
'$meta_call'/5+str+3+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+4 :
        try('$meta_call'/5+1, '$meta_call'/5+str+4+1).
'$meta_call'/5+str+4+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+4+2).
'$meta_call'/5+str+4+2 :
        retry('$meta_call'/5+14, '$meta_call'/5+str+4+3).
'$meta_call'/5+str+4+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+4+4).
'$meta_call'/5+str+4+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+5 :
        try('$meta_call'/5+1, '$meta_call'/5+str+5+1).
'$meta_call'/5+str+5+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+5+2).
'$meta_call'/5+str+5+2 :
        retry('$meta_call'/5+17, '$meta_call'/5+str+5+3).
'$meta_call'/5+str+5+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+5+4).
'$meta_call'/5+str+5+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+6 :
        try('$meta_call'/5+1, '$meta_call'/5+str+6+1).
'$meta_call'/5+str+6+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+6+2).
'$meta_call'/5+str+6+2 :
        retry('$meta_call'/5+19, '$meta_call'/5+str+6+3).
'$meta_call'/5+str+6+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+6+4).
'$meta_call'/5+str+6+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+7 :
        try('$meta_call'/5+1, '$meta_call'/5+str+7+1).
'$meta_call'/5+str+7+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+7+2).
'$meta_call'/5+str+7+2 :
        retry('$meta_call'/5+18, '$meta_call'/5+str+7+3).
'$meta_call'/5+str+7+3 :
        retry('$meta_call'/5+20, '$meta_call'/5+str+7+4).
'$meta_call'/5+str+7+4 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+7+5).
'$meta_call'/5+str+7+5 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+8 :
        try('$meta_call'/5+1, '$meta_call'/5+str+8+1).
'$meta_call'/5+str+8+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+8+2).
'$meta_call'/5+str+8+2 :
        retry('$meta_call'/5+21, '$meta_call'/5+str+8+3).
'$meta_call'/5+str+8+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+8+4).
'$meta_call'/5+str+8+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+9 :
        try('$meta_call'/5+1, '$meta_call'/5+str+9+1).
'$meta_call'/5+str+9+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+9+2).
'$meta_call'/5+str+9+2 :
        retry('$meta_call'/5+22, '$meta_call'/5+str+9+3).
'$meta_call'/5+str+9+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+9+4).
'$meta_call'/5+str+9+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+10 :
        try('$meta_call'/5+1, '$meta_call'/5+str+10+1).
'$meta_call'/5+str+10+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+10+2).
'$meta_call'/5+str+10+2 :
        retry('$meta_call'/5+23, '$meta_call'/5+str+10+3).
'$meta_call'/5+str+10+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+10+4).
'$meta_call'/5+str+10+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+11 :
        try('$meta_call'/5+1, '$meta_call'/5+str+11+1).
'$meta_call'/5+str+11+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+11+2).
'$meta_call'/5+str+11+2 :
        retry('$meta_call'/5+24, '$meta_call'/5+str+11+3).
'$meta_call'/5+str+11+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+11+4).
'$meta_call'/5+str+11+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+12 :
        try('$meta_call'/5+1, '$meta_call'/5+str+12+1).
'$meta_call'/5+str+12+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+12+2).
'$meta_call'/5+str+12+2 :
        retry('$meta_call'/5+25, '$meta_call'/5+str+12+3).
'$meta_call'/5+str+12+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+12+4).
'$meta_call'/5+str+12+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+13 :
        try('$meta_call'/5+1, '$meta_call'/5+str+13+1).
'$meta_call'/5+str+13+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+13+2).
'$meta_call'/5+str+13+2 :
        retry('$meta_call'/5+26, '$meta_call'/5+str+13+3).
'$meta_call'/5+str+13+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+13+4).
'$meta_call'/5+str+13+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+14 :
        try('$meta_call'/5+1, '$meta_call'/5+str+14+1).
'$meta_call'/5+str+14+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+14+2).
'$meta_call'/5+str+14+2 :
        retry('$meta_call'/5+27, '$meta_call'/5+str+14+3).
'$meta_call'/5+str+14+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+14+4).
'$meta_call'/5+str+14+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+15 :
        try('$meta_call'/5+1, '$meta_call'/5+str+15+1).
'$meta_call'/5+str+15+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+15+2).
'$meta_call'/5+str+15+2 :
        retry('$meta_call'/5+28, '$meta_call'/5+str+15+3).
'$meta_call'/5+str+15+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+15+4).
'$meta_call'/5+str+15+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+16 :
        try('$meta_call'/5+1, '$meta_call'/5+str+16+1).
'$meta_call'/5+str+16+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+16+2).
'$meta_call'/5+str+16+2 :
        retry('$meta_call'/5+29, '$meta_call'/5+str+16+3).
'$meta_call'/5+str+16+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+16+4).
'$meta_call'/5+str+16+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+17 :
        try('$meta_call'/5+1, '$meta_call'/5+str+17+1).
'$meta_call'/5+str+17+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+17+2).
'$meta_call'/5+str+17+2 :
        retry('$meta_call'/5+30, '$meta_call'/5+str+17+3).
'$meta_call'/5+str+17+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+17+4).
'$meta_call'/5+str+17+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+18 :
        try('$meta_call'/5+1, '$meta_call'/5+str+18+1).
'$meta_call'/5+str+18+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+18+2).
'$meta_call'/5+str+18+2 :
        retry('$meta_call'/5+31, '$meta_call'/5+str+18+3).
'$meta_call'/5+str+18+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+18+4).
'$meta_call'/5+str+18+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+19 :
        try('$meta_call'/5+1, '$meta_call'/5+str+19+1).
'$meta_call'/5+str+19+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+19+2).
'$meta_call'/5+str+19+2 :
        retry('$meta_call'/5+32, '$meta_call'/5+str+19+3).
'$meta_call'/5+str+19+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+19+4).
'$meta_call'/5+str+19+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+20 :
        try('$meta_call'/5+1, '$meta_call'/5+str+20+1).
'$meta_call'/5+str+20+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+20+2).
'$meta_call'/5+str+20+2 :
        retry('$meta_call'/5+33, '$meta_call'/5+str+20+3).
'$meta_call'/5+str+20+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+20+4).
'$meta_call'/5+str+20+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+21 :
        try('$meta_call'/5+1, '$meta_call'/5+str+21+1).
'$meta_call'/5+str+21+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+21+2).
'$meta_call'/5+str+21+2 :
        retry('$meta_call'/5+34, '$meta_call'/5+str+21+3).
'$meta_call'/5+str+21+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+21+4).
'$meta_call'/5+str+21+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+str+22 :
        try('$meta_call'/5+1, '$meta_call'/5+str+22+1).
'$meta_call'/5+str+22+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+str+22+2).
'$meta_call'/5+str+22+2 :
        retry('$meta_call'/5+35, '$meta_call'/5+str+22+3).
'$meta_call'/5+str+22+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+str+22+4).
'$meta_call'/5+str+22+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+lis :
        try('$meta_call'/5+1, '$meta_call'/5+lis+1).
'$meta_call'/5+lis+1 :
        retry('$meta_call'/5+2, '$meta_call'/5+lis+2).
'$meta_call'/5+lis+2 :
        retry('$meta_call'/5+12, '$meta_call'/5+lis+3).
'$meta_call'/5+lis+3 :
        retry('$meta_call'/5+36, '$meta_call'/5+lis+4).
'$meta_call'/5+lis+4 :
        trust('$meta_call'/5+37).
'$meta_call'/5+1 :
        comment(('$meta_call'(A, B, C, D, E):-var(A), !, illarg(var, call(A), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, call(A), 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(1))).
        inline('$cut'(a(6))).
        put_str_args([a(1)], y(1)).
        put_str(s(2), y(1), a(7)).
        execute(illarg(s(1), a(7), si(3), cont)).
'$meta_call'/5+2 :
        comment(('$meta_call'(A, B, C, D, E):-closure(A), !, '$call_closure'(A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(A, B, C, D, E):-['$get_level'(F), closure(A), '$cut'(F), '$call_closure'(A)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(closure(a(1))).
        inline('$cut'(a(6))).
        execute('$call_closure'(a(1), cont)).
'$meta_call'/5+3 :
        comment(('$meta_call'(true, A, B, C, D):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(true, A, B, C, D):-['$neck_cut'])).
        get_con(true, s(4), a(1)).
        inline('$neck_cut').
        execute(cont).
'$meta_call'/5+4 :
        comment(('$meta_call'(trace, A, B, C, D):-!, trace)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(trace, A, B, C, D):-['$neck_cut', trace])).
        get_con(trace, s(5), a(1)).
        inline('$neck_cut').
        execute(trace(cont)).
'$meta_call'/5+5 :
        comment(('$meta_call'(debug, A, B, C, D):-!, debug)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(debug, A, B, C, D):-['$neck_cut', debug])).
        get_con(debug, s(6), a(1)).
        inline('$neck_cut').
        execute(debug(cont)).
'$meta_call'/5+6 :
        comment(('$meta_call'(notrace, A, B, C, D):-!, notrace)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(notrace, A, B, C, D):-['$neck_cut', notrace])).
        get_con(notrace, s(7), a(1)).
        inline('$neck_cut').
        execute(notrace(cont)).
'$meta_call'/5+7 :
        comment(('$meta_call'(nodebug, A, B, C, D):-!, nodebug)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(nodebug, A, B, C, D):-['$neck_cut', nodebug])).
        get_con(nodebug, s(8), a(1)).
        inline('$neck_cut').
        execute(nodebug(cont)).
'$meta_call'/5+8 :
        comment(('$meta_call'(spy(A), B, C, D, E):-!, spy(A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(spy(A), B, C, D, E):-['$neck_cut', spy(A)])).
        get_str(spy/1, s(9), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        execute(spy(a(6), cont)).
'$meta_call'/5+9 :
        comment(('$meta_call'(nospy(A), B, C, D, E):-!, nospy(A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(nospy(A), B, C, D, E):-['$neck_cut', nospy(A)])).
        get_str(nospy/1, s(10), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        execute(nospy(a(6), cont)).
'$meta_call'/5+10 :
        comment(('$meta_call'(nospyall, A, B, C, D):-!, nospyall)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(nospyall, A, B, C, D):-['$neck_cut', nospyall])).
        get_con(nospyall, s(11), a(1)).
        inline('$neck_cut').
        execute(nospyall(cont)).
'$meta_call'/5+11 :
        comment(('$meta_call'(leash(A), B, C, D, E):-!, leash(A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(leash(A), B, C, D, E):-['$neck_cut', leash(A)])).
        get_str(leash/1, s(12), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        execute(leash(a(6), cont)).
'$meta_call'/5+12 :
        comment(('$meta_call'([A|B], C, D, E, F):-!, consult([A|B]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'([A|B], C, D, E, F):-['$neck_cut', consult([A|B])])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_list(a(6), a(7), a(8)).
        execute(consult(a(8), cont)).
'$meta_call'/5+13 :
        comment(('$meta_call'(A^B, C, D, E, F):-!, '$meta_call'(B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(A^B, C, D, E, F):-['$neck_cut', '$meta_call'(B, C, D, E, F)])).
        get_str(^ / 2, s(13), a(1)).
        unify_void(1).
        unify_var(a(6)).
        inline('$neck_cut').
        set(a(6), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$meta_call'/5+top).
'$meta_call'/5+14 :
        comment(('$meta_call'(A:B, C, D, E, F):-!, '$meta_call'(B, A, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(A:B, C, D, E, F):-['$neck_cut', '$meta_call'(B, A, D, E, F)])).
        get_str((:)/2, s(14), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        set(a(7), ea(1)).
        set(a(6), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$meta_call'/5+top).
'$meta_call'/5+15 :
        comment(('$meta_call'(!, A, no, B, C):-!, illarg(context(if, cut), !, 0))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(!, A, no, B, C):-['$neck_cut', illarg(context(if, cut), !, 0)])).
        get_con(!, s(15), a(1)).
        get_con(no, s(16), a(3)).
        inline('$neck_cut').
        execute(illarg(s(21), s(15), si(22), cont)).
'$meta_call'/5+16 :
        comment(('$meta_call'(!, A, B, C, D):-!, '$cut'(B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(!, A, B, C, D):-['$neck_cut', '$cut'(B)])).
        get_con(!, s(15), a(1)).
        inline('$neck_cut').
        inline('$cut'(a(3))).
        execute(cont).
'$meta_call'/5+17 :
        comment(('$meta_call'((A, B), C, D, E, F):-!, '$meta_call'(A, C, D, E, F), '$meta_call'(B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'((A, B), C, D, E, F):-['$neck_cut', '$meta_call'(A, C, D, E, F), '$meta_call'(B, C, D, E, F)])).
        get_str((',')/2, s(23), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_cont('$meta_call'(a(7), a(2), a(3), a(4), a(5), cont), p(1)).
        set(a(6), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(p(1), econt).
        goto('$meta_call'/5+top).
'$meta_call'/5+18 :
        comment(('$meta_call'((A->B;C), D, E, F, G):-!, '$dummy_0_builtins.pl'(A, B, C, D, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'((A->B;C), D, E, F, G):-['$neck_cut', '$dummy_0_builtins.pl'(A, B, C, D, E, F, G)])).
        get_str((;)/2, s(24), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((->)/2, s(25), a(6)).
        unify_var(a(8)).
        unify_var(a(9)).
        inline('$neck_cut').
        execute('$dummy_0_builtins.pl'(a(8), a(9), a(7), a(2), a(3), a(4), a(5), cont)).
'$meta_call'/5+19 :
        comment(('$meta_call'((A->B), C, D, E, F):-!, '$dummy_1_builtins.pl'(A, B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'((A->B), C, D, E, F):-['$neck_cut', '$dummy_1_builtins.pl'(A, B, C, D, E, F)])).
        get_str((->)/2, s(25), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        execute('$dummy_1_builtins.pl'(a(6), a(7), a(2), a(3), a(4), a(5), cont)).
'$meta_call'/5+20 :
        comment(('$meta_call'((A;B), C, D, E, F):-!, '$dummy_2_builtins.pl'(A, B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'((A;B), C, D, E, F):-['$neck_cut', '$dummy_2_builtins.pl'(A, B, C, D, E, F)])).
        get_str((;)/2, s(24), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        execute('$dummy_2_builtins.pl'(a(6), a(7), a(2), a(3), a(4), a(5), cont)).
'$meta_call'/5+21 :
        comment(('$meta_call'(\+A, B, C, D, E):-!, '$dummy_3_builtins.pl'(A, B, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(\+A, B, C, D, E):-['$neck_cut', '$dummy_3_builtins.pl'(A, B, D, E)])).
        get_str((\+)/1, s(26), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        execute('$dummy_3_builtins.pl'(a(6), a(2), a(4), a(5), cont)).
'$meta_call'/5+22 :
        comment(('$meta_call'(findall(A, B, C), D, E, F, G):-!, findall(A, '$meta_call'(B, D, E, F, G), C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(findall(A, B, C), D, E, F, G):-['$neck_cut', findall(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), C)])).
        get_str(findall/3, s(27), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        inline('$neck_cut').
        put_clo('$meta_call'(a(7), a(2), a(3), a(4), a(5)), a(9)).
        execute(findall(a(6), a(9), a(8), cont)).
'$meta_call'/5+23 :
        comment(('$meta_call'(bagof(A, B, C), D, E, F, G):-!, bagof(A, '$meta_call'(B, D, E, F, G), C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(bagof(A, B, C), D, E, F, G):-['$neck_cut', bagof(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), C)])).
        get_str(bagof/3, s(28), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        inline('$neck_cut').
        put_clo('$meta_call'(a(7), a(2), a(3), a(4), a(5)), a(9)).
        execute(bagof(a(6), a(9), a(8), cont)).
'$meta_call'/5+24 :
        comment(('$meta_call'(setof(A, B, C), D, E, F, G):-!, setof(A, '$meta_call'(B, D, E, F, G), C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(setof(A, B, C), D, E, F, G):-['$neck_cut', setof(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), C)])).
        get_str(setof/3, s(29), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        inline('$neck_cut').
        put_clo('$meta_call'(a(7), a(2), a(3), a(4), a(5)), a(9)).
        execute(setof(a(6), a(9), a(8), cont)).
'$meta_call'/5+25 :
        comment(('$meta_call'(once(A), B, C, D, E):-!, once('$meta_call'(A, B, C, D, E)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(once(A), B, C, D, E):-['$neck_cut', once('jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(A, B, C, D, E))])).
        get_str(once/1, s(30), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_clo('$meta_call'(a(6), a(2), a(3), a(4), a(5)), a(7)).
        execute(once(a(7), cont)).
'$meta_call'/5+26 :
        comment(('$meta_call'(on_exception(A, B, C), D, E, F, G):-!, on_exception(A, '$meta_call'(B, D, E, F, G), '$meta_call'(C, D, E, F, G)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(on_exception(A, B, C), D, E, F, G):-['$neck_cut', on_exception(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, D, E, F, G), 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(C, D, E, F, G))])).
        get_str(on_exception/3, s(31), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        inline('$neck_cut').
        put_clo('$meta_call'(a(7), a(2), a(3), a(4), a(5)), a(9)).
        put_clo('$meta_call'(a(8), a(2), a(3), a(4), a(5)), a(10)).
        execute(on_exception(a(6), a(9), a(10), cont)).
'$meta_call'/5+27 :
        comment(('$meta_call'(catch(A, B, C), D, E, F, G):-!, catch('$meta_call'(A, D, E, F, G), B, '$meta_call'(C, D, E, F, G)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(catch(A, B, C), D, E, F, G):-['$neck_cut', catch('jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(A, D, E, F, G), B, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(C, D, E, F, G))])).
        get_str(catch/3, s(32), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        inline('$neck_cut').
        put_clo('$meta_call'(a(6), a(2), a(3), a(4), a(5)), a(9)).
        put_clo('$meta_call'(a(8), a(2), a(3), a(4), a(5)), a(10)).
        execute(catch(a(9), a(7), a(10), cont)).
'$meta_call'/5+28 :
        comment(('$meta_call'(synchronized(A, B), C, D, E, F):-!, synchronized(A, '$meta_call'(B, C, D, E, F)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(synchronized(A, B), C, D, E, F):-['$neck_cut', synchronized(A, 'jp.ac.kobe_u.cs.prolog.builtin':'$meta_call'(B, C, D, E, F))])).
        get_str(synchronized/2, s(33), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_clo('$meta_call'(a(7), a(2), a(3), a(4), a(5)), a(8)).
        execute(synchronized(a(6), a(8), cont)).
'$meta_call'/5+29 :
        comment(('$meta_call'(clause(A, B), C, D, E, F):-!, clause(C:A, B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(clause(A, B), C, D, E, F):-['$neck_cut', clause(C:A, B)])).
        get_str(clause/2, s(34), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_str_args([a(2), a(6)], y(1)).
        put_str(s(14), y(1), a(8)).
        execute(clause(a(8), a(7), cont)).
'$meta_call'/5+30 :
        comment(('$meta_call'(assert(A), B, C, D, E):-!, assertz(B:A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(assert(A), B, C, D, E):-['$neck_cut', assertz(B:A)])).
        get_str(assert/1, s(35), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_str_args([a(2), a(6)], y(1)).
        put_str(s(14), y(1), a(7)).
        execute(assertz(a(7), cont)).
'$meta_call'/5+31 :
        comment(('$meta_call'(assertz(A), B, C, D, E):-!, assertz(B:A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(assertz(A), B, C, D, E):-['$neck_cut', assertz(B:A)])).
        get_str(assertz/1, s(36), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_str_args([a(2), a(6)], y(1)).
        put_str(s(14), y(1), a(7)).
        execute(assertz(a(7), cont)).
'$meta_call'/5+32 :
        comment(('$meta_call'(asserta(A), B, C, D, E):-!, asserta(B:A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(asserta(A), B, C, D, E):-['$neck_cut', asserta(B:A)])).
        get_str(asserta/1, s(37), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_str_args([a(2), a(6)], y(1)).
        put_str(s(14), y(1), a(7)).
        execute(asserta(a(7), cont)).
'$meta_call'/5+33 :
        comment(('$meta_call'(retract(A), B, C, D, E):-!, retract(B:A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(retract(A), B, C, D, E):-['$neck_cut', retract(B:A)])).
        get_str(retract/1, s(38), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_str_args([a(2), a(6)], y(1)).
        put_str(s(14), y(1), a(7)).
        execute(retract(a(7), cont)).
'$meta_call'/5+34 :
        comment(('$meta_call'(abolish(A), B, C, D, E):-!, abolish(B:A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(abolish(A), B, C, D, E):-['$neck_cut', abolish(B:A)])).
        get_str(abolish/1, s(39), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_str_args([a(2), a(6)], y(1)).
        put_str(s(14), y(1), a(7)).
        execute(abolish(a(7), cont)).
'$meta_call'/5+35 :
        comment(('$meta_call'(retractall(A), B, C, D, E):-!, retractall(B:A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(retractall(A), B, C, D, E):-['$neck_cut', retractall(B:A)])).
        get_str(retractall/1, s(40), a(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_str_args([a(2), a(6)], y(1)).
        put_str(s(14), y(1), a(7)).
        execute(retractall(a(7), cont)).
'$meta_call'/5+36 :
        comment(('$meta_call'(A, B, C, D, E):-atom(B), callable(A), !, '$meta_call'(E, D, B, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(A, B, C, D, E):-['$get_level'(F), atom(B), callable(A), '$cut'(F), '$meta_call'(E, D, B, A)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(atom(a(2))).
        put_cont('$meta_call'(a(5), a(4), a(2), a(1), cont), p(1)).
        put_cont('$cut'(a(6), p(1)), p(2)).
        execute(callable(a(1), p(2))).
'$meta_call'/5+37 :
        comment(('$meta_call'(A, B, C, D, E):-illarg(type(callable), call(B:A), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$meta_call'(A, B, C, D, E):-[illarg(type(callable), call(B:A), 1)])).
        put_str_args([a(2), a(1)], y(1)).
        put_str(s(14), y(1), a(6)).
        put_str_args([a(6)], y(2)).
        put_str(s(2), y(2), a(7)).
        execute(illarg(s(44), a(7), si(3), cont)).
end_predicate('$meta_call'/5).

begin_predicate('$dummy_0_builtins.pl'/7).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_0_builtins.pl'/7, 'builtins.pl']).
main('$dummy_0_builtins.pl'/7, non- (public)) :
        put_con(no, s(1)).
        label('$dummy_0_builtins.pl'/7+sub+1).
        label('$dummy_0_builtins.pl'/7+1).
        label('$dummy_0_builtins.pl'/7+2).
'$dummy_0_builtins.pl'/7 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(cont, econt).
        setB0.
        try('$dummy_0_builtins.pl'/7+1, '$dummy_0_builtins.pl'/7+sub+1).
'$dummy_0_builtins.pl'/7+sub+1 :
        trust('$dummy_0_builtins.pl'/7+2).
'$dummy_0_builtins.pl'/7+1 :
        comment(('$dummy_0_builtins.pl'(A, B, C, D, E, F, G):-'$meta_call'(A, D, no, F, G), !, '$meta_call'(B, D, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(econt, cont).
        comment(('$dummy_0_builtins.pl'(A, B, C, D, E, F, G):-['$get_level'(H), '$meta_call'(A, D, no, F, G), '$cut'(H), '$meta_call'(B, D, E, F, G)])).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        put_cont('$meta_call'(a(2), a(4), a(5), a(6), a(7), cont), p(1)).
        put_cont('$cut'(a(8), p(1)), p(2)).
        execute('$meta_call'(a(1), a(4), s(1), a(6), a(7), p(2))).
'$dummy_0_builtins.pl'/7+2 :
        comment(('$dummy_0_builtins.pl'(A, B, C, D, E, F, G):-'$meta_call'(C, D, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(econt, cont).
        comment(('$dummy_0_builtins.pl'(A, B, C, D, E, F, G):-['$meta_call'(C, D, E, F, G)])).
        execute('$meta_call'(a(3), a(4), a(5), a(6), a(7), cont)).
end_predicate('$dummy_0_builtins.pl'/7).

begin_predicate('$dummy_1_builtins.pl'/6).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_1_builtins.pl'/6, 'builtins.pl']).
main('$dummy_1_builtins.pl'/6, non- (public)) :
        put_con(no, s(1)).
        label('$dummy_1_builtins.pl'/6+sub+1).
        label('$dummy_1_builtins.pl'/6+1).
        label('$dummy_1_builtins.pl'/6+2).
'$dummy_1_builtins.pl'/6 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(cont, econt).
        setB0.
        try('$dummy_1_builtins.pl'/6+1, '$dummy_1_builtins.pl'/6+sub+1).
'$dummy_1_builtins.pl'/6+sub+1 :
        trust('$dummy_1_builtins.pl'/6+2).
'$dummy_1_builtins.pl'/6+1 :
        comment(('$dummy_1_builtins.pl'(A, B, C, D, E, F):-'$meta_call'(A, C, no, E, F), !, '$meta_call'(B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_1_builtins.pl'(A, B, C, D, E, F):-['$get_level'(G), '$meta_call'(A, C, no, E, F), '$cut'(G), '$meta_call'(B, C, D, E, F)])).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_cont('$meta_call'(a(2), a(3), a(4), a(5), a(6), cont), p(1)).
        put_cont('$cut'(a(7), p(1)), p(2)).
        execute('$meta_call'(a(1), a(3), s(1), a(5), a(6), p(2))).
'$dummy_1_builtins.pl'/6+2 :
        comment(('$dummy_1_builtins.pl'(A, B, C, D, E, F):-fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_1_builtins.pl'(A, B, C, D, E, F):-[fail])).
        inline(fail).
end_predicate('$dummy_1_builtins.pl'/6).

begin_predicate('$dummy_2_builtins.pl'/6).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_2_builtins.pl'/6, 'builtins.pl']).
main('$dummy_2_builtins.pl'/6, non- (public)) :
        label('$dummy_2_builtins.pl'/6+sub+1).
        label('$dummy_2_builtins.pl'/6+1).
        label('$dummy_2_builtins.pl'/6+2).
'$dummy_2_builtins.pl'/6 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(cont, econt).
        setB0.
        try('$dummy_2_builtins.pl'/6+1, '$dummy_2_builtins.pl'/6+sub+1).
'$dummy_2_builtins.pl'/6+sub+1 :
        trust('$dummy_2_builtins.pl'/6+2).
'$dummy_2_builtins.pl'/6+1 :
        comment(('$dummy_2_builtins.pl'(A, B, C, D, E, F):-'$meta_call'(A, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_2_builtins.pl'(A, B, C, D, E, F):-['$meta_call'(A, C, D, E, F)])).
        execute('$meta_call'(a(1), a(3), a(4), a(5), a(6), cont)).
'$dummy_2_builtins.pl'/6+2 :
        comment(('$dummy_2_builtins.pl'(A, B, C, D, E, F):-'$meta_call'(B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_2_builtins.pl'(A, B, C, D, E, F):-['$meta_call'(B, C, D, E, F)])).
        execute('$meta_call'(a(2), a(3), a(4), a(5), a(6), cont)).
end_predicate('$dummy_2_builtins.pl'/6).

begin_predicate('$dummy_3_builtins.pl'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_3_builtins.pl'/4, 'builtins.pl']).
main('$dummy_3_builtins.pl'/4, non- (public)) :
        put_con(no, s(1)).
        label('$dummy_3_builtins.pl'/4+sub+1).
        label('$dummy_3_builtins.pl'/4+1).
        label('$dummy_3_builtins.pl'/4+2).
'$dummy_3_builtins.pl'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        try('$dummy_3_builtins.pl'/4+1, '$dummy_3_builtins.pl'/4+sub+1).
'$dummy_3_builtins.pl'/4+sub+1 :
        trust('$dummy_3_builtins.pl'/4+2).
'$dummy_3_builtins.pl'/4+1 :
        comment(('$dummy_3_builtins.pl'(A, B, C, D):-'$meta_call'(A, B, no, C, D), !, fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dummy_3_builtins.pl'(A, B, C, D):-['$get_level'(E), '$meta_call'(A, B, no, C, D), '$cut'(E), fail])).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_cont(fail(cont), p(1)).
        put_cont('$cut'(a(5), p(1)), p(2)).
        execute('$meta_call'(a(1), a(2), s(1), a(3), a(4), p(2))).
'$dummy_3_builtins.pl'/4+2 :
        comment(('$dummy_3_builtins.pl'(A, B, C, D):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dummy_3_builtins.pl'(A, B, C, D):-[])).
        execute(cont).
end_predicate('$dummy_3_builtins.pl'/4).

begin_predicate('$meta_call'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$meta_call'/4, 'builtins.pl']).
main('$meta_call'/4, non- (public)) :
        put_con(trace, s(1)).
        put_con(/ / 2, s(2)).
        put_con(interpret, s(3)).
        label(fail/0).
        label('$meta_call'/4+var).
        label('$meta_call'/4+var+1).
        label('$meta_call'/4+con).
        label('$meta_call'/4+1).
        label('$meta_call'/4+2).
        new_hash(con, 2).
        static([put_hash(s(1), '$meta_call'/4+1, con), put_hash(s(3), '$meta_call'/4+2, con)]).
'$meta_call'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        switch_on_term('$meta_call'/4+var, fail/0, fail/0, '$meta_call'/4+con, fail/0, fail/0).
'$meta_call'/4+var :
        try('$meta_call'/4+1, '$meta_call'/4+var+1).
'$meta_call'/4+var+1 :
        trust('$meta_call'/4+2).
'$meta_call'/4+con :
        switch_on_hash(con, 2, fail/0, [trace:'$meta_call'/4+1, interpret:'$meta_call'/4+2]).
'$meta_call'/4+1 :
        comment(('$meta_call'(trace, A, B, C):-!, functor(C, D, E), '$trace_goal'(C, B, D/E, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$meta_call'(trace, A, B, C):-['$neck_cut', functor(C, D, E), '$trace_goal'(C, B, D/E, A)])).
        get_con(trace, s(1), a(1)).
        inline('$neck_cut').
        put_var(a(5)).
        put_var(a(6)).
        put_str_args([a(5), a(6)], y(1)).
        put_str(s(2), y(1), a(7)).
        put_cont('$trace_goal'(a(4), a(3), a(7), a(2), cont), p(1)).
        execute(functor(a(4), a(5), a(6), p(1))).
'$meta_call'/4+2 :
        comment(('$meta_call'(interpret, A, B, C):-functor(C, D, E), '$call_internal'(C, B, D/E, A, interpret))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$meta_call'(interpret, A, B, C):-[functor(C, D, E), '$call_internal'(C, B, D/E, A, interpret)])).
        get_con(interpret, s(3), a(1)).
        put_var(a(5)).
        put_var(a(6)).
        put_str_args([a(5), a(6)], y(1)).
        put_str(s(2), y(1), a(7)).
        put_cont('$call_internal'(a(4), a(3), a(7), a(2), s(3), cont), p(1)).
        execute(functor(a(4), a(5), a(6), p(1))).
end_predicate('$meta_call'/4).

begin_predicate('$call_internal'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$call_internal'/5, 'builtins.pl']).
main('$call_internal'/5, non- (public)) :
        put_int(1, si(1)).
        put_con((:)/2, s(2)).
        label('$call_internal'/5+sub+1).
        label('$call_internal'/5+1).
        label('$call_internal'/5+2).
'$call_internal'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$call_internal'/5+1, '$call_internal'/5+sub+1).
'$call_internal'/5+sub+1 :
        trust('$call_internal'/5+2).
'$call_internal'/5+1 :
        comment(('$call_internal'(A, B, C, D, E):-'$new_internal_database'(B), hash_contains_key(B, C), !, '$get_level'(F), G is D+1, clause(B:A, H), '$meta_call'(H, B, F, G, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$call_internal'(A, B, C, D, E):-['$get_level'(F), '$new_internal_database'(B), hash_contains_key(B, C), '$cut'(F), '$get_level'(G), '$plus'(D, 1, H), clause(B:A, I), '$meta_call'(I, B, G, H, E)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_var(a(7)).
        put_var(a(8)).
        put_str_args([a(2), a(1)], y(1)).
        put_str(s(2), y(1), a(9)).
        put_var(a(10)).
        put_cont('$meta_call'(a(10), a(2), a(7), a(8), a(5), cont), p(1)).
        put_cont(clause(a(9), a(10), p(1)), p(2)).
        put_cont('$plus'(a(4), si(1), a(8), p(2)), p(3)).
        put_cont('$get_level'(a(7), p(3)), p(4)).
        put_cont('$cut'(a(6), p(4)), p(5)).
        put_cont(hash_contains_key(a(2), a(3), p(5)), p(6)).
        execute('$new_internal_database'(a(2), p(6))).
'$call_internal'/5+2 :
        comment(('$call_internal'(A, B, C, D, E):-'$call'(B, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$call_internal'(A, B, C, D, E):-['$call'(B, A)])).
        execute('$call'(a(2), a(1), cont)).
end_predicate('$call_internal'/5).

begin_predicate(catch/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([catch/3, 'builtins.pl']).
main(catch/3, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
catch/3 :
        comment((catch(A, B, C):-on_exception(B, A, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((catch(A, B, C):-[on_exception(B, 'jp.ac.kobe_u.cs.prolog.builtin':A, 'jp.ac.kobe_u.cs.prolog.builtin':C)])).
        put_str_args([s(2), a(1)], y(1)).
        put_str(s(1), y(1), a(4)).
        put_str_args([s(2), a(3)], y(2)).
        put_str(s(1), y(2), a(5)).
        execute(on_exception(a(2), a(4), a(5), cont)).
end_predicate(catch/3).

begin_predicate(throw/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([throw/1, 'builtins.pl']).
main(throw/1, (public)) :
throw/1 :
        comment((throw(A):-raise_exception(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((throw(A):-[raise_exception(A)])).
        execute(raise_exception(a(1), cont)).
end_predicate(throw/1).

begin_predicate(on_exception/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([on_exception/3, 'builtins.pl']).
main(on_exception/3, (public)) :
        put_con(type/1, s(1)).
        put_con(callable, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(on_exception/3, s(5)).
        put_int(2, si(6)).
        label(on_exception/3+sub+1).
        label(on_exception/3+1).
        label(on_exception/3+2).
on_exception/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try(on_exception/3+1, on_exception/3+sub+1).
on_exception/3+sub+1 :
        trust(on_exception/3+2).
on_exception/3+1 :
        comment((on_exception(A, B, C):-callable(B), !, '$on_exception'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((on_exception(A, B, C):-['$get_level'(D), callable(B), '$cut'(D), '$on_exception'(A, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$on_exception'(a(1), a(2), a(3), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute(callable(a(2), p(2))).
on_exception/3+2 :
        comment((on_exception(A, B, C):-illarg(type(callable), on_exception(A, B, C), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((on_exception(A, B, C):-[illarg(type(callable), on_exception(A, B, C), 2)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(5), y(1), a(4)).
        execute(illarg(s(4), a(4), si(6), cont)).
end_predicate(on_exception/3).

begin_predicate('$on_exception'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$on_exception'/3, 'builtins.pl']).
main('$on_exception'/3, non- (public)) :
        put_con('$no_ball', s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        label('$on_exception'/3+sub+1).
        label('$on_exception'/3+1).
        label('$on_exception'/3+2).
'$on_exception'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$on_exception'/3+1, '$on_exception'/3+sub+1).
'$on_exception'/3+sub+1 :
        trust('$on_exception'/3+2).
'$on_exception'/3+1 :
        comment(('$on_exception'(A, B, C):-'$set_exception'('$no_ball'), '$begin_exception'(D), call(B), '$end_exception'(D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$on_exception'(A, B, C):-['$set_exception'('$no_ball'), '$begin_exception'(D), call('jp.ac.kobe_u.cs.prolog.builtin':B), '$end_exception'(D)])).
        put_var(a(4)).
        put_str_args([s(3), a(2)], y(1)).
        put_str(s(2), y(1), a(5)).
        put_cont('$end_exception'(a(4), cont), p(1)).
        put_cont(call(a(5), p(1)), p(2)).
        put_cont('$begin_exception'(a(4), p(2)), p(3)).
        execute('$set_exception'(s(1), p(3))).
'$on_exception'/3+2 :
        comment(('$on_exception'(A, B, C):-'$get_exception'(D), D\=='$no_ball', '$catch_and_throw'(D, A, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$on_exception'(A, B, C):-['$get_exception'(D), '$inequality_of_term'(D, '$no_ball'), '$catch_and_throw'(D, A, C)])).
        put_var(a(4)).
        put_cont('$catch_and_throw'(a(4), a(1), a(3), cont), p(1)).
        put_cont('$inequality_of_term'(a(4), s(1), p(1)), p(2)).
        execute('$get_exception'(a(4), p(2))).
end_predicate('$on_exception'/3).

begin_predicate('$catch_and_throw'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$catch_and_throw'/3, 'builtins.pl']).
main('$catch_and_throw'/3, non- (public)) :
        put_con('$no_ball', s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        label('$catch_and_throw'/3+sub+1).
        label('$catch_and_throw'/3+1).
        label('$catch_and_throw'/3+2).
'$catch_and_throw'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$catch_and_throw'/3+1, '$catch_and_throw'/3+sub+1).
'$catch_and_throw'/3+sub+1 :
        trust('$catch_and_throw'/3+2).
'$catch_and_throw'/3+1 :
        comment(('$catch_and_throw'(A, A, B):-!, '$set_exception'('$no_ball'), call(B))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$catch_and_throw'(A, A, B):-['$neck_cut', '$set_exception'('$no_ball'), call('jp.ac.kobe_u.cs.prolog.builtin':B)])).
        get_val(a(1), a(2)).
        inline('$neck_cut').
        put_str_args([s(3), a(3)], y(1)).
        put_str(s(2), y(1), a(4)).
        put_cont(call(a(4), cont), p(1)).
        execute('$set_exception'(s(1), p(1))).
'$catch_and_throw'/3+2 :
        comment(('$catch_and_throw'(A, B, C):-raise_exception(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$catch_and_throw'(A, B, C):-[raise_exception(A)])).
        execute(raise_exception(a(1), cont)).
end_predicate('$catch_and_throw'/3).

begin_predicate((=)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (=)/2, 'builtins.pl']).
main((=)/2, (public)) :
(=)/2 :
        comment((A=B:-A=B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A=B:-['$unify'(A, B)])).
        inline('$unify'(a(1), a(2))).
        execute(cont).
end_predicate((=)/2).

begin_predicate('$unify'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$unify'/2, 'builtins.pl']).
main('$unify'/2, (public)) :
'$unify'/2 :
        comment(('$unify'(A, B):-'$unify'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$unify'(A, B):-['$unify'(A, B)])).
        inline('$unify'(a(1), a(2))).
        execute(cont).
end_predicate('$unify'/2).

begin_predicate((\=)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (\=)/2, 'builtins.pl']).
main((\=)/2, (public)) :
(\=)/2 :
        comment((A\=B:-A\=B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A\=B:-['$not_unifiable'(A, B)])).
        inline('$not_unifiable'(a(1), a(2))).
        execute(cont).
end_predicate((\=)/2).

begin_predicate('$not_unifiable'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$not_unifiable'/2, 'builtins.pl']).
main('$not_unifiable'/2, (public)) :
'$not_unifiable'/2 :
        comment(('$not_unifiable'(A, B):-'$not_unifiable'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$not_unifiable'(A, B):-['$not_unifiable'(A, B)])).
        inline('$not_unifiable'(a(1), a(2))).
        execute(cont).
end_predicate('$not_unifiable'/2).

begin_predicate(var/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([var/1, 'builtins.pl']).
main(var/1, (public)) :
var/1 :
        comment((var(A):-var(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((var(A):-[var(A)])).
        inline(var(a(1))).
        execute(cont).
end_predicate(var/1).

begin_predicate(atom/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([atom/1, 'builtins.pl']).
main(atom/1, (public)) :
atom/1 :
        comment((atom(A):-atom(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((atom(A):-[atom(A)])).
        inline(atom(a(1))).
        execute(cont).
end_predicate(atom/1).

begin_predicate(integer/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([integer/1, 'builtins.pl']).
main(integer/1, (public)) :
integer/1 :
        comment((integer(A):-integer(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((integer(A):-[integer(A)])).
        inline(integer(a(1))).
        execute(cont).
end_predicate(integer/1).

begin_predicate(float/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([float/1, 'builtins.pl']).
main(float/1, (public)) :
float/1 :
        comment((float(A):-float(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((float(A):-[float(A)])).
        inline(float(a(1))).
        execute(cont).
end_predicate(float/1).

begin_predicate(atomic/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([atomic/1, 'builtins.pl']).
main(atomic/1, (public)) :
atomic/1 :
        comment((atomic(A):-atomic(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((atomic(A):-[atomic(A)])).
        inline(atomic(a(1))).
        execute(cont).
end_predicate(atomic/1).

begin_predicate(nonvar/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([nonvar/1, 'builtins.pl']).
main(nonvar/1, (public)) :
nonvar/1 :
        comment((nonvar(A):-nonvar(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((nonvar(A):-[nonvar(A)])).
        inline(nonvar(a(1))).
        execute(cont).
end_predicate(nonvar/1).

begin_predicate(number/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([number/1, 'builtins.pl']).
main(number/1, (public)) :
number/1 :
        comment((number(A):-number(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((number(A):-[number(A)])).
        inline(number(a(1))).
        execute(cont).
end_predicate(number/1).

begin_predicate(java/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java/1, 'builtins.pl']).
main(java/1, (public)) :
java/1 :
        comment((java(A):-java(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((java(A):-[java(A)])).
        inline(java(a(1))).
        execute(cont).
end_predicate(java/1).

begin_predicate(java/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java/2, 'builtins.pl']).
main(java/2, (public)) :
java/2 :
        comment((java(A, B):-java(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((java(A, B):-[java(A, B)])).
        inline(java(a(1), a(2))).
        execute(cont).
end_predicate(java/2).

begin_predicate(closure/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([closure/1, 'builtins.pl']).
main(closure/1, (public)) :
closure/1 :
        comment((closure(A):-closure(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((closure(A):-[closure(A)])).
        inline(closure(a(1))).
        execute(cont).
end_predicate(closure/1).

begin_predicate(ground/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ground/1, 'builtins.pl']).
main(ground/1, (public)) :
ground/1 :
        comment((ground(A):-ground(A))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((ground(A):-[ground(A)])).
        inline(ground(a(1))).
        execute(cont).
end_predicate(ground/1).

begin_predicate(compound/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([compound/1, 'builtins.pl']).
main(compound/1, (public)) :
        put_int(0, si(1)).
compound/1 :
        comment((compound(A):-nonvar(A), functor(A, B, C), C>0)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((compound(A):-[nonvar(A), functor(A, B, C), '$greater_than'(C, 0)])).
        inline(nonvar(a(1))).
        put_var(a(2)).
        put_cont('$greater_than'(a(2), si(1), cont), p(1)).
        execute(functor(a(1), void, a(2), p(1))).
end_predicate(compound/1).

begin_predicate(callable/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([callable/1, 'builtins.pl']).
main(callable/1, (public)) :
        label(callable/1+sub+1).
        label(callable/1+sub+2).
        label(callable/1+1).
        label(callable/1+2).
        label(callable/1+3).
callable/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try(callable/1+1, callable/1+sub+1).
callable/1+sub+1 :
        retry(callable/1+2, callable/1+sub+2).
callable/1+sub+2 :
        trust(callable/1+3).
callable/1+1 :
        comment((callable(A):-atom(A), !)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((callable(A):-['$get_level'(B), atom(A), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(atom(a(1))).
        inline('$cut'(a(2))).
        execute(cont).
callable/1+2 :
        comment((callable(A):-compound(A), !)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((callable(A):-['$get_level'(B), compound(A), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_cont('$cut'(a(2), cont), p(1)).
        execute(compound(a(1), p(1))).
callable/1+3 :
        comment((callable(A):-closure(A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((callable(A):-[closure(A)])).
        inline(closure(a(1))).
        execute(cont).
end_predicate(callable/1).

begin_predicate((==)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (==)/2, 'builtins.pl']).
main((==)/2, (public)) :
(==)/2 :
        comment((A==B:-A==B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A==B:-['$equality_of_term'(A, B)])).
        inline('$equality_of_term'(a(1), a(2))).
        execute(cont).
end_predicate((==)/2).

begin_predicate('$equality_of_term'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$equality_of_term'/2, 'builtins.pl']).
main('$equality_of_term'/2, (public)) :
'$equality_of_term'/2 :
        comment(('$equality_of_term'(A, B):-'$equality_of_term'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$equality_of_term'(A, B):-['$equality_of_term'(A, B)])).
        inline('$equality_of_term'(a(1), a(2))).
        execute(cont).
end_predicate('$equality_of_term'/2).

begin_predicate((\==)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (\==)/2, 'builtins.pl']).
main((\==)/2, (public)) :
(\==)/2 :
        comment((A\==B:-A\==B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A\==B:-['$inequality_of_term'(A, B)])).
        inline('$inequality_of_term'(a(1), a(2))).
        execute(cont).
end_predicate((\==)/2).

begin_predicate('$inequality_of_term'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$inequality_of_term'/2, 'builtins.pl']).
main('$inequality_of_term'/2, (public)) :
'$inequality_of_term'/2 :
        comment(('$inequality_of_term'(A, B):-'$inequality_of_term'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$inequality_of_term'(A, B):-['$inequality_of_term'(A, B)])).
        inline('$inequality_of_term'(a(1), a(2))).
        execute(cont).
end_predicate('$inequality_of_term'/2).

begin_predicate((@<)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (@<)/2, 'builtins.pl']).
main((@<)/2, (public)) :
(@<)/2 :
        comment((A@<B:-A@<B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A@<B:-['$before'(A, B)])).
        inline('$before'(a(1), a(2))).
        execute(cont).
end_predicate((@<)/2).

begin_predicate('$before'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$before'/2, 'builtins.pl']).
main('$before'/2, (public)) :
'$before'/2 :
        comment(('$before'(A, B):-'$before'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$before'(A, B):-['$before'(A, B)])).
        inline('$before'(a(1), a(2))).
        execute(cont).
end_predicate('$before'/2).

begin_predicate((@>)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (@>)/2, 'builtins.pl']).
main((@>)/2, (public)) :
(@>)/2 :
        comment((A@>B:-A@>B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A@>B:-['$after'(A, B)])).
        inline('$after'(a(1), a(2))).
        execute(cont).
end_predicate((@>)/2).

begin_predicate('$after'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$after'/2, 'builtins.pl']).
main('$after'/2, (public)) :
'$after'/2 :
        comment(('$after'(A, B):-'$after'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$after'(A, B):-['$after'(A, B)])).
        inline('$after'(a(1), a(2))).
        execute(cont).
end_predicate('$after'/2).

begin_predicate((@=<)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (@=<)/2, 'builtins.pl']).
main((@=<)/2, (public)) :
(@=<)/2 :
        comment((A@=<B:-A@=<B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A@=<B:-['$not_after'(A, B)])).
        inline('$not_after'(a(1), a(2))).
        execute(cont).
end_predicate((@=<)/2).

begin_predicate('$not_after'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$not_after'/2, 'builtins.pl']).
main('$not_after'/2, (public)) :
'$not_after'/2 :
        comment(('$not_after'(A, B):-'$not_after'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$not_after'(A, B):-['$not_after'(A, B)])).
        inline('$not_after'(a(1), a(2))).
        execute(cont).
end_predicate('$not_after'/2).

begin_predicate((@>=)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (@>=)/2, 'builtins.pl']).
main((@>=)/2, (public)) :
(@>=)/2 :
        comment((A@>=B:-A@>=B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A@>=B:-['$not_before'(A, B)])).
        inline('$not_before'(a(1), a(2))).
        execute(cont).
end_predicate((@>=)/2).

begin_predicate('$not_before'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$not_before'/2, 'builtins.pl']).
main('$not_before'/2, (public)) :
'$not_before'/2 :
        comment(('$not_before'(A, B):-'$not_before'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$not_before'(A, B):-['$not_before'(A, B)])).
        inline('$not_before'(a(1), a(2))).
        execute(cont).
end_predicate('$not_before'/2).

begin_predicate(?= / 2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([?= / 2, 'builtins.pl']).
main(?= / 2, (public)) :
?= / 2 :
        comment((?=(A, B):- ?=(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((?=(A, B):-['$identical_or_cannot_unify'(A, B)])).
        inline('$identical_or_cannot_unify'(a(1), a(2))).
        execute(cont).
end_predicate(?= / 2).

begin_predicate('$identical_or_cannot_unify'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$identical_or_cannot_unify'/2, 'builtins.pl']).
main('$identical_or_cannot_unify'/2, (public)) :
'$identical_or_cannot_unify'/2 :
        comment(('$identical_or_cannot_unify'(A, B):-'$identical_or_cannot_unify'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$identical_or_cannot_unify'(A, B):-['$identical_or_cannot_unify'(A, B)])).
        inline('$identical_or_cannot_unify'(a(1), a(2))).
        execute(cont).
end_predicate('$identical_or_cannot_unify'/2).

begin_predicate(compare/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([compare/3, 'builtins.pl']).
main(compare/3, (public)) :
compare/3 :
        comment((compare(A, B, C):-'$compare0'(D, B, C), '$map_compare_op'(D, A))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((compare(A, B, C):-['$compare0'(D, B, C), '$map_compare_op'(D, A)])).
        put_var(a(4)).
        put_cont('$map_compare_op'(a(4), a(1), cont), p(1)).
        execute('$compare0'(a(4), a(2), a(3), p(1))).
end_predicate(compare/3).

begin_predicate('$compare0'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$compare0'/3, 'builtins.pl']).
main('$compare0'/3, non- (public)) :
'$compare0'/3 :
        comment(('$compare0'(A, B, C):-'$INSERT_AM'([deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! a1.unify(new IntegerTerm(a2.compareTo(a3)), engine.trail))', '\t\treturn engine.fail();']))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$compare0'(A, B, C):-['$INSERT_AM'([deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! a1.unify(new IntegerTerm(a2.compareTo(a3)), engine.trail))', '\t\treturn engine.fail();'])])).
        deref(a(2), a(2)).
        deref(a(3), a(3)).
        '$INSERT'(['\tif(! a1.unify(new IntegerTerm(a2.compareTo(a3)), engine.trail))', '\t\treturn engine.fail();']).
        execute(cont).
end_predicate('$compare0'/3).

begin_predicate('$map_compare_op'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$map_compare_op'/2, 'builtins.pl']).
main('$map_compare_op'/2, non- (public)) :
        put_int(0, si(1)).
        put_con(=, s(2)).
        put_con(<, s(3)).
        put_con(>, s(4)).
        label('$map_compare_op'/2+sub+1).
        label('$map_compare_op'/2+sub+2).
        label('$map_compare_op'/2+1).
        label('$map_compare_op'/2+2).
        label('$map_compare_op'/2+3).
'$map_compare_op'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$map_compare_op'/2+1, '$map_compare_op'/2+sub+1).
'$map_compare_op'/2+sub+1 :
        retry('$map_compare_op'/2+2, '$map_compare_op'/2+sub+2).
'$map_compare_op'/2+sub+2 :
        trust('$map_compare_op'/2+3).
'$map_compare_op'/2+1 :
        comment(('$map_compare_op'(A, B):-A=:=0, !, B= (=))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$map_compare_op'(A, B):-['$get_level'(C), '$arith_equal'(A, 0), '$cut'(C), '$unify'(B, =)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline('$arith_equal'(a(1), si(1))).
        inline('$cut'(a(3))).
        inline('$unify'(a(2), s(2))).
        execute(cont).
'$map_compare_op'/2+2 :
        comment(('$map_compare_op'(A, B):-A<0, !, B= (<))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$map_compare_op'(A, B):-['$get_level'(C), '$less_than'(A, 0), '$cut'(C), '$unify'(B, <)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline('$less_than'(a(1), si(1))).
        inline('$cut'(a(3))).
        inline('$unify'(a(2), s(3))).
        execute(cont).
'$map_compare_op'/2+3 :
        comment(('$map_compare_op'(A, B):-A>0, !, B= (>))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$map_compare_op'(A, B):-['$get_level'(C), '$greater_than'(A, 0), '$cut'(C), '$unify'(B, >)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline('$greater_than'(a(1), si(1))).
        inline('$cut'(a(3))).
        inline('$unify'(a(2), s(4))).
        execute(cont).
end_predicate('$map_compare_op'/2).

begin_predicate(merge/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([merge/3, 'builtins.pl']).
main(merge/3, (public)) :
        put_con(var, s(1)).
        put_con(merge/3, s(2)).
        put_int(1, si(3)).
        put_int(2, si(4)).
        put_int(0, si(5)).
        put_con(=<, s(6)).
        label(merge/3+sub+1).
        label(merge/3+sub+2).
        label(merge/3+1).
        label(merge/3+2).
        label(merge/3+3).
merge/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try(merge/3+1, merge/3+sub+1).
merge/3+sub+1 :
        retry(merge/3+2, merge/3+sub+2).
merge/3+sub+2 :
        trust(merge/3+3).
merge/3+1 :
        comment((merge(A, B, C):-var(A), !, illarg(var, merge(A, B, C), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((merge(A, B, C):-['$get_level'(D), var(A), '$cut'(D), illarg(var, merge(A, B, C), 1)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(2), y(1), a(5)).
        execute(illarg(s(1), a(5), si(3), cont)).
merge/3+2 :
        comment((merge(A, B, C):-var(B), !, illarg(var, merge(A, B, C), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((merge(A, B, C):-['$get_level'(D), var(B), '$cut'(D), illarg(var, merge(A, B, C), 2)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(2))).
        inline('$cut'(a(4))).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(2), y(1), a(5)).
        execute(illarg(s(1), a(5), si(4), cont)).
merge/3+3 :
        comment((merge(A, B, C):-'$merge'(A, B, D, 0, =<), C=D)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((merge(A, B, C):-['$merge'(A, B, D, 0, =<), '$unify'(C, D)])).
        put_var(a(4)).
        put_cont('$unify'(a(3), a(4), cont), p(1)).
        execute('$merge'(a(1), a(2), a(4), si(5), s(6), p(1))).
end_predicate(merge/3).

begin_predicate('$sort'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$sort'/4, 'builtins.pl']).
main('$sort'/4, non- (public)) :
        put_con([], s(1)).
        label(fail/0).
        label('$sort'/4+var).
        label('$sort'/4+var+1).
        label('$sort'/4+var+2).
        label('$sort'/4+lis).
        label('$sort'/4+lis+1).
        label('$sort'/4+1).
        label('$sort'/4+2).
        label('$sort'/4+3).
'$sort'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        switch_on_term('$sort'/4+var, fail/0, fail/0, '$sort'/4+1, fail/0, '$sort'/4+lis).
'$sort'/4+var :
        try('$sort'/4+1, '$sort'/4+var+1).
'$sort'/4+var+1 :
        retry('$sort'/4+2, '$sort'/4+var+2).
'$sort'/4+var+2 :
        trust('$sort'/4+3).
'$sort'/4+lis :
        try('$sort'/4+2, '$sort'/4+lis+1).
'$sort'/4+lis+1 :
        trust('$sort'/4+3).
'$sort'/4+1 :
        comment(('$sort'([], [], A, B):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$sort'([], [], A, B):-[])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(2)).
        execute(cont).
'$sort'/4+2 :
        comment(('$sort'([A], [A], B, C):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$sort'([A], [A], B, C):-[])).
        get_list(a(1)).
        unify_var(a(5)).
        unify_con([], s(1)).
        get_list(a(2)).
        unify_val(a(5)).
        unify_con([], s(1)).
        execute(cont).
'$sort'/4+3 :
        comment(('$sort'([A, B|C], D, E, F):-'$halve'(C, [B|C], G, H), '$sort'([A|G], I, E, F), '$sort'(H, J, E, F), '$merge'(I, J, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$sort'([A, B|C], D, E, F):-['$halve'(C, [B|C], G, H), '$sort'([A|G], I, E, F), '$sort'(H, J, E, F), '$merge'(I, J, D, E, F)])).
        get_list(a(1)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_list(a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        put_list(a(7), a(8), a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_list(a(5), a(10), a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_cont('$merge'(a(13), a(14), a(2), a(3), a(4), cont), p(1)).
        put_cont('$sort'(a(11), a(14), a(3), a(4), p(1)), p(2)).
        put_cont('$sort'(a(12), a(13), a(3), a(4), p(2)), p(3)).
        execute('$halve'(a(8), a(9), a(10), a(11), p(3))).
end_predicate('$sort'/4).

begin_predicate('$halve'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$halve'/4, 'builtins.pl']).
main('$halve'/4, non- (public)) :
        put_con([], s(1)).
        label('$halve'/4+top).
        label('$halve'/4+var).
        label('$halve'/4+var+1).
        label('$halve'/4+1).
        label('$halve'/4+2).
'$halve'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        goto('$halve'/4+top).
'$halve'/4+top :
        setB0.
        switch_on_term('$halve'/4+var, '$halve'/4+2, '$halve'/4+2, '$halve'/4+2, '$halve'/4+2, '$halve'/4+var).
'$halve'/4+var :
        try('$halve'/4+1, '$halve'/4+var+1).
'$halve'/4+var+1 :
        trust('$halve'/4+2).
'$halve'/4+1 :
        comment(('$halve'([A, B|C], [D|E], [D|F], G):-!, '$halve'(C, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$halve'([A, B|C], [D|E], [D|F], G):-['$neck_cut', '$halve'(C, E, F, G)])).
        get_list(a(1)).
        unify_void(1).
        unify_var(a(5)).
        get_list(a(5)).
        unify_void(1).
        unify_var(a(6)).
        get_list(a(2)).
        unify_var(a(7)).
        unify_var(a(8)).
        get_list(a(3)).
        unify_val(a(7)).
        unify_var(a(9)).
        inline('$neck_cut').
        set(a(6), ea(1)).
        set(a(8), ea(2)).
        set(a(9), ea(3)).
        set(a(4), ea(4)).
        set(cont, econt).
        goto('$halve'/4+top).
'$halve'/4+2 :
        comment(('$halve'(A, B, [], B):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$halve'(A, B, [], B):-[])).
        get_con([], s(1), a(3)).
        get_val(a(2), a(4)).
        execute(cont).
end_predicate('$halve'/4).

begin_predicate('$dummy_4_builtins.pl'/9).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_4_builtins.pl'/9, 'builtins.pl']).
main('$dummy_4_builtins.pl'/9, non- (public)) :
        put_con(<, s(1)).
        label('$dummy_4_builtins.pl'/9+sub+1).
        label('$dummy_4_builtins.pl'/9+1).
        label('$dummy_4_builtins.pl'/9+2).
'$dummy_4_builtins.pl'/9 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(arg(8), ea(8)).
        set(arg(9), ea(9)).
        set(cont, econt).
        setB0.
        try('$dummy_4_builtins.pl'/9+1, '$dummy_4_builtins.pl'/9+sub+1).
'$dummy_4_builtins.pl'/9+sub+1 :
        trust('$dummy_4_builtins.pl'/9+2).
'$dummy_4_builtins.pl'/9+1 :
        comment(('$dummy_4_builtins.pl'(A, B, C, D, E, F, G, H, I):-I= (<), !, E=A, '$merge'(B, [C|D], F, G, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(ea(9), a(9)).
        set(econt, cont).
        comment(('$dummy_4_builtins.pl'(A, B, C, D, E, F, G, H, I):-['$get_level'(J), '$unify'(I, <), '$cut'(J), '$unify'(E, A), '$merge'(B, [C|D], F, G, H)])).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        inline('$unify'(a(9), s(1))).
        inline('$cut'(a(10))).
        inline('$unify'(a(5), a(1))).
        put_list(a(3), a(4), a(11)).
        execute('$merge'(a(2), a(11), a(6), a(7), a(8), cont)).
'$dummy_4_builtins.pl'/9+2 :
        comment(('$dummy_4_builtins.pl'(A, B, C, D, E, F, G, H, I):-'$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(ea(9), a(9)).
        set(econt, cont).
        comment(('$dummy_4_builtins.pl'(A, B, C, D, E, F, G, H, I):-['$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I)])).
        execute('$dummy_5_builtins.pl'(a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), cont)).
end_predicate('$dummy_4_builtins.pl'/9).

begin_predicate('$dummy_5_builtins.pl'/9).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_5_builtins.pl'/9, 'builtins.pl']).
main('$dummy_5_builtins.pl'/9, non- (public)) :
        put_con(>, s(1)).
        put_con(=, s(2)).
        label('$dummy_5_builtins.pl'/9+sub+1).
        label('$dummy_5_builtins.pl'/9+1).
        label('$dummy_5_builtins.pl'/9+2).
'$dummy_5_builtins.pl'/9 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(arg(8), ea(8)).
        set(arg(9), ea(9)).
        set(cont, econt).
        setB0.
        try('$dummy_5_builtins.pl'/9+1, '$dummy_5_builtins.pl'/9+sub+1).
'$dummy_5_builtins.pl'/9+sub+1 :
        trust('$dummy_5_builtins.pl'/9+2).
'$dummy_5_builtins.pl'/9+1 :
        comment(('$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-I= (>), !, E=C, '$merge'([A|B], D, F, G, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(ea(9), a(9)).
        set(econt, cont).
        comment(('$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-['$get_level'(J), '$unify'(I, >), '$cut'(J), '$unify'(E, C), '$merge'([A|B], D, F, G, H)])).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        inline('$unify'(a(9), s(1))).
        inline('$cut'(a(10))).
        inline('$unify'(a(5), a(3))).
        put_list(a(1), a(2), a(11)).
        execute('$merge'(a(11), a(4), a(6), a(7), a(8), cont)).
'$dummy_5_builtins.pl'/9+2 :
        comment(('$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-I= (=), !, E=A, '$merge'(B, D, F, G, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(ea(9), a(9)).
        set(econt, cont).
        comment(('$dummy_5_builtins.pl'(A, B, C, D, E, F, G, H, I):-['$get_level'(J), '$unify'(I, =), '$cut'(J), '$unify'(E, A), '$merge'(B, D, F, G, H)])).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        inline('$unify'(a(9), s(2))).
        inline('$cut'(a(10))).
        inline('$unify'(a(5), a(1))).
        execute('$merge'(a(2), a(4), a(6), a(7), a(8), cont)).
end_predicate('$dummy_5_builtins.pl'/9).

begin_predicate('$merge'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$merge'/5, 'builtins.pl']).
main('$merge'/5, non- (public)) :
        put_con([], s(1)).
        label('$merge'/5+var).
        label('$merge'/5+var+1).
        label('$merge'/5+var+2).
        label('$merge'/5+con).
        label('$merge'/5+con+1).
        label('$merge'/5+lis).
        label('$merge'/5+lis+1).
        label('$merge'/5+1).
        label('$merge'/5+2).
        label('$merge'/5+3).
'$merge'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        switch_on_term('$merge'/5+var, '$merge'/5+3, '$merge'/5+3, '$merge'/5+con, '$merge'/5+3, '$merge'/5+lis).
'$merge'/5+var :
        try('$merge'/5+1, '$merge'/5+var+1).
'$merge'/5+var+1 :
        retry('$merge'/5+2, '$merge'/5+var+2).
'$merge'/5+var+2 :
        trust('$merge'/5+3).
'$merge'/5+con :
        try('$merge'/5+2, '$merge'/5+con+1).
'$merge'/5+con+1 :
        trust('$merge'/5+3).
'$merge'/5+lis :
        try('$merge'/5+1, '$merge'/5+lis+1).
'$merge'/5+lis+1 :
        trust('$merge'/5+3).
'$merge'/5+1 :
        comment(('$merge'([A|B], [C|D], [E|F], G, H):-!, '$compare'(G, H, A, C, I), '$dummy_4_builtins.pl'(A, B, C, D, E, F, G, H, I))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$merge'([A|B], [C|D], [E|F], G, H):-['$neck_cut', '$compare'(G, H, A, C, I), '$dummy_4_builtins.pl'(A, B, C, D, E, F, G, H, I)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_list(a(2)).
        unify_var(a(8)).
        unify_var(a(9)).
        get_list(a(3)).
        unify_var(a(10)).
        unify_var(a(11)).
        inline('$neck_cut').
        put_var(a(12)).
        put_cont('$dummy_4_builtins.pl'(a(6), a(7), a(8), a(9), a(10), a(11), a(4), a(5), a(12), cont), p(1)).
        execute('$compare'(a(4), a(5), a(6), a(8), a(12), p(1))).
'$merge'/5+2 :
        comment(('$merge'([], A, A, B, C):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$merge'([], A, A, B, C):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_val(a(2), a(3)).
        inline('$neck_cut').
        execute(cont).
'$merge'/5+3 :
        comment(('$merge'(A, [], A, B, C):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$merge'(A, [], A, B, C):-[])).
        get_con([], s(1), a(2)).
        get_val(a(1), a(3)).
        execute(cont).
end_predicate('$merge'/5).

begin_predicate('$compare'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$compare'/5, 'builtins.pl']).
main('$compare'/5, non- (public)) :
'$compare'/5 :
        comment(('$compare'(A, B, C, D, E):-'$compare'(A, C, D, F), '$combine'(B, F, E))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        set(arg(5), a(5)).
        comment(('$compare'(A, B, C, D, E):-['$compare'(A, C, D, F), '$combine'(B, F, E)])).
        put_var(a(6)).
        put_cont('$combine'(a(2), a(6), a(5), cont), p(1)).
        execute('$compare'(a(1), a(3), a(4), a(6), p(1))).
end_predicate('$compare'/5).

begin_predicate('$compare'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$compare'/4, 'builtins.pl']).
main('$compare'/4, non- (public)) :
        put_int(0, si(1)).
        label('$compare'/4+var).
        label('$compare'/4+var+1).
        label('$compare'/4+1).
        label('$compare'/4+2).
'$compare'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        switch_on_term('$compare'/4+var, '$compare'/4+var, '$compare'/4+2, '$compare'/4+2, '$compare'/4+2, '$compare'/4+2).
'$compare'/4+var :
        try('$compare'/4+1, '$compare'/4+var+1).
'$compare'/4+var+1 :
        trust('$compare'/4+2).
'$compare'/4+1 :
        comment(('$compare'(0, A, B, C):-!, compare(C, A, B))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$compare'(0, A, B, C):-['$neck_cut', compare(C, A, B)])).
        get_int(0, si(1), a(1)).
        inline('$neck_cut').
        execute(compare(a(4), a(2), a(3), cont)).
'$compare'/4+2 :
        comment(('$compare'(A, B, C, D):-arg(A, B, E), arg(A, C, F), compare(D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$compare'(A, B, C, D):-[arg(A, B, E), arg(A, C, F), compare(D, E, F)])).
        put_var(a(5)).
        put_var(a(6)).
        put_cont(compare(a(4), a(5), a(6), cont), p(1)).
        put_cont(arg(a(1), a(3), a(6), p(1)), p(2)).
        execute(arg(a(1), a(2), a(5), p(2))).
end_predicate('$compare'/4).

begin_predicate('$combine'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$combine'/3, 'builtins.pl']).
main('$combine'/3, non- (public)) :
        put_con(<, s(1)).
        put_con(=<, s(2)).
        put_con(>, s(3)).
        put_con(>=, s(4)).
        put_con(=, s(5)).
        label(fail/0).
        label('$combine'/3+var).
        label('$combine'/3+var+1).
        label('$combine'/3+var+2).
        label('$combine'/3+var+3).
        label('$combine'/3+var+4).
        label('$combine'/3+var+5).
        label('$combine'/3+var+6).
        label('$combine'/3+var+7).
        label('$combine'/3+con).
        label('$combine'/3+con+0).
        label('$combine'/3+con+0+1).
        label('$combine'/3+con+1).
        label('$combine'/3+con+1+1).
        label('$combine'/3+con+2).
        label('$combine'/3+con+2+1).
        label('$combine'/3+con+2+2).
        label('$combine'/3+1).
        label('$combine'/3+2).
        label('$combine'/3+3).
        label('$combine'/3+4).
        label('$combine'/3+5).
        label('$combine'/3+6).
        label('$combine'/3+7).
        label('$combine'/3+8).
        new_hash(con, 4).
        static([put_hash(s(1), '$combine'/3+1, con), put_hash(s(2), '$combine'/3+con+0, con), put_hash(s(4), '$combine'/3+con+1, con), put_hash(s(3), '$combine'/3+con+2, con)]).
'$combine'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$combine'/3+var, fail/0, fail/0, '$combine'/3+con, fail/0, fail/0).
'$combine'/3+var :
        try('$combine'/3+1, '$combine'/3+var+1).
'$combine'/3+var+1 :
        retry('$combine'/3+2, '$combine'/3+var+2).
'$combine'/3+var+2 :
        retry('$combine'/3+3, '$combine'/3+var+3).
'$combine'/3+var+3 :
        retry('$combine'/3+4, '$combine'/3+var+4).
'$combine'/3+var+4 :
        retry('$combine'/3+5, '$combine'/3+var+5).
'$combine'/3+var+5 :
        retry('$combine'/3+6, '$combine'/3+var+6).
'$combine'/3+var+6 :
        retry('$combine'/3+7, '$combine'/3+var+7).
'$combine'/3+var+7 :
        trust('$combine'/3+8).
'$combine'/3+con :
        switch_on_hash(con, 4, fail/0, [ (<):'$combine'/3+1, (=<):'$combine'/3+con+0, (>=):'$combine'/3+con+1, (>):'$combine'/3+con+2]).
'$combine'/3+con+0 :
        try('$combine'/3+2, '$combine'/3+con+0+1).
'$combine'/3+con+0+1 :
        trust('$combine'/3+3).
'$combine'/3+con+1 :
        try('$combine'/3+4, '$combine'/3+con+1+1).
'$combine'/3+con+1+1 :
        trust('$combine'/3+5).
'$combine'/3+con+2 :
        try('$combine'/3+6, '$combine'/3+con+2+1).
'$combine'/3+con+2+1 :
        retry('$combine'/3+7, '$combine'/3+con+2+2).
'$combine'/3+con+2+2 :
        trust('$combine'/3+8).
'$combine'/3+1 :
        comment(('$combine'(<, A, A):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(<, A, A):-[])).
        get_con(<, s(1), a(1)).
        get_val(a(2), a(3)).
        execute(cont).
'$combine'/3+2 :
        comment(('$combine'(=<, >, >):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(=<, >, >):-['$neck_cut'])).
        get_con(=<, s(2), a(1)).
        get_con(>, s(3), a(2)).
        get_con(>, s(3), a(3)).
        inline('$neck_cut').
        execute(cont).
'$combine'/3+3 :
        comment(('$combine'(=<, A, <):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(=<, A, <):-[])).
        get_con(=<, s(2), a(1)).
        get_con(<, s(1), a(3)).
        execute(cont).
'$combine'/3+4 :
        comment(('$combine'(>=, <, >):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(>=, <, >):-['$neck_cut'])).
        get_con(>=, s(4), a(1)).
        get_con(<, s(1), a(2)).
        get_con(>, s(3), a(3)).
        inline('$neck_cut').
        execute(cont).
'$combine'/3+5 :
        comment(('$combine'(>=, A, <):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(>=, A, <):-[])).
        get_con(>=, s(4), a(1)).
        get_con(<, s(1), a(3)).
        execute(cont).
'$combine'/3+6 :
        comment(('$combine'(>, <, >):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(>, <, >):-['$neck_cut'])).
        get_con(>, s(3), a(1)).
        get_con(<, s(1), a(2)).
        get_con(>, s(3), a(3)).
        inline('$neck_cut').
        execute(cont).
'$combine'/3+7 :
        comment(('$combine'(>, >, <):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(>, >, <):-['$neck_cut'])).
        get_con(>, s(3), a(1)).
        get_con(>, s(3), a(2)).
        get_con(<, s(1), a(3)).
        inline('$neck_cut').
        execute(cont).
'$combine'/3+8 :
        comment(('$combine'(>, =, =):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$combine'(>, =, =):-[])).
        get_con(>, s(3), a(1)).
        get_con(=, s(5), a(2)).
        get_con(=, s(5), a(3)).
        execute(cont).
end_predicate('$combine'/3).

begin_predicate((=..)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (=..)/2, 'builtins.pl']).
main((=..)/2, (public)) :
(=..)/2 :
        comment((A=..B:-A=..B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A=..B:-['$univ'(A, B)])).
        execute('$univ'(a(1), a(2), cont)).
end_predicate((=..)/2).

begin_predicate(copy_term/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([copy_term/2, 'builtins.pl']).
main(copy_term/2, (public)) :
copy_term/2 :
        comment((copy_term(A, B):-copy_term(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((copy_term(A, B):-[copy_term(A, B)])).
        inline(copy_term(a(1), a(2))).
        execute(cont).
end_predicate(copy_term/2).

begin_predicate((is)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (is)/2, 'builtins.pl']).
main((is)/2, (public)) :
(is)/2 :
        comment((A is B:-A is B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A is B:-[A is B])).
        inline(a(1)is a(2)).
        execute(cont).
end_predicate((is)/2).

begin_predicate('$abs'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$abs'/2, 'builtins.pl']).
main('$abs'/2, (public)) :
'$abs'/2 :
        comment(('$abs'(A, B):-'$abs'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$abs'(A, B):-['$abs'(A, B)])).
        inline('$abs'(a(1), a(2))).
        execute(cont).
end_predicate('$abs'/2).

begin_predicate('$asin'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$asin'/2, 'builtins.pl']).
main('$asin'/2, (public)) :
'$asin'/2 :
        comment(('$asin'(A, B):-'$asin'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$asin'(A, B):-['$asin'(A, B)])).
        inline('$asin'(a(1), a(2))).
        execute(cont).
end_predicate('$asin'/2).

begin_predicate('$acos'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$acos'/2, 'builtins.pl']).
main('$acos'/2, (public)) :
'$acos'/2 :
        comment(('$acos'(A, B):-'$acos'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$acos'(A, B):-['$acos'(A, B)])).
        inline('$acos'(a(1), a(2))).
        execute(cont).
end_predicate('$acos'/2).

begin_predicate('$atan'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$atan'/2, 'builtins.pl']).
main('$atan'/2, (public)) :
'$atan'/2 :
        comment(('$atan'(A, B):-'$atan'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$atan'(A, B):-['$atan'(A, B)])).
        inline('$atan'(a(1), a(2))).
        execute(cont).
end_predicate('$atan'/2).

begin_predicate('$bitwise_conj'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$bitwise_conj'/3, 'builtins.pl']).
main('$bitwise_conj'/3, (public)) :
'$bitwise_conj'/3 :
        comment(('$bitwise_conj'(A, B, C):-'$bitwise_conj'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$bitwise_conj'(A, B, C):-['$bitwise_conj'(A, B, C)])).
        inline('$bitwise_conj'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$bitwise_conj'/3).

begin_predicate('$bitwise_disj'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$bitwise_disj'/3, 'builtins.pl']).
main('$bitwise_disj'/3, (public)) :
'$bitwise_disj'/3 :
        comment(('$bitwise_disj'(A, B, C):-'$bitwise_disj'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$bitwise_disj'(A, B, C):-['$bitwise_disj'(A, B, C)])).
        inline('$bitwise_disj'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$bitwise_disj'/3).

begin_predicate('$bitwise_exclusive_or'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$bitwise_exclusive_or'/3, 'builtins.pl']).
main('$bitwise_exclusive_or'/3, (public)) :
'$bitwise_exclusive_or'/3 :
        comment(('$bitwise_exclusive_or'(A, B, C):-'$bitwise_exclusive_or'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$bitwise_exclusive_or'(A, B, C):-['$bitwise_exclusive_or'(A, B, C)])).
        inline('$bitwise_exclusive_or'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$bitwise_exclusive_or'/3).

begin_predicate('$bitwise_neg'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$bitwise_neg'/2, 'builtins.pl']).
main('$bitwise_neg'/2, (public)) :
'$bitwise_neg'/2 :
        comment(('$bitwise_neg'(A, B):-'$bitwise_neg'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$bitwise_neg'(A, B):-['$bitwise_neg'(A, B)])).
        inline('$bitwise_neg'(a(1), a(2))).
        execute(cont).
end_predicate('$bitwise_neg'/2).

begin_predicate('$ceil'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$ceil'/2, 'builtins.pl']).
main('$ceil'/2, (public)) :
'$ceil'/2 :
        comment(('$ceil'(A, B):-'$ceil'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$ceil'(A, B):-['$ceil'(A, B)])).
        inline('$ceil'(a(1), a(2))).
        execute(cont).
end_predicate('$ceil'/2).

begin_predicate('$cos'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$cos'/2, 'builtins.pl']).
main('$cos'/2, (public)) :
'$cos'/2 :
        comment(('$cos'(A, B):-'$cos'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$cos'(A, B):-['$cos'(A, B)])).
        inline('$cos'(a(1), a(2))).
        execute(cont).
end_predicate('$cos'/2).

begin_predicate('$degrees'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$degrees'/2, 'builtins.pl']).
main('$degrees'/2, (public)) :
'$degrees'/2 :
        comment(('$degrees'(A, B):-'$degrees'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$degrees'(A, B):-['$degrees'(A, B)])).
        inline('$degrees'(a(1), a(2))).
        execute(cont).
end_predicate('$degrees'/2).

begin_predicate('$exp'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$exp'/2, 'builtins.pl']).
main('$exp'/2, (public)) :
'$exp'/2 :
        comment(('$exp'(A, B):-'$exp'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$exp'(A, B):-['$exp'(A, B)])).
        inline('$exp'(a(1), a(2))).
        execute(cont).
end_predicate('$exp'/2).

begin_predicate('$float'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$float'/2, 'builtins.pl']).
main('$float'/2, (public)) :
'$float'/2 :
        comment(('$float'(A, B):-'$float'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$float'(A, B):-['$float'(A, B)])).
        inline('$float'(a(1), a(2))).
        execute(cont).
end_predicate('$float'/2).

begin_predicate('$float_integer_part'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$float_integer_part'/2, 'builtins.pl']).
main('$float_integer_part'/2, (public)) :
'$float_integer_part'/2 :
        comment(('$float_integer_part'(A, B):-'$float_integer_part'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$float_integer_part'(A, B):-['$float_integer_part'(A, B)])).
        inline('$float_integer_part'(a(1), a(2))).
        execute(cont).
end_predicate('$float_integer_part'/2).

begin_predicate('$float_fractional_part'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$float_fractional_part'/2, 'builtins.pl']).
main('$float_fractional_part'/2, (public)) :
'$float_fractional_part'/2 :
        comment(('$float_fractional_part'(A, B):-'$float_fractional_part'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$float_fractional_part'(A, B):-['$float_fractional_part'(A, B)])).
        inline('$float_fractional_part'(a(1), a(2))).
        execute(cont).
end_predicate('$float_fractional_part'/2).

begin_predicate('$float_quotient'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$float_quotient'/3, 'builtins.pl']).
main('$float_quotient'/3, (public)) :
'$float_quotient'/3 :
        comment(('$float_quotient'(A, B, C):-'$float_quotient'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$float_quotient'(A, B, C):-['$float_quotient'(A, B, C)])).
        inline('$float_quotient'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$float_quotient'/3).

begin_predicate('$floor'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$floor'/2, 'builtins.pl']).
main('$floor'/2, (public)) :
'$floor'/2 :
        comment(('$floor'(A, B):-'$floor'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$floor'(A, B):-['$floor'(A, B)])).
        inline('$floor'(a(1), a(2))).
        execute(cont).
end_predicate('$floor'/2).

begin_predicate('$int_quotient'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$int_quotient'/3, 'builtins.pl']).
main('$int_quotient'/3, (public)) :
'$int_quotient'/3 :
        comment(('$int_quotient'(A, B, C):-'$int_quotient'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$int_quotient'(A, B, C):-['$int_quotient'(A, B, C)])).
        inline('$int_quotient'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$int_quotient'/3).

begin_predicate('$log'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$log'/2, 'builtins.pl']).
main('$log'/2, (public)) :
'$log'/2 :
        comment(('$log'(A, B):-'$log'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$log'(A, B):-['$log'(A, B)])).
        inline('$log'(a(1), a(2))).
        execute(cont).
end_predicate('$log'/2).

begin_predicate('$max'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$max'/3, 'builtins.pl']).
main('$max'/3, (public)) :
'$max'/3 :
        comment(('$max'(A, B, C):-'$max'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$max'(A, B, C):-['$max'(A, B, C)])).
        inline('$max'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$max'/3).

begin_predicate('$min'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$min'/3, 'builtins.pl']).
main('$min'/3, (public)) :
'$min'/3 :
        comment(('$min'(A, B, C):-'$min'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$min'(A, B, C):-['$min'(A, B, C)])).
        inline('$min'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$min'/3).

begin_predicate('$minus'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$minus'/3, 'builtins.pl']).
main('$minus'/3, (public)) :
'$minus'/3 :
        comment(('$minus'(A, B, C):-'$minus'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$minus'(A, B, C):-['$minus'(A, B, C)])).
        inline('$minus'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$minus'/3).

begin_predicate('$mod'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$mod'/3, 'builtins.pl']).
main('$mod'/3, (public)) :
'$mod'/3 :
        comment(('$mod'(A, B, C):-'$mod'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$mod'(A, B, C):-['$mod'(A, B, C)])).
        inline('$mod'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$mod'/3).

begin_predicate('$multi'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$multi'/3, 'builtins.pl']).
main('$multi'/3, (public)) :
'$multi'/3 :
        comment(('$multi'(A, B, C):-'$multi'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$multi'(A, B, C):-['$multi'(A, B, C)])).
        inline('$multi'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$multi'/3).

begin_predicate('$plus'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$plus'/3, 'builtins.pl']).
main('$plus'/3, (public)) :
'$plus'/3 :
        comment(('$plus'(A, B, C):-'$plus'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$plus'(A, B, C):-['$plus'(A, B, C)])).
        inline('$plus'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$plus'/3).

begin_predicate('$pow'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$pow'/3, 'builtins.pl']).
main('$pow'/3, (public)) :
'$pow'/3 :
        comment(('$pow'(A, B, C):-'$pow'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$pow'(A, B, C):-['$pow'(A, B, C)])).
        inline('$pow'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$pow'/3).

begin_predicate('$radians'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$radians'/2, 'builtins.pl']).
main('$radians'/2, (public)) :
'$radians'/2 :
        comment(('$radians'(A, B):-'$radians'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$radians'(A, B):-['$radians'(A, B)])).
        inline('$radians'(a(1), a(2))).
        execute(cont).
end_predicate('$radians'/2).

begin_predicate('$rint'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$rint'/2, 'builtins.pl']).
main('$rint'/2, (public)) :
'$rint'/2 :
        comment(('$rint'(A, B):-'$rint'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$rint'(A, B):-['$rint'(A, B)])).
        inline('$rint'(a(1), a(2))).
        execute(cont).
end_predicate('$rint'/2).

begin_predicate('$round'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$round'/2, 'builtins.pl']).
main('$round'/2, (public)) :
'$round'/2 :
        comment(('$round'(A, B):-'$round'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$round'(A, B):-['$round'(A, B)])).
        inline('$round'(a(1), a(2))).
        execute(cont).
end_predicate('$round'/2).

begin_predicate('$shift_left'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$shift_left'/3, 'builtins.pl']).
main('$shift_left'/3, (public)) :
'$shift_left'/3 :
        comment(('$shift_left'(A, B, C):-'$shift_left'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$shift_left'(A, B, C):-['$shift_left'(A, B, C)])).
        inline('$shift_left'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$shift_left'/3).

begin_predicate('$shift_right'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$shift_right'/3, 'builtins.pl']).
main('$shift_right'/3, (public)) :
'$shift_right'/3 :
        comment(('$shift_right'(A, B, C):-'$shift_right'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$shift_right'(A, B, C):-['$shift_right'(A, B, C)])).
        inline('$shift_right'(a(1), a(2), a(3))).
        execute(cont).
end_predicate('$shift_right'/3).

begin_predicate('$sign'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$sign'/2, 'builtins.pl']).
main('$sign'/2, (public)) :
'$sign'/2 :
        comment(('$sign'(A, B):-'$sign'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$sign'(A, B):-['$sign'(A, B)])).
        inline('$sign'(a(1), a(2))).
        execute(cont).
end_predicate('$sign'/2).

begin_predicate('$sin'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$sin'/2, 'builtins.pl']).
main('$sin'/2, (public)) :
'$sin'/2 :
        comment(('$sin'(A, B):-'$sin'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$sin'(A, B):-['$sin'(A, B)])).
        inline('$sin'(a(1), a(2))).
        execute(cont).
end_predicate('$sin'/2).

begin_predicate('$sqrt'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$sqrt'/2, 'builtins.pl']).
main('$sqrt'/2, (public)) :
'$sqrt'/2 :
        comment(('$sqrt'(A, B):-'$sqrt'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$sqrt'(A, B):-['$sqrt'(A, B)])).
        inline('$sqrt'(a(1), a(2))).
        execute(cont).
end_predicate('$sqrt'/2).

begin_predicate('$tan'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$tan'/2, 'builtins.pl']).
main('$tan'/2, (public)) :
'$tan'/2 :
        comment(('$tan'(A, B):-'$tan'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$tan'(A, B):-['$tan'(A, B)])).
        inline('$tan'(a(1), a(2))).
        execute(cont).
end_predicate('$tan'/2).

begin_predicate('$truncate'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$truncate'/2, 'builtins.pl']).
main('$truncate'/2, (public)) :
'$truncate'/2 :
        comment(('$truncate'(A, B):-'$truncate'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$truncate'(A, B):-['$truncate'(A, B)])).
        inline('$truncate'(a(1), a(2))).
        execute(cont).
end_predicate('$truncate'/2).

begin_predicate((=:=)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (=:=)/2, 'builtins.pl']).
main((=:=)/2, (public)) :
(=:=)/2 :
        comment((A=:=B:-A=:=B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A=:=B:-['$arith_equal'(A, B)])).
        inline('$arith_equal'(a(1), a(2))).
        execute(cont).
end_predicate((=:=)/2).

begin_predicate('$arith_equal'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$arith_equal'/2, 'builtins.pl']).
main('$arith_equal'/2, (public)) :
'$arith_equal'/2 :
        comment(('$arith_equal'(A, B):-'$arith_equal'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$arith_equal'(A, B):-['$arith_equal'(A, B)])).
        inline('$arith_equal'(a(1), a(2))).
        execute(cont).
end_predicate('$arith_equal'/2).

begin_predicate((=\=)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (=\=)/2, 'builtins.pl']).
main((=\=)/2, (public)) :
(=\=)/2 :
        comment((A=\=B:-A=\=B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A=\=B:-['$arith_not_equal'(A, B)])).
        inline('$arith_not_equal'(a(1), a(2))).
        execute(cont).
end_predicate((=\=)/2).

begin_predicate('$arith_not_equal'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$arith_not_equal'/2, 'builtins.pl']).
main('$arith_not_equal'/2, (public)) :
'$arith_not_equal'/2 :
        comment(('$arith_not_equal'(A, B):-'$arith_not_equal'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$arith_not_equal'(A, B):-['$arith_not_equal'(A, B)])).
        inline('$arith_not_equal'(a(1), a(2))).
        execute(cont).
end_predicate('$arith_not_equal'/2).

begin_predicate((<)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (<)/2, 'builtins.pl']).
main((<)/2, (public)) :
(<)/2 :
        comment((A<B:-A<B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A<B:-['$less_than'(A, B)])).
        inline('$less_than'(a(1), a(2))).
        execute(cont).
end_predicate((<)/2).

begin_predicate('$less_than'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$less_than'/2, 'builtins.pl']).
main('$less_than'/2, (public)) :
'$less_than'/2 :
        comment(('$less_than'(A, B):-'$less_than'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$less_than'(A, B):-['$less_than'(A, B)])).
        inline('$less_than'(a(1), a(2))).
        execute(cont).
end_predicate('$less_than'/2).

begin_predicate((=<)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (=<)/2, 'builtins.pl']).
main((=<)/2, (public)) :
(=<)/2 :
        comment((A=<B:-A=<B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A=<B:-['$less_or_equal'(A, B)])).
        inline('$less_or_equal'(a(1), a(2))).
        execute(cont).
end_predicate((=<)/2).

begin_predicate('$less_or_equal'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$less_or_equal'/2, 'builtins.pl']).
main('$less_or_equal'/2, (public)) :
'$less_or_equal'/2 :
        comment(('$less_or_equal'(A, B):-'$less_or_equal'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$less_or_equal'(A, B):-['$less_or_equal'(A, B)])).
        inline('$less_or_equal'(a(1), a(2))).
        execute(cont).
end_predicate('$less_or_equal'/2).

begin_predicate((>)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (>)/2, 'builtins.pl']).
main((>)/2, (public)) :
(>)/2 :
        comment((A>B:-A>B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A>B:-['$greater_than'(A, B)])).
        inline('$greater_than'(a(1), a(2))).
        execute(cont).
end_predicate((>)/2).

begin_predicate('$greater_than'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$greater_than'/2, 'builtins.pl']).
main('$greater_than'/2, (public)) :
'$greater_than'/2 :
        comment(('$greater_than'(A, B):-'$greater_than'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$greater_than'(A, B):-['$greater_than'(A, B)])).
        inline('$greater_than'(a(1), a(2))).
        execute(cont).
end_predicate('$greater_than'/2).

begin_predicate((>=)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (>=)/2, 'builtins.pl']).
main((>=)/2, (public)) :
(>=)/2 :
        comment((A>=B:-A>=B)).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((A>=B:-['$greater_or_equal'(A, B)])).
        inline('$greater_or_equal'(a(1), a(2))).
        execute(cont).
end_predicate((>=)/2).

begin_predicate('$greater_or_equal'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$greater_or_equal'/2, 'builtins.pl']).
main('$greater_or_equal'/2, (public)) :
'$greater_or_equal'/2 :
        comment(('$greater_or_equal'(A, B):-'$greater_or_equal'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$greater_or_equal'(A, B):-['$greater_or_equal'(A, B)])).
        inline('$greater_or_equal'(a(1), a(2))).
        execute(cont).
end_predicate('$greater_or_equal'/2).

begin_predicate(clause/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([clause/2, 'builtins.pl']).
main(clause/2, (public)) :
        put_con((:)/2, s(1)).
        put_con(clause/2, s(2)).
        put_con(access, s(3)).
        put_con(private_procedure, s(4)).
        put_con((:-)/2, s(5)).
clause/2 :
        comment((clause(A, B):-'$head_to_term'(A, C, D:E, clause(A, B)), '$new_internal_database'(D), '$check_procedure_permission'(D:E, access, private_procedure, clause(A, B)), '$clause_internal'(D, E, C, F, G), copy_term(F, (C:-B)))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((clause(A, B):-['$head_to_term'(A, C, D:E, clause(A, B)), '$new_internal_database'(D), '$check_procedure_permission'(D:E, access, private_procedure, clause(A, B)), '$clause_internal'(D, E, C, F, G), copy_term(F, (C:-B))])).
        put_var(a(3)).
        put_var(a(4)).
        put_var(a(5)).
        put_str_args([a(4), a(5)], y(1)).
        put_str(s(1), y(1), a(6)).
        put_str_args([a(1), a(2)], y(2)).
        put_str(s(2), y(2), a(7)).
        put_str_args([a(4), a(5)], y(3)).
        put_str(s(1), y(3), a(8)).
        put_str_args([a(1), a(2)], y(4)).
        put_str(s(2), y(4), a(9)).
        put_var(a(10)).
        put_str_args([a(3), a(2)], y(5)).
        put_str(s(5), y(5), a(11)).
        put_cont(copy_term(a(10), a(11), cont), p(1)).
        put_cont('$clause_internal'(a(4), a(5), a(3), a(10), void, p(1)), p(2)).
        put_cont('$check_procedure_permission'(a(8), s(3), s(4), a(9), p(2)), p(3)).
        put_cont('$new_internal_database'(a(4), p(3)), p(4)).
        execute('$head_to_term'(a(1), a(3), a(6), a(7), p(4))).
end_predicate(clause/2).

begin_predicate('$head_to_term'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$head_to_term'/4, 'builtins.pl']).
main('$head_to_term'/4, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(/ / 2, s(2)).
        put_con(user, s(3)).
'$head_to_term'/4 :
        comment(('$head_to_term'(A, B, C:D/E, F):-'$head_to_term'(A, B, user, C, F), functor(B, D, E))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$head_to_term'(A, B, C:D/E, F):-['$head_to_term'(A, B, user, C, F), functor(B, D, E)])).
        get_str((:)/2, s(1), a(3)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str(/ / 2, s(2), a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        put_cont(functor(a(2), a(7), a(8), cont), p(1)).
        execute('$head_to_term'(a(1), a(2), s(3), a(5), a(4), p(1))).
end_predicate('$head_to_term'/4).

begin_predicate('$head_to_term'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$head_to_term'/5, 'builtins.pl']).
main('$head_to_term'/5, non- (public)) :
        put_con(var, s(1)).
        put_int(1, si(2)).
        put_con((:)/2, s(3)).
        put_con(type/1, s(4)).
        put_con(callable, s(5)).
        put_str_args([s(5)], s(6)).
        put_str(s(4), s(6), s(7)).
        label('$head_to_term'/5+top).
        label('$head_to_term'/5+var).
        label('$head_to_term'/5+var+1).
        label('$head_to_term'/5+var+2).
        label('$head_to_term'/5+var+3).
        label('$head_to_term'/5+int).
        label('$head_to_term'/5+int+1).
        label('$head_to_term'/5+int+2).
        label('$head_to_term'/5+1).
        label('$head_to_term'/5+2).
        label('$head_to_term'/5+3).
        label('$head_to_term'/5+4).
'$head_to_term'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$head_to_term'/5+top).
'$head_to_term'/5+top :
        setB0.
        switch_on_term('$head_to_term'/5+var, '$head_to_term'/5+int, '$head_to_term'/5+int, '$head_to_term'/5+int, '$head_to_term'/5+var, '$head_to_term'/5+int).
'$head_to_term'/5+var :
        try('$head_to_term'/5+1, '$head_to_term'/5+var+1).
'$head_to_term'/5+var+1 :
        retry('$head_to_term'/5+2, '$head_to_term'/5+var+2).
'$head_to_term'/5+var+2 :
        retry('$head_to_term'/5+3, '$head_to_term'/5+var+3).
'$head_to_term'/5+var+3 :
        trust('$head_to_term'/5+4).
'$head_to_term'/5+int :
        try('$head_to_term'/5+1, '$head_to_term'/5+int+1).
'$head_to_term'/5+int+1 :
        retry('$head_to_term'/5+3, '$head_to_term'/5+int+2).
'$head_to_term'/5+int+2 :
        trust('$head_to_term'/5+4).
'$head_to_term'/5+1 :
        comment(('$head_to_term'(A, B, C, D, E):-var(A), !, illarg(var, E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$head_to_term'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(1))).
        inline('$cut'(a(6))).
        execute(illarg(s(1), a(5), si(2), cont)).
'$head_to_term'/5+2 :
        comment(('$head_to_term'(A:B, C, D, E, F):-!, '$head_to_term'(B, C, A, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$head_to_term'(A:B, C, D, E, F):-['$neck_cut', '$head_to_term'(B, C, A, E, F)])).
        get_str((:)/2, s(3), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        set(a(7), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$head_to_term'/5+top).
'$head_to_term'/5+3 :
        comment(('$head_to_term'(A, A, B, B, C):-callable(A), atom(B), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$head_to_term'(A, A, B, B, C):-['$get_level'(D), callable(A), atom(B), '$cut'(D)])).
        get_val(a(1), a(2)).
        get_val(a(3), a(4)).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_cont('$cut'(a(6), cont), p(1)).
        put_cont(atom(a(3), p(1)), p(2)).
        execute(callable(a(1), p(2))).
'$head_to_term'/5+4 :
        comment(('$head_to_term'(A, B, C, D, E):-illarg(type(callable), E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$head_to_term'(A, B, C, D, E):-[illarg(type(callable), E, 1)])).
        execute(illarg(s(7), a(5), si(2), cont)).
end_predicate('$head_to_term'/5).

begin_predicate('$new_internal_database'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$new_internal_database'/1, 'builtins.pl']).
main('$new_internal_database'/1, non- (public)) :
'$new_internal_database'/1 :
        comment(('$new_internal_database'(A):-atom(A), '$get_hash_manager'(B), '$new_internal_database'(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment(('$new_internal_database'(A):-[atom(A), '$get_hash_manager'(B), '$new_internal_database'(B, A)])).
        inline(atom(a(1))).
        put_var(a(2)).
        put_cont('$new_internal_database'(a(2), a(1), cont), p(1)).
        execute('$get_hash_manager'(a(2), p(1))).
end_predicate('$new_internal_database'/1).

begin_predicate('$new_internal_database'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$new_internal_database'/2, 'builtins.pl']).
main('$new_internal_database'/2, non- (public)) :
        put_con(alias/1, s(1)).
        put_con([], s(2)).
        label('$new_internal_database'/2+sub+1).
        label('$new_internal_database'/2+1).
        label('$new_internal_database'/2+2).
'$new_internal_database'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$new_internal_database'/2+1, '$new_internal_database'/2+sub+1).
'$new_internal_database'/2+sub+1 :
        trust('$new_internal_database'/2+2).
'$new_internal_database'/2+1 :
        comment(('$new_internal_database'(A, B):-hash_contains_key(A, B), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$new_internal_database'(A, B):-['$get_level'(C), hash_contains_key(A, B), '$cut'(C)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_cont('$cut'(a(3), cont), p(1)).
        execute(hash_contains_key(a(1), a(2), p(1))).
'$new_internal_database'/2+2 :
        comment(('$new_internal_database'(A, B):-new_hash(C, [alias(B)]), '$init_internal_database'(B))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$new_internal_database'(A, B):-[new_hash(C, [alias(B)]), '$init_internal_database'(B)])).
        put_str_args([a(2)], y(1)).
        put_str(s(1), y(1), a(3)).
        put_list(a(3), s(2), a(4)).
        put_cont('$init_internal_database'(a(2), cont), p(1)).
        execute(new_hash(void, a(4), p(1))).
end_predicate('$new_internal_database'/2).

begin_predicate('$init_internal_database'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$init_internal_database'/1, 'builtins.pl']).
main('$init_internal_database'/1, non- (public)) :
        put_con('$init', s(1)).
        put_int(0, si(2)).
        put_con((:)/2, s(3)).
        label('$init_internal_database'/1+sub+1).
        label('$init_internal_database'/1+1).
        label('$init_internal_database'/1+2).
'$init_internal_database'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$init_internal_database'/1+1, '$init_internal_database'/1+sub+1).
'$init_internal_database'/1+sub+1 :
        trust('$init_internal_database'/1+2).
'$init_internal_database'/1+1 :
        comment(('$init_internal_database'(A):-'$compiled_predicate'(A, '$init', 0), call(A:'$init'), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$init_internal_database'(A):-['$get_level'(B), '$compiled_predicate'(A, '$init', 0), call(A:'$init'), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_str_args([a(1), s(1)], y(1)).
        put_str(s(3), y(1), a(3)).
        put_cont('$cut'(a(2), cont), p(1)).
        put_cont(call(a(3), p(1)), p(2)).
        execute('$compiled_predicate'(a(1), s(1), si(2), p(2))).
'$init_internal_database'/1+2 :
        comment(('$init_internal_database'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$init_internal_database'(A):-[])).
        execute(cont).
end_predicate('$init_internal_database'/1).

begin_predicate('$defined_internal_database'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$defined_internal_database'/1, 'builtins.pl']).
main('$defined_internal_database'/1, non- (public)) :
'$defined_internal_database'/1 :
        comment(('$defined_internal_database'(A):-atom(A), '$get_hash_manager'(B), hash_contains_key(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment(('$defined_internal_database'(A):-[atom(A), '$get_hash_manager'(B), hash_contains_key(B, A)])).
        inline(atom(a(1))).
        put_var(a(2)).
        put_cont(hash_contains_key(a(2), a(1), cont), p(1)).
        execute('$get_hash_manager'(a(2), p(1))).
end_predicate('$defined_internal_database'/1).

begin_predicate('$clause_internal'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$clause_internal'/5, 'builtins.pl']).
main('$clause_internal'/5, non- (public)) :
'$clause_internal'/5 :
        comment(('$clause_internal'(A, B, C, D, E):-hash_contains_key(A, B), '$get_indices'(A, B, C, F), '$get_instances'(F, G), '$clause_internal0'(G, D, E))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        set(arg(5), a(5)).
        comment(('$clause_internal'(A, B, C, D, E):-[hash_contains_key(A, B), '$get_indices'(A, B, C, F), '$get_instances'(F, G), '$clause_internal0'(G, D, E)])).
        put_var(a(6)).
        put_var(a(7)).
        put_cont('$clause_internal0'(a(7), a(4), a(5), cont), p(1)).
        put_cont('$get_instances'(a(6), a(7), p(1)), p(2)).
        put_cont('$get_indices'(a(1), a(2), a(3), a(6), p(2)), p(3)).
        execute(hash_contains_key(a(1), a(2), p(3))).
end_predicate('$clause_internal'/5).

begin_predicate('$clause_internal0'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$clause_internal0'/3, 'builtins.pl']).
main('$clause_internal0'/3, non- (public)) :
        put_con([], s(1)).
        put_con((',')/2, s(2)).
        label('$clause_internal0'/3+var).
        label('$clause_internal0'/3+var+1).
        label('$clause_internal0'/3+var+2).
        label('$clause_internal0'/3+con).
        label('$clause_internal0'/3+con+1).
        label('$clause_internal0'/3+lis).
        label('$clause_internal0'/3+lis+1).
        label('$clause_internal0'/3+1).
        label('$clause_internal0'/3+2).
        label('$clause_internal0'/3+3).
'$clause_internal0'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$clause_internal0'/3+var, '$clause_internal0'/3+3, '$clause_internal0'/3+3, '$clause_internal0'/3+con, '$clause_internal0'/3+3, '$clause_internal0'/3+lis).
'$clause_internal0'/3+var :
        try('$clause_internal0'/3+1, '$clause_internal0'/3+var+1).
'$clause_internal0'/3+var+1 :
        retry('$clause_internal0'/3+2, '$clause_internal0'/3+var+2).
'$clause_internal0'/3+var+2 :
        trust('$clause_internal0'/3+3).
'$clause_internal0'/3+con :
        try('$clause_internal0'/3+1, '$clause_internal0'/3+con+1).
'$clause_internal0'/3+con+1 :
        trust('$clause_internal0'/3+3).
'$clause_internal0'/3+lis :
        try('$clause_internal0'/3+2, '$clause_internal0'/3+lis+1).
'$clause_internal0'/3+lis+1 :
        trust('$clause_internal0'/3+3).
'$clause_internal0'/3+1 :
        comment(('$clause_internal0'([], A, B):-fail)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$clause_internal0'([], A, B):-[fail])).
        get_con([], s(1), a(1)).
        inline(fail).
'$clause_internal0'/3+2 :
        comment(('$clause_internal0'([ (A, B)], A, B):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$clause_internal0'([ (A, B)], A, B):-['$neck_cut'])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_con([], s(1)).
        get_str((',')/2, s(2), a(4)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_val(a(5), a(2)).
        get_val(a(6), a(3)).
        inline('$neck_cut').
        execute(cont).
'$clause_internal0'/3+3 :
        comment(('$clause_internal0'(A, B, C):-'$builtin_member'((B, C), A))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$clause_internal0'(A, B, C):-['$builtin_member'((B, C), A)])).
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(2), y(1), a(4)).
        execute('$builtin_member'(a(4), a(1), cont)).
end_predicate('$clause_internal0'/3).

begin_predicate('$dummy_6_builtins.pl'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_6_builtins.pl'/3, 'builtins.pl']).
main('$dummy_6_builtins.pl'/3, non- (public)) :
        put_con(var, s(1)).
        label('$dummy_6_builtins.pl'/3+sub+1).
        label('$dummy_6_builtins.pl'/3+1).
        label('$dummy_6_builtins.pl'/3+2).
'$dummy_6_builtins.pl'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dummy_6_builtins.pl'/3+1, '$dummy_6_builtins.pl'/3+sub+1).
'$dummy_6_builtins.pl'/3+sub+1 :
        trust('$dummy_6_builtins.pl'/3+2).
'$dummy_6_builtins.pl'/3+1 :
        comment(('$dummy_6_builtins.pl'(A, B, C):-hash_contains_key(B, C), !, hash_get(B, C, A))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_6_builtins.pl'(A, B, C):-['$get_level'(D), hash_contains_key(B, C), '$cut'(D), hash_get(B, C, A)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont(hash_get(a(2), a(3), a(1), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute(hash_contains_key(a(2), a(3), p(2))).
'$dummy_6_builtins.pl'/3+2 :
        comment(('$dummy_6_builtins.pl'(A, B, C):-hash_get(B, var, A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_6_builtins.pl'(A, B, C):-[hash_get(B, var, A)])).
        execute(hash_get(a(2), s(1), a(1), cont)).
end_predicate('$dummy_6_builtins.pl'/3).

begin_predicate('$get_indices'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$get_indices'/4, 'builtins.pl']).
main('$get_indices'/4, non- (public)) :
'$get_indices'/4 :
        comment(('$get_indices'(A, B, C, D):-'$new_indexing_hash'(A, B, E), '$calc_indexing_key'(C, F), '$dummy_6_builtins.pl'(D, E, F))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$get_indices'(A, B, C, D):-['$new_indexing_hash'(A, B, E), '$calc_indexing_key'(C, F), '$dummy_6_builtins.pl'(D, E, F)])).
        put_var(a(5)).
        put_var(a(6)).
        put_cont('$dummy_6_builtins.pl'(a(4), a(5), a(6), cont), p(1)).
        put_cont('$calc_indexing_key'(a(3), a(6), p(1)), p(2)).
        execute('$new_indexing_hash'(a(1), a(2), a(5), p(2))).
end_predicate('$get_indices'/4).

begin_predicate('$new_indexing_hash'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$new_indexing_hash'/3, 'builtins.pl']).
main('$new_indexing_hash'/3, (public)) :
        put_con(all, s(1)).
        put_con([], s(2)).
        put_con(var, s(3)).
        put_con(lis, s(4)).
        put_con(str, s(5)).
        label('$new_indexing_hash'/3+sub+1).
        label('$new_indexing_hash'/3+1).
        label('$new_indexing_hash'/3+2).
'$new_indexing_hash'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$new_indexing_hash'/3+1, '$new_indexing_hash'/3+sub+1).
'$new_indexing_hash'/3+sub+1 :
        trust('$new_indexing_hash'/3+2).
'$new_indexing_hash'/3+1 :
        comment(('$new_indexing_hash'(A, B, C):-hash_contains_key(A, B), !, hash_get(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$new_indexing_hash'(A, B, C):-['$get_level'(D), hash_contains_key(A, B), '$cut'(D), hash_get(A, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont(hash_get(a(1), a(2), a(3), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute(hash_contains_key(a(1), a(2), p(2))).
'$new_indexing_hash'/3+2 :
        comment(('$new_indexing_hash'(A, B, C):-new_hash(C), hash_put(C, all, []), hash_put(C, var, []), hash_put(C, lis, []), hash_put(C, str, []), hash_put(A, B, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$new_indexing_hash'(A, B, C):-[new_hash(C), hash_put(C, all, []), hash_put(C, var, []), hash_put(C, lis, []), hash_put(C, str, []), hash_put(A, B, C)])).
        put_cont(hash_put(a(1), a(2), a(3), cont), p(1)).
        put_cont(hash_put(a(3), s(5), s(2), p(1)), p(2)).
        put_cont(hash_put(a(3), s(4), s(2), p(2)), p(3)).
        put_cont(hash_put(a(3), s(3), s(2), p(3)), p(4)).
        put_cont(hash_put(a(3), s(1), s(2), p(4)), p(5)).
        execute(new_hash(a(3), p(5))).
end_predicate('$new_indexing_hash'/3).

begin_predicate('$calc_indexing_key'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$calc_indexing_key'/2, 'builtins.pl']).
main('$calc_indexing_key'/2, non- (public)) :
        put_con(all, s(1)).
        put_int(1, si(2)).
        label('$calc_indexing_key'/2+sub+1).
        label('$calc_indexing_key'/2+1).
        label('$calc_indexing_key'/2+2).
'$calc_indexing_key'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$calc_indexing_key'/2+1, '$calc_indexing_key'/2+sub+1).
'$calc_indexing_key'/2+sub+1 :
        trust('$calc_indexing_key'/2+2).
'$calc_indexing_key'/2+1 :
        comment(('$calc_indexing_key'(A, all):-atom(A), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$calc_indexing_key'(A, all):-['$get_level'(B), atom(A), '$cut'(B)])).
        get_con(all, s(1), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(atom(a(1))).
        inline('$cut'(a(3))).
        execute(cont).
'$calc_indexing_key'/2+2 :
        comment(('$calc_indexing_key'(A, B):-arg(1, A, C), '$calc_indexing_key0'(C, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$calc_indexing_key'(A, B):-[arg(1, A, C), '$calc_indexing_key0'(C, B)])).
        put_var(a(3)).
        put_cont('$calc_indexing_key0'(a(3), a(2), cont), p(1)).
        execute(arg(si(2), a(1), a(3), p(1))).
end_predicate('$calc_indexing_key'/2).

begin_predicate('$calc_indexing_key0'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$calc_indexing_key0'/2, 'builtins.pl']).
main('$calc_indexing_key0'/2, non- (public)) :
        put_con(all, s(1)).
        put_con(lis, s(2)).
        put_con(str, s(3)).
        put_con(type/1, s(4)).
        put_con(term, s(5)).
        put_str_args([s(5)], s(6)).
        put_str(s(4), s(6), s(7)).
        put_con('$calc_indexing_key0'/2, s(8)).
        put_int(1, si(9)).
        label('$calc_indexing_key0'/2+sub+1).
        label('$calc_indexing_key0'/2+sub+2).
        label('$calc_indexing_key0'/2+sub+3).
        label('$calc_indexing_key0'/2+sub+4).
        label('$calc_indexing_key0'/2+1).
        label('$calc_indexing_key0'/2+2).
        label('$calc_indexing_key0'/2+3).
        label('$calc_indexing_key0'/2+4).
        label('$calc_indexing_key0'/2+5).
'$calc_indexing_key0'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$calc_indexing_key0'/2+1, '$calc_indexing_key0'/2+sub+1).
'$calc_indexing_key0'/2+sub+1 :
        retry('$calc_indexing_key0'/2+2, '$calc_indexing_key0'/2+sub+2).
'$calc_indexing_key0'/2+sub+2 :
        retry('$calc_indexing_key0'/2+3, '$calc_indexing_key0'/2+sub+3).
'$calc_indexing_key0'/2+sub+3 :
        retry('$calc_indexing_key0'/2+4, '$calc_indexing_key0'/2+sub+4).
'$calc_indexing_key0'/2+sub+4 :
        trust('$calc_indexing_key0'/2+5).
'$calc_indexing_key0'/2+1 :
        comment(('$calc_indexing_key0'(A, all):-var(A), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$calc_indexing_key0'(A, all):-['$get_level'(B), var(A), '$cut'(B)])).
        get_con(all, s(1), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        execute(cont).
'$calc_indexing_key0'/2+2 :
        comment(('$calc_indexing_key0'(A, lis):-A=[B|C], !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$calc_indexing_key0'(A, lis):-['$get_level'(B), '$unify'(A, [C|D]), '$cut'(B)])).
        get_con(lis, s(2), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_list(void, void, a(4)).
        inline('$unify'(a(1), a(4))).
        inline('$cut'(a(3))).
        execute(cont).
'$calc_indexing_key0'/2+3 :
        comment(('$calc_indexing_key0'(A, str):-compound(A), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$calc_indexing_key0'(A, str):-['$get_level'(B), compound(A), '$cut'(B)])).
        get_con(str, s(3), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_cont('$cut'(a(3), cont), p(1)).
        execute(compound(a(1), p(1))).
'$calc_indexing_key0'/2+4 :
        comment(('$calc_indexing_key0'(A, B):-ground(A), !, '$term_hash'(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$calc_indexing_key0'(A, B):-['$get_level'(C), ground(A), '$cut'(C), '$term_hash'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(ground(a(1))).
        inline('$cut'(a(3))).
        execute('$term_hash'(a(1), a(2), cont)).
'$calc_indexing_key0'/2+5 :
        comment(('$calc_indexing_key0'(A, B):-illarg(type(term), '$calc_indexing_key0'(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$calc_indexing_key0'(A, B):-[illarg(type(term), '$calc_indexing_key0'(A, B), 1)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(8), y(1), a(3)).
        execute(illarg(s(7), a(3), si(9), cont)).
end_predicate('$calc_indexing_key0'/2).

begin_predicate('$check_procedure_permission'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$check_procedure_permission'/4, 'builtins.pl']).
main('$check_procedure_permission'/4, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(/ / 2, s(2)).
        put_con(permission/4, s(3)).
        label('$check_procedure_permission'/4+var).
        label('$check_procedure_permission'/4+var+1).
        label('$check_procedure_permission'/4+var+2).
        label('$check_procedure_permission'/4+1).
        label('$check_procedure_permission'/4+2).
        label('$check_procedure_permission'/4+3).
'$check_procedure_permission'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        switch_on_term('$check_procedure_permission'/4+var, '$check_procedure_permission'/4+3, '$check_procedure_permission'/4+3, '$check_procedure_permission'/4+3, '$check_procedure_permission'/4+var, '$check_procedure_permission'/4+3).
'$check_procedure_permission'/4+var :
        try('$check_procedure_permission'/4+1, '$check_procedure_permission'/4+var+1).
'$check_procedure_permission'/4+var+1 :
        retry('$check_procedure_permission'/4+2, '$check_procedure_permission'/4+var+2).
'$check_procedure_permission'/4+var+2 :
        trust('$check_procedure_permission'/4+3).
'$check_procedure_permission'/4+1 :
        comment(('$check_procedure_permission'(A:B/C, D, E, F):-hash_contains_key(A, B/C), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$check_procedure_permission'(A:B/C, D, E, F):-['$get_level'(G), hash_contains_key(A, B/C), '$cut'(G)])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str(/ / 2, s(2), a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        put_str_args([a(7), a(8)], y(1)).
        put_str(s(2), y(1), a(10)).
        put_cont('$cut'(a(9), cont), p(1)).
        execute(hash_contains_key(a(5), a(10), p(1))).
'$check_procedure_permission'/4+2 :
        comment(('$check_procedure_permission'(A:B/C, D, E, F):-'$compiled_predicate_or_builtin'(A, B, C), !, illarg(permission(D, E, A:B/C, G), F, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$check_procedure_permission'(A:B/C, D, E, F):-['$get_level'(G), '$compiled_predicate_or_builtin'(A, B, C), '$cut'(G), illarg(permission(D, E, A:B/C, H), F, I)])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str(/ / 2, s(2), a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        put_str_args([a(7), a(8)], y(1)).
        put_str(s(2), y(1), a(10)).
        put_str_args([a(5), a(10)], y(2)).
        put_str(s(1), y(2), a(11)).
        put_str_args([a(2), a(3), a(11), void], y(3)).
        put_str(s(3), y(3), a(12)).
        put_cont(illarg(a(12), a(4), void, cont), p(1)).
        put_cont('$cut'(a(9), p(1)), p(2)).
        execute('$compiled_predicate_or_builtin'(a(5), a(7), a(8), p(2))).
'$check_procedure_permission'/4+3 :
        comment(('$check_procedure_permission'(A, B, C, D):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$check_procedure_permission'(A, B, C, D):-[])).
        execute(cont).
end_predicate('$check_procedure_permission'/4).

begin_predicate('$compiled_predicate'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$compiled_predicate'/3, 'builtins.pl']).
main('$compiled_predicate'/3, non- (public)) :
'$compiled_predicate'/3 :
        comment(('$compiled_predicate'(A, B, C):-'$INSERT_AM'([deref(a(1), a(1)), deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! engine.pcl.definedPredicate(((SymbolTerm)a1).name(), ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();']))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$compiled_predicate'(A, B, C):-['$INSERT_AM'([deref(a(1), a(1)), deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! engine.pcl.definedPredicate(((SymbolTerm)a1).name(), ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();'])])).
        deref(a(1), a(1)).
        deref(a(2), a(2)).
        deref(a(3), a(3)).
        '$INSERT'(['\tif(! engine.pcl.definedPredicate(((SymbolTerm)a1).name(), ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();']).
        execute(cont).
end_predicate('$compiled_predicate'/3).

begin_predicate('$compiled_predicate_or_builtin'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$compiled_predicate_or_builtin'/3, 'builtins.pl']).
main('$compiled_predicate_or_builtin'/3, non- (public)) :
'$compiled_predicate_or_builtin'/3 :
        comment(('$compiled_predicate_or_builtin'(A, B, C):-'$INSERT_AM'([deref(a(1), a(1)), deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! engine.pcl.definedPredicate(((SymbolTerm)a1).name(), ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()) && ! engine.pcl.definedPredicate("jp.ac.kobe_u.cs.prolog.builtin", ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();']))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$compiled_predicate_or_builtin'(A, B, C):-['$INSERT_AM'([deref(a(1), a(1)), deref(a(2), a(2)), deref(a(3), a(3))]), '$INSERT'(['\tif(! engine.pcl.definedPredicate(((SymbolTerm)a1).name(), ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()) && ! engine.pcl.definedPredicate("jp.ac.kobe_u.cs.prolog.builtin", ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();'])])).
        deref(a(1), a(1)).
        deref(a(2), a(2)).
        deref(a(3), a(3)).
        '$INSERT'(['\tif(! engine.pcl.definedPredicate(((SymbolTerm)a1).name(), ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()) && ! engine.pcl.definedPredicate("jp.ac.kobe_u.cs.prolog.builtin", ((SymbolTerm)a2).name(), ((IntegerTerm)a3).intValue()))', '\t\treturn engine.fail();']).
        execute(cont).
end_predicate('$compiled_predicate_or_builtin'/3).

begin_predicate((initialization)/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (initialization)/2, 'builtins.pl']).
main((initialization)/2, (public)) :
        put_con([], s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        label(fail/0).
        label((initialization)/2+var).
        label((initialization)/2+var+1).
        label((initialization)/2+1).
        label((initialization)/2+2).
(initialization)/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term((initialization)/2+var, fail/0, fail/0, (initialization)/2+1, fail/0, (initialization)/2+2).
(initialization)/2+var :
        try((initialization)/2+1, (initialization)/2+var+1).
(initialization)/2+var+1 :
        trust((initialization)/2+2).
(initialization)/2+1 :
        comment((initialization([], A):-!, call(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((initialization([], A):-['$neck_cut', call('jp.ac.kobe_u.cs.prolog.builtin':A)])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        put_str_args([s(3), a(2)], y(1)).
        put_str(s(2), y(1), a(3)).
        execute(call(a(3), cont)).
(initialization)/2+2 :
        comment((initialization([A|B], C):-'$new_internal_database'(A), initialization(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((initialization([A|B], C):-['$new_internal_database'(A), initialization(B, C)])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        put_cont(initialization(a(4), a(2), cont), p(1)).
        execute('$new_internal_database'(a(3), p(1))).
end_predicate((initialization)/2).

begin_predicate(assert/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([assert/1, 'builtins.pl']).
main(assert/1, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
assert/1 :
        comment((assert(A):-assertz(A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        comment((assert(A):-[assertz('jp.ac.kobe_u.cs.prolog.builtin':A)])).
        put_str_args([s(2), a(1)], y(1)).
        put_str(s(1), y(1), a(2)).
        execute(assertz(a(2), cont)).
end_predicate(assert/1).

begin_predicate(assertz/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([assertz/1, 'builtins.pl']).
main(assertz/1, (public)) :
        put_con((:)/2, s(1)).
        put_con(assertz/1, s(2)).
        put_con(modify, s(3)).
        put_con(static_procedure, s(4)).
        put_con(z, s(5)).
        label(assertz/1+sub+1).
        label(assertz/1+1).
        label(assertz/1+2).
assertz/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try(assertz/1+1, assertz/1+sub+1).
assertz/1+sub+1 :
        trust(assertz/1+2).
assertz/1+1 :
        comment((assertz(A):-'$term_to_clause'(A, B, C:D, assertz(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, modify, static_procedure, assertz(A)), copy_term(B, E), '$insert'(E, F), '$update_indexing'(C, D, B, F, z), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((assertz(A):-['$term_to_clause'(A, B, C:D, assertz(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, modify, static_procedure, assertz(A)), copy_term(B, E), '$insert'(E, F), '$update_indexing'(C, D, B, F, z), fail])).
        put_var(a(2)).
        put_var(a(3)).
        put_var(a(4)).
        put_str_args([a(3), a(4)], y(1)).
        put_str(s(1), y(1), a(5)).
        put_str_args([a(1)], y(2)).
        put_str(s(2), y(2), a(6)).
        put_str_args([a(3), a(4)], y(3)).
        put_str(s(1), y(3), a(7)).
        put_str_args([a(1)], y(4)).
        put_str(s(2), y(4), a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_cont(fail(cont), p(1)).
        put_cont('$update_indexing'(a(3), a(4), a(2), a(10), s(5), p(1)), p(2)).
        put_cont('$insert'(a(9), a(10), p(2)), p(3)).
        put_cont(copy_term(a(2), a(9), p(3)), p(4)).
        put_cont('$check_procedure_permission'(a(7), s(3), s(4), a(8), p(4)), p(5)).
        put_cont('$new_internal_database'(a(3), p(5)), p(6)).
        execute('$term_to_clause'(a(1), a(2), a(5), a(6), p(6))).
assertz/1+2 :
        comment((assertz(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((assertz(A):-[])).
        execute(cont).
end_predicate(assertz/1).

begin_predicate(asserta/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([asserta/1, 'builtins.pl']).
main(asserta/1, (public)) :
        put_con((:)/2, s(1)).
        put_con(asserta/1, s(2)).
        put_con(modify, s(3)).
        put_con(static_procedure, s(4)).
        put_con(a, s(5)).
        label(asserta/1+sub+1).
        label(asserta/1+1).
        label(asserta/1+2).
asserta/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try(asserta/1+1, asserta/1+sub+1).
asserta/1+sub+1 :
        trust(asserta/1+2).
asserta/1+1 :
        comment((asserta(A):-'$term_to_clause'(A, B, C:D, asserta(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, modify, static_procedure, asserta(A)), copy_term(B, E), '$insert'(E, F), '$update_indexing'(C, D, B, F, a), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((asserta(A):-['$term_to_clause'(A, B, C:D, asserta(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, modify, static_procedure, asserta(A)), copy_term(B, E), '$insert'(E, F), '$update_indexing'(C, D, B, F, a), fail])).
        put_var(a(2)).
        put_var(a(3)).
        put_var(a(4)).
        put_str_args([a(3), a(4)], y(1)).
        put_str(s(1), y(1), a(5)).
        put_str_args([a(1)], y(2)).
        put_str(s(2), y(2), a(6)).
        put_str_args([a(3), a(4)], y(3)).
        put_str(s(1), y(3), a(7)).
        put_str_args([a(1)], y(4)).
        put_str(s(2), y(4), a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_cont(fail(cont), p(1)).
        put_cont('$update_indexing'(a(3), a(4), a(2), a(10), s(5), p(1)), p(2)).
        put_cont('$insert'(a(9), a(10), p(2)), p(3)).
        put_cont(copy_term(a(2), a(9), p(3)), p(4)).
        put_cont('$check_procedure_permission'(a(7), s(3), s(4), a(8), p(4)), p(5)).
        put_cont('$new_internal_database'(a(3), p(5)), p(6)).
        execute('$term_to_clause'(a(1), a(2), a(5), a(6), p(6))).
asserta/1+2 :
        comment((asserta(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((asserta(A):-[])).
        execute(cont).
end_predicate(asserta/1).

begin_predicate(abolish/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([abolish/1, 'builtins.pl']).
main(abolish/1, (public)) :
        put_con((:)/2, s(1)).
        put_con(abolish/1, s(2)).
        put_con(modify, s(3)).
        put_con(static_procedure, s(4)).
        put_con(all, s(5)).
        label(abolish/1+sub+1).
        label(abolish/1+1).
        label(abolish/1+2).
abolish/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try(abolish/1+1, abolish/1+sub+1).
abolish/1+sub+1 :
        trust(abolish/1+2).
abolish/1+1 :
        comment((abolish(A):-'$term_to_predicateindicator'(A, B:C, abolish(A)), '$new_internal_database'(B), '$check_procedure_permission'(B:C, modify, static_procedure, abolish(A)), '$new_indexing_hash'(B, C, D), hash_get(D, all, E), '$erase_all'(E), hash_remove(B, C), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((abolish(A):-['$term_to_predicateindicator'(A, B:C, abolish(A)), '$new_internal_database'(B), '$check_procedure_permission'(B:C, modify, static_procedure, abolish(A)), '$new_indexing_hash'(B, C, D), hash_get(D, all, E), '$erase_all'(E), hash_remove(B, C), fail])).
        put_var(a(2)).
        put_var(a(3)).
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(1), y(1), a(4)).
        put_str_args([a(1)], y(2)).
        put_str(s(2), y(2), a(5)).
        put_str_args([a(2), a(3)], y(3)).
        put_str(s(1), y(3), a(6)).
        put_str_args([a(1)], y(4)).
        put_str(s(2), y(4), a(7)).
        put_var(a(8)).
        put_var(a(9)).
        put_cont(fail(cont), p(1)).
        put_cont(hash_remove(a(2), a(3), p(1)), p(2)).
        put_cont('$erase_all'(a(9), p(2)), p(3)).
        put_cont(hash_get(a(8), s(5), a(9), p(3)), p(4)).
        put_cont('$new_indexing_hash'(a(2), a(3), a(8), p(4)), p(5)).
        put_cont('$check_procedure_permission'(a(6), s(3), s(4), a(7), p(5)), p(6)).
        put_cont('$new_internal_database'(a(2), p(6)), p(7)).
        execute('$term_to_predicateindicator'(a(1), a(4), a(5), p(7))).
abolish/1+2 :
        comment((abolish(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((abolish(A):-[])).
        execute(cont).
end_predicate(abolish/1).

begin_predicate(retract/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([retract/1, 'builtins.pl']).
main(retract/1, (public)) :
        put_con((:)/2, s(1)).
        put_con(retract/1, s(2)).
        put_con(access, s(3)).
        put_con(static_procedure, s(4)).
        put_con((:-)/2, s(5)).
retract/1 :
        comment((retract(A):-'$clause_to_term'(A, B, C:D, retract(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, access, static_procedure, retract(A)), B= (E:-F), '$clause_internal'(C, D, E, G, H), copy_term(G, B), '$erase'(H), '$rehash_indexing'(C, D, H))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7)]).
        set(arg(1), a(1)).
        comment((retract(A):-['$clause_to_term'(A, B, C:D, retract(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, access, static_procedure, retract(A)), '$unify'(B, (E:-F)), '$clause_internal'(C, D, E, G, H), copy_term(G, B), '$erase'(H), '$rehash_indexing'(C, D, H)])).
        put_var(a(2)).
        put_var(a(3)).
        put_var(a(4)).
        put_str_args([a(3), a(4)], y(1)).
        put_str(s(1), y(1), a(5)).
        put_str_args([a(1)], y(2)).
        put_str(s(2), y(2), a(6)).
        put_str_args([a(3), a(4)], y(3)).
        put_str(s(1), y(3), a(7)).
        put_str_args([a(1)], y(4)).
        put_str(s(2), y(4), a(8)).
        put_var(a(9)).
        put_str_args([a(9), void], y(5)).
        put_str(s(5), y(5), a(10)).
        put_var(a(11)).
        put_var(a(12)).
        put_cont('$rehash_indexing'(a(3), a(4), a(12), cont), p(1)).
        put_cont('$erase'(a(12), p(1)), p(2)).
        put_cont(copy_term(a(11), a(2), p(2)), p(3)).
        put_cont('$clause_internal'(a(3), a(4), a(9), a(11), a(12), p(3)), p(4)).
        put_cont('$unify'(a(2), a(10), p(4)), p(5)).
        put_cont('$check_procedure_permission'(a(7), s(3), s(4), a(8), p(5)), p(6)).
        put_cont('$new_internal_database'(a(3), p(6)), p(7)).
        execute('$clause_to_term'(a(1), a(2), a(5), a(6), p(7))).
end_predicate(retract/1).

begin_predicate(retractall/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([retractall/1, 'builtins.pl']).
main(retractall/1, (public)) :
        put_con((:)/2, s(1)).
        put_con(retractall/1, s(2)).
        put_con(access, s(3)).
        put_con(static_procedure, s(4)).
        put_con((:-)/2, s(5)).
        label(retractall/1+sub+1).
        label(retractall/1+1).
        label(retractall/1+2).
retractall/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try(retractall/1+1, retractall/1+sub+1).
retractall/1+sub+1 :
        trust(retractall/1+2).
retractall/1+1 :
        comment((retractall(A):-'$head_to_term'(A, B, C:D, retractall(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, access, static_procedure, retractall(A)), '$clause_internal'(C, D, B, E, F), copy_term(E, (B:-G)), '$erase'(F), '$rehash_indexing'(C, D, F), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((retractall(A):-['$head_to_term'(A, B, C:D, retractall(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, access, static_procedure, retractall(A)), '$clause_internal'(C, D, B, E, F), copy_term(E, (B:-G)), '$erase'(F), '$rehash_indexing'(C, D, F), fail])).
        put_var(a(2)).
        put_var(a(3)).
        put_var(a(4)).
        put_str_args([a(3), a(4)], y(1)).
        put_str(s(1), y(1), a(5)).
        put_str_args([a(1)], y(2)).
        put_str(s(2), y(2), a(6)).
        put_str_args([a(3), a(4)], y(3)).
        put_str(s(1), y(3), a(7)).
        put_str_args([a(1)], y(4)).
        put_str(s(2), y(4), a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_str_args([a(2), void], y(5)).
        put_str(s(5), y(5), a(11)).
        put_cont(fail(cont), p(1)).
        put_cont('$rehash_indexing'(a(3), a(4), a(10), p(1)), p(2)).
        put_cont('$erase'(a(10), p(2)), p(3)).
        put_cont(copy_term(a(9), a(11), p(3)), p(4)).
        put_cont('$clause_internal'(a(3), a(4), a(2), a(9), a(10), p(4)), p(5)).
        put_cont('$check_procedure_permission'(a(7), s(3), s(4), a(8), p(5)), p(6)).
        put_cont('$new_internal_database'(a(3), p(6)), p(7)).
        execute('$head_to_term'(a(1), a(2), a(5), a(6), p(7))).
retractall/1+2 :
        comment((retractall(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((retractall(A):-[])).
        execute(cont).
end_predicate(retractall/1).

begin_predicate('$term_to_clause'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_to_clause'/4, 'builtins.pl']).
main('$term_to_clause'/4, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(/ / 2, s(2)).
        put_con(user, s(3)).
        put_con((:-)/2, s(4)).
'$term_to_clause'/4 :
        comment(('$term_to_clause'(A, B, C:D/E, F):-'$term_to_clause'(A, B, user, C, F), B= (G:-H), functor(G, D, E))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$term_to_clause'(A, B, C:D/E, F):-['$term_to_clause'(A, B, user, C, F), '$unify'(B, (G:-H)), functor(G, D, E)])).
        get_str((:)/2, s(1), a(3)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str(/ / 2, s(2), a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        put_var(a(9)).
        put_str_args([a(9), void], y(1)).
        put_str(s(4), y(1), a(10)).
        put_cont(functor(a(9), a(7), a(8), cont), p(1)).
        put_cont('$unify'(a(2), a(10), p(1)), p(2)).
        execute('$term_to_clause'(a(1), a(2), s(3), a(5), a(4), p(2))).
end_predicate('$term_to_clause'/4).

begin_predicate('$term_to_clause'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_to_clause'/5, 'builtins.pl']).
main('$term_to_clause'/5, non- (public)) :
        put_con(var, s(1)).
        put_int(1, si(2)).
        put_con((:)/2, s(3)).
        put_con(type/1, s(4)).
        put_con(atom, s(5)).
        put_str_args([s(5)], s(6)).
        put_str(s(4), s(6), s(7)).
        put_con((:-)/2, s(8)).
        put_con(true, s(9)).
        label('$term_to_clause'/5+top).
        label('$term_to_clause'/5+var).
        label('$term_to_clause'/5+var+1).
        label('$term_to_clause'/5+var+2).
        label('$term_to_clause'/5+var+3).
        label('$term_to_clause'/5+var+4).
        label('$term_to_clause'/5+var+5).
        label('$term_to_clause'/5+int).
        label('$term_to_clause'/5+int+1).
        label('$term_to_clause'/5+int+2).
        label('$term_to_clause'/5+int+3).
        label('$term_to_clause'/5+str).
        label('$term_to_clause'/5+str+0).
        label('$term_to_clause'/5+str+0+1).
        label('$term_to_clause'/5+str+0+2).
        label('$term_to_clause'/5+str+0+3).
        label('$term_to_clause'/5+str+0+4).
        label('$term_to_clause'/5+str+1).
        label('$term_to_clause'/5+str+1+1).
        label('$term_to_clause'/5+str+1+2).
        label('$term_to_clause'/5+str+1+3).
        label('$term_to_clause'/5+str+1+4).
        label('$term_to_clause'/5+1).
        label('$term_to_clause'/5+2).
        label('$term_to_clause'/5+3).
        label('$term_to_clause'/5+4).
        label('$term_to_clause'/5+5).
        label('$term_to_clause'/5+6).
        new_hash(str, 2).
        static([put_hash(s(3), '$term_to_clause'/5+str+0, str), put_hash(s(8), '$term_to_clause'/5+str+1, str)]).
'$term_to_clause'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$term_to_clause'/5+top).
'$term_to_clause'/5+top :
        setB0.
        switch_on_term('$term_to_clause'/5+var, '$term_to_clause'/5+int, '$term_to_clause'/5+int, '$term_to_clause'/5+int, '$term_to_clause'/5+str, '$term_to_clause'/5+int).
'$term_to_clause'/5+var :
        try('$term_to_clause'/5+1, '$term_to_clause'/5+var+1).
'$term_to_clause'/5+var+1 :
        retry('$term_to_clause'/5+2, '$term_to_clause'/5+var+2).
'$term_to_clause'/5+var+2 :
        retry('$term_to_clause'/5+3, '$term_to_clause'/5+var+3).
'$term_to_clause'/5+var+3 :
        retry('$term_to_clause'/5+4, '$term_to_clause'/5+var+4).
'$term_to_clause'/5+var+4 :
        retry('$term_to_clause'/5+5, '$term_to_clause'/5+var+5).
'$term_to_clause'/5+var+5 :
        trust('$term_to_clause'/5+6).
'$term_to_clause'/5+int :
        try('$term_to_clause'/5+1, '$term_to_clause'/5+int+1).
'$term_to_clause'/5+int+1 :
        retry('$term_to_clause'/5+2, '$term_to_clause'/5+int+2).
'$term_to_clause'/5+int+2 :
        retry('$term_to_clause'/5+4, '$term_to_clause'/5+int+3).
'$term_to_clause'/5+int+3 :
        trust('$term_to_clause'/5+6).
'$term_to_clause'/5+str :
        switch_on_hash(str, 2, '$term_to_clause'/5+int, [ (:)/2:'$term_to_clause'/5+str+0, (:-)/2:'$term_to_clause'/5+str+1]).
'$term_to_clause'/5+str+0 :
        try('$term_to_clause'/5+1, '$term_to_clause'/5+str+0+1).
'$term_to_clause'/5+str+0+1 :
        retry('$term_to_clause'/5+2, '$term_to_clause'/5+str+0+2).
'$term_to_clause'/5+str+0+2 :
        retry('$term_to_clause'/5+3, '$term_to_clause'/5+str+0+3).
'$term_to_clause'/5+str+0+3 :
        retry('$term_to_clause'/5+4, '$term_to_clause'/5+str+0+4).
'$term_to_clause'/5+str+0+4 :
        trust('$term_to_clause'/5+6).
'$term_to_clause'/5+str+1 :
        try('$term_to_clause'/5+1, '$term_to_clause'/5+str+1+1).
'$term_to_clause'/5+str+1+1 :
        retry('$term_to_clause'/5+2, '$term_to_clause'/5+str+1+2).
'$term_to_clause'/5+str+1+2 :
        retry('$term_to_clause'/5+4, '$term_to_clause'/5+str+1+3).
'$term_to_clause'/5+str+1+3 :
        retry('$term_to_clause'/5+5, '$term_to_clause'/5+str+1+4).
'$term_to_clause'/5+str+1+4 :
        trust('$term_to_clause'/5+6).
'$term_to_clause'/5+1 :
        comment(('$term_to_clause'(A, B, C, D, E):-var(A), !, illarg(var, E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_clause'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(1))).
        inline('$cut'(a(6))).
        execute(illarg(s(1), a(5), si(2), cont)).
'$term_to_clause'/5+2 :
        comment(('$term_to_clause'(A, B, C, D, E):-var(C), !, illarg(var, E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_clause'(A, B, C, D, E):-['$get_level'(F), var(C), '$cut'(F), illarg(var, E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(3))).
        inline('$cut'(a(6))).
        execute(illarg(s(1), a(5), si(2), cont)).
'$term_to_clause'/5+3 :
        comment(('$term_to_clause'(A:B, C, D, E, F):-!, '$term_to_clause'(B, C, A, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_clause'(A:B, C, D, E, F):-['$neck_cut', '$term_to_clause'(B, C, A, E, F)])).
        get_str((:)/2, s(3), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        set(a(7), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$term_to_clause'/5+top).
'$term_to_clause'/5+4 :
        comment(('$term_to_clause'(A, B, C, D, E):-'$dummy_7_builtins.pl'(C), !, illarg(type(atom), E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_clause'(A, B, C, D, E):-['$get_level'(F), '$dummy_7_builtins.pl'(C), '$cut'(F), illarg(type(atom), E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_cont(illarg(s(7), a(5), si(2), cont), p(1)).
        put_cont('$cut'(a(6), p(1)), p(2)).
        execute('$dummy_7_builtins.pl'(a(3), p(2))).
'$term_to_clause'/5+5 :
        comment(('$term_to_clause'((A:-B), (C:-D), E, E, F):-!, '$term_to_head'(A, C, E, F), '$term_to_body'(B, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_clause'((A:-B), (C:-D), E, E, F):-['$neck_cut', '$term_to_head'(A, C, E, F), '$term_to_body'(B, D, E, F)])).
        get_str((:-)/2, s(8), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((:-)/2, s(8), a(2)).
        unify_var(a(8)).
        unify_var(a(9)).
        get_val(a(3), a(4)).
        inline('$neck_cut').
        put_cont('$term_to_body'(a(7), a(9), a(3), a(5), cont), p(1)).
        execute('$term_to_head'(a(6), a(8), a(3), a(5), p(1))).
'$term_to_clause'/5+6 :
        comment(('$term_to_clause'(A, (B:-true), C, C, D):-'$term_to_head'(A, B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_clause'(A, (B:-true), C, C, D):-['$term_to_head'(A, B, C, D)])).
        get_str((:-)/2, s(8), a(2)).
        unify_var(a(6)).
        unify_con(true, s(9)).
        get_val(a(3), a(4)).
        execute('$term_to_head'(a(1), a(6), a(3), a(5), cont)).
end_predicate('$term_to_clause'/5).

begin_predicate('$dummy_7_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_7_builtins.pl'/1, 'builtins.pl']).
main('$dummy_7_builtins.pl'/1, non- (public)) :
        label('$dummy_7_builtins.pl'/1+sub+1).
        label('$dummy_7_builtins.pl'/1+1).
        label('$dummy_7_builtins.pl'/1+2).
'$dummy_7_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_7_builtins.pl'/1+1, '$dummy_7_builtins.pl'/1+sub+1).
'$dummy_7_builtins.pl'/1+sub+1 :
        trust('$dummy_7_builtins.pl'/1+2).
'$dummy_7_builtins.pl'/1+1 :
        comment(('$dummy_7_builtins.pl'(A):-atom(A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_7_builtins.pl'(A):-['$get_level'(B), atom(A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(atom(a(1))).
        inline('$cut'(a(2))).
        inline(fail).
'$dummy_7_builtins.pl'/1+2 :
        comment(('$dummy_7_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_7_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_7_builtins.pl'/1).

begin_predicate('$term_to_head'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_to_head'/4, 'builtins.pl']).
main('$term_to_head'/4, non- (public)) :
        put_con(type/1, s(1)).
        put_con(callable, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_int(1, si(5)).
        label('$term_to_head'/4+sub+1).
        label('$term_to_head'/4+sub+2).
        label('$term_to_head'/4+1).
        label('$term_to_head'/4+2).
        label('$term_to_head'/4+3).
'$term_to_head'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        try('$term_to_head'/4+1, '$term_to_head'/4+sub+1).
'$term_to_head'/4+sub+1 :
        retry('$term_to_head'/4+2, '$term_to_head'/4+sub+2).
'$term_to_head'/4+sub+2 :
        trust('$term_to_head'/4+3).
'$term_to_head'/4+1 :
        comment(('$term_to_head'(A, A, B, C):-atom(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$term_to_head'(A, A, B, C):-['$get_level'(D), atom(A), '$cut'(D)])).
        get_val(a(1), a(2)).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        inline(atom(a(1))).
        inline('$cut'(a(5))).
        execute(cont).
'$term_to_head'/4+2 :
        comment(('$term_to_head'(A, A, B, C):-compound(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$term_to_head'(A, A, B, C):-['$get_level'(D), compound(A), '$cut'(D)])).
        get_val(a(1), a(2)).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_cont('$cut'(a(5), cont), p(1)).
        execute(compound(a(1), p(1))).
'$term_to_head'/4+3 :
        comment(('$term_to_head'(A, B, C, D):-illarg(type(callable), D, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$term_to_head'(A, B, C, D):-[illarg(type(callable), D, 1)])).
        execute(illarg(s(4), a(4), si(5), cont)).
end_predicate('$term_to_head'/4).

begin_predicate('$term_to_body'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_to_body'/4, 'builtins.pl']).
main('$term_to_body'/4, non- (public)) :
'$term_to_body'/4 :
        comment(('$term_to_body'(A, B, C, D):-'$localize_body'(A, C, B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$term_to_body'(A, B, C, D):-['$localize_body'(A, C, B)])).
        execute('$localize_body'(a(1), a(3), a(2), cont)).
end_predicate('$term_to_body'/4).

begin_predicate('$localize_body'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$localize_body'/3, 'builtins.pl']).
main('$localize_body'/3, non- (public)) :
        put_con(call/1, s(1)).
        put_con((:)/2, s(2)).
        put_con((',')/2, s(3)).
        put_con((->)/2, s(4)).
        put_con((;)/2, s(5)).
        put_con(user, s(6)).
        label('$localize_body'/3+top).
        label('$localize_body'/3+var).
        label('$localize_body'/3+var+1).
        label('$localize_body'/3+var+2).
        label('$localize_body'/3+var+3).
        label('$localize_body'/3+var+4).
        label('$localize_body'/3+var+5).
        label('$localize_body'/3+var+6).
        label('$localize_body'/3+var+7).
        label('$localize_body'/3+var+8).
        label('$localize_body'/3+var+9).
        label('$localize_body'/3+int).
        label('$localize_body'/3+int+1).
        label('$localize_body'/3+int+2).
        label('$localize_body'/3+int+3).
        label('$localize_body'/3+int+4).
        label('$localize_body'/3+int+5).
        label('$localize_body'/3+str).
        label('$localize_body'/3+str+0).
        label('$localize_body'/3+str+0+1).
        label('$localize_body'/3+str+0+2).
        label('$localize_body'/3+str+0+3).
        label('$localize_body'/3+str+0+4).
        label('$localize_body'/3+str+0+5).
        label('$localize_body'/3+str+0+6).
        label('$localize_body'/3+str+1).
        label('$localize_body'/3+str+1+1).
        label('$localize_body'/3+str+1+2).
        label('$localize_body'/3+str+1+3).
        label('$localize_body'/3+str+1+4).
        label('$localize_body'/3+str+1+5).
        label('$localize_body'/3+str+1+6).
        label('$localize_body'/3+str+2).
        label('$localize_body'/3+str+2+1).
        label('$localize_body'/3+str+2+2).
        label('$localize_body'/3+str+2+3).
        label('$localize_body'/3+str+2+4).
        label('$localize_body'/3+str+2+5).
        label('$localize_body'/3+str+2+6).
        label('$localize_body'/3+str+3).
        label('$localize_body'/3+str+3+1).
        label('$localize_body'/3+str+3+2).
        label('$localize_body'/3+str+3+3).
        label('$localize_body'/3+str+3+4).
        label('$localize_body'/3+str+3+5).
        label('$localize_body'/3+str+3+6).
        label('$localize_body'/3+1).
        label('$localize_body'/3+2).
        label('$localize_body'/3+3).
        label('$localize_body'/3+4).
        label('$localize_body'/3+5).
        label('$localize_body'/3+6).
        label('$localize_body'/3+7).
        label('$localize_body'/3+8).
        label('$localize_body'/3+9).
        label('$localize_body'/3+10).
        new_hash(str, 4).
        static([put_hash(s(2), '$localize_body'/3+str+0, str), put_hash(s(3), '$localize_body'/3+str+1, str), put_hash(s(4), '$localize_body'/3+str+2, str), put_hash(s(5), '$localize_body'/3+str+3, str)]).
'$localize_body'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$localize_body'/3+top).
'$localize_body'/3+top :
        setB0.
        switch_on_term('$localize_body'/3+var, '$localize_body'/3+int, '$localize_body'/3+int, '$localize_body'/3+int, '$localize_body'/3+str, '$localize_body'/3+int).
'$localize_body'/3+var :
        try('$localize_body'/3+1, '$localize_body'/3+var+1).
'$localize_body'/3+var+1 :
        retry('$localize_body'/3+2, '$localize_body'/3+var+2).
'$localize_body'/3+var+2 :
        retry('$localize_body'/3+3, '$localize_body'/3+var+3).
'$localize_body'/3+var+3 :
        retry('$localize_body'/3+4, '$localize_body'/3+var+4).
'$localize_body'/3+var+4 :
        retry('$localize_body'/3+5, '$localize_body'/3+var+5).
'$localize_body'/3+var+5 :
        retry('$localize_body'/3+6, '$localize_body'/3+var+6).
'$localize_body'/3+var+6 :
        retry('$localize_body'/3+7, '$localize_body'/3+var+7).
'$localize_body'/3+var+7 :
        retry('$localize_body'/3+8, '$localize_body'/3+var+8).
'$localize_body'/3+var+8 :
        retry('$localize_body'/3+9, '$localize_body'/3+var+9).
'$localize_body'/3+var+9 :
        trust('$localize_body'/3+10).
'$localize_body'/3+int :
        try('$localize_body'/3+1, '$localize_body'/3+int+1).
'$localize_body'/3+int+1 :
        retry('$localize_body'/3+6, '$localize_body'/3+int+2).
'$localize_body'/3+int+2 :
        retry('$localize_body'/3+7, '$localize_body'/3+int+3).
'$localize_body'/3+int+3 :
        retry('$localize_body'/3+8, '$localize_body'/3+int+4).
'$localize_body'/3+int+4 :
        retry('$localize_body'/3+9, '$localize_body'/3+int+5).
'$localize_body'/3+int+5 :
        trust('$localize_body'/3+10).
'$localize_body'/3+str :
        switch_on_hash(str, 4, '$localize_body'/3+int, [ (:)/2:'$localize_body'/3+str+0, (',')/2:'$localize_body'/3+str+1, (->)/2:'$localize_body'/3+str+2, (;)/2:'$localize_body'/3+str+3]).
'$localize_body'/3+str+0 :
        try('$localize_body'/3+1, '$localize_body'/3+str+0+1).
'$localize_body'/3+str+0+1 :
        retry('$localize_body'/3+2, '$localize_body'/3+str+0+2).
'$localize_body'/3+str+0+2 :
        retry('$localize_body'/3+6, '$localize_body'/3+str+0+3).
'$localize_body'/3+str+0+3 :
        retry('$localize_body'/3+7, '$localize_body'/3+str+0+4).
'$localize_body'/3+str+0+4 :
        retry('$localize_body'/3+8, '$localize_body'/3+str+0+5).
'$localize_body'/3+str+0+5 :
        retry('$localize_body'/3+9, '$localize_body'/3+str+0+6).
'$localize_body'/3+str+0+6 :
        trust('$localize_body'/3+10).
'$localize_body'/3+str+1 :
        try('$localize_body'/3+1, '$localize_body'/3+str+1+1).
'$localize_body'/3+str+1+1 :
        retry('$localize_body'/3+3, '$localize_body'/3+str+1+2).
'$localize_body'/3+str+1+2 :
        retry('$localize_body'/3+6, '$localize_body'/3+str+1+3).
'$localize_body'/3+str+1+3 :
        retry('$localize_body'/3+7, '$localize_body'/3+str+1+4).
'$localize_body'/3+str+1+4 :
        retry('$localize_body'/3+8, '$localize_body'/3+str+1+5).
'$localize_body'/3+str+1+5 :
        retry('$localize_body'/3+9, '$localize_body'/3+str+1+6).
'$localize_body'/3+str+1+6 :
        trust('$localize_body'/3+10).
'$localize_body'/3+str+2 :
        try('$localize_body'/3+1, '$localize_body'/3+str+2+1).
'$localize_body'/3+str+2+1 :
        retry('$localize_body'/3+4, '$localize_body'/3+str+2+2).
'$localize_body'/3+str+2+2 :
        retry('$localize_body'/3+6, '$localize_body'/3+str+2+3).
'$localize_body'/3+str+2+3 :
        retry('$localize_body'/3+7, '$localize_body'/3+str+2+4).
'$localize_body'/3+str+2+4 :
        retry('$localize_body'/3+8, '$localize_body'/3+str+2+5).
'$localize_body'/3+str+2+5 :
        retry('$localize_body'/3+9, '$localize_body'/3+str+2+6).
'$localize_body'/3+str+2+6 :
        trust('$localize_body'/3+10).
'$localize_body'/3+str+3 :
        try('$localize_body'/3+1, '$localize_body'/3+str+3+1).
'$localize_body'/3+str+3+1 :
        retry('$localize_body'/3+5, '$localize_body'/3+str+3+2).
'$localize_body'/3+str+3+2 :
        retry('$localize_body'/3+6, '$localize_body'/3+str+3+3).
'$localize_body'/3+str+3+3 :
        retry('$localize_body'/3+7, '$localize_body'/3+str+3+4).
'$localize_body'/3+str+3+4 :
        retry('$localize_body'/3+8, '$localize_body'/3+str+3+5).
'$localize_body'/3+str+3+5 :
        retry('$localize_body'/3+9, '$localize_body'/3+str+3+6).
'$localize_body'/3+str+3+6 :
        trust('$localize_body'/3+10).
'$localize_body'/3+1 :
        comment(('$localize_body'(A, B, C):-var(A), !, '$localize_body'(call(A), B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'(A, B, C):-['$get_level'(D), var(A), '$cut'(D), '$localize_body'(call(A), B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        put_str_args([a(1)], y(1)).
        put_str(s(1), y(1), a(5)).
        set(a(5), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$localize_body'/3+top).
'$localize_body'/3+2 :
        comment(('$localize_body'(A:B, C, D):-!, '$localize_body'(B, A, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'(A:B, C, D):-['$neck_cut', '$localize_body'(B, A, D)])).
        get_str((:)/2, s(2), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        inline('$neck_cut').
        set(a(5), ea(1)).
        set(a(4), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$localize_body'/3+top).
'$localize_body'/3+3 :
        comment(('$localize_body'((A, B), C, (D, E)):-!, '$localize_body'(A, C, D), '$localize_body'(B, C, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'((A, B), C, (D, E)):-['$neck_cut', '$localize_body'(A, C, D), '$localize_body'(B, C, E)])).
        get_str((',')/2, s(3), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_str((',')/2, s(3), a(3)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_cont('$localize_body'(a(5), a(2), a(7), cont), p(1)).
        set(a(4), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(p(1), econt).
        goto('$localize_body'/3+top).
'$localize_body'/3+4 :
        comment(('$localize_body'((A->B), C, (D->E)):-!, '$localize_body'(A, C, D), '$localize_body'(B, C, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'((A->B), C, (D->E)):-['$neck_cut', '$localize_body'(A, C, D), '$localize_body'(B, C, E)])).
        get_str((->)/2, s(4), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_str((->)/2, s(4), a(3)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_cont('$localize_body'(a(5), a(2), a(7), cont), p(1)).
        set(a(4), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(p(1), econt).
        goto('$localize_body'/3+top).
'$localize_body'/3+5 :
        comment(('$localize_body'((A;B), C, (D;E)):-!, '$localize_body'(A, C, D), '$localize_body'(B, C, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'((A;B), C, (D;E)):-['$neck_cut', '$localize_body'(A, C, D), '$localize_body'(B, C, E)])).
        get_str((;)/2, s(5), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_str((;)/2, s(5), a(3)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_cont('$localize_body'(a(5), a(2), a(7), cont), p(1)).
        set(a(4), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(p(1), econt).
        goto('$localize_body'/3+top).
'$localize_body'/3+6 :
        comment(('$localize_body'(A, B, C):-functor(A, D, E), '$builtin_meta_predicates'(D, E, F), !, A=..[D|G], '$localize_args'(F, G, B, H), C=..[D|H])).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'(A, B, C):-['$get_level'(D), functor(A, E, F), '$builtin_meta_predicates'(E, F, G), '$cut'(D), '$univ'(A, [E|H]), '$localize_args'(G, H, B, I), '$univ'(C, [E|I])])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_list(a(5), a(8), a(9)).
        put_var(a(10)).
        put_list(a(5), a(10), a(11)).
        put_cont('$univ'(a(3), a(11), cont), p(1)).
        put_cont('$localize_args'(a(7), a(8), a(2), a(10), p(1)), p(2)).
        put_cont('$univ'(a(1), a(9), p(2)), p(3)).
        put_cont('$cut'(a(4), p(3)), p(4)).
        put_cont('$builtin_meta_predicates'(a(5), a(6), a(7), p(4)), p(5)).
        execute(functor(a(1), a(5), a(6), p(5))).
'$localize_body'/3+7 :
        comment(('$localize_body'(A, B, call(B:A)):-var(B), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'(A, B, call(B:A)):-['$get_level'(C), var(B), '$cut'(C)])).
        get_str(call/1, s(1), a(3)).
        unify_var(a(4)).
        get_str((:)/2, s(2), a(4)).
        unify_val(a(2)).
        unify_val(a(1)).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        inline(var(a(2))).
        inline('$cut'(a(5))).
        execute(cont).
'$localize_body'/3+8 :
        comment(('$localize_body'(A, user, A):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'(A, user, A):-['$neck_cut'])).
        get_con(user, s(6), a(2)).
        get_val(a(1), a(3)).
        inline('$neck_cut').
        execute(cont).
'$localize_body'/3+9 :
        comment(('$localize_body'(A, B, A):-system_predicate(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'(A, B, A):-['$get_level'(C), system_predicate(A), '$cut'(C)])).
        get_val(a(1), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$cut'(a(4), cont), p(1)).
        execute(system_predicate(a(1), p(1))).
'$localize_body'/3+10 :
        comment(('$localize_body'(A, B, B:A):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$localize_body'(A, B, B:A):-[])).
        get_str((:)/2, s(2), a(3)).
        unify_val(a(2)).
        unify_val(a(1)).
        execute(cont).
end_predicate('$localize_body'/3).

begin_predicate('$localize_args'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$localize_args'/4, 'builtins.pl']).
main('$localize_args'/4, non- (public)) :
        put_con([], s(1)).
        put_con(:, s(2)).
        put_con((:)/2, s(3)).
        label('$localize_args'/4+top).
        label(fail/0).
        label('$localize_args'/4+var).
        label('$localize_args'/4+var+1).
        label('$localize_args'/4+var+2).
        label('$localize_args'/4+lis).
        label('$localize_args'/4+lis+1).
        label('$localize_args'/4+1).
        label('$localize_args'/4+2).
        label('$localize_args'/4+3).
'$localize_args'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        goto('$localize_args'/4+top).
'$localize_args'/4+top :
        setB0.
        switch_on_term('$localize_args'/4+var, fail/0, fail/0, '$localize_args'/4+1, fail/0, '$localize_args'/4+lis).
'$localize_args'/4+var :
        try('$localize_args'/4+1, '$localize_args'/4+var+1).
'$localize_args'/4+var+1 :
        retry('$localize_args'/4+2, '$localize_args'/4+var+2).
'$localize_args'/4+var+2 :
        trust('$localize_args'/4+3).
'$localize_args'/4+lis :
        try('$localize_args'/4+2, '$localize_args'/4+lis+1).
'$localize_args'/4+lis+1 :
        trust('$localize_args'/4+3).
'$localize_args'/4+1 :
        comment(('$localize_args'([], [], A, []):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$localize_args'([], [], A, []):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(2)).
        get_con([], s(1), a(4)).
        inline('$neck_cut').
        execute(cont).
'$localize_args'/4+2 :
        comment(('$localize_args'([:|A], [B|C], D, [D:B|E]):-'$dummy_8_builtins.pl'(B, F, G), !, '$localize_args'(A, C, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$localize_args'([:|A], [B|C], D, [D:B|E]):-['$get_level'(F), '$dummy_8_builtins.pl'(B, G, H), '$cut'(F), '$localize_args'(A, C, D, E)])).
        get_list(a(1)).
        unify_con(:, s(2)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_list(a(4)).
        unify_var(a(8)).
        unify_var(a(9)).
        get_str((:)/2, s(3), a(8)).
        unify_val(a(3)).
        unify_val(a(6)).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        put_cont('$localize_args'(a(5), a(7), a(3), a(9), cont), p(1)).
        put_cont('$cut'(a(10), p(1)), p(2)).
        execute('$dummy_8_builtins.pl'(a(6), void, void, p(2))).
'$localize_args'/4+3 :
        comment(('$localize_args'([A|B], [C|D], E, [C|F]):-'$localize_args'(B, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$localize_args'([A|B], [C|D], E, [C|F]):-['$localize_args'(B, D, E, F)])).
        get_list(a(1)).
        unify_void(1).
        unify_var(a(5)).
        get_list(a(2)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_list(a(4)).
        unify_val(a(6)).
        unify_var(a(8)).
        set(a(5), ea(1)).
        set(a(7), ea(2)).
        set(a(3), ea(3)).
        set(a(8), ea(4)).
        set(cont, econt).
        goto('$localize_args'/4+top).
end_predicate('$localize_args'/4).

begin_predicate('$dummy_8_builtins.pl'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_8_builtins.pl'/3, 'builtins.pl']).
main('$dummy_8_builtins.pl'/3, non- (public)) :
        put_con((:)/2, s(1)).
        label('$dummy_8_builtins.pl'/3+sub+1).
        label('$dummy_8_builtins.pl'/3+1).
        label('$dummy_8_builtins.pl'/3+2).
'$dummy_8_builtins.pl'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dummy_8_builtins.pl'/3+1, '$dummy_8_builtins.pl'/3+sub+1).
'$dummy_8_builtins.pl'/3+sub+1 :
        trust('$dummy_8_builtins.pl'/3+2).
'$dummy_8_builtins.pl'/3+1 :
        comment(('$dummy_8_builtins.pl'(A, B, C):-var(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_8_builtins.pl'(A, B, C):-[var(A)])).
        inline(var(a(1))).
        execute(cont).
'$dummy_8_builtins.pl'/3+2 :
        comment(('$dummy_8_builtins.pl'(A, B, C):-A\=B:C)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_8_builtins.pl'(A, B, C):-['$not_unifiable'(A, B:C)])).
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(1), y(1), a(4)).
        inline('$not_unifiable'(a(1), a(4))).
        execute(cont).
end_predicate('$dummy_8_builtins.pl'/3).

begin_predicate('$builtin_meta_predicates'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_meta_predicates'/3, 'builtins.pl']).
main('$builtin_meta_predicates'/3, non- (public)) :
        put_con(^, s(1)).
        put_int(2, si(2)).
        put_con(?, s(3)).
        put_con(:, s(4)).
        put_con([], s(5)).
        put_list(s(4), s(5), s(6)).
        put_list(s(3), s(6), s(7)).
        put_con(call, s(8)).
        put_int(1, si(9)).
        put_con(once, s(10)).
        put_con(\+, s(11)).
        put_con(findall, s(12)).
        put_int(3, si(13)).
        put_list(s(3), s(5), s(14)).
        put_list(s(4), s(14), s(15)).
        put_list(s(3), s(15), s(16)).
        put_con(setof, s(17)).
        put_con(bagof, s(18)).
        put_con(on_exception, s(19)).
        put_list(s(4), s(6), s(20)).
        put_list(s(3), s(20), s(21)).
        put_con(catch, s(22)).
        put_list(s(4), s(7), s(23)).
        put_con(synchronized, s(24)).
        put_con(freeze, s(25)).
        label(fail/0).
        label('$builtin_meta_predicates'/3+var).
        label('$builtin_meta_predicates'/3+var+1).
        label('$builtin_meta_predicates'/3+var+2).
        label('$builtin_meta_predicates'/3+var+3).
        label('$builtin_meta_predicates'/3+var+4).
        label('$builtin_meta_predicates'/3+var+5).
        label('$builtin_meta_predicates'/3+var+6).
        label('$builtin_meta_predicates'/3+var+7).
        label('$builtin_meta_predicates'/3+var+8).
        label('$builtin_meta_predicates'/3+var+9).
        label('$builtin_meta_predicates'/3+var+10).
        label('$builtin_meta_predicates'/3+con).
        label('$builtin_meta_predicates'/3+1).
        label('$builtin_meta_predicates'/3+2).
        label('$builtin_meta_predicates'/3+3).
        label('$builtin_meta_predicates'/3+4).
        label('$builtin_meta_predicates'/3+5).
        label('$builtin_meta_predicates'/3+6).
        label('$builtin_meta_predicates'/3+7).
        label('$builtin_meta_predicates'/3+8).
        label('$builtin_meta_predicates'/3+9).
        label('$builtin_meta_predicates'/3+10).
        label('$builtin_meta_predicates'/3+11).
        new_hash(con, 11).
        static([put_hash(s(1), '$builtin_meta_predicates'/3+1, con), put_hash(s(8), '$builtin_meta_predicates'/3+2, con), put_hash(s(10), '$builtin_meta_predicates'/3+3, con), put_hash(s(11), '$builtin_meta_predicates'/3+4, con), put_hash(s(12), '$builtin_meta_predicates'/3+5, con), put_hash(s(17), '$builtin_meta_predicates'/3+6, con), put_hash(s(18), '$builtin_meta_predicates'/3+7, con), put_hash(s(19), '$builtin_meta_predicates'/3+8, con), put_hash(s(22), '$builtin_meta_predicates'/3+9, con), put_hash(s(24), '$builtin_meta_predicates'/3+10, con), put_hash(s(25), '$builtin_meta_predicates'/3+11, con)]).
'$builtin_meta_predicates'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$builtin_meta_predicates'/3+var, fail/0, fail/0, '$builtin_meta_predicates'/3+con, fail/0, fail/0).
'$builtin_meta_predicates'/3+var :
        try('$builtin_meta_predicates'/3+1, '$builtin_meta_predicates'/3+var+1).
'$builtin_meta_predicates'/3+var+1 :
        retry('$builtin_meta_predicates'/3+2, '$builtin_meta_predicates'/3+var+2).
'$builtin_meta_predicates'/3+var+2 :
        retry('$builtin_meta_predicates'/3+3, '$builtin_meta_predicates'/3+var+3).
'$builtin_meta_predicates'/3+var+3 :
        retry('$builtin_meta_predicates'/3+4, '$builtin_meta_predicates'/3+var+4).
'$builtin_meta_predicates'/3+var+4 :
        retry('$builtin_meta_predicates'/3+5, '$builtin_meta_predicates'/3+var+5).
'$builtin_meta_predicates'/3+var+5 :
        retry('$builtin_meta_predicates'/3+6, '$builtin_meta_predicates'/3+var+6).
'$builtin_meta_predicates'/3+var+6 :
        retry('$builtin_meta_predicates'/3+7, '$builtin_meta_predicates'/3+var+7).
'$builtin_meta_predicates'/3+var+7 :
        retry('$builtin_meta_predicates'/3+8, '$builtin_meta_predicates'/3+var+8).
'$builtin_meta_predicates'/3+var+8 :
        retry('$builtin_meta_predicates'/3+9, '$builtin_meta_predicates'/3+var+9).
'$builtin_meta_predicates'/3+var+9 :
        retry('$builtin_meta_predicates'/3+10, '$builtin_meta_predicates'/3+var+10).
'$builtin_meta_predicates'/3+var+10 :
        trust('$builtin_meta_predicates'/3+11).
'$builtin_meta_predicates'/3+con :
        switch_on_hash(con, 11, fail/0, [^ : '$builtin_meta_predicates'/3+1, call:'$builtin_meta_predicates'/3+2, once:'$builtin_meta_predicates'/3+3, (\+):'$builtin_meta_predicates'/3+4, findall:'$builtin_meta_predicates'/3+5, setof:'$builtin_meta_predicates'/3+6, bagof:'$builtin_meta_predicates'/3+7, on_exception:'$builtin_meta_predicates'/3+8, catch:'$builtin_meta_predicates'/3+9, synchronized:'$builtin_meta_predicates'/3+10, freeze:'$builtin_meta_predicates'/3+11]).
'$builtin_meta_predicates'/3+1 :
        comment(('$builtin_meta_predicates'(^, 2, [?, :]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(^, 2, [?, :]):-[])).
        get_con(^, s(1), a(1)).
        get_int(2, si(2), a(2)).
        get_ground([?, :], s(7), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+2 :
        comment(('$builtin_meta_predicates'(call, 1, [:]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(call, 1, [:]):-[])).
        get_con(call, s(8), a(1)).
        get_int(1, si(9), a(2)).
        get_ground([:], s(6), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+3 :
        comment(('$builtin_meta_predicates'(once, 1, [:]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(once, 1, [:]):-[])).
        get_con(once, s(10), a(1)).
        get_int(1, si(9), a(2)).
        get_ground([:], s(6), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+4 :
        comment(('$builtin_meta_predicates'(\+, 1, [:]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(\+, 1, [:]):-[])).
        get_con(\+, s(11), a(1)).
        get_int(1, si(9), a(2)).
        get_ground([:], s(6), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+5 :
        comment(('$builtin_meta_predicates'(findall, 3, [?, :, ?]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(findall, 3, [?, :, ?]):-[])).
        get_con(findall, s(12), a(1)).
        get_int(3, si(13), a(2)).
        get_ground([?, :, ?], s(16), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+6 :
        comment(('$builtin_meta_predicates'(setof, 3, [?, :, ?]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(setof, 3, [?, :, ?]):-[])).
        get_con(setof, s(17), a(1)).
        get_int(3, si(13), a(2)).
        get_ground([?, :, ?], s(16), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+7 :
        comment(('$builtin_meta_predicates'(bagof, 3, [?, :, ?]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(bagof, 3, [?, :, ?]):-[])).
        get_con(bagof, s(18), a(1)).
        get_int(3, si(13), a(2)).
        get_ground([?, :, ?], s(16), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+8 :
        comment(('$builtin_meta_predicates'(on_exception, 3, [?, :, :]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(on_exception, 3, [?, :, :]):-[])).
        get_con(on_exception, s(19), a(1)).
        get_int(3, si(13), a(2)).
        get_ground([?, :, :], s(21), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+9 :
        comment(('$builtin_meta_predicates'(catch, 3, [:, ?, :]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(catch, 3, [:, ?, :]):-[])).
        get_con(catch, s(22), a(1)).
        get_int(3, si(13), a(2)).
        get_ground([:, ?, :], s(23), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+10 :
        comment(('$builtin_meta_predicates'(synchronized, 2, [?, :]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(synchronized, 2, [?, :]):-[])).
        get_con(synchronized, s(24), a(1)).
        get_int(2, si(2), a(2)).
        get_ground([?, :], s(7), a(3)).
        execute(cont).
'$builtin_meta_predicates'/3+11 :
        comment(('$builtin_meta_predicates'(freeze, 2, [?, :]):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_meta_predicates'(freeze, 2, [?, :]):-[])).
        get_con(freeze, s(25), a(1)).
        get_int(2, si(2), a(2)).
        get_ground([?, :], s(7), a(3)).
        execute(cont).
end_predicate('$builtin_meta_predicates'/3).

begin_predicate('$clause_to_term'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$clause_to_term'/4, 'builtins.pl']).
main('$clause_to_term'/4, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(/ / 2, s(2)).
        put_con(user, s(3)).
        put_con((:-)/2, s(4)).
'$clause_to_term'/4 :
        comment(('$clause_to_term'(A, B, C:D/E, F):-'$clause_to_term'(A, B, user, C, F), B= (G:-H), functor(G, D, E))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$clause_to_term'(A, B, C:D/E, F):-['$clause_to_term'(A, B, user, C, F), '$unify'(B, (G:-H)), functor(G, D, E)])).
        get_str((:)/2, s(1), a(3)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str(/ / 2, s(2), a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        put_var(a(9)).
        put_str_args([a(9), void], y(1)).
        put_str(s(4), y(1), a(10)).
        put_cont(functor(a(9), a(7), a(8), cont), p(1)).
        put_cont('$unify'(a(2), a(10), p(1)), p(2)).
        execute('$clause_to_term'(a(1), a(2), s(3), a(5), a(4), p(2))).
end_predicate('$clause_to_term'/4).

begin_predicate('$clause_to_term'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$clause_to_term'/5, 'builtins.pl']).
main('$clause_to_term'/5, non- (public)) :
        put_con(var, s(1)).
        put_int(1, si(2)).
        put_con((:)/2, s(3)).
        put_con(type/1, s(4)).
        put_con(atom, s(5)).
        put_str_args([s(5)], s(6)).
        put_str(s(4), s(6), s(7)).
        put_con((:-)/2, s(8)).
        put_con(true, s(9)).
        label('$clause_to_term'/5+top).
        label('$clause_to_term'/5+var).
        label('$clause_to_term'/5+var+1).
        label('$clause_to_term'/5+var+2).
        label('$clause_to_term'/5+var+3).
        label('$clause_to_term'/5+var+4).
        label('$clause_to_term'/5+var+5).
        label('$clause_to_term'/5+int).
        label('$clause_to_term'/5+int+1).
        label('$clause_to_term'/5+int+2).
        label('$clause_to_term'/5+int+3).
        label('$clause_to_term'/5+str).
        label('$clause_to_term'/5+str+0).
        label('$clause_to_term'/5+str+0+1).
        label('$clause_to_term'/5+str+0+2).
        label('$clause_to_term'/5+str+0+3).
        label('$clause_to_term'/5+str+0+4).
        label('$clause_to_term'/5+str+1).
        label('$clause_to_term'/5+str+1+1).
        label('$clause_to_term'/5+str+1+2).
        label('$clause_to_term'/5+str+1+3).
        label('$clause_to_term'/5+str+1+4).
        label('$clause_to_term'/5+1).
        label('$clause_to_term'/5+2).
        label('$clause_to_term'/5+3).
        label('$clause_to_term'/5+4).
        label('$clause_to_term'/5+5).
        label('$clause_to_term'/5+6).
        new_hash(str, 2).
        static([put_hash(s(3), '$clause_to_term'/5+str+0, str), put_hash(s(8), '$clause_to_term'/5+str+1, str)]).
'$clause_to_term'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$clause_to_term'/5+top).
'$clause_to_term'/5+top :
        setB0.
        switch_on_term('$clause_to_term'/5+var, '$clause_to_term'/5+int, '$clause_to_term'/5+int, '$clause_to_term'/5+int, '$clause_to_term'/5+str, '$clause_to_term'/5+int).
'$clause_to_term'/5+var :
        try('$clause_to_term'/5+1, '$clause_to_term'/5+var+1).
'$clause_to_term'/5+var+1 :
        retry('$clause_to_term'/5+2, '$clause_to_term'/5+var+2).
'$clause_to_term'/5+var+2 :
        retry('$clause_to_term'/5+3, '$clause_to_term'/5+var+3).
'$clause_to_term'/5+var+3 :
        retry('$clause_to_term'/5+4, '$clause_to_term'/5+var+4).
'$clause_to_term'/5+var+4 :
        retry('$clause_to_term'/5+5, '$clause_to_term'/5+var+5).
'$clause_to_term'/5+var+5 :
        trust('$clause_to_term'/5+6).
'$clause_to_term'/5+int :
        try('$clause_to_term'/5+1, '$clause_to_term'/5+int+1).
'$clause_to_term'/5+int+1 :
        retry('$clause_to_term'/5+2, '$clause_to_term'/5+int+2).
'$clause_to_term'/5+int+2 :
        retry('$clause_to_term'/5+4, '$clause_to_term'/5+int+3).
'$clause_to_term'/5+int+3 :
        trust('$clause_to_term'/5+6).
'$clause_to_term'/5+str :
        switch_on_hash(str, 2, '$clause_to_term'/5+int, [ (:)/2:'$clause_to_term'/5+str+0, (:-)/2:'$clause_to_term'/5+str+1]).
'$clause_to_term'/5+str+0 :
        try('$clause_to_term'/5+1, '$clause_to_term'/5+str+0+1).
'$clause_to_term'/5+str+0+1 :
        retry('$clause_to_term'/5+2, '$clause_to_term'/5+str+0+2).
'$clause_to_term'/5+str+0+2 :
        retry('$clause_to_term'/5+3, '$clause_to_term'/5+str+0+3).
'$clause_to_term'/5+str+0+3 :
        retry('$clause_to_term'/5+4, '$clause_to_term'/5+str+0+4).
'$clause_to_term'/5+str+0+4 :
        trust('$clause_to_term'/5+6).
'$clause_to_term'/5+str+1 :
        try('$clause_to_term'/5+1, '$clause_to_term'/5+str+1+1).
'$clause_to_term'/5+str+1+1 :
        retry('$clause_to_term'/5+2, '$clause_to_term'/5+str+1+2).
'$clause_to_term'/5+str+1+2 :
        retry('$clause_to_term'/5+4, '$clause_to_term'/5+str+1+3).
'$clause_to_term'/5+str+1+3 :
        retry('$clause_to_term'/5+5, '$clause_to_term'/5+str+1+4).
'$clause_to_term'/5+str+1+4 :
        trust('$clause_to_term'/5+6).
'$clause_to_term'/5+1 :
        comment(('$clause_to_term'(A, B, C, D, E):-var(A), !, illarg(var, E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$clause_to_term'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(1))).
        inline('$cut'(a(6))).
        execute(illarg(s(1), a(5), si(2), cont)).
'$clause_to_term'/5+2 :
        comment(('$clause_to_term'(A, B, C, D, E):-var(C), !, illarg(var, E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$clause_to_term'(A, B, C, D, E):-['$get_level'(F), var(C), '$cut'(F), illarg(var, E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(3))).
        inline('$cut'(a(6))).
        execute(illarg(s(1), a(5), si(2), cont)).
'$clause_to_term'/5+3 :
        comment(('$clause_to_term'(A:B, C, D, E, F):-!, '$clause_to_term'(B, C, A, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$clause_to_term'(A:B, C, D, E, F):-['$neck_cut', '$clause_to_term'(B, C, A, E, F)])).
        get_str((:)/2, s(3), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        set(a(7), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$clause_to_term'/5+top).
'$clause_to_term'/5+4 :
        comment(('$clause_to_term'(A, B, C, D, E):-'$dummy_9_builtins.pl'(C), !, illarg(type(atom), E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$clause_to_term'(A, B, C, D, E):-['$get_level'(F), '$dummy_9_builtins.pl'(C), '$cut'(F), illarg(type(atom), E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_cont(illarg(s(7), a(5), si(2), cont), p(1)).
        put_cont('$cut'(a(6), p(1)), p(2)).
        execute('$dummy_9_builtins.pl'(a(3), p(2))).
'$clause_to_term'/5+5 :
        comment(('$clause_to_term'((A:-B), (C:-B), D, D, E):-!, '$head_to_term'(A, C, F, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$clause_to_term'((A:-B), (C:-B), D, D, E):-['$neck_cut', '$head_to_term'(A, C, F, E)])).
        get_str((:-)/2, s(8), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((:-)/2, s(8), a(2)).
        unify_var(a(8)).
        unify_val(a(7)).
        get_val(a(3), a(4)).
        inline('$neck_cut').
        execute('$head_to_term'(a(6), a(8), void, a(5), cont)).
'$clause_to_term'/5+6 :
        comment(('$clause_to_term'(A, (B:-true), C, C, D):-'$head_to_term'(A, B, E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$clause_to_term'(A, (B:-true), C, C, D):-['$head_to_term'(A, B, E, D)])).
        get_str((:-)/2, s(8), a(2)).
        unify_var(a(6)).
        unify_con(true, s(9)).
        get_val(a(3), a(4)).
        execute('$head_to_term'(a(1), a(6), void, a(5), cont)).
end_predicate('$clause_to_term'/5).

begin_predicate('$dummy_9_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_9_builtins.pl'/1, 'builtins.pl']).
main('$dummy_9_builtins.pl'/1, non- (public)) :
        label('$dummy_9_builtins.pl'/1+sub+1).
        label('$dummy_9_builtins.pl'/1+1).
        label('$dummy_9_builtins.pl'/1+2).
'$dummy_9_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_9_builtins.pl'/1+1, '$dummy_9_builtins.pl'/1+sub+1).
'$dummy_9_builtins.pl'/1+sub+1 :
        trust('$dummy_9_builtins.pl'/1+2).
'$dummy_9_builtins.pl'/1+1 :
        comment(('$dummy_9_builtins.pl'(A):-atom(A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_9_builtins.pl'(A):-['$get_level'(B), atom(A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(atom(a(1))).
        inline('$cut'(a(2))).
        inline(fail).
'$dummy_9_builtins.pl'/1+2 :
        comment(('$dummy_9_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_9_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_9_builtins.pl'/1).

begin_predicate('$term_to_predicateindicator'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_to_predicateindicator'/3, 'builtins.pl']).
main('$term_to_predicateindicator'/3, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(user, s(2)).
'$term_to_predicateindicator'/3 :
        comment(('$term_to_predicateindicator'(A, B:C, D):-'$term_to_predicateindicator'(A, C, user, B, D))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$term_to_predicateindicator'(A, B:C, D):-['$term_to_predicateindicator'(A, C, user, B, D)])).
        get_str((:)/2, s(1), a(2)).
        unify_var(a(4)).
        unify_var(a(5)).
        execute('$term_to_predicateindicator'(a(1), a(5), s(2), a(4), a(3), cont)).
end_predicate('$term_to_predicateindicator'/3).

begin_predicate('$term_to_predicateindicator'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_to_predicateindicator'/5, 'builtins.pl']).
main('$term_to_predicateindicator'/5, non- (public)) :
        put_con(var, s(1)).
        put_int(1, si(2)).
        put_con((:)/2, s(3)).
        put_con(/ / 2, s(4)).
        put_con(type/1, s(5)).
        put_con(predicate_indicator, s(6)).
        put_str_args([s(6)], s(7)).
        put_str(s(5), s(7), s(8)).
        put_con(atom, s(9)).
        put_str_args([s(9)], s(10)).
        put_str(s(5), s(10), s(11)).
        put_con(integer, s(12)).
        put_str_args([s(12)], s(13)).
        put_str(s(5), s(13), s(14)).
        label('$term_to_predicateindicator'/5+top).
        label('$term_to_predicateindicator'/5+var).
        label('$term_to_predicateindicator'/5+var+1).
        label('$term_to_predicateindicator'/5+var+2).
        label('$term_to_predicateindicator'/5+var+3).
        label('$term_to_predicateindicator'/5+var+4).
        label('$term_to_predicateindicator'/5+var+5).
        label('$term_to_predicateindicator'/5+var+6).
        label('$term_to_predicateindicator'/5+int).
        label('$term_to_predicateindicator'/5+int+1).
        label('$term_to_predicateindicator'/5+int+2).
        label('$term_to_predicateindicator'/5+int+3).
        label('$term_to_predicateindicator'/5+str).
        label('$term_to_predicateindicator'/5+str+0).
        label('$term_to_predicateindicator'/5+str+0+1).
        label('$term_to_predicateindicator'/5+str+0+2).
        label('$term_to_predicateindicator'/5+str+0+3).
        label('$term_to_predicateindicator'/5+str+0+4).
        label('$term_to_predicateindicator'/5+str+1).
        label('$term_to_predicateindicator'/5+str+1+1).
        label('$term_to_predicateindicator'/5+str+1+2).
        label('$term_to_predicateindicator'/5+str+1+3).
        label('$term_to_predicateindicator'/5+str+1+4).
        label('$term_to_predicateindicator'/5+str+1+5).
        label('$term_to_predicateindicator'/5+1).
        label('$term_to_predicateindicator'/5+2).
        label('$term_to_predicateindicator'/5+3).
        label('$term_to_predicateindicator'/5+4).
        label('$term_to_predicateindicator'/5+5).
        label('$term_to_predicateindicator'/5+6).
        label('$term_to_predicateindicator'/5+7).
        new_hash(str, 2).
        static([put_hash(s(3), '$term_to_predicateindicator'/5+str+0, str), put_hash(s(4), '$term_to_predicateindicator'/5+str+1, str)]).
'$term_to_predicateindicator'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$term_to_predicateindicator'/5+top).
'$term_to_predicateindicator'/5+top :
        setB0.
        switch_on_term('$term_to_predicateindicator'/5+var, '$term_to_predicateindicator'/5+int, '$term_to_predicateindicator'/5+int, '$term_to_predicateindicator'/5+int, '$term_to_predicateindicator'/5+str, '$term_to_predicateindicator'/5+int).
'$term_to_predicateindicator'/5+var :
        try('$term_to_predicateindicator'/5+1, '$term_to_predicateindicator'/5+var+1).
'$term_to_predicateindicator'/5+var+1 :
        retry('$term_to_predicateindicator'/5+2, '$term_to_predicateindicator'/5+var+2).
'$term_to_predicateindicator'/5+var+2 :
        retry('$term_to_predicateindicator'/5+3, '$term_to_predicateindicator'/5+var+3).
'$term_to_predicateindicator'/5+var+3 :
        retry('$term_to_predicateindicator'/5+4, '$term_to_predicateindicator'/5+var+4).
'$term_to_predicateindicator'/5+var+4 :
        retry('$term_to_predicateindicator'/5+5, '$term_to_predicateindicator'/5+var+5).
'$term_to_predicateindicator'/5+var+5 :
        retry('$term_to_predicateindicator'/5+6, '$term_to_predicateindicator'/5+var+6).
'$term_to_predicateindicator'/5+var+6 :
        trust('$term_to_predicateindicator'/5+7).
'$term_to_predicateindicator'/5+int :
        try('$term_to_predicateindicator'/5+1, '$term_to_predicateindicator'/5+int+1).
'$term_to_predicateindicator'/5+int+1 :
        retry('$term_to_predicateindicator'/5+2, '$term_to_predicateindicator'/5+int+2).
'$term_to_predicateindicator'/5+int+2 :
        retry('$term_to_predicateindicator'/5+4, '$term_to_predicateindicator'/5+int+3).
'$term_to_predicateindicator'/5+int+3 :
        trust('$term_to_predicateindicator'/5+7).
'$term_to_predicateindicator'/5+str :
        switch_on_hash(str, 2, '$term_to_predicateindicator'/5+int, [ (:)/2:'$term_to_predicateindicator'/5+str+0, / / 2:'$term_to_predicateindicator'/5+str+1]).
'$term_to_predicateindicator'/5+str+0 :
        try('$term_to_predicateindicator'/5+1, '$term_to_predicateindicator'/5+str+0+1).
'$term_to_predicateindicator'/5+str+0+1 :
        retry('$term_to_predicateindicator'/5+2, '$term_to_predicateindicator'/5+str+0+2).
'$term_to_predicateindicator'/5+str+0+2 :
        retry('$term_to_predicateindicator'/5+3, '$term_to_predicateindicator'/5+str+0+3).
'$term_to_predicateindicator'/5+str+0+3 :
        retry('$term_to_predicateindicator'/5+4, '$term_to_predicateindicator'/5+str+0+4).
'$term_to_predicateindicator'/5+str+0+4 :
        trust('$term_to_predicateindicator'/5+7).
'$term_to_predicateindicator'/5+str+1 :
        try('$term_to_predicateindicator'/5+1, '$term_to_predicateindicator'/5+str+1+1).
'$term_to_predicateindicator'/5+str+1+1 :
        retry('$term_to_predicateindicator'/5+2, '$term_to_predicateindicator'/5+str+1+2).
'$term_to_predicateindicator'/5+str+1+2 :
        retry('$term_to_predicateindicator'/5+4, '$term_to_predicateindicator'/5+str+1+3).
'$term_to_predicateindicator'/5+str+1+3 :
        retry('$term_to_predicateindicator'/5+5, '$term_to_predicateindicator'/5+str+1+4).
'$term_to_predicateindicator'/5+str+1+4 :
        retry('$term_to_predicateindicator'/5+6, '$term_to_predicateindicator'/5+str+1+5).
'$term_to_predicateindicator'/5+str+1+5 :
        trust('$term_to_predicateindicator'/5+7).
'$term_to_predicateindicator'/5+1 :
        comment(('$term_to_predicateindicator'(A, B, C, D, E):-var(A), !, illarg(var, E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_predicateindicator'(A, B, C, D, E):-['$get_level'(F), var(A), '$cut'(F), illarg(var, E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(1))).
        inline('$cut'(a(6))).
        execute(illarg(s(1), a(5), si(2), cont)).
'$term_to_predicateindicator'/5+2 :
        comment(('$term_to_predicateindicator'(A, B, C, D, E):-var(C), !, illarg(var, E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_predicateindicator'(A, B, C, D, E):-['$get_level'(F), var(C), '$cut'(F), illarg(var, E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(3))).
        inline('$cut'(a(6))).
        execute(illarg(s(1), a(5), si(2), cont)).
'$term_to_predicateindicator'/5+3 :
        comment(('$term_to_predicateindicator'(A:B, C, D, E, F):-!, '$term_to_predicateindicator'(B, C, A, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_predicateindicator'(A:B, C, D, E, F):-['$neck_cut', '$term_to_predicateindicator'(B, C, A, E, F)])).
        get_str((:)/2, s(3), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        set(a(7), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$term_to_predicateindicator'/5+top).
'$term_to_predicateindicator'/5+4 :
        comment(('$term_to_predicateindicator'(A, B, C, D, E):-A\=F/G, !, illarg(type(predicate_indicator), E, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_predicateindicator'(A, B, C, D, E):-['$get_level'(F), '$not_unifiable'(A, G/H), '$cut'(F), illarg(type(predicate_indicator), E, 1)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_str_args([void, void], y(1)).
        put_str(s(4), y(1), a(7)).
        inline('$not_unifiable'(a(1), a(7))).
        inline('$cut'(a(6))).
        execute(illarg(s(8), a(5), si(2), cont)).
'$term_to_predicateindicator'/5+5 :
        comment(('$term_to_predicateindicator'(A/B, C, D, E, F):-'$dummy_10_builtins.pl'(A), !, illarg(type(atom), F, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_predicateindicator'(A/B, C, D, E, F):-['$get_level'(G), '$dummy_10_builtins.pl'(A), '$cut'(G), illarg(type(atom), F, 1)])).
        get_str(/ / 2, s(4), a(1)).
        unify_var(a(6)).
        unify_void(1).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_cont(illarg(s(11), a(5), si(2), cont), p(1)).
        put_cont('$cut'(a(7), p(1)), p(2)).
        execute('$dummy_10_builtins.pl'(a(6), p(2))).
'$term_to_predicateindicator'/5+6 :
        comment(('$term_to_predicateindicator'(A/B, C, D, E, F):-'$dummy_11_builtins.pl'(B), !, illarg(type(integer), F, 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_predicateindicator'(A/B, C, D, E, F):-['$get_level'(G), '$dummy_11_builtins.pl'(B), '$cut'(G), illarg(type(integer), F, 1)])).
        get_str(/ / 2, s(4), a(1)).
        unify_void(1).
        unify_var(a(6)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_cont(illarg(s(14), a(5), si(2), cont), p(1)).
        put_cont('$cut'(a(7), p(1)), p(2)).
        execute('$dummy_11_builtins.pl'(a(6), p(2))).
'$term_to_predicateindicator'/5+7 :
        comment(('$term_to_predicateindicator'(A, A, B, B, C):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$term_to_predicateindicator'(A, A, B, B, C):-[])).
        get_val(a(1), a(2)).
        get_val(a(3), a(4)).
        execute(cont).
end_predicate('$term_to_predicateindicator'/5).

begin_predicate('$dummy_10_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_10_builtins.pl'/1, 'builtins.pl']).
main('$dummy_10_builtins.pl'/1, non- (public)) :
        label('$dummy_10_builtins.pl'/1+sub+1).
        label('$dummy_10_builtins.pl'/1+1).
        label('$dummy_10_builtins.pl'/1+2).
'$dummy_10_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_10_builtins.pl'/1+1, '$dummy_10_builtins.pl'/1+sub+1).
'$dummy_10_builtins.pl'/1+sub+1 :
        trust('$dummy_10_builtins.pl'/1+2).
'$dummy_10_builtins.pl'/1+1 :
        comment(('$dummy_10_builtins.pl'(A):-atom(A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_10_builtins.pl'(A):-['$get_level'(B), atom(A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(atom(a(1))).
        inline('$cut'(a(2))).
        inline(fail).
'$dummy_10_builtins.pl'/1+2 :
        comment(('$dummy_10_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_10_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_10_builtins.pl'/1).

begin_predicate('$dummy_11_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_11_builtins.pl'/1, 'builtins.pl']).
main('$dummy_11_builtins.pl'/1, non- (public)) :
        label('$dummy_11_builtins.pl'/1+sub+1).
        label('$dummy_11_builtins.pl'/1+1).
        label('$dummy_11_builtins.pl'/1+2).
'$dummy_11_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_11_builtins.pl'/1+1, '$dummy_11_builtins.pl'/1+sub+1).
'$dummy_11_builtins.pl'/1+sub+1 :
        trust('$dummy_11_builtins.pl'/1+2).
'$dummy_11_builtins.pl'/1+1 :
        comment(('$dummy_11_builtins.pl'(A):-integer(A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_11_builtins.pl'(A):-['$get_level'(B), integer(A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(integer(a(1))).
        inline('$cut'(a(2))).
        inline(fail).
'$dummy_11_builtins.pl'/1+2 :
        comment(('$dummy_11_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_11_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_11_builtins.pl'/1).

begin_predicate('$update_indexing'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$update_indexing'/5, 'builtins.pl']).
main('$update_indexing'/5, non- (public)) :
'$update_indexing'/5 :
        comment(('$update_indexing'(A, B, C, D, E):-'$new_indexing_hash'(A, B, F), '$gen_indexing_keys'(C, F, G), '$update_indexing_hash'(E, G, F, D))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        set(arg(5), a(5)).
        comment(('$update_indexing'(A, B, C, D, E):-['$new_indexing_hash'(A, B, F), '$gen_indexing_keys'(C, F, G), '$update_indexing_hash'(E, G, F, D)])).
        put_var(a(6)).
        put_var(a(7)).
        put_cont('$update_indexing_hash'(a(5), a(7), a(6), a(4), cont), p(1)).
        put_cont('$gen_indexing_keys'(a(3), a(6), a(7), p(1)), p(2)).
        execute('$new_indexing_hash'(a(1), a(2), a(6), p(2))).
end_predicate('$update_indexing'/5).

begin_predicate('$gen_indexing_keys'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$gen_indexing_keys'/3, 'builtins.pl']).
main('$gen_indexing_keys'/3, non- (public)) :
        put_con((:-)/2, s(1)).
        put_con(all, s(2)).
        put_con([], s(3)).
        put_list(s(2), s(3), s(4)).
        put_int(1, si(5)).
        label(fail/0).
        label('$gen_indexing_keys'/3+var).
        label('$gen_indexing_keys'/3+var+1).
        label('$gen_indexing_keys'/3+1).
        label('$gen_indexing_keys'/3+2).
'$gen_indexing_keys'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$gen_indexing_keys'/3+var, fail/0, fail/0, fail/0, '$gen_indexing_keys'/3+var, fail/0).
'$gen_indexing_keys'/3+var :
        try('$gen_indexing_keys'/3+1, '$gen_indexing_keys'/3+var+1).
'$gen_indexing_keys'/3+var+1 :
        trust('$gen_indexing_keys'/3+2).
'$gen_indexing_keys'/3+1 :
        comment(('$gen_indexing_keys'((A:-B), C, [all]):-atom(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$gen_indexing_keys'((A:-B), C, [all]):-['$get_level'(D), atom(A), '$cut'(D)])).
        get_str((:-)/2, s(1), a(1)).
        unify_var(a(4)).
        unify_void(1).
        get_ground([all], s(4), a(3)).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        inline(atom(a(4))).
        inline('$cut'(a(5))).
        execute(cont).
'$gen_indexing_keys'/3+2 :
        comment(('$gen_indexing_keys'((A:-B), C, D):-arg(1, A, E), '$gen_indexing_keys0'(E, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$gen_indexing_keys'((A:-B), C, D):-[arg(1, A, E), '$gen_indexing_keys0'(E, C, D)])).
        get_str((:-)/2, s(1), a(1)).
        unify_var(a(4)).
        unify_void(1).
        put_var(a(5)).
        put_cont('$gen_indexing_keys0'(a(5), a(2), a(3), cont), p(1)).
        execute(arg(si(5), a(4), a(5), p(1))).
end_predicate('$gen_indexing_keys'/3).

begin_predicate('$gen_indexing_keys0'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$gen_indexing_keys0'/3, 'builtins.pl']).
main('$gen_indexing_keys0'/3, non- (public)) :
        put_con(all, s(1)).
        put_con(lis, s(2)).
        put_con([], s(3)).
        put_list(s(2), s(3), s(4)).
        put_list(s(1), s(4), s(5)).
        put_con(str, s(6)).
        put_list(s(6), s(3), s(7)).
        put_list(s(1), s(7), s(8)).
        put_con(type/1, s(9)).
        put_con(term, s(10)).
        put_str_args([s(10)], s(11)).
        put_str(s(9), s(11), s(12)).
        put_con('$gen_indexing_keys0'/3, s(13)).
        put_int(1, si(14)).
        label('$gen_indexing_keys0'/3+sub+1).
        label('$gen_indexing_keys0'/3+sub+2).
        label('$gen_indexing_keys0'/3+sub+3).
        label('$gen_indexing_keys0'/3+sub+4).
        label('$gen_indexing_keys0'/3+1).
        label('$gen_indexing_keys0'/3+2).
        label('$gen_indexing_keys0'/3+3).
        label('$gen_indexing_keys0'/3+4).
        label('$gen_indexing_keys0'/3+5).
'$gen_indexing_keys0'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$gen_indexing_keys0'/3+1, '$gen_indexing_keys0'/3+sub+1).
'$gen_indexing_keys0'/3+sub+1 :
        retry('$gen_indexing_keys0'/3+2, '$gen_indexing_keys0'/3+sub+2).
'$gen_indexing_keys0'/3+sub+2 :
        retry('$gen_indexing_keys0'/3+3, '$gen_indexing_keys0'/3+sub+3).
'$gen_indexing_keys0'/3+sub+3 :
        retry('$gen_indexing_keys0'/3+4, '$gen_indexing_keys0'/3+sub+4).
'$gen_indexing_keys0'/3+sub+4 :
        trust('$gen_indexing_keys0'/3+5).
'$gen_indexing_keys0'/3+1 :
        comment(('$gen_indexing_keys0'(A, B, C):-var(A), !, hash_keys(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$gen_indexing_keys0'(A, B, C):-['$get_level'(D), var(A), '$cut'(D), hash_keys(B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        execute(hash_keys(a(2), a(3), cont)).
'$gen_indexing_keys0'/3+2 :
        comment(('$gen_indexing_keys0'(A, B, [all, lis]):-A=[C|D], !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$gen_indexing_keys0'(A, B, [all, lis]):-['$get_level'(C), '$unify'(A, [D|E]), '$cut'(C)])).
        get_ground([all, lis], s(5), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_list(void, void, a(5)).
        inline('$unify'(a(1), a(5))).
        inline('$cut'(a(4))).
        execute(cont).
'$gen_indexing_keys0'/3+3 :
        comment(('$gen_indexing_keys0'(A, B, [all, str]):-compound(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$gen_indexing_keys0'(A, B, [all, str]):-['$get_level'(C), compound(A), '$cut'(C)])).
        get_ground([all, str], s(8), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$cut'(a(4), cont), p(1)).
        execute(compound(a(1), p(1))).
'$gen_indexing_keys0'/3+4 :
        comment(('$gen_indexing_keys0'(A, B, [all, C]):-ground(A), !, '$term_hash'(A, C), '$dummy_12_builtins.pl'(C, B, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$gen_indexing_keys0'(A, B, [all, C]):-['$get_level'(D), ground(A), '$cut'(D), '$term_hash'(A, C), '$dummy_12_builtins.pl'(C, B, E)])).
        get_list(a(3)).
        unify_con(all, s(1)).
        unify_var(a(4)).
        get_list(a(4)).
        unify_var(a(5)).
        unify_con([], s(3)).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(ground(a(1))).
        inline('$cut'(a(6))).
        put_cont('$dummy_12_builtins.pl'(a(5), a(2), void, cont), p(1)).
        execute('$term_hash'(a(1), a(5), p(1))).
'$gen_indexing_keys0'/3+5 :
        comment(('$gen_indexing_keys0'(A, B, C):-illarg(type(term), '$gen_indexing_keys0'(A, B, C), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$gen_indexing_keys0'(A, B, C):-[illarg(type(term), '$gen_indexing_keys0'(A, B, C), 1)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(13), y(1), a(4)).
        execute(illarg(s(12), a(4), si(14), cont)).
end_predicate('$gen_indexing_keys0'/3).

begin_predicate('$dummy_12_builtins.pl'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_12_builtins.pl'/3, 'builtins.pl']).
main('$dummy_12_builtins.pl'/3, non- (public)) :
        put_con(var, s(1)).
        label('$dummy_12_builtins.pl'/3+sub+1).
        label('$dummy_12_builtins.pl'/3+1).
        label('$dummy_12_builtins.pl'/3+2).
'$dummy_12_builtins.pl'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dummy_12_builtins.pl'/3+1, '$dummy_12_builtins.pl'/3+sub+1).
'$dummy_12_builtins.pl'/3+sub+1 :
        trust('$dummy_12_builtins.pl'/3+2).
'$dummy_12_builtins.pl'/3+1 :
        comment(('$dummy_12_builtins.pl'(A, B, C):-hash_contains_key(B, A), !, true)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_12_builtins.pl'(A, B, C):-['$get_level'(D), hash_contains_key(B, A), '$cut'(D)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$cut'(a(4), cont), p(1)).
        execute(hash_contains_key(a(2), a(1), p(1))).
'$dummy_12_builtins.pl'/3+2 :
        comment(('$dummy_12_builtins.pl'(A, B, C):-hash_get(B, var, C), hash_put(B, A, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_12_builtins.pl'(A, B, C):-[hash_get(B, var, C), hash_put(B, A, C)])).
        put_cont(hash_put(a(2), a(1), a(3), cont), p(1)).
        execute(hash_get(a(2), s(1), a(3), p(1))).
end_predicate('$dummy_12_builtins.pl'/3).

begin_predicate('$update_indexing_hash'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$update_indexing_hash'/4, 'builtins.pl']).
main('$update_indexing_hash'/4, non- (public)) :
        put_con(a, s(1)).
        put_con(z, s(2)).
        label(fail/0).
        label('$update_indexing_hash'/4+var).
        label('$update_indexing_hash'/4+var+1).
        label('$update_indexing_hash'/4+con).
        label('$update_indexing_hash'/4+1).
        label('$update_indexing_hash'/4+2).
        new_hash(con, 2).
        static([put_hash(s(1), '$update_indexing_hash'/4+1, con), put_hash(s(2), '$update_indexing_hash'/4+2, con)]).
'$update_indexing_hash'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        switch_on_term('$update_indexing_hash'/4+var, fail/0, fail/0, '$update_indexing_hash'/4+con, fail/0, fail/0).
'$update_indexing_hash'/4+var :
        try('$update_indexing_hash'/4+1, '$update_indexing_hash'/4+var+1).
'$update_indexing_hash'/4+var+1 :
        trust('$update_indexing_hash'/4+2).
'$update_indexing_hash'/4+con :
        switch_on_hash(con, 2, fail/0, [a:'$update_indexing_hash'/4+1, z:'$update_indexing_hash'/4+2]).
'$update_indexing_hash'/4+1 :
        comment(('$update_indexing_hash'(a, A, B, C):-!, '$hash_addz_all'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$update_indexing_hash'(a, A, B, C):-['$neck_cut', '$hash_addz_all'(A, B, C)])).
        get_con(a, s(1), a(1)).
        inline('$neck_cut').
        execute('$hash_addz_all'(a(2), a(3), a(4), cont)).
'$update_indexing_hash'/4+2 :
        comment(('$update_indexing_hash'(z, A, B, C):-!, '$hash_adda_all'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$update_indexing_hash'(z, A, B, C):-['$neck_cut', '$hash_adda_all'(A, B, C)])).
        get_con(z, s(2), a(1)).
        inline('$neck_cut').
        execute('$hash_adda_all'(a(2), a(3), a(4), cont)).
end_predicate('$update_indexing_hash'/4).

begin_predicate('$hash_adda_all'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$hash_adda_all'/3, 'builtins.pl']).
main('$hash_adda_all'/3, non- (public)) :
        put_con([], s(1)).
        label(fail/0).
        label('$hash_adda_all'/3+var).
        label('$hash_adda_all'/3+var+1).
        label('$hash_adda_all'/3+1).
        label('$hash_adda_all'/3+2).
'$hash_adda_all'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$hash_adda_all'/3+var, fail/0, fail/0, '$hash_adda_all'/3+1, fail/0, '$hash_adda_all'/3+2).
'$hash_adda_all'/3+var :
        try('$hash_adda_all'/3+1, '$hash_adda_all'/3+var+1).
'$hash_adda_all'/3+var+1 :
        trust('$hash_adda_all'/3+2).
'$hash_adda_all'/3+1 :
        comment(('$hash_adda_all'([], A, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$hash_adda_all'([], A, B):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$hash_adda_all'/3+2 :
        comment(('$hash_adda_all'([A|B], C, D):-'$hash_adda'(C, A, D), '$hash_adda_all'(B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$hash_adda_all'([A|B], C, D):-['$hash_adda'(C, A, D), '$hash_adda_all'(B, C, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_cont('$hash_adda_all'(a(5), a(2), a(3), cont), p(1)).
        execute('$hash_adda'(a(2), a(4), a(3), p(1))).
end_predicate('$hash_adda_all'/3).

begin_predicate('$hash_addz_all'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$hash_addz_all'/3, 'builtins.pl']).
main('$hash_addz_all'/3, non- (public)) :
        put_con([], s(1)).
        label(fail/0).
        label('$hash_addz_all'/3+var).
        label('$hash_addz_all'/3+var+1).
        label('$hash_addz_all'/3+1).
        label('$hash_addz_all'/3+2).
'$hash_addz_all'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$hash_addz_all'/3+var, fail/0, fail/0, '$hash_addz_all'/3+1, fail/0, '$hash_addz_all'/3+2).
'$hash_addz_all'/3+var :
        try('$hash_addz_all'/3+1, '$hash_addz_all'/3+var+1).
'$hash_addz_all'/3+var+1 :
        trust('$hash_addz_all'/3+2).
'$hash_addz_all'/3+1 :
        comment(('$hash_addz_all'([], A, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$hash_addz_all'([], A, B):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$hash_addz_all'/3+2 :
        comment(('$hash_addz_all'([A|B], C, D):-'$hash_addz'(C, A, D), '$hash_addz_all'(B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$hash_addz_all'([A|B], C, D):-['$hash_addz'(C, A, D), '$hash_addz_all'(B, C, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_cont('$hash_addz_all'(a(5), a(2), a(3), cont), p(1)).
        execute('$hash_addz'(a(2), a(4), a(3), p(1))).
end_predicate('$hash_addz_all'/3).

begin_predicate('$erase_all'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$erase_all'/1, 'builtins.pl']).
main('$erase_all'/1, non- (public)) :
        put_con([], s(1)).
        label(fail/0).
        label('$erase_all'/1+var).
        label('$erase_all'/1+var+1).
        label('$erase_all'/1+1).
        label('$erase_all'/1+2).
'$erase_all'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$erase_all'/1+var, fail/0, fail/0, '$erase_all'/1+1, fail/0, '$erase_all'/1+2).
'$erase_all'/1+var :
        try('$erase_all'/1+1, '$erase_all'/1+var+1).
'$erase_all'/1+var+1 :
        trust('$erase_all'/1+2).
'$erase_all'/1+1 :
        comment(('$erase_all'([]):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$erase_all'([]):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$erase_all'/1+2 :
        comment(('$erase_all'([A|B]):-'$erase'(A), '$erase_all'(B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$erase_all'([A|B]):-['$erase'(A), '$erase_all'(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_cont('$erase_all'(a(3), cont), p(1)).
        execute('$erase'(a(2), p(1))).
end_predicate('$erase_all'/1).

begin_predicate('$rehash_indexing'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$rehash_indexing'/3, 'builtins.pl']).
main('$rehash_indexing'/3, non- (public)) :
'$rehash_indexing'/3 :
        comment(('$rehash_indexing'(A, B, C):-'$new_indexing_hash'(A, B, D), hash_keys(D, E), '$remove_index_all'(E, D, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$rehash_indexing'(A, B, C):-['$new_indexing_hash'(A, B, D), hash_keys(D, E), '$remove_index_all'(E, D, C)])).
        put_var(a(4)).
        put_var(a(5)).
        put_cont('$remove_index_all'(a(5), a(4), a(3), cont), p(1)).
        put_cont(hash_keys(a(4), a(5), p(1)), p(2)).
        execute('$new_indexing_hash'(a(1), a(2), a(4), p(2))).
end_predicate('$rehash_indexing'/3).

begin_predicate('$remove_index_all'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$remove_index_all'/3, 'builtins.pl']).
main('$remove_index_all'/3, non- (public)) :
        put_con([], s(1)).
        label(fail/0).
        label('$remove_index_all'/3+var).
        label('$remove_index_all'/3+var+1).
        label('$remove_index_all'/3+1).
        label('$remove_index_all'/3+2).
'$remove_index_all'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$remove_index_all'/3+var, fail/0, fail/0, '$remove_index_all'/3+1, fail/0, '$remove_index_all'/3+2).
'$remove_index_all'/3+var :
        try('$remove_index_all'/3+1, '$remove_index_all'/3+var+1).
'$remove_index_all'/3+var+1 :
        trust('$remove_index_all'/3+2).
'$remove_index_all'/3+1 :
        comment(('$remove_index_all'([], A, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$remove_index_all'([], A, B):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$remove_index_all'/3+2 :
        comment(('$remove_index_all'([A|B], C, D):-'$hash_remove_first'(C, A, D), '$remove_index_all'(B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$remove_index_all'([A|B], C, D):-['$hash_remove_first'(C, A, D), '$remove_index_all'(B, C, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_cont('$remove_index_all'(a(5), a(2), a(3), cont), p(1)).
        execute('$hash_remove_first'(a(2), a(4), a(3), p(1))).
end_predicate('$remove_index_all'/3).

begin_predicate(findall/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([findall/3, 'builtins.pl']).
main(findall/3, (public)) :
        put_con(type/1, s(1)).
        put_con(callable, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(findall/3, s(5)).
        put_int(2, si(6)).
        label(findall/3+sub+1).
        label(findall/3+1).
        label(findall/3+2).
findall/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try(findall/3+1, findall/3+sub+1).
findall/3+sub+1 :
        trust(findall/3+2).
findall/3+1 :
        comment((findall(A, B, C):-callable(B), !, new_hash(D), '$findall'(D, A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((findall(A, B, C):-['$get_level'(D), callable(B), '$cut'(D), new_hash(E), '$findall'(E, A, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_cont('$findall'(a(5), a(1), a(2), a(3), cont), p(1)).
        put_cont(new_hash(a(5), p(1)), p(2)).
        put_cont('$cut'(a(4), p(2)), p(3)).
        execute(callable(a(2), p(3))).
findall/3+2 :
        comment((findall(A, B, C):-illarg(type(callable), findall(A, B, C), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((findall(A, B, C):-[illarg(type(callable), findall(A, B, C), 2)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(5), y(1), a(4)).
        execute(illarg(s(4), a(4), si(6), cont)).
end_predicate(findall/3).

begin_predicate('$findall'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$findall'/4, 'builtins.pl']).
main('$findall'/4, non- (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$FINDALL', s(3)).
        label('$findall'/4+sub+1).
        label('$findall'/4+1).
        label('$findall'/4+2).
'$findall'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        try('$findall'/4+1, '$findall'/4+sub+1).
'$findall'/4+sub+1 :
        trust('$findall'/4+2).
'$findall'/4+1 :
        comment(('$findall'(A, B, C, D):-call(C), copy_term(B, E), '$hash_adda'(A, '$FINDALL', E), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$findall'(A, B, C, D):-[call('jp.ac.kobe_u.cs.prolog.builtin':C), copy_term(B, E), '$hash_adda'(A, '$FINDALL', E), fail])).
        put_str_args([s(2), a(3)], y(1)).
        put_str(s(1), y(1), a(5)).
        put_var(a(6)).
        put_cont(fail(cont), p(1)).
        put_cont('$hash_adda'(a(1), s(3), a(6), p(1)), p(2)).
        put_cont(copy_term(a(2), a(6), p(2)), p(3)).
        execute(call(a(5), p(3))).
'$findall'/4+2 :
        comment(('$findall'(A, B, C, D):-hash_get(A, '$FINDALL', E), '$builtin_reverse'(E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$findall'(A, B, C, D):-[hash_get(A, '$FINDALL', E), '$builtin_reverse'(E, D)])).
        put_var(a(5)).
        put_cont('$builtin_reverse'(a(5), a(4), cont), p(1)).
        execute(hash_get(a(1), s(3), a(5), p(1))).
end_predicate('$findall'/4).

begin_predicate(bagof/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([bagof/3, 'builtins.pl']).
main(bagof/3, (public)) :
        put_con(type/1, s(1)).
        put_con(callable, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(bagof/3, s(5)).
        put_int(2, si(6)).
        label(bagof/3+sub+1).
        label(bagof/3+1).
        label(bagof/3+2).
bagof/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try(bagof/3+1, bagof/3+sub+1).
bagof/3+sub+1 :
        trust(bagof/3+2).
bagof/3+1 :
        comment((bagof(A, B, C):-callable(B), !, '$bagof'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((bagof(A, B, C):-['$get_level'(D), callable(B), '$cut'(D), '$bagof'(A, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$bagof'(a(1), a(2), a(3), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute(callable(a(2), p(2))).
bagof/3+2 :
        comment((bagof(A, B, C):-illarg(type(callable), bagof(A, B, C), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((bagof(A, B, C):-[illarg(type(callable), bagof(A, B, C), 2)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(5), y(1), a(4)).
        execute(illarg(s(4), a(4), si(6), cont)).
end_predicate(bagof/3).

begin_predicate(setof/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([setof/3, 'builtins.pl']).
main(setof/3, (public)) :
        put_con(type/1, s(1)).
        put_con(callable, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(setof/3, s(5)).
        put_int(2, si(6)).
        label(setof/3+sub+1).
        label(setof/3+1).
        label(setof/3+2).
setof/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try(setof/3+1, setof/3+sub+1).
setof/3+sub+1 :
        trust(setof/3+2).
setof/3+1 :
        comment((setof(A, B, C):-callable(B), !, '$bagof'(A, B, D), sort(D, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((setof(A, B, C):-['$get_level'(D), callable(B), '$cut'(D), '$bagof'(A, B, E), sort(E, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_cont(sort(a(5), a(3), cont), p(1)).
        put_cont('$bagof'(a(1), a(2), a(5), p(1)), p(2)).
        put_cont('$cut'(a(4), p(2)), p(3)).
        execute(callable(a(2), p(3))).
setof/3+2 :
        comment((setof(A, B, C):-illarg(type(callable), setof(A, B, C), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((setof(A, B, C):-[illarg(type(callable), setof(A, B, C), 2)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(5), y(1), a(4)).
        execute(illarg(s(4), a(4), si(6), cont)).
end_predicate(setof/3).

begin_predicate('$bagof'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$bagof'/3, 'builtins.pl']).
main('$bagof'/3, non- (public)) :
        put_con([], s(1)).
        put_con('$witness', s(2)).
        put_con((+)/2, s(3)).
        put_con((:)/2, s(4)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(5)).
        label('$bagof'/3+sub+1).
        label('$bagof'/3+1).
        label('$bagof'/3+2).
'$bagof'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$bagof'/3+1, '$bagof'/3+sub+1).
'$bagof'/3+sub+1 :
        trust('$bagof'/3+2).
'$bagof'/3+1 :
        comment(('$bagof'(A, B, C):-'$free_variables_set'(B, A, D), D\==[], !, E=..['$witness'|D], findall(E+A, B, F), '$bagof_instances'(F, E, G), C=G)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$bagof'(A, B, C):-['$get_level'(D), '$free_variables_set'(B, A, E), '$inequality_of_term'(E, []), '$cut'(D), '$univ'(F, ['$witness'|E]), findall(F+A, 'jp.ac.kobe_u.cs.prolog.builtin':B, G), '$bagof_instances'(G, F, H), '$unify'(C, H)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_var(a(6)).
        put_list(s(2), a(5), a(7)).
        put_str_args([a(6), a(1)], y(1)).
        put_str(s(3), y(1), a(8)).
        put_str_args([s(5), a(2)], y(2)).
        put_str(s(4), y(2), a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_cont('$unify'(a(3), a(11), cont), p(1)).
        put_cont('$bagof_instances'(a(10), a(6), a(11), p(1)), p(2)).
        put_cont(findall(a(8), a(9), a(10), p(2)), p(3)).
        put_cont('$univ'(a(6), a(7), p(3)), p(4)).
        put_cont('$cut'(a(4), p(4)), p(5)).
        put_cont('$inequality_of_term'(a(5), s(1), p(5)), p(6)).
        execute('$free_variables_set'(a(2), a(1), a(5), p(6))).
'$bagof'/3+2 :
        comment(('$bagof'(A, B, C):-findall(A, B, C), C\==[])).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$bagof'(A, B, C):-[findall(A, 'jp.ac.kobe_u.cs.prolog.builtin':B, C), '$inequality_of_term'(C, [])])).
        put_str_args([s(5), a(2)], y(1)).
        put_str(s(4), y(1), a(4)).
        put_cont('$inequality_of_term'(a(3), s(1), cont), p(1)).
        execute(findall(a(1), a(4), a(3), p(1))).
end_predicate('$bagof'/3).

begin_predicate('$bagof_instances'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$bagof_instances'/3, 'builtins.pl']).
main('$bagof_instances'/3, non- (public)) :
        put_con([], s(1)).
        put_con((+)/2, s(2)).
        label('$bagof_instances'/3+var).
        label('$bagof_instances'/3+var+1).
        label('$bagof_instances'/3+1).
        label('$bagof_instances'/3+2).
'$bagof_instances'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$bagof_instances'/3+var, '$bagof_instances'/3+2, '$bagof_instances'/3+2, '$bagof_instances'/3+var, '$bagof_instances'/3+2, '$bagof_instances'/3+2).
'$bagof_instances'/3+var :
        try('$bagof_instances'/3+1, '$bagof_instances'/3+var+1).
'$bagof_instances'/3+var+1 :
        trust('$bagof_instances'/3+2).
'$bagof_instances'/3+1 :
        comment(('$bagof_instances'([], A, B):-fail)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$bagof_instances'([], A, B):-[fail])).
        get_con([], s(1), a(1)).
        inline(fail).
'$bagof_instances'/3+2 :
        comment(('$bagof_instances'(A, B, C):-A=[D+E|F], '$variants_subset'(F, D, G, H, I), '$bagof_instances0'(I, B, C, [D+E|G], [E|H]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$bagof_instances'(A, B, C):-['$unify'(A, [D+E|F]), '$variants_subset'(F, D, G, H, I), '$bagof_instances0'(I, B, C, [D+E|G], [E|H])])).
        put_var(a(4)).
        put_var(a(5)).
        put_str_args([a(4), a(5)], y(1)).
        put_str(s(2), y(1), a(6)).
        put_var(a(7)).
        put_list(a(6), a(7), a(8)).
        inline('$unify'(a(1), a(8))).
        put_var(a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_str_args([a(4), a(5)], y(2)).
        put_str(s(2), y(2), a(12)).
        put_list(a(12), a(9), a(13)).
        put_list(a(5), a(10), a(14)).
        put_cont('$bagof_instances0'(a(11), a(2), a(3), a(13), a(14), cont), p(1)).
        execute('$variants_subset'(a(7), a(4), a(9), a(10), a(11), p(1))).
end_predicate('$bagof_instances'/3).

begin_predicate('$bagof_instances0'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$bagof_instances0'/5, 'builtins.pl']).
main('$bagof_instances0'/5, non- (public)) :
        label('$bagof_instances0'/5+sub+1).
        label('$bagof_instances0'/5+1).
        label('$bagof_instances0'/5+2).
'$bagof_instances0'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$bagof_instances0'/5+1, '$bagof_instances0'/5+sub+1).
'$bagof_instances0'/5+sub+1 :
        trust('$bagof_instances0'/5+2).
'$bagof_instances0'/5+1 :
        comment(('$bagof_instances0'(A, B, C, D, E):-'$unify_witness'(D, B), C=E)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$bagof_instances0'(A, B, C, D, E):-['$unify_witness'(D, B), '$unify'(C, E)])).
        put_cont('$unify'(a(3), a(5), cont), p(1)).
        execute('$unify_witness'(a(4), a(2), p(1))).
'$bagof_instances0'/5+2 :
        comment(('$bagof_instances0'(A, B, C, D, E):-'$bagof_instances'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$bagof_instances0'(A, B, C, D, E):-['$bagof_instances'(A, B, C)])).
        execute('$bagof_instances'(a(1), a(2), a(3), cont)).
end_predicate('$bagof_instances0'/5).

begin_predicate('$variants_subset'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$variants_subset'/5, 'builtins.pl']).
main('$variants_subset'/5, non- (public)) :
        put_con([], s(1)).
        put_con((+)/2, s(2)).
        label('$variants_subset'/5+top).
        label(fail/0).
        label('$variants_subset'/5+var).
        label('$variants_subset'/5+var+1).
        label('$variants_subset'/5+var+2).
        label('$variants_subset'/5+lis).
        label('$variants_subset'/5+lis+1).
        label('$variants_subset'/5+1).
        label('$variants_subset'/5+2).
        label('$variants_subset'/5+3).
'$variants_subset'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$variants_subset'/5+top).
'$variants_subset'/5+top :
        setB0.
        switch_on_term('$variants_subset'/5+var, fail/0, fail/0, '$variants_subset'/5+1, fail/0, '$variants_subset'/5+lis).
'$variants_subset'/5+var :
        try('$variants_subset'/5+1, '$variants_subset'/5+var+1).
'$variants_subset'/5+var+1 :
        retry('$variants_subset'/5+2, '$variants_subset'/5+var+2).
'$variants_subset'/5+var+2 :
        trust('$variants_subset'/5+3).
'$variants_subset'/5+lis :
        try('$variants_subset'/5+2, '$variants_subset'/5+lis+1).
'$variants_subset'/5+lis+1 :
        trust('$variants_subset'/5+3).
'$variants_subset'/5+1 :
        comment(('$variants_subset'([], A, [], [], []):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$variants_subset'([], A, [], [], []):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(3)).
        get_con([], s(1), a(4)).
        get_con([], s(1), a(5)).
        inline('$neck_cut').
        execute(cont).
'$variants_subset'/5+2 :
        comment(('$variants_subset'([A+B|C], D, [A+B|E], [B|F], G):-'$term_variant'(D, A), !, '$variants_subset'(C, D, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$variants_subset'([A+B|C], D, [A+B|E], [B|F], G):-['$get_level'(H), '$term_variant'(D, A), '$cut'(H), '$variants_subset'(C, D, E, F, G)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((+)/2, s(2), a(6)).
        unify_var(a(8)).
        unify_var(a(9)).
        get_list(a(3)).
        unify_var(a(10)).
        unify_var(a(11)).
        get_str((+)/2, s(2), a(10)).
        unify_val(a(8)).
        unify_val(a(9)).
        get_list(a(4)).
        unify_val(a(9)).
        unify_var(a(12)).
        put_var(a(13)).
        inline('$get_level'(a(13))).
        put_cont('$variants_subset'(a(7), a(2), a(11), a(12), a(5), cont), p(1)).
        put_cont('$cut'(a(13), p(1)), p(2)).
        execute('$term_variant'(a(2), a(8), p(2))).
'$variants_subset'/5+3 :
        comment(('$variants_subset'([A|B], C, D, E, [A|F]):-'$variants_subset'(B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$variants_subset'([A|B], C, D, E, [A|F]):-['$variants_subset'(B, C, D, E, F)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_list(a(5)).
        unify_val(a(6)).
        unify_var(a(8)).
        set(a(7), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(a(8), ea(5)).
        set(cont, econt).
        goto('$variants_subset'/5+top).
end_predicate('$variants_subset'/5).

begin_predicate('$term_variant'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_variant'/2, 'builtins.pl']).
main('$term_variant'/2, non- (public)) :
'$term_variant'/2 :
        comment(('$term_variant'(A, B):-new_hash(C), '$term_variant'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$term_variant'(A, B):-[new_hash(C), '$term_variant'(A, B, C)])).
        put_var(a(3)).
        put_cont('$term_variant'(a(1), a(2), a(3), cont), p(1)).
        execute(new_hash(a(3), p(1))).
end_predicate('$term_variant'/2).

begin_predicate('$dummy_13_builtins.pl'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_13_builtins.pl'/4, 'builtins.pl']).
main('$dummy_13_builtins.pl'/4, non- (public)) :
        label('$dummy_13_builtins.pl'/4+sub+1).
        label('$dummy_13_builtins.pl'/4+1).
        label('$dummy_13_builtins.pl'/4+2).
'$dummy_13_builtins.pl'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        try('$dummy_13_builtins.pl'/4+1, '$dummy_13_builtins.pl'/4+sub+1).
'$dummy_13_builtins.pl'/4+sub+1 :
        trust('$dummy_13_builtins.pl'/4+2).
'$dummy_13_builtins.pl'/4+1 :
        comment(('$dummy_13_builtins.pl'(A, B, C, D):-hash_contains_key(C, A), !, hash_get(C, A, D), B==D)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dummy_13_builtins.pl'(A, B, C, D):-['$get_level'(E), hash_contains_key(C, A), '$cut'(E), hash_get(C, A, D), '$equality_of_term'(B, D)])).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_cont('$equality_of_term'(a(2), a(4), cont), p(1)).
        put_cont(hash_get(a(3), a(1), a(4), p(1)), p(2)).
        put_cont('$cut'(a(5), p(2)), p(3)).
        execute(hash_contains_key(a(3), a(1), p(3))).
'$dummy_13_builtins.pl'/4+2 :
        comment(('$dummy_13_builtins.pl'(A, B, C, D):-var(B), hash_put(C, A, B))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dummy_13_builtins.pl'(A, B, C, D):-[var(B), hash_put(C, A, B)])).
        inline(var(a(2))).
        execute(hash_put(a(3), a(1), a(2), cont)).
end_predicate('$dummy_13_builtins.pl'/4).

begin_predicate('$term_variant'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$term_variant'/3, 'builtins.pl']).
main('$term_variant'/3, non- (public)) :
        label('$term_variant'/3+top).
        label('$term_variant'/3+var).
        label('$term_variant'/3+var+1).
        label('$term_variant'/3+var+2).
        label('$term_variant'/3+var+3).
        label('$term_variant'/3+var+4).
        label('$term_variant'/3+int).
        label('$term_variant'/3+int+1).
        label('$term_variant'/3+int+2).
        label('$term_variant'/3+int+3).
        label('$term_variant'/3+1).
        label('$term_variant'/3+2).
        label('$term_variant'/3+3).
        label('$term_variant'/3+4).
        label('$term_variant'/3+5).
'$term_variant'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$term_variant'/3+top).
'$term_variant'/3+top :
        setB0.
        switch_on_term('$term_variant'/3+var, '$term_variant'/3+int, '$term_variant'/3+int, '$term_variant'/3+int, '$term_variant'/3+int, '$term_variant'/3+var).
'$term_variant'/3+var :
        try('$term_variant'/3+1, '$term_variant'/3+var+1).
'$term_variant'/3+var+1 :
        retry('$term_variant'/3+2, '$term_variant'/3+var+2).
'$term_variant'/3+var+2 :
        retry('$term_variant'/3+3, '$term_variant'/3+var+3).
'$term_variant'/3+var+3 :
        retry('$term_variant'/3+4, '$term_variant'/3+var+4).
'$term_variant'/3+var+4 :
        trust('$term_variant'/3+5).
'$term_variant'/3+int :
        try('$term_variant'/3+1, '$term_variant'/3+int+1).
'$term_variant'/3+int+1 :
        retry('$term_variant'/3+2, '$term_variant'/3+int+2).
'$term_variant'/3+int+2 :
        retry('$term_variant'/3+3, '$term_variant'/3+int+3).
'$term_variant'/3+int+3 :
        trust('$term_variant'/3+5).
'$term_variant'/3+1 :
        comment(('$term_variant'(A, B, C):-var(A), !, '$dummy_13_builtins.pl'(A, B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$term_variant'(A, B, C):-['$get_level'(D), var(A), '$cut'(D), '$dummy_13_builtins.pl'(A, B, C, E)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        execute('$dummy_13_builtins.pl'(a(1), a(2), a(3), void, cont)).
'$term_variant'/3+2 :
        comment(('$term_variant'(A, B, C):-ground(A), !, A==B)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$term_variant'(A, B, C):-['$get_level'(D), ground(A), '$cut'(D), '$equality_of_term'(A, B)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(ground(a(1))).
        inline('$cut'(a(4))).
        inline('$equality_of_term'(a(1), a(2))).
        execute(cont).
'$term_variant'/3+3 :
        comment(('$term_variant'(A, B, C):-var(B), !, fail)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$term_variant'(A, B, C):-['$get_level'(D), var(B), '$cut'(D), fail])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(2))).
        inline('$cut'(a(4))).
        inline(fail).
'$term_variant'/3+4 :
        comment(('$term_variant'([A|B], [C|D], E):-!, '$term_variant'(A, C, E), '$term_variant'(B, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$term_variant'([A|B], [C|D], E):-['$neck_cut', '$term_variant'(A, C, E), '$term_variant'(B, D, E)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_cont('$term_variant'(a(5), a(7), a(3), cont), p(1)).
        set(a(4), ea(1)).
        set(a(6), ea(2)).
        set(a(3), ea(3)).
        set(p(1), econt).
        goto('$term_variant'/3+top).
'$term_variant'/3+5 :
        comment(('$term_variant'(A, B, C):-A=..D, B=..E, '$term_variant'(D, E, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$term_variant'(A, B, C):-['$univ'(A, D), '$univ'(B, E), '$term_variant'(D, E, C)])).
        put_var(a(4)).
        put_var(a(5)).
        put_cont('$term_variant'(a(4), a(5), a(3), cont), p(1)).
        put_cont('$univ'(a(2), a(5), p(1)), p(2)).
        execute('$univ'(a(1), a(4), p(2))).
end_predicate('$term_variant'/3).

begin_predicate('$unify_witness'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$unify_witness'/2, 'builtins.pl']).
main('$unify_witness'/2, non- (public)) :
        put_con([], s(1)).
        put_con((+)/2, s(2)).
        label('$unify_witness'/2+top).
        label(fail/0).
        label('$unify_witness'/2+var).
        label('$unify_witness'/2+var+1).
        label('$unify_witness'/2+1).
        label('$unify_witness'/2+2).
'$unify_witness'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$unify_witness'/2+top).
'$unify_witness'/2+top :
        setB0.
        switch_on_term('$unify_witness'/2+var, fail/0, fail/0, '$unify_witness'/2+1, fail/0, '$unify_witness'/2+2).
'$unify_witness'/2+var :
        try('$unify_witness'/2+1, '$unify_witness'/2+var+1).
'$unify_witness'/2+var+1 :
        trust('$unify_witness'/2+2).
'$unify_witness'/2+1 :
        comment(('$unify_witness'([], A):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$unify_witness'([], A):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$unify_witness'/2+2 :
        comment(('$unify_witness'([A+B|C], A):-'$unify_witness'(C, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$unify_witness'([A+B|C], A):-['$unify_witness'(C, A)])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_str((+)/2, s(2), a(3)).
        unify_var(a(5)).
        unify_void(1).
        get_val(a(5), a(2)).
        set(a(4), ea(1)).
        set(a(5), ea(2)).
        set(cont, econt).
        goto('$unify_witness'/2+top).
end_predicate('$unify_witness'/2).

begin_predicate('$variables_set'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$variables_set'/2, 'builtins.pl']).
main('$variables_set'/2, non- (public)) :
        put_con([], s(1)).
'$variables_set'/2 :
        comment(('$variables_set'(A, B):-'$variables_set'(A, [], B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$variables_set'(A, B):-['$variables_set'(A, [], B)])).
        execute('$variables_set'(a(1), s(1), a(2), cont)).
end_predicate('$variables_set'/2).

begin_predicate('$variables_set'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$variables_set'/3, 'builtins.pl']).
main('$variables_set'/3, non- (public)) :
        label('$variables_set'/3+top).
        label('$variables_set'/3+var).
        label('$variables_set'/3+var+1).
        label('$variables_set'/3+var+2).
        label('$variables_set'/3+var+3).
        label('$variables_set'/3+var+4).
        label('$variables_set'/3+int).
        label('$variables_set'/3+int+1).
        label('$variables_set'/3+int+2).
        label('$variables_set'/3+int+3).
        label('$variables_set'/3+1).
        label('$variables_set'/3+2).
        label('$variables_set'/3+3).
        label('$variables_set'/3+4).
        label('$variables_set'/3+5).
'$variables_set'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$variables_set'/3+top).
'$variables_set'/3+top :
        setB0.
        switch_on_term('$variables_set'/3+var, '$variables_set'/3+int, '$variables_set'/3+int, '$variables_set'/3+int, '$variables_set'/3+int, '$variables_set'/3+var).
'$variables_set'/3+var :
        try('$variables_set'/3+1, '$variables_set'/3+var+1).
'$variables_set'/3+var+1 :
        retry('$variables_set'/3+2, '$variables_set'/3+var+2).
'$variables_set'/3+var+2 :
        retry('$variables_set'/3+3, '$variables_set'/3+var+3).
'$variables_set'/3+var+3 :
        retry('$variables_set'/3+4, '$variables_set'/3+var+4).
'$variables_set'/3+var+4 :
        trust('$variables_set'/3+5).
'$variables_set'/3+int :
        try('$variables_set'/3+1, '$variables_set'/3+int+1).
'$variables_set'/3+int+1 :
        retry('$variables_set'/3+2, '$variables_set'/3+int+2).
'$variables_set'/3+int+2 :
        retry('$variables_set'/3+3, '$variables_set'/3+int+3).
'$variables_set'/3+int+3 :
        trust('$variables_set'/3+5).
'$variables_set'/3+1 :
        comment(('$variables_set'(A, B, B):-var(A), '$builtin_memq'(A, B), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$variables_set'(A, B, B):-['$get_level'(C), var(A), '$builtin_memq'(A, B), '$cut'(C)])).
        get_val(a(2), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        put_cont('$cut'(a(4), cont), p(1)).
        execute('$builtin_memq'(a(1), a(2), p(1))).
'$variables_set'/3+2 :
        comment(('$variables_set'(A, B, [A|B]):-var(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$variables_set'(A, B, [A|B]):-['$get_level'(C), var(A), '$cut'(C)])).
        get_list(a(3)).
        unify_val(a(1)).
        unify_val(a(2)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        execute(cont).
'$variables_set'/3+3 :
        comment(('$variables_set'(A, B, B):-atomic(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$variables_set'(A, B, B):-['$get_level'(C), atomic(A), '$cut'(C)])).
        get_val(a(2), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(atomic(a(1))).
        inline('$cut'(a(4))).
        execute(cont).
'$variables_set'/3+4 :
        comment(('$variables_set'([A|B], C, D):-!, '$variables_set'(A, C, E), '$variables_set'(B, E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$variables_set'([A|B], C, D):-['$neck_cut', '$variables_set'(A, C, E), '$variables_set'(B, E, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        inline('$neck_cut').
        put_var(a(6)).
        put_cont('$variables_set'(a(5), a(6), a(3), cont), p(1)).
        set(a(4), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(p(1), econt).
        goto('$variables_set'/3+top).
'$variables_set'/3+5 :
        comment(('$variables_set'(A, B, C):-A=..D, '$variables_set'(D, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$variables_set'(A, B, C):-['$univ'(A, D), '$variables_set'(D, B, C)])).
        put_var(a(4)).
        put_cont('$variables_set'(a(4), a(2), a(3), cont), p(1)).
        execute('$univ'(a(1), a(4), p(1))).
end_predicate('$variables_set'/3).

begin_predicate('$builtin_memq'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_memq'/2, 'builtins.pl']).
main('$builtin_memq'/2, non- (public)) :
        label('$builtin_memq'/2+top).
        label('$builtin_memq'/2+sub+1).
        label('$builtin_memq'/2+1).
        label('$builtin_memq'/2+2).
'$builtin_memq'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$builtin_memq'/2+top).
'$builtin_memq'/2+top :
        setB0.
        try('$builtin_memq'/2+1, '$builtin_memq'/2+sub+1).
'$builtin_memq'/2+sub+1 :
        trust('$builtin_memq'/2+2).
'$builtin_memq'/2+1 :
        comment(('$builtin_memq'(A, [B|C]):-A==B, !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$builtin_memq'(A, [B|C]):-['$get_level'(D), '$equality_of_term'(A, B), '$cut'(D)])).
        get_list(a(2)).
        unify_var(a(3)).
        unify_void(1).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline('$equality_of_term'(a(1), a(3))).
        inline('$cut'(a(4))).
        execute(cont).
'$builtin_memq'/2+2 :
        comment(('$builtin_memq'(A, [B|C]):-'$builtin_memq'(A, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$builtin_memq'(A, [B|C]):-['$builtin_memq'(A, C)])).
        get_list(a(2)).
        unify_void(1).
        unify_var(a(3)).
        set(a(1), ea(1)).
        set(a(3), ea(2)).
        set(cont, econt).
        goto('$builtin_memq'/2+top).
end_predicate('$builtin_memq'/2).

begin_predicate('$existential_variables_set'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$existential_variables_set'/2, 'builtins.pl']).
main('$existential_variables_set'/2, non- (public)) :
        put_con([], s(1)).
'$existential_variables_set'/2 :
        comment(('$existential_variables_set'(A, B):-'$existential_variables_set'(A, [], B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$existential_variables_set'(A, B):-['$existential_variables_set'(A, [], B)])).
        execute('$existential_variables_set'(a(1), s(1), a(2), cont)).
end_predicate('$existential_variables_set'/2).

begin_predicate('$existential_variables_set'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$existential_variables_set'/3, 'builtins.pl']).
main('$existential_variables_set'/3, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(^ / 2, s(2)).
        put_con('$meta_call'/5, s(3)).
        label('$existential_variables_set'/3+top).
        label('$existential_variables_set'/3+var).
        label('$existential_variables_set'/3+var+1).
        label('$existential_variables_set'/3+var+2).
        label('$existential_variables_set'/3+var+3).
        label('$existential_variables_set'/3+var+4).
        label('$existential_variables_set'/3+var+5).
        label('$existential_variables_set'/3+int).
        label('$existential_variables_set'/3+int+1).
        label('$existential_variables_set'/3+int+2).
        label('$existential_variables_set'/3+str).
        label('$existential_variables_set'/3+str+0).
        label('$existential_variables_set'/3+str+0+1).
        label('$existential_variables_set'/3+str+0+2).
        label('$existential_variables_set'/3+str+0+3).
        label('$existential_variables_set'/3+str+1).
        label('$existential_variables_set'/3+str+1+1).
        label('$existential_variables_set'/3+str+1+2).
        label('$existential_variables_set'/3+str+1+3).
        label('$existential_variables_set'/3+str+2).
        label('$existential_variables_set'/3+str+2+1).
        label('$existential_variables_set'/3+str+2+2).
        label('$existential_variables_set'/3+str+2+3).
        label('$existential_variables_set'/3+1).
        label('$existential_variables_set'/3+2).
        label('$existential_variables_set'/3+3).
        label('$existential_variables_set'/3+4).
        label('$existential_variables_set'/3+5).
        label('$existential_variables_set'/3+6).
        new_hash(str, 3).
        static([put_hash(s(1), '$existential_variables_set'/3+str+0, str), put_hash(s(2), '$existential_variables_set'/3+str+1, str), put_hash(s(3), '$existential_variables_set'/3+str+2, str)]).
'$existential_variables_set'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$existential_variables_set'/3+top).
'$existential_variables_set'/3+top :
        setB0.
        switch_on_term('$existential_variables_set'/3+var, '$existential_variables_set'/3+int, '$existential_variables_set'/3+int, '$existential_variables_set'/3+int, '$existential_variables_set'/3+str, '$existential_variables_set'/3+int).
'$existential_variables_set'/3+var :
        try('$existential_variables_set'/3+1, '$existential_variables_set'/3+var+1).
'$existential_variables_set'/3+var+1 :
        retry('$existential_variables_set'/3+2, '$existential_variables_set'/3+var+2).
'$existential_variables_set'/3+var+2 :
        retry('$existential_variables_set'/3+3, '$existential_variables_set'/3+var+3).
'$existential_variables_set'/3+var+3 :
        retry('$existential_variables_set'/3+4, '$existential_variables_set'/3+var+4).
'$existential_variables_set'/3+var+4 :
        retry('$existential_variables_set'/3+5, '$existential_variables_set'/3+var+5).
'$existential_variables_set'/3+var+5 :
        trust('$existential_variables_set'/3+6).
'$existential_variables_set'/3+int :
        try('$existential_variables_set'/3+1, '$existential_variables_set'/3+int+1).
'$existential_variables_set'/3+int+1 :
        retry('$existential_variables_set'/3+2, '$existential_variables_set'/3+int+2).
'$existential_variables_set'/3+int+2 :
        trust('$existential_variables_set'/3+6).
'$existential_variables_set'/3+str :
        switch_on_hash(str, 3, '$existential_variables_set'/3+int, [ (:)/2:'$existential_variables_set'/3+str+0, ^ / 2:'$existential_variables_set'/3+str+1, '$meta_call'/5:'$existential_variables_set'/3+str+2]).
'$existential_variables_set'/3+str+0 :
        try('$existential_variables_set'/3+1, '$existential_variables_set'/3+str+0+1).
'$existential_variables_set'/3+str+0+1 :
        retry('$existential_variables_set'/3+2, '$existential_variables_set'/3+str+0+2).
'$existential_variables_set'/3+str+0+2 :
        retry('$existential_variables_set'/3+3, '$existential_variables_set'/3+str+0+3).
'$existential_variables_set'/3+str+0+3 :
        trust('$existential_variables_set'/3+6).
'$existential_variables_set'/3+str+1 :
        try('$existential_variables_set'/3+1, '$existential_variables_set'/3+str+1+1).
'$existential_variables_set'/3+str+1+1 :
        retry('$existential_variables_set'/3+2, '$existential_variables_set'/3+str+1+2).
'$existential_variables_set'/3+str+1+2 :
        retry('$existential_variables_set'/3+4, '$existential_variables_set'/3+str+1+3).
'$existential_variables_set'/3+str+1+3 :
        trust('$existential_variables_set'/3+6).
'$existential_variables_set'/3+str+2 :
        try('$existential_variables_set'/3+1, '$existential_variables_set'/3+str+2+1).
'$existential_variables_set'/3+str+2+1 :
        retry('$existential_variables_set'/3+2, '$existential_variables_set'/3+str+2+2).
'$existential_variables_set'/3+str+2+2 :
        retry('$existential_variables_set'/3+5, '$existential_variables_set'/3+str+2+3).
'$existential_variables_set'/3+str+2+3 :
        trust('$existential_variables_set'/3+6).
'$existential_variables_set'/3+1 :
        comment(('$existential_variables_set'(A, B, B):-var(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$existential_variables_set'(A, B, B):-['$get_level'(C), var(A), '$cut'(C)])).
        get_val(a(2), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        execute(cont).
'$existential_variables_set'/3+2 :
        comment(('$existential_variables_set'(A, B, B):-atomic(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$existential_variables_set'(A, B, B):-['$get_level'(C), atomic(A), '$cut'(C)])).
        get_val(a(2), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(atomic(a(1))).
        inline('$cut'(a(4))).
        execute(cont).
'$existential_variables_set'/3+3 :
        comment(('$existential_variables_set'(A:B, C, D):-!, '$existential_variables_set'(B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$existential_variables_set'(A:B, C, D):-['$neck_cut', '$existential_variables_set'(B, C, D)])).
        get_str((:)/2, s(1), a(1)).
        unify_void(1).
        unify_var(a(4)).
        inline('$neck_cut').
        set(a(4), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$existential_variables_set'/3+top).
'$existential_variables_set'/3+4 :
        comment(('$existential_variables_set'(A^B, C, D):-!, '$variables_set'(A, C, E), '$existential_variables_set'(B, E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$existential_variables_set'(A^B, C, D):-['$neck_cut', '$variables_set'(A, C, E), '$existential_variables_set'(B, E, D)])).
        get_str(^ / 2, s(2), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        inline('$neck_cut').
        put_var(a(6)).
        put_cont('$existential_variables_set'(a(5), a(6), a(3), cont), p(1)).
        execute('$variables_set'(a(4), a(2), a(6), p(1))).
'$existential_variables_set'/3+5 :
        comment(('$existential_variables_set'('$meta_call'(A, B, C, D, E), F, G):-!, '$existential_variables_set'(A, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$existential_variables_set'('$meta_call'(A, B, C, D, E), F, G):-['$neck_cut', '$existential_variables_set'(A, F, G)])).
        get_str('$meta_call'/5, s(3), a(1)).
        unify_var(a(4)).
        unify_void(1).
        unify_void(1).
        unify_void(1).
        unify_void(1).
        inline('$neck_cut').
        set(a(4), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$existential_variables_set'/3+top).
'$existential_variables_set'/3+6 :
        comment(('$existential_variables_set'(A, B, B):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$existential_variables_set'(A, B, B):-[])).
        get_val(a(2), a(3)).
        execute(cont).
end_predicate('$existential_variables_set'/3).

begin_predicate('$free_variables_set'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$free_variables_set'/3, 'builtins.pl']).
main('$free_variables_set'/3, non- (public)) :
'$free_variables_set'/3 :
        comment(('$free_variables_set'(A, B, C):-'$variables_set'(A, D), '$variables_set'(B, E), '$existential_variables_set'(A, E, F), '$builtin_set_diff'(D, F, C), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$free_variables_set'(A, B, C):-['$get_level'(D), '$variables_set'(A, E), '$variables_set'(B, F), '$existential_variables_set'(A, F, G), '$builtin_set_diff'(E, G, C), '$cut'(D)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_cont('$cut'(a(4), cont), p(1)).
        put_cont('$builtin_set_diff'(a(5), a(7), a(3), p(1)), p(2)).
        put_cont('$existential_variables_set'(a(1), a(6), a(7), p(2)), p(3)).
        put_cont('$variables_set'(a(2), a(6), p(3)), p(4)).
        execute('$variables_set'(a(1), a(5), p(4))).
end_predicate('$free_variables_set'/3).

begin_predicate('$builtin_set_diff'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_set_diff'/3, 'builtins.pl']).
main('$builtin_set_diff'/3, non- (public)) :
'$builtin_set_diff'/3 :
        comment(('$builtin_set_diff'(A, B, C):-sort(A, D), sort(B, E), '$builtin_set_diff0'(D, E, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$builtin_set_diff'(A, B, C):-[sort(A, D), sort(B, E), '$builtin_set_diff0'(D, E, C)])).
        put_var(a(4)).
        put_var(a(5)).
        put_cont('$builtin_set_diff0'(a(4), a(5), a(3), cont), p(1)).
        put_cont(sort(a(2), a(5), p(1)), p(2)).
        execute(sort(a(1), a(4), p(2))).
end_predicate('$builtin_set_diff'/3).

begin_predicate('$builtin_set_diff0'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_set_diff0'/3, 'builtins.pl']).
main('$builtin_set_diff0'/3, non- (public)) :
        put_con([], s(1)).
        label('$builtin_set_diff0'/3+top).
        label('$builtin_set_diff0'/3+var).
        label('$builtin_set_diff0'/3+var+1).
        label('$builtin_set_diff0'/3+var+2).
        label('$builtin_set_diff0'/3+var+3).
        label('$builtin_set_diff0'/3+var+4).
        label('$builtin_set_diff0'/3+con).
        label('$builtin_set_diff0'/3+con+1).
        label('$builtin_set_diff0'/3+lis).
        label('$builtin_set_diff0'/3+lis+1).
        label('$builtin_set_diff0'/3+lis+2).
        label('$builtin_set_diff0'/3+lis+3).
        label('$builtin_set_diff0'/3+1).
        label('$builtin_set_diff0'/3+2).
        label('$builtin_set_diff0'/3+3).
        label('$builtin_set_diff0'/3+4).
        label('$builtin_set_diff0'/3+5).
'$builtin_set_diff0'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$builtin_set_diff0'/3+top).
'$builtin_set_diff0'/3+top :
        setB0.
        switch_on_term('$builtin_set_diff0'/3+var, '$builtin_set_diff0'/3+2, '$builtin_set_diff0'/3+2, '$builtin_set_diff0'/3+con, '$builtin_set_diff0'/3+2, '$builtin_set_diff0'/3+lis).
'$builtin_set_diff0'/3+var :
        try('$builtin_set_diff0'/3+1, '$builtin_set_diff0'/3+var+1).
'$builtin_set_diff0'/3+var+1 :
        retry('$builtin_set_diff0'/3+2, '$builtin_set_diff0'/3+var+2).
'$builtin_set_diff0'/3+var+2 :
        retry('$builtin_set_diff0'/3+3, '$builtin_set_diff0'/3+var+3).
'$builtin_set_diff0'/3+var+3 :
        retry('$builtin_set_diff0'/3+4, '$builtin_set_diff0'/3+var+4).
'$builtin_set_diff0'/3+var+4 :
        trust('$builtin_set_diff0'/3+5).
'$builtin_set_diff0'/3+con :
        try('$builtin_set_diff0'/3+1, '$builtin_set_diff0'/3+con+1).
'$builtin_set_diff0'/3+con+1 :
        trust('$builtin_set_diff0'/3+2).
'$builtin_set_diff0'/3+lis :
        try('$builtin_set_diff0'/3+2, '$builtin_set_diff0'/3+lis+1).
'$builtin_set_diff0'/3+lis+1 :
        retry('$builtin_set_diff0'/3+3, '$builtin_set_diff0'/3+lis+2).
'$builtin_set_diff0'/3+lis+2 :
        retry('$builtin_set_diff0'/3+4, '$builtin_set_diff0'/3+lis+3).
'$builtin_set_diff0'/3+lis+3 :
        trust('$builtin_set_diff0'/3+5).
'$builtin_set_diff0'/3+1 :
        comment(('$builtin_set_diff0'([], A, []):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_set_diff0'([], A, []):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(3)).
        inline('$neck_cut').
        execute(cont).
'$builtin_set_diff0'/3+2 :
        comment(('$builtin_set_diff0'(A, [], A):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_set_diff0'(A, [], A):-['$neck_cut'])).
        get_con([], s(1), a(2)).
        get_val(a(1), a(3)).
        inline('$neck_cut').
        execute(cont).
'$builtin_set_diff0'/3+3 :
        comment(('$builtin_set_diff0'([A|B], [C|D], E):-A==C, !, '$builtin_set_diff0'(B, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_set_diff0'([A|B], [C|D], E):-['$get_level'(F), '$equality_of_term'(A, C), '$cut'(F), '$builtin_set_diff0'(B, D, E)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_var(a(6)).
        unify_var(a(7)).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        inline('$equality_of_term'(a(4), a(6))).
        inline('$cut'(a(8))).
        set(a(5), ea(1)).
        set(a(7), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$builtin_set_diff0'/3+top).
'$builtin_set_diff0'/3+4 :
        comment(('$builtin_set_diff0'([A|B], [C|D], [A|E]):-A@<C, !, '$builtin_set_diff0'(B, [C|D], E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_set_diff0'([A|B], [C|D], [A|E]):-['$get_level'(F), '$before'(A, C), '$cut'(F), '$builtin_set_diff0'(B, [C|D], E)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_list(a(3)).
        unify_val(a(4)).
        unify_var(a(8)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        inline('$before'(a(4), a(6))).
        inline('$cut'(a(9))).
        put_list(a(6), a(7), a(10)).
        set(a(5), ea(1)).
        set(a(10), ea(2)).
        set(a(8), ea(3)).
        set(cont, econt).
        goto('$builtin_set_diff0'/3+top).
'$builtin_set_diff0'/3+5 :
        comment(('$builtin_set_diff0'([A|B], [C|D], [C|E]):-'$builtin_set_diff0'([A|B], D, [C|E]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_set_diff0'([A|B], [C|D], [C|E]):-['$builtin_set_diff0'([A|B], D, [C|E])])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_list(a(3)).
        unify_val(a(6)).
        unify_var(a(8)).
        put_list(a(4), a(5), a(9)).
        put_list(a(6), a(8), a(10)).
        set(a(9), ea(1)).
        set(a(7), ea(2)).
        set(a(10), ea(3)).
        set(cont, econt).
        goto('$builtin_set_diff0'/3+top).
end_predicate('$builtin_set_diff0'/3).

begin_predicate(open/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([open/3, 'builtins.pl']).
main(open/3, (public)) :
        put_con([], s(1)).
open/3 :
        comment((open(A, B, C):-open(A, B, C, []))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((open(A, B, C):-[open(A, B, C, [])])).
        execute(open(a(1), a(2), a(3), s(1), cont)).
end_predicate(open/3).

begin_predicate(close/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([close/1, 'builtins.pl']).
main(close/1, (public)) :
        put_con([], s(1)).
close/1 :
        comment((close(A):-close(A, []))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((close(A):-[close(A, [])])).
        execute(close(a(1), s(1), cont)).
end_predicate(close/1).

begin_predicate(flush_output/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([flush_output/0, 'builtins.pl']).
main(flush_output/0, (public)) :
flush_output/0 :
        comment((flush_output:-current_output(A), flush_output(A))).
        setB0.
        decl_term_vars([a(1)]).
        decl_pred_vars([p(1)]).
        comment((flush_output:-[current_output(A), flush_output(A)])).
        put_var(a(1)).
        put_cont(flush_output(a(1), cont), p(1)).
        execute(current_output(a(1), p(1))).
end_predicate(flush_output/0).

begin_predicate(stream_property/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([stream_property/2, 'builtins.pl']).
main(stream_property/2, (public)) :
        put_con(domain/2, s(1)).
        put_con(term, s(2)).
        put_con(stream_proeprty, s(3)).
        put_str_args([s(2), s(3)], s(4)).
        put_str(s(1), s(4), s(5)).
        put_con(stream_property/2, s(6)).
        put_int(2, si(7)).
        label(stream_property/2+sub+1).
        label(stream_property/2+sub+2).
        label(stream_property/2+1).
        label(stream_property/2+2).
        label(stream_property/2+3).
stream_property/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try(stream_property/2+1, stream_property/2+sub+1).
stream_property/2+sub+1 :
        retry(stream_property/2+2, stream_property/2+sub+2).
stream_property/2+sub+2 :
        trust(stream_property/2+3).
stream_property/2+1 :
        comment((stream_property(A, B):-var(B), !, '$stream_property'(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((stream_property(A, B):-['$get_level'(C), var(B), '$cut'(C), '$stream_property'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(2))).
        inline('$cut'(a(3))).
        execute('$stream_property'(a(1), a(2), cont)).
stream_property/2+2 :
        comment((stream_property(A, B):-'$stream_property_specifier'(B), !, '$stream_property'(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((stream_property(A, B):-['$get_level'(C), '$stream_property_specifier'(B), '$cut'(C), '$stream_property'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_cont('$stream_property'(a(1), a(2), cont), p(1)).
        put_cont('$cut'(a(3), p(1)), p(2)).
        execute('$stream_property_specifier'(a(2), p(2))).
stream_property/2+3 :
        comment((stream_property(A, B):-illarg(domain(term, stream_proeprty), stream_property(A, B), 2))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((stream_property(A, B):-[illarg(domain(term, stream_proeprty), stream_property(A, B), 2)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(6), y(1), a(3)).
        execute(illarg(s(5), a(3), si(7), cont)).
end_predicate(stream_property/2).

begin_predicate('$stream_property'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$stream_property'/2, 'builtins.pl']).
main('$stream_property'/2, non- (public)) :
        put_con((',')/2, s(1)).
        put_con(domain/2, s(2)).
        put_con(stream, s(3)).
        put_str_args([s(3), s(3)], s(4)).
        put_str(s(2), s(4), s(5)).
        put_con(stream_property/2, s(6)).
        put_int(1, si(7)).
        label('$stream_property'/2+sub+1).
        label('$stream_property'/2+sub+2).
        label('$stream_property'/2+1).
        label('$stream_property'/2+2).
        label('$stream_property'/2+3).
'$stream_property'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$stream_property'/2+1, '$stream_property'/2+sub+1).
'$stream_property'/2+sub+1 :
        retry('$stream_property'/2+2, '$stream_property'/2+sub+2).
'$stream_property'/2+sub+2 :
        trust('$stream_property'/2+3).
'$stream_property'/2+1 :
        comment(('$stream_property'(A, B):-var(A), !, '$get_stream_manager'(C), hash_map(C, D), '$builtin_member'((A, E), D), java(A), '$builtin_member'(B, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$stream_property'(A, B):-['$get_level'(C), var(A), '$cut'(C), '$get_stream_manager'(D), hash_map(D, E), '$builtin_member'((A, F), E), java(A), '$builtin_member'(B, F)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        put_var(a(4)).
        put_var(a(5)).
        put_var(a(6)).
        put_str_args([a(1), a(6)], y(1)).
        put_str(s(1), y(1), a(7)).
        put_cont('$builtin_member'(a(2), a(6), cont), p(1)).
        put_cont(java(a(1), p(1)), p(2)).
        put_cont('$builtin_member'(a(7), a(5), p(2)), p(3)).
        put_cont(hash_map(a(4), a(5), p(3)), p(4)).
        execute('$get_stream_manager'(a(4), p(4))).
'$stream_property'/2+2 :
        comment(('$stream_property'(A, B):-java(A), !, '$get_stream_manager'(C), hash_get(C, A, D), '$builtin_member'(B, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$stream_property'(A, B):-['$get_level'(C), java(A), '$cut'(C), '$get_stream_manager'(D), hash_get(D, A, E), '$builtin_member'(B, E)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(java(a(1))).
        inline('$cut'(a(3))).
        put_var(a(4)).
        put_var(a(5)).
        put_cont('$builtin_member'(a(2), a(5), cont), p(1)).
        put_cont(hash_get(a(4), a(1), a(5), p(1)), p(2)).
        execute('$get_stream_manager'(a(4), p(2))).
'$stream_property'/2+3 :
        comment(('$stream_property'(A, B):-illarg(domain(stream, stream), stream_property(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$stream_property'(A, B):-[illarg(domain(stream, stream), stream_property(A, B), 1)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(6), y(1), a(3)).
        execute(illarg(s(5), a(3), si(7), cont)).
end_predicate('$stream_property'/2).

begin_predicate('$stream_property_specifier'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$stream_property_specifier'/1, 'builtins.pl']).
main('$stream_property_specifier'/1, non- (public)) :
        put_con(input, s(1)).
        put_con(output, s(2)).
        put_con(alias/1, s(3)).
        put_con((mode)/1, s(4)).
        put_con(type/1, s(5)).
        put_con(file_name/1, s(6)).
        label(fail/0).
        label('$stream_property_specifier'/1+var).
        label('$stream_property_specifier'/1+var+1).
        label('$stream_property_specifier'/1+var+2).
        label('$stream_property_specifier'/1+var+3).
        label('$stream_property_specifier'/1+var+4).
        label('$stream_property_specifier'/1+var+5).
        label('$stream_property_specifier'/1+con).
        label('$stream_property_specifier'/1+str).
        label('$stream_property_specifier'/1+1).
        label('$stream_property_specifier'/1+2).
        label('$stream_property_specifier'/1+3).
        label('$stream_property_specifier'/1+4).
        label('$stream_property_specifier'/1+5).
        label('$stream_property_specifier'/1+6).
        new_hash(con, 2).
        new_hash(str, 4).
        static([put_hash(s(1), '$stream_property_specifier'/1+1, con), put_hash(s(2), '$stream_property_specifier'/1+2, con), put_hash(s(3), '$stream_property_specifier'/1+3, str), put_hash(s(4), '$stream_property_specifier'/1+4, str), put_hash(s(5), '$stream_property_specifier'/1+5, str), put_hash(s(6), '$stream_property_specifier'/1+6, str)]).
'$stream_property_specifier'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$stream_property_specifier'/1+var, fail/0, fail/0, '$stream_property_specifier'/1+con, '$stream_property_specifier'/1+str, fail/0).
'$stream_property_specifier'/1+var :
        try('$stream_property_specifier'/1+1, '$stream_property_specifier'/1+var+1).
'$stream_property_specifier'/1+var+1 :
        retry('$stream_property_specifier'/1+2, '$stream_property_specifier'/1+var+2).
'$stream_property_specifier'/1+var+2 :
        retry('$stream_property_specifier'/1+3, '$stream_property_specifier'/1+var+3).
'$stream_property_specifier'/1+var+3 :
        retry('$stream_property_specifier'/1+4, '$stream_property_specifier'/1+var+4).
'$stream_property_specifier'/1+var+4 :
        retry('$stream_property_specifier'/1+5, '$stream_property_specifier'/1+var+5).
'$stream_property_specifier'/1+var+5 :
        trust('$stream_property_specifier'/1+6).
'$stream_property_specifier'/1+con :
        switch_on_hash(con, 2, fail/0, [input:'$stream_property_specifier'/1+1, output:'$stream_property_specifier'/1+2]).
'$stream_property_specifier'/1+str :
        switch_on_hash(str, 4, fail/0, [alias/1:'$stream_property_specifier'/1+3, (mode)/1:'$stream_property_specifier'/1+4, type/1:'$stream_property_specifier'/1+5, file_name/1:'$stream_property_specifier'/1+6]).
'$stream_property_specifier'/1+1 :
        comment(('$stream_property_specifier'(input):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$stream_property_specifier'(input):-[])).
        get_con(input, s(1), a(1)).
        execute(cont).
'$stream_property_specifier'/1+2 :
        comment(('$stream_property_specifier'(output):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$stream_property_specifier'(output):-[])).
        get_con(output, s(2), a(1)).
        execute(cont).
'$stream_property_specifier'/1+3 :
        comment(('$stream_property_specifier'(alias(A)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$stream_property_specifier'(alias(A)):-[])).
        get_str(alias/1, s(3), a(1)).
        unify_void(1).
        execute(cont).
'$stream_property_specifier'/1+4 :
        comment(('$stream_property_specifier'((mode A)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$stream_property_specifier'((mode A)):-[])).
        get_str((mode)/1, s(4), a(1)).
        unify_void(1).
        execute(cont).
'$stream_property_specifier'/1+5 :
        comment(('$stream_property_specifier'(type(A)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$stream_property_specifier'(type(A)):-[])).
        get_str(type/1, s(5), a(1)).
        unify_void(1).
        execute(cont).
'$stream_property_specifier'/1+6 :
        comment(('$stream_property_specifier'(file_name(A)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$stream_property_specifier'(file_name(A)):-[])).
        get_str(file_name/1, s(6), a(1)).
        unify_void(1).
        execute(cont).
end_predicate('$stream_property_specifier'/1).

begin_predicate(get_char/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([get_char/1, 'builtins.pl']).
main(get_char/1, (public)) :
get_char/1 :
        comment((get_char(A):-current_input(B), get_char(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((get_char(A):-[current_input(B), get_char(B, A)])).
        put_var(a(2)).
        put_cont(get_char(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(get_char/1).

begin_predicate(get_code/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([get_code/1, 'builtins.pl']).
main(get_code/1, (public)) :
get_code/1 :
        comment((get_code(A):-current_input(B), get_code(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((get_code(A):-[current_input(B), get_code(B, A)])).
        put_var(a(2)).
        put_cont(get_code(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(get_code/1).

begin_predicate(peek_char/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([peek_char/1, 'builtins.pl']).
main(peek_char/1, (public)) :
peek_char/1 :
        comment((peek_char(A):-current_input(B), peek_char(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((peek_char(A):-[current_input(B), peek_char(B, A)])).
        put_var(a(2)).
        put_cont(peek_char(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(peek_char/1).

begin_predicate(peek_code/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([peek_code/1, 'builtins.pl']).
main(peek_code/1, (public)) :
peek_code/1 :
        comment((peek_code(A):-current_input(B), peek_code(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((peek_code(A):-[current_input(B), peek_code(B, A)])).
        put_var(a(2)).
        put_cont(peek_code(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(peek_code/1).

begin_predicate(put_char/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([put_char/1, 'builtins.pl']).
main(put_char/1, (public)) :
put_char/1 :
        comment((put_char(A):-current_output(B), put_char(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((put_char(A):-[current_output(B), put_char(B, A)])).
        put_var(a(2)).
        put_cont(put_char(a(2), a(1), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(put_char/1).

begin_predicate(put_code/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([put_code/1, 'builtins.pl']).
main(put_code/1, (public)) :
put_code/1 :
        comment((put_code(A):-current_output(B), put_code(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((put_code(A):-[current_output(B), put_code(B, A)])).
        put_var(a(2)).
        put_cont(put_code(a(2), a(1), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(put_code/1).

begin_predicate(nl/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([nl/1, 'builtins.pl']).
main(nl/1, (public)) :
        put_con('\n', s(1)).
nl/1 :
        comment((nl(A):-put_char(A, '\n'))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((nl(A):-[put_char(A, '\n')])).
        execute(put_char(a(1), s(1), cont)).
end_predicate(nl/1).

begin_predicate(get0/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([get0/1, 'builtins.pl']).
main(get0/1, (public)) :
get0/1 :
        comment((get0(A):-current_input(B), get_code(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((get0(A):-[current_input(B), get_code(B, A)])).
        put_var(a(2)).
        put_cont(get_code(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(get0/1).

begin_predicate(get0/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([get0/2, 'builtins.pl']).
main(get0/2, (public)) :
get0/2 :
        comment((get0(A, B):-get_code(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((get0(A, B):-[get_code(A, B)])).
        execute(get_code(a(1), a(2), cont)).
end_predicate(get0/2).

begin_predicate(get/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([get/1, 'builtins.pl']).
main(get/1, (public)) :
get/1 :
        comment((get(A):-current_input(B), get(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((get(A):-[current_input(B), get(B, A)])).
        put_var(a(2)).
        put_cont(get(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(get/1).

begin_predicate(put/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([put/1, 'builtins.pl']).
main(put/1, (public)) :
put/1 :
        comment((put(A):-current_output(B), put(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((put(A):-[current_output(B), put(B, A)])).
        put_var(a(2)).
        put_cont(put(a(2), a(1), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(put/1).

begin_predicate(put/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([put/2, 'builtins.pl']).
main(put/2, (public)) :
put/2 :
        comment((put(A, B):-C is B, put_code(A, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((put(A, B):-[C is B, put_code(A, C)])).
        put_var(a(3)).
        inline(a(3)is a(2)).
        execute(put_code(a(1), a(3), cont)).
end_predicate(put/2).

begin_predicate(tab/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([tab/1, 'builtins.pl']).
main(tab/1, (public)) :
tab/1 :
        comment((tab(A):-current_output(B), tab(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((tab(A):-[current_output(B), tab(B, A)])).
        put_var(a(2)).
        put_cont(tab(a(2), a(1), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(tab/1).

begin_predicate(skip/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([skip/1, 'builtins.pl']).
main(skip/1, (public)) :
skip/1 :
        comment((skip(A):-current_input(B), skip(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((skip(A):-[current_input(B), skip(B, A)])).
        put_var(a(2)).
        put_cont(skip(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(skip/1).

begin_predicate(get_byte/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([get_byte/1, 'builtins.pl']).
main(get_byte/1, (public)) :
get_byte/1 :
        comment((get_byte(A):-current_input(B), get_byte(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((get_byte(A):-[current_input(B), get_byte(B, A)])).
        put_var(a(2)).
        put_cont(get_byte(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(get_byte/1).

begin_predicate(peek_byte/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([peek_byte/1, 'builtins.pl']).
main(peek_byte/1, (public)) :
peek_byte/1 :
        comment((peek_byte(A):-current_input(B), peek_byte(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((peek_byte(A):-[current_input(B), peek_byte(B, A)])).
        put_var(a(2)).
        put_cont(peek_byte(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(peek_byte/1).

begin_predicate(put_byte/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([put_byte/1, 'builtins.pl']).
main(put_byte/1, (public)) :
put_byte/1 :
        comment((put_byte(A):-current_output(B), put_byte(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((put_byte(A):-[current_output(B), put_byte(B, A)])).
        put_var(a(2)).
        put_cont(put_byte(a(2), a(1), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(put_byte/1).

begin_predicate(read/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([read/1, 'builtins.pl']).
main(read/1, (public)) :
read/1 :
        comment((read(A):-current_input(B), read(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((read(A):-[current_input(B), read(B, A)])).
        put_var(a(2)).
        put_cont(read(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(read/1).

begin_predicate(read/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([read/2, 'builtins.pl']).
main(read/2, (public)) :
read/2 :
        comment((read(A, B):-read_tokens(A, C, D), parse_tokens(B, C), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((read(A, B):-['$get_level'(C), read_tokens(A, D, E), parse_tokens(B, D), '$cut'(C)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_var(a(4)).
        put_cont('$cut'(a(3), cont), p(1)).
        put_cont(parse_tokens(a(2), a(4), p(1)), p(2)).
        execute(read_tokens(a(1), a(4), void, p(2))).
end_predicate(read/2).

begin_predicate(read_with_variables/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([read_with_variables/2, 'builtins.pl']).
main(read_with_variables/2, (public)) :
read_with_variables/2 :
        comment((read_with_variables(A, B):-current_input(C), read_with_variables(C, A, B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((read_with_variables(A, B):-[current_input(C), read_with_variables(C, A, B)])).
        put_var(a(3)).
        put_cont(read_with_variables(a(3), a(1), a(2), cont), p(1)).
        execute(current_input(a(3), p(1))).
end_predicate(read_with_variables/2).

begin_predicate(read_with_variables/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([read_with_variables/3, 'builtins.pl']).
main(read_with_variables/3, (public)) :
read_with_variables/3 :
        comment((read_with_variables(A, B, C):-read_tokens(A, D, C), parse_tokens(B, D), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((read_with_variables(A, B, C):-['$get_level'(D), read_tokens(A, E, C), parse_tokens(B, E), '$cut'(D)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_cont('$cut'(a(4), cont), p(1)).
        put_cont(parse_tokens(a(2), a(5), p(1)), p(2)).
        execute(read_tokens(a(1), a(5), a(3), p(2))).
end_predicate(read_with_variables/3).

begin_predicate(read_line/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([read_line/1, 'builtins.pl']).
main(read_line/1, (public)) :
read_line/1 :
        comment((read_line(A):-current_input(B), read_line(B, A))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((read_line(A):-[current_input(B), read_line(B, A)])).
        put_var(a(2)).
        put_cont(read_line(a(2), a(1), cont), p(1)).
        execute(current_input(a(2), p(1))).
end_predicate(read_line/1).

begin_predicate(read_token/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([read_token/2, 'builtins.pl']).
main(read_token/2, non- (public)) :
        put_con([], s(1)).
read_token/2 :
        comment((read_token(A, B):-'$read_token0'(A, C, D), '$read_token1'([C], D, B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((read_token(A, B):-['$read_token0'(A, C, D), '$read_token1'([C], D, B)])).
        put_var(a(3)).
        put_var(a(4)).
        put_list(a(3), s(1), a(5)).
        put_cont('$read_token1'(a(5), a(4), a(2), cont), p(1)).
        execute('$read_token0'(a(1), a(3), a(4), p(1))).
end_predicate(read_token/2).

begin_predicate('$read_token1'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$read_token1'/3, 'builtins.pl']).
main('$read_token1'/3, non- (public)) :
        put_int(-2, si(1)).
        put_con([], s(2)).
        put_list(si(1), s(2), s(3)).
        put_con(error/1, s(4)).
        put_int(73, si(5)).
        put_list(si(5), s(2), s(6)).
        put_con(number/1, s(7)).
        put_int(68, si(8)).
        put_list(si(8), s(2), s(9)).
        put_int(65, si(10)).
        put_list(si(10), s(2), s(11)).
        put_con(atom/1, s(12)).
        put_int(86, si(13)).
        put_list(si(13), s(2), s(14)).
        put_con(var/1, s(15)).
        put_int(83, si(16)).
        put_list(si(16), s(2), s(17)).
        put_con(string/1, s(18)).
        label('$read_token1'/3+var).
        label('$read_token1'/3+var+1).
        label('$read_token1'/3+var+2).
        label('$read_token1'/3+var+3).
        label('$read_token1'/3+var+4).
        label('$read_token1'/3+var+5).
        label('$read_token1'/3+var+6).
        label('$read_token1'/3+1).
        label('$read_token1'/3+2).
        label('$read_token1'/3+3).
        label('$read_token1'/3+4).
        label('$read_token1'/3+5).
        label('$read_token1'/3+6).
        label('$read_token1'/3+7).
'$read_token1'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$read_token1'/3+var, '$read_token1'/3+7, '$read_token1'/3+7, '$read_token1'/3+7, '$read_token1'/3+7, '$read_token1'/3+var).
'$read_token1'/3+var :
        try('$read_token1'/3+1, '$read_token1'/3+var+1).
'$read_token1'/3+var+1 :
        retry('$read_token1'/3+2, '$read_token1'/3+var+2).
'$read_token1'/3+var+2 :
        retry('$read_token1'/3+3, '$read_token1'/3+var+3).
'$read_token1'/3+var+3 :
        retry('$read_token1'/3+4, '$read_token1'/3+var+4).
'$read_token1'/3+var+4 :
        retry('$read_token1'/3+5, '$read_token1'/3+var+5).
'$read_token1'/3+var+5 :
        retry('$read_token1'/3+6, '$read_token1'/3+var+6).
'$read_token1'/3+var+6 :
        trust('$read_token1'/3+7).
'$read_token1'/3+1 :
        comment(('$read_token1'([-2], A, error(A)):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$read_token1'([-2], A, error(A)):-['$neck_cut'])).
        get_ground([-2], s(3), a(1)).
        get_str(error/1, s(4), a(3)).
        unify_val(a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_token1'/3+2 :
        comment(('$read_token1'([73], A, number(A)):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$read_token1'([73], A, number(A)):-['$neck_cut'])).
        get_ground([73], s(6), a(1)).
        get_str(number/1, s(7), a(3)).
        unify_val(a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_token1'/3+3 :
        comment(('$read_token1'([68], A, number(A)):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$read_token1'([68], A, number(A)):-['$neck_cut'])).
        get_ground([68], s(9), a(1)).
        get_str(number/1, s(7), a(3)).
        unify_val(a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_token1'/3+4 :
        comment(('$read_token1'([65], A, atom(A)):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$read_token1'([65], A, atom(A)):-['$neck_cut'])).
        get_ground([65], s(11), a(1)).
        get_str(atom/1, s(12), a(3)).
        unify_val(a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_token1'/3+5 :
        comment(('$read_token1'([86], A, var(A)):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$read_token1'([86], A, var(A)):-['$neck_cut'])).
        get_ground([86], s(14), a(1)).
        get_str(var/1, s(15), a(3)).
        unify_val(a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_token1'/3+6 :
        comment(('$read_token1'([83], A, string(A)):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$read_token1'([83], A, string(A)):-['$neck_cut'])).
        get_ground([83], s(17), a(1)).
        get_str(string/1, s(18), a(3)).
        unify_val(a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_token1'/3+7 :
        comment(('$read_token1'(A, B, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$read_token1'(A, B, B):-['$neck_cut'])).
        get_val(a(2), a(3)).
        inline('$neck_cut').
        execute(cont).
end_predicate('$read_token1'/3).

begin_predicate(read_tokens/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([read_tokens/3, 'builtins.pl']).
main(read_tokens/3, non- (public)) :
        put_con([], s(1)).
read_tokens/3 :
        comment((read_tokens(A, B, C):-'$read_tokens'(A, B, C, []), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((read_tokens(A, B, C):-['$get_level'(D), '$read_tokens'(A, B, C, []), '$cut'(D)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$cut'(a(4), cont), p(1)).
        execute('$read_tokens'(a(1), a(2), a(3), s(1), p(1))).
end_predicate(read_tokens/3).

begin_predicate('$read_tokens'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$read_tokens'/4, 'builtins.pl']).
main('$read_tokens'/4, non- (public)) :
'$read_tokens'/4 :
        comment(('$read_tokens'(A, B, C, D):-read_token(A, E), '$read_tokens1'(A, E, B, C, D))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$read_tokens'(A, B, C, D):-[read_token(A, E), '$read_tokens1'(A, E, B, C, D)])).
        put_var(a(5)).
        put_cont('$read_tokens1'(a(1), a(5), a(2), a(3), a(4), cont), p(1)).
        execute(read_token(a(1), a(5), p(1))).
end_predicate('$read_tokens'/4).

begin_predicate('$read_tokens1'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$read_tokens1'/5, 'builtins.pl']).
main('$read_tokens1'/5, non- (public)) :
        put_con(error/1, s(1)).
        put_con([], s(2)).
        put_con('{SYNTAX ERROR}', s(3)).
        put_con('** ', s(4)).
        put_con(' **', s(5)).
        put_con(end_of_file, s(6)).
        put_con('.', s(7)).
        put_list(s(7), s(2), s(8)).
        put_list(s(6), s(8), s(9)).
        put_con(var/1, s(10)).
        put_con('_', s(11)).
        put_str_args([s(11)], s(12)).
        put_str(s(10), s(12), s(13)).
        put_con(var/2, s(14)).
        put_con((=)/2, s(15)).
        label('$read_tokens1'/5+sub+1).
        label('$read_tokens1'/5+sub+2).
        label('$read_tokens1'/5+sub+3).
        label('$read_tokens1'/5+sub+4).
        label('$read_tokens1'/5+sub+5).
        label('$read_tokens1'/5+sub+6).
        label('$read_tokens1'/5+1).
        label('$read_tokens1'/5+2).
        label('$read_tokens1'/5+3).
        label('$read_tokens1'/5+4).
        label('$read_tokens1'/5+5).
        label('$read_tokens1'/5+6).
        label('$read_tokens1'/5+7).
'$read_tokens1'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$read_tokens1'/5+1, '$read_tokens1'/5+sub+1).
'$read_tokens1'/5+sub+1 :
        retry('$read_tokens1'/5+2, '$read_tokens1'/5+sub+2).
'$read_tokens1'/5+sub+2 :
        retry('$read_tokens1'/5+3, '$read_tokens1'/5+sub+3).
'$read_tokens1'/5+sub+3 :
        retry('$read_tokens1'/5+4, '$read_tokens1'/5+sub+4).
'$read_tokens1'/5+sub+4 :
        retry('$read_tokens1'/5+5, '$read_tokens1'/5+sub+5).
'$read_tokens1'/5+sub+5 :
        retry('$read_tokens1'/5+6, '$read_tokens1'/5+sub+6).
'$read_tokens1'/5+sub+6 :
        trust('$read_tokens1'/5+7).
'$read_tokens1'/5+1 :
        comment(('$read_tokens1'(A, error(B), [], C, D):-!, write('{SYNTAX ERROR}'), nl, write('** '), write(B), write(' **'), nl, '$read_tokens_until_fullstop'(A), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$read_tokens1'(A, error(B), [], C, D):-['$neck_cut', write('{SYNTAX ERROR}'), nl, write('** '), write(B), write(' **'), nl, '$read_tokens_until_fullstop'(A), fail])).
        get_str(error/1, s(1), a(2)).
        unify_var(a(6)).
        get_con([], s(2), a(3)).
        inline('$neck_cut').
        put_cont(fail(cont), p(1)).
        put_cont('$read_tokens_until_fullstop'(a(1), p(1)), p(2)).
        put_cont(nl(p(2)), p(3)).
        put_cont(write(s(5), p(3)), p(4)).
        put_cont(write(a(6), p(4)), p(5)).
        put_cont(write(s(4), p(5)), p(6)).
        put_cont(nl(p(6)), p(7)).
        execute(write(s(3), p(7))).
'$read_tokens1'/5+2 :
        comment(('$read_tokens1'(A, end_of_file, [end_of_file, '.'], [], B):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$read_tokens1'(A, end_of_file, [end_of_file, '.'], [], B):-['$neck_cut'])).
        get_con(end_of_file, s(6), a(2)).
        get_ground([end_of_file, '.'], s(9), a(3)).
        get_con([], s(2), a(4)).
        inline('$neck_cut').
        execute(cont).
'$read_tokens1'/5+3 :
        comment(('$read_tokens1'(A, '.', ['.'], [], B):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$read_tokens1'(A, '.', ['.'], [], B):-['$neck_cut'])).
        get_con('.', s(7), a(2)).
        get_ground(['.'], s(8), a(3)).
        get_con([], s(2), a(4)).
        inline('$neck_cut').
        execute(cont).
'$read_tokens1'/5+4 :
        comment(('$read_tokens1'(A, var('_'), [var('_', B)|C], ['_'=B|D], E):-!, '$read_tokens'(A, C, D, ['_'=B|E]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$read_tokens1'(A, var('_'), [var('_', B)|C], ['_'=B|D], E):-['$neck_cut', '$read_tokens'(A, C, D, ['_'=B|E])])).
        get_ground(var('_'), s(13), a(2)).
        get_list(a(3)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(var/2, s(14), a(6)).
        unify_con('_', s(11)).
        unify_var(a(8)).
        get_list(a(4)).
        unify_var(a(9)).
        unify_var(a(10)).
        get_str((=)/2, s(15), a(9)).
        unify_con('_', s(11)).
        unify_val(a(8)).
        inline('$neck_cut').
        put_str_args([s(11), a(8)], y(1)).
        put_str(s(15), y(1), a(11)).
        put_list(a(11), a(5), a(12)).
        execute('$read_tokens'(a(1), a(7), a(10), a(12), cont)).
'$read_tokens1'/5+5 :
        comment(('$read_tokens1'(A, var(B), [var(B, C)|D], E, F):-'$mem_pair'(B=C, F), !, '$read_tokens'(A, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$read_tokens1'(A, var(B), [var(B, C)|D], E, F):-['$get_level'(G), '$mem_pair'(B=C, F), '$cut'(G), '$read_tokens'(A, D, E, F)])).
        get_str(var/1, s(10), a(2)).
        unify_var(a(6)).
        get_list(a(3)).
        unify_var(a(7)).
        unify_var(a(8)).
        get_str(var/2, s(14), a(7)).
        unify_val(a(6)).
        unify_var(a(9)).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        put_str_args([a(6), a(9)], y(1)).
        put_str(s(15), y(1), a(11)).
        put_cont('$read_tokens'(a(1), a(8), a(4), a(5), cont), p(1)).
        put_cont('$cut'(a(10), p(1)), p(2)).
        execute('$mem_pair'(a(11), a(5), p(2))).
'$read_tokens1'/5+6 :
        comment(('$read_tokens1'(A, var(B), [var(B, C)|D], [B=C|E], F):-!, '$read_tokens'(A, D, E, [B=C|F]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$read_tokens1'(A, var(B), [var(B, C)|D], [B=C|E], F):-['$neck_cut', '$read_tokens'(A, D, E, [B=C|F])])).
        get_str(var/1, s(10), a(2)).
        unify_var(a(6)).
        get_list(a(3)).
        unify_var(a(7)).
        unify_var(a(8)).
        get_str(var/2, s(14), a(7)).
        unify_val(a(6)).
        unify_var(a(9)).
        get_list(a(4)).
        unify_var(a(10)).
        unify_var(a(11)).
        get_str((=)/2, s(15), a(10)).
        unify_val(a(6)).
        unify_val(a(9)).
        inline('$neck_cut').
        put_str_args([a(6), a(9)], y(1)).
        put_str(s(15), y(1), a(12)).
        put_list(a(12), a(5), a(13)).
        execute('$read_tokens'(a(1), a(8), a(11), a(13), cont)).
'$read_tokens1'/5+7 :
        comment(('$read_tokens1'(A, B, [B|C], D, E):-'$read_tokens'(A, C, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$read_tokens1'(A, B, [B|C], D, E):-['$read_tokens'(A, C, D, E)])).
        get_list(a(3)).
        unify_val(a(2)).
        unify_var(a(6)).
        execute('$read_tokens'(a(1), a(6), a(4), a(5), cont)).
end_predicate('$read_tokens1'/5).

begin_predicate('$mem_pair'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$mem_pair'/2, 'builtins.pl']).
main('$mem_pair'/2, non- (public)) :
        put_con((=)/2, s(1)).
        label('$mem_pair'/2+top).
        label('$mem_pair'/2+var).
        label('$mem_pair'/2+var+1).
        label('$mem_pair'/2+1).
        label('$mem_pair'/2+2).
'$mem_pair'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$mem_pair'/2+top).
'$mem_pair'/2+top :
        setB0.
        switch_on_term('$mem_pair'/2+var, '$mem_pair'/2+2, '$mem_pair'/2+2, '$mem_pair'/2+2, '$mem_pair'/2+var, '$mem_pair'/2+2).
'$mem_pair'/2+var :
        try('$mem_pair'/2+1, '$mem_pair'/2+var+1).
'$mem_pair'/2+var+1 :
        trust('$mem_pair'/2+2).
'$mem_pair'/2+1 :
        comment(('$mem_pair'(A=B, [C=D|E]):-A==C, !, B=D)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$mem_pair'(A=B, [C=D|E]):-['$get_level'(F), '$equality_of_term'(A, C), '$cut'(F), '$unify'(B, D)])).
        get_str((=)/2, s(1), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_list(a(2)).
        unify_var(a(5)).
        unify_void(1).
        get_str((=)/2, s(1), a(5)).
        unify_var(a(6)).
        unify_var(a(7)).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        inline('$equality_of_term'(a(3), a(6))).
        inline('$cut'(a(8))).
        inline('$unify'(a(4), a(7))).
        execute(cont).
'$mem_pair'/2+2 :
        comment(('$mem_pair'(A, [B|C]):-'$mem_pair'(A, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$mem_pair'(A, [B|C]):-['$mem_pair'(A, C)])).
        get_list(a(2)).
        unify_void(1).
        unify_var(a(3)).
        set(a(1), ea(1)).
        set(a(3), ea(2)).
        set(cont, econt).
        goto('$mem_pair'/2+top).
end_predicate('$mem_pair'/2).

begin_predicate('$read_tokens_until_fullstop'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$read_tokens_until_fullstop'/1, 'builtins.pl']).
main('$read_tokens_until_fullstop'/1, non- (public)) :
'$read_tokens_until_fullstop'/1 :
        comment(('$read_tokens_until_fullstop'(A):-read_token(A, B), '$read_tokens_until_fullstop'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment(('$read_tokens_until_fullstop'(A):-[read_token(A, B), '$read_tokens_until_fullstop'(A, B)])).
        put_var(a(2)).
        put_cont('$read_tokens_until_fullstop'(a(1), a(2), cont), p(1)).
        execute(read_token(a(1), a(2), p(1))).
end_predicate('$read_tokens_until_fullstop'/1).

begin_predicate('$read_tokens_until_fullstop'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$read_tokens_until_fullstop'/2, 'builtins.pl']).
main('$read_tokens_until_fullstop'/2, non- (public)) :
        put_con(end_of_file, s(1)).
        put_con('.', s(2)).
        label('$read_tokens_until_fullstop'/2+sub+1).
        label('$read_tokens_until_fullstop'/2+sub+2).
        label('$read_tokens_until_fullstop'/2+1).
        label('$read_tokens_until_fullstop'/2+2).
        label('$read_tokens_until_fullstop'/2+3).
'$read_tokens_until_fullstop'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$read_tokens_until_fullstop'/2+1, '$read_tokens_until_fullstop'/2+sub+1).
'$read_tokens_until_fullstop'/2+sub+1 :
        retry('$read_tokens_until_fullstop'/2+2, '$read_tokens_until_fullstop'/2+sub+2).
'$read_tokens_until_fullstop'/2+sub+2 :
        trust('$read_tokens_until_fullstop'/2+3).
'$read_tokens_until_fullstop'/2+1 :
        comment(('$read_tokens_until_fullstop'(A, end_of_file):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$read_tokens_until_fullstop'(A, end_of_file):-['$neck_cut'])).
        get_con(end_of_file, s(1), a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_tokens_until_fullstop'/2+2 :
        comment(('$read_tokens_until_fullstop'(A, '.'):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$read_tokens_until_fullstop'(A, '.'):-['$neck_cut'])).
        get_con('.', s(2), a(2)).
        inline('$neck_cut').
        execute(cont).
'$read_tokens_until_fullstop'/2+3 :
        comment(('$read_tokens_until_fullstop'(A, B):-read_token(A, C), '$read_tokens_until_fullstop'(A, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$read_tokens_until_fullstop'(A, B):-[read_token(A, C), '$read_tokens_until_fullstop'(A, C)])).
        put_var(a(3)).
        put_cont('$read_tokens_until_fullstop'(a(1), a(3), cont), p(1)).
        execute(read_token(a(1), a(3), p(1))).
end_predicate('$read_tokens_until_fullstop'/2).

begin_predicate(parse_tokens/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([parse_tokens/2, 'builtins.pl']).
main(parse_tokens/2, non- (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$tokens'/1, s(3)).
        put_int(1201, si(4)).
        put_con('.', s(5)).
        put_con([], s(6)).
        put_list(s(5), s(6), s(7)).
parse_tokens/2 :
        comment((parse_tokens(A, B):-retractall('$tokens'(C)), assertz('$tokens'(B)), '$parse_tokens'(A, 1201, B, ['.']), retract('$tokens'(B)), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((parse_tokens(A, B):-['$get_level'(C), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$tokens'(D)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$tokens'(B)), '$parse_tokens'(A, 1201, B, ['.']), retract('jp.ac.kobe_u.cs.prolog.builtin':'$tokens'(B)), '$cut'(C)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_str_args([void], y(1)).
        put_str(s(3), y(1), a(4)).
        put_str_args([s(2), a(4)], y(2)).
        put_str(s(1), y(2), a(5)).
        put_str_args([a(2)], y(3)).
        put_str(s(3), y(3), a(6)).
        put_str_args([s(2), a(6)], y(4)).
        put_str(s(1), y(4), a(7)).
        put_str_args([a(2)], y(5)).
        put_str(s(3), y(5), a(8)).
        put_str_args([s(2), a(8)], y(6)).
        put_str(s(1), y(6), a(9)).
        put_cont('$cut'(a(3), cont), p(1)).
        put_cont(retract(a(9), p(1)), p(2)).
        put_cont('$parse_tokens'(a(1), si(4), a(2), s(7), p(2)), p(3)).
        put_cont(assertz(a(7), p(3)), p(4)).
        execute(retractall(a(5), p(4))).
end_predicate(parse_tokens/2).

begin_predicate('$parse_tokens'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens'/4, 'builtins.pl']).
main('$parse_tokens'/4, non- (public)) :
'$parse_tokens'/4 :
        comment(('$parse_tokens'(A, B, C, D):-'$parse_tokens_skip_spaces'(C, E), '$parse_tokens1'(B, F, G, E, H), !, '$parse_tokens_skip_spaces'(H, I), '$parse_tokens2'(B, F, G, A, J, I, D), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$parse_tokens'(A, B, C, D):-['$get_level'(E), '$parse_tokens_skip_spaces'(C, F), '$parse_tokens1'(B, G, H, F, I), '$cut'(E), '$parse_tokens_skip_spaces'(I, J), '$parse_tokens2'(B, G, H, A, K, J, D), '$cut'(E)])).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_var(a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_cont('$cut'(a(5), cont), p(1)).
        put_cont('$parse_tokens2'(a(2), a(7), a(8), a(1), void, a(10), a(4), p(1)), p(2)).
        put_cont('$parse_tokens_skip_spaces'(a(9), a(10), p(2)), p(3)).
        put_cont('$cut'(a(5), p(3)), p(4)).
        put_cont('$parse_tokens1'(a(2), a(7), a(8), a(6), a(9), p(4)), p(5)).
        execute('$parse_tokens_skip_spaces'(a(3), a(6), p(5))).
end_predicate('$parse_tokens'/4).

begin_predicate('$parse_tokens1'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens1'/5, 'builtins.pl']).
main('$parse_tokens1'/5, non- (public)) :
        put_con(cannot, s(1)).
        put_con(start, s(2)).
        put_con(an, s(3)).
        put_con(expression, s(4)).
        put_con([], s(5)).
        put_list(s(4), s(5), s(6)).
        put_list(s(3), s(6), s(7)).
        put_list(s(2), s(7), s(8)).
        put_list(s(1), s(8), s(9)).
        label('$parse_tokens1'/5+sub+1).
        label('$parse_tokens1'/5+1).
        label('$parse_tokens1'/5+2).
'$parse_tokens1'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$parse_tokens1'/5+1, '$parse_tokens1'/5+sub+1).
'$parse_tokens1'/5+sub+1 :
        trust('$parse_tokens1'/5+2).
'$parse_tokens1'/5+1 :
        comment(('$parse_tokens1'(A, B, C, D, E):-'$parse_tokens_peep_next'(F, D, G), ('$parse_tokens_is_starter'(F), H=G), !, '$parse_tokens_before_op'(A, B, C, H, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens1'(A, B, C, D, E):-['$get_level'(F), '$parse_tokens_peep_next'(G, D, H), '$parse_tokens_is_starter'(G), '$unify'(I, H), '$cut'(F), '$parse_tokens_before_op'(A, B, C, I, E)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_var(a(7)).
        put_var(a(8)).
        put_var(a(9)).
        put_cont('$parse_tokens_before_op'(a(1), a(2), a(3), a(9), a(5), cont), p(1)).
        put_cont('$cut'(a(6), p(1)), p(2)).
        put_cont('$unify'(a(9), a(8), p(2)), p(3)).
        put_cont('$parse_tokens_is_starter'(a(7), p(3)), p(4)).
        execute('$parse_tokens_peep_next'(a(7), a(4), a(8), p(4))).
'$parse_tokens1'/5+2 :
        comment(('$parse_tokens1'(A, B, C, D, E):-'$parse_tokens_peep_next'(F, D, G), '$parse_tokens_error'([F, cannot, start, an, expression], G, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens1'(A, B, C, D, E):-['$parse_tokens_peep_next'(F, D, G), '$parse_tokens_error'([F, cannot, start, an, expression], G, E)])).
        put_var(a(6)).
        put_var(a(7)).
        put_list(a(6), s(9), a(8)).
        put_cont('$parse_tokens_error'(a(8), a(7), a(5), cont), p(1)).
        execute('$parse_tokens_peep_next'(a(6), a(4), a(7), p(1))).
end_predicate('$parse_tokens1'/5).

begin_predicate('$parse_tokens2'/7).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens2'/7, 'builtins.pl']).
main('$parse_tokens2'/7, non- (public)) :
        put_con(operator, s(1)).
        put_con(expected, s(2)).
        put_con(after, s(3)).
        put_con(expression, s(4)).
        put_con([], s(5)).
        put_list(s(4), s(5), s(6)).
        put_list(s(3), s(6), s(7)).
        put_list(s(2), s(7), s(8)).
        put_list(s(1), s(8), s(9)).
        label('$parse_tokens2'/7+sub+1).
        label('$parse_tokens2'/7+sub+2).
        label('$parse_tokens2'/7+1).
        label('$parse_tokens2'/7+2).
        label('$parse_tokens2'/7+3).
'$parse_tokens2'/7 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(cont, econt).
        setB0.
        try('$parse_tokens2'/7+1, '$parse_tokens2'/7+sub+1).
'$parse_tokens2'/7+sub+1 :
        retry('$parse_tokens2'/7+2, '$parse_tokens2'/7+sub+2).
'$parse_tokens2'/7+sub+2 :
        trust('$parse_tokens2'/7+3).
'$parse_tokens2'/7+1 :
        comment(('$parse_tokens2'(A, B, C, B, C, D, E):-'$parse_tokens_peep_next'(F, D, G), ('$parse_tokens_is_terminator'(F), H=G), (C=<A, E=H), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(econt, cont).
        comment(('$parse_tokens2'(A, B, C, B, C, D, E):-['$get_level'(F), '$parse_tokens_peep_next'(G, D, H), '$parse_tokens_is_terminator'(G), '$unify'(I, H), '$less_or_equal'(C, A), '$unify'(E, I), '$cut'(F)])).
        get_val(a(2), a(4)).
        get_val(a(3), a(5)).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        put_var(a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_cont('$cut'(a(8), cont), p(1)).
        put_cont('$unify'(a(7), a(11), p(1)), p(2)).
        put_cont('$less_or_equal'(a(3), a(1), p(2)), p(3)).
        put_cont('$unify'(a(11), a(10), p(3)), p(4)).
        put_cont('$parse_tokens_is_terminator'(a(9), p(4)), p(5)).
        execute('$parse_tokens_peep_next'(a(9), a(6), a(10), p(5))).
'$parse_tokens2'/7+2 :
        comment(('$parse_tokens2'(A, B, C, D, E, F, G):-'$parse_tokens_peep_next'(H, F, I), ('$parse_tokens_is_post_in_op'(H), J=I), !, '$parse_tokens_post_in_ops'(A, B, C, D, E, J, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(econt, cont).
        comment(('$parse_tokens2'(A, B, C, D, E, F, G):-['$get_level'(H), '$parse_tokens_peep_next'(I, F, J), '$parse_tokens_is_post_in_op'(I), '$unify'(K, J), '$cut'(H), '$parse_tokens_post_in_ops'(A, B, C, D, E, K, G)])).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        put_var(a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_cont('$parse_tokens_post_in_ops'(a(1), a(2), a(3), a(4), a(5), a(11), a(7), cont), p(1)).
        put_cont('$cut'(a(8), p(1)), p(2)).
        put_cont('$unify'(a(11), a(10), p(2)), p(3)).
        put_cont('$parse_tokens_is_post_in_op'(a(9), p(3)), p(4)).
        execute('$parse_tokens_peep_next'(a(9), a(6), a(10), p(4))).
'$parse_tokens2'/7+3 :
        comment(('$parse_tokens2'(A, B, C, D, E, F, G):-'$parse_tokens_error'([operator, expected, after, expression], F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(econt, cont).
        comment(('$parse_tokens2'(A, B, C, D, E, F, G):-['$parse_tokens_error'([operator, expected, after, expression], F, G)])).
        execute('$parse_tokens_error'(s(9), a(6), a(7), cont)).
end_predicate('$parse_tokens2'/7).

begin_predicate('$parse_tokens_before_op'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_before_op'/5, 'builtins.pl']).
main('$parse_tokens_before_op'/5, non- (public)) :
        put_con(' ', s(1)).
        put_con(end_of_file, s(2)).
        put_int(0, si(3)).
        put_con(number/1, s(4)).
        put_con(atom/1, s(5)).
        put_con(-, s(6)).
        put_str_args([s(6)], s(7)).
        put_str(s(5), s(7), s(8)).
        put_int(-1, si(9)).
        put_con(var/2, s(10)).
        put_con(string/1, s(11)).
        put_con('(', s(12)).
        put_int(1201, si(13)).
        put_con(')', s(14)).
        put_con('{', s(15)).
        put_con('[', s(16)).
        put_con(fx, s(17)).
        put_int(1, si(18)).
        put_con(fy, s(19)).
        label('$parse_tokens_before_op'/5+top).
        label('$parse_tokens_before_op'/5+sub+1).
        label('$parse_tokens_before_op'/5+sub+2).
        label('$parse_tokens_before_op'/5+sub+3).
        label('$parse_tokens_before_op'/5+sub+4).
        label('$parse_tokens_before_op'/5+sub+5).
        label('$parse_tokens_before_op'/5+sub+6).
        label('$parse_tokens_before_op'/5+sub+7).
        label('$parse_tokens_before_op'/5+sub+8).
        label('$parse_tokens_before_op'/5+sub+9).
        label('$parse_tokens_before_op'/5+sub+10).
        label('$parse_tokens_before_op'/5+sub+11).
        label('$parse_tokens_before_op'/5+sub+12).
        label('$parse_tokens_before_op'/5+1).
        label('$parse_tokens_before_op'/5+2).
        label('$parse_tokens_before_op'/5+3).
        label('$parse_tokens_before_op'/5+4).
        label('$parse_tokens_before_op'/5+5).
        label('$parse_tokens_before_op'/5+6).
        label('$parse_tokens_before_op'/5+7).
        label('$parse_tokens_before_op'/5+8).
        label('$parse_tokens_before_op'/5+9).
        label('$parse_tokens_before_op'/5+10).
        label('$parse_tokens_before_op'/5+11).
        label('$parse_tokens_before_op'/5+12).
        label('$parse_tokens_before_op'/5+13).
'$parse_tokens_before_op'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$parse_tokens_before_op'/5+top).
'$parse_tokens_before_op'/5+top :
        setB0.
        try('$parse_tokens_before_op'/5+1, '$parse_tokens_before_op'/5+sub+1).
'$parse_tokens_before_op'/5+sub+1 :
        retry('$parse_tokens_before_op'/5+2, '$parse_tokens_before_op'/5+sub+2).
'$parse_tokens_before_op'/5+sub+2 :
        retry('$parse_tokens_before_op'/5+3, '$parse_tokens_before_op'/5+sub+3).
'$parse_tokens_before_op'/5+sub+3 :
        retry('$parse_tokens_before_op'/5+4, '$parse_tokens_before_op'/5+sub+4).
'$parse_tokens_before_op'/5+sub+4 :
        retry('$parse_tokens_before_op'/5+5, '$parse_tokens_before_op'/5+sub+5).
'$parse_tokens_before_op'/5+sub+5 :
        retry('$parse_tokens_before_op'/5+6, '$parse_tokens_before_op'/5+sub+6).
'$parse_tokens_before_op'/5+sub+6 :
        retry('$parse_tokens_before_op'/5+7, '$parse_tokens_before_op'/5+sub+7).
'$parse_tokens_before_op'/5+sub+7 :
        retry('$parse_tokens_before_op'/5+8, '$parse_tokens_before_op'/5+sub+8).
'$parse_tokens_before_op'/5+sub+8 :
        retry('$parse_tokens_before_op'/5+9, '$parse_tokens_before_op'/5+sub+9).
'$parse_tokens_before_op'/5+sub+9 :
        retry('$parse_tokens_before_op'/5+10, '$parse_tokens_before_op'/5+sub+10).
'$parse_tokens_before_op'/5+sub+10 :
        retry('$parse_tokens_before_op'/5+11, '$parse_tokens_before_op'/5+sub+11).
'$parse_tokens_before_op'/5+sub+11 :
        retry('$parse_tokens_before_op'/5+12, '$parse_tokens_before_op'/5+sub+12).
'$parse_tokens_before_op'/5+sub+12 :
        trust('$parse_tokens_before_op'/5+13).
'$parse_tokens_before_op'/5+1 :
        comment(('$parse_tokens_before_op'(A, B, C, [' '|D], E):-!, '$parse_tokens_before_op'(A, B, C, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, C, [' '|D], E):-['$neck_cut', '$parse_tokens_before_op'(A, B, C, D, E)])).
        get_list(a(4)).
        unify_con(' ', s(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        set(a(1), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(a(6), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$parse_tokens_before_op'/5+top).
'$parse_tokens_before_op'/5+2 :
        comment(('$parse_tokens_before_op'(A, end_of_file, 0, [end_of_file|B], B):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, end_of_file, 0, [end_of_file|B], B):-['$neck_cut'])).
        get_con(end_of_file, s(2), a(2)).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_con(end_of_file, s(2)).
        unify_var(a(6)).
        get_val(a(6), a(5)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_before_op'/5+3 :
        comment(('$parse_tokens_before_op'(A, B, 0, [number(B)|C], C):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, [number(B)|C], C):-['$neck_cut'])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(number/1, s(4), a(6)).
        unify_val(a(2)).
        get_val(a(7), a(5)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_before_op'/5+4 :
        comment(('$parse_tokens_before_op'(A, B, 0, [atom(-)|C], D):-C=[number(E)|F], !, B is -E, D=F)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, [atom(-)|C], D):-['$get_level'(E), '$unify'(C, [number(F)|G]), '$cut'(E), '$multi'(-1, F, B), '$unify'(D, G)])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_ground(atom(-), s(8)).
        unify_var(a(6)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_var(a(8)).
        put_str_args([a(8)], y(1)).
        put_str(s(4), y(1), a(9)).
        put_var(a(10)).
        put_list(a(9), a(10), a(11)).
        inline('$unify'(a(6), a(11))).
        inline('$cut'(a(7))).
        inline('$multi'(si(9), a(8), a(2))).
        inline('$unify'(a(5), a(10))).
        execute(cont).
'$parse_tokens_before_op'/5+5 :
        comment(('$parse_tokens_before_op'(A, B, 0, [var(C, B)|D], D):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, [var(C, B)|D], D):-['$neck_cut'])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(var/2, s(10), a(6)).
        unify_void(1).
        unify_val(a(2)).
        get_val(a(7), a(5)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_before_op'/5+6 :
        comment(('$parse_tokens_before_op'(A, B, 0, [string(B)|C], C):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, [string(B)|C], C):-['$neck_cut'])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(string/1, s(11), a(6)).
        unify_val(a(2)).
        get_val(a(7), a(5)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_before_op'/5+7 :
        comment(('$parse_tokens_before_op'(A, B, 0, ['('|C], D):-!, '$parse_tokens'(B, 1201, C, E), '$parse_tokens_expect'(')', E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, ['('|C], D):-['$neck_cut', '$parse_tokens'(B, 1201, C, E), '$parse_tokens_expect'(')', E, D)])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_con('(', s(12)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_var(a(7)).
        put_cont('$parse_tokens_expect'(s(14), a(7), a(5), cont), p(1)).
        execute('$parse_tokens'(a(2), si(13), a(6), a(7), p(1))).
'$parse_tokens_before_op'/5+8 :
        comment(('$parse_tokens_before_op'(A, B, 0, ['{'|C], D):-!, '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_brace'(B, E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, ['{'|C], D):-['$neck_cut', '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_brace'(B, E, D)])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_con('{', s(15)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_var(a(7)).
        put_cont('$parse_tokens_brace'(a(2), a(7), a(5), cont), p(1)).
        execute('$parse_tokens_skip_spaces'(a(6), a(7), p(1))).
'$parse_tokens_before_op'/5+9 :
        comment(('$parse_tokens_before_op'(A, B, 0, ['['|C], D):-!, '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_list'(B, E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, ['['|C], D):-['$neck_cut', '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_list'(B, E, D)])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_con('[', s(16)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_var(a(7)).
        put_cont('$parse_tokens_list'(a(2), a(7), a(5), cont), p(1)).
        execute('$parse_tokens_skip_spaces'(a(6), a(7), p(1))).
'$parse_tokens_before_op'/5+10 :
        comment(('$parse_tokens_before_op'(A, B, 0, [atom(C)|D], E):-D=['('|F], !, '$parse_tokens_skip_spaces'(F, G), '$parse_tokens_args'(H, G, I), B=..[C|H], E=I)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, [atom(C)|D], E):-['$get_level'(F), '$unify'(D, ['('|G]), '$cut'(F), '$parse_tokens_skip_spaces'(G, H), '$parse_tokens_args'(I, H, J), '$univ'(B, [C|I]), '$unify'(E, J)])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(atom/1, s(5), a(6)).
        unify_var(a(8)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        put_var(a(10)).
        put_list(s(12), a(10), a(11)).
        inline('$unify'(a(7), a(11))).
        inline('$cut'(a(9))).
        put_var(a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_list(a(8), a(13), a(15)).
        put_cont('$unify'(a(5), a(14), cont), p(1)).
        put_cont('$univ'(a(2), a(15), p(1)), p(2)).
        put_cont('$parse_tokens_args'(a(13), a(12), a(14), p(2)), p(3)).
        execute('$parse_tokens_skip_spaces'(a(10), a(12), p(3))).
'$parse_tokens_before_op'/5+11 :
        comment(('$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):- (current_op(C, fx, D), G=E), (C=<A, H=G), '$parse_tokens_skip_spaces'(H, I), '$parse_tokens_peep_next'(J, I, K), ('$parse_tokens_is_starter'(J), L=K), ('$dummy_14_builtins.pl'(J), M=L), !, (N is C-1, O=M), '$parse_tokens'(P, N, O, Q), (functor(B, D, 1), R=Q), arg(1, B, P), F=R)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15), a(16), a(17), a(18), a(19), a(20), a(21)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13), p(14), p(15), p(16), p(17)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):-['$get_level'(G), current_op(C, fx, D), '$unify'(H, E), '$less_or_equal'(C, A), '$unify'(I, H), '$parse_tokens_skip_spaces'(I, J), '$parse_tokens_peep_next'(K, J, L), '$parse_tokens_is_starter'(K), '$unify'(M, L), '$dummy_14_builtins.pl'(K), '$unify'(N, M), '$cut'(G), '$minus'(C, 1, O), '$unify'(P, N), '$parse_tokens'(Q, O, P, R), functor(B, D, 1), '$unify'(S, R), arg(1, B, Q), '$unify'(F, S)])).
        get_list(a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(atom/1, s(5), a(6)).
        unify_var(a(8)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        put_var(a(10)).
        put_var(a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_var(a(15)).
        put_var(a(16)).
        put_var(a(17)).
        put_var(a(18)).
        put_var(a(19)).
        put_var(a(20)).
        put_var(a(21)).
        put_cont('$unify'(a(5), a(21), cont), p(1)).
        put_cont(arg(si(18), a(2), a(19), p(1)), p(2)).
        put_cont('$unify'(a(21), a(20), p(2)), p(3)).
        put_cont(functor(a(2), a(8), si(18), p(3)), p(4)).
        put_cont('$parse_tokens'(a(19), a(17), a(18), a(20), p(4)), p(5)).
        put_cont('$unify'(a(18), a(16), p(5)), p(6)).
        put_cont('$minus'(a(3), si(18), a(17), p(6)), p(7)).
        put_cont('$cut'(a(9), p(7)), p(8)).
        put_cont('$unify'(a(16), a(15), p(8)), p(9)).
        put_cont('$dummy_14_builtins.pl'(a(13), p(9)), p(10)).
        put_cont('$unify'(a(15), a(14), p(10)), p(11)).
        put_cont('$parse_tokens_is_starter'(a(13), p(11)), p(12)).
        put_cont('$parse_tokens_peep_next'(a(13), a(12), a(14), p(12)), p(13)).
        put_cont('$parse_tokens_skip_spaces'(a(11), a(12), p(13)), p(14)).
        put_cont('$unify'(a(11), a(10), p(14)), p(15)).
        put_cont('$less_or_equal'(a(3), a(1), p(15)), p(16)).
        put_cont('$unify'(a(10), a(7), p(16)), p(17)).
        execute(current_op(a(3), s(17), a(8), p(17))).
'$parse_tokens_before_op'/5+12 :
        comment(('$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):- (current_op(C, fy, D), G=E), (C=<A, H=G), '$parse_tokens_skip_spaces'(H, I), '$parse_tokens_peep_next'(J, I, K), ('$parse_tokens_is_starter'(J), L=K), ('$dummy_15_builtins.pl'(J), M=L), !, '$parse_tokens'(N, C, M, O), (functor(B, D, 1), P=O), arg(1, B, N), F=P)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15), a(16), a(17), a(18), a(19)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13), p(14), p(15)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):-['$get_level'(G), current_op(C, fy, D), '$unify'(H, E), '$less_or_equal'(C, A), '$unify'(I, H), '$parse_tokens_skip_spaces'(I, J), '$parse_tokens_peep_next'(K, J, L), '$parse_tokens_is_starter'(K), '$unify'(M, L), '$dummy_15_builtins.pl'(K), '$unify'(N, M), '$cut'(G), '$parse_tokens'(O, C, N, P), functor(B, D, 1), '$unify'(Q, P), arg(1, B, O), '$unify'(F, Q)])).
        get_list(a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(atom/1, s(5), a(6)).
        unify_var(a(8)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        put_var(a(10)).
        put_var(a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_var(a(15)).
        put_var(a(16)).
        put_var(a(17)).
        put_var(a(18)).
        put_var(a(19)).
        put_cont('$unify'(a(5), a(19), cont), p(1)).
        put_cont(arg(si(18), a(2), a(17), p(1)), p(2)).
        put_cont('$unify'(a(19), a(18), p(2)), p(3)).
        put_cont(functor(a(2), a(8), si(18), p(3)), p(4)).
        put_cont('$parse_tokens'(a(17), a(3), a(16), a(18), p(4)), p(5)).
        put_cont('$cut'(a(9), p(5)), p(6)).
        put_cont('$unify'(a(16), a(15), p(6)), p(7)).
        put_cont('$dummy_15_builtins.pl'(a(13), p(7)), p(8)).
        put_cont('$unify'(a(15), a(14), p(8)), p(9)).
        put_cont('$parse_tokens_is_starter'(a(13), p(9)), p(10)).
        put_cont('$parse_tokens_peep_next'(a(13), a(12), a(14), p(10)), p(11)).
        put_cont('$parse_tokens_skip_spaces'(a(11), a(12), p(11)), p(12)).
        put_cont('$unify'(a(11), a(10), p(12)), p(13)).
        put_cont('$less_or_equal'(a(3), a(1), p(13)), p(14)).
        put_cont('$unify'(a(10), a(7), p(14)), p(15)).
        execute(current_op(a(3), s(19), a(8), p(15))).
'$parse_tokens_before_op'/5+13 :
        comment(('$parse_tokens_before_op'(A, B, 0, [atom(B)|C], C):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$parse_tokens_before_op'(A, B, 0, [atom(B)|C], C):-[])).
        get_int(0, si(3), a(3)).
        get_list(a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str(atom/1, s(5), a(6)).
        unify_val(a(2)).
        get_val(a(7), a(5)).
        execute(cont).
end_predicate('$parse_tokens_before_op'/5).

begin_predicate('$dummy_14_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_14_builtins.pl'/1, 'builtins.pl']).
main('$dummy_14_builtins.pl'/1, non- (public)) :
        label('$dummy_14_builtins.pl'/1+sub+1).
        label('$dummy_14_builtins.pl'/1+1).
        label('$dummy_14_builtins.pl'/1+2).
'$dummy_14_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_14_builtins.pl'/1+1, '$dummy_14_builtins.pl'/1+sub+1).
'$dummy_14_builtins.pl'/1+sub+1 :
        trust('$dummy_14_builtins.pl'/1+2).
'$dummy_14_builtins.pl'/1+1 :
        comment(('$dummy_14_builtins.pl'(A):-'$parse_tokens_is_post_in_op'(A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_14_builtins.pl'(A):-['$get_level'(B), '$parse_tokens_is_post_in_op'(A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_cont(fail(cont), p(1)).
        put_cont('$cut'(a(2), p(1)), p(2)).
        execute('$parse_tokens_is_post_in_op'(a(1), p(2))).
'$dummy_14_builtins.pl'/1+2 :
        comment(('$dummy_14_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_14_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_14_builtins.pl'/1).

begin_predicate('$dummy_15_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_15_builtins.pl'/1, 'builtins.pl']).
main('$dummy_15_builtins.pl'/1, non- (public)) :
        label('$dummy_15_builtins.pl'/1+sub+1).
        label('$dummy_15_builtins.pl'/1+1).
        label('$dummy_15_builtins.pl'/1+2).
'$dummy_15_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_15_builtins.pl'/1+1, '$dummy_15_builtins.pl'/1+sub+1).
'$dummy_15_builtins.pl'/1+sub+1 :
        trust('$dummy_15_builtins.pl'/1+2).
'$dummy_15_builtins.pl'/1+1 :
        comment(('$dummy_15_builtins.pl'(A):-'$parse_tokens_is_post_in_op'(A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_15_builtins.pl'(A):-['$get_level'(B), '$parse_tokens_is_post_in_op'(A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_cont(fail(cont), p(1)).
        put_cont('$cut'(a(2), p(1)), p(2)).
        execute('$parse_tokens_is_post_in_op'(a(1), p(2))).
'$dummy_15_builtins.pl'/1+2 :
        comment(('$dummy_15_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_15_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_15_builtins.pl'/1).

begin_predicate('$parse_tokens_brace'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_brace'/3, 'builtins.pl']).
main('$parse_tokens_brace'/3, non- (public)) :
        put_con({}, s(1)).
        put_con('}', s(2)).
        put_int(1201, si(3)).
        put_con({}/1, s(4)).
        label('$parse_tokens_brace'/3+var).
        label('$parse_tokens_brace'/3+var+1).
        label('$parse_tokens_brace'/3+1).
        label('$parse_tokens_brace'/3+2).
'$parse_tokens_brace'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_brace'/3+var, '$parse_tokens_brace'/3+2, '$parse_tokens_brace'/3+2, '$parse_tokens_brace'/3+var, '$parse_tokens_brace'/3+2, '$parse_tokens_brace'/3+2).
'$parse_tokens_brace'/3+var :
        try('$parse_tokens_brace'/3+1, '$parse_tokens_brace'/3+var+1).
'$parse_tokens_brace'/3+var+1 :
        trust('$parse_tokens_brace'/3+2).
'$parse_tokens_brace'/3+1 :
        comment(('$parse_tokens_brace'({}, ['}'|A], A):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_brace'({}, ['}'|A], A):-['$neck_cut'])).
        get_con({}, s(1), a(1)).
        get_list(a(2)).
        unify_con('}', s(2)).
        unify_var(a(4)).
        get_val(a(4), a(3)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_brace'/3+2 :
        comment(('$parse_tokens_brace'(A, B, C):-'$parse_tokens'(D, 1201, B, E), '$parse_tokens_expect'('}', E, F), A={D}, C=F)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_brace'(A, B, C):-['$parse_tokens'(D, 1201, B, E), '$parse_tokens_expect'('}', E, F), '$unify'(A, {D}), '$unify'(C, F)])).
        put_var(a(4)).
        put_var(a(5)).
        put_var(a(6)).
        put_str_args([a(4)], y(1)).
        put_str(s(4), y(1), a(7)).
        put_cont('$unify'(a(3), a(6), cont), p(1)).
        put_cont('$unify'(a(1), a(7), p(1)), p(2)).
        put_cont('$parse_tokens_expect'(s(2), a(5), a(6), p(2)), p(3)).
        execute('$parse_tokens'(a(4), si(3), a(2), a(5), p(3))).
end_predicate('$parse_tokens_brace'/3).

begin_predicate('$parse_tokens_list'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_list'/3, 'builtins.pl']).
main('$parse_tokens_list'/3, non- (public)) :
        put_con([], s(1)).
        put_con(']', s(2)).
        put_int(999, si(3)).
        label(fail/0).
        label('$parse_tokens_list'/3+var).
        label('$parse_tokens_list'/3+var+1).
        label('$parse_tokens_list'/3+1).
        label('$parse_tokens_list'/3+2).
'$parse_tokens_list'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_list'/3+var, fail/0, fail/0, '$parse_tokens_list'/3+1, fail/0, '$parse_tokens_list'/3+2).
'$parse_tokens_list'/3+var :
        try('$parse_tokens_list'/3+1, '$parse_tokens_list'/3+var+1).
'$parse_tokens_list'/3+var+1 :
        trust('$parse_tokens_list'/3+2).
'$parse_tokens_list'/3+1 :
        comment(('$parse_tokens_list'([], [']'|A], A):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_list'([], [']'|A], A):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_list(a(2)).
        unify_con(']', s(2)).
        unify_var(a(4)).
        get_val(a(4), a(3)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_list'/3+2 :
        comment(('$parse_tokens_list'([A|B], C, D):-'$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_list_rest'(B, F, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_list'([A|B], C, D):-['$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_list_rest'(B, F, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_cont('$parse_tokens_list_rest'(a(5), a(7), a(3), cont), p(1)).
        put_cont('$parse_tokens_skip_spaces'(a(6), a(7), p(1)), p(2)).
        execute('$parse_tokens'(a(4), si(3), a(2), a(6), p(2))).
end_predicate('$parse_tokens_list'/3).

begin_predicate('$parse_tokens_list_rest'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_list_rest'/3, 'builtins.pl']).
main('$parse_tokens_list_rest'/3, non- (public)) :
        put_con(('|'), s(1)).
        put_int(999, si(2)).
        put_con(']', s(3)).
        put_con((','), s(4)).
        put_con([], s(5)).
        label('$parse_tokens_list_rest'/3+var).
        label('$parse_tokens_list_rest'/3+var+1).
        label('$parse_tokens_list_rest'/3+var+2).
        label('$parse_tokens_list_rest'/3+con).
        label('$parse_tokens_list_rest'/3+con+1).
        label('$parse_tokens_list_rest'/3+lis).
        label('$parse_tokens_list_rest'/3+lis+1).
        label('$parse_tokens_list_rest'/3+1).
        label('$parse_tokens_list_rest'/3+2).
        label('$parse_tokens_list_rest'/3+3).
'$parse_tokens_list_rest'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_list_rest'/3+var, '$parse_tokens_list_rest'/3+1, '$parse_tokens_list_rest'/3+1, '$parse_tokens_list_rest'/3+con, '$parse_tokens_list_rest'/3+1, '$parse_tokens_list_rest'/3+lis).
'$parse_tokens_list_rest'/3+var :
        try('$parse_tokens_list_rest'/3+1, '$parse_tokens_list_rest'/3+var+1).
'$parse_tokens_list_rest'/3+var+1 :
        retry('$parse_tokens_list_rest'/3+2, '$parse_tokens_list_rest'/3+var+2).
'$parse_tokens_list_rest'/3+var+2 :
        trust('$parse_tokens_list_rest'/3+3).
'$parse_tokens_list_rest'/3+con :
        try('$parse_tokens_list_rest'/3+1, '$parse_tokens_list_rest'/3+con+1).
'$parse_tokens_list_rest'/3+con+1 :
        trust('$parse_tokens_list_rest'/3+3).
'$parse_tokens_list_rest'/3+lis :
        try('$parse_tokens_list_rest'/3+1, '$parse_tokens_list_rest'/3+lis+1).
'$parse_tokens_list_rest'/3+lis+1 :
        trust('$parse_tokens_list_rest'/3+2).
'$parse_tokens_list_rest'/3+1 :
        comment(('$parse_tokens_list_rest'(A, [ ('|')|B], C):-!, '$parse_tokens'(A, 999, B, D), '$parse_tokens_expect'(']', D, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_list_rest'(A, [ ('|')|B], C):-['$neck_cut', '$parse_tokens'(A, 999, B, D), '$parse_tokens_expect'(']', D, C)])).
        get_list(a(2)).
        unify_con(('|'), s(1)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_var(a(5)).
        put_cont('$parse_tokens_expect'(s(3), a(5), a(3), cont), p(1)).
        execute('$parse_tokens'(a(1), si(2), a(4), a(5), p(1))).
'$parse_tokens_list_rest'/3+2 :
        comment(('$parse_tokens_list_rest'([A|B], [ (',')|C], D):-!, '$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_list_rest'(B, F, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_list_rest'([A|B], [ (',')|C], D):-['$neck_cut', '$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_list_rest'(B, F, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_con((','), s(4)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_var(a(7)).
        put_var(a(8)).
        put_cont('$parse_tokens_list_rest'(a(5), a(8), a(3), cont), p(1)).
        put_cont('$parse_tokens_skip_spaces'(a(7), a(8), p(1)), p(2)).
        execute('$parse_tokens'(a(4), si(2), a(6), a(7), p(2))).
'$parse_tokens_list_rest'/3+3 :
        comment(('$parse_tokens_list_rest'([], A, B):-'$parse_tokens_expect'(']', A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_list_rest'([], A, B):-['$parse_tokens_expect'(']', A, B)])).
        get_con([], s(5), a(1)).
        execute('$parse_tokens_expect'(s(3), a(2), a(3), cont)).
end_predicate('$parse_tokens_list_rest'/3).

begin_predicate('$parse_tokens_args'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_args'/3, 'builtins.pl']).
main('$parse_tokens_args'/3, non- (public)) :
        put_con([], s(1)).
        put_con(')', s(2)).
        put_int(999, si(3)).
        label(fail/0).
        label('$parse_tokens_args'/3+var).
        label('$parse_tokens_args'/3+var+1).
        label('$parse_tokens_args'/3+1).
        label('$parse_tokens_args'/3+2).
'$parse_tokens_args'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_args'/3+var, fail/0, fail/0, '$parse_tokens_args'/3+1, fail/0, '$parse_tokens_args'/3+2).
'$parse_tokens_args'/3+var :
        try('$parse_tokens_args'/3+1, '$parse_tokens_args'/3+var+1).
'$parse_tokens_args'/3+var+1 :
        trust('$parse_tokens_args'/3+2).
'$parse_tokens_args'/3+1 :
        comment(('$parse_tokens_args'([], [')'|A], A):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_args'([], [')'|A], A):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_list(a(2)).
        unify_con(')', s(2)).
        unify_var(a(4)).
        get_val(a(4), a(3)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_args'/3+2 :
        comment(('$parse_tokens_args'([A|B], C, D):-'$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_args_rest'(B, F, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_args'([A|B], C, D):-['$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_args_rest'(B, F, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_cont('$parse_tokens_args_rest'(a(5), a(7), a(3), cont), p(1)).
        put_cont('$parse_tokens_skip_spaces'(a(6), a(7), p(1)), p(2)).
        execute('$parse_tokens'(a(4), si(3), a(2), a(6), p(2))).
end_predicate('$parse_tokens_args'/3).

begin_predicate('$parse_tokens_args_rest'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_args_rest'/3, 'builtins.pl']).
main('$parse_tokens_args_rest'/3, non- (public)) :
        put_con((','), s(1)).
        put_int(999, si(2)).
        put_con([], s(3)).
        put_con(')', s(4)).
        label(fail/0).
        label('$parse_tokens_args_rest'/3+var).
        label('$parse_tokens_args_rest'/3+var+1).
        label('$parse_tokens_args_rest'/3+1).
        label('$parse_tokens_args_rest'/3+2).
'$parse_tokens_args_rest'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_args_rest'/3+var, fail/0, fail/0, '$parse_tokens_args_rest'/3+2, fail/0, '$parse_tokens_args_rest'/3+1).
'$parse_tokens_args_rest'/3+var :
        try('$parse_tokens_args_rest'/3+1, '$parse_tokens_args_rest'/3+var+1).
'$parse_tokens_args_rest'/3+var+1 :
        trust('$parse_tokens_args_rest'/3+2).
'$parse_tokens_args_rest'/3+1 :
        comment(('$parse_tokens_args_rest'([A|B], [ (',')|C], D):-!, '$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_args_rest'(B, F, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_args_rest'([A|B], [ (',')|C], D):-['$neck_cut', '$parse_tokens'(A, 999, C, E), '$parse_tokens_skip_spaces'(E, F), '$parse_tokens_args_rest'(B, F, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_con((','), s(1)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_var(a(7)).
        put_var(a(8)).
        put_cont('$parse_tokens_args_rest'(a(5), a(8), a(3), cont), p(1)).
        put_cont('$parse_tokens_skip_spaces'(a(7), a(8), p(1)), p(2)).
        execute('$parse_tokens'(a(4), si(2), a(6), a(7), p(2))).
'$parse_tokens_args_rest'/3+2 :
        comment(('$parse_tokens_args_rest'([], A, B):-'$parse_tokens_expect'(')', A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_args_rest'([], A, B):-['$parse_tokens_expect'(')', A, B)])).
        get_con([], s(3), a(1)).
        execute('$parse_tokens_expect'(s(4), a(2), a(3), cont)).
end_predicate('$parse_tokens_args_rest'/3).

begin_predicate('$parse_tokens_post_in_ops'/7).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_post_in_ops'/7, 'builtins.pl']).
main('$parse_tokens_post_in_ops'/7, non- (public)) :
        label('$parse_tokens_post_in_ops'/7+sub+1).
        label('$parse_tokens_post_in_ops'/7+1).
        label('$parse_tokens_post_in_ops'/7+2).
'$parse_tokens_post_in_ops'/7 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(cont, econt).
        setB0.
        try('$parse_tokens_post_in_ops'/7+1, '$parse_tokens_post_in_ops'/7+sub+1).
'$parse_tokens_post_in_ops'/7+sub+1 :
        trust('$parse_tokens_post_in_ops'/7+2).
'$parse_tokens_post_in_ops'/7+1 :
        comment(('$parse_tokens_post_in_ops'(A, B, C, D, E, F, G):-'$parse_tokens_skip_spaces'(F, H), H=[I|J], '$parse_tokens_op'(I, A, B, C, K, L, J, M), '$parse_tokens_post_in_ops'(A, K, L, D, E, M, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(econt, cont).
        comment(('$parse_tokens_post_in_ops'(A, B, C, D, E, F, G):-['$parse_tokens_skip_spaces'(F, H), '$unify'(H, [I|J]), '$parse_tokens_op'(I, A, B, C, K, L, J, M), '$parse_tokens_post_in_ops'(A, K, L, D, E, M, G)])).
        put_var(a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_list(a(9), a(10), a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_cont('$parse_tokens_post_in_ops'(a(1), a(12), a(13), a(4), a(5), a(14), a(7), cont), p(1)).
        put_cont('$parse_tokens_op'(a(9), a(1), a(2), a(3), a(12), a(13), a(10), a(14), p(1)), p(2)).
        put_cont('$unify'(a(8), a(11), p(2)), p(3)).
        execute('$parse_tokens_skip_spaces'(a(6), a(8), p(3))).
'$parse_tokens_post_in_ops'/7+2 :
        comment(('$parse_tokens_post_in_ops'(A, B, C, B, C, D, E):-C=<A, E=D)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(econt, cont).
        comment(('$parse_tokens_post_in_ops'(A, B, C, B, C, D, E):-['$less_or_equal'(C, A), '$unify'(E, D)])).
        get_val(a(2), a(4)).
        get_val(a(3), a(5)).
        inline('$less_or_equal'(a(3), a(1))).
        inline('$unify'(a(7), a(6))).
        execute(cont).
end_predicate('$parse_tokens_post_in_ops'/7).

begin_predicate('$parse_tokens_op'/8).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_op'/8, 'builtins.pl']).
main('$parse_tokens_op'/8, non- (public)) :
        put_con((','), s(1)).
        put_con(atom/1, s(2)).
        put_str_args([s(1)], s(3)).
        put_str(s(2), s(3), s(4)).
        put_con(('|'), s(5)).
        put_con((;), s(6)).
        put_str_args([s(6)], s(7)).
        put_str(s(2), s(7), s(8)).
        put_con(xf, s(9)).
        put_int(1, si(10)).
        put_con(yf, s(11)).
        put_con(xfx, s(12)).
        put_int(2, si(13)).
        put_con(xfy, s(14)).
        put_con(yfx, s(15)).
        label('$parse_tokens_op'/8+top).
        label(fail/0).
        label('$parse_tokens_op'/8+var).
        label('$parse_tokens_op'/8+var+1).
        label('$parse_tokens_op'/8+var+2).
        label('$parse_tokens_op'/8+var+3).
        label('$parse_tokens_op'/8+var+4).
        label('$parse_tokens_op'/8+var+5).
        label('$parse_tokens_op'/8+var+6).
        label('$parse_tokens_op'/8+con).
        label('$parse_tokens_op'/8+str).
        label('$parse_tokens_op'/8+str+1).
        label('$parse_tokens_op'/8+str+2).
        label('$parse_tokens_op'/8+str+3).
        label('$parse_tokens_op'/8+str+4).
        label('$parse_tokens_op'/8+1).
        label('$parse_tokens_op'/8+2).
        label('$parse_tokens_op'/8+3).
        label('$parse_tokens_op'/8+4).
        label('$parse_tokens_op'/8+5).
        label('$parse_tokens_op'/8+6).
        label('$parse_tokens_op'/8+7).
        new_hash(con, 2).
        static([put_hash(s(1), '$parse_tokens_op'/8+1, con), put_hash(s(5), '$parse_tokens_op'/8+2, con)]).
'$parse_tokens_op'/8 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(arg(8), ea(8)).
        set(cont, econt).
        goto('$parse_tokens_op'/8+top).
'$parse_tokens_op'/8+top :
        setB0.
        switch_on_term('$parse_tokens_op'/8+var, fail/0, fail/0, '$parse_tokens_op'/8+con, '$parse_tokens_op'/8+str, fail/0).
'$parse_tokens_op'/8+var :
        try('$parse_tokens_op'/8+1, '$parse_tokens_op'/8+var+1).
'$parse_tokens_op'/8+var+1 :
        retry('$parse_tokens_op'/8+2, '$parse_tokens_op'/8+var+2).
'$parse_tokens_op'/8+var+2 :
        retry('$parse_tokens_op'/8+3, '$parse_tokens_op'/8+var+3).
'$parse_tokens_op'/8+var+3 :
        retry('$parse_tokens_op'/8+4, '$parse_tokens_op'/8+var+4).
'$parse_tokens_op'/8+var+4 :
        retry('$parse_tokens_op'/8+5, '$parse_tokens_op'/8+var+5).
'$parse_tokens_op'/8+var+5 :
        retry('$parse_tokens_op'/8+6, '$parse_tokens_op'/8+var+6).
'$parse_tokens_op'/8+var+6 :
        trust('$parse_tokens_op'/8+7).
'$parse_tokens_op'/8+con :
        switch_on_hash(con, 2, fail/0, [ (','):'$parse_tokens_op'/8+1, ('|'):'$parse_tokens_op'/8+2]).
'$parse_tokens_op'/8+str :
        try('$parse_tokens_op'/8+3, '$parse_tokens_op'/8+str+1).
'$parse_tokens_op'/8+str+1 :
        retry('$parse_tokens_op'/8+4, '$parse_tokens_op'/8+str+2).
'$parse_tokens_op'/8+str+2 :
        retry('$parse_tokens_op'/8+5, '$parse_tokens_op'/8+str+3).
'$parse_tokens_op'/8+str+3 :
        retry('$parse_tokens_op'/8+6, '$parse_tokens_op'/8+str+4).
'$parse_tokens_op'/8+str+4 :
        trust('$parse_tokens_op'/8+7).
'$parse_tokens_op'/8+1 :
        comment(('$parse_tokens_op'((','), A, B, C, D, E, F, G):-!, '$parse_tokens_op'(atom((',')), A, B, C, D, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$parse_tokens_op'((','), A, B, C, D, E, F, G):-['$neck_cut', '$parse_tokens_op'(atom((',')), A, B, C, D, E, F, G)])).
        get_con((','), s(1), a(1)).
        inline('$neck_cut').
        set(s(4), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(a(6), ea(6)).
        set(a(7), ea(7)).
        set(a(8), ea(8)).
        set(cont, econt).
        goto('$parse_tokens_op'/8+top).
'$parse_tokens_op'/8+2 :
        comment(('$parse_tokens_op'(('|'), A, B, C, D, E, F, G):-!, '$parse_tokens_op'(atom((;)), A, B, C, D, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$parse_tokens_op'(('|'), A, B, C, D, E, F, G):-['$neck_cut', '$parse_tokens_op'(atom((;)), A, B, C, D, E, F, G)])).
        get_con(('|'), s(5), a(1)).
        inline('$neck_cut').
        set(s(8), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(a(6), ea(6)).
        set(a(7), ea(7)).
        set(a(8), ea(8)).
        set(cont, econt).
        goto('$parse_tokens_op'/8+top).
'$parse_tokens_op'/8+3 :
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, xf, A), I=G), (F=<B, J=I), (D<F, K=J), (functor(E, A, 1), L=K), arg(1, E, C), H=L)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-[current_op(F, xf, A), '$unify'(I, G), '$less_or_equal'(F, B), '$unify'(J, I), '$less_than'(D, F), '$unify'(K, J), functor(E, A, 1), '$unify'(L, K), arg(1, E, C), '$unify'(H, L)])).
        get_str(atom/1, s(2), a(1)).
        unify_var(a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_cont('$unify'(a(8), a(13), cont), p(1)).
        put_cont(arg(si(10), a(5), a(3), p(1)), p(2)).
        put_cont('$unify'(a(13), a(12), p(2)), p(3)).
        put_cont(functor(a(5), a(9), si(10), p(3)), p(4)).
        put_cont('$unify'(a(12), a(11), p(4)), p(5)).
        put_cont('$less_than'(a(4), a(6), p(5)), p(6)).
        put_cont('$unify'(a(11), a(10), p(6)), p(7)).
        put_cont('$less_or_equal'(a(6), a(2), p(7)), p(8)).
        put_cont('$unify'(a(10), a(7), p(8)), p(9)).
        execute(current_op(a(6), s(9), a(9), p(9))).
'$parse_tokens_op'/8+4 :
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, yf, A), I=G), (F=<B, J=I), (D=<F, K=J), (functor(E, A, 1), L=K), arg(1, E, C), H=L)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-[current_op(F, yf, A), '$unify'(I, G), '$less_or_equal'(F, B), '$unify'(J, I), '$less_or_equal'(D, F), '$unify'(K, J), functor(E, A, 1), '$unify'(L, K), arg(1, E, C), '$unify'(H, L)])).
        get_str(atom/1, s(2), a(1)).
        unify_var(a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_cont('$unify'(a(8), a(13), cont), p(1)).
        put_cont(arg(si(10), a(5), a(3), p(1)), p(2)).
        put_cont('$unify'(a(13), a(12), p(2)), p(3)).
        put_cont(functor(a(5), a(9), si(10), p(3)), p(4)).
        put_cont('$unify'(a(12), a(11), p(4)), p(5)).
        put_cont('$less_or_equal'(a(4), a(6), p(5)), p(6)).
        put_cont('$unify'(a(11), a(10), p(6)), p(7)).
        put_cont('$less_or_equal'(a(6), a(2), p(7)), p(8)).
        put_cont('$unify'(a(10), a(7), p(8)), p(9)).
        execute(current_op(a(6), s(11), a(9), p(9))).
'$parse_tokens_op'/8+5 :
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, xfx, A), I=G), (F=<B, J=I), (D<F, K=J), (L is F-1, M=K), '$parse_tokens'(N, L, M, O), !, (functor(E, A, 2), P=O), (arg(1, E, C), Q=P), arg(2, E, N), H=Q)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15), a(16), a(17), a(18), a(19)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13), p(14), p(15)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-['$get_level'(I), current_op(F, xfx, A), '$unify'(J, G), '$less_or_equal'(F, B), '$unify'(K, J), '$less_than'(D, F), '$unify'(L, K), '$minus'(F, 1, M), '$unify'(N, L), '$parse_tokens'(O, M, N, P), '$cut'(I), functor(E, A, 2), '$unify'(Q, P), arg(1, E, C), '$unify'(R, Q), arg(2, E, O), '$unify'(H, R)])).
        get_str(atom/1, s(2), a(1)).
        unify_var(a(9)).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        put_var(a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_var(a(15)).
        put_var(a(16)).
        put_var(a(17)).
        put_var(a(18)).
        put_var(a(19)).
        put_cont('$unify'(a(8), a(19), cont), p(1)).
        put_cont(arg(si(13), a(5), a(16), p(1)), p(2)).
        put_cont('$unify'(a(19), a(18), p(2)), p(3)).
        put_cont(arg(si(10), a(5), a(3), p(3)), p(4)).
        put_cont('$unify'(a(18), a(17), p(4)), p(5)).
        put_cont(functor(a(5), a(9), si(13), p(5)), p(6)).
        put_cont('$cut'(a(10), p(6)), p(7)).
        put_cont('$parse_tokens'(a(16), a(14), a(15), a(17), p(7)), p(8)).
        put_cont('$unify'(a(15), a(13), p(8)), p(9)).
        put_cont('$minus'(a(6), si(10), a(14), p(9)), p(10)).
        put_cont('$unify'(a(13), a(12), p(10)), p(11)).
        put_cont('$less_than'(a(4), a(6), p(11)), p(12)).
        put_cont('$unify'(a(12), a(11), p(12)), p(13)).
        put_cont('$less_or_equal'(a(6), a(2), p(13)), p(14)).
        put_cont('$unify'(a(11), a(7), p(14)), p(15)).
        execute(current_op(a(6), s(12), a(9), p(15))).
'$parse_tokens_op'/8+6 :
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, xfy, A), I=G), (F=<B, J=I), (D<F, K=J), (L is F, M=K), '$parse_tokens'(N, L, M, O), !, (functor(E, A, 2), P=O), (arg(1, E, C), Q=P), arg(2, E, N), H=Q)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15), a(16), a(17), a(18), a(19)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13), p(14), p(15)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-['$get_level'(I), current_op(F, xfy, A), '$unify'(J, G), '$less_or_equal'(F, B), '$unify'(K, J), '$less_than'(D, F), '$unify'(L, K), M is F, '$unify'(N, L), '$parse_tokens'(O, M, N, P), '$cut'(I), functor(E, A, 2), '$unify'(Q, P), arg(1, E, C), '$unify'(R, Q), arg(2, E, O), '$unify'(H, R)])).
        get_str(atom/1, s(2), a(1)).
        unify_var(a(9)).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        put_var(a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_var(a(15)).
        put_var(a(16)).
        put_var(a(17)).
        put_var(a(18)).
        put_var(a(19)).
        put_cont('$unify'(a(8), a(19), cont), p(1)).
        put_cont(arg(si(13), a(5), a(16), p(1)), p(2)).
        put_cont('$unify'(a(19), a(18), p(2)), p(3)).
        put_cont(arg(si(10), a(5), a(3), p(3)), p(4)).
        put_cont('$unify'(a(18), a(17), p(4)), p(5)).
        put_cont(functor(a(5), a(9), si(13), p(5)), p(6)).
        put_cont('$cut'(a(10), p(6)), p(7)).
        put_cont('$parse_tokens'(a(16), a(14), a(15), a(17), p(7)), p(8)).
        put_cont('$unify'(a(15), a(13), p(8)), p(9)).
        put_cont(is(a(14), a(6), p(9)), p(10)).
        put_cont('$unify'(a(13), a(12), p(10)), p(11)).
        put_cont('$less_than'(a(4), a(6), p(11)), p(12)).
        put_cont('$unify'(a(12), a(11), p(12)), p(13)).
        put_cont('$less_or_equal'(a(6), a(2), p(13)), p(14)).
        put_cont('$unify'(a(11), a(7), p(14)), p(15)).
        execute(current_op(a(6), s(14), a(9), p(15))).
'$parse_tokens_op'/8+7 :
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):- (current_op(F, yfx, A), I=G), (F=<B, J=I), (D=<F, K=J), (L is F-1, M=K), '$parse_tokens'(N, L, M, O), !, (functor(E, A, 2), P=O), (arg(1, E, C), Q=P), arg(2, E, N), H=Q)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15), a(16), a(17), a(18), a(19)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13), p(14), p(15)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$parse_tokens_op'(atom(A), B, C, D, E, F, G, H):-['$get_level'(I), current_op(F, yfx, A), '$unify'(J, G), '$less_or_equal'(F, B), '$unify'(K, J), '$less_or_equal'(D, F), '$unify'(L, K), '$minus'(F, 1, M), '$unify'(N, L), '$parse_tokens'(O, M, N, P), '$cut'(I), functor(E, A, 2), '$unify'(Q, P), arg(1, E, C), '$unify'(R, Q), arg(2, E, O), '$unify'(H, R)])).
        get_str(atom/1, s(2), a(1)).
        unify_var(a(9)).
        put_var(a(10)).
        inline('$get_level'(a(10))).
        put_var(a(11)).
        put_var(a(12)).
        put_var(a(13)).
        put_var(a(14)).
        put_var(a(15)).
        put_var(a(16)).
        put_var(a(17)).
        put_var(a(18)).
        put_var(a(19)).
        put_cont('$unify'(a(8), a(19), cont), p(1)).
        put_cont(arg(si(13), a(5), a(16), p(1)), p(2)).
        put_cont('$unify'(a(19), a(18), p(2)), p(3)).
        put_cont(arg(si(10), a(5), a(3), p(3)), p(4)).
        put_cont('$unify'(a(18), a(17), p(4)), p(5)).
        put_cont(functor(a(5), a(9), si(13), p(5)), p(6)).
        put_cont('$cut'(a(10), p(6)), p(7)).
        put_cont('$parse_tokens'(a(16), a(14), a(15), a(17), p(7)), p(8)).
        put_cont('$unify'(a(15), a(13), p(8)), p(9)).
        put_cont('$minus'(a(6), si(10), a(14), p(9)), p(10)).
        put_cont('$unify'(a(13), a(12), p(10)), p(11)).
        put_cont('$less_or_equal'(a(4), a(6), p(11)), p(12)).
        put_cont('$unify'(a(12), a(11), p(12)), p(13)).
        put_cont('$less_or_equal'(a(6), a(2), p(13)), p(14)).
        put_cont('$unify'(a(11), a(7), p(14)), p(15)).
        execute(current_op(a(6), s(15), a(9), p(15))).
end_predicate('$parse_tokens_op'/8).

begin_predicate('$parse_tokens_is_starter'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_is_starter'/1, 'builtins.pl']).
main('$parse_tokens_is_starter'/1, non- (public)) :
        put_con(end_of_file, s(1)).
        put_con('(', s(2)).
        put_con('[', s(3)).
        put_con('{', s(4)).
        put_con(number/1, s(5)).
        put_con(atom/1, s(6)).
        put_con(var/2, s(7)).
        put_con(string/1, s(8)).
        label(fail/0).
        label('$parse_tokens_is_starter'/1+var).
        label('$parse_tokens_is_starter'/1+var+1).
        label('$parse_tokens_is_starter'/1+var+2).
        label('$parse_tokens_is_starter'/1+var+3).
        label('$parse_tokens_is_starter'/1+var+4).
        label('$parse_tokens_is_starter'/1+var+5).
        label('$parse_tokens_is_starter'/1+var+6).
        label('$parse_tokens_is_starter'/1+var+7).
        label('$parse_tokens_is_starter'/1+con).
        label('$parse_tokens_is_starter'/1+str).
        label('$parse_tokens_is_starter'/1+1).
        label('$parse_tokens_is_starter'/1+2).
        label('$parse_tokens_is_starter'/1+3).
        label('$parse_tokens_is_starter'/1+4).
        label('$parse_tokens_is_starter'/1+5).
        label('$parse_tokens_is_starter'/1+6).
        label('$parse_tokens_is_starter'/1+7).
        label('$parse_tokens_is_starter'/1+8).
        new_hash(con, 4).
        new_hash(str, 4).
        static([put_hash(s(1), '$parse_tokens_is_starter'/1+1, con), put_hash(s(2), '$parse_tokens_is_starter'/1+2, con), put_hash(s(3), '$parse_tokens_is_starter'/1+3, con), put_hash(s(4), '$parse_tokens_is_starter'/1+4, con), put_hash(s(5), '$parse_tokens_is_starter'/1+5, str), put_hash(s(6), '$parse_tokens_is_starter'/1+6, str), put_hash(s(7), '$parse_tokens_is_starter'/1+7, str), put_hash(s(8), '$parse_tokens_is_starter'/1+8, str)]).
'$parse_tokens_is_starter'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_is_starter'/1+var, fail/0, fail/0, '$parse_tokens_is_starter'/1+con, '$parse_tokens_is_starter'/1+str, fail/0).
'$parse_tokens_is_starter'/1+var :
        try('$parse_tokens_is_starter'/1+1, '$parse_tokens_is_starter'/1+var+1).
'$parse_tokens_is_starter'/1+var+1 :
        retry('$parse_tokens_is_starter'/1+2, '$parse_tokens_is_starter'/1+var+2).
'$parse_tokens_is_starter'/1+var+2 :
        retry('$parse_tokens_is_starter'/1+3, '$parse_tokens_is_starter'/1+var+3).
'$parse_tokens_is_starter'/1+var+3 :
        retry('$parse_tokens_is_starter'/1+4, '$parse_tokens_is_starter'/1+var+4).
'$parse_tokens_is_starter'/1+var+4 :
        retry('$parse_tokens_is_starter'/1+5, '$parse_tokens_is_starter'/1+var+5).
'$parse_tokens_is_starter'/1+var+5 :
        retry('$parse_tokens_is_starter'/1+6, '$parse_tokens_is_starter'/1+var+6).
'$parse_tokens_is_starter'/1+var+6 :
        retry('$parse_tokens_is_starter'/1+7, '$parse_tokens_is_starter'/1+var+7).
'$parse_tokens_is_starter'/1+var+7 :
        trust('$parse_tokens_is_starter'/1+8).
'$parse_tokens_is_starter'/1+con :
        switch_on_hash(con, 4, fail/0, [end_of_file:'$parse_tokens_is_starter'/1+1, '(':'$parse_tokens_is_starter'/1+2, '[':'$parse_tokens_is_starter'/1+3, '{':'$parse_tokens_is_starter'/1+4]).
'$parse_tokens_is_starter'/1+str :
        switch_on_hash(str, 4, fail/0, [number/1:'$parse_tokens_is_starter'/1+5, atom/1:'$parse_tokens_is_starter'/1+6, var/2:'$parse_tokens_is_starter'/1+7, string/1:'$parse_tokens_is_starter'/1+8]).
'$parse_tokens_is_starter'/1+1 :
        comment(('$parse_tokens_is_starter'(end_of_file):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'(end_of_file):-[])).
        get_con(end_of_file, s(1), a(1)).
        execute(cont).
'$parse_tokens_is_starter'/1+2 :
        comment(('$parse_tokens_is_starter'('('):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'('('):-[])).
        get_con('(', s(2), a(1)).
        execute(cont).
'$parse_tokens_is_starter'/1+3 :
        comment(('$parse_tokens_is_starter'('['):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'('['):-[])).
        get_con('[', s(3), a(1)).
        execute(cont).
'$parse_tokens_is_starter'/1+4 :
        comment(('$parse_tokens_is_starter'('{'):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'('{'):-[])).
        get_con('{', s(4), a(1)).
        execute(cont).
'$parse_tokens_is_starter'/1+5 :
        comment(('$parse_tokens_is_starter'(number(A)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'(number(A)):-[])).
        get_str(number/1, s(5), a(1)).
        unify_void(1).
        execute(cont).
'$parse_tokens_is_starter'/1+6 :
        comment(('$parse_tokens_is_starter'(atom(A)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'(atom(A)):-[])).
        get_str(atom/1, s(6), a(1)).
        unify_void(1).
        execute(cont).
'$parse_tokens_is_starter'/1+7 :
        comment(('$parse_tokens_is_starter'(var(A, B)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'(var(A, B)):-[])).
        get_str(var/2, s(7), a(1)).
        unify_void(1).
        unify_void(1).
        execute(cont).
'$parse_tokens_is_starter'/1+8 :
        comment(('$parse_tokens_is_starter'(string(A)):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_starter'(string(A)):-[])).
        get_str(string/1, s(8), a(1)).
        unify_void(1).
        execute(cont).
end_predicate('$parse_tokens_is_starter'/1).

begin_predicate('$parse_tokens_is_terminator'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_is_terminator'/1, 'builtins.pl']).
main('$parse_tokens_is_terminator'/1, non- (public)) :
        put_con(')', s(1)).
        put_con(']', s(2)).
        put_con('}', s(3)).
        put_con('.', s(4)).
        label(fail/0).
        label('$parse_tokens_is_terminator'/1+var).
        label('$parse_tokens_is_terminator'/1+var+1).
        label('$parse_tokens_is_terminator'/1+var+2).
        label('$parse_tokens_is_terminator'/1+var+3).
        label('$parse_tokens_is_terminator'/1+con).
        label('$parse_tokens_is_terminator'/1+1).
        label('$parse_tokens_is_terminator'/1+2).
        label('$parse_tokens_is_terminator'/1+3).
        label('$parse_tokens_is_terminator'/1+4).
        new_hash(con, 4).
        static([put_hash(s(1), '$parse_tokens_is_terminator'/1+1, con), put_hash(s(2), '$parse_tokens_is_terminator'/1+2, con), put_hash(s(3), '$parse_tokens_is_terminator'/1+3, con), put_hash(s(4), '$parse_tokens_is_terminator'/1+4, con)]).
'$parse_tokens_is_terminator'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_is_terminator'/1+var, fail/0, fail/0, '$parse_tokens_is_terminator'/1+con, fail/0, fail/0).
'$parse_tokens_is_terminator'/1+var :
        try('$parse_tokens_is_terminator'/1+1, '$parse_tokens_is_terminator'/1+var+1).
'$parse_tokens_is_terminator'/1+var+1 :
        retry('$parse_tokens_is_terminator'/1+2, '$parse_tokens_is_terminator'/1+var+2).
'$parse_tokens_is_terminator'/1+var+2 :
        retry('$parse_tokens_is_terminator'/1+3, '$parse_tokens_is_terminator'/1+var+3).
'$parse_tokens_is_terminator'/1+var+3 :
        trust('$parse_tokens_is_terminator'/1+4).
'$parse_tokens_is_terminator'/1+con :
        switch_on_hash(con, 4, fail/0, [')':'$parse_tokens_is_terminator'/1+1, ']':'$parse_tokens_is_terminator'/1+2, '}':'$parse_tokens_is_terminator'/1+3, '.':'$parse_tokens_is_terminator'/1+4]).
'$parse_tokens_is_terminator'/1+1 :
        comment(('$parse_tokens_is_terminator'(')'):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_terminator'(')'):-[])).
        get_con(')', s(1), a(1)).
        execute(cont).
'$parse_tokens_is_terminator'/1+2 :
        comment(('$parse_tokens_is_terminator'(']'):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_terminator'(']'):-[])).
        get_con(']', s(2), a(1)).
        execute(cont).
'$parse_tokens_is_terminator'/1+3 :
        comment(('$parse_tokens_is_terminator'('}'):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_terminator'('}'):-[])).
        get_con('}', s(3), a(1)).
        execute(cont).
'$parse_tokens_is_terminator'/1+4 :
        comment(('$parse_tokens_is_terminator'('.'):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_terminator'('.'):-[])).
        get_con('.', s(4), a(1)).
        execute(cont).
end_predicate('$parse_tokens_is_terminator'/1).

begin_predicate('$parse_tokens_is_post_in_op'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_is_post_in_op'/1, 'builtins.pl']).
main('$parse_tokens_is_post_in_op'/1, non- (public)) :
        put_con((','), s(1)).
        put_con(('|'), s(2)).
        put_con(atom/1, s(3)).
        label(fail/0).
        label('$parse_tokens_is_post_in_op'/1+var).
        label('$parse_tokens_is_post_in_op'/1+var+1).
        label('$parse_tokens_is_post_in_op'/1+var+2).
        label('$parse_tokens_is_post_in_op'/1+con).
        label('$parse_tokens_is_post_in_op'/1+1).
        label('$parse_tokens_is_post_in_op'/1+2).
        label('$parse_tokens_is_post_in_op'/1+3).
        new_hash(con, 2).
        static([put_hash(s(1), '$parse_tokens_is_post_in_op'/1+1, con), put_hash(s(2), '$parse_tokens_is_post_in_op'/1+2, con)]).
'$parse_tokens_is_post_in_op'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_is_post_in_op'/1+var, fail/0, fail/0, '$parse_tokens_is_post_in_op'/1+con, '$parse_tokens_is_post_in_op'/1+3, fail/0).
'$parse_tokens_is_post_in_op'/1+var :
        try('$parse_tokens_is_post_in_op'/1+1, '$parse_tokens_is_post_in_op'/1+var+1).
'$parse_tokens_is_post_in_op'/1+var+1 :
        retry('$parse_tokens_is_post_in_op'/1+2, '$parse_tokens_is_post_in_op'/1+var+2).
'$parse_tokens_is_post_in_op'/1+var+2 :
        trust('$parse_tokens_is_post_in_op'/1+3).
'$parse_tokens_is_post_in_op'/1+con :
        switch_on_hash(con, 2, fail/0, [ (','):'$parse_tokens_is_post_in_op'/1+1, ('|'):'$parse_tokens_is_post_in_op'/1+2]).
'$parse_tokens_is_post_in_op'/1+1 :
        comment(('$parse_tokens_is_post_in_op'((',')):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_post_in_op'((',')):-['$neck_cut'])).
        get_con((','), s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_is_post_in_op'/1+2 :
        comment(('$parse_tokens_is_post_in_op'(('|')):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_post_in_op'(('|')):-['$neck_cut'])).
        get_con(('|'), s(2), a(1)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_is_post_in_op'/1+3 :
        comment(('$parse_tokens_is_post_in_op'(atom(A)):-current_op(B, C, A), '$parse_tokens_post_in_type'(C), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_is_post_in_op'(atom(A)):-['$get_level'(B), current_op(C, D, A), '$parse_tokens_post_in_type'(D), '$cut'(B)])).
        get_str(atom/1, s(3), a(1)).
        unify_var(a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_var(a(4)).
        put_cont('$cut'(a(3), cont), p(1)).
        put_cont('$parse_tokens_post_in_type'(a(4), p(1)), p(2)).
        execute(current_op(void, a(4), a(2), p(2))).
end_predicate('$parse_tokens_is_post_in_op'/1).

begin_predicate('$parse_tokens_post_in_type'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_post_in_type'/1, 'builtins.pl']).
main('$parse_tokens_post_in_type'/1, non- (public)) :
        put_con(xfx, s(1)).
        put_con(xfy, s(2)).
        put_con(yfx, s(3)).
        put_con(xf, s(4)).
        put_con(yf, s(5)).
        label(fail/0).
        label('$parse_tokens_post_in_type'/1+var).
        label('$parse_tokens_post_in_type'/1+var+1).
        label('$parse_tokens_post_in_type'/1+var+2).
        label('$parse_tokens_post_in_type'/1+var+3).
        label('$parse_tokens_post_in_type'/1+var+4).
        label('$parse_tokens_post_in_type'/1+con).
        label('$parse_tokens_post_in_type'/1+1).
        label('$parse_tokens_post_in_type'/1+2).
        label('$parse_tokens_post_in_type'/1+3).
        label('$parse_tokens_post_in_type'/1+4).
        label('$parse_tokens_post_in_type'/1+5).
        new_hash(con, 5).
        static([put_hash(s(1), '$parse_tokens_post_in_type'/1+1, con), put_hash(s(2), '$parse_tokens_post_in_type'/1+2, con), put_hash(s(3), '$parse_tokens_post_in_type'/1+3, con), put_hash(s(4), '$parse_tokens_post_in_type'/1+4, con), put_hash(s(5), '$parse_tokens_post_in_type'/1+5, con)]).
'$parse_tokens_post_in_type'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_post_in_type'/1+var, fail/0, fail/0, '$parse_tokens_post_in_type'/1+con, fail/0, fail/0).
'$parse_tokens_post_in_type'/1+var :
        try('$parse_tokens_post_in_type'/1+1, '$parse_tokens_post_in_type'/1+var+1).
'$parse_tokens_post_in_type'/1+var+1 :
        retry('$parse_tokens_post_in_type'/1+2, '$parse_tokens_post_in_type'/1+var+2).
'$parse_tokens_post_in_type'/1+var+2 :
        retry('$parse_tokens_post_in_type'/1+3, '$parse_tokens_post_in_type'/1+var+3).
'$parse_tokens_post_in_type'/1+var+3 :
        retry('$parse_tokens_post_in_type'/1+4, '$parse_tokens_post_in_type'/1+var+4).
'$parse_tokens_post_in_type'/1+var+4 :
        trust('$parse_tokens_post_in_type'/1+5).
'$parse_tokens_post_in_type'/1+con :
        switch_on_hash(con, 5, fail/0, [xfx:'$parse_tokens_post_in_type'/1+1, xfy:'$parse_tokens_post_in_type'/1+2, yfx:'$parse_tokens_post_in_type'/1+3, xf:'$parse_tokens_post_in_type'/1+4, yf:'$parse_tokens_post_in_type'/1+5]).
'$parse_tokens_post_in_type'/1+1 :
        comment(('$parse_tokens_post_in_type'(xfx):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_post_in_type'(xfx):-[])).
        get_con(xfx, s(1), a(1)).
        execute(cont).
'$parse_tokens_post_in_type'/1+2 :
        comment(('$parse_tokens_post_in_type'(xfy):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_post_in_type'(xfy):-[])).
        get_con(xfy, s(2), a(1)).
        execute(cont).
'$parse_tokens_post_in_type'/1+3 :
        comment(('$parse_tokens_post_in_type'(yfx):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_post_in_type'(yfx):-[])).
        get_con(yfx, s(3), a(1)).
        execute(cont).
'$parse_tokens_post_in_type'/1+4 :
        comment(('$parse_tokens_post_in_type'(xf):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_post_in_type'(xf):-[])).
        get_con(xf, s(4), a(1)).
        execute(cont).
'$parse_tokens_post_in_type'/1+5 :
        comment(('$parse_tokens_post_in_type'(yf):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_post_in_type'(yf):-[])).
        get_con(yf, s(5), a(1)).
        execute(cont).
end_predicate('$parse_tokens_post_in_type'/1).

begin_predicate('$parse_tokens_expect'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_expect'/3, 'builtins.pl']).
main('$parse_tokens_expect'/3, non- (public)) :
        put_con(expected, s(1)).
        put_con([], s(2)).
        put_list(s(1), s(2), s(3)).
        label('$parse_tokens_expect'/3+sub+1).
        label('$parse_tokens_expect'/3+1).
        label('$parse_tokens_expect'/3+2).
'$parse_tokens_expect'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$parse_tokens_expect'/3+1, '$parse_tokens_expect'/3+sub+1).
'$parse_tokens_expect'/3+sub+1 :
        trust('$parse_tokens_expect'/3+2).
'$parse_tokens_expect'/3+1 :
        comment(('$parse_tokens_expect'(A, B, C):-'$parse_tokens_skip_spaces'(B, D), D=[A|C], !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_expect'(A, B, C):-['$get_level'(D), '$parse_tokens_skip_spaces'(B, E), '$unify'(E, [A|C]), '$cut'(D)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_list(a(1), a(3), a(6)).
        put_cont('$cut'(a(4), cont), p(1)).
        put_cont('$unify'(a(5), a(6), p(1)), p(2)).
        execute('$parse_tokens_skip_spaces'(a(2), a(5), p(2))).
'$parse_tokens_expect'/3+2 :
        comment(('$parse_tokens_expect'(A, B, C):-'$parse_tokens_error'([A, expected], B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$parse_tokens_expect'(A, B, C):-['$parse_tokens_error'([A, expected], B, C)])).
        put_list(a(1), s(3), a(4)).
        execute('$parse_tokens_error'(a(4), a(2), a(3), cont)).
end_predicate('$parse_tokens_expect'/3).

begin_predicate('$parse_tokens_skip_spaces'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_skip_spaces'/2, 'builtins.pl']).
main('$parse_tokens_skip_spaces'/2, non- (public)) :
        put_con(' ', s(1)).
        label('$parse_tokens_skip_spaces'/2+top).
        label('$parse_tokens_skip_spaces'/2+var).
        label('$parse_tokens_skip_spaces'/2+var+1).
        label('$parse_tokens_skip_spaces'/2+1).
        label('$parse_tokens_skip_spaces'/2+2).
'$parse_tokens_skip_spaces'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$parse_tokens_skip_spaces'/2+top).
'$parse_tokens_skip_spaces'/2+top :
        setB0.
        switch_on_term('$parse_tokens_skip_spaces'/2+var, '$parse_tokens_skip_spaces'/2+2, '$parse_tokens_skip_spaces'/2+2, '$parse_tokens_skip_spaces'/2+2, '$parse_tokens_skip_spaces'/2+2, '$parse_tokens_skip_spaces'/2+var).
'$parse_tokens_skip_spaces'/2+var :
        try('$parse_tokens_skip_spaces'/2+1, '$parse_tokens_skip_spaces'/2+var+1).
'$parse_tokens_skip_spaces'/2+var+1 :
        trust('$parse_tokens_skip_spaces'/2+2).
'$parse_tokens_skip_spaces'/2+1 :
        comment(('$parse_tokens_skip_spaces'([' '|A], B):-!, '$parse_tokens_skip_spaces'(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$parse_tokens_skip_spaces'([' '|A], B):-['$neck_cut', '$parse_tokens_skip_spaces'(A, B)])).
        get_list(a(1)).
        unify_con(' ', s(1)).
        unify_var(a(3)).
        inline('$neck_cut').
        set(a(3), ea(1)).
        set(a(2), ea(2)).
        set(cont, econt).
        goto('$parse_tokens_skip_spaces'/2+top).
'$parse_tokens_skip_spaces'/2+2 :
        comment(('$parse_tokens_skip_spaces'(A, A):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$parse_tokens_skip_spaces'(A, A):-[])).
        get_val(a(1), a(2)).
        execute(cont).
end_predicate('$parse_tokens_skip_spaces'/2).

begin_predicate('$parse_tokens_peep_next'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_peep_next'/3, 'builtins.pl']).
main('$parse_tokens_peep_next'/3, non- (public)) :
'$parse_tokens_peep_next'/3 :
        comment(('$parse_tokens_peep_next'(A, B, B):-B=[A|C])).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$parse_tokens_peep_next'(A, B, B):-['$unify'(B, [A|C])])).
        get_val(a(2), a(3)).
        put_list(a(1), void, a(4)).
        inline('$unify'(a(2), a(4))).
        execute(cont).
end_predicate('$parse_tokens_peep_next'/3).

begin_predicate('$parse_tokens_error'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_error'/3, 'builtins.pl']).
main('$parse_tokens_error'/3, non- (public)) :
        put_con('{SYNTAX ERROR}', s(1)).
        put_con('** ', s(2)).
        put_con(' **', s(3)).
        put_con([], s(4)).
        put_con((:)/2, s(5)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(6)).
        put_con('$tokens'/1, s(7)).
'$parse_tokens_error'/3 :
        comment(('$parse_tokens_error'(A, B, C):-write('{SYNTAX ERROR}'), nl, write('** '), '$parse_tokens_write_message'(A), write(' **'), nl, '$parse_tokens_error1'([], B), clause('$tokens'(D), E), '$parse_tokens_error1'(D, B), fail)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$parse_tokens_error'(A, B, C):-[write('{SYNTAX ERROR}'), nl, write('** '), '$parse_tokens_write_message'(A), write(' **'), nl, '$parse_tokens_error1'([], B), clause('jp.ac.kobe_u.cs.prolog.builtin':'$tokens'(D), E), '$parse_tokens_error1'(D, B), fail])).
        put_var(a(4)).
        put_str_args([a(4)], y(1)).
        put_str(s(7), y(1), a(5)).
        put_str_args([s(6), a(5)], y(2)).
        put_str(s(5), y(2), a(6)).
        put_cont(fail(cont), p(1)).
        put_cont('$parse_tokens_error1'(a(4), a(2), p(1)), p(2)).
        put_cont(clause(a(6), void, p(2)), p(3)).
        put_cont('$parse_tokens_error1'(s(4), a(2), p(3)), p(4)).
        put_cont(nl(p(4)), p(5)).
        put_cont(write(s(3), p(5)), p(6)).
        put_cont('$parse_tokens_write_message'(a(1), p(6)), p(7)).
        put_cont(write(s(2), p(7)), p(8)).
        put_cont(nl(p(8)), p(9)).
        execute(write(s(1), p(9))).
end_predicate('$parse_tokens_error'/3).

begin_predicate('$parse_tokens_error1'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_error1'/2, 'builtins.pl']).
main('$parse_tokens_error1'/2, non- (public)) :
        put_con([], s(1)).
        put_con('** here **', s(2)).
        label('$parse_tokens_error1'/2+var).
        label('$parse_tokens_error1'/2+var+1).
        label('$parse_tokens_error1'/2+var+2).
        label('$parse_tokens_error1'/2+con).
        label('$parse_tokens_error1'/2+con+1).
        label('$parse_tokens_error1'/2+lis).
        label('$parse_tokens_error1'/2+lis+1).
        label('$parse_tokens_error1'/2+1).
        label('$parse_tokens_error1'/2+2).
        label('$parse_tokens_error1'/2+3).
'$parse_tokens_error1'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_error1'/2+var, '$parse_tokens_error1'/2+2, '$parse_tokens_error1'/2+2, '$parse_tokens_error1'/2+con, '$parse_tokens_error1'/2+2, '$parse_tokens_error1'/2+lis).
'$parse_tokens_error1'/2+var :
        try('$parse_tokens_error1'/2+1, '$parse_tokens_error1'/2+var+1).
'$parse_tokens_error1'/2+var+1 :
        retry('$parse_tokens_error1'/2+2, '$parse_tokens_error1'/2+var+2).
'$parse_tokens_error1'/2+var+2 :
        trust('$parse_tokens_error1'/2+3).
'$parse_tokens_error1'/2+con :
        try('$parse_tokens_error1'/2+1, '$parse_tokens_error1'/2+con+1).
'$parse_tokens_error1'/2+con+1 :
        trust('$parse_tokens_error1'/2+2).
'$parse_tokens_error1'/2+lis :
        try('$parse_tokens_error1'/2+2, '$parse_tokens_error1'/2+lis+1).
'$parse_tokens_error1'/2+lis+1 :
        trust('$parse_tokens_error1'/2+3).
'$parse_tokens_error1'/2+1 :
        comment(('$parse_tokens_error1'([], A):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$parse_tokens_error1'([], A):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$parse_tokens_error1'/2+2 :
        comment(('$parse_tokens_error1'(A, B):-A==B, !, nl, write('** here **'), nl, '$parse_tokens_error1'(A, []), nl)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$parse_tokens_error1'(A, B):-['$get_level'(C), '$equality_of_term'(A, B), '$cut'(C), nl, write('** here **'), nl, '$parse_tokens_error1'(A, []), nl])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline('$equality_of_term'(a(1), a(2))).
        inline('$cut'(a(3))).
        put_cont(nl(cont), p(1)).
        put_cont('$parse_tokens_error1'(a(1), s(1), p(1)), p(2)).
        put_cont(nl(p(2)), p(3)).
        put_cont(write(s(2), p(3)), p(4)).
        execute(nl(p(4))).
'$parse_tokens_error1'/2+3 :
        comment(('$parse_tokens_error1'([A|B], C):-'$parse_tokens_error2'(A), '$parse_tokens_error1'(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$parse_tokens_error1'([A|B], C):-['$parse_tokens_error2'(A), '$parse_tokens_error1'(B, C)])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        put_cont('$parse_tokens_error1'(a(4), a(2), cont), p(1)).
        execute('$parse_tokens_error2'(a(3), p(1))).
end_predicate('$parse_tokens_error1'/2).

begin_predicate('$parse_tokens_error2'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_error2'/1, 'builtins.pl']).
main('$parse_tokens_error2'/1, non- (public)) :
        put_con(number/1, s(1)).
        put_con(atom/1, s(2)).
        put_con(var/2, s(3)).
        put_con(string/1, s(4)).
        put_con('"', s(5)).
        label('$parse_tokens_error2'/1+var).
        label('$parse_tokens_error2'/1+var+1).
        label('$parse_tokens_error2'/1+var+2).
        label('$parse_tokens_error2'/1+var+3).
        label('$parse_tokens_error2'/1+var+4).
        label('$parse_tokens_error2'/1+str).
        label('$parse_tokens_error2'/1+str+0).
        label('$parse_tokens_error2'/1+str+0+1).
        label('$parse_tokens_error2'/1+str+1).
        label('$parse_tokens_error2'/1+str+1+1).
        label('$parse_tokens_error2'/1+str+2).
        label('$parse_tokens_error2'/1+str+2+1).
        label('$parse_tokens_error2'/1+str+3).
        label('$parse_tokens_error2'/1+str+3+1).
        label('$parse_tokens_error2'/1+1).
        label('$parse_tokens_error2'/1+2).
        label('$parse_tokens_error2'/1+3).
        label('$parse_tokens_error2'/1+4).
        label('$parse_tokens_error2'/1+5).
        new_hash(str, 4).
        static([put_hash(s(1), '$parse_tokens_error2'/1+str+0, str), put_hash(s(2), '$parse_tokens_error2'/1+str+1, str), put_hash(s(3), '$parse_tokens_error2'/1+str+2, str), put_hash(s(4), '$parse_tokens_error2'/1+str+3, str)]).
'$parse_tokens_error2'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_error2'/1+var, '$parse_tokens_error2'/1+5, '$parse_tokens_error2'/1+5, '$parse_tokens_error2'/1+5, '$parse_tokens_error2'/1+str, '$parse_tokens_error2'/1+5).
'$parse_tokens_error2'/1+var :
        try('$parse_tokens_error2'/1+1, '$parse_tokens_error2'/1+var+1).
'$parse_tokens_error2'/1+var+1 :
        retry('$parse_tokens_error2'/1+2, '$parse_tokens_error2'/1+var+2).
'$parse_tokens_error2'/1+var+2 :
        retry('$parse_tokens_error2'/1+3, '$parse_tokens_error2'/1+var+3).
'$parse_tokens_error2'/1+var+3 :
        retry('$parse_tokens_error2'/1+4, '$parse_tokens_error2'/1+var+4).
'$parse_tokens_error2'/1+var+4 :
        trust('$parse_tokens_error2'/1+5).
'$parse_tokens_error2'/1+str :
        switch_on_hash(str, 4, '$parse_tokens_error2'/1+5, [number/1:'$parse_tokens_error2'/1+str+0, atom/1:'$parse_tokens_error2'/1+str+1, var/2:'$parse_tokens_error2'/1+str+2, string/1:'$parse_tokens_error2'/1+str+3]).
'$parse_tokens_error2'/1+str+0 :
        try('$parse_tokens_error2'/1+1, '$parse_tokens_error2'/1+str+0+1).
'$parse_tokens_error2'/1+str+0+1 :
        trust('$parse_tokens_error2'/1+5).
'$parse_tokens_error2'/1+str+1 :
        try('$parse_tokens_error2'/1+2, '$parse_tokens_error2'/1+str+1+1).
'$parse_tokens_error2'/1+str+1+1 :
        trust('$parse_tokens_error2'/1+5).
'$parse_tokens_error2'/1+str+2 :
        try('$parse_tokens_error2'/1+3, '$parse_tokens_error2'/1+str+2+1).
'$parse_tokens_error2'/1+str+2+1 :
        trust('$parse_tokens_error2'/1+5).
'$parse_tokens_error2'/1+str+3 :
        try('$parse_tokens_error2'/1+4, '$parse_tokens_error2'/1+str+3+1).
'$parse_tokens_error2'/1+str+3+1 :
        trust('$parse_tokens_error2'/1+5).
'$parse_tokens_error2'/1+1 :
        comment(('$parse_tokens_error2'(number(A)):-!, write(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_error2'(number(A)):-['$neck_cut', write(A)])).
        get_str(number/1, s(1), a(1)).
        unify_var(a(2)).
        inline('$neck_cut').
        execute(write(a(2), cont)).
'$parse_tokens_error2'/1+2 :
        comment(('$parse_tokens_error2'(atom(A)):-!, writeq(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_error2'(atom(A)):-['$neck_cut', writeq(A)])).
        get_str(atom/1, s(2), a(1)).
        unify_var(a(2)).
        inline('$neck_cut').
        execute(writeq(a(2), cont)).
'$parse_tokens_error2'/1+3 :
        comment(('$parse_tokens_error2'(var(A, B)):-!, write(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_error2'(var(A, B)):-['$neck_cut', write(A)])).
        get_str(var/2, s(3), a(1)).
        unify_var(a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(write(a(2), cont)).
'$parse_tokens_error2'/1+4 :
        comment(('$parse_tokens_error2'(string(A)):-!, write('"'), '$parse_tokens_write_string'(A), write('"'))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_error2'(string(A)):-['$neck_cut', write('"'), '$parse_tokens_write_string'(A), write('"')])).
        get_str(string/1, s(4), a(1)).
        unify_var(a(2)).
        inline('$neck_cut').
        put_cont(write(s(5), cont), p(1)).
        put_cont('$parse_tokens_write_string'(a(2), p(1)), p(2)).
        execute(write(s(5), p(2))).
'$parse_tokens_error2'/1+5 :
        comment(('$parse_tokens_error2'(A):-write(A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_error2'(A):-[write(A)])).
        execute(write(a(1), cont)).
end_predicate('$parse_tokens_error2'/1).

begin_predicate('$parse_tokens_write_string'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_write_string'/1, 'builtins.pl']).
main('$parse_tokens_write_string'/1, non- (public)) :
        put_con([], s(1)).
        put_int(34, si(2)).
        put_list(si(2), s(1), s(3)).
        label(fail/0).
        label('$parse_tokens_write_string'/1+var).
        label('$parse_tokens_write_string'/1+var+1).
        label('$parse_tokens_write_string'/1+var+2).
        label('$parse_tokens_write_string'/1+lis).
        label('$parse_tokens_write_string'/1+lis+1).
        label('$parse_tokens_write_string'/1+1).
        label('$parse_tokens_write_string'/1+2).
        label('$parse_tokens_write_string'/1+3).
'$parse_tokens_write_string'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_write_string'/1+var, fail/0, fail/0, '$parse_tokens_write_string'/1+1, fail/0, '$parse_tokens_write_string'/1+lis).
'$parse_tokens_write_string'/1+var :
        try('$parse_tokens_write_string'/1+1, '$parse_tokens_write_string'/1+var+1).
'$parse_tokens_write_string'/1+var+1 :
        retry('$parse_tokens_write_string'/1+2, '$parse_tokens_write_string'/1+var+2).
'$parse_tokens_write_string'/1+var+2 :
        trust('$parse_tokens_write_string'/1+3).
'$parse_tokens_write_string'/1+lis :
        try('$parse_tokens_write_string'/1+2, '$parse_tokens_write_string'/1+lis+1).
'$parse_tokens_write_string'/1+lis+1 :
        trust('$parse_tokens_write_string'/1+3).
'$parse_tokens_write_string'/1+1 :
        comment(('$parse_tokens_write_string'([]):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_write_string'([]):-[])).
        get_con([], s(1), a(1)).
        execute(cont).
'$parse_tokens_write_string'/1+2 :
        comment(('$parse_tokens_write_string'([A|B]):-[A]=[34], !, put_code(A), put_code(A), '$parse_tokens_write_string'(B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_write_string'([A|B]):-['$get_level'(C), '$unify'([A], [34]), '$cut'(C), put_code(A), put_code(A), '$parse_tokens_write_string'(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_list(a(2), s(1), a(5)).
        inline('$unify'(a(5), s(3))).
        inline('$cut'(a(4))).
        put_cont('$parse_tokens_write_string'(a(3), cont), p(1)).
        put_cont(put_code(a(2), p(1)), p(2)).
        execute(put_code(a(2), p(2))).
'$parse_tokens_write_string'/1+3 :
        comment(('$parse_tokens_write_string'([A|B]):-put_code(A), '$parse_tokens_write_string'(B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_write_string'([A|B]):-[put_code(A), '$parse_tokens_write_string'(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_cont('$parse_tokens_write_string'(a(3), cont), p(1)).
        execute(put_code(a(2), p(1))).
end_predicate('$parse_tokens_write_string'/1).

begin_predicate('$parse_tokens_write_message'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$parse_tokens_write_message'/1, 'builtins.pl']).
main('$parse_tokens_write_message'/1, non- (public)) :
        put_con([], s(1)).
        put_con(' ', s(2)).
        label(fail/0).
        label('$parse_tokens_write_message'/1+var).
        label('$parse_tokens_write_message'/1+var+1).
        label('$parse_tokens_write_message'/1+1).
        label('$parse_tokens_write_message'/1+2).
'$parse_tokens_write_message'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$parse_tokens_write_message'/1+var, fail/0, fail/0, '$parse_tokens_write_message'/1+1, fail/0, '$parse_tokens_write_message'/1+2).
'$parse_tokens_write_message'/1+var :
        try('$parse_tokens_write_message'/1+1, '$parse_tokens_write_message'/1+var+1).
'$parse_tokens_write_message'/1+var+1 :
        trust('$parse_tokens_write_message'/1+2).
'$parse_tokens_write_message'/1+1 :
        comment(('$parse_tokens_write_message'([]):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_write_message'([]):-[])).
        get_con([], s(1), a(1)).
        execute(cont).
'$parse_tokens_write_message'/1+2 :
        comment(('$parse_tokens_write_message'([A|B]):-write(A), write(' '), '$parse_tokens_write_message'(B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$parse_tokens_write_message'([A|B]):-[write(A), write(' '), '$parse_tokens_write_message'(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_cont('$parse_tokens_write_message'(a(3), cont), p(1)).
        put_cont(write(s(2), p(1)), p(2)).
        execute(write(a(2), p(2))).
end_predicate('$parse_tokens_write_message'/1).

begin_predicate(write/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([write/1, 'builtins.pl']).
main(write/1, (public)) :
        put_con(numbervars/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con([], s(5)).
        put_list(s(4), s(5), s(6)).
write/1 :
        comment((write(A):-current_output(B), write_term(B, A, [numbervars(true)]))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((write(A):-[current_output(B), write_term(B, A, [numbervars(true)])])).
        put_var(a(2)).
        put_cont(write_term(a(2), a(1), s(6), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(write/1).

begin_predicate(write/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([write/2, 'builtins.pl']).
main(write/2, (public)) :
        put_con(numbervars/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con([], s(5)).
        put_list(s(4), s(5), s(6)).
write/2 :
        comment((write(A, B):-write_term(A, B, [numbervars(true)]))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((write(A, B):-[write_term(A, B, [numbervars(true)])])).
        execute(write_term(a(1), a(2), s(6), cont)).
end_predicate(write/2).

begin_predicate(writeq/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([writeq/1, 'builtins.pl']).
main(writeq/1, (public)) :
        put_con(quoted/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(numbervars/1, s(5)).
        put_str(s(5), s(3), s(6)).
        put_con([], s(7)).
        put_list(s(6), s(7), s(8)).
        put_list(s(4), s(8), s(9)).
writeq/1 :
        comment((writeq(A):-current_output(B), write_term(B, A, [quoted(true), numbervars(true)]))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((writeq(A):-[current_output(B), write_term(B, A, [quoted(true), numbervars(true)])])).
        put_var(a(2)).
        put_cont(write_term(a(2), a(1), s(9), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(writeq/1).

begin_predicate(writeq/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([writeq/2, 'builtins.pl']).
main(writeq/2, (public)) :
        put_con(quoted/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(numbervars/1, s(5)).
        put_str(s(5), s(3), s(6)).
        put_con([], s(7)).
        put_list(s(6), s(7), s(8)).
        put_list(s(4), s(8), s(9)).
writeq/2 :
        comment((writeq(A, B):-write_term(A, B, [quoted(true), numbervars(true)]))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((writeq(A, B):-[write_term(A, B, [quoted(true), numbervars(true)])])).
        execute(write_term(a(1), a(2), s(9), cont)).
end_predicate(writeq/2).

begin_predicate(write_canonical/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([write_canonical/1, 'builtins.pl']).
main(write_canonical/1, (public)) :
        put_con(quoted/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(ignore_ops/1, s(5)).
        put_str(s(5), s(3), s(6)).
        put_con([], s(7)).
        put_list(s(6), s(7), s(8)).
        put_list(s(4), s(8), s(9)).
write_canonical/1 :
        comment((write_canonical(A):-current_output(B), write_term(B, A, [quoted(true), ignore_ops(true)]))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((write_canonical(A):-[current_output(B), write_term(B, A, [quoted(true), ignore_ops(true)])])).
        put_var(a(2)).
        put_cont(write_term(a(2), a(1), s(9), cont), p(1)).
        execute(current_output(a(2), p(1))).
end_predicate(write_canonical/1).

begin_predicate(write_canonical/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([write_canonical/2, 'builtins.pl']).
main(write_canonical/2, (public)) :
        put_con(quoted/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(ignore_ops/1, s(5)).
        put_str(s(5), s(3), s(6)).
        put_con([], s(7)).
        put_list(s(6), s(7), s(8)).
        put_list(s(4), s(8), s(9)).
write_canonical/2 :
        comment((write_canonical(A, B):-write_term(A, B, [quoted(true), ignore_ops(true)]))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((write_canonical(A, B):-[write_term(A, B, [quoted(true), ignore_ops(true)])])).
        execute(write_term(a(1), a(2), s(9), cont)).
end_predicate(write_canonical/2).

begin_predicate(write_term/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([write_term/2, 'builtins.pl']).
main(write_term/2, (public)) :
write_term/2 :
        comment((write_term(A, B):-current_output(C), write_term(C, A, B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((write_term(A, B):-[current_output(C), write_term(C, A, B)])).
        put_var(a(3)).
        put_cont(write_term(a(3), a(1), a(2), cont), p(1)).
        execute(current_output(a(3), p(1))).
end_predicate(write_term/2).

begin_predicate(write_term/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([write_term/3, 'builtins.pl']).
main(write_term/3, (public)) :
        label(write_term/3+sub+1).
        label(write_term/3+1).
        label(write_term/3+2).
write_term/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try(write_term/3+1, write_term/3+sub+1).
write_term/3+sub+1 :
        trust(write_term/3+2).
write_term/3+1 :
        comment((write_term(A, B, C):-'$write_term'(A, B, C), fail)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((write_term(A, B, C):-['$write_term'(A, B, C), fail])).
        put_cont(fail(cont), p(1)).
        execute('$write_term'(a(1), a(2), a(3), p(1))).
write_term/3+2 :
        comment((write_term(A, B, C):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((write_term(A, B, C):-[])).
        execute(cont).
end_predicate(write_term/3).

begin_predicate('$write_term'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_term'/3, 'builtins.pl']).
main('$write_term'/3, non- (public)) :
        put_int(1200, si(1)).
        put_con(punct, s(2)).
'$write_term'/3 :
        comment(('$write_term'(A, B, C):-'$write_term0'(B, 1200, punct, D, C, A), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('$write_term'(A, B, C):-['$get_level'(D), '$write_term0'(B, 1200, punct, E, C, A), '$cut'(D)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$cut'(a(4), cont), p(1)).
        execute('$write_term0'(a(2), si(1), s(2), void, a(3), a(1), p(1))).
end_predicate('$write_term'/3).

begin_predicate('$write_term0'/6).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_term0'/6, 'builtins.pl']).
main('$write_term0'/6, non- (public)) :
        put_con(alpha, s(1)).
        put_con('$VAR'/1, s(2)).
        put_int(0, si(3)).
        put_con(numbervars/1, s(4)).
        put_con(true, s(5)).
        put_str_args([s(5)], s(6)).
        put_str(s(4), s(6), s(7)).
        put_con(symbol, s(8)).
        put_con(punct, s(9)).
        put_con('[', s(10)).
        put_con(']', s(11)).
        put_con({}/1, s(12)).
        put_con('{', s(13)).
        put_int(1200, si(14)).
        put_con('}', s(15)).
        put_con('(', s(16)).
        put_con(')', s(17)).
        label('$write_term0'/6+sub+1).
        label('$write_term0'/6+sub+2).
        label('$write_term0'/6+sub+3).
        label('$write_term0'/6+sub+4).
        label('$write_term0'/6+sub+5).
        label('$write_term0'/6+sub+6).
        label('$write_term0'/6+sub+7).
        label('$write_term0'/6+sub+8).
        label('$write_term0'/6+sub+9).
        label('$write_term0'/6+1).
        label('$write_term0'/6+2).
        label('$write_term0'/6+3).
        label('$write_term0'/6+4).
        label('$write_term0'/6+5).
        label('$write_term0'/6+6).
        label('$write_term0'/6+7).
        label('$write_term0'/6+8).
        label('$write_term0'/6+9).
        label('$write_term0'/6+10).
'$write_term0'/6 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(cont, econt).
        setB0.
        try('$write_term0'/6+1, '$write_term0'/6+sub+1).
'$write_term0'/6+sub+1 :
        retry('$write_term0'/6+2, '$write_term0'/6+sub+2).
'$write_term0'/6+sub+2 :
        retry('$write_term0'/6+3, '$write_term0'/6+sub+3).
'$write_term0'/6+sub+3 :
        retry('$write_term0'/6+4, '$write_term0'/6+sub+4).
'$write_term0'/6+sub+4 :
        retry('$write_term0'/6+5, '$write_term0'/6+sub+5).
'$write_term0'/6+sub+5 :
        retry('$write_term0'/6+6, '$write_term0'/6+sub+6).
'$write_term0'/6+sub+6 :
        retry('$write_term0'/6+7, '$write_term0'/6+sub+7).
'$write_term0'/6+sub+7 :
        retry('$write_term0'/6+8, '$write_term0'/6+sub+8).
'$write_term0'/6+sub+8 :
        retry('$write_term0'/6+9, '$write_term0'/6+sub+9).
'$write_term0'/6+sub+9 :
        trust('$write_term0'/6+10).
'$write_term0'/6+1 :
        comment(('$write_term0'(A, B, C, alpha, D, E):-var(A), !, '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), var(A), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)])).
        get_con(alpha, s(1), a(4)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        inline(var(a(1))).
        inline('$cut'(a(7))).
        put_cont('$fast_write'(a(6), a(1), cont), p(1)).
        execute('$write_space_if_needed'(a(3), s(1), a(6), p(1))).
'$write_term0'/6+2 :
        comment(('$write_term0'(A, B, C, alpha, D, E):-java(A), !, '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), java(A), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)])).
        get_con(alpha, s(1), a(4)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        inline(java(a(1))).
        inline('$cut'(a(7))).
        put_cont('$fast_write'(a(6), a(1), cont), p(1)).
        execute('$write_space_if_needed'(a(3), s(1), a(6), p(1))).
'$write_term0'/6+3 :
        comment(('$write_term0'(A, B, C, alpha, D, E):-A='$VAR'(F), integer(F), F>=0, '$builtin_member'(numbervars(true), D), !, '$write_space_if_needed'(C, alpha, E), '$write_VAR'(F, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), '$unify'(A, '$VAR'(G)), integer(G), '$greater_or_equal'(G, 0), '$builtin_member'(numbervars(true), D), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$write_VAR'(G, E)])).
        get_con(alpha, s(1), a(4)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_var(a(8)).
        put_str_args([a(8)], y(1)).
        put_str(s(2), y(1), a(9)).
        inline('$unify'(a(1), a(9))).
        inline(integer(a(8))).
        inline('$greater_or_equal'(a(8), si(3))).
        put_cont('$write_VAR'(a(8), a(6), cont), p(1)).
        put_cont('$write_space_if_needed'(a(3), s(1), a(6), p(1)), p(2)).
        put_cont('$cut'(a(7), p(2)), p(3)).
        execute('$builtin_member'(s(7), a(5), p(3))).
'$write_term0'/6+4 :
        comment(('$write_term0'(A, B, C, alpha, D, E):-number(A), A<0, !, '$write_space_if_needed'(C, symbol, E), '$fast_write'(E, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), number(A), '$less_than'(A, 0), '$cut'(F), '$write_space_if_needed'(C, symbol, E), '$fast_write'(E, A)])).
        get_con(alpha, s(1), a(4)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        inline(number(a(1))).
        inline('$less_than'(a(1), si(3))).
        inline('$cut'(a(7))).
        put_cont('$fast_write'(a(6), a(1), cont), p(1)).
        execute('$write_space_if_needed'(a(3), s(8), a(6), p(1))).
'$write_term0'/6+5 :
        comment(('$write_term0'(A, B, C, alpha, D, E):-number(A), !, '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), number(A), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)])).
        get_con(alpha, s(1), a(4)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        inline(number(a(1))).
        inline('$cut'(a(7))).
        put_cont('$fast_write'(a(6), a(1), cont), p(1)).
        execute('$write_space_if_needed'(a(3), s(1), a(6), p(1))).
'$write_term0'/6+6 :
        comment(('$write_term0'(A, B, C, D, E, F):-atom(A), !, '$write_atom'(A, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, D, E, F):-['$get_level'(G), atom(A), '$cut'(G), '$write_atom'(A, C, D, E, F)])).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        inline(atom(a(1))).
        inline('$cut'(a(7))).
        execute('$write_atom'(a(1), a(3), a(4), a(5), a(6), cont)).
'$write_term0'/6+7 :
        comment(('$write_term0'(A, B, C, D, E, F):-'$dummy_16_builtins.pl'(E), '$write_is_operator'(A, G, H, I), !, '$write_term_op'(G, I, H, B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, D, E, F):-['$get_level'(G), '$dummy_16_builtins.pl'(E), '$write_is_operator'(A, H, I, J), '$cut'(G), '$write_term_op'(H, J, I, B, C, D, E, F)])).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_var(a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_cont('$write_term_op'(a(8), a(10), a(9), a(2), a(3), a(4), a(5), a(6), cont), p(1)).
        put_cont('$cut'(a(7), p(1)), p(2)).
        put_cont('$write_is_operator'(a(1), a(8), a(9), a(10), p(2)), p(3)).
        execute('$dummy_16_builtins.pl'(a(5), p(3))).
'$write_term0'/6+8 :
        comment(('$write_term0'(A, B, C, punct, D, E):-A=[F|G], '$dummy_17_builtins.pl'(D), !, '$write_space_if_needed'(C, punct, E), put_char(E, '['), '$write_term_list_args'(A, punct, H, D, E), put_char(E, ']'))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, punct, D, E):-['$get_level'(F), '$unify'(A, [G|H]), '$dummy_17_builtins.pl'(D), '$cut'(F), '$write_space_if_needed'(C, punct, E), put_char(E, '['), '$write_term_list_args'(A, punct, I, D, E), put_char(E, ']')])).
        get_con(punct, s(9), a(4)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_list(void, void, a(8)).
        inline('$unify'(a(1), a(8))).
        put_cont(put_char(a(6), s(11), cont), p(1)).
        put_cont('$write_term_list_args'(a(1), s(9), void, a(5), a(6), p(1)), p(2)).
        put_cont(put_char(a(6), s(10), p(2)), p(3)).
        put_cont('$write_space_if_needed'(a(3), s(9), a(6), p(3)), p(4)).
        put_cont('$cut'(a(7), p(4)), p(5)).
        execute('$dummy_17_builtins.pl'(a(5), p(5))).
'$write_term0'/6+9 :
        comment(('$write_term0'(A, B, C, D, E, F):-A={G}, '$dummy_18_builtins.pl'(E), !, '$write_space_if_needed'(C, punct, F), put_char(F, '{'), '$write_term0'(G, 1200, punct, H, E, F), put_char(F, '}'))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, D, E, F):-['$get_level'(G), '$unify'(A, {H}), '$dummy_18_builtins.pl'(E), '$cut'(G), '$write_space_if_needed'(C, punct, F), put_char(F, '{'), '$write_term0'(H, 1200, punct, I, E, F), put_char(F, '}')])).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_var(a(8)).
        put_str_args([a(8)], y(1)).
        put_str(s(12), y(1), a(9)).
        inline('$unify'(a(1), a(9))).
        put_cont(put_char(a(6), s(15), cont), p(1)).
        put_cont('$write_term0'(a(8), si(14), s(9), void, a(5), a(6), p(1)), p(2)).
        put_cont(put_char(a(6), s(13), p(2)), p(3)).
        put_cont('$write_space_if_needed'(a(3), s(9), a(6), p(3)), p(4)).
        put_cont('$cut'(a(7), p(4)), p(5)).
        execute('$dummy_18_builtins.pl'(a(5), p(5))).
'$write_term0'/6+10 :
        comment(('$write_term0'(A, B, C, punct, D, E):-A=..[F|G], '$write_atom'(F, C, H, D, E), put_char(E, '('), '$write_term_args'(G, punct, I, D, E), put_char(E, ')'))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$write_term0'(A, B, C, punct, D, E):-['$univ'(A, [F|G]), '$write_atom'(F, C, H, D, E), put_char(E, '('), '$write_term_args'(G, punct, I, D, E), put_char(E, ')')])).
        get_con(punct, s(9), a(4)).
        put_var(a(7)).
        put_var(a(8)).
        put_list(a(7), a(8), a(9)).
        put_cont(put_char(a(6), s(17), cont), p(1)).
        put_cont('$write_term_args'(a(8), s(9), void, a(5), a(6), p(1)), p(2)).
        put_cont(put_char(a(6), s(16), p(2)), p(3)).
        put_cont('$write_atom'(a(7), a(3), void, a(5), a(6), p(3)), p(4)).
        execute('$univ'(a(1), a(9), p(4))).
end_predicate('$write_term0'/6).

begin_predicate('$dummy_16_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_16_builtins.pl'/1, 'builtins.pl']).
main('$dummy_16_builtins.pl'/1, non- (public)) :
        put_con(ignore_ops/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        label('$dummy_16_builtins.pl'/1+sub+1).
        label('$dummy_16_builtins.pl'/1+1).
        label('$dummy_16_builtins.pl'/1+2).
'$dummy_16_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_16_builtins.pl'/1+1, '$dummy_16_builtins.pl'/1+sub+1).
'$dummy_16_builtins.pl'/1+sub+1 :
        trust('$dummy_16_builtins.pl'/1+2).
'$dummy_16_builtins.pl'/1+1 :
        comment(('$dummy_16_builtins.pl'(A):-'$builtin_member'(ignore_ops(true), A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_16_builtins.pl'(A):-['$get_level'(B), '$builtin_member'(ignore_ops(true), A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_cont(fail(cont), p(1)).
        put_cont('$cut'(a(2), p(1)), p(2)).
        execute('$builtin_member'(s(4), a(1), p(2))).
'$dummy_16_builtins.pl'/1+2 :
        comment(('$dummy_16_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_16_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_16_builtins.pl'/1).

begin_predicate('$dummy_17_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_17_builtins.pl'/1, 'builtins.pl']).
main('$dummy_17_builtins.pl'/1, non- (public)) :
        put_con(ignore_ops/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        label('$dummy_17_builtins.pl'/1+sub+1).
        label('$dummy_17_builtins.pl'/1+1).
        label('$dummy_17_builtins.pl'/1+2).
'$dummy_17_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_17_builtins.pl'/1+1, '$dummy_17_builtins.pl'/1+sub+1).
'$dummy_17_builtins.pl'/1+sub+1 :
        trust('$dummy_17_builtins.pl'/1+2).
'$dummy_17_builtins.pl'/1+1 :
        comment(('$dummy_17_builtins.pl'(A):-'$builtin_member'(ignore_ops(true), A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_17_builtins.pl'(A):-['$get_level'(B), '$builtin_member'(ignore_ops(true), A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_cont(fail(cont), p(1)).
        put_cont('$cut'(a(2), p(1)), p(2)).
        execute('$builtin_member'(s(4), a(1), p(2))).
'$dummy_17_builtins.pl'/1+2 :
        comment(('$dummy_17_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_17_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_17_builtins.pl'/1).

begin_predicate('$dummy_18_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_18_builtins.pl'/1, 'builtins.pl']).
main('$dummy_18_builtins.pl'/1, non- (public)) :
        put_con(ignore_ops/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        label('$dummy_18_builtins.pl'/1+sub+1).
        label('$dummy_18_builtins.pl'/1+1).
        label('$dummy_18_builtins.pl'/1+2).
'$dummy_18_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_18_builtins.pl'/1+1, '$dummy_18_builtins.pl'/1+sub+1).
'$dummy_18_builtins.pl'/1+sub+1 :
        trust('$dummy_18_builtins.pl'/1+2).
'$dummy_18_builtins.pl'/1+1 :
        comment(('$dummy_18_builtins.pl'(A):-'$builtin_member'(ignore_ops(true), A), !, fail)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_18_builtins.pl'(A):-['$get_level'(B), '$builtin_member'(ignore_ops(true), A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_cont(fail(cont), p(1)).
        put_cont('$cut'(a(2), p(1)), p(2)).
        execute('$builtin_member'(s(4), a(1), p(2))).
'$dummy_18_builtins.pl'/1+2 :
        comment(('$dummy_18_builtins.pl'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_18_builtins.pl'(A):-[])).
        execute(cont).
end_predicate('$dummy_18_builtins.pl'/1).

begin_predicate('$write_space_if_needed'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_space_if_needed'/3, 'builtins.pl']).
main('$write_space_if_needed'/3, non- (public)) :
        put_con(punct, s(1)).
        put_con(' ', s(2)).
        put_con(other, s(3)).
        put_con(alpha, s(4)).
        label('$write_space_if_needed'/3+var).
        label('$write_space_if_needed'/3+var+1).
        label('$write_space_if_needed'/3+var+2).
        label('$write_space_if_needed'/3+var+3).
        label('$write_space_if_needed'/3+int).
        label('$write_space_if_needed'/3+int+1).
        label('$write_space_if_needed'/3+con).
        label('$write_space_if_needed'/3+con+0).
        label('$write_space_if_needed'/3+con+0+1).
        label('$write_space_if_needed'/3+con+0+2).
        label('$write_space_if_needed'/3+con+1).
        label('$write_space_if_needed'/3+con+1+1).
        label('$write_space_if_needed'/3+con+1+2).
        label('$write_space_if_needed'/3+1).
        label('$write_space_if_needed'/3+2).
        label('$write_space_if_needed'/3+3).
        label('$write_space_if_needed'/3+4).
        new_hash(con, 2).
        static([put_hash(s(1), '$write_space_if_needed'/3+con+0, con), put_hash(s(3), '$write_space_if_needed'/3+con+1, con)]).
'$write_space_if_needed'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$write_space_if_needed'/3+var, '$write_space_if_needed'/3+int, '$write_space_if_needed'/3+int, '$write_space_if_needed'/3+con, '$write_space_if_needed'/3+int, '$write_space_if_needed'/3+int).
'$write_space_if_needed'/3+var :
        try('$write_space_if_needed'/3+1, '$write_space_if_needed'/3+var+1).
'$write_space_if_needed'/3+var+1 :
        retry('$write_space_if_needed'/3+2, '$write_space_if_needed'/3+var+2).
'$write_space_if_needed'/3+var+2 :
        retry('$write_space_if_needed'/3+3, '$write_space_if_needed'/3+var+3).
'$write_space_if_needed'/3+var+3 :
        trust('$write_space_if_needed'/3+4).
'$write_space_if_needed'/3+int :
        try('$write_space_if_needed'/3+2, '$write_space_if_needed'/3+int+1).
'$write_space_if_needed'/3+int+1 :
        trust('$write_space_if_needed'/3+4).
'$write_space_if_needed'/3+con :
        switch_on_hash(con, 2, '$write_space_if_needed'/3+int, [punct:'$write_space_if_needed'/3+con+0, other:'$write_space_if_needed'/3+con+1]).
'$write_space_if_needed'/3+con+0 :
        try('$write_space_if_needed'/3+1, '$write_space_if_needed'/3+con+0+1).
'$write_space_if_needed'/3+con+0+1 :
        retry('$write_space_if_needed'/3+2, '$write_space_if_needed'/3+con+0+2).
'$write_space_if_needed'/3+con+0+2 :
        trust('$write_space_if_needed'/3+4).
'$write_space_if_needed'/3+con+1 :
        try('$write_space_if_needed'/3+2, '$write_space_if_needed'/3+con+1+1).
'$write_space_if_needed'/3+con+1+1 :
        retry('$write_space_if_needed'/3+3, '$write_space_if_needed'/3+con+1+2).
'$write_space_if_needed'/3+con+1+2 :
        trust('$write_space_if_needed'/3+4).
'$write_space_if_needed'/3+1 :
        comment(('$write_space_if_needed'(punct, A, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$write_space_if_needed'(punct, A, B):-['$neck_cut'])).
        get_con(punct, s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$write_space_if_needed'/3+2 :
        comment(('$write_space_if_needed'(A, A, B):-!, put_char(B, ' '))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$write_space_if_needed'(A, A, B):-['$neck_cut', put_char(B, ' ')])).
        get_val(a(1), a(2)).
        inline('$neck_cut').
        execute(put_char(a(3), s(2), cont)).
'$write_space_if_needed'/3+3 :
        comment(('$write_space_if_needed'(other, alpha, A):-!, put_char(A, ' '))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$write_space_if_needed'(other, alpha, A):-['$neck_cut', put_char(A, ' ')])).
        get_con(other, s(3), a(1)).
        get_con(alpha, s(4), a(2)).
        inline('$neck_cut').
        execute(put_char(a(3), s(2), cont)).
'$write_space_if_needed'/3+4 :
        comment(('$write_space_if_needed'(A, B, C):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$write_space_if_needed'(A, B, C):-[])).
        execute(cont).
end_predicate('$write_space_if_needed'/3).

begin_predicate('$write_VAR'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_VAR'/2, 'builtins.pl']).
main('$write_VAR'/2, non- (public)) :
        put_int(26, si(1)).
        put_int(65, si(2)).
        label('$write_VAR'/2+sub+1).
        label('$write_VAR'/2+1).
        label('$write_VAR'/2+2).
'$write_VAR'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$write_VAR'/2+1, '$write_VAR'/2+sub+1).
'$write_VAR'/2+sub+1 :
        trust('$write_VAR'/2+2).
'$write_VAR'/2+1 :
        comment(('$write_VAR'(A, B):-A<26, !, C is A mod 26+[65], put_code(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_VAR'(A, B):-['$get_level'(C), '$less_than'(A, 26), '$cut'(C), '$mod'(A, 26, D), '$plus'(D, 65, E), put_code(B, E)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline('$less_than'(a(1), si(1))).
        inline('$cut'(a(3))).
        put_var(a(4)).
        inline('$mod'(a(1), si(1), a(4))).
        put_var(a(5)).
        inline('$plus'(a(4), si(2), a(5))).
        execute(put_code(a(2), a(5), cont)).
'$write_VAR'/2+2 :
        comment(('$write_VAR'(A, B):-C is A mod 26+[65], put_code(B, C), D is A//26, '$fast_write'(B, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_VAR'(A, B):-['$mod'(A, 26, C), '$plus'(C, 65, D), put_code(B, D), '$int_quotient'(A, 26, E), '$fast_write'(B, E)])).
        put_var(a(3)).
        inline('$mod'(a(1), si(1), a(3))).
        put_var(a(4)).
        inline('$plus'(a(3), si(2), a(4))).
        put_var(a(5)).
        put_cont('$fast_write'(a(2), a(5), cont), p(1)).
        put_cont('$int_quotient'(a(1), si(1), a(5), p(1)), p(2)).
        execute(put_code(a(2), a(4), p(2))).
end_predicate('$write_VAR'/2).

begin_predicate('$write_atom'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_atom'/5, 'builtins.pl']).
main('$write_atom'/5, non- (public)) :
        put_con(quoted/1, s(1)).
        put_con(true, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        label('$write_atom'/5+sub+1).
        label('$write_atom'/5+1).
        label('$write_atom'/5+2).
'$write_atom'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$write_atom'/5+1, '$write_atom'/5+sub+1).
'$write_atom'/5+sub+1 :
        trust('$write_atom'/5+2).
'$write_atom'/5+1 :
        comment(('$write_atom'(A, B, C, D, E):-'$builtin_member'(quoted(true), D), !, '$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_writeq'(E, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_atom'(A, B, C, D, E):-['$get_level'(F), '$builtin_member'(quoted(true), D), '$cut'(F), '$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_writeq'(E, A)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_cont('$fast_writeq'(a(5), a(1), cont), p(1)).
        put_cont('$write_space_if_needed'(a(2), a(3), a(5), p(1)), p(2)).
        put_cont('$atom_type'(a(1), a(3), p(2)), p(3)).
        put_cont('$cut'(a(6), p(3)), p(4)).
        execute('$builtin_member'(s(4), a(4), p(4))).
'$write_atom'/5+2 :
        comment(('$write_atom'(A, B, C, D, E):-'$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_write'(E, A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_atom'(A, B, C, D, E):-['$atom_type'(A, C), '$write_space_if_needed'(B, C, E), '$fast_write'(E, A)])).
        put_cont('$fast_write'(a(5), a(1), cont), p(1)).
        put_cont('$write_space_if_needed'(a(2), a(3), a(5), p(1)), p(2)).
        execute('$atom_type'(a(1), a(3), p(2))).
end_predicate('$write_atom'/5).

begin_predicate('$atom_type'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$atom_type'/2, 'builtins.pl']).
main('$atom_type'/2, non- (public)) :
        put_con(alpha, s(1)).
        put_int(0, si(2)).
        put_con(symbol, s(3)).
        put_int(1, si(4)).
        put_con(punct, s(5)).
        put_int(2, si(6)).
        put_con(other, s(7)).
        put_int(3, si(8)).
        label('$atom_type'/2+sub+1).
        label('$atom_type'/2+sub+2).
        label('$atom_type'/2+sub+3).
        label('$atom_type'/2+1).
        label('$atom_type'/2+2).
        label('$atom_type'/2+3).
        label('$atom_type'/2+4).
'$atom_type'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$atom_type'/2+1, '$atom_type'/2+sub+1).
'$atom_type'/2+sub+1 :
        retry('$atom_type'/2+2, '$atom_type'/2+sub+2).
'$atom_type'/2+sub+2 :
        retry('$atom_type'/2+3, '$atom_type'/2+sub+3).
'$atom_type'/2+sub+3 :
        trust('$atom_type'/2+4).
'$atom_type'/2+1 :
        comment(('$atom_type'(A, alpha):-'$atom_type0'(A, 0), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$atom_type'(A, alpha):-['$get_level'(B), '$atom_type0'(A, 0), '$cut'(B)])).
        get_con(alpha, s(1), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_cont('$cut'(a(3), cont), p(1)).
        execute('$atom_type0'(a(1), si(2), p(1))).
'$atom_type'/2+2 :
        comment(('$atom_type'(A, symbol):-'$atom_type0'(A, 1), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$atom_type'(A, symbol):-['$get_level'(B), '$atom_type0'(A, 1), '$cut'(B)])).
        get_con(symbol, s(3), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_cont('$cut'(a(3), cont), p(1)).
        execute('$atom_type0'(a(1), si(4), p(1))).
'$atom_type'/2+3 :
        comment(('$atom_type'(A, punct):-'$atom_type0'(A, 2), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$atom_type'(A, punct):-['$get_level'(B), '$atom_type0'(A, 2), '$cut'(B)])).
        get_con(punct, s(5), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_cont('$cut'(a(3), cont), p(1)).
        execute('$atom_type0'(a(1), si(6), p(1))).
'$atom_type'/2+4 :
        comment(('$atom_type'(A, other):-'$atom_type0'(A, 3), !)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$atom_type'(A, other):-['$get_level'(B), '$atom_type0'(A, 3), '$cut'(B)])).
        get_con(other, s(7), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_cont('$cut'(a(3), cont), p(1)).
        execute('$atom_type0'(a(1), si(8), p(1))).
end_predicate('$atom_type'/2).

begin_predicate('$write_is_operator'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_is_operator'/4, 'builtins.pl']).
main('$write_is_operator'/4, non- (public)) :
'$write_is_operator'/4 :
        comment(('$write_is_operator'(A, B, C, D):-functor(A, B, E), '$write_op_type'(E, D), current_op(F, D, B), A=..[G|C], !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$write_is_operator'(A, B, C, D):-['$get_level'(E), functor(A, B, F), '$write_op_type'(F, D), current_op(G, D, B), '$univ'(A, [H|C]), '$cut'(E)])).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_var(a(6)).
        put_list(void, a(3), a(7)).
        put_cont('$cut'(a(5), cont), p(1)).
        put_cont('$univ'(a(1), a(7), p(1)), p(2)).
        put_cont(current_op(void, a(4), a(2), p(2)), p(3)).
        put_cont('$write_op_type'(a(6), a(4), p(3)), p(4)).
        execute(functor(a(1), a(2), a(6), p(4))).
end_predicate('$write_is_operator'/4).

begin_predicate('$write_op_type'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_op_type'/2, 'builtins.pl']).
main('$write_op_type'/2, non- (public)) :
        put_int(1, si(1)).
        put_con(fx, s(2)).
        put_con(fy, s(3)).
        put_con(xf, s(4)).
        put_con(yf, s(5)).
        put_int(2, si(6)).
        put_con(xfx, s(7)).
        put_con(xfy, s(8)).
        put_con(yfx, s(9)).
        label(fail/0).
        label('$write_op_type'/2+var).
        label('$write_op_type'/2+var+1).
        label('$write_op_type'/2+var+2).
        label('$write_op_type'/2+var+3).
        label('$write_op_type'/2+var+4).
        label('$write_op_type'/2+var+5).
        label('$write_op_type'/2+var+6).
        label('$write_op_type'/2+int).
        label('$write_op_type'/2+int+0).
        label('$write_op_type'/2+int+0+1).
        label('$write_op_type'/2+int+0+2).
        label('$write_op_type'/2+int+0+3).
        label('$write_op_type'/2+int+1).
        label('$write_op_type'/2+int+1+1).
        label('$write_op_type'/2+int+1+2).
        label('$write_op_type'/2+1).
        label('$write_op_type'/2+2).
        label('$write_op_type'/2+3).
        label('$write_op_type'/2+4).
        label('$write_op_type'/2+5).
        label('$write_op_type'/2+6).
        label('$write_op_type'/2+7).
        new_hash(int, 2).
        static([put_hash(si(1), '$write_op_type'/2+int+0, int), put_hash(si(6), '$write_op_type'/2+int+1, int)]).
'$write_op_type'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$write_op_type'/2+var, '$write_op_type'/2+int, fail/0, fail/0, fail/0, fail/0).
'$write_op_type'/2+var :
        try('$write_op_type'/2+1, '$write_op_type'/2+var+1).
'$write_op_type'/2+var+1 :
        retry('$write_op_type'/2+2, '$write_op_type'/2+var+2).
'$write_op_type'/2+var+2 :
        retry('$write_op_type'/2+3, '$write_op_type'/2+var+3).
'$write_op_type'/2+var+3 :
        retry('$write_op_type'/2+4, '$write_op_type'/2+var+4).
'$write_op_type'/2+var+4 :
        retry('$write_op_type'/2+5, '$write_op_type'/2+var+5).
'$write_op_type'/2+var+5 :
        retry('$write_op_type'/2+6, '$write_op_type'/2+var+6).
'$write_op_type'/2+var+6 :
        trust('$write_op_type'/2+7).
'$write_op_type'/2+int :
        switch_on_hash(int, 2, fail/0, [1:'$write_op_type'/2+int+0, 2:'$write_op_type'/2+int+1]).
'$write_op_type'/2+int+0 :
        try('$write_op_type'/2+1, '$write_op_type'/2+int+0+1).
'$write_op_type'/2+int+0+1 :
        retry('$write_op_type'/2+2, '$write_op_type'/2+int+0+2).
'$write_op_type'/2+int+0+2 :
        retry('$write_op_type'/2+3, '$write_op_type'/2+int+0+3).
'$write_op_type'/2+int+0+3 :
        trust('$write_op_type'/2+4).
'$write_op_type'/2+int+1 :
        try('$write_op_type'/2+5, '$write_op_type'/2+int+1+1).
'$write_op_type'/2+int+1+1 :
        retry('$write_op_type'/2+6, '$write_op_type'/2+int+1+2).
'$write_op_type'/2+int+1+2 :
        trust('$write_op_type'/2+7).
'$write_op_type'/2+1 :
        comment(('$write_op_type'(1, fx):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_op_type'(1, fx):-[])).
        get_int(1, si(1), a(1)).
        get_con(fx, s(2), a(2)).
        execute(cont).
'$write_op_type'/2+2 :
        comment(('$write_op_type'(1, fy):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_op_type'(1, fy):-[])).
        get_int(1, si(1), a(1)).
        get_con(fy, s(3), a(2)).
        execute(cont).
'$write_op_type'/2+3 :
        comment(('$write_op_type'(1, xf):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_op_type'(1, xf):-[])).
        get_int(1, si(1), a(1)).
        get_con(xf, s(4), a(2)).
        execute(cont).
'$write_op_type'/2+4 :
        comment(('$write_op_type'(1, yf):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_op_type'(1, yf):-[])).
        get_int(1, si(1), a(1)).
        get_con(yf, s(5), a(2)).
        execute(cont).
'$write_op_type'/2+5 :
        comment(('$write_op_type'(2, xfx):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_op_type'(2, xfx):-[])).
        get_int(2, si(6), a(1)).
        get_con(xfx, s(7), a(2)).
        execute(cont).
'$write_op_type'/2+6 :
        comment(('$write_op_type'(2, xfy):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_op_type'(2, xfy):-[])).
        get_int(2, si(6), a(1)).
        get_con(xfy, s(8), a(2)).
        execute(cont).
'$write_op_type'/2+7 :
        comment(('$write_op_type'(2, yfx):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_op_type'(2, yfx):-[])).
        get_int(2, si(6), a(1)).
        get_con(yfx, s(9), a(2)).
        execute(cont).
end_predicate('$write_op_type'/2).

begin_predicate('$write_term_op'/8).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_term_op'/8, 'builtins.pl']).
main('$write_term_op'/8, non- (public)) :
        put_con(punct, s(1)).
        put_con('(', s(2)).
        put_con(')', s(3)).
        label('$write_term_op'/8+sub+1).
        label('$write_term_op'/8+1).
        label('$write_term_op'/8+2).
'$write_term_op'/8 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(arg(8), ea(8)).
        set(cont, econt).
        setB0.
        try('$write_term_op'/8+1, '$write_term_op'/8+sub+1).
'$write_term_op'/8+sub+1 :
        trust('$write_term_op'/8+2).
'$write_term_op'/8+1 :
        comment(('$write_term_op'(A, B, C, D, E, punct, F, G):-current_op(H, B, A), H>D, !, '$write_space_if_needed'(E, punct, G), put_char(G, '('), '$write_term_op1'(A, B, C, H, punct, I, F, G), put_char(G, ')'))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op'(A, B, C, D, E, punct, F, G):-['$get_level'(H), current_op(I, B, A), '$greater_than'(I, D), '$cut'(H), '$write_space_if_needed'(E, punct, G), put_char(G, '('), '$write_term_op1'(A, B, C, I, punct, J, F, G), put_char(G, ')')])).
        get_con(punct, s(1), a(6)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        put_var(a(10)).
        put_cont(put_char(a(8), s(3), cont), p(1)).
        put_cont('$write_term_op1'(a(1), a(2), a(3), a(10), s(1), void, a(7), a(8), p(1)), p(2)).
        put_cont(put_char(a(8), s(2), p(2)), p(3)).
        put_cont('$write_space_if_needed'(a(5), s(1), a(8), p(3)), p(4)).
        put_cont('$cut'(a(9), p(4)), p(5)).
        put_cont('$greater_than'(a(10), a(4), p(5)), p(6)).
        execute(current_op(a(10), a(2), a(1), p(6))).
'$write_term_op'/8+2 :
        comment(('$write_term_op'(A, B, C, D, E, F, G, H):-current_op(I, B, A), '$write_term_op1'(A, B, C, I, E, F, G, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op'(A, B, C, D, E, F, G, H):-[current_op(I, B, A), '$write_term_op1'(A, B, C, I, E, F, G, H)])).
        put_var(a(9)).
        put_cont('$write_term_op1'(a(1), a(2), a(3), a(9), a(5), a(6), a(7), a(8), cont), p(1)).
        execute(current_op(a(9), a(2), a(1), p(1))).
end_predicate('$write_term_op'/8).

begin_predicate('$write_term_op1'/8).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_term_op1'/8, 'builtins.pl']).
main('$write_term_op1'/8, non- (public)) :
        put_con(fx, s(1)).
        put_con([], s(2)).
        put_int(1, si(3)).
        put_con(fy, s(4)).
        put_con(xf, s(5)).
        put_con(yf, s(6)).
        put_con(xfx, s(7)).
        put_con(xfy, s(8)).
        put_con(yfx, s(9)).
        label('$write_term_op1'/8+sub+1).
        label('$write_term_op1'/8+sub+2).
        label('$write_term_op1'/8+sub+3).
        label('$write_term_op1'/8+sub+4).
        label('$write_term_op1'/8+sub+5).
        label('$write_term_op1'/8+sub+6).
        label('$write_term_op1'/8+1).
        label('$write_term_op1'/8+2).
        label('$write_term_op1'/8+3).
        label('$write_term_op1'/8+4).
        label('$write_term_op1'/8+5).
        label('$write_term_op1'/8+6).
        label('$write_term_op1'/8+7).
'$write_term_op1'/8 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(arg(7), ea(7)).
        set(arg(8), ea(8)).
        set(cont, econt).
        setB0.
        try('$write_term_op1'/8+1, '$write_term_op1'/8+sub+1).
'$write_term_op1'/8+sub+1 :
        retry('$write_term_op1'/8+2, '$write_term_op1'/8+sub+2).
'$write_term_op1'/8+sub+2 :
        retry('$write_term_op1'/8+3, '$write_term_op1'/8+sub+3).
'$write_term_op1'/8+sub+3 :
        retry('$write_term_op1'/8+4, '$write_term_op1'/8+sub+4).
'$write_term_op1'/8+sub+4 :
        retry('$write_term_op1'/8+5, '$write_term_op1'/8+sub+5).
'$write_term_op1'/8+sub+5 :
        retry('$write_term_op1'/8+6, '$write_term_op1'/8+sub+6).
'$write_term_op1'/8+sub+6 :
        trust('$write_term_op1'/8+7).
'$write_term_op1'/8+1 :
        comment(('$write_term_op1'(A, fx, [B], C, D, E, F, G):-!, '$write_atom'(A, D, H, F, G), I is C-1, '$write_term0'(B, I, H, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op1'(A, fx, [B], C, D, E, F, G):-['$neck_cut', '$write_atom'(A, D, H, F, G), '$minus'(C, 1, I), '$write_term0'(B, I, H, E, F, G)])).
        get_con(fx, s(1), a(2)).
        get_list(a(3)).
        unify_var(a(9)).
        unify_con([], s(2)).
        inline('$neck_cut').
        put_var(a(10)).
        put_var(a(11)).
        put_cont('$write_term0'(a(9), a(11), a(10), a(6), a(7), a(8), cont), p(1)).
        put_cont('$minus'(a(4), si(3), a(11), p(1)), p(2)).
        execute('$write_atom'(a(1), a(5), a(10), a(7), a(8), p(2))).
'$write_term_op1'/8+2 :
        comment(('$write_term_op1'(A, fy, [B], C, D, E, F, G):-!, '$write_atom'(A, D, H, F, G), I is C, '$write_term0'(B, I, H, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op1'(A, fy, [B], C, D, E, F, G):-['$neck_cut', '$write_atom'(A, D, H, F, G), I is C, '$write_term0'(B, I, H, E, F, G)])).
        get_con(fy, s(4), a(2)).
        get_list(a(3)).
        unify_var(a(9)).
        unify_con([], s(2)).
        inline('$neck_cut').
        put_var(a(10)).
        put_var(a(11)).
        put_cont('$write_term0'(a(9), a(11), a(10), a(6), a(7), a(8), cont), p(1)).
        put_cont(is(a(11), a(4), p(1)), p(2)).
        execute('$write_atom'(a(1), a(5), a(10), a(7), a(8), p(2))).
'$write_term_op1'/8+3 :
        comment(('$write_term_op1'(A, xf, [B], C, D, E, F, G):-!, H is C-1, '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op1'(A, xf, [B], C, D, E, F, G):-['$neck_cut', '$minus'(C, 1, H), '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G)])).
        get_con(xf, s(5), a(2)).
        get_list(a(3)).
        unify_var(a(9)).
        unify_con([], s(2)).
        inline('$neck_cut').
        put_var(a(10)).
        inline('$minus'(a(4), si(3), a(10))).
        put_var(a(11)).
        put_cont('$write_atom'(a(1), a(11), a(6), a(7), a(8), cont), p(1)).
        execute('$write_term0'(a(9), a(10), a(5), a(11), a(7), a(8), p(1))).
'$write_term_op1'/8+4 :
        comment(('$write_term_op1'(A, yf, [B], C, D, E, F, G):-!, H is C, '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op1'(A, yf, [B], C, D, E, F, G):-['$neck_cut', H is C, '$write_term0'(B, H, D, I, F, G), '$write_atom'(A, I, E, F, G)])).
        get_con(yf, s(6), a(2)).
        get_list(a(3)).
        unify_var(a(9)).
        unify_con([], s(2)).
        inline('$neck_cut').
        put_var(a(10)).
        inline(a(10)is a(4)).
        put_var(a(11)).
        put_cont('$write_atom'(a(1), a(11), a(6), a(7), a(8), cont), p(1)).
        execute('$write_term0'(a(9), a(10), a(5), a(11), a(7), a(8), p(1))).
'$write_term_op1'/8+5 :
        comment(('$write_term_op1'(A, xfx, [B, C], D, E, F, G, H):-!, I is D-1, J is D-1, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op1'(A, xfx, [B, C], D, E, F, G, H):-['$neck_cut', '$minus'(D, 1, I), '$minus'(D, 1, J), '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)])).
        get_con(xfx, s(7), a(2)).
        get_list(a(3)).
        unify_var(a(9)).
        unify_var(a(10)).
        get_list(a(10)).
        unify_var(a(11)).
        unify_con([], s(2)).
        inline('$neck_cut').
        put_var(a(12)).
        inline('$minus'(a(4), si(3), a(12))).
        put_var(a(13)).
        inline('$minus'(a(4), si(3), a(13))).
        put_var(a(14)).
        put_var(a(15)).
        put_cont('$write_term0'(a(11), a(13), a(15), a(6), a(7), a(8), cont), p(1)).
        put_cont('$write_term_infix_op'(a(1), a(14), a(15), a(7), a(8), p(1)), p(2)).
        execute('$write_term0'(a(9), a(12), a(5), a(14), a(7), a(8), p(2))).
'$write_term_op1'/8+6 :
        comment(('$write_term_op1'(A, xfy, [B, C], D, E, F, G, H):-!, I is D-1, J is D, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op1'(A, xfy, [B, C], D, E, F, G, H):-['$neck_cut', '$minus'(D, 1, I), J is D, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)])).
        get_con(xfy, s(8), a(2)).
        get_list(a(3)).
        unify_var(a(9)).
        unify_var(a(10)).
        get_list(a(10)).
        unify_var(a(11)).
        unify_con([], s(2)).
        inline('$neck_cut').
        put_var(a(12)).
        inline('$minus'(a(4), si(3), a(12))).
        put_var(a(13)).
        inline(a(13)is a(4)).
        put_var(a(14)).
        put_var(a(15)).
        put_cont('$write_term0'(a(11), a(13), a(15), a(6), a(7), a(8), cont), p(1)).
        put_cont('$write_term_infix_op'(a(1), a(14), a(15), a(7), a(8), p(1)), p(2)).
        execute('$write_term0'(a(9), a(12), a(5), a(14), a(7), a(8), p(2))).
'$write_term_op1'/8+7 :
        comment(('$write_term_op1'(A, yfx, [B, C], D, E, F, G, H):-!, I is D, J is D-1, '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(ea(7), a(7)).
        set(ea(8), a(8)).
        set(econt, cont).
        comment(('$write_term_op1'(A, yfx, [B, C], D, E, F, G, H):-['$neck_cut', I is D, '$minus'(D, 1, J), '$write_term0'(B, I, E, K, G, H), '$write_term_infix_op'(A, K, L, G, H), '$write_term0'(C, J, L, F, G, H)])).
        get_con(yfx, s(9), a(2)).
        get_list(a(3)).
        unify_var(a(9)).
        unify_var(a(10)).
        get_list(a(10)).
        unify_var(a(11)).
        unify_con([], s(2)).
        inline('$neck_cut').
        put_var(a(12)).
        inline(a(12)is a(4)).
        put_var(a(13)).
        inline('$minus'(a(4), si(3), a(13))).
        put_var(a(14)).
        put_var(a(15)).
        put_cont('$write_term0'(a(11), a(13), a(15), a(6), a(7), a(8), cont), p(1)).
        put_cont('$write_term_infix_op'(a(1), a(14), a(15), a(7), a(8), p(1)), p(2)).
        execute('$write_term0'(a(9), a(12), a(5), a(14), a(7), a(8), p(2))).
end_predicate('$write_term_op1'/8).

begin_predicate('$write_term_infix_op'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_term_infix_op'/5, 'builtins.pl']).
main('$write_term_infix_op'/5, non- (public)) :
        put_con((','), s(1)).
        put_con(punct, s(2)).
        label('$write_term_infix_op'/5+var).
        label('$write_term_infix_op'/5+var+1).
        label('$write_term_infix_op'/5+1).
        label('$write_term_infix_op'/5+2).
'$write_term_infix_op'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        switch_on_term('$write_term_infix_op'/5+var, '$write_term_infix_op'/5+2, '$write_term_infix_op'/5+2, '$write_term_infix_op'/5+var, '$write_term_infix_op'/5+2, '$write_term_infix_op'/5+2).
'$write_term_infix_op'/5+var :
        try('$write_term_infix_op'/5+1, '$write_term_infix_op'/5+var+1).
'$write_term_infix_op'/5+var+1 :
        trust('$write_term_infix_op'/5+2).
'$write_term_infix_op'/5+1 :
        comment(('$write_term_infix_op'((','), A, punct, B, C):-!, '$write_space_if_needed'(A, punct, C), put_char(C, (',')))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_infix_op'((','), A, punct, B, C):-['$neck_cut', '$write_space_if_needed'(A, punct, C), put_char(C, (','))])).
        get_con((','), s(1), a(1)).
        get_con(punct, s(2), a(3)).
        inline('$neck_cut').
        put_cont(put_char(a(5), s(1), cont), p(1)).
        execute('$write_space_if_needed'(a(2), s(2), a(5), p(1))).
'$write_term_infix_op'/5+2 :
        comment(('$write_term_infix_op'(A, B, C, D, E):-'$write_atom'(A, B, C, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_infix_op'(A, B, C, D, E):-['$write_atom'(A, B, C, D, E)])).
        execute('$write_atom'(a(1), a(2), a(3), a(4), a(5), cont)).
end_predicate('$write_term_infix_op'/5).

begin_predicate('$write_term_list_args'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_term_list_args'/5, 'builtins.pl']).
main('$write_term_list_args'/5, non- (public)) :
        put_int(999, si(1)).
        put_con(punct, s(2)).
        put_con((','), s(3)).
        put_con([], s(4)).
        put_con(('|'), s(5)).
        label(fail/0).
        label('$write_term_list_args'/5+var).
        label('$write_term_list_args'/5+var+1).
        label('$write_term_list_args'/5+var+2).
        label('$write_term_list_args'/5+1).
        label('$write_term_list_args'/5+2).
        label('$write_term_list_args'/5+3).
'$write_term_list_args'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        switch_on_term('$write_term_list_args'/5+var, fail/0, fail/0, fail/0, fail/0, '$write_term_list_args'/5+var).
'$write_term_list_args'/5+var :
        try('$write_term_list_args'/5+1, '$write_term_list_args'/5+var+1).
'$write_term_list_args'/5+var+1 :
        retry('$write_term_list_args'/5+2, '$write_term_list_args'/5+var+2).
'$write_term_list_args'/5+var+2 :
        trust('$write_term_list_args'/5+3).
'$write_term_list_args'/5+1 :
        comment(('$write_term_list_args'([A|B], C, D, E, F):-nonvar(B), B=[G|H], !, '$write_term0'(A, 999, C, I, E, F), '$write_space_if_needed'(I, punct, F), put_char(F, (',')), '$write_term_list_args'(B, punct, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_list_args'([A|B], C, D, E, F):-['$get_level'(G), nonvar(B), '$unify'(B, [H|I]), '$cut'(G), '$write_term0'(A, 999, C, J, E, F), '$write_space_if_needed'(J, punct, F), put_char(F, (',')), '$write_term_list_args'(B, punct, D, E, F)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        inline(nonvar(a(7))).
        put_list(void, void, a(9)).
        inline('$unify'(a(7), a(9))).
        inline('$cut'(a(8))).
        put_var(a(10)).
        put_cont('$write_term_list_args'(a(7), s(2), a(3), a(4), a(5), cont), p(1)).
        put_cont(put_char(a(5), s(3), p(1)), p(2)).
        put_cont('$write_space_if_needed'(a(10), s(2), a(5), p(2)), p(3)).
        execute('$write_term0'(a(6), si(1), a(2), a(10), a(4), a(5), p(3))).
'$write_term_list_args'/5+2 :
        comment(('$write_term_list_args'([A|B], C, D, E, F):-nonvar(B), B=[], !, '$write_term0'(A, 999, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_list_args'([A|B], C, D, E, F):-['$get_level'(G), nonvar(B), '$unify'(B, []), '$cut'(G), '$write_term0'(A, 999, C, D, E, F)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        inline(nonvar(a(7))).
        inline('$unify'(a(7), s(4))).
        inline('$cut'(a(8))).
        execute('$write_term0'(a(6), si(1), a(2), a(3), a(4), a(5), cont)).
'$write_term_list_args'/5+3 :
        comment(('$write_term_list_args'([A|B], C, D, E, F):-'$write_term0'(A, 999, C, G, E, F), '$write_space_if_needed'(G, punct, F), put_char(F, ('|')), '$write_term0'(B, 999, punct, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_list_args'([A|B], C, D, E, F):-['$write_term0'(A, 999, C, G, E, F), '$write_space_if_needed'(G, punct, F), put_char(F, ('|')), '$write_term0'(B, 999, punct, D, E, F)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        put_var(a(8)).
        put_cont('$write_term0'(a(7), si(1), s(2), a(3), a(4), a(5), cont), p(1)).
        put_cont(put_char(a(5), s(5), p(1)), p(2)).
        put_cont('$write_space_if_needed'(a(8), s(2), a(5), p(2)), p(3)).
        execute('$write_term0'(a(6), si(1), a(2), a(8), a(4), a(5), p(3))).
end_predicate('$write_term_list_args'/5).

begin_predicate('$write_term_args'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_term_args'/5, 'builtins.pl']).
main('$write_term_args'/5, non- (public)) :
        put_con([], s(1)).
        put_int(999, si(2)).
        put_con(punct, s(3)).
        put_con((','), s(4)).
        label(fail/0).
        label('$write_term_args'/5+var).
        label('$write_term_args'/5+var+1).
        label('$write_term_args'/5+var+2).
        label('$write_term_args'/5+lis).
        label('$write_term_args'/5+lis+1).
        label('$write_term_args'/5+1).
        label('$write_term_args'/5+2).
        label('$write_term_args'/5+3).
'$write_term_args'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        switch_on_term('$write_term_args'/5+var, fail/0, fail/0, '$write_term_args'/5+1, fail/0, '$write_term_args'/5+lis).
'$write_term_args'/5+var :
        try('$write_term_args'/5+1, '$write_term_args'/5+var+1).
'$write_term_args'/5+var+1 :
        retry('$write_term_args'/5+2, '$write_term_args'/5+var+2).
'$write_term_args'/5+var+2 :
        trust('$write_term_args'/5+3).
'$write_term_args'/5+lis :
        try('$write_term_args'/5+2, '$write_term_args'/5+lis+1).
'$write_term_args'/5+lis+1 :
        trust('$write_term_args'/5+3).
'$write_term_args'/5+1 :
        comment(('$write_term_args'([], A, A, B, C):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_args'([], A, A, B, C):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_val(a(2), a(3)).
        inline('$neck_cut').
        execute(cont).
'$write_term_args'/5+2 :
        comment(('$write_term_args'([A], B, C, D, E):-!, '$write_term0'(A, 999, B, C, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_args'([A], B, C, D, E):-['$neck_cut', '$write_term0'(A, 999, B, C, D, E)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_con([], s(1)).
        inline('$neck_cut').
        execute('$write_term0'(a(6), si(2), a(2), a(3), a(4), a(5), cont)).
'$write_term_args'/5+3 :
        comment(('$write_term_args'([A|B], C, D, E, F):-!, '$write_term0'(A, 999, C, G, E, F), '$write_space_if_needed'(G, punct, F), put_char(F, (',')), '$write_term_args'(B, punct, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$write_term_args'([A|B], C, D, E, F):-['$neck_cut', '$write_term0'(A, 999, C, G, E, F), '$write_space_if_needed'(G, punct, F), put_char(F, (',')), '$write_term_args'(B, punct, D, E, F)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_var(a(8)).
        put_cont('$write_term_args'(a(7), s(3), a(3), a(4), a(5), cont), p(1)).
        put_cont(put_char(a(5), s(4), p(1)), p(2)).
        put_cont('$write_space_if_needed'(a(8), s(3), a(5), p(2)), p(3)).
        execute('$write_term0'(a(6), si(2), a(2), a(8), a(4), a(5), p(3))).
end_predicate('$write_term_args'/5).

begin_predicate(op/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([op/3, 'builtins.pl']).
main(op/3, (public)) :
        put_int(0, si(1)).
        put_int(1200, si(2)).
        put_con(domain/2, s(3)).
        put_con(integer, s(4)).
        put_con((-)/2, s(5)).
        put_str_args([si(1), si(2)], s(6)).
        put_str(s(5), s(6), s(7)).
        put_str_args([s(4), s(7)], s(8)).
        put_str(s(3), s(8), s(9)).
        put_con(op/3, s(10)).
        put_int(1, si(11)).
        label(op/3+sub+1).
        label(op/3+1).
        label(op/3+2).
op/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try(op/3+1, op/3+sub+1).
op/3+sub+1 :
        trust(op/3+2).
op/3+1 :
        comment((op(A, B, C):-integer(A), 0=<A, A=<1200, !, '$op1'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((op(A, B, C):-['$get_level'(D), integer(A), '$less_or_equal'(0, A), '$less_or_equal'(A, 1200), '$cut'(D), '$op1'(A, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(integer(a(1))).
        inline('$less_or_equal'(si(1), a(1))).
        inline('$less_or_equal'(a(1), si(2))).
        inline('$cut'(a(4))).
        execute('$op1'(a(1), a(2), a(3), cont)).
op/3+2 :
        comment((op(A, B, C):-illarg(domain(integer, 0-1200), op(A, B, C), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((op(A, B, C):-[illarg(domain(integer, 0-1200), op(A, B, C), 1)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(10), y(1), a(4)).
        execute(illarg(s(9), a(4), si(11), cont)).
end_predicate(op/3).

begin_predicate('$op1'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$op1'/3, 'builtins.pl']).
main('$op1'/3, non- (public)) :
        put_con(domain/2, s(1)).
        put_con(term, s(2)).
        put_con(op/3, s(3)).
        put_int(2, si(4)).
        label('$op1'/3+sub+1).
        label('$op1'/3+1).
        label('$op1'/3+2).
'$op1'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$op1'/3+1, '$op1'/3+sub+1).
'$op1'/3+sub+1 :
        trust('$op1'/3+2).
'$op1'/3+1 :
        comment(('$op1'(A, B, C):-nonvar(B), '$op_specifier'(B, D), !, '$op2'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$op1'(A, B, C):-['$get_level'(D), nonvar(B), '$op_specifier'(B, E), '$cut'(D), '$op2'(A, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(nonvar(a(2))).
        put_cont('$op2'(a(1), a(2), a(3), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute('$op_specifier'(a(2), void, p(2))).
'$op1'/3+2 :
        comment(('$op1'(A, B, C):-findall(D, '$op_specifier'(D, E), F), illarg(domain(term, F), op(A, B, C), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$op1'(A, B, C):-[findall(D, 'jp.ac.kobe_u.cs.prolog.builtin':'$op_specifier'(D, E), F), illarg(domain(term, F), op(A, B, C), 2)])).
        put_var(a(4)).
        put_clo('$op_specifier'(a(4), void), a(5)).
        put_var(a(6)).
        put_str_args([s(2), a(6)], y(1)).
        put_str(s(1), y(1), a(7)).
        put_str_args([a(1), a(2), a(3)], y(2)).
        put_str(s(3), y(2), a(8)).
        put_cont(illarg(a(7), a(8), si(4), cont), p(1)).
        execute(findall(a(4), a(5), a(6), p(1))).
end_predicate('$op1'/3).

begin_predicate('$op2'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$op2'/3, 'builtins.pl']).
main('$op2'/3, non- (public)) :
        put_con([], s(1)).
        put_con(type/1, s(2)).
        put_con(list/1, s(3)).
        put_con(atom, s(4)).
        put_str_args([s(4)], s(5)).
        put_str(s(3), s(5), s(6)).
        put_str_args([s(6)], s(7)).
        put_str(s(2), s(7), s(8)).
        put_con(op/3, s(9)).
        put_int(3, si(10)).
        label('$op2'/3+sub+1).
        label('$op2'/3+sub+2).
        label('$op2'/3+1).
        label('$op2'/3+2).
        label('$op2'/3+3).
'$op2'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$op2'/3+1, '$op2'/3+sub+1).
'$op2'/3+sub+1 :
        retry('$op2'/3+2, '$op2'/3+sub+2).
'$op2'/3+sub+2 :
        trust('$op2'/3+3).
'$op2'/3+1 :
        comment(('$op2'(A, B, C):-atom(C), !, '$add_operators'([C], A, B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$op2'(A, B, C):-['$get_level'(D), atom(C), '$cut'(D), '$add_operators'([C], A, B)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(atom(a(3))).
        inline('$cut'(a(4))).
        put_list(a(3), s(1), a(5)).
        execute('$add_operators'(a(5), a(1), a(2), cont)).
'$op2'/3+2 :
        comment(('$op2'(A, B, C):-'$op_atom_list'(C, D), !, '$add_operators'(D, A, B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$op2'(A, B, C):-['$get_level'(D), '$op_atom_list'(C, E), '$cut'(D), '$add_operators'(E, A, B)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_var(a(5)).
        put_cont('$add_operators'(a(5), a(1), a(2), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute('$op_atom_list'(a(3), a(5), p(2))).
'$op2'/3+3 :
        comment(('$op2'(A, B, C):-illarg(type(list(atom)), op(A, B, C), 3))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$op2'(A, B, C):-[illarg(type(list(atom)), op(A, B, C), 3)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(9), y(1), a(4)).
        execute(illarg(s(8), a(4), si(10), cont)).
end_predicate('$op2'/3).

begin_predicate('$add_operators'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$add_operators'/3, 'builtins.pl']).
main('$add_operators'/3, non- (public)) :
        put_con([], s(1)).
        label(fail/0).
        label('$add_operators'/3+var).
        label('$add_operators'/3+var+1).
        label('$add_operators'/3+1).
        label('$add_operators'/3+2).
'$add_operators'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$add_operators'/3+var, fail/0, fail/0, '$add_operators'/3+1, fail/0, '$add_operators'/3+2).
'$add_operators'/3+var :
        try('$add_operators'/3+1, '$add_operators'/3+var+1).
'$add_operators'/3+var+1 :
        trust('$add_operators'/3+2).
'$add_operators'/3+1 :
        comment(('$add_operators'([], A, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$add_operators'([], A, B):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$add_operators'/3+2 :
        comment(('$add_operators'([A|B], C, D):-'$add_op'(A, C, D), '$add_operators'(B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$add_operators'([A|B], C, D):-['$add_op'(A, C, D), '$add_operators'(B, C, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_cont('$add_operators'(a(5), a(2), a(3), cont), p(1)).
        execute('$add_op'(a(4), a(2), a(3), p(1))).
end_predicate('$add_operators'/3).

begin_predicate('$add_op'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$add_op'/3, 'builtins.pl']).
main('$add_op'/3, non- (public)) :
        put_con((','), s(1)).
        put_con(permission/4, s(2)).
        put_con(modify, s(3)).
        put_con(operator, s(4)).
        put_con(op/3, s(5)).
        put_int(3, si(6)).
        put_con((:)/2, s(7)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(8)).
        put_con('$current_operator'/3, s(9)).
        put_int(0, si(10)).
        label('$add_op'/3+var).
        label('$add_op'/3+var+1).
        label('$add_op'/3+var+2).
        label('$add_op'/3+var+3).
        label('$add_op'/3+int).
        label('$add_op'/3+int+1).
        label('$add_op'/3+int+2).
        label('$add_op'/3+1).
        label('$add_op'/3+2).
        label('$add_op'/3+3).
        label('$add_op'/3+4).
'$add_op'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$add_op'/3+var, '$add_op'/3+int, '$add_op'/3+int, '$add_op'/3+var, '$add_op'/3+int, '$add_op'/3+int).
'$add_op'/3+var :
        try('$add_op'/3+1, '$add_op'/3+var+1).
'$add_op'/3+var+1 :
        retry('$add_op'/3+2, '$add_op'/3+var+2).
'$add_op'/3+var+2 :
        retry('$add_op'/3+3, '$add_op'/3+var+3).
'$add_op'/3+var+3 :
        trust('$add_op'/3+4).
'$add_op'/3+int :
        try('$add_op'/3+2, '$add_op'/3+int+1).
'$add_op'/3+int+1 :
        retry('$add_op'/3+3, '$add_op'/3+int+2).
'$add_op'/3+int+2 :
        trust('$add_op'/3+4).
'$add_op'/3+1 :
        comment(('$add_op'((','), A, B):-!, illarg(permission(modify, operator, (','), C), op(A, B, (',')), 3))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$add_op'((','), A, B):-['$neck_cut', illarg(permission(modify, operator, (','), C), op(A, B, (',')), 3)])).
        get_con((','), s(1), a(1)).
        inline('$neck_cut').
        put_str_args([s(3), s(4), s(1), void], y(1)).
        put_str(s(2), y(1), a(4)).
        put_str_args([a(2), a(3), s(1)], y(2)).
        put_str(s(5), y(2), a(5)).
        execute(illarg(a(4), a(5), si(6), cont)).
'$add_op'/3+2 :
        comment(('$add_op'(A, B, C):-clause('$current_operator'(D, E, A), F), '$op_specifier'(C, G), '$op_specifier'(E, H), G=H, retract('$current_operator'(I, E, A)), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$add_op'(A, B, C):-[clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_operator'(D, E, A), F), '$op_specifier'(C, G), '$op_specifier'(E, H), '$unify'(G, H), retract('jp.ac.kobe_u.cs.prolog.builtin':'$current_operator'(I, E, A)), fail])).
        put_var(a(4)).
        put_str_args([void, a(4), a(1)], y(1)).
        put_str(s(9), y(1), a(5)).
        put_str_args([s(8), a(5)], y(2)).
        put_str(s(7), y(2), a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_str_args([void, a(4), a(1)], y(3)).
        put_str(s(9), y(3), a(9)).
        put_str_args([s(8), a(9)], y(4)).
        put_str(s(7), y(4), a(10)).
        put_cont(fail(cont), p(1)).
        put_cont(retract(a(10), p(1)), p(2)).
        put_cont('$unify'(a(7), a(8), p(2)), p(3)).
        put_cont('$op_specifier'(a(4), a(8), p(3)), p(4)).
        put_cont('$op_specifier'(a(3), a(7), p(4)), p(5)).
        execute(clause(a(6), void, p(5))).
'$add_op'/3+3 :
        comment(('$add_op'(A, 0, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$add_op'(A, 0, B):-['$neck_cut'])).
        get_int(0, si(10), a(2)).
        inline('$neck_cut').
        execute(cont).
'$add_op'/3+4 :
        comment(('$add_op'(A, B, C):-assertz('$current_operator'(B, C, A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$add_op'(A, B, C):-[assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_operator'(B, C, A))])).
        put_str_args([a(2), a(3), a(1)], y(1)).
        put_str(s(9), y(1), a(4)).
        put_str_args([s(8), a(4)], y(2)).
        put_str(s(7), y(2), a(5)).
        execute(assertz(a(5), cont)).
end_predicate('$add_op'/3).

begin_predicate('$op_specifier'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$op_specifier'/2, 'builtins.pl']).
main('$op_specifier'/2, non- (public)) :
        put_con(fx, s(1)).
        put_con(prefix, s(2)).
        put_con(fy, s(3)).
        put_con(xfx, s(4)).
        put_con(infix, s(5)).
        put_con(xfy, s(6)).
        put_con(yfx, s(7)).
        put_con(xf, s(8)).
        put_con(postfix, s(9)).
        put_con(yf, s(10)).
        label(fail/0).
        label('$op_specifier'/2+var).
        label('$op_specifier'/2+var+1).
        label('$op_specifier'/2+var+2).
        label('$op_specifier'/2+var+3).
        label('$op_specifier'/2+var+4).
        label('$op_specifier'/2+var+5).
        label('$op_specifier'/2+var+6).
        label('$op_specifier'/2+con).
        label('$op_specifier'/2+1).
        label('$op_specifier'/2+2).
        label('$op_specifier'/2+3).
        label('$op_specifier'/2+4).
        label('$op_specifier'/2+5).
        label('$op_specifier'/2+6).
        label('$op_specifier'/2+7).
        new_hash(con, 7).
        static([put_hash(s(1), '$op_specifier'/2+1, con), put_hash(s(3), '$op_specifier'/2+2, con), put_hash(s(4), '$op_specifier'/2+3, con), put_hash(s(6), '$op_specifier'/2+4, con), put_hash(s(7), '$op_specifier'/2+5, con), put_hash(s(8), '$op_specifier'/2+6, con), put_hash(s(10), '$op_specifier'/2+7, con)]).
'$op_specifier'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$op_specifier'/2+var, fail/0, fail/0, '$op_specifier'/2+con, fail/0, fail/0).
'$op_specifier'/2+var :
        try('$op_specifier'/2+1, '$op_specifier'/2+var+1).
'$op_specifier'/2+var+1 :
        retry('$op_specifier'/2+2, '$op_specifier'/2+var+2).
'$op_specifier'/2+var+2 :
        retry('$op_specifier'/2+3, '$op_specifier'/2+var+3).
'$op_specifier'/2+var+3 :
        retry('$op_specifier'/2+4, '$op_specifier'/2+var+4).
'$op_specifier'/2+var+4 :
        retry('$op_specifier'/2+5, '$op_specifier'/2+var+5).
'$op_specifier'/2+var+5 :
        retry('$op_specifier'/2+6, '$op_specifier'/2+var+6).
'$op_specifier'/2+var+6 :
        trust('$op_specifier'/2+7).
'$op_specifier'/2+con :
        switch_on_hash(con, 7, fail/0, [fx:'$op_specifier'/2+1, fy:'$op_specifier'/2+2, xfx:'$op_specifier'/2+3, xfy:'$op_specifier'/2+4, yfx:'$op_specifier'/2+5, xf:'$op_specifier'/2+6, yf:'$op_specifier'/2+7]).
'$op_specifier'/2+1 :
        comment(('$op_specifier'(fx, prefix):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_specifier'(fx, prefix):-[])).
        get_con(fx, s(1), a(1)).
        get_con(prefix, s(2), a(2)).
        execute(cont).
'$op_specifier'/2+2 :
        comment(('$op_specifier'(fy, prefix):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_specifier'(fy, prefix):-[])).
        get_con(fy, s(3), a(1)).
        get_con(prefix, s(2), a(2)).
        execute(cont).
'$op_specifier'/2+3 :
        comment(('$op_specifier'(xfx, infix):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_specifier'(xfx, infix):-[])).
        get_con(xfx, s(4), a(1)).
        get_con(infix, s(5), a(2)).
        execute(cont).
'$op_specifier'/2+4 :
        comment(('$op_specifier'(xfy, infix):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_specifier'(xfy, infix):-[])).
        get_con(xfy, s(6), a(1)).
        get_con(infix, s(5), a(2)).
        execute(cont).
'$op_specifier'/2+5 :
        comment(('$op_specifier'(yfx, infix):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_specifier'(yfx, infix):-[])).
        get_con(yfx, s(7), a(1)).
        get_con(infix, s(5), a(2)).
        execute(cont).
'$op_specifier'/2+6 :
        comment(('$op_specifier'(xf, postfix):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_specifier'(xf, postfix):-[])).
        get_con(xf, s(8), a(1)).
        get_con(postfix, s(9), a(2)).
        execute(cont).
'$op_specifier'/2+7 :
        comment(('$op_specifier'(yf, postfix):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_specifier'(yf, postfix):-[])).
        get_con(yf, s(10), a(1)).
        get_con(postfix, s(9), a(2)).
        execute(cont).
end_predicate('$op_specifier'/2).

begin_predicate('$op_atom_list'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$op_atom_list'/2, 'builtins.pl']).
main('$op_atom_list'/2, non- (public)) :
        put_con([], s(1)).
        label('$op_atom_list'/2+top).
        label('$op_atom_list'/2+var).
        label('$op_atom_list'/2+var+1).
        label('$op_atom_list'/2+var+2).
        label('$op_atom_list'/2+con).
        label('$op_atom_list'/2+con+1).
        label('$op_atom_list'/2+lis).
        label('$op_atom_list'/2+lis+1).
        label('$op_atom_list'/2+1).
        label('$op_atom_list'/2+2).
        label('$op_atom_list'/2+3).
'$op_atom_list'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$op_atom_list'/2+top).
'$op_atom_list'/2+top :
        setB0.
        switch_on_term('$op_atom_list'/2+var, '$op_atom_list'/2+1, '$op_atom_list'/2+1, '$op_atom_list'/2+con, '$op_atom_list'/2+1, '$op_atom_list'/2+lis).
'$op_atom_list'/2+var :
        try('$op_atom_list'/2+1, '$op_atom_list'/2+var+1).
'$op_atom_list'/2+var+1 :
        retry('$op_atom_list'/2+2, '$op_atom_list'/2+var+2).
'$op_atom_list'/2+var+2 :
        trust('$op_atom_list'/2+3).
'$op_atom_list'/2+con :
        try('$op_atom_list'/2+1, '$op_atom_list'/2+con+1).
'$op_atom_list'/2+con+1 :
        trust('$op_atom_list'/2+2).
'$op_atom_list'/2+lis :
        try('$op_atom_list'/2+1, '$op_atom_list'/2+lis+1).
'$op_atom_list'/2+lis+1 :
        trust('$op_atom_list'/2+3).
'$op_atom_list'/2+1 :
        comment(('$op_atom_list'(A, B):-var(A), !, fail)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_atom_list'(A, B):-['$get_level'(C), var(A), '$cut'(C), fail])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        inline(fail).
'$op_atom_list'/2+2 :
        comment(('$op_atom_list'([], []):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_atom_list'([], []):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(2)).
        inline('$neck_cut').
        execute(cont).
'$op_atom_list'/2+3 :
        comment(('$op_atom_list'([A|B], [A|C]):-atom(A), !, '$op_atom_list'(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$op_atom_list'([A|B], [A|C]):-['$get_level'(D), atom(A), '$cut'(D), '$op_atom_list'(B, C)])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_list(a(2)).
        unify_val(a(3)).
        unify_var(a(5)).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(atom(a(3))).
        inline('$cut'(a(6))).
        set(a(4), ea(1)).
        set(a(5), ea(2)).
        set(cont, econt).
        goto('$op_atom_list'/2+top).
end_predicate('$op_atom_list'/2).

begin_predicate(current_op/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([current_op/3, 'builtins.pl']).
main(current_op/3, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$current_operator'/3, s(3)).
current_op/3 :
        comment((current_op(A, B, C):-clause('$current_operator'(A, B, C), D))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((current_op(A, B, C):-[clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_operator'(A, B, C), D)])).
        put_str_args([a(1), a(2), a(3)], y(1)).
        put_str(s(3), y(1), a(4)).
        put_str_args([s(2), a(4)], y(2)).
        put_str(s(1), y(2), a(5)).
        execute(clause(a(5), void, cont)).
end_predicate(current_op/3).

begin_predicate((\+)/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([ (\+)/1, 'builtins.pl']).
main((\+)/1, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        label((\+)/1+sub+1).
        label((\+)/1+1).
        label((\+)/1+2).
(\+)/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try((\+)/1+1, (\+)/1+sub+1).
(\+)/1+sub+1 :
        trust((\+)/1+2).
(\+)/1+1 :
        comment((\+A:-call(A), !, fail)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((\+A:-['$get_level'(B), call('jp.ac.kobe_u.cs.prolog.builtin':A), '$cut'(B), fail])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_str_args([s(2), a(1)], y(1)).
        put_str(s(1), y(1), a(3)).
        put_cont(fail(cont), p(1)).
        put_cont('$cut'(a(2), p(1)), p(2)).
        execute(call(a(3), p(2))).
(\+)/1+2 :
        comment((\+A:-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((\+A:-[])).
        execute(cont).
end_predicate((\+)/1).

begin_predicate(repeat/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([repeat/0, 'builtins.pl']).
main(repeat/0, (public)) :
        label(repeat/0+top).
        label(repeat/0+sub+1).
        label(repeat/0+1).
        label(repeat/0+2).
repeat/0 :
        set(cont, econt).
        goto(repeat/0+top).
repeat/0+top :
        setB0.
        try(repeat/0+1, repeat/0+sub+1).
repeat/0+sub+1 :
        trust(repeat/0+2).
repeat/0+1 :
        comment((repeat:-true)).
        decl_pred_vars([cont]).
        set(econt, cont).
        comment((repeat:-[])).
        execute(cont).
repeat/0+2 :
        comment((repeat:-repeat)).
        decl_pred_vars([cont]).
        set(econt, cont).
        comment((repeat:-[repeat])).
        set(cont, econt).
        goto(repeat/0+top).
end_predicate(repeat/0).

begin_predicate(once/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([once/1, 'builtins.pl']).
main(once/1, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
once/1 :
        comment((once(A):-call(A), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment((once(A):-['$get_level'(B), call('jp.ac.kobe_u.cs.prolog.builtin':A), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_str_args([s(2), a(1)], y(1)).
        put_str(s(1), y(1), a(3)).
        put_cont('$cut'(a(2), cont), p(1)).
        execute(call(a(3), p(1))).
end_predicate(once/1).

begin_predicate(sub_atom/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([sub_atom/5, 'builtins.pl']).
main(sub_atom/5, (public)) :
sub_atom/5 :
        comment((sub_atom(A, B, C, D, E):-atom_concat(F, G, A), atom_length(F, B), atom_concat(E, H, G), atom_length(E, C), atom_length(H, D))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        set(arg(5), a(5)).
        comment((sub_atom(A, B, C, D, E):-[atom_concat(F, G, A), atom_length(F, B), atom_concat(E, H, G), atom_length(E, C), atom_length(H, D)])).
        put_var(a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_cont(atom_length(a(8), a(4), cont), p(1)).
        put_cont(atom_length(a(5), a(3), p(1)), p(2)).
        put_cont(atom_concat(a(5), a(8), a(7), p(2)), p(3)).
        put_cont(atom_length(a(6), a(2), p(3)), p(4)).
        execute(atom_concat(a(6), a(7), a(1), p(4))).
end_predicate(sub_atom/5).

begin_predicate('$dummy_19_builtins.pl'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_19_builtins.pl'/2, 'builtins.pl']).
main('$dummy_19_builtins.pl'/2, non- (public)) :
        label('$dummy_19_builtins.pl'/2+sub+1).
        label('$dummy_19_builtins.pl'/2+1).
        label('$dummy_19_builtins.pl'/2+2).
'$dummy_19_builtins.pl'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$dummy_19_builtins.pl'/2+1, '$dummy_19_builtins.pl'/2+sub+1).
'$dummy_19_builtins.pl'/2+sub+1 :
        trust('$dummy_19_builtins.pl'/2+2).
'$dummy_19_builtins.pl'/2+1 :
        comment(('$dummy_19_builtins.pl'(A, B):-number(A), !, number_codes(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dummy_19_builtins.pl'(A, B):-['$get_level'(C), number(A), '$cut'(C), number_codes(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(number(a(1))).
        inline('$cut'(a(3))).
        execute(number_codes(a(1), a(2), cont)).
'$dummy_19_builtins.pl'/2+2 :
        comment(('$dummy_19_builtins.pl'(A, B):-'$dummy_20_builtins.pl'(A, B))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dummy_19_builtins.pl'(A, B):-['$dummy_20_builtins.pl'(A, B)])).
        execute('$dummy_20_builtins.pl'(a(1), a(2), cont)).
end_predicate('$dummy_19_builtins.pl'/2).

begin_predicate('$dummy_20_builtins.pl'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_20_builtins.pl'/2, 'builtins.pl']).
main('$dummy_20_builtins.pl'/2, non- (public)) :
        put_con(type/1, s(1)).
        put_con(atomic, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(name/2, s(5)).
        put_int(1, si(6)).
        label('$dummy_20_builtins.pl'/2+sub+1).
        label('$dummy_20_builtins.pl'/2+1).
        label('$dummy_20_builtins.pl'/2+2).
'$dummy_20_builtins.pl'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$dummy_20_builtins.pl'/2+1, '$dummy_20_builtins.pl'/2+sub+1).
'$dummy_20_builtins.pl'/2+sub+1 :
        trust('$dummy_20_builtins.pl'/2+2).
'$dummy_20_builtins.pl'/2+1 :
        comment(('$dummy_20_builtins.pl'(A, B):-atomic(A), !, atom_codes(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dummy_20_builtins.pl'(A, B):-['$get_level'(C), atomic(A), '$cut'(C), atom_codes(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(atomic(a(1))).
        inline('$cut'(a(3))).
        execute(atom_codes(a(1), a(2), cont)).
'$dummy_20_builtins.pl'/2+2 :
        comment(('$dummy_20_builtins.pl'(A, B):-illarg(type(atomic), name(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dummy_20_builtins.pl'(A, B):-[illarg(type(atomic), name(A, B), 1)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(5), y(1), a(3)).
        execute(illarg(s(4), a(3), si(6), cont)).
end_predicate('$dummy_20_builtins.pl'/2).

begin_predicate(name/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([name/2, 'builtins.pl']).
main(name/2, (public)) :
        label(name/2+sub+1).
        label(name/2+1).
        label(name/2+2).
name/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try(name/2+1, name/2+sub+1).
name/2+sub+1 :
        trust(name/2+2).
name/2+1 :
        comment((name(A, B):-nonvar(A), '$dummy_19_builtins.pl'(A, B))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((name(A, B):-[nonvar(A), '$dummy_19_builtins.pl'(A, B)])).
        inline(nonvar(a(1))).
        execute('$dummy_19_builtins.pl'(a(1), a(2), cont)).
name/2+2 :
        comment((name(A, B):-var(A), '$dummy_21_builtins.pl'(A, B, C))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((name(A, B):-[var(A), '$dummy_21_builtins.pl'(A, B, C)])).
        inline(var(a(1))).
        execute('$dummy_21_builtins.pl'(a(1), a(2), void, cont)).
end_predicate(name/2).

begin_predicate('$dummy_21_builtins.pl'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_21_builtins.pl'/3, 'builtins.pl']).
main('$dummy_21_builtins.pl'/3, non- (public)) :
        label('$dummy_21_builtins.pl'/3+sub+1).
        label('$dummy_21_builtins.pl'/3+1).
        label('$dummy_21_builtins.pl'/3+2).
'$dummy_21_builtins.pl'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dummy_21_builtins.pl'/3+1, '$dummy_21_builtins.pl'/3+sub+1).
'$dummy_21_builtins.pl'/3+sub+1 :
        trust('$dummy_21_builtins.pl'/3+2).
'$dummy_21_builtins.pl'/3+1 :
        comment(('$dummy_21_builtins.pl'(A, B, C):-number_codes(C, B), !, A=C)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_21_builtins.pl'(A, B, C):-['$get_level'(D), number_codes(C, B), '$cut'(D), '$unify'(A, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$unify'(a(1), a(3), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute(number_codes(a(3), a(2), p(2))).
'$dummy_21_builtins.pl'/3+2 :
        comment(('$dummy_21_builtins.pl'(A, B, C):-'$dummy_22_builtins.pl'(A, B, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_21_builtins.pl'(A, B, C):-['$dummy_22_builtins.pl'(A, B, C)])).
        execute('$dummy_22_builtins.pl'(a(1), a(2), a(3), cont)).
end_predicate('$dummy_21_builtins.pl'/3).

begin_predicate('$dummy_22_builtins.pl'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_22_builtins.pl'/3, 'builtins.pl']).
main('$dummy_22_builtins.pl'/3, non- (public)) :
        put_con(type/1, s(1)).
        put_con(list/1, s(2)).
        put_con(char, s(3)).
        put_str_args([s(3)], s(4)).
        put_str(s(2), s(4), s(5)).
        put_str_args([s(5)], s(6)).
        put_str(s(1), s(6), s(7)).
        put_con(name/2, s(8)).
        put_int(2, si(9)).
        label('$dummy_22_builtins.pl'/3+sub+1).
        label('$dummy_22_builtins.pl'/3+1).
        label('$dummy_22_builtins.pl'/3+2).
'$dummy_22_builtins.pl'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dummy_22_builtins.pl'/3+1, '$dummy_22_builtins.pl'/3+sub+1).
'$dummy_22_builtins.pl'/3+sub+1 :
        trust('$dummy_22_builtins.pl'/3+2).
'$dummy_22_builtins.pl'/3+1 :
        comment(('$dummy_22_builtins.pl'(A, B, C):-atom_codes(C, B), !, A=C)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_22_builtins.pl'(A, B, C):-['$get_level'(D), atom_codes(C, B), '$cut'(D), '$unify'(A, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_cont('$unify'(a(1), a(3), cont), p(1)).
        put_cont('$cut'(a(4), p(1)), p(2)).
        execute(atom_codes(a(3), a(2), p(2))).
'$dummy_22_builtins.pl'/3+2 :
        comment(('$dummy_22_builtins.pl'(A, B, C):-illarg(type(list(char)), name(A, B), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_22_builtins.pl'(A, B, C):-[illarg(type(list(char)), name(A, B), 2)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(8), y(1), a(4)).
        execute(illarg(s(7), a(4), si(9), cont)).
end_predicate('$dummy_22_builtins.pl'/3).

begin_predicate(set_prolog_flag/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([set_prolog_flag/2, 'builtins.pl']).
main(set_prolog_flag/2, (public)) :
        put_con(var, s(1)).
        put_con(set_prolog_flag/2, s(2)).
        put_int(1, si(3)).
        put_int(2, si(4)).
        put_con(type/1, s(5)).
        put_con(atom, s(6)).
        put_str_args([s(6)], s(7)).
        put_str(s(5), s(7), s(8)).
        label(set_prolog_flag/2+sub+1).
        label(set_prolog_flag/2+sub+2).
        label(set_prolog_flag/2+sub+3).
        label(set_prolog_flag/2+1).
        label(set_prolog_flag/2+2).
        label(set_prolog_flag/2+3).
        label(set_prolog_flag/2+4).
set_prolog_flag/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try(set_prolog_flag/2+1, set_prolog_flag/2+sub+1).
set_prolog_flag/2+sub+1 :
        retry(set_prolog_flag/2+2, set_prolog_flag/2+sub+2).
set_prolog_flag/2+sub+2 :
        retry(set_prolog_flag/2+3, set_prolog_flag/2+sub+3).
set_prolog_flag/2+sub+3 :
        trust(set_prolog_flag/2+4).
set_prolog_flag/2+1 :
        comment((set_prolog_flag(A, B):-var(A), !, illarg(var, set_prolog_flag(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((set_prolog_flag(A, B):-['$get_level'(C), var(A), '$cut'(C), illarg(var, set_prolog_flag(A, B), 1)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(2), y(1), a(4)).
        execute(illarg(s(1), a(4), si(3), cont)).
set_prolog_flag/2+2 :
        comment((set_prolog_flag(A, B):-var(B), !, illarg(var, set_prolog_flag(A, B), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((set_prolog_flag(A, B):-['$get_level'(C), var(B), '$cut'(C), illarg(var, set_prolog_flag(A, B), 2)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(2))).
        inline('$cut'(a(3))).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(2), y(1), a(4)).
        execute(illarg(s(1), a(4), si(4), cont)).
set_prolog_flag/2+3 :
        comment((set_prolog_flag(A, B):-atom(A), !, '$set_prolog_flag0'(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((set_prolog_flag(A, B):-['$get_level'(C), atom(A), '$cut'(C), '$set_prolog_flag0'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(atom(a(1))).
        inline('$cut'(a(3))).
        execute('$set_prolog_flag0'(a(1), a(2), cont)).
set_prolog_flag/2+4 :
        comment((set_prolog_flag(A, B):-illarg(type(atom), set_prolog_flag(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((set_prolog_flag(A, B):-[illarg(type(atom), set_prolog_flag(A, B), 1)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(2), y(1), a(3)).
        execute(illarg(s(8), a(3), si(3), cont)).
end_predicate(set_prolog_flag/2).

begin_predicate('$set_prolog_flag0'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$set_prolog_flag0'/2, 'builtins.pl']).
main('$set_prolog_flag0'/2, non- (public)) :
        put_con(changeable/1, s(1)).
        put_con(domain/2, s(2)).
        put_con(atom, s(3)).
        put_con(prolog_flag, s(4)).
        put_str_args([s(3), s(4)], s(5)).
        put_str(s(2), s(5), s(6)).
        put_con(set_prolog_flag/2, s(7)).
        put_int(1, si(8)).
        label('$set_prolog_flag0'/2+sub+1).
        label('$set_prolog_flag0'/2+1).
        label('$set_prolog_flag0'/2+2).
'$set_prolog_flag0'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$set_prolog_flag0'/2+1, '$set_prolog_flag0'/2+sub+1).
'$set_prolog_flag0'/2+sub+1 :
        trust('$set_prolog_flag0'/2+2).
'$set_prolog_flag0'/2+1 :
        comment(('$set_prolog_flag0'(A, B):-'$prolog_impl_flag'(A, C, changeable(D)), !, '$set_prolog_flag0'(D, A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$set_prolog_flag0'(A, B):-['$get_level'(C), '$prolog_impl_flag'(A, D, changeable(E)), '$cut'(C), '$set_prolog_flag0'(E, A, B, D)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_var(a(4)).
        put_var(a(5)).
        put_str_args([a(5)], y(1)).
        put_str(s(1), y(1), a(6)).
        put_cont('$set_prolog_flag0'(a(5), a(1), a(2), a(4), cont), p(1)).
        put_cont('$cut'(a(3), p(1)), p(2)).
        execute('$prolog_impl_flag'(a(1), a(4), a(6), p(2))).
'$set_prolog_flag0'/2+2 :
        comment(('$set_prolog_flag0'(A, B):-illarg(domain(atom, prolog_flag), set_prolog_flag(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$set_prolog_flag0'(A, B):-[illarg(domain(atom, prolog_flag), set_prolog_flag(A, B), 1)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(7), y(1), a(3)).
        execute(illarg(s(6), a(3), si(8), cont)).
end_predicate('$set_prolog_flag0'/2).

begin_predicate('$set_prolog_flag0'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$set_prolog_flag0'/4, 'builtins.pl']).
main('$set_prolog_flag0'/4, non- (public)) :
        put_con(no, s(1)).
        put_con(permission/4, s(2)).
        put_con(modify, s(3)).
        put_con(flag, s(4)).
        put_con(set_prolog_flag/2, s(5)).
        put_con(domain/2, s(6)).
        put_con(atom, s(7)).
        put_con(flag_value, s(8)).
        put_str_args([s(7), s(8)], s(9)).
        put_str(s(6), s(9), s(10)).
        put_int(2, si(11)).
        label('$set_prolog_flag0'/4+var).
        label('$set_prolog_flag0'/4+var+1).
        label('$set_prolog_flag0'/4+var+2).
        label('$set_prolog_flag0'/4+int).
        label('$set_prolog_flag0'/4+int+1).
        label('$set_prolog_flag0'/4+1).
        label('$set_prolog_flag0'/4+2).
        label('$set_prolog_flag0'/4+3).
'$set_prolog_flag0'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        switch_on_term('$set_prolog_flag0'/4+var, '$set_prolog_flag0'/4+int, '$set_prolog_flag0'/4+int, '$set_prolog_flag0'/4+var, '$set_prolog_flag0'/4+int, '$set_prolog_flag0'/4+int).
'$set_prolog_flag0'/4+var :
        try('$set_prolog_flag0'/4+1, '$set_prolog_flag0'/4+var+1).
'$set_prolog_flag0'/4+var+1 :
        retry('$set_prolog_flag0'/4+2, '$set_prolog_flag0'/4+var+2).
'$set_prolog_flag0'/4+var+2 :
        trust('$set_prolog_flag0'/4+3).
'$set_prolog_flag0'/4+int :
        try('$set_prolog_flag0'/4+2, '$set_prolog_flag0'/4+int+1).
'$set_prolog_flag0'/4+int+1 :
        trust('$set_prolog_flag0'/4+3).
'$set_prolog_flag0'/4+1 :
        comment(('$set_prolog_flag0'(no, A, B, C):-!, illarg(permission(modify, flag, A, D), set_prolog_flag(A, B), E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$set_prolog_flag0'(no, A, B, C):-['$neck_cut', illarg(permission(modify, flag, A, D), set_prolog_flag(A, B), E)])).
        get_con(no, s(1), a(1)).
        inline('$neck_cut').
        put_str_args([s(3), s(4), a(2), void], y(1)).
        put_str(s(2), y(1), a(5)).
        put_str_args([a(2), a(3)], y(2)).
        put_str(s(5), y(2), a(6)).
        execute(illarg(a(5), a(6), void, cont)).
'$set_prolog_flag0'/4+2 :
        comment(('$set_prolog_flag0'(A, B, C, D):-'$builtin_member'(C, D), !, '$set_prolog_impl_flag'(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$set_prolog_flag0'(A, B, C, D):-['$get_level'(E), '$builtin_member'(C, D), '$cut'(E), '$set_prolog_impl_flag'(B, C)])).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_cont('$set_prolog_impl_flag'(a(2), a(3), cont), p(1)).
        put_cont('$cut'(a(5), p(1)), p(2)).
        execute('$builtin_member'(a(3), a(4), p(2))).
'$set_prolog_flag0'/4+3 :
        comment(('$set_prolog_flag0'(A, B, C, D):-illarg(domain(atom, flag_value), set_prolog_flag(B, C), 2))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$set_prolog_flag0'(A, B, C, D):-[illarg(domain(atom, flag_value), set_prolog_flag(B, C), 2)])).
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(5), y(1), a(5)).
        execute(illarg(s(10), a(5), si(11), cont)).
end_predicate('$set_prolog_flag0'/4).

begin_predicate(current_prolog_flag/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([current_prolog_flag/2, 'builtins.pl']).
main(current_prolog_flag/2, (public)) :
        put_con(type/1, s(1)).
        put_con(atom, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(current_prolog_flag/2, s(5)).
        put_int(1, si(6)).
        label(current_prolog_flag/2+sub+1).
        label(current_prolog_flag/2+sub+2).
        label(current_prolog_flag/2+1).
        label(current_prolog_flag/2+2).
        label(current_prolog_flag/2+3).
current_prolog_flag/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try(current_prolog_flag/2+1, current_prolog_flag/2+sub+1).
current_prolog_flag/2+sub+1 :
        retry(current_prolog_flag/2+2, current_prolog_flag/2+sub+2).
current_prolog_flag/2+sub+2 :
        trust(current_prolog_flag/2+3).
current_prolog_flag/2+1 :
        comment((current_prolog_flag(A, B):-var(A), !, '$prolog_impl_flag'(A, C, D), '$get_prolog_impl_flag'(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((current_prolog_flag(A, B):-['$get_level'(C), var(A), '$cut'(C), '$prolog_impl_flag'(A, D, E), '$get_prolog_impl_flag'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        put_cont('$get_prolog_impl_flag'(a(1), a(2), cont), p(1)).
        execute('$prolog_impl_flag'(a(1), void, void, p(1))).
current_prolog_flag/2+2 :
        comment((current_prolog_flag(A, B):-atom(A), !, '$dummy_23_builtins.pl'(A, B, C, D))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((current_prolog_flag(A, B):-['$get_level'(C), atom(A), '$cut'(C), '$dummy_23_builtins.pl'(A, B, D, E)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(atom(a(1))).
        inline('$cut'(a(3))).
        execute('$dummy_23_builtins.pl'(a(1), a(2), void, void, cont)).
current_prolog_flag/2+3 :
        comment((current_prolog_flag(A, B):-illarg(type(atom), current_prolog_flag(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((current_prolog_flag(A, B):-[illarg(type(atom), current_prolog_flag(A, B), 1)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(5), y(1), a(3)).
        execute(illarg(s(4), a(3), si(6), cont)).
end_predicate(current_prolog_flag/2).

begin_predicate('$dummy_23_builtins.pl'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_23_builtins.pl'/4, 'builtins.pl']).
main('$dummy_23_builtins.pl'/4, non- (public)) :
        put_con(domain/2, s(1)).
        put_con(atom, s(2)).
        put_con(prolog_flag, s(3)).
        put_str_args([s(2), s(3)], s(4)).
        put_str(s(1), s(4), s(5)).
        put_con(current_prolog_flag/2, s(6)).
        put_int(1, si(7)).
        label('$dummy_23_builtins.pl'/4+sub+1).
        label('$dummy_23_builtins.pl'/4+1).
        label('$dummy_23_builtins.pl'/4+2).
'$dummy_23_builtins.pl'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        try('$dummy_23_builtins.pl'/4+1, '$dummy_23_builtins.pl'/4+sub+1).
'$dummy_23_builtins.pl'/4+sub+1 :
        trust('$dummy_23_builtins.pl'/4+2).
'$dummy_23_builtins.pl'/4+1 :
        comment(('$dummy_23_builtins.pl'(A, B, C, D):-'$prolog_impl_flag'(A, C, D), !, '$get_prolog_impl_flag'(A, B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dummy_23_builtins.pl'(A, B, C, D):-['$get_level'(E), '$prolog_impl_flag'(A, C, D), '$cut'(E), '$get_prolog_impl_flag'(A, B)])).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        put_cont('$get_prolog_impl_flag'(a(1), a(2), cont), p(1)).
        put_cont('$cut'(a(5), p(1)), p(2)).
        execute('$prolog_impl_flag'(a(1), a(3), a(4), p(2))).
'$dummy_23_builtins.pl'/4+2 :
        comment(('$dummy_23_builtins.pl'(A, B, C, D):-illarg(domain(atom, prolog_flag), current_prolog_flag(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dummy_23_builtins.pl'(A, B, C, D):-[illarg(domain(atom, prolog_flag), current_prolog_flag(A, B), 1)])).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(6), y(1), a(5)).
        execute(illarg(s(5), a(5), si(7), cont)).
end_predicate('$dummy_23_builtins.pl'/4).

begin_predicate('$prolog_impl_flag'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$prolog_impl_flag'/3, 'builtins.pl']).
main('$prolog_impl_flag'/3, non- (public)) :
        put_con(max_integer, s(1)).
        put_con(changeable/1, s(2)).
        put_con(no, s(3)).
        put_str_args([s(3)], s(4)).
        put_str(s(2), s(4), s(5)).
        put_con(min_integer, s(6)).
        put_con(debug, s(7)).
        put_con(on, s(8)).
        put_con(off, s(9)).
        put_con([], s(10)).
        put_list(s(9), s(10), s(11)).
        put_list(s(8), s(11), s(12)).
        put_con(yes, s(13)).
        put_str_args([s(13)], s(14)).
        put_str(s(2), s(14), s(15)).
        put_con(max_arity, s(16)).
        put_con(unknown, s(17)).
        put_con(error, s(18)).
        put_con(fail, s(19)).
        put_con(warning, s(20)).
        put_list(s(20), s(10), s(21)).
        put_list(s(19), s(21), s(22)).
        put_list(s(18), s(22), s(23)).
        put_con(double_quotes, s(24)).
        put_con(chars, s(25)).
        put_con(codes, s(26)).
        put_con(atom, s(27)).
        put_list(s(27), s(10), s(28)).
        put_list(s(26), s(28), s(29)).
        put_list(s(25), s(29), s(30)).
        put_con(print_stack_trace, s(31)).
        label(fail/0).
        label('$prolog_impl_flag'/3+var).
        label('$prolog_impl_flag'/3+var+1).
        label('$prolog_impl_flag'/3+var+2).
        label('$prolog_impl_flag'/3+var+3).
        label('$prolog_impl_flag'/3+var+4).
        label('$prolog_impl_flag'/3+var+5).
        label('$prolog_impl_flag'/3+var+6).
        label('$prolog_impl_flag'/3+con).
        label('$prolog_impl_flag'/3+1).
        label('$prolog_impl_flag'/3+2).
        label('$prolog_impl_flag'/3+3).
        label('$prolog_impl_flag'/3+4).
        label('$prolog_impl_flag'/3+5).
        label('$prolog_impl_flag'/3+6).
        label('$prolog_impl_flag'/3+7).
        new_hash(con, 7).
        static([put_hash(s(1), '$prolog_impl_flag'/3+1, con), put_hash(s(6), '$prolog_impl_flag'/3+2, con), put_hash(s(7), '$prolog_impl_flag'/3+3, con), put_hash(s(16), '$prolog_impl_flag'/3+4, con), put_hash(s(17), '$prolog_impl_flag'/3+5, con), put_hash(s(24), '$prolog_impl_flag'/3+6, con), put_hash(s(31), '$prolog_impl_flag'/3+7, con)]).
'$prolog_impl_flag'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$prolog_impl_flag'/3+var, fail/0, fail/0, '$prolog_impl_flag'/3+con, fail/0, fail/0).
'$prolog_impl_flag'/3+var :
        try('$prolog_impl_flag'/3+1, '$prolog_impl_flag'/3+var+1).
'$prolog_impl_flag'/3+var+1 :
        retry('$prolog_impl_flag'/3+2, '$prolog_impl_flag'/3+var+2).
'$prolog_impl_flag'/3+var+2 :
        retry('$prolog_impl_flag'/3+3, '$prolog_impl_flag'/3+var+3).
'$prolog_impl_flag'/3+var+3 :
        retry('$prolog_impl_flag'/3+4, '$prolog_impl_flag'/3+var+4).
'$prolog_impl_flag'/3+var+4 :
        retry('$prolog_impl_flag'/3+5, '$prolog_impl_flag'/3+var+5).
'$prolog_impl_flag'/3+var+5 :
        retry('$prolog_impl_flag'/3+6, '$prolog_impl_flag'/3+var+6).
'$prolog_impl_flag'/3+var+6 :
        trust('$prolog_impl_flag'/3+7).
'$prolog_impl_flag'/3+con :
        switch_on_hash(con, 7, fail/0, [max_integer:'$prolog_impl_flag'/3+1, min_integer:'$prolog_impl_flag'/3+2, debug:'$prolog_impl_flag'/3+3, max_arity:'$prolog_impl_flag'/3+4, unknown:'$prolog_impl_flag'/3+5, double_quotes:'$prolog_impl_flag'/3+6, print_stack_trace:'$prolog_impl_flag'/3+7]).
'$prolog_impl_flag'/3+1 :
        comment(('$prolog_impl_flag'(max_integer, A, changeable(no)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$prolog_impl_flag'(max_integer, A, changeable(no)):-[])).
        get_con(max_integer, s(1), a(1)).
        get_ground(changeable(no), s(5), a(3)).
        execute(cont).
'$prolog_impl_flag'/3+2 :
        comment(('$prolog_impl_flag'(min_integer, A, changeable(no)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$prolog_impl_flag'(min_integer, A, changeable(no)):-[])).
        get_con(min_integer, s(6), a(1)).
        get_ground(changeable(no), s(5), a(3)).
        execute(cont).
'$prolog_impl_flag'/3+3 :
        comment(('$prolog_impl_flag'(debug, [on, off], changeable(yes)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$prolog_impl_flag'(debug, [on, off], changeable(yes)):-[])).
        get_con(debug, s(7), a(1)).
        get_ground([on, off], s(12), a(2)).
        get_ground(changeable(yes), s(15), a(3)).
        execute(cont).
'$prolog_impl_flag'/3+4 :
        comment(('$prolog_impl_flag'(max_arity, A, changeable(no)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$prolog_impl_flag'(max_arity, A, changeable(no)):-[])).
        get_con(max_arity, s(16), a(1)).
        get_ground(changeable(no), s(5), a(3)).
        execute(cont).
'$prolog_impl_flag'/3+5 :
        comment(('$prolog_impl_flag'(unknown, [error, fail, warning], changeable(yes)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$prolog_impl_flag'(unknown, [error, fail, warning], changeable(yes)):-[])).
        get_con(unknown, s(17), a(1)).
        get_ground([error, fail, warning], s(23), a(2)).
        get_ground(changeable(yes), s(15), a(3)).
        execute(cont).
'$prolog_impl_flag'/3+6 :
        comment(('$prolog_impl_flag'(double_quotes, [chars, codes, atom], changeable(no)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$prolog_impl_flag'(double_quotes, [chars, codes, atom], changeable(no)):-[])).
        get_con(double_quotes, s(24), a(1)).
        get_ground([chars, codes, atom], s(30), a(2)).
        get_ground(changeable(no), s(5), a(3)).
        execute(cont).
'$prolog_impl_flag'/3+7 :
        comment(('$prolog_impl_flag'(print_stack_trace, [on, off], changeable(yes)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$prolog_impl_flag'(print_stack_trace, [on, off], changeable(yes)):-[])).
        get_con(print_stack_trace, s(31), a(1)).
        get_ground([on, off], s(12), a(2)).
        get_ground(changeable(yes), s(15), a(3)).
        execute(cont).
end_predicate('$prolog_impl_flag'/3).

begin_predicate(halt/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([halt/0, 'builtins.pl']).
main(halt/0, (public)) :
        put_int(1, si(1)).
halt/0 :
        comment((halt:-halt(1))).
        setB0.
        comment((halt:-[halt(1)])).
        execute(halt(si(1), cont)).
end_predicate(halt/0).

begin_predicate(abort/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([abort/0, 'builtins.pl']).
main(abort/0, (public)) :
        put_con('Execution aborted', s(1)).
abort/0 :
        comment((abort:-raise_exception('Execution aborted'))).
        setB0.
        comment((abort:-[raise_exception('Execution aborted')])).
        execute(raise_exception(s(1), cont)).
end_predicate(abort/0).

begin_predicate('C'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['C'/3, 'builtins.pl']).
main('C'/3, (public)) :
'C'/3 :
        comment(('C'([A|B], A, B):-true)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment(('C'([A|B], A, B):-[])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_val(a(4), a(2)).
        get_val(a(5), a(3)).
        execute(cont).
end_predicate('C'/3).

begin_predicate(expand_term/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([expand_term/2, 'builtins.pl']).
main(expand_term/2, (public)) :
        label(expand_term/2+sub+1).
        label(expand_term/2+sub+2).
        label(expand_term/2+1).
        label(expand_term/2+2).
        label(expand_term/2+3).
expand_term/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try(expand_term/2+1, expand_term/2+sub+1).
expand_term/2+sub+1 :
        retry(expand_term/2+2, expand_term/2+sub+2).
expand_term/2+sub+2 :
        trust(expand_term/2+3).
expand_term/2+1 :
        comment((expand_term(A, B):-var(A), !, A=B)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((expand_term(A, B):-['$get_level'(C), var(A), '$cut'(C), '$unify'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        inline('$unify'(a(1), a(2))).
        execute(cont).
expand_term/2+2 :
        comment((expand_term(A, B):-'$dcg_expansion'(A, C), !, C=B)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((expand_term(A, B):-['$get_level'(C), '$dcg_expansion'(A, D), '$cut'(C), '$unify'(D, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_var(a(4)).
        put_cont('$unify'(a(4), a(2), cont), p(1)).
        put_cont('$cut'(a(3), p(1)), p(2)).
        execute('$dcg_expansion'(a(1), a(4), p(2))).
expand_term/2+3 :
        comment((expand_term(A, A):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((expand_term(A, A):-[])).
        get_val(a(1), a(2)).
        execute(cont).
end_predicate(expand_term/2).

begin_predicate('$dcg_expansion'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_expansion'/2, 'builtins.pl']).
main('$dcg_expansion'/2, non- (public)) :
        put_con((:)/2, s(1)).
        put_con((-->)/2, s(2)).
        put_con((:-)/2, s(3)).
        put_con((',')/2, s(4)).
        label('$dcg_expansion'/2+top).
        label('$dcg_expansion'/2+var).
        label('$dcg_expansion'/2+var+1).
        label('$dcg_expansion'/2+var+2).
        label('$dcg_expansion'/2+var+3).
        label('$dcg_expansion'/2+str).
        label('$dcg_expansion'/2+str+0).
        label('$dcg_expansion'/2+str+0+1).
        label('$dcg_expansion'/2+str+1).
        label('$dcg_expansion'/2+str+1+1).
        label('$dcg_expansion'/2+str+1+2).
        label('$dcg_expansion'/2+1).
        label('$dcg_expansion'/2+2).
        label('$dcg_expansion'/2+3).
        label('$dcg_expansion'/2+4).
        new_hash(str, 2).
        static([put_hash(s(1), '$dcg_expansion'/2+str+0, str), put_hash(s(2), '$dcg_expansion'/2+str+1, str)]).
'$dcg_expansion'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$dcg_expansion'/2+top).
'$dcg_expansion'/2+top :
        setB0.
        switch_on_term('$dcg_expansion'/2+var, '$dcg_expansion'/2+1, '$dcg_expansion'/2+1, '$dcg_expansion'/2+1, '$dcg_expansion'/2+str, '$dcg_expansion'/2+1).
'$dcg_expansion'/2+var :
        try('$dcg_expansion'/2+1, '$dcg_expansion'/2+var+1).
'$dcg_expansion'/2+var+1 :
        retry('$dcg_expansion'/2+2, '$dcg_expansion'/2+var+2).
'$dcg_expansion'/2+var+2 :
        retry('$dcg_expansion'/2+3, '$dcg_expansion'/2+var+3).
'$dcg_expansion'/2+var+3 :
        trust('$dcg_expansion'/2+4).
'$dcg_expansion'/2+str :
        switch_on_hash(str, 2, '$dcg_expansion'/2+1, [ (:)/2:'$dcg_expansion'/2+str+0, (-->)/2:'$dcg_expansion'/2+str+1]).
'$dcg_expansion'/2+str+0 :
        try('$dcg_expansion'/2+1, '$dcg_expansion'/2+str+0+1).
'$dcg_expansion'/2+str+0+1 :
        trust('$dcg_expansion'/2+2).
'$dcg_expansion'/2+str+1 :
        try('$dcg_expansion'/2+1, '$dcg_expansion'/2+str+1+1).
'$dcg_expansion'/2+str+1+1 :
        retry('$dcg_expansion'/2+3, '$dcg_expansion'/2+str+1+2).
'$dcg_expansion'/2+str+1+2 :
        trust('$dcg_expansion'/2+4).
'$dcg_expansion'/2+1 :
        comment(('$dcg_expansion'(A, B):-var(A), !, A=B)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dcg_expansion'(A, B):-['$get_level'(C), var(A), '$cut'(C), '$unify'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        inline('$unify'(a(1), a(2))).
        execute(cont).
'$dcg_expansion'/2+2 :
        comment(('$dcg_expansion'(A:B, A:C):-!, '$dcg_expansion'(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dcg_expansion'(A:B, A:C):-['$neck_cut', '$dcg_expansion'(B, C)])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_str((:)/2, s(1), a(2)).
        unify_val(a(3)).
        unify_var(a(5)).
        inline('$neck_cut').
        set(a(4), ea(1)).
        set(a(5), ea(2)).
        set(cont, econt).
        goto('$dcg_expansion'/2+top).
'$dcg_expansion'/2+3 :
        comment(('$dcg_expansion'((A-->B), (C:-D, E)):-nonvar(A), A= (F, G), !, '$dcg_translate_dcg_atom'(F, C, H, I), '$dcg_translate_dcg'(B, D, H, J), '$dcg_translate_dcg'(G, E, I, J))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dcg_expansion'((A-->B), (C:-D, E)):-['$get_level'(F), nonvar(A), '$unify'(A, (G, H)), '$cut'(F), '$dcg_translate_dcg_atom'(G, C, I, J), '$dcg_translate_dcg'(B, D, I, K), '$dcg_translate_dcg'(H, E, J, K)])).
        get_str((-->)/2, s(2), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_str((:-)/2, s(3), a(2)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str((',')/2, s(4), a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        put_var(a(9)).
        inline('$get_level'(a(9))).
        inline(nonvar(a(3))).
        put_var(a(10)).
        put_var(a(11)).
        put_str_args([a(10), a(11)], y(1)).
        put_str(s(4), y(1), a(12)).
        inline('$unify'(a(3), a(12))).
        inline('$cut'(a(9))).
        put_var(a(13)).
        put_var(a(14)).
        put_var(a(15)).
        put_cont('$dcg_translate_dcg'(a(11), a(8), a(14), a(15), cont), p(1)).
        put_cont('$dcg_translate_dcg'(a(4), a(7), a(13), a(15), p(1)), p(2)).
        execute('$dcg_translate_dcg_atom'(a(10), a(5), a(13), a(14), p(2))).
'$dcg_expansion'/2+4 :
        comment(('$dcg_expansion'((A-->B), (C:-D)):-'$dcg_translate_dcg_atom'(A, C, E, F), '$dcg_translate_dcg'(B, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dcg_expansion'((A-->B), (C:-D)):-['$dcg_translate_dcg_atom'(A, C, E, F), '$dcg_translate_dcg'(B, D, E, F)])).
        get_str((-->)/2, s(2), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_str((:-)/2, s(3), a(2)).
        unify_var(a(5)).
        unify_var(a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_cont('$dcg_translate_dcg'(a(4), a(6), a(7), a(8), cont), p(1)).
        execute('$dcg_translate_dcg_atom'(a(3), a(5), a(7), a(8), p(1))).
end_predicate('$dcg_expansion'/2).

begin_predicate('$dummy_24_builtins.pl'/6).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_24_builtins.pl'/6, 'builtins.pl']).
main('$dummy_24_builtins.pl'/6, non- (public)) :
        put_con((=)/2, s(1)).
        label('$dummy_24_builtins.pl'/6+sub+1).
        label('$dummy_24_builtins.pl'/6+1).
        label('$dummy_24_builtins.pl'/6+2).
'$dummy_24_builtins.pl'/6 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(cont, econt).
        setB0.
        try('$dummy_24_builtins.pl'/6+1, '$dummy_24_builtins.pl'/6+sub+1).
'$dummy_24_builtins.pl'/6+sub+1 :
        trust('$dummy_24_builtins.pl'/6+2).
'$dummy_24_builtins.pl'/6+1 :
        comment(('$dummy_24_builtins.pl'(A, B, C, D, E, F):-F\==C, !, D=F, '$dcg_connect'(A, E, B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_24_builtins.pl'(A, B, C, D, E, F):-['$get_level'(G), '$inequality_of_term'(F, C), '$cut'(G), '$unify'(D, F), '$dcg_connect'(A, E, B)])).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        inline('$inequality_of_term'(a(6), a(3))).
        inline('$cut'(a(7))).
        inline('$unify'(a(4), a(6))).
        execute('$dcg_connect'(a(1), a(5), a(2), cont)).
'$dummy_24_builtins.pl'/6+2 :
        comment(('$dummy_24_builtins.pl'(A, B, C, D, E, F):-'$dcg_connect'(A, E, D=F, B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_24_builtins.pl'(A, B, C, D, E, F):-['$dcg_connect'(A, E, D=F, B)])).
        put_str_args([a(4), a(6)], y(1)).
        put_str(s(1), y(1), a(7)).
        execute('$dcg_connect'(a(1), a(5), a(7), a(2), cont)).
end_predicate('$dummy_24_builtins.pl'/6).

begin_predicate('$dcg_translate_dcg'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_translate_dcg'/4, 'builtins.pl']).
main('$dcg_translate_dcg'/4, non- (public)) :
'$dcg_translate_dcg'/4 :
        comment(('$dcg_translate_dcg'(A, B, C, D):-'$dcg_translate_dcg'(A, E, F, C, D), '$dummy_24_builtins.pl'(A, B, C, D, E, F))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        set(arg(4), a(4)).
        comment(('$dcg_translate_dcg'(A, B, C, D):-['$dcg_translate_dcg'(A, E, F, C, D), '$dummy_24_builtins.pl'(A, B, C, D, E, F)])).
        put_var(a(5)).
        put_var(a(6)).
        put_cont('$dummy_24_builtins.pl'(a(1), a(2), a(3), a(4), a(5), a(6), cont), p(1)).
        execute('$dcg_translate_dcg'(a(1), a(5), a(6), a(3), a(4), p(1))).
end_predicate('$dcg_translate_dcg'/4).

begin_predicate('$dcg_connect'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_connect'/3, 'builtins.pl']).
main('$dcg_connect'/3, non- (public)) :
        put_con((->)/2, s(1)).
        put_con((',')/2, s(2)).
        put_con(true, s(3)).
        label('$dcg_connect'/3+var).
        label('$dcg_connect'/3+var+1).
        label('$dcg_connect'/3+var+2).
        label('$dcg_connect'/3+int).
        label('$dcg_connect'/3+int+1).
        label('$dcg_connect'/3+1).
        label('$dcg_connect'/3+2).
        label('$dcg_connect'/3+3).
'$dcg_connect'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$dcg_connect'/3+var, '$dcg_connect'/3+int, '$dcg_connect'/3+int, '$dcg_connect'/3+int, '$dcg_connect'/3+var, '$dcg_connect'/3+int).
'$dcg_connect'/3+var :
        try('$dcg_connect'/3+1, '$dcg_connect'/3+var+1).
'$dcg_connect'/3+var+1 :
        retry('$dcg_connect'/3+2, '$dcg_connect'/3+var+2).
'$dcg_connect'/3+var+2 :
        trust('$dcg_connect'/3+3).
'$dcg_connect'/3+int :
        try('$dcg_connect'/3+2, '$dcg_connect'/3+int+1).
'$dcg_connect'/3+int+1 :
        trust('$dcg_connect'/3+3).
'$dcg_connect'/3+1 :
        comment(('$dcg_connect'((A->B), C, C):-C= (D->E), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_connect'((A->B), C, C):-['$get_level'(D), '$unify'(C, (E->F)), '$cut'(D)])).
        get_str((->)/2, s(1), a(1)).
        unify_void(1).
        unify_void(1).
        get_val(a(2), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        put_str_args([void, void], y(1)).
        put_str(s(1), y(1), a(5)).
        inline('$unify'(a(2), a(5))).
        inline('$cut'(a(4))).
        execute(cont).
'$dcg_connect'/3+2 :
        comment(('$dcg_connect'(A, (B->C), ((B->C), true)):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_connect'(A, (B->C), ((B->C), true)):-['$neck_cut'])).
        get_str((->)/2, s(1), a(2)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_str((',')/2, s(2), a(3)).
        unify_var(a(6)).
        unify_con(true, s(3)).
        get_str((->)/2, s(1), a(6)).
        unify_val(a(4)).
        unify_val(a(5)).
        inline('$neck_cut').
        execute(cont).
'$dcg_connect'/3+3 :
        comment(('$dcg_connect'(A, B, B):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_connect'(A, B, B):-[])).
        get_val(a(2), a(3)).
        execute(cont).
end_predicate('$dcg_connect'/3).

begin_predicate('$dcg_connect'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_connect'/4, 'builtins.pl']).
main('$dcg_connect'/4, non- (public)) :
        put_con((->)/2, s(1)).
        put_con((',')/2, s(2)).
        label('$dcg_connect'/4+var).
        label('$dcg_connect'/4+var+1).
        label('$dcg_connect'/4+var+2).
        label('$dcg_connect'/4+int).
        label('$dcg_connect'/4+int+1).
        label('$dcg_connect'/4+1).
        label('$dcg_connect'/4+2).
        label('$dcg_connect'/4+3).
'$dcg_connect'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        switch_on_term('$dcg_connect'/4+var, '$dcg_connect'/4+int, '$dcg_connect'/4+int, '$dcg_connect'/4+int, '$dcg_connect'/4+var, '$dcg_connect'/4+int).
'$dcg_connect'/4+var :
        try('$dcg_connect'/4+1, '$dcg_connect'/4+var+1).
'$dcg_connect'/4+var+1 :
        retry('$dcg_connect'/4+2, '$dcg_connect'/4+var+2).
'$dcg_connect'/4+var+2 :
        trust('$dcg_connect'/4+3).
'$dcg_connect'/4+int :
        try('$dcg_connect'/4+2, '$dcg_connect'/4+int+1).
'$dcg_connect'/4+int+1 :
        trust('$dcg_connect'/4+3).
'$dcg_connect'/4+1 :
        comment(('$dcg_connect'((A->B), (C->D), E, (C->F)):-!, '$dcg_and'(D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dcg_connect'((A->B), (C->D), E, (C->F)):-['$neck_cut', '$dcg_and'(D, E, F)])).
        get_str((->)/2, s(1), a(1)).
        unify_void(1).
        unify_void(1).
        get_str((->)/2, s(1), a(2)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str((->)/2, s(1), a(4)).
        unify_val(a(5)).
        unify_var(a(7)).
        inline('$neck_cut').
        execute('$dcg_and'(a(6), a(3), a(7), cont)).
'$dcg_connect'/4+2 :
        comment(('$dcg_connect'(A, (B->C), D, ((B->C), D)):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dcg_connect'(A, (B->C), D, ((B->C), D)):-['$neck_cut'])).
        get_str((->)/2, s(1), a(2)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str((',')/2, s(2), a(4)).
        unify_var(a(7)).
        unify_val(a(3)).
        get_str((->)/2, s(1), a(7)).
        unify_val(a(5)).
        unify_val(a(6)).
        inline('$neck_cut').
        execute(cont).
'$dcg_connect'/4+3 :
        comment(('$dcg_connect'(A, B, C, D):-'$dcg_and'(B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dcg_connect'(A, B, C, D):-['$dcg_and'(B, C, D)])).
        execute('$dcg_and'(a(2), a(3), a(4), cont)).
end_predicate('$dcg_connect'/4).

begin_predicate('$dcg_translate_dcg'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_translate_dcg'/5, 'builtins.pl']).
main('$dcg_translate_dcg'/5, non- (public)) :
        put_con((:)/2, s(1)).
        put_con([], s(2)).
        put_con(true, s(3)).
        put_con('C'/3, s(4)).
        put_con((\+)/1, s(5)).
        put_con((;)/2, s(6)).
        put_con((->)/2, s(7)).
        put_con(fail, s(8)).
        put_con((=)/2, s(9)).
        put_con((',')/2, s(10)).
        put_con(if/3, s(11)).
        put_con(!, s(12)).
        put_con({}/1, s(13)).
        put_con(call/1, s(14)).
        label('$dcg_translate_dcg'/5+top).
        label('$dcg_translate_dcg'/5+var).
        label('$dcg_translate_dcg'/5+var+1).
        label('$dcg_translate_dcg'/5+var+2).
        label('$dcg_translate_dcg'/5+var+3).
        label('$dcg_translate_dcg'/5+var+4).
        label('$dcg_translate_dcg'/5+var+5).
        label('$dcg_translate_dcg'/5+var+6).
        label('$dcg_translate_dcg'/5+var+7).
        label('$dcg_translate_dcg'/5+var+8).
        label('$dcg_translate_dcg'/5+var+9).
        label('$dcg_translate_dcg'/5+var+10).
        label('$dcg_translate_dcg'/5+var+11).
        label('$dcg_translate_dcg'/5+var+12).
        label('$dcg_translate_dcg'/5+int).
        label('$dcg_translate_dcg'/5+int+1).
        label('$dcg_translate_dcg'/5+con).
        label('$dcg_translate_dcg'/5+con+0).
        label('$dcg_translate_dcg'/5+con+0+1).
        label('$dcg_translate_dcg'/5+con+0+2).
        label('$dcg_translate_dcg'/5+con+1).
        label('$dcg_translate_dcg'/5+con+1+1).
        label('$dcg_translate_dcg'/5+con+1+2).
        label('$dcg_translate_dcg'/5+str).
        label('$dcg_translate_dcg'/5+str+0).
        label('$dcg_translate_dcg'/5+str+0+1).
        label('$dcg_translate_dcg'/5+str+0+2).
        label('$dcg_translate_dcg'/5+str+1).
        label('$dcg_translate_dcg'/5+str+1+1).
        label('$dcg_translate_dcg'/5+str+1+2).
        label('$dcg_translate_dcg'/5+str+2).
        label('$dcg_translate_dcg'/5+str+2+1).
        label('$dcg_translate_dcg'/5+str+2+2).
        label('$dcg_translate_dcg'/5+str+3).
        label('$dcg_translate_dcg'/5+str+3+1).
        label('$dcg_translate_dcg'/5+str+3+2).
        label('$dcg_translate_dcg'/5+str+4).
        label('$dcg_translate_dcg'/5+str+4+1).
        label('$dcg_translate_dcg'/5+str+4+2).
        label('$dcg_translate_dcg'/5+str+5).
        label('$dcg_translate_dcg'/5+str+5+1).
        label('$dcg_translate_dcg'/5+str+5+2).
        label('$dcg_translate_dcg'/5+str+6).
        label('$dcg_translate_dcg'/5+str+6+1).
        label('$dcg_translate_dcg'/5+str+6+2).
        label('$dcg_translate_dcg'/5+str+6+3).
        label('$dcg_translate_dcg'/5+lis).
        label('$dcg_translate_dcg'/5+lis+1).
        label('$dcg_translate_dcg'/5+lis+2).
        label('$dcg_translate_dcg'/5+1).
        label('$dcg_translate_dcg'/5+2).
        label('$dcg_translate_dcg'/5+3).
        label('$dcg_translate_dcg'/5+4).
        label('$dcg_translate_dcg'/5+5).
        label('$dcg_translate_dcg'/5+6).
        label('$dcg_translate_dcg'/5+7).
        label('$dcg_translate_dcg'/5+8).
        label('$dcg_translate_dcg'/5+9).
        label('$dcg_translate_dcg'/5+10).
        label('$dcg_translate_dcg'/5+11).
        label('$dcg_translate_dcg'/5+12).
        label('$dcg_translate_dcg'/5+13).
        new_hash(con, 2).
        new_hash(str, 7).
        static([put_hash(s(2), '$dcg_translate_dcg'/5+con+0, con), put_hash(s(12), '$dcg_translate_dcg'/5+con+1, con), put_hash(s(1), '$dcg_translate_dcg'/5+str+0, str), put_hash(s(5), '$dcg_translate_dcg'/5+str+1, str), put_hash(s(10), '$dcg_translate_dcg'/5+str+2, str), put_hash(s(7), '$dcg_translate_dcg'/5+str+3, str), put_hash(s(11), '$dcg_translate_dcg'/5+str+4, str), put_hash(s(6), '$dcg_translate_dcg'/5+str+5, str), put_hash(s(13), '$dcg_translate_dcg'/5+str+6, str)]).
'$dcg_translate_dcg'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        goto('$dcg_translate_dcg'/5+top).
'$dcg_translate_dcg'/5+top :
        setB0.
        switch_on_term('$dcg_translate_dcg'/5+var, '$dcg_translate_dcg'/5+int, '$dcg_translate_dcg'/5+int, '$dcg_translate_dcg'/5+con, '$dcg_translate_dcg'/5+str, '$dcg_translate_dcg'/5+lis).
'$dcg_translate_dcg'/5+var :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+var+1).
'$dcg_translate_dcg'/5+var+1 :
        retry('$dcg_translate_dcg'/5+2, '$dcg_translate_dcg'/5+var+2).
'$dcg_translate_dcg'/5+var+2 :
        retry('$dcg_translate_dcg'/5+3, '$dcg_translate_dcg'/5+var+3).
'$dcg_translate_dcg'/5+var+3 :
        retry('$dcg_translate_dcg'/5+4, '$dcg_translate_dcg'/5+var+4).
'$dcg_translate_dcg'/5+var+4 :
        retry('$dcg_translate_dcg'/5+5, '$dcg_translate_dcg'/5+var+5).
'$dcg_translate_dcg'/5+var+5 :
        retry('$dcg_translate_dcg'/5+6, '$dcg_translate_dcg'/5+var+6).
'$dcg_translate_dcg'/5+var+6 :
        retry('$dcg_translate_dcg'/5+7, '$dcg_translate_dcg'/5+var+7).
'$dcg_translate_dcg'/5+var+7 :
        retry('$dcg_translate_dcg'/5+8, '$dcg_translate_dcg'/5+var+8).
'$dcg_translate_dcg'/5+var+8 :
        retry('$dcg_translate_dcg'/5+9, '$dcg_translate_dcg'/5+var+9).
'$dcg_translate_dcg'/5+var+9 :
        retry('$dcg_translate_dcg'/5+10, '$dcg_translate_dcg'/5+var+10).
'$dcg_translate_dcg'/5+var+10 :
        retry('$dcg_translate_dcg'/5+11, '$dcg_translate_dcg'/5+var+11).
'$dcg_translate_dcg'/5+var+11 :
        retry('$dcg_translate_dcg'/5+12, '$dcg_translate_dcg'/5+var+12).
'$dcg_translate_dcg'/5+var+12 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+int :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+int+1).
'$dcg_translate_dcg'/5+int+1 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+con :
        switch_on_hash(con, 2, '$dcg_translate_dcg'/5+int, [[]:'$dcg_translate_dcg'/5+con+0, !:'$dcg_translate_dcg'/5+con+1]).
'$dcg_translate_dcg'/5+con+0 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+con+0+1).
'$dcg_translate_dcg'/5+con+0+1 :
        retry('$dcg_translate_dcg'/5+3, '$dcg_translate_dcg'/5+con+0+2).
'$dcg_translate_dcg'/5+con+0+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+con+1 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+con+1+1).
'$dcg_translate_dcg'/5+con+1+1 :
        retry('$dcg_translate_dcg'/5+10, '$dcg_translate_dcg'/5+con+1+2).
'$dcg_translate_dcg'/5+con+1+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+str :
        switch_on_hash(str, 7, '$dcg_translate_dcg'/5+int, [ (:)/2:'$dcg_translate_dcg'/5+str+0, (\+)/1:'$dcg_translate_dcg'/5+str+1, (',')/2:'$dcg_translate_dcg'/5+str+2, (->)/2:'$dcg_translate_dcg'/5+str+3, if/3:'$dcg_translate_dcg'/5+str+4, (;)/2:'$dcg_translate_dcg'/5+str+5, {}/1:'$dcg_translate_dcg'/5+str+6]).
'$dcg_translate_dcg'/5+str+0 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+str+0+1).
'$dcg_translate_dcg'/5+str+0+1 :
        retry('$dcg_translate_dcg'/5+2, '$dcg_translate_dcg'/5+str+0+2).
'$dcg_translate_dcg'/5+str+0+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+str+1 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+str+1+1).
'$dcg_translate_dcg'/5+str+1+1 :
        retry('$dcg_translate_dcg'/5+5, '$dcg_translate_dcg'/5+str+1+2).
'$dcg_translate_dcg'/5+str+1+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+str+2 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+str+2+1).
'$dcg_translate_dcg'/5+str+2+1 :
        retry('$dcg_translate_dcg'/5+6, '$dcg_translate_dcg'/5+str+2+2).
'$dcg_translate_dcg'/5+str+2+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+str+3 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+str+3+1).
'$dcg_translate_dcg'/5+str+3+1 :
        retry('$dcg_translate_dcg'/5+7, '$dcg_translate_dcg'/5+str+3+2).
'$dcg_translate_dcg'/5+str+3+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+str+4 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+str+4+1).
'$dcg_translate_dcg'/5+str+4+1 :
        retry('$dcg_translate_dcg'/5+8, '$dcg_translate_dcg'/5+str+4+2).
'$dcg_translate_dcg'/5+str+4+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+str+5 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+str+5+1).
'$dcg_translate_dcg'/5+str+5+1 :
        retry('$dcg_translate_dcg'/5+9, '$dcg_translate_dcg'/5+str+5+2).
'$dcg_translate_dcg'/5+str+5+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+str+6 :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+str+6+1).
'$dcg_translate_dcg'/5+str+6+1 :
        retry('$dcg_translate_dcg'/5+11, '$dcg_translate_dcg'/5+str+6+2).
'$dcg_translate_dcg'/5+str+6+2 :
        retry('$dcg_translate_dcg'/5+12, '$dcg_translate_dcg'/5+str+6+3).
'$dcg_translate_dcg'/5+str+6+3 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+lis :
        try('$dcg_translate_dcg'/5+1, '$dcg_translate_dcg'/5+lis+1).
'$dcg_translate_dcg'/5+lis+1 :
        retry('$dcg_translate_dcg'/5+4, '$dcg_translate_dcg'/5+lis+2).
'$dcg_translate_dcg'/5+lis+2 :
        trust('$dcg_translate_dcg'/5+13).
'$dcg_translate_dcg'/5+1 :
        comment(('$dcg_translate_dcg'(A, B, C, D, C):-var(A), !, '$dcg_translate_dcg_atom'(A, B, D, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'(A, B, C, D, C):-['$get_level'(E), var(A), '$cut'(E), '$dcg_translate_dcg_atom'(A, B, D, C)])).
        get_val(a(3), a(5)).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(var(a(1))).
        inline('$cut'(a(6))).
        execute('$dcg_translate_dcg_atom'(a(1), a(2), a(4), a(3), cont)).
'$dcg_translate_dcg'/5+2 :
        comment(('$dcg_translate_dcg'(A:B, A:C, D, E, F):-!, '$dcg_translate_dcg'(B, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'(A:B, A:C, D, E, F):-['$neck_cut', '$dcg_translate_dcg'(B, C, D, E, F)])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((:)/2, s(1), a(2)).
        unify_val(a(6)).
        unify_var(a(8)).
        inline('$neck_cut').
        set(a(7), ea(1)).
        set(a(8), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(a(5), ea(5)).
        set(cont, econt).
        goto('$dcg_translate_dcg'/5+top).
'$dcg_translate_dcg'/5+3 :
        comment(('$dcg_translate_dcg'([], true, A, A, B):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'([], true, A, A, B):-['$neck_cut'])).
        get_con([], s(2), a(1)).
        get_con(true, s(3), a(2)).
        get_val(a(3), a(4)).
        inline('$neck_cut').
        execute(cont).
'$dcg_translate_dcg'/5+4 :
        comment(('$dcg_translate_dcg'([A|B], C, D, E, F):-!, '$dcg_translate_dcg'(B, G, D, H, F), '$dcg_and'('C'(E, A, H), G, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'([A|B], C, D, E, F):-['$neck_cut', '$dcg_translate_dcg'(B, G, D, H, F), '$dcg_and'('C'(E, A, H), G, C)])).
        get_list(a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_var(a(8)).
        put_var(a(9)).
        put_str_args([a(4), a(6), a(9)], y(1)).
        put_str(s(4), y(1), a(10)).
        put_cont('$dcg_and'(a(10), a(8), a(2), cont), p(1)).
        set(a(7), ea(1)).
        set(a(8), ea(2)).
        set(a(3), ea(3)).
        set(a(9), ea(4)).
        set(a(5), ea(5)).
        set(p(1), econt).
        goto('$dcg_translate_dcg'/5+top).
'$dcg_translate_dcg'/5+5 :
        comment(('$dcg_translate_dcg'(\+A, (B->fail;C=D), C, D, C):-!, '$dcg_translate_dcg'(A, B, E, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'(\+A, (B->fail;C=D), C, D, C):-['$neck_cut', '$dcg_translate_dcg'(A, B, E, D, E)])).
        get_str((\+)/1, s(5), a(1)).
        unify_var(a(6)).
        get_str((;)/2, s(6), a(2)).
        unify_var(a(7)).
        unify_var(a(8)).
        get_str((->)/2, s(7), a(7)).
        unify_var(a(9)).
        unify_con(fail, s(8)).
        get_str((=)/2, s(9), a(8)).
        unify_var(a(10)).
        unify_var(a(11)).
        get_val(a(10), a(3)).
        get_val(a(11), a(4)).
        get_val(a(10), a(5)).
        inline('$neck_cut').
        put_var(a(12)).
        set(a(6), ea(1)).
        set(a(9), ea(2)).
        set(a(12), ea(3)).
        set(a(11), ea(4)).
        set(a(12), ea(5)).
        set(cont, econt).
        goto('$dcg_translate_dcg'/5+top).
'$dcg_translate_dcg'/5+6 :
        comment(('$dcg_translate_dcg'((A, B), C, D, E, F):-!, '$dcg_translate_dcg'(A, G, H, E, H), '$dcg_translate_dcg'(B, I, D, H, F), '$dcg_and'(G, I, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'((A, B), C, D, E, F):-['$neck_cut', '$dcg_translate_dcg'(A, G, H, E, H), '$dcg_translate_dcg'(B, I, D, H, F), '$dcg_and'(G, I, C)])).
        get_str((',')/2, s(10), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_var(a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_cont('$dcg_and'(a(8), a(10), a(2), cont), p(1)).
        put_cont('$dcg_translate_dcg'(a(7), a(10), a(3), a(9), a(5), p(1)), p(2)).
        set(a(6), ea(1)).
        set(a(8), ea(2)).
        set(a(9), ea(3)).
        set(a(4), ea(4)).
        set(a(9), ea(5)).
        set(p(2), econt).
        goto('$dcg_translate_dcg'/5+top).
'$dcg_translate_dcg'/5+7 :
        comment(('$dcg_translate_dcg'((A->B), (C->D), E, F, G):-!, '$dcg_translate_dcg'(A, C, H, F, H), '$dcg_translate_dcg'(B, D, E, H, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'((A->B), (C->D), E, F, G):-['$neck_cut', '$dcg_translate_dcg'(A, C, H, F, H), '$dcg_translate_dcg'(B, D, E, H, G)])).
        get_str((->)/2, s(7), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((->)/2, s(7), a(2)).
        unify_var(a(8)).
        unify_var(a(9)).
        inline('$neck_cut').
        put_var(a(10)).
        put_cont('$dcg_translate_dcg'(a(7), a(9), a(3), a(10), a(5), cont), p(1)).
        set(a(6), ea(1)).
        set(a(8), ea(2)).
        set(a(10), ea(3)).
        set(a(4), ea(4)).
        set(a(10), ea(5)).
        set(p(1), econt).
        goto('$dcg_translate_dcg'/5+top).
'$dcg_translate_dcg'/5+8 :
        comment(('$dcg_translate_dcg'(if(A, B, C), if(D, E, F), G, H, G):-!, '$dcg_translate_dcg'(A, D, H, I), '$dcg_translate_dcg'(B, E, I, G), '$dcg_translate_dcg'(C, F, I, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'(if(A, B, C), if(D, E, F), G, H, G):-['$neck_cut', '$dcg_translate_dcg'(A, D, H, I), '$dcg_translate_dcg'(B, E, I, G), '$dcg_translate_dcg'(C, F, I, G)])).
        get_str(if/3, s(11), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        unify_var(a(8)).
        get_str(if/3, s(11), a(2)).
        unify_var(a(9)).
        unify_var(a(10)).
        unify_var(a(11)).
        get_val(a(3), a(5)).
        inline('$neck_cut').
        put_var(a(12)).
        put_cont('$dcg_translate_dcg'(a(8), a(11), a(12), a(3), cont), p(1)).
        put_cont('$dcg_translate_dcg'(a(7), a(10), a(12), a(3), p(1)), p(2)).
        execute('$dcg_translate_dcg'(a(6), a(9), a(4), a(12), p(2))).
'$dcg_translate_dcg'/5+9 :
        comment(('$dcg_translate_dcg'((A;B), (C;D), E, F, E):-!, '$dcg_translate_dcg'(A, C, F, E), '$dcg_translate_dcg'(B, D, F, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'((A;B), (C;D), E, F, E):-['$neck_cut', '$dcg_translate_dcg'(A, C, F, E), '$dcg_translate_dcg'(B, D, F, E)])).
        get_str((;)/2, s(6), a(1)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((;)/2, s(6), a(2)).
        unify_var(a(8)).
        unify_var(a(9)).
        get_val(a(3), a(5)).
        inline('$neck_cut').
        put_cont('$dcg_translate_dcg'(a(7), a(9), a(4), a(3), cont), p(1)).
        execute('$dcg_translate_dcg'(a(6), a(8), a(4), a(3), p(1))).
'$dcg_translate_dcg'/5+10 :
        comment(('$dcg_translate_dcg'(!, !, A, A, B):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'(!, !, A, A, B):-['$neck_cut'])).
        get_con(!, s(12), a(1)).
        get_con(!, s(12), a(2)).
        get_val(a(3), a(4)).
        inline('$neck_cut').
        execute(cont).
'$dcg_translate_dcg'/5+11 :
        comment(('$dcg_translate_dcg'({A}, call(A), B, B, C):-var(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'({A}, call(A), B, B, C):-['$get_level'(D), var(A), '$cut'(D)])).
        get_str({}/1, s(13), a(1)).
        unify_var(a(6)).
        get_str(call/1, s(14), a(2)).
        unify_val(a(6)).
        get_val(a(3), a(4)).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        inline(var(a(6))).
        inline('$cut'(a(7))).
        execute(cont).
'$dcg_translate_dcg'/5+12 :
        comment(('$dcg_translate_dcg'({A}, A, B, B, C):-!)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'({A}, A, B, B, C):-['$neck_cut'])).
        get_str({}/1, s(13), a(1)).
        unify_var(a(6)).
        get_val(a(6), a(2)).
        get_val(a(3), a(4)).
        inline('$neck_cut').
        execute(cont).
'$dcg_translate_dcg'/5+13 :
        comment(('$dcg_translate_dcg'(A, B, C, D, C):-'$dcg_translate_dcg_atom'(A, B, D, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dcg_translate_dcg'(A, B, C, D, C):-['$dcg_translate_dcg_atom'(A, B, D, C)])).
        get_val(a(3), a(5)).
        execute('$dcg_translate_dcg_atom'(a(1), a(2), a(4), a(3), cont)).
end_predicate('$dcg_translate_dcg'/5).

begin_predicate('$dcg_and'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_and'/3, 'builtins.pl']).
main('$dcg_and'/3, non- (public)) :
        put_con(true, s(1)).
        put_con((',')/2, s(2)).
        label('$dcg_and'/3+sub+1).
        label('$dcg_and'/3+sub+2).
        label('$dcg_and'/3+1).
        label('$dcg_and'/3+2).
        label('$dcg_and'/3+3).
'$dcg_and'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dcg_and'/3+1, '$dcg_and'/3+sub+1).
'$dcg_and'/3+sub+1 :
        retry('$dcg_and'/3+2, '$dcg_and'/3+sub+2).
'$dcg_and'/3+sub+2 :
        trust('$dcg_and'/3+3).
'$dcg_and'/3+1 :
        comment(('$dcg_and'(A, B, C):-A==true, !, C=B)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_and'(A, B, C):-['$get_level'(D), '$equality_of_term'(A, true), '$cut'(D), '$unify'(C, B)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline('$equality_of_term'(a(1), s(1))).
        inline('$cut'(a(4))).
        inline('$unify'(a(3), a(2))).
        execute(cont).
'$dcg_and'/3+2 :
        comment(('$dcg_and'(A, B, C):-B==true, !, C=A)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_and'(A, B, C):-['$get_level'(D), '$equality_of_term'(B, true), '$cut'(D), '$unify'(C, A)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline('$equality_of_term'(a(2), s(1))).
        inline('$cut'(a(4))).
        inline('$unify'(a(3), a(1))).
        execute(cont).
'$dcg_and'/3+3 :
        comment(('$dcg_and'(A, B, (A, B)):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_and'(A, B, (A, B)):-[])).
        get_str((',')/2, s(2), a(3)).
        unify_val(a(1)).
        unify_val(a(2)).
        execute(cont).
end_predicate('$dcg_and'/3).

begin_predicate('$dcg_translate_dcg_atom'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_translate_dcg_atom'/4, 'builtins.pl']).
main('$dcg_translate_dcg_atom'/4, non- (public)) :
        put_con(phrase/3, s(1)).
        put_con((:)/2, s(2)).
        put_int(1, si(3)).
        put_int(2, si(4)).
        label('$dcg_translate_dcg_atom'/4+top).
        label('$dcg_translate_dcg_atom'/4+var).
        label('$dcg_translate_dcg_atom'/4+var+1).
        label('$dcg_translate_dcg_atom'/4+var+2).
        label('$dcg_translate_dcg_atom'/4+int).
        label('$dcg_translate_dcg_atom'/4+int+1).
        label('$dcg_translate_dcg_atom'/4+1).
        label('$dcg_translate_dcg_atom'/4+2).
        label('$dcg_translate_dcg_atom'/4+3).
'$dcg_translate_dcg_atom'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        goto('$dcg_translate_dcg_atom'/4+top).
'$dcg_translate_dcg_atom'/4+top :
        setB0.
        switch_on_term('$dcg_translate_dcg_atom'/4+var, '$dcg_translate_dcg_atom'/4+int, '$dcg_translate_dcg_atom'/4+int, '$dcg_translate_dcg_atom'/4+int, '$dcg_translate_dcg_atom'/4+var, '$dcg_translate_dcg_atom'/4+int).
'$dcg_translate_dcg_atom'/4+var :
        try('$dcg_translate_dcg_atom'/4+1, '$dcg_translate_dcg_atom'/4+var+1).
'$dcg_translate_dcg_atom'/4+var+1 :
        retry('$dcg_translate_dcg_atom'/4+2, '$dcg_translate_dcg_atom'/4+var+2).
'$dcg_translate_dcg_atom'/4+var+2 :
        trust('$dcg_translate_dcg_atom'/4+3).
'$dcg_translate_dcg_atom'/4+int :
        try('$dcg_translate_dcg_atom'/4+1, '$dcg_translate_dcg_atom'/4+int+1).
'$dcg_translate_dcg_atom'/4+int+1 :
        trust('$dcg_translate_dcg_atom'/4+3).
'$dcg_translate_dcg_atom'/4+1 :
        comment(('$dcg_translate_dcg_atom'(A, B, C, D):-var(A), !, B=phrase(A, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dcg_translate_dcg_atom'(A, B, C, D):-['$get_level'(E), var(A), '$cut'(E), '$unify'(B, phrase(A, C, D))])).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        inline(var(a(1))).
        inline('$cut'(a(5))).
        put_str_args([a(1), a(3), a(4)], y(1)).
        put_str(s(1), y(1), a(6)).
        inline('$unify'(a(2), a(6))).
        execute(cont).
'$dcg_translate_dcg_atom'/4+2 :
        comment(('$dcg_translate_dcg_atom'(A:B, A:C, D, E):-!, '$dcg_translate_dcg_atom'(B, C, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dcg_translate_dcg_atom'(A:B, A:C, D, E):-['$neck_cut', '$dcg_translate_dcg_atom'(B, C, D, E)])).
        get_str((:)/2, s(2), a(1)).
        unify_var(a(5)).
        unify_var(a(6)).
        get_str((:)/2, s(2), a(2)).
        unify_val(a(5)).
        unify_var(a(7)).
        inline('$neck_cut').
        set(a(6), ea(1)).
        set(a(7), ea(2)).
        set(a(3), ea(3)).
        set(a(4), ea(4)).
        set(cont, econt).
        goto('$dcg_translate_dcg_atom'/4+top).
'$dcg_translate_dcg_atom'/4+3 :
        comment(('$dcg_translate_dcg_atom'(A, B, C, D):-functor(A, E, F), G is F+1, H is F+2, functor(B, E, H), arg(G, B, C), arg(H, B, D), '$dcg_copy_args'(F, A, B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$dcg_translate_dcg_atom'(A, B, C, D):-[functor(A, E, F), '$plus'(F, 1, G), '$plus'(F, 2, H), functor(B, E, H), arg(G, B, C), arg(H, B, D), '$dcg_copy_args'(F, A, B)])).
        put_var(a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_cont('$dcg_copy_args'(a(6), a(1), a(2), cont), p(1)).
        put_cont(arg(a(8), a(2), a(4), p(1)), p(2)).
        put_cont(arg(a(7), a(2), a(3), p(2)), p(3)).
        put_cont(functor(a(2), a(5), a(8), p(3)), p(4)).
        put_cont('$plus'(a(6), si(4), a(8), p(4)), p(5)).
        put_cont('$plus'(a(6), si(3), a(7), p(5)), p(6)).
        execute(functor(a(1), a(5), a(6), p(6))).
end_predicate('$dcg_translate_dcg_atom'/4).

begin_predicate('$dcg_copy_args'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dcg_copy_args'/3, 'builtins.pl']).
main('$dcg_copy_args'/3, non- (public)) :
        put_int(0, si(1)).
        put_int(1, si(2)).
        label('$dcg_copy_args'/3+var).
        label('$dcg_copy_args'/3+var+1).
        label('$dcg_copy_args'/3+1).
        label('$dcg_copy_args'/3+2).
'$dcg_copy_args'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term('$dcg_copy_args'/3+var, '$dcg_copy_args'/3+var, '$dcg_copy_args'/3+2, '$dcg_copy_args'/3+2, '$dcg_copy_args'/3+2, '$dcg_copy_args'/3+2).
'$dcg_copy_args'/3+var :
        try('$dcg_copy_args'/3+1, '$dcg_copy_args'/3+var+1).
'$dcg_copy_args'/3+var+1 :
        trust('$dcg_copy_args'/3+2).
'$dcg_copy_args'/3+1 :
        comment(('$dcg_copy_args'(0, A, B):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_copy_args'(0, A, B):-['$neck_cut'])).
        get_int(0, si(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$dcg_copy_args'/3+2 :
        comment(('$dcg_copy_args'(A, B, C):-arg(A, B, D), arg(A, C, D), E is A-1, '$dcg_copy_args'(E, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dcg_copy_args'(A, B, C):-[arg(A, B, D), arg(A, C, D), '$minus'(A, 1, E), '$dcg_copy_args'(E, B, C)])).
        put_var(a(4)).
        put_var(a(5)).
        put_cont('$dcg_copy_args'(a(5), a(2), a(3), cont), p(1)).
        put_cont('$minus'(a(1), si(2), a(5), p(1)), p(2)).
        put_cont(arg(a(1), a(3), a(4), p(2)), p(3)).
        execute(arg(a(1), a(2), a(4), p(3))).
end_predicate('$dcg_copy_args'/3).

begin_predicate(new_hash/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([new_hash/1, 'builtins.pl']).
main(new_hash/1, (public)) :
        put_con([], s(1)).
new_hash/1 :
        comment((new_hash(A):-new_hash(A, []))).
        setB0.
        decl_term_vars([a(1)]).
        set(arg(1), a(1)).
        comment((new_hash(A):-[new_hash(A, [])])).
        execute(new_hash(a(1), s(1), cont)).
end_predicate(new_hash/1).

begin_predicate(hash_map/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([hash_map/2, 'builtins.pl']).
main(hash_map/2, (public)) :
hash_map/2 :
        comment((hash_map(A, B):-hash_keys(A, C), sort(C, D), hash_map(D, B, A))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((hash_map(A, B):-[hash_keys(A, C), sort(C, D), hash_map(D, B, A)])).
        put_var(a(3)).
        put_var(a(4)).
        put_cont(hash_map(a(4), a(2), a(1), cont), p(1)).
        put_cont(sort(a(3), a(4), p(1)), p(2)).
        execute(hash_keys(a(1), a(3), p(2))).
end_predicate(hash_map/2).

begin_predicate(hash_map/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([hash_map/3, 'builtins.pl']).
main(hash_map/3, non- (public)) :
        put_con([], s(1)).
        put_con((',')/2, s(2)).
        label(fail/0).
        label(hash_map/3+var).
        label(hash_map/3+var+1).
        label(hash_map/3+1).
        label(hash_map/3+2).
hash_map/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        switch_on_term(hash_map/3+var, fail/0, fail/0, hash_map/3+1, fail/0, hash_map/3+2).
hash_map/3+var :
        try(hash_map/3+1, hash_map/3+var+1).
hash_map/3+var+1 :
        trust(hash_map/3+2).
hash_map/3+1 :
        comment((hash_map([], [], A):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((hash_map([], [], A):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(2)).
        inline('$neck_cut').
        execute(cont).
hash_map/3+2 :
        comment((hash_map([A|B], [ (A, C)|D], E):-hash_get(E, A, C), hash_map(B, D, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((hash_map([A|B], [ (A, C)|D], E):-[hash_get(E, A, C), hash_map(B, D, E)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(2)).
        unify_var(a(6)).
        unify_var(a(7)).
        get_str((',')/2, s(2), a(6)).
        unify_val(a(4)).
        unify_var(a(8)).
        put_cont(hash_map(a(5), a(7), a(3), cont), p(1)).
        execute(hash_get(a(3), a(4), a(8), p(1))).
end_predicate(hash_map/3).

begin_predicate(java_constructor/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_constructor/2, 'builtins.pl']).
main(java_constructor/2, (public)) :
java_constructor/2 :
        comment((java_constructor(A, B):-A=..[C|D], builtin_java_convert_args(D, E), F=..[C|E], java_constructor0(F, G), B=G)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((java_constructor(A, B):-['$univ'(A, [C|D]), builtin_java_convert_args(D, E), '$univ'(F, [C|E]), java_constructor0(F, G), '$unify'(B, G)])).
        put_var(a(3)).
        put_var(a(4)).
        put_list(a(3), a(4), a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_list(a(3), a(6), a(8)).
        put_var(a(9)).
        put_cont('$unify'(a(2), a(9), cont), p(1)).
        put_cont(java_constructor0(a(7), a(9), p(1)), p(2)).
        put_cont('$univ'(a(7), a(8), p(2)), p(3)).
        put_cont(builtin_java_convert_args(a(4), a(6), p(3)), p(4)).
        execute('$univ'(a(1), a(5), p(4))).
end_predicate(java_constructor/2).

begin_predicate(java_declared_constructor/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_declared_constructor/2, 'builtins.pl']).
main(java_declared_constructor/2, (public)) :
java_declared_constructor/2 :
        comment((java_declared_constructor(A, B):-A=..[C|D], builtin_java_convert_args(D, E), F=..[C|E], java_declared_constructor0(F, G), B=G)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((java_declared_constructor(A, B):-['$univ'(A, [C|D]), builtin_java_convert_args(D, E), '$univ'(F, [C|E]), java_declared_constructor0(F, G), '$unify'(B, G)])).
        put_var(a(3)).
        put_var(a(4)).
        put_list(a(3), a(4), a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_list(a(3), a(6), a(8)).
        put_var(a(9)).
        put_cont('$unify'(a(2), a(9), cont), p(1)).
        put_cont(java_declared_constructor0(a(7), a(9), p(1)), p(2)).
        put_cont('$univ'(a(7), a(8), p(2)), p(3)).
        put_cont(builtin_java_convert_args(a(4), a(6), p(3)), p(4)).
        execute('$univ'(a(1), a(5), p(4))).
end_predicate(java_declared_constructor/2).

begin_predicate(java_method/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_method/3, 'builtins.pl']).
main(java_method/3, (public)) :
java_method/3 :
        comment((java_method(A, B, C):-B=..[D|E], builtin_java_convert_args(E, F), G=..[D|F], java_method0(A, G, H), java_conversion(I, H), C=I)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((java_method(A, B, C):-['$univ'(B, [D|E]), builtin_java_convert_args(E, F), '$univ'(G, [D|F]), java_method0(A, G, H), java_conversion(I, H), '$unify'(C, I)])).
        put_var(a(4)).
        put_var(a(5)).
        put_list(a(4), a(5), a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_list(a(4), a(7), a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_cont('$unify'(a(3), a(11), cont), p(1)).
        put_cont(java_conversion(a(11), a(10), p(1)), p(2)).
        put_cont(java_method0(a(1), a(8), a(10), p(2)), p(3)).
        put_cont('$univ'(a(8), a(9), p(3)), p(4)).
        put_cont(builtin_java_convert_args(a(5), a(7), p(4)), p(5)).
        execute('$univ'(a(2), a(6), p(5))).
end_predicate(java_method/3).

begin_predicate(java_declared_method/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_declared_method/3, 'builtins.pl']).
main(java_declared_method/3, (public)) :
java_declared_method/3 :
        comment((java_declared_method(A, B, C):-B=..[D|E], builtin_java_convert_args(E, F), G=..[D|F], java_declared_method0(A, G, H), java_conversion(I, H), C=I)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((java_declared_method(A, B, C):-['$univ'(B, [D|E]), builtin_java_convert_args(E, F), '$univ'(G, [D|F]), java_declared_method0(A, G, H), java_conversion(I, H), '$unify'(C, I)])).
        put_var(a(4)).
        put_var(a(5)).
        put_list(a(4), a(5), a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_list(a(4), a(7), a(9)).
        put_var(a(10)).
        put_var(a(11)).
        put_cont('$unify'(a(3), a(11), cont), p(1)).
        put_cont(java_conversion(a(11), a(10), p(1)), p(2)).
        put_cont(java_declared_method0(a(1), a(8), a(10), p(2)), p(3)).
        put_cont('$univ'(a(8), a(9), p(3)), p(4)).
        put_cont(builtin_java_convert_args(a(5), a(7), p(4)), p(5)).
        execute('$univ'(a(2), a(6), p(5))).
end_predicate(java_declared_method/3).

begin_predicate(java_get_field/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_get_field/3, 'builtins.pl']).
main(java_get_field/3, (public)) :
java_get_field/3 :
        comment((java_get_field(A, B, C):-java_get_field0(A, B, D), java_conversion(E, D), C=E)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((java_get_field(A, B, C):-[java_get_field0(A, B, D), java_conversion(E, D), '$unify'(C, E)])).
        put_var(a(4)).
        put_var(a(5)).
        put_cont('$unify'(a(3), a(5), cont), p(1)).
        put_cont(java_conversion(a(5), a(4), p(1)), p(2)).
        execute(java_get_field0(a(1), a(2), a(4), p(2))).
end_predicate(java_get_field/3).

begin_predicate(java_get_declared_field/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_get_declared_field/3, 'builtins.pl']).
main(java_get_declared_field/3, (public)) :
java_get_declared_field/3 :
        comment((java_get_declared_field(A, B, C):-java_get_declared_field0(A, B, D), java_conversion(E, D), C=E)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((java_get_declared_field(A, B, C):-[java_get_declared_field0(A, B, D), java_conversion(E, D), '$unify'(C, E)])).
        put_var(a(4)).
        put_var(a(5)).
        put_cont('$unify'(a(3), a(5), cont), p(1)).
        put_cont(java_conversion(a(5), a(4), p(1)), p(2)).
        execute(java_get_declared_field0(a(1), a(2), a(4), p(2))).
end_predicate(java_get_declared_field/3).

begin_predicate(java_set_field/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_set_field/3, 'builtins.pl']).
main(java_set_field/3, (public)) :
java_set_field/3 :
        comment((java_set_field(A, B, C):-java_conversion(C, D), java_set_field0(A, B, D))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((java_set_field(A, B, C):-[java_conversion(C, D), java_set_field0(A, B, D)])).
        put_var(a(4)).
        put_cont(java_set_field0(a(1), a(2), a(4), cont), p(1)).
        execute(java_conversion(a(3), a(4), p(1))).
end_predicate(java_set_field/3).

begin_predicate(java_set_declared_field/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([java_set_declared_field/3, 'builtins.pl']).
main(java_set_declared_field/3, (public)) :
java_set_declared_field/3 :
        comment((java_set_declared_field(A, B, C):-java_conversion(C, D), java_set_declared_field0(A, B, D))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((java_set_declared_field(A, B, C):-[java_conversion(C, D), java_set_declared_field0(A, B, D)])).
        put_var(a(4)).
        put_cont(java_set_declared_field0(a(1), a(2), a(4), cont), p(1)).
        execute(java_conversion(a(3), a(4), p(1))).
end_predicate(java_set_declared_field/3).

begin_predicate(builtin_java_convert_args/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([builtin_java_convert_args/2, 'builtins.pl']).
main(builtin_java_convert_args/2, non- (public)) :
        put_con([], s(1)).
        label(fail/0).
        label(builtin_java_convert_args/2+var).
        label(builtin_java_convert_args/2+var+1).
        label(builtin_java_convert_args/2+1).
        label(builtin_java_convert_args/2+2).
builtin_java_convert_args/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term(builtin_java_convert_args/2+var, fail/0, fail/0, builtin_java_convert_args/2+1, fail/0, builtin_java_convert_args/2+2).
builtin_java_convert_args/2+var :
        try(builtin_java_convert_args/2+1, builtin_java_convert_args/2+var+1).
builtin_java_convert_args/2+var+1 :
        trust(builtin_java_convert_args/2+2).
builtin_java_convert_args/2+1 :
        comment((builtin_java_convert_args([], []):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((builtin_java_convert_args([], []):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(2)).
        inline('$neck_cut').
        execute(cont).
builtin_java_convert_args/2+2 :
        comment((builtin_java_convert_args([A|B], [C|D]):-java_conversion(A, C), builtin_java_convert_args(B, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((builtin_java_convert_args([A|B], [C|D]):-[java_conversion(A, C), builtin_java_convert_args(B, D)])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_list(a(2)).
        unify_var(a(5)).
        unify_var(a(6)).
        put_cont(builtin_java_convert_args(a(4), a(6), cont), p(1)).
        execute(java_conversion(a(3), a(5), p(1))).
end_predicate(builtin_java_convert_args/2).

begin_predicate(synchronized/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([synchronized/2, 'builtins.pl']).
main(synchronized/2, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
synchronized/2 :
        comment((synchronized(A, B):-'$begin_sync'(A, C), call(B), '$end_sync'(C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment((synchronized(A, B):-['$begin_sync'(A, C), call('jp.ac.kobe_u.cs.prolog.builtin':B), '$end_sync'(C)])).
        put_var(a(3)).
        put_str_args([s(2), a(2)], y(1)).
        put_str(s(1), y(1), a(4)).
        put_cont('$end_sync'(a(3), cont), p(1)).
        put_cont(call(a(4), p(1)), p(2)).
        execute('$begin_sync'(a(1), a(3), p(2))).
end_predicate(synchronized/2).

begin_predicate(cafeteria/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([cafeteria/0, 'builtins.pl']).
main(cafeteria/0, (public)) :
        put_con(error, s(1)).
        put_con(end_of_file, s(2)).
        put_con(bye, s(3)).
cafeteria/0 :
        comment((cafeteria:-'$cafeteria_init', repeat, '$toplvel_loop', on_exception(A, '$cafeteria'(B), print_message(error, A)), B==end_of_file, !, nl, '$fast_write'(bye), nl)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8)]).
        comment((cafeteria:-['$get_level'(A), '$cafeteria_init', repeat, '$toplvel_loop', on_exception(B, 'jp.ac.kobe_u.cs.prolog.builtin':'$cafeteria'(C), 'jp.ac.kobe_u.cs.prolog.builtin':print_message(error, B)), '$equality_of_term'(C, end_of_file), '$cut'(A), nl, '$fast_write'(bye), nl])).
        put_var(a(1)).
        inline('$get_level'(a(1))).
        put_var(a(2)).
        put_var(a(3)).
        put_clo('$cafeteria'(a(3)), a(4)).
        put_clo(print_message(s(1), a(2)), a(5)).
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(3), p(1)), p(2)).
        put_cont(nl(p(2)), p(3)).
        put_cont('$cut'(a(1), p(3)), p(4)).
        put_cont('$equality_of_term'(a(3), s(2), p(4)), p(5)).
        put_cont(on_exception(a(2), a(4), a(5), p(5)), p(6)).
        put_cont('$toplvel_loop'(p(6)), p(7)).
        put_cont(repeat(p(7)), p(8)).
        execute('$cafeteria_init'(p(8))).
end_predicate(cafeteria/0).

begin_predicate('$cafeteria_init'/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$cafeteria_init'/0, 'builtins.pl']).
main('$cafeteria_init'/0, non- (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$leap_flag'/1, s(3)).
        put_con('$current_leash'/1, s(4)).
        put_con('$current_spypoint'/3, s(5)).
        put_con('$consulted_file'/1, s(6)).
        put_con('$consulted_package'/1, s(7)).
        put_con('$consulted_predicate'/3, s(8)).
        put_con(no, s(9)).
        put_str_args([s(9)], s(10)).
        put_str(s(3), s(10), s(11)).
        put_str_args([s(2), s(11)], s(12)).
        put_str(s(1), s(12), s(13)).
        put_con(call, s(14)).
        put_str_args([s(14)], s(15)).
        put_str(s(4), s(15), s(16)).
        put_str_args([s(2), s(16)], s(17)).
        put_str(s(1), s(17), s(18)).
        put_con(exit, s(19)).
        put_str_args([s(19)], s(20)).
        put_str(s(4), s(20), s(21)).
        put_str_args([s(2), s(21)], s(22)).
        put_str(s(1), s(22), s(23)).
        put_con(redo, s(24)).
        put_str_args([s(24)], s(25)).
        put_str(s(4), s(25), s(26)).
        put_str_args([s(2), s(26)], s(27)).
        put_str(s(1), s(27), s(28)).
        put_con(fail, s(29)).
        put_str_args([s(29)], s(30)).
        put_str(s(4), s(30), s(31)).
        put_str_args([s(2), s(31)], s(32)).
        put_str(s(1), s(32), s(33)).
'$cafeteria_init'/0 :
        comment(('$cafeteria_init':-retractall('$leap_flag'(A)), retractall('$current_leash'(B)), retractall('$current_spypoint'(C, D, E)), retractall('$consulted_file'(F)), retractall('$consulted_package'(G)), retractall('$consulted_predicate'(H, I, J)), assertz('$leap_flag'(no)), assertz('$current_leash'(call)), assertz('$current_leash'(exit)), assertz('$current_leash'(redo)), assertz('$current_leash'(fail)), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11)]).
        comment(('$cafeteria_init':-['$get_level'(A), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(B)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(C)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(D, E, F)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(G)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(H)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(I, J, K)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(no)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(call)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(exit)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(redo)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(fail)), '$cut'(A)])).
        put_var(a(1)).
        inline('$get_level'(a(1))).
        put_str_args([void], y(1)).
        put_str(s(3), y(1), a(2)).
        put_str_args([s(2), a(2)], y(2)).
        put_str(s(1), y(2), a(3)).
        put_str_args([void], y(3)).
        put_str(s(4), y(3), a(4)).
        put_str_args([s(2), a(4)], y(4)).
        put_str(s(1), y(4), a(5)).
        put_str_args([void, void, void], y(5)).
        put_str(s(5), y(5), a(6)).
        put_str_args([s(2), a(6)], y(6)).
        put_str(s(1), y(6), a(7)).
        put_str_args([void], y(7)).
        put_str(s(6), y(7), a(8)).
        put_str_args([s(2), a(8)], y(8)).
        put_str(s(1), y(8), a(9)).
        put_str_args([void], y(9)).
        put_str(s(7), y(9), a(10)).
        put_str_args([s(2), a(10)], y(10)).
        put_str(s(1), y(10), a(11)).
        put_str_args([void, void, void], y(11)).
        put_str(s(8), y(11), a(12)).
        put_str_args([s(2), a(12)], y(12)).
        put_str(s(1), y(12), a(13)).
        put_cont('$cut'(a(1), cont), p(1)).
        put_cont(assertz(s(33), p(1)), p(2)).
        put_cont(assertz(s(28), p(2)), p(3)).
        put_cont(assertz(s(23), p(3)), p(4)).
        put_cont(assertz(s(18), p(4)), p(5)).
        put_cont(assertz(s(13), p(5)), p(6)).
        put_cont(retractall(a(13), p(6)), p(7)).
        put_cont(retractall(a(11), p(7)), p(8)).
        put_cont(retractall(a(9), p(8)), p(9)).
        put_cont(retractall(a(7), p(9)), p(10)).
        put_cont(retractall(a(5), p(10)), p(11)).
        execute(retractall(a(3), p(11))).
end_predicate('$cafeteria_init'/0).

begin_predicate('$dummy_25_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_25_builtins.pl'/1, 'builtins.pl']).
main('$dummy_25_builtins.pl'/1, non- (public)) :
        put_con(off, s(1)).
        put_con(info, s(2)).
        put_con(debug, s(3)).
        put_con([], s(4)).
        put_list(s(3), s(4), s(5)).
        label('$dummy_25_builtins.pl'/1+sub+1).
        label('$dummy_25_builtins.pl'/1+1).
        label('$dummy_25_builtins.pl'/1+2).
'$dummy_25_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_25_builtins.pl'/1+1, '$dummy_25_builtins.pl'/1+sub+1).
'$dummy_25_builtins.pl'/1+sub+1 :
        trust('$dummy_25_builtins.pl'/1+2).
'$dummy_25_builtins.pl'/1+1 :
        comment(('$dummy_25_builtins.pl'(A):-A==off, !, true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_25_builtins.pl'(A):-['$get_level'(B), '$equality_of_term'(A, off), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline('$equality_of_term'(a(1), s(1))).
        inline('$cut'(a(2))).
        execute(cont).
'$dummy_25_builtins.pl'/1+2 :
        comment(('$dummy_25_builtins.pl'(A):-print_message(info, [debug]))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_25_builtins.pl'(A):-[print_message(info, [debug])])).
        execute(print_message(s(2), s(5), cont)).
end_predicate('$dummy_25_builtins.pl'/1).

begin_predicate('$toplvel_loop'/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$toplvel_loop'/0, 'builtins.pl']).
main('$toplvel_loop'/0, non- (public)) :
        put_con(debug, s(1)).
        put_con('| ?- ', s(2)).
'$toplvel_loop'/0 :
        comment(('$toplvel_loop':-current_prolog_flag(debug, A), '$dummy_25_builtins.pl'(A), '$fast_write'('| ?- '), flush_output)).
        setB0.
        decl_term_vars([a(1)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        comment(('$toplvel_loop':-[current_prolog_flag(debug, A), '$dummy_25_builtins.pl'(A), '$fast_write'('| ?- '), flush_output])).
        put_var(a(1)).
        put_cont(flush_output(cont), p(1)).
        put_cont('$fast_write'(s(2), p(1)), p(2)).
        put_cont('$dummy_25_builtins.pl'(a(1), p(2)), p(3)).
        execute(current_prolog_flag(s(1), a(1), p(3))).
end_predicate('$toplvel_loop'/0).

begin_predicate('$cafeteria'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$cafeteria'/1, 'builtins.pl']).
main('$cafeteria'/1, non- (public)) :
'$cafeteria'/1 :
        comment(('$cafeteria'(A):-read_with_variables(A, B), '$process_order'(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        set(arg(1), a(1)).
        comment(('$cafeteria'(A):-[read_with_variables(A, B), '$process_order'(A, B)])).
        put_var(a(2)).
        put_cont('$process_order'(a(1), a(2), cont), p(1)).
        execute(read_with_variables(a(1), a(2), p(1))).
end_predicate('$cafeteria'/1).

begin_predicate('$process_order'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$process_order'/2, 'builtins.pl']).
main('$process_order'/2, non- (public)) :
        put_con(var, s(1)).
        put_con((?-)/1, s(2)).
        put_int(1, si(3)).
        put_con(end_of_file, s(4)).
        put_con(debug, s(5)).
        put_con(yes, s(6)).
        put_con(no, s(7)).
        label('$process_order'/2+var).
        label('$process_order'/2+var+1).
        label('$process_order'/2+var+2).
        label('$process_order'/2+var+3).
        label('$process_order'/2+var+4).
        label('$process_order'/2+int).
        label('$process_order'/2+int+1).
        label('$process_order'/2+int+2).
        label('$process_order'/2+con).
        label('$process_order'/2+con+1).
        label('$process_order'/2+con+2).
        label('$process_order'/2+con+3).
        label('$process_order'/2+lis).
        label('$process_order'/2+lis+1).
        label('$process_order'/2+lis+2).
        label('$process_order'/2+lis+3).
        label('$process_order'/2+1).
        label('$process_order'/2+2).
        label('$process_order'/2+3).
        label('$process_order'/2+4).
        label('$process_order'/2+5).
'$process_order'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$process_order'/2+var, '$process_order'/2+int, '$process_order'/2+int, '$process_order'/2+con, '$process_order'/2+int, '$process_order'/2+lis).
'$process_order'/2+var :
        try('$process_order'/2+1, '$process_order'/2+var+1).
'$process_order'/2+var+1 :
        retry('$process_order'/2+2, '$process_order'/2+var+2).
'$process_order'/2+var+2 :
        retry('$process_order'/2+3, '$process_order'/2+var+3).
'$process_order'/2+var+3 :
        retry('$process_order'/2+4, '$process_order'/2+var+4).
'$process_order'/2+var+4 :
        trust('$process_order'/2+5).
'$process_order'/2+int :
        try('$process_order'/2+1, '$process_order'/2+int+1).
'$process_order'/2+int+1 :
        retry('$process_order'/2+4, '$process_order'/2+int+2).
'$process_order'/2+int+2 :
        trust('$process_order'/2+5).
'$process_order'/2+con :
        try('$process_order'/2+1, '$process_order'/2+con+1).
'$process_order'/2+con+1 :
        retry('$process_order'/2+2, '$process_order'/2+con+2).
'$process_order'/2+con+2 :
        retry('$process_order'/2+4, '$process_order'/2+con+3).
'$process_order'/2+con+3 :
        trust('$process_order'/2+5).
'$process_order'/2+lis :
        try('$process_order'/2+1, '$process_order'/2+lis+1).
'$process_order'/2+lis+1 :
        retry('$process_order'/2+3, '$process_order'/2+lis+2).
'$process_order'/2+lis+2 :
        retry('$process_order'/2+4, '$process_order'/2+lis+3).
'$process_order'/2+lis+3 :
        trust('$process_order'/2+5).
'$process_order'/2+1 :
        comment(('$process_order'(A, B):-var(A), !, illarg(var, (?-A), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$process_order'(A, B):-['$get_level'(C), var(A), '$cut'(C), illarg(var, (?-A), 1)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        put_str_args([a(1)], y(1)).
        put_str(s(2), y(1), a(4)).
        execute(illarg(s(1), a(4), si(3), cont)).
'$process_order'/2+2 :
        comment(('$process_order'(end_of_file, A):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$process_order'(end_of_file, A):-['$neck_cut'])).
        get_con(end_of_file, s(4), a(1)).
        inline('$neck_cut').
        execute(cont).
'$process_order'/2+3 :
        comment(('$process_order'([A|B], C):-!, consult([A|B]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$process_order'([A|B], C):-['$neck_cut', consult([A|B])])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_list(a(3), a(4), a(5)).
        execute(consult(a(5), cont)).
'$process_order'/2+4 :
        comment(('$process_order'(A, B):-current_prolog_flag(debug, C), '$dummy_26_builtins.pl'(A, C), nl, '$rm_redundant_vars'(B, D), '$give_answers_with_prompt'(D), !, '$fast_write'(yes), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$process_order'(A, B):-['$get_level'(C), current_prolog_flag(debug, D), '$dummy_26_builtins.pl'(A, D), nl, '$rm_redundant_vars'(B, E), '$give_answers_with_prompt'(E), '$cut'(C), '$fast_write'(yes), nl])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_var(a(4)).
        put_var(a(5)).
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(6), p(1)), p(2)).
        put_cont('$cut'(a(3), p(2)), p(3)).
        put_cont('$give_answers_with_prompt'(a(5), p(3)), p(4)).
        put_cont('$rm_redundant_vars'(a(2), a(5), p(4)), p(5)).
        put_cont(nl(p(5)), p(6)).
        put_cont('$dummy_26_builtins.pl'(a(1), a(4), p(6)), p(7)).
        execute(current_prolog_flag(s(5), a(4), p(7))).
'$process_order'/2+5 :
        comment(('$process_order'(A, B):-nl, '$fast_write'(no), nl)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$process_order'(A, B):-[nl, '$fast_write'(no), nl])).
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(7), p(1)), p(2)).
        execute(nl(p(2))).
end_predicate('$process_order'/2).

begin_predicate('$dummy_26_builtins.pl'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_26_builtins.pl'/2, 'builtins.pl']).
main('$dummy_26_builtins.pl'/2, non- (public)) :
        put_con(off, s(1)).
        put_con((:)/2, s(2)).
        put_con(user, s(3)).
        label('$dummy_26_builtins.pl'/2+sub+1).
        label('$dummy_26_builtins.pl'/2+1).
        label('$dummy_26_builtins.pl'/2+2).
'$dummy_26_builtins.pl'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$dummy_26_builtins.pl'/2+1, '$dummy_26_builtins.pl'/2+sub+1).
'$dummy_26_builtins.pl'/2+sub+1 :
        trust('$dummy_26_builtins.pl'/2+2).
'$dummy_26_builtins.pl'/2+1 :
        comment(('$dummy_26_builtins.pl'(A, B):-B==off, !, call(user:A))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dummy_26_builtins.pl'(A, B):-['$get_level'(C), '$equality_of_term'(B, off), '$cut'(C), call(user:A)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline('$equality_of_term'(a(2), s(1))).
        inline('$cut'(a(3))).
        put_str_args([s(3), a(1)], y(1)).
        put_str(s(2), y(1), a(4)).
        execute(call(a(4), cont)).
'$dummy_26_builtins.pl'/2+2 :
        comment(('$dummy_26_builtins.pl'(A, B):-'$trace_goal'(user:A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$dummy_26_builtins.pl'(A, B):-['$trace_goal'(user:A)])).
        put_str_args([s(3), a(1)], y(1)).
        put_str(s(2), y(1), a(3)).
        execute('$trace_goal'(a(3), cont)).
end_predicate('$dummy_26_builtins.pl'/2).

begin_predicate('$rm_redundant_vars'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$rm_redundant_vars'/2, 'builtins.pl']).
main('$rm_redundant_vars'/2, non- (public)) :
        put_con([], s(1)).
        put_con((=)/2, s(2)).
        put_con('_', s(3)).
        label('$rm_redundant_vars'/2+top).
        label(fail/0).
        label('$rm_redundant_vars'/2+var).
        label('$rm_redundant_vars'/2+var+1).
        label('$rm_redundant_vars'/2+var+2).
        label('$rm_redundant_vars'/2+lis).
        label('$rm_redundant_vars'/2+lis+1).
        label('$rm_redundant_vars'/2+1).
        label('$rm_redundant_vars'/2+2).
        label('$rm_redundant_vars'/2+3).
'$rm_redundant_vars'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$rm_redundant_vars'/2+top).
'$rm_redundant_vars'/2+top :
        setB0.
        switch_on_term('$rm_redundant_vars'/2+var, fail/0, fail/0, '$rm_redundant_vars'/2+1, fail/0, '$rm_redundant_vars'/2+lis).
'$rm_redundant_vars'/2+var :
        try('$rm_redundant_vars'/2+1, '$rm_redundant_vars'/2+var+1).
'$rm_redundant_vars'/2+var+1 :
        retry('$rm_redundant_vars'/2+2, '$rm_redundant_vars'/2+var+2).
'$rm_redundant_vars'/2+var+2 :
        trust('$rm_redundant_vars'/2+3).
'$rm_redundant_vars'/2+lis :
        try('$rm_redundant_vars'/2+2, '$rm_redundant_vars'/2+lis+1).
'$rm_redundant_vars'/2+lis+1 :
        trust('$rm_redundant_vars'/2+3).
'$rm_redundant_vars'/2+1 :
        comment(('$rm_redundant_vars'([], []):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$rm_redundant_vars'([], []):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_con([], s(1), a(2)).
        inline('$neck_cut').
        execute(cont).
'$rm_redundant_vars'/2+2 :
        comment(('$rm_redundant_vars'(['_'=A|B], C):-!, '$rm_redundant_vars'(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$rm_redundant_vars'(['_'=A|B], C):-['$neck_cut', '$rm_redundant_vars'(B, C)])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_str((=)/2, s(2), a(3)).
        unify_con('_', s(3)).
        unify_void(1).
        inline('$neck_cut').
        set(a(4), ea(1)).
        set(a(2), ea(2)).
        set(cont, econt).
        goto('$rm_redundant_vars'/2+top).
'$rm_redundant_vars'/2+3 :
        comment(('$rm_redundant_vars'([A|B], [A|C]):-'$rm_redundant_vars'(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$rm_redundant_vars'([A|B], [A|C]):-['$rm_redundant_vars'(B, C)])).
        get_list(a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        get_list(a(2)).
        unify_val(a(3)).
        unify_var(a(5)).
        set(a(4), ea(1)).
        set(a(5), ea(2)).
        set(cont, econt).
        goto('$rm_redundant_vars'/2+top).
end_predicate('$rm_redundant_vars'/2).

begin_predicate('$give_answers_with_prompt'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$give_answers_with_prompt'/1, 'builtins.pl']).
main('$give_answers_with_prompt'/1, non- (public)) :
        put_con([], s(1)).
        put_con(' ? ', s(2)).
        put_int(59, si(3)).
        put_list(si(3), s(1), s(4)).
        label('$give_answers_with_prompt'/1+var).
        label('$give_answers_with_prompt'/1+var+1).
        label('$give_answers_with_prompt'/1+1).
        label('$give_answers_with_prompt'/1+2).
'$give_answers_with_prompt'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$give_answers_with_prompt'/1+var, '$give_answers_with_prompt'/1+2, '$give_answers_with_prompt'/1+2, '$give_answers_with_prompt'/1+var, '$give_answers_with_prompt'/1+2, '$give_answers_with_prompt'/1+2).
'$give_answers_with_prompt'/1+var :
        try('$give_answers_with_prompt'/1+1, '$give_answers_with_prompt'/1+var+1).
'$give_answers_with_prompt'/1+var+1 :
        trust('$give_answers_with_prompt'/1+2).
'$give_answers_with_prompt'/1+1 :
        comment(('$give_answers_with_prompt'([]):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$give_answers_with_prompt'([]):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$give_answers_with_prompt'/1+2 :
        comment(('$give_answers_with_prompt'(A):-'$give_an_answer'(A), '$fast_write'(' ? '), flush_output, read_line(B), B\==[59], nl)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$give_answers_with_prompt'(A):-['$give_an_answer'(A), '$fast_write'(' ? '), flush_output, read_line(B), '$inequality_of_term'(B, [59]), nl])).
        put_var(a(2)).
        put_cont(nl(cont), p(1)).
        put_cont('$inequality_of_term'(a(2), s(4), p(1)), p(2)).
        put_cont(read_line(a(2), p(2)), p(3)).
        put_cont(flush_output(p(3)), p(4)).
        put_cont('$fast_write'(s(2), p(4)), p(5)).
        execute('$give_an_answer'(a(1), p(5))).
end_predicate('$give_answers_with_prompt'/1).

begin_predicate('$give_an_answer'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$give_an_answer'/1, 'builtins.pl']).
main('$give_an_answer'/1, non- (public)) :
        put_con([], s(1)).
        put_con(true, s(2)).
        put_con((','), s(3)).
        label(fail/0).
        label('$give_an_answer'/1+var).
        label('$give_an_answer'/1+var+1).
        label('$give_an_answer'/1+var+2).
        label('$give_an_answer'/1+lis).
        label('$give_an_answer'/1+lis+1).
        label('$give_an_answer'/1+1).
        label('$give_an_answer'/1+2).
        label('$give_an_answer'/1+3).
'$give_an_answer'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$give_an_answer'/1+var, fail/0, fail/0, '$give_an_answer'/1+1, fail/0, '$give_an_answer'/1+lis).
'$give_an_answer'/1+var :
        try('$give_an_answer'/1+1, '$give_an_answer'/1+var+1).
'$give_an_answer'/1+var+1 :
        retry('$give_an_answer'/1+2, '$give_an_answer'/1+var+2).
'$give_an_answer'/1+var+2 :
        trust('$give_an_answer'/1+3).
'$give_an_answer'/1+lis :
        try('$give_an_answer'/1+2, '$give_an_answer'/1+lis+1).
'$give_an_answer'/1+lis+1 :
        trust('$give_an_answer'/1+3).
'$give_an_answer'/1+1 :
        comment(('$give_an_answer'([]):-!, '$fast_write'(true))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$give_an_answer'([]):-['$neck_cut', '$fast_write'(true)])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute('$fast_write'(s(2), cont)).
'$give_an_answer'/1+2 :
        comment(('$give_an_answer'([A]):-!, '$print_an answer'(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$give_an_answer'([A]):-['$neck_cut', '$print_an answer'(A)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_con([], s(1)).
        inline('$neck_cut').
        execute('$print_an answer'(a(2), cont)).
'$give_an_answer'/1+3 :
        comment(('$give_an_answer'([A|B]):-'$print_an answer'(A), '$fast_write'((',')), nl, '$give_an_answer'(B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$give_an_answer'([A|B]):-['$print_an answer'(A), '$fast_write'((',')), nl, '$give_an_answer'(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_cont('$give_an_answer'(a(3), cont), p(1)).
        put_cont(nl(p(1)), p(2)).
        put_cont('$fast_write'(s(3), p(2)), p(3)).
        execute('$print_an answer'(a(2), p(3))).
end_predicate('$give_an_answer'/1).

begin_predicate('$print_an answer'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$print_an answer'/1, 'builtins.pl']).
main('$print_an answer'/1, non- (public)) :
        put_con((=)/2, s(1)).
        put_con(' = ', s(2)).
'$print_an answer'/1 :
        comment(('$print_an answer'(A=B):-write(A), '$fast_write'(' = '), writeq(B))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        comment(('$print_an answer'(A=B):-[write(A), '$fast_write'(' = '), writeq(B)])).
        get_str((=)/2, s(1), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_cont(writeq(a(3), cont), p(1)).
        put_cont('$fast_write'(s(2), p(1)), p(2)).
        execute(write(a(2), p(2))).
end_predicate('$print_an answer'/1).

begin_predicate(consult/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([consult/1, 'builtins.pl']).
main(consult/1, (public)) :
        put_con(var, s(1)).
        put_con(consult/1, s(2)).
        put_int(1, si(3)).
        put_con([], s(4)).
        label(consult/1+top).
        label(consult/1+var).
        label(consult/1+var+1).
        label(consult/1+var+2).
        label(consult/1+var+3).
        label(consult/1+int).
        label(consult/1+int+1).
        label(consult/1+con).
        label(consult/1+con+1).
        label(consult/1+con+2).
        label(consult/1+lis).
        label(consult/1+lis+1).
        label(consult/1+lis+2).
        label(consult/1+1).
        label(consult/1+2).
        label(consult/1+3).
        label(consult/1+4).
consult/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        goto(consult/1+top).
consult/1+top :
        setB0.
        switch_on_term(consult/1+var, consult/1+int, consult/1+int, consult/1+con, consult/1+int, consult/1+lis).
consult/1+var :
        try(consult/1+1, consult/1+var+1).
consult/1+var+1 :
        retry(consult/1+2, consult/1+var+2).
consult/1+var+2 :
        retry(consult/1+3, consult/1+var+3).
consult/1+var+3 :
        trust(consult/1+4).
consult/1+int :
        try(consult/1+1, consult/1+int+1).
consult/1+int+1 :
        trust(consult/1+4).
consult/1+con :
        try(consult/1+1, consult/1+con+1).
consult/1+con+1 :
        retry(consult/1+2, consult/1+con+2).
consult/1+con+2 :
        trust(consult/1+4).
consult/1+lis :
        try(consult/1+1, consult/1+lis+1).
consult/1+lis+1 :
        retry(consult/1+3, consult/1+lis+2).
consult/1+lis+2 :
        trust(consult/1+4).
consult/1+1 :
        comment((consult(A):-var(A), !, illarg(var, consult(A), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((consult(A):-['$get_level'(B), var(A), '$cut'(B), illarg(var, consult(A), 1)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(var(a(1))).
        inline('$cut'(a(2))).
        put_str_args([a(1)], y(1)).
        put_str(s(2), y(1), a(3)).
        execute(illarg(s(1), a(3), si(3), cont)).
consult/1+2 :
        comment((consult([]):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((consult([]):-['$neck_cut'])).
        get_con([], s(4), a(1)).
        inline('$neck_cut').
        execute(cont).
consult/1+3 :
        comment((consult([A|B]):-!, consult(A), consult(B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((consult([A|B]):-['$neck_cut', consult(A), consult(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        inline('$neck_cut').
        put_cont(consult(a(3), cont), p(1)).
        set(a(2), ea(1)).
        set(p(1), econt).
        goto(consult/1+top).
consult/1+4 :
        comment((consult(A):-atom(A), !, '$consult'(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((consult(A):-['$get_level'(B), atom(A), '$cut'(B), '$consult'(A)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(atom(a(1))).
        inline('$cut'(a(2))).
        execute('$consult'(a(1), cont)).
end_predicate(consult/1).

begin_predicate('$consult'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$consult'/1, 'builtins.pl']).
main('$consult'/1, non- (public)) :
        put_con(read, s(1)).
        put_con(file_name/1, s(2)).
        put_con(info, s(3)).
        put_con(consulting, s(4)).
        put_con(..., s(5)).
        put_con([], s(6)).
        put_list(s(5), s(6), s(7)).
        put_con(runtime, s(8)).
        put_con(end_of_file, s(9)).
        put_con('consulted,', s(10)).
        put_con(msec, s(11)).
        put_list(s(11), s(6), s(12)).
'$consult'/1 :
        comment(('$consult'(A):-'$prolog_file_name'(A, B), open(B, read, C), stream_property(C, file_name(D)), print_message(info, [consulting, D, ...]), statistics(runtime, E), '$consult_init'(D), repeat, read(C, F), '$consult_clause'(F), F==end_of_file, !, statistics(runtime, [G, H]), print_message(info, [D, 'consulted,', H, msec]), close(C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13)]).
        set(arg(1), a(1)).
        comment(('$consult'(A):-['$get_level'(B), '$prolog_file_name'(A, C), open(C, read, D), stream_property(D, file_name(E)), print_message(info, [consulting, E, ...]), statistics(runtime, F), '$consult_init'(E), repeat, read(D, G), '$consult_clause'(G), '$equality_of_term'(G, end_of_file), '$cut'(B), statistics(runtime, [H, I]), print_message(info, [E, 'consulted,', I, msec]), close(D)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_var(a(3)).
        put_var(a(4)).
        put_var(a(5)).
        put_str_args([a(5)], y(1)).
        put_str(s(2), y(1), a(6)).
        put_list(a(5), s(7), a(7)).
        put_list(s(4), a(7), a(8)).
        put_var(a(9)).
        put_var(a(10)).
        put_list(a(10), s(6), a(11)).
        put_list(void, a(11), a(12)).
        put_list(a(10), s(12), a(13)).
        put_list(s(10), a(13), a(14)).
        put_list(a(5), a(14), a(15)).
        put_cont(close(a(4), cont), p(1)).
        put_cont(print_message(s(3), a(15), p(1)), p(2)).
        put_cont(statistics(s(8), a(12), p(2)), p(3)).
        put_cont('$cut'(a(2), p(3)), p(4)).
        put_cont('$equality_of_term'(a(9), s(9), p(4)), p(5)).
        put_cont('$consult_clause'(a(9), p(5)), p(6)).
        put_cont(read(a(4), a(9), p(6)), p(7)).
        put_cont(repeat(p(7)), p(8)).
        put_cont('$consult_init'(a(5), p(8)), p(9)).
        put_cont(statistics(s(8), void, p(9)), p(10)).
        put_cont(print_message(s(3), a(8), p(10)), p(11)).
        put_cont(stream_property(a(4), a(6), p(11)), p(12)).
        put_cont(open(a(3), s(1), a(4), p(12)), p(13)).
        execute('$prolog_file_name'(a(1), a(3), p(13))).
end_predicate('$consult'/1).

begin_predicate('$prolog_file_name'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$prolog_file_name'/2, 'builtins.pl']).
main('$prolog_file_name'/2, non- (public)) :
        put_con('.', s(1)).
        put_int(0, si(2)).
        put_con('.pl', s(3)).
        label('$prolog_file_name'/2+sub+1).
        label('$prolog_file_name'/2+1).
        label('$prolog_file_name'/2+2).
'$prolog_file_name'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$prolog_file_name'/2+1, '$prolog_file_name'/2+sub+1).
'$prolog_file_name'/2+sub+1 :
        trust('$prolog_file_name'/2+2).
'$prolog_file_name'/2+1 :
        comment(('$prolog_file_name'(A, A):-sub_atom(A, B, C, D, '.'), D>0, !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$prolog_file_name'(A, A):-['$get_level'(B), sub_atom(A, C, D, E, '.'), '$greater_than'(E, 0), '$cut'(B)])).
        get_val(a(1), a(2)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_var(a(4)).
        put_cont('$cut'(a(3), cont), p(1)).
        put_cont('$greater_than'(a(4), si(2), p(1)), p(2)).
        execute(sub_atom(a(1), void, void, a(4), s(1), p(2))).
'$prolog_file_name'/2+2 :
        comment(('$prolog_file_name'(A, B):-atom_concat(A, '.pl', B))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$prolog_file_name'(A, B):-[atom_concat(A, '.pl', B)])).
        execute(atom_concat(a(1), s(3), a(2), cont)).
end_predicate('$prolog_file_name'/2).

begin_predicate('$consult_init'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$consult_init'/1, 'builtins.pl']).
main('$consult_init'/1, non- (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$consulted_file'/1, s(3)).
        put_con('$consulted_package'/1, s(4)).
        put_con('$consulted_predicate'/3, s(5)).
        put_con(user, s(6)).
        put_str_args([s(6)], s(7)).
        put_str(s(4), s(7), s(8)).
        put_str_args([s(2), s(8)], s(9)).
        put_str(s(1), s(9), s(10)).
        label('$consult_init'/1+sub+1).
        label('$consult_init'/1+1).
        label('$consult_init'/1+2).
'$consult_init'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$consult_init'/1+1, '$consult_init'/1+sub+1).
'$consult_init'/1+sub+1 :
        trust('$consult_init'/1+2).
'$consult_init'/1+1 :
        comment(('$consult_init'(A):-retractall('$consulted_file'(B)), retractall('$consulted_package'(C)), retract('$consulted_predicate'(D, E, A)), abolish(D:E), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_init'(A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(B)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(C)), retract('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(D, E, A)), abolish(D:E), fail])).
        put_str_args([void], y(1)).
        put_str(s(3), y(1), a(2)).
        put_str_args([s(2), a(2)], y(2)).
        put_str(s(1), y(2), a(3)).
        put_str_args([void], y(3)).
        put_str(s(4), y(3), a(4)).
        put_str_args([s(2), a(4)], y(4)).
        put_str(s(1), y(4), a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_str_args([a(6), a(7), a(1)], y(5)).
        put_str(s(5), y(5), a(8)).
        put_str_args([s(2), a(8)], y(6)).
        put_str(s(1), y(6), a(9)).
        put_str_args([a(6), a(7)], y(7)).
        put_str(s(1), y(7), a(10)).
        put_cont(fail(cont), p(1)).
        put_cont(abolish(a(10), p(1)), p(2)).
        put_cont(retract(a(9), p(2)), p(3)).
        put_cont(retractall(a(5), p(3)), p(4)).
        execute(retractall(a(3), p(4))).
'$consult_init'/1+2 :
        comment(('$consult_init'(A):-assertz('$consulted_file'(A)), assertz('$consulted_package'(user)))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_init'(A):-[assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(A)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(user))])).
        put_str_args([a(1)], y(1)).
        put_str(s(3), y(1), a(2)).
        put_str_args([s(2), a(2)], y(2)).
        put_str(s(1), y(2), a(3)).
        put_cont(assertz(s(10), cont), p(1)).
        execute(assertz(a(3), p(1))).
end_predicate('$consult_init'/1).

begin_predicate('$consult_clause'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$consult_clause'/1, 'builtins.pl']).
main('$consult_clause'/1, non- (public)) :
        put_con(end_of_file, s(1)).
        put_con((:-)/1, s(2)).
        put_con(module/2, s(3)).
        put_con((package)/1, s(4)).
        put_con((import)/1, s(5)).
        put_con((dynamic)/1, s(6)).
        put_con((public)/1, s(7)).
        put_con((meta_predicate)/1, s(8)).
        put_con((mode)/1, s(9)).
        put_con((multifile)/1, s(10)).
        put_con((block)/1, s(11)).
        put_con((:)/2, s(12)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(13)).
        put_con('$consulted_package'/1, s(14)).
        label('$consult_clause'/1+var).
        label('$consult_clause'/1+var+1).
        label('$consult_clause'/1+var+2).
        label('$consult_clause'/1+var+3).
        label('$consult_clause'/1+var+4).
        label('$consult_clause'/1+var+5).
        label('$consult_clause'/1+var+6).
        label('$consult_clause'/1+var+7).
        label('$consult_clause'/1+var+8).
        label('$consult_clause'/1+var+9).
        label('$consult_clause'/1+var+10).
        label('$consult_clause'/1+var+11).
        label('$consult_clause'/1+con).
        label('$consult_clause'/1+con+1).
        label('$consult_clause'/1+str).
        label('$consult_clause'/1+str+1).
        label('$consult_clause'/1+str+2).
        label('$consult_clause'/1+str+3).
        label('$consult_clause'/1+str+4).
        label('$consult_clause'/1+str+5).
        label('$consult_clause'/1+str+6).
        label('$consult_clause'/1+str+7).
        label('$consult_clause'/1+str+8).
        label('$consult_clause'/1+str+9).
        label('$consult_clause'/1+str+10).
        label('$consult_clause'/1+1).
        label('$consult_clause'/1+2).
        label('$consult_clause'/1+3).
        label('$consult_clause'/1+4).
        label('$consult_clause'/1+5).
        label('$consult_clause'/1+6).
        label('$consult_clause'/1+7).
        label('$consult_clause'/1+8).
        label('$consult_clause'/1+9).
        label('$consult_clause'/1+10).
        label('$consult_clause'/1+11).
        label('$consult_clause'/1+12).
'$consult_clause'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$consult_clause'/1+var, '$consult_clause'/1+12, '$consult_clause'/1+12, '$consult_clause'/1+con, '$consult_clause'/1+str, '$consult_clause'/1+12).
'$consult_clause'/1+var :
        try('$consult_clause'/1+1, '$consult_clause'/1+var+1).
'$consult_clause'/1+var+1 :
        retry('$consult_clause'/1+2, '$consult_clause'/1+var+2).
'$consult_clause'/1+var+2 :
        retry('$consult_clause'/1+3, '$consult_clause'/1+var+3).
'$consult_clause'/1+var+3 :
        retry('$consult_clause'/1+4, '$consult_clause'/1+var+4).
'$consult_clause'/1+var+4 :
        retry('$consult_clause'/1+5, '$consult_clause'/1+var+5).
'$consult_clause'/1+var+5 :
        retry('$consult_clause'/1+6, '$consult_clause'/1+var+6).
'$consult_clause'/1+var+6 :
        retry('$consult_clause'/1+7, '$consult_clause'/1+var+7).
'$consult_clause'/1+var+7 :
        retry('$consult_clause'/1+8, '$consult_clause'/1+var+8).
'$consult_clause'/1+var+8 :
        retry('$consult_clause'/1+9, '$consult_clause'/1+var+9).
'$consult_clause'/1+var+9 :
        retry('$consult_clause'/1+10, '$consult_clause'/1+var+10).
'$consult_clause'/1+var+10 :
        retry('$consult_clause'/1+11, '$consult_clause'/1+var+11).
'$consult_clause'/1+var+11 :
        trust('$consult_clause'/1+12).
'$consult_clause'/1+con :
        try('$consult_clause'/1+1, '$consult_clause'/1+con+1).
'$consult_clause'/1+con+1 :
        trust('$consult_clause'/1+12).
'$consult_clause'/1+str :
        try('$consult_clause'/1+2, '$consult_clause'/1+str+1).
'$consult_clause'/1+str+1 :
        retry('$consult_clause'/1+3, '$consult_clause'/1+str+2).
'$consult_clause'/1+str+2 :
        retry('$consult_clause'/1+4, '$consult_clause'/1+str+3).
'$consult_clause'/1+str+3 :
        retry('$consult_clause'/1+5, '$consult_clause'/1+str+4).
'$consult_clause'/1+str+4 :
        retry('$consult_clause'/1+6, '$consult_clause'/1+str+5).
'$consult_clause'/1+str+5 :
        retry('$consult_clause'/1+7, '$consult_clause'/1+str+6).
'$consult_clause'/1+str+6 :
        retry('$consult_clause'/1+8, '$consult_clause'/1+str+7).
'$consult_clause'/1+str+7 :
        retry('$consult_clause'/1+9, '$consult_clause'/1+str+8).
'$consult_clause'/1+str+8 :
        retry('$consult_clause'/1+10, '$consult_clause'/1+str+9).
'$consult_clause'/1+str+9 :
        retry('$consult_clause'/1+11, '$consult_clause'/1+str+10).
'$consult_clause'/1+str+10 :
        trust('$consult_clause'/1+12).
'$consult_clause'/1+1 :
        comment(('$consult_clause'(end_of_file):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'(end_of_file):-['$neck_cut'])).
        get_con(end_of_file, s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+2 :
        comment(('$consult_clause'((:-module(A, B))):-!, '$assert_consulted_package'(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-module(A, B))):-['$neck_cut', '$assert_consulted_package'(A)])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str(module/2, s(3), a(2)).
        unify_var(a(3)).
        unify_void(1).
        inline('$neck_cut').
        execute('$assert_consulted_package'(a(3), cont)).
'$consult_clause'/1+3 :
        comment(('$consult_clause'((:-package A)):-!, '$assert_consulted_package'(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-package A)):-['$neck_cut', '$assert_consulted_package'(A)])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((package)/1, s(4), a(2)).
        unify_var(a(3)).
        inline('$neck_cut').
        execute('$assert_consulted_package'(a(3), cont)).
'$consult_clause'/1+4 :
        comment(('$consult_clause'((:-import A)):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-import A)):-['$neck_cut'])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((import)/1, s(5), a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+5 :
        comment(('$consult_clause'((:-dynamic A)):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-dynamic A)):-['$neck_cut'])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((dynamic)/1, s(6), a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+6 :
        comment(('$consult_clause'((:-public A)):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-public A)):-['$neck_cut'])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((public)/1, s(7), a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+7 :
        comment(('$consult_clause'((:-meta_predicate A)):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-meta_predicate A)):-['$neck_cut'])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((meta_predicate)/1, s(8), a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+8 :
        comment(('$consult_clause'((:-mode A)):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-mode A)):-['$neck_cut'])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((mode)/1, s(9), a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+9 :
        comment(('$consult_clause'((:-multifile A)):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-multifile A)):-['$neck_cut'])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((multifile)/1, s(10), a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+10 :
        comment(('$consult_clause'((:-block A)):-!)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-block A)):-['$neck_cut'])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        get_str((block)/1, s(11), a(2)).
        unify_void(1).
        inline('$neck_cut').
        execute(cont).
'$consult_clause'/1+11 :
        comment(('$consult_clause'((:-A)):-!, clause('$consulted_package'(B), C), once(B:A))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'((:-A)):-['$neck_cut', clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(B), C), once(B:A)])).
        get_str((:-)/1, s(2), a(1)).
        unify_var(a(2)).
        inline('$neck_cut').
        put_var(a(3)).
        put_str_args([a(3)], y(1)).
        put_str(s(14), y(1), a(4)).
        put_str_args([s(13), a(4)], y(2)).
        put_str(s(12), y(2), a(5)).
        put_str_args([a(3), a(2)], y(3)).
        put_str(s(12), y(3), a(6)).
        put_cont(once(a(6), cont), p(1)).
        execute(clause(a(5), void, p(1))).
'$consult_clause'/1+12 :
        comment(('$consult_clause'(A):-'$consult_preprocess'(A, B), '$consult_cls'(B))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_clause'(A):-['$consult_preprocess'(A, B), '$consult_cls'(B)])).
        put_var(a(2)).
        put_cont('$consult_cls'(a(2), cont), p(1)).
        execute('$consult_preprocess'(a(1), a(2), p(1))).
end_predicate('$consult_clause'/1).

begin_predicate('$assert_consulted_package'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$assert_consulted_package'/1, 'builtins.pl']).
main('$assert_consulted_package'/1, non- (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$consulted_package'/1, s(3)).
        label('$assert_consulted_package'/1+sub+1).
        label('$assert_consulted_package'/1+1).
        label('$assert_consulted_package'/1+2).
'$assert_consulted_package'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$assert_consulted_package'/1+1, '$assert_consulted_package'/1+sub+1).
'$assert_consulted_package'/1+sub+1 :
        trust('$assert_consulted_package'/1+2).
'$assert_consulted_package'/1+1 :
        comment(('$assert_consulted_package'(A):-clause('$consulted_package'(A), B), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$assert_consulted_package'(A):-['$get_level'(B), clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(A), C), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_str_args([a(1)], y(1)).
        put_str(s(3), y(1), a(3)).
        put_str_args([s(2), a(3)], y(2)).
        put_str(s(1), y(2), a(4)).
        put_cont('$cut'(a(2), cont), p(1)).
        execute(clause(a(4), void, p(1))).
'$assert_consulted_package'/1+2 :
        comment(('$assert_consulted_package'(A):-retractall('$consulted_package'(B)), assertz('$consulted_package'(A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$assert_consulted_package'(A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(B)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(A))])).
        put_str_args([void], y(1)).
        put_str(s(3), y(1), a(2)).
        put_str_args([s(2), a(2)], y(2)).
        put_str(s(1), y(2), a(3)).
        put_str_args([a(1)], y(3)).
        put_str(s(3), y(3), a(4)).
        put_str_args([s(2), a(4)], y(4)).
        put_str(s(1), y(4), a(5)).
        put_cont(assertz(a(5), cont), p(1)).
        execute(retractall(a(3), p(1))).
end_predicate('$assert_consulted_package'/1).

begin_predicate('$consult_preprocess'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$consult_preprocess'/2, 'builtins.pl']).
main('$consult_preprocess'/2, non- (public)) :
'$consult_preprocess'/2 :
        comment(('$consult_preprocess'(A, B):-expand_term(A, B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$consult_preprocess'(A, B):-[expand_term(A, B)])).
        execute(expand_term(a(1), a(2), cont)).
end_predicate('$consult_preprocess'/2).

begin_predicate('$consult_cls'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$consult_cls'/1, 'builtins.pl']).
main('$consult_cls'/1, non- (public)) :
        put_con((:-)/2, s(1)).
        put_con(true, s(2)).
        label('$consult_cls'/1+var).
        label('$consult_cls'/1+var+1).
        label('$consult_cls'/1+1).
        label('$consult_cls'/1+2).
'$consult_cls'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$consult_cls'/1+var, '$consult_cls'/1+2, '$consult_cls'/1+2, '$consult_cls'/1+2, '$consult_cls'/1+var, '$consult_cls'/1+2).
'$consult_cls'/1+var :
        try('$consult_cls'/1+1, '$consult_cls'/1+var+1).
'$consult_cls'/1+var+1 :
        trust('$consult_cls'/1+2).
'$consult_cls'/1+1 :
        comment(('$consult_cls'((A:-B)):-!, '$assert_consulted_clause'((A:-B)))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_cls'((A:-B)):-['$neck_cut', '$assert_consulted_clause'((A:-B))])).
        get_str((:-)/2, s(1), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        inline('$neck_cut').
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(1), y(1), a(4)).
        execute('$assert_consulted_clause'(a(4), cont)).
'$consult_cls'/1+2 :
        comment(('$consult_cls'(A):-'$assert_consulted_clause'((A:-true)))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$consult_cls'(A):-['$assert_consulted_clause'((A:-true))])).
        put_str_args([a(1), s(2)], y(1)).
        put_str(s(1), y(1), a(2)).
        execute('$assert_consulted_clause'(a(2), cont)).
end_predicate('$consult_cls'/1).

begin_predicate('$assert_consulted_clause'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$assert_consulted_clause'/1, 'builtins.pl']).
main('$assert_consulted_clause'/1, non- (public)) :
        put_con((:-)/2, s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        put_con('$consulted_file'/1, s(4)).
        put_con('$consulted_package'/1, s(5)).
        put_con('$consulted_predicate'/3, s(6)).
        put_con(/ / 2, s(7)).
'$assert_consulted_clause'/1 :
        comment(('$assert_consulted_clause'(A):-A= (B:-C), functor(B, D, E), clause('$consulted_file'(F), G), clause('$consulted_package'(H), I), assertz(H:A), assertz('$consulted_predicate'(H, D/E, F)), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15), a(16)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        set(arg(1), a(1)).
        comment(('$assert_consulted_clause'(A):-['$get_level'(B), '$unify'(A, (C:-D)), functor(C, E, F), clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_file'(G), H), clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_package'(I), J), assertz(I:A), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(I, E/F, G)), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_var(a(3)).
        put_str_args([a(3), void], y(1)).
        put_str(s(1), y(1), a(4)).
        inline('$unify'(a(1), a(4))).
        put_var(a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_str_args([a(7)], y(2)).
        put_str(s(4), y(2), a(8)).
        put_str_args([s(3), a(8)], y(3)).
        put_str(s(2), y(3), a(9)).
        put_var(a(10)).
        put_str_args([a(10)], y(4)).
        put_str(s(5), y(4), a(11)).
        put_str_args([s(3), a(11)], y(5)).
        put_str(s(2), y(5), a(12)).
        put_str_args([a(10), a(1)], y(6)).
        put_str(s(2), y(6), a(13)).
        put_str_args([a(5), a(6)], y(7)).
        put_str(s(7), y(7), a(14)).
        put_str_args([a(10), a(14), a(7)], y(8)).
        put_str(s(6), y(8), a(15)).
        put_str_args([s(3), a(15)], y(9)).
        put_str(s(2), y(9), a(16)).
        put_cont('$cut'(a(2), cont), p(1)).
        put_cont(assertz(a(16), p(1)), p(2)).
        put_cont(assertz(a(13), p(2)), p(3)).
        put_cont(clause(a(12), void, p(3)), p(4)).
        put_cont(clause(a(9), void, p(4)), p(5)).
        execute(functor(a(3), a(5), a(6), p(5))).
end_predicate('$assert_consulted_clause'/1).

begin_predicate(trace/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([trace/0, 'builtins.pl']).
main(trace/0, (public)) :
        put_con(debug, s(1)).
        put_con(on, s(2)).
        put_con('{Small debugger is switch on}', s(3)).
        label(trace/0+sub+1).
        label(trace/0+1).
        label(trace/0+2).
trace/0 :
        set(cont, econt).
        setB0.
        try(trace/0+1, trace/0+sub+1).
trace/0+sub+1 :
        trust(trace/0+2).
trace/0+1 :
        comment((trace:-current_prolog_flag(debug, on), !)).
        decl_term_vars([a(1)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(econt, cont).
        comment((trace:-['$get_level'(A), current_prolog_flag(debug, on), '$cut'(A)])).
        put_var(a(1)).
        inline('$get_level'(a(1))).
        put_cont('$cut'(a(1), cont), p(1)).
        execute(current_prolog_flag(s(1), s(2), p(1))).
trace/0+2 :
        comment((trace:-set_prolog_flag(debug, on), '$trace_init', '$fast_write'('{Small debugger is switch on}'), nl, !)).
        decl_term_vars([a(1)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        decl_pred_vars([cont]).
        set(econt, cont).
        comment((trace:-['$get_level'(A), set_prolog_flag(debug, on), '$trace_init', '$fast_write'('{Small debugger is switch on}'), nl, '$cut'(A)])).
        put_var(a(1)).
        inline('$get_level'(a(1))).
        put_cont('$cut'(a(1), cont), p(1)).
        put_cont(nl(p(1)), p(2)).
        put_cont('$fast_write'(s(3), p(2)), p(3)).
        put_cont('$trace_init'(p(3)), p(4)).
        execute(set_prolog_flag(s(1), s(2), p(4))).
end_predicate(trace/0).

begin_predicate('$trace_init'/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$trace_init'/0, 'builtins.pl']).
main('$trace_init'/0, non- (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$leap_flag'/1, s(3)).
        put_con('$current_leash'/1, s(4)).
        put_con('$current_spypoint'/3, s(5)).
        put_con(no, s(6)).
        put_str_args([s(6)], s(7)).
        put_str(s(3), s(7), s(8)).
        put_str_args([s(2), s(8)], s(9)).
        put_str(s(1), s(9), s(10)).
        put_con(call, s(11)).
        put_str_args([s(11)], s(12)).
        put_str(s(4), s(12), s(13)).
        put_str_args([s(2), s(13)], s(14)).
        put_str(s(1), s(14), s(15)).
        put_con(exit, s(16)).
        put_str_args([s(16)], s(17)).
        put_str(s(4), s(17), s(18)).
        put_str_args([s(2), s(18)], s(19)).
        put_str(s(1), s(19), s(20)).
        put_con(redo, s(21)).
        put_str_args([s(21)], s(22)).
        put_str(s(4), s(22), s(23)).
        put_str_args([s(2), s(23)], s(24)).
        put_str(s(1), s(24), s(25)).
        put_con(fail, s(26)).
        put_str_args([s(26)], s(27)).
        put_str(s(4), s(27), s(28)).
        put_str_args([s(2), s(28)], s(29)).
        put_str(s(1), s(29), s(30)).
'$trace_init'/0 :
        comment(('$trace_init':-retractall('$leap_flag'(A)), retractall('$current_leash'(B)), retractall('$current_spypoint'(C, D, E)), assertz('$leap_flag'(no)), assertz('$current_leash'(call)), assertz('$current_leash'(exit)), assertz('$current_leash'(redo)), assertz('$current_leash'(fail)), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8)]).
        comment(('$trace_init':-['$get_level'(A), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(B)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(C)), retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(D, E, F)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(no)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(call)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(exit)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(redo)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(fail)), '$cut'(A)])).
        put_var(a(1)).
        inline('$get_level'(a(1))).
        put_str_args([void], y(1)).
        put_str(s(3), y(1), a(2)).
        put_str_args([s(2), a(2)], y(2)).
        put_str(s(1), y(2), a(3)).
        put_str_args([void], y(3)).
        put_str(s(4), y(3), a(4)).
        put_str_args([s(2), a(4)], y(4)).
        put_str(s(1), y(4), a(5)).
        put_str_args([void, void, void], y(5)).
        put_str(s(5), y(5), a(6)).
        put_str_args([s(2), a(6)], y(6)).
        put_str(s(1), y(6), a(7)).
        put_cont('$cut'(a(1), cont), p(1)).
        put_cont(assertz(s(30), p(1)), p(2)).
        put_cont(assertz(s(25), p(2)), p(3)).
        put_cont(assertz(s(20), p(3)), p(4)).
        put_cont(assertz(s(15), p(4)), p(5)).
        put_cont(assertz(s(10), p(5)), p(6)).
        put_cont(retractall(a(7), p(6)), p(7)).
        put_cont(retractall(a(5), p(7)), p(8)).
        execute(retractall(a(3), p(8))).
end_predicate('$trace_init'/0).

begin_predicate(notrace/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([notrace/0, 'builtins.pl']).
main(notrace/0, (public)) :
        put_con(debug, s(1)).
        put_con(off, s(2)).
        put_con('{Small debugger is switch off}', s(3)).
        label(notrace/0+sub+1).
        label(notrace/0+1).
        label(notrace/0+2).
notrace/0 :
        set(cont, econt).
        setB0.
        try(notrace/0+1, notrace/0+sub+1).
notrace/0+sub+1 :
        trust(notrace/0+2).
notrace/0+1 :
        comment((notrace:-current_prolog_flag(debug, off), !)).
        decl_term_vars([a(1)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(econt, cont).
        comment((notrace:-['$get_level'(A), current_prolog_flag(debug, off), '$cut'(A)])).
        put_var(a(1)).
        inline('$get_level'(a(1))).
        put_cont('$cut'(a(1), cont), p(1)).
        execute(current_prolog_flag(s(1), s(2), p(1))).
notrace/0+2 :
        comment((notrace:-set_prolog_flag(debug, off), '$fast_write'('{Small debugger is switch off}'), nl, !)).
        decl_term_vars([a(1)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(econt, cont).
        comment((notrace:-['$get_level'(A), set_prolog_flag(debug, off), '$fast_write'('{Small debugger is switch off}'), nl, '$cut'(A)])).
        put_var(a(1)).
        inline('$get_level'(a(1))).
        put_cont('$cut'(a(1), cont), p(1)).
        put_cont(nl(p(1)), p(2)).
        put_cont('$fast_write'(s(3), p(2)), p(3)).
        execute(set_prolog_flag(s(1), s(2), p(3))).
end_predicate(notrace/0).

begin_predicate(debug/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([debug/0, 'builtins.pl']).
main(debug/0, (public)) :
debug/0 :
        comment((debug:-trace)).
        setB0.
        comment((debug:-[trace])).
        execute(trace(cont)).
end_predicate(debug/0).

begin_predicate(nodebug/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([nodebug/0, 'builtins.pl']).
main(nodebug/0, (public)) :
nodebug/0 :
        comment((nodebug:-notrace)).
        setB0.
        comment((nodebug:-[notrace])).
        execute(notrace(cont)).
end_predicate(nodebug/0).

begin_predicate(spy/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([spy/1, 'builtins.pl']).
main(spy/1, (public)) :
        put_con(spy/1, s(1)).
        put_con(leap, s(2)).
        put_con(yes, s(3)).
spy/1 :
        comment((spy(A):-'$term_to_predicateindicator'(A, B, spy(A)), trace, '$assert_spypoint'(B), '$set_debug_flag'(leap, yes), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        comment((spy(A):-['$get_level'(B), '$term_to_predicateindicator'(A, C, spy(A)), trace, '$assert_spypoint'(C), '$set_debug_flag'(leap, yes), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_var(a(3)).
        put_str_args([a(1)], y(1)).
        put_str(s(1), y(1), a(4)).
        put_cont('$cut'(a(2), cont), p(1)).
        put_cont('$set_debug_flag'(s(2), s(3), p(1)), p(2)).
        put_cont('$assert_spypoint'(a(3), p(2)), p(3)).
        put_cont(trace(p(3)), p(4)).
        execute('$term_to_predicateindicator'(a(1), a(3), a(4), p(4))).
end_predicate(spy/1).

begin_predicate('$assert_spypoint'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$assert_spypoint'/1, 'builtins.pl']).
main('$assert_spypoint'/1, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(/ / 2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        put_con('$current_spypoint'/3, s(4)).
        put_con(info, s(5)).
        put_con(spypoint, s(6)).
        put_con(is, s(7)).
        put_con(already, s(8)).
        put_con(added, s(9)).
        put_con([], s(10)).
        put_list(s(9), s(10), s(11)).
        put_list(s(8), s(11), s(12)).
        put_list(s(7), s(12), s(13)).
        put_con('$consulted_predicate'/3, s(14)).
        put_list(s(7), s(11), s(15)).
        put_con(warning, s(16)).
        put_con(no, s(17)).
        put_con(matching, s(18)).
        put_con(predicate, s(19)).
        put_con(for, s(20)).
        put_con(spy, s(21)).
        label(fail/0).
        label('$assert_spypoint'/1+var).
        label('$assert_spypoint'/1+var+1).
        label('$assert_spypoint'/1+var+2).
        label('$assert_spypoint'/1+1).
        label('$assert_spypoint'/1+2).
        label('$assert_spypoint'/1+3).
'$assert_spypoint'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$assert_spypoint'/1+var, fail/0, fail/0, fail/0, '$assert_spypoint'/1+var, fail/0).
'$assert_spypoint'/1+var :
        try('$assert_spypoint'/1+1, '$assert_spypoint'/1+var+1).
'$assert_spypoint'/1+var+1 :
        retry('$assert_spypoint'/1+2, '$assert_spypoint'/1+var+2).
'$assert_spypoint'/1+var+2 :
        trust('$assert_spypoint'/1+3).
'$assert_spypoint'/1+1 :
        comment(('$assert_spypoint'(A:B/C):-clause('$current_spypoint'(A, B, C), D), print_message(info, [spypoint, A:B/C, is, already, added]), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$assert_spypoint'(A:B/C):-['$get_level'(D), clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(A, B, C), E), print_message(info, [spypoint, A:B/C, is, already, added]), '$cut'(D)])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        get_str(/ / 2, s(2), a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_str_args([a(2), a(4), a(5)], y(1)).
        put_str(s(4), y(1), a(7)).
        put_str_args([s(3), a(7)], y(2)).
        put_str(s(1), y(2), a(8)).
        put_str_args([a(4), a(5)], y(3)).
        put_str(s(2), y(3), a(9)).
        put_str_args([a(2), a(9)], y(4)).
        put_str(s(1), y(4), a(10)).
        put_list(a(10), s(13), a(11)).
        put_list(s(6), a(11), a(12)).
        put_cont('$cut'(a(6), cont), p(1)).
        put_cont(print_message(s(5), a(12), p(1)), p(2)).
        execute(clause(a(8), void, p(2))).
'$assert_spypoint'/1+2 :
        comment(('$assert_spypoint'(A:B/C):-clause('$consulted_predicate'(A, B/C, D), E), assertz('$current_spypoint'(A, B, C)), print_message(info, [spypoint, A:B/C, is, added]), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$assert_spypoint'(A:B/C):-['$get_level'(D), clause('jp.ac.kobe_u.cs.prolog.builtin':'$consulted_predicate'(A, B/C, E), F), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(A, B, C)), print_message(info, [spypoint, A:B/C, is, added]), '$cut'(D)])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        get_str(/ / 2, s(2), a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_str_args([a(4), a(5)], y(1)).
        put_str(s(2), y(1), a(7)).
        put_str_args([a(2), a(7), void], y(2)).
        put_str(s(14), y(2), a(8)).
        put_str_args([s(3), a(8)], y(3)).
        put_str(s(1), y(3), a(9)).
        put_str_args([a(2), a(4), a(5)], y(4)).
        put_str(s(4), y(4), a(10)).
        put_str_args([s(3), a(10)], y(5)).
        put_str(s(1), y(5), a(11)).
        put_str_args([a(4), a(5)], y(6)).
        put_str(s(2), y(6), a(12)).
        put_str_args([a(2), a(12)], y(7)).
        put_str(s(1), y(7), a(13)).
        put_list(a(13), s(15), a(14)).
        put_list(s(6), a(14), a(15)).
        put_cont('$cut'(a(6), cont), p(1)).
        put_cont(print_message(s(5), a(15), p(1)), p(2)).
        put_cont(assertz(a(11), p(2)), p(3)).
        execute(clause(a(9), void, p(3))).
'$assert_spypoint'/1+3 :
        comment(('$assert_spypoint'(A:B/C):-print_message(warning, [no, matching, predicate, for, spy, A:B/C]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$assert_spypoint'(A:B/C):-[print_message(warning, [no, matching, predicate, for, spy, A:B/C])])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        get_str(/ / 2, s(2), a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_str_args([a(4), a(5)], y(1)).
        put_str(s(2), y(1), a(6)).
        put_str_args([a(2), a(6)], y(2)).
        put_str(s(1), y(2), a(7)).
        put_list(a(7), s(10), a(8)).
        put_list(s(21), a(8), a(9)).
        put_list(s(20), a(9), a(10)).
        put_list(s(19), a(10), a(11)).
        put_list(s(18), a(11), a(12)).
        put_list(s(17), a(12), a(13)).
        execute(print_message(s(16), a(13), cont)).
end_predicate('$assert_spypoint'/1).

begin_predicate(nospy/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([nospy/1, 'builtins.pl']).
main(nospy/1, (public)) :
        put_con(nospy/1, s(1)).
        put_con(leap, s(2)).
        put_con(no, s(3)).
nospy/1 :
        comment((nospy(A):-'$term_to_predicateindicator'(A, B, nospy(A)), '$retract_spypoint'(B), '$set_debug_flag'(leap, no), !)).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        set(arg(1), a(1)).
        comment((nospy(A):-['$get_level'(B), '$term_to_predicateindicator'(A, C, nospy(A)), '$retract_spypoint'(C), '$set_debug_flag'(leap, no), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        put_var(a(3)).
        put_str_args([a(1)], y(1)).
        put_str(s(1), y(1), a(4)).
        put_cont('$cut'(a(2), cont), p(1)).
        put_cont('$set_debug_flag'(s(2), s(3), p(1)), p(2)).
        put_cont('$retract_spypoint'(a(3), p(2)), p(3)).
        execute('$term_to_predicateindicator'(a(1), a(3), a(4), p(3))).
end_predicate(nospy/1).

begin_predicate('$retract_spypoint'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$retract_spypoint'/1, 'builtins.pl']).
main('$retract_spypoint'/1, non- (public)) :
        put_con((:)/2, s(1)).
        put_con(/ / 2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        put_con('$current_spypoint'/3, s(4)).
        put_con(info, s(5)).
        put_con(spypoint, s(6)).
        put_con(is, s(7)).
        put_con(removed, s(8)).
        put_con([], s(9)).
        put_list(s(8), s(9), s(10)).
        put_list(s(7), s(10), s(11)).
        label('$retract_spypoint'/1+var).
        label('$retract_spypoint'/1+var+1).
        label('$retract_spypoint'/1+1).
        label('$retract_spypoint'/1+2).
'$retract_spypoint'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$retract_spypoint'/1+var, '$retract_spypoint'/1+2, '$retract_spypoint'/1+2, '$retract_spypoint'/1+2, '$retract_spypoint'/1+var, '$retract_spypoint'/1+2).
'$retract_spypoint'/1+var :
        try('$retract_spypoint'/1+1, '$retract_spypoint'/1+var+1).
'$retract_spypoint'/1+var+1 :
        trust('$retract_spypoint'/1+2).
'$retract_spypoint'/1+1 :
        comment(('$retract_spypoint'(A:B/C):-retract('$current_spypoint'(A, B, C)), print_message(info, [spypoint, A:B/C, is, removed]), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$retract_spypoint'(A:B/C):-['$get_level'(D), retract('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(A, B, C)), print_message(info, [spypoint, A:B/C, is, removed]), '$cut'(D)])).
        get_str((:)/2, s(1), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        get_str(/ / 2, s(2), a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_str_args([a(2), a(4), a(5)], y(1)).
        put_str(s(4), y(1), a(7)).
        put_str_args([s(3), a(7)], y(2)).
        put_str(s(1), y(2), a(8)).
        put_str_args([a(4), a(5)], y(3)).
        put_str(s(2), y(3), a(9)).
        put_str_args([a(2), a(9)], y(4)).
        put_str(s(1), y(4), a(10)).
        put_list(a(10), s(11), a(11)).
        put_list(s(6), a(11), a(12)).
        put_cont('$cut'(a(6), cont), p(1)).
        put_cont(print_message(s(5), a(12), p(1)), p(2)).
        execute(retract(a(8), p(2))).
'$retract_spypoint'/1+2 :
        comment(('$retract_spypoint'(A):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$retract_spypoint'(A):-[])).
        execute(cont).
end_predicate('$retract_spypoint'/1).

begin_predicate(nospyall/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([nospyall/0, 'builtins.pl']).
main(nospyall/0, (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$current_spypoint'/3, s(3)).
        put_con(leap, s(4)).
        put_con(no, s(5)).
nospyall/0 :
        comment((nospyall:-retractall('$current_spypoint'(A, B, C)), '$set_debug_flag'(leap, no))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        comment((nospyall:-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(A, B, C)), '$set_debug_flag'(leap, no)])).
        put_str_args([void, void, void], y(1)).
        put_str(s(3), y(1), a(1)).
        put_str_args([s(2), a(1)], y(2)).
        put_str(s(1), y(2), a(2)).
        put_cont('$set_debug_flag'(s(4), s(5), cont), p(1)).
        execute(retractall(a(2), p(1))).
end_predicate(nospyall/0).

begin_predicate(leash/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([leash/1, 'builtins.pl']).
main(leash/1, (public)) :
        put_con(type/1, s(1)).
        put_con(leash_specifier, s(2)).
        put_str_args([s(2)], s(3)).
        put_str(s(1), s(3), s(4)).
        put_con(leash/1, s(5)).
        put_int(1, si(6)).
        label(leash/1+sub+1).
        label(leash/1+1).
        label(leash/1+2).
leash/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try(leash/1+1, leash/1+sub+1).
leash/1+sub+1 :
        trust(leash/1+2).
leash/1+1 :
        comment((leash(A):-nonvar(A), '$leash'(A), !)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((leash(A):-['$get_level'(B), nonvar(A), '$leash'(A), '$cut'(B)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(nonvar(a(1))).
        put_cont('$cut'(a(2), cont), p(1)).
        execute('$leash'(a(1), p(1))).
leash/1+2 :
        comment((leash(A):-illarg(type(leash_specifier), leash(A), 1))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((leash(A):-[illarg(type(leash_specifier), leash(A), 1)])).
        put_str_args([a(1)], y(1)).
        put_str(s(5), y(1), a(2)).
        execute(illarg(s(4), a(2), si(6), cont)).
end_predicate(leash/1).

begin_predicate('$leash'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$leash'/1, 'builtins.pl']).
main('$leash'/1, non- (public)) :
        put_con([], s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        put_con('$current_leash'/1, s(4)).
        put_con(info, s(5)).
        put_con(no, s(6)).
        put_con(leashing, s(7)).
        put_list(s(7), s(1), s(8)).
        put_list(s(6), s(8), s(9)).
        put_con(stopping, s(10)).
        put_con(on, s(11)).
        label('$leash'/1+var).
        label('$leash'/1+var+1).
        label('$leash'/1+1).
        label('$leash'/1+2).
'$leash'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$leash'/1+var, '$leash'/1+2, '$leash'/1+2, '$leash'/1+var, '$leash'/1+2, '$leash'/1+2).
'$leash'/1+var :
        try('$leash'/1+1, '$leash'/1+var+1).
'$leash'/1+var+1 :
        trust('$leash'/1+2).
'$leash'/1+1 :
        comment(('$leash'([]):-!, retractall('$current_leash'(A)), print_message(info, [no, leashing]))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$leash'([]):-['$neck_cut', retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(A)), print_message(info, [no, leashing])])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        put_str_args([void], y(1)).
        put_str(s(4), y(1), a(2)).
        put_str_args([s(3), a(2)], y(2)).
        put_str(s(2), y(2), a(3)).
        put_cont(print_message(s(5), s(9), cont), p(1)).
        execute(retractall(a(3), p(1))).
'$leash'/1+2 :
        comment(('$leash'(A):-retractall('$current_leash'(B)), '$assert_leash'(A), print_message(info, [leashing, stopping, on, A]))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$leash'(A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(B)), '$assert_leash'(A), print_message(info, [leashing, stopping, on, A])])).
        put_str_args([void], y(1)).
        put_str(s(4), y(1), a(2)).
        put_str_args([s(3), a(2)], y(2)).
        put_str(s(2), y(2), a(3)).
        put_list(a(1), s(1), a(4)).
        put_list(s(11), a(4), a(5)).
        put_list(s(10), a(5), a(6)).
        put_list(s(7), a(6), a(7)).
        put_cont(print_message(s(5), a(7), cont), p(1)).
        put_cont('$assert_leash'(a(1), p(1)), p(2)).
        execute(retractall(a(3), p(2))).
end_predicate('$leash'/1).

begin_predicate('$assert_leash'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$assert_leash'/1, 'builtins.pl']).
main('$assert_leash'/1, non- (public)) :
        put_con([], s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        put_con('$current_leash'/1, s(4)).
        label(fail/0).
        label('$assert_leash'/1+var).
        label('$assert_leash'/1+var+1).
        label('$assert_leash'/1+1).
        label('$assert_leash'/1+2).
'$assert_leash'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$assert_leash'/1+var, fail/0, fail/0, '$assert_leash'/1+1, fail/0, '$assert_leash'/1+2).
'$assert_leash'/1+var :
        try('$assert_leash'/1+1, '$assert_leash'/1+var+1).
'$assert_leash'/1+var+1 :
        trust('$assert_leash'/1+2).
'$assert_leash'/1+1 :
        comment(('$assert_leash'([]):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$assert_leash'([]):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$assert_leash'/1+2 :
        comment(('$assert_leash'([A|B]):-'$leash_specifier'(A), assertz('$current_leash'(A)), '$assert_leash'(B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$assert_leash'([A|B]):-['$leash_specifier'(A), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(A)), '$assert_leash'(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_str_args([a(2)], y(1)).
        put_str(s(4), y(1), a(4)).
        put_str_args([s(3), a(4)], y(2)).
        put_str(s(2), y(2), a(5)).
        put_cont('$assert_leash'(a(3), cont), p(1)).
        put_cont(assertz(a(5), p(1)), p(2)).
        execute('$leash_specifier'(a(2), p(2))).
end_predicate('$assert_leash'/1).

begin_predicate('$leash_specifier'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$leash_specifier'/1, 'builtins.pl']).
main('$leash_specifier'/1, non- (public)) :
        put_con(call, s(1)).
        put_con(exit, s(2)).
        put_con(redo, s(3)).
        put_con(fail, s(4)).
        label(fail/0).
        label('$leash_specifier'/1+var).
        label('$leash_specifier'/1+var+1).
        label('$leash_specifier'/1+var+2).
        label('$leash_specifier'/1+var+3).
        label('$leash_specifier'/1+con).
        label('$leash_specifier'/1+1).
        label('$leash_specifier'/1+2).
        label('$leash_specifier'/1+3).
        label('$leash_specifier'/1+4).
        new_hash(con, 4).
        static([put_hash(s(1), '$leash_specifier'/1+1, con), put_hash(s(2), '$leash_specifier'/1+2, con), put_hash(s(3), '$leash_specifier'/1+3, con), put_hash(s(4), '$leash_specifier'/1+4, con)]).
'$leash_specifier'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$leash_specifier'/1+var, fail/0, fail/0, '$leash_specifier'/1+con, fail/0, fail/0).
'$leash_specifier'/1+var :
        try('$leash_specifier'/1+1, '$leash_specifier'/1+var+1).
'$leash_specifier'/1+var+1 :
        retry('$leash_specifier'/1+2, '$leash_specifier'/1+var+2).
'$leash_specifier'/1+var+2 :
        retry('$leash_specifier'/1+3, '$leash_specifier'/1+var+3).
'$leash_specifier'/1+var+3 :
        trust('$leash_specifier'/1+4).
'$leash_specifier'/1+con :
        switch_on_hash(con, 4, fail/0, [call:'$leash_specifier'/1+1, exit:'$leash_specifier'/1+2, redo:'$leash_specifier'/1+3, fail:'$leash_specifier'/1+4]).
'$leash_specifier'/1+1 :
        comment(('$leash_specifier'(call):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$leash_specifier'(call):-[])).
        get_con(call, s(1), a(1)).
        execute(cont).
'$leash_specifier'/1+2 :
        comment(('$leash_specifier'(exit):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$leash_specifier'(exit):-[])).
        get_con(exit, s(2), a(1)).
        execute(cont).
'$leash_specifier'/1+3 :
        comment(('$leash_specifier'(redo):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$leash_specifier'(redo):-[])).
        get_con(redo, s(3), a(1)).
        execute(cont).
'$leash_specifier'/1+4 :
        comment(('$leash_specifier'(fail):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$leash_specifier'(fail):-[])).
        get_con(fail, s(4), a(1)).
        execute(cont).
end_predicate('$leash_specifier'/1).

begin_predicate('$trace_goal'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$trace_goal'/1, 'builtins.pl']).
main('$trace_goal'/1, non- (public)) :
        put_con(leap, s(1)).
        put_con(no, s(2)).
        put_con(user, s(3)).
        put_int(0, si(4)).
        put_con(trace, s(5)).
'$trace_goal'/1 :
        comment(('$trace_goal'(A):-'$set_debug_flag'(leap, no), '$get_level'(B), '$meta_call'(A, user, B, 0, trace))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        set(arg(1), a(1)).
        comment(('$trace_goal'(A):-['$set_debug_flag'(leap, no), '$get_level'(B), '$meta_call'(A, user, B, 0, trace)])).
        put_var(a(2)).
        put_cont('$meta_call'(a(1), s(3), a(2), si(4), s(5), cont), p(1)).
        put_cont('$get_level'(a(2), p(1)), p(2)).
        execute('$set_debug_flag'(s(1), s(2), p(2))).
end_predicate('$trace_goal'/1).

begin_predicate('$trace_goal'/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$trace_goal'/4, 'builtins.pl']).
main('$trace_goal'/4, non- (public)) :
        put_con(call, s(1)).
        put_con(trace, s(2)).
        put_con(exit, s(3)).
        put_con(fail, s(4)).
        label('$trace_goal'/4+sub+1).
        label('$trace_goal'/4+1).
        label('$trace_goal'/4+2).
'$trace_goal'/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        try('$trace_goal'/4+1, '$trace_goal'/4+sub+1).
'$trace_goal'/4+sub+1 :
        trust('$trace_goal'/4+2).
'$trace_goal'/4+1 :
        comment(('$trace_goal'(A, B, C, D):-print_procedure_box(call, A, B, C, D), '$call_internal'(A, B, C, D, trace), print_procedure_box(exit, A, B, C, D), redo_procedure_box(A, B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$trace_goal'(A, B, C, D):-[print_procedure_box(call, A, B, C, D), '$call_internal'(A, B, C, D, trace), print_procedure_box(exit, A, B, C, D), redo_procedure_box(A, B, C, D)])).
        put_cont(redo_procedure_box(a(1), a(2), a(3), a(4), cont), p(1)).
        put_cont(print_procedure_box(s(3), a(1), a(2), a(3), a(4), p(1)), p(2)).
        put_cont('$call_internal'(a(1), a(2), a(3), a(4), s(2), p(2)), p(3)).
        execute(print_procedure_box(s(1), a(1), a(2), a(3), a(4), p(3))).
'$trace_goal'/4+2 :
        comment(('$trace_goal'(A, B, C, D):-print_procedure_box(fail, A, B, C, D), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment(('$trace_goal'(A, B, C, D):-[print_procedure_box(fail, A, B, C, D), fail])).
        put_cont(fail(cont), p(1)).
        execute(print_procedure_box(s(4), a(1), a(2), a(3), a(4), p(1))).
end_predicate('$trace_goal'/4).

begin_predicate(print_procedure_box/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([print_procedure_box/5, 'builtins.pl']).
main(print_procedure_box/5, non- (public)) :
        put_con(/ / 2, s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        put_con('$current_spypoint'/3, s(4)).
        put_con(+, s(5)).
        put_con(:, s(6)).
        put_con([], s(7)).
        put_con(print_procedure_box/5, s(8)).
        put_con('$leap_flag'/1, s(9)).
        put_con(no, s(10)).
        put_str_args([s(10)], s(11)).
        put_str(s(9), s(11), s(12)).
        put_str_args([s(3), s(12)], s(13)).
        put_str(s(2), s(13), s(14)).
        put_con(' ', s(15)).
        label(print_procedure_box/5+sub+1).
        label(print_procedure_box/5+sub+2).
        label(print_procedure_box/5+1).
        label(print_procedure_box/5+2).
        label(print_procedure_box/5+3).
print_procedure_box/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try(print_procedure_box/5+1, print_procedure_box/5+sub+1).
print_procedure_box/5+sub+1 :
        retry(print_procedure_box/5+2, print_procedure_box/5+sub+2).
print_procedure_box/5+sub+2 :
        trust(print_procedure_box/5+3).
print_procedure_box/5+1 :
        comment((print_procedure_box(A, B, C, D/E, F):-clause('$current_spypoint'(C, D, E), G), !, '$builtin_message'([+, F, A, :, C:B]), '$read_blocked'(print_procedure_box(A, B, C, D/E, F)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12), a(13), a(14), a(15), a(16), a(17), a(18)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment((print_procedure_box(A, B, C, D/E, F):-['$get_level'(G), clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_spypoint'(C, D, E), H), '$cut'(G), '$builtin_message'([+, F, A, :, C:B]), '$read_blocked'(print_procedure_box(A, B, C, D/E, F))])).
        get_str(/ / 2, s(1), a(4)).
        unify_var(a(6)).
        unify_var(a(7)).
        put_var(a(8)).
        inline('$get_level'(a(8))).
        put_str_args([a(3), a(6), a(7)], y(1)).
        put_str(s(4), y(1), a(9)).
        put_str_args([s(3), a(9)], y(2)).
        put_str(s(2), y(2), a(10)).
        put_str_args([a(3), a(2)], y(3)).
        put_str(s(2), y(3), a(11)).
        put_list(a(11), s(7), a(12)).
        put_list(s(6), a(12), a(13)).
        put_list(a(1), a(13), a(14)).
        put_list(a(5), a(14), a(15)).
        put_list(s(5), a(15), a(16)).
        put_str_args([a(6), a(7)], y(4)).
        put_str(s(1), y(4), a(17)).
        put_str_args([a(1), a(2), a(3), a(17), a(5)], y(5)).
        put_str(s(8), y(5), a(18)).
        put_cont('$read_blocked'(a(18), cont), p(1)).
        put_cont('$builtin_message'(a(16), p(1)), p(2)).
        put_cont('$cut'(a(8), p(2)), p(3)).
        execute(clause(a(10), void, p(3))).
print_procedure_box/5+2 :
        comment((print_procedure_box(A, B, C, D, E):-clause('$leap_flag'(no), F), !, '$builtin_message'([' ', E, A, :, C:B]), '$dummy_27_builtins.pl'(A, B, C, D, E, G))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10), a(11), a(12)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment((print_procedure_box(A, B, C, D, E):-['$get_level'(F), clause('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(no), G), '$cut'(F), '$builtin_message'([' ', E, A, :, C:B]), '$dummy_27_builtins.pl'(A, B, C, D, E, H)])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        put_str_args([a(3), a(2)], y(1)).
        put_str(s(2), y(1), a(7)).
        put_list(a(7), s(7), a(8)).
        put_list(s(6), a(8), a(9)).
        put_list(a(1), a(9), a(10)).
        put_list(a(5), a(10), a(11)).
        put_list(s(15), a(11), a(12)).
        put_cont('$dummy_27_builtins.pl'(a(1), a(2), a(3), a(4), a(5), void, cont), p(1)).
        put_cont('$builtin_message'(a(12), p(1)), p(2)).
        put_cont('$cut'(a(6), p(2)), p(3)).
        execute(clause(s(14), void, p(3))).
print_procedure_box/5+3 :
        comment((print_procedure_box(A, B, C, D, E):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment((print_procedure_box(A, B, C, D, E):-[])).
        execute(cont).
end_predicate(print_procedure_box/5).

begin_predicate('$dummy_27_builtins.pl'/6).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_27_builtins.pl'/6, 'builtins.pl']).
main('$dummy_27_builtins.pl'/6, non- (public)) :
        put_con((:)/2, s(1)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(2)).
        put_con('$current_leash'/1, s(3)).
        put_con(print_procedure_box/5, s(4)).
        label('$dummy_27_builtins.pl'/6+sub+1).
        label('$dummy_27_builtins.pl'/6+1).
        label('$dummy_27_builtins.pl'/6+2).
'$dummy_27_builtins.pl'/6 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(cont, econt).
        setB0.
        try('$dummy_27_builtins.pl'/6+1, '$dummy_27_builtins.pl'/6+sub+1).
'$dummy_27_builtins.pl'/6+sub+1 :
        trust('$dummy_27_builtins.pl'/6+2).
'$dummy_27_builtins.pl'/6+1 :
        comment(('$dummy_27_builtins.pl'(A, B, C, D, E, F):-clause('$current_leash'(A), F), !, '$read_blocked'(print_procedure_box(A, B, C, D, E)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9), a(10)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_27_builtins.pl'(A, B, C, D, E, F):-['$get_level'(G), clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_leash'(A), F), '$cut'(G), '$read_blocked'(print_procedure_box(A, B, C, D, E))])).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_str_args([a(1)], y(1)).
        put_str(s(3), y(1), a(8)).
        put_str_args([s(2), a(8)], y(2)).
        put_str(s(1), y(2), a(9)).
        put_str_args([a(1), a(2), a(3), a(4), a(5)], y(3)).
        put_str(s(4), y(3), a(10)).
        put_cont('$read_blocked'(a(10), cont), p(1)).
        put_cont('$cut'(a(7), p(1)), p(2)).
        execute(clause(a(9), a(6), p(2))).
'$dummy_27_builtins.pl'/6+2 :
        comment(('$dummy_27_builtins.pl'(A, B, C, D, E, F):-nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_27_builtins.pl'(A, B, C, D, E, F):-[nl])).
        execute(nl(cont)).
end_predicate('$dummy_27_builtins.pl'/6).

begin_predicate(redo_procedure_box/4).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([redo_procedure_box/4, 'builtins.pl']).
main(redo_procedure_box/4, non- (public)) :
        put_con(redo, s(1)).
        label(redo_procedure_box/4+sub+1).
        label(redo_procedure_box/4+1).
        label(redo_procedure_box/4+2).
redo_procedure_box/4 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(cont, econt).
        setB0.
        try(redo_procedure_box/4+1, redo_procedure_box/4+sub+1).
redo_procedure_box/4+sub+1 :
        trust(redo_procedure_box/4+2).
redo_procedure_box/4+1 :
        comment((redo_procedure_box(A, B, C, D):-true)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment((redo_procedure_box(A, B, C, D):-[])).
        execute(cont).
redo_procedure_box/4+2 :
        comment((redo_procedure_box(A, B, C, D):-print_procedure_box(redo, A, B, C, D), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(econt, cont).
        comment((redo_procedure_box(A, B, C, D):-[print_procedure_box(redo, A, B, C, D), fail])).
        put_cont(fail(cont), p(1)).
        execute(print_procedure_box(s(1), a(1), a(2), a(3), a(4), p(1))).
end_predicate(redo_procedure_box/4).

begin_predicate('$dummy_28_builtins.pl'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_28_builtins.pl'/3, 'builtins.pl']).
main('$dummy_28_builtins.pl'/3, non- (public)) :
        put_con([], s(1)).
        put_int(99, si(2)).
        label('$dummy_28_builtins.pl'/3+sub+1).
        label('$dummy_28_builtins.pl'/3+1).
        label('$dummy_28_builtins.pl'/3+2).
'$dummy_28_builtins.pl'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dummy_28_builtins.pl'/3+1, '$dummy_28_builtins.pl'/3+sub+1).
'$dummy_28_builtins.pl'/3+sub+1 :
        trust('$dummy_28_builtins.pl'/3+2).
'$dummy_28_builtins.pl'/3+1 :
        comment(('$dummy_28_builtins.pl'(A, B, C):-A==[], !, B=99)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_28_builtins.pl'(A, B, C):-['$get_level'(D), '$equality_of_term'(A, []), '$cut'(D), '$unify'(B, 99)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline('$equality_of_term'(a(1), s(1))).
        inline('$cut'(a(4))).
        inline('$unify'(a(2), si(2))).
        execute(cont).
'$dummy_28_builtins.pl'/3+2 :
        comment(('$dummy_28_builtins.pl'(A, B, C):-A=[B|C])).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_28_builtins.pl'(A, B, C):-['$unify'(A, [B|C])])).
        put_list(a(2), a(3), a(4)).
        inline('$unify'(a(1), a(4))).
        execute(cont).
end_predicate('$dummy_28_builtins.pl'/3).

begin_predicate('$read_blocked'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$read_blocked'/1, 'builtins.pl']).
main('$read_blocked'/1, non- (public)) :
        put_con(' ? ', s(1)).
'$read_blocked'/1 :
        comment(('$read_blocked'(A):-'$fast_write'(' ? '), flush_output, read_line(B), '$dummy_28_builtins.pl'(B, C, D), '$debug_option'(C, A))).
        setB0.
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2), p(3), p(4)]).
        set(arg(1), a(1)).
        comment(('$read_blocked'(A):-['$fast_write'(' ? '), flush_output, read_line(B), '$dummy_28_builtins.pl'(B, C, D), '$debug_option'(C, A)])).
        put_var(a(2)).
        put_var(a(3)).
        put_cont('$debug_option'(a(3), a(1), cont), p(1)).
        put_cont('$dummy_28_builtins.pl'(a(2), a(3), void, p(1)), p(2)).
        put_cont(read_line(a(2), p(2)), p(3)).
        put_cont(flush_output(p(3)), p(4)).
        execute('$fast_write'(s(1), p(4))).
end_predicate('$read_blocked'/1).

begin_predicate('$debug_option'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$debug_option'/2, 'builtins.pl']).
main('$debug_option'/2, non- (public)) :
        put_int(97, si(1)).
        put_int(99, si(2)).
        put_con(leap, s(3)).
        put_con(no, s(4)).
        put_int(108, si(5)).
        put_con(yes, s(6)).
        put_int(43, si(7)).
        put_con(print_procedure_box/5, s(8)).
        put_con((:)/2, s(9)).
        put_int(45, si(10)).
        put_int(63, si(11)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(12)).
        put_int(104, si(13)).
        label('$debug_option'/2+var).
        label('$debug_option'/2+var+1).
        label('$debug_option'/2+var+2).
        label('$debug_option'/2+var+3).
        label('$debug_option'/2+var+4).
        label('$debug_option'/2+var+5).
        label('$debug_option'/2+var+6).
        label('$debug_option'/2+var+7).
        label('$debug_option'/2+int).
        label('$debug_option'/2+int+0).
        label('$debug_option'/2+int+0+1).
        label('$debug_option'/2+int+1).
        label('$debug_option'/2+int+1+1).
        label('$debug_option'/2+int+2).
        label('$debug_option'/2+int+2+1).
        label('$debug_option'/2+int+3).
        label('$debug_option'/2+int+3+1).
        label('$debug_option'/2+int+4).
        label('$debug_option'/2+int+4+1).
        label('$debug_option'/2+int+5).
        label('$debug_option'/2+int+5+1).
        label('$debug_option'/2+int+6).
        label('$debug_option'/2+int+6+1).
        label('$debug_option'/2+1).
        label('$debug_option'/2+2).
        label('$debug_option'/2+3).
        label('$debug_option'/2+4).
        label('$debug_option'/2+5).
        label('$debug_option'/2+6).
        label('$debug_option'/2+7).
        label('$debug_option'/2+8).
        new_hash(int, 7).
        static([put_hash(si(1), '$debug_option'/2+int+0, int), put_hash(si(2), '$debug_option'/2+int+1, int), put_hash(si(5), '$debug_option'/2+int+2, int), put_hash(si(7), '$debug_option'/2+int+3, int), put_hash(si(10), '$debug_option'/2+int+4, int), put_hash(si(11), '$debug_option'/2+int+5, int), put_hash(si(13), '$debug_option'/2+int+6, int)]).
'$debug_option'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$debug_option'/2+var, '$debug_option'/2+int, '$debug_option'/2+8, '$debug_option'/2+8, '$debug_option'/2+8, '$debug_option'/2+8).
'$debug_option'/2+var :
        try('$debug_option'/2+1, '$debug_option'/2+var+1).
'$debug_option'/2+var+1 :
        retry('$debug_option'/2+2, '$debug_option'/2+var+2).
'$debug_option'/2+var+2 :
        retry('$debug_option'/2+3, '$debug_option'/2+var+3).
'$debug_option'/2+var+3 :
        retry('$debug_option'/2+4, '$debug_option'/2+var+4).
'$debug_option'/2+var+4 :
        retry('$debug_option'/2+5, '$debug_option'/2+var+5).
'$debug_option'/2+var+5 :
        retry('$debug_option'/2+6, '$debug_option'/2+var+6).
'$debug_option'/2+var+6 :
        retry('$debug_option'/2+7, '$debug_option'/2+var+7).
'$debug_option'/2+var+7 :
        trust('$debug_option'/2+8).
'$debug_option'/2+int :
        switch_on_hash(int, 7, '$debug_option'/2+8, [97:'$debug_option'/2+int+0, 99:'$debug_option'/2+int+1, 108:'$debug_option'/2+int+2, 43:'$debug_option'/2+int+3, 45:'$debug_option'/2+int+4, 63:'$debug_option'/2+int+5, 104:'$debug_option'/2+int+6]).
'$debug_option'/2+int+0 :
        try('$debug_option'/2+1, '$debug_option'/2+int+0+1).
'$debug_option'/2+int+0+1 :
        trust('$debug_option'/2+8).
'$debug_option'/2+int+1 :
        try('$debug_option'/2+2, '$debug_option'/2+int+1+1).
'$debug_option'/2+int+1+1 :
        trust('$debug_option'/2+8).
'$debug_option'/2+int+2 :
        try('$debug_option'/2+3, '$debug_option'/2+int+2+1).
'$debug_option'/2+int+2+1 :
        trust('$debug_option'/2+8).
'$debug_option'/2+int+3 :
        try('$debug_option'/2+4, '$debug_option'/2+int+3+1).
'$debug_option'/2+int+3+1 :
        trust('$debug_option'/2+8).
'$debug_option'/2+int+4 :
        try('$debug_option'/2+5, '$debug_option'/2+int+4+1).
'$debug_option'/2+int+4+1 :
        trust('$debug_option'/2+8).
'$debug_option'/2+int+5 :
        try('$debug_option'/2+6, '$debug_option'/2+int+5+1).
'$debug_option'/2+int+5+1 :
        trust('$debug_option'/2+8).
'$debug_option'/2+int+6 :
        try('$debug_option'/2+7, '$debug_option'/2+int+6+1).
'$debug_option'/2+int+6+1 :
        trust('$debug_option'/2+8).
'$debug_option'/2+1 :
        comment(('$debug_option'(97, A):-!, notrace, abort)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(97, A):-['$neck_cut', notrace, abort])).
        get_int(97, si(1), a(1)).
        inline('$neck_cut').
        put_cont(abort(cont), p(1)).
        execute(notrace(p(1))).
'$debug_option'/2+2 :
        comment(('$debug_option'(99, A):-!, '$set_debug_flag'(leap, no))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(99, A):-['$neck_cut', '$set_debug_flag'(leap, no)])).
        get_int(99, si(2), a(1)).
        inline('$neck_cut').
        execute('$set_debug_flag'(s(3), s(4), cont)).
'$debug_option'/2+3 :
        comment(('$debug_option'(108, A):-!, '$set_debug_flag'(leap, yes))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(108, A):-['$neck_cut', '$set_debug_flag'(leap, yes)])).
        get_int(108, si(5), a(1)).
        inline('$neck_cut').
        execute('$set_debug_flag'(s(3), s(6), cont)).
'$debug_option'/2+4 :
        comment(('$debug_option'(43, print_procedure_box(A, B, C, D, E)):-!, spy(C:D), call(print_procedure_box(A, B, C, D, E)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(43, print_procedure_box(A, B, C, D, E)):-['$neck_cut', spy(C:D), call('jp.ac.kobe_u.cs.prolog.builtin':print_procedure_box(A, B, C, D, E))])).
        get_int(43, si(7), a(1)).
        get_str(print_procedure_box/5, s(8), a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_str_args([a(5), a(6)], y(1)).
        put_str(s(9), y(1), a(8)).
        put_clo(print_procedure_box(a(3), a(4), a(5), a(6), a(7)), a(9)).
        put_cont(call(a(9), cont), p(1)).
        execute(spy(a(8), p(1))).
'$debug_option'/2+5 :
        comment(('$debug_option'(45, print_procedure_box(A, B, C, D, E)):-!, nospy(C:D), call(print_procedure_box(A, B, C, D, E)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8), a(9)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(45, print_procedure_box(A, B, C, D, E)):-['$neck_cut', nospy(C:D), call('jp.ac.kobe_u.cs.prolog.builtin':print_procedure_box(A, B, C, D, E))])).
        get_int(45, si(10), a(1)).
        get_str(print_procedure_box/5, s(8), a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_var(a(6)).
        unify_var(a(7)).
        inline('$neck_cut').
        put_str_args([a(5), a(6)], y(1)).
        put_str(s(9), y(1), a(8)).
        put_clo(print_procedure_box(a(3), a(4), a(5), a(6), a(7)), a(9)).
        put_cont(call(a(9), cont), p(1)).
        execute(nospy(a(8), p(1))).
'$debug_option'/2+6 :
        comment(('$debug_option'(63, A):-!, '$show_debug_option', call(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(63, A):-['$neck_cut', '$show_debug_option', call('jp.ac.kobe_u.cs.prolog.builtin':A)])).
        get_int(63, si(11), a(1)).
        inline('$neck_cut').
        put_str_args([s(12), a(2)], y(1)).
        put_str(s(9), y(1), a(3)).
        put_cont(call(a(3), cont), p(1)).
        execute('$show_debug_option'(p(1))).
'$debug_option'/2+7 :
        comment(('$debug_option'(104, A):-!, '$show_debug_option', call(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(104, A):-['$neck_cut', '$show_debug_option', call('jp.ac.kobe_u.cs.prolog.builtin':A)])).
        get_int(104, si(13), a(1)).
        inline('$neck_cut').
        put_str_args([s(12), a(2)], y(1)).
        put_str(s(9), y(1), a(3)).
        put_cont(call(a(3), cont), p(1)).
        execute('$show_debug_option'(p(1))).
'$debug_option'/2+8 :
        comment(('$debug_option'(A, B):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$debug_option'(A, B):-[])).
        execute(cont).
end_predicate('$debug_option'/2).

begin_predicate('$show_debug_option'/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$show_debug_option'/0, 'builtins.pl']).
main('$show_debug_option'/0, non- (public)) :
        put_int(4, si(1)).
        put_con('Debuggin options:', s(2)).
        put_con('a      abort', s(3)).
        put_con('RET    creep', s(4)).
        put_con('c      creep', s(5)).
        put_con('l      leap', s(6)).
        put_con('+      spy this', s(7)).
        put_con('-      nospy this', s(8)).
        put_con('?      help', s(9)).
        put_con('h      help', s(10)).
'$show_debug_option'/0 :
        comment(('$show_debug_option':-tab(4), '$fast_write'('Debuggin options:'), nl, tab(4), '$fast_write'('a      abort'), nl, tab(4), '$fast_write'('RET    creep'), nl, tab(4), '$fast_write'('c      creep'), nl, tab(4), '$fast_write'('l      leap'), nl, tab(4), '$fast_write'('+      spy this'), nl, tab(4), '$fast_write'('-      nospy this'), nl, tab(4), '$fast_write'('?      help'), nl, tab(4), '$fast_write'('h      help'), nl)).
        setB0.
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13), p(14), p(15), p(16), p(17), p(18), p(19), p(20), p(21), p(22), p(23), p(24), p(25), p(26)]).
        comment(('$show_debug_option':-[tab(4), '$fast_write'('Debuggin options:'), nl, tab(4), '$fast_write'('a      abort'), nl, tab(4), '$fast_write'('RET    creep'), nl, tab(4), '$fast_write'('c      creep'), nl, tab(4), '$fast_write'('l      leap'), nl, tab(4), '$fast_write'('+      spy this'), nl, tab(4), '$fast_write'('-      nospy this'), nl, tab(4), '$fast_write'('?      help'), nl, tab(4), '$fast_write'('h      help'), nl])).
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(10), p(1)), p(2)).
        put_cont(tab(si(1), p(2)), p(3)).
        put_cont(nl(p(3)), p(4)).
        put_cont('$fast_write'(s(9), p(4)), p(5)).
        put_cont(tab(si(1), p(5)), p(6)).
        put_cont(nl(p(6)), p(7)).
        put_cont('$fast_write'(s(8), p(7)), p(8)).
        put_cont(tab(si(1), p(8)), p(9)).
        put_cont(nl(p(9)), p(10)).
        put_cont('$fast_write'(s(7), p(10)), p(11)).
        put_cont(tab(si(1), p(11)), p(12)).
        put_cont(nl(p(12)), p(13)).
        put_cont('$fast_write'(s(6), p(13)), p(14)).
        put_cont(tab(si(1), p(14)), p(15)).
        put_cont(nl(p(15)), p(16)).
        put_cont('$fast_write'(s(5), p(16)), p(17)).
        put_cont(tab(si(1), p(17)), p(18)).
        put_cont(nl(p(18)), p(19)).
        put_cont('$fast_write'(s(4), p(19)), p(20)).
        put_cont(tab(si(1), p(20)), p(21)).
        put_cont(nl(p(21)), p(22)).
        put_cont('$fast_write'(s(3), p(22)), p(23)).
        put_cont(tab(si(1), p(23)), p(24)).
        put_cont(nl(p(24)), p(25)).
        put_cont('$fast_write'(s(2), p(25)), p(26)).
        execute(tab(si(1), p(26))).
end_predicate('$show_debug_option'/0).

begin_predicate('$set_debug_flag'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$set_debug_flag'/2, 'builtins.pl']).
main('$set_debug_flag'/2, non- (public)) :
        put_con(leap, s(1)).
        put_con((:)/2, s(2)).
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(3)).
        put_con('$leap_flag'/1, s(4)).
        label(fail/0).
        label('$set_debug_flag'/2+var).
        label('$set_debug_flag'/2+var+1).
        label('$set_debug_flag'/2+1).
        label('$set_debug_flag'/2+2).
'$set_debug_flag'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$set_debug_flag'/2+var, fail/0, fail/0, '$set_debug_flag'/2+var, fail/0, fail/0).
'$set_debug_flag'/2+var :
        try('$set_debug_flag'/2+1, '$set_debug_flag'/2+var+1).
'$set_debug_flag'/2+var+1 :
        trust('$set_debug_flag'/2+2).
'$set_debug_flag'/2+1 :
        comment(('$set_debug_flag'(leap, A):-clause('$leap_flag'(A), B), !)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$set_debug_flag'(leap, A):-['$get_level'(B), clause('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(A), C), '$cut'(B)])).
        get_con(leap, s(1), a(1)).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        put_str_args([a(2)], y(1)).
        put_str(s(4), y(1), a(4)).
        put_str_args([s(3), a(4)], y(2)).
        put_str(s(2), y(2), a(5)).
        put_cont('$cut'(a(3), cont), p(1)).
        execute(clause(a(5), void, p(1))).
'$set_debug_flag'/2+2 :
        comment(('$set_debug_flag'(leap, A):-retractall('$leap_flag'(B)), assertz('$leap_flag'(A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$set_debug_flag'(leap, A):-[retractall('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(B)), assertz('jp.ac.kobe_u.cs.prolog.builtin':'$leap_flag'(A))])).
        get_con(leap, s(1), a(1)).
        put_str_args([void], y(1)).
        put_str(s(4), y(1), a(3)).
        put_str_args([s(3), a(3)], y(2)).
        put_str(s(2), y(2), a(4)).
        put_str_args([a(2)], y(3)).
        put_str(s(4), y(3), a(5)).
        put_str_args([s(3), a(5)], y(4)).
        put_str(s(2), y(4), a(6)).
        put_cont(assertz(a(6), cont), p(1)).
        execute(retractall(a(4), p(1))).
end_predicate('$set_debug_flag'/2).

begin_predicate(listing/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([listing/0, 'builtins.pl']).
main(listing/0, (public)) :
        put_con(user, s(1)).
listing/0 :
        comment((listing:-'$listing'(A, user))).
        setB0.
        comment((listing:-['$listing'(A, user)])).
        execute('$listing'(void, s(1), cont)).
end_predicate(listing/0).

begin_predicate(listing/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([listing/1, 'builtins.pl']).
main(listing/1, (public)) :
        put_con(var, s(1)).
        put_con(listing/1, s(2)).
        put_int(1, si(3)).
        put_con(/ / 2, s(4)).
        put_con(user, s(5)).
        put_con((:)/2, s(6)).
        put_con(type/1, s(7)).
        put_con(predicate_indicator, s(8)).
        put_str_args([s(8)], s(9)).
        put_str(s(7), s(9), s(10)).
        label(listing/1+var).
        label(listing/1+var+1).
        label(listing/1+var+2).
        label(listing/1+var+3).
        label(listing/1+var+4).
        label(listing/1+int).
        label(listing/1+int+1).
        label(listing/1+int+2).
        label(listing/1+str).
        label(listing/1+str+0).
        label(listing/1+str+0+1).
        label(listing/1+str+0+2).
        label(listing/1+str+0+3).
        label(listing/1+str+1).
        label(listing/1+str+1+1).
        label(listing/1+str+1+2).
        label(listing/1+str+1+3).
        label(listing/1+1).
        label(listing/1+2).
        label(listing/1+3).
        label(listing/1+4).
        label(listing/1+5).
        new_hash(str, 2).
        static([put_hash(s(4), listing/1+str+0, str), put_hash(s(6), listing/1+str+1, str)]).
listing/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term(listing/1+var, listing/1+int, listing/1+int, listing/1+int, listing/1+str, listing/1+int).
listing/1+var :
        try(listing/1+1, listing/1+var+1).
listing/1+var+1 :
        retry(listing/1+2, listing/1+var+2).
listing/1+var+2 :
        retry(listing/1+3, listing/1+var+3).
listing/1+var+3 :
        retry(listing/1+4, listing/1+var+4).
listing/1+var+4 :
        trust(listing/1+5).
listing/1+int :
        try(listing/1+1, listing/1+int+1).
listing/1+int+1 :
        retry(listing/1+2, listing/1+int+2).
listing/1+int+2 :
        trust(listing/1+5).
listing/1+str :
        switch_on_hash(str, 2, listing/1+int, [/ / 2:listing/1+str+0, (:)/2:listing/1+str+1]).
listing/1+str+0 :
        try(listing/1+1, listing/1+str+0+1).
listing/1+str+0+1 :
        retry(listing/1+2, listing/1+str+0+2).
listing/1+str+0+2 :
        retry(listing/1+3, listing/1+str+0+3).
listing/1+str+0+3 :
        trust(listing/1+5).
listing/1+str+1 :
        try(listing/1+1, listing/1+str+1+1).
listing/1+str+1+1 :
        retry(listing/1+2, listing/1+str+1+2).
listing/1+str+1+2 :
        retry(listing/1+4, listing/1+str+1+3).
listing/1+str+1+3 :
        trust(listing/1+5).
listing/1+1 :
        comment((listing(A):-var(A), !, illarg(var, listing(A), 1))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((listing(A):-['$get_level'(B), var(A), '$cut'(B), illarg(var, listing(A), 1)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(var(a(1))).
        inline('$cut'(a(2))).
        put_str_args([a(1)], y(1)).
        put_str(s(2), y(1), a(3)).
        execute(illarg(s(1), a(3), si(3), cont)).
listing/1+2 :
        comment((listing(A):-atom(A), !, '$listing'(B, A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((listing(A):-['$get_level'(B), atom(A), '$cut'(B), '$listing'(C, A)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(atom(a(1))).
        inline('$cut'(a(2))).
        execute('$listing'(void, a(1), cont)).
listing/1+3 :
        comment((listing(A/B):-!, '$listing'(A/B, user))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((listing(A/B):-['$neck_cut', '$listing'(A/B, user)])).
        get_str(/ / 2, s(4), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        inline('$neck_cut').
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(4), y(1), a(4)).
        execute('$listing'(a(4), s(5), cont)).
listing/1+4 :
        comment((listing(A:B):-atom(A), !, '$listing'(B, A))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((listing(A:B):-['$get_level'(C), atom(A), '$cut'(C), '$listing'(B, A)])).
        get_str((:)/2, s(6), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(atom(a(2))).
        inline('$cut'(a(4))).
        execute('$listing'(a(3), a(2), cont)).
listing/1+5 :
        comment((listing(A):-illarg(type(predicate_indicator), listing(A), 1))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment((listing(A):-[illarg(type(predicate_indicator), listing(A), 1)])).
        put_str_args([a(1)], y(1)).
        put_str(s(2), y(1), a(2)).
        execute(illarg(s(10), a(2), si(3), cont)).
end_predicate(listing/1).

begin_predicate('$listing'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$listing'/2, 'builtins.pl']).
main('$listing'/2, non- (public)) :
        put_con(/ / 2, s(1)).
        put_con(type/1, s(2)).
        put_con(predicate_indicator, s(3)).
        put_str_args([s(3)], s(4)).
        put_str(s(2), s(4), s(5)).
        put_con(listing/1, s(6)).
        put_con((:)/2, s(7)).
        put_int(1, si(8)).
        label('$listing'/2+var).
        label('$listing'/2+var+1).
        label('$listing'/2+var+2).
        label('$listing'/2+int).
        label('$listing'/2+int+1).
        label('$listing'/2+1).
        label('$listing'/2+2).
        label('$listing'/2+3).
'$listing'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$listing'/2+var, '$listing'/2+int, '$listing'/2+int, '$listing'/2+int, '$listing'/2+var, '$listing'/2+int).
'$listing'/2+var :
        try('$listing'/2+1, '$listing'/2+var+1).
'$listing'/2+var+1 :
        retry('$listing'/2+2, '$listing'/2+var+2).
'$listing'/2+var+2 :
        trust('$listing'/2+3).
'$listing'/2+int :
        try('$listing'/2+1, '$listing'/2+int+1).
'$listing'/2+int+1 :
        trust('$listing'/2+3).
'$listing'/2+1 :
        comment(('$listing'(A, B):-var(A), !, '$listing_dynamic_clause'(B, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$listing'(A, B):-['$get_level'(C), var(A), '$cut'(C), '$listing_dynamic_clause'(B, D)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        execute('$listing_dynamic_clause'(a(2), void, cont)).
'$listing'/2+2 :
        comment(('$listing'(A/B, C):-atom(A), integer(B), !, '$listing_dynamic_clause'(C, A/B))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$listing'(A/B, C):-['$get_level'(D), atom(A), integer(B), '$cut'(D), '$listing_dynamic_clause'(C, A/B)])).
        get_str(/ / 2, s(1), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        put_var(a(5)).
        inline('$get_level'(a(5))).
        inline(atom(a(3))).
        inline(integer(a(4))).
        inline('$cut'(a(5))).
        put_str_args([a(3), a(4)], y(1)).
        put_str(s(1), y(1), a(6)).
        execute('$listing_dynamic_clause'(a(2), a(6), cont)).
'$listing'/2+3 :
        comment(('$listing'(A, B):-illarg(type(predicate_indicator), listing(B:A), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$listing'(A, B):-[illarg(type(predicate_indicator), listing(B:A), 1)])).
        put_str_args([a(2), a(1)], y(1)).
        put_str(s(7), y(1), a(3)).
        put_str_args([a(3)], y(2)).
        put_str(s(6), y(2), a(4)).
        execute(illarg(s(5), a(4), si(8), cont)).
end_predicate('$listing'/2).

begin_predicate('$listing_dynamic_clause'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$listing_dynamic_clause'/2, 'builtins.pl']).
main('$listing_dynamic_clause'/2, non- (public)) :
        put_con(/ / 2, s(1)).
        label('$listing_dynamic_clause'/2+sub+1).
        label('$listing_dynamic_clause'/2+1).
        label('$listing_dynamic_clause'/2+2).
'$listing_dynamic_clause'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$listing_dynamic_clause'/2+1, '$listing_dynamic_clause'/2+sub+1).
'$listing_dynamic_clause'/2+sub+1 :
        trust('$listing_dynamic_clause'/2+2).
'$listing_dynamic_clause'/2+1 :
        comment(('$listing_dynamic_clause'(A, B):-'$new_internal_database'(A), hash_keys(A, C), '$builtin_member'(B, C), B=D/E, functor(F, D, E), '$clause_internal'(A, B, F, G, H), '$write_dynamic_clause'(A, G), fail)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$listing_dynamic_clause'(A, B):-['$new_internal_database'(A), hash_keys(A, C), '$builtin_member'(B, C), '$unify'(B, D/E), functor(F, D, E), '$clause_internal'(A, B, F, G, H), '$write_dynamic_clause'(A, G), fail])).
        put_var(a(3)).
        put_var(a(4)).
        put_var(a(5)).
        put_str_args([a(4), a(5)], y(1)).
        put_str(s(1), y(1), a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_cont(fail(cont), p(1)).
        put_cont('$write_dynamic_clause'(a(1), a(8), p(1)), p(2)).
        put_cont('$clause_internal'(a(1), a(2), a(7), a(8), void, p(2)), p(3)).
        put_cont(functor(a(7), a(4), a(5), p(3)), p(4)).
        put_cont('$unify'(a(2), a(6), p(4)), p(5)).
        put_cont('$builtin_member'(a(2), a(3), p(5)), p(6)).
        put_cont(hash_keys(a(1), a(3), p(6)), p(7)).
        execute('$new_internal_database'(a(1), p(7))).
'$listing_dynamic_clause'/2+2 :
        comment(('$listing_dynamic_clause'(A, B):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$listing_dynamic_clause'(A, B):-[])).
        execute(cont).
end_predicate('$listing_dynamic_clause'/2).

begin_predicate('$write_dynamic_clause'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_dynamic_clause'/2, 'builtins.pl']).
main('$write_dynamic_clause'/2, non- (public)) :
        put_con((:-)/2, s(1)).
        put_con(true, s(2)).
        put_int(0, si(3)).
        put_con('.', s(4)).
        put_con(' :-', s(5)).
        put_int(8, si(6)).
        label('$write_dynamic_clause'/2+sub+1).
        label('$write_dynamic_clause'/2+sub+2).
        label('$write_dynamic_clause'/2+1).
        label('$write_dynamic_clause'/2+2).
        label('$write_dynamic_clause'/2+3).
'$write_dynamic_clause'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try('$write_dynamic_clause'/2+1, '$write_dynamic_clause'/2+sub+1).
'$write_dynamic_clause'/2+sub+1 :
        retry('$write_dynamic_clause'/2+2, '$write_dynamic_clause'/2+sub+2).
'$write_dynamic_clause'/2+sub+2 :
        trust('$write_dynamic_clause'/2+3).
'$write_dynamic_clause'/2+1 :
        comment(('$write_dynamic_clause'(A, B):-var(B), !, fail)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_clause'(A, B):-['$get_level'(C), var(B), '$cut'(C), fail])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(2))).
        inline('$cut'(a(3))).
        inline(fail).
'$write_dynamic_clause'/2+2 :
        comment(('$write_dynamic_clause'(A, (B:-true)):-!, numbervars(B, 0, C), '$write_dynamic_head'(A, B), write('.'), nl)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_clause'(A, (B:-true)):-['$neck_cut', numbervars(B, 0, C), '$write_dynamic_head'(A, B), write('.'), nl])).
        get_str((:-)/2, s(1), a(2)).
        unify_var(a(3)).
        unify_con(true, s(2)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont(write(s(4), p(1)), p(2)).
        put_cont('$write_dynamic_head'(a(1), a(3), p(2)), p(3)).
        execute(numbervars(a(3), si(3), void, p(3))).
'$write_dynamic_clause'/2+3 :
        comment(('$write_dynamic_clause'(A, (B:-C)):-!, numbervars((B:-C), 0, D), '$write_dynamic_head'(A, B), write(' :-'), nl, '$write_dynamic_body'(C, 8), write('.'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_clause'(A, (B:-C)):-['$neck_cut', numbervars((B:-C), 0, D), '$write_dynamic_head'(A, B), write(' :-'), nl, '$write_dynamic_body'(C, 8), write('.'), nl])).
        get_str((:-)/2, s(1), a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_str_args([a(3), a(4)], y(1)).
        put_str(s(1), y(1), a(5)).
        put_cont(nl(cont), p(1)).
        put_cont(write(s(4), p(1)), p(2)).
        put_cont('$write_dynamic_body'(a(4), si(6), p(2)), p(3)).
        put_cont(nl(p(3)), p(4)).
        put_cont(write(s(5), p(4)), p(5)).
        put_cont('$write_dynamic_head'(a(1), a(3), p(5)), p(6)).
        execute(numbervars(a(5), si(3), void, p(6))).
end_predicate('$write_dynamic_clause'/2).

begin_predicate('$write_dynamic_head'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_dynamic_head'/2, 'builtins.pl']).
main('$write_dynamic_head'/2, non- (public)) :
        put_con(user, s(1)).
        put_con(:, s(2)).
        label('$write_dynamic_head'/2+var).
        label('$write_dynamic_head'/2+var+1).
        label('$write_dynamic_head'/2+1).
        label('$write_dynamic_head'/2+2).
'$write_dynamic_head'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$write_dynamic_head'/2+var, '$write_dynamic_head'/2+2, '$write_dynamic_head'/2+2, '$write_dynamic_head'/2+var, '$write_dynamic_head'/2+2, '$write_dynamic_head'/2+2).
'$write_dynamic_head'/2+var :
        try('$write_dynamic_head'/2+1, '$write_dynamic_head'/2+var+1).
'$write_dynamic_head'/2+var+1 :
        trust('$write_dynamic_head'/2+2).
'$write_dynamic_head'/2+1 :
        comment(('$write_dynamic_head'(user, A):-!, writeq(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_head'(user, A):-['$neck_cut', writeq(A)])).
        get_con(user, s(1), a(1)).
        inline('$neck_cut').
        execute(writeq(a(2), cont)).
'$write_dynamic_head'/2+2 :
        comment(('$write_dynamic_head'(A, B):-write(A), write(:), writeq(B))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_head'(A, B):-[write(A), write(:), writeq(B)])).
        put_cont(writeq(a(2), cont), p(1)).
        put_cont(write(s(2), p(1)), p(2)).
        execute(write(a(1), p(2))).
end_predicate('$write_dynamic_head'/2).

begin_predicate('$write_dynamic_body'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_dynamic_body'/2, 'builtins.pl']).
main('$write_dynamic_body'/2, non- (public)) :
        put_con((',')/2, s(1)).
        put_con((','), s(2)).
        put_con((;)/2, s(3)).
        put_int(4, si(4)).
        put_con('(', s(5)).
        put_con((;), s(6)).
        put_con(')', s(7)).
        put_con((->)/2, s(8)).
        put_con((->), s(9)).
        label('$write_dynamic_body'/2+top).
        label('$write_dynamic_body'/2+var).
        label('$write_dynamic_body'/2+var+1).
        label('$write_dynamic_body'/2+var+2).
        label('$write_dynamic_body'/2+var+3).
        label('$write_dynamic_body'/2+str).
        label('$write_dynamic_body'/2+str+0).
        label('$write_dynamic_body'/2+str+0+1).
        label('$write_dynamic_body'/2+str+1).
        label('$write_dynamic_body'/2+str+1+1).
        label('$write_dynamic_body'/2+str+2).
        label('$write_dynamic_body'/2+str+2+1).
        label('$write_dynamic_body'/2+1).
        label('$write_dynamic_body'/2+2).
        label('$write_dynamic_body'/2+3).
        label('$write_dynamic_body'/2+4).
        new_hash(str, 3).
        static([put_hash(s(1), '$write_dynamic_body'/2+str+0, str), put_hash(s(3), '$write_dynamic_body'/2+str+1, str), put_hash(s(8), '$write_dynamic_body'/2+str+2, str)]).
'$write_dynamic_body'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$write_dynamic_body'/2+top).
'$write_dynamic_body'/2+top :
        setB0.
        switch_on_term('$write_dynamic_body'/2+var, '$write_dynamic_body'/2+4, '$write_dynamic_body'/2+4, '$write_dynamic_body'/2+4, '$write_dynamic_body'/2+str, '$write_dynamic_body'/2+4).
'$write_dynamic_body'/2+var :
        try('$write_dynamic_body'/2+1, '$write_dynamic_body'/2+var+1).
'$write_dynamic_body'/2+var+1 :
        retry('$write_dynamic_body'/2+2, '$write_dynamic_body'/2+var+2).
'$write_dynamic_body'/2+var+2 :
        retry('$write_dynamic_body'/2+3, '$write_dynamic_body'/2+var+3).
'$write_dynamic_body'/2+var+3 :
        trust('$write_dynamic_body'/2+4).
'$write_dynamic_body'/2+str :
        switch_on_hash(str, 3, '$write_dynamic_body'/2+4, [ (',')/2:'$write_dynamic_body'/2+str+0, (;)/2:'$write_dynamic_body'/2+str+1, (->)/2:'$write_dynamic_body'/2+str+2]).
'$write_dynamic_body'/2+str+0 :
        try('$write_dynamic_body'/2+1, '$write_dynamic_body'/2+str+0+1).
'$write_dynamic_body'/2+str+0+1 :
        trust('$write_dynamic_body'/2+4).
'$write_dynamic_body'/2+str+1 :
        try('$write_dynamic_body'/2+2, '$write_dynamic_body'/2+str+1+1).
'$write_dynamic_body'/2+str+1+1 :
        trust('$write_dynamic_body'/2+4).
'$write_dynamic_body'/2+str+2 :
        try('$write_dynamic_body'/2+3, '$write_dynamic_body'/2+str+2+1).
'$write_dynamic_body'/2+str+2+1 :
        trust('$write_dynamic_body'/2+4).
'$write_dynamic_body'/2+1 :
        comment(('$write_dynamic_body'((A, B), C):-!, '$write_dynamic_body'(A, C), write((',')), nl, '$write_dynamic_body'(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_body'((A, B), C):-['$neck_cut', '$write_dynamic_body'(A, C), write((',')), nl, '$write_dynamic_body'(B, C)])).
        get_str((',')/2, s(1), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_cont('$write_dynamic_body'(a(4), a(2), cont), p(1)).
        put_cont(nl(p(1)), p(2)).
        put_cont(write(s(2), p(2)), p(3)).
        set(a(3), ea(1)).
        set(a(2), ea(2)).
        set(p(3), econt).
        goto('$write_dynamic_body'/2+top).
'$write_dynamic_body'/2+2 :
        comment(('$write_dynamic_body'((A;B), C):-!, D is C+4, tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((;)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')'))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_body'((A;B), C):-['$neck_cut', '$plus'(C, 4, D), tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((;)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')')])).
        get_str((;)/2, s(3), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_var(a(5)).
        inline('$plus'(a(2), si(4), a(5))).
        put_cont(write(s(7), cont), p(1)).
        put_cont(tab(a(2), p(1)), p(2)).
        put_cont(nl(p(2)), p(3)).
        put_cont('$write_dynamic_body'(a(4), a(5), p(3)), p(4)).
        put_cont(nl(p(4)), p(5)).
        put_cont(write(s(6), p(5)), p(6)).
        put_cont(tab(a(2), p(6)), p(7)).
        put_cont(nl(p(7)), p(8)).
        put_cont('$write_dynamic_body'(a(3), a(5), p(8)), p(9)).
        put_cont(nl(p(9)), p(10)).
        put_cont(write(s(5), p(10)), p(11)).
        execute(tab(a(2), p(11))).
'$write_dynamic_body'/2+3 :
        comment(('$write_dynamic_body'((A->B), C):-!, D is C+4, tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((->)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')'))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_body'((A->B), C):-['$neck_cut', '$plus'(C, 4, D), tab(C), write('('), nl, '$write_dynamic_body'(A, D), nl, tab(C), write((->)), nl, '$write_dynamic_body'(B, D), nl, tab(C), write(')')])).
        get_str((->)/2, s(8), a(1)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_var(a(5)).
        inline('$plus'(a(2), si(4), a(5))).
        put_cont(write(s(7), cont), p(1)).
        put_cont(tab(a(2), p(1)), p(2)).
        put_cont(nl(p(2)), p(3)).
        put_cont('$write_dynamic_body'(a(4), a(5), p(3)), p(4)).
        put_cont(nl(p(4)), p(5)).
        put_cont(write(s(9), p(5)), p(6)).
        put_cont(tab(a(2), p(6)), p(7)).
        put_cont(nl(p(7)), p(8)).
        put_cont('$write_dynamic_body'(a(3), a(5), p(8)), p(9)).
        put_cont(nl(p(9)), p(10)).
        put_cont(write(s(5), p(10)), p(11)).
        execute(tab(a(2), p(11))).
'$write_dynamic_body'/2+4 :
        comment(('$write_dynamic_body'(A, B):-tab(B), writeq(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$write_dynamic_body'(A, B):-[tab(B), writeq(A)])).
        put_cont(writeq(a(1), cont), p(1)).
        execute(tab(a(2), p(1))).
end_predicate('$write_dynamic_body'/2).

begin_predicate(length/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([length/2, 'builtins.pl']).
main(length/2, (public)) :
        put_int(0, si(1)).
        label(length/2+sub+1).
        label(length/2+1).
        label(length/2+2).
length/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try(length/2+1, length/2+sub+1).
length/2+sub+1 :
        trust(length/2+2).
length/2+1 :
        comment((length(A, B):-var(B), !, '$length'(A, 0, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((length(A, B):-['$get_level'(C), var(B), '$cut'(C), '$length'(A, 0, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(2))).
        inline('$cut'(a(3))).
        execute('$length'(a(1), si(1), a(2), cont)).
length/2+2 :
        comment((length(A, B):-'$dlength'(A, 0, B))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((length(A, B):-['$dlength'(A, 0, B)])).
        execute('$dlength'(a(1), si(1), a(2), cont)).
end_predicate(length/2).

begin_predicate('$length'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$length'/3, 'builtins.pl']).
main('$length'/3, non- (public)) :
        put_con([], s(1)).
        put_int(1, si(2)).
        label('$length'/3+top).
        label(fail/0).
        label('$length'/3+var).
        label('$length'/3+var+1).
        label('$length'/3+1).
        label('$length'/3+2).
'$length'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$length'/3+top).
'$length'/3+top :
        setB0.
        switch_on_term('$length'/3+var, fail/0, fail/0, '$length'/3+1, fail/0, '$length'/3+2).
'$length'/3+var :
        try('$length'/3+1, '$length'/3+var+1).
'$length'/3+var+1 :
        trust('$length'/3+2).
'$length'/3+1 :
        comment(('$length'([], A, A):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$length'([], A, A):-[])).
        get_con([], s(1), a(1)).
        get_val(a(2), a(3)).
        execute(cont).
'$length'/3+2 :
        comment(('$length'([A|B], C, D):-E is C+1, '$length'(B, E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$length'([A|B], C, D):-['$plus'(C, 1, E), '$length'(B, E, D)])).
        get_list(a(1)).
        unify_void(1).
        unify_var(a(4)).
        put_var(a(5)).
        inline('$plus'(a(2), si(2), a(5))).
        set(a(4), ea(1)).
        set(a(5), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$length'/3+top).
end_predicate('$length'/3).

begin_predicate('$dlength'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dlength'/3, 'builtins.pl']).
main('$dlength'/3, non- (public)) :
        put_con([], s(1)).
        put_int(1, si(2)).
        label('$dlength'/3+top).
        label(fail/0).
        label('$dlength'/3+var).
        label('$dlength'/3+var+1).
        label('$dlength'/3+1).
        label('$dlength'/3+2).
'$dlength'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$dlength'/3+top).
'$dlength'/3+top :
        setB0.
        switch_on_term('$dlength'/3+var, fail/0, fail/0, '$dlength'/3+1, fail/0, '$dlength'/3+2).
'$dlength'/3+var :
        try('$dlength'/3+1, '$dlength'/3+var+1).
'$dlength'/3+var+1 :
        trust('$dlength'/3+2).
'$dlength'/3+1 :
        comment(('$dlength'([], A, A):-!)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dlength'([], A, A):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        get_val(a(2), a(3)).
        inline('$neck_cut').
        execute(cont).
'$dlength'/3+2 :
        comment(('$dlength'([A|B], C, D):-C<D, E is C+1, '$dlength'(B, E, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dlength'([A|B], C, D):-['$less_than'(C, D), '$plus'(C, 1, E), '$dlength'(B, E, D)])).
        get_list(a(1)).
        unify_void(1).
        unify_var(a(4)).
        inline('$less_than'(a(2), a(3))).
        put_var(a(5)).
        inline('$plus'(a(2), si(2), a(5))).
        set(a(4), ea(1)).
        set(a(5), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$dlength'/3+top).
end_predicate('$dlength'/3).

begin_predicate(numbervars/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([numbervars/3, 'builtins.pl']).
main(numbervars/3, (public)) :
        put_int(0, si(1)).
numbervars/3 :
        comment((numbervars(A, B, C):-integer(B), B>=0, !, '$numbervars'(A, B, C))).
        setB0.
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        set(arg(3), a(3)).
        comment((numbervars(A, B, C):-['$get_level'(D), integer(B), '$greater_or_equal'(B, 0), '$cut'(D), '$numbervars'(A, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(integer(a(2))).
        inline('$greater_or_equal'(a(2), si(1))).
        inline('$cut'(a(4))).
        execute('$numbervars'(a(1), a(2), a(3), cont)).
end_predicate(numbervars/3).

begin_predicate('$numbervars'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$numbervars'/3, 'builtins.pl']).
main('$numbervars'/3, non- (public)) :
        put_con('$VAR'/1, s(1)).
        put_int(1, si(2)).
        label('$numbervars'/3+sub+1).
        label('$numbervars'/3+sub+2).
        label('$numbervars'/3+sub+3).
        label('$numbervars'/3+1).
        label('$numbervars'/3+2).
        label('$numbervars'/3+3).
        label('$numbervars'/3+4).
'$numbervars'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$numbervars'/3+1, '$numbervars'/3+sub+1).
'$numbervars'/3+sub+1 :
        retry('$numbervars'/3+2, '$numbervars'/3+sub+2).
'$numbervars'/3+sub+2 :
        retry('$numbervars'/3+3, '$numbervars'/3+sub+3).
'$numbervars'/3+sub+3 :
        trust('$numbervars'/3+4).
'$numbervars'/3+1 :
        comment(('$numbervars'(A, B, C):-var(A), !, A='$VAR'(B), C is B+1)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$numbervars'(A, B, C):-['$get_level'(D), var(A), '$cut'(D), '$unify'(A, '$VAR'(B)), '$plus'(B, 1, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        put_str_args([a(2)], y(1)).
        put_str(s(1), y(1), a(5)).
        inline('$unify'(a(1), a(5))).
        inline('$plus'(a(2), si(2), a(3))).
        execute(cont).
'$numbervars'/3+2 :
        comment(('$numbervars'(A, B, B):-atomic(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$numbervars'(A, B, B):-['$get_level'(C), atomic(A), '$cut'(C)])).
        get_val(a(2), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(atomic(a(1))).
        inline('$cut'(a(4))).
        execute(cont).
'$numbervars'/3+3 :
        comment(('$numbervars'(A, B, B):-java(A), !)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$numbervars'(A, B, B):-['$get_level'(C), java(A), '$cut'(C)])).
        get_val(a(2), a(3)).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(java(a(1))).
        inline('$cut'(a(4))).
        execute(cont).
'$numbervars'/3+4 :
        comment(('$numbervars'(A, B, C):-functor(A, D, E), '$numbervars_str'(1, E, A, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$numbervars'(A, B, C):-[functor(A, D, E), '$numbervars_str'(1, E, A, B, C)])).
        put_var(a(4)).
        put_cont('$numbervars_str'(si(2), a(4), a(1), a(2), a(3), cont), p(1)).
        execute(functor(a(1), void, a(4), p(1))).
end_predicate('$numbervars'/3).

begin_predicate('$numbervars_str'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$numbervars_str'/5, 'builtins.pl']).
main('$numbervars_str'/5, non- (public)) :
        put_int(1, si(1)).
        label('$numbervars_str'/5+sub+1).
        label('$numbervars_str'/5+1).
        label('$numbervars_str'/5+2).
'$numbervars_str'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$numbervars_str'/5+1, '$numbervars_str'/5+sub+1).
'$numbervars_str'/5+sub+1 :
        trust('$numbervars_str'/5+2).
'$numbervars_str'/5+1 :
        comment(('$numbervars_str'(A, A, B, C, D):-!, arg(A, B, E), '$numbervars'(E, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$numbervars_str'(A, A, B, C, D):-['$neck_cut', arg(A, B, E), '$numbervars'(E, C, D)])).
        get_val(a(1), a(2)).
        inline('$neck_cut').
        put_var(a(6)).
        put_cont('$numbervars'(a(6), a(4), a(5), cont), p(1)).
        execute(arg(a(1), a(3), a(6), p(1))).
'$numbervars_str'/5+2 :
        comment(('$numbervars_str'(A, B, C, D, E):-arg(A, C, F), '$numbervars'(F, D, G), H is A+1, '$numbervars_str'(H, B, C, G, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$numbervars_str'(A, B, C, D, E):-[arg(A, C, F), '$numbervars'(F, D, G), '$plus'(A, 1, H), '$numbervars_str'(H, B, C, G, E)])).
        put_var(a(6)).
        put_var(a(7)).
        put_var(a(8)).
        put_cont('$numbervars_str'(a(8), a(2), a(3), a(7), a(5), cont), p(1)).
        put_cont('$plus'(a(1), si(1), a(8), p(1)), p(2)).
        put_cont('$numbervars'(a(6), a(4), a(7), p(2)), p(3)).
        execute(arg(a(1), a(3), a(6), p(3))).
end_predicate('$numbervars_str'/5).

begin_predicate(statistics/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([statistics/2, 'builtins.pl']).
main(statistics/2, (public)) :
        put_con(domain/2, s(1)).
        put_con(atom, s(2)).
        put_con(statistics/2, s(3)).
        put_int(1, si(4)).
        label(statistics/2+sub+1).
        label(statistics/2+1).
        label(statistics/2+2).
statistics/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        try(statistics/2+1, statistics/2+sub+1).
statistics/2+sub+1 :
        trust(statistics/2+2).
statistics/2+1 :
        comment((statistics(A, B):-nonvar(A), '$statistics_mode'(A), !, '$statistics'(A, B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((statistics(A, B):-['$get_level'(C), nonvar(A), '$statistics_mode'(A), '$cut'(C), '$statistics'(A, B)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(nonvar(a(1))).
        put_cont('$statistics'(a(1), a(2), cont), p(1)).
        put_cont('$cut'(a(3), p(1)), p(2)).
        execute('$statistics_mode'(a(1), p(2))).
statistics/2+2 :
        comment((statistics(A, B):-findall(C, '$statistics_mode'(C), D), illarg(domain(atom, D), statistics(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((statistics(A, B):-[findall(C, 'jp.ac.kobe_u.cs.prolog.builtin':'$statistics_mode'(C), D), illarg(domain(atom, D), statistics(A, B), 1)])).
        put_var(a(3)).
        put_clo('$statistics_mode'(a(3)), a(4)).
        put_var(a(5)).
        put_str_args([s(2), a(5)], y(1)).
        put_str(s(1), y(1), a(6)).
        put_str_args([a(1), a(2)], y(2)).
        put_str(s(3), y(2), a(7)).
        put_cont(illarg(a(6), a(7), si(4), cont), p(1)).
        execute(findall(a(3), a(4), a(5), p(1))).
end_predicate(statistics/2).

begin_predicate('$statistics_mode'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$statistics_mode'/1, 'builtins.pl']).
main('$statistics_mode'/1, non- (public)) :
        put_con(runtime, s(1)).
        put_con(trail, s(2)).
        put_con(choice, s(3)).
        label(fail/0).
        label('$statistics_mode'/1+var).
        label('$statistics_mode'/1+var+1).
        label('$statistics_mode'/1+var+2).
        label('$statistics_mode'/1+con).
        label('$statistics_mode'/1+1).
        label('$statistics_mode'/1+2).
        label('$statistics_mode'/1+3).
        new_hash(con, 3).
        static([put_hash(s(1), '$statistics_mode'/1+1, con), put_hash(s(2), '$statistics_mode'/1+2, con), put_hash(s(3), '$statistics_mode'/1+3, con)]).
'$statistics_mode'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$statistics_mode'/1+var, fail/0, fail/0, '$statistics_mode'/1+con, fail/0, fail/0).
'$statistics_mode'/1+var :
        try('$statistics_mode'/1+1, '$statistics_mode'/1+var+1).
'$statistics_mode'/1+var+1 :
        retry('$statistics_mode'/1+2, '$statistics_mode'/1+var+2).
'$statistics_mode'/1+var+2 :
        trust('$statistics_mode'/1+3).
'$statistics_mode'/1+con :
        switch_on_hash(con, 3, fail/0, [runtime:'$statistics_mode'/1+1, trail:'$statistics_mode'/1+2, choice:'$statistics_mode'/1+3]).
'$statistics_mode'/1+1 :
        comment(('$statistics_mode'(runtime):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$statistics_mode'(runtime):-[])).
        get_con(runtime, s(1), a(1)).
        execute(cont).
'$statistics_mode'/1+2 :
        comment(('$statistics_mode'(trail):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$statistics_mode'(trail):-[])).
        get_con(trail, s(2), a(1)).
        execute(cont).
'$statistics_mode'/1+3 :
        comment(('$statistics_mode'(choice):-true)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$statistics_mode'(choice):-[])).
        get_con(choice, s(3), a(1)).
        execute(cont).
end_predicate('$statistics_mode'/1).

begin_predicate(print_message/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([print_message/2, 'builtins.pl']).
main(print_message/2, non- (public)) :
        put_con(var, s(1)).
        put_con(print_message/2, s(2)).
        put_int(1, si(3)).
        put_con(error, s(4)).
        put_con(info, s(5)).
        put_con('{', s(6)).
        put_con('}', s(7)).
        put_con(warning, s(8)).
        put_con('{WARNING: ', s(9)).
        label(print_message/2+var).
        label(print_message/2+var+1).
        label(print_message/2+var+2).
        label(print_message/2+var+3).
        label(print_message/2+con).
        label(print_message/2+con+0).
        label(print_message/2+con+0+1).
        label(print_message/2+con+1).
        label(print_message/2+con+1+1).
        label(print_message/2+con+2).
        label(print_message/2+con+2+1).
        label(print_message/2+1).
        label(print_message/2+2).
        label(print_message/2+3).
        label(print_message/2+4).
        new_hash(con, 3).
        static([put_hash(s(4), print_message/2+con+0, con), put_hash(s(5), print_message/2+con+1, con), put_hash(s(8), print_message/2+con+2, con)]).
print_message/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term(print_message/2+var, print_message/2+1, print_message/2+1, print_message/2+con, print_message/2+1, print_message/2+1).
print_message/2+var :
        try(print_message/2+1, print_message/2+var+1).
print_message/2+var+1 :
        retry(print_message/2+2, print_message/2+var+2).
print_message/2+var+2 :
        retry(print_message/2+3, print_message/2+var+3).
print_message/2+var+3 :
        trust(print_message/2+4).
print_message/2+con :
        switch_on_hash(con, 3, print_message/2+1, [error:print_message/2+con+0, info:print_message/2+con+1, warning:print_message/2+con+2]).
print_message/2+con+0 :
        try(print_message/2+1, print_message/2+con+0+1).
print_message/2+con+0+1 :
        trust(print_message/2+2).
print_message/2+con+1 :
        try(print_message/2+1, print_message/2+con+1+1).
print_message/2+con+1+1 :
        trust(print_message/2+3).
print_message/2+con+2 :
        try(print_message/2+1, print_message/2+con+2+1).
print_message/2+con+2+1 :
        trust(print_message/2+4).
print_message/2+1 :
        comment((print_message(A, B):-var(A), !, illarg(var, print_message(A, B), 1))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((print_message(A, B):-['$get_level'(C), var(A), '$cut'(C), illarg(var, print_message(A, B), 1)])).
        put_var(a(3)).
        inline('$get_level'(a(3))).
        inline(var(a(1))).
        inline('$cut'(a(3))).
        put_str_args([a(1), a(2)], y(1)).
        put_str(s(2), y(1), a(4)).
        execute(illarg(s(1), a(4), si(3), cont)).
print_message/2+2 :
        comment((print_message(error, A):-!, '$error_message'(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((print_message(error, A):-['$neck_cut', '$error_message'(A)])).
        get_con(error, s(4), a(1)).
        inline('$neck_cut').
        execute('$error_message'(a(2), cont)).
print_message/2+3 :
        comment((print_message(info, A):-!, '$fast_write'('{'), '$builtin_message'(A), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((print_message(info, A):-['$neck_cut', '$fast_write'('{'), '$builtin_message'(A), '$fast_write'('}'), nl])).
        get_con(info, s(5), a(1)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(7), p(1)), p(2)).
        put_cont('$builtin_message'(a(2), p(2)), p(3)).
        execute('$fast_write'(s(6), p(3))).
print_message/2+4 :
        comment((print_message(warning, A):-!, '$fast_write'('{WARNING: '), '$builtin_message'(A), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment((print_message(warning, A):-['$neck_cut', '$fast_write'('{WARNING: '), '$builtin_message'(A), '$fast_write'('}'), nl])).
        get_con(warning, s(8), a(1)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(7), p(1)), p(2)).
        put_cont('$builtin_message'(a(2), p(2)), p(3)).
        execute('$fast_write'(s(9), p(3))).
end_predicate(print_message/2).

begin_predicate('$error_message'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$error_message'/1, 'builtins.pl']).
main('$error_message'/1, non- (public)) :
        put_con(instantiation_error/2, s(1)).
        put_int(0, si(2)).
        put_con('{INSTANTIATION ERROR: ', s(3)).
        put_con('}', s(4)).
        put_con(' - arg ', s(5)).
        put_con(type_error/4, s(6)).
        put_con('{TYPE ERROR: ', s(7)).
        put_con(': expected ', s(8)).
        put_con(', found ', s(9)).
        put_con(domain_error/4, s(10)).
        put_con('{DOMAIN ERROR: ', s(11)).
        put_con(existence_error/5, s(12)).
        put_con('{EXISTENCE ERROR: ', s(13)).
        put_con(' ', s(14)).
        put_con(' does not exist', s(15)).
        put_con(': ', s(16)).
        put_con(permission_error/5, s(17)).
        put_con('{PERMISSION ERROR: ', s(18)).
        put_con(' - can not ', s(19)).
        put_con(representation_error/3, s(20)).
        put_con('{REPRESENTATION ERROR: ', s(21)).
        put_con(': limit of ', s(22)).
        put_con(' is breached', s(23)).
        put_con(evaluation_error/3, s(24)).
        put_con('{EVALUATION ERROR: ', s(25)).
        put_con(syntax_error/5, s(26)).
        put_con('{SYNTAX ERROR: ', s(27)).
        put_con(system_error/1, s(28)).
        put_con('{SYSTEM ERROR: ', s(29)).
        put_con(internal_error/1, s(30)).
        put_con('{INTERNAL ERROR: ', s(31)).
        put_con(java_error/3, s(32)).
        put_con('{JAVA ERROR: ', s(33)).
        put_con('{', s(34)).
        label('$error_message'/1+var).
        label('$error_message'/1+var+1).
        label('$error_message'/1+var+2).
        label('$error_message'/1+var+3).
        label('$error_message'/1+var+4).
        label('$error_message'/1+var+5).
        label('$error_message'/1+var+6).
        label('$error_message'/1+var+7).
        label('$error_message'/1+var+8).
        label('$error_message'/1+var+9).
        label('$error_message'/1+var+10).
        label('$error_message'/1+var+11).
        label('$error_message'/1+var+12).
        label('$error_message'/1+var+13).
        label('$error_message'/1+str).
        label('$error_message'/1+str+0).
        label('$error_message'/1+str+0+1).
        label('$error_message'/1+str+0+2).
        label('$error_message'/1+str+1).
        label('$error_message'/1+str+1+1).
        label('$error_message'/1+str+2).
        label('$error_message'/1+str+2+1).
        label('$error_message'/1+str+3).
        label('$error_message'/1+str+3+1).
        label('$error_message'/1+str+3+2).
        label('$error_message'/1+str+4).
        label('$error_message'/1+str+4+1).
        label('$error_message'/1+str+5).
        label('$error_message'/1+str+5+1).
        label('$error_message'/1+str+6).
        label('$error_message'/1+str+6+1).
        label('$error_message'/1+str+7).
        label('$error_message'/1+str+7+1).
        label('$error_message'/1+str+8).
        label('$error_message'/1+str+8+1).
        label('$error_message'/1+str+9).
        label('$error_message'/1+str+9+1).
        label('$error_message'/1+str+10).
        label('$error_message'/1+str+10+1).
        label('$error_message'/1+1).
        label('$error_message'/1+2).
        label('$error_message'/1+3).
        label('$error_message'/1+4).
        label('$error_message'/1+5).
        label('$error_message'/1+6).
        label('$error_message'/1+7).
        label('$error_message'/1+8).
        label('$error_message'/1+9).
        label('$error_message'/1+10).
        label('$error_message'/1+11).
        label('$error_message'/1+12).
        label('$error_message'/1+13).
        label('$error_message'/1+14).
        new_hash(str, 11).
        static([put_hash(s(1), '$error_message'/1+str+0, str), put_hash(s(6), '$error_message'/1+str+1, str), put_hash(s(10), '$error_message'/1+str+2, str), put_hash(s(12), '$error_message'/1+str+3, str), put_hash(s(17), '$error_message'/1+str+4, str), put_hash(s(20), '$error_message'/1+str+5, str), put_hash(s(24), '$error_message'/1+str+6, str), put_hash(s(26), '$error_message'/1+str+7, str), put_hash(s(28), '$error_message'/1+str+8, str), put_hash(s(30), '$error_message'/1+str+9, str), put_hash(s(32), '$error_message'/1+str+10, str)]).
'$error_message'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$error_message'/1+var, '$error_message'/1+14, '$error_message'/1+14, '$error_message'/1+14, '$error_message'/1+str, '$error_message'/1+14).
'$error_message'/1+var :
        try('$error_message'/1+1, '$error_message'/1+var+1).
'$error_message'/1+var+1 :
        retry('$error_message'/1+2, '$error_message'/1+var+2).
'$error_message'/1+var+2 :
        retry('$error_message'/1+3, '$error_message'/1+var+3).
'$error_message'/1+var+3 :
        retry('$error_message'/1+4, '$error_message'/1+var+4).
'$error_message'/1+var+4 :
        retry('$error_message'/1+5, '$error_message'/1+var+5).
'$error_message'/1+var+5 :
        retry('$error_message'/1+6, '$error_message'/1+var+6).
'$error_message'/1+var+6 :
        retry('$error_message'/1+7, '$error_message'/1+var+7).
'$error_message'/1+var+7 :
        retry('$error_message'/1+8, '$error_message'/1+var+8).
'$error_message'/1+var+8 :
        retry('$error_message'/1+9, '$error_message'/1+var+9).
'$error_message'/1+var+9 :
        retry('$error_message'/1+10, '$error_message'/1+var+10).
'$error_message'/1+var+10 :
        retry('$error_message'/1+11, '$error_message'/1+var+11).
'$error_message'/1+var+11 :
        retry('$error_message'/1+12, '$error_message'/1+var+12).
'$error_message'/1+var+12 :
        retry('$error_message'/1+13, '$error_message'/1+var+13).
'$error_message'/1+var+13 :
        trust('$error_message'/1+14).
'$error_message'/1+str :
        switch_on_hash(str, 11, '$error_message'/1+14, [instantiation_error/2:'$error_message'/1+str+0, type_error/4:'$error_message'/1+str+1, domain_error/4:'$error_message'/1+str+2, existence_error/5:'$error_message'/1+str+3, permission_error/5:'$error_message'/1+str+4, representation_error/3:'$error_message'/1+str+5, evaluation_error/3:'$error_message'/1+str+6, syntax_error/5:'$error_message'/1+str+7, system_error/1:'$error_message'/1+str+8, internal_error/1:'$error_message'/1+str+9, java_error/3:'$error_message'/1+str+10]).
'$error_message'/1+str+0 :
        try('$error_message'/1+1, '$error_message'/1+str+0+1).
'$error_message'/1+str+0+1 :
        retry('$error_message'/1+2, '$error_message'/1+str+0+2).
'$error_message'/1+str+0+2 :
        trust('$error_message'/1+14).
'$error_message'/1+str+1 :
        try('$error_message'/1+3, '$error_message'/1+str+1+1).
'$error_message'/1+str+1+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+2 :
        try('$error_message'/1+4, '$error_message'/1+str+2+1).
'$error_message'/1+str+2+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+3 :
        try('$error_message'/1+5, '$error_message'/1+str+3+1).
'$error_message'/1+str+3+1 :
        retry('$error_message'/1+6, '$error_message'/1+str+3+2).
'$error_message'/1+str+3+2 :
        trust('$error_message'/1+14).
'$error_message'/1+str+4 :
        try('$error_message'/1+7, '$error_message'/1+str+4+1).
'$error_message'/1+str+4+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+5 :
        try('$error_message'/1+8, '$error_message'/1+str+5+1).
'$error_message'/1+str+5+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+6 :
        try('$error_message'/1+9, '$error_message'/1+str+6+1).
'$error_message'/1+str+6+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+7 :
        try('$error_message'/1+10, '$error_message'/1+str+7+1).
'$error_message'/1+str+7+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+8 :
        try('$error_message'/1+11, '$error_message'/1+str+8+1).
'$error_message'/1+str+8+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+9 :
        try('$error_message'/1+12, '$error_message'/1+str+9+1).
'$error_message'/1+str+9+1 :
        trust('$error_message'/1+14).
'$error_message'/1+str+10 :
        try('$error_message'/1+13, '$error_message'/1+str+10+1).
'$error_message'/1+str+10+1 :
        trust('$error_message'/1+14).
'$error_message'/1+1 :
        comment(('$error_message'(instantiation_error(A, 0)):-!, '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(instantiation_error(A, 0)):-['$neck_cut', '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'('}'), nl])).
        get_str(instantiation_error/2, s(1), a(1)).
        unify_var(a(2)).
        unify_int(0, si(2)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont('$write_goal'(a(2), p(2)), p(3)).
        execute('$fast_write'(s(3), p(3))).
'$error_message'/1+2 :
        comment(('$error_message'(instantiation_error(A, B)):-!, '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(instantiation_error(A, B)):-['$neck_cut', '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'('}'), nl])).
        get_str(instantiation_error/2, s(1), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont('$fast_write'(a(3), p(2)), p(3)).
        put_cont('$fast_write'(s(5), p(3)), p(4)).
        put_cont('$write_goal'(a(2), p(4)), p(5)).
        execute('$fast_write'(s(3), p(5))).
'$error_message'/1+3 :
        comment(('$error_message'(type_error(A, B, C, D)):-!, '$fast_write'('{TYPE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(type_error(A, B, C, D)):-['$neck_cut', '$fast_write'('{TYPE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl])).
        get_str(type_error/4, s(6), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont(write(a(5), p(2)), p(3)).
        put_cont('$fast_write'(s(9), p(3)), p(4)).
        put_cont('$fast_write'(a(4), p(4)), p(5)).
        put_cont('$fast_write'(s(8), p(5)), p(6)).
        put_cont('$fast_write'(a(3), p(6)), p(7)).
        put_cont('$fast_write'(s(5), p(7)), p(8)).
        put_cont('$write_goal'(a(2), p(8)), p(9)).
        execute('$fast_write'(s(7), p(9))).
'$error_message'/1+4 :
        comment(('$error_message'(domain_error(A, B, C, D)):-!, '$fast_write'('{DOMAIN ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(domain_error(A, B, C, D)):-['$neck_cut', '$fast_write'('{DOMAIN ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl])).
        get_str(domain_error/4, s(10), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont(write(a(5), p(2)), p(3)).
        put_cont('$fast_write'(s(9), p(3)), p(4)).
        put_cont('$fast_write'(a(4), p(4)), p(5)).
        put_cont('$fast_write'(s(8), p(5)), p(6)).
        put_cont('$fast_write'(a(3), p(6)), p(7)).
        put_cont('$fast_write'(s(5), p(7)), p(8)).
        put_cont('$write_goal'(a(2), p(8)), p(9)).
        execute('$fast_write'(s(11), p(9))).
'$error_message'/1+5 :
        comment(('$error_message'(existence_error(A, 0, B, C, D)):-!, '$fast_write'('{EXISTENCE ERROR: '), '$fast_write'(B), '$fast_write'(' '), write(C), '$fast_write'(' does not exist'), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(existence_error(A, 0, B, C, D)):-['$neck_cut', '$fast_write'('{EXISTENCE ERROR: '), '$fast_write'(B), '$fast_write'(' '), write(C), '$fast_write'(' does not exist'), '$fast_write'('}'), nl])).
        get_str(existence_error/5, s(12), a(1)).
        unify_void(1).
        unify_int(0, si(2)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_void(1).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont('$fast_write'(s(15), p(2)), p(3)).
        put_cont(write(a(3), p(3)), p(4)).
        put_cont('$fast_write'(s(14), p(4)), p(5)).
        put_cont('$fast_write'(a(2), p(5)), p(6)).
        execute('$fast_write'(s(13), p(6))).
'$error_message'/1+6 :
        comment(('$error_message'(existence_error(A, B, C, D, E)):-!, '$fast_write'('{EXISTENCE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(' does not exist'), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(existence_error(A, B, C, D, E)):-['$neck_cut', '$fast_write'('{EXISTENCE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(' does not exist'), '$fast_write'('}'), nl])).
        get_str(existence_error/5, s(12), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_void(1).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont('$fast_write'(s(15), p(2)), p(3)).
        put_cont(write(a(5), p(3)), p(4)).
        put_cont('$fast_write'(s(14), p(4)), p(5)).
        put_cont('$fast_write'(a(4), p(5)), p(6)).
        put_cont('$fast_write'(s(16), p(6)), p(7)).
        put_cont('$fast_write'(a(3), p(7)), p(8)).
        put_cont('$fast_write'(s(5), p(8)), p(9)).
        put_cont('$write_goal'(a(2), p(9)), p(10)).
        execute('$fast_write'(s(13), p(10))).
'$error_message'/1+7 :
        comment(('$error_message'(permission_error(A, B, C, D, E)):-!, '$fast_write'('{PERMISSION ERROR: '), '$write_goal'(A), '$fast_write'(' - can not '), '$fast_write'(B), '$fast_write'(' '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(': '), '$fast_write'(E), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(permission_error(A, B, C, D, E)):-['$neck_cut', '$fast_write'('{PERMISSION ERROR: '), '$write_goal'(A), '$fast_write'(' - can not '), '$fast_write'(B), '$fast_write'(' '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(': '), '$fast_write'(E), '$fast_write'('}'), nl])).
        get_str(permission_error/5, s(17), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_var(a(6)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont('$fast_write'(a(6), p(2)), p(3)).
        put_cont('$fast_write'(s(16), p(3)), p(4)).
        put_cont(write(a(5), p(4)), p(5)).
        put_cont('$fast_write'(s(14), p(5)), p(6)).
        put_cont('$fast_write'(a(4), p(6)), p(7)).
        put_cont('$fast_write'(s(14), p(7)), p(8)).
        put_cont('$fast_write'(a(3), p(8)), p(9)).
        put_cont('$fast_write'(s(19), p(9)), p(10)).
        put_cont('$write_goal'(a(2), p(10)), p(11)).
        execute('$fast_write'(s(18), p(11))).
'$error_message'/1+8 :
        comment(('$error_message'(representation_error(A, B, C)):-!, '$fast_write'('{REPRESENTATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': limit of '), '$fast_write'(C), '$fast_write'(' is breached'), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(representation_error(A, B, C)):-['$neck_cut', '$fast_write'('{REPRESENTATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': limit of '), '$fast_write'(C), '$fast_write'(' is breached'), '$fast_write'('}'), nl])).
        get_str(representation_error/3, s(20), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont('$fast_write'(s(23), p(2)), p(3)).
        put_cont('$fast_write'(a(4), p(3)), p(4)).
        put_cont('$fast_write'(s(22), p(4)), p(5)).
        put_cont('$fast_write'(a(3), p(5)), p(6)).
        put_cont('$fast_write'(s(5), p(6)), p(7)).
        put_cont('$write_goal'(a(2), p(7)), p(8)).
        execute('$fast_write'(s(21), p(8))).
'$error_message'/1+9 :
        comment(('$error_message'(evaluation_error(A, B, C)):-!, '$fast_write'('{EVALUATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$fast_write'(C), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(evaluation_error(A, B, C)):-['$neck_cut', '$fast_write'('{EVALUATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$fast_write'(C), '$fast_write'('}'), nl])).
        get_str(evaluation_error/3, s(24), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont('$fast_write'(a(4), p(2)), p(3)).
        put_cont('$fast_write'(s(9), p(3)), p(4)).
        put_cont('$fast_write'(a(3), p(4)), p(5)).
        put_cont('$fast_write'(s(5), p(5)), p(6)).
        put_cont('$write_goal'(a(2), p(6)), p(7)).
        execute('$fast_write'(s(25), p(7))).
'$error_message'/1+10 :
        comment(('$error_message'(syntax_error(A, B, C, D, E)):-!, '$fast_write'('{SYNTAX ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(syntax_error(A, B, C, D, E)):-['$neck_cut', '$fast_write'('{SYNTAX ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl])).
        get_str(syntax_error/5, s(26), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_void(1).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont(write(a(5), p(2)), p(3)).
        put_cont('$fast_write'(s(9), p(3)), p(4)).
        put_cont('$fast_write'(a(4), p(4)), p(5)).
        put_cont('$fast_write'(s(8), p(5)), p(6)).
        put_cont('$fast_write'(a(3), p(6)), p(7)).
        put_cont('$fast_write'(s(5), p(7)), p(8)).
        put_cont('$write_goal'(a(2), p(8)), p(9)).
        execute('$fast_write'(s(27), p(9))).
'$error_message'/1+11 :
        comment(('$error_message'(system_error(A)):-!, '$fast_write'('{SYSTEM ERROR: '), write(A), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(system_error(A)):-['$neck_cut', '$fast_write'('{SYSTEM ERROR: '), write(A), '$fast_write'('}'), nl])).
        get_str(system_error/1, s(28), a(1)).
        unify_var(a(2)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont(write(a(2), p(2)), p(3)).
        execute('$fast_write'(s(29), p(3))).
'$error_message'/1+12 :
        comment(('$error_message'(internal_error(A)):-!, '$fast_write'('{INTERNAL ERROR: '), write(A), '$fast_write'('}'), nl)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(internal_error(A)):-['$neck_cut', '$fast_write'('{INTERNAL ERROR: '), write(A), '$fast_write'('}'), nl])).
        get_str(internal_error/1, s(30), a(1)).
        unify_var(a(2)).
        inline('$neck_cut').
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont(write(a(2), p(2)), p(3)).
        execute('$fast_write'(s(31), p(3))).
'$error_message'/1+13 :
        comment(('$error_message'(java_error(A, B, C)):-!, '$fast_write'('{JAVA ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$write_goal'(C), '$fast_write'('}'), nl, '$print_stack_trace'(C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(java_error(A, B, C)):-['$neck_cut', '$fast_write'('{JAVA ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$write_goal'(C), '$fast_write'('}'), nl, '$print_stack_trace'(C)])).
        get_str(java_error/3, s(32), a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        unify_var(a(4)).
        inline('$neck_cut').
        put_cont('$print_stack_trace'(a(4), cont), p(1)).
        put_cont(nl(p(1)), p(2)).
        put_cont('$fast_write'(s(4), p(2)), p(3)).
        put_cont('$write_goal'(a(4), p(3)), p(4)).
        put_cont('$fast_write'(s(9), p(4)), p(5)).
        put_cont('$fast_write'(a(3), p(5)), p(6)).
        put_cont('$fast_write'(s(5), p(6)), p(7)).
        put_cont('$write_goal'(a(2), p(7)), p(8)).
        execute('$fast_write'(s(33), p(8))).
'$error_message'/1+14 :
        comment(('$error_message'(A):-'$fast_write'('{'), write(A), '$fast_write'('}'), nl)).
        decl_term_vars([a(1)]).
        decl_pred_vars([p(1), p(2), p(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$error_message'(A):-['$fast_write'('{'), write(A), '$fast_write'('}'), nl])).
        put_cont(nl(cont), p(1)).
        put_cont('$fast_write'(s(4), p(1)), p(2)).
        put_cont(write(a(1), p(2)), p(3)).
        execute('$fast_write'(s(34), p(3))).
end_predicate('$error_message'/1).

begin_predicate('$write_goal'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$write_goal'/1, 'builtins.pl']).
main('$write_goal'/1, non- (public)) :
        label('$write_goal'/1+sub+1).
        label('$write_goal'/1+1).
        label('$write_goal'/1+2).
'$write_goal'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$write_goal'/1+1, '$write_goal'/1+sub+1).
'$write_goal'/1+sub+1 :
        trust('$write_goal'/1+2).
'$write_goal'/1+1 :
        comment(('$write_goal'(A):-java(A), !, current_output(B), '$write_toString'(B, A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$write_goal'(A):-['$get_level'(B), java(A), '$cut'(B), current_output(C), '$write_toString'(C, A)])).
        put_var(a(2)).
        inline('$get_level'(a(2))).
        inline(java(a(1))).
        inline('$cut'(a(2))).
        put_var(a(3)).
        put_cont('$write_toString'(a(3), a(1), cont), p(1)).
        execute(current_output(a(3), p(1))).
'$write_goal'/1+2 :
        comment(('$write_goal'(A):-write(A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$write_goal'(A):-[write(A)])).
        execute(write(a(1), cont)).
end_predicate('$write_goal'/1).

begin_predicate(illarg/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info([illarg/3, 'builtins.pl']).
main(illarg/3, non- (public)) :
        put_con(var, s(1)).
        put_con(instantiation_error/2, s(2)).
        put_con(type/1, s(3)).
        put_con(domain/2, s(4)).
        put_con(existence/3, s(5)).
        put_con(existence_error/5, s(6)).
        put_con(permission/4, s(7)).
        put_con(permission_error/5, s(8)).
        put_con(representation/1, s(9)).
        put_con(representation_error/3, s(10)).
        put_con(evaluation/1, s(11)).
        put_con(evaluation_error/3, s(12)).
        put_con(syntax/3, s(13)).
        put_con(syntax_error/5, s(14)).
        put_con(system/1, s(15)).
        put_con(system_error/1, s(16)).
        put_con(internal/1, s(17)).
        put_con(internal_error/1, s(18)).
        put_con(java/1, s(19)).
        put_con(java_error/3, s(20)).
        label(illarg/3+top).
        label(illarg/3+var).
        label(illarg/3+var+1).
        label(illarg/3+var+2).
        label(illarg/3+var+3).
        label(illarg/3+var+4).
        label(illarg/3+var+5).
        label(illarg/3+var+6).
        label(illarg/3+var+7).
        label(illarg/3+var+8).
        label(illarg/3+var+9).
        label(illarg/3+var+10).
        label(illarg/3+var+11).
        label(illarg/3+var+12).
        label(illarg/3+int).
        label(illarg/3+int+1).
        label(illarg/3+con).
        label(illarg/3+con+1).
        label(illarg/3+con+2).
        label(illarg/3+str).
        label(illarg/3+str+0).
        label(illarg/3+str+0+1).
        label(illarg/3+str+0+2).
        label(illarg/3+str+1).
        label(illarg/3+str+1+1).
        label(illarg/3+str+1+2).
        label(illarg/3+str+2).
        label(illarg/3+str+2+1).
        label(illarg/3+str+2+2).
        label(illarg/3+str+3).
        label(illarg/3+str+3+1).
        label(illarg/3+str+3+2).
        label(illarg/3+str+4).
        label(illarg/3+str+4+1).
        label(illarg/3+str+4+2).
        label(illarg/3+str+5).
        label(illarg/3+str+5+1).
        label(illarg/3+str+5+2).
        label(illarg/3+str+6).
        label(illarg/3+str+6+1).
        label(illarg/3+str+6+2).
        label(illarg/3+str+7).
        label(illarg/3+str+7+1).
        label(illarg/3+str+7+2).
        label(illarg/3+str+8).
        label(illarg/3+str+8+1).
        label(illarg/3+str+8+2).
        label(illarg/3+str+9).
        label(illarg/3+str+9+1).
        label(illarg/3+str+9+2).
        label(illarg/3+1).
        label(illarg/3+2).
        label(illarg/3+3).
        label(illarg/3+4).
        label(illarg/3+5).
        label(illarg/3+6).
        label(illarg/3+7).
        label(illarg/3+8).
        label(illarg/3+9).
        label(illarg/3+10).
        label(illarg/3+11).
        label(illarg/3+12).
        label(illarg/3+13).
        new_hash(str, 10).
        static([put_hash(s(3), illarg/3+str+0, str), put_hash(s(4), illarg/3+str+1, str), put_hash(s(5), illarg/3+str+2, str), put_hash(s(7), illarg/3+str+3, str), put_hash(s(9), illarg/3+str+4, str), put_hash(s(11), illarg/3+str+5, str), put_hash(s(13), illarg/3+str+6, str), put_hash(s(15), illarg/3+str+7, str), put_hash(s(17), illarg/3+str+8, str), put_hash(s(19), illarg/3+str+9, str)]).
illarg/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto(illarg/3+top).
illarg/3+top :
        setB0.
        switch_on_term(illarg/3+var, illarg/3+int, illarg/3+int, illarg/3+con, illarg/3+str, illarg/3+int).
illarg/3+var :
        try(illarg/3+1, illarg/3+var+1).
illarg/3+var+1 :
        retry(illarg/3+2, illarg/3+var+2).
illarg/3+var+2 :
        retry(illarg/3+3, illarg/3+var+3).
illarg/3+var+3 :
        retry(illarg/3+4, illarg/3+var+4).
illarg/3+var+4 :
        retry(illarg/3+5, illarg/3+var+5).
illarg/3+var+5 :
        retry(illarg/3+6, illarg/3+var+6).
illarg/3+var+6 :
        retry(illarg/3+7, illarg/3+var+7).
illarg/3+var+7 :
        retry(illarg/3+8, illarg/3+var+8).
illarg/3+var+8 :
        retry(illarg/3+9, illarg/3+var+9).
illarg/3+var+9 :
        retry(illarg/3+10, illarg/3+var+10).
illarg/3+var+10 :
        retry(illarg/3+11, illarg/3+var+11).
illarg/3+var+11 :
        retry(illarg/3+12, illarg/3+var+12).
illarg/3+var+12 :
        trust(illarg/3+13).
illarg/3+int :
        try(illarg/3+1, illarg/3+int+1).
illarg/3+int+1 :
        trust(illarg/3+13).
illarg/3+con :
        try(illarg/3+1, illarg/3+con+1).
illarg/3+con+1 :
        retry(illarg/3+2, illarg/3+con+2).
illarg/3+con+2 :
        trust(illarg/3+13).
illarg/3+str :
        switch_on_hash(str, 10, illarg/3+int, [type/1:illarg/3+str+0, domain/2:illarg/3+str+1, existence/3:illarg/3+str+2, permission/4:illarg/3+str+3, representation/1:illarg/3+str+4, evaluation/1:illarg/3+str+5, syntax/3:illarg/3+str+6, system/1:illarg/3+str+7, internal/1:illarg/3+str+8, java/1:illarg/3+str+9]).
illarg/3+str+0 :
        try(illarg/3+1, illarg/3+str+0+1).
illarg/3+str+0+1 :
        retry(illarg/3+3, illarg/3+str+0+2).
illarg/3+str+0+2 :
        trust(illarg/3+13).
illarg/3+str+1 :
        try(illarg/3+1, illarg/3+str+1+1).
illarg/3+str+1+1 :
        retry(illarg/3+4, illarg/3+str+1+2).
illarg/3+str+1+2 :
        trust(illarg/3+13).
illarg/3+str+2 :
        try(illarg/3+1, illarg/3+str+2+1).
illarg/3+str+2+1 :
        retry(illarg/3+5, illarg/3+str+2+2).
illarg/3+str+2+2 :
        trust(illarg/3+13).
illarg/3+str+3 :
        try(illarg/3+1, illarg/3+str+3+1).
illarg/3+str+3+1 :
        retry(illarg/3+6, illarg/3+str+3+2).
illarg/3+str+3+2 :
        trust(illarg/3+13).
illarg/3+str+4 :
        try(illarg/3+1, illarg/3+str+4+1).
illarg/3+str+4+1 :
        retry(illarg/3+7, illarg/3+str+4+2).
illarg/3+str+4+2 :
        trust(illarg/3+13).
illarg/3+str+5 :
        try(illarg/3+1, illarg/3+str+5+1).
illarg/3+str+5+1 :
        retry(illarg/3+8, illarg/3+str+5+2).
illarg/3+str+5+2 :
        trust(illarg/3+13).
illarg/3+str+6 :
        try(illarg/3+1, illarg/3+str+6+1).
illarg/3+str+6+1 :
        retry(illarg/3+9, illarg/3+str+6+2).
illarg/3+str+6+2 :
        trust(illarg/3+13).
illarg/3+str+7 :
        try(illarg/3+1, illarg/3+str+7+1).
illarg/3+str+7+1 :
        retry(illarg/3+10, illarg/3+str+7+2).
illarg/3+str+7+2 :
        trust(illarg/3+13).
illarg/3+str+8 :
        try(illarg/3+1, illarg/3+str+8+1).
illarg/3+str+8+1 :
        retry(illarg/3+11, illarg/3+str+8+2).
illarg/3+str+8+2 :
        trust(illarg/3+13).
illarg/3+str+9 :
        try(illarg/3+1, illarg/3+str+9+1).
illarg/3+str+9+1 :
        retry(illarg/3+12, illarg/3+str+9+2).
illarg/3+str+9+2 :
        trust(illarg/3+13).
illarg/3+1 :
        comment((illarg(A, B, C):-var(A), !, illarg(var, B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(A, B, C):-['$get_level'(D), var(A), '$cut'(D), illarg(var, B, C)])).
        put_var(a(4)).
        inline('$get_level'(a(4))).
        inline(var(a(1))).
        inline('$cut'(a(4))).
        set(s(1), ea(1)).
        set(a(2), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto(illarg/3+top).
illarg/3+2 :
        comment((illarg(var, A, B):-raise_exception(instantiation_error(A, B)))).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(var, A, B):-[raise_exception(instantiation_error(A, B))])).
        get_con(var, s(1), a(1)).
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(2), y(1), a(4)).
        execute(raise_exception(a(4), cont)).
illarg/3+3 :
        comment((illarg(type(A), B, C):-arg(C, B, D), '$dummy_29_builtins.pl'(A, B, C, D, E), raise_exception(E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(type(A), B, C):-[arg(C, B, D), '$dummy_29_builtins.pl'(A, B, C, D, E), raise_exception(E)])).
        get_str(type/1, s(3), a(1)).
        unify_var(a(4)).
        put_var(a(5)).
        put_var(a(6)).
        put_cont(raise_exception(a(6), cont), p(1)).
        put_cont('$dummy_29_builtins.pl'(a(4), a(2), a(3), a(5), a(6), p(1)), p(2)).
        execute(arg(a(3), a(2), a(5), p(2))).
illarg/3+4 :
        comment((illarg(domain(A, B), C, D):-arg(D, C, E), '$dummy_30_builtins.pl'(A, B, C, D, E, F), raise_exception(F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(domain(A, B), C, D):-[arg(D, C, E), '$dummy_30_builtins.pl'(A, B, C, D, E, F), raise_exception(F)])).
        get_str(domain/2, s(4), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_var(a(6)).
        put_var(a(7)).
        put_cont(raise_exception(a(7), cont), p(1)).
        put_cont('$dummy_30_builtins.pl'(a(4), a(5), a(2), a(3), a(6), a(7), p(1)), p(2)).
        execute(arg(a(3), a(2), a(6), p(2))).
illarg/3+5 :
        comment((illarg(existence(A, B, C), D, E):-raise_exception(existence_error(D, E, A, B, C)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(existence(A, B, C), D, E):-[raise_exception(existence_error(D, E, A, B, C))])).
        get_str(existence/3, s(5), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_var(a(6)).
        put_str_args([a(2), a(3), a(4), a(5), a(6)], y(1)).
        put_str(s(6), y(1), a(7)).
        execute(raise_exception(a(7), cont)).
illarg/3+6 :
        comment((illarg(permission(A, B, C, D), E, F):-raise_exception(permission_error(E, A, B, C, D)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(permission(A, B, C, D), E, F):-[raise_exception(permission_error(E, A, B, C, D))])).
        get_str(permission/4, s(7), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_var(a(6)).
        unify_var(a(7)).
        put_str_args([a(2), a(4), a(5), a(6), a(7)], y(1)).
        put_str(s(8), y(1), a(8)).
        execute(raise_exception(a(8), cont)).
illarg/3+7 :
        comment((illarg(representation(A), B, C):-raise_exception(representation_error(B, C, A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(representation(A), B, C):-[raise_exception(representation_error(B, C, A))])).
        get_str(representation/1, s(9), a(1)).
        unify_var(a(4)).
        put_str_args([a(2), a(3), a(4)], y(1)).
        put_str(s(10), y(1), a(5)).
        execute(raise_exception(a(5), cont)).
illarg/3+8 :
        comment((illarg(evaluation(A), B, C):-raise_exception(evaluation_error(B, C, A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(evaluation(A), B, C):-[raise_exception(evaluation_error(B, C, A))])).
        get_str(evaluation/1, s(11), a(1)).
        unify_var(a(4)).
        put_str_args([a(2), a(3), a(4)], y(1)).
        put_str(s(12), y(1), a(5)).
        execute(raise_exception(a(5), cont)).
illarg/3+9 :
        comment((illarg(syntax(A, B, C), D, E):-raise_exception(syntax_error(D, E, A, B, C)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(syntax(A, B, C), D, E):-[raise_exception(syntax_error(D, E, A, B, C))])).
        get_str(syntax/3, s(13), a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        unify_var(a(6)).
        put_str_args([a(2), a(3), a(4), a(5), a(6)], y(1)).
        put_str(s(14), y(1), a(7)).
        execute(raise_exception(a(7), cont)).
illarg/3+10 :
        comment((illarg(system(A), B, C):-raise_exception(system_error(A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(system(A), B, C):-[raise_exception(system_error(A))])).
        get_str(system/1, s(15), a(1)).
        unify_var(a(4)).
        put_str_args([a(4)], y(1)).
        put_str(s(16), y(1), a(5)).
        execute(raise_exception(a(5), cont)).
illarg/3+11 :
        comment((illarg(internal(A), B, C):-raise_exception(internal_error(A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(internal(A), B, C):-[raise_exception(internal_error(A))])).
        get_str(internal/1, s(17), a(1)).
        unify_var(a(4)).
        put_str_args([a(4)], y(1)).
        put_str(s(18), y(1), a(5)).
        execute(raise_exception(a(5), cont)).
illarg/3+12 :
        comment((illarg(java(A), B, C):-raise_exception(java_error(B, C, A)))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(java(A), B, C):-[raise_exception(java_error(B, C, A))])).
        get_str(java/1, s(19), a(1)).
        unify_var(a(4)).
        put_str_args([a(2), a(3), a(4)], y(1)).
        put_str(s(20), y(1), a(5)).
        execute(raise_exception(a(5), cont)).
illarg/3+13 :
        comment((illarg(A, B, C):-raise_exception(A))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment((illarg(A, B, C):-[raise_exception(A)])).
        execute(raise_exception(a(1), cont)).
end_predicate(illarg/3).

begin_predicate('$dummy_29_builtins.pl'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_29_builtins.pl'/5, 'builtins.pl']).
main('$dummy_29_builtins.pl'/5, non- (public)) :
        put_con(type_error/4, s(1)).
        put_con(instantiation_error/2, s(2)).
        label('$dummy_29_builtins.pl'/5+sub+1).
        label('$dummy_29_builtins.pl'/5+1).
        label('$dummy_29_builtins.pl'/5+2).
'$dummy_29_builtins.pl'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$dummy_29_builtins.pl'/5+1, '$dummy_29_builtins.pl'/5+sub+1).
'$dummy_29_builtins.pl'/5+sub+1 :
        trust('$dummy_29_builtins.pl'/5+2).
'$dummy_29_builtins.pl'/5+1 :
        comment(('$dummy_29_builtins.pl'(A, B, C, D, E):-nonvar(D), !, E=type_error(B, C, A, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dummy_29_builtins.pl'(A, B, C, D, E):-['$get_level'(F), nonvar(D), '$cut'(F), '$unify'(E, type_error(B, C, A, D))])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(nonvar(a(4))).
        inline('$cut'(a(6))).
        put_str_args([a(2), a(3), a(1), a(4)], y(1)).
        put_str(s(1), y(1), a(7)).
        inline('$unify'(a(5), a(7))).
        execute(cont).
'$dummy_29_builtins.pl'/5+2 :
        comment(('$dummy_29_builtins.pl'(A, B, C, D, E):-E=instantiation_error(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dummy_29_builtins.pl'(A, B, C, D, E):-['$unify'(E, instantiation_error(B, C))])).
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(2), y(1), a(6)).
        inline('$unify'(a(5), a(6))).
        execute(cont).
end_predicate('$dummy_29_builtins.pl'/5).

begin_predicate('$dummy_30_builtins.pl'/6).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_30_builtins.pl'/6, 'builtins.pl']).
main('$dummy_30_builtins.pl'/6, non- (public)) :
        put_con(domain_error/4, s(1)).
        label('$dummy_30_builtins.pl'/6+sub+1).
        label('$dummy_30_builtins.pl'/6+1).
        label('$dummy_30_builtins.pl'/6+2).
'$dummy_30_builtins.pl'/6 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(arg(6), ea(6)).
        set(cont, econt).
        setB0.
        try('$dummy_30_builtins.pl'/6+1, '$dummy_30_builtins.pl'/6+sub+1).
'$dummy_30_builtins.pl'/6+sub+1 :
        trust('$dummy_30_builtins.pl'/6+2).
'$dummy_30_builtins.pl'/6+1 :
        comment(('$dummy_30_builtins.pl'(A, B, C, D, E, F):-'$match_type'(A, E), !, F=domain_error(C, D, B, E))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7), a(8)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_30_builtins.pl'(A, B, C, D, E, F):-['$get_level'(G), '$match_type'(A, E), '$cut'(G), '$unify'(F, domain_error(C, D, B, E))])).
        put_var(a(7)).
        inline('$get_level'(a(7))).
        put_str_args([a(3), a(4), a(2), a(5)], y(1)).
        put_str(s(1), y(1), a(8)).
        put_cont('$unify'(a(6), a(8), cont), p(1)).
        put_cont('$cut'(a(7), p(1)), p(2)).
        execute('$match_type'(a(1), a(5), p(2))).
'$dummy_30_builtins.pl'/6+2 :
        comment(('$dummy_30_builtins.pl'(A, B, C, D, E, F):-'$dummy_31_builtins.pl'(A, C, D, E, F))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(ea(6), a(6)).
        set(econt, cont).
        comment(('$dummy_30_builtins.pl'(A, B, C, D, E, F):-['$dummy_31_builtins.pl'(A, C, D, E, F)])).
        execute('$dummy_31_builtins.pl'(a(1), a(3), a(4), a(5), a(6), cont)).
end_predicate('$dummy_30_builtins.pl'/6).

begin_predicate('$dummy_31_builtins.pl'/5).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_31_builtins.pl'/5, 'builtins.pl']).
main('$dummy_31_builtins.pl'/5, non- (public)) :
        put_con(type_error/4, s(1)).
        put_con(instantiation_error/2, s(2)).
        label('$dummy_31_builtins.pl'/5+sub+1).
        label('$dummy_31_builtins.pl'/5+1).
        label('$dummy_31_builtins.pl'/5+2).
'$dummy_31_builtins.pl'/5 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(arg(4), ea(4)).
        set(arg(5), ea(5)).
        set(cont, econt).
        setB0.
        try('$dummy_31_builtins.pl'/5+1, '$dummy_31_builtins.pl'/5+sub+1).
'$dummy_31_builtins.pl'/5+sub+1 :
        trust('$dummy_31_builtins.pl'/5+2).
'$dummy_31_builtins.pl'/5+1 :
        comment(('$dummy_31_builtins.pl'(A, B, C, D, E):-nonvar(D), !, E=type_error(B, C, A, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dummy_31_builtins.pl'(A, B, C, D, E):-['$get_level'(F), nonvar(D), '$cut'(F), '$unify'(E, type_error(B, C, A, D))])).
        put_var(a(6)).
        inline('$get_level'(a(6))).
        inline(nonvar(a(4))).
        inline('$cut'(a(6))).
        put_str_args([a(2), a(3), a(1), a(4)], y(1)).
        put_str(s(1), y(1), a(7)).
        inline('$unify'(a(5), a(7))).
        execute(cont).
'$dummy_31_builtins.pl'/5+2 :
        comment(('$dummy_31_builtins.pl'(A, B, C, D, E):-E=instantiation_error(B, C))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(ea(4), a(4)).
        set(ea(5), a(5)).
        set(econt, cont).
        comment(('$dummy_31_builtins.pl'(A, B, C, D, E):-['$unify'(E, instantiation_error(B, C))])).
        put_str_args([a(2), a(3)], y(1)).
        put_str(s(2), y(1), a(6)).
        inline('$unify'(a(5), a(6))).
        execute(cont).
end_predicate('$dummy_31_builtins.pl'/5).

begin_predicate('$match_type'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$match_type'/2, 'builtins.pl']).
main('$match_type'/2, non- (public)) :
        put_con(term, s(1)).
        put_con(variable, s(2)).
        put_con(atom, s(3)).
        put_con(atomic, s(4)).
        put_con(byte, s(5)).
        put_int(0, si(6)).
        put_int(255, si(7)).
        put_con(in_byte, s(8)).
        put_int(-1, si(9)).
        put_con(character, s(10)).
        put_int(1, si(11)).
        put_con(in_character, s(12)).
        put_con(number, s(13)).
        put_con(integer, s(14)).
        put_con(float, s(15)).
        put_con(callable, s(16)).
        put_con(compound, s(17)).
        put_con(list, s(18)).
        put_con(java, s(19)).
        put_con(stream, s(20)).
        put_con(stream_or_alias, s(21)).
        put_con(hash, s(22)).
        put_con('jp.ac.kobe_u.cs.prolog.lang.HashtableOfTerm', s(23)).
        put_con(hash_or_alias, s(24)).
        put_con(predicate_indicator, s(25)).
        put_con((:)/2, s(26)).
        put_con(/ / 2, s(27)).
        label(fail/0).
        label('$match_type'/2+var).
        label('$match_type'/2+var+1).
        label('$match_type'/2+var+2).
        label('$match_type'/2+var+3).
        label('$match_type'/2+var+4).
        label('$match_type'/2+var+5).
        label('$match_type'/2+var+6).
        label('$match_type'/2+var+7).
        label('$match_type'/2+var+8).
        label('$match_type'/2+var+9).
        label('$match_type'/2+var+10).
        label('$match_type'/2+var+11).
        label('$match_type'/2+var+12).
        label('$match_type'/2+var+13).
        label('$match_type'/2+var+14).
        label('$match_type'/2+var+15).
        label('$match_type'/2+var+16).
        label('$match_type'/2+var+17).
        label('$match_type'/2+var+18).
        label('$match_type'/2+var+19).
        label('$match_type'/2+con).
        label('$match_type'/2+1).
        label('$match_type'/2+2).
        label('$match_type'/2+3).
        label('$match_type'/2+4).
        label('$match_type'/2+5).
        label('$match_type'/2+6).
        label('$match_type'/2+7).
        label('$match_type'/2+8).
        label('$match_type'/2+9).
        label('$match_type'/2+10).
        label('$match_type'/2+11).
        label('$match_type'/2+12).
        label('$match_type'/2+13).
        label('$match_type'/2+14).
        label('$match_type'/2+15).
        label('$match_type'/2+16).
        label('$match_type'/2+17).
        label('$match_type'/2+18).
        label('$match_type'/2+19).
        label('$match_type'/2+20).
        new_hash(con, 20).
        static([put_hash(s(1), '$match_type'/2+1, con), put_hash(s(2), '$match_type'/2+2, con), put_hash(s(3), '$match_type'/2+3, con), put_hash(s(4), '$match_type'/2+4, con), put_hash(s(5), '$match_type'/2+5, con), put_hash(s(8), '$match_type'/2+6, con), put_hash(s(10), '$match_type'/2+7, con), put_hash(s(12), '$match_type'/2+8, con), put_hash(s(13), '$match_type'/2+9, con), put_hash(s(14), '$match_type'/2+10, con), put_hash(s(15), '$match_type'/2+11, con), put_hash(s(16), '$match_type'/2+12, con), put_hash(s(17), '$match_type'/2+13, con), put_hash(s(18), '$match_type'/2+14, con), put_hash(s(19), '$match_type'/2+15, con), put_hash(s(20), '$match_type'/2+16, con), put_hash(s(21), '$match_type'/2+17, con), put_hash(s(22), '$match_type'/2+18, con), put_hash(s(24), '$match_type'/2+19, con), put_hash(s(25), '$match_type'/2+20, con)]).
'$match_type'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        setB0.
        switch_on_term('$match_type'/2+var, fail/0, fail/0, '$match_type'/2+con, fail/0, fail/0).
'$match_type'/2+var :
        try('$match_type'/2+1, '$match_type'/2+var+1).
'$match_type'/2+var+1 :
        retry('$match_type'/2+2, '$match_type'/2+var+2).
'$match_type'/2+var+2 :
        retry('$match_type'/2+3, '$match_type'/2+var+3).
'$match_type'/2+var+3 :
        retry('$match_type'/2+4, '$match_type'/2+var+4).
'$match_type'/2+var+4 :
        retry('$match_type'/2+5, '$match_type'/2+var+5).
'$match_type'/2+var+5 :
        retry('$match_type'/2+6, '$match_type'/2+var+6).
'$match_type'/2+var+6 :
        retry('$match_type'/2+7, '$match_type'/2+var+7).
'$match_type'/2+var+7 :
        retry('$match_type'/2+8, '$match_type'/2+var+8).
'$match_type'/2+var+8 :
        retry('$match_type'/2+9, '$match_type'/2+var+9).
'$match_type'/2+var+9 :
        retry('$match_type'/2+10, '$match_type'/2+var+10).
'$match_type'/2+var+10 :
        retry('$match_type'/2+11, '$match_type'/2+var+11).
'$match_type'/2+var+11 :
        retry('$match_type'/2+12, '$match_type'/2+var+12).
'$match_type'/2+var+12 :
        retry('$match_type'/2+13, '$match_type'/2+var+13).
'$match_type'/2+var+13 :
        retry('$match_type'/2+14, '$match_type'/2+var+14).
'$match_type'/2+var+14 :
        retry('$match_type'/2+15, '$match_type'/2+var+15).
'$match_type'/2+var+15 :
        retry('$match_type'/2+16, '$match_type'/2+var+16).
'$match_type'/2+var+16 :
        retry('$match_type'/2+17, '$match_type'/2+var+17).
'$match_type'/2+var+17 :
        retry('$match_type'/2+18, '$match_type'/2+var+18).
'$match_type'/2+var+18 :
        retry('$match_type'/2+19, '$match_type'/2+var+19).
'$match_type'/2+var+19 :
        trust('$match_type'/2+20).
'$match_type'/2+con :
        switch_on_hash(con, 20, fail/0, [term:'$match_type'/2+1, variable:'$match_type'/2+2, atom:'$match_type'/2+3, atomic:'$match_type'/2+4, byte:'$match_type'/2+5, in_byte:'$match_type'/2+6, character:'$match_type'/2+7, in_character:'$match_type'/2+8, number:'$match_type'/2+9, integer:'$match_type'/2+10, float:'$match_type'/2+11, callable:'$match_type'/2+12, compound:'$match_type'/2+13, list:'$match_type'/2+14, java:'$match_type'/2+15, stream:'$match_type'/2+16, stream_or_alias:'$match_type'/2+17, hash:'$match_type'/2+18, hash_or_alias:'$match_type'/2+19, predicate_indicator:'$match_type'/2+20]).
'$match_type'/2+1 :
        comment(('$match_type'(term, A):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(term, A):-[])).
        get_con(term, s(1), a(1)).
        execute(cont).
'$match_type'/2+2 :
        comment(('$match_type'(variable, A):-var(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(variable, A):-[var(A)])).
        get_con(variable, s(2), a(1)).
        inline(var(a(2))).
        execute(cont).
'$match_type'/2+3 :
        comment(('$match_type'(atom, A):-atom(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(atom, A):-[atom(A)])).
        get_con(atom, s(3), a(1)).
        inline(atom(a(2))).
        execute(cont).
'$match_type'/2+4 :
        comment(('$match_type'(atomic, A):-atomic(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(atomic, A):-[atomic(A)])).
        get_con(atomic, s(4), a(1)).
        inline(atomic(a(2))).
        execute(cont).
'$match_type'/2+5 :
        comment(('$match_type'(byte, A):-integer(A), 0=<A, A=<255)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(byte, A):-[integer(A), '$less_or_equal'(0, A), '$less_or_equal'(A, 255)])).
        get_con(byte, s(5), a(1)).
        inline(integer(a(2))).
        inline('$less_or_equal'(si(6), a(2))).
        inline('$less_or_equal'(a(2), si(7))).
        execute(cont).
'$match_type'/2+6 :
        comment(('$match_type'(in_byte, A):-integer(A), -1=<A, A=<255)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(in_byte, A):-[integer(A), '$less_or_equal'(-1, A), '$less_or_equal'(A, 255)])).
        get_con(in_byte, s(8), a(1)).
        inline(integer(a(2))).
        inline('$less_or_equal'(si(9), a(2))).
        inline('$less_or_equal'(a(2), si(7))).
        execute(cont).
'$match_type'/2+7 :
        comment(('$match_type'(character, A):-atom(A), atom_length(A, 1))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(character, A):-[atom(A), atom_length(A, 1)])).
        get_con(character, s(10), a(1)).
        inline(atom(a(2))).
        execute(atom_length(a(2), si(11), cont)).
'$match_type'/2+8 :
        comment(('$match_type'(in_character, A):-'$dummy_32_builtins.pl'(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(in_character, A):-['$dummy_32_builtins.pl'(A)])).
        get_con(in_character, s(12), a(1)).
        execute('$dummy_32_builtins.pl'(a(2), cont)).
'$match_type'/2+9 :
        comment(('$match_type'(number, A):-number(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(number, A):-[number(A)])).
        get_con(number, s(13), a(1)).
        inline(number(a(2))).
        execute(cont).
'$match_type'/2+10 :
        comment(('$match_type'(integer, A):-integer(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(integer, A):-[integer(A)])).
        get_con(integer, s(14), a(1)).
        inline(integer(a(2))).
        execute(cont).
'$match_type'/2+11 :
        comment(('$match_type'(float, A):-float(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(float, A):-[float(A)])).
        get_con(float, s(15), a(1)).
        inline(float(a(2))).
        execute(cont).
'$match_type'/2+12 :
        comment(('$match_type'(callable, A):-callable(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(callable, A):-[callable(A)])).
        get_con(callable, s(16), a(1)).
        execute(callable(a(2), cont)).
'$match_type'/2+13 :
        comment(('$match_type'(compound, A):-compound(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(compound, A):-[compound(A)])).
        get_con(compound, s(17), a(1)).
        execute(compound(a(2), cont)).
'$match_type'/2+14 :
        comment(('$match_type'(list, A):-nonvar(A), '$dummy_33_builtins.pl'(A, B, C))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(list, A):-[nonvar(A), '$dummy_33_builtins.pl'(A, B, C)])).
        get_con(list, s(18), a(1)).
        inline(nonvar(a(2))).
        execute('$dummy_33_builtins.pl'(a(2), void, void, cont)).
'$match_type'/2+15 :
        comment(('$match_type'(java, A):-java(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(java, A):-[java(A)])).
        get_con(java, s(19), a(1)).
        inline(java(a(2))).
        execute(cont).
'$match_type'/2+16 :
        comment(('$match_type'(stream, A):-'$dummy_34_builtins.pl'(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(stream, A):-['$dummy_34_builtins.pl'(A)])).
        get_con(stream, s(20), a(1)).
        execute('$dummy_34_builtins.pl'(a(2), cont)).
'$match_type'/2+17 :
        comment(('$match_type'(stream_or_alias, A):-'$dummy_35_builtins.pl'(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(stream_or_alias, A):-['$dummy_35_builtins.pl'(A)])).
        get_con(stream_or_alias, s(21), a(1)).
        execute('$dummy_35_builtins.pl'(a(2), cont)).
'$match_type'/2+18 :
        comment(('$match_type'(hash, A):-java(A, 'jp.ac.kobe_u.cs.prolog.lang.HashtableOfTerm'))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(hash, A):-[java(A, 'jp.ac.kobe_u.cs.prolog.lang.HashtableOfTerm')])).
        get_con(hash, s(22), a(1)).
        inline(java(a(2), s(23))).
        execute(cont).
'$match_type'/2+19 :
        comment(('$match_type'(hash_or_alias, A):-'$dummy_36_builtins.pl'(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(hash_or_alias, A):-['$dummy_36_builtins.pl'(A)])).
        get_con(hash_or_alias, s(24), a(1)).
        execute('$dummy_36_builtins.pl'(a(2), cont)).
'$match_type'/2+20 :
        comment(('$match_type'(predicate_indicator, A):-nonvar(A), A=B:C/D, atom(B), atom(C), integer(D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6), a(7)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$match_type'(predicate_indicator, A):-[nonvar(A), '$unify'(A, B:C/D), atom(B), atom(C), integer(D)])).
        get_con(predicate_indicator, s(25), a(1)).
        inline(nonvar(a(2))).
        put_var(a(3)).
        put_var(a(4)).
        put_var(a(5)).
        put_str_args([a(4), a(5)], y(1)).
        put_str(s(27), y(1), a(6)).
        put_str_args([a(3), a(6)], y(2)).
        put_str(s(26), y(2), a(7)).
        inline('$unify'(a(2), a(7))).
        inline(atom(a(3))).
        inline(atom(a(4))).
        inline(integer(a(5))).
        execute(cont).
end_predicate('$match_type'/2).

begin_predicate('$dummy_32_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_32_builtins.pl'/1, 'builtins.pl']).
main('$dummy_32_builtins.pl'/1, non- (public)) :
        put_con(end_of_file, s(1)).
        put_con(character, s(2)).
        label('$dummy_32_builtins.pl'/1+sub+1).
        label('$dummy_32_builtins.pl'/1+1).
        label('$dummy_32_builtins.pl'/1+2).
'$dummy_32_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_32_builtins.pl'/1+1, '$dummy_32_builtins.pl'/1+sub+1).
'$dummy_32_builtins.pl'/1+sub+1 :
        trust('$dummy_32_builtins.pl'/1+2).
'$dummy_32_builtins.pl'/1+1 :
        comment(('$dummy_32_builtins.pl'(A):-A==end_of_file)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_32_builtins.pl'(A):-['$equality_of_term'(A, end_of_file)])).
        inline('$equality_of_term'(a(1), s(1))).
        execute(cont).
'$dummy_32_builtins.pl'/1+2 :
        comment(('$dummy_32_builtins.pl'(A):-'$match_type'(character, A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_32_builtins.pl'(A):-['$match_type'(character, A)])).
        execute('$match_type'(s(2), a(1), cont)).
end_predicate('$dummy_32_builtins.pl'/1).

begin_predicate('$dummy_33_builtins.pl'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_33_builtins.pl'/3, 'builtins.pl']).
main('$dummy_33_builtins.pl'/3, non- (public)) :
        put_con([], s(1)).
        label('$dummy_33_builtins.pl'/3+sub+1).
        label('$dummy_33_builtins.pl'/3+1).
        label('$dummy_33_builtins.pl'/3+2).
'$dummy_33_builtins.pl'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        setB0.
        try('$dummy_33_builtins.pl'/3+1, '$dummy_33_builtins.pl'/3+sub+1).
'$dummy_33_builtins.pl'/3+sub+1 :
        trust('$dummy_33_builtins.pl'/3+2).
'$dummy_33_builtins.pl'/3+1 :
        comment(('$dummy_33_builtins.pl'(A, B, C):-A=[])).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_33_builtins.pl'(A, B, C):-['$unify'(A, [])])).
        inline('$unify'(a(1), s(1))).
        execute(cont).
'$dummy_33_builtins.pl'/3+2 :
        comment(('$dummy_33_builtins.pl'(A, B, C):-A=[B|C])).
        decl_term_vars([a(1), a(2), a(3), a(4)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$dummy_33_builtins.pl'(A, B, C):-['$unify'(A, [B|C])])).
        put_list(a(2), a(3), a(4)).
        inline('$unify'(a(1), a(4))).
        execute(cont).
end_predicate('$dummy_33_builtins.pl'/3).

begin_predicate('$dummy_34_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_34_builtins.pl'/1, 'builtins.pl']).
main('$dummy_34_builtins.pl'/1, non- (public)) :
        put_con('java.io.PushbackReader', s(1)).
        put_con('java.io.PrintWriter', s(2)).
        label('$dummy_34_builtins.pl'/1+sub+1).
        label('$dummy_34_builtins.pl'/1+1).
        label('$dummy_34_builtins.pl'/1+2).
'$dummy_34_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_34_builtins.pl'/1+1, '$dummy_34_builtins.pl'/1+sub+1).
'$dummy_34_builtins.pl'/1+sub+1 :
        trust('$dummy_34_builtins.pl'/1+2).
'$dummy_34_builtins.pl'/1+1 :
        comment(('$dummy_34_builtins.pl'(A):-java(A, 'java.io.PushbackReader'))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_34_builtins.pl'(A):-[java(A, 'java.io.PushbackReader')])).
        inline(java(a(1), s(1))).
        execute(cont).
'$dummy_34_builtins.pl'/1+2 :
        comment(('$dummy_34_builtins.pl'(A):-java(A, 'java.io.PrintWriter'))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_34_builtins.pl'(A):-[java(A, 'java.io.PrintWriter')])).
        inline(java(a(1), s(2))).
        execute(cont).
end_predicate('$dummy_34_builtins.pl'/1).

begin_predicate('$dummy_35_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_35_builtins.pl'/1, 'builtins.pl']).
main('$dummy_35_builtins.pl'/1, non- (public)) :
        put_con(stream, s(1)).
        label('$dummy_35_builtins.pl'/1+sub+1).
        label('$dummy_35_builtins.pl'/1+1).
        label('$dummy_35_builtins.pl'/1+2).
'$dummy_35_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_35_builtins.pl'/1+1, '$dummy_35_builtins.pl'/1+sub+1).
'$dummy_35_builtins.pl'/1+sub+1 :
        trust('$dummy_35_builtins.pl'/1+2).
'$dummy_35_builtins.pl'/1+1 :
        comment(('$dummy_35_builtins.pl'(A):-atom(A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_35_builtins.pl'(A):-[atom(A)])).
        inline(atom(a(1))).
        execute(cont).
'$dummy_35_builtins.pl'/1+2 :
        comment(('$dummy_35_builtins.pl'(A):-'$match_type'(stream, A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_35_builtins.pl'(A):-['$match_type'(stream, A)])).
        execute('$match_type'(s(1), a(1), cont)).
end_predicate('$dummy_35_builtins.pl'/1).

begin_predicate('$dummy_36_builtins.pl'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$dummy_36_builtins.pl'/1, 'builtins.pl']).
main('$dummy_36_builtins.pl'/1, non- (public)) :
        put_con(hash, s(1)).
        label('$dummy_36_builtins.pl'/1+sub+1).
        label('$dummy_36_builtins.pl'/1+1).
        label('$dummy_36_builtins.pl'/1+2).
'$dummy_36_builtins.pl'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        try('$dummy_36_builtins.pl'/1+1, '$dummy_36_builtins.pl'/1+sub+1).
'$dummy_36_builtins.pl'/1+sub+1 :
        trust('$dummy_36_builtins.pl'/1+2).
'$dummy_36_builtins.pl'/1+1 :
        comment(('$dummy_36_builtins.pl'(A):-atom(A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_36_builtins.pl'(A):-[atom(A)])).
        inline(atom(a(1))).
        execute(cont).
'$dummy_36_builtins.pl'/1+2 :
        comment(('$dummy_36_builtins.pl'(A):-'$match_type'(hash, A))).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$dummy_36_builtins.pl'(A):-['$match_type'(hash, A)])).
        execute('$match_type'(s(1), a(1), cont)).
end_predicate('$dummy_36_builtins.pl'/1).

begin_predicate('$builtin_append'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_append'/3, 'builtins.pl']).
main('$builtin_append'/3, non- (public)) :
        put_con([], s(1)).
        label('$builtin_append'/3+top).
        label(fail/0).
        label('$builtin_append'/3+var).
        label('$builtin_append'/3+var+1).
        label('$builtin_append'/3+1).
        label('$builtin_append'/3+2).
'$builtin_append'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$builtin_append'/3+top).
'$builtin_append'/3+top :
        setB0.
        switch_on_term('$builtin_append'/3+var, fail/0, fail/0, '$builtin_append'/3+1, fail/0, '$builtin_append'/3+2).
'$builtin_append'/3+var :
        try('$builtin_append'/3+1, '$builtin_append'/3+var+1).
'$builtin_append'/3+var+1 :
        trust('$builtin_append'/3+2).
'$builtin_append'/3+1 :
        comment(('$builtin_append'([], A, A):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_append'([], A, A):-[])).
        get_con([], s(1), a(1)).
        get_val(a(2), a(3)).
        execute(cont).
'$builtin_append'/3+2 :
        comment(('$builtin_append'([A|B], C, [A|D]):-'$builtin_append'(B, C, D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_append'([A|B], C, [A|D]):-['$builtin_append'(B, C, D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        get_list(a(3)).
        unify_val(a(4)).
        unify_var(a(6)).
        set(a(5), ea(1)).
        set(a(2), ea(2)).
        set(a(6), ea(3)).
        set(cont, econt).
        goto('$builtin_append'/3+top).
end_predicate('$builtin_append'/3).

begin_predicate('$builtin_member'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_member'/2, 'builtins.pl']).
main('$builtin_member'/2, non- (public)) :
        label('$builtin_member'/2+top).
        label('$builtin_member'/2+sub+1).
        label('$builtin_member'/2+1).
        label('$builtin_member'/2+2).
'$builtin_member'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$builtin_member'/2+top).
'$builtin_member'/2+top :
        setB0.
        try('$builtin_member'/2+1, '$builtin_member'/2+sub+1).
'$builtin_member'/2+sub+1 :
        trust('$builtin_member'/2+2).
'$builtin_member'/2+1 :
        comment(('$builtin_member'(A, [A|B]):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$builtin_member'(A, [A|B]):-[])).
        get_list(a(2)).
        unify_val(a(1)).
        unify_void(1).
        execute(cont).
'$builtin_member'/2+2 :
        comment(('$builtin_member'(A, [B|C]):-'$builtin_member'(A, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$builtin_member'(A, [B|C]):-['$builtin_member'(A, C)])).
        get_list(a(2)).
        unify_void(1).
        unify_var(a(3)).
        set(a(1), ea(1)).
        set(a(3), ea(2)).
        set(cont, econt).
        goto('$builtin_member'/2+top).
end_predicate('$builtin_member'/2).

begin_predicate('$builtin_reverse'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_reverse'/2, 'builtins.pl']).
main('$builtin_reverse'/2, non- (public)) :
        put_con([], s(1)).
'$builtin_reverse'/2 :
        comment(('$builtin_reverse'(A, B):-'$builtin_reverse'(A, [], B))).
        setB0.
        decl_term_vars([a(1), a(2)]).
        set(arg(1), a(1)).
        set(arg(2), a(2)).
        comment(('$builtin_reverse'(A, B):-['$builtin_reverse'(A, [], B)])).
        execute('$builtin_reverse'(a(1), s(1), a(2), cont)).
end_predicate('$builtin_reverse'/2).

begin_predicate('$builtin_reverse'/3).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_reverse'/3, 'builtins.pl']).
main('$builtin_reverse'/3, non- (public)) :
        put_con([], s(1)).
        label('$builtin_reverse'/3+top).
        label(fail/0).
        label('$builtin_reverse'/3+var).
        label('$builtin_reverse'/3+var+1).
        label('$builtin_reverse'/3+1).
        label('$builtin_reverse'/3+2).
'$builtin_reverse'/3 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(arg(3), ea(3)).
        set(cont, econt).
        goto('$builtin_reverse'/3+top).
'$builtin_reverse'/3+top :
        setB0.
        switch_on_term('$builtin_reverse'/3+var, fail/0, fail/0, '$builtin_reverse'/3+1, fail/0, '$builtin_reverse'/3+2).
'$builtin_reverse'/3+var :
        try('$builtin_reverse'/3+1, '$builtin_reverse'/3+var+1).
'$builtin_reverse'/3+var+1 :
        trust('$builtin_reverse'/3+2).
'$builtin_reverse'/3+1 :
        comment(('$builtin_reverse'([], A, A):-true)).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_reverse'([], A, A):-[])).
        get_con([], s(1), a(1)).
        get_val(a(2), a(3)).
        execute(cont).
'$builtin_reverse'/3+2 :
        comment(('$builtin_reverse'([A|B], C, D):-'$builtin_reverse'(B, [A|C], D))).
        decl_term_vars([a(1), a(2), a(3), a(4), a(5), a(6)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(ea(3), a(3)).
        set(econt, cont).
        comment(('$builtin_reverse'([A|B], C, D):-['$builtin_reverse'(B, [A|C], D)])).
        get_list(a(1)).
        unify_var(a(4)).
        unify_var(a(5)).
        put_list(a(4), a(2), a(6)).
        set(a(5), ea(1)).
        set(a(6), ea(2)).
        set(a(3), ea(3)).
        set(cont, econt).
        goto('$builtin_reverse'/3+top).
end_predicate('$builtin_reverse'/3).

begin_predicate('$builtin_message'/1).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$builtin_message'/1, 'builtins.pl']).
main('$builtin_message'/1, non- (public)) :
        put_con([], s(1)).
        put_con(' ', s(2)).
        label(fail/0).
        label('$builtin_message'/1+var).
        label('$builtin_message'/1+var+1).
        label('$builtin_message'/1+var+2).
        label('$builtin_message'/1+lis).
        label('$builtin_message'/1+lis+1).
        label('$builtin_message'/1+1).
        label('$builtin_message'/1+2).
        label('$builtin_message'/1+3).
'$builtin_message'/1 :
        set(arg(1), ea(1)).
        set(cont, econt).
        setB0.
        switch_on_term('$builtin_message'/1+var, fail/0, fail/0, '$builtin_message'/1+1, fail/0, '$builtin_message'/1+lis).
'$builtin_message'/1+var :
        try('$builtin_message'/1+1, '$builtin_message'/1+var+1).
'$builtin_message'/1+var+1 :
        retry('$builtin_message'/1+2, '$builtin_message'/1+var+2).
'$builtin_message'/1+var+2 :
        trust('$builtin_message'/1+3).
'$builtin_message'/1+lis :
        try('$builtin_message'/1+2, '$builtin_message'/1+lis+1).
'$builtin_message'/1+lis+1 :
        trust('$builtin_message'/1+3).
'$builtin_message'/1+1 :
        comment(('$builtin_message'([]):-!)).
        decl_term_vars([a(1)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$builtin_message'([]):-['$neck_cut'])).
        get_con([], s(1), a(1)).
        inline('$neck_cut').
        execute(cont).
'$builtin_message'/1+2 :
        comment(('$builtin_message'([A]):-!, write(A))).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$builtin_message'([A]):-['$neck_cut', write(A)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_con([], s(1)).
        inline('$neck_cut').
        execute(write(a(2), cont)).
'$builtin_message'/1+3 :
        comment(('$builtin_message'([A|B]):-write(A), '$fast_write'(' '), '$builtin_message'(B))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([p(1), p(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(econt, cont).
        comment(('$builtin_message'([A|B]):-[write(A), '$fast_write'(' '), '$builtin_message'(B)])).
        get_list(a(1)).
        unify_var(a(2)).
        unify_var(a(3)).
        put_cont('$builtin_message'(a(3), cont), p(1)).
        put_cont('$fast_write'(s(2), p(1)), p(2)).
        execute(write(a(2), p(2))).
end_predicate('$builtin_message'/1).

begin_predicate('$member_in_reverse'/2).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$member_in_reverse'/2, 'builtins.pl']).
main('$member_in_reverse'/2, non- (public)) :
        label('$member_in_reverse'/2+top).
        label('$member_in_reverse'/2+sub+1).
        label('$member_in_reverse'/2+1).
        label('$member_in_reverse'/2+2).
'$member_in_reverse'/2 :
        set(arg(1), ea(1)).
        set(arg(2), ea(2)).
        set(cont, econt).
        goto('$member_in_reverse'/2+top).
'$member_in_reverse'/2+top :
        setB0.
        try('$member_in_reverse'/2+1, '$member_in_reverse'/2+sub+1).
'$member_in_reverse'/2+sub+1 :
        trust('$member_in_reverse'/2+2).
'$member_in_reverse'/2+1 :
        comment(('$member_in_reverse'(A, [B|C]):-'$member_in_reverse'(A, C))).
        decl_term_vars([a(1), a(2), a(3)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$member_in_reverse'(A, [B|C]):-['$member_in_reverse'(A, C)])).
        get_list(a(2)).
        unify_void(1).
        unify_var(a(3)).
        set(a(1), ea(1)).
        set(a(3), ea(2)).
        set(cont, econt).
        goto('$member_in_reverse'/2+top).
'$member_in_reverse'/2+2 :
        comment(('$member_in_reverse'(A, [A|B]):-true)).
        decl_term_vars([a(1), a(2)]).
        decl_pred_vars([cont]).
        set(ea(1), a(1)).
        set(ea(2), a(2)).
        set(econt, cont).
        comment(('$member_in_reverse'(A, [A|B]):-[])).
        get_list(a(2)).
        unify_val(a(1)).
        unify_void(1).
        execute(cont).
end_predicate('$member_in_reverse'/2).

begin_predicate('$init'/0).
        package_name('jp.ac.kobe_u.cs.prolog.builtin').
        import_package('jp.ac.kobe_u.cs.prolog.lang').
        info(['$init'/0, 'builtins.pl']).
main('$init'/0, (public)) :
        put_con('jp.ac.kobe_u.cs.prolog.builtin', s(1)).
        put_con(/ / 2, s(2)).
        put_con('$tokens', s(3)).
        put_int(1, si(4)).
        put_str_args([s(3), si(4)], s(5)).
        put_str(s(2), s(5), s(6)).
        put_con((:)/2, s(7)).
        put_con((:-)/2, s(8)).
        put_con('$current_operator'/3, s(9)).
        put_int(1200, si(10)).
        put_con(xfx, s(11)).
        put_con((:-), s(12)).
        put_str_args([si(10), s(11), s(12)], s(13)).
        put_str(s(9), s(13), s(14)).
        put_con(true, s(15)).
        put_str_args([s(14), s(15)], s(16)).
        put_str(s(8), s(16), s(17)).
        put_str_args([s(1), s(17)], s(18)).
        put_str(s(7), s(18), s(19)).
        put_con((-->), s(20)).
        put_str_args([si(10), s(11), s(20)], s(21)).
        put_str(s(9), s(21), s(22)).
        put_str_args([s(22), s(15)], s(23)).
        put_str(s(8), s(23), s(24)).
        put_str_args([s(1), s(24)], s(25)).
        put_str(s(7), s(25), s(26)).
        put_con(fx, s(27)).
        put_str_args([si(10), s(27), s(12)], s(28)).
        put_str(s(9), s(28), s(29)).
        put_str_args([s(29), s(15)], s(30)).
        put_str(s(8), s(30), s(31)).
        put_str_args([s(1), s(31)], s(32)).
        put_str(s(7), s(32), s(33)).
        put_con((?-), s(34)).
        put_str_args([si(10), s(27), s(34)], s(35)).
        put_str(s(9), s(35), s(36)).
        put_str_args([s(36), s(15)], s(37)).
        put_str(s(8), s(37), s(38)).
        put_str_args([s(1), s(38)], s(39)).
        put_str(s(7), s(39), s(40)).
        put_int(1150, si(41)).
        put_con((package), s(42)).
        put_str_args([si(41), s(27), s(42)], s(43)).
        put_str(s(9), s(43), s(44)).
        put_str_args([s(44), s(15)], s(45)).
        put_str(s(8), s(45), s(46)).
        put_str_args([s(1), s(46)], s(47)).
        put_str(s(7), s(47), s(48)).
        put_con((import), s(49)).
        put_str_args([si(41), s(27), s(49)], s(50)).
        put_str(s(9), s(50), s(51)).
        put_str_args([s(51), s(15)], s(52)).
        put_str(s(8), s(52), s(53)).
        put_str_args([s(1), s(53)], s(54)).
        put_str(s(7), s(54), s(55)).
        put_con((public), s(56)).
        put_str_args([si(41), s(27), s(56)], s(57)).
        put_str(s(9), s(57), s(58)).
        put_str_args([s(58), s(15)], s(59)).
        put_str(s(8), s(59), s(60)).
        put_str_args([s(1), s(60)], s(61)).
        put_str(s(7), s(61), s(62)).
        put_con((dynamic), s(63)).
        put_str_args([si(41), s(27), s(63)], s(64)).
        put_str(s(9), s(64), s(65)).
        put_str_args([s(65), s(15)], s(66)).
        put_str(s(8), s(66), s(67)).
        put_str_args([s(1), s(67)], s(68)).
        put_str(s(7), s(68), s(69)).
        put_con((meta_predicate), s(70)).
        put_str_args([si(41), s(27), s(70)], s(71)).
        put_str(s(9), s(71), s(72)).
        put_str_args([s(72), s(15)], s(73)).
        put_str(s(8), s(73), s(74)).
        put_str_args([s(1), s(74)], s(75)).
        put_str(s(7), s(75), s(76)).
        put_con((mode), s(77)).
        put_str_args([si(41), s(27), s(77)], s(78)).
        put_str(s(9), s(78), s(79)).
        put_str_args([s(79), s(15)], s(80)).
        put_str(s(8), s(80), s(81)).
        put_str_args([s(1), s(81)], s(82)).
        put_str(s(7), s(82), s(83)).
        put_con((multifile), s(84)).
        put_str_args([si(41), s(27), s(84)], s(85)).
        put_str(s(9), s(85), s(86)).
        put_str_args([s(86), s(15)], s(87)).
        put_str(s(8), s(87), s(88)).
        put_str_args([s(1), s(88)], s(89)).
        put_str(s(7), s(89), s(90)).
        put_con((block), s(91)).
        put_str_args([si(41), s(27), s(91)], s(92)).
        put_str(s(9), s(92), s(93)).
        put_str_args([s(93), s(15)], s(94)).
        put_str(s(8), s(94), s(95)).
        put_str_args([s(1), s(95)], s(96)).
        put_str(s(7), s(96), s(97)).
        put_int(1100, si(98)).
        put_con(xfy, s(99)).
        put_con((;), s(100)).
        put_str_args([si(98), s(99), s(100)], s(101)).
        put_str(s(9), s(101), s(102)).
        put_str_args([s(102), s(15)], s(103)).
        put_str(s(8), s(103), s(104)).
        put_str_args([s(1), s(104)], s(105)).
        put_str(s(7), s(105), s(106)).
        put_int(1050, si(107)).
        put_con((->), s(108)).
        put_str_args([si(107), s(99), s(108)], s(109)).
        put_str(s(9), s(109), s(110)).
        put_str_args([s(110), s(15)], s(111)).
        put_str(s(8), s(111), s(112)).
        put_str_args([s(1), s(112)], s(113)).
        put_str(s(7), s(113), s(114)).
        put_int(1000, si(115)).
        put_con((','), s(116)).
        put_str_args([si(115), s(99), s(116)], s(117)).
        put_str(s(9), s(117), s(118)).
        put_str_args([s(118), s(15)], s(119)).
        put_str(s(8), s(119), s(120)).
        put_str_args([s(1), s(120)], s(121)).
        put_str(s(7), s(121), s(122)).
        put_int(900, si(123)).
        put_con(fy, s(124)).
        put_con(\+, s(125)).
        put_str_args([si(123), s(124), s(125)], s(126)).
        put_str(s(9), s(126), s(127)).
        put_str_args([s(127), s(15)], s(128)).
        put_str(s(8), s(128), s(129)).
        put_str_args([s(1), s(129)], s(130)).
        put_str(s(7), s(130), s(131)).
        put_int(700, si(132)).
        put_con(=, s(133)).
        put_str_args([si(132), s(11), s(133)], s(134)).
        put_str(s(9), s(134), s(135)).
        put_str_args([s(135), s(15)], s(136)).
        put_str(s(8), s(136), s(137)).
        put_str_args([s(1), s(137)], s(138)).
        put_str(s(7), s(138), s(139)).
        put_con(\=, s(140)).
        put_str_args([si(132), s(11), s(140)], s(141)).
        put_str(s(9), s(141), s(142)).
        put_str_args([s(142), s(15)], s(143)).
        put_str(s(8), s(143), s(144)).
        put_str_args([s(1), s(144)], s(145)).
        put_str(s(7), s(145), s(146)).
        put_con(==, s(147)).
        put_str_args([si(132), s(11), s(147)], s(148)).
        put_str(s(9), s(148), s(149)).
        put_str_args([s(149), s(15)], s(150)).
        put_str(s(8), s(150), s(151)).
        put_str_args([s(1), s(151)], s(152)).
        put_str(s(7), s(152), s(153)).
        put_con(\==, s(154)).
        put_str_args([si(132), s(11), s(154)], s(155)).
        put_str(s(9), s(155), s(156)).
        put_str_args([s(156), s(15)], s(157)).
        put_str(s(8), s(157), s(158)).
        put_str_args([s(1), s(158)], s(159)).
        put_str(s(7), s(159), s(160)).
        put_con(@<, s(161)).
        put_str_args([si(132), s(11), s(161)], s(162)).
        put_str(s(9), s(162), s(163)).
        put_str_args([s(163), s(15)], s(164)).
        put_str(s(8), s(164), s(165)).
        put_str_args([s(1), s(165)], s(166)).
        put_str(s(7), s(166), s(167)).
        put_con(@>, s(168)).
        put_str_args([si(132), s(11), s(168)], s(169)).
        put_str(s(9), s(169), s(170)).
        put_str_args([s(170), s(15)], s(171)).
        put_str(s(8), s(171), s(172)).
        put_str_args([s(1), s(172)], s(173)).
        put_str(s(7), s(173), s(174)).
        put_con(@=<, s(175)).
        put_str_args([si(132), s(11), s(175)], s(176)).
        put_str(s(9), s(176), s(177)).
        put_str_args([s(177), s(15)], s(178)).
        put_str(s(8), s(178), s(179)).
        put_str_args([s(1), s(179)], s(180)).
        put_str(s(7), s(180), s(181)).
        put_con(@>=, s(182)).
        put_str_args([si(132), s(11), s(182)], s(183)).
        put_str(s(9), s(183), s(184)).
        put_str_args([s(184), s(15)], s(185)).
        put_str(s(8), s(185), s(186)).
        put_str_args([s(1), s(186)], s(187)).
        put_str(s(7), s(187), s(188)).
        put_con(=.., s(189)).
        put_str_args([si(132), s(11), s(189)], s(190)).
        put_str(s(9), s(190), s(191)).
        put_str_args([s(191), s(15)], s(192)).
        put_str(s(8), s(192), s(193)).
        put_str_args([s(1), s(193)], s(194)).
        put_str(s(7), s(194), s(195)).
        put_con(is, s(196)).
        put_str_args([si(132), s(11), s(196)], s(197)).
        put_str(s(9), s(197), s(198)).
        put_str_args([s(198), s(15)], s(199)).
        put_str(s(8), s(199), s(200)).
        put_str_args([s(1), s(200)], s(201)).
        put_str(s(7), s(201), s(202)).
        put_con(=:=, s(203)).
        put_str_args([si(132), s(11), s(203)], s(204)).
        put_str(s(9), s(204), s(205)).
        put_str_args([s(205), s(15)], s(206)).
        put_str(s(8), s(206), s(207)).
        put_str_args([s(1), s(207)], s(208)).
        put_str(s(7), s(208), s(209)).
        put_con(=\=, s(210)).
        put_str_args([si(132), s(11), s(210)], s(211)).
        put_str(s(9), s(211), s(212)).
        put_str_args([s(212), s(15)], s(213)).
        put_str(s(8), s(213), s(214)).
        put_str_args([s(1), s(214)], s(215)).
        put_str(s(7), s(215), s(216)).
        put_con(<, s(217)).
        put_str_args([si(132), s(11), s(217)], s(218)).
        put_str(s(9), s(218), s(219)).
        put_str_args([s(219), s(15)], s(220)).
        put_str(s(8), s(220), s(221)).
        put_str_args([s(1), s(221)], s(222)).
        put_str(s(7), s(222), s(223)).
        put_con(>, s(224)).
        put_str_args([si(132), s(11), s(224)], s(225)).
        put_str(s(9), s(225), s(226)).
        put_str_args([s(226), s(15)], s(227)).
        put_str(s(8), s(227), s(228)).
        put_str_args([s(1), s(228)], s(229)).
        put_str(s(7), s(229), s(230)).
        put_con(=<, s(231)).
        put_str_args([si(132), s(11), s(231)], s(232)).
        put_str(s(9), s(232), s(233)).
        put_str_args([s(233), s(15)], s(234)).
        put_str(s(8), s(234), s(235)).
        put_str_args([s(1), s(235)], s(236)).
        put_str(s(7), s(236), s(237)).
        put_con(>=, s(238)).
        put_str_args([si(132), s(11), s(238)], s(239)).
        put_str(s(9), s(239), s(240)).
        put_str_args([s(240), s(15)], s(241)).
        put_str(s(8), s(241), s(242)).
        put_str_args([s(1), s(242)], s(243)).
        put_str(s(7), s(243), s(244)).
        put_int(550, si(245)).
        put_con(:, s(246)).
        put_str_args([si(245), s(99), s(246)], s(247)).
        put_str(s(9), s(247), s(248)).
        put_str_args([s(248), s(15)], s(249)).
        put_str(s(8), s(249), s(250)).
        put_str_args([s(1), s(250)], s(251)).
        put_str(s(7), s(251), s(252)).
        put_int(500, si(253)).
        put_con(yfx, s(254)).
        put_con(+, s(255)).
        put_str_args([si(253), s(254), s(255)], s(256)).
        put_str(s(9), s(256), s(257)).
        put_str_args([s(257), s(15)], s(258)).
        put_str(s(8), s(258), s(259)).
        put_str_args([s(1), s(259)], s(260)).
        put_str(s(7), s(260), s(261)).
        put_con(-, s(262)).
        put_str_args([si(253), s(254), s(262)], s(263)).
        put_str(s(9), s(263), s(264)).
        put_str_args([s(264), s(15)], s(265)).
        put_str(s(8), s(265), s(266)).
        put_str_args([s(1), s(266)], s(267)).
        put_str(s(7), s(267), s(268)).
        put_con(#, s(269)).
        put_str_args([si(253), s(254), s(269)], s(270)).
        put_str(s(9), s(270), s(271)).
        put_str_args([s(271), s(15)], s(272)).
        put_str(s(8), s(272), s(273)).
        put_str_args([s(1), s(273)], s(274)).
        put_str(s(7), s(274), s(275)).
        put_con(/\, s(276)).
        put_str_args([si(253), s(254), s(276)], s(277)).
        put_str(s(9), s(277), s(278)).
        put_str_args([s(278), s(15)], s(279)).
        put_str(s(8), s(279), s(280)).
        put_str_args([s(1), s(280)], s(281)).
        put_str(s(7), s(281), s(282)).
        put_con(\/, s(283)).
        put_str_args([si(253), s(254), s(283)], s(284)).
        put_str(s(9), s(284), s(285)).
        put_str_args([s(285), s(15)], s(286)).
        put_str(s(8), s(286), s(287)).
        put_str_args([s(1), s(287)], s(288)).
        put_str(s(7), s(288), s(289)).
        put_str_args([si(253), s(27), s(255)], s(290)).
        put_str(s(9), s(290), s(291)).
        put_str_args([s(291), s(15)], s(292)).
        put_str(s(8), s(292), s(293)).
        put_str_args([s(1), s(293)], s(294)).
        put_str(s(7), s(294), s(295)).
        put_int(400, si(296)).
        put_con(*, s(297)).
        put_str_args([si(296), s(254), s(297)], s(298)).
        put_str(s(9), s(298), s(299)).
        put_str_args([s(299), s(15)], s(300)).
        put_str(s(8), s(300), s(301)).
        put_str_args([s(1), s(301)], s(302)).
        put_str(s(7), s(302), s(303)).
        put_con(/, s(304)).
        put_str_args([si(296), s(254), s(304)], s(305)).
        put_str(s(9), s(305), s(306)).
        put_str_args([s(306), s(15)], s(307)).
        put_str(s(8), s(307), s(308)).
        put_str_args([s(1), s(308)], s(309)).
        put_str(s(7), s(309), s(310)).
        put_con(//, s(311)).
        put_str_args([si(296), s(254), s(311)], s(312)).
        put_str(s(9), s(312), s(313)).
        put_str_args([s(313), s(15)], s(314)).
        put_str(s(8), s(314), s(315)).
        put_str_args([s(1), s(315)], s(316)).
        put_str(s(7), s(316), s(317)).
        put_con(mod, s(318)).
        put_str_args([si(296), s(254), s(318)], s(319)).
        put_str(s(9), s(319), s(320)).
        put_str_args([s(320), s(15)], s(321)).
        put_str(s(8), s(321), s(322)).
        put_str_args([s(1), s(322)], s(323)).
        put_str(s(7), s(323), s(324)).
        put_con(rem, s(325)).
        put_str_args([si(296), s(254), s(325)], s(326)).
        put_str(s(9), s(326), s(327)).
        put_str_args([s(327), s(15)], s(328)).
        put_str(s(8), s(328), s(329)).
        put_str_args([s(1), s(329)], s(330)).
        put_str(s(7), s(330), s(331)).
        put_con(<<, s(332)).
        put_str_args([si(296), s(254), s(332)], s(333)).
        put_str(s(9), s(333), s(334)).
        put_str_args([s(334), s(15)], s(335)).
        put_str(s(8), s(335), s(336)).
        put_str_args([s(1), s(336)], s(337)).
        put_str(s(7), s(337), s(338)).
        put_con(>>, s(339)).
        put_str_args([si(296), s(254), s(339)], s(340)).
        put_str(s(9), s(340), s(341)).
        put_str_args([s(341), s(15)], s(342)).
        put_str(s(8), s(342), s(343)).
        put_str_args([s(1), s(343)], s(344)).
        put_str(s(7), s(344), s(345)).
        put_int(300, si(346)).
        put_con(~, s(347)).
        put_str_args([si(346), s(11), s(347)], s(348)).
        put_str(s(9), s(348), s(349)).
        put_str_args([s(349), s(15)], s(350)).
        put_str(s(8), s(350), s(351)).
        put_str_args([s(1), s(351)], s(352)).
        put_str(s(7), s(352), s(353)).
        put_int(200, si(354)).
        put_con(**, s(355)).
        put_str_args([si(354), s(11), s(355)], s(356)).
        put_str(s(9), s(356), s(357)).
        put_str_args([s(357), s(15)], s(358)).
        put_str(s(8), s(358), s(359)).
        put_str_args([s(1), s(359)], s(360)).
        put_str(s(7), s(360), s(361)).
        put_con(^, s(362)).
        put_str_args([si(354), s(99), s(362)], s(363)).
        put_str(s(9), s(363), s(364)).
        put_str_args([s(364), s(15)], s(365)).
        put_str(s(8), s(365), s(366)).
        put_str_args([s(1), s(366)], s(367)).
        put_str(s(7), s(367), s(368)).
        put_con(\, s(369)).
        put_str_args([si(354), s(124), s(369)], s(370)).
        put_str(s(9), s(370), s(371)).
        put_str_args([s(371), s(15)], s(372)).
        put_str(s(8), s(372), s(373)).
        put_str_args([s(1), s(373)], s(374)).
        put_str(s(7), s(374), s(375)).
        put_str_args([si(354), s(124), s(262)], s(376)).
        put_str(s(9), s(376), s(377)).
        put_str_args([s(377), s(15)], s(378)).
        put_str(s(8), s(378), s(379)).
        put_str_args([s(1), s(379)], s(380)).
        put_str(s(7), s(380), s(381)).
        put_con('$current_leash', s(382)).
        put_str_args([s(382), si(4)], s(383)).
        put_str(s(2), s(383), s(384)).
        put_con('$current_spypoint', s(385)).
        put_int(3, si(386)).
        put_str_args([s(385), si(386)], s(387)).
        put_str(s(2), s(387), s(388)).
        put_con('$leap_flag', s(389)).
        put_str_args([s(389), si(4)], s(390)).
        put_str(s(2), s(390), s(391)).
        put_con('$consulted_file', s(392)).
        put_str_args([s(392), si(4)], s(393)).
        put_str(s(2), s(393), s(394)).
        put_con('$consulted_package', s(395)).
        put_str_args([s(395), si(4)], s(396)).
        put_str(s(2), s(396), s(397)).
        put_con('$consulted_predicate', s(398)).
        put_str_args([s(398), si(386)], s(399)).
        put_str(s(2), s(399), s(400)).
'$init'/0 :
        comment(('$init':-'$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$tokens'/1, A), assertz(('$current_operator'(1200, xfx, (:-)):-true)), assertz(('$current_operator'(1200, xfx, (-->)):-true)), assertz(('$current_operator'(1200, fx, (:-)):-true)), assertz(('$current_operator'(1200, fx, (?-)):-true)), assertz(('$current_operator'(1150, fx, (package)):-true)), assertz(('$current_operator'(1150, fx, (import)):-true)), assertz(('$current_operator'(1150, fx, (public)):-true)), assertz(('$current_operator'(1150, fx, (dynamic)):-true)), assertz(('$current_operator'(1150, fx, (meta_predicate)):-true)), assertz(('$current_operator'(1150, fx, (mode)):-true)), assertz(('$current_operator'(1150, fx, (multifile)):-true)), assertz(('$current_operator'(1150, fx, (block)):-true)), assertz(('$current_operator'(1100, xfy, (;)):-true)), assertz(('$current_operator'(1050, xfy, (->)):-true)), assertz(('$current_operator'(1000, xfy, (',')):-true)), assertz(('$current_operator'(900, fy, \+):-true)), assertz(('$current_operator'(700, xfx, =):-true)), assertz(('$current_operator'(700, xfx, \=):-true)), assertz(('$current_operator'(700, xfx, ==):-true)), assertz(('$current_operator'(700, xfx, \==):-true)), assertz(('$current_operator'(700, xfx, @<):-true)), assertz(('$current_operator'(700, xfx, @>):-true)), assertz(('$current_operator'(700, xfx, @=<):-true)), assertz(('$current_operator'(700, xfx, @>=):-true)), assertz(('$current_operator'(700, xfx, =..):-true)), assertz(('$current_operator'(700, xfx, is):-true)), assertz(('$current_operator'(700, xfx, =:=):-true)), assertz(('$current_operator'(700, xfx, =\=):-true)), assertz(('$current_operator'(700, xfx, <):-true)), assertz(('$current_operator'(700, xfx, >):-true)), assertz(('$current_operator'(700, xfx, =<):-true)), assertz(('$current_operator'(700, xfx, >=):-true)), assertz(('$current_operator'(550, xfy, :):-true)), assertz(('$current_operator'(500, yfx, +):-true)), assertz(('$current_operator'(500, yfx, -):-true)), assertz(('$current_operator'(500, yfx, #):-true)), assertz(('$current_operator'(500, yfx, /\):-true)), assertz(('$current_operator'(500, yfx, \/):-true)), assertz(('$current_operator'(500, fx, +):-true)), assertz(('$current_operator'(400, yfx, *):-true)), assertz(('$current_operator'(400, yfx, /):-true)), assertz(('$current_operator'(400, yfx, //):-true)), assertz(('$current_operator'(400, yfx, mod):-true)), assertz(('$current_operator'(400, yfx, rem):-true)), assertz(('$current_operator'(400, yfx, <<):-true)), assertz(('$current_operator'(400, yfx, >>):-true)), assertz(('$current_operator'(300, xfx, ~):-true)), assertz(('$current_operator'(200, xfx, **):-true)), assertz(('$current_operator'(200, xfy, ^):-true)), assertz(('$current_operator'(200, fy, \):-true)), assertz(('$current_operator'(200, fy, -):-true)), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$current_leash'/1, B), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$current_spypoint'/3, C), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$leap_flag'/1, D), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$consulted_file'/1, E), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$consulted_package'/1, F), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$consulted_predicate'/3, G))).
        setB0.
        decl_pred_vars([p(1), p(2), p(3), p(4), p(5), p(6), p(7), p(8), p(9), p(10), p(11), p(12), p(13), p(14), p(15), p(16), p(17), p(18), p(19), p(20), p(21), p(22), p(23), p(24), p(25), p(26), p(27), p(28), p(29), p(30), p(31), p(32), p(33), p(34), p(35), p(36), p(37), p(38), p(39), p(40), p(41), p(42), p(43), p(44), p(45), p(46), p(47), p(48), p(49), p(50), p(51), p(52), p(53), p(54), p(55), p(56), p(57)]).
        comment(('$init':-['$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$tokens'/1, A), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1200, xfx, (:-)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1200, xfx, (-->)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1200, fx, (:-)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1200, fx, (?-)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (package)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (import)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (public)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (dynamic)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (meta_predicate)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (mode)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (multifile)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1150, fx, (block)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1100, xfy, (;)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1050, xfy, (->)):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(1000, xfy, (',')):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(900, fy, \+):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, =):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, \=):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, ==):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, \==):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, @<):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, @>):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, @=<):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, @>=):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, =..):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, is):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, =:=):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, =\=):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, <):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, >):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, =<):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(700, xfx, >=):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(550, xfy, :):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(500, yfx, +):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(500, yfx, -):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(500, yfx, #):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(500, yfx, /\):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(500, yfx, \/):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(500, fx, +):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(400, yfx, *):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(400, yfx, /):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(400, yfx, //):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(400, yfx, mod):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(400, yfx, rem):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(400, yfx, <<):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(400, yfx, >>):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(300, xfx, ~):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(200, xfx, **):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(200, xfy, ^):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(200, fy, \):-true)), assertz('jp.ac.kobe_u.cs.prolog.builtin': ('$current_operator'(200, fy, -):-true)), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$current_leash'/1, B), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$current_spypoint'/3, C), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$leap_flag'/1, D), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$consulted_file'/1, E), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$consulted_package'/1, F), '$new_indexing_hash'('jp.ac.kobe_u.cs.prolog.builtin', '$consulted_predicate'/3, G)])).
        put_cont('$new_indexing_hash'(s(1), s(400), void, cont), p(1)).
        put_cont('$new_indexing_hash'(s(1), s(397), void, p(1)), p(2)).
        put_cont('$new_indexing_hash'(s(1), s(394), void, p(2)), p(3)).
        put_cont('$new_indexing_hash'(s(1), s(391), void, p(3)), p(4)).
        put_cont('$new_indexing_hash'(s(1), s(388), void, p(4)), p(5)).
        put_cont('$new_indexing_hash'(s(1), s(384), void, p(5)), p(6)).
        put_cont(assertz(s(381), p(6)), p(7)).
        put_cont(assertz(s(375), p(7)), p(8)).
        put_cont(assertz(s(368), p(8)), p(9)).
        put_cont(assertz(s(361), p(9)), p(10)).
        put_cont(assertz(s(353), p(10)), p(11)).
        put_cont(assertz(s(345), p(11)), p(12)).
        put_cont(assertz(s(338), p(12)), p(13)).
        put_cont(assertz(s(331), p(13)), p(14)).
        put_cont(assertz(s(324), p(14)), p(15)).
        put_cont(assertz(s(317), p(15)), p(16)).
        put_cont(assertz(s(310), p(16)), p(17)).
        put_cont(assertz(s(303), p(17)), p(18)).
        put_cont(assertz(s(295), p(18)), p(19)).
        put_cont(assertz(s(289), p(19)), p(20)).
        put_cont(assertz(s(282), p(20)), p(21)).
        put_cont(assertz(s(275), p(21)), p(22)).
        put_cont(assertz(s(268), p(22)), p(23)).
        put_cont(assertz(s(261), p(23)), p(24)).
        put_cont(assertz(s(252), p(24)), p(25)).
        put_cont(assertz(s(244), p(25)), p(26)).
        put_cont(assertz(s(237), p(26)), p(27)).
        put_cont(assertz(s(230), p(27)), p(28)).
        put_cont(assertz(s(223), p(28)), p(29)).
        put_cont(assertz(s(216), p(29)), p(30)).
        put_cont(assertz(s(209), p(30)), p(31)).
        put_cont(assertz(s(202), p(31)), p(32)).
        put_cont(assertz(s(195), p(32)), p(33)).
        put_cont(assertz(s(188), p(33)), p(34)).
        put_cont(assertz(s(181), p(34)), p(35)).
        put_cont(assertz(s(174), p(35)), p(36)).
        put_cont(assertz(s(167), p(36)), p(37)).
        put_cont(assertz(s(160), p(37)), p(38)).
        put_cont(assertz(s(153), p(38)), p(39)).
        put_cont(assertz(s(146), p(39)), p(40)).
        put_cont(assertz(s(139), p(40)), p(41)).
        put_cont(assertz(s(131), p(41)), p(42)).
        put_cont(assertz(s(122), p(42)), p(43)).
        put_cont(assertz(s(114), p(43)), p(44)).
        put_cont(assertz(s(106), p(44)), p(45)).
        put_cont(assertz(s(97), p(45)), p(46)).
        put_cont(assertz(s(90), p(46)), p(47)).
        put_cont(assertz(s(83), p(47)), p(48)).
        put_cont(assertz(s(76), p(48)), p(49)).
        put_cont(assertz(s(69), p(49)), p(50)).
        put_cont(assertz(s(62), p(50)), p(51)).
        put_cont(assertz(s(55), p(51)), p(52)).
        put_cont(assertz(s(48), p(52)), p(53)).
        put_cont(assertz(s(40), p(53)), p(54)).
        put_cont(assertz(s(33), p(54)), p(55)).
        put_cont(assertz(s(26), p(55)), p(56)).
        put_cont(assertz(s(19), p(56)), p(57)).
        execute('$new_indexing_hash'(s(1), s(6), void, p(57))).
end_predicate('$init'/0).


