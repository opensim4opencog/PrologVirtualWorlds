package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$add_op'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$add_op_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(",");
    static /*Symbol*/Object s2 = makeAtom("permission", 4);
    static /*Symbol*/Object s3 = makeAtom("modify");
    static /*Symbol*/Object s4 = makeAtom("operator");
    static /*Symbol*/Object s5 = makeAtom("op", 3);
    static /*IntegerTerm*/Object si6 = makeInteger(3);
    static /*Symbol*/Object s7 = makeAtom(":", 2);
    static /*Symbol*/Object s8 = makeAtom("jp.ac.kobe_u.cs.prolog.builtin");
    static /*Symbol*/Object s9 = makeAtom("$current_operator", 3);
    static /*IntegerTerm*/Object si10 = makeInteger(0);
    static Predicate _$add_op_3_var = new PRED_$add_op_3_var();
    static Predicate _$add_op_3_var_1 = new PRED_$add_op_3_var_1();
    static Predicate _$add_op_3_var_2 = new PRED_$add_op_3_var_2();
    static Predicate _$add_op_3_var_3 = new PRED_$add_op_3_var_3();
    static Predicate _$add_op_3_int = new PRED_$add_op_3_int();
    static Predicate _$add_op_3_int_1 = new PRED_$add_op_3_int_1();
    static Predicate _$add_op_3_int_2 = new PRED_$add_op_3_int_2();
    static Predicate _$add_op_3_1 = new PRED_$add_op_3_1();
    static Predicate _$add_op_3_2 = new PRED_$add_op_3_2();
    static Predicate _$add_op_3_3 = new PRED_$add_op_3_3();
    static Predicate _$add_op_3_4 = new PRED_$add_op_3_4();

    public Object arg1, arg2, arg3;

    public PRED_$add_op_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$add_op_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$add_op"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$add_op'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$add_op_3_var, _$add_op_3_int, _$add_op_3_int, _$add_op_3_var, _$add_op_3_int, _$add_op_3_int);
    }
}

class PRED_$add_op_3_var extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$add_op_3_1, _$add_op_3_var_1);
    }
}

class PRED_$add_op_3_var_1 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$add_op_3_2, _$add_op_3_var_2);
    }
}

class PRED_$add_op_3_var_2 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$add_op_3_3, _$add_op_3_var_3);
    }
}

class PRED_$add_op_3_var_3 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$add_op_3_4);
    }
}

class PRED_$add_op_3_int extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$add_op_3_2, _$add_op_3_int_1);
    }
}

class PRED_$add_op_3_int_1 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$add_op_3_3, _$add_op_3_int_2);
    }
}

class PRED_$add_op_3_int_2 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$add_op_3_4);
    }
}

class PRED_$add_op_3_1 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$add_op'((','), A, B):-!, illarg(permission(modify, operator, (','), C), op(A, B, (',')), 3)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$add_op'((','), A, B):-['$neck_cut', illarg(permission(modify, operator, (','), C), op(A, B, (',')), 3)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {s3, s4, s1, engine.makeVariable(this)};
        a4 = makeStructure(s2, y1);
        Object[] y2 = {a2, a3, s1};
        a5 = makeStructure(s5, y2);
        return exit(engine, new PRED_illarg_3(a4, a5, si6, cont));
    }
}

class PRED_$add_op_3_2 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$add_op'(A, B, C):-clause('$current_operator'(D, E, A), F), '$op_specifier'(C, G), '$op_specifier'(E, H), G=H, retract('$current_operator'(I, E, A)), fail
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$add_op'(A, B, C):-[clause('jp.ac.kobe_u.cs.prolog.builtin':'$current_operator'(D, E, A), F), '$op_specifier'(C, G), '$op_specifier'(E, H), '$unify'(G, H), retract('jp.ac.kobe_u.cs.prolog.builtin':'$current_operator'(I, E, A)), fail]
        a4 = engine.makeVariable(this);
        Object[] y1 = {engine.makeVariable(this), a4, a1};
        a5 = makeStructure(s9, y1);
        Object[] y2 = {s8, a5};
        a6 = makeStructure(s7, y2);
        a7 = engine.makeVariable(this);
        a8 = engine.makeVariable(this);
        Object[] y3 = {engine.makeVariable(this), a4, a1};
        a9 = makeStructure(s9, y3);
        Object[] y4 = {s8, a9};
        a10 = makeStructure(s7, y4);
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_retract_1(a10, p1);
        p3 = new PRED_$unify_2(a7, a8, p2);
        p4 = new PRED_$op_specifier_2(a4, a8, p3);
        p5 = new PRED_$op_specifier_2(a3, a7, p4);
        return exit(engine, new PRED_clause_2(a6, engine.makeVariable(this), p5));
    }
}

class PRED_$add_op_3_3 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$add_op'(A, 0, B):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$add_op'(A, 0, B):-['$neck_cut']
        a2 = deref( a2);
        if (isInteger(a2)){
            if (intValue( a2) != 0)
                return fail(engine);
        } else if (isVariable(a2)){
            bind(/*VAR*/ a2,si10);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$add_op_3_4 extends PRED_$add_op_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$add_op'(A, B, C):-assertz('$current_operator'(B, C, A))
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$add_op'(A, B, C):-[assertz('jp.ac.kobe_u.cs.prolog.builtin':'$current_operator'(B, C, A))]
        Object[] y1 = {a2, a3, a1};
        a4 = makeStructure(s9, y1);
        Object[] y2 = {s8, a4};
        a5 = makeStructure(s7, y2);
        return exit(engine, new PRED_assertz_1(a5, cont));
    }
}
