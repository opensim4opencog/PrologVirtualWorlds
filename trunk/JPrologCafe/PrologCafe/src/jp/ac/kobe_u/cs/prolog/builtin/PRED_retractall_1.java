package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>retractall/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
public class PRED_retractall_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(":", 2);
    static /*Symbol*/Object s2 = makeAtom("retractall", 1);
    static /*Symbol*/Object s3 = makeAtom("access");
    static /*Symbol*/Object s4 = makeAtom("static_procedure");
    static /*Symbol*/Object s5 = makeAtom(":-", 2);
    static Predicate _retractall_1_sub_1 = new PRED_retractall_1_sub_1();
    static Predicate _retractall_1_1 = new PRED_retractall_1_1();
    static Predicate _retractall_1_2 = new PRED_retractall_1_2();

    public Object arg1;

    public PRED_retractall_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_retractall_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "retractall"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'retractall'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_retractall_1_1, _retractall_1_sub_1);
    }
}

class PRED_retractall_1_sub_1 extends PRED_retractall_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_retractall_1_2);
    }
}

class PRED_retractall_1_1 extends PRED_retractall_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // retractall(A):-'$head_to_term'(A, B, C:D, retractall(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, access, static_procedure, retractall(A)), '$clause_internal'(C, D, B, E, F), copy_term(E, (B:-G)), '$erase'(F), '$rehash_indexing'(C, D, F), fail
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // retractall(A):-['$head_to_term'(A, B, C:D, retractall(A)), '$new_internal_database'(C), '$check_procedure_permission'(C:D, access, static_procedure, retractall(A)), '$clause_internal'(C, D, B, E, F), copy_term(E, (B:-G)), '$erase'(F), '$rehash_indexing'(C, D, F), fail]
        a2 = engine.makeVariable(this);
        a3 = engine.makeVariable(this);
        a4 = engine.makeVariable(this);
        Object[] y1 = {a3, a4};
        a5 = makeStructure(s1, y1);
        Object[] y2 = {a1};
        a6 = makeStructure(s2, y2);
        Object[] y3 = {a3, a4};
        a7 = makeStructure(s1, y3);
        Object[] y4 = {a1};
        a8 = makeStructure(s2, y4);
        a9 = engine.makeVariable(this);
        a10 = engine.makeVariable(this);
        Object[] y5 = {a2, engine.makeVariable(this)};
        a11 = makeStructure(s5, y5);
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_$rehash_indexing_3(a3, a4, a10, p1);
        p3 = new PRED_$erase_1(a10, p2);
        p4 = new PRED_copy_term_2(a9, a11, p3);
        p5 = new PRED_$clause_internal_5(a3, a4, a2, a9, a10, p4);
        p6 = new PRED_$check_procedure_permission_4(a7, s3, s4, a8, p5);
        p7 = new PRED_$new_internal_database_1(a3, p6);
        return exit(engine, new PRED_$head_to_term_4(a1, a2, a5, a6, p7));
    }
}

class PRED_retractall_1_2 extends PRED_retractall_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // retractall(A):-true
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // retractall(A):-[]
        return exit(engine,cont);
    }
}
