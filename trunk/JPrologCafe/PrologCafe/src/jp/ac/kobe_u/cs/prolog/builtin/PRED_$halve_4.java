package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$halve'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$halve_4 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("[]");
    static Predicate _$halve_4_top = new PRED_$halve_4_top();
    static Predicate _$halve_4_var = new PRED_$halve_4_var();
    static Predicate _$halve_4_var_1 = new PRED_$halve_4_var_1();
    static Predicate _$halve_4_1 = new PRED_$halve_4_1();
    static Predicate _$halve_4_2 = new PRED_$halve_4_2();

    public Object arg1, arg2, arg3, arg4;

    public PRED_$halve_4(Object a1, Object a2, Object a3, Object a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$halve_4(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String nameUQ() { return "$halve"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$halve'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine.cont = cont;
        return exit(engine, _$halve_4_top);
    }
}

class PRED_$halve_4_top extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.switch_on_term(_$halve_4_var, _$halve_4_2, _$halve_4_2, _$halve_4_2, _$halve_4_2, _$halve_4_var);
    }
}

class PRED_$halve_4_var extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$halve_4_1, _$halve_4_var_1);
    }
}

class PRED_$halve_4_var_1 extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$halve_4_2);
    }
}

class PRED_$halve_4_1 extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$halve'([A, B|C], [D|E], [D|F], G):-!, '$halve'(C, E, F, G)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$halve'([A, B|C], [D|E], [D|F], G):-['$neck_cut', '$halve'(C, E, F, G)]
        a1 = deref( a1);
        if (isListTerm(a1)){
            Object[] args = consArgs(a1);
            a5 = args[1];
        } else if (isVariable(a1)){
            a5 = engine.makeVariable(this);
             bind(a1,makeList(engine.makeVariable(this), a5));
        } else {
            return fail(engine);
        }
        a5 = deref( a5);
        if (isListTerm(a5)){
            Object[] args = consArgs(a5);
            a6 = args[1];
        } else if (isVariable(a5)){
            a6 = engine.makeVariable(this);
             bind(a5,makeList(engine.makeVariable(this), a6));
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isListTerm(a2)){
            Object[] args = consArgs(a2);
            a7 = args[0];
            a8 = args[1];
        } else if (isVariable(a2)){
            a7 = engine.makeVariable(this);
            a8 = engine.makeVariable(this);
             bind(a2,makeList(a7, a8));
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isListTerm(a3)){
            Object[] args = consArgs(a3);
            if (!unify( a7,args[0]))
                return fail(engine);
            a9 = args[1];
        } else if (isVariable(a3)){
            a9 = engine.makeVariable(this);
             bind(a3,makeList(a7, a9));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a6;
        engine_aregs[2] = a8;
        engine_aregs[3] = a9;
        engine_aregs[4] = a4;
        engine.cont = cont;
        return exit(engine, _$halve_4_top);
    }
}

class PRED_$halve_4_2 extends PRED_$halve_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$halve'(A, B, [], B):-true
        Object a1, a2, a3, a4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$halve'(A, B, [], B):-[]
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s1))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s1);
        } else {
            return fail(engine);
        }
        if (! unify(a2,a4))
            return fail(engine);
        return exit(engine,cont);
    }
}
