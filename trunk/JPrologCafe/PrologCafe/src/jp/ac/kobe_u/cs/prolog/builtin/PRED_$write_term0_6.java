package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$write_term0'/6</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$write_term0_6 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("alpha");
    static /*Symbol*/Object s2 = makeAtom("$VAR", 1);
    static /*IntegerTerm*/Object si3 = makeInteger(0);
    static /*Symbol*/Object s4 = makeAtom("numbervars", 1);
    static /*Symbol*/Object s5 = makeAtom("true");
    static Object[] s6 = {s5};
    static /*Structure*/Object s7 = makeStructure(s4, s6);
    static /*Symbol*/Object s8 = makeAtom("symbol");
    static /*Symbol*/Object s9 = makeAtom("punct");
    static /*Symbol*/Object s10 = makeAtom("[");
    static /*Symbol*/Object s11 = makeAtom("]");
    static /*Symbol*/Object s12 = makeAtom("{}", 1);
    static /*Symbol*/Object s13 = makeAtom("{");
    static /*IntegerTerm*/Object si14 = makeInteger(1200);
    static /*Symbol*/Object s15 = makeAtom("}");
    static /*Symbol*/Object s16 = makeAtom("(");
    static /*Symbol*/Object s17 = makeAtom(")");
    static Predicate _$write_term0_6_sub_1 = new PRED_$write_term0_6_sub_1();
    static Predicate _$write_term0_6_sub_2 = new PRED_$write_term0_6_sub_2();
    static Predicate _$write_term0_6_sub_3 = new PRED_$write_term0_6_sub_3();
    static Predicate _$write_term0_6_sub_4 = new PRED_$write_term0_6_sub_4();
    static Predicate _$write_term0_6_sub_5 = new PRED_$write_term0_6_sub_5();
    static Predicate _$write_term0_6_sub_6 = new PRED_$write_term0_6_sub_6();
    static Predicate _$write_term0_6_sub_7 = new PRED_$write_term0_6_sub_7();
    static Predicate _$write_term0_6_sub_8 = new PRED_$write_term0_6_sub_8();
    static Predicate _$write_term0_6_sub_9 = new PRED_$write_term0_6_sub_9();
    static Predicate _$write_term0_6_1 = new PRED_$write_term0_6_1();
    static Predicate _$write_term0_6_2 = new PRED_$write_term0_6_2();
    static Predicate _$write_term0_6_3 = new PRED_$write_term0_6_3();
    static Predicate _$write_term0_6_4 = new PRED_$write_term0_6_4();
    static Predicate _$write_term0_6_5 = new PRED_$write_term0_6_5();
    static Predicate _$write_term0_6_6 = new PRED_$write_term0_6_6();
    static Predicate _$write_term0_6_7 = new PRED_$write_term0_6_7();
    static Predicate _$write_term0_6_8 = new PRED_$write_term0_6_8();
    static Predicate _$write_term0_6_9 = new PRED_$write_term0_6_9();
    static Predicate _$write_term0_6_10 = new PRED_$write_term0_6_10();

    public Object arg1, arg2, arg3, arg4, arg5, arg6;

    public PRED_$write_term0_6(Object a1, Object a2, Object a3, Object a4, Object a5, Object a6, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        this.cont = cont;
    }

    public PRED_$write_term0_6(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        this.cont = cont;
    }

    public int arity() { return 6; }

    public String nameUQ() { return "$write_term0"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
         case 5: arg6 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
         case 5: return arg6;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$write_term0'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + "," + argString(arg6,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine_aregs[6] = arg6;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$write_term0_6_1, _$write_term0_6_sub_1);
    }
}

class PRED_$write_term0_6_sub_1 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_2, _$write_term0_6_sub_2);
    }
}

class PRED_$write_term0_6_sub_2 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_3, _$write_term0_6_sub_3);
    }
}

class PRED_$write_term0_6_sub_3 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_4, _$write_term0_6_sub_4);
    }
}

class PRED_$write_term0_6_sub_4 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_5, _$write_term0_6_sub_5);
    }
}

class PRED_$write_term0_6_sub_5 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_6, _$write_term0_6_sub_6);
    }
}

class PRED_$write_term0_6_sub_6 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_7, _$write_term0_6_sub_7);
    }
}

class PRED_$write_term0_6_sub_7 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_8, _$write_term0_6_sub_8);
    }
}

class PRED_$write_term0_6_sub_8 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$write_term0_6_9, _$write_term0_6_sub_9);
    }
}

class PRED_$write_term0_6_sub_9 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$write_term0_6_10);
    }
}

class PRED_$write_term0_6_1 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, alpha, D, E):-var(A), !, '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), var(A), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)]
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s1))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s1);
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of var(a(1))
        a1 = deref( a1);
        if (! isVariable(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = deref( a7);
        if (! isCutter/*Integer*/(a7)) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(( a7));
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return exit(engine, new PRED_$write_space_if_needed_3(a3, s1, a6, p1));
    }
}

class PRED_$write_term0_6_2 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, alpha, D, E):-java(A), !, '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), java(A), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)]
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s1))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s1);
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of java(a(1))
        a1 = deref( a1);
        if (! isJavaObject(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = deref( a7);
        if (! isCutter/*Integer*/(a7)) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(( a7));
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return exit(engine, new PRED_$write_space_if_needed_3(a3, s1, a6, p1));
    }
}

class PRED_$write_term0_6_3 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, alpha, D, E):-A='$VAR'(F), integer(F), F>=0, '$builtin_member'(numbervars(true), D), !, '$write_space_if_needed'(C, alpha, E), '$write_VAR'(F, E)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), '$unify'(A, '$VAR'(G)), integer(G), '$greater_or_equal'(G, 0), '$builtin_member'(numbervars(true), D), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$write_VAR'(G, E)]
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s1))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s1);
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a8 = engine.makeVariable(this);
        Object[] y1 = {a8};
        a9 = makeStructure(s2, y1);
        //START inline expansion of $unify(a(1), a(9))
        if (! unify(a1,a9)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of integer(a(8))
        a8 = deref( a8);
        if (! isInteger(a8)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $greater_or_equal(a(8), si(3))
        try {
            if (arithCompareTo(Arithmetic.evaluate(a8),si3) < 0) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        p1 = new PRED_$write_VAR_2(a8, a6, cont);
        p2 = new PRED_$write_space_if_needed_3(a3, s1, a6, p1);
        p3 = new PRED_$cut_1(a7, p2);
        return exit(engine, new PRED_$builtin_member_2(s7, a5, p3));
    }
}

class PRED_$write_term0_6_4 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, alpha, D, E):-number(A), A<0, !, '$write_space_if_needed'(C, symbol, E), '$fast_write'(E, A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), number(A), '$less_than'(A, 0), '$cut'(F), '$write_space_if_needed'(C, symbol, E), '$fast_write'(E, A)]
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s1))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s1);
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of number(a(1))
        a1 = deref( a1);
        if (! isNumber(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $less_than(a(1), si(3))
        try {
            if (arithCompareTo(Arithmetic.evaluate(a1),si3) >= 0) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = deref( a7);
        if (! isCutter/*Integer*/(a7)) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(( a7));
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return exit(engine, new PRED_$write_space_if_needed_3(a3, s8, a6, p1));
    }
}

class PRED_$write_term0_6_5 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, alpha, D, E):-number(A), !, '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, alpha, D, E):-['$get_level'(F), number(A), '$cut'(F), '$write_space_if_needed'(C, alpha, E), '$fast_write'(E, A)]
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s1))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s1);
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of number(a(1))
        a1 = deref( a1);
        if (! isNumber(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = deref( a7);
        if (! isCutter/*Integer*/(a7)) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(( a7));
        }
        //END inline expansion
        p1 = new PRED_$fast_write_2(a6, a1, cont);
        return exit(engine, new PRED_$write_space_if_needed_3(a3, s1, a6, p1));
    }
}

class PRED_$write_term0_6_6 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, D, E, F):-atom(A), !, '$write_atom'(A, C, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, D, E, F):-['$get_level'(G), atom(A), '$cut'(G), '$write_atom'(A, C, D, E, F)]
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of atom(a(1))
        a1 = deref( a1);
        if (! isAtomTerm(a1)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = deref( a7);
        if (! isCutter/*Integer*/(a7)) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(( a7));
        }
        //END inline expansion
        return exit(engine, new PRED_$write_atom_5(a1, a3, a4, a5, a6, cont));
    }
}

class PRED_$write_term0_6_7 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, D, E, F):-'$dummy_16_builtins.pl'(E), '$write_is_operator'(A, G, H, I), !, '$write_term_op'(G, I, H, B, C, D, E, F)
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, D, E, F):-['$get_level'(G), '$dummy_16_builtins.pl'(E), '$write_is_operator'(A, H, I, J), '$cut'(G), '$write_term_op'(H, J, I, B, C, D, E, F)]
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a8 = engine.makeVariable(this);
        a9 = engine.makeVariable(this);
        a10 = engine.makeVariable(this);
        p1 = new PRED_$write_term_op_8(a8, a10, a9, a2, a3, a4, a5, a6, cont);
        p2 = new PRED_$cut_1(a7, p1);
        p3 = new PRED_$write_is_operator_4(a1, a8, a9, a10, p2);
        return exit(engine, new PRED_$dummy_16_builtins$002Epl_1(a5, p3));
    }
}

class PRED_$write_term0_6_8 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, punct, D, E):-A=[F|G], '$dummy_17_builtins.pl'(D), !, '$write_space_if_needed'(C, punct, E), put_char(E, '['), '$write_term_list_args'(A, punct, H, D, E), put_char(E, ']')
        Object a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, punct, D, E):-['$get_level'(F), '$unify'(A, [G|H]), '$dummy_17_builtins.pl'(D), '$cut'(F), '$write_space_if_needed'(C, punct, E), put_char(E, '['), '$write_term_list_args'(A, punct, I, D, E), put_char(E, ']')]
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s9))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s9);
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a8 = makeList(engine.makeVariable(this), engine.makeVariable(this));
        //START inline expansion of $unify(a(1), a(8))
        if (! unify(a1,a8)) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_put_char_2(a6, s11, cont);
        p2 = new PRED_$write_term_list_args_5(a1, s9, engine.makeVariable(this), a5, a6, p1);
        p3 = new PRED_put_char_2(a6, s10, p2);
        p4 = new PRED_$write_space_if_needed_3(a3, s9, a6, p3);
        p5 = new PRED_$cut_1(a7, p4);
        return exit(engine, new PRED_$dummy_17_builtins$002Epl_1(a5, p5));
    }
}

class PRED_$write_term0_6_9 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, D, E, F):-A={G}, '$dummy_18_builtins.pl'(E), !, '$write_space_if_needed'(C, punct, F), put_char(F, '{'), '$write_term0'(G, 1200, punct, H, E, F), put_char(F, '}')
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, D, E, F):-['$get_level'(G), '$unify'(A, {H}), '$dummy_18_builtins.pl'(E), '$cut'(G), '$write_space_if_needed'(C, punct, F), put_char(F, '{'), '$write_term0'(H, 1200, punct, I, E, F), put_char(F, '}')]
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a8 = engine.makeVariable(this);
        Object[] y1 = {a8};
        a9 = makeStructure(s12, y1);
        //START inline expansion of $unify(a(1), a(9))
        if (! unify(a1,a9)) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_put_char_2(a6, s15, cont);
        p2 = new PRED_$write_term0_6(a8, si14, s9, engine.makeVariable(this), a5, a6, p1);
        p3 = new PRED_put_char_2(a6, s13, p2);
        p4 = new PRED_$write_space_if_needed_3(a3, s9, a6, p3);
        p5 = new PRED_$cut_1(a7, p4);
        return exit(engine, new PRED_$dummy_18_builtins$002Epl_1(a5, p5));
    }
}

class PRED_$write_term0_6_10 extends PRED_$write_term0_6 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$write_term0'(A, B, C, punct, D, E):-A=..[F|G], '$write_atom'(F, C, H, D, E), put_char(E, '('), '$write_term_args'(G, punct, I, D, E), put_char(E, ')')
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        a6 = engine_aregs[6];
        cont = engine.cont;
    // '$write_term0'(A, B, C, punct, D, E):-['$univ'(A, [F|G]), '$write_atom'(F, C, H, D, E), put_char(E, '('), '$write_term_args'(G, punct, I, D, E), put_char(E, ')')]
        a4 = deref( a4);
        if (isAtomTerm(a4)){
            if (! prologEquals(a4,s9))
                return fail(engine);
        } else if (isVariable(a4)){
             bind(/*VAR*/ a4,s9);
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        a8 = engine.makeVariable(this);
        a9 = makeList(a7, a8);
        p1 = new PRED_put_char_2(a6, s17, cont);
        p2 = new PRED_$write_term_args_5(a8, s9, engine.makeVariable(this), a5, a6, p1);
        p3 = new PRED_put_char_2(a6, s16, p2);
        p4 = new PRED_$write_atom_5(a7, a3, engine.makeVariable(this), a5, a6, p3);
        return exit(engine, new PRED_$univ_2(a1, a9, p4));
    }
}
