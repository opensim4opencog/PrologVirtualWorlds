package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_error2'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$parse_tokens_error2_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("number", 1);
    static /*Symbol*/Object s2 = makeAtom("atom", 1);
    static /*Symbol*/Object s3 = makeAtom("var", 2);
    static /*Symbol*/Object s4 = makeAtom("string", 1);
    static /*Symbol*/Object s5 = makeAtom("\"");
    static Predicate _$parse_tokens_error2_1_var = new PRED_$parse_tokens_error2_1_var();
    static Predicate _$parse_tokens_error2_1_var_1 = new PRED_$parse_tokens_error2_1_var_1();
    static Predicate _$parse_tokens_error2_1_var_2 = new PRED_$parse_tokens_error2_1_var_2();
    static Predicate _$parse_tokens_error2_1_var_3 = new PRED_$parse_tokens_error2_1_var_3();
    static Predicate _$parse_tokens_error2_1_var_4 = new PRED_$parse_tokens_error2_1_var_4();
    static Predicate _$parse_tokens_error2_1_str = new PRED_$parse_tokens_error2_1_str();
    static Predicate _$parse_tokens_error2_1_str_0 = new PRED_$parse_tokens_error2_1_str_0();
    static Predicate _$parse_tokens_error2_1_str_0_1 = new PRED_$parse_tokens_error2_1_str_0_1();
    static Predicate _$parse_tokens_error2_1_str_1 = new PRED_$parse_tokens_error2_1_str_1();
    static Predicate _$parse_tokens_error2_1_str_1_1 = new PRED_$parse_tokens_error2_1_str_1_1();
    static Predicate _$parse_tokens_error2_1_str_2 = new PRED_$parse_tokens_error2_1_str_2();
    static Predicate _$parse_tokens_error2_1_str_2_1 = new PRED_$parse_tokens_error2_1_str_2_1();
    static Predicate _$parse_tokens_error2_1_str_3 = new PRED_$parse_tokens_error2_1_str_3();
    static Predicate _$parse_tokens_error2_1_str_3_1 = new PRED_$parse_tokens_error2_1_str_3_1();
    static Predicate _$parse_tokens_error2_1_1 = new PRED_$parse_tokens_error2_1_1();
    static Predicate _$parse_tokens_error2_1_2 = new PRED_$parse_tokens_error2_1_2();
    static Predicate _$parse_tokens_error2_1_3 = new PRED_$parse_tokens_error2_1_3();
    static Predicate _$parse_tokens_error2_1_4 = new PRED_$parse_tokens_error2_1_4();
    static Predicate _$parse_tokens_error2_1_5 = new PRED_$parse_tokens_error2_1_5();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(4);
    static {
        str.put(s1, _$parse_tokens_error2_1_str_0);
        str.put(s2, _$parse_tokens_error2_1_str_1);
        str.put(s3, _$parse_tokens_error2_1_str_2);
        str.put(s4, _$parse_tokens_error2_1_str_3);
    }

    public Object arg1;

    public PRED_$parse_tokens_error2_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$parse_tokens_error2_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$parse_tokens_error2"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$parse_tokens_error2'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$parse_tokens_error2_1_var, _$parse_tokens_error2_1_5, _$parse_tokens_error2_1_5, _$parse_tokens_error2_1_5, _$parse_tokens_error2_1_str, _$parse_tokens_error2_1_5);
    }
}

class PRED_$parse_tokens_error2_1_var extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$parse_tokens_error2_1_1, _$parse_tokens_error2_1_var_1);
    }
}

class PRED_$parse_tokens_error2_1_var_1 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_error2_1_2, _$parse_tokens_error2_1_var_2);
    }
}

class PRED_$parse_tokens_error2_1_var_2 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_error2_1_3, _$parse_tokens_error2_1_var_3);
    }
}

class PRED_$parse_tokens_error2_1_var_3 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_error2_1_4, _$parse_tokens_error2_1_var_4);
    }
}

class PRED_$parse_tokens_error2_1_var_4 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_error2_1_5);
    }
}

class PRED_$parse_tokens_error2_1_str extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$parse_tokens_error2_1_5);
    }
}

class PRED_$parse_tokens_error2_1_str_0 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$parse_tokens_error2_1_1, _$parse_tokens_error2_1_str_0_1);
    }
}

class PRED_$parse_tokens_error2_1_str_0_1 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_error2_1_5);
    }
}

class PRED_$parse_tokens_error2_1_str_1 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$parse_tokens_error2_1_2, _$parse_tokens_error2_1_str_1_1);
    }
}

class PRED_$parse_tokens_error2_1_str_1_1 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_error2_1_5);
    }
}

class PRED_$parse_tokens_error2_1_str_2 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$parse_tokens_error2_1_3, _$parse_tokens_error2_1_str_2_1);
    }
}

class PRED_$parse_tokens_error2_1_str_2_1 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_error2_1_5);
    }
}

class PRED_$parse_tokens_error2_1_str_3 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$parse_tokens_error2_1_4, _$parse_tokens_error2_1_str_3_1);
    }
}

class PRED_$parse_tokens_error2_1_str_3_1 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_error2_1_5);
    }
}

class PRED_$parse_tokens_error2_1_1 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_error2'(number(A)):-!, write(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$parse_tokens_error2'(number(A)):-['$neck_cut', write(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_write_1(a2, cont));
    }
}

class PRED_$parse_tokens_error2_1_2 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_error2'(atom(A)):-!, writeq(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$parse_tokens_error2'(atom(A)):-['$neck_cut', writeq(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s2,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s2, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_writeq_1(a2, cont));
    }
}

class PRED_$parse_tokens_error2_1_3 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_error2'(var(A, B)):-!, write(A)
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$parse_tokens_error2'(var(A, B)):-['$neck_cut', write(A)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s3,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2, engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s3, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine, new PRED_write_1(a2, cont));
    }
}

class PRED_$parse_tokens_error2_1_4 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_error2'(string(A)):-!, write('"'), '$parse_tokens_write_string'(A), write('"')
        Object a1, a2;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$parse_tokens_error2'(string(A)):-['$neck_cut', write('"'), '$parse_tokens_write_string'(A), write('"')]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s4,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_write_1(s5, cont);
        p2 = new PRED_$parse_tokens_write_string_1(a2, p1);
        return exit(engine, new PRED_write_1(s5, p2));
    }
}

class PRED_$parse_tokens_error2_1_5 extends PRED_$parse_tokens_error2_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_error2'(A):-write(A)
        Object a1;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$parse_tokens_error2'(A):-[write(A)]
        return exit(engine, new PRED_write_1(a1, cont));
    }
}
