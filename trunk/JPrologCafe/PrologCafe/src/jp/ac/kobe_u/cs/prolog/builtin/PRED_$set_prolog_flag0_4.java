package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$set_prolog_flag0'/4</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$set_prolog_flag0_4 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("no");
    static /*Symbol*/Object s2 = makeAtom("permission", 4);
    static /*Symbol*/Object s3 = makeAtom("modify");
    static /*Symbol*/Object s4 = makeAtom("flag");
    static /*Symbol*/Object s5 = makeAtom("set_prolog_flag", 2);
    static /*Symbol*/Object s6 = makeAtom("domain", 2);
    static /*Symbol*/Object s7 = makeAtom("atom");
    static /*Symbol*/Object s8 = makeAtom("flag_value");
    static Object[] s9 = {s7, s8};
    static /*Structure*/Object s10 = makeStructure(s6, s9);
    static /*IntegerTerm*/Object si11 = makeInteger(2);
    static Predicate _$set_prolog_flag0_4_var = new PRED_$set_prolog_flag0_4_var();
    static Predicate _$set_prolog_flag0_4_var_1 = new PRED_$set_prolog_flag0_4_var_1();
    static Predicate _$set_prolog_flag0_4_var_2 = new PRED_$set_prolog_flag0_4_var_2();
    static Predicate _$set_prolog_flag0_4_int = new PRED_$set_prolog_flag0_4_int();
    static Predicate _$set_prolog_flag0_4_int_1 = new PRED_$set_prolog_flag0_4_int_1();
    static Predicate _$set_prolog_flag0_4_1 = new PRED_$set_prolog_flag0_4_1();
    static Predicate _$set_prolog_flag0_4_2 = new PRED_$set_prolog_flag0_4_2();
    static Predicate _$set_prolog_flag0_4_3 = new PRED_$set_prolog_flag0_4_3();

    public Object arg1, arg2, arg3, arg4;

    public PRED_$set_prolog_flag0_4(Object a1, Object a2, Object a3, Object a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$set_prolog_flag0_4(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String nameUQ() { return "$set_prolog_flag0"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$set_prolog_flag0'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$set_prolog_flag0_4_var, _$set_prolog_flag0_4_int, _$set_prolog_flag0_4_int, _$set_prolog_flag0_4_var, _$set_prolog_flag0_4_int, _$set_prolog_flag0_4_int);
    }
}

class PRED_$set_prolog_flag0_4_var extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$set_prolog_flag0_4_1, _$set_prolog_flag0_4_var_1);
    }
}

class PRED_$set_prolog_flag0_4_var_1 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$set_prolog_flag0_4_2, _$set_prolog_flag0_4_var_2);
    }
}

class PRED_$set_prolog_flag0_4_var_2 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$set_prolog_flag0_4_3);
    }
}

class PRED_$set_prolog_flag0_4_int extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$set_prolog_flag0_4_2, _$set_prolog_flag0_4_int_1);
    }
}

class PRED_$set_prolog_flag0_4_int_1 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$set_prolog_flag0_4_3);
    }
}

class PRED_$set_prolog_flag0_4_1 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$set_prolog_flag0'(no, A, B, C):-!, illarg(permission(modify, flag, A, D), set_prolog_flag(A, B), E)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$set_prolog_flag0'(no, A, B, C):-['$neck_cut', illarg(permission(modify, flag, A, D), set_prolog_flag(A, B), E)]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        Object[] y1 = {s3, s4, a2, engine.makeVariable(this)};
        a5 = makeStructure(s2, y1);
        Object[] y2 = {a2, a3};
        a6 = makeStructure(s5, y2);
        return exit(engine, new PRED_illarg_3(a5, a6, engine.makeVariable(this), cont));
    }
}

class PRED_$set_prolog_flag0_4_2 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$set_prolog_flag0'(A, B, C, D):-'$builtin_member'(C, D), !, '$set_prolog_impl_flag'(B, C)
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$set_prolog_flag0'(A, B, C, D):-['$get_level'(E), '$builtin_member'(C, D), '$cut'(E), '$set_prolog_impl_flag'(B, C)]
        a5 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(5))
        if (! unify(a5,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        p1 = new PRED_$set_prolog_impl_flag_2(a2, a3, cont);
        p2 = new PRED_$cut_1(a5, p1);
        return exit(engine, new PRED_$builtin_member_2(a3, a4, p2));
    }
}

class PRED_$set_prolog_flag0_4_3 extends PRED_$set_prolog_flag0_4 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$set_prolog_flag0'(A, B, C, D):-illarg(domain(atom, flag_value), set_prolog_flag(B, C), 2)
        Object a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        cont = engine.cont;
    // '$set_prolog_flag0'(A, B, C, D):-[illarg(domain(atom, flag_value), set_prolog_flag(B, C), 2)]
        Object[] y1 = {a2, a3};
        a5 = makeStructure(s5, y1);
        return exit(engine, new PRED_illarg_3(s10, a5, si11, cont));
    }
}
