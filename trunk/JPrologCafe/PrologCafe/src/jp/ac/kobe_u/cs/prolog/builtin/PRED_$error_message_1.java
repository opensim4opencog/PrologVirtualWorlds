package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$error_message'/1</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$error_message_1 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("instantiation_error", 2);
    static /*IntegerTerm*/Object si2 = makeInteger(0);
    static /*Symbol*/Object s3 = makeAtom("{INSTANTIATION ERROR: ");
    static /*Symbol*/Object s4 = makeAtom("}");
    static /*Symbol*/Object s5 = makeAtom(" - arg ");
    static /*Symbol*/Object s6 = makeAtom("type_error", 4);
    static /*Symbol*/Object s7 = makeAtom("{TYPE ERROR: ");
    static /*Symbol*/Object s8 = makeAtom(": expected ");
    static /*Symbol*/Object s9 = makeAtom(", found ");
    static /*Symbol*/Object s10 = makeAtom("domain_error", 4);
    static /*Symbol*/Object s11 = makeAtom("{DOMAIN ERROR: ");
    static /*Symbol*/Object s12 = makeAtom("existence_error", 5);
    static /*Symbol*/Object s13 = makeAtom("{EXISTENCE ERROR: ");
    static /*Symbol*/Object s14 = makeAtom(" ");
    static /*Symbol*/Object s15 = makeAtom(" does not exist");
    static /*Symbol*/Object s16 = makeAtom(": ");
    static /*Symbol*/Object s17 = makeAtom("permission_error", 5);
    static /*Symbol*/Object s18 = makeAtom("{PERMISSION ERROR: ");
    static /*Symbol*/Object s19 = makeAtom(" - can not ");
    static /*Symbol*/Object s20 = makeAtom("representation_error", 3);
    static /*Symbol*/Object s21 = makeAtom("{REPRESENTATION ERROR: ");
    static /*Symbol*/Object s22 = makeAtom(": limit of ");
    static /*Symbol*/Object s23 = makeAtom(" is breached");
    static /*Symbol*/Object s24 = makeAtom("evaluation_error", 3);
    static /*Symbol*/Object s25 = makeAtom("{EVALUATION ERROR: ");
    static /*Symbol*/Object s26 = makeAtom("syntax_error", 5);
    static /*Symbol*/Object s27 = makeAtom("{SYNTAX ERROR: ");
    static /*Symbol*/Object s28 = makeAtom("system_error", 1);
    static /*Symbol*/Object s29 = makeAtom("{SYSTEM ERROR: ");
    static /*Symbol*/Object s30 = makeAtom("internal_error", 1);
    static /*Symbol*/Object s31 = makeAtom("{INTERNAL ERROR: ");
    static /*Symbol*/Object s32 = makeAtom("java_error", 3);
    static /*Symbol*/Object s33 = makeAtom("{JAVA ERROR: ");
    static /*Symbol*/Object s34 = makeAtom("{");
    static Predicate _$error_message_1_var = new PRED_$error_message_1_var();
    static Predicate _$error_message_1_var_1 = new PRED_$error_message_1_var_1();
    static Predicate _$error_message_1_var_2 = new PRED_$error_message_1_var_2();
    static Predicate _$error_message_1_var_3 = new PRED_$error_message_1_var_3();
    static Predicate _$error_message_1_var_4 = new PRED_$error_message_1_var_4();
    static Predicate _$error_message_1_var_5 = new PRED_$error_message_1_var_5();
    static Predicate _$error_message_1_var_6 = new PRED_$error_message_1_var_6();
    static Predicate _$error_message_1_var_7 = new PRED_$error_message_1_var_7();
    static Predicate _$error_message_1_var_8 = new PRED_$error_message_1_var_8();
    static Predicate _$error_message_1_var_9 = new PRED_$error_message_1_var_9();
    static Predicate _$error_message_1_var_10 = new PRED_$error_message_1_var_10();
    static Predicate _$error_message_1_var_11 = new PRED_$error_message_1_var_11();
    static Predicate _$error_message_1_var_12 = new PRED_$error_message_1_var_12();
    static Predicate _$error_message_1_var_13 = new PRED_$error_message_1_var_13();
    static Predicate _$error_message_1_str = new PRED_$error_message_1_str();
    static Predicate _$error_message_1_str_0 = new PRED_$error_message_1_str_0();
    static Predicate _$error_message_1_str_0_1 = new PRED_$error_message_1_str_0_1();
    static Predicate _$error_message_1_str_0_2 = new PRED_$error_message_1_str_0_2();
    static Predicate _$error_message_1_str_1 = new PRED_$error_message_1_str_1();
    static Predicate _$error_message_1_str_1_1 = new PRED_$error_message_1_str_1_1();
    static Predicate _$error_message_1_str_2 = new PRED_$error_message_1_str_2();
    static Predicate _$error_message_1_str_2_1 = new PRED_$error_message_1_str_2_1();
    static Predicate _$error_message_1_str_3 = new PRED_$error_message_1_str_3();
    static Predicate _$error_message_1_str_3_1 = new PRED_$error_message_1_str_3_1();
    static Predicate _$error_message_1_str_3_2 = new PRED_$error_message_1_str_3_2();
    static Predicate _$error_message_1_str_4 = new PRED_$error_message_1_str_4();
    static Predicate _$error_message_1_str_4_1 = new PRED_$error_message_1_str_4_1();
    static Predicate _$error_message_1_str_5 = new PRED_$error_message_1_str_5();
    static Predicate _$error_message_1_str_5_1 = new PRED_$error_message_1_str_5_1();
    static Predicate _$error_message_1_str_6 = new PRED_$error_message_1_str_6();
    static Predicate _$error_message_1_str_6_1 = new PRED_$error_message_1_str_6_1();
    static Predicate _$error_message_1_str_7 = new PRED_$error_message_1_str_7();
    static Predicate _$error_message_1_str_7_1 = new PRED_$error_message_1_str_7_1();
    static Predicate _$error_message_1_str_8 = new PRED_$error_message_1_str_8();
    static Predicate _$error_message_1_str_8_1 = new PRED_$error_message_1_str_8_1();
    static Predicate _$error_message_1_str_9 = new PRED_$error_message_1_str_9();
    static Predicate _$error_message_1_str_9_1 = new PRED_$error_message_1_str_9_1();
    static Predicate _$error_message_1_str_10 = new PRED_$error_message_1_str_10();
    static Predicate _$error_message_1_str_10_1 = new PRED_$error_message_1_str_10_1();
    static Predicate _$error_message_1_1 = new PRED_$error_message_1_1();
    static Predicate _$error_message_1_2 = new PRED_$error_message_1_2();
    static Predicate _$error_message_1_3 = new PRED_$error_message_1_3();
    static Predicate _$error_message_1_4 = new PRED_$error_message_1_4();
    static Predicate _$error_message_1_5 = new PRED_$error_message_1_5();
    static Predicate _$error_message_1_6 = new PRED_$error_message_1_6();
    static Predicate _$error_message_1_7 = new PRED_$error_message_1_7();
    static Predicate _$error_message_1_8 = new PRED_$error_message_1_8();
    static Predicate _$error_message_1_9 = new PRED_$error_message_1_9();
    static Predicate _$error_message_1_10 = new PRED_$error_message_1_10();
    static Predicate _$error_message_1_11 = new PRED_$error_message_1_11();
    static Predicate _$error_message_1_12 = new PRED_$error_message_1_12();
    static Predicate _$error_message_1_13 = new PRED_$error_message_1_13();
    static Predicate _$error_message_1_14 = new PRED_$error_message_1_14();
    static HashtableOfTerm<Predicate> str = new HashtableOfTerm<Predicate>(11);
    static {
        str.put(s1, _$error_message_1_str_0);
        str.put(s6, _$error_message_1_str_1);
        str.put(s10, _$error_message_1_str_2);
        str.put(s12, _$error_message_1_str_3);
        str.put(s17, _$error_message_1_str_4);
        str.put(s20, _$error_message_1_str_5);
        str.put(s24, _$error_message_1_str_6);
        str.put(s26, _$error_message_1_str_7);
        str.put(s28, _$error_message_1_str_8);
        str.put(s30, _$error_message_1_str_9);
        str.put(s32, _$error_message_1_str_10);
    }

    public Object arg1;

    public PRED_$error_message_1(Object a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_$error_message_1(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String nameUQ() { return "$error_message"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$error_message'(" + argString(arg1,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$error_message_1_var, _$error_message_1_14, _$error_message_1_14, _$error_message_1_14, _$error_message_1_str, _$error_message_1_14);
    }
}

class PRED_$error_message_1_var extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_1, _$error_message_1_var_1);
    }
}

class PRED_$error_message_1_var_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_2, _$error_message_1_var_2);
    }
}

class PRED_$error_message_1_var_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_3, _$error_message_1_var_3);
    }
}

class PRED_$error_message_1_var_3 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_4, _$error_message_1_var_4);
    }
}

class PRED_$error_message_1_var_4 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_5, _$error_message_1_var_5);
    }
}

class PRED_$error_message_1_var_5 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_6, _$error_message_1_var_6);
    }
}

class PRED_$error_message_1_var_6 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_7, _$error_message_1_var_7);
    }
}

class PRED_$error_message_1_var_7 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_8, _$error_message_1_var_8);
    }
}

class PRED_$error_message_1_var_8 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_9, _$error_message_1_var_9);
    }
}

class PRED_$error_message_1_var_9 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_10, _$error_message_1_var_10);
    }
}

class PRED_$error_message_1_var_10 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_11, _$error_message_1_var_11);
    }
}

class PRED_$error_message_1_var_11 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_12, _$error_message_1_var_12);
    }
}

class PRED_$error_message_1_var_12 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_13, _$error_message_1_var_13);
    }
}

class PRED_$error_message_1_var_13 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(str, _$error_message_1_14);
    }
}

class PRED_$error_message_1_str_0 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_1, _$error_message_1_str_0_1);
    }
}

class PRED_$error_message_1_str_0_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_2, _$error_message_1_str_0_2);
    }
}

class PRED_$error_message_1_str_0_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_3, _$error_message_1_str_1_1);
    }
}

class PRED_$error_message_1_str_1_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_4, _$error_message_1_str_2_1);
    }
}

class PRED_$error_message_1_str_2_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_3 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_5, _$error_message_1_str_3_1);
    }
}

class PRED_$error_message_1_str_3_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$error_message_1_6, _$error_message_1_str_3_2);
    }
}

class PRED_$error_message_1_str_3_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_4 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_7, _$error_message_1_str_4_1);
    }
}

class PRED_$error_message_1_str_4_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_5 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_8, _$error_message_1_str_5_1);
    }
}

class PRED_$error_message_1_str_5_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_6 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_9, _$error_message_1_str_6_1);
    }
}

class PRED_$error_message_1_str_6_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_7 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_10, _$error_message_1_str_7_1);
    }
}

class PRED_$error_message_1_str_7_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_8 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_11, _$error_message_1_str_8_1);
    }
}

class PRED_$error_message_1_str_8_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_9 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_12, _$error_message_1_str_9_1);
    }
}

class PRED_$error_message_1_str_9_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_str_10 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$error_message_1_13, _$error_message_1_str_10_1);
    }
}

class PRED_$error_message_1_str_10_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$error_message_1_14);
    }
}

class PRED_$error_message_1_1 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(instantiation_error(A, 0)):-!, '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'('}'), nl
        Object a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(instantiation_error(A, 0)):-['$neck_cut', '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            if (!unify( si2,args[1]))
                return fail(engine);
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2, si2};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$write_goal_1(a2, p2);
        return exit(engine, new PRED_$fast_write_1(s3, p3));
    }
}

class PRED_$error_message_1_2 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(instantiation_error(A, B)):-!, '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'('}'), nl
        Object a1, a2, a3;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(instantiation_error(A, B)):-['$neck_cut', '$fast_write'('{INSTANTIATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s1,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            Object[] args = {a2, a3};
            bind(/*VAR*/ a1,makeStructure(s1, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(a3, p2);
        p4 = new PRED_$fast_write_1(s5, p3);
        p5 = new PRED_$write_goal_1(a2, p4);
        return exit(engine, new PRED_$fast_write_1(s3, p5));
    }
}

class PRED_$error_message_1_3 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(type_error(A, B, C, D)):-!, '$fast_write'('{TYPE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(type_error(A, B, C, D)):-['$neck_cut', '$fast_write'('{TYPE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s6,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4, a5};
            bind(/*VAR*/ a1,makeStructure(s6, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a5, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a4, p4);
        p6 = new PRED_$fast_write_1(s8, p5);
        p7 = new PRED_$fast_write_1(a3, p6);
        p8 = new PRED_$fast_write_1(s5, p7);
        p9 = new PRED_$write_goal_1(a2, p8);
        return exit(engine, new PRED_$fast_write_1(s7, p9));
    }
}

class PRED_$error_message_1_4 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(domain_error(A, B, C, D)):-!, '$fast_write'('{DOMAIN ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(domain_error(A, B, C, D)):-['$neck_cut', '$fast_write'('{DOMAIN ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s10,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4, a5};
            bind(/*VAR*/ a1,makeStructure(s10, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a5, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a4, p4);
        p6 = new PRED_$fast_write_1(s8, p5);
        p7 = new PRED_$fast_write_1(a3, p6);
        p8 = new PRED_$fast_write_1(s5, p7);
        p9 = new PRED_$write_goal_1(a2, p8);
        return exit(engine, new PRED_$fast_write_1(s11, p9));
    }
}

class PRED_$error_message_1_5 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(existence_error(A, 0, B, C, D)):-!, '$fast_write'('{EXISTENCE ERROR: '), '$fast_write'(B), '$fast_write'(' '), write(C), '$fast_write'(' does not exist'), '$fast_write'('}'), nl
        Object a1, a2, a3;
        Predicate p1, p2, p3, p4, p5, p6;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(existence_error(A, 0, B, C, D)):-['$neck_cut', '$fast_write'('{EXISTENCE ERROR: '), '$fast_write'(B), '$fast_write'(' '), write(C), '$fast_write'(' does not exist'), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s12,a1))
                return fail(engine);
            Object[] args = args(a1);
            if (!unify( si2,args[1]))
                return fail(engine);
            a2 = args[2];
            a3 = args[3];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            Object[] args = {engine.makeVariable(this), si2, a2, a3, engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s12, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(s15, p2);
        p4 = new PRED_write_1(a3, p3);
        p5 = new PRED_$fast_write_1(s14, p4);
        p6 = new PRED_$fast_write_1(a2, p5);
        return exit(engine, new PRED_$fast_write_1(s13, p6));
    }
}

class PRED_$error_message_1_6 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(existence_error(A, B, C, D, E)):-!, '$fast_write'('{EXISTENCE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(' does not exist'), '$fast_write'('}'), nl
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(existence_error(A, B, C, D, E)):-['$neck_cut', '$fast_write'('{EXISTENCE ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(' does not exist'), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s12,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4, a5, engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s12, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(s15, p2);
        p4 = new PRED_write_1(a5, p3);
        p5 = new PRED_$fast_write_1(s14, p4);
        p6 = new PRED_$fast_write_1(a4, p5);
        p7 = new PRED_$fast_write_1(s16, p6);
        p8 = new PRED_$fast_write_1(a3, p7);
        p9 = new PRED_$fast_write_1(s5, p8);
        p10 = new PRED_$write_goal_1(a2, p9);
        return exit(engine, new PRED_$fast_write_1(s13, p10));
    }
}

class PRED_$error_message_1_7 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(permission_error(A, B, C, D, E)):-!, '$fast_write'('{PERMISSION ERROR: '), '$write_goal'(A), '$fast_write'(' - can not '), '$fast_write'(B), '$fast_write'(' '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(': '), '$fast_write'(E), '$fast_write'('}'), nl
        Object a1, a2, a3, a4, a5, a6;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(permission_error(A, B, C, D, E)):-['$neck_cut', '$fast_write'('{PERMISSION ERROR: '), '$write_goal'(A), '$fast_write'(' - can not '), '$fast_write'(B), '$fast_write'(' '), '$fast_write'(C), '$fast_write'(' '), write(D), '$fast_write'(': '), '$fast_write'(E), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s17,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
            a6 = args[4];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            a6 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4, a5, a6};
            bind(/*VAR*/ a1,makeStructure(s17, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(a6, p2);
        p4 = new PRED_$fast_write_1(s16, p3);
        p5 = new PRED_write_1(a5, p4);
        p6 = new PRED_$fast_write_1(s14, p5);
        p7 = new PRED_$fast_write_1(a4, p6);
        p8 = new PRED_$fast_write_1(s14, p7);
        p9 = new PRED_$fast_write_1(a3, p8);
        p10 = new PRED_$fast_write_1(s19, p9);
        p11 = new PRED_$write_goal_1(a2, p10);
        return exit(engine, new PRED_$fast_write_1(s18, p11));
    }
}

class PRED_$error_message_1_8 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(representation_error(A, B, C)):-!, '$fast_write'('{REPRESENTATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': limit of '), '$fast_write'(C), '$fast_write'(' is breached'), '$fast_write'('}'), nl
        Object a1, a2, a3, a4;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(representation_error(A, B, C)):-['$neck_cut', '$fast_write'('{REPRESENTATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': limit of '), '$fast_write'(C), '$fast_write'(' is breached'), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s20,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4};
            bind(/*VAR*/ a1,makeStructure(s20, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(s23, p2);
        p4 = new PRED_$fast_write_1(a4, p3);
        p5 = new PRED_$fast_write_1(s22, p4);
        p6 = new PRED_$fast_write_1(a3, p5);
        p7 = new PRED_$fast_write_1(s5, p6);
        p8 = new PRED_$write_goal_1(a2, p7);
        return exit(engine, new PRED_$fast_write_1(s21, p8));
    }
}

class PRED_$error_message_1_9 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(evaluation_error(A, B, C)):-!, '$fast_write'('{EVALUATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$fast_write'(C), '$fast_write'('}'), nl
        Object a1, a2, a3, a4;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(evaluation_error(A, B, C)):-['$neck_cut', '$fast_write'('{EVALUATION ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$fast_write'(C), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s24,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4};
            bind(/*VAR*/ a1,makeStructure(s24, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_$fast_write_1(a4, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a3, p4);
        p6 = new PRED_$fast_write_1(s5, p5);
        p7 = new PRED_$write_goal_1(a2, p6);
        return exit(engine, new PRED_$fast_write_1(s25, p7));
    }
}

class PRED_$error_message_1_10 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(syntax_error(A, B, C, D, E)):-!, '$fast_write'('{SYNTAX ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl
        Object a1, a2, a3, a4, a5;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(syntax_error(A, B, C, D, E)):-['$neck_cut', '$fast_write'('{SYNTAX ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(': expected '), '$fast_write'(C), '$fast_write'(', found '), write(D), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s26,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
            a5 = args[3];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            a5 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4, a5, engine.makeVariable(this)};
            bind(/*VAR*/ a1,makeStructure(s26, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a5, p2);
        p4 = new PRED_$fast_write_1(s9, p3);
        p5 = new PRED_$fast_write_1(a4, p4);
        p6 = new PRED_$fast_write_1(s8, p5);
        p7 = new PRED_$fast_write_1(a3, p6);
        p8 = new PRED_$fast_write_1(s5, p7);
        p9 = new PRED_$write_goal_1(a2, p8);
        return exit(engine, new PRED_$fast_write_1(s27, p9));
    }
}

class PRED_$error_message_1_11 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(system_error(A)):-!, '$fast_write'('{SYSTEM ERROR: '), write(A), '$fast_write'('}'), nl
        Object a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(system_error(A)):-['$neck_cut', '$fast_write'('{SYSTEM ERROR: '), write(A), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s28,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s28, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a2, p2);
        return exit(engine, new PRED_$fast_write_1(s29, p3));
    }
}

class PRED_$error_message_1_12 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(internal_error(A)):-!, '$fast_write'('{INTERNAL ERROR: '), write(A), '$fast_write'('}'), nl
        Object a1, a2;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(internal_error(A)):-['$neck_cut', '$fast_write'('{INTERNAL ERROR: '), write(A), '$fast_write'('}'), nl]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s30,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            Object[] args = {a2};
            bind(/*VAR*/ a1,makeStructure(s30, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a2, p2);
        return exit(engine, new PRED_$fast_write_1(s31, p3));
    }
}

class PRED_$error_message_1_13 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(java_error(A, B, C)):-!, '$fast_write'('{JAVA ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$write_goal'(C), '$fast_write'('}'), nl, '$print_stack_trace'(C)
        Object a1, a2, a3, a4;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(java_error(A, B, C)):-['$neck_cut', '$fast_write'('{JAVA ERROR: '), '$write_goal'(A), '$fast_write'(' - arg '), '$fast_write'(B), '$fast_write'(', found '), '$write_goal'(C), '$fast_write'('}'), nl, '$print_stack_trace'(C)]
        a1 = deref( a1);
        if (isCompound(a1)){
            if (!functorOf( s32,a1))
                return fail(engine);
            Object[] args = args(a1);
            a2 = args[0];
            a3 = args[1];
            a4 = args[2];
        } else if (isVariable(a1)){
            a2 = engine.makeVariable(this);
            a3 = engine.makeVariable(this);
            a4 = engine.makeVariable(this);
            Object[] args = {a2, a3, a4};
            bind(/*VAR*/ a1,makeStructure(s32, args));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        p1 = new PRED_$print_stack_trace_1(a4, cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_$fast_write_1(s4, p2);
        p4 = new PRED_$write_goal_1(a4, p3);
        p5 = new PRED_$fast_write_1(s9, p4);
        p6 = new PRED_$fast_write_1(a3, p5);
        p7 = new PRED_$fast_write_1(s5, p6);
        p8 = new PRED_$write_goal_1(a2, p7);
        return exit(engine, new PRED_$fast_write_1(s33, p8));
    }
}

class PRED_$error_message_1_14 extends PRED_$error_message_1 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$error_message'(A):-'$fast_write'('{'), write(A), '$fast_write'('}'), nl
        Object a1;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        cont = engine.cont;
    // '$error_message'(A):-['$fast_write'('{'), write(A), '$fast_write'('}'), nl]
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_$fast_write_1(s4, p1);
        p3 = new PRED_write_1(a1, p2);
        return exit(engine, new PRED_$fast_write_1(s34, p3));
    }
}
