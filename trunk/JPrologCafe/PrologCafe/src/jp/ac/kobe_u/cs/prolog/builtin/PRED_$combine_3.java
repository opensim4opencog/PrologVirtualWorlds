package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$combine'/3</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$combine_3 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom("<");
    static /*Symbol*/Object s2 = makeAtom("=<");
    static /*Symbol*/Object s3 = makeAtom(">");
    static /*Symbol*/Object s4 = makeAtom(">=");
    static /*Symbol*/Object s5 = makeAtom("=");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _$combine_3_var = new PRED_$combine_3_var();
    static Predicate _$combine_3_var_1 = new PRED_$combine_3_var_1();
    static Predicate _$combine_3_var_2 = new PRED_$combine_3_var_2();
    static Predicate _$combine_3_var_3 = new PRED_$combine_3_var_3();
    static Predicate _$combine_3_var_4 = new PRED_$combine_3_var_4();
    static Predicate _$combine_3_var_5 = new PRED_$combine_3_var_5();
    static Predicate _$combine_3_var_6 = new PRED_$combine_3_var_6();
    static Predicate _$combine_3_var_7 = new PRED_$combine_3_var_7();
    static Predicate _$combine_3_con = new PRED_$combine_3_con();
    static Predicate _$combine_3_con_0 = new PRED_$combine_3_con_0();
    static Predicate _$combine_3_con_0_1 = new PRED_$combine_3_con_0_1();
    static Predicate _$combine_3_con_1 = new PRED_$combine_3_con_1();
    static Predicate _$combine_3_con_1_1 = new PRED_$combine_3_con_1_1();
    static Predicate _$combine_3_con_2 = new PRED_$combine_3_con_2();
    static Predicate _$combine_3_con_2_1 = new PRED_$combine_3_con_2_1();
    static Predicate _$combine_3_con_2_2 = new PRED_$combine_3_con_2_2();
    static Predicate _$combine_3_1 = new PRED_$combine_3_1();
    static Predicate _$combine_3_2 = new PRED_$combine_3_2();
    static Predicate _$combine_3_3 = new PRED_$combine_3_3();
    static Predicate _$combine_3_4 = new PRED_$combine_3_4();
    static Predicate _$combine_3_5 = new PRED_$combine_3_5();
    static Predicate _$combine_3_6 = new PRED_$combine_3_6();
    static Predicate _$combine_3_7 = new PRED_$combine_3_7();
    static Predicate _$combine_3_8 = new PRED_$combine_3_8();
    static HashtableOfTerm<Predicate> con = new HashtableOfTerm<Predicate>(4);
    static {
        con.put(s1, _$combine_3_1);
        con.put(s2, _$combine_3_con_0);
        con.put(s4, _$combine_3_con_1);
        con.put(s3, _$combine_3_con_2);
    }

    public Object arg1, arg2, arg3;

    public PRED_$combine_3(Object a1, Object a2, Object a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$combine_3(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String nameUQ() { return "$combine"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$combine'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_$combine_3_var, _fail_0, _fail_0, _$combine_3_con, _fail_0, _fail_0);
    }
}

class PRED_$combine_3_var extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$combine_3_1, _$combine_3_var_1);
    }
}

class PRED_$combine_3_var_1 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$combine_3_2, _$combine_3_var_2);
    }
}

class PRED_$combine_3_var_2 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$combine_3_3, _$combine_3_var_3);
    }
}

class PRED_$combine_3_var_3 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$combine_3_4, _$combine_3_var_4);
    }
}

class PRED_$combine_3_var_4 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$combine_3_5, _$combine_3_var_5);
    }
}

class PRED_$combine_3_var_5 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$combine_3_6, _$combine_3_var_6);
    }
}

class PRED_$combine_3_var_6 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$combine_3_7, _$combine_3_var_7);
    }
}

class PRED_$combine_3_var_7 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$combine_3_8);
    }
}

class PRED_$combine_3_con extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_$combine_3_con_0 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$combine_3_2, _$combine_3_con_0_1);
    }
}

class PRED_$combine_3_con_0_1 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$combine_3_3);
    }
}

class PRED_$combine_3_con_1 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$combine_3_4, _$combine_3_con_1_1);
    }
}

class PRED_$combine_3_con_1_1 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$combine_3_5);
    }
}

class PRED_$combine_3_con_2 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.jtry(_$combine_3_6, _$combine_3_con_2_1);
    }
}

class PRED_$combine_3_con_2_1 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$combine_3_7, _$combine_3_con_2_2);
    }
}

class PRED_$combine_3_con_2_2 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$combine_3_8);
    }
}

class PRED_$combine_3_1 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(<, A, A):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(<, A, A):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s1))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s1);
        } else {
            return fail(engine);
        }
        if (! unify(a2,a3))
            return fail(engine);
        return exit(engine,cont);
    }
}

class PRED_$combine_3_2 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(=<, >, >):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(=<, >, >):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s2))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s2);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s3))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s3);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s3))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s3);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$combine_3_3 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(=<, A, <):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(=<, A, <):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s2))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s2);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s1))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s1);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$combine_3_4 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(>=, <, >):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(>=, <, >):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s4))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s4);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s1))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s1);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s3))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s3);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$combine_3_5 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(>=, A, <):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(>=, A, <):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s4))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s4);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s1))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s1);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}

class PRED_$combine_3_6 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(>, <, >):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(>, <, >):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s3))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s3);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s1))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s1);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s3))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s3);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$combine_3_7 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(>, >, <):-!
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(>, >, <):-['$neck_cut']
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s3))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s3);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s3))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s3);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s1))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s1);
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$combine_3_8 extends PRED_$combine_3 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$combine'(>, =, =):-true
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        cont = engine.cont;
    // '$combine'(>, =, =):-[]
        a1 = deref( a1);
        if (isAtomTerm(a1)){
            if (! prologEquals(a1,s3))
                return fail(engine);
        } else if (isVariable(a1)){
             bind(/*VAR*/ a1,s3);
        } else {
            return fail(engine);
        }
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s5))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s5);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isAtomTerm(a3)){
            if (! prologEquals(a3,s5))
                return fail(engine);
        } else if (isVariable(a3)){
             bind(/*VAR*/ a3,s5);
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}
