package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$parse_tokens_before_op'/5</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$parse_tokens_before_op_5 extends PredicateBase {
    static /*Symbol*/Object s1 = makeAtom(" ");
    static /*Symbol*/Object s2 = makeAtom("end_of_file");
    static /*IntegerTerm*/Object si3 = makeInteger(0);
    static /*Symbol*/Object s4 = makeAtom("number", 1);
    static /*Symbol*/Object s5 = makeAtom("atom", 1);
    static /*Symbol*/Object s6 = makeAtom("-");
    static Object[] s7 = {s6};
    static /*Structure*/Object s8 = makeStructure(s5, s7);
    static /*IntegerTerm*/Object si9 = makeInteger(-1);
    static /*Symbol*/Object s10 = makeAtom("var", 2);
    static /*Symbol*/Object s11 = makeAtom("string", 1);
    static /*Symbol*/Object s12 = makeAtom("(");
    static /*IntegerTerm*/Object si13 = makeInteger(1201);
    static /*Symbol*/Object s14 = makeAtom(")");
    static /*Symbol*/Object s15 = makeAtom("{");
    static /*Symbol*/Object s16 = makeAtom("[");
    static /*Symbol*/Object s17 = makeAtom("fx");
    static /*IntegerTerm*/Object si18 = makeInteger(1);
    static /*Symbol*/Object s19 = makeAtom("fy");
    static Predicate _$parse_tokens_before_op_5_top = new PRED_$parse_tokens_before_op_5_top();
    static Predicate _$parse_tokens_before_op_5_sub_1 = new PRED_$parse_tokens_before_op_5_sub_1();
    static Predicate _$parse_tokens_before_op_5_sub_2 = new PRED_$parse_tokens_before_op_5_sub_2();
    static Predicate _$parse_tokens_before_op_5_sub_3 = new PRED_$parse_tokens_before_op_5_sub_3();
    static Predicate _$parse_tokens_before_op_5_sub_4 = new PRED_$parse_tokens_before_op_5_sub_4();
    static Predicate _$parse_tokens_before_op_5_sub_5 = new PRED_$parse_tokens_before_op_5_sub_5();
    static Predicate _$parse_tokens_before_op_5_sub_6 = new PRED_$parse_tokens_before_op_5_sub_6();
    static Predicate _$parse_tokens_before_op_5_sub_7 = new PRED_$parse_tokens_before_op_5_sub_7();
    static Predicate _$parse_tokens_before_op_5_sub_8 = new PRED_$parse_tokens_before_op_5_sub_8();
    static Predicate _$parse_tokens_before_op_5_sub_9 = new PRED_$parse_tokens_before_op_5_sub_9();
    static Predicate _$parse_tokens_before_op_5_sub_10 = new PRED_$parse_tokens_before_op_5_sub_10();
    static Predicate _$parse_tokens_before_op_5_sub_11 = new PRED_$parse_tokens_before_op_5_sub_11();
    static Predicate _$parse_tokens_before_op_5_sub_12 = new PRED_$parse_tokens_before_op_5_sub_12();
    static Predicate _$parse_tokens_before_op_5_1 = new PRED_$parse_tokens_before_op_5_1();
    static Predicate _$parse_tokens_before_op_5_2 = new PRED_$parse_tokens_before_op_5_2();
    static Predicate _$parse_tokens_before_op_5_3 = new PRED_$parse_tokens_before_op_5_3();
    static Predicate _$parse_tokens_before_op_5_4 = new PRED_$parse_tokens_before_op_5_4();
    static Predicate _$parse_tokens_before_op_5_5 = new PRED_$parse_tokens_before_op_5_5();
    static Predicate _$parse_tokens_before_op_5_6 = new PRED_$parse_tokens_before_op_5_6();
    static Predicate _$parse_tokens_before_op_5_7 = new PRED_$parse_tokens_before_op_5_7();
    static Predicate _$parse_tokens_before_op_5_8 = new PRED_$parse_tokens_before_op_5_8();
    static Predicate _$parse_tokens_before_op_5_9 = new PRED_$parse_tokens_before_op_5_9();
    static Predicate _$parse_tokens_before_op_5_10 = new PRED_$parse_tokens_before_op_5_10();
    static Predicate _$parse_tokens_before_op_5_11 = new PRED_$parse_tokens_before_op_5_11();
    static Predicate _$parse_tokens_before_op_5_12 = new PRED_$parse_tokens_before_op_5_12();
    static Predicate _$parse_tokens_before_op_5_13 = new PRED_$parse_tokens_before_op_5_13();

    public Object arg1, arg2, arg3, arg4, arg5;

    public PRED_$parse_tokens_before_op_5(Object a1, Object a2, Object a3, Object a4, Object a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$parse_tokens_before_op_5(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String nameUQ() { return "$parse_tokens_before_op"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
         case 2: arg3 = val;break ;
         case 3: arg4 = val;break ;
         case 4: arg5 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
         case 2: return arg3;
         case 3: return arg4;
         case 4: return arg5;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$parse_tokens_before_op'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + "," + argString(arg3,newParam) + "," + argString(arg4,newParam) + "," + argString(arg5,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine_aregs[3] = arg3;
        engine_aregs[4] = arg4;
        engine_aregs[5] = arg5;
        engine.cont = cont;
        return exit(engine, _$parse_tokens_before_op_5_top);
    }
}

class PRED_$parse_tokens_before_op_5_top extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.jtry(_$parse_tokens_before_op_5_1, _$parse_tokens_before_op_5_sub_1);
    }
}

class PRED_$parse_tokens_before_op_5_sub_1 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_2, _$parse_tokens_before_op_5_sub_2);
    }
}

class PRED_$parse_tokens_before_op_5_sub_2 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_3, _$parse_tokens_before_op_5_sub_3);
    }
}

class PRED_$parse_tokens_before_op_5_sub_3 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_4, _$parse_tokens_before_op_5_sub_4);
    }
}

class PRED_$parse_tokens_before_op_5_sub_4 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_5, _$parse_tokens_before_op_5_sub_5);
    }
}

class PRED_$parse_tokens_before_op_5_sub_5 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_6, _$parse_tokens_before_op_5_sub_6);
    }
}

class PRED_$parse_tokens_before_op_5_sub_6 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_7, _$parse_tokens_before_op_5_sub_7);
    }
}

class PRED_$parse_tokens_before_op_5_sub_7 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_8, _$parse_tokens_before_op_5_sub_8);
    }
}

class PRED_$parse_tokens_before_op_5_sub_8 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_9, _$parse_tokens_before_op_5_sub_9);
    }
}

class PRED_$parse_tokens_before_op_5_sub_9 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_10, _$parse_tokens_before_op_5_sub_10);
    }
}

class PRED_$parse_tokens_before_op_5_sub_10 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_11, _$parse_tokens_before_op_5_sub_11);
    }
}

class PRED_$parse_tokens_before_op_5_sub_11 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.retry(_$parse_tokens_before_op_5_12, _$parse_tokens_before_op_5_sub_12);
    }
}

class PRED_$parse_tokens_before_op_5_sub_12 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$parse_tokens_before_op_5_13);
    }
}

class PRED_$parse_tokens_before_op_5_1 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, C, [' '|D], E):-!, '$parse_tokens_before_op'(A, B, C, D, E)
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, C, [' '|D], E):-['$neck_cut', '$parse_tokens_before_op'(A, B, C, D, E)]
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            if (!unify( s1,args[0]))
                return fail(engine);
            a6 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
             bind(a4,makeList(s1, a6));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        engine_aregs[1] = a1;
        engine_aregs[2] = a2;
        engine_aregs[3] = a3;
        engine_aregs[4] = a6;
        engine_aregs[5] = a5;
        engine.cont = cont;
        return exit(engine, _$parse_tokens_before_op_5_top);
    }
}

class PRED_$parse_tokens_before_op_5_2 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, end_of_file, 0, [end_of_file|B], B):-!
        Object a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, end_of_file, 0, [end_of_file|B], B):-['$neck_cut']
        a2 = deref( a2);
        if (isAtomTerm(a2)){
            if (! prologEquals(a2,s2))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(/*VAR*/ a2,s2);
        } else {
            return fail(engine);
        }
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            if (!unify( s2,args[0]))
                return fail(engine);
            a6 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
             bind(a4,makeList(s2, a6));
        } else {
            return fail(engine);
        }
        if (! unify(a6,a5))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$parse_tokens_before_op_5_3 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, [number(B)|C], C):-!
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, [number(B)|C], C):-['$neck_cut']
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a4,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s4,a6))
                return fail(engine);
            Object[] args = args(a6);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a6)){
            Object[] args = {a2};
            bind(/*VAR*/ a6,makeStructure(s4, args));
        } else {
            return fail(engine);
        }
        if (! unify(a7,a5))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$parse_tokens_before_op_5_4 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, [atom(-)|C], D):-C=[number(E)|F], !, B is -E, D=F
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, [atom(-)|C], D):-['$get_level'(E), '$unify'(C, [number(F)|G]), '$cut'(E), '$multi'(-1, F, B), '$unify'(D, G)]
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            if (!unify( s8,args[0]))
                return fail(engine);
            a6 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
             bind(a4,makeList(s8, a6));
        } else {
            return fail(engine);
        }
        a7 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(7))
        if (! unify(a7,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a8 = engine.makeVariable(this);
        Object[] y1 = {a8};
        a9 = makeStructure(s4, y1);
        a10 = engine.makeVariable(this);
        a11 = makeList(a9, a10);
        //START inline expansion of $unify(a(6), a(11))
        if (! unify(a6,a11)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(7))
        a7 = deref( a7);
        if (! isCutter/*Integer*/(a7)) {
            throw new IllegalTypeException("integer", a7);
        } else {
            engine.cut(( a7));
        }
        //END inline expansion
        //START inline expansion of $multi(si(9), a(8), a(2))
        try {
            if (! unify(a2,multiply(Arithmetic.evaluate(a8),si9))) {
                return fail(engine);
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $unify(a(5), a(10))
        if (! unify(a5,a10)) {
            return fail(engine);
        }
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$parse_tokens_before_op_5_5 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, [var(C, B)|D], D):-!
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, [var(C, B)|D], D):-['$neck_cut']
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a4,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s10,a6))
                return fail(engine);
            Object[] args = args(a6);
            if (!unify( a2,args[1]))
                return fail(engine);
        } else if (isVariable(a6)){
            Object[] args = {engine.makeVariable(this), a2};
            bind(/*VAR*/ a6,makeStructure(s10, args));
        } else {
            return fail(engine);
        }
        if (! unify(a7,a5))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$parse_tokens_before_op_5_6 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, [string(B)|C], C):-!
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, [string(B)|C], C):-['$neck_cut']
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a4,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s11,a6))
                return fail(engine);
            Object[] args = args(a6);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a6)){
            Object[] args = {a2};
            bind(/*VAR*/ a6,makeStructure(s11, args));
        } else {
            return fail(engine);
        }
        if (! unify(a7,a5))
            return fail(engine);
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return exit(engine,cont);
    }
}

class PRED_$parse_tokens_before_op_5_7 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, ['('|C], D):-!, '$parse_tokens'(B, 1201, C, E), '$parse_tokens_expect'(')', E, D)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, ['('|C], D):-['$neck_cut', '$parse_tokens'(B, 1201, C, E), '$parse_tokens_expect'(')', E, D)]
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            if (!unify( s12,args[0]))
                return fail(engine);
            a6 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
             bind(a4,makeList(s12, a6));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a7 = engine.makeVariable(this);
        p1 = new PRED_$parse_tokens_expect_3(s14, a7, a5, cont);
        return exit(engine, new PRED_$parse_tokens_4(a2, si13, a6, a7, p1));
    }
}

class PRED_$parse_tokens_before_op_5_8 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, ['{'|C], D):-!, '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_brace'(B, E, D)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, ['{'|C], D):-['$neck_cut', '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_brace'(B, E, D)]
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            if (!unify( s15,args[0]))
                return fail(engine);
            a6 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
             bind(a4,makeList(s15, a6));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a7 = engine.makeVariable(this);
        p1 = new PRED_$parse_tokens_brace_3(a2, a7, a5, cont);
        return exit(engine, new PRED_$parse_tokens_skip_spaces_2(a6, a7, p1));
    }
}

class PRED_$parse_tokens_before_op_5_9 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, ['['|C], D):-!, '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_list'(B, E, D)
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, ['['|C], D):-['$neck_cut', '$parse_tokens_skip_spaces'(C, E), '$parse_tokens_list'(B, E, D)]
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            if (!unify( s16,args[0]))
                return fail(engine);
            a6 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
             bind(a4,makeList(s16, a6));
        } else {
            return fail(engine);
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        a7 = engine.makeVariable(this);
        p1 = new PRED_$parse_tokens_list_3(a2, a7, a5, cont);
        return exit(engine, new PRED_$parse_tokens_skip_spaces_2(a6, a7, p1));
    }
}

class PRED_$parse_tokens_before_op_5_10 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, [atom(C)|D], E):-D=['('|F], !, '$parse_tokens_skip_spaces'(F, G), '$parse_tokens_args'(H, G, I), B=..[C|H], E=I
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, [atom(C)|D], E):-['$get_level'(F), '$unify'(D, ['('|G]), '$cut'(F), '$parse_tokens_skip_spaces'(G, H), '$parse_tokens_args'(I, H, J), '$univ'(B, [C|I]), '$unify'(E, J)]
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a4,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s5,a6))
                return fail(engine);
            Object[] args = args(a6);
            a8 = args[0];
        } else if (isVariable(a6)){
            a8 = engine.makeVariable(this);
            Object[] args = {a8};
            bind(/*VAR*/ a6,makeStructure(s5, args));
        } else {
            return fail(engine);
        }
        a9 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(9))
        if (! unify(a9,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a10 = engine.makeVariable(this);
        a11 = makeList(s12, a10);
        //START inline expansion of $unify(a(7), a(11))
        if (! unify(a7,a11)) {
            return fail(engine);
        }
        //END inline expansion
        //START inline expansion of $cut(a(9))
        a9 = deref( a9);
        if (! isCutter/*Integer*/(a9)) {
            throw new IllegalTypeException("integer", a9);
        } else {
            engine.cut(( a9));
        }
        //END inline expansion
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        a14 = engine.makeVariable(this);
        a15 = makeList(a8, a13);
        p1 = new PRED_$unify_2(a5, a14, cont);
        p2 = new PRED_$univ_2(a2, a15, p1);
        p3 = new PRED_$parse_tokens_args_3(a13, a12, a14, p2);
        return exit(engine, new PRED_$parse_tokens_skip_spaces_2(a10, a12, p3));
    }
}

class PRED_$parse_tokens_before_op_5_11 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):- (current_op(C, fx, D), G=E), (C=<A, H=G), '$parse_tokens_skip_spaces'(H, I), '$parse_tokens_peep_next'(J, I, K), ('$parse_tokens_is_starter'(J), L=K), ('$dummy_14_builtins.pl'(J), M=L), !, (N is C-1, O=M), '$parse_tokens'(P, N, O, Q), (functor(B, D, 1), R=Q), arg(1, B, P), F=R
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):-['$get_level'(G), current_op(C, fx, D), '$unify'(H, E), '$less_or_equal'(C, A), '$unify'(I, H), '$parse_tokens_skip_spaces'(I, J), '$parse_tokens_peep_next'(K, J, L), '$parse_tokens_is_starter'(K), '$unify'(M, L), '$dummy_14_builtins.pl'(K), '$unify'(N, M), '$cut'(G), '$minus'(C, 1, O), '$unify'(P, N), '$parse_tokens'(Q, O, P, R), functor(B, D, 1), '$unify'(S, R), arg(1, B, Q), '$unify'(F, S)]
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a4,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s5,a6))
                return fail(engine);
            Object[] args = args(a6);
            a8 = args[0];
        } else if (isVariable(a6)){
            a8 = engine.makeVariable(this);
            Object[] args = {a8};
            bind(/*VAR*/ a6,makeStructure(s5, args));
        } else {
            return fail(engine);
        }
        a9 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(9))
        if (! unify(a9,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        a16 = engine.makeVariable(this);
        a17 = engine.makeVariable(this);
        a18 = engine.makeVariable(this);
        a19 = engine.makeVariable(this);
        a20 = engine.makeVariable(this);
        a21 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a5, a21, cont);
        p2 = new PRED_arg_3(si18, a2, a19, p1);
        p3 = new PRED_$unify_2(a21, a20, p2);
        p4 = new PRED_functor_3(a2, a8, si18, p3);
        p5 = new PRED_$parse_tokens_4(a19, a17, a18, a20, p4);
        p6 = new PRED_$unify_2(a18, a16, p5);
        p7 = new PRED_$minus_3(a3, si18, a17, p6);
        p8 = new PRED_$cut_1(a9, p7);
        p9 = new PRED_$unify_2(a16, a15, p8);
        p10 = new PRED_$dummy_14_builtins$002Epl_1(a13, p9);
        p11 = new PRED_$unify_2(a15, a14, p10);
        p12 = new PRED_$parse_tokens_is_starter_1(a13, p11);
        p13 = new PRED_$parse_tokens_peep_next_3(a13, a12, a14, p12);
        p14 = new PRED_$parse_tokens_skip_spaces_2(a11, a12, p13);
        p15 = new PRED_$unify_2(a11, a10, p14);
        p16 = new PRED_$less_or_equal_2(a3, a1, p15);
        p17 = new PRED_$unify_2(a10, a7, p16);
        return exit(engine, new PRED_current_op_3(a3, s17, a8, p17));
    }
}

class PRED_$parse_tokens_before_op_5_12 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):- (current_op(C, fy, D), G=E), (C=<A, H=G), '$parse_tokens_skip_spaces'(H, I), '$parse_tokens_peep_next'(J, I, K), ('$parse_tokens_is_starter'(J), L=K), ('$dummy_15_builtins.pl'(J), M=L), !, '$parse_tokens'(N, C, M, O), (functor(B, D, 1), P=O), arg(1, B, N), F=P
        Object a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, C, [atom(D)|E], F):-['$get_level'(G), current_op(C, fy, D), '$unify'(H, E), '$less_or_equal'(C, A), '$unify'(I, H), '$parse_tokens_skip_spaces'(I, J), '$parse_tokens_peep_next'(K, J, L), '$parse_tokens_is_starter'(K), '$unify'(M, L), '$dummy_15_builtins.pl'(K), '$unify'(N, M), '$cut'(G), '$parse_tokens'(O, C, N, P), functor(B, D, 1), '$unify'(Q, P), arg(1, B, O), '$unify'(F, Q)]
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a4,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s5,a6))
                return fail(engine);
            Object[] args = args(a6);
            a8 = args[0];
        } else if (isVariable(a6)){
            a8 = engine.makeVariable(this);
            Object[] args = {a8};
            bind(/*VAR*/ a6,makeStructure(s5, args));
        } else {
            return fail(engine);
        }
        a9 = engine.makeVariable(this);
        //START inline expansion of $get_level(a(9))
        if (! unify(a9,makeInteger(engine.B0))) {
            return fail(engine);
        }
        //END inline expansion
        a10 = engine.makeVariable(this);
        a11 = engine.makeVariable(this);
        a12 = engine.makeVariable(this);
        a13 = engine.makeVariable(this);
        a14 = engine.makeVariable(this);
        a15 = engine.makeVariable(this);
        a16 = engine.makeVariable(this);
        a17 = engine.makeVariable(this);
        a18 = engine.makeVariable(this);
        a19 = engine.makeVariable(this);
        p1 = new PRED_$unify_2(a5, a19, cont);
        p2 = new PRED_arg_3(si18, a2, a17, p1);
        p3 = new PRED_$unify_2(a19, a18, p2);
        p4 = new PRED_functor_3(a2, a8, si18, p3);
        p5 = new PRED_$parse_tokens_4(a17, a3, a16, a18, p4);
        p6 = new PRED_$cut_1(a9, p5);
        p7 = new PRED_$unify_2(a16, a15, p6);
        p8 = new PRED_$dummy_15_builtins$002Epl_1(a13, p7);
        p9 = new PRED_$unify_2(a15, a14, p8);
        p10 = new PRED_$parse_tokens_is_starter_1(a13, p9);
        p11 = new PRED_$parse_tokens_peep_next_3(a13, a12, a14, p10);
        p12 = new PRED_$parse_tokens_skip_spaces_2(a11, a12, p11);
        p13 = new PRED_$unify_2(a11, a10, p12);
        p14 = new PRED_$less_or_equal_2(a3, a1, p13);
        p15 = new PRED_$unify_2(a10, a7, p14);
        return exit(engine, new PRED_current_op_3(a3, s19, a8, p15));
    }
}

class PRED_$parse_tokens_before_op_5_13 extends PRED_$parse_tokens_before_op_5 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$parse_tokens_before_op'(A, B, 0, [atom(B)|C], C):-true
        Object a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        a3 = engine_aregs[3];
        a4 = engine_aregs[4];
        a5 = engine_aregs[5];
        cont = engine.cont;
    // '$parse_tokens_before_op'(A, B, 0, [atom(B)|C], C):-[]
        a3 = deref( a3);
        if (isInteger(a3)){
            if (intValue( a3) != 0)
                return fail(engine);
        } else if (isVariable(a3)){
            bind(/*VAR*/ a3,si3);
        } else {
            return fail(engine);
        }
        a4 = deref( a4);
        if (isListTerm(a4)){
            Object[] args = consArgs(a4);
            a6 = args[0];
            a7 = args[1];
        } else if (isVariable(a4)){
            a6 = engine.makeVariable(this);
            a7 = engine.makeVariable(this);
             bind(a4,makeList(a6, a7));
        } else {
            return fail(engine);
        }
        a6 = deref( a6);
        if (isCompound(a6)){
            if (!functorOf( s5,a6))
                return fail(engine);
            Object[] args = args(a6);
            if (!unify( a2,args[0]))
                return fail(engine);
        } else if (isVariable(a6)){
            Object[] args = {a2};
            bind(/*VAR*/ a6,makeStructure(s5, args));
        } else {
            return fail(engine);
        }
        if (! unify(a7,a5))
            return fail(engine);
        return exit(engine,cont);
    }
}
