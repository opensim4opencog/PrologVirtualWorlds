package jp.ac.kobe_u.cs.prolog.builtin;
import jp.ac.kobe_u.cs.prolog.lang.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$member_in_reverse'/2</code> defined in builtins.pl<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @author Douglas R. Miles (dmiles@users.sourceforge.net) for Object(s) 
 @version 1.0-dmiles
*/
class PRED_$member_in_reverse_2 extends PredicateBase {
    static Predicate _$member_in_reverse_2_top = new PRED_$member_in_reverse_2_top();
    static Predicate _$member_in_reverse_2_sub_1 = new PRED_$member_in_reverse_2_sub_1();
    static Predicate _$member_in_reverse_2_1 = new PRED_$member_in_reverse_2_1();
    static Predicate _$member_in_reverse_2_2 = new PRED_$member_in_reverse_2_2();

    public Object arg1, arg2;

    public PRED_$member_in_reverse_2(Object a1, Object a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$member_in_reverse_2(){}

    public void setArgument(Object[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String nameUQ() { return "$member_in_reverse"; }

    public void sArg(int i0, Object val) {  switch (i0) {         case 0: arg1 = val;break ;
         case 1: arg2 = val;break ;
default: newIndexOutOfBoundsException("setarg" , i0 , val);  }   }


    public Object gArg(int i0) {  switch (i0) {         case 0: return arg1;
         case 1: return arg2;
default: return newIndexOutOfBoundsException("getarg", i0,null);  }   }


    public String toPrologString(java.util.Collection newParam) {
        return "'$member_in_reverse'(" + argString(arg1,newParam) + "," + argString(arg2,newParam) + ")";
    }

    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); 
        engine_aregs[1] = arg1;
        engine_aregs[2] = arg2;
        engine.cont = cont;
        return exit(engine, _$member_in_reverse_2_top);
    }
}

class PRED_$member_in_reverse_2_top extends PRED_$member_in_reverse_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        engine.setB0();
        return engine.jtry(_$member_in_reverse_2_1, _$member_in_reverse_2_sub_1);
    }
}

class PRED_$member_in_reverse_2_sub_1 extends PRED_$member_in_reverse_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
        return engine.trust(_$member_in_reverse_2_2);
    }
}

class PRED_$member_in_reverse_2_1 extends PRED_$member_in_reverse_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$member_in_reverse'(A, [B|C]):-'$member_in_reverse'(A, C)
        Object a1, a2, a3;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$member_in_reverse'(A, [B|C]):-['$member_in_reverse'(A, C)]
        a2 = deref( a2);
        if (isListTerm(a2)){
            Object[] args = consArgs(a2);
            a3 = args[1];
        } else if (isVariable(a2)){
            a3 = engine.makeVariable(this);
             bind(a2,makeList(engine.makeVariable(this), a3));
        } else {
            return fail(engine);
        }
        engine_aregs[1] = a1;
        engine_aregs[2] = a3;
        engine.cont = cont;
        return exit(engine, _$member_in_reverse_2_top);
    }
}

class PRED_$member_in_reverse_2_2 extends PRED_$member_in_reverse_2 {
    public Predicate exec(Prolog engine) { enter(engine); Object[] engine_aregs = engine.getAreg(); //anony 
    // '$member_in_reverse'(A, [A|B]):-true
        Object a1, a2;
        Predicate cont;
        a1 = engine_aregs[1];
        a2 = engine_aregs[2];
        cont = engine.cont;
    // '$member_in_reverse'(A, [A|B]):-[]
        a2 = deref( a2);
        if (isListTerm(a2)){
            Object[] args = consArgs(a2);
            if (!unify( a1,args[0]))
                return fail(engine);
        } else if (isVariable(a2)){
             bind(a2,makeList(a1, engine.makeVariable(this)));
        } else {
            return fail(engine);
        }
        return exit(engine,cont);
    }
}
