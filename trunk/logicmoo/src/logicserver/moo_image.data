
:- style_check(-singleton).
:- style_check(-discontiguous).
:- style_check(-atom).
:- style_check(-string).
%:-set_prolog_flag(double_quotes,string).
:-index(mooCache(1)).
:-index(mooCache(1,1)).
:-index(mooCache(1,1,1)).
:-index(mooCache(1,1,1,1)).
:-index(mooCache(1,1,1,1,0)).
:-index(mooCache(1,0,1,1,1,0)).
:-index(mooCache(1,1,0,0,1,1,0,0,0)).
:-dynamic(mooCache/1).
:-dynamic(mooCache/2).
:-dynamic(mooCache/3).
:-dynamic(mooCache/4).
:-dynamic(mooCache/5).
:-dynamic(mooCache/6).
:-dynamic(mooCache/9).


:- dynamic mooCache/1.


:- dynamic mooCache/2.


:- dynamic mooCache/3.


:- dynamic mooCache/4.


:- dynamic mooCache/5.


:- dynamic mooCache/6.


:- dynamic mooCache/9.

mooCache(domain('WealthFn', 1, 'Agent'), domain('WealthFn', 1, 'Agent'), [], [], 'PrologMOO', 'UNITS OF MEASURE', 4024, 'Anonymous', A).
mooCache(documentation('WealthFn', string('"A UnaryFunction that maps an Agent to a CurrencyMeasure specifying the value of the property owned by the Agent.  Note that this Function is generally used in conjunction with the Function PropertyFn, e.g. (WealthFn (PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates\' holdings."')), documentation('WealthFn', string('"A UnaryFunction that maps an Agent to a CurrencyMeasure specifying the value of the property owned by the Agent.  Note that this Function is generally used in conjunction with the Function PropertyFn, e.g. (WealthFn (PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates\' holdings."')), [], [], 'PrologMOO', 'UNITS OF MEASURE', 4028, 'Anonymous', A).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4042, 'Web', A).
mooCache(instance('PositiveInfinity', 'TimePoint'), instance('PositiveInfinity', 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4060, 'Anonymous', A).
mooCache(=>(and(instance(A, 'TimePoint'), not(equal(A, 'PositiveInfinity'))), before(A, 'PositiveInfinity')), and(entails(and(instance(A, 'TimePoint'), not(equal('PositiveInfinity', A))), before(A, 'PositiveInfinity')), and(entails(and(not(before(A, 'PositiveInfinity')), not(equal('PositiveInfinity', A))), not(instance(A, 'TimePoint'))), entails(and(not(before(A, 'PositiveInfinity')), instance(A, 'TimePoint')), equal('PositiveInfinity', A)))), [domainV(A, ['$instanceof':'TimePoint', before:1]), domainV(B, []), forall(A)], ['POINT'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4064, 'Anonymous', C).
mooCache(instance('NegativeInfinity', 'TimePoint'), instance('NegativeInfinity', 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4068, 'Anonymous', A).
mooCache(=>(and(instance(A, 'TimePoint'), not(equal(A, 'NegativeInfinity'))), before('NegativeInfinity', A)), and(entails(and(instance(A, 'TimePoint'), not(equal('NegativeInfinity', A))), before('NegativeInfinity', A)), and(entails(and(not(before('NegativeInfinity', A)), not(equal('NegativeInfinity', A))), not(instance(A, 'TimePoint'))), entails(and(not(before('NegativeInfinity', A)), instance(A, 'TimePoint')), equal('NegativeInfinity', A)))), [domainV(A, ['$instanceof':'TimePoint', before:2]), domainV(B, []), forall(A)], ['POINT'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4072, 'Anonymous', C).
mooCache(instance(duration, 'BinaryPredicate'), instance(duration, 'BinaryPredicate'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4076, 'Anonymous', A).
mooCache(domain(duration, 1, 'TimePosition'), domain(duration, 1, 'TimePosition'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4080, 'Anonymous', A).
mooCache(documentation(duration, string('"(duration ?POS ?TIME) means that the   duration of the TimePosition ?POS is ?TIME.  Note that this   Predicate can be used in conjunction with the Function WhenFn   to specify the duration of any instance of Physical."')), documentation(duration, string('"(duration ?POS ?TIME) means that the   duration of the TimePosition ?POS is ?TIME.  Note that this   Predicate can be used in conjunction with the Function WhenFn   to specify the duration of any instance of Physical."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4084, 'Anonymous', A).
mooCache(=>(instance(A, 'TimePoint'), not(exists(B, duration(A, B)))), and(entails(duration(A, B), not(instance(A, 'TimePoint'))), entails(instance(A, 'TimePoint'), not(duration(A, B)))), [domainV(B, [duration:2]), domainV(A, ['$instanceof':'TimePoint', duration:1]), domainV(C, []), forall(A), forall(B), forall(B)], ['POINT'=A, 'DURATION'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4088, 'Anonymous', D).
mooCache(instance(frequency, 'AsymmetricRelation'), instance(frequency, 'AsymmetricRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4092, 'Anonymous', A).
mooCache(domain(frequency, 2, 'TimeDuration'), domain(frequency, 2, 'TimeDuration'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4096, 'Anonymous', A).
mooCache(=>(frequency(A, B), forall(C, =>(duration(C, B), exists(D, and(temporalPart(D, C), holdsDuring(D, exists(E, instance(E, A)))))))), and(and(entails(and(duration(C, B), not(temporalPart(D, C))), not(frequency(A, B))), and(entails(and(frequency(A, B), not(temporalPart(D, C))), not(duration(C, B))), entails(and(and(and(frequency(A, B), duration(C, B)), '$existential'(D, '?POSITION', and(temporalPart('?POSITION', C), exists(E, holdsDuring('?POSITION', instance(E, A)))))), '$existential'(E, '?INST', holdsDuring(D, instance('?INST', A)))), temporalPart(D, C)))), and(entails(and(duration(C, B), not(holdsDuring(D, instance(E, A)))), not(frequency(A, B))), and(entails(and(frequency(A, B), not(holdsDuring(D, instance(E, A)))), not(duration(C, B))), entails(and(and(and(frequency(A, B), duration(C, B)), '$existential'(D, '?POSITION', and(temporalPart('?POSITION', C), exists(E, holdsDuring('?POSITION', instance(E, A)))))), '$existential'(E, '?INST', holdsDuring(D, instance('?INST', A)))), holdsDuring(D, instance(E, A)))))), [domainV(E, []), domainV(D, [holdsDuring:1, temporalPart:1]), domainV(C, [duration:1, temporalPart:2]), domainV(B, [duration:2, frequency:2]), domainV(A, [frequency:1, instance:2]), domainV(F, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?POSITION', and(temporalPart('?POSITION', C), exists(E, holdsDuring('?POSITION', instance(E, A)))))), replaceConsVar(E, '$existential'('?INST', holdsDuring(D, instance('?INST', A))))], ['PROC'=A, 'TIME1'=B, 'TIME2'=C, 'POSITION'=D, 'INST'=E], 'PrologMOO', 'TEMPORAL CONCEPTS', 4100, 'Anonymous', G).
mooCache(instance(temporalPart, 'AsymmetricRelation'), instance(temporalPart, 'AsymmetricRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4104, 'Anonymous', A).
mooCache(domain(temporalPart, 2, 'TimePosition'), domain(temporalPart, 2, 'TimePosition'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4108, 'Anonymous', A).
mooCache(=>(instance(A, 'TimePoint'), exists(B, and(instance(B, 'TimeInterval'), temporalPart(A, B)))), and(and(entails(not(instance(B, 'TimeInterval')), not(instance(A, 'TimePoint'))), entails(and(instance(A, 'TimePoint'), '$existential'(B, '?INTERVAL', and(instance('?INTERVAL', 'TimeInterval'), temporalPart(A, '?INTERVAL')))), instance(B, 'TimeInterval'))), and(entails(not(temporalPart(A, B)), not(instance(A, 'TimePoint'))), entails(and(instance(A, 'TimePoint'), '$existential'(B, '?INTERVAL', and(instance('?INTERVAL', 'TimeInterval'), temporalPart(A, '?INTERVAL')))), temporalPart(A, B)))), [domainV(B, ['$instanceof':'TimeInterval', temporalPart:2]), domainV(A, ['$instanceof':'TimePoint', temporalPart:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?INTERVAL', and(instance('?INTERVAL', 'TimeInterval'), temporalPart(A, '?INTERVAL'))))], ['POINT'=A, 'INTERVAL'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4112, 'Anonymous', D).
mooCache(=>(and(holdsDuring(A, holds(B, C, D)), and(instance(C, 'Physical'), instance(D, 'Physical'))), and(time(C, A), time(D, A))), and(and(entails(and(holdsDuring(A, holds(B, C, D)), and(instance(C, 'Physical'), instance(D, 'Physical'))), time(C, A)), and(entails(and(not(time(C, A)), and(instance(C, 'Physical'), instance(D, 'Physical'))), not(holdsDuring(A, holds(B, C, D)))), and(entails(and(not(time(C, A)), and(holdsDuring(A, holds(B, C, D)), instance(D, 'Physical'))), not(instance(C, 'Physical'))), entails(and(not(time(C, A)), and(holdsDuring(A, holds(B, C, D)), instance(C, 'Physical'))), not(instance(D, 'Physical')))))), and(entails(and(holdsDuring(A, holds(B, C, D)), and(instance(C, 'Physical'), instance(D, 'Physical'))), time(D, A)), and(entails(and(not(time(D, A)), and(instance(C, 'Physical'), instance(D, 'Physical'))), not(holdsDuring(A, holds(B, C, D)))), and(entails(and(not(time(D, A)), and(holdsDuring(A, holds(B, C, D)), instance(D, 'Physical'))), not(instance(C, 'Physical'))), entails(and(not(time(D, A)), and(holdsDuring(A, holds(B, C, D)), instance(C, 'Physical'))), not(instance(D, 'Physical'))))))), [domainV(D, ['$instanceof':'Physical', time:1, B:2]), domainV(C, ['$instanceof':'Physical', time:1, B:1]), domainV(B, [holds:1]), domainV(A, [holdsDuring:1, time:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['INTERVAL'=A, 'REL'=B, 'INST1'=C, 'INST2'=D], 'PrologMOO', 'TEMPORAL CONCEPTS', 4116, 'Anonymous', F).
mooCache(instance('BeginFn', 'TemporalRelation'), instance('BeginFn', 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4120, 'Anonymous', A).
mooCache(domain('BeginFn', 1, 'TimeInterval'), domain('BeginFn', 1, 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4124, 'Anonymous', A).
mooCache(documentation('BeginFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval begins."')), documentation('BeginFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval begins."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4128, 'Anonymous', A).
mooCache(=>(origin(A, B), located('WhereFn'(A, 'BeginFn'('WhenFn'(A))), 'WhereFn'(B, 'BeginFn'('WhenFn'(B))))), and(entails(not(located('WhereFn'(A, 'BeginFn'('WhenFn'(A))), 'WhereFn'(B, 'BeginFn'('WhenFn'(B))))), not(origin(A, B))), entails(origin(A, B), located('WhereFn'(A, 'BeginFn'('WhenFn'(A))), 'WhereFn'(B, 'BeginFn'('WhenFn'(B)))))), [domainV(B, ['WhenFn':1, 'WhereFn':1, origin:2]), domainV(A, ['WhenFn':1, 'WhereFn':1, origin:1]), domainV(C, []), forall(A), forall(B)], ['PROCESS'=A, 'OBJ'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4132, 'Anonymous', D).
mooCache(instance('EndFn', 'UnaryFunction'), instance('EndFn', 'UnaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4136, 'Anonymous', A).
mooCache(range('EndFn', 'TimePoint'), range('EndFn', 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4140, 'Anonymous', A).
mooCache(=>(equal('EndFn'(A), B), forall(C, =>(and(temporalPart(C, A), not(equal(C, B))), before(C, B)))), and(entails(and(not(before(C, B)), and(temporalPart(C, A), not(equal(C, B)))), not(holds('EndFn', A, B))), and(entails(and(holds('EndFn', A, B), and(temporalPart(C, A), not(equal(C, B)))), before(C, B)), and(entails(and(holds('EndFn', A, B), and(not(before(C, B)), not(equal(C, B)))), not(temporalPart(C, A))), entails(and(holds('EndFn', A, B), and(not(before(C, B)), temporalPart(C, A))), equal(C, B))))), [domainV(C, [before:1, temporalPart:1]), domainV(B, ['EndFn':2, before:2]), domainV(A, ['EndFn':1, temporalPart:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['INTERVAL'=A, 'POINT'=B, 'OTHERPOINT'=C], 'PrologMOO', 'TEMPORAL CONCEPTS', 4144, 'Anonymous', E).
mooCache(instance(starts, 'TemporalRelation'), instance(starts, 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4148, 'Anonymous', A).
mooCache(instance(starts, 'IrreflexiveRelation'), instance(starts, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4152, 'Anonymous', A).
mooCache(domain(starts, 2, 'TimeInterval'), domain(starts, 2, 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4156, 'Anonymous', A).
mooCache(<=>(starts(A, B), and(equal('BeginFn'(A), 'BeginFn'(B)), before('EndFn'(A), 'EndFn'(B)))), and(and(entails(starts(A, B), equal('BeginFn'(A), 'BeginFn'(B))), and(entails(starts(A, B), before('EndFn'(A), 'EndFn'(B))), entails(or(not(equal('BeginFn'(A), 'BeginFn'(B))), not(before('EndFn'(A), 'EndFn'(B)))), not(starts(A, B))))), and(entails(and(equal('BeginFn'(A), 'BeginFn'(B)), before('EndFn'(A), 'EndFn'(B))), starts(A, B)), and(entails(and(not(starts(A, B)), before('EndFn'(A), 'EndFn'(B))), not(equal('BeginFn'(A), 'BeginFn'(B)))), entails(and(not(starts(A, B)), equal('BeginFn'(A), 'BeginFn'(B))), not(before('EndFn'(A), 'EndFn'(B))))))), [domainV(B, ['BeginFn':1, 'EndFn':1, starts:2]), domainV(A, ['BeginFn':1, 'EndFn':1, starts:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4160, 'Anonymous', D).
mooCache(instance(finishes, 'TemporalRelation'), instance(finishes, 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4164, 'Anonymous', A).
mooCache(instance(finishes, 'IrreflexiveRelation'), instance(finishes, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4168, 'Anonymous', A).
mooCache(domain(finishes, 2, 'TimeInterval'), domain(finishes, 2, 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4172, 'Anonymous', A).
mooCache(<=>(finishes(A, B), and(before('BeginFn'(B), 'BeginFn'(A)), equal('EndFn'(B), 'EndFn'(A)))), and(and(entails(finishes(A, B), before('BeginFn'(B), 'BeginFn'(A))), and(entails(finishes(A, B), equal('EndFn'(B), 'EndFn'(A))), entails(or(not(before('BeginFn'(B), 'BeginFn'(A))), not(equal('EndFn'(B), 'EndFn'(A)))), not(finishes(A, B))))), and(entails(and(before('BeginFn'(B), 'BeginFn'(A)), equal('EndFn'(B), 'EndFn'(A))), finishes(A, B)), and(entails(and(not(finishes(A, B)), equal('EndFn'(B), 'EndFn'(A))), not(before('BeginFn'(B), 'BeginFn'(A)))), entails(and(not(finishes(A, B)), before('BeginFn'(B), 'BeginFn'(A))), not(equal('EndFn'(B), 'EndFn'(A))))))), [domainV(B, ['BeginFn':1, 'EndFn':1, finishes:2]), domainV(A, ['BeginFn':1, 'EndFn':1, finishes:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4176, 'Anonymous', D).
mooCache(instance(before, 'IrreflexiveRelation'), instance(before, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4180, 'Anonymous', A).
mooCache(subrelation(before, beforeOrEqual), subrelation(before, beforeOrEqual), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4184, 'Anonymous', A).
mooCache(domain(before, 2, 'TimePoint'), domain(before, 2, 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4188, 'Anonymous', A).
mooCache(=>(instance(A, 'Object'), exists(B, exists(C, and(instance(C, 'TimePoint'), and(instance(B, 'TimePoint'), and(before(C, B), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, B)), time(A, D))))))))), and(and(entails(not(instance(C, 'TimePoint')), not(instance(A, 'Object'))), entails(and(instance(A, 'Object'), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), instance(C, 'TimePoint'))), and(and(entails(not(instance(B, 'TimePoint')), not(instance(A, 'Object'))), entails(and(and(instance(A, 'Object'), '$existential'(B, '?TIME2', exists(C, and(instance(C, 'TimePoint'), and(instance('?TIME2', 'TimePoint'), and(before(C, '?TIME2'), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, '?TIME2')), time(A, D))))))))), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), instance(B, 'TimePoint'))), and(and(entails(not(before(C, B)), not(instance(A, 'Object'))), entails(and(and(instance(A, 'Object'), '$existential'(B, '?TIME2', exists(C, and(instance(C, 'TimePoint'), and(instance('?TIME2', 'TimePoint'), and(before(C, '?TIME2'), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, '?TIME2')), time(A, D))))))))), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), before(C, B))), and(entails(and(not(time(A, D)), and(beforeOrEqual(C, D), beforeOrEqual(D, B))), not(instance(A, 'Object'))), and(entails(and(and(instance(A, 'Object'), and(beforeOrEqual(C, D), beforeOrEqual(D, B))), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), time(A, D)), and(entails(and(instance(A, 'Object'), and(not(time(A, D)), beforeOrEqual(D, B))), not(beforeOrEqual(C, D))), entails(and(instance(A, 'Object'), and(not(time(A, D)), beforeOrEqual(C, D))), not(beforeOrEqual(D, B))))))))), [domainV(D, [beforeOrEqual:1, beforeOrEqual:2, time:2]), domainV(C, ['$instanceof':'TimePoint', before:1, beforeOrEqual:1]), domainV(B, ['$instanceof':'TimePoint', before:2, beforeOrEqual:2]), domainV(A, ['$instanceof':'Object', time:1]), domainV(E, []), forall(A), replaceConsVar(B, '$existential'('?TIME2', exists(C, and(instance(C, 'TimePoint'), and(instance('?TIME2', 'TimePoint'), and(before(C, '?TIME2'), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, '?TIME2')), time(A, D))))))))), replaceConsVar(C, '$existential'('?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), forall(D)], ['OBJ'=A, 'TIME1'=C, 'TIME2'=B, 'TIME'=D], 'PrologMOO', 'TEMPORAL CONCEPTS', 4196, 'Anonymous', F).
mooCache(instance(beforeOrEqual, 'BinaryPredicate'), instance(beforeOrEqual, 'BinaryPredicate'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4200, 'Anonymous', A).
mooCache(domain(beforeOrEqual, 1, 'TimePoint'), domain(beforeOrEqual, 1, 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4204, 'Anonymous', A).
mooCache(documentation(beforeOrEqual, string('"(beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1   is identical with ?POINT2 or occurs before it on the universal timeline."')), documentation(beforeOrEqual, string('"(beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1   is identical with ?POINT2 or occurs before it on the universal timeline."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4208, 'Anonymous', A).
mooCache(instance(temporallyBetween, 'TemporalRelation'), instance(temporallyBetween, 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4212, 'Anonymous', A).
mooCache(subrelation(temporallyBetween, temporallyBetweenOrEqual), subrelation(temporallyBetween, temporallyBetweenOrEqual), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4216, 'Anonymous', A).
mooCache(domain(temporallyBetween, 2, 'TimePoint'), domain(temporallyBetween, 2, 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4220, 'Anonymous', A).
mooCache(documentation(temporallyBetween, string('"(temporallyBetween ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT2 is between the TimePoints   ?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before   ?POINT3."')), documentation(temporallyBetween, string('"(temporallyBetween ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT2 is between the TimePoints   ?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before   ?POINT3."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4224, 'Anonymous', A).
mooCache(instance(temporallyBetweenOrEqual, 'TemporalRelation'), instance(temporallyBetweenOrEqual, 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4228, 'Anonymous', A).
mooCache(domain(temporallyBetweenOrEqual, 1, 'TimePoint'), domain(temporallyBetweenOrEqual, 1, 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4232, 'Anonymous', A).
mooCache(domain(temporallyBetweenOrEqual, 3, 'TimePoint'), domain(temporallyBetweenOrEqual, 3, 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4236, 'Anonymous', A).
mooCache(<=>(temporallyBetweenOrEqual(A, B, C), and(beforeOrEqual(A, B), beforeOrEqual(B, C))), and(and(entails(temporallyBetweenOrEqual(A, B, C), beforeOrEqual(A, B)), and(entails(temporallyBetweenOrEqual(A, B, C), beforeOrEqual(B, C)), entails(or(not(beforeOrEqual(A, B)), not(beforeOrEqual(B, C))), not(temporallyBetweenOrEqual(A, B, C))))), and(entails(and(beforeOrEqual(A, B), beforeOrEqual(B, C)), temporallyBetweenOrEqual(A, B, C)), and(entails(and(not(temporallyBetweenOrEqual(A, B, C)), beforeOrEqual(B, C)), not(beforeOrEqual(A, B))), entails(and(not(temporallyBetweenOrEqual(A, B, C)), beforeOrEqual(A, B)), not(beforeOrEqual(B, C)))))), [domainV(C, [beforeOrEqual:2, temporallyBetweenOrEqual:3]), domainV(B, [beforeOrEqual:1, beforeOrEqual:2, temporallyBetweenOrEqual:2]), domainV(A, [beforeOrEqual:1, temporallyBetweenOrEqual:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['POINT1'=A, 'POINT2'=B, 'POINT3'=C], 'PrologMOO', 'TEMPORAL CONCEPTS', 4240, 'Anonymous', E).
mooCache(instance(overlapsTemporally, 'BinaryPredicate'), instance(overlapsTemporally, 'BinaryPredicate'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4244, 'Anonymous', A).
mooCache(instance(overlapsTemporally, 'PartialOrderingRelation'), instance(overlapsTemporally, 'PartialOrderingRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4248, 'Anonymous', A).
mooCache(domain(overlapsTemporally, 2, 'TimeInterval'), domain(overlapsTemporally, 2, 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4252, 'Anonymous', A).
mooCache(<=>(overlapsTemporally(A, B), or(equal(A, B), or(during(A, B), or(starts(A, B), finishes(A, B))))), and(and(entails(not(overlapsTemporally(A, B)), not(equal(A, B))), and(entails(not(overlapsTemporally(A, B)), not(during(A, B))), and(entails(not(overlapsTemporally(A, B)), not(starts(A, B))), and(entails(not(overlapsTemporally(A, B)), not(finishes(A, B))), entails(or(equal(A, B), or(during(A, B), or(starts(A, B), finishes(A, B)))), overlapsTemporally(A, B)))))), and(entails(and(not(equal(A, B)), and(not(during(A, B)), and(not(starts(A, B)), not(finishes(A, B))))), not(overlapsTemporally(A, B))), and(entails(and(overlapsTemporally(A, B), and(not(during(A, B)), and(not(starts(A, B)), not(finishes(A, B))))), equal(A, B)), and(entails(and(overlapsTemporally(A, B), and(not(equal(A, B)), and(not(starts(A, B)), not(finishes(A, B))))), during(A, B)), and(entails(and(overlapsTemporally(A, B), and(not(equal(A, B)), and(not(during(A, B)), not(finishes(A, B))))), starts(A, B)), entails(and(overlapsTemporally(A, B), and(not(equal(A, B)), and(not(during(A, B)), not(starts(A, B))))), finishes(A, B))))))), [domainV(B, [during:2, finishes:2, overlapsTemporally:2, starts:2]), domainV(A, [during:1, finishes:1, overlapsTemporally:1, starts:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4256, 'Anonymous', D).
mooCache(instance(during, 'TemporalRelation'), instance(during, 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4260, 'Anonymous', A).
mooCache(instance(during, 'IrreflexiveRelation'), instance(during, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4264, 'Anonymous', A).
mooCache(domain(during, 1, 'TimeInterval'), domain(during, 1, 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4268, 'Anonymous', A).
mooCache(documentation(during, string('"(during ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 starts after and ends before ?INTERVAL2."')), documentation(during, string('"(during ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 starts after and ends before ?INTERVAL2."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4272, 'Anonymous', A).
mooCache(instance(meetsTemporally, 'BinaryPredicate'), instance(meetsTemporally, 'BinaryPredicate'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4276, 'Anonymous', A).
mooCache(instance(meetsTemporally, 'AsymmetricRelation'), instance(meetsTemporally, 'AsymmetricRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4280, 'Anonymous', A).
mooCache(domain(meetsTemporally, 1, 'TimeInterval'), domain(meetsTemporally, 1, 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4284, 'Anonymous', A).
mooCache(documentation(meetsTemporally, string('"(meetsTemporally ?INTERVAL1 ?INTERVAL2)   means that the terminal point of the TimeInterval ?INTERVAL1 is the   initial point of the TimeInterval ?INTERVAL2."')), documentation(meetsTemporally, string('"(meetsTemporally ?INTERVAL1 ?INTERVAL2)   means that the terminal point of the TimeInterval ?INTERVAL1 is the   initial point of the TimeInterval ?INTERVAL2."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4288, 'Anonymous', A).
mooCache(=>(and(equal('BeginFn'(A), 'BeginFn'(B)), equal('EndFn'(A), 'EndFn'(B))), equal(A, B)), and(entails(and(equal('BeginFn'(A), 'BeginFn'(B)), equal('EndFn'(A), 'EndFn'(B))), equal(A, B)), and(entails(and(not(equal(A, B)), equal('EndFn'(A), 'EndFn'(B))), not(equal('BeginFn'(A), 'BeginFn'(B)))), entails(and(not(equal(A, B)), equal('BeginFn'(A), 'BeginFn'(B))), not(equal('EndFn'(A), 'EndFn'(B)))))), [domainV(B, ['BeginFn':1, 'EndFn':1]), domainV(A, ['BeginFn':1, 'EndFn':1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4292, 'Anonymous', D).
mooCache(instance(earlier, 'TemporalRelation'), instance(earlier, 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4296, 'Anonymous', A).
mooCache(instance(earlier, 'IrreflexiveRelation'), instance(earlier, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4300, 'Anonymous', A).
mooCache(domain(earlier, 2, 'TimeInterval'), domain(earlier, 2, 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4304, 'Anonymous', A).
mooCache(<=>(earlier(A, B), before('EndFn'(A), 'BeginFn'(B))), and(and(entails(earlier(A, B), before('EndFn'(A), 'BeginFn'(B))), entails(not(before('EndFn'(A), 'BeginFn'(B))), not(earlier(A, B)))), and(entails(before('EndFn'(A), 'BeginFn'(B)), earlier(A, B)), entails(not(earlier(A, B)), not(before('EndFn'(A), 'BeginFn'(B)))))), [domainV(B, ['BeginFn':1, earlier:2]), domainV(A, ['EndFn':1, earlier:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4308, 'Anonymous', D).
mooCache(instance(cooccur, 'TemporalRelation'), instance(cooccur, 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4312, 'Anonymous', A).
mooCache(domain(cooccur, 1, 'Physical'), domain(cooccur, 1, 'Physical'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4316, 'Anonymous', A).
mooCache(documentation(cooccur, string('"(cooccur ?THING1 ?THING2) means that the   Object or Process ?THING1 occurs at the same time as, together with,   or jointly with the Object or Process ?THING2.  This covers the   following temporal relations:  is co-incident with, is concurrent with,   is contemporaneous with, and is concomitant with."')), documentation(cooccur, string('"(cooccur ?THING1 ?THING2) means that the   Object or Process ?THING1 occurs at the same time as, together with,   or jointly with the Object or Process ?THING2.  This covers the   following temporal relations:  is co-incident with, is concurrent with,   is contemporaneous with, and is concomitant with."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4320, 'Anonymous', A).
mooCache(instance('TimeIntervalFn', 'BinaryFunction'), instance('TimeIntervalFn', 'BinaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4326, 'Anonymous', A).
mooCache(domain('TimeIntervalFn', 1, 'TimePoint'), domain('TimeIntervalFn', 1, 'TimePoint'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4330, 'Anonymous', A).
mooCache(range('TimeIntervalFn', 'TimeInterval'), range('TimeIntervalFn', 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4334, 'Anonymous', A).
mooCache(=>(equal('TimeIntervalFn'(A, B), C), and(equal('BeginFn'(C), A), equal('EndFn'(C), B))), and(and(entails(not(holds('BeginFn', C, A)), not(holds('TimeIntervalFn', A, B, C))), entails(holds('TimeIntervalFn', A, B, C), holds('BeginFn', C, A))), and(entails(not(holds('EndFn', C, B)), not(holds('TimeIntervalFn', A, B, C))), entails(holds('TimeIntervalFn', A, B, C), holds('EndFn', C, B)))), [domainV(C, ['BeginFn':1, 'EndFn':1, 'TimeIntervalFn':3]), domainV(B, ['EndFn':2, 'TimeIntervalFn':2]), domainV(A, ['BeginFn':2, 'TimeIntervalFn':1]), domainV(D, []), forall(A), forall(B), forall(C)], ['POINT1'=A, 'POINT2'=B, 'INTERVAL'=C], 'PrologMOO', 'TEMPORAL CONCEPTS', 4338, 'Anonymous', E).
mooCache(instance('WhenFn', 'TemporalRelation'), instance('WhenFn', 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4342, 'Anonymous', A).
mooCache(domain('WhenFn', 1, 'Physical'), domain('WhenFn', 1, 'Physical'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4346, 'Anonymous', A).
mooCache(documentation('WhenFn', string('"A UnaryFunction that maps an Object or   Process to the exact TimeInterval during which it exists.  Note   that, for every TimePoint ?TIME outside of the TimeInterval   (WhenFn ?THING), (time ?THING ?TIME) does not hold."')), documentation('WhenFn', string('"A UnaryFunction that maps an Object or   Process to the exact TimeInterval during which it exists.  Note   that, for every TimePoint ?TIME outside of the TimeInterval   (WhenFn ?THING), (time ?THING ?TIME) does not hold."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4350, 'Anonymous', A).
mooCache(instance('PastFn', 'TemporalRelation'), instance('PastFn', 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4354, 'Anonymous', A).
mooCache(domain('PastFn', 1, 'TimePosition'), domain('PastFn', 1, 'TimePosition'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4358, 'Anonymous', A).
mooCache(documentation('PastFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval that meets it and that begins at   NegativeInfinity."')), documentation('PastFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval that meets it and that begins at   NegativeInfinity."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4362, 'Anonymous', A).
mooCache(equal('BeginFn'('PastFn'(A)), 'NegativeInfinity'), equal('BeginFn'('PastFn'(A)), 'NegativeInfinity'), [domainV(A, ['PastFn':1]), domainV(B, []), forall(A)], ['TIME'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4366, 'Anonymous', C).
mooCache(instance('ImmediatePastFn', 'UnaryFunction'), instance('ImmediatePastFn', 'UnaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4370, 'Anonymous', A).
mooCache(range('ImmediatePastFn', 'TimeInterval'), range('ImmediatePastFn', 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4374, 'Anonymous', A).
mooCache(finishes('ImmediatePastFn'('WhenFn'(A)), 'PastFn'('WhenFn'(A))), finishes('ImmediatePastFn'('WhenFn'(A)), 'PastFn'('WhenFn'(A))), [domainV(A, ['WhenFn':1]), domainV(B, []), forall(A)], ['THING'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4378, 'Anonymous', C).
mooCache(instance('FutureFn', 'TemporalRelation'), instance('FutureFn', 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4382, 'Anonymous', A).
mooCache(domain('FutureFn', 1, 'TimePosition'), domain('FutureFn', 1, 'TimePosition'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4386, 'Anonymous', A).
mooCache(documentation('FutureFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval which it meets and which ends at   PositiveInfinity."')), documentation('FutureFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval which it meets and which ends at   PositiveInfinity."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4390, 'Anonymous', A).
mooCache(equal('EndFn'('FutureFn'(A)), 'PositiveInfinity'), equal('EndFn'('FutureFn'(A)), 'PositiveInfinity'), [domainV(A, ['FutureFn':1]), domainV(B, []), forall(A)], ['TIME'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4394, 'Anonymous', C).
mooCache(instance('ImmediateFutureFn', 'UnaryFunction'), instance('ImmediateFutureFn', 'UnaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4398, 'Anonymous', A).
mooCache(range('ImmediateFutureFn', 'TimeInterval'), range('ImmediateFutureFn', 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4402, 'Anonymous', A).
mooCache(starts('ImmediateFutureFn'('WhenFn'(A)), 'FutureFn'('WhenFn'(A))), starts('ImmediateFutureFn'('WhenFn'(A)), 'FutureFn'('WhenFn'(A))), [domainV(A, ['WhenFn':1]), domainV(B, []), forall(A)], ['THING'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4406, 'Anonymous', C).
mooCache(instance(date, 'AsymmetricRelation'), instance(date, 'AsymmetricRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4414, 'Anonymous', A).
mooCache(domain(date, 2, 'Day'), domain(date, 2, 'Day'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4418, 'Anonymous', A).
mooCache(singleValued(date, 2), singleValued(date, 2), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4422, 'Anonymous', A).
mooCache(instance('YearFn', 'TemporalRelation'), instance('YearFn', 'TemporalRelation'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4426, 'Anonymous', A).
mooCache(domain('YearFn', 1, 'Integer'), domain('YearFn', 1, 'Integer'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4430, 'Anonymous', A).
mooCache(documentation('YearFn', string('"A UnaryFunction that maps a number to the   corresponding calendar Year.  For example, (YearFn 1912) denotes   the Year 1912."')), documentation('YearFn', string('"A UnaryFunction that maps a number to the   corresponding calendar Year.  For example, (YearFn 1912) denotes   the Year 1912."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4434, 'Anonymous', A).
mooCache(instance('MonthFn', 'BinaryFunction'), instance('MonthFn', 'BinaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4438, 'Anonymous', A).
mooCache(domain('MonthFn', 2, 'Year'), domain('MonthFn', 2, 'Year'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4442, 'Anonymous', A).
mooCache(documentation('MonthFn', string('"A BinaryFunction that maps a subclass of   Month and an instance of Year to the corresponding Month of the   Year.  For example (MonthFn January (YearFn 1912)) denotes the   eighth Month, i.e. August, of the Year 1912."')), documentation('MonthFn', string('"A BinaryFunction that maps a subclass of   Month and an instance of Year to the corresponding Month of the   Year.  For example (MonthFn January (YearFn 1912)) denotes the   eighth Month, i.e. August, of the Year 1912."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4446, 'Anonymous', A).
mooCache(instance('DayFn', 'BinaryFunction'), instance('DayFn', 'BinaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4450, 'Anonymous', A).
mooCache(domain('DayFn', 2, 'Month'), domain('DayFn', 2, 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4454, 'Anonymous', A).
mooCache(documentation('DayFn', string('"A BinaryFunction that maps a number and a   Month to the corresponding Day of the Month.  For example,   (DayFn 18 (MonthFn 8 (YearFn 1912))) denotes the 18th day of   August 1912."')), documentation('DayFn', string('"A BinaryFunction that maps a number and a   Month to the corresponding Day of the Month.  For example,   (DayFn 18 (MonthFn 8 (YearFn 1912))) denotes the 18th day of   August 1912."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4458, 'Anonymous', A).
mooCache(=>(and(equal(A, 'DayFn'(B, C)), and(equal(D, 'DayFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('DayFn', B, C, A), and(holds('DayFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('DayFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('DayFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('DayFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('DayFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('DayFn', B, C, A), holds('DayFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['DayFn':1, 'SubtractionFn':1]), domainV(D, ['DayFn':3, meetsTemporally:2]), domainV(C, ['DayFn':2]), domainV(B, ['DayFn':1, 'SubtractionFn':2]), domainV(A, ['DayFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['DAY1'=A, 'NUMBER1'=B, 'MONTH'=C, 'DAY2'=D, 'NUMBER2'=E], 'PrologMOO', 'TEMPORAL CONCEPTS', 4462, 'Anonymous', G).
mooCache(instance('HourFn', 'BinaryFunction'), instance('HourFn', 'BinaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4466, 'Anonymous', A).
mooCache(domain('HourFn', 2, 'Day'), domain('HourFn', 2, 'Day'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4470, 'Anonymous', A).
mooCache(documentation('HourFn', string('"A BinaryFunction that maps a number and a   Day to the corresponding Hour of the Day.  For example,    (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))) denotes the   14th hour, i.e. 2 PM, on the 18th day of August 1912."')), documentation('HourFn', string('"A BinaryFunction that maps a number and a   Day to the corresponding Hour of the Day.  For example,    (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))) denotes the   14th hour, i.e. 2 PM, on the 18th day of August 1912."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4474, 'Anonymous', A).
mooCache(=>(and(equal(A, 'HourFn'(B, C)), and(equal(D, 'HourFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('HourFn', B, C, A), and(holds('HourFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('HourFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('HourFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('HourFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('HourFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('HourFn', B, C, A), holds('HourFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['HourFn':1, 'SubtractionFn':1]), domainV(D, ['HourFn':3, meetsTemporally:2]), domainV(C, ['HourFn':2]), domainV(B, ['HourFn':1, 'SubtractionFn':2]), domainV(A, ['HourFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['HOUR1'=A, 'NUMBER1'=B, 'DAY'=C, 'HOUR2'=D, 'NUMBER2'=E], 'PrologMOO', 'TEMPORAL CONCEPTS', 4478, 'Anonymous', G).
mooCache(instance('MinuteFn', 'BinaryFunction'), instance('MinuteFn', 'BinaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4482, 'Anonymous', A).
mooCache(domain('MinuteFn', 2, 'Hour'), domain('MinuteFn', 2, 'Hour'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4486, 'Anonymous', A).
mooCache(documentation('MinuteFn', string('"A BinaryFunction that maps a number and an   Hour to the corresponding Minute of the Hour.  For example,   (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))))   denotes 15 minutes after 2 PM on the 18th day of August 1912."')), documentation('MinuteFn', string('"A BinaryFunction that maps a number and an   Hour to the corresponding Minute of the Hour.  For example,   (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))))   denotes 15 minutes after 2 PM on the 18th day of August 1912."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4490, 'Anonymous', A).
mooCache(=>(and(equal(A, 'MinuteFn'(B, C)), and(equal(D, 'MinuteFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('MinuteFn', B, C, A), and(holds('MinuteFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('MinuteFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('MinuteFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('MinuteFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('MinuteFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('MinuteFn', B, C, A), holds('MinuteFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['MinuteFn':1, 'SubtractionFn':1]), domainV(D, ['MinuteFn':3, meetsTemporally:2]), domainV(C, ['MinuteFn':2]), domainV(B, ['MinuteFn':1, 'SubtractionFn':2]), domainV(A, ['MinuteFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['MINUTE1'=A, 'NUMBER1'=B, 'HOUR'=C, 'MINUTE2'=D, 'NUMBER2'=E], 'PrologMOO', 'TEMPORAL CONCEPTS', 4494, 'Anonymous', G).
mooCache(instance('SecondFn', 'BinaryFunction'), instance('SecondFn', 'BinaryFunction'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4498, 'Anonymous', A).
mooCache(domain('SecondFn', 2, 'Minute'), domain('SecondFn', 2, 'Minute'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4502, 'Anonymous', A).
mooCache(documentation('SecondFn', string('"A BinaryFunction that maps a number and a   Minute to the corresponding Second of the Minute.  For example,  (SecondFn 9 (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8   (YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the   18th day of August 1912."')), documentation('SecondFn', string('"A BinaryFunction that maps a number and a   Minute to the corresponding Second of the Minute.  For example,  (SecondFn 9 (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8   (YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the   18th day of August 1912."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4506, 'Anonymous', A).
mooCache(=>(and(equal(A, 'SecondFn'(B, C)), and(equal(D, 'SecondFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('SecondFn', B, C, A), and(holds('SecondFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('SecondFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('SecondFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('SecondFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('SecondFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('SecondFn', B, C, A), holds('SecondFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['SecondFn':1, 'SubtractionFn':1]), domainV(D, ['SecondFn':3, meetsTemporally:2]), domainV(C, ['SecondFn':2]), domainV(B, ['SecondFn':1, 'SubtractionFn':2]), domainV(A, ['SecondFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['SECOND1'=A, 'NUMBER1'=B, 'MINUTE'=C, 'SECOND2'=D, 'NUMBER2'=E], 'PrologMOO', 'TEMPORAL CONCEPTS', 4510, 'Anonymous', G).
mooCache(relatedInternalConcept('Year', 'YearFn'), relatedInternalConcept('Year', 'YearFn'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4514, 'Anonymous', A).
mooCache(documentation('Year', string('"The Class of all calendar Years."')), documentation('Year', string('"The Class of all calendar Years."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4518, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Year'), and(instance(B, 'Year'), equal('SubtractionFn'(B, A), 1))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Year'), and(instance(B, 'Year'), equal('SubtractionFn'(B, A), 1))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Year'), equal('SubtractionFn'(B, A), 1))), not(instance(A, 'Year'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Year'), equal('SubtractionFn'(B, A), 1))), not(instance(B, 'Year'))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Year'), instance(B, 'Year'))), not(equal('SubtractionFn'(B, A), 1)))))), [domainV(B, ['$instanceof':'Year', 'SubtractionFn':1, meetsTemporally:2]), domainV(A, ['$instanceof':'Year', 'SubtractionFn':2, meetsTemporally:1]), domainV(C, []), forall(A), forall(B)], ['YEAR1'=A, 'YEAR2'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4522, 'Anonymous', D).
mooCache(documentation('LeapYear', string('"The Class of all leap years.  These are years   which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly   divisible by 400 (this latter case is known as a leap century)."')), documentation('LeapYear', string('"The Class of all leap years.  These are years   which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly   divisible by 400 (this latter case is known as a leap century)."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4526, 'Anonymous', A).
mooCache(subclass('Month', 'TimeInterval'), subclass('Month', 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4530, 'Anonymous', A).
mooCache(documentation('Month', string('"The Class of all calendar Months."')), documentation('Month', string('"The Class of all calendar Months."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4534, 'Anonymous', A).
mooCache(documentation('January', string('"The Class of all Months which are January."')), documentation('January', string('"The Class of all Months which are January."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4538, 'Anonymous', A).
mooCache(=>(and(equal(A, 'MonthFn'('January', B)), equal(C, 'MonthFn'('February', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'January', B, A), holds('MonthFn', 'February', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'February', B, C)), not(holds('MonthFn', 'January', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'January', B, A)), not(holds('MonthFn', 'February', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'PrologMOO', 'TEMPORAL CONCEPTS', 4542, 'Anonymous', E).
mooCache(documentation('February', string('"The Class of all Months which are February."')), documentation('February', string('"The Class of all Months which are February."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4546, 'Anonymous', A).
mooCache(=>(and(equal('MonthFn'('February', A), B), instance(A, 'LeapYear')), duration(B, 'MeasureFn'(29, 'DayDuration'))), and(entails(and(holds('MonthFn', 'February', A, B), instance(A, 'LeapYear')), duration(B, 'MeasureFn'(29, 'DayDuration'))), and(entails(and(not(duration(B, 'MeasureFn'(29, 'DayDuration'))), instance(A, 'LeapYear')), not(holds('MonthFn', 'February', A, B))), entails(and(not(duration(B, 'MeasureFn'(29, 'DayDuration'))), holds('MonthFn', 'February', A, B)), not(instance(A, 'LeapYear'))))), [domainV(B, ['MonthFn':3, duration:1]), domainV(A, ['$instanceof':'LeapYear', 'MonthFn':2]), domainV(C, []), forall(A), forall(B)], ['YEAR'=A, 'MONTH'=B], 'PrologMOO', 'TEMPORAL CONCEPTS', 4550, 'Anonymous', D).
mooCache(subclass('March', 'Month'), subclass('March', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4554, 'Anonymous', A).
mooCache(=>(instance(A, 'March'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'March'))), entails(instance(A, 'March'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'March', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4558, 'Anonymous', C).
mooCache(subclass('April', 'Month'), subclass('April', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4562, 'Anonymous', A).
mooCache(=>(instance(A, 'April'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'April'))), entails(instance(A, 'April'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'April', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4566, 'Anonymous', C).
mooCache(subclass('May', 'Month'), subclass('May', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4570, 'Anonymous', A).
mooCache(=>(instance(A, 'May'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'May'))), entails(instance(A, 'May'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'May', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4574, 'Anonymous', C).
mooCache(subclass('June', 'Month'), subclass('June', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4578, 'Anonymous', A).
mooCache(=>(instance(A, 'June'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'June'))), entails(instance(A, 'June'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'June', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4582, 'Anonymous', C).
mooCache(subclass('July', 'Month'), subclass('July', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4586, 'Anonymous', A).
mooCache(=>(instance(A, 'July'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'July'))), entails(instance(A, 'July'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'July', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4590, 'Anonymous', C).
mooCache(subclass('August', 'Month'), subclass('August', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4594, 'Anonymous', A).
mooCache(=>(instance(A, 'August'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'August'))), entails(instance(A, 'August'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'August', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4598, 'Anonymous', C).
mooCache(subclass('September', 'Month'), subclass('September', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4602, 'Anonymous', A).
mooCache(=>(instance(A, 'September'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'September'))), entails(instance(A, 'September'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'September', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4606, 'Anonymous', C).
mooCache(subclass('October', 'Month'), subclass('October', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4610, 'Anonymous', A).
mooCache(=>(instance(A, 'October'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'October'))), entails(instance(A, 'October'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'October', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4614, 'Anonymous', C).
mooCache(subclass('November', 'Month'), subclass('November', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4618, 'Anonymous', A).
mooCache(=>(instance(A, 'November'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'November'))), entails(instance(A, 'November'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'November', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4622, 'Anonymous', C).
mooCache(subclass('December', 'Month'), subclass('December', 'Month'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4626, 'Anonymous', A).
mooCache(=>(instance(A, 'December'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'December'))), entails(instance(A, 'December'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'December', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4630, 'Anonymous', C).
mooCache(subclass('Day', 'TimeInterval'), subclass('Day', 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4634, 'Anonymous', A).
mooCache(relatedInternalConcept('Day', 'DayDuration'), relatedInternalConcept('Day', 'DayDuration'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4638, 'Anonymous', A).
mooCache(=>(instance(A, 'Day'), duration(A, 'DayDuration')), and(entails(not(duration(A, 'DayDuration')), not(instance(A, 'Day'))), entails(instance(A, 'Day'), duration(A, 'DayDuration'))), [domainV(A, ['$instanceof':'Day', duration:1]), domainV(B, []), forall(A)], ['DAY'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4642, 'Anonymous', C).
mooCache(documentation('Monday', string('"The Class of all calendar Mondays."')), documentation('Monday', string('"The Class of all calendar Mondays."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4646, 'Anonymous', A).
mooCache(documentation('Tuesday', string('"The Class of all calendar Tuesdays."')), documentation('Tuesday', string('"The Class of all calendar Tuesdays."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4650, 'Anonymous', A).
mooCache(subclass('Wednesday', 'Day'), subclass('Wednesday', 'Day'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4654, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Tuesday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Wednesday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Wednesday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Tuesday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'PrologMOO', 'TEMPORAL CONCEPTS', 4658, 'Anonymous', E).
mooCache(documentation('Thursday', string('"The Class of all calendar Thursdays."')), documentation('Thursday', string('"The Class of all calendar Thursdays."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4662, 'Anonymous', A).
mooCache(subclass('Friday', 'Day'), subclass('Friday', 'Day'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4666, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Friday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Thursday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Friday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Friday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Thursday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'PrologMOO', 'TEMPORAL CONCEPTS', 4670, 'Anonymous', E).
mooCache(documentation('Saturday', string('"The Class of all calendar Saturdays."')), documentation('Saturday', string('"The Class of all calendar Saturdays."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4674, 'Anonymous', A).
mooCache(subclass('Sunday', 'Day'), subclass('Sunday', 'Day'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4678, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Sunday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Saturday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Sunday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Sunday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Saturday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'PrologMOO', 'TEMPORAL CONCEPTS', 4682, 'Anonymous', E).
mooCache(subclass('Week', 'TimeInterval'), subclass('Week', 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4686, 'Anonymous', A).
mooCache(=>(instance(A, 'Week'), duration(A, 'WeekDuration')), and(entails(not(duration(A, 'WeekDuration')), not(instance(A, 'Week'))), entails(instance(A, 'Week'), duration(A, 'WeekDuration'))), [domainV(A, ['$instanceof':'Week', duration:1]), domainV(B, []), forall(A)], ['WEEK'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4690, 'Anonymous', C).
mooCache(relatedInternalConcept('Hour', 'HourFn'), relatedInternalConcept('Hour', 'HourFn'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4694, 'Anonymous', A).
mooCache(documentation('Hour', string('"The Class of all clock Hours."')), documentation('Hour', string('"The Class of all clock Hours."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4698, 'Anonymous', A).
mooCache(subclass('Minute', 'TimeInterval'), subclass('Minute', 'TimeInterval'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4702, 'Anonymous', A).
mooCache(relatedInternalConcept('Minute', 'MinuteDuration'), relatedInternalConcept('Minute', 'MinuteDuration'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4706, 'Anonymous', A).
mooCache(=>(instance(A, 'Minute'), duration(A, 'MinuteDuration')), and(entails(not(duration(A, 'MinuteDuration')), not(instance(A, 'Minute'))), entails(instance(A, 'Minute'), duration(A, 'MinuteDuration'))), [domainV(A, ['$instanceof':'Minute', duration:1]), domainV(B, []), forall(A)], ['MINUTE'=A], 'PrologMOO', 'TEMPORAL CONCEPTS', 4710, 'Anonymous', C).
mooCache(relatedInternalConcept('Second', 'SecondDuration'), relatedInternalConcept('Second', 'SecondDuration'), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4714, 'Anonymous', A).
mooCache(documentation('Second', string('"The Class of all clock Seconds."')), documentation('Second', string('"The Class of all clock Seconds."')), [], [], 'PrologMOO', 'TEMPORAL CONCEPTS', 4718, 'Anonymous', A).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4732, 'Anonymous', A).
mooCache(instance(connected, 'BinaryPredicate'), instance(connected, 'BinaryPredicate'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4742, 'Anonymous', A).
mooCache(instance(connected, 'ReflexiveRelation'), instance(connected, 'ReflexiveRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4746, 'Anonymous', A).
mooCache(domain(connected, 1, 'Object'), domain(connected, 1, 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4750, 'Anonymous', A).
mooCache(documentation(connected, string('"(connected ?OBJ1 ?OBJ2) means that ?OBJ1   meetsSpatially ?OBJ2 or that ?OBJ1 overlapsSpatially ?OBJ2."')), documentation(connected, string('"(connected ?OBJ1 ?OBJ2) means that ?OBJ1   meetsSpatially ?OBJ2 or that ?OBJ1 overlapsSpatially ?OBJ2."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4754, 'Anonymous', A).
mooCache(<=>(instance(A, 'SelfConnectedObject'), forall(B, forall(C, =>(equal(A, 'MereologicalSumFn'(C, B)), connected(C, B))))), and(and(entails(not(instance(A, 'SelfConnectedObject')), holds('MereologicalSumFn', C, B, A)), and(entails(and(and(not(instance(A, 'SelfConnectedObject')), '$existential'(B, '?PART2', not(forall(C, =>(holds('MereologicalSumFn', C, '?PART2', A), connected(C, '?PART2')))))), '$existential'(C, '?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B))))), not(connected(C, B))), entails(or(not(holds('MereologicalSumFn', C, B, A)), connected(C, B)), instance(A, 'SelfConnectedObject')))), and(entails(and(and(holds('MereologicalSumFn', C, B, A), not(connected(C, B))), '$existential'(C, '?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B))))), not(instance(A, 'SelfConnectedObject'))), and(entails(and(and(and(instance(A, 'SelfConnectedObject'), not(connected(C, B))), '$existential'(B, '?PART2', not(forall(C, =>(holds('MereologicalSumFn', C, '?PART2', A), connected(C, '?PART2')))))), '$existential'(C, '?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B))))), not(holds('MereologicalSumFn', C, B, A))), entails(and(instance(A, 'SelfConnectedObject'), holds('MereologicalSumFn', C, B, A)), connected(C, B))))), [domainV(C, ['MereologicalSumFn':1, connected:1]), domainV(B, ['MereologicalSumFn':2, connected:2]), domainV(A, ['$instanceof':'SelfConnectedObject', 'MereologicalSumFn':3]), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(B, '$existential'('?PART2', not(forall(C, =>(holds('MereologicalSumFn', C, '?PART2', A), connected(C, '?PART2')))))), replaceConsVar(C, '$existential'('?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B)))))], ['OBJ'=A, 'PART1'=C, 'PART2'=B], 'PrologMOO', 'MEREOTOPOLOGY', 4758, 'Anonymous', E).
mooCache(instance(connects, 'TernaryPredicate'), instance(connects, 'TernaryPredicate'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4762, 'Anonymous', A).
mooCache(domain(connects, 2, 'Object'), domain(connects, 2, 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4766, 'Anonymous', A).
mooCache(documentation(connects, string('"The relationship between three things, when one of   the three things connects the other two.  More formally, (connects ?OBJ1   ?OBJ2 ?OBJ3) means that (connected ?OBJ1 ?OBJ2) and (connected ?OBJ1 ?OBJ3)   and not (connected ?OBJ2 ?OBJ3)."')), documentation(connects, string('"The relationship between three things, when one of   the three things connects the other two.  More formally, (connects ?OBJ1   ?OBJ2 ?OBJ3) means that (connected ?OBJ1 ?OBJ2) and (connected ?OBJ1 ?OBJ3)   and not (connected ?OBJ2 ?OBJ3)."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4770, 'Anonymous', A).
mooCache(subrelation(meetsSpatially, connected), subrelation(meetsSpatially, connected), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4774, 'Anonymous', A).
mooCache(documentation(meetsSpatially, string('"(meetsSpatially ?OBJ1 ?OBJ2) means that   ?OBJ1 and ?OBJ2 are connected but that neither ?OBJ1 nor ?OBJ2   overlapsSpatially the other."')), documentation(meetsSpatially, string('"(meetsSpatially ?OBJ1 ?OBJ2) means that   ?OBJ1 and ?OBJ2 are connected but that neither ?OBJ1 nor ?OBJ2   overlapsSpatially the other."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4778, 'Anonymous', A).
mooCache(documentation(overlapsSpatially, string('"(overlapsSpatially ?OBJ1 ?OBJ2) means   that the Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a   reflexive and symmetric (but not transitive) relation."')), documentation(overlapsSpatially, string('"(overlapsSpatially ?OBJ1 ?OBJ2) means   that the Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a   reflexive and symmetric (but not transitive) relation."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4782, 'Anonymous', A).
mooCache(=>(forall(A, =>(part(A, B), overlapsSpatially(A, C))), part(B, C)), and(and(entails(not(part(B, C)), part(A, B)), entails(not(part(A, B)), part(B, C))), and(entails(and(not(part(B, C)), '$existential'(A, '?OBJ3', not(=>(part('?OBJ3', B), overlapsSpatially('?OBJ3', C))))), not(overlapsSpatially(A, C))), entails(overlapsSpatially(A, C), part(B, C)))), [domainV(C, [overlapsSpatially:2, part:2]), domainV(B, [part:1, part:2]), domainV(A, [overlapsSpatially:1, part:1]), domainV(D, []), forall(B), forall(C), replaceConsVar(A, '$existential'('?OBJ3', not(=>(part('?OBJ3', B), overlapsSpatially('?OBJ3', C)))))], ['OBJ3'=A, 'OBJ1'=B, 'OBJ2'=C], 'PrologMOO', 'MEREOTOPOLOGY', 4786, 'Anonymous', E).
mooCache(=>(and(member(A, B), member(C, B)), not(overlapsSpatially(A, C))), and(entails(and(member(A, B), member(C, B)), not(overlapsSpatially(A, C))), and(entails(and(overlapsSpatially(A, C), member(C, B)), not(member(A, B))), entails(and(overlapsSpatially(A, C), member(A, B)), not(member(C, B))))), [domainV(C, [member:1, overlapsSpatially:2]), domainV(B, [member:2]), domainV(A, [member:1, overlapsSpatially:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'COLL'=B, 'OBJ2'=C], 'PrologMOO', 'MEREOTOPOLOGY', 4790, 'Anonymous', E).
mooCache(subrelation(overlapsPartially, overlapsSpatially), subrelation(overlapsPartially, overlapsSpatially), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4794, 'Anonymous', A).
mooCache(=>(overlapsPartially(A, B), and(not(part(A, B)), not(part(B, A)))), and(and(entails(part(A, B), not(overlapsPartially(A, B))), entails(overlapsPartially(A, B), not(part(A, B)))), and(entails(part(B, A), not(overlapsPartially(A, B))), entails(overlapsPartially(A, B), not(part(B, A))))), [domainV(B, [overlapsPartially:2, part:1, part:2]), domainV(A, [overlapsPartially:1, part:1, part:2]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'PrologMOO', 'MEREOTOPOLOGY', 4798, 'Anonymous', D).
mooCache(instance(superficialPart, 'SpatialRelation'), instance(superficialPart, 'SpatialRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4802, 'Anonymous', A).
mooCache(documentation(superficialPart, string('"(superficialPart ?OBJ1 ?OBJ2)   means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own   (or, intuitively, that only overlaps those parts of ?OBJ2 that are   externally connected with the geometric complement of ?OBJ2). This too   is a transitive relation closed under MereologicalSumFn and   MereologicalProductFn."')), documentation(superficialPart, string('"(superficialPart ?OBJ1 ?OBJ2)   means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own   (or, intuitively, that only overlaps those parts of ?OBJ2 that are   externally connected with the geometric complement of ?OBJ2). This too   is a transitive relation closed under MereologicalSumFn and   MereologicalProductFn."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4806, 'Anonymous', A).
mooCache(subrelation(surface, superficialPart), subrelation(surface, superficialPart), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4810, 'Anonymous', A).
mooCache(=>(surface(A, B), and(instance(A, 'SelfConnectedObject'), forall(C, =>(superficialPart(C, B), part(C, A))))), and(and(entails(not(instance(A, 'SelfConnectedObject')), not(surface(A, B))), entails(surface(A, B), instance(A, 'SelfConnectedObject'))), and(entails(and(superficialPart(C, B), not(part(C, A))), not(surface(A, B))), and(entails(and(surface(A, B), not(part(C, A))), not(superficialPart(C, B))), entails(and(surface(A, B), superficialPart(C, B)), part(C, A))))), [domainV(C, [part:1, superficialPart:1]), domainV(B, [superficialPart:2, surface:2]), domainV(A, ['$instanceof':'SelfConnectedObject', part:2, surface:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'OBJ2'=B, 'OBJ3'=C], 'PrologMOO', 'MEREOTOPOLOGY', 4814, 'Anonymous', E).
mooCache(documentation(interiorPart, string('"(interiorPart ?OBJ1 ?OBJ2) means   that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and   any superficialPart ?OBJ2."')), documentation(interiorPart, string('"(interiorPart ?OBJ1 ?OBJ2) means   that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and   any superficialPart ?OBJ2."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4818, 'Anonymous', A).
mooCache(instance('MereologicalSumFn', 'SpatialRelation'), instance('MereologicalSumFn', 'SpatialRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4822, 'Anonymous', A).
mooCache(domain('MereologicalSumFn', 1, 'Object'), domain('MereologicalSumFn', 1, 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4826, 'Anonymous', A).
mooCache(range('MereologicalSumFn', 'Object'), range('MereologicalSumFn', 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4830, 'Anonymous', A).
mooCache(relatedInternalConcept('MereologicalSumFn', 'MereologicalDifferenceFn'), relatedInternalConcept('MereologicalSumFn', 'MereologicalDifferenceFn'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4834, 'Anonymous', A).
mooCache(=>(equal(A, 'MereologicalSumFn'(B, C)), forall(D, <=>(part(D, A), or(part(D, B), part(D, C))))), and(entails(and(or(part(D, B), part(D, C)), and(not(part(D, B)), not(part(D, C)))), not(holds('MereologicalSumFn', B, C, A))), and(and(entails(and(or(part(D, B), part(D, C)), not(part(D, A))), not(holds('MereologicalSumFn', B, C, A))), and(entails(and(holds('MereologicalSumFn', B, C, A), not(part(D, A))), not(part(D, B))), and(entails(and(holds('MereologicalSumFn', B, C, A), not(part(D, A))), not(part(D, C))), entails(and(holds('MereologicalSumFn', B, C, A), or(part(D, B), part(D, C))), part(D, A))))), and(entails(and(part(D, A), not(part(D, A))), not(holds('MereologicalSumFn', B, C, A))), and(entails(and(part(D, A), and(not(part(D, B)), not(part(D, C)))), not(holds('MereologicalSumFn', B, C, A))), and(entails(and(holds('MereologicalSumFn', B, C, A), and(not(part(D, B)), not(part(D, C)))), not(part(D, A))), and(entails(and(holds('MereologicalSumFn', B, C, A), and(part(D, A), not(part(D, C)))), part(D, B)), entails(and(holds('MereologicalSumFn', B, C, A), and(part(D, A), not(part(D, B)))), part(D, C)))))))), [domainV(D, [part:1]), domainV(C, ['MereologicalSumFn':2, part:2]), domainV(B, ['MereologicalSumFn':1, part:2]), domainV(A, ['MereologicalSumFn':3, part:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ3'=A, 'OBJ1'=B, 'OBJ2'=C, 'PART'=D], 'PrologMOO', 'MEREOTOPOLOGY', 4838, 'Anonymous', F).
mooCache(instance('MereologicalProductFn', 'BinaryFunction'), instance('MereologicalProductFn', 'BinaryFunction'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4842, 'Anonymous', A).
mooCache(domain('MereologicalProductFn', 2, 'Object'), domain('MereologicalProductFn', 2, 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4846, 'Anonymous', A).
mooCache(relatedInternalConcept('MereologicalProductFn', 'MereologicalDifferenceFn'), relatedInternalConcept('MereologicalProductFn', 'MereologicalDifferenceFn'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4850, 'Anonymous', A).
mooCache(=>(equal(A, 'MereologicalProductFn'(B, C)), forall(D, <=>(part(D, A), and(part(D, B), part(D, C))))), and(entails(and(or(not(part(D, B)), not(part(D, C))), and(part(D, B), part(D, C))), not(holds('MereologicalProductFn', B, C, A))), and(and(entails(and(or(not(part(D, B)), not(part(D, C))), part(D, A)), not(holds('MereologicalProductFn', B, C, A))), and(entails(and(holds('MereologicalProductFn', B, C, A), part(D, A)), part(D, B)), and(entails(and(holds('MereologicalProductFn', B, C, A), part(D, A)), part(D, C)), entails(and(holds('MereologicalProductFn', B, C, A), or(not(part(D, B)), not(part(D, C)))), not(part(D, A)))))), and(entails(and(not(part(D, A)), part(D, A)), not(holds('MereologicalProductFn', B, C, A))), and(entails(and(not(part(D, A)), and(part(D, B), part(D, C))), not(holds('MereologicalProductFn', B, C, A))), and(entails(and(holds('MereologicalProductFn', B, C, A), and(part(D, B), part(D, C))), part(D, A)), and(entails(and(holds('MereologicalProductFn', B, C, A), and(not(part(D, A)), part(D, C))), not(part(D, B))), entails(and(holds('MereologicalProductFn', B, C, A), and(not(part(D, A)), part(D, B))), not(part(D, C))))))))), [domainV(D, [part:1]), domainV(C, ['MereologicalProductFn':2, part:2]), domainV(B, ['MereologicalProductFn':1, part:2]), domainV(A, ['MereologicalProductFn':3, part:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ3'=A, 'OBJ1'=B, 'OBJ2'=C, 'PART'=D], 'PrologMOO', 'MEREOTOPOLOGY', 4854, 'Anonymous', F).
mooCache(instance('MereologicalDifferenceFn', 'BinaryFunction'), instance('MereologicalDifferenceFn', 'BinaryFunction'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4858, 'Anonymous', A).
mooCache(domain('MereologicalDifferenceFn', 2, 'Object'), domain('MereologicalDifferenceFn', 2, 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4862, 'Anonymous', A).
mooCache(documentation('MereologicalDifferenceFn', string('"(MereologicalDifferenceFn ?OBJ1   ?OBJ2) denotes the Object consisting of the parts which belong to ?OBJ1   and not to ?OBJ2."')), documentation('MereologicalDifferenceFn', string('"(MereologicalDifferenceFn ?OBJ1   ?OBJ2) denotes the Object consisting of the parts which belong to ?OBJ1   and not to ?OBJ2."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4866, 'Anonymous', A).
mooCache(instance(hole, 'BinaryPredicate'), instance(hole, 'BinaryPredicate'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4874, 'Anonymous', A).
mooCache(instance(hole, 'AsymmetricRelation'), instance(hole, 'AsymmetricRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4878, 'Anonymous', A).
mooCache(domain(hole, 2, 'Object'), domain(hole, 2, 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4882, 'Anonymous', A).
mooCache(subclass('Hole', 'Region'), subclass('Hole', 'Region'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4886, 'Anonymous', A).
mooCache(documentation('Hole', string('"A hole is an immaterial body located at the surface   of an Object.  Since every Hole is ontologically dependent on its host   (i.e., the object in which it is a hole), being a Hole is defined as   being a hole in something.  Note that two Holes may occupy the same   region, or part of the same region, without sharing any parts."')), documentation('Hole', string('"A hole is an immaterial body located at the surface   of an Object.  Since every Hole is ontologically dependent on its host   (i.e., the object in which it is a hole), being a Hole is defined as   being a hole in something.  Note that two Holes may occupy the same   region, or part of the same region, without sharing any parts."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4890, 'Anonymous', A).
mooCache(=>(hole(A, B), not(instance(B, 'Hole'))), and(entails(instance(B, 'Hole'), not(hole(A, B))), entails(hole(A, B), not(instance(B, 'Hole')))), [domainV(B, ['$instanceof':'Hole', hole:2]), domainV(A, [hole:1]), domainV(C, []), forall(A), forall(B)], ['HOLE'=A, 'OBJ'=B], 'PrologMOO', 'MEREOTOPOLOGY', 4894, 'Anonymous', D).
mooCache(=>(and(hole(A, B), hole(A, C)), exists(D, and(properPart(D, 'MereologicalProductFn'(B, C)), hole(A, D)))), and(and(entails(and(and(hole(A, B), hole(A, C)), '$existential'(D, '?OBJ3', and(properPart('?OBJ3', 'MereologicalProductFn'(B, C)), hole(A, '?OBJ3')))), properPart(D, 'MereologicalProductFn'(B, C))), and(entails(and(not(properPart(D, 'MereologicalProductFn'(B, C))), hole(A, C)), not(hole(A, B))), entails(and(not(properPart(D, 'MereologicalProductFn'(B, C))), hole(A, B)), not(hole(A, C))))), and(entails(and(and(hole(A, B), hole(A, C)), '$existential'(D, '?OBJ3', and(properPart('?OBJ3', 'MereologicalProductFn'(B, C)), hole(A, '?OBJ3')))), hole(A, D)), and(entails(and(not(hole(A, D)), hole(A, C)), not(hole(A, B))), entails(and(not(hole(A, D)), hole(A, B)), not(hole(A, C)))))), [domainV(D, [hole:2, properPart:1]), domainV(C, ['MereologicalProductFn':2, hole:2]), domainV(B, ['MereologicalProductFn':1, hole:2]), domainV(A, [hole:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?OBJ3', and(properPart('?OBJ3', 'MereologicalProductFn'(B, C)), hole(A, '?OBJ3'))))], ['HOLE'=A, 'OBJ1'=B, 'OBJ2'=C, 'OBJ3'=D], 'PrologMOO', 'MEREOTOPOLOGY', 4902, 'Anonymous', F).
mooCache(=>(and(hole(A, B), part(B, C)), or(overlapsSpatially(A, C), hole(A, C))), and(entails(and(part(B, C), and(not(overlapsSpatially(A, C)), not(hole(A, C)))), not(hole(A, B))), and(entails(and(hole(A, B), and(not(overlapsSpatially(A, C)), not(hole(A, C)))), not(part(B, C))), and(entails(and(and(hole(A, B), part(B, C)), not(hole(A, C))), overlapsSpatially(A, C)), entails(and(and(hole(A, B), part(B, C)), not(overlapsSpatially(A, C))), hole(A, C))))), [domainV(C, [hole:2, overlapsSpatially:2, part:2]), domainV(B, [hole:2, part:1]), domainV(A, [hole:1, overlapsSpatially:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['HOLE'=A, 'OBJ1'=B, 'OBJ2'=C], 'PrologMOO', 'MEREOTOPOLOGY', 4912, 'Anonymous', E).
mooCache(=>(instance(A, 'Hole'), exists(B, properPart(B, A))), and(entails(not(properPart(B, A)), not(instance(A, 'Hole'))), entails(and(instance(A, 'Hole'), '$existential'(B, '?HOLE2', properPart('?HOLE2', A))), properPart(B, A))), [domainV(B, [properPart:1]), domainV(A, ['$instanceof':'Hole', properPart:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?HOLE2', properPart('?HOLE2', A)))], ['HOLE1'=A, 'HOLE2'=B], 'PrologMOO', 'MEREOTOPOLOGY', 4920, 'Anonymous', D).
mooCache(instance('PrincipalHostFn', 'UnaryFunction'), instance('PrincipalHostFn', 'UnaryFunction'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4928, 'Anonymous', A).
mooCache(range('PrincipalHostFn', 'Object'), range('PrincipalHostFn', 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4932, 'Anonymous', A).
mooCache(=>(equal(A, 'PrincipalHostFn'(B)), forall(C, <=>(overlapsSpatially(C, A), exists(D, and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D))))))), and(entails(and(or(not(hole(B, D)), or(not(instance(D, 'SelfConnectedObject')), not(overlapsSpatially(C, D)))), and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), not(holds('PrincipalHostFn', B, A))), and(and(entails(and(or(not(hole(B, D)), or(not(instance(D, 'SelfConnectedObject')), not(overlapsSpatially(C, D)))), overlapsSpatially(C, A)), not(holds('PrincipalHostFn', B, A))), and(entails(and(and(holds('PrincipalHostFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), hole(B, D)), and(entails(and(and(holds('PrincipalHostFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), instance(D, 'SelfConnectedObject')), and(entails(and(and(holds('PrincipalHostFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), overlapsSpatially(C, D)), entails(and(holds('PrincipalHostFn', B, A), or(not(hole(B, D)), or(not(instance(D, 'SelfConnectedObject')), not(overlapsSpatially(C, D))))), not(overlapsSpatially(C, A))))))), and(entails(and(not(overlapsSpatially(C, A)), overlapsSpatially(C, A)), not(holds('PrincipalHostFn', B, A))), and(entails(and(not(overlapsSpatially(C, A)), and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), not(holds('PrincipalHostFn', B, A))), and(entails(and(holds('PrincipalHostFn', B, A), and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), overlapsSpatially(C, A)), and(entails(and(holds('PrincipalHostFn', B, A), and(not(overlapsSpatially(C, A)), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), not(hole(B, D))), and(entails(and(holds('PrincipalHostFn', B, A), and(not(overlapsSpatially(C, A)), and(hole(B, D), overlapsSpatially(C, D)))), not(instance(D, 'SelfConnectedObject'))), entails(and(holds('PrincipalHostFn', B, A), and(not(overlapsSpatially(C, A)), and(hole(B, D), instance(D, 'SelfConnectedObject')))), not(overlapsSpatially(C, D)))))))))), [domainV(D, ['$instanceof':'SelfConnectedObject', hole:2, overlapsSpatially:2]), domainV(C, [overlapsSpatially:1]), domainV(B, ['PrincipalHostFn':1, hole:1]), domainV(A, ['PrincipalHostFn':2, overlapsSpatially:2]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), forall(D)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C, 'OBJ3'=D], 'PrologMOO', 'MEREOTOPOLOGY', 4936, 'Anonymous', F).
mooCache(=>(hole(A, B), connected(A, B)), and(entails(not(connected(A, B)), not(hole(A, B))), entails(hole(A, B), connected(A, B))), [domainV(B, [connected:2, hole:2]), domainV(A, [connected:1, hole:1]), domainV(C, []), forall(A), forall(B)], ['HOLE'=A, 'OBJ'=B], 'PrologMOO', 'MEREOTOPOLOGY', 4944, 'Anonymous', D).
mooCache(=>(and(instance(A, 'Hole'), properPart(B, A)), exists(C, and(meetsSpatially(A, C), not(meetsSpatially(B, C))))), and(and(entails(and(and(instance(A, 'Hole'), properPart(B, A)), '$existential'(C, '?OBJ', and(meetsSpatially(A, '?OBJ'), not(meetsSpatially(B, '?OBJ'))))), meetsSpatially(A, C)), and(entails(and(not(meetsSpatially(A, C)), properPart(B, A)), not(instance(A, 'Hole'))), entails(and(not(meetsSpatially(A, C)), instance(A, 'Hole')), not(properPart(B, A))))), and(entails(and(instance(A, 'Hole'), properPart(B, A)), not(meetsSpatially(B, C))), and(entails(and(meetsSpatially(B, C), properPart(B, A)), not(instance(A, 'Hole'))), entails(and(meetsSpatially(B, C), instance(A, 'Hole')), not(properPart(B, A)))))), [domainV(C, [meetsSpatially:2]), domainV(B, [meetsSpatially:1, properPart:1]), domainV(A, ['$instanceof':'Hole', meetsSpatially:1, properPart:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?OBJ', and(meetsSpatially(A, '?OBJ'), not(meetsSpatially(B, '?OBJ')))))], ['HOLE1'=A, 'HOLE2'=B, 'OBJ'=C], 'PrologMOO', 'MEREOTOPOLOGY', 4954, 'Anonymous', E).
mooCache(instance(fills, 'SpatialRelation'), instance(fills, 'SpatialRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4958, 'Anonymous', A).
mooCache(subrelation(fills, completelyFills), subrelation(fills, completelyFills), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4962, 'Anonymous', A).
mooCache(domain(fills, 1, 'Object'), domain(fills, 1, 'Object'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4966, 'Anonymous', A).
mooCache(relatedInternalConcept(fills, 'Fillable'), relatedInternalConcept(fills, 'Fillable'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4970, 'Anonymous', A).
mooCache(instance('Fillable', 'ShapeProperty'), instance('Fillable', 'ShapeProperty'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4974, 'Anonymous', A).
mooCache(=>(holdsDuring(A, fills(B, C)), attribute(C, 'Fillable')), and(entails(not(attribute(C, 'Fillable')), not(holdsDuring(A, fills(B, C)))), entails(holdsDuring(A, fills(B, C)), attribute(C, 'Fillable'))), [domainV(C, [attribute:1, fills:2]), domainV(B, [fills:1]), domainV(A, [holdsDuring:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TIME'=A, 'OBJ'=B, 'HOLE'=C], 'PrologMOO', 'MEREOTOPOLOGY', 4978, 'Anonymous', E).
mooCache(instance(completelyFills, 'BinaryPredicate'), instance(completelyFills, 'BinaryPredicate'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4986, 'Anonymous', A).
mooCache(instance(completelyFills, 'AsymmetricRelation'), instance(completelyFills, 'AsymmetricRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4990, 'Anonymous', A).
mooCache(documentation(completelyFills, string('"(completelyFills ?OBJ ?HOLE)   means that some part of the Object ?OBJ fills the Hole ?HOLE.    Note that if (completelyFills ?OBJ1 ?HOLE) and (part   ?OBJ1 ?OBJ2), then (completelyFills ?OBJ2 ?HOLE)."')), documentation(completelyFills, string('"(completelyFills ?OBJ ?HOLE)   means that some part of the Object ?OBJ fills the Hole ?HOLE.    Note that if (completelyFills ?OBJ1 ?HOLE) and (part   ?OBJ1 ?OBJ2), then (completelyFills ?OBJ2 ?HOLE)."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4994, 'Anonymous', A).
mooCache(instance(partiallyFills, 'BinaryPredicate'), instance(partiallyFills, 'BinaryPredicate'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 4998, 'Anonymous', A).
mooCache(instance(partiallyFills, 'AsymmetricRelation'), instance(partiallyFills, 'AsymmetricRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5002, 'Anonymous', A).
mooCache(domain(partiallyFills, 2, 'Hole'), domain(partiallyFills, 2, 'Hole'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5006, 'Anonymous', A).
mooCache(=>(partiallyFills(A, B), exists(C, and(part(C, B), completelyFills(A, C)))), and(and(entails(not(part(C, B)), not(partiallyFills(A, B))), entails(and(partiallyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), completelyFills(A, '?HOLE2')))), part(C, B))), and(entails(not(completelyFills(A, C)), not(partiallyFills(A, B))), entails(and(partiallyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), completelyFills(A, '?HOLE2')))), completelyFills(A, C)))), [domainV(C, [completelyFills:2, part:1]), domainV(B, [part:2, partiallyFills:2]), domainV(A, [completelyFills:1, partiallyFills:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?HOLE2', and(part('?HOLE2', B), completelyFills(A, '?HOLE2'))))], ['OBJ'=A, 'HOLE1'=B, 'HOLE2'=C], 'PrologMOO', 'MEREOTOPOLOGY', 5010, 'Anonymous', E).
mooCache(instance(properlyFills, 'SpatialRelation'), instance(properlyFills, 'SpatialRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5014, 'Anonymous', A).
mooCache(subrelation(properlyFills, partiallyFills), subrelation(properlyFills, partiallyFills), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5018, 'Anonymous', A).
mooCache(domain(properlyFills, 2, 'Hole'), domain(properlyFills, 2, 'Hole'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5022, 'Anonymous', A).
mooCache(=>(properlyFills(A, B), exists(C, and(part(C, B), fills(A, C)))), and(and(entails(not(part(C, B)), not(properlyFills(A, B))), entails(and(properlyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), fills(A, '?HOLE2')))), part(C, B))), and(entails(not(fills(A, C)), not(properlyFills(A, B))), entails(and(properlyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), fills(A, '?HOLE2')))), fills(A, C)))), [domainV(C, [fills:2, part:1]), domainV(B, [part:2, properlyFills:2]), domainV(A, [fills:1, properlyFills:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?HOLE2', and(part('?HOLE2', B), fills(A, '?HOLE2'))))], ['OBJ'=A, 'HOLE1'=B, 'HOLE2'=C], 'PrologMOO', 'MEREOTOPOLOGY', 5026, 'Anonymous', E).
mooCache(=>(completelyFills(A, B), forall(C, =>(connected(C, B), connected(C, A)))), and(entails(and(connected(C, B), not(connected(C, A))), not(completelyFills(A, B))), and(entails(and(completelyFills(A, B), not(connected(C, A))), not(connected(C, B))), entails(and(completelyFills(A, B), connected(C, B)), connected(C, A)))), [domainV(C, [connected:1]), domainV(B, [completelyFills:2, connected:2]), domainV(A, [completelyFills:1, connected:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C], 'PrologMOO', 'MEREOTOPOLOGY', 5038, 'Anonymous', E).
mooCache(=>(and(fills(A, B), properPart(C, B)), completelyFills(A, C)), and(entails(and(fills(A, B), properPart(C, B)), completelyFills(A, C)), and(entails(and(not(completelyFills(A, C)), properPart(C, B)), not(fills(A, B))), entails(and(not(completelyFills(A, C)), fills(A, B)), not(properPart(C, B))))), [domainV(C, [completelyFills:2, properPart:1]), domainV(B, [fills:2, properPart:2]), domainV(A, [completelyFills:1, fills:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ'=A, 'HOLE1'=B, 'HOLE2'=C], 'PrologMOO', 'MEREOTOPOLOGY', 5050, 'Anonymous', E).
mooCache(instance('SkinFn', 'SpatialRelation'), instance('SkinFn', 'SpatialRelation'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5058, 'Anonymous', A).
mooCache(domain('SkinFn', 1, 'Hole'), domain('SkinFn', 1, 'Hole'), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5062, 'Anonymous', A).
mooCache(documentation('SkinFn', string('"A UnaryFunction that maps a Hole to the skin   of the Hole.  The skin of a Hole is the fusion of those superficial   parts (see superficialPart) of the Hole\'s principal host (see   PrincipalHostFn) with which the Hole is externally connected."')), documentation('SkinFn', string('"A UnaryFunction that maps a Hole to the skin   of the Hole.  The skin of a Hole is the fusion of those superficial   parts (see superficialPart) of the Hole\'s principal host (see   PrincipalHostFn) with which the Hole is externally connected."')), [], [], 'PrologMOO', 'MEREOTOPOLOGY', 5066, 'Anonymous', A).
mooCache('include-context'('TEMPORAL', 'CONCEPTS'), 'include-context'('TEMPORAL', 'CONCEPTS'), [], [], 'PrologMOO', 'PROCESSES', 5080, 'Anonymous', A).
mooCache('include-context'('QUALITIES'), 'include-context'('QUALITIES'), [], [], 'PrologMOO', 'PROCESSES', 5086, 'Anonymous', A).
mooCache(instance(subProcess, 'PartialOrderingRelation'), instance(subProcess, 'PartialOrderingRelation'), [], [], 'PrologMOO', 'PROCESSES', 5091, 'Anonymous', A).
mooCache(domain(subProcess, 2, 'Process'), domain(subProcess, 2, 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5095, 'Anonymous', A).
mooCache(=>(subProcess(A, B), or(equal('WhenFn'(A), 'WhenFn'(B)), during('WhenFn'(A), 'WhenFn'(B)))), and(entails(and(not(equal('WhenFn'(A), 'WhenFn'(B))), not(during('WhenFn'(A), 'WhenFn'(B)))), not(subProcess(A, B))), and(entails(and(subProcess(A, B), not(during('WhenFn'(A), 'WhenFn'(B)))), equal('WhenFn'(A), 'WhenFn'(B))), entails(and(subProcess(A, B), not(equal('WhenFn'(A), 'WhenFn'(B)))), during('WhenFn'(A), 'WhenFn'(B))))), [domainV(B, ['WhenFn':1, subProcess:2]), domainV(A, ['WhenFn':1, subProcess:1]), domainV(C, []), forall(A), forall(B)], ['SUBPROC'=A, 'PROC'=B], 'PrologMOO', 'PROCESSES', 5099, 'Anonymous', D).
mooCache(=>(and(instance(A, 'Process'), subProcess(B, A)), exists(C, time(B, C))), and(entails(and(and(instance(A, 'Process'), subProcess(B, A)), '$existential'(C, '?TIME', time(B, '?TIME'))), time(B, C)), and(entails(and(not(time(B, C)), subProcess(B, A)), not(instance(A, 'Process'))), entails(and(not(time(B, C)), instance(A, 'Process')), not(subProcess(B, A))))), [domainV(C, [time:2]), domainV(B, [subProcess:1, time:1]), domainV(A, ['$instanceof':'Process', subProcess:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?TIME', time(B, '?TIME')))], ['PROC'=A, 'SUBPROC'=B, 'TIME'=C], 'PrologMOO', 'PROCESSES', 5105, 'Anonymous', E).
mooCache(subclass('NonintentionalProcess', 'Process'), subclass('NonintentionalProcess', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5111, 'Anonymous', A).
mooCache(subclass('BiologicalProcess', 'NonintentionalProcess'), subclass('BiologicalProcess', 'NonintentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5119, 'Anonymous', A).
mooCache(=>(instance(A, 'BiologicalProcess'), exists(B, and(instance(B, 'Organism'), located(A, B)))), and(and(entails(not(instance(B, 'Organism')), not(instance(A, 'BiologicalProcess'))), entails(and(instance(A, 'BiologicalProcess'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'Organism'), located(A, '?OBJ')))), instance(B, 'Organism'))), and(entails(not(located(A, B)), not(instance(A, 'BiologicalProcess'))), entails(and(instance(A, 'BiologicalProcess'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'Organism'), located(A, '?OBJ')))), located(A, B)))), [domainV(B, ['$instanceof':'Organism', located:2]), domainV(A, ['$instanceof':'BiologicalProcess', located:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(instance('?OBJ', 'Organism'), located(A, '?OBJ'))))], ['PROC'=A, 'OBJ'=B], 'PrologMOO', 'PROCESSES', 5123, 'Anonymous', D).
mooCache(documentation('PhysiologicProcess', string('"A normal process of an Organism   or part of an Organism."')), documentation('PhysiologicProcess', string('"A normal process of an Organism   or part of an Organism."')), [], [], 'PrologMOO', 'PROCESSES', 5127, 'Anonymous', A).
mooCache(documentation('OrganismProcess', string('"A physiologic function of the   Organism as a whole, of multiple organ systems or of multiple   Organs or Tissues."')), documentation('OrganismProcess', string('"A physiologic function of the   Organism as a whole, of multiple organ systems or of multiple   Organs or Tissues."')), [], [], 'PrologMOO', 'PROCESSES', 5131, 'Anonymous', A).
mooCache(documentation('Birth', string('"The Process of being born."')), documentation('Birth', string('"The Process of being born."')), [], [], 'PrologMOO', 'PROCESSES', 5135, 'Anonymous', A).
mooCache(subclass('Death', 'OrganismProcess'), subclass('Death', 'OrganismProcess'), [], [], 'PrologMOO', 'PROCESSES', 5139, 'Anonymous', A).
mooCache(=>(instance(A, 'Organism'), exists(B, and(instance(B, 'Death'), experiencer(B, A)))), and(and(entails(not(instance(B, 'Death')), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(B, '?DEATH', and(instance('?DEATH', 'Death'), experiencer('?DEATH', A)))), instance(B, 'Death'))), and(entails(not(experiencer(B, A)), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(B, '?DEATH', and(instance('?DEATH', 'Death'), experiencer('?DEATH', A)))), experiencer(B, A)))), [domainV(B, ['$instanceof':'Death', experiencer:1]), domainV(A, ['$instanceof':'Organism', experiencer:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?DEATH', and(instance('?DEATH', 'Death'), experiencer('?DEATH', A))))], ['ORGANISM'=A, 'DEATH'=B], 'PrologMOO', 'PROCESSES', 5143, 'Anonymous', D).
mooCache(documentation('Breathing', string('"The Process of respiration, by which oxygen   is made available to an Animal.  This covers processes of inhalation,   exhalation, and alternations between the two."')), documentation('Breathing', string('"The Process of respiration, by which oxygen   is made available to an Animal.  This covers processes of inhalation,   exhalation, and alternations between the two."')), [], [], 'PrologMOO', 'PROCESSES', 5147, 'Anonymous', A).
mooCache(documentation('Ingesting', string('"The Process by which Food is   incorporated into an Animal."')), documentation('Ingesting', string('"The Process by which Food is   incorporated into an Animal."')), [], [], 'PrologMOO', 'PROCESSES', 5151, 'Anonymous', A).
mooCache(subclass('Eating', 'Ingesting'), subclass('Eating', 'Ingesting'), [], [], 'PrologMOO', 'PROCESSES', 5155, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Eating'), patient(A, B)), attribute(B, 'Solid')), and(entails(and(instance(A, 'Eating'), patient(A, B)), attribute(B, 'Solid')), and(entails(and(not(attribute(B, 'Solid')), patient(A, B)), not(instance(A, 'Eating'))), entails(and(not(attribute(B, 'Solid')), instance(A, 'Eating')), not(patient(A, B))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Eating', patient:1]), domainV(C, []), forall(A), forall(B)], ['ACT'=A, 'FOOD'=B], 'PrologMOO', 'PROCESSES', 5159, 'Anonymous', D).
mooCache(documentation('Drinking', string('"The Process by which liquid Food is   incorporated into an Animal."')), documentation('Drinking', string('"The Process by which liquid Food is   incorporated into an Animal."')), [], [], 'PrologMOO', 'PROCESSES', 5163, 'Anonymous', A).
mooCache(subclass('Growth', 'PhysiologicProcess'), subclass('Growth', 'PhysiologicProcess'), [], [], 'PrologMOO', 'PROCESSES', 5167, 'Anonymous', A).
mooCache(subclass('Replication', 'PhysiologicProcess'), subclass('Replication', 'PhysiologicProcess'), [], [], 'PrologMOO', 'PROCESSES', 5171, 'Anonymous', A).
mooCache(subclass('SexualReproduction', 'Replication'), subclass('SexualReproduction', 'Replication'), [], [], 'PrologMOO', 'PROCESSES', 5175, 'Anonymous', A).
mooCache(documentation('SexualReproduction', string('"Sexual Processes of biological   reproduction."')), documentation('SexualReproduction', string('"Sexual Processes of biological   reproduction."')), [], [], 'PrologMOO', 'PROCESSES', 5179, 'Anonymous', A).
mooCache(documentation('AsexualReproduction', string('"Asexual Processes of biological   reproduction."')), documentation('AsexualReproduction', string('"Asexual Processes of biological   reproduction."')), [], [], 'PrologMOO', 'PROCESSES', 5183, 'Anonymous', A).
mooCache(documentation('MentalProcess', string('"An OrganismProcess involving the mind   or cognitive processing."')), documentation('MentalProcess', string('"An OrganismProcess involving the mind   or cognitive processing."')), [], [], 'PrologMOO', 'PROCESSES', 5187, 'Anonymous', A).
mooCache(subclass('OrganOrTissueProcess', 'PhysiologicProcess'), subclass('OrganOrTissueProcess', 'PhysiologicProcess'), [], [], 'PrologMOO', 'PROCESSES', 5191, 'Anonymous', A).
mooCache(documentation('OrganOrTissueProcess', string('"A PhysiologicProcess of a   particular Organ or Tissue."')), documentation('OrganOrTissueProcess', string('"A PhysiologicProcess of a   particular Organ or Tissue."')), [], [], 'PrologMOO', 'PROCESSES', 5195, 'Anonymous', A).
mooCache(subclass('PathologicProcess', 'BiologicalProcess'), subclass('PathologicProcess', 'BiologicalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5199, 'Anonymous', A).
mooCache(documentation('PathologicProcess', string('"A disordered process, activity, or   state of the Organism as a whole, of a body system or systems, or of   multiple Organs or Tissues. Included here are normal responses to a   negative stimulus as well as patholologic conditions or states that are   less specific than a disease. Pathologic functions frequently have   systemic effects."')), documentation('PathologicProcess', string('"A disordered process, activity, or   state of the Organism as a whole, of a body system or systems, or of   multiple Organs or Tissues. Included here are normal responses to a   negative stimulus as well as patholologic conditions or states that are   less specific than a disease. Pathologic functions frequently have   systemic effects."')), [], [], 'PrologMOO', 'PROCESSES', 5203, 'Anonymous', A).
mooCache(documentation('DiseaseOrSyndrome', string('"A PathologicProcess which alters or   interferes with a normal process, state or activity of an Organism.    It is usually characterized by the abnormal functioning of one or more   of the host\'s systems, parts, or Organs."')), documentation('DiseaseOrSyndrome', string('"A PathologicProcess which alters or   interferes with a normal process, state or activity of an Organism.    It is usually characterized by the abnormal functioning of one or more   of the host\'s systems, parts, or Organs."')), [], [], 'PrologMOO', 'PROCESSES', 5207, 'Anonymous', A).
mooCache(documentation('MentalOrBehavioralDysfunction', string('"A clinically significant   dysfunction whose major manifestation is behavioral or psychological.    These dysfunctions may have identified or presumed biological etiologies   or manifestations."')), documentation('MentalOrBehavioralDysfunction', string('"A clinically significant   dysfunction whose major manifestation is behavioral or psychological.    These dysfunctions may have identified or presumed biological etiologies   or manifestations."')), [], [], 'PrologMOO', 'PROCESSES', 5211, 'Anonymous', A).
mooCache(subclass('Injuring', 'PathologicProcess'), subclass('Injuring', 'PathologicProcess'), [], [], 'PrologMOO', 'PROCESSES', 5215, 'Anonymous', A).
mooCache(=>(instance(A, 'Injuring'), exists(B, and(instance(B, 'AnatomicalStructure'), patient(A, B)))), and(and(entails(not(instance(B, 'AnatomicalStructure')), not(instance(A, 'Injuring'))), entails(and(instance(A, 'Injuring'), '$existential'(B, '?STRUCT', and(instance('?STRUCT', 'AnatomicalStructure'), patient(A, '?STRUCT')))), instance(B, 'AnatomicalStructure'))), and(entails(not(patient(A, B)), not(instance(A, 'Injuring'))), entails(and(instance(A, 'Injuring'), '$existential'(B, '?STRUCT', and(instance('?STRUCT', 'AnatomicalStructure'), patient(A, '?STRUCT')))), patient(A, B)))), [domainV(B, ['$instanceof':'AnatomicalStructure', patient:2]), domainV(A, ['$instanceof':'Injuring', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?STRUCT', and(instance('?STRUCT', 'AnatomicalStructure'), patient(A, '?STRUCT'))))], ['INJ'=A, 'STRUCT'=B], 'PrologMOO', 'PROCESSES', 5219, 'Anonymous', D).
mooCache(subclass('Poisoning', 'Injuring'), subclass('Poisoning', 'Injuring'), [], [], 'PrologMOO', 'PROCESSES', 5223, 'Anonymous', A).
mooCache(=>(instance(A, 'Poisoning'), exists(B, and(patient(A, B), or(instance(B, 'Organism'), instance(B, 'AnatomicalStructure'))))), and(and(entails(not(patient(A, B)), not(instance(A, 'Poisoning'))), entails(and(instance(A, 'Poisoning'), '$existential'(B, '?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure'))))), patient(A, B))), and(entails(and(not(instance(B, 'Organism')), not(instance(B, 'AnatomicalStructure'))), not(instance(A, 'Poisoning'))), and(entails(and(and(instance(A, 'Poisoning'), not(instance(B, 'AnatomicalStructure'))), '$existential'(B, '?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure'))))), instance(B, 'Organism')), entails(and(and(instance(A, 'Poisoning'), not(instance(B, 'Organism'))), '$existential'(B, '?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure'))))), instance(B, 'AnatomicalStructure'))))), [domainV(B, ['$instanceof':'AnatomicalStructure', '$instanceof':'Organism', patient:2]), domainV(A, ['$instanceof':'Poisoning', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure')))))], ['POISON'=A, 'THING'=B], 'PrologMOO', 'PROCESSES', 5227, 'Anonymous', D).
mooCache(subclass('IntentionalProcess', 'Process'), subclass('IntentionalProcess', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5231, 'Anonymous', A).
mooCache(documentation('IntentionalProcess', string('"A Process that is   deliberately set in motion by a CognitiveAgent."')), documentation('IntentionalProcess', string('"A Process that is   deliberately set in motion by a CognitiveAgent."')), [], [], 'PrologMOO', 'PROCESSES', 5235, 'Anonymous', A).
mooCache(=>(instance(A, 'IntentionalProcess'), exists(B, and(instance(B, 'CognitiveAgent'), agent(A, B)))), and(and(entails(not(instance(B, 'CognitiveAgent')), not(instance(A, 'IntentionalProcess'))), entails(and(instance(A, 'IntentionalProcess'), '$existential'(B, '?AGENT', and(instance('?AGENT', 'CognitiveAgent'), agent(A, '?AGENT')))), instance(B, 'CognitiveAgent'))), and(entails(not(agent(A, B)), not(instance(A, 'IntentionalProcess'))), entails(and(instance(A, 'IntentionalProcess'), '$existential'(B, '?AGENT', and(instance('?AGENT', 'CognitiveAgent'), agent(A, '?AGENT')))), agent(A, B)))), [domainV(B, ['$instanceof':'CognitiveAgent', agent:2]), domainV(A, ['$instanceof':'IntentionalProcess', agent:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?AGENT', and(instance('?AGENT', 'CognitiveAgent'), agent(A, '?AGENT'))))], ['PROC'=A, 'AGENT'=B], 'PrologMOO', 'PROCESSES', 5239, 'Anonymous', D).
mooCache(documentation('RecreationalProcess', string('"A Process that is carried out   for the purpose of recreation."')), documentation('RecreationalProcess', string('"A Process that is carried out   for the purpose of recreation."')), [], [], 'PrologMOO', 'PROCESSES', 5243, 'Anonymous', A).
mooCache(documentation('ExerciseProcess', string('"A Process that is carried out for   the purpose of exercise."')), documentation('ExerciseProcess', string('"A Process that is carried out for   the purpose of exercise."')), [], [], 'PrologMOO', 'PROCESSES', 5247, 'Anonymous', A).
mooCache(documentation('DiagnosticProcess', string('"A Process that is carried out for   the purpose of determining the nature of a DiseaseOrSyndrome."')), documentation('DiagnosticProcess', string('"A Process that is carried out for   the purpose of determining the nature of a DiseaseOrSyndrome."')), [], [], 'PrologMOO', 'PROCESSES', 5251, 'Anonymous', A).
mooCache(documentation('TherapeuticProcess', string('"A Process that is carried out   for the purpose of curing, improving or reducing the pain associated   with a DiseaseOrSyndrome."')), documentation('TherapeuticProcess', string('"A Process that is carried out   for the purpose of curing, improving or reducing the pain associated   with a DiseaseOrSyndrome."')), [], [], 'PrologMOO', 'PROCESSES', 5255, 'Anonymous', A).
mooCache(documentation('Surgery', string('"Any TherapeuticProcess that involves making an   incision in the Animal that is the patient of the TherapeuticProcess."')), documentation('Surgery', string('"Any TherapeuticProcess that involves making an   incision in the Animal that is the patient of the TherapeuticProcess."')), [], [], 'PrologMOO', 'PROCESSES', 5259, 'Anonymous', A).
mooCache(subclass('OrganizationalProcess', 'IntentionalProcess'), subclass('OrganizationalProcess', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5263, 'Anonymous', A).
mooCache(=>(and(instance(A, 'OrganizationalProcess'), agent(A, B)), or(instance(B, 'Organization'), exists(C, and(instance(C, 'Organization'), member(B, C))))), and(and(entails(and(agent(A, B), and(not(instance(B, 'Organization')), not(instance(C, 'Organization')))), not(instance(A, 'OrganizationalProcess'))), and(entails(and(instance(A, 'OrganizationalProcess'), and(not(instance(B, 'Organization')), not(instance(C, 'Organization')))), not(agent(A, B))), and(entails(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(instance(C, 'Organization'))), instance(B, 'Organization')), entails(and(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(instance(B, 'Organization'))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), member(B, '?ORG')))), instance(C, 'Organization'))))), and(entails(and(agent(A, B), and(not(instance(B, 'Organization')), not(member(B, C)))), not(instance(A, 'OrganizationalProcess'))), and(entails(and(instance(A, 'OrganizationalProcess'), and(not(instance(B, 'Organization')), not(member(B, C)))), not(agent(A, B))), and(entails(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(member(B, C))), instance(B, 'Organization')), entails(and(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(instance(B, 'Organization'))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), member(B, '?ORG')))), member(B, C)))))), [domainV(C, ['$instanceof':'Organization', member:2]), domainV(B, ['$instanceof':'Organization', agent:2, member:1]), domainV(A, ['$instanceof':'OrganizationalProcess', agent:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?ORG', and(instance('?ORG', 'Organization'), member(B, '?ORG'))))], ['ACT'=A, 'AGENT'=B, 'ORG'=C], 'PrologMOO', 'PROCESSES', 5267, 'Anonymous', E).
mooCache(documentation('EducationalProcess', string('"Any Process which occurs in an   organizational setting and which is intended to result in Learning."')), documentation('EducationalProcess', string('"Any Process which occurs in an   organizational setting and which is intended to result in Learning."')), [], [], 'PrologMOO', 'PROCESSES', 5271, 'Anonymous', A).
mooCache(documentation('Managing', string('"OccupationalProcesses that involve overseeing   the activities of others."')), documentation('Managing', string('"OccupationalProcesses that involve overseeing   the activities of others."')), [], [], 'PrologMOO', 'PROCESSES', 5275, 'Anonymous', A).
mooCache(documentation('ReligiousProcess', string('"An OrganizationalProcess that is   carried out within or by a ReligiousOrganization."')), documentation('ReligiousProcess', string('"An OrganizationalProcess that is   carried out within or by a ReligiousOrganization."')), [], [], 'PrologMOO', 'PROCESSES', 5279, 'Anonymous', A).
mooCache(subclass('Graduation', 'OrganizationalProcess'), subclass('Graduation', 'OrganizationalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5283, 'Anonymous', A).
mooCache(subclass('PoliticalProcess', 'OrganizationalProcess'), subclass('PoliticalProcess', 'OrganizationalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5287, 'Anonymous', A).
mooCache(subclass('RegulatoryProcess', 'OrganizationalProcess'), subclass('RegulatoryProcess', 'OrganizationalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5291, 'Anonymous', A).
mooCache(subclass('OccupationalProcess', 'OrganizationalProcess'), subclass('OccupationalProcess', 'OrganizationalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5295, 'Anonymous', A).
mooCache(=>(instance(A, 'OccupationalProcess'), exists(B, exists(C, and(instance(C, 'Organization'), and(employs(C, B), agent(A, B)))))), and(and(entails(not(instance(C, 'Organization')), not(instance(A, 'OccupationalProcess'))), entails(and(instance(A, 'OccupationalProcess'), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B))))), instance(C, 'Organization'))), and(and(entails(not(employs(C, B)), not(instance(A, 'OccupationalProcess'))), entails(and(and(instance(A, 'OccupationalProcess'), '$existential'(B, '?EMP', exists(C, and(instance(C, 'Organization'), and(employs(C, '?EMP'), agent(A, '?EMP')))))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B))))), employs(C, B))), and(entails(not(agent(A, B)), not(instance(A, 'OccupationalProcess'))), entails(and(and(instance(A, 'OccupationalProcess'), '$existential'(B, '?EMP', exists(C, and(instance(C, 'Organization'), and(employs(C, '?EMP'), agent(A, '?EMP')))))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B))))), agent(A, B))))), [domainV(C, ['$instanceof':'Organization', employs:1]), domainV(B, [agent:2, employs:2]), domainV(A, ['$instanceof':'OccupationalProcess', agent:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?EMP', exists(C, and(instance(C, 'Organization'), and(employs(C, '?EMP'), agent(A, '?EMP')))))), replaceConsVar(C, '$existential'('?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B)))))], ['ACT'=A, 'ORG'=C, 'EMP'=B], 'PrologMOO', 'PROCESSES', 5299, 'Anonymous', E).
mooCache(documentation('Planning', string('"Specifying a set of actions in order to meet a   set of goals or objectives."')), documentation('Planning', string('"Specifying a set of actions in order to meet a   set of goals or objectives."')), [], [], 'PrologMOO', 'PROCESSES', 5303, 'Anonymous', A).
mooCache(disjoint('Increasing', 'Decreasing'), disjoint('Increasing', 'Decreasing'), [], [], 'PrologMOO', 'PROCESSES', 5307, 'Anonymous', A).
mooCache(documentation('Increasing', string('"Any Process where a PhysicalQuantity associated   with the patient is increased."')), documentation('Increasing', string('"Any Process where a PhysicalQuantity associated   with the patient is increased."')), [], [], 'PrologMOO', 'PROCESSES', 5311, 'Anonymous', A).
mooCache(subclass('Heating', 'Increasing'), subclass('Heating', 'Increasing'), [], [], 'PrologMOO', 'PROCESSES', 5315, 'Anonymous', A).
mooCache(documentation('Heating', string('"Any Increasing Process where the PhysicalQuantity   increased is a TemperatureMeasure."')), documentation('Heating', string('"Any Increasing Process where the PhysicalQuantity   increased is a TemperatureMeasure."')), [], [], 'PrologMOO', 'PROCESSES', 5319, 'Anonymous', A).
mooCache(subclass('Decreasing', 'Process'), subclass('Decreasing', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5323, 'Anonymous', A).
mooCache(documentation('Decreasing', string('"Any Process where a PhysicalQuantity associated   with the patient is decreased."')), documentation('Decreasing', string('"Any Process where a PhysicalQuantity associated   with the patient is decreased."')), [], [], 'PrologMOO', 'PROCESSES', 5327, 'Anonymous', A).
mooCache(subclass('Cooling', 'Decreasing'), subclass('Cooling', 'Decreasing'), [], [], 'PrologMOO', 'PROCESSES', 5331, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Cooling'), patient(A, B)), exists(C, exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), equal('MeasureFn'(B, E), D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), equal('MeasureFn'(B, E), C)), lessThan(C, D)))))))), and(and(entails(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), instance(E, 'TemperatureMeasure')), and(entails(and(not(instance(E, 'TemperatureMeasure')), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(instance(E, 'TemperatureMeasure')), instance(A, 'Cooling')), not(patient(A, B))))), and(and(entails(and(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), instance(A, 'Cooling')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D)))))))), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), instance(A, 'Cooling')), not(patient(A, B))))), and(entails(and(and(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D)))))))), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), lessThan(C, D)), and(entails(and(not(lessThan(C, D)), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(lessThan(C, D)), instance(A, 'Cooling')), not(patient(A, B)))))))), [domainV(E, ['$instanceof':'TemperatureMeasure', 'MeasureFn':2]), domainV(D, ['MeasureFn':3, lessThan:2]), domainV(C, ['MeasureFn':3, lessThan:1]), domainV(B, ['MeasureFn':1, patient:2]), domainV(A, ['$instanceof':'Cooling', 'WhenFn':1, patient:1]), domainV(F, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D)))))))), replaceConsVar(D, '$existential'('?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), replaceConsVar(E, '$existential'('?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D))))))], ['COOL'=A, 'OBJ'=B, 'UNIT'=E, 'QUANT1'=D, 'QUANT2'=C], 'PrologMOO', 'PROCESSES', 5335, 'Anonymous', G).
mooCache(documentation('Motion', string('"Any Process of movement."')), documentation('Motion', string('"Any Process of movement."')), [], [], 'PrologMOO', 'PROCESSES', 5339, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Motion'), and(patient(A, B), destination(A, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(entails(and(instance(A, 'Motion'), and(patient(A, B), destination(A, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(patient(A, B), destination(A, C))), not(instance(A, 'Motion'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(instance(A, 'Motion'), destination(A, C))), not(patient(A, B))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(instance(A, 'Motion'), patient(A, B))), not(destination(A, C)))))), [domainV(C, [destination:2, located:2]), domainV(B, [located:1, patient:2]), domainV(A, ['$instanceof':'Motion', 'WhenFn':1, destination:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MOTION'=A, 'OBJ'=B, 'PLACE'=C], 'PrologMOO', 'PROCESSES', 5343, 'Anonymous', E).
mooCache(domain(path, 1, 'Motion'), domain(path, 1, 'Motion'), [], [], 'PrologMOO', 'PROCESSES', 5347, 'Anonymous', A).
mooCache(documentation(path, string('"(path ?MOTION ?PATH) means that ?PATH is a route   along which ?MOTION occurs.  For example, Highway 101 is the path in the   following proposition:  the car drove up Highway 101."')), documentation(path, string('"(path ?MOTION ?PATH) means that ?PATH is a route   along which ?MOTION occurs.  For example, Highway 101 is the path in the   following proposition:  the car drove up Highway 101."')), [], [], 'PrologMOO', 'PROCESSES', 5351, 'Anonymous', A).
mooCache(subclass('BodyMotion', 'Motion'), subclass('BodyMotion', 'Motion'), [], [], 'PrologMOO', 'PROCESSES', 5355, 'Anonymous', A).
mooCache(=>(instance(A, 'BodyMotion'), exists(B, and(instance(B, 'BodyPart'), patient(A, B)))), and(and(entails(not(instance(B, 'BodyPart')), not(instance(A, 'BodyMotion'))), entails(and(instance(A, 'BodyMotion'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'BodyPart'), patient(A, '?OBJ')))), instance(B, 'BodyPart'))), and(entails(not(patient(A, B)), not(instance(A, 'BodyMotion'))), entails(and(instance(A, 'BodyMotion'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'BodyPart'), patient(A, '?OBJ')))), patient(A, B)))), [domainV(B, ['$instanceof':'BodyPart', patient:2]), domainV(A, ['$instanceof':'BodyMotion', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(instance('?OBJ', 'BodyPart'), patient(A, '?OBJ'))))], ['MOTION'=A, 'OBJ'=B], 'PrologMOO', 'PROCESSES', 5359, 'Anonymous', D).
mooCache(documentation('Walking', string('"Any BodyMotion which is accomplished by   means of the legs of an Organism on land for the purpose of moving   from one point to another."')), documentation('Walking', string('"Any BodyMotion which is accomplished by   means of the legs of an Organism on land for the purpose of moving   from one point to another."')), [], [], 'PrologMOO', 'PROCESSES', 5363, 'Anonymous', A).
mooCache(documentation('Swimming', string('"Any deliberate and controlled BodyMotion   through water that is accomplished by an Organism."')), documentation('Swimming', string('"Any deliberate and controlled BodyMotion   through water that is accomplished by an Organism."')), [], [], 'PrologMOO', 'PROCESSES', 5367, 'Anonymous', A).
mooCache(documentation('Dancing', string('"Any BodyMotion of Humans which is   deliberately coordinated with music."')), documentation('Dancing', string('"Any BodyMotion of Humans which is   deliberately coordinated with music."')), [], [], 'PrologMOO', 'PROCESSES', 5371, 'Anonymous', A).
mooCache(documentation('DirectionChange', string('"The act of changing the direction in   which the patient of the act is oriented."')), documentation('DirectionChange', string('"The act of changing the direction in   which the patient of the act is oriented."')), [], [], 'PrologMOO', 'PROCESSES', 5375, 'Anonymous', A).
mooCache(subclass('Transfer', 'Motion'), subclass('Transfer', 'Motion'), [], [], 'PrologMOO', 'PROCESSES', 5379, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Transfer'), and(agent(A, B), patient(A, C))), not(equal(B, C))), and(entails(and(instance(A, 'Transfer'), and(agent(A, B), patient(A, C))), not(equal(B, C))), and(entails(and(equal(B, C), and(agent(A, B), patient(A, C))), not(instance(A, 'Transfer'))), and(entails(and(equal(B, C), and(instance(A, 'Transfer'), patient(A, C))), not(agent(A, B))), entails(and(equal(B, C), and(instance(A, 'Transfer'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [patient:2]), domainV(B, [agent:2]), domainV(A, ['$instanceof':'Transfer', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TRANSFER'=A, 'AGENT'=B, 'PATIENT'=C], 'PrologMOO', 'PROCESSES', 5383, 'Anonymous', E).
mooCache(documentation('Removing', string('"The Class of Processes where something is   taken away from a location.  Note that the thing removed and the location   are specified with the CaseRoles patient and origin, respectively."')), documentation('Removing', string('"The Class of Processes where something is   taken away from a location.  Note that the thing removed and the location   are specified with the CaseRoles patient and origin, respectively."')), [], [], 'PrologMOO', 'PROCESSES', 5387, 'Anonymous', A).
mooCache(subclass('Cleaning', 'Removing'), subclass('Cleaning', 'Removing'), [], [], 'PrologMOO', 'PROCESSES', 5391, 'Anonymous', A).
mooCache(subclass('Putting', 'Transfer'), subclass('Putting', 'Transfer'), [], [], 'PrologMOO', 'PROCESSES', 5395, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Putting'), and(destination(A, B), patient(A, C))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B)))), and(and(entails(and(instance(A, 'Putting'), and(destination(A, B), patient(A, C))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(destination(A, B), patient(A, C))), not(instance(A, 'Putting'))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(instance(A, 'Putting'), patient(A, C))), not(destination(A, B))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(instance(A, 'Putting'), destination(A, B))), not(patient(A, C)))))), and(entails(and(instance(A, 'Putting'), and(destination(A, B), patient(A, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(destination(A, B), patient(A, C))), not(instance(A, 'Putting'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(instance(A, 'Putting'), patient(A, C))), not(destination(A, B))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(instance(A, 'Putting'), destination(A, B))), not(patient(A, C))))))), [domainV(C, [located:1, patient:2]), domainV(B, [destination:2, located:2]), domainV(A, ['$instanceof':'Putting', 'WhenFn':1, destination:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PUT'=A, 'PLACE'=B, 'OBJ'=C], 'PrologMOO', 'PROCESSES', 5399, 'Anonymous', E).
mooCache(documentation('Substituting', string('"The Class of Transfers where one thing is   replaced with something else."')), documentation('Substituting', string('"The Class of Transfers where one thing is   replaced with something else."')), [], [], 'PrologMOO', 'PROCESSES', 5403, 'Anonymous', A).
mooCache(subclass('Arranging', 'Transfer'), subclass('Arranging', 'Transfer'), [], [], 'PrologMOO', 'PROCESSES', 5407, 'Anonymous', A).
mooCache(subclass('Impelling', 'Transfer'), subclass('Impelling', 'Transfer'), [], [], 'PrologMOO', 'PROCESSES', 5411, 'Anonymous', A).
mooCache(subclass('Shooting', 'Impelling'), subclass('Shooting', 'Impelling'), [], [], 'PrologMOO', 'PROCESSES', 5415, 'Anonymous', A).
mooCache(subclass('Transportation', 'Motion'), subclass('Transportation', 'Motion'), [], [], 'PrologMOO', 'PROCESSES', 5419, 'Anonymous', A).
mooCache(documentation('Transportation', string('"Motion from one point to another by means   of a TransportationDevice."')), documentation('Transportation', string('"Motion from one point to another by means   of a TransportationDevice."')), [], [], 'PrologMOO', 'PROCESSES', 5423, 'Anonymous', A).
mooCache(subclass('Guiding', 'IntentionalProcess'), subclass('Guiding', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5427, 'Anonymous', A).
mooCache(subclass('ChangeOfPossession', 'SocialInteraction'), subclass('ChangeOfPossession', 'SocialInteraction'), [], [], 'PrologMOO', 'PROCESSES', 5431, 'Anonymous', A).
mooCache(documentation('ChangeOfPossession', string('"The Class of Processes where   ownership of something is transferred from one Agent to another."')), documentation('ChangeOfPossession', string('"The Class of Processes where   ownership of something is transferred from one Agent to another."')), [], [], 'PrologMOO', 'PROCESSES', 5435, 'Anonymous', A).
mooCache(subclass('Giving', 'ChangeOfPossession'), subclass('Giving', 'ChangeOfPossession'), [], [], 'PrologMOO', 'PROCESSES', 5439, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D)))), and(and(entails(and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Giving'))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(destination(A, C))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), instance(C, 'Agent'))))), not(patient(A, D)))))))), and(entails(and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Giving'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(destination(A, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), instance(C, 'Agent'))))), not(patient(A, D))))))))), [domainV(D, [patient:2, possesses:2]), domainV(C, ['$instanceof':'Agent', destination:2, possesses:1]), domainV(B, [agent:2, possesses:1]), domainV(A, ['$instanceof':'Giving', 'WhenFn':1, agent:1, destination:1, patient:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['GIVE'=A, 'AGENT1'=B, 'AGENT2'=C, 'OBJ'=D], 'PrologMOO', 'PROCESSES', 5443, 'Anonymous', F).
mooCache(documentation('Lending', string('"The subclass of Giving Processes where   the agent gives the destination something for a limited period of   time with the expectation that it will be returned later (perhaps with   interest)."')), documentation('Lending', string('"The subclass of Giving Processes where   the agent gives the destination something for a limited period of   time with the expectation that it will be returned later (perhaps with   interest)."')), [], [], 'PrologMOO', 'PROCESSES', 5447, 'Anonymous', A).
mooCache(documentation('Getting', string('"The subclass of ChangeOfPossession where the  agent gets something.  Note that the source from which something is   obtained is specified with the origin CaseRole."')), documentation('Getting', string('"The subclass of ChangeOfPossession where the  agent gets something.  Note that the source from which something is   obtained is specified with the origin CaseRole."')), [], [], 'PrologMOO', 'PROCESSES', 5451, 'Anonymous', A).
mooCache(subclass('Borrowing', 'Getting'), subclass('Borrowing', 'Getting'), [], [], 'PrologMOO', 'PROCESSES', 5455, 'Anonymous', A).
mooCache(subclass('Transaction', 'ChangeOfPossession'), subclass('Transaction', 'ChangeOfPossession'), [], [], 'PrologMOO', 'PROCESSES', 5459, 'Anonymous', A).
mooCache(=>(instance(A, 'Transaction'), exists(B, exists(C, exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))))), and(and(entails(not(instance(E, 'Giving')), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), instance(E, 'Giving'))), and(and(entails(not(instance(D, 'Giving')), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), instance(D, 'Giving'))), and(and(entails(not(subProcess(E, A)), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), subProcess(E, A))), and(and(entails(not(subProcess(D, A)), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), subProcess(D, A))), and(and(entails(not(agent(E, G)), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), agent(E, G))), and(and(entails(not(agent(D, F)), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), agent(D, F))), and(and(entails(not(patient(E, C)), not(instance(A, 'Transaction'))), entails(and(and(and(and(and(instance(A, 'Transaction'), '$existential'(C, '?OBJ1', exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, '?OBJ1'), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal('?OBJ1', B))))))))))))))))))), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), patient(E, C))), and(and(entails(not(patient(D, B)), not(instance(A, 'Transaction'))), entails(and(and(and(and(and(and(instance(A, 'Transaction'), '$existential'(B, '?OBJ2', exists(C, exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, C), and(patient(D, '?OBJ2'), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, '?OBJ2')))))))))))))))))))), '$existential'(C, '?OBJ1', exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, '?OBJ1'), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal('?OBJ1', B))))))))))))))))))), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), patient(D, B))), and(and(entails(not(destination(E, F)), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), destination(E, F))), and(and(entails(not(destination(D, G)), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), destination(D, G))), and(and(entails(equal(G, F), not(instance(A, 'Transaction'))), entails(instance(A, 'Transaction'), not(equal(G, F)))), and(entails(equal(C, B), not(instance(A, 'Transaction'))), entails(instance(A, 'Transaction'), not(equal(C, B))))))))))))))), [domainV(G, [agent:2, destination:2]), domainV(F, [agent:2, destination:2]), domainV(E, ['$instanceof':'Giving', agent:1, destination:1, patient:1, subProcess:1]), domainV(D, ['$instanceof':'Giving', agent:1, destination:1, patient:1, subProcess:1]), domainV(C, [patient:2]), domainV(B, [patient:2]), domainV(A, ['$instanceof':'Transaction', subProcess:2]), domainV(H, []), forall(A), replaceConsVar(B, '$existential'('?OBJ2', exists(C, exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, C), and(patient(D, '?OBJ2'), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, '?OBJ2')))))))))))))))))))), replaceConsVar(C, '$existential'('?OBJ1', exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, '?OBJ1'), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal('?OBJ1', B))))))))))))))))))), replaceConsVar(D, '$existential'('?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), replaceConsVar(E, '$existential'('?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), replaceConsVar(F, '$existential'('?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), replaceConsVar(G, '$existential'('?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B)))))))))))))))], ['TRANS'=A, 'AGENT1'=G, 'AGENT2'=F, 'GIVE1'=E, 'GIVE2'=D, 'OBJ1'=C, 'OBJ2'=B], 'PrologMOO', 'PROCESSES', 5463, 'Anonymous', I).
mooCache(documentation('FinancialTransaction', string('"A Transaction where an instance   of CurrencyMeasure is exchanged for something else."')), documentation('FinancialTransaction', string('"A Transaction where an instance   of CurrencyMeasure is exchanged for something else."')), [], [], 'PrologMOO', 'PROCESSES', 5467, 'Anonymous', A).
mooCache(documentation('Betting', string('"A FinancialTransaction where an instance of   CurrencyMeasure is exchanged for the possibility of winning a larger   instance of CurrencyMeasure within the context of some sort of   Game."')), documentation('Betting', string('"A FinancialTransaction where an instance of   CurrencyMeasure is exchanged for the possibility of winning a larger   instance of CurrencyMeasure within the context of some sort of   Game."')), [], [], 'PrologMOO', 'PROCESSES', 5471, 'Anonymous', A).
mooCache(relatedInternalConcept('Buying', 'Selling'), relatedInternalConcept('Buying', 'Selling'), [], [], 'PrologMOO', 'PROCESSES', 5475, 'Anonymous', A).
mooCache(subclass('Selling', 'FinancialTransaction'), subclass('Selling', 'FinancialTransaction'), [], [], 'PrologMOO', 'PROCESSES', 5479, 'Anonymous', A).
mooCache(<=>(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D))))), and(and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), instance(E, 'Selling')), and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), agent(E, C)), and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), destination(E, B)), and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), patient(E, D)), and(entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(agent(A, B), and(origin(A, C), patient(A, D)))), not(instance(A, 'Buying'))), and(entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(instance(A, 'Buying'), and(origin(A, C), patient(A, D)))), not(agent(A, B))), and(entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(instance(A, 'Buying'), and(agent(A, B), patient(A, D)))), not(origin(A, C))), entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(instance(A, 'Buying'), and(agent(A, B), origin(A, C)))), not(patient(A, D)))))))))), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), instance(A, 'Buying')), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), agent(A, B)), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), origin(A, C)), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), patient(A, D)), and(entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(agent(E, C), and(destination(E, B), patient(E, D)))), not(instance(E, 'Selling'))), and(entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(instance(E, 'Selling'), and(destination(E, B), patient(E, D)))), not(agent(E, C))), and(entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(instance(E, 'Selling'), and(agent(E, C), patient(E, D)))), not(destination(E, B))), entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(instance(E, 'Selling'), and(agent(E, C), destination(E, B)))), not(patient(E, D))))))))))), [domainV(E, ['$instanceof':'Selling', agent:1, destination:1, patient:1]), domainV(D, [patient:2]), domainV(C, [agent:2, origin:2]), domainV(B, [agent:2, destination:2]), domainV(A, ['$instanceof':'Buying', agent:1, origin:1, patient:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['BUY'=A, 'AGENT1'=B, 'AGENT2'=C, 'OBJECT'=D, 'SELL'=E], 'PrologMOO', 'PROCESSES', 5483, 'Anonymous', G).
mooCache(documentation('Learning', string('"The Class of Processes which relate to the   acquisition of information."')), documentation('Learning', string('"The Class of Processes which relate to the   acquisition of information."')), [], [], 'PrologMOO', 'PROCESSES', 5487, 'Anonymous', A).
mooCache(=>(holdsDuring(A, exists(B, and(instance(B, 'Learning'), and(agent(B, C), patient(B, D))))), holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(entails(and(holdsDuring(A, instance(B, 'Learning')), and(holdsDuring(A, agent(B, C)), holdsDuring(A, patient(B, D)))), holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(entails(and(not(holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(holdsDuring(A, agent(B, C)), holdsDuring(A, patient(B, D)))), not(holdsDuring(A, instance(B, 'Learning')))), and(entails(and(not(holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(holdsDuring(A, instance(B, 'Learning')), holdsDuring(A, patient(B, D)))), not(holdsDuring(A, agent(B, C)))), entails(and(not(holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(holdsDuring(A, instance(B, 'Learning')), holdsDuring(A, agent(B, C)))), not(holdsDuring(A, patient(B, D))))))), [domainV(D, [believes:2, patient:2]), domainV(C, [agent:2, believes:1]), domainV(B, ['$instanceof':'Learning', agent:1, patient:1]), domainV(A, ['ImmediateFutureFn':1, holdsDuring:1]), domainV(E, []), forall(A), forall(C), forall(D), forall(B)], ['TIME'=A, 'LEARN'=B, 'AGENT'=C, 'PROP'=D], 'PrologMOO', 'PROCESSES', 5491, 'Anonymous', F).
mooCache(documentation('Classifying', string('"The Class of MentalProcesses which   involve attaching a name or category to a thing or set of things.    Note that Classifying is distinguished from Learning by the fact   that the latter covers the acquisition by a CognitiveAgent of any   Proposition, while the former involves the assignment of a label   or category."')), documentation('Classifying', string('"The Class of MentalProcesses which   involve attaching a name or category to a thing or set of things.    Note that Classifying is distinguished from Learning by the fact   that the latter covers the acquisition by a CognitiveAgent of any   Proposition, while the former involves the assignment of a label   or category."')), [], [], 'PrologMOO', 'PROCESSES', 5495, 'Anonymous', A).
mooCache(documentation('Reasoning', string('"The Class of MentalProcesses which   involve concluding, on the basis of either deductive or inductive   evidence, that a particular Proposition or Sentence is true."')), documentation('Reasoning', string('"The Class of MentalProcesses which   involve concluding, on the basis of either deductive or inductive   evidence, that a particular Proposition or Sentence is true."')), [], [], 'PrologMOO', 'PROCESSES', 5499, 'Anonymous', A).
mooCache(documentation('Selecting', string('"The Class of MentalProcesses which involve   opting for one or more Entity out of a larger set of Entities."')), documentation('Selecting', string('"The Class of MentalProcesses which involve   opting for one or more Entity out of a larger set of Entities."')), [], [], 'PrologMOO', 'PROCESSES', 5503, 'Anonymous', A).
mooCache(documentation('Comparing', string('"The Class of MentalProcesses which   involve comparing, relating, contrasting, etc. the properties of   two or more Entities."')), documentation('Comparing', string('"The Class of MentalProcesses which   involve comparing, relating, contrasting, etc. the properties of   two or more Entities."')), [], [], 'PrologMOO', 'PROCESSES', 5507, 'Anonymous', A).
mooCache(documentation('Calculating', string('"MentalProcesses which involve the consideration   and/or manipulation of instances of Quantity."')), documentation('Calculating', string('"MentalProcesses which involve the consideration   and/or manipulation of instances of Quantity."')), [], [], 'PrologMOO', 'PROCESSES', 5511, 'Anonymous', A).
mooCache(documentation('Measuring', string('"The Class of Calculating Processes where   the aim is to determine the PhysicalQuantity of some aspect of the patient."')), documentation('Measuring', string('"The Class of Calculating Processes where   the aim is to determine the PhysicalQuantity of some aspect of the patient."')), [], [], 'PrologMOO', 'PROCESSES', 5515, 'Anonymous', A).
mooCache(subclass('Counting', 'Calculating'), subclass('Counting', 'Calculating'), [], [], 'PrologMOO', 'PROCESSES', 5519, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Counting'), and(agent(A, B), patient(A, C))), exists(D, knows(B, equal('CardinalityFn'(C))))), and(entails(and(instance(A, 'Counting'), and(agent(A, B), patient(A, C))), knows(B, equal('CardinalityFn'(C)))), and(entails(and(not(knows(B, equal('CardinalityFn'(C)))), and(agent(A, B), patient(A, C))), not(instance(A, 'Counting'))), and(entails(and(not(knows(B, equal('CardinalityFn'(C)))), and(instance(A, 'Counting'), patient(A, C))), not(agent(A, B))), entails(and(not(knows(B, equal('CardinalityFn'(C)))), and(instance(A, 'Counting'), agent(A, B))), not(patient(A, C)))))), [domainV(C, ['CardinalityFn':1, patient:2]), domainV(B, [agent:2, knows:1]), domainV(A, ['$instanceof':'Counting', agent:1, patient:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?NUMBER', knows(B, equal('CardinalityFn'(C)))))], ['COUNT'=A, 'AGENT'=B, 'ENTITY'=C, 'NUMBER'=D], 'PrologMOO', 'PROCESSES', 5523, 'Anonymous', F).
mooCache(documentation('Predicting', string('"The Class of MentalProcesses which   involve the formulation of a Proposition about a state of affairs   which might be realized in the future."')), documentation('Predicting', string('"The Class of MentalProcesses which   involve the formulation of a Proposition about a state of affairs   which might be realized in the future."')), [], [], 'PrologMOO', 'PROCESSES', 5527, 'Anonymous', A).
mooCache(documentation('Remembering', string('"The Class of MentalProcesses which   involve the recollection of prior experiences and/or of knowledge   which was previously acquired."')), documentation('Remembering', string('"The Class of MentalProcesses which   involve the recollection of prior experiences and/or of knowledge   which was previously acquired."')), [], [], 'PrologMOO', 'PROCESSES', 5531, 'Anonymous', A).
mooCache(relatedInternalConcept('Opening', 'Closing'), relatedInternalConcept('Opening', 'Closing'), [], [], 'PrologMOO', 'PROCESSES', 5535, 'Anonymous', A).
mooCache(subclass('Closing', 'Process'), subclass('Closing', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5539, 'Anonymous', A).
mooCache(subclass('Keeping', 'IntentionalProcess'), subclass('Keeping', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5543, 'Anonymous', A).
mooCache(subclass('Securing', 'Keeping'), subclass('Securing', 'Keeping'), [], [], 'PrologMOO', 'PROCESSES', 5547, 'Anonymous', A).
mooCache(subclass('Confining', 'Securing'), subclass('Confining', 'Securing'), [], [], 'PrologMOO', 'PROCESSES', 5551, 'Anonymous', A).
mooCache(documentation('Confining', string('"The Class of Securing Processes where the   patient is Human and is kept against his/her will.  This covers   imprisonment, being jailed, held in custody, etc."')), documentation('Confining', string('"The Class of Securing Processes where the   patient is Human and is kept against his/her will.  This covers   imprisonment, being jailed, held in custody, etc."')), [], [], 'PrologMOO', 'PROCESSES', 5555, 'Anonymous', A).
mooCache(documentation('Maintaining', string('"The Class of Processes where the agent   cares for or maintains the Object."')), documentation('Maintaining', string('"The Class of Processes where the agent   cares for or maintains the Object."')), [], [], 'PrologMOO', 'PROCESSES', 5559, 'Anonymous', A).
mooCache(relatedInternalConcept('Repairing', 'Maintaining'), relatedInternalConcept('Repairing', 'Maintaining'), [], [], 'PrologMOO', 'PROCESSES', 5563, 'Anonymous', A).
mooCache(subclass('Damaging', 'Process'), subclass('Damaging', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5567, 'Anonymous', A).
mooCache(subclass('Concealing', 'IntentionalProcess'), subclass('Concealing', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5571, 'Anonymous', A).
mooCache(subclass('Revealing', 'IntentionalProcess'), subclass('Revealing', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5575, 'Anonymous', A).
mooCache(documentation('Revealing', string('"The Class of Processes where something is   moved into view."')), documentation('Revealing', string('"The Class of Processes where something is   moved into view."')), [], [], 'PrologMOO', 'PROCESSES', 5579, 'Anonymous', A).
mooCache(documentation('Impacting', string('"The Class of Processes where something comes   into sudden, forceful, physical contact with something else.  Some examples   would be striking, knocking, whipping etc."')), documentation('Impacting', string('"The Class of Processes where something comes   into sudden, forceful, physical contact with something else.  Some examples   would be striking, knocking, whipping etc."')), [], [], 'PrologMOO', 'PROCESSES', 5583, 'Anonymous', A).
mooCache(subclass('Striking', 'Impacting'), subclass('Striking', 'Impacting'), [], [], 'PrologMOO', 'PROCESSES', 5587, 'Anonymous', A).
mooCache(documentation('Striking', string('"The Class of Impactings that are   intentionally caused by a CognitiveAgent."')), documentation('Striking', string('"The Class of Impactings that are   intentionally caused by a CognitiveAgent."')), [], [], 'PrologMOO', 'PROCESSES', 5591, 'Anonymous', A).
mooCache(documentation('Poking', string('"The Class of Processes where the agent brings   a something long and narrow into contact with an Object and, in some cases,   pierces the surface of the Object."')), documentation('Poking', string('"The Class of Processes where the agent brings   a something long and narrow into contact with an Object and, in some cases,   pierces the surface of the Object."')), [], [], 'PrologMOO', 'PROCESSES', 5595, 'Anonymous', A).
mooCache(subclass('Touching', 'IntentionalProcess'), subclass('Touching', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5599, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Touching'), and(agent(A, B), patient(A, C))), holdsDuring('WhenFn'(A), connected(B, C))), and(entails(and(instance(A, 'Touching'), and(agent(A, B), patient(A, C))), holdsDuring('WhenFn'(A), connected(B, C))), and(entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(agent(A, B), patient(A, C))), not(instance(A, 'Touching'))), and(entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(instance(A, 'Touching'), patient(A, C))), not(agent(A, B))), entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(instance(A, 'Touching'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [connected:2, patient:2]), domainV(B, [agent:2, connected:1]), domainV(A, ['$instanceof':'Touching', 'WhenFn':1, agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TOUCH'=A, 'AGENT'=B, 'OBJ'=C], 'PrologMOO', 'PROCESSES', 5603, 'Anonymous', E).
mooCache(documentation('Holding', string('"The Class of Processes where the agent   maintains physical contact with something for an extended period of time."')), documentation('Holding', string('"The Class of Processes where the agent   maintains physical contact with something for an extended period of time."')), [], [], 'PrologMOO', 'PROCESSES', 5607, 'Anonymous', A).
mooCache(documentation('Covering', string('"The Class of Processes where the agent   covers the patient, either completely or only partially, with   something else."')), documentation('Covering', string('"The Class of Processes where the agent   covers the patient, either completely or only partially, with   something else."')), [], [], 'PrologMOO', 'PROCESSES', 5611, 'Anonymous', A).
mooCache(subclass('Dressing', 'Process'), subclass('Dressing', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5615, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Dressing'), instrument(A, B)), instance(B, 'Clothing')), and(entails(and(instance(A, 'Dressing'), instrument(A, B)), instance(B, 'Clothing')), and(entails(and(not(instance(B, 'Clothing')), instrument(A, B)), not(instance(A, 'Dressing'))), entails(and(not(instance(B, 'Clothing')), instance(A, 'Dressing')), not(instrument(A, B))))), [domainV(B, ['$instanceof':'Clothing', instrument:2]), domainV(A, ['$instanceof':'Dressing', instrument:1]), domainV(C, []), forall(A), forall(B)], ['DRESS'=A, 'CLOTH'=B], 'PrologMOO', 'PROCESSES', 5619, 'Anonymous', D).
mooCache(disjoint('Attaching', 'Detaching'), disjoint('Attaching', 'Detaching'), [], [], 'PrologMOO', 'PROCESSES', 5623, 'Anonymous', A).
mooCache(documentation('Attaching', string('"A Process where the agent attaches one thing   to something else.  Note that this is different from Putting in that two   things which are attached may already be in the same location."')), documentation('Attaching', string('"A Process where the agent attaches one thing   to something else.  Note that this is different from Putting in that two   things which are attached may already be in the same location."')), [], [], 'PrologMOO', 'PROCESSES', 5627, 'Anonymous', A).
mooCache(documentation('Tying', string('"The Process of tying two things, or two strands   of the same thing, together."')), documentation('Tying', string('"The Process of tying two things, or two strands   of the same thing, together."')), [], [], 'PrologMOO', 'PROCESSES', 5631, 'Anonymous', A).
mooCache(documentation('Detaching', string('"A Process where the agent detaches one thing   from something else.  Note that this is different from Removing in that   neither of the two things which are detached may be removed from the location   where it was attached."')), documentation('Detaching', string('"A Process where the agent detaches one thing   from something else.  Note that this is different from Removing in that   neither of the two things which are detached may be removed from the location   where it was attached."')), [], [], 'PrologMOO', 'PROCESSES', 5635, 'Anonymous', A).
mooCache(disjoint('Untying', 'Tying'), disjoint('Untying', 'Tying'), [], [], 'PrologMOO', 'PROCESSES', 5639, 'Anonymous', A).
mooCache(subclass('Cutting', 'Detaching'), subclass('Cutting', 'Detaching'), [], [], 'PrologMOO', 'PROCESSES', 5643, 'Anonymous', A).
mooCache(subclass('Combining', 'Process'), subclass('Combining', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5647, 'Anonymous', A).
mooCache(subclass('Separating', 'Process'), subclass('Separating', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5651, 'Anonymous', A).
mooCache(documentation('Separating', string('"A Process where something is disassembled   into (some of) its parts."')), documentation('Separating', string('"A Process where something is disassembled   into (some of) its parts."')), [], [], 'PrologMOO', 'PROCESSES', 5655, 'Anonymous', A).
mooCache(relatedInternalConcept('Decorating', 'SurfaceAlteration'), relatedInternalConcept('Decorating', 'SurfaceAlteration'), [], [], 'PrologMOO', 'PROCESSES', 5659, 'Anonymous', A).
mooCache(subclass('ShapeAlteration', 'Process'), subclass('ShapeAlteration', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5663, 'Anonymous', A).
mooCache(=>(and(instance(A, 'ShapeAlteration'), patient(A, B)), exists(C, and(instance(C, 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))))), and(and(entails(and(patient(A, B), not(instance(C, 'ShapeProperty'))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), not(instance(C, 'ShapeProperty'))), not(patient(A, B))), entails(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), instance(C, 'ShapeProperty')))), and(and(entails(and(patient(A, B), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))))), and(and(entails(and(patient(A, B), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))))), and(and(entails(and(patient(A, B), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))))), and(entails(and(patient(A, B), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))))))))), [domainV(C, ['$instanceof':'ShapeProperty', attribute:2]), domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'ShapeAlteration', 'WhenFn':1, patient:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY')))))))], ['ALT'=A, 'OBJ'=B, 'PROPERTY'=C], 'PrologMOO', 'PROCESSES', 5667, 'Anonymous', E).
mooCache(documentation('SurfaceAlteration', string('"The act of changing the appearance of the   surface of an Object."')), documentation('SurfaceAlteration', string('"The act of changing the appearance of the   surface of an Object."')), [], [], 'PrologMOO', 'PROCESSES', 5671, 'Anonymous', A).
mooCache(subclass('Coloring', 'SurfaceAlteration'), subclass('Coloring', 'SurfaceAlteration'), [], [], 'PrologMOO', 'PROCESSES', 5675, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Coloring'), patient(A, B)), exists(C, and(instance(C, 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C))))))), and(and(entails(and(and(instance(A, 'Coloring'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))))))), instance(C, 'ColorProperty')), and(entails(and(not(instance(C, 'ColorProperty')), patient(A, B)), not(instance(A, 'Coloring'))), entails(and(not(instance(C, 'ColorProperty')), instance(A, 'Coloring')), not(patient(A, B))))), and(and(entails(and(and(instance(A, 'Coloring'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), patient(A, B)), not(instance(A, 'Coloring'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), instance(A, 'Coloring')), not(patient(A, B))))), and(entails(and(and(instance(A, 'Coloring'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), patient(A, B)), not(instance(A, 'Coloring'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), instance(A, 'Coloring')), not(patient(A, B))))))), [domainV(C, ['$instanceof':'ColorProperty', attribute:2]), domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Coloring', 'WhenFn':1, patient:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))))))], ['COLORING'=A, 'OBJ'=B, 'PROPERTY'=C], 'PrologMOO', 'PROCESSES', 5679, 'Anonymous', E).
mooCache(documentation('Grooming', string('"The subclass of Process where parts of an   Organism are arranged in a socially pleasing manner.  Some examples are   shaving, brushing, combing, etc."')), documentation('Grooming', string('"The subclass of Process where parts of an   Organism are arranged in a socially pleasing manner.  Some examples are   shaving, brushing, combing, etc."')), [], [], 'PrologMOO', 'PROCESSES', 5683, 'Anonymous', A).
mooCache(documentation('ContentDevelopment', string('"A subclass of IntentionalProcess in   which content is modified, its form is altered or it is created anew."')), documentation('ContentDevelopment', string('"A subclass of IntentionalProcess in   which content is modified, its form is altered or it is created anew."')), [], [], 'PrologMOO', 'PROCESSES', 5687, 'Anonymous', A).
mooCache(documentation('Reading', string('"A subclass of ContentDevelopment in which   content is converted from a written form into a spoken or mental representation."')), documentation('Reading', string('"A subclass of ContentDevelopment in which   content is converted from a written form into a spoken or mental representation."')), [], [], 'PrologMOO', 'PROCESSES', 5691, 'Anonymous', A).
mooCache(documentation('Writing', string('"A subclass of ContentDevelopment in which   content is expressed in a Language."')), documentation('Writing', string('"A subclass of ContentDevelopment in which   content is expressed in a Language."')), [], [], 'PrologMOO', 'PROCESSES', 5695, 'Anonymous', A).
mooCache(documentation('Encoding', string('"Converting a document or message into a formal   language or into a code that can be understood only by a relatively small   body of Agents.  Generally speaking, this hinders wide dissemination of   the content in the original document or message."')), documentation('Encoding', string('"Converting a document or message into a formal   language or into a code that can be understood only by a relatively small   body of Agents.  Generally speaking, this hinders wide dissemination of   the content in the original document or message."')), [], [], 'PrologMOO', 'PROCESSES', 5699, 'Anonymous', A).
mooCache(disjoint('Decoding', 'Encoding'), disjoint('Decoding', 'Encoding'), [], [], 'PrologMOO', 'PROCESSES', 5703, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Decoding'), patient(A, B)), exists(C, exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), holdsDuring(C, and(instance(E, 'Encoding'), patient(E, D)))))))))), and(and(entails(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), containsInformation(D, F)), and(entails(and(not(containsInformation(D, F)), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(containsInformation(D, F)), instance(A, 'Decoding')), not(patient(A, B))))), and(and(entails(and(instance(A, 'Decoding'), patient(A, B)), containsInformation(B, F)), and(entails(and(not(containsInformation(B, F)), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(containsInformation(B, F)), instance(A, 'Decoding')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(C, '?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), temporalPart(C, 'PastFn'('WhenFn'(A)))), and(entails(and(not(temporalPart(C, 'PastFn'('WhenFn'(A)))), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(temporalPart(C, 'PastFn'('WhenFn'(A)))), instance(A, 'Decoding')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(C, '?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), holdsDuring(C, instance(E, 'Encoding'))), and(entails(and(not(holdsDuring(C, instance(E, 'Encoding'))), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(holdsDuring(C, instance(E, 'Encoding'))), instance(A, 'Decoding')), not(patient(A, B))))), and(entails(and(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(C, '?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), holdsDuring(C, patient(E, D))), and(entails(and(not(holdsDuring(C, patient(E, D))), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(holdsDuring(C, patient(E, D))), instance(A, 'Decoding')), not(patient(A, B))))))))), [domainV(F, [containsInformation:2]), domainV(E, ['$instanceof':'Encoding', patient:1]), domainV(D, [containsInformation:1, patient:2]), domainV(C, [holdsDuring:1, temporalPart:1]), domainV(B, [containsInformation:1, patient:2]), domainV(A, ['$instanceof':'Decoding', 'WhenFn':1, patient:1]), domainV(G, []), forall(A), forall(B), forall(F), replaceConsVar(C, '$existential'('?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), replaceConsVar(D, '$existential'('?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), replaceConsVar(E, '$existential'('?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D))))))))], ['DECODE'=A, 'DOC1'=B, 'ENCODE'=E, 'DOC2'=D, 'TIME'=C, 'PROP'=F], 'PrologMOO', 'PROCESSES', 5707, 'Anonymous', H).
mooCache(documentation('Wetting', string('"The Class of Processes where Water is added to an Object."')), documentation('Wetting', string('"The Class of Processes where Water is added to an Object."')), [], [], 'PrologMOO', 'PROCESSES', 5711, 'Anonymous', A).
mooCache(subclass('Drying', 'Process'), subclass('Drying', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5715, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Drying'), patient(A, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), or(attribute(B, 'Anhydrous'), attribute(B, 'Dry')))), and(entails(and(patient(A, B), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous'))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry'))))), not(instance(A, 'Drying'))), and(entails(and(instance(A, 'Drying'), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous'))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry'))))), not(patient(A, B))), and(entails(and(and(instance(A, 'Drying'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry')))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous'))), entails(and(and(instance(A, 'Drying'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous')))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry')))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Drying', 'WhenFn':1, patient:1]), domainV(C, []), forall(A), forall(B)], ['DRY'=A, 'OBJ'=B], 'PrologMOO', 'PROCESSES', 5719, 'Anonymous', D).
mooCache(documentation('Creation', string('"The subclass of Process in which   something is created.  Note that the thing created is specified   with the result CaseRole."')), documentation('Creation', string('"The subclass of Process in which   something is created.  Note that the thing created is specified   with the result CaseRole."')), [], [], 'PrologMOO', 'PROCESSES', 5723, 'Anonymous', A).
mooCache(<=>(instance(A, 'Creation'), exists(B, and(patient(A, B), and(time(B, 'ImmediateFutureFn'('WhenFn'(A))), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))))), and(and(entails(and(instance(A, 'Creation'), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), patient(A, B)), and(entails(and(instance(A, 'Creation'), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), time(B, 'ImmediateFutureFn'('WhenFn'(A)))), and(entails(instance(A, 'Creation'), not(time(B, 'ImmediatePastFn'('WhenFn'(A))))), entails(or(not(patient(A, B)), or(not(time(B, 'ImmediateFutureFn'('WhenFn'(A)))), time(B, 'ImmediatePastFn'('WhenFn'(A))))), not(instance(A, 'Creation')))))), and(entails(and(patient(A, B), and(time(B, 'ImmediateFutureFn'('WhenFn'(A))), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))), instance(A, 'Creation')), and(entails(and(not(instance(A, 'Creation')), and(time(B, 'ImmediateFutureFn'('WhenFn'(A))), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))), not(patient(A, B))), and(entails(and(not(instance(A, 'Creation')), and(patient(A, B), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))), not(time(B, 'ImmediateFutureFn'('WhenFn'(A))))), entails(and(and(not(instance(A, 'Creation')), and(patient(A, B), time(B, 'ImmediateFutureFn'('WhenFn'(A))))), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), time(B, 'ImmediatePastFn'('WhenFn'(A)))))))), [domainV(B, [patient:2, time:1]), domainV(A, ['$instanceof':'Creation', 'WhenFn':1, patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), forall(B)], ['PROCESS'=A, 'PATIENT'=B], 'PrologMOO', 'PROCESSES', 5727, 'Anonymous', D).
mooCache(relatedInternalConcept('Making', 'OccupationalProcess'), relatedInternalConcept('Making', 'OccupationalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5731, 'Anonymous', A).
mooCache(=>(instance(A, 'Making'), exists(B, and(instance(B, 'Artifact'), result(A, B)))), and(and(entails(not(instance(B, 'Artifact')), not(instance(A, 'Making'))), entails(and(instance(A, 'Making'), '$existential'(B, '?ARTIFACT', and(instance('?ARTIFACT', 'Artifact'), result(A, '?ARTIFACT')))), instance(B, 'Artifact'))), and(entails(not(result(A, B)), not(instance(A, 'Making'))), entails(and(instance(A, 'Making'), '$existential'(B, '?ARTIFACT', and(instance('?ARTIFACT', 'Artifact'), result(A, '?ARTIFACT')))), result(A, B)))), [domainV(B, ['$instanceof':'Artifact', result:2]), domainV(A, ['$instanceof':'Making', result:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ARTIFACT', and(instance('?ARTIFACT', 'Artifact'), result(A, '?ARTIFACT'))))], ['MAKE'=A, 'ARTIFACT'=B], 'PrologMOO', 'PROCESSES', 5735, 'Anonymous', D).
mooCache(documentation('Constructing', string('"The subclass of Making in which a   StationaryArtifact is built."')), documentation('Constructing', string('"The subclass of Making in which a   StationaryArtifact is built."')), [], [], 'PrologMOO', 'PROCESSES', 5739, 'Anonymous', A).
mooCache(subclass('Manufacture', 'Making'), subclass('Manufacture', 'Making'), [], [], 'PrologMOO', 'PROCESSES', 5743, 'Anonymous', A).
mooCache(subclass('Publication', 'Manufacture'), subclass('Publication', 'Manufacture'), [], [], 'PrologMOO', 'PROCESSES', 5747, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Publication'), patient(A, B)), subclass(B, 'Text')), and(entails(and(instance(A, 'Publication'), patient(A, B)), subclass(B, 'Text')), and(entails(and(not(subclass(B, 'Text')), patient(A, B)), not(instance(A, 'Publication'))), entails(and(not(subclass(B, 'Text')), instance(A, 'Publication')), not(patient(A, B))))), [domainV(B, [patient:2, subclass:1]), domainV(A, ['$instanceof':'Publication', patient:1]), domainV(C, []), forall(A), forall(B)], ['PUB'=A, 'TEXT'=B], 'PrologMOO', 'PROCESSES', 5751, 'Anonymous', D).
mooCache(documentation('Cooking', string('"The Making of an instance of Food."')), documentation('Cooking', string('"The Making of an instance of Food."')), [], [], 'PrologMOO', 'PROCESSES', 5755, 'Anonymous', A).
mooCache(documentation('Destruction', string('"The subclass of Process in which   the patient (or an essential element of the patient) is destroyed."')), documentation('Destruction', string('"The subclass of Process in which   the patient (or an essential element of the patient) is destroyed."')), [], [], 'PrologMOO', 'PROCESSES', 5759, 'Anonymous', A).
mooCache(subclass('Killing', 'Destruction'), subclass('Killing', 'Destruction'), [], [], 'PrologMOO', 'PROCESSES', 5763, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Killing'), and(agent(A, B), patient(A, C))), and(instance(B, 'Organism'), instance(C, 'Organism'))), and(and(entails(and(instance(A, 'Killing'), and(agent(A, B), patient(A, C))), instance(B, 'Organism')), and(entails(and(not(instance(B, 'Organism')), and(agent(A, B), patient(A, C))), not(instance(A, 'Killing'))), and(entails(and(not(instance(B, 'Organism')), and(instance(A, 'Killing'), patient(A, C))), not(agent(A, B))), entails(and(not(instance(B, 'Organism')), and(instance(A, 'Killing'), agent(A, B))), not(patient(A, C)))))), and(entails(and(instance(A, 'Killing'), and(agent(A, B), patient(A, C))), instance(C, 'Organism')), and(entails(and(not(instance(C, 'Organism')), and(agent(A, B), patient(A, C))), not(instance(A, 'Killing'))), and(entails(and(not(instance(C, 'Organism')), and(instance(A, 'Killing'), patient(A, C))), not(agent(A, B))), entails(and(not(instance(C, 'Organism')), and(instance(A, 'Killing'), agent(A, B))), not(patient(A, C))))))), [domainV(C, ['$instanceof':'Organism', patient:2]), domainV(B, ['$instanceof':'Organism', agent:2]), domainV(A, ['$instanceof':'Killing', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['KILL'=A, 'AGENT'=B, 'PATIENT'=C], 'PrologMOO', 'PROCESSES', 5767, 'Anonymous', E).
mooCache(subclass('Searching', 'IntentionalProcess'), subclass('Searching', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5771, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Searching'), and(agent(A, B), patient(A, C))), inScopeOfInterest(B, C)), and(entails(and(instance(A, 'Searching'), and(agent(A, B), patient(A, C))), inScopeOfInterest(B, C)), and(entails(and(not(inScopeOfInterest(B, C)), and(agent(A, B), patient(A, C))), not(instance(A, 'Searching'))), and(entails(and(not(inScopeOfInterest(B, C)), and(instance(A, 'Searching'), patient(A, C))), not(agent(A, B))), entails(and(not(inScopeOfInterest(B, C)), and(instance(A, 'Searching'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [inScopeOfInterest:2, patient:2]), domainV(B, [agent:2, inScopeOfInterest:1]), domainV(A, ['$instanceof':'Searching', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['SEARCH'=A, 'AGENT'=B, 'ENTITY'=C], 'PrologMOO', 'PROCESSES', 5775, 'Anonymous', E).
mooCache(documentation('Pursuing', string('"The subclass of Searching where the thing   sought is an Object.  Some examples would be hunting, shopping,   trawling, and stalking."')), documentation('Pursuing', string('"The subclass of Searching where the thing   sought is an Object.  Some examples would be hunting, shopping,   trawling, and stalking."')), [], [], 'PrologMOO', 'PROCESSES', 5779, 'Anonymous', A).
mooCache(subclass('Investigating', 'Searching'), subclass('Investigating', 'Searching'), [], [], 'PrologMOO', 'PROCESSES', 5783, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Investigating'), patient(A, B)), instance(B, 'Formula')), and(entails(and(instance(A, 'Investigating'), patient(A, B)), instance(B, 'Formula')), and(entails(and(not(instance(B, 'Formula')), patient(A, B)), not(instance(A, 'Investigating'))), entails(and(not(instance(B, 'Formula')), instance(A, 'Investigating')), not(patient(A, B))))), [domainV(B, ['$instanceof':'Formula', patient:2]), domainV(A, ['$instanceof':'Investigating', patient:1]), domainV(C, []), forall(A), forall(B)], ['INVESTIGATE'=A, 'PROP'=B], 'PrologMOO', 'PROCESSES', 5787, 'Anonymous', D).
mooCache(subclass('SocialInteraction', 'IntentionalProcess'), subclass('SocialInteraction', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5791, 'Anonymous', A).
mooCache(=>(instance(A, 'SocialInteraction'), exists(B, exists(C, and(agent(A, C), and(agent(A, B), not(equal(C, B))))))), and(and(entails(not(agent(A, C)), not(instance(A, 'SocialInteraction'))), entails(and(instance(A, 'SocialInteraction'), '$existential'(C, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, B), not(equal('?AGENT1', B)))))), agent(A, C))), and(and(entails(not(agent(A, B)), not(instance(A, 'SocialInteraction'))), entails(and(and(instance(A, 'SocialInteraction'), '$existential'(B, '?AGENT2', exists(C, and(agent(A, C), and(agent(A, '?AGENT2'), not(equal(C, '?AGENT2'))))))), '$existential'(C, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, B), not(equal('?AGENT1', B)))))), agent(A, B))), and(entails(equal(C, B), not(instance(A, 'SocialInteraction'))), entails(instance(A, 'SocialInteraction'), not(equal(C, B)))))), [domainV(C, [agent:2]), domainV(B, [agent:2]), domainV(A, ['$instanceof':'SocialInteraction', agent:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?AGENT2', exists(C, and(agent(A, C), and(agent(A, '?AGENT2'), not(equal(C, '?AGENT2'))))))), replaceConsVar(C, '$existential'('?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, B), not(equal('?AGENT1', B))))))], ['INTERACTION'=A, 'AGENT1'=C, 'AGENT2'=B], 'PrologMOO', 'PROCESSES', 5795, 'Anonymous', E).
mooCache(documentation('Pretending', string('"Any SocialInteraction where a   CognitiveAgent or Group of CognitiveAgents attempts to make   another CognitiveAgent or Group of CognitiveAgents believe   something that is false.  This covers deceit, affectation,   impersonation, and entertainment productions, to give just a few   examples."')), documentation('Pretending', string('"Any SocialInteraction where a   CognitiveAgent or Group of CognitiveAgents attempts to make   another CognitiveAgent or Group of CognitiveAgents believe   something that is false.  This covers deceit, affectation,   impersonation, and entertainment productions, to give just a few   examples."')), [], [], 'PrologMOO', 'PROCESSES', 5799, 'Anonymous', A).
mooCache(subclass('Communication', 'SocialInteraction'), subclass('Communication', 'SocialInteraction'), [], [], 'PrologMOO', 'PROCESSES', 5803, 'Anonymous', A).
mooCache(=>(instance(A, 'Communication'), exists(B, and(instance(B, 'ContentBearingObject'), patient(A, B)))), and(and(entails(not(instance(B, 'ContentBearingObject')), not(instance(A, 'Communication'))), entails(and(instance(A, 'Communication'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'ContentBearingObject'), patient(A, '?OBJ')))), instance(B, 'ContentBearingObject'))), and(entails(not(patient(A, B)), not(instance(A, 'Communication'))), entails(and(instance(A, 'Communication'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'ContentBearingObject'), patient(A, '?OBJ')))), patient(A, B)))), [domainV(B, ['$instanceof':'ContentBearingObject', patient:2]), domainV(A, ['$instanceof':'Communication', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(instance('?OBJ', 'ContentBearingObject'), patient(A, '?OBJ'))))], ['ACTION'=A, 'OBJ'=B], 'PrologMOO', 'PROCESSES', 5807, 'Anonymous', D).
mooCache(documentation('Disseminating', string('"Any Communication that involves a   single source and many destinations.  This covers the release   of a published book, broadcasting, a theatrical performance, giving   orders to assembled troops, delivering a public lecture, etc."')), documentation('Disseminating', string('"Any Communication that involves a   single source and many destinations.  This covers the release   of a published book, broadcasting, a theatrical performance, giving   orders to assembled troops, delivering a public lecture, etc."')), [], [], 'PrologMOO', 'PROCESSES', 5811, 'Anonymous', A).
mooCache(documentation('Stating', string('"Instances of this Class commit a sender to some truth.   Example: John concluded that Peter was not present, and predicted that he would   arrive soon."')), documentation('Stating', string('"Instances of this Class commit a sender to some truth.   Example: John concluded that Peter was not present, and predicted that he would   arrive soon."')), [], [], 'PrologMOO', 'PROCESSES', 5815, 'Anonymous', A).
mooCache(documentation('Directing', string('"Instances of this Class urge some further action   among the receivers.  Example: The 5th Battalion requested air support from   the 3rd Bomber Group."')), documentation('Directing', string('"Instances of this Class urge some further action   among the receivers.  Example: The 5th Battalion requested air support from   the 3rd Bomber Group."')), [], [], 'PrologMOO', 'PROCESSES', 5819, 'Anonymous', A).
mooCache(documentation('Ordering', string('"A Directing in which the receiver is   commanded to realize the content of a ContentBearingObject.  Orders   are injunctions, the disobedience of which involves sanctions, or   which express an obligation upon the part of the orderee."')), documentation('Ordering', string('"A Directing in which the receiver is   commanded to realize the content of a ContentBearingObject.  Orders   are injunctions, the disobedience of which involves sanctions, or   which express an obligation upon the part of the orderee."')), [], [], 'PrologMOO', 'PROCESSES', 5823, 'Anonymous', A).
mooCache(subclass('Requesting', 'Directing'), subclass('Requesting', 'Directing'), [], [], 'PrologMOO', 'PROCESSES', 5827, 'Anonymous', A).
mooCache(subclass('Questioning', 'Directing'), subclass('Questioning', 'Directing'), [], [], 'PrologMOO', 'PROCESSES', 5831, 'Anonymous', A).
mooCache(subclass('Committing', 'Communication'), subclass('Committing', 'Communication'), [], [], 'PrologMOO', 'PROCESSES', 5835, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Committing'), patient(A, B)), modalProperty(A, 'Promise')), and(entails(and(instance(A, 'Committing'), patient(A, B)), modalProperty(A, 'Promise')), and(entails(and(not(modalProperty(A, 'Promise')), patient(A, B)), not(instance(A, 'Committing'))), entails(and(not(modalProperty(A, 'Promise')), instance(A, 'Committing')), not(patient(A, B))))), [domainV(B, [patient:2]), domainV(A, ['$instanceof':'Committing', modalProperty:1, patient:1]), domainV(C, []), forall(A), forall(B)], ['COMMIT'=A, 'FORMULA'=B], 'PrologMOO', 'PROCESSES', 5839, 'Anonymous', D).
mooCache(documentation('Expressing', string('"Instances of this Class express a state of the sender.   Example: Jane thanked Barbara for the present she had given her."')), documentation('Expressing', string('"Instances of this Class express a state of the sender.   Example: Jane thanked Barbara for the present she had given her."')), [], [], 'PrologMOO', 'PROCESSES', 5843, 'Anonymous', A).
mooCache(documentation('Declaring', string('"The Class of Communications that effect an   institutional alteration when performed by competent authority.  Some   examples are nominating, marrying, and excommunicating."')), documentation('Declaring', string('"The Class of Communications that effect an   institutional alteration when performed by competent authority.  Some   examples are nominating, marrying, and excommunicating."')), [], [], 'PrologMOO', 'PROCESSES', 5847, 'Anonymous', A).
mooCache(documentation('Cooperation', string('"The subclass of SocialInteraction where   the participants involved work together for the achievement of a common   goal."')), documentation('Cooperation', string('"The subclass of SocialInteraction where   the participants involved work together for the achievement of a common   goal."')), [], [], 'PrologMOO', 'PROCESSES', 5851, 'Anonymous', A).
mooCache(subclass('Meeting', 'SocialInteraction'), subclass('Meeting', 'SocialInteraction'), [], [], 'PrologMOO', 'PROCESSES', 5855, 'Anonymous', A).
mooCache(subclass('Competition', 'Process'), subclass('Competition', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5859, 'Anonymous', A).
mooCache(subclass('Contest', 'Competition'), subclass('Contest', 'Competition'), [], [], 'PrologMOO', 'PROCESSES', 5863, 'Anonymous', A).
mooCache(documentation('Contest', string('"A Competition in which the Agents are   CognitiveAgents.  More specifically, the Agents are aware at some   level that there is a prize at stake in the Competition."')), documentation('Contest', string('"A Competition in which the Agents are   CognitiveAgents.  More specifically, the Agents are aware at some   level that there is a prize at stake in the Competition."')), [], [], 'PrologMOO', 'PROCESSES', 5867, 'Anonymous', A).
mooCache(subclass('ViolentContest', 'Contest'), subclass('ViolentContest', 'Contest'), [], [], 'PrologMOO', 'PROCESSES', 5871, 'Anonymous', A).
mooCache(subclass('War', 'ViolentContest'), subclass('War', 'ViolentContest'), [], [], 'PrologMOO', 'PROCESSES', 5875, 'Anonymous', A).
mooCache(=>(instance(A, 'War'), exists(B, and(instance(B, 'Battle'), subProcess(B, A)))), and(and(entails(not(instance(B, 'Battle')), not(instance(A, 'War'))), entails(and(instance(A, 'War'), '$existential'(B, '?BATTLE', and(instance('?BATTLE', 'Battle'), subProcess('?BATTLE', A)))), instance(B, 'Battle'))), and(entails(not(subProcess(B, A)), not(instance(A, 'War'))), entails(and(instance(A, 'War'), '$existential'(B, '?BATTLE', and(instance('?BATTLE', 'Battle'), subProcess('?BATTLE', A)))), subProcess(B, A)))), [domainV(B, ['$instanceof':'Battle', subProcess:1]), domainV(A, ['$instanceof':'War', subProcess:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BATTLE', and(instance('?BATTLE', 'Battle'), subProcess('?BATTLE', A))))], ['WAR'=A, 'BATTLE'=B], 'PrologMOO', 'PROCESSES', 5879, 'Anonymous', D).
mooCache(subclass('Battle', 'ViolentContest'), subclass('Battle', 'ViolentContest'), [], [], 'PrologMOO', 'PROCESSES', 5883, 'Anonymous', A).
mooCache(=>(instance(A, 'Battle'), exists(B, and(instance(B, 'War'), subProcess(A, B)))), and(and(entails(not(instance(B, 'War')), not(instance(A, 'Battle'))), entails(and(instance(A, 'Battle'), '$existential'(B, '?WAR', and(instance('?WAR', 'War'), subProcess(A, '?WAR')))), instance(B, 'War'))), and(entails(not(subProcess(A, B)), not(instance(A, 'Battle'))), entails(and(instance(A, 'Battle'), '$existential'(B, '?WAR', and(instance('?WAR', 'War'), subProcess(A, '?WAR')))), subProcess(A, B)))), [domainV(B, ['$instanceof':'War', subProcess:2]), domainV(A, ['$instanceof':'Battle', subProcess:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?WAR', and(instance('?WAR', 'War'), subProcess(A, '?WAR'))))], ['BATTLE'=A, 'WAR'=B], 'PrologMOO', 'PROCESSES', 5887, 'Anonymous', D).
mooCache(subclass('Game', 'Contest'), subclass('Game', 'Contest'), [], [], 'PrologMOO', 'PROCESSES', 5891, 'Anonymous', A).
mooCache(documentation('Game', string('"A Contest whose purpose is the   enjoyment/stimulation of the participants or spectators of the Game."')), documentation('Game', string('"A Contest whose purpose is the   enjoyment/stimulation of the participants or spectators of the Game."')), [], [], 'PrologMOO', 'PROCESSES', 5895, 'Anonymous', A).
mooCache(subclass('Sport', 'ExerciseProcess'), subclass('Sport', 'ExerciseProcess'), [], [], 'PrologMOO', 'PROCESSES', 5899, 'Anonymous', A).
mooCache(subclass('LegalAction', 'Contest'), subclass('LegalAction', 'Contest'), [], [], 'PrologMOO', 'PROCESSES', 5903, 'Anonymous', A).
mooCache(subclass('Maneuver', 'IntentionalProcess'), subclass('Maneuver', 'IntentionalProcess'), [], [], 'PrologMOO', 'PROCESSES', 5907, 'Anonymous', A).
mooCache(=>(instance(A, 'Maneuver'), exists(B, and(instance(B, 'Contest'), subProcess(A, B)))), and(and(entails(not(instance(B, 'Contest')), not(instance(A, 'Maneuver'))), entails(and(instance(A, 'Maneuver'), '$existential'(B, '?CONTEST', and(instance('?CONTEST', 'Contest'), subProcess(A, '?CONTEST')))), instance(B, 'Contest'))), and(entails(not(subProcess(A, B)), not(instance(A, 'Maneuver'))), entails(and(instance(A, 'Maneuver'), '$existential'(B, '?CONTEST', and(instance('?CONTEST', 'Contest'), subProcess(A, '?CONTEST')))), subProcess(A, B)))), [domainV(B, ['$instanceof':'Contest', subProcess:2]), domainV(A, ['$instanceof':'Maneuver', subProcess:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?CONTEST', and(instance('?CONTEST', 'Contest'), subProcess(A, '?CONTEST'))))], ['MOVE'=A, 'CONTEST'=B], 'PrologMOO', 'PROCESSES', 5911, 'Anonymous', D).
mooCache(documentation('Perception', string('"Sensing some aspect of the material world.    Note that the agent of this sensing is assumed to be an Animal."')), documentation('Perception', string('"Sensing some aspect of the material world.    Note that the agent of this sensing is assumed to be an Animal."')), [], [], 'PrologMOO', 'PROCESSES', 5915, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Perception'), and(agent(A, B), patient(A, C))), notices(B, C)), and(entails(and(instance(A, 'Perception'), and(agent(A, B), patient(A, C))), notices(B, C)), and(entails(and(not(notices(B, C)), and(agent(A, B), patient(A, C))), not(instance(A, 'Perception'))), and(entails(and(not(notices(B, C)), and(instance(A, 'Perception'), patient(A, C))), not(agent(A, B))), entails(and(not(notices(B, C)), and(instance(A, 'Perception'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [notices:2, patient:2]), domainV(B, [agent:2, notices:1]), domainV(A, ['$instanceof':'Perception', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PERCEPT'=A, 'AGENT'=B, 'OBJECT'=C], 'PrologMOO', 'PROCESSES', 5919, 'Anonymous', E).
mooCache(documentation('Seeing', string('"The subclass of Perception in which the   sensing is done by an ocular Organ."')), documentation('Seeing', string('"The subclass of Perception in which the   sensing is done by an ocular Organ."')), [], [], 'PrologMOO', 'PROCESSES', 5923, 'Anonymous', A).
mooCache(documentation('Smelling', string('"The subclass of Perception in which the   sensing is done by an olefactory Organ."')), documentation('Smelling', string('"The subclass of Perception in which the   sensing is done by an olefactory Organ."')), [], [], 'PrologMOO', 'PROCESSES', 5927, 'Anonymous', A).
mooCache(documentation('Tasting', string('"The subclass of Perception in which the   sensing is done by of an Organ which can discriminate various tastes."')), documentation('Tasting', string('"The subclass of Perception in which the   sensing is done by of an Organ which can discriminate various tastes."')), [], [], 'PrologMOO', 'PROCESSES', 5931, 'Anonymous', A).
mooCache(documentation('Hearing', string('"The subclass of Perception in which the   sensing is done by an auditory Organ."')), documentation('Hearing', string('"The subclass of Perception in which the   sensing is done by an auditory Organ."')), [], [], 'PrologMOO', 'PROCESSES', 5935, 'Anonymous', A).
mooCache(documentation('TactilePerception', string('"The subclass of Perception in which   the sensing is done by Touching."')), documentation('TactilePerception', string('"The subclass of Perception in which   the sensing is done by Touching."')), [], [], 'PrologMOO', 'PROCESSES', 5939, 'Anonymous', A).
mooCache(subclass('Emitting', 'Process'), subclass('Emitting', 'Process'), [], [], 'PrologMOO', 'PROCESSES', 5943, 'Anonymous', A).
mooCache(subclass('EmittingLight', 'Emitting'), subclass('EmittingLight', 'Emitting'), [], [], 'PrologMOO', 'PROCESSES', 5947, 'Anonymous', A).
mooCache(subclass('EmittingSmell', 'Emitting'), subclass('EmittingSmell', 'Emitting'), [], [], 'PrologMOO', 'PROCESSES', 5951, 'Anonymous', A).
mooCache(subclass('EmittingSound', 'Emitting'), subclass('EmittingSound', 'Emitting'), [], [], 'PrologMOO', 'PROCESSES', 5955, 'Anonymous', A).
mooCache(subclass('Music', 'EmittingSound'), subclass('Music', 'EmittingSound'), [], [], 'PrologMOO', 'PROCESSES', 5959, 'Anonymous', A).
mooCache('include-context'('MEREOTOPOLOGY'), 'include-context'('MEREOTOPOLOGY'), [], [], 'PrologMOO', 'OBJECTS', 5973, 'Anonymous', A).
mooCache('include-context'('QUALITIES'), 'include-context'('QUALITIES'), [], [], 'PrologMOO', 'OBJECTS', 5979, 'Anonymous', A).
mooCache(relatedInternalConcept('Nation', 'Land'), relatedInternalConcept('Nation', 'Land'), [], [], 'PrologMOO', 'OBJECTS', 5984, 'Anonymous', A).
mooCache(=>(instance(A, 'Nation'), exists(B, and(instance(B, 'Government'), subOrganizations(B, A)))), and(and(entails(not(instance(B, 'Government')), not(instance(A, 'Nation'))), entails(and(instance(A, 'Nation'), '$existential'(B, '?GOV', and(instance('?GOV', 'Government'), subOrganizations('?GOV', A)))), instance(B, 'Government'))), and(entails(not(subOrganizations(B, A)), not(instance(A, 'Nation'))), entails(and(instance(A, 'Nation'), '$existential'(B, '?GOV', and(instance('?GOV', 'Government'), subOrganizations('?GOV', A)))), subOrganizations(B, A)))), [domainV(B, ['$instanceof':'Government', subOrganizations:1]), domainV(A, ['$instanceof':'Nation', subOrganizations:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?GOV', and(instance('?GOV', 'Government'), subOrganizations('?GOV', A))))], ['NATION'=A, 'GOV'=B], 'PrologMOO', 'OBJECTS', 5988, 'Anonymous', D).
mooCache(documentation('GeographicArea', string('"A geographic location, generally having   definite boundaries.  Note that this differs from its immediate superclass   Region in that a GeographicArea is a Region of land of significant   size."')), documentation('GeographicArea', string('"A geographic location, generally having   definite boundaries.  Note that this differs from its immediate superclass   Region in that a GeographicArea is a Region of land of significant   size."')), [], [], 'PrologMOO', 'OBJECTS', 5992, 'Anonymous', A).
mooCache(documentation('TimeZone', string('"A GeographicArea in which time measures are   uniform, i.e. all time devices are synchronized to the same temporal   coordinates."')), documentation('TimeZone', string('"A GeographicArea in which time measures are   uniform, i.e. all time devices are synchronized to the same temporal   coordinates."')), [], [], 'PrologMOO', 'OBJECTS', 5996, 'Anonymous', A).
mooCache(documentation('CoordinatedUniversalTimeZone', string('"A TimeZone which functions   as the standard time zone.  It is also known as Zulu time (in the military),   Greenwich Mean Time, and the Western European time zone.  Note that whenever   a TimeZone is not specified, the TimePosition is understood to be with   respect to the CoordinatedUniversalTimeZone."')), documentation('CoordinatedUniversalTimeZone', string('"A TimeZone which functions   as the standard time zone.  It is also known as Zulu time (in the military),   Greenwich Mean Time, and the Western European time zone.  Note that whenever   a TimeZone is not specified, the TimePosition is understood to be with   respect to the CoordinatedUniversalTimeZone."')), [], [], 'PrologMOO', 'OBJECTS', 6000, 'Anonymous', A).
mooCache(documentation('PacificTimeZone', string('"A TimeZone that covers much of the   western part of the United States."')), documentation('PacificTimeZone', string('"A TimeZone that covers much of the   western part of the United States."')), [], [], 'PrologMOO', 'OBJECTS', 6004, 'Anonymous', A).
mooCache(instance('MountainTimeZone', 'TimeZone'), instance('MountainTimeZone', 'TimeZone'), [], [], 'PrologMOO', 'OBJECTS', 6008, 'Anonymous', A).
mooCache(=>(equal('RelativeTimeFn'(A, 'MountainTimeZone'), B), equal(B, 'AdditionFn'(A, 7))), and(entails(not(holds('AdditionFn', A, 7, B)), not(holds('RelativeTimeFn', A, 'MountainTimeZone', B))), entails(holds('RelativeTimeFn', A, 'MountainTimeZone', B), holds('AdditionFn', A, 7, B))), [domainV(B, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(A, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(C, []), forall(A), forall(B)], ['TIME1'=A, 'TIME2'=B], 'PrologMOO', 'OBJECTS', 6012, 'Anonymous', D).
mooCache(documentation('CentralTimeZone', string('"A TimeZone that covers much of the   midwestern United States."')), documentation('CentralTimeZone', string('"A TimeZone that covers much of the   midwestern United States."')), [], [], 'PrologMOO', 'OBJECTS', 6016, 'Anonymous', A).
mooCache(instance('EasternTimeZone', 'TimeZone'), instance('EasternTimeZone', 'TimeZone'), [], [], 'PrologMOO', 'OBJECTS', 6020, 'Anonymous', A).
mooCache(=>(equal('RelativeTimeFn'(A, 'EasternTimeZone'), B), equal(B, 'AdditionFn'(A, 5))), and(entails(not(holds('AdditionFn', A, 5, B)), not(holds('RelativeTimeFn', A, 'EasternTimeZone', B))), entails(holds('RelativeTimeFn', A, 'EasternTimeZone', B), holds('AdditionFn', A, 5, B))), [domainV(B, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(A, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(C, []), forall(A), forall(B)], ['TIME1'=A, 'TIME2'=B], 'PrologMOO', 'OBJECTS', 6024, 'Anonymous', D).
mooCache(instance('RelativeTimeFn', 'TemporalRelation'), instance('RelativeTimeFn', 'TemporalRelation'), [], [], 'PrologMOO', 'OBJECTS', 6028, 'Anonymous', A).
mooCache(domain('RelativeTimeFn', 2, 'TimeZone'), domain('RelativeTimeFn', 2, 'TimeZone'), [], [], 'PrologMOO', 'OBJECTS', 6032, 'Anonymous', A).
mooCache(documentation('RelativeTimeFn', string('"A means of converting TimePositions   between different TimeZones.  (RelativeTimeFn ?TIME ?ZONE)   denotes the TimePosition in CoordinatedUniversalTime that is   contemporaneous with the TimePosition ?TIME in TimeZone ?ZONE.    For example, (RelativeTimeFn (MeasureFn 14 Hour) EasternTimeZone)   would return the value (MeasureFn 19 Hour)."')), documentation('RelativeTimeFn', string('"A means of converting TimePositions   between different TimeZones.  (RelativeTimeFn ?TIME ?ZONE)   denotes the TimePosition in CoordinatedUniversalTime that is   contemporaneous with the TimePosition ?TIME in TimeZone ?ZONE.    For example, (RelativeTimeFn (MeasureFn 14 Hour) EasternTimeZone)   would return the value (MeasureFn 19 Hour)."')), [], [], 'PrologMOO', 'OBJECTS', 6036, 'Anonymous', A).
mooCache(documentation('Land', string('"A Land is the GeographicArea associated with   a nation.  For example, the Land of Australia is the Region making   up the continent of Oceania."')), documentation('Land', string('"A Land is the GeographicArea associated with   a nation.  For example, the Land of Australia is the Region making   up the continent of Oceania."')), [], [], 'PrologMOO', 'OBJECTS', 6040, 'Anonymous', A).
mooCache(documentation('Address', string('"A GeographicArea with definite boundaries   and of relatively small size.  This concept represents the state of   \'being at an address\'."')), documentation('Address', string('"A GeographicArea with definite boundaries   and of relatively small size.  This concept represents the state of   \'being at an address\'."')), [], [], 'PrologMOO', 'OBJECTS', 6044, 'Anonymous', A).
mooCache(documentation('City', string('"A GeographicArea of relatively small size, inhabited   by people, and exhibiting a distinctive sort of political structure."')), documentation('City', string('"A GeographicArea of relatively small size, inhabited   by people, and exhibiting a distinctive sort of political structure."')), [], [], 'PrologMOO', 'OBJECTS', 6048, 'Anonymous', A).
mooCache(documentation('Water', string('"The Class of samples of the compound H20.  Note   that this Class covers both pure and impure Water."')), documentation('Water', string('"The Class of samples of the compound H20.  Note   that this Class covers both pure and impure Water."')), [], [], 'PrologMOO', 'OBJECTS', 6052, 'Anonymous', A).
mooCache(documentation('Mineral', string('" Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."')), documentation('Mineral', string('" Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."')), [], [], 'PrologMOO', 'OBJECTS', 6056, 'Anonymous', A).
mooCache(instance(developmentalForm, 'AsymmetricRelation'), instance(developmentalForm, 'AsymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6060, 'Anonymous', A).
mooCache(domain(developmentalForm, 1, 'UnionFn'('Organism', 'AnatomicalStructure')), domain(developmentalForm, 1, 'UnionFn'('Organism', 'AnatomicalStructure')), [], [], 'PrologMOO', 'OBJECTS', 6064, 'Anonymous', A).
mooCache(documentation(developmentalForm, string('"(developmentalForm ?OBJECT ?FORM)   means that ?FORM is an earlier stage in the individual maturation of   ?OBJECT.  For example, tadpole and caterpillar are developmentalForms   of frogs and butterflies, respectively."')), documentation(developmentalForm, string('"(developmentalForm ?OBJECT ?FORM)   means that ?FORM is an earlier stage in the individual maturation of   ?OBJECT.  For example, tadpole and caterpillar are developmentalForms   of frogs and butterflies, respectively."')), [], [], 'PrologMOO', 'OBJECTS', 6068, 'Anonymous', A).
mooCache(subclass('Organism', 'Agent'), subclass('Organism', 'Agent'), [], [], 'PrologMOO', 'OBJECTS', 6072, 'Anonymous', A).
mooCache(=>(instance(A, 'Organism'), exists(B, exists(C, and(birthTime(A, C), deathTime(A, B))))), and(and(entails(not(birthTime(A, C)), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(C, '?TIME1', and(birthTime(A, '?TIME1'), deathTime(A, B)))), birthTime(A, C))), and(entails(not(deathTime(A, B)), not(instance(A, 'Organism'))), entails(and(and(instance(A, 'Organism'), '$existential'(B, '?TIME2', exists(C, and(birthTime(A, C), deathTime(A, '?TIME2'))))), '$existential'(C, '?TIME1', and(birthTime(A, '?TIME1'), deathTime(A, B)))), deathTime(A, B)))), [domainV(C, [birthTime:2]), domainV(B, [deathTime:2]), domainV(A, ['$instanceof':'Organism', birthTime:1, deathTime:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?TIME2', exists(C, and(birthTime(A, C), deathTime(A, '?TIME2'))))), replaceConsVar(C, '$existential'('?TIME1', and(birthTime(A, '?TIME1'), deathTime(A, B))))], ['ORGANISM'=A, 'TIME1'=C, 'TIME2'=B], 'PrologMOO', 'OBJECTS', 6076, 'Anonymous', E).
mooCache(instance(inhabits, 'AsymmetricRelation'), instance(inhabits, 'AsymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6080, 'Anonymous', A).
mooCache(domain(inhabits, 2, 'Object'), domain(inhabits, 2, 'Object'), [], [], 'PrologMOO', 'OBJECTS', 6084, 'Anonymous', A).
mooCache(instance(parent, 'BinaryPredicate'), instance(parent, 'BinaryPredicate'), [], [], 'PrologMOO', 'OBJECTS', 6088, 'Anonymous', A).
mooCache(instance(parent, 'AsymmetricRelation'), instance(parent, 'AsymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6092, 'Anonymous', A).
mooCache(domain(parent, 1, 'Organism'), domain(parent, 1, 'Organism'), [], [], 'PrologMOO', 'OBJECTS', 6096, 'Anonymous', A).
mooCache(documentation(parent, string('"The general relationship of parenthood.    (parent ?PARENT ?CHILD) means that ?PARENT is a biological parent   of ?CHILD."')), documentation(parent, string('"The general relationship of parenthood.    (parent ?PARENT ?CHILD) means that ?PARENT is a biological parent   of ?CHILD."')), [], [], 'PrologMOO', 'OBJECTS', 6100, 'Anonymous', A).
mooCache(=>(and(parent(A, B), and(subclass(C, 'Organism'), instance(A, C))), instance(B, C)), and(entails(and(parent(A, B), and(subclass(C, 'Organism'), instance(A, C))), instance(B, C)), and(entails(and(not(instance(B, C)), and(subclass(C, 'Organism'), instance(A, C))), not(parent(A, B))), and(entails(and(not(instance(B, C)), and(parent(A, B), instance(A, C))), not(subclass(C, 'Organism'))), entails(and(not(instance(B, C)), and(parent(A, B), subclass(C, 'Organism'))), not(instance(A, C)))))), [domainV(C, [instance:2, subclass:1]), domainV(B, [parent:2]), domainV(A, [parent:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PARENT'=A, 'CHILD'=B, 'CLASS'=C], 'PrologMOO', 'OBJECTS', 6104, 'Anonymous', E).
mooCache(subrelation(mother, parent), subrelation(mother, parent), [], [], 'PrologMOO', 'OBJECTS', 6108, 'Anonymous', A).
mooCache(singleValued(mother, 1), singleValued(mother, 1), [], [], 'PrologMOO', 'OBJECTS', 6112, 'Anonymous', A).
mooCache(=>(mother(A, B), attribute(A, 'Female')), and(entails(not(attribute(A, 'Female')), not(mother(A, B))), entails(mother(A, B), attribute(A, 'Female'))), [domainV(B, [mother:2]), domainV(A, [attribute:1, mother:1]), domainV(C, []), forall(A), forall(B)], ['MOTHER'=A, 'CHILD'=B], 'PrologMOO', 'OBJECTS', 6116, 'Anonymous', D).
mooCache(domain(father, 1, 'Animal'), domain(father, 1, 'Animal'), [], [], 'PrologMOO', 'OBJECTS', 6120, 'Anonymous', A).
mooCache(documentation(father, string('"The general relationship of fatherhood.    (father ?FATHER ?CHILD) means that ?FATHER is the biological father  of ?CHILD."')), documentation(father, string('"The general relationship of fatherhood.    (father ?FATHER ?CHILD) means that ?FATHER is the biological father  of ?CHILD."')), [], [], 'PrologMOO', 'OBJECTS', 6124, 'Anonymous', A).
mooCache(instance(siblings, 'BinaryPredicate'), instance(siblings, 'BinaryPredicate'), [], [], 'PrologMOO', 'OBJECTS', 6128, 'Anonymous', A).
mooCache(instance(siblings, 'SymmetricRelation'), instance(siblings, 'SymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6132, 'Anonymous', A).
mooCache(instance(siblings, 'IrreflexiveRelation'), instance(siblings, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'OBJECTS', 6136, 'Anonymous', A).
mooCache(domain(siblings, 2, 'Animal'), domain(siblings, 2, 'Animal'), [], [], 'PrologMOO', 'OBJECTS', 6140, 'Anonymous', A).
mooCache(<=>(siblings(A, B), exists(C, exists(D, and(father(D, A), and(father(D, B), and(mother(C, A), mother(C, B))))))), and(and(entails(and(siblings(A, B), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), father(D, A)), and(entails(and(siblings(A, B), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), father(D, B)), and(entails(and(and(siblings(A, B), '$existential'(C, '?MOTHER', exists(D, and(father(D, A), and(father(D, B), and(mother('?MOTHER', A), mother('?MOTHER', B))))))), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), mother(C, A)), and(entails(and(and(siblings(A, B), '$existential'(C, '?MOTHER', exists(D, and(father(D, A), and(father(D, B), and(mother('?MOTHER', A), mother('?MOTHER', B))))))), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), mother(C, B)), entails(or(not(father(D, A)), or(not(father(D, B)), or(not(mother(C, A)), not(mother(C, B))))), not(siblings(A, B))))))), and(entails(and(and(father(D, A), and(father(D, B), and(mother(C, A), mother(C, B)))), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), siblings(A, B)), and(entails(and(not(siblings(A, B)), and(father(D, B), and(mother(C, A), mother(C, B)))), not(father(D, A))), and(entails(and(not(siblings(A, B)), and(father(D, A), and(mother(C, A), mother(C, B)))), not(father(D, B))), and(entails(and(not(siblings(A, B)), and(father(D, A), and(father(D, B), mother(C, B)))), not(mother(C, A))), entails(and(not(siblings(A, B)), and(father(D, A), and(father(D, B), mother(C, A)))), not(mother(C, B)))))))), [domainV(D, [father:1]), domainV(C, [mother:1]), domainV(B, [father:2, mother:2, siblings:2]), domainV(A, [father:2, mother:2, siblings:1]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?MOTHER', exists(D, and(father(D, A), and(father(D, B), and(mother('?MOTHER', A), mother('?MOTHER', B))))))), replaceConsVar(D, '$existential'('?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), forall(C), forall(D)], ['ANIMAL1'=A, 'ANIMAL2'=B, 'FATHER'=D, 'MOTHER'=C], 'PrologMOO', 'OBJECTS', 6144, 'Anonymous', F).
mooCache(disjoint('Plant', 'Animal'), disjoint('Plant', 'Animal'), [], [], 'PrologMOO', 'OBJECTS', 6154, 'Anonymous', A).
mooCache(subclass('Animal', 'Organism'), subclass('Animal', 'Organism'), [], [], 'PrologMOO', 'OBJECTS', 6158, 'Anonymous', A).
mooCache(subclass('Microorganism', 'Organism'), subclass('Microorganism', 'Organism'), [], [], 'PrologMOO', 'OBJECTS', 6162, 'Anonymous', A).
mooCache(subclass('Bacterium', 'Microorganism'), subclass('Bacterium', 'Microorganism'), [], [], 'PrologMOO', 'OBJECTS', 6166, 'Anonymous', A).
mooCache(=>(instance(A, 'Bacterium'), exists(B, and(component(B, A), and(instance(B, 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal(B, C))))))), and(and(entails(not(component(B, A)), not(instance(A, 'Bacterium'))), entails(and(instance(A, 'Bacterium'), '$existential'(B, '?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), component(B, A))), and(and(entails(not(instance(B, 'Cell')), not(instance(A, 'Bacterium'))), entails(and(instance(A, 'Bacterium'), '$existential'(B, '?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), instance(B, 'Cell'))), and(entails(and(not(equal(B, C)), and(component(C, A), instance(C, 'Cell'))), not(instance(A, 'Bacterium'))), and(entails(and(and(instance(A, 'Bacterium'), and(component(C, A), instance(C, 'Cell'))), '$existential'(B, '?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), equal(B, C)), and(entails(and(instance(A, 'Bacterium'), and(not(equal(B, C)), instance(C, 'Cell'))), not(component(C, A))), entails(and(instance(A, 'Bacterium'), and(not(equal(B, C)), component(C, A))), not(instance(C, 'Cell')))))))), [domainV(C, ['$instanceof':'Cell', component:1]), domainV(B, ['$instanceof':'Cell', component:1]), domainV(A, ['$instanceof':'Bacterium', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), forall(C)], ['BACTERIUM'=A, 'CELL1'=B, 'CELL2'=C], 'PrologMOO', 'OBJECTS', 6170, 'Anonymous', E).
mooCache(subclass('Virus', 'Microorganism'), subclass('Virus', 'Microorganism'), [], [], 'PrologMOO', 'OBJECTS', 6174, 'Anonymous', A).
mooCache(=>(instance(A, 'Virus'), exists(B, and(component(B, A), and(instance(B, 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal(B, C))))))), and(and(entails(not(component(B, A)), not(instance(A, 'Virus'))), entails(and(instance(A, 'Virus'), '$existential'(B, '?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), component(B, A))), and(and(entails(not(instance(B, 'Molecule')), not(instance(A, 'Virus'))), entails(and(instance(A, 'Virus'), '$existential'(B, '?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), instance(B, 'Molecule'))), and(entails(and(not(equal(B, C)), and(component(C, A), instance(C, 'Molecule'))), not(instance(A, 'Virus'))), and(entails(and(and(instance(A, 'Virus'), and(component(C, A), instance(C, 'Molecule'))), '$existential'(B, '?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), equal(B, C)), and(entails(and(instance(A, 'Virus'), and(not(equal(B, C)), instance(C, 'Molecule'))), not(component(C, A))), entails(and(instance(A, 'Virus'), and(not(equal(B, C)), component(C, A))), not(instance(C, 'Molecule')))))))), [domainV(C, ['$instanceof':'Molecule', component:1]), domainV(B, ['$instanceof':'Molecule', component:1]), domainV(A, ['$instanceof':'Virus', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), forall(C)], ['VIRUS'=A, 'MOL1'=B, 'MOL2'=C], 'PrologMOO', 'OBJECTS', 6178, 'Anonymous', E).
mooCache(=>(and(instance(A, 'Virus'), and(instance(B, 'Replication'), agent(B, A))), exists(C, and(located(B, C), instance(C, 'Cell')))), and(and(entails(and(and(instance(A, 'Virus'), and(instance(B, 'Replication'), agent(B, A))), '$existential'(C, '?CELL', and(located(B, '?CELL'), instance('?CELL', 'Cell')))), located(B, C)), and(entails(and(not(located(B, C)), and(instance(B, 'Replication'), agent(B, A))), not(instance(A, 'Virus'))), and(entails(and(not(located(B, C)), and(instance(A, 'Virus'), agent(B, A))), not(instance(B, 'Replication'))), entails(and(not(located(B, C)), and(instance(A, 'Virus'), instance(B, 'Replication'))), not(agent(B, A)))))), and(entails(and(and(instance(A, 'Virus'), and(instance(B, 'Replication'), agent(B, A))), '$existential'(C, '?CELL', and(located(B, '?CELL'), instance('?CELL', 'Cell')))), instance(C, 'Cell')), and(entails(and(not(instance(C, 'Cell')), and(instance(B, 'Replication'), agent(B, A))), not(instance(A, 'Virus'))), and(entails(and(not(instance(C, 'Cell')), and(instance(A, 'Virus'), agent(B, A))), not(instance(B, 'Replication'))), entails(and(not(instance(C, 'Cell')), and(instance(A, 'Virus'), instance(B, 'Replication'))), not(agent(B, A))))))), [domainV(C, ['$instanceof':'Cell', located:2]), domainV(B, ['$instanceof':'Replication', agent:1, located:1]), domainV(A, ['$instanceof':'Virus', agent:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?CELL', and(located(B, '?CELL'), instance('?CELL', 'Cell'))))], ['VIRUS'=A, 'PROC'=B, 'CELL'=C], 'PrologMOO', 'OBJECTS', 6182, 'Anonymous', E).
mooCache(documentation('Vertebrate', string('"An Animal which has a spinal column."')), documentation('Vertebrate', string('"An Animal which has a spinal column."')), [], [], 'PrologMOO', 'OBJECTS', 6186, 'Anonymous', A).
mooCache(disjoint('Invertebrate', 'Vertebrate'), disjoint('Invertebrate', 'Vertebrate'), [], [], 'PrologMOO', 'OBJECTS', 6190, 'Anonymous', A).
mooCache(documentation('Invertebrate', string('"An Animal which has no spinal column."')), documentation('Invertebrate', string('"An Animal which has no spinal column."')), [], [], 'PrologMOO', 'OBJECTS', 6194, 'Anonymous', A).
mooCache(documentation('Worm', string('"Long, narrow, soft-bodied Invertebrates."')), documentation('Worm', string('"Long, narrow, soft-bodied Invertebrates."')), [], [], 'PrologMOO', 'OBJECTS', 6198, 'Anonymous', A).
mooCache(documentation('Mollusk', string('"Soft-bodied Invertebrate that is usually   contained in a shell.  Includes oysters, clams, mussels, snails, slugs,   octopi, and squid."')), documentation('Mollusk', string('"Soft-bodied Invertebrate that is usually   contained in a shell.  Includes oysters, clams, mussels, snails, slugs,   octopi, and squid."')), [], [], 'PrologMOO', 'OBJECTS', 6202, 'Anonymous', A).
mooCache(disjointDecomposition('Arthropod', 'Arachnid', 'Myriapod', 'Insect', 'Crustacean'), disjointDecomposition('Arthropod', 'Arachnid', 'Myriapod', 'Insect', 'Crustacean'), [], [], 'PrologMOO', 'OBJECTS', 6206, 'Anonymous', A).
mooCache(subclass('Arachnid', 'Arthropod'), subclass('Arachnid', 'Arthropod'), [], [], 'PrologMOO', 'OBJECTS', 6210, 'Anonymous', A).
mooCache(subclass('Myriapod', 'Arthropod'), subclass('Myriapod', 'Arthropod'), [], [], 'PrologMOO', 'OBJECTS', 6214, 'Anonymous', A).
mooCache(subclass('Insect', 'Arthropod'), subclass('Insect', 'Arthropod'), [], [], 'PrologMOO', 'OBJECTS', 6218, 'Anonymous', A).
mooCache(subclass('Crustacean', 'Arthropod'), subclass('Crustacean', 'Arthropod'), [], [], 'PrologMOO', 'OBJECTS', 6222, 'Anonymous', A).
mooCache(subclass('ColdBloodedVertebrate', 'Vertebrate'), subclass('ColdBloodedVertebrate', 'Vertebrate'), [], [], 'PrologMOO', 'OBJECTS', 6226, 'Anonymous', A).
mooCache(documentation('ColdBloodedVertebrate', string('"Vertebrates whose body temperature   is not internally regulated."')), documentation('ColdBloodedVertebrate', string('"Vertebrates whose body temperature   is not internally regulated."')), [], [], 'PrologMOO', 'OBJECTS', 6230, 'Anonymous', A).
mooCache(disjoint('WarmBloodedVertebrate', 'ColdBloodedVertebrate'), disjoint('WarmBloodedVertebrate', 'ColdBloodedVertebrate'), [], [], 'PrologMOO', 'OBJECTS', 6234, 'Anonymous', A).
mooCache(subclass('Alga', 'Plant'), subclass('Alga', 'Plant'), [], [], 'PrologMOO', 'OBJECTS', 6238, 'Anonymous', A).
mooCache(=>(instance(A, 'Alga'), exists(B, and(inhabits(A, B), instance(B, 'Water')))), and(and(entails(not(inhabits(A, B)), not(instance(A, 'Alga'))), entails(and(instance(A, 'Alga'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), inhabits(A, B))), and(entails(not(instance(B, 'Water')), not(instance(A, 'Alga'))), entails(and(instance(A, 'Alga'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), instance(B, 'Water')))), [domainV(B, ['$instanceof':'Water', inhabits:2]), domainV(A, ['$instanceof':'Alga', inhabits:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water'))))], ['ALGA'=A, 'WATER'=B], 'PrologMOO', 'OBJECTS', 6242, 'Anonymous', D).
mooCache(documentation('Amphibian', string('"A cold-blooded, smooth-skinned Vertebrate   which characteristically hatches as an aquatic larva, breathing by   gills.  When mature, the Amphibian breathes with Lungs."')), documentation('Amphibian', string('"A cold-blooded, smooth-skinned Vertebrate   which characteristically hatches as an aquatic larva, breathing by   gills.  When mature, the Amphibian breathes with Lungs."')), [], [], 'PrologMOO', 'OBJECTS', 6246, 'Anonymous', A).
mooCache(disjoint('Bird', 'Mammal'), disjoint('Bird', 'Mammal'), [], [], 'PrologMOO', 'OBJECTS', 6250, 'Anonymous', A).
mooCache(subclass('Fish', 'ColdBloodedVertebrate'), subclass('Fish', 'ColdBloodedVertebrate'), [], [], 'PrologMOO', 'OBJECTS', 6254, 'Anonymous', A).
mooCache(=>(instance(A, 'Fish'), exists(B, and(inhabits(A, B), instance(B, 'Water')))), and(and(entails(not(inhabits(A, B)), not(instance(A, 'Fish'))), entails(and(instance(A, 'Fish'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), inhabits(A, B))), and(entails(not(instance(B, 'Water')), not(instance(A, 'Fish'))), entails(and(instance(A, 'Fish'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), instance(B, 'Water')))), [domainV(B, ['$instanceof':'Water', inhabits:2]), domainV(A, ['$instanceof':'Fish', inhabits:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water'))))], ['FISH'=A, 'WATER'=B], 'PrologMOO', 'OBJECTS', 6258, 'Anonymous', D).
mooCache(documentation('Fungus', string('"A eukaryotic Organism characterized by the   absence of chlorophyll and the presence of rigid cell walls. Included   here are both slime molds and true fungi such as yeasts, molds, mildews,   and mushrooms."')), documentation('Fungus', string('"A eukaryotic Organism characterized by the   absence of chlorophyll and the presence of rigid cell walls. Included   here are both slime molds and true fungi such as yeasts, molds, mildews,   and mushrooms."')), [], [], 'PrologMOO', 'OBJECTS', 6262, 'Anonymous', A).
mooCache(subclass('Mammal', 'WarmBloodedVertebrate'), subclass('Mammal', 'WarmBloodedVertebrate'), [], [], 'PrologMOO', 'OBJECTS', 6266, 'Anonymous', A).
mooCache(documentation('Mammal', string('"A Vertebrate having a constant body temperature   and characterized by the presence of hair, mammary glands, and sweat   glands."')), documentation('Mammal', string('"A Vertebrate having a constant body temperature   and characterized by the presence of hair, mammary glands, and sweat   glands."')), [], [], 'PrologMOO', 'OBJECTS', 6270, 'Anonymous', A).
mooCache(documentation('AquaticMammal', string('"The Class of Mammals that dwell chiefly   in the water.  Includes whales, dolphins, manatees, seals, and walruses."')), documentation('AquaticMammal', string('"The Class of Mammals that dwell chiefly   in the water.  Includes whales, dolphins, manatees, seals, and walruses."')), [], [], 'PrologMOO', 'OBJECTS', 6274, 'Anonymous', A).
mooCache(documentation('HoofedMammal', string('"The Class of Mammals with hooves.    Includes horses, cows, sheep, pigs, antelope, etc."')), documentation('HoofedMammal', string('"The Class of Mammals with hooves.    Includes horses, cows, sheep, pigs, antelope, etc."')), [], [], 'PrologMOO', 'OBJECTS', 6278, 'Anonymous', A).
mooCache(documentation('Marsupial', string('"The Class of Mammals which have a pouch for   their young."')), documentation('Marsupial', string('"The Class of Mammals which have a pouch for   their young."')), [], [], 'PrologMOO', 'OBJECTS', 6282, 'Anonymous', A).
mooCache(documentation('Carnivore', string('"The Class of flesh-eating Mammals.  Members   of this Class typically have four or five claws on each paw.  Includes   cats, dogs, bears, racoons, and skunks."')), documentation('Carnivore', string('"The Class of flesh-eating Mammals.  Members   of this Class typically have four or five claws on each paw.  Includes   cats, dogs, bears, racoons, and skunks."')), [], [], 'PrologMOO', 'OBJECTS', 6286, 'Anonymous', A).
mooCache(disjoint('Canine', 'Feline'), disjoint('Canine', 'Feline'), [], [], 'PrologMOO', 'OBJECTS', 6290, 'Anonymous', A).
mooCache(subclass('Feline', 'Carnivore'), subclass('Feline', 'Carnivore'), [], [], 'PrologMOO', 'OBJECTS', 6294, 'Anonymous', A).
mooCache(subclass('Rodent', 'Mammal'), subclass('Rodent', 'Mammal'), [], [], 'PrologMOO', 'OBJECTS', 6298, 'Anonymous', A).
mooCache(subclass('Primate', 'Mammal'), subclass('Primate', 'Mammal'), [], [], 'PrologMOO', 'OBJECTS', 6302, 'Anonymous', A).
mooCache(documentation('Primate', string('"The Class of Mammals which are   Primates."')), documentation('Primate', string('"The Class of Mammals which are   Primates."')), [], [], 'PrologMOO', 'OBJECTS', 6306, 'Anonymous', A).
mooCache(documentation('Ape', string('"Various Primates with no tails or only short   tails."')), documentation('Ape', string('"Various Primates with no tails or only short   tails."')), [], [], 'PrologMOO', 'OBJECTS', 6310, 'Anonymous', A).
mooCache(documentation('Monkey', string('"Various Primates with relatively long   tails."')), documentation('Monkey', string('"Various Primates with relatively long   tails."')), [], [], 'PrologMOO', 'OBJECTS', 6314, 'Anonymous', A).
mooCache(documentation('Hominid', string('"Includes Humans and relatively recent   ancestors of Humans."')), documentation('Hominid', string('"Includes Humans and relatively recent   ancestors of Humans."')), [], [], 'PrologMOO', 'OBJECTS', 6318, 'Anonymous', A).
mooCache(subclass('Human', 'CognitiveAgent'), subclass('Human', 'CognitiveAgent'), [], [], 'PrologMOO', 'OBJECTS', 6322, 'Anonymous', A).
mooCache(subclass('Reptile', 'ColdBloodedVertebrate'), subclass('Reptile', 'ColdBloodedVertebrate'), [], [], 'PrologMOO', 'OBJECTS', 6326, 'Anonymous', A).
mooCache(subclass('BiologicallyActiveSubstance', 'Substance'), subclass('BiologicallyActiveSubstance', 'Substance'), [], [], 'PrologMOO', 'OBJECTS', 6334, 'Anonymous', A).
mooCache(subclass('Nutrient', 'BiologicallyActiveSubstance'), subclass('Nutrient', 'BiologicallyActiveSubstance'), [], [], 'PrologMOO', 'OBJECTS', 6338, 'Anonymous', A).
mooCache(subclass('Protein', 'Nutrient'), subclass('Protein', 'Nutrient'), [], [], 'PrologMOO', 'OBJECTS', 6342, 'Anonymous', A).
mooCache(subclass('Enzyme', 'Protein'), subclass('Enzyme', 'Protein'), [], [], 'PrologMOO', 'OBJECTS', 6346, 'Anonymous', A).
mooCache(subclass('Vitamin', 'Nutrient'), subclass('Vitamin', 'Nutrient'), [], [], 'PrologMOO', 'OBJECTS', 6350, 'Anonymous', A).
mooCache(subclass('Metal', 'PureSubstance'), subclass('Metal', 'PureSubstance'), [], [], 'PrologMOO', 'OBJECTS', 6354, 'Anonymous', A).
mooCache(subclass('BodySubstance', 'Mixture'), subclass('BodySubstance', 'Mixture'), [], [], 'PrologMOO', 'OBJECTS', 6358, 'Anonymous', A).
mooCache(subclass('Hormone', 'BodySubstance'), subclass('Hormone', 'BodySubstance'), [], [], 'PrologMOO', 'OBJECTS', 6362, 'Anonymous', A).
mooCache(subclass('Blood', 'BodySubstance'), subclass('Blood', 'BodySubstance'), [], [], 'PrologMOO', 'OBJECTS', 6366, 'Anonymous', A).
mooCache(subclass('ToxicOrganism', 'Organism'), subclass('ToxicOrganism', 'Organism'), [], [], 'PrologMOO', 'OBJECTS', 6370, 'Anonymous', A).
mooCache(=>(instance(A, 'ToxicOrganism'), exists(B, and(instance(B, 'BiologicallyActiveSubstance'), part(B, A)))), and(and(entails(not(instance(B, 'BiologicallyActiveSubstance')), not(instance(A, 'ToxicOrganism'))), entails(and(instance(A, 'ToxicOrganism'), '$existential'(B, '?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), part('?SUBSTANCE', A)))), instance(B, 'BiologicallyActiveSubstance'))), and(entails(not(part(B, A)), not(instance(A, 'ToxicOrganism'))), entails(and(instance(A, 'ToxicOrganism'), '$existential'(B, '?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), part('?SUBSTANCE', A)))), part(B, A)))), [domainV(B, ['$instanceof':'BiologicallyActiveSubstance', part:1]), domainV(A, ['$instanceof':'ToxicOrganism', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), part('?SUBSTANCE', A))))], ['ORGANISM'=A, 'SUBSTANCE'=B], 'PrologMOO', 'OBJECTS', 6374, 'Anonymous', D).
mooCache(documentation('Food', string('"Any Object containing Nutrients, such as   carbohydrates, proteins, and fats, that can be ingested by a living   Organism and metabolized into energy and body tissue."')), documentation('Food', string('"Any Object containing Nutrients, such as   carbohydrates, proteins, and fats, that can be ingested by a living   Organism and metabolized into energy and body tissue."')), [], [], 'PrologMOO', 'OBJECTS', 6378, 'Anonymous', A).
mooCache(=>(instance(A, 'Food'), forall(B, =>(part(B, A), exists(C, exists(D, and(part(B, D), and(part(D, C), instance(C, 'Organism')))))))), and(and(entails(and(part(B, A), not(part(B, D))), not(instance(A, 'Food'))), and(entails(and(instance(A, 'Food'), not(part(B, D))), not(part(B, A))), entails(and(and(instance(A, 'Food'), part(B, A)), '$existential'(D, '?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism'))))), part(B, D)))), and(and(entails(and(part(B, A), not(part(D, C))), not(instance(A, 'Food'))), and(entails(and(instance(A, 'Food'), not(part(D, C))), not(part(B, A))), entails(and(and(and(instance(A, 'Food'), part(B, A)), '$existential'(C, '?ORGANISM', exists(D, and(part(B, D), and(part(D, '?ORGANISM'), instance('?ORGANISM', 'Organism')))))), '$existential'(D, '?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism'))))), part(D, C)))), and(entails(and(part(B, A), not(instance(C, 'Organism'))), not(instance(A, 'Food'))), and(entails(and(instance(A, 'Food'), not(instance(C, 'Organism'))), not(part(B, A))), entails(and(and(and(instance(A, 'Food'), part(B, A)), '$existential'(C, '?ORGANISM', exists(D, and(part(B, D), and(part(D, '?ORGANISM'), instance('?ORGANISM', 'Organism')))))), '$existential'(D, '?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism'))))), instance(C, 'Organism')))))), [domainV(D, [part:1, part:2]), domainV(C, ['$instanceof':'Organism', part:2]), domainV(B, [part:1]), domainV(A, ['$instanceof':'Food', part:2]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?ORGANISM', exists(D, and(part(B, D), and(part(D, '?ORGANISM'), instance('?ORGANISM', 'Organism')))))), replaceConsVar(D, '$existential'('?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism')))))], ['FOOD'=A, 'PART1'=B, 'PART2'=D, 'ORGANISM'=C], 'PrologMOO', 'OBJECTS', 6382, 'Anonymous', F).
mooCache(disjoint('AnatomicalStructure', 'Organism'), disjoint('AnatomicalStructure', 'Organism'), [], [], 'PrologMOO', 'OBJECTS', 6386, 'Anonymous', A).
mooCache(=>(instance(A, 'AnatomicalStructure'), exists(B, and(instance(B, 'Organism'), part(A, B)))), and(and(entails(not(instance(B, 'Organism')), not(instance(A, 'AnatomicalStructure'))), entails(and(instance(A, 'AnatomicalStructure'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), instance(B, 'Organism'))), and(entails(not(part(A, B)), not(instance(A, 'AnatomicalStructure'))), entails(and(instance(A, 'AnatomicalStructure'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), part(A, B)))), [domainV(B, ['$instanceof':'Organism', part:2]), domainV(A, ['$instanceof':'AnatomicalStructure', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM'))))], ['ANAT'=A, 'ORGANISM'=B], 'PrologMOO', 'OBJECTS', 6390, 'Anonymous', D).
mooCache(documentation(string('"Reproductive structure of Animals.  Consists of an   Embryonic Object and a nutritive/protective envelope."')), documentation(string('"Reproductive structure of Animals.  Consists of an   Embryonic Object and a nutritive/protective envelope."')), [], [], 'PrologMOO', 'OBJECTS', 6394, 'Anonymous', A).
mooCache(documentation('BodyPart', string('"A collection of Cells and Tissues which   are localized to a specific area. The instances of this Class range   from gross structures to small components of complex Organs."')), documentation('BodyPart', string('"A collection of Cells and Tissues which   are localized to a specific area. The instances of this Class range   from gross structures to small components of complex Organs."')), [], [], 'PrologMOO', 'OBJECTS', 6398, 'Anonymous', A).
mooCache(subclass('BodyCovering', 'BodyPart'), subclass('BodyCovering', 'BodyPart'), [], [], 'PrologMOO', 'OBJECTS', 6402, 'Anonymous', A).
mooCache(=>(instance(A, 'BodyCovering'), exists(B, and(superficialPart(A, B), or(instance(B, 'Organism'), instance(B, 'BodyPart'))))), and(and(entails(not(superficialPart(A, B)), not(instance(A, 'BodyCovering'))), entails(and(instance(A, 'BodyCovering'), '$existential'(B, '?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart'))))), superficialPart(A, B))), and(entails(and(not(instance(B, 'Organism')), not(instance(B, 'BodyPart'))), not(instance(A, 'BodyCovering'))), and(entails(and(and(instance(A, 'BodyCovering'), not(instance(B, 'BodyPart'))), '$existential'(B, '?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart'))))), instance(B, 'Organism')), entails(and(and(instance(A, 'BodyCovering'), not(instance(B, 'Organism'))), '$existential'(B, '?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart'))))), instance(B, 'BodyPart'))))), [domainV(B, ['$instanceof':'BodyPart', '$instanceof':'Organism', superficialPart:2]), domainV(A, ['$instanceof':'BodyCovering', superficialPart:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart')))))], ['COVER'=A, 'BODY'=B], 'PrologMOO', 'OBJECTS', 6406, 'Anonymous', D).
mooCache(documentation('BodyJunction', string('"The place where two BodyParts   meet or connect."')), documentation('BodyJunction', string('"The place where two BodyParts   meet or connect."')), [], [], 'PrologMOO', 'OBJECTS', 6410, 'Anonymous', A).
mooCache(=>(instance(A, 'BodyJunction'), exists(B, exists(C, and(connected(A, C), and(connected(A, B), and(instance(C, 'BodyPart'), and(instance(B, 'BodyPart'), not(equal(C, B))))))))), and(and(entails(not(connected(A, C)), not(instance(A, 'BodyJunction'))), entails(and(instance(A, 'BodyJunction'), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), connected(A, C))), and(and(entails(not(connected(A, B)), not(instance(A, 'BodyJunction'))), entails(and(and(instance(A, 'BodyJunction'), '$existential'(B, '?STRUCT2', exists(C, and(connected(A, C), and(connected(A, '?STRUCT2'), and(instance(C, 'BodyPart'), and(instance('?STRUCT2', 'BodyPart'), not(equal(C, '?STRUCT2'))))))))), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), connected(A, B))), and(and(entails(not(instance(C, 'BodyPart')), not(instance(A, 'BodyJunction'))), entails(and(instance(A, 'BodyJunction'), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), instance(C, 'BodyPart'))), and(and(entails(not(instance(B, 'BodyPart')), not(instance(A, 'BodyJunction'))), entails(and(and(instance(A, 'BodyJunction'), '$existential'(B, '?STRUCT2', exists(C, and(connected(A, C), and(connected(A, '?STRUCT2'), and(instance(C, 'BodyPart'), and(instance('?STRUCT2', 'BodyPart'), not(equal(C, '?STRUCT2'))))))))), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), instance(B, 'BodyPart'))), and(entails(equal(C, B), not(instance(A, 'BodyJunction'))), entails(instance(A, 'BodyJunction'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'BodyPart', connected:2]), domainV(B, ['$instanceof':'BodyPart', connected:2]), domainV(A, ['$instanceof':'BodyJunction', connected:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?STRUCT2', exists(C, and(connected(A, C), and(connected(A, '?STRUCT2'), and(instance(C, 'BodyPart'), and(instance('?STRUCT2', 'BodyPart'), not(equal(C, '?STRUCT2'))))))))), replaceConsVar(C, '$existential'('?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B))))))))], ['JUNCT'=A, 'STRUCT1'=C, 'STRUCT2'=B], 'PrologMOO', 'OBJECTS', 6414, 'Anonymous', E).
mooCache(documentation('BodyVessel', string('"Any tube-like structure which occurs naturally in   an Organism and through which a BodySubstance can circulate."')), documentation('BodyVessel', string('"Any tube-like structure which occurs naturally in   an Organism and through which a BodySubstance can circulate."')), [], [], 'PrologMOO', 'OBJECTS', 6418, 'Anonymous', A).
mooCache(documentation('Cell', string('"The fundamental structural and functional unit of   living Organisms."')), documentation('Cell', string('"The fundamental structural and functional unit of   living Organisms."')), [], [], 'PrologMOO', 'OBJECTS', 6422, 'Anonymous', A).
mooCache(documentation('Organ', string('"A somewhat independent BodyPart that performs a   specialized function."')), documentation('Organ', string('"A somewhat independent BodyPart that performs a   specialized function."')), [], [], 'PrologMOO', 'OBJECTS', 6426, 'Anonymous', A).
mooCache(subclass('Gland', 'Organ'), subclass('Gland', 'Organ'), [], [], 'PrologMOO', 'OBJECTS', 6430, 'Anonymous', A).
mooCache(subclass('Fruit', 'Organ'), subclass('Fruit', 'Organ'), [], [], 'PrologMOO', 'OBJECTS', 6434, 'Anonymous', A).
mooCache(=>(instance(A, 'Fruit'), exists(B, and(component(A, B), instance(B, 'Plant')))), and(and(entails(not(component(A, B)), not(instance(A, 'Fruit'))), entails(and(instance(A, 'Fruit'), '$existential'(B, '?PLANT', and(component(A, '?PLANT'), instance('?PLANT', 'Plant')))), component(A, B))), and(entails(not(instance(B, 'Plant')), not(instance(A, 'Fruit'))), entails(and(instance(A, 'Fruit'), '$existential'(B, '?PLANT', and(component(A, '?PLANT'), instance('?PLANT', 'Plant')))), instance(B, 'Plant')))), [domainV(B, ['$instanceof':'Plant', component:2]), domainV(A, ['$instanceof':'Fruit', component:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PLANT', and(component(A, '?PLANT'), instance('?PLANT', 'Plant'))))], ['FRUIT'=A, 'PLANT'=B], 'PrologMOO', 'OBJECTS', 6438, 'Anonymous', D).
mooCache(documentation('Tissue', string('"An aggregation of similarly specialized Cells   and the associated intercellular substance. Tissues are relatively   non-localized in comparison to BodyParts, Organs or Organ components.    The main features of Tissues are self-connectivity (see   SelfConnectedObject) and being a homogeneous mass (all parts in the   same granularity are instances of Tissue as well)."')), documentation('Tissue', string('"An aggregation of similarly specialized Cells   and the associated intercellular substance. Tissues are relatively   non-localized in comparison to BodyParts, Organs or Organ components.    The main features of Tissues are self-connectivity (see   SelfConnectedObject) and being a homogeneous mass (all parts in the   same granularity are instances of Tissue as well)."')), [], [], 'PrologMOO', 'OBJECTS', 6442, 'Anonymous', A).
mooCache(=>(instance(A, 'Tissue'), exists(B, and(instance(B, 'Organism'), part(A, B)))), and(and(entails(not(instance(B, 'Organism')), not(instance(A, 'Tissue'))), entails(and(instance(A, 'Tissue'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), instance(B, 'Organism'))), and(entails(not(part(A, B)), not(instance(A, 'Tissue'))), entails(and(instance(A, 'Tissue'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), part(A, B)))), [domainV(B, ['$instanceof':'Organism', part:2]), domainV(A, ['$instanceof':'Tissue', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM'))))], ['STUFF'=A, 'ORGANISM'=B], 'PrologMOO', 'OBJECTS', 6446, 'Anonymous', D).
mooCache(documentation('Bone', string('"Rigid Tissue composed largely of calcium that makes up   the skeleton of Vertebrates.  Note that this Class also includes teeth."')), documentation('Bone', string('"Rigid Tissue composed largely of calcium that makes up   the skeleton of Vertebrates.  Note that this Class also includes teeth."')), [], [], 'PrologMOO', 'OBJECTS', 6450, 'Anonymous', A).
mooCache(subclass('Muscle', 'Tissue'), subclass('Muscle', 'Tissue'), [], [], 'PrologMOO', 'OBJECTS', 6454, 'Anonymous', A).
mooCache(documentation('Muscle', string('"Nonrigid Tissue appearing only in Animals and   composed largely of contractile cells."')), documentation('Muscle', string('"Nonrigid Tissue appearing only in Animals and   composed largely of contractile cells."')), [], [], 'PrologMOO', 'OBJECTS', 6458, 'Anonymous', A).
mooCache(partition('Word', 'Noun', 'Verb', 'Adjective', 'Adverb', 'Particle'), partition('Word', 'Noun', 'Verb', 'Adjective', 'Adverb', 'Particle'), [], [], 'PrologMOO', 'OBJECTS', 6462, 'Anonymous', A).
mooCache(subclass('Verb', 'Word'), subclass('Verb', 'Word'), [], [], 'PrologMOO', 'OBJECTS', 6466, 'Anonymous', A).
mooCache(subclass('Adjective', 'Word'), subclass('Adjective', 'Word'), [], [], 'PrologMOO', 'OBJECTS', 6470, 'Anonymous', A).
mooCache(subclass('Adverb', 'Word'), subclass('Adverb', 'Word'), [], [], 'PrologMOO', 'OBJECTS', 6474, 'Anonymous', A).
mooCache(subclass('Particle', 'Word'), subclass('Particle', 'Word'), [], [], 'PrologMOO', 'OBJECTS', 6478, 'Anonymous', A).
mooCache(subclass('Morpheme', 'LinguisticExpression'), subclass('Morpheme', 'LinguisticExpression'), [], [], 'PrologMOO', 'OBJECTS', 6482, 'Anonymous', A).
mooCache(=>(instance(A, 'Morpheme'), not(exists(B, and(instance(B, 'Morpheme'), and(part(B, A), not(equal(B, A))))))), and(entails(and(instance(B, 'Morpheme'), and(part(B, A), not(equal(B, A)))), not(instance(A, 'Morpheme'))), and(entails(and(instance(A, 'Morpheme'), and(part(B, A), not(equal(B, A)))), not(instance(B, 'Morpheme'))), and(entails(and(instance(A, 'Morpheme'), and(instance(B, 'Morpheme'), not(equal(B, A)))), not(part(B, A))), entails(and(instance(A, 'Morpheme'), and(instance(B, 'Morpheme'), part(B, A))), equal(B, A))))), [domainV(B, ['$instanceof':'Morpheme', part:1]), domainV(A, ['$instanceof':'Morpheme', part:2]), domainV(C, []), forall(A), forall(B), forall(B)], ['MORPH'=A, 'OTHERMORPH'=B], 'PrologMOO', 'OBJECTS', 6486, 'Anonymous', D).
mooCache(=>(instance(A, 'Word'), exists(B, and(part(B, A), instance(B, 'Morpheme')))), and(and(entails(not(part(B, A)), not(instance(A, 'Word'))), entails(and(instance(A, 'Word'), '$existential'(B, '?PART', and(part('?PART', A), instance('?PART', 'Morpheme')))), part(B, A))), and(entails(not(instance(B, 'Morpheme')), not(instance(A, 'Word'))), entails(and(instance(A, 'Word'), '$existential'(B, '?PART', and(part('?PART', A), instance('?PART', 'Morpheme')))), instance(B, 'Morpheme')))), [domainV(B, ['$instanceof':'Morpheme', part:1]), domainV(A, ['$instanceof':'Word', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PART', and(part('?PART', A), instance('?PART', 'Morpheme'))))], ['WORD'=A, 'PART'=B], 'PrologMOO', 'OBJECTS', 6490, 'Anonymous', D).
mooCache(disjointDecomposition('Phrase', 'VerbPhrase', 'NounPhrase', 'PrepositionalPhrase', 'Clause'), disjointDecomposition('Phrase', 'VerbPhrase', 'NounPhrase', 'PrepositionalPhrase', 'Clause'), [], [], 'PrologMOO', 'OBJECTS', 6494, 'Anonymous', A).
mooCache(=>(instance(A, 'Phrase'), exists(B, exists(C, and(part(C, A), and(part(B, A), and(instance(C, 'Word'), and(instance(B, 'Word'), not(equal(C, B))))))))), and(and(entails(not(part(C, A)), not(instance(A, 'Phrase'))), entails(and(instance(A, 'Phrase'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), part(C, A))), and(and(entails(not(part(B, A)), not(instance(A, 'Phrase'))), entails(and(and(instance(A, 'Phrase'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Word'), and(instance('?PART2', 'Word'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), part(B, A))), and(and(entails(not(instance(C, 'Word')), not(instance(A, 'Phrase'))), entails(and(instance(A, 'Phrase'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), instance(C, 'Word'))), and(and(entails(not(instance(B, 'Word')), not(instance(A, 'Phrase'))), entails(and(and(instance(A, 'Phrase'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Word'), and(instance('?PART2', 'Word'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), instance(B, 'Word'))), and(entails(equal(C, B), not(instance(A, 'Phrase'))), entails(instance(A, 'Phrase'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'Word', part:1]), domainV(B, ['$instanceof':'Word', part:1]), domainV(A, ['$instanceof':'Phrase', part:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Word'), and(instance('?PART2', 'Word'), not(equal(C, '?PART2'))))))))), replaceConsVar(C, '$existential'('?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B))))))))], ['PHRASE'=A, 'PART1'=C, 'PART2'=B], 'PrologMOO', 'OBJECTS', 6498, 'Anonymous', E).
mooCache(documentation('VerbPhrase', string('"A Phrase that has the same function as a   Verb."')), documentation('VerbPhrase', string('"A Phrase that has the same function as a   Verb."')), [], [], 'PrologMOO', 'OBJECTS', 6502, 'Anonymous', A).
mooCache(disjoint('NounPhrase', 'VerbPhrase'), disjoint('NounPhrase', 'VerbPhrase'), [], [], 'PrologMOO', 'OBJECTS', 6506, 'Anonymous', A).
mooCache(=>(instance(A, 'Sentence'), exists(B, exists(C, and(instance(C, 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part(C, A), part(B, A))))))), and(and(entails(not(instance(C, 'NounPhrase')), not(instance(A, 'Sentence'))), entails(and(instance(A, 'Sentence'), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), instance(C, 'NounPhrase'))), and(and(entails(not(instance(B, 'VerbPhrase')), not(instance(A, 'Sentence'))), entails(and(and(instance(A, 'Sentence'), '$existential'(B, '?PHRASE2', exists(C, and(instance(C, 'NounPhrase'), and(instance('?PHRASE2', 'VerbPhrase'), and(part(C, A), part('?PHRASE2', A))))))), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), instance(B, 'VerbPhrase'))), and(and(entails(not(part(C, A)), not(instance(A, 'Sentence'))), entails(and(instance(A, 'Sentence'), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), part(C, A))), and(entails(not(part(B, A)), not(instance(A, 'Sentence'))), entails(and(and(instance(A, 'Sentence'), '$existential'(B, '?PHRASE2', exists(C, and(instance(C, 'NounPhrase'), and(instance('?PHRASE2', 'VerbPhrase'), and(part(C, A), part('?PHRASE2', A))))))), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), part(B, A)))))), [domainV(C, ['$instanceof':'NounPhrase', part:1]), domainV(B, ['$instanceof':'VerbPhrase', part:1]), domainV(A, ['$instanceof':'Sentence', part:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PHRASE2', exists(C, and(instance(C, 'NounPhrase'), and(instance('?PHRASE2', 'VerbPhrase'), and(part(C, A), part('?PHRASE2', A))))))), replaceConsVar(C, '$existential'('?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A))))))], ['SENTENCE'=A, 'PHRASE1'=C, 'PHRASE2'=B], 'PrologMOO', 'OBJECTS', 6510, 'Anonymous', E).
mooCache(documentation('PrepositionalPhrase', string('"A Phrase that begins with a   preposition and that functions as an Adjective or an Adverb."')), documentation('PrepositionalPhrase', string('"A Phrase that begins with a   preposition and that functions as an Adjective or an Adverb."')), [], [], 'PrologMOO', 'OBJECTS', 6514, 'Anonymous', A).
mooCache(subclass('Text', 'Artifact'), subclass('Text', 'Artifact'), [], [], 'PrologMOO', 'OBJECTS', 6518, 'Anonymous', A).
mooCache(=>(instance(A, 'Text'), exists(B, exists(C, and(part(C, A), and(part(B, A), and(instance(C, 'Sentence'), and(instance(B, 'Sentence'), not(equal(C, B))))))))), and(and(entails(not(part(C, A)), not(instance(A, 'Text'))), entails(and(instance(A, 'Text'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), part(C, A))), and(and(entails(not(part(B, A)), not(instance(A, 'Text'))), entails(and(and(instance(A, 'Text'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Sentence'), and(instance('?PART2', 'Sentence'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), part(B, A))), and(and(entails(not(instance(C, 'Sentence')), not(instance(A, 'Text'))), entails(and(instance(A, 'Text'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), instance(C, 'Sentence'))), and(and(entails(not(instance(B, 'Sentence')), not(instance(A, 'Text'))), entails(and(and(instance(A, 'Text'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Sentence'), and(instance('?PART2', 'Sentence'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), instance(B, 'Sentence'))), and(entails(equal(C, B), not(instance(A, 'Text'))), entails(instance(A, 'Text'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'Sentence', part:1]), domainV(B, ['$instanceof':'Sentence', part:1]), domainV(A, ['$instanceof':'Text', part:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Sentence'), and(instance('?PART2', 'Sentence'), not(equal(C, '?PART2'))))))))), replaceConsVar(C, '$existential'('?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B))))))))], ['TEXT'=A, 'PART1'=C, 'PART2'=B], 'PrologMOO', 'OBJECTS', 6522, 'Anonymous', E).
mooCache(instance(authors, 'AsymmetricRelation'), instance(authors, 'AsymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6526, 'Anonymous', A).
mooCache(domainSubclass(authors, 2, 'Text'), domainSubclass(authors, 2, 'Text'), [], [], 'PrologMOO', 'OBJECTS', 6530, 'Anonymous', A).
mooCache(=>(authors(A, B), exists(C, exists(D, and(agent(D, A), and(instance(C, B), result(D, B)))))), and(and(entails(not(agent(D, A)), not(authors(A, B))), entails(and(authors(A, B), '$existential'(D, '?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B))))), agent(D, A))), and(and(entails(not(instance(C, B)), not(authors(A, B))), entails(and(and(authors(A, B), '$existential'(C, '?INSTANCE', exists(D, and(agent(D, A), and(instance('?INSTANCE', B), result(D, B)))))), '$existential'(D, '?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B))))), instance(C, B))), and(entails(not(result(D, B)), not(authors(A, B))), entails(and(authors(A, B), '$existential'(D, '?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B))))), result(D, B))))), [domainV(D, [agent:1, result:1]), domainV(C, []), domainV(B, [authors:2, instance:2, result:2]), domainV(A, [agent:2, authors:1]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?INSTANCE', exists(D, and(agent(D, A), and(instance('?INSTANCE', B), result(D, B)))))), replaceConsVar(D, '$existential'('?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B)))))], ['AGENT'=A, 'TEXT'=B, 'PROCESS'=D, 'INSTANCE'=C], 'PrologMOO', 'OBJECTS', 6534, 'Anonymous', F).
mooCache(instance(editor, 'AsymmetricRelation'), instance(editor, 'AsymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6538, 'Anonymous', A).
mooCache(domainSubclass(editor, 2, 'Text'), domainSubclass(editor, 2, 'Text'), [], [], 'PrologMOO', 'OBJECTS', 6542, 'Anonymous', A).
mooCache(instance(publishes, 'BinaryPredicate'), instance(publishes, 'BinaryPredicate'), [], [], 'PrologMOO', 'OBJECTS', 6546, 'Anonymous', A).
mooCache(domain(publishes, 1, 'Organization'), domain(publishes, 1, 'Organization'), [], [], 'PrologMOO', 'OBJECTS', 6550, 'Anonymous', A).
mooCache(documentation(publishes, string('"(publishes ?ORG ?TEXT) means that ?ORG   publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie\'s   Murder_on_the_Orient_Express."')), documentation(publishes, string('"(publishes ?ORG ?TEXT) means that ?ORG   publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie\'s   Murder_on_the_Orient_Express."')), [], [], 'PrologMOO', 'OBJECTS', 6554, 'Anonymous', A).
mooCache(instance('EditionFn', 'BinaryFunction'), instance('EditionFn', 'BinaryFunction'), [], [], 'PrologMOO', 'OBJECTS', 6558, 'Anonymous', A).
mooCache(domain('EditionFn', 2, 'PositiveInteger'), domain('EditionFn', 2, 'PositiveInteger'), [], [], 'PrologMOO', 'OBJECTS', 6562, 'Anonymous', A).
mooCache(documentation('EditionFn', string('"A BinaryFunction that maps a type of text   (e.g. Agatha Christie\'s Murder_on_the_Orient_Express) and a number   to the edition of the text type corresponding to the number."')), documentation('EditionFn', string('"A BinaryFunction that maps a type of text   (e.g. Agatha Christie\'s Murder_on_the_Orient_Express) and a number   to the edition of the text type corresponding to the number."')), [], [], 'PrologMOO', 'OBJECTS', 6566, 'Anonymous', A).
mooCache(=>(equal('EditionFn'(A, B), C), subsumesContentClass(A, C)), and(entails(not(subsumesContentClass(A, C)), not(holds('EditionFn', A, B, C))), entails(holds('EditionFn', A, B, C), subsumesContentClass(A, C))), [domainV(C, ['EditionFn':3, subsumesContentClass:2]), domainV(B, ['EditionFn':2]), domainV(A, ['EditionFn':1, subsumesContentClass:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TEXT1'=A, 'NUMBER'=B, 'TEXT2'=C], 'PrologMOO', 'OBJECTS', 6570, 'Anonymous', E).
mooCache(domainSubclass('SeriesVolumeFn', 1, 'Series'), domainSubclass('SeriesVolumeFn', 1, 'Series'), [], [], 'PrologMOO', 'OBJECTS', 6574, 'Anonymous', A).
mooCache(rangeSubclass('SeriesVolumeFn', 'Text'), rangeSubclass('SeriesVolumeFn', 'Text'), [], [], 'PrologMOO', 'OBJECTS', 6578, 'Anonymous', A).
mooCache(=>(and(subclass(A, 'Periodical'), and(equal('SeriesVolumeFn'(A, B), C), and(equal('SeriesVolumeFn'(A, D), E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), before('EndFn'(H), 'EndFn'(I))), and(entails(and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), before('EndFn'(H), 'EndFn'(I))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(subclass(A, 'Periodical'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(holds('SeriesVolumeFn', A, B, C))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(holds('SeriesVolumeFn', A, D, E))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(greaterThan(D, B))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(instance(F, 'Publication'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(instance(G, 'Publication'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(patient(F, C))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(date(F, H), date(G, I)))))))))), not(patient(G, E))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), date(G, I)))))))))), not(date(F, H))), entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), date(F, H)))))))))), not(date(G, I))))))))))))), [domainV(I, ['EndFn':1, date:2]), domainV(H, ['EndFn':1, date:2]), domainV(G, ['$instanceof':'Publication', date:1, patient:1]), domainV(F, ['$instanceof':'Publication', date:1, patient:1]), domainV(E, ['SeriesVolumeFn':3, patient:2]), domainV(D, ['SeriesVolumeFn':2, greaterThan:1]), domainV(C, ['SeriesVolumeFn':3, patient:2]), domainV(B, ['SeriesVolumeFn':2, greaterThan:2]), domainV(A, ['SeriesVolumeFn':1, subclass:1]), domainV(J, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(F), forall(G), forall(H), forall(I)], ['TEXT'=A, 'INT1'=B, 'VOLUME1'=C, 'INT2'=D, 'VOLUME2'=E, 'PUB1'=F, 'PUB2'=G, 'DATE1'=H, 'DATE2'=I], 'PrologMOO', 'OBJECTS', 6582, 'Anonymous', K).
mooCache(instance('PeriodicalIssueFn', 'BinaryFunction'), instance('PeriodicalIssueFn', 'BinaryFunction'), [], [], 'PrologMOO', 'OBJECTS', 6586, 'Anonymous', A).
mooCache(domain('PeriodicalIssueFn', 2, 'PositiveInteger'), domain('PeriodicalIssueFn', 2, 'PositiveInteger'), [], [], 'PrologMOO', 'OBJECTS', 6590, 'Anonymous', A).
mooCache(documentation('PeriodicalIssueFn', string('"A BinaryFunction that maps a subclass of   Periodical and a number to all of the issues of the Periodical corresponding   to the number."')), documentation('PeriodicalIssueFn', string('"A BinaryFunction that maps a subclass of   Periodical and a number to all of the issues of the Periodical corresponding   to the number."')), [], [], 'PrologMOO', 'OBJECTS', 6594, 'Anonymous', A).
mooCache(subclass('Book', 'Text'), subclass('Book', 'Text'), [], [], 'PrologMOO', 'OBJECTS', 6598, 'Anonymous', A).
mooCache(subclass('Summary', 'Text'), subclass('Summary', 'Text'), [], [], 'PrologMOO', 'OBJECTS', 6602, 'Anonymous', A).
mooCache(=>(instance(A, 'Summary'), exists(B, and(instance(B, 'Text'), subsumesContentInstance(B, A)))), and(and(entails(not(instance(B, 'Text')), not(instance(A, 'Summary'))), entails(and(instance(A, 'Summary'), '$existential'(B, '?TEXT2', and(instance('?TEXT2', 'Text'), subsumesContentInstance('?TEXT2', A)))), instance(B, 'Text'))), and(entails(not(subsumesContentInstance(B, A)), not(instance(A, 'Summary'))), entails(and(instance(A, 'Summary'), '$existential'(B, '?TEXT2', and(instance('?TEXT2', 'Text'), subsumesContentInstance('?TEXT2', A)))), subsumesContentInstance(B, A)))), [domainV(B, ['$instanceof':'Text', subsumesContentInstance:1]), domainV(A, ['$instanceof':'Summary', subsumesContentInstance:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?TEXT2', and(instance('?TEXT2', 'Text'), subsumesContentInstance('?TEXT2', A))))], ['TEXT'=A, 'TEXT2'=B], 'PrologMOO', 'OBJECTS', 6606, 'Anonymous', D).
mooCache(documentation('Series', string('"A ContentBearingObject consisting of multiple   self-contained units.  Some examples are an encyclopedia containing a couple   dozen volumes, a television series made up of many dozens of episodes, a   film serial, etc."')), documentation('Series', string('"A ContentBearingObject consisting of multiple   self-contained units.  Some examples are an encyclopedia containing a couple   dozen volumes, a television series made up of many dozens of episodes, a   film serial, etc."')), [], [], 'PrologMOO', 'OBJECTS', 6610, 'Anonymous', A).
mooCache(subclass('Periodical', 'Series'), subclass('Periodical', 'Series'), [], [], 'PrologMOO', 'OBJECTS', 6614, 'Anonymous', A).
mooCache(subclass('Article', 'Text'), subclass('Article', 'Text'), [], [], 'PrologMOO', 'OBJECTS', 6618, 'Anonymous', A).
mooCache(=>(instance(A, 'Article'), exists(B, and(instance(B, 'Book'), subsumesContentInstance(B, A)))), and(and(entails(not(instance(B, 'Book')), not(instance(A, 'Article'))), entails(and(instance(A, 'Article'), '$existential'(B, '?BOOK', and(instance('?BOOK', 'Book'), subsumesContentInstance('?BOOK', A)))), instance(B, 'Book'))), and(entails(not(subsumesContentInstance(B, A)), not(instance(A, 'Article'))), entails(and(instance(A, 'Article'), '$existential'(B, '?BOOK', and(instance('?BOOK', 'Book'), subsumesContentInstance('?BOOK', A)))), subsumesContentInstance(B, A)))), [domainV(B, ['$instanceof':'Book', subsumesContentInstance:1]), domainV(A, ['$instanceof':'Article', subsumesContentInstance:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BOOK', and(instance('?BOOK', 'Book'), subsumesContentInstance('?BOOK', A))))], ['ARTICLE'=A, 'BOOK'=B], 'PrologMOO', 'OBJECTS', 6622, 'Anonymous', D).
mooCache(documentation('Certificate', string('"A Text that confers a right or obligation   on the holder of the Certificate.  Note that the right or obligation   need not be a legal one, as in the case of an academic diploma that grants   certain privileges in the professional world."')), documentation('Certificate', string('"A Text that confers a right or obligation   on the holder of the Certificate.  Note that the right or obligation   need not be a legal one, as in the case of an academic diploma that grants   certain privileges in the professional world."')), [], [], 'PrologMOO', 'OBJECTS', 6626, 'Anonymous', A).
mooCache(subclass('Patent', 'Certificate'), subclass('Patent', 'Certificate'), [], [], 'PrologMOO', 'OBJECTS', 6630, 'Anonymous', A).
mooCache(subclass('SubmolecularObject', 'CorpuscularObject'), subclass('SubmolecularObject', 'CorpuscularObject'), [], [], 'PrologMOO', 'OBJECTS', 6634, 'Anonymous', A).
mooCache(=>(instance(A, 'SubmolecularObject'), exists(B, and(instance(B, 'Molecule'), part(A, B)))), and(and(entails(not(instance(B, 'Molecule')), not(instance(A, 'SubmolecularObject'))), entails(and(instance(A, 'SubmolecularObject'), '$existential'(B, '?MOLE', and(instance('?MOLE', 'Molecule'), part(A, '?MOLE')))), instance(B, 'Molecule'))), and(entails(not(part(A, B)), not(instance(A, 'SubmolecularObject'))), entails(and(instance(A, 'SubmolecularObject'), '$existential'(B, '?MOLE', and(instance('?MOLE', 'Molecule'), part(A, '?MOLE')))), part(A, B)))), [domainV(B, ['$instanceof':'Molecule', part:2]), domainV(A, ['$instanceof':'SubmolecularObject', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?MOLE', and(instance('?MOLE', 'Molecule'), part(A, '?MOLE'))))], ['SUBMOLE'=A, 'MOLE'=B], 'PrologMOO', 'OBJECTS', 6638, 'Anonymous', D).
mooCache(documentation('Molecule', string('"A molecule is the smallest unit of matter of a   CompoundSubstance that retains all the physical and chemical properties   of that substance, e.g., Ne, H2, H2O.  A molecule is two or more Atoms   linked by a chemical bond."')), documentation('Molecule', string('"A molecule is the smallest unit of matter of a   CompoundSubstance that retains all the physical and chemical properties   of that substance, e.g., Ne, H2, H2O.  A molecule is two or more Atoms   linked by a chemical bond."')), [], [], 'PrologMOO', 'OBJECTS', 6642, 'Anonymous', A).
mooCache(subclass('Atom', 'SubmolecularObject'), subclass('Atom', 'SubmolecularObject'), [], [], 'PrologMOO', 'OBJECTS', 6646, 'Anonymous', A).
mooCache(=>(instance(A, 'Atom'), exists(B, exists(C, and(component(C, A), and(component(B, A), and(instance(C, 'Proton'), instance(B, 'Electron'))))))), and(and(entails(not(component(C, A)), not(instance(A, 'Atom'))), entails(and(instance(A, 'Atom'), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), component(C, A))), and(and(entails(not(component(B, A)), not(instance(A, 'Atom'))), entails(and(and(instance(A, 'Atom'), '$existential'(B, '?ELECTRON', exists(C, and(component(C, A), and(component('?ELECTRON', A), and(instance(C, 'Proton'), instance('?ELECTRON', 'Electron'))))))), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), component(B, A))), and(and(entails(not(instance(C, 'Proton')), not(instance(A, 'Atom'))), entails(and(instance(A, 'Atom'), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), instance(C, 'Proton'))), and(entails(not(instance(B, 'Electron')), not(instance(A, 'Atom'))), entails(and(and(instance(A, 'Atom'), '$existential'(B, '?ELECTRON', exists(C, and(component(C, A), and(component('?ELECTRON', A), and(instance(C, 'Proton'), instance('?ELECTRON', 'Electron'))))))), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), instance(B, 'Electron')))))), [domainV(C, ['$instanceof':'Proton', component:1]), domainV(B, ['$instanceof':'Electron', component:1]), domainV(A, ['$instanceof':'Atom', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?ELECTRON', exists(C, and(component(C, A), and(component('?ELECTRON', A), and(instance(C, 'Proton'), instance('?ELECTRON', 'Electron'))))))), replaceConsVar(C, '$existential'('?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron'))))))], ['ATOM'=A, 'PROTON'=C, 'ELECTRON'=B], 'PrologMOO', 'OBJECTS', 6650, 'Anonymous', E).
mooCache(subclass('SubatomicParticle', 'SubmolecularObject'), subclass('SubatomicParticle', 'SubmolecularObject'), [], [], 'PrologMOO', 'OBJECTS', 6654, 'Anonymous', A).
mooCache(subclass('AtomicNucleus', 'SubatomicParticle'), subclass('AtomicNucleus', 'SubatomicParticle'), [], [], 'PrologMOO', 'OBJECTS', 6658, 'Anonymous', A).
mooCache(=>(instance(A, 'AtomicNucleus'), exists(B, exists(C, and(component(C, A), and(component(B, A), and(instance(C, 'Neutron'), instance(B, 'Proton'))))))), and(and(entails(not(component(C, A)), not(instance(A, 'AtomicNucleus'))), entails(and(instance(A, 'AtomicNucleus'), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), component(C, A))), and(and(entails(not(component(B, A)), not(instance(A, 'AtomicNucleus'))), entails(and(and(instance(A, 'AtomicNucleus'), '$existential'(B, '?PROTON', exists(C, and(component(C, A), and(component('?PROTON', A), and(instance(C, 'Neutron'), instance('?PROTON', 'Proton'))))))), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), component(B, A))), and(and(entails(not(instance(C, 'Neutron')), not(instance(A, 'AtomicNucleus'))), entails(and(instance(A, 'AtomicNucleus'), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), instance(C, 'Neutron'))), and(entails(not(instance(B, 'Proton')), not(instance(A, 'AtomicNucleus'))), entails(and(and(instance(A, 'AtomicNucleus'), '$existential'(B, '?PROTON', exists(C, and(component(C, A), and(component('?PROTON', A), and(instance(C, 'Neutron'), instance('?PROTON', 'Proton'))))))), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), instance(B, 'Proton')))))), [domainV(C, ['$instanceof':'Neutron', component:1]), domainV(B, ['$instanceof':'Proton', component:1]), domainV(A, ['$instanceof':'AtomicNucleus', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PROTON', exists(C, and(component(C, A), and(component('?PROTON', A), and(instance(C, 'Neutron'), instance('?PROTON', 'Proton'))))))), replaceConsVar(C, '$existential'('?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton'))))))], ['NUCLEUS'=A, 'NEUTRON'=C, 'PROTON'=B], 'PrologMOO', 'OBJECTS', 6662, 'Anonymous', E).
mooCache(documentation('Electron', string('"SubatomicParticles that surround the   AtomicNucleus.  They have a negative charge."')), documentation('Electron', string('"SubatomicParticles that surround the   AtomicNucleus.  They have a negative charge."')), [], [], 'PrologMOO', 'OBJECTS', 6666, 'Anonymous', A).
mooCache(documentation('Proton', string('"Components of the AtomicNucleus.  They have a   positive charge."')), documentation('Proton', string('"Components of the AtomicNucleus.  They have a   positive charge."')), [], [], 'PrologMOO', 'OBJECTS', 6670, 'Anonymous', A).
mooCache(documentation('Neutron', string('"Components of the AtomicNucleus.  They have no   charge."')), documentation('Neutron', string('"Components of the AtomicNucleus.  They have no   charge."')), [], [], 'PrologMOO', 'OBJECTS', 6674, 'Anonymous', A).
mooCache(documentation('Artifact', string('"A CorpuscularObject that is the product of an   IntentionalProcess."')), documentation('Artifact', string('"A CorpuscularObject that is the product of an   IntentionalProcess."')), [], [], 'PrologMOO', 'OBJECTS', 6678, 'Anonymous', A).
mooCache(subclass('Product', 'Artifact'), subclass('Product', 'Artifact'), [], [], 'PrologMOO', 'OBJECTS', 6682, 'Anonymous', A).
mooCache(=>(instance(A, 'Product'), exists(B, and(instance(B, 'Manufacture'), result(B, A)))), and(and(entails(not(instance(B, 'Manufacture')), not(instance(A, 'Product'))), entails(and(instance(A, 'Product'), '$existential'(B, '?MANUFACTURE', and(instance('?MANUFACTURE', 'Manufacture'), result('?MANUFACTURE', A)))), instance(B, 'Manufacture'))), and(entails(not(result(B, A)), not(instance(A, 'Product'))), entails(and(instance(A, 'Product'), '$existential'(B, '?MANUFACTURE', and(instance('?MANUFACTURE', 'Manufacture'), result('?MANUFACTURE', A)))), result(B, A)))), [domainV(B, ['$instanceof':'Manufacture', result:1]), domainV(A, ['$instanceof':'Product', result:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?MANUFACTURE', and(instance('?MANUFACTURE', 'Manufacture'), result('?MANUFACTURE', A))))], ['PRODUCT'=A, 'MANUFACTURE'=B], 'PrologMOO', 'OBJECTS', 6686, 'Anonymous', D).
mooCache(documentation('Award', string('"An Artifact which is given to someone in honor of   something that he/she has done."')), documentation('Award', string('"An Artifact which is given to someone in honor of   something that he/she has done."')), [], [], 'PrologMOO', 'OBJECTS', 6690, 'Anonymous', A).
mooCache(instance(version, 'AsymmetricRelation'), instance(version, 'AsymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6694, 'Anonymous', A).
mooCache(domainSubclass(version, 1, 'Artifact'), domainSubclass(version, 1, 'Artifact'), [], [], 'PrologMOO', 'OBJECTS', 6698, 'Anonymous', A).
mooCache(documentation(version, string('"Some Artifacts have a life cycle with discrete   stages or versions.  (version ARTIFACT1 ARTIFACT2) means that ARTIFACT1   is a version of ARTIFACT2.  Note that this Predicate relates subclasses of   Artifact and not instances."')), documentation(version, string('"Some Artifacts have a life cycle with discrete   stages or versions.  (version ARTIFACT1 ARTIFACT2) means that ARTIFACT1   is a version of ARTIFACT2.  Note that this Predicate relates subclasses of   Artifact and not instances."')), [], [], 'PrologMOO', 'OBJECTS', 6702, 'Anonymous', A).
mooCache(subclass('StationaryArtifact', 'Artifact'), subclass('StationaryArtifact', 'Artifact'), [], [], 'PrologMOO', 'OBJECTS', 6714, 'Anonymous', A).
mooCache(=>(instance(A, 'StationaryArtifact'), exists(B, forall(C, =>(and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C)), equal('WhereFn'(A, C), B))))), and(entails(and(not(holds('WhereFn', A, C, B)), and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C))), not(instance(A, 'StationaryArtifact'))), and(entails(and(and(instance(A, 'StationaryArtifact'), and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C))), '$existential'(B, '?PLACE', forall(C, =>(and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C)), holds('WhereFn', A, C, '?PLACE'))))), holds('WhereFn', A, C, B)), and(entails(and(instance(A, 'StationaryArtifact'), and(not(holds('WhereFn', A, C, B)), beforeOrEqual('BeginFn'('WhenFn'(A)), C))), not(beforeOrEqual(C, 'EndFn'('WhenFn'(A))))), entails(and(instance(A, 'StationaryArtifact'), and(not(holds('WhereFn', A, C, B)), beforeOrEqual(C, 'EndFn'('WhenFn'(A))))), not(beforeOrEqual('BeginFn'('WhenFn'(A)), C)))))), [domainV(C, ['WhereFn':2, beforeOrEqual:1, beforeOrEqual:2]), domainV(B, ['WhereFn':3]), domainV(A, ['$instanceof':'StationaryArtifact', 'WhenFn':1, 'WhereFn':1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PLACE', forall(C, =>(and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C)), holds('WhereFn', A, C, '?PLACE'))))), forall(C)], ['ARTIFACT'=A, 'PLACE'=B, 'TIME'=C], 'PrologMOO', 'OBJECTS', 6718, 'Anonymous', E).
mooCache(documentation('Building', string('"The Class of StationaryArtifacts which are   intended to house Humans and their activities."')), documentation('Building', string('"The Class of StationaryArtifacts which are   intended to house Humans and their activities."')), [], [], 'PrologMOO', 'OBJECTS', 6722, 'Anonymous', A).
mooCache(subclass('Room', 'StationaryArtifact'), subclass('Room', 'StationaryArtifact'), [], [], 'PrologMOO', 'OBJECTS', 6726, 'Anonymous', A).
mooCache(=>(instance(A, 'Room'), exists(B, and(instance(B, 'Building'), component(A, B)))), and(and(entails(not(instance(B, 'Building')), not(instance(A, 'Room'))), entails(and(instance(A, 'Room'), '$existential'(B, '?BUILD', and(instance('?BUILD', 'Building'), component(A, '?BUILD')))), instance(B, 'Building'))), and(entails(not(component(A, B)), not(instance(A, 'Room'))), entails(and(instance(A, 'Room'), '$existential'(B, '?BUILD', and(instance('?BUILD', 'Building'), component(A, '?BUILD')))), component(A, B)))), [domainV(B, ['$instanceof':'Building', component:2]), domainV(A, ['$instanceof':'Room', component:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BUILD', and(instance('?BUILD', 'Building'), component(A, '?BUILD'))))], ['ROOM'=A, 'BUILD'=B], 'PrologMOO', 'OBJECTS', 6730, 'Anonymous', D).
mooCache(documentation('ArtWork', string('"Artifacts that are created primarily for   aesthetic appreciation.  Note that this Class does not include   most examples of architecture, which belong under StationaryArtifact."')), documentation('ArtWork', string('"Artifacts that are created primarily for   aesthetic appreciation.  Note that this Class does not include   most examples of architecture, which belong under StationaryArtifact."')), [], [], 'PrologMOO', 'OBJECTS', 6734, 'Anonymous', A).
mooCache(documentation('Fabric', string('"Artifacts that are created by weaving together   natural or synthetic fibers.  Note that this Class includes articles   that are created by stitching together various types of fabrics, e.g.   bedspreads.  On the other hand, Clothing is not a subclass of Fabric,   because many clothing items contain elements that are not fabrics."')), documentation('Fabric', string('"Artifacts that are created by weaving together   natural or synthetic fibers.  Note that this Class includes articles   that are created by stitching together various types of fabrics, e.g.   bedspreads.  On the other hand, Clothing is not a subclass of Fabric,   because many clothing items contain elements that are not fabrics."')), [], [], 'PrologMOO', 'OBJECTS', 6738, 'Anonymous', A).
mooCache(documentation('Clothing', string('"Artifact made out of fabrics and/or other   materials that are used to cover the bodies of Humans."')), documentation('Clothing', string('"Artifact made out of fabrics and/or other   materials that are used to cover the bodies of Humans."')), [], [], 'PrologMOO', 'OBJECTS', 6742, 'Anonymous', A).
mooCache(documentation('Device', string('"A Device is an Artifact whose purpose is to   serve as an instrument in a specific type of task."')), documentation('Device', string('"A Device is an Artifact whose purpose is to   serve as an instrument in a specific type of task."')), [], [], 'PrologMOO', 'OBJECTS', 6746, 'Anonymous', A).
mooCache(subclass('MusicalInstrument', 'Device'), subclass('MusicalInstrument', 'Device'), [], [], 'PrologMOO', 'OBJECTS', 6750, 'Anonymous', A).
mooCache(=>(instance(A, 'MusicalInstrument'), hasPurpose(A, exists(B, and(instance(B, 'Music'), instrument(B, A))))), and(and(entails(not(hasPurpose(A, instance(B, 'Music'))), not(instance(A, 'MusicalInstrument'))), entails(and(instance(A, 'MusicalInstrument'), '$existential'(B, '?MUSIC', and(hasPurpose(A, instance('?MUSIC', 'Music')), hasPurpose(A, instrument('?MUSIC', A))))), hasPurpose(A, instance(B, 'Music')))), and(entails(not(hasPurpose(A, instrument(B, A))), not(instance(A, 'MusicalInstrument'))), entails(and(instance(A, 'MusicalInstrument'), '$existential'(B, '?MUSIC', and(hasPurpose(A, instance('?MUSIC', 'Music')), hasPurpose(A, instrument('?MUSIC', A))))), hasPurpose(A, instrument(B, A))))), [domainV(B, ['$instanceof':'Music', instrument:1]), domainV(A, ['$instanceof':'MusicalInstrument', hasPurpose:1, instrument:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?MUSIC', and(hasPurpose(A, instance('?MUSIC', 'Music')), hasPurpose(A, instrument('?MUSIC', A)))))], ['INSTRUMENT'=A, 'MUSIC'=B], 'PrologMOO', 'OBJECTS', 6754, 'Anonymous', D).
mooCache(documentation('TransportationDevice', string('"A TransportationDevice is a Device   which serves as an instrument in Transportation Processes."')), documentation('TransportationDevice', string('"A TransportationDevice is a Device   which serves as an instrument in Transportation Processes."')), [], [], 'PrologMOO', 'OBJECTS', 6758, 'Anonymous', A).
mooCache(documentation('Weapon', string('"The Class of Devices that are designed   primarily to damage or destroy Humans/Animals or the places   inhabited by Humans/Animals."')), documentation('Weapon', string('"The Class of Devices that are designed   primarily to damage or destroy Humans/Animals or the places   inhabited by Humans/Animals."')), [], [], 'PrologMOO', 'OBJECTS', 6762, 'Anonymous', A).
mooCache(subclass('Machine', 'Device'), subclass('Machine', 'Device'), [], [], 'PrologMOO', 'OBJECTS', 6766, 'Anonymous', A).
mooCache(subclass('EngineeringComponent', 'Device'), subclass('EngineeringComponent', 'Device'), [], [], 'PrologMOO', 'OBJECTS', 6770, 'Anonymous', A).
mooCache(=>(instance(A, 'EngineeringComponent'), exists(B, and(instance(B, 'Device'), component(A, B)))), and(and(entails(not(instance(B, 'Device')), not(instance(A, 'EngineeringComponent'))), entails(and(instance(A, 'EngineeringComponent'), '$existential'(B, '?DEVICE', and(instance('?DEVICE', 'Device'), component(A, '?DEVICE')))), instance(B, 'Device'))), and(entails(not(component(A, B)), not(instance(A, 'EngineeringComponent'))), entails(and(instance(A, 'EngineeringComponent'), '$existential'(B, '?DEVICE', and(instance('?DEVICE', 'Device'), component(A, '?DEVICE')))), component(A, B)))), [domainV(B, ['$instanceof':'Device', component:2]), domainV(A, ['$instanceof':'EngineeringComponent', component:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?DEVICE', and(instance('?DEVICE', 'Device'), component(A, '?DEVICE'))))], ['COMP'=A, 'DEVICE'=B], 'PrologMOO', 'OBJECTS', 6774, 'Anonymous', D).
mooCache(domain(engineeringSubcomponent, 1, 'EngineeringComponent'), domain(engineeringSubcomponent, 1, 'EngineeringComponent'), [], [], 'PrologMOO', 'OBJECTS', 6778, 'Anonymous', A).
mooCache(documentation(engineeringSubcomponent, string('"(engineeringSubcomponent ?SUB   ?SUPER) means that the EngineeringComponent ?SUB is structurally a   properPart ?SUPER.  This relation is an AsymmetricRelation, since   two EngineeringComponents cannot be subcomponents of each other."')), documentation(engineeringSubcomponent, string('"(engineeringSubcomponent ?SUB   ?SUPER) means that the EngineeringComponent ?SUB is structurally a   properPart ?SUPER.  This relation is an AsymmetricRelation, since   two EngineeringComponents cannot be subcomponents of each other."')), [], [], 'PrologMOO', 'OBJECTS', 6782, 'Anonymous', A).
mooCache(instance(connectedEngineeringComponents, 'IrreflexiveRelation'), instance(connectedEngineeringComponents, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'OBJECTS', 6786, 'Anonymous', A).
mooCache(domain(connectedEngineeringComponents, 1, 'EngineeringComponent'), domain(connectedEngineeringComponents, 1, 'EngineeringComponent'), [], [], 'PrologMOO', 'OBJECTS', 6790, 'Anonymous', A).
mooCache(documentation(connectedEngineeringComponents, string('"This is the most general   connection relation between EngineeringComponents.  If   (connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor   ?COMP2 can be an engineeringSubcomponent of the other.  The relation   connectedEngineeringComponents is a SymmetricRelation; there is no   information in the direction of connection between two components.  It is   also an IrreflexiveRelation; no EngineeringComponent bears this relation   to itself.  Note that this relation does not associate a name or type   with the connection."')), documentation(connectedEngineeringComponents, string('"This is the most general   connection relation between EngineeringComponents.  If   (connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor   ?COMP2 can be an engineeringSubcomponent of the other.  The relation   connectedEngineeringComponents is a SymmetricRelation; there is no   information in the direction of connection between two components.  It is   also an IrreflexiveRelation; no EngineeringComponent bears this relation   to itself.  Note that this relation does not associate a name or type   with the connection."')), [], [], 'PrologMOO', 'OBJECTS', 6794, 'Anonymous', A).
mooCache(=>(connectedEngineeringComponents(A, B), not(or(instance(A, 'EngineeringConnection'), instance(B, 'EngineeringConnection')))), and(and(entails(instance(A, 'EngineeringConnection'), not(connectedEngineeringComponents(A, B))), entails(connectedEngineeringComponents(A, B), not(instance(A, 'EngineeringConnection')))), and(entails(instance(B, 'EngineeringConnection'), not(connectedEngineeringComponents(A, B))), entails(connectedEngineeringComponents(A, B), not(instance(B, 'EngineeringConnection'))))), [domainV(B, ['$instanceof':'EngineeringConnection', connectedEngineeringComponents:2]), domainV(A, ['$instanceof':'EngineeringConnection', connectedEngineeringComponents:1]), domainV(C, []), forall(A), forall(B)], ['COMP1'=A, 'COMP2'=B], 'PrologMOO', 'OBJECTS', 6798, 'Anonymous', D).
mooCache(subclass('EngineeringConnection', 'EngineeringComponent'), subclass('EngineeringConnection', 'EngineeringComponent'), [], [], 'PrologMOO', 'OBJECTS', 6802, 'Anonymous', A).
mooCache(=>(instance(A, 'EngineeringConnection'), exists(B, exists(C, connectsEngineeringComponents(A, C, B)))), and(entails(not(connectsEngineeringComponents(A, C, B)), not(instance(A, 'EngineeringConnection'))), entails(and(and(instance(A, 'EngineeringConnection'), '$existential'(B, '?COMP2', exists(C, connectsEngineeringComponents(A, C, '?COMP2')))), '$existential'(C, '?COMP1', connectsEngineeringComponents(A, '?COMP1', B))), connectsEngineeringComponents(A, C, B))), [domainV(C, [connectsEngineeringComponents:2]), domainV(B, [connectsEngineeringComponents:3]), domainV(A, ['$instanceof':'EngineeringConnection', connectsEngineeringComponents:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?COMP2', exists(C, connectsEngineeringComponents(A, C, '?COMP2')))), replaceConsVar(C, '$existential'('?COMP1', connectsEngineeringComponents(A, '?COMP1', B)))], ['CONNECTION'=A, 'COMP1'=C, 'COMP2'=B], 'PrologMOO', 'OBJECTS', 6806, 'Anonymous', E).
mooCache(domain(connectsEngineeringComponents, 1, 'EngineeringConnection'), domain(connectsEngineeringComponents, 1, 'EngineeringConnection'), [], [], 'PrologMOO', 'OBJECTS', 6810, 'Anonymous', A).
mooCache(domain(connectsEngineeringComponents, 3, 'EngineeringComponent'), domain(connectsEngineeringComponents, 3, 'EngineeringComponent'), [], [], 'PrologMOO', 'OBJECTS', 6814, 'Anonymous', A).
mooCache(subclass('PersonBySocialRole', 'CognitiveAgent'), subclass('PersonBySocialRole', 'CognitiveAgent'), [], [], 'PrologMOO', 'OBJECTS', 6818, 'Anonymous', A).
mooCache(=>(instance(A, 'PersonBySocialRole'), exists(B, and(instance(B, 'OrganizationalProcess'), agent(B, A)))), and(and(entails(not(instance(B, 'OrganizationalProcess')), not(instance(A, 'PersonBySocialRole'))), entails(and(instance(A, 'PersonBySocialRole'), '$existential'(B, '?ACT', and(instance('?ACT', 'OrganizationalProcess'), agent('?ACT', A)))), instance(B, 'OrganizationalProcess'))), and(entails(not(agent(B, A)), not(instance(A, 'PersonBySocialRole'))), entails(and(instance(A, 'PersonBySocialRole'), '$existential'(B, '?ACT', and(instance('?ACT', 'OrganizationalProcess'), agent('?ACT', A)))), agent(B, A)))), [domainV(B, ['$instanceof':'OrganizationalProcess', agent:1]), domainV(A, ['$instanceof':'PersonBySocialRole', agent:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ACT', and(instance('?ACT', 'OrganizationalProcess'), agent('?ACT', A))))], ['PERSON'=A, 'ACT'=B], 'PrologMOO', 'OBJECTS', 6822, 'Anonymous', D).
mooCache(documentation('PersonByOccupationalRole', string('"The Class of all   CognitiveAgents who are considered with respect to an occupational   role that they have."')), documentation('PersonByOccupationalRole', string('"The Class of all   CognitiveAgents who are considered with respect to an occupational   role that they have."')), [], [], 'PrologMOO', 'OBJECTS', 6826, 'Anonymous', A).
mooCache(subclass('UnemployedPerson', 'PersonByOccupationalRole'), subclass('UnemployedPerson', 'PersonByOccupationalRole'), [], [], 'PrologMOO', 'OBJECTS', 6830, 'Anonymous', A).
mooCache(=>(instance(A, 'UnemployedPerson'), not(exists(B, employs(B, A)))), and(entails(employs(B, A), not(instance(A, 'UnemployedPerson'))), entails(instance(A, 'UnemployedPerson'), not(employs(B, A)))), [domainV(B, [employs:1]), domainV(A, ['$instanceof':'UnemployedPerson', employs:2]), domainV(C, []), forall(A), forall(B), forall(B)], ['PERSON'=A, 'ORG'=B], 'PrologMOO', 'OBJECTS', 6834, 'Anonymous', D).
mooCache(subclass('Group', 'Agent'), subclass('Group', 'Agent'), [], [], 'PrologMOO', 'OBJECTS', 6842, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Group'), member(B, A)), instance(B, 'Agent')), and(entails(and(instance(A, 'Group'), member(B, A)), instance(B, 'Agent')), and(entails(and(not(instance(B, 'Agent')), member(B, A)), not(instance(A, 'Group'))), entails(and(not(instance(B, 'Agent')), instance(A, 'Group')), not(member(B, A))))), [domainV(B, ['$instanceof':'Agent', member:1]), domainV(A, ['$instanceof':'Group', member:2]), domainV(C, []), forall(A), forall(B)], ['GROUP'=A, 'MEMB'=B], 'PrologMOO', 'OBJECTS', 6846, 'Anonymous', D).
mooCache(documentation('AgeGroup', string('"A Group whose members all have the same age."')), documentation('AgeGroup', string('"A Group whose members all have the same age."')), [], [], 'PrologMOO', 'OBJECTS', 6850, 'Anonymous', A).
mooCache(subclass('FamilyGroup', 'Group'), subclass('FamilyGroup', 'Group'), [], [], 'PrologMOO', 'OBJECTS', 6854, 'Anonymous', A).
mooCache(=>(instance(A, 'FamilyGroup'), forall(B, forall(C, =>(and(member(C, A), member(B, A)), familyRelation(C, B))))), and(entails(and(not(familyRelation(C, B)), and(member(C, A), member(B, A))), not(instance(A, 'FamilyGroup'))), and(entails(and(instance(A, 'FamilyGroup'), and(member(C, A), member(B, A))), familyRelation(C, B)), and(entails(and(instance(A, 'FamilyGroup'), and(not(familyRelation(C, B)), member(B, A))), not(member(C, A))), entails(and(instance(A, 'FamilyGroup'), and(not(familyRelation(C, B)), member(C, A))), not(member(B, A)))))), [domainV(C, [familyRelation:1, member:1]), domainV(B, [familyRelation:2, member:1]), domainV(A, ['$instanceof':'FamilyGroup', member:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['GROUP'=A, 'MEMB1'=C, 'MEMB2'=B], 'PrologMOO', 'OBJECTS', 6858, 'Anonymous', E).
mooCache(instance(familyRelation, 'EquivalenceRelation'), instance(familyRelation, 'EquivalenceRelation'), [], [], 'PrologMOO', 'OBJECTS', 6862, 'Anonymous', A).
mooCache(domain(familyRelation, 2, 'Organism'), domain(familyRelation, 2, 'Organism'), [], [], 'PrologMOO', 'OBJECTS', 6866, 'Anonymous', A).
mooCache(=>(familyRelation(A, B), exists(C, and(familyRelation(C, A), familyRelation(C, B)))), and(and(entails(not(familyRelation(C, A)), not(familyRelation(A, B))), entails(and(familyRelation(A, B), '$existential'(C, '?ORGANISM3', and(familyRelation('?ORGANISM3', A), familyRelation('?ORGANISM3', B)))), familyRelation(C, A))), and(entails(not(familyRelation(C, B)), not(familyRelation(A, B))), entails(and(familyRelation(A, B), '$existential'(C, '?ORGANISM3', and(familyRelation('?ORGANISM3', A), familyRelation('?ORGANISM3', B)))), familyRelation(C, B)))), [domainV(C, [familyRelation:1]), domainV(B, [familyRelation:2]), domainV(A, [familyRelation:1, familyRelation:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?ORGANISM3', and(familyRelation('?ORGANISM3', A), familyRelation('?ORGANISM3', B))))], ['ORGANISM1'=A, 'ORGANISM2'=B, 'ORGANISM3'=C], 'PrologMOO', 'OBJECTS', 6870, 'Anonymous', E).
mooCache(documentation('EthnicGroup', string('"A Group whose members originate from the   same Region or share the same Language and/or cultural practices."')), documentation('EthnicGroup', string('"A Group whose members originate from the   same Region or share the same Language and/or cultural practices."')), [], [], 'PrologMOO', 'OBJECTS', 6874, 'Anonymous', A).
mooCache(documentation('OrganizationUnit', string('"An organization or a divisions or department   within an organization. For example, the Shell Corporation, the accounting   department at Shell, etc. would all be instances of OrganizationUnit.   The continued existence of an OrganizationUnit is not dependent on any of   its members, locations, or facilities. Note that, unlike Organization, an   OrganizationUnit may have no members."')), documentation('OrganizationUnit', string('"An organization or a divisions or department   within an organization. For example, the Shell Corporation, the accounting   department at Shell, etc. would all be instances of OrganizationUnit.   The continued existence of an OrganizationUnit is not dependent on any of   its members, locations, or facilities. Note that, unlike Organization, an   OrganizationUnit may have no members."')), [], [], 'PrologMOO', 'OBJECTS', 6878, 'Anonymous', A).
mooCache(documentation('Organization', string('"An Organization is a corporate or similar   institution, distinguished from other Agents. The members of an   Organization typically have a common purpose or function. Note that   parts of Organizations should not be included here, unless they are   subOrganizations of an Organization."')), documentation('Organization', string('"An Organization is a corporate or similar   institution, distinguished from other Agents. The members of an   Organization typically have a common purpose or function. Note that   parts of Organizations should not be included here, unless they are   subOrganizations of an Organization."')), [], [], 'PrologMOO', 'OBJECTS', 6882, 'Anonymous', A).
mooCache(domain('OrganizationFn', 1, 'OrganizationUnit'), domain('OrganizationFn', 1, 'OrganizationUnit'), [], [], 'PrologMOO', 'OBJECTS', 6886, 'Anonymous', A).
mooCache(documentation('OrganizationFn', string('"A UnaryFunction that maps an OrganizationUnit,   the notion of an organization which is independent of its members, locations,   and facilities, to the corresponding Organization, i.e. the Group of Humans   who are members of the Organization.  Note that this is a partial function,   since there are many cases of organizations which are legal entities but which   lack any members."')), documentation('OrganizationFn', string('"A UnaryFunction that maps an OrganizationUnit,   the notion of an organization which is independent of its members, locations,   and facilities, to the corresponding Organization, i.e. the Group of Humans   who are members of the Organization.  Note that this is a partial function,   since there are many cases of organizations which are legal entities but which   lack any members."')), [], [], 'PrologMOO', 'OBJECTS', 6890, 'Anonymous', A).
mooCache(instance(employs, 'BinaryPredicate'), instance(employs, 'BinaryPredicate'), [], [], 'PrologMOO', 'OBJECTS', 6894, 'Anonymous', A).
mooCache(domain(employs, 2, 'CognitiveAgent'), domain(employs, 2, 'CognitiveAgent'), [], [], 'PrologMOO', 'OBJECTS', 6898, 'Anonymous', A).
mooCache(=>(employs(A, B), member(B, A)), and(entails(not(member(B, A)), not(employs(A, B))), entails(employs(A, B), member(B, A))), [domainV(B, [employs:2, member:1]), domainV(A, [employs:1, member:2]), domainV(C, []), forall(A), forall(B)], ['ORG'=A, 'PERSON'=B], 'PrologMOO', 'OBJECTS', 6902, 'Anonymous', D).
mooCache(documentation('Corporation', string('"An Organization that provides products and/or   services for a fee with the aim of making a profit."')), documentation('Corporation', string('"An Organization that provides products and/or   services for a fee with the aim of making a profit."')), [], [], 'PrologMOO', 'OBJECTS', 6906, 'Anonymous', A).
mooCache(documentation('Government', string('"The ruling body of a Nation or one of the   subOrganizations of a Nation."')), documentation('Government', string('"The ruling body of a Nation or one of the   subOrganizations of a Nation."')), [], [], 'PrologMOO', 'OBJECTS', 6910, 'Anonymous', A).
mooCache(documentation('EducationalOrganization', string('"A EducationalOrganization is   an institution of learning. Some examples are public and private K-12   schools, and colleges and universities."')), documentation('EducationalOrganization', string('"A EducationalOrganization is   an institution of learning. Some examples are public and private K-12   schools, and colleges and universities."')), [], [], 'PrologMOO', 'OBJECTS', 6914, 'Anonymous', A).
mooCache(documentation('ReligiousOrganization', string('"An Organization whose members   share a set of religious beliefs."')), documentation('ReligiousOrganization', string('"An Organization whose members   share a set of religious beliefs."')), [], [], 'PrologMOO', 'OBJECTS', 6918, 'Anonymous', A).
mooCache(subrelation(subOrganizations, subCollection), subrelation(subOrganizations, subCollection), [], [], 'PrologMOO', 'OBJECTS', 6922, 'Anonymous', A).
mooCache(domain(subOrganizations, 2, 'Organization'), domain(subOrganizations, 2, 'Organization'), [], [], 'PrologMOO', 'OBJECTS', 6926, 'Anonymous', A).
mooCache(subclass('Position', 'CognitiveAgent'), subclass('Position', 'CognitiveAgent'), [], [], 'PrologMOO', 'OBJECTS', 6930, 'Anonymous', A).
mooCache(documentation('Position', string('"A formal position of reponsibility within an   Organization. Examples of Positions include president, laboratory   director, senior researcher, sales representative, etc."')), documentation('Position', string('"A formal position of reponsibility within an   Organization. Examples of Positions include president, laboratory   director, senior researcher, sales representative, etc."')), [], [], 'PrologMOO', 'OBJECTS', 6934, 'Anonymous', A).
mooCache(domain(occupiesPosition, 1, 'Human'), domain(occupiesPosition, 1, 'Human'), [], [], 'PrologMOO', 'OBJECTS', 6938, 'Anonymous', A).
mooCache(domain(occupiesPosition, 3, 'Organization'), domain(occupiesPosition, 3, 'Organization'), [], [], 'PrologMOO', 'OBJECTS', 6942, 'Anonymous', A).
mooCache(=>(occupiesPosition(A, B, C), employs(C, A)), and(entails(not(employs(C, A)), not(occupiesPosition(A, B, C))), entails(occupiesPosition(A, B, C), employs(C, A))), [domainV(C, [employs:1, occupiesPosition:3]), domainV(B, [occupiesPosition:2]), domainV(A, [employs:2, occupiesPosition:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PERSON'=A, 'POSITION'=B, 'ORG'=C], 'PrologMOO', 'OBJECTS', 6946, 'Anonymous', E).
mooCache(instance(citizen, 'AsymmetricRelation'), instance(citizen, 'AsymmetricRelation'), [], [], 'PrologMOO', 'OBJECTS', 6950, 'Anonymous', A).
mooCache(domain(citizen, 2, 'Nation'), domain(citizen, 2, 'Nation'), [], [], 'PrologMOO', 'OBJECTS', 6954, 'Anonymous', A).
mooCache('include-context'('MEREOTOPOLOGY'), 'include-context'('MEREOTOPOLOGY'), [], [], 'PrologMOO', 'QUALITIES', 6968, 'Anonymous', A).
mooCache('include-context'('OBJECTS'), 'include-context'('OBJECTS'), [], [], 'PrologMOO', 'QUALITIES', 6974, 'Anonymous', A).
mooCache(documentation('FieldOfStudy', string('"An academic or applied discipline with   recognized experts and with a core of accepted theory or practice.  Note   that FieldOfStudy is a subclass of Proposition, because a   FieldOfStudy is understood to be a body of abstract, informational   content, with varying degrees of certainty attached to each element of   this content."')), documentation('FieldOfStudy', string('"An academic or applied discipline with   recognized experts and with a core of accepted theory or practice.  Note   that FieldOfStudy is a subclass of Proposition, because a   FieldOfStudy is understood to be a body of abstract, informational   content, with varying degrees of certainty attached to each element of   this content."')), [], [], 'PrologMOO', 'QUALITIES', 6979, 'Anonymous', A).
mooCache(documentation('Procedure', string('"A sequence-dependent specification.  Some   examples are ComputerPrograms, finite-state machines, cooking recipes,   musical scores, conference schedules, driving directions, and the scripts   of plays and movies."')), documentation('Procedure', string('"A sequence-dependent specification.  Some   examples are ComputerPrograms, finite-state machines, cooking recipes,   musical scores, conference schedules, driving directions, and the scripts   of plays and movies."')), [], [], 'PrologMOO', 'QUALITIES', 6983, 'Anonymous', A).
mooCache(documentation('ComputerProgram', string('"A set of instructions in a computer   programming language that can be executed by a computer."')), documentation('ComputerProgram', string('"A set of instructions in a computer   programming language that can be executed by a computer."')), [], [], 'PrologMOO', 'QUALITIES', 6987, 'Anonymous', A).
mooCache(documentation('Plan', string('"A specification of a sequence of Processes which   is intended to satisfy a specified purpose at some future time."')), documentation('Plan', string('"A specification of a sequence of Processes which   is intended to satisfy a specified purpose at some future time."')), [], [], 'PrologMOO', 'QUALITIES', 6991, 'Anonymous', A).
mooCache(=>(instance(A, 'Plan'), exists(B, hasPurpose(A, B))), and(entails(not(hasPurpose(A, B)), not(instance(A, 'Plan'))), entails(and(instance(A, 'Plan'), '$existential'(B, '?PURP', hasPurpose(A, '?PURP'))), hasPurpose(A, B))), [domainV(B, [hasPurpose:2]), domainV(A, ['$instanceof':'Plan', hasPurpose:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PURP', hasPurpose(A, '?PURP')))], ['PLAN'=A, 'PURP'=B], 'PrologMOO', 'QUALITIES', 6995, 'Anonymous', D).
mooCache(instance(orientation, 'TernaryPredicate'), instance(orientation, 'TernaryPredicate'), [], [], 'PrologMOO', 'QUALITIES', 6999, 'Anonymous', A).
mooCache(domain(orientation, 2, 'Object'), domain(orientation, 2, 'Object'), [], [], 'PrologMOO', 'QUALITIES', 7003, 'Anonymous', A).
mooCache(documentation(orientation, string('"A general Predicate for indicating how two   Objects are oriented with respect to one another.  For example,   (orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and   (orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned   vertically with respect to ?OBJ2."')), documentation(orientation, string('"A general Predicate for indicating how two   Objects are oriented with respect to one another.  For example,   (orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and   (orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned   vertically with respect to ?OBJ2."')), [], [], 'PrologMOO', 'QUALITIES', 7007, 'Anonymous', A).
mooCache(instance(direction, 'CaseRole'), instance(direction, 'CaseRole'), [], [], 'PrologMOO', 'QUALITIES', 7011, 'Anonymous', A).
mooCache(domain(direction, 2, 'DirectionalAttribute'), domain(direction, 2, 'DirectionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7015, 'Anonymous', A).
mooCache(=>(holdsDuring(A, direction(B, C)), forall(D, =>(holdsDuring(A, direction(B, D)), equal(D, C)))), and(entails(and(holdsDuring(A, direction(B, D)), not(equal(D, C))), not(holdsDuring(A, direction(B, C)))), and(entails(and(holdsDuring(A, direction(B, C)), not(equal(D, C))), not(holdsDuring(A, direction(B, D)))), entails(and(holdsDuring(A, direction(B, C)), holdsDuring(A, direction(B, D))), equal(D, C)))), [domainV(D, [direction:2]), domainV(C, [direction:2]), domainV(B, [direction:1]), domainV(A, [holdsDuring:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['TIME'=A, 'PROC'=B, 'ATTR1'=C, 'ATTR2'=D], 'PrologMOO', 'QUALITIES', 7019, 'Anonymous', F).
mooCache(documentation('PositionalAttribute', string('"Attributes characterizing the   orientation of an Object, e.g. Vertical versus Horizontal, Left   versus Right etc."')), documentation('PositionalAttribute', string('"Attributes characterizing the   orientation of an Object, e.g. Vertical versus Horizontal, Left   versus Right etc."')), [], [], 'PrologMOO', 'QUALITIES', 7023, 'Anonymous', A).
mooCache(documentation('DirectionalAttribute', string('"The subclass of PositionalAttributes   that concern compass directions."')), documentation('DirectionalAttribute', string('"The subclass of PositionalAttributes   that concern compass directions."')), [], [], 'PrologMOO', 'QUALITIES', 7027, 'Anonymous', A).
mooCache(instance('North', 'DirectionalAttribute'), instance('North', 'DirectionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7031, 'Anonymous', A).
mooCache(instance('South', 'DirectionalAttribute'), instance('South', 'DirectionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7035, 'Anonymous', A).
mooCache(instance('East', 'DirectionalAttribute'), instance('East', 'DirectionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7039, 'Anonymous', A).
mooCache(instance('West', 'DirectionalAttribute'), instance('West', 'DirectionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7043, 'Anonymous', A).
mooCache(instance('Vertical', 'PositionalAttribute'), instance('Vertical', 'PositionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7047, 'Anonymous', A).
mooCache(instance('Horizontal', 'PositionalAttribute'), instance('Horizontal', 'PositionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7051, 'Anonymous', A).
mooCache(documentation('Horizontal', string('"Attribute used to indicate that an Object   is positioned width-wise with respect to another Object."')), documentation('Horizontal', string('"Attribute used to indicate that an Object   is positioned width-wise with respect to another Object."')), [], [], 'PrologMOO', 'QUALITIES', 7055, 'Anonymous', A).
mooCache(documentation('Above', string('"This is a PositionalAttribute derived from the   up/down schema and not involving contact.  Note that this means directly   above, i.e., if one object is Above another object, then the projections   of the two objects overlap."')), documentation('Above', string('"This is a PositionalAttribute derived from the   up/down schema and not involving contact.  Note that this means directly   above, i.e., if one object is Above another object, then the projections   of the two objects overlap."')), [], [], 'PrologMOO', 'QUALITIES', 7059, 'Anonymous', A).
mooCache(=>(orientation(A, B, 'Above'), not(connected(A, B))), and(entails(connected(A, B), not(orientation(A, B, 'Above'))), entails(orientation(A, B, 'Above'), not(connected(A, B)))), [domainV(B, [connected:2, orientation:2]), domainV(A, [connected:1, orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'PrologMOO', 'QUALITIES', 7063, 'Anonymous', D).
mooCache(documentation('Below', string('"This PositionalAttribute is derived from the   up/down schema and may or may not involve contact.  Note that this means   directly below, i.e., if one object is Below another object, then the   projections of the two objects overlap."')), documentation('Below', string('"This PositionalAttribute is derived from the   up/down schema and may or may not involve contact.  Note that this means   directly below, i.e., if one object is Below another object, then the   projections of the two objects overlap."')), [], [], 'PrologMOO', 'QUALITIES', 7067, 'Anonymous', A).
mooCache(instance('Adjacent', 'PositionalAttribute'), instance('Adjacent', 'PositionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7071, 'Anonymous', A).
mooCache(=>(orientation(A, B, 'Adjacent'), or(orientation(A, B, 'Near'), connected(A, B))), and(entails(and(not(orientation(A, B, 'Near')), not(connected(A, B))), not(orientation(A, B, 'Adjacent'))), and(entails(and(orientation(A, B, 'Adjacent'), not(connected(A, B))), orientation(A, B, 'Near')), entails(and(orientation(A, B, 'Adjacent'), not(orientation(A, B, 'Near'))), connected(A, B)))), [domainV(B, [connected:2, orientation:2]), domainV(A, [connected:1, orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'PrologMOO', 'QUALITIES', 7075, 'Anonymous', D).
mooCache(documentation('Front', string('"This PositionalAttribute is derived from   the front/back schema.  Note that this means directly in front of, so   that, if one object is in front of another, then the projections of   the two objects overlap."')), documentation('Front', string('"This PositionalAttribute is derived from   the front/back schema.  Note that this means directly in front of, so   that, if one object is in front of another, then the projections of   the two objects overlap."')), [], [], 'PrologMOO', 'QUALITIES', 7079, 'Anonymous', A).
mooCache(documentation('Behind', string('"This PositionalAttribute is derived from the   front/back schema.  Note that this means directly behind, so that, if   one object is behind another, then the projections of the two objects   overlap."')), documentation('Behind', string('"This PositionalAttribute is derived from the   front/back schema.  Note that this means directly behind, so that, if   one object is behind another, then the projections of the two objects   overlap."')), [], [], 'PrologMOO', 'QUALITIES', 7083, 'Anonymous', A).
mooCache(instance('Left', 'PositionalAttribute'), instance('Left', 'PositionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7087, 'Anonymous', A).
mooCache(instance('Right', 'PositionalAttribute'), instance('Right', 'PositionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7091, 'Anonymous', A).
mooCache(<=>(orientation(A, B, 'Right'), not(orientation(A, B, 'Left'))), and(and(entails(orientation(A, B, 'Right'), not(orientation(A, B, 'Left'))), entails(orientation(A, B, 'Left'), not(orientation(A, B, 'Right')))), and(entails(not(orientation(A, B, 'Left')), orientation(A, B, 'Right')), entails(not(orientation(A, B, 'Right')), orientation(A, B, 'Left')))), [domainV(B, [orientation:2]), domainV(A, [orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'PrologMOO', 'QUALITIES', 7095, 'Anonymous', D).
mooCache(documentation('Near', string('"The relation of common sense adjacency.  Note that, if   an object is Near another object, then the objects are not connected."')), documentation('Near', string('"The relation of common sense adjacency.  Note that, if   an object is Near another object, then the objects are not connected."')), [], [], 'PrologMOO', 'QUALITIES', 7099, 'Anonymous', A).
mooCache(instance('On', 'PositionalAttribute'), instance('On', 'PositionalAttribute'), [], [], 'PrologMOO', 'QUALITIES', 7103, 'Anonymous', A).
mooCache(=>(orientation(A, B, 'On'), connected(A, B)), and(entails(not(connected(A, B)), not(orientation(A, B, 'On'))), entails(orientation(A, B, 'On'), connected(A, B))), [domainV(B, [connected:2, orientation:2]), domainV(A, [connected:1, orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'PrologMOO', 'QUALITIES', 7107, 'Anonymous', D).
mooCache(documentation('PhysicalState', string('"The physical state of an Object.  There   are three instances of this Class:  Solid, Liquid, and Gas.    Physical changes are not characterized by the transformation of one   substance into another, but rather by the change of the form (physical   states) of a given substance. The bending of a piece of copper wire fails   to change the copper into another substance; crushing a block of ice leaves   only crushed ice; melting an iron nail yields a substance still called   iron: these are all accepted as physical changes."')), documentation('PhysicalState', string('"The physical state of an Object.  There   are three instances of this Class:  Solid, Liquid, and Gas.    Physical changes are not characterized by the transformation of one   substance into another, but rather by the change of the form (physical   states) of a given substance. The bending of a piece of copper wire fails   to change the copper into another substance; crushing a block of ice leaves   only crushed ice; melting an iron nail yields a substance still called   iron: these are all accepted as physical changes."')), [], [], 'PrologMOO', 'QUALITIES', 7111, 'Anonymous', A).
mooCache(documentation('Solid', string('"An Object has the Attribute of Solid if it   has a fixed shape and a fixed volume."')), documentation('Solid', string('"An Object has the Attribute of Solid if it   has a fixed shape and a fixed volume."')), [], [], 'PrologMOO', 'QUALITIES', 7115, 'Anonymous', A).
mooCache(documentation('Liquid', string('"An Object has the Attribute of Liquid if   it has a fixed volume but not a fixed shape."')), documentation('Liquid', string('"An Object has the Attribute of Liquid if   it has a fixed volume but not a fixed shape."')), [], [], 'PrologMOO', 'QUALITIES', 7119, 'Anonymous', A).
mooCache(instance('Gas', 'PhysicalState'), instance('Gas', 'PhysicalState'), [], [], 'PrologMOO', 'QUALITIES', 7123, 'Anonymous', A).
mooCache(=>(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), not(exists(E, and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))))), and(entails(and(and(part(B, C), holdsDuring(D, attribute(C, A))), and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))), not(instance(A, 'PhysicalState'))), and(entails(and(and(instance(A, 'PhysicalState'), holdsDuring(D, attribute(C, A))), and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))), not(part(B, C))), and(entails(and(and(instance(A, 'PhysicalState'), part(B, C)), and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))), not(holdsDuring(D, attribute(C, A)))), and(entails(and(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), and(holdsDuring(D, attribute(B, E)), not(equal(A, E)))), not(instance(E, 'PhysicalState'))), and(entails(and(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), and(instance(E, 'PhysicalState'), not(equal(A, E)))), not(holdsDuring(D, attribute(B, E)))), entails(and(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), and(instance(E, 'PhysicalState'), holdsDuring(D, attribute(B, E)))), equal(A, E))))))), [domainV(E, ['$instanceof':'PhysicalState', attribute:2]), domainV(D, [holdsDuring:1]), domainV(C, [attribute:1, part:2]), domainV(B, [attribute:1, part:1]), domainV(A, ['$instanceof':'PhysicalState', attribute:2]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(E)], ['STATE'=A, 'PART'=B, 'OBJ'=C, 'TIME'=D, 'OTHERSTATE'=E], 'PrologMOO', 'QUALITIES', 7127, 'Anonymous', G).
mooCache(documentation('TasteProperty', string('"The Class of Attributes relating to   the taste of Objects."')), documentation('TasteProperty', string('"The Class of Attributes relating to   the taste of Objects."')), [], [], 'PrologMOO', 'QUALITIES', 7131, 'Anonymous', A).
mooCache(instance('Sweet', 'TasteProperty'), instance('Sweet', 'TasteProperty'), [], [], 'PrologMOO', 'QUALITIES', 7135, 'Anonymous', A).
mooCache(documentation('Sweet', string('"The Attribute of Objects that are   sweet-tasting."')), documentation('Sweet', string('"The Attribute of Objects that are   sweet-tasting."')), [], [], 'PrologMOO', 'QUALITIES', 7139, 'Anonymous', A).
mooCache(documentation('Bitter', string('"The Attribute of Objects that are   bitter-tasting."')), documentation('Bitter', string('"The Attribute of Objects that are   bitter-tasting."')), [], [], 'PrologMOO', 'QUALITIES', 7143, 'Anonymous', A).
mooCache(documentation('OlfactoryProperty', string('"The Class of properties that are   detectable by smell."')), documentation('OlfactoryProperty', string('"The Class of properties that are   detectable by smell."')), [], [], 'PrologMOO', 'QUALITIES', 7147, 'Anonymous', A).
mooCache(documentation('VisualProperty', string('"The Class of visually discernible   properties."')), documentation('VisualProperty', string('"The Class of visually discernible   properties."')), [], [], 'PrologMOO', 'QUALITIES', 7151, 'Anonymous', A).
mooCache(documentation('ColorProperty', string('"The Class of VisualProperties   relating to the color of Objects."')), documentation('ColorProperty', string('"The Class of VisualProperties   relating to the color of Objects."')), [], [], 'PrologMOO', 'QUALITIES', 7155, 'Anonymous', A).
mooCache(documentation('PrimaryColor', string('"Colors which can be blended to form any   color and which cannot be derived from any other colors."')), documentation('PrimaryColor', string('"Colors which can be blended to form any   color and which cannot be derived from any other colors."')), [], [], 'PrologMOO', 'QUALITIES', 7159, 'Anonymous', A).
mooCache(contraryProperty('Red', 'Blue'), contraryProperty('Red', 'Blue'), [], [], 'PrologMOO', 'QUALITIES', 7163, 'Anonymous', A).
mooCache(documentation('Red', string('"The Attribute of redness."')), documentation('Red', string('"The Attribute of redness."')), [], [], 'PrologMOO', 'QUALITIES', 7167, 'Anonymous', A).
mooCache(contraryProperty('Blue', 'Yellow'), contraryProperty('Blue', 'Yellow'), [], [], 'PrologMOO', 'QUALITIES', 7171, 'Anonymous', A).
mooCache(instance('Yellow', 'PrimaryColor'), instance('Yellow', 'PrimaryColor'), [], [], 'PrologMOO', 'QUALITIES', 7175, 'Anonymous', A).
mooCache(instance('Monochromatic', 'ColorProperty'), instance('Monochromatic', 'ColorProperty'), [], [], 'PrologMOO', 'QUALITIES', 7179, 'Anonymous', A).
mooCache(=>(and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor')))), forall(D, =>(superficialPart(D, A), attribute(D, C)))), and(entails(and(not(attribute(D, C)), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor'))))), not(superficialPart(D, A))), and(entails(and(superficialPart(D, A), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor'))))), attribute(D, C)), and(entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor')))), not(attribute(A, 'Monochromatic'))), and(entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(attribute(A, 'Monochromatic'), and(attribute(B, C), instance(C, 'PrimaryColor')))), not(superficialPart(B, A))), and(entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), instance(C, 'PrimaryColor')))), not(attribute(B, C))), entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), attribute(B, C)))), not(instance(C, 'PrimaryColor')))))))), [domainV(D, [attribute:1, superficialPart:1]), domainV(C, ['$instanceof':'PrimaryColor', attribute:2]), domainV(B, [attribute:1, superficialPart:1]), domainV(A, [attribute:1, superficialPart:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ'=A, 'PART'=B, 'COLOR'=C, 'ELEMENT'=D], 'PrologMOO', 'QUALITIES', 7183, 'Anonymous', F).
mooCache(contraryProperty('Polychromatic', 'Monochromatic'), contraryProperty('Polychromatic', 'Monochromatic'), [], [], 'PrologMOO', 'QUALITIES', 7187, 'Anonymous', A).
mooCache(=>(attribute(A, 'Polychromatic'), exists(B, exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))))), and(and(entails(not(superficialPart(E, A)), not(attribute(A, 'Polychromatic'))), entails(and(attribute(A, 'Polychromatic'), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), superficialPart(E, A))), and(and(entails(not(superficialPart(D, A)), not(attribute(A, 'Polychromatic'))), entails(and(and(attribute(A, 'Polychromatic'), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), superficialPart(D, A))), and(and(entails(not(attribute(E, C)), not(attribute(A, 'Polychromatic'))), entails(and(and(and(attribute(A, 'Polychromatic'), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), attribute(E, C))), and(and(entails(not(attribute(D, B)), not(attribute(A, 'Polychromatic'))), entails(and(and(and(and(attribute(A, 'Polychromatic'), '$existential'(B, '?COLOR2', exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, '?COLOR2'), and(instance(C, 'ColorProperty'), and(instance('?COLOR2', 'ColorProperty'), not(equal(C, '?COLOR2'))))))))))))), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), attribute(D, B))), and(and(entails(not(instance(C, 'ColorProperty')), not(attribute(A, 'Polychromatic'))), entails(and(and(and(attribute(A, 'Polychromatic'), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), instance(C, 'ColorProperty'))), and(and(entails(not(instance(B, 'ColorProperty')), not(attribute(A, 'Polychromatic'))), entails(and(and(and(and(attribute(A, 'Polychromatic'), '$existential'(B, '?COLOR2', exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, '?COLOR2'), and(instance(C, 'ColorProperty'), and(instance('?COLOR2', 'ColorProperty'), not(equal(C, '?COLOR2'))))))))))))), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), instance(B, 'ColorProperty'))), and(entails(equal(C, B), not(attribute(A, 'Polychromatic'))), entails(attribute(A, 'Polychromatic'), not(equal(C, B)))))))))), [domainV(E, [attribute:1, superficialPart:1]), domainV(D, [attribute:1, superficialPart:1]), domainV(C, ['$instanceof':'ColorProperty', attribute:2]), domainV(B, ['$instanceof':'ColorProperty', attribute:2]), domainV(A, [attribute:1, superficialPart:2]), domainV(F, []), forall(A), replaceConsVar(B, '$existential'('?COLOR2', exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, '?COLOR2'), and(instance(C, 'ColorProperty'), and(instance('?COLOR2', 'ColorProperty'), not(equal(C, '?COLOR2'))))))))))))), replaceConsVar(C, '$existential'('?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), replaceConsVar(D, '$existential'('?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), replaceConsVar(E, '$existential'('?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))], ['OBJ'=A, 'PART1'=E, 'PART2'=D, 'COLOR1'=C, 'COLOR2'=B], 'PrologMOO', 'QUALITIES', 7191, 'Anonymous', G).
mooCache(documentation('ShapeProperty', string('"Any Attribute that characterizes the   shape of an Object."')), documentation('ShapeProperty', string('"Any Attribute that characterizes the   shape of an Object."')), [], [], 'PrologMOO', 'QUALITIES', 7195, 'Anonymous', A).
mooCache(documentation('Pliable', string('"The shape of an Object with this Attribute   can be altered."')), documentation('Pliable', string('"The shape of an Object with this Attribute   can be altered."')), [], [], 'PrologMOO', 'QUALITIES', 7199, 'Anonymous', A).
mooCache(instance('Rigid', 'ShapeProperty'), instance('Rigid', 'ShapeProperty'), [], [], 'PrologMOO', 'QUALITIES', 7203, 'Anonymous', A).
mooCache(documentation('Rigid', string('"The shape of an Object with this Attribute   cannot be easily altered."')), documentation('Rigid', string('"The shape of an Object with this Attribute   cannot be easily altered."')), [], [], 'PrologMOO', 'QUALITIES', 7207, 'Anonymous', A).
mooCache(documentation('TextureProperty', string('"Any Attribute that characterizes the   texture of an Object."')), documentation('TextureProperty', string('"Any Attribute that characterizes the   texture of an Object."')), [], [], 'PrologMOO', 'QUALITIES', 7211, 'Anonymous', A).
mooCache(instance('Smooth', 'TextureProperty'), instance('Smooth', 'TextureProperty'), [], [], 'PrologMOO', 'QUALITIES', 7215, 'Anonymous', A).
mooCache(instance('Rough', 'TextureProperty'), instance('Rough', 'TextureProperty'), [], [], 'PrologMOO', 'QUALITIES', 7219, 'Anonymous', A).
mooCache(documentation('Rough', string('"An Object with this Attribute has a rough   surface."')), documentation('Rough', string('"An Object with this Attribute has a rough   surface."')), [], [], 'PrologMOO', 'QUALITIES', 7223, 'Anonymous', A).
mooCache(documentation('SoundProperty', string('"Any Attribute that characterizes the   sound made by an Object."')), documentation('SoundProperty', string('"Any Attribute that characterizes the   sound made by an Object."')), [], [], 'PrologMOO', 'QUALITIES', 7227, 'Anonymous', A).
mooCache(documentation('SaturationProperty', string('"A Class of Attributes that specify,   in qualitative terms, the amount of Water in a particular Object."')), documentation('SaturationProperty', string('"A Class of Attributes that specify,   in qualitative terms, the amount of Water in a particular Object."')), [], [], 'PrologMOO', 'QUALITIES', 7231, 'Anonymous', A).
mooCache(contraryProperty('Dry', 'Damp'), contraryProperty('Dry', 'Damp'), [], [], 'PrologMOO', 'QUALITIES', 7235, 'Anonymous', A).
mooCache(instance('Anhydrous', 'SaturationProperty'), instance('Anhydrous', 'SaturationProperty'), [], [], 'PrologMOO', 'QUALITIES', 7239, 'Anonymous', A).
mooCache(documentation('Anhydrous', string('"An Attribute which indicates that the   associated Object does not contain any Water."')), documentation('Anhydrous', string('"An Attribute which indicates that the   associated Object does not contain any Water."')), [], [], 'PrologMOO', 'QUALITIES', 7243, 'Anonymous', A).
mooCache(instance('Damp', 'SaturationProperty'), instance('Damp', 'SaturationProperty'), [], [], 'PrologMOO', 'QUALITIES', 7247, 'Anonymous', A).
mooCache(instance('Wet', 'SaturationProperty'), instance('Wet', 'SaturationProperty'), [], [], 'PrologMOO', 'QUALITIES', 7251, 'Anonymous', A).
mooCache(documentation('Wet', string('"An Attribute which indicates that the   associated Object is fully saturated with Water."')), documentation('Wet', string('"An Attribute which indicates that the   associated Object is fully saturated with Water."')), [], [], 'PrologMOO', 'QUALITIES', 7255, 'Anonymous', A).
mooCache(subclass('BreakabilityProperty', 'Attribute'), subclass('BreakabilityProperty', 'Attribute'), [], [], 'PrologMOO', 'QUALITIES', 7259, 'Anonymous', A).
mooCache(instance('Fragile', 'BreakabilityProperty'), instance('Fragile', 'BreakabilityProperty'), [], [], 'PrologMOO', 'QUALITIES', 7263, 'Anonymous', A).
mooCache(instance('Unbreakable', 'BreakabilityProperty'), instance('Unbreakable', 'BreakabilityProperty'), [], [], 'PrologMOO', 'QUALITIES', 7267, 'Anonymous', A).
mooCache(documentation('Unbreakable', string('"An Attribute which indicates that the   associated Object cannot be broken under ordinary circumstances."')), documentation('Unbreakable', string('"An Attribute which indicates that the   associated Object cannot be broken under ordinary circumstances."')), [], [], 'PrologMOO', 'QUALITIES', 7271, 'Anonymous', A).
mooCache(documentation('BiologicalProperty', string('"Attributes that apply specifically   to instances of Organism or parts of an Organism."')), documentation('BiologicalProperty', string('"Attributes that apply specifically   to instances of Organism or parts of an Organism."')), [], [], 'PrologMOO', 'QUALITIES', 7275, 'Anonymous', A).
mooCache(subclass('AnimacyProperty', 'BiologicalProperty'), subclass('AnimacyProperty', 'BiologicalProperty'), [], [], 'PrologMOO', 'QUALITIES', 7279, 'Anonymous', A).
mooCache(instance('Living', 'AnimacyProperty'), instance('Living', 'AnimacyProperty'), [], [], 'PrologMOO', 'QUALITIES', 7283, 'Anonymous', A).
mooCache(=>(and(instance(A, 'Organism'), agent(B, A)), holdsDuring('WhenFn'(B), attribute(A, 'Living'))), and(entails(and(instance(A, 'Organism'), agent(B, A)), holdsDuring('WhenFn'(B), attribute(A, 'Living'))), and(entails(and(not(holdsDuring('WhenFn'(B), attribute(A, 'Living'))), agent(B, A)), not(instance(A, 'Organism'))), entails(and(not(holdsDuring('WhenFn'(B), attribute(A, 'Living'))), instance(A, 'Organism')), not(agent(B, A))))), [domainV(B, ['WhenFn':1, agent:1]), domainV(A, ['$instanceof':'Organism', agent:2, attribute:1]), domainV(C, []), forall(A), forall(B)], ['ORGANISM'=A, 'PROCESS'=B], 'PrologMOO', 'QUALITIES', 7287, 'Anonymous', D).
mooCache(instance(birthTime, 'AsymmetricRelation'), instance(birthTime, 'AsymmetricRelation'), [], [], 'PrologMOO', 'QUALITIES', 7291, 'Anonymous', A).
mooCache(domain(birthTime, 2, 'TimePosition'), domain(birthTime, 2, 'TimePosition'), [], [], 'PrologMOO', 'QUALITIES', 7295, 'Anonymous', A).
mooCache(documentation(birthTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism was born."')), documentation(birthTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism was born."')), [], [], 'PrologMOO', 'QUALITIES', 7299, 'Anonymous', A).
mooCache(=>(birthTime(A, B), holdsDuring(B, exists(C, and(instance(C, 'Birth'), experiencer(C, A))))), and(and(entails(not(holdsDuring(B, instance(C, 'Birth'))), not(birthTime(A, B))), entails(and(birthTime(A, B), '$existential'(C, '?BIRTH', and(holdsDuring(B, instance('?BIRTH', 'Birth')), holdsDuring(B, experiencer('?BIRTH', A))))), holdsDuring(B, instance(C, 'Birth')))), and(entails(not(holdsDuring(B, experiencer(C, A))), not(birthTime(A, B))), entails(and(birthTime(A, B), '$existential'(C, '?BIRTH', and(holdsDuring(B, instance('?BIRTH', 'Birth')), holdsDuring(B, experiencer('?BIRTH', A))))), holdsDuring(B, experiencer(C, A))))), [domainV(C, ['$instanceof':'Birth', experiencer:1]), domainV(B, [birthTime:2, holdsDuring:1]), domainV(A, [birthTime:1, experiencer:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?BIRTH', and(holdsDuring(B, instance('?BIRTH', 'Birth')), holdsDuring(B, experiencer('?BIRTH', A)))))], ['ORGANISM'=A, 'TIME'=B, 'BIRTH'=C], 'PrologMOO', 'QUALITIES', 7303, 'Anonymous', E).
mooCache(contraryProperty('Dead', 'Living'), contraryProperty('Dead', 'Living'), [], [], 'PrologMOO', 'QUALITIES', 7307, 'Anonymous', A).
mooCache(instance(deathTime, 'BinaryPredicate'), instance(deathTime, 'BinaryPredicate'), [], [], 'PrologMOO', 'QUALITIES', 7311, 'Anonymous', A).
mooCache(domain(deathTime, 1, 'Organism'), domain(deathTime, 1, 'Organism'), [], [], 'PrologMOO', 'QUALITIES', 7315, 'Anonymous', A).
mooCache(subrelation(deathTime, time), subrelation(deathTime, time), [], [], 'PrologMOO', 'QUALITIES', 7319, 'Anonymous', A).
mooCache(=>(deathTime(A, B), holdsDuring('FutureFn'(B), attribute(A, 'Dead'))), and(entails(not(holdsDuring('FutureFn'(B), attribute(A, 'Dead'))), not(deathTime(A, B))), entails(deathTime(A, B), holdsDuring('FutureFn'(B), attribute(A, 'Dead')))), [domainV(B, ['FutureFn':1, deathTime:2]), domainV(A, [attribute:1, deathTime:1]), domainV(C, []), forall(A), forall(B)], ['ORGANISM'=A, 'TIME'=B], 'PrologMOO', 'QUALITIES', 7323, 'Anonymous', D).
mooCache(=>(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), exists(D, and(equal('BeginFn'(D), B), and(equal('EndFn'(D), C), holdsDuring(D, attribute(A, 'Living')))))), and(and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), '$existential'(D, '?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), holds('BeginFn', D, B)), and(entails(and(not(holds('BeginFn', D, B)), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(birthTime(A, B))), and(entails(and(not(holds('BeginFn', D, B)), and(birthTime(A, B), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(deathTime(A, C))), and(entails(and(not(holds('BeginFn', D, B)), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimePoint')))), not(instance(B, 'TimePoint'))), entails(and(not(holds('BeginFn', D, B)), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimePoint')))), not(instance(C, 'TimePoint'))))))), and(and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), '$existential'(D, '?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), holds('EndFn', D, C)), and(entails(and(not(holds('EndFn', D, C)), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(birthTime(A, B))), and(entails(and(not(holds('EndFn', D, C)), and(birthTime(A, B), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(deathTime(A, C))), and(entails(and(not(holds('EndFn', D, C)), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimePoint')))), not(instance(B, 'TimePoint'))), entails(and(not(holds('EndFn', D, C)), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimePoint')))), not(instance(C, 'TimePoint'))))))), and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), '$existential'(D, '?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), holdsDuring(D, attribute(A, 'Living'))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(birthTime(A, B))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(deathTime(A, C))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimePoint')))), not(instance(B, 'TimePoint'))), entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimePoint')))), not(instance(C, 'TimePoint'))))))))), [domainV(D, ['BeginFn':1, 'EndFn':1, holdsDuring:1]), domainV(C, ['$instanceof':'TimePoint', 'EndFn':2, deathTime:2]), domainV(B, ['$instanceof':'TimePoint', 'BeginFn':2, birthTime:2]), domainV(A, [attribute:1, birthTime:1, deathTime:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living'))))))], ['ORGANISM'=A, 'TIME1'=B, 'TIME2'=C, 'INTERVAL'=D], 'PrologMOO', 'QUALITIES', 7327, 'Anonymous', F).
mooCache(subclass('SexProperty', 'BiologicalProperty'), subclass('SexProperty', 'BiologicalProperty'), [], [], 'PrologMOO', 'QUALITIES', 7331, 'Anonymous', A).
mooCache(instance('Female', 'SexProperty'), instance('Female', 'SexProperty'), [], [], 'PrologMOO', 'QUALITIES', 7335, 'Anonymous', A).
mooCache(instance('Male', 'SexProperty'), instance('Male', 'SexProperty'), [], [], 'PrologMOO', 'QUALITIES', 7339, 'Anonymous', A).
mooCache(documentation('Male', string('"An Attribute indicating that an Organism is   male in nature."')), documentation('Male', string('"An Attribute indicating that an Organism is   male in nature."')), [], [], 'PrologMOO', 'QUALITIES', 7343, 'Anonymous', A).
mooCache(documentation('DevelopmentalProperty', string('"Attributes that indicate the   stage of development of an Organism."')), documentation('DevelopmentalProperty', string('"Attributes that indicate the   stage of development of an Organism."')), [], [], 'PrologMOO', 'QUALITIES', 7347, 'Anonymous', A).
mooCache(documentation('FullyFormed', string('"The stage of an Organism or an   AnatomicalStructure when it has reached the end of its growth   phase."')), documentation('FullyFormed', string('"The stage of an Organism or an   AnatomicalStructure when it has reached the end of its growth   phase."')), [], [], 'PrologMOO', 'QUALITIES', 7351, 'Anonymous', A).
mooCache(contraryProperty('NonFullyFormed', 'FullyFormed'), contraryProperty('NonFullyFormed', 'FullyFormed'), [], [], 'PrologMOO', 'QUALITIES', 7355, 'Anonymous', A).
mooCache(documentation('NonFullyFormed', string('"The stage of an Animal before it is   FullyFormed."')), documentation('NonFullyFormed', string('"The stage of an Animal before it is   FullyFormed."')), [], [], 'PrologMOO', 'QUALITIES', 7359, 'Anonymous', A).
mooCache(subAttribute('Larval', 'NonFullyFormed'), subAttribute('Larval', 'NonFullyFormed'), [], [], 'PrologMOO', 'QUALITIES', 7363, 'Anonymous', A).
mooCache(instance('Embryonic', 'DevelopmentalProperty'), instance('Embryonic', 'DevelopmentalProperty'), [], [], 'PrologMOO', 'QUALITIES', 7367, 'Anonymous', A).
mooCache(successorAttribute('Embryonic', 'Fetal'), successorAttribute('Embryonic', 'Fetal'), [], [], 'PrologMOO', 'QUALITIES', 7371, 'Anonymous', A).
mooCache(instance('Fetal', 'DevelopmentalProperty'), instance('Fetal', 'DevelopmentalProperty'), [], [], 'PrologMOO', 'QUALITIES', 7375, 'Anonymous', A).
mooCache(contraryProperty('Fetal', 'Embryonic'), contraryProperty('Fetal', 'Embryonic'), [], [], 'PrologMOO', 'QUALITIES', 7379, 'Anonymous', A).
mooCache(subclass('PsychologicalProperty', 'BiologicalProperty'), subclass('PsychologicalProperty', 'BiologicalProperty'), [], [], 'PrologMOO', 'QUALITIES', 7383, 'Anonymous', A).
mooCache(subclass('EmotionalState', 'PsychologicalProperty'), subclass('EmotionalState', 'PsychologicalProperty'), [], [], 'PrologMOO', 'QUALITIES', 7387, 'Anonymous', A).
mooCache(documentation('EmotionalState', string('"The Class of Attributes that denote emotional   states of Organisms (and perhaps other Agents).  Note that EmotionalState   is distinguished from TraitProperty in part by the fact that instances of the   former are relatively transient while instances of the latter are persistent   features of a creature\'s behavioral/psychological make-up."')), documentation('EmotionalState', string('"The Class of Attributes that denote emotional   states of Organisms (and perhaps other Agents).  Note that EmotionalState   is distinguished from TraitProperty in part by the fact that instances of the   former are relatively transient while instances of the latter are persistent   features of a creature\'s behavioral/psychological make-up."')), [], [], 'PrologMOO', 'QUALITIES', 7391, 'Anonymous', A).
mooCache(documentation('TraitProperty', string('"Attributes that indicate the the   behavior/personality traits of an Organism."')), documentation('TraitProperty', string('"Attributes that indicate the the   behavior/personality traits of an Organism."')), [], [], 'PrologMOO', 'QUALITIES', 7395, 'Anonymous', A).
mooCache(contraryProperty('Aggressive', 'Docile'), contraryProperty('Aggressive', 'Docile'), [], [], 'PrologMOO', 'QUALITIES', 7399, 'Anonymous', A).
mooCache(instance('Docile', 'TraitProperty'), instance('Docile', 'TraitProperty'), [], [], 'PrologMOO', 'QUALITIES', 7403, 'Anonymous', A).
mooCache(subclass('ConsciousnessProperty', 'PsychologicalProperty'), subclass('ConsciousnessProperty', 'PsychologicalProperty'), [], [], 'PrologMOO', 'QUALITIES', 7407, 'Anonymous', A).
mooCache(=>(instance(A, 'ConsciousnessProperty'), =>(holdsDuring(B, attribute(C, A)), holdsDuring(B, attribute(C, 'Living')))), and(entails(and(holdsDuring(B, attribute(C, A)), not(holdsDuring(B, attribute(C, 'Living')))), not(instance(A, 'ConsciousnessProperty'))), and(entails(and(instance(A, 'ConsciousnessProperty'), not(holdsDuring(B, attribute(C, 'Living')))), not(holdsDuring(B, attribute(C, A)))), entails(and(instance(A, 'ConsciousnessProperty'), holdsDuring(B, attribute(C, A))), holdsDuring(B, attribute(C, 'Living'))))), [domainV(C, [attribute:1]), domainV(B, [holdsDuring:1]), domainV(A, ['$instanceof':'ConsciousnessProperty', attribute:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['PROPERTY'=A, 'TIME'=B, 'ORGANISM'=C], 'PrologMOO', 'QUALITIES', 7411, 'Anonymous', E).
mooCache(contraryProperty('Asleep', 'Unconscious'), contraryProperty('Asleep', 'Unconscious'), [], [], 'PrologMOO', 'QUALITIES', 7415, 'Anonymous', A).
mooCache(documentation('Asleep', string('"This Attribute applies to Organisms that are   sleeping."')), documentation('Asleep', string('"This Attribute applies to Organisms that are   sleeping."')), [], [], 'PrologMOO', 'QUALITIES', 7419, 'Anonymous', A).
mooCache(contraryProperty('Unconscious', 'Awake'), contraryProperty('Unconscious', 'Awake'), [], [], 'PrologMOO', 'QUALITIES', 7423, 'Anonymous', A).
mooCache(subclass('Awake', 'ConsciousnessProperty'), subclass('Awake', 'ConsciousnessProperty'), [], [], 'PrologMOO', 'QUALITIES', 7427, 'Anonymous', A).
mooCache(subclass('CompetitionProperty', 'Attribute'), subclass('CompetitionProperty', 'Attribute'), [], [], 'PrologMOO', 'QUALITIES', 7431, 'Anonymous', A).
mooCache(subclass('NormativeProperty', 'Attribute'), subclass('NormativeProperty', 'Attribute'), [], [], 'PrologMOO', 'QUALITIES', 7435, 'Anonymous', A).
mooCache(instance(modalProperty, 'BinaryPredicate'), instance(modalProperty, 'BinaryPredicate'), [], [], 'PrologMOO', 'QUALITIES', 7439, 'Anonymous', A).
mooCache(instance(modalProperty, 'IrreflexiveRelation'), instance(modalProperty, 'IrreflexiveRelation'), [], [], 'PrologMOO', 'QUALITIES', 7443, 'Anonymous', A).
mooCache(domain(modalProperty, 1, 'Formula'), domain(modalProperty, 1, 'Formula'), [], [], 'PrologMOO', 'QUALITIES', 7447, 'Anonymous', A).
mooCache(documentation(modalProperty, string('"A BinaryRelation that is used to state the   normative force of a Proposition.  (modalProperty ?FORMULA ?PROP) means   that the Proposition expressed by ?FORMULA has the NormativeProperty   ?PROP.  For example, (modalProperty (exists (?ACT ?OBJ) (and   (instance ?ACT Giving) (agent ?ACT John) (patient ?ACT ?OBJ)   (destination ?ACT Tom))) Obligation) means that John is obligated to give   Tom something."')), documentation(modalProperty, string('"A BinaryRelation that is used to state the   normative force of a Proposition.  (modalProperty ?FORMULA ?PROP) means   that the Proposition expressed by ?FORMULA has the NormativeProperty   ?PROP.  For example, (modalProperty (exists (?ACT ?OBJ) (and   (instance ?ACT Giving) (agent ?ACT John) (patient ?ACT ?OBJ)   (destination ?ACT Tom))) Obligation) means that John is obligated to give   Tom something."')), [], [], 'PrologMOO', 'QUALITIES', 7451, 'Anonymous', A).
mooCache(subclass('SubjectiveAssessmentProperty', 'NormativeProperty'), subclass('SubjectiveAssessmentProperty', 'NormativeProperty'), [], [], 'PrologMOO', 'QUALITIES', 7455, 'Anonymous', A).
mooCache(instance('Obligation', 'NormativeProperty'), instance('Obligation', 'NormativeProperty'), [], [], 'PrologMOO', 'QUALITIES', 7459, 'Anonymous', A).
mooCache(subAttribute('Law', 'Obligation'), subAttribute('Law', 'Obligation'), [], [], 'PrologMOO', 'QUALITIES', 7463, 'Anonymous', A).
mooCache(instance('Promise', 'NormativeProperty'), instance('Promise', 'NormativeProperty'), [], [], 'PrologMOO', 'QUALITIES', 7467, 'Anonymous', A).
mooCache(subAttribute('Contract', 'Promise'), subAttribute('Contract', 'Promise'), [], [], 'PrologMOO', 'QUALITIES', 7471, 'Anonymous', A).
mooCache(subAttribute('PurchaseContract', 'Contract'), subAttribute('PurchaseContract', 'Contract'), [], [], 'PrologMOO', 'QUALITIES', 7475, 'Anonymous', A).
mooCache(subAttribute('ServiceContract', 'Contract'), subAttribute('ServiceContract', 'Contract'), [], [], 'PrologMOO', 'QUALITIES', 7479, 'Anonymous', A).
mooCache(subAttribute('Warranty', 'ServiceContract'), subAttribute('Warranty', 'ServiceContract'), [], [], 'PrologMOO', 'QUALITIES', 7483, 'Anonymous', A).
mooCache(subAttribute('NakedPromise', 'Promise'), subAttribute('NakedPromise', 'Promise'), [], [], 'PrologMOO', 'QUALITIES', 7487, 'Anonymous', A).
mooCache(documentation('NakedPromise', string('"A Promise where nothing is promised in return,   i.e. a nudum pactum."')), documentation('NakedPromise', string('"A Promise where nothing is promised in return,   i.e. a nudum pactum."')), [], [], 'PrologMOO', 'QUALITIES', 7491, 'Anonymous', A).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 147, 'Anonymous', on).
mooCache(instance(instance, 'BinaryPredicate'), instance(instance, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 156, 'Anonymous', on).
mooCache(instance(instance, 'AntisymmetricRelation'), instance(instance, 'AntisymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 158, 'Anonymous', on).
mooCache(domain(instance, 1, 'Entity'), domain(instance, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 160, 'Anonymous', on).
mooCache(domain(instance, 2, 'Class'), domain(instance, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 162, 'Anonymous', on).
mooCache(documentation(instance, string('"An object is an instance a Class if   it is a member of that Class.  An individual may be an instance of many   classes, some of which may be subclasses of others.  Thus, there is no   assumption in the meaning of instance about specificity or uniqueness."')), documentation(instance, string('"An object is an instance a Class if   it is a member of that Class.  An individual may be an instance of many   classes, some of which may be subclasses of others.  Thus, there is no   assumption in the meaning of instance about specificity or uniqueness."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 164, 'Anonymous', on).
mooCache(instance(inverse, 'BinaryPredicate'), instance(inverse, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 166, 'Anonymous', on).
mooCache(instance(inverse, 'SymmetricRelation'), instance(inverse, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 168, 'Anonymous', on).
mooCache(domain(inverse, 1, 'BinaryRelation'), domain(inverse, 1, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 170, 'Anonymous', on).
mooCache(domain(inverse, 2, 'BinaryRelation'), domain(inverse, 2, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 172, 'Anonymous', on).
mooCache(documentation(inverse, string('"The inverse of a BinaryRelation is a relation   in which all the tuples of the original relation are reversed.  In   other words, one BinaryRelation is the inverse of another if they are   equivalent when their arguments are swapped."')), documentation(inverse, string('"The inverse of a BinaryRelation is a relation   in which all the tuples of the original relation are reversed.  In   other words, one BinaryRelation is the inverse of another if they are   equivalent when their arguments are swapped."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 174, 'Anonymous', on).
mooCache(=>(inverse(A, B), forall(C, forall(D, <=>(holds(A, D, C), holds(B, C, D))))), and(entails(and(not(holds(B, C, D)), holds(B, C, D)), not(inverse(A, B))), and(and(entails(and(not(holds(B, C, D)), holds(A, D, C)), not(inverse(A, B))), and(entails(and(inverse(A, B), holds(A, D, C)), holds(B, C, D)), entails(and(inverse(A, B), not(holds(B, C, D))), not(holds(A, D, C))))), and(entails(and(not(holds(A, D, C)), holds(A, D, C)), not(inverse(A, B))), and(entails(and(not(holds(A, D, C)), holds(B, C, D)), not(inverse(A, B))), and(entails(and(inverse(A, B), holds(B, C, D)), holds(A, D, C)), entails(and(inverse(A, B), not(holds(A, D, C))), not(holds(B, C, D)))))))), [domainV(D, [A:1, B:2]), domainV(C, [A:2, B:1]), domainV(B, [holds:1, inverse:2]), domainV(A, [holds:1, inverse:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['REL1'=A, 'REL2'=B, 'INST1'=D, 'INST2'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 176, 'Anonymous', on).
mooCache(instance(subclass, 'BinaryPredicate'), instance(subclass, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 178, 'Anonymous', on).
mooCache(instance(subclass, 'PartialOrderingRelation'), instance(subclass, 'PartialOrderingRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 180, 'Anonymous', on).
mooCache(domain(subclass, 1, 'Class'), domain(subclass, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 182, 'Anonymous', on).
mooCache(domain(subclass, 2, 'Class'), domain(subclass, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 184, 'Anonymous', on).
mooCache(documentation(subclass, string('"Class C is a subclass of Class P only if   every instance of C is also an instance of P.  A class may have multiple   superclasses and subclasses."')), documentation(subclass, string('"Class C is a subclass of Class P only if   every instance of C is also an instance of P.  A class may have multiple   superclasses and subclasses."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 186, 'Anonymous', on).
mooCache(=>(subclass(A, B), forall(C, =>(instance(C, A), instance(C, B)))), and(entails(and(instance(C, A), not(instance(C, B))), not(subclass(A, B))), and(entails(and(subclass(A, B), not(instance(C, B))), not(instance(C, A))), entails(and(subclass(A, B), instance(C, A)), instance(C, B)))), [domainV(C, []), domainV(B, [instance:2, subclass:2]), domainV(A, [instance:2, subclass:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['SUBCLASS'=A, 'CLASS'=B, 'INST'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 188, 'Anonymous', on).
mooCache(instance(subrelation, 'BinaryPredicate'), instance(subrelation, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 190, 'Anonymous', on).
mooCache(instance(subrelation, 'PartialOrderingRelation'), instance(subrelation, 'PartialOrderingRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 192, 'Anonymous', on).
mooCache(domain(subrelation, 1, 'Relation'), domain(subrelation, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 194, 'Anonymous', on).
mooCache(domain(subrelation, 2, 'Relation'), domain(subrelation, 2, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 196, 'Anonymous', on).
mooCache(documentation(subrelation, string('"A Relation R is a subrelation   Relation R\' if R is a subclass R\'.  This implies that every   tuple of R is also a tuple of R\'.  Again, if R holds for some arguments   arg_1, arg_2, ... arg_n, then R\' holds for the same arguments.  Thus, a   Relation and its subrelation must have the same valence. In CycL,   subrelation is called #$genlPreds."')), documentation(subrelation, string('"A Relation R is a subrelation   Relation R\' if R is a subclass R\'.  This implies that every   tuple of R is also a tuple of R\'.  Again, if R holds for some arguments   arg_1, arg_2, ... arg_n, then R\' holds for the same arguments.  Thus, a   Relation and its subrelation must have the same valence. In CycL,   subrelation is called #$genlPreds."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 198, 'Anonymous', on).
mooCache(=>(and(subrelation(A, B), valence(A, C)), valence(B, C)), and(entails(and(subrelation(A, B), valence(A, C)), valence(B, C)), and(entails(and(not(valence(B, C)), valence(A, C)), not(subrelation(A, B))), entails(and(not(valence(B, C)), subrelation(A, B)), not(valence(A, C))))), [domainV(C, [valence:2]), domainV(B, [subrelation:2, valence:1]), domainV(A, [subrelation:1, valence:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PRED1'=A, 'PRED2'=B, 'NUMBER'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 200, 'Anonymous', on).
mooCache(=>(and(subrelation(A, B), and(domain(B, C, D), domain(A, C, E))), subclass(E, D)), and(entails(and(subrelation(A, B), and(domain(B, C, D), domain(A, C, E))), subclass(E, D)), and(entails(and(not(subclass(E, D)), and(domain(B, C, D), domain(A, C, E))), not(subrelation(A, B))), and(entails(and(not(subclass(E, D)), and(subrelation(A, B), domain(A, C, E))), not(domain(B, C, D))), entails(and(not(subclass(E, D)), and(subrelation(A, B), domain(B, C, D))), not(domain(A, C, E)))))), [domainV(E, [domain:3, subclass:1]), domainV(D, [domain:3, subclass:2]), domainV(C, [domain:2]), domainV(B, [domain:1, subrelation:2]), domainV(A, [domain:1, subrelation:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['PRED1'=A, 'PRED2'=B, 'NUMBER'=C, 'CLASS2'=D, 'CLASS1'=E], 'Merge', 'STRUCTURAL ONTOLOGY', 202, 'Anonymous', on).
mooCache(=>(and(subrelation(A, B), and(instance(B, C), instance(C, 'InheritableRelation'))), instance(A, C)), and(entails(and(subrelation(A, B), and(instance(B, C), instance(C, 'InheritableRelation'))), instance(A, C)), and(entails(and(not(instance(A, C)), and(instance(B, C), instance(C, 'InheritableRelation'))), not(subrelation(A, B))), and(entails(and(not(instance(A, C)), and(subrelation(A, B), instance(C, 'InheritableRelation'))), not(instance(B, C))), entails(and(not(instance(A, C)), and(subrelation(A, B), instance(B, C))), not(instance(C, 'InheritableRelation')))))), [domainV(C, ['$instanceof':'InheritableRelation', instance:2]), domainV(B, [subrelation:2]), domainV(A, [subrelation:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PRED1'=A, 'PRED2'=B, 'CLASS'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 206, 'Anonymous', on).
mooCache(instance(domain, 'TernaryPredicate'), instance(domain, 'TernaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 208, 'Anonymous', on).
mooCache(domain(domain, 1, 'Relation'), domain(domain, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 210, 'Anonymous', on).
mooCache(domain(domain, 2, 'PositiveInteger'), domain(domain, 2, 'PositiveInteger'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 212, 'Anonymous', on).
mooCache(domain(domain, 3, 'Class'), domain(domain, 3, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 214, 'Anonymous', on).
mooCache(documentation(domain, string('"Provides a computationally and heuristically  convenient mechanism for declaring the argument types of a given relation.    The formula (domain ?REL 3 ?CLASS) says that the 3rd element of each   tuple in the relation ?REL is an instance of ?CLASS.  Specifying argument  types is very helpful in maintaining ontologies.  Representation systems can   use these specifications to classify terms and check integrity constraints.    If the restriction on the argument type of a Relation is not captured by a   Class already defined in the ontology, one can specify a Class compositionally   with the functions UnionFn, IntersectionFn, etc."')), documentation(domain, string('"Provides a computationally and heuristically  convenient mechanism for declaring the argument types of a given relation.    The formula (domain ?REL 3 ?CLASS) says that the 3rd element of each   tuple in the relation ?REL is an instance of ?CLASS.  Specifying argument  types is very helpful in maintaining ontologies.  Representation systems can   use these specifications to classify terms and check integrity constraints.    If the restriction on the argument type of a Relation is not captured by a   Class already defined in the ontology, one can specify a Class compositionally   with the functions UnionFn, IntersectionFn, etc."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 216, 'Anonymous', on).
mooCache(instance(domainSubclass, 'TernaryPredicate'), instance(domainSubclass, 'TernaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 228, 'Anonymous', on).
mooCache(domain(domainSubclass, 1, 'Relation'), domain(domainSubclass, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 230, 'Anonymous', on).
mooCache(domain(domainSubclass, 2, 'PositiveInteger'), domain(domainSubclass, 2, 'PositiveInteger'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 232, 'Anonymous', on).
mooCache(domain(domainSubclass, 3, 'Class'), domain(domainSubclass, 3, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 234, 'Anonymous', on).
mooCache(documentation(domainSubclass, string('"Predicate used to specify argument   type restrictions of Predicates.  The formula (domainSubclass   ?REL 3 ?CLASS) says that the 3rd element of each tuple in the relation   ?REL is a subclass of ?CLASS."')), documentation(domainSubclass, string('"Predicate used to specify argument   type restrictions of Predicates.  The formula (domainSubclass   ?REL 3 ?CLASS) says that the 3rd element of each tuple in the relation   ?REL is a subclass of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 236, 'Anonymous', on).
mooCache(instance(equal, 'BinaryPredicate'), instance(equal, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 248, 'Anonymous', on).
mooCache(instance(equal, 'EquivalenceRelation'), instance(equal, 'EquivalenceRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 250, 'Anonymous', on).
mooCache(instance(equal, 'RelationExtendedToQuantities'), instance(equal, 'RelationExtendedToQuantities'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 252, 'Anonymous', on).
mooCache(domain(equal, 1, 'Entity'), domain(equal, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 254, 'Anonymous', on).
mooCache(domain(equal, 2, 'Entity'), domain(equal, 2, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 256, 'Anonymous', on).
mooCache(documentation(equal, string('"(equal ?ENTITY1 ?ENTITY2) is true just in case   ?ENTITY1 is identical with ?ENTITY2."')), documentation(equal, string('"(equal ?ENTITY1 ?ENTITY2) is true just in case   ?ENTITY1 is identical with ?ENTITY2."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 258, 'Anonymous', on).
mooCache(=>(equal(A, B), forall(C, <=>(attribute(A, C), attribute(B, C)))), and(entails(and(not(attribute(B, C)), attribute(B, C)), not(equal(A, B))), and(and(entails(and(not(attribute(B, C)), attribute(A, C)), not(equal(A, B))), and(entails(and(equal(A, B), attribute(A, C)), attribute(B, C)), entails(and(equal(A, B), not(attribute(B, C))), not(attribute(A, C))))), and(entails(and(not(attribute(A, C)), attribute(A, C)), not(equal(A, B))), and(entails(and(not(attribute(A, C)), attribute(B, C)), not(equal(A, B))), and(entails(and(equal(A, B), attribute(B, C)), attribute(A, C)), entails(and(equal(A, B), not(attribute(A, C))), not(attribute(B, C)))))))), [domainV(C, [attribute:2]), domainV(B, [attribute:1]), domainV(A, [attribute:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['THING1'=A, 'THING2'=B, 'ATTR'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 260, 'Anonymous', on).
mooCache(=>(equal(A, B), forall(C, <=>(instance(A, C), instance(B, C)))), and(entails(and(not(instance(B, C)), instance(B, C)), not(equal(A, B))), and(and(entails(and(not(instance(B, C)), instance(A, C)), not(equal(A, B))), and(entails(and(equal(A, B), instance(A, C)), instance(B, C)), entails(and(equal(A, B), not(instance(B, C))), not(instance(A, C))))), and(entails(and(not(instance(A, C)), instance(A, C)), not(equal(A, B))), and(entails(and(not(instance(A, C)), instance(B, C)), not(equal(A, B))), and(entails(and(equal(A, B), instance(B, C)), instance(A, C)), entails(and(equal(A, B), not(instance(A, C))), not(instance(B, C)))))))), [domainV(C, [instance:2]), domainV(B, []), domainV(A, []), domainV(D, []), forall(A), forall(B), forall(C)], ['THING1'=A, 'THING2'=B, 'CLASS'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 262, 'Anonymous', on).
mooCache(instance(range, 'BinaryPredicate'), instance(range, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 264, 'Anonymous', on).
mooCache(instance(range, 'AsymmetricRelation'), instance(range, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 266, 'Anonymous', on).
mooCache(domain(range, 1, 'Function'), domain(range, 1, 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 268, 'Anonymous', on).
mooCache(domain(range, 2, 'Class'), domain(range, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 270, 'Anonymous', on).
mooCache(documentation(range, string('"Gives the range of a function.  In other words,   (range ?FUNCTION ?CLASS) means that all of the values assigned by   ?FUNCTION are instances of ?CLASS."')), documentation(range, string('"Gives the range of a function.  In other words,   (range ?FUNCTION ?CLASS) means that all of the values assigned by   ?FUNCTION are instances of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 272, 'Anonymous', on).
mooCache(instance(rangeSubclass, 'BinaryPredicate'), instance(rangeSubclass, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 274, 'Anonymous', on).
mooCache(instance(rangeSubclass, 'AsymmetricRelation'), instance(rangeSubclass, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 276, 'Anonymous', on).
mooCache(domain(rangeSubclass, 1, 'Function'), domain(rangeSubclass, 1, 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 278, 'Anonymous', on).
mooCache(domainSubclass(rangeSubclass, 2, 'Class'), domainSubclass(rangeSubclass, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 280, 'Anonymous', on).
mooCache(documentation(rangeSubclass, string('"(rangeSubclass ?FUNCTION ?CLASS) means that   all of the values assigned by ?FUNCTION are subclasses of ?CLASS."')), documentation(rangeSubclass, string('"(rangeSubclass ?FUNCTION ?CLASS) means that   all of the values assigned by ?FUNCTION are subclasses of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 282, 'Anonymous', on).
mooCache(instance('DomainFn', 'UnaryFunction'), instance('DomainFn', 'UnaryFunction'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 284, 'Anonymous', on).
mooCache(domain('DomainFn', 1, 'BinaryRelation'), domain('DomainFn', 1, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 286, 'Anonymous', on).
mooCache(range('DomainFn', 'Class'), range('DomainFn', 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 288, 'Anonymous', on).
mooCache(documentation('DomainFn', string('"The domain of a BinaryRelation ?REL is  the Class of all things that bear ?REL to something."')), documentation('DomainFn', string('"The domain of a BinaryRelation ?REL is  the Class of all things that bear ?REL to something."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 290, 'Anonymous', on).
mooCache(<=>(instance(A, 'DomainFn'(B)), exists(C, holds(B, A, C))), and(and(entails(and(instance(A, 'DomainFn'(B)), '$existential'(C, '?INST2', holds(B, A, '?INST2'))), holds(B, A, C)), entails(not(holds(B, A, C)), not(instance(A, 'DomainFn'(B))))), and(entails(holds(B, A, C), instance(A, 'DomainFn'(B))), entails(not(instance(A, 'DomainFn'(B))), not(holds(B, A, C))))), [domainV(C, [B:2]), domainV(B, ['DomainFn':1, holds:1]), domainV(A, [B:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?INST2', holds(B, A, '?INST2'))), forall(C)], ['INST1'=A, 'REL'=B, 'INST2'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 292, 'Anonymous', on).
mooCache(instance('RangeFn', 'UnaryFunction'), instance('RangeFn', 'UnaryFunction'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 294, 'Anonymous', on).
mooCache(domain('RangeFn', 1, 'BinaryRelation'), domain('RangeFn', 1, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 296, 'Anonymous', on).
mooCache(range('RangeFn', 'Class'), range('RangeFn', 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 298, 'Anonymous', on).
mooCache(documentation('RangeFn', string('"The range of a BinaryRelation ?REL is the  Class of all things such that something bears ?REL to them."')), documentation('RangeFn', string('"The range of a BinaryRelation ?REL is the  Class of all things such that something bears ?REL to them."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 300, 'Anonymous', on).
mooCache(<=>(instance(A, 'RangeFn'(B)), exists(C, holds(B, C, A))), and(and(entails(and(instance(A, 'RangeFn'(B)), '$existential'(C, '?INST2', holds(B, '?INST2', A))), holds(B, C, A)), entails(not(holds(B, C, A)), not(instance(A, 'RangeFn'(B))))), and(entails(holds(B, C, A), instance(A, 'RangeFn'(B))), entails(not(instance(A, 'RangeFn'(B))), not(holds(B, C, A))))), [domainV(C, [B:1]), domainV(B, ['RangeFn':1, holds:1]), domainV(A, [B:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?INST2', holds(B, '?INST2', A))), forall(C)], ['INST1'=A, 'REL'=B, 'INST2'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 302, 'Anonymous', on).
mooCache(instance(valence, 'BinaryPredicate'), instance(valence, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 304, 'Anonymous', on).
mooCache(instance(valence, 'AsymmetricRelation'), instance(valence, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 306, 'Anonymous', on).
mooCache(domain(valence, 1, 'Relation'), domain(valence, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 308, 'Anonymous', on).
mooCache(domain(valence, 2, 'PositiveInteger'), domain(valence, 2, 'PositiveInteger'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 310, 'Anonymous', on).
mooCache(singleValued(valence, 2), singleValued(valence, 2), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 312, 'Anonymous', on).
mooCache(documentation(valence, string('"Specifies the number of arguments that a   relation can take.  If a relation does not have a fixed number of   arguments, it does not have a valence and it is an instance of   VariableArityRelation.  For example, holds is a   VariableArityRelation."')), documentation(valence, string('"Specifies the number of arguments that a   relation can take.  If a relation does not have a fixed number of   arguments, it does not have a valence and it is an instance of   VariableArityRelation.  For example, holds is a   VariableArityRelation."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 314, 'Anonymous', on).
mooCache(instance(documentation, 'BinaryPredicate'), instance(documentation, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 316, 'Anonymous', on).
mooCache(instance(documentation, 'AsymmetricRelation'), instance(documentation, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 318, 'Anonymous', on).
mooCache(domain(documentation, 1, 'Entity'), domain(documentation, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 320, 'Anonymous', on).
mooCache(domain(documentation, 2, 'SymbolicString'), domain(documentation, 2, 'SymbolicString'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 322, 'Anonymous', on).
mooCache(documentation(documentation, string('"A relation between objects in the domain   of discourse and strings of natural language text.  The domain of   documentation is not constants (names), but the objects themselves.    This means that one does not quote the names when associating them with   their documentation."')), documentation(documentation, string('"A relation between objects in the domain   of discourse and strings of natural language text.  The domain of   documentation is not constants (names), but the objects themselves.    This means that one does not quote the names when associating them with   their documentation."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 324, 'Anonymous', on).
mooCache(instance(disjoint, 'BinaryPredicate'), instance(disjoint, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 326, 'Anonymous', on).
mooCache(instance(disjoint, 'SymmetricRelation'), instance(disjoint, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 328, 'Anonymous', on).
mooCache(instance(disjoint, 'IrreflexiveRelation'), instance(disjoint, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 330, 'Anonymous', on).
mooCache(domain(disjoint, 1, 'Class'), domain(disjoint, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 332, 'Anonymous', on).
mooCache(domain(disjoint, 2, 'Class'), domain(disjoint, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 334, 'Anonymous', on).
mooCache(documentation(disjoint, string('"Classes are disjoint only if they share no   instances, i.e. just in case the result of applying IntersectionFn to  them is empty."')), documentation(disjoint, string('"Classes are disjoint only if they share no   instances, i.e. just in case the result of applying IntersectionFn to  them is empty."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 336, 'Anonymous', on).
mooCache(=>(disjoint(A, B), forall(C, not(and(instance(C, A), instance(C, B))))), and(entails(and(instance(C, A), instance(C, B)), not(disjoint(A, B))), and(entails(and(disjoint(A, B), instance(C, B)), not(instance(C, A))), entails(and(disjoint(A, B), instance(C, A)), not(instance(C, B))))), [domainV(C, []), domainV(B, [disjoint:2, instance:2]), domainV(A, [disjoint:1, instance:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['CLASS1'=A, 'CLASS2'=B, 'INST'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 338, 'Anonymous', on).
mooCache(instance(disjointRelation, 'BinaryPredicate'), instance(disjointRelation, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 340, 'Anonymous', on).
mooCache(instance(disjointRelation, 'SymmetricRelation'), instance(disjointRelation, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 342, 'Anonymous', on).
mooCache(instance(disjointRelation, 'IrreflexiveRelation'), instance(disjointRelation, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 344, 'Anonymous', on).
mooCache(domain(disjointRelation, 1, 'Relation'), domain(disjointRelation, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 346, 'Anonymous', on).
mooCache(domain(disjointRelation, 2, 'Relation'), domain(disjointRelation, 2, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 348, 'Anonymous', on).
mooCache(relatedInternalConcept(disjointRelation, disjoint), relatedInternalConcept(disjointRelation, disjoint), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 350, 'Anonymous', on).
mooCache(documentation(disjointRelation, string('"(disjointRelation ?REL1 ?REL2) means that the   two relations ?REL1 and ?REL2 have no tuples in common.  In other words, the   intersection of ?REL1 and ?REL2 is the null set."')), documentation(disjointRelation, string('"(disjointRelation ?REL1 ?REL2) means that the   two relations ?REL1 and ?REL2 have no tuples in common.  In other words, the   intersection of ?REL1 and ?REL2 is the null set."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 352, 'Anonymous', on).
mooCache(=>(and(disjointRelation(A, B), valence(A, C)), valence(B, C)), and(entails(and(disjointRelation(A, B), valence(A, C)), valence(B, C)), and(entails(and(not(valence(B, C)), valence(A, C)), not(disjointRelation(A, B))), entails(and(not(valence(B, C)), disjointRelation(A, B)), not(valence(A, C))))), [domainV(C, [valence:2]), domainV(B, [disjointRelation:2, valence:1]), domainV(A, [disjointRelation:1, valence:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['REL1'=A, 'REL2'=B, 'NUMBER'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 354, 'Anonymous', on).
mooCache(=>(and(domain(A, B, C), and(domain(D, B, E), disjoint(C, E))), disjointRelation(A, D)), and(entails(and(domain(A, B, C), and(domain(D, B, E), disjoint(C, E))), disjointRelation(A, D)), and(entails(and(not(disjointRelation(A, D)), and(domain(D, B, E), disjoint(C, E))), not(domain(A, B, C))), and(entails(and(not(disjointRelation(A, D)), and(domain(A, B, C), disjoint(C, E))), not(domain(D, B, E))), entails(and(not(disjointRelation(A, D)), and(domain(A, B, C), domain(D, B, E))), not(disjoint(C, E)))))), [domainV(E, [disjoint:2, domain:3]), domainV(D, [disjointRelation:2, domain:1]), domainV(C, [disjoint:1, domain:3]), domainV(B, [domain:2]), domainV(A, [disjointRelation:1, domain:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['REL1'=A, 'NUMBER'=B, 'CLASS1'=C, 'REL2'=D, 'CLASS2'=E], 'Merge', 'STRUCTURAL ONTOLOGY', 356, 'Anonymous', on).
mooCache(instance(contraryProperty, 'BinaryPredicate'), instance(contraryProperty, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 360, 'Anonymous', on).
mooCache(instance(contraryProperty, 'SymmetricRelation'), instance(contraryProperty, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 362, 'Anonymous', on).
mooCache(instance(contraryProperty, 'IrreflexiveRelation'), instance(contraryProperty, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 364, 'Anonymous', on).
mooCache(domain(contraryProperty, 1, 'Attribute'), domain(contraryProperty, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 366, 'Anonymous', on).
mooCache(domain(contraryProperty, 2, 'Attribute'), domain(contraryProperty, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 368, 'Anonymous', on).
mooCache(documentation(contraryProperty, string('"Means that the two arguments are   properties that are opposed to one another, e.g. Pliable versus   Rigid."')), documentation(contraryProperty, string('"Means that the two arguments are   properties that are opposed to one another, e.g. Pliable versus   Rigid."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 370, 'Anonymous', on).
mooCache(=>(and(attribute(A, B), contraryProperty(B, C)), not(attribute(A, C))), and(entails(and(attribute(A, B), contraryProperty(B, C)), not(attribute(A, C))), and(entails(and(attribute(A, C), contraryProperty(B, C)), not(attribute(A, B))), entails(and(attribute(A, C), attribute(A, B)), not(contraryProperty(B, C))))), [domainV(C, [attribute:2, contraryProperty:2]), domainV(B, [attribute:2, contraryProperty:1]), domainV(A, [attribute:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ'=A, 'ATTR1'=B, 'ATTR2'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 372, 'Anonymous', on).
mooCache(instance(exhaustiveDecomposition, 'Predicate'), instance(exhaustiveDecomposition, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 374, 'Anonymous', on).
mooCache(instance(exhaustiveDecomposition, 'VariableArityRelation'), instance(exhaustiveDecomposition, 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 376, 'Anonymous', on).
mooCache(domain(exhaustiveDecomposition, 1, 'Class'), domain(exhaustiveDecomposition, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 378, 'Anonymous', on).
mooCache(relatedInternalConcept(exhaustiveDecomposition, partition), relatedInternalConcept(exhaustiveDecomposition, partition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 380, 'Anonymous', on).
mooCache(documentation(exhaustiveDecomposition, string('"An exhaustiveDecomposition of a   Class C is a set of subclasses of C such that every subclass of C either   is an element of the set or is a subclass of an element of the set.  Note:   this does not necessarily mean that the elements of the set are disjoint   (see partition - a partition is a disjoint exhaustive decomposition.)"')), documentation(exhaustiveDecomposition, string('"An exhaustiveDecomposition of a   Class C is a set of subclasses of C such that every subclass of C either   is an element of the set or is a subclass of an element of the set.  Note:   this does not necessarily mean that the elements of the set are disjoint   (see partition - a partition is a disjoint exhaustive decomposition.)"')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 382, 'Anonymous', on).
mooCache(forall(A, domain(exhaustiveDecomposition, A, 'Class')), domain(exhaustiveDecomposition, A, 'Class'), [domainV(A, [domain:2]), domainV(B, []), forall(A)], ['INT'=A], 'Merge', 'STRUCTURAL ONTOLOGY', 384, 'Anonymous', on).
mooCache(=>(exhaustiveDecomposition(A, B, C), forall(D, =>(instance(D, A), or(instance(D, B), instance(D, C))))), and(entails(and(instance(D, A), and(not(instance(D, B)), not(instance(D, C)))), not(exhaustiveDecomposition(A, B, C))), and(entails(and(exhaustiveDecomposition(A, B, C), and(not(instance(D, B)), not(instance(D, C)))), not(instance(D, A))), and(entails(and(exhaustiveDecomposition(A, B, C), and(instance(D, A), not(instance(D, C)))), instance(D, B)), entails(and(exhaustiveDecomposition(A, B, C), and(instance(D, A), not(instance(D, B)))), instance(D, C))))), [domainV(D, []), domainV(C, [exhaustiveDecomposition:3, instance:2]), domainV(B, [exhaustiveDecomposition:2, instance:2]), domainV(A, [exhaustiveDecomposition:1, instance:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['CLASS1'=A, 'CLASS2'=B, 'CLASS3'=C, 'OBJ'=D], 'Merge', 'STRUCTURAL ONTOLOGY', 386, 'Anonymous', on).
mooCache(=>(exhaustiveDecomposition(A, B, C, D), forall(E, =>(instance(E, A), or(instance(E, B), or(instance(E, C), instance(E, D)))))), and(entails(and(instance(E, A), and(not(instance(E, B)), and(not(instance(E, C)), not(instance(E, D))))), not(exhaustiveDecomposition(A, B, C, D))), and(entails(and(exhaustiveDecomposition(A, B, C, D), and(not(instance(E, B)), and(not(instance(E, C)), not(instance(E, D))))), not(instance(E, A))), and(entails(and(exhaustiveDecomposition(A, B, C, D), and(instance(E, A), and(not(instance(E, C)), not(instance(E, D))))), instance(E, B)), and(entails(and(exhaustiveDecomposition(A, B, C, D), and(instance(E, A), and(not(instance(E, B)), not(instance(E, D))))), instance(E, C)), entails(and(exhaustiveDecomposition(A, B, C, D), and(instance(E, A), and(not(instance(E, B)), not(instance(E, C))))), instance(E, D)))))), [domainV(E, []), domainV(D, [exhaustiveDecomposition:4, instance:2]), domainV(C, [exhaustiveDecomposition:3, instance:2]), domainV(B, [exhaustiveDecomposition:2, instance:2]), domainV(A, [exhaustiveDecomposition:1, instance:2]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['CLASS1'=A, 'CLASS2'=B, 'CLASS3'=C, 'CLASS4'=D, 'OBJ'=E], 'Merge', 'STRUCTURAL ONTOLOGY', 388, 'Anonymous', on).
mooCache(=>(exhaustiveDecomposition(A, B, C, D, E), forall(F, =>(instance(F, A), or(instance(F, B), or(instance(F, C), or(instance(F, D), instance(F, E))))))), and(entails(and(instance(F, A), and(not(instance(F, B)), and(not(instance(F, C)), and(not(instance(F, D)), not(instance(F, E)))))), not(exhaustiveDecomposition(A, B, C, D, E))), and(entails(and(exhaustiveDecomposition(A, B, C, D, E), and(not(instance(F, B)), and(not(instance(F, C)), and(not(instance(F, D)), not(instance(F, E)))))), not(instance(F, A))), and(entails(and(exhaustiveDecomposition(A, B, C, D, E), and(instance(F, A), and(not(instance(F, C)), and(not(instance(F, D)), not(instance(F, E)))))), instance(F, B)), and(entails(and(exhaustiveDecomposition(A, B, C, D, E), and(instance(F, A), and(not(instance(F, B)), and(not(instance(F, D)), not(instance(F, E)))))), instance(F, C)), and(entails(and(exhaustiveDecomposition(A, B, C, D, E), and(instance(F, A), and(not(instance(F, B)), and(not(instance(F, C)), not(instance(F, E)))))), instance(F, D)), entails(and(exhaustiveDecomposition(A, B, C, D, E), and(instance(F, A), and(not(instance(F, B)), and(not(instance(F, C)), not(instance(F, D)))))), instance(F, E))))))), [domainV(F, []), domainV(E, [exhaustiveDecomposition:5, instance:2]), domainV(D, [exhaustiveDecomposition:4, instance:2]), domainV(C, [exhaustiveDecomposition:3, instance:2]), domainV(B, [exhaustiveDecomposition:2, instance:2]), domainV(A, [exhaustiveDecomposition:1, instance:2]), domainV(G, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(F)], ['CLASS1'=A, 'CLASS2'=B, 'CLASS3'=C, 'CLASS4'=D, 'CLASS5'=E, 'OBJ'=F], 'Merge', 'STRUCTURAL ONTOLOGY', 390, 'Anonymous', on).
mooCache(instance(disjointDecomposition, 'Predicate'), instance(disjointDecomposition, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 392, 'Anonymous', on).
mooCache(instance(disjointDecomposition, 'VariableArityRelation'), instance(disjointDecomposition, 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 394, 'Anonymous', on).
mooCache(domain(disjointDecomposition, 1, 'Class'), domain(disjointDecomposition, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 396, 'Anonymous', on).
mooCache(relatedInternalConcept(disjointDecomposition, exhaustiveDecomposition), relatedInternalConcept(disjointDecomposition, exhaustiveDecomposition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 398, 'Anonymous', on).
mooCache(relatedInternalConcept(disjointDecomposition, disjoint), relatedInternalConcept(disjointDecomposition, disjoint), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 400, 'Anonymous', on).
mooCache(documentation(disjointDecomposition, string('"A disjointDecomposition of a Class   C is a set of subclasses of C that are mutually disjoint."')), documentation(disjointDecomposition, string('"A disjointDecomposition of a Class   C is a set of subclasses of C that are mutually disjoint."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 402, 'Anonymous', on).
mooCache(forall(A, domain(disjointDecomposition, A, 'Class')), domain(disjointDecomposition, A, 'Class'), [domainV(A, [domain:2]), domainV(B, []), forall(A)], ['INT'=A], 'Merge', 'STRUCTURAL ONTOLOGY', 404, 'Anonymous', on).
mooCache(=>(disjointDecomposition(A, B, C), and(subclass(B, A), and(subclass(C, A), disjoint(B, C)))), and(and(entails(not(subclass(B, A)), not(disjointDecomposition(A, B, C))), entails(disjointDecomposition(A, B, C), subclass(B, A))), and(and(entails(not(subclass(C, A)), not(disjointDecomposition(A, B, C))), entails(disjointDecomposition(A, B, C), subclass(C, A))), and(entails(not(disjoint(B, C)), not(disjointDecomposition(A, B, C))), entails(disjointDecomposition(A, B, C), disjoint(B, C))))), [domainV(C, [disjoint:2, disjointDecomposition:3, subclass:1]), domainV(B, [disjoint:1, disjointDecomposition:2, subclass:1]), domainV(A, [disjointDecomposition:1, subclass:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['CLASS1'=A, 'CLASS2'=B, 'CLASS3'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 406, 'Anonymous', on).
mooCache(=>(disjointDecomposition(A, B, C, D), and(subclass(B, A), and(subclass(C, A), and(subclass(D, A), and(disjoint(B, C), and(disjoint(C, D), disjoint(B, D))))))), and(and(entails(not(subclass(B, A)), not(disjointDecomposition(A, B, C, D))), entails(disjointDecomposition(A, B, C, D), subclass(B, A))), and(and(entails(not(subclass(C, A)), not(disjointDecomposition(A, B, C, D))), entails(disjointDecomposition(A, B, C, D), subclass(C, A))), and(and(entails(not(subclass(D, A)), not(disjointDecomposition(A, B, C, D))), entails(disjointDecomposition(A, B, C, D), subclass(D, A))), and(and(entails(not(disjoint(B, C)), not(disjointDecomposition(A, B, C, D))), entails(disjointDecomposition(A, B, C, D), disjoint(B, C))), and(and(entails(not(disjoint(C, D)), not(disjointDecomposition(A, B, C, D))), entails(disjointDecomposition(A, B, C, D), disjoint(C, D))), and(entails(not(disjoint(B, D)), not(disjointDecomposition(A, B, C, D))), entails(disjointDecomposition(A, B, C, D), disjoint(B, D)))))))), [domainV(D, [disjoint:2, disjointDecomposition:4, subclass:1]), domainV(C, [disjoint:1, disjoint:2, disjointDecomposition:3, subclass:1]), domainV(B, [disjoint:1, disjointDecomposition:2, subclass:1]), domainV(A, [disjointDecomposition:1, subclass:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['CLASS1'=A, 'CLASS2'=B, 'CLASS3'=C, 'CLASS4'=D], 'Merge', 'STRUCTURAL ONTOLOGY', 408, 'Anonymous', on).
mooCache(=>(disjointDecomposition(A, B, C, D, E), and(subclass(B, A), and(subclass(C, A), and(subclass(D, A), and(subclass(E, A), and(disjoint(B, C), and(disjoint(C, D), and(disjoint(B, D), and(disjoint(E, D), and(disjoint(E, C), disjoint(E, B))))))))))), and(and(entails(not(subclass(B, A)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), subclass(B, A))), and(and(entails(not(subclass(C, A)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), subclass(C, A))), and(and(entails(not(subclass(D, A)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), subclass(D, A))), and(and(entails(not(subclass(E, A)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), subclass(E, A))), and(and(entails(not(disjoint(B, C)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), disjoint(B, C))), and(and(entails(not(disjoint(C, D)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), disjoint(C, D))), and(and(entails(not(disjoint(B, D)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), disjoint(B, D))), and(and(entails(not(disjoint(E, D)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), disjoint(E, D))), and(and(entails(not(disjoint(E, C)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), disjoint(E, C))), and(entails(not(disjoint(E, B)), not(disjointDecomposition(A, B, C, D, E))), entails(disjointDecomposition(A, B, C, D, E), disjoint(E, B)))))))))))), [domainV(E, [disjoint:1, disjointDecomposition:5, subclass:1]), domainV(D, [disjoint:2, disjointDecomposition:4, subclass:1]), domainV(C, [disjoint:1, disjoint:2, disjointDecomposition:3, subclass:1]), domainV(B, [disjoint:1, disjoint:2, disjointDecomposition:2, subclass:1]), domainV(A, [disjointDecomposition:1, subclass:2]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['CLASS1'=A, 'CLASS2'=B, 'CLASS3'=C, 'CLASS4'=D, 'CLASS5'=E], 'Merge', 'STRUCTURAL ONTOLOGY', 410, 'Anonymous', on).
mooCache(subrelation(partition, exhaustiveDecomposition), subrelation(partition, exhaustiveDecomposition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 412, 'Anonymous', on).
mooCache(subrelation(partition, disjointDecomposition), subrelation(partition, disjointDecomposition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 414, 'Anonymous', on).
mooCache(documentation(partition, string('"A partition of a class C is a set of   mutually disjoint classes (a subclass partition) which covers C.    Every instance of C is an instance of exactly one of the subclasses   in the partition."')), documentation(partition, string('"A partition of a class C is a set of   mutually disjoint classes (a subclass partition) which covers C.    Every instance of C is an instance of exactly one of the subclasses   in the partition."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 416, 'Anonymous', on).
mooCache(instance(singleValued, 'BinaryPredicate'), instance(singleValued, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 418, 'Anonymous', on).
mooCache(instance(singleValued, 'AsymmetricRelation'), instance(singleValued, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 420, 'Anonymous', on).
mooCache(domain(singleValued, 1, 'Predicate'), domain(singleValued, 1, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 422, 'Anonymous', on).
mooCache(domain(singleValued, 2, 'Integer'), domain(singleValued, 2, 'Integer'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 424, 'Anonymous', on).
mooCache(documentation(singleValued, string('"(singleValued ?REL ?INT) means   that the argument position of ?REL corresponding to ?INT is   single-valued, i.e. an assignment of values to the other argument   positions determines a unique value for the argument position   corresponding to ?INT."')), documentation(singleValued, string('"(singleValued ?REL ?INT) means   that the argument position of ?REL corresponding to ?INT is   single-valued, i.e. an assignment of values to the other argument   positions determines a unique value for the argument position   corresponding to ?INT."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 426, 'Anonymous', on).
mooCache(instance(relatedInternalConcept, 'BinaryPredicate'), instance(relatedInternalConcept, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 438, 'Anonymous', on).
mooCache(instance(relatedInternalConcept, 'EquivalenceRelation'), instance(relatedInternalConcept, 'EquivalenceRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 440, 'Anonymous', on).
mooCache(domain(relatedInternalConcept, 1, 'Entity'), domain(relatedInternalConcept, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 442, 'Anonymous', on).
mooCache(domain(relatedInternalConcept, 2, 'Entity'), domain(relatedInternalConcept, 2, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 444, 'Anonymous', on).
mooCache(documentation(relatedInternalConcept, string('"Means that the two arguments are   related concepts within the SUMO, i.e. there is a significant similarity   of meaning between them.  To indicate a meaning relation between a SUMO   concept and a concept from another source, use the Predicate   relatedExternalConcept."')), documentation(relatedInternalConcept, string('"Means that the two arguments are   related concepts within the SUMO, i.e. there is a significant similarity   of meaning between them.  To indicate a meaning relation between a SUMO   concept and a concept from another source, use the Predicate   relatedExternalConcept."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 446, 'Anonymous', on).
mooCache(instance(relatedExternalConcept, 'TernaryPredicate'), instance(relatedExternalConcept, 'TernaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 448, 'Anonymous', on).
mooCache(domain(relatedExternalConcept, 1, 'Entity'), domain(relatedExternalConcept, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 450, 'Anonymous', on).
mooCache(domain(relatedExternalConcept, 2, 'SymbolicString'), domain(relatedExternalConcept, 2, 'SymbolicString'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 452, 'Anonymous', on).
mooCache(domain(relatedExternalConcept, 3, 'Language'), domain(relatedExternalConcept, 3, 'Language'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 454, 'Anonymous', on).
mooCache(relatedInternalConcept(relatedExternalConcept, relatedInternalConcept), relatedInternalConcept(relatedExternalConcept, relatedInternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 456, 'Anonymous', on).
mooCache(documentation(relatedExternalConcept, string('"Used to signify a three-place   relation between a concept in an external knowledge source, a concept   in the SUMO, and the name of the other knowledge source."')), documentation(relatedExternalConcept, string('"Used to signify a three-place   relation between a concept in an external knowledge source, a concept   in the SUMO, and the name of the other knowledge source."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 458, 'Anonymous', on).
mooCache(subrelation(synonymousExternalConcept, relatedExternalConcept), subrelation(synonymousExternalConcept, relatedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 460, 'Anonymous', on).
mooCache(disjointRelation(synonymousExternalConcept, subsumedExternalConcept), disjointRelation(synonymousExternalConcept, subsumedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 462, 'Anonymous', on).
mooCache(disjointRelation(synonymousExternalConcept, subsumingExternalConcept), disjointRelation(synonymousExternalConcept, subsumingExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 464, 'Anonymous', on).
mooCache(documentation(synonymousExternalConcept, string('"(synonymousExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the   same meaning as ?STRING in ?LANGUAGE."')), documentation(synonymousExternalConcept, string('"(synonymousExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the   same meaning as ?STRING in ?LANGUAGE."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 466, 'Anonymous', on).
mooCache(subrelation(subsumingExternalConcept, relatedExternalConcept), subrelation(subsumingExternalConcept, relatedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 468, 'Anonymous', on).
mooCache(disjointRelation(subsumingExternalConcept, subsumedExternalConcept), disjointRelation(subsumingExternalConcept, subsumedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 470, 'Anonymous', on).
mooCache(documentation(subsumingExternalConcept, string('"(subsumingExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes   the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader   in meaning than ?STRING."')), documentation(subsumingExternalConcept, string('"(subsumingExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes   the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader   in meaning than ?STRING."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 472, 'Anonymous', on).
mooCache(subrelation(subsumedExternalConcept, relatedExternalConcept), subrelation(subsumedExternalConcept, relatedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 474, 'Anonymous', on).
mooCache(documentation(subsumedExternalConcept, string('"(subsumedExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed   by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower   in meaning than ?STRING."')), documentation(subsumedExternalConcept, string('"(subsumedExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed   by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower   in meaning than ?STRING."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 476, 'Anonymous', on).
mooCache(instance(name, 'BinaryPredicate'), instance(name, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 478, 'Anonymous', on).
mooCache(domain(name, 1, 'Entity'), domain(name, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 480, 'Anonymous', on).
mooCache(domain(name, 2, 'SymbolicString'), domain(name, 2, 'SymbolicString'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 482, 'Anonymous', on).
mooCache(documentation(name, string('"(name ?ENTITY ?STRING) means that the thing ?ENTITY   has the SymbolicString ?STRING as its name."')), documentation(name, string('"(name ?ENTITY ?STRING) means that the thing ?ENTITY   has the SymbolicString ?STRING as its name."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 484, 'Anonymous', on).
mooCache(instance(subAttribute, 'BinaryPredicate'), instance(subAttribute, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 486, 'Anonymous', on).
mooCache(instance(subAttribute, 'PartialOrderingRelation'), instance(subAttribute, 'PartialOrderingRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 488, 'Anonymous', on).
mooCache(domain(subAttribute, 1, 'Attribute'), domain(subAttribute, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 490, 'Anonymous', on).
mooCache(domain(subAttribute, 2, 'Attribute'), domain(subAttribute, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 492, 'Anonymous', on).
mooCache(disjointRelation(subAttribute, successorAttribute), disjointRelation(subAttribute, successorAttribute), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 494, 'Anonymous', on).
mooCache(documentation(subAttribute, string('"Means that the second argument can be   ascribed to everything which has the first argument ascribed to it."')), documentation(subAttribute, string('"Means that the second argument can be   ascribed to everything which has the first argument ascribed to it."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 496, 'Anonymous', on).
mooCache(<=>(subAttribute(A, B), forall(C, =>(attribute(C, A), attribute(C, B)))), and(and(entails(not(subAttribute(A, B)), attribute(C, A)), and(entails(and(not(subAttribute(A, B)), '$existential'(C, '?OBJ', not(=>(attribute('?OBJ', A), attribute('?OBJ', B))))), not(attribute(C, B))), entails(or(not(attribute(C, A)), attribute(C, B)), subAttribute(A, B)))), and(entails(and(attribute(C, A), not(attribute(C, B))), not(subAttribute(A, B))), and(entails(and(and(subAttribute(A, B), not(attribute(C, B))), '$existential'(C, '?OBJ', not(=>(attribute('?OBJ', A), attribute('?OBJ', B))))), not(attribute(C, A))), entails(and(subAttribute(A, B), attribute(C, A)), attribute(C, B))))), [domainV(C, [attribute:1]), domainV(B, [attribute:2, subAttribute:2]), domainV(A, [attribute:2, subAttribute:1]), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(C, '$existential'('?OBJ', not(=>(attribute('?OBJ', A), attribute('?OBJ', B)))))], ['ATTR1'=A, 'ATTR2'=B, 'OBJ'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 498, 'Anonymous', on).
mooCache(=>(and(subAttribute(A, B), instance(B, C)), instance(A, C)), and(entails(and(subAttribute(A, B), instance(B, C)), instance(A, C)), and(entails(and(not(instance(A, C)), instance(B, C)), not(subAttribute(A, B))), entails(and(not(instance(A, C)), subAttribute(A, B)), not(instance(B, C))))), [domainV(C, [instance:2]), domainV(B, [subAttribute:2]), domainV(A, [subAttribute:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['ATTR1'=A, 'ATTR2'=B, 'CLASS'=C], 'Merge', 'STRUCTURAL ONTOLOGY', 500, 'Anonymous', on).
mooCache(instance(successorAttribute, 'BinaryPredicate'), instance(successorAttribute, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 502, 'Anonymous', on).
mooCache(instance(successorAttribute, 'AsymmetricRelation'), instance(successorAttribute, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 504, 'Anonymous', on).
mooCache(domain(successorAttribute, 1, 'Attribute'), domain(successorAttribute, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 506, 'Anonymous', on).
mooCache(domain(successorAttribute, 2, 'Attribute'), domain(successorAttribute, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 508, 'Anonymous', on).
mooCache(documentation(successorAttribute, string('"(successorAttribute ?ATTR1 ?ATTR2)   means that ?ATTR2 is the attribute that comes immediately after ?ATTR1   on the scale that they share."')), documentation(successorAttribute, string('"(successorAttribute ?ATTR1 ?ATTR2)   means that ?ATTR2 is the attribute that comes immediately after ?ATTR1   on the scale that they share."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 510, 'Anonymous', on).
mooCache(instance(successorAttributeClosure, 'BinaryPredicate'), instance(successorAttributeClosure, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 512, 'Anonymous', on).
mooCache(instance(successorAttributeClosure, 'TransitiveRelation'), instance(successorAttributeClosure, 'TransitiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 514, 'Anonymous', on).
mooCache(instance(successorAttributeClosure, 'IrreflexiveRelation'), instance(successorAttributeClosure, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 516, 'Anonymous', on).
mooCache(domain(successorAttributeClosure, 1, 'Attribute'), domain(successorAttributeClosure, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 518, 'Anonymous', on).
mooCache(domain(successorAttributeClosure, 2, 'Attribute'), domain(successorAttributeClosure, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 520, 'Anonymous', on).
mooCache(relatedInternalConcept(successorAttributeClosure, successorAttribute), relatedInternalConcept(successorAttributeClosure, successorAttribute), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 522, 'Anonymous', on).
mooCache(documentation(successorAttributeClosure, string('"The transitive closure of   successorAttribute.  (successorAttributeClosure ?ATTR1 ?ATTR2) means   that there is a chain of successorAttribute assertions connecting   ?ATTR1 and ?ATTR2."')), documentation(successorAttributeClosure, string('"The transitive closure of   successorAttribute.  (successorAttributeClosure ?ATTR1 ?ATTR2) means   that there is a chain of successorAttribute assertions connecting   ?ATTR1 and ?ATTR2."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 524, 'Anonymous', on).
mooCache(=>(successorAttribute(A, B), successorAttributeClosure(A, B)), and(entails(not(successorAttributeClosure(A, B)), not(successorAttribute(A, B))), entails(successorAttribute(A, B), successorAttributeClosure(A, B))), [domainV(B, [successorAttribute:2, successorAttributeClosure:2]), domainV(A, [successorAttribute:1, successorAttributeClosure:1]), domainV(C, []), forall(A), forall(B)], ['ATTR1'=A, 'ATTR2'=B], 'Merge', 'STRUCTURAL ONTOLOGY', 526, 'Anonymous', on).
mooCache(instance(and, 'SententialOperator'), instance(and, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 528, 'Anonymous', on).
mooCache(domain(and, 1, 'Formula'), domain(and, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 530, 'Anonymous', on).
mooCache(domain(and, 2, 'Formula'), domain(and, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 532, 'Anonymous', on).
mooCache(documentation(and, string('"The truth-functional connective of conjunction."')), documentation(and, string('"The truth-functional connective of conjunction."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 534, 'Anonymous', on).
mooCache(instance(or, 'SententialOperator'), instance(or, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 536, 'Anonymous', on).
mooCache(domain(or, 1, 'Formula'), domain(or, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 538, 'Anonymous', on).
mooCache(domain(or, 2, 'Formula'), domain(or, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 540, 'Anonymous', on).
mooCache(documentation(or, string('"The truth-functional connective of disjunction."')), documentation(or, string('"The truth-functional connective of disjunction."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 542, 'Anonymous', on).
mooCache(instance(=>, 'SententialOperator'), instance(=>, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 544, 'Anonymous', on).
mooCache(domain(=>, 1, 'Formula'), domain(=>, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 546, 'Anonymous', on).
mooCache(domain(=>, 2, 'Formula'), domain(=>, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 548, 'Anonymous', on).
mooCache(documentation(=>, string('"The truth-functional connective of implication."')), documentation(=>, string('"The truth-functional connective of implication."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 550, 'Anonymous', on).
mooCache(instance(<=>, 'SententialOperator'), instance(<=>, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 552, 'Anonymous', on).
mooCache(domain(<=>, 1, 'Formula'), domain(<=>, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 554, 'Anonymous', on).
mooCache(domain(<=>, 2, 'Formula'), domain(<=>, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 556, 'Anonymous', on).
mooCache(documentation(<=>, string('"The truth-functional connective of bi-implication."')), documentation(<=>, string('"The truth-functional connective of bi-implication."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 558, 'Anonymous', on).
mooCache(instance(not, 'SententialOperator'), instance(not, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 560, 'Anonymous', on).
mooCache(domain(not, 1, 'Formula'), domain(not, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 562, 'Anonymous', on).
mooCache(documentation(not, string('"The truth-functional connective of negation."')), documentation(not, string('"The truth-functional connective of negation."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 564, 'Anonymous', on).
mooCache(instance(entails, 'SententialOperator'), instance(entails, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 566, 'Anonymous', on).
mooCache(domain(entails, 1, 'Formula'), domain(entails, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 568, 'Anonymous', on).
mooCache(domain(entails, 2, 'Formula'), domain(entails, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 570, 'Anonymous', on).
mooCache(documentation(entails, string('"The operator of logical entailment.  (entails   ?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1   by means of the proof theory of SUO-KIF."')), documentation(entails, string('"The operator of logical entailment.  (entails   ?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1   by means of the proof theory of SUO-KIF."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 572, 'Anonymous', on).
mooCache(instance('AssignmentFn', 'Function'), instance('AssignmentFn', 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 574, 'Anonymous', on).
mooCache(instance('AssignmentFn', 'VariableArityRelation'), instance('AssignmentFn', 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 576, 'Anonymous', on).
mooCache(domain('AssignmentFn', 1, 'Function'), domain('AssignmentFn', 1, 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 578, 'Anonymous', on).
mooCache(range('AssignmentFn', 'Entity'), range('AssignmentFn', 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 580, 'Anonymous', on).
mooCache(documentation('AssignmentFn', string('"If F is a function with a value for the   objects denoted by N1,..., NK, then the term (AssignmentFn F N1 ... NK)   denotes the value of applying F to the objects denoted by N1,..., NK.    Otherwise, the value is undefined."')), documentation('AssignmentFn', string('"If F is a function with a value for the   objects denoted by N1,..., NK, then the term (AssignmentFn F N1 ... NK)   denotes the value of applying F to the objects denoted by N1,..., NK.    Otherwise, the value is undefined."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 582, 'Anonymous', on).
mooCache(instance(holds, 'Predicate'), instance(holds, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 584, 'Anonymous', on).
mooCache(instance(holds, 'VariableArityRelation'), instance(holds, 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 586, 'Anonymous', on).
mooCache(domain(holds, 1, 'Relation'), domain(holds, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 588, 'Anonymous', on).
mooCache(documentation(holds, string('"(holds P N1 ... NK) is true just in case   the tuple of objects denoted by N1,..., NK is an element of   the Relation P."')), documentation(holds, string('"(holds P N1 ... NK) is true just in case   the tuple of objects denoted by N1,..., NK is an element of   the Relation P."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 590, 'Anonymous', on).
mooCache(instance('PowerSetFn', 'UnaryFunction'), instance('PowerSetFn', 'UnaryFunction'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 596, 'Anonymous', on).
mooCache(domain('PowerSetFn', 1, 'Class'), domain('PowerSetFn', 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 598, 'Anonymous', on).
mooCache(rangeSubclass('PowerSetFn', 'Class'), rangeSubclass('PowerSetFn', 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 600, 'Anonymous', on).
mooCache(documentation('PowerSetFn', string('"(PowerSetFn ?CLASS) maps the Class   ?CLASS to the Class of all subclasses of ?CLASS."')), documentation('PowerSetFn', string('"(PowerSetFn ?CLASS) maps the Class   ?CLASS to the Class of all subclasses of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 602, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'BASE ONTOLOGY', 614, 'Anonymous', on).
mooCache(documentation('Entity', string('"The universal class of individuals.  This is the root   node of the ontology."')), documentation('Entity', string('"The universal class of individuals.  This is the root   node of the ontology."')), [], [], 'Merge', 'BASE ONTOLOGY', 621, 'Anonymous', on).
mooCache(forall(A, instance(A, 'Entity')), instance(A, 'Entity'), [domainV(A, ['$instanceof':'Entity']), domainV(B, []), forall(A)], ['THING'=A], 'Merge', 'BASE ONTOLOGY', 625, 'Anonymous', on).
mooCache(exists(A, instance(A, 'Entity')), entails('$existential'(A, '?THING', instance('?THING', 'Entity')), instance(A, 'Entity')), [domainV(A, ['$instanceof':'Entity']), domainV(B, []), replaceConsVar(A, '$existential'('?THING', instance('?THING', 'Entity')))], ['THING'=A], 'Merge', 'BASE ONTOLOGY', 633, 'Anonymous', on).
mooCache(<=>(instance(A, 'Class'), subclass(A, 'Entity')), and(and(entails(instance(A, 'Class'), subclass(A, 'Entity')), entails(not(subclass(A, 'Entity')), not(instance(A, 'Class')))), and(entails(subclass(A, 'Entity'), instance(A, 'Class')), entails(not(instance(A, 'Class')), not(subclass(A, 'Entity'))))), [domainV(A, ['$instanceof':'Class', subclass:1]), domainV(B, []), forall(A)], ['CLASS'=A], 'Merge', 'BASE ONTOLOGY', 637, 'Anonymous', on).
mooCache(subclass('Physical', 'Entity'), subclass('Physical', 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 639, 'Anonymous', on).
mooCache(documentation('Physical', string('"An entity that has a location in space-time.    Note that locations are themselves understood to have a location in   space-time"')), documentation('Physical', string('"An entity that has a location in space-time.    Note that locations are themselves understood to have a location in   space-time"')), [], [], 'Merge', 'BASE ONTOLOGY', 641, 'Anonymous', on).
mooCache(<=>(instance(A, 'Physical'), exists(B, exists(C, and(located(A, C), time(A, B))))), and(and(entails(and(instance(A, 'Physical'), '$existential'(C, '?LOC', and(located(A, '?LOC'), time(A, B)))), located(A, C)), and(entails(and(and(instance(A, 'Physical'), '$existential'(B, '?TIME', exists(C, and(located(A, C), time(A, '?TIME'))))), '$existential'(C, '?LOC', and(located(A, '?LOC'), time(A, B)))), time(A, B)), entails(or(not(located(A, C)), not(time(A, B))), not(instance(A, 'Physical'))))), and(entails(and(and(located(A, C), time(A, B)), '$existential'(C, '?LOC', and(located(A, '?LOC'), time(A, B)))), instance(A, 'Physical')), and(entails(and(not(instance(A, 'Physical')), time(A, B)), not(located(A, C))), entails(and(not(instance(A, 'Physical')), located(A, C)), not(time(A, B)))))), [domainV(C, [located:2]), domainV(B, [time:2]), domainV(A, ['$instanceof':'Physical', located:1, time:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?TIME', exists(C, and(located(A, C), time(A, '?TIME'))))), replaceConsVar(C, '$existential'('?LOC', and(located(A, '?LOC'), time(A, B)))), forall(B), forall(C)], ['PHYS'=A, 'LOC'=C, 'TIME'=B], 'Merge', 'BASE ONTOLOGY', 645, 'Anonymous', on).
mooCache(subclass('Object', 'Physical'), subclass('Object', 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 647, 'Anonymous', on).
mooCache(disjoint('Object', 'Process'), disjoint('Object', 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 649, 'Anonymous', on).
mooCache(documentation('Object', string('"Corresponds roughly to the class of ordinary   physical objects. An Object is thought of as continuing through time,   but at any particular time is all there is at that time, in contrast to   something that is thought of as being divided into stages (contrast Process).   Examples include normal physical objects, geographical regions, and   locations of Processes.  The formal definition is that all the parts of   an Object are present at the same time that the Object is; in other   words, an Object cannot have \'parts\' which are separated in time, such   as the first and second halves of a football game.  Note that the parts   of an Object may change from time to time, and that every Object   occupies exactly the same space and time as a Process (its lifespan).    In a 4D ontology, an Object is something whose spatiotemporal extent   is thought of as dividing into spatial parts roughly parallel to the   time-axis."')), documentation('Object', string('"Corresponds roughly to the class of ordinary   physical objects. An Object is thought of as continuing through time,   but at any particular time is all there is at that time, in contrast to   something that is thought of as being divided into stages (contrast Process).   Examples include normal physical objects, geographical regions, and   locations of Processes.  The formal definition is that all the parts of   an Object are present at the same time that the Object is; in other   words, an Object cannot have \'parts\' which are separated in time, such   as the first and second halves of a football game.  Note that the parts   of an Object may change from time to time, and that every Object   occupies exactly the same space and time as a Process (its lifespan).    In a 4D ontology, an Object is something whose spatiotemporal extent   is thought of as dividing into spatial parts roughly parallel to the   time-axis."')), [], [], 'Merge', 'BASE ONTOLOGY', 651, 'Anonymous', on).
mooCache(subclass('SelfConnectedObject', 'Object'), subclass('SelfConnectedObject', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 653, 'Anonymous', on).
mooCache(documentation('SelfConnectedObject', string('"A SelfConnectedObject is any   Object that does not consist of two or more disconnected parts."')), documentation('SelfConnectedObject', string('"A SelfConnectedObject is any   Object that does not consist of two or more disconnected parts."')), [], [], 'Merge', 'BASE ONTOLOGY', 655, 'Anonymous', on).
mooCache(instance(part, 'BinaryPredicate'), instance(part, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 657, 'Anonymous', on).
mooCache(instance(part, 'SpatialRelation'), instance(part, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 659, 'Anonymous', on).
mooCache(instance(part, 'PartialOrderingRelation'), instance(part, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 661, 'Anonymous', on).
mooCache(domain(part, 1, 'SelfConnectedObject'), domain(part, 1, 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 663, 'Anonymous', on).
mooCache(domain(part, 2, 'SelfConnectedObject'), domain(part, 2, 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 665, 'Anonymous', on).
mooCache(documentation(part, string('"The basic mereological relation.  All other   mereological relations are defined in terms of this one.    (part ?PART ?WHOLE) simply means that the Object ?PART is part  of the Object ?WHOLE.  Note that, since part is a   ReflexiveRelation, every Object is a part of itself."')), documentation(part, string('"The basic mereological relation.  All other   mereological relations are defined in terms of this one.    (part ?PART ?WHOLE) simply means that the Object ?PART is part  of the Object ?WHOLE.  Note that, since part is a   ReflexiveRelation, every Object is a part of itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 667, 'Anonymous', on).
mooCache(=>(instance(A, 'SelfConnectedObject'), exists(B, part(B, A))), and(entails(not(part(B, A)), not(instance(A, 'SelfConnectedObject'))), entails(and(instance(A, 'SelfConnectedObject'), '$existential'(B, '?PART', part('?PART', A))), part(B, A))), [domainV(B, [part:1]), domainV(A, ['$instanceof':'SelfConnectedObject', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PART', part('?PART', A)))], ['OBJ'=A, 'PART'=B], 'Merge', 'BASE ONTOLOGY', 669, 'Anonymous', on).
mooCache(=>(and(part(A, B), part(B, A)), equal(A, B)), and(entails(and(part(A, B), part(B, A)), equal(A, B)), and(entails(and(not(equal(A, B)), part(B, A)), not(part(A, B))), entails(and(not(equal(A, B)), part(A, B)), not(part(B, A))))), [domainV(B, [part:1, part:2]), domainV(A, [part:1, part:2]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'BASE ONTOLOGY', 671, 'Anonymous', on).
mooCache(instance(properPart, 'AsymmetricRelation'), instance(properPart, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 673, 'Anonymous', on).
mooCache(instance(properPart, 'TransitiveRelation'), instance(properPart, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 675, 'Anonymous', on).
mooCache(subrelation(properPart, part), subrelation(properPart, part), [], [], 'Merge', 'BASE ONTOLOGY', 677, 'Anonymous', on).
mooCache(documentation(properPart, string('"(properPart ?OBJ1 ?OBJ2) means that   ?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a   TransitiveRelation and AsymmetricRelation (hence an   IrreflexiveRelation)."')), documentation(properPart, string('"(properPart ?OBJ1 ?OBJ2) means that   ?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a   TransitiveRelation and AsymmetricRelation (hence an   IrreflexiveRelation)."')), [], [], 'Merge', 'BASE ONTOLOGY', 679, 'Anonymous', on).
mooCache(<=>(properPart(A, B), and(part(A, B), not(part(B, A)))), and(and(entails(properPart(A, B), part(A, B)), and(entails(properPart(A, B), not(part(B, A))), entails(or(not(part(A, B)), part(B, A)), not(properPart(A, B))))), and(entails(and(part(A, B), not(part(B, A))), properPart(A, B)), and(entails(and(not(properPart(A, B)), not(part(B, A))), not(part(A, B))), entails(and(not(properPart(A, B)), part(A, B)), part(B, A))))), [domainV(B, [part:1, part:2, properPart:2]), domainV(A, [part:1, part:2, properPart:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'BASE ONTOLOGY', 681, 'Anonymous', on).
mooCache(subrelation(piece, part), subrelation(piece, part), [], [], 'Merge', 'BASE ONTOLOGY', 683, 'Anonymous', on).
mooCache(domain(piece, 1, 'Substance'), domain(piece, 1, 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 685, 'Anonymous', on).
mooCache(domain(piece, 2, 'Substance'), domain(piece, 2, 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 687, 'Anonymous', on).
mooCache(documentation(piece, string('"A specialized common sense notion of part for   arbitrary parts of Substances.  Quasi-synonyms are: chunk, hunk, bit,   etc.  Compare component, the other subrelation of part."')), documentation(piece, string('"A specialized common sense notion of part for   arbitrary parts of Substances.  Quasi-synonyms are: chunk, hunk, bit,   etc.  Compare component, the other subrelation of part."')), [], [], 'Merge', 'BASE ONTOLOGY', 689, 'Anonymous', on).
mooCache(=>(piece(A, B), forall(C, =>(instance(A, C), instance(B, C)))), and(entails(and(instance(A, C), not(instance(B, C))), not(piece(A, B))), and(entails(and(piece(A, B), not(instance(B, C))), not(instance(A, C))), entails(and(piece(A, B), instance(A, C)), instance(B, C)))), [domainV(C, [instance:2]), domainV(B, [piece:2]), domainV(A, [piece:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['SUBSTANCE1'=A, 'SUBSTANCE2'=B, 'CLASS'=C], 'Merge', 'BASE ONTOLOGY', 691, 'Anonymous', on).
mooCache(subrelation(component, part), subrelation(component, part), [], [], 'Merge', 'BASE ONTOLOGY', 693, 'Anonymous', on).
mooCache(domain(component, 1, 'CorpuscularObject'), domain(component, 1, 'CorpuscularObject'), [], [], 'Merge', 'BASE ONTOLOGY', 695, 'Anonymous', on).
mooCache(domain(component, 2, 'CorpuscularObject'), domain(component, 2, 'CorpuscularObject'), [], [], 'Merge', 'BASE ONTOLOGY', 697, 'Anonymous', on).
mooCache(documentation(component, string('"A specialized common sense notion of part   for heterogeneous parts of complexes. (component ?COMPONENT ?WHOLE)   means that ?COMPONENT is a component of ?WHOLE. Examples of component   include the doors and walls of a house, the states or provinces of a   country, or the limbs and organs of an animal.  Compare piece, which   is also a subrelation of part."')), documentation(component, string('"A specialized common sense notion of part   for heterogeneous parts of complexes. (component ?COMPONENT ?WHOLE)   means that ?COMPONENT is a component of ?WHOLE. Examples of component   include the doors and walls of a house, the states or provinces of a   country, or the limbs and organs of an animal.  Compare piece, which   is also a subrelation of part."')), [], [], 'Merge', 'BASE ONTOLOGY', 699, 'Anonymous', on).
mooCache(instance(material, 'BinaryPredicate'), instance(material, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 701, 'Anonymous', on).
mooCache(domainSubclass(material, 1, 'Substance'), domainSubclass(material, 1, 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 703, 'Anonymous', on).
mooCache(domain(material, 2, 'CorpuscularObject'), domain(material, 2, 'CorpuscularObject'), [], [], 'Merge', 'BASE ONTOLOGY', 705, 'Anonymous', on).
mooCache(documentation(material, string('"(material ?SUBSTANCE ?OBJECT) means that   ?OBJECT is structurally made up in part of ?SUBSTANCE. This relation   encompasses the concepts of \'composed of\', \'made of\', and \'formed of\'.    For example, plastic is a material of my computer monitor.  Compare   part and its subrelations, viz component and piece."')), documentation(material, string('"(material ?SUBSTANCE ?OBJECT) means that   ?OBJECT is structurally made up in part of ?SUBSTANCE. This relation   encompasses the concepts of \'composed of\', \'made of\', and \'formed of\'.    For example, plastic is a material of my computer monitor.  Compare   part and its subrelations, viz component and piece."')), [], [], 'Merge', 'BASE ONTOLOGY', 707, 'Anonymous', on).
mooCache(subclass('Substance', 'SelfConnectedObject'), subclass('Substance', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 709, 'Anonymous', on).
mooCache(documentation('Substance', string('"An Object in which every part is similar to   every other in every relevant respect.  More precisely, something is a   Substance when it has only arbitrary pieces as parts - any parts have   properties which are similar to those of the whole.  Note that a Substance   may nonetheless have physical properties that vary.  For example, the   temperature, chemical constitution, density, etc. may change from one part   to another.  An example would be a body of water."')), documentation('Substance', string('"An Object in which every part is similar to   every other in every relevant respect.  More precisely, something is a   Substance when it has only arbitrary pieces as parts - any parts have   properties which are similar to those of the whole.  Note that a Substance   may nonetheless have physical properties that vary.  For example, the   temperature, chemical constitution, density, etc. may change from one part   to another.  An example would be a body of water."')), [], [], 'Merge', 'BASE ONTOLOGY', 711, 'Anonymous', on).
mooCache(=>(and(subclass(A, 'Substance'), and(instance(B, A), part(C, B))), instance(C, A)), and(entails(and(subclass(A, 'Substance'), and(instance(B, A), part(C, B))), instance(C, A)), and(entails(and(not(instance(C, A)), and(instance(B, A), part(C, B))), not(subclass(A, 'Substance'))), and(entails(and(not(instance(C, A)), and(subclass(A, 'Substance'), part(C, B))), not(instance(B, A))), entails(and(not(instance(C, A)), and(subclass(A, 'Substance'), instance(B, A))), not(part(C, B)))))), [domainV(C, [part:1]), domainV(B, [part:2]), domainV(A, [instance:2, subclass:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJECTTYPE'=A, 'OBJECT'=B, 'PART'=C], 'Merge', 'BASE ONTOLOGY', 713, 'Anonymous', on).
mooCache(subclass('PureSubstance', 'Substance'), subclass('PureSubstance', 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 715, 'Anonymous', on).
mooCache(partition('PureSubstance', 'CompoundSubstance', 'ElementalSubstance'), partition('PureSubstance', 'CompoundSubstance', 'ElementalSubstance'), [], [], 'Merge', 'BASE ONTOLOGY', 717, 'Anonymous', on).
mooCache(documentation('PureSubstance', string('"The Class of Substances with constant   composition.  A PureSubstance can be either an element (ElementalSubstance)   or a compound of elements (CompoundSubstance).  Examples: Table salt   (sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O),   iron (Fe), copper (Cu), and oxygen (O_2)."')), documentation('PureSubstance', string('"The Class of Substances with constant   composition.  A PureSubstance can be either an element (ElementalSubstance)   or a compound of elements (CompoundSubstance).  Examples: Table salt   (sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O),   iron (Fe), copper (Cu), and oxygen (O_2)."')), [], [], 'Merge', 'BASE ONTOLOGY', 719, 'Anonymous', on).
mooCache(subclass('ElementalSubstance', 'PureSubstance'), subclass('ElementalSubstance', 'PureSubstance'), [], [], 'Merge', 'BASE ONTOLOGY', 721, 'Anonymous', on).
mooCache(documentation('ElementalSubstance', string('"The Class of PureSubstances that   cannot be separated into two or more Substances by ordinary chemical   (or physical) means. This excludes nuclear reactions. ElementalSubstances   are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu),   and oxygen (O_2).  ElementalSubstances are the simplest   PureSubstances."')), documentation('ElementalSubstance', string('"The Class of PureSubstances that   cannot be separated into two or more Substances by ordinary chemical   (or physical) means. This excludes nuclear reactions. ElementalSubstances   are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu),   and oxygen (O_2).  ElementalSubstances are the simplest   PureSubstances."')), [], [], 'Merge', 'BASE ONTOLOGY', 723, 'Anonymous', on).
mooCache(subclass('CompoundSubstance', 'PureSubstance'), subclass('CompoundSubstance', 'PureSubstance'), [], [], 'Merge', 'BASE ONTOLOGY', 725, 'Anonymous', on).
mooCache(documentation('CompoundSubstance', string('"The Class of Substances that contain   two or more elements (ElementalSubstances), in definite proportion by weight.   The composition of a pure compound will be invariant, regardless of the method   of preparation. Compounds are composed of more than one kind of atom (element).   The term molecule is often used for the smallest unit of a compound that still   retains all of the properties of the compound.  Examples: Table salt (sodium   chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). "')), documentation('CompoundSubstance', string('"The Class of Substances that contain   two or more elements (ElementalSubstances), in definite proportion by weight.   The composition of a pure compound will be invariant, regardless of the method   of preparation. Compounds are composed of more than one kind of atom (element).   The term molecule is often used for the smallest unit of a compound that still   retains all of the properties of the compound.  Examples: Table salt (sodium   chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). "')), [], [], 'Merge', 'BASE ONTOLOGY', 727, 'Anonymous', on).
mooCache(=>(instance(A, 'CompoundSubstance'), exists(B, exists(C, and(instance(C, 'ElementalSubstance'), and(instance(B, 'ElementalSubstance'), and(not(equal(C, B)), and(piece(C, A), piece(B, A)))))))), and(and(entails(not(instance(C, 'ElementalSubstance')), not(instance(A, 'CompoundSubstance'))), entails(and(instance(A, 'CompoundSubstance'), '$existential'(C, '?ELEMENT1', and(instance('?ELEMENT1', 'ElementalSubstance'), and(instance(B, 'ElementalSubstance'), and(not(equal('?ELEMENT1', B)), and(piece('?ELEMENT1', A), piece(B, A))))))), instance(C, 'ElementalSubstance'))), and(and(entails(not(instance(B, 'ElementalSubstance')), not(instance(A, 'CompoundSubstance'))), entails(and(and(instance(A, 'CompoundSubstance'), '$existential'(B, '?ELEMENT2', exists(C, and(instance(C, 'ElementalSubstance'), and(instance('?ELEMENT2', 'ElementalSubstance'), and(not(equal(C, '?ELEMENT2')), and(piece(C, A), piece('?ELEMENT2', A)))))))), '$existential'(C, '?ELEMENT1', and(instance('?ELEMENT1', 'ElementalSubstance'), and(instance(B, 'ElementalSubstance'), and(not(equal('?ELEMENT1', B)), and(piece('?ELEMENT1', A), piece(B, A))))))), instance(B, 'ElementalSubstance'))), and(and(entails(equal(C, B), not(instance(A, 'CompoundSubstance'))), entails(instance(A, 'CompoundSubstance'), not(equal(C, B)))), and(and(entails(not(piece(C, A)), not(instance(A, 'CompoundSubstance'))), entails(and(instance(A, 'CompoundSubstance'), '$existential'(C, '?ELEMENT1', and(instance('?ELEMENT1', 'ElementalSubstance'), and(instance(B, 'ElementalSubstance'), and(not(equal('?ELEMENT1', B)), and(piece('?ELEMENT1', A), piece(B, A))))))), piece(C, A))), and(entails(not(piece(B, A)), not(instance(A, 'CompoundSubstance'))), entails(and(and(instance(A, 'CompoundSubstance'), '$existential'(B, '?ELEMENT2', exists(C, and(instance(C, 'ElementalSubstance'), and(instance('?ELEMENT2', 'ElementalSubstance'), and(not(equal(C, '?ELEMENT2')), and(piece(C, A), piece('?ELEMENT2', A)))))))), '$existential'(C, '?ELEMENT1', and(instance('?ELEMENT1', 'ElementalSubstance'), and(instance(B, 'ElementalSubstance'), and(not(equal('?ELEMENT1', B)), and(piece('?ELEMENT1', A), piece(B, A))))))), piece(B, A))))))), [domainV(C, ['$instanceof':'ElementalSubstance', piece:1]), domainV(B, ['$instanceof':'ElementalSubstance', piece:1]), domainV(A, ['$instanceof':'CompoundSubstance', piece:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?ELEMENT2', exists(C, and(instance(C, 'ElementalSubstance'), and(instance('?ELEMENT2', 'ElementalSubstance'), and(not(equal(C, '?ELEMENT2')), and(piece(C, A), piece('?ELEMENT2', A)))))))), replaceConsVar(C, '$existential'('?ELEMENT1', and(instance('?ELEMENT1', 'ElementalSubstance'), and(instance(B, 'ElementalSubstance'), and(not(equal('?ELEMENT1', B)), and(piece('?ELEMENT1', A), piece(B, A)))))))], ['COMPOUND'=A, 'ELEMENT1'=C, 'ELEMENT2'=B], 'Merge', 'BASE ONTOLOGY', 729, 'Anonymous', on).
mooCache(subclass('Mixture', 'Substance'), subclass('Mixture', 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 731, 'Anonymous', on).
mooCache(documentation('Mixture', string('"A Mixture is two or more PureSubstances,   combined in varying proportions - each retaining its own specific properties.   The components of a Mixture can be separated by physical means, i.e. without   the making and breaking of chemical bonds. Examples: Air, table salt thoroughly   dissolved in water, milk, wood, and concrete. "')), documentation('Mixture', string('"A Mixture is two or more PureSubstances,   combined in varying proportions - each retaining its own specific properties.   The components of a Mixture can be separated by physical means, i.e. without   the making and breaking of chemical bonds. Examples: Air, table salt thoroughly   dissolved in water, milk, wood, and concrete. "')), [], [], 'Merge', 'BASE ONTOLOGY', 733, 'Anonymous', on).
mooCache(=>(instance(A, 'Mixture'), exists(B, exists(C, and(subclass(C, 'PureSubstance'), and(subclass(B, 'PureSubstance'), and(not(equal(C, B)), and(material(C, A), material(B, A)))))))), and(and(entails(not(subclass(C, 'PureSubstance')), not(instance(A, 'Mixture'))), entails(and(instance(A, 'Mixture'), '$existential'(C, '?PURE1', and(subclass('?PURE1', 'PureSubstance'), and(subclass(B, 'PureSubstance'), and(not(equal('?PURE1', B)), and(material('?PURE1', A), material(B, A))))))), subclass(C, 'PureSubstance'))), and(and(entails(not(subclass(B, 'PureSubstance')), not(instance(A, 'Mixture'))), entails(and(and(instance(A, 'Mixture'), '$existential'(B, '?PURE2', exists(C, and(subclass(C, 'PureSubstance'), and(subclass('?PURE2', 'PureSubstance'), and(not(equal(C, '?PURE2')), and(material(C, A), material('?PURE2', A)))))))), '$existential'(C, '?PURE1', and(subclass('?PURE1', 'PureSubstance'), and(subclass(B, 'PureSubstance'), and(not(equal('?PURE1', B)), and(material('?PURE1', A), material(B, A))))))), subclass(B, 'PureSubstance'))), and(and(entails(equal(C, B), not(instance(A, 'Mixture'))), entails(instance(A, 'Mixture'), not(equal(C, B)))), and(and(entails(not(material(C, A)), not(instance(A, 'Mixture'))), entails(and(instance(A, 'Mixture'), '$existential'(C, '?PURE1', and(subclass('?PURE1', 'PureSubstance'), and(subclass(B, 'PureSubstance'), and(not(equal('?PURE1', B)), and(material('?PURE1', A), material(B, A))))))), material(C, A))), and(entails(not(material(B, A)), not(instance(A, 'Mixture'))), entails(and(and(instance(A, 'Mixture'), '$existential'(B, '?PURE2', exists(C, and(subclass(C, 'PureSubstance'), and(subclass('?PURE2', 'PureSubstance'), and(not(equal(C, '?PURE2')), and(material(C, A), material('?PURE2', A)))))))), '$existential'(C, '?PURE1', and(subclass('?PURE1', 'PureSubstance'), and(subclass(B, 'PureSubstance'), and(not(equal('?PURE1', B)), and(material('?PURE1', A), material(B, A))))))), material(B, A))))))), [domainV(C, [material:1, subclass:1]), domainV(B, [material:1, subclass:1]), domainV(A, ['$instanceof':'Mixture', material:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PURE2', exists(C, and(subclass(C, 'PureSubstance'), and(subclass('?PURE2', 'PureSubstance'), and(not(equal(C, '?PURE2')), and(material(C, A), material('?PURE2', A)))))))), replaceConsVar(C, '$existential'('?PURE1', and(subclass('?PURE1', 'PureSubstance'), and(subclass(B, 'PureSubstance'), and(not(equal('?PURE1', B)), and(material('?PURE1', A), material(B, A)))))))], ['MIXTURE'=A, 'PURE1'=C, 'PURE2'=B], 'Merge', 'BASE ONTOLOGY', 735, 'Anonymous', on).
mooCache(subclass('Solution', 'Mixture'), subclass('Solution', 'Mixture'), [], [], 'Merge', 'BASE ONTOLOGY', 737, 'Anonymous', on).
mooCache(documentation('Solution', string('"A homogenous liquid mixture. The most   abundant component in a solution is called the solvent. Other components   are called solutes. A solution, though homogeneous, may nonetheless have   variable composition. Any amount of salt, up to a maximum limit, can be   dissolved in a given amount of water. "')), documentation('Solution', string('"A homogenous liquid mixture. The most   abundant component in a solution is called the solvent. Other components   are called solutes. A solution, though homogeneous, may nonetheless have   variable composition. Any amount of salt, up to a maximum limit, can be   dissolved in a given amount of water. "')), [], [], 'Merge', 'BASE ONTOLOGY', 739, 'Anonymous', on).
mooCache(subclass('CorpuscularObject', 'SelfConnectedObject'), subclass('CorpuscularObject', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 741, 'Anonymous', on).
mooCache(disjoint('CorpuscularObject', 'Substance'), disjoint('CorpuscularObject', 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 743, 'Anonymous', on).
mooCache(documentation('CorpuscularObject', string('"A SelfConnectedObject whose parts have   properties that are not shared by the whole."')), documentation('CorpuscularObject', string('"A SelfConnectedObject whose parts have   properties that are not shared by the whole."')), [], [], 'Merge', 'BASE ONTOLOGY', 745, 'Anonymous', on).
mooCache(=>(instance(A, 'CorpuscularObject'), exists(B, exists(C, and(subclass(C, 'Substance'), and(subclass(B, 'Substance'), and(material(C, A), and(material(B, A), not(equal(C, B))))))))), and(and(entails(not(subclass(C, 'Substance')), not(instance(A, 'CorpuscularObject'))), entails(and(instance(A, 'CorpuscularObject'), '$existential'(C, '?SUBSTANCE1', and(subclass('?SUBSTANCE1', 'Substance'), and(subclass(B, 'Substance'), and(material('?SUBSTANCE1', A), and(material(B, A), not(equal('?SUBSTANCE1', B)))))))), subclass(C, 'Substance'))), and(and(entails(not(subclass(B, 'Substance')), not(instance(A, 'CorpuscularObject'))), entails(and(and(instance(A, 'CorpuscularObject'), '$existential'(B, '?SUBSTANCE2', exists(C, and(subclass(C, 'Substance'), and(subclass('?SUBSTANCE2', 'Substance'), and(material(C, A), and(material('?SUBSTANCE2', A), not(equal(C, '?SUBSTANCE2'))))))))), '$existential'(C, '?SUBSTANCE1', and(subclass('?SUBSTANCE1', 'Substance'), and(subclass(B, 'Substance'), and(material('?SUBSTANCE1', A), and(material(B, A), not(equal('?SUBSTANCE1', B)))))))), subclass(B, 'Substance'))), and(and(entails(not(material(C, A)), not(instance(A, 'CorpuscularObject'))), entails(and(instance(A, 'CorpuscularObject'), '$existential'(C, '?SUBSTANCE1', and(subclass('?SUBSTANCE1', 'Substance'), and(subclass(B, 'Substance'), and(material('?SUBSTANCE1', A), and(material(B, A), not(equal('?SUBSTANCE1', B)))))))), material(C, A))), and(and(entails(not(material(B, A)), not(instance(A, 'CorpuscularObject'))), entails(and(and(instance(A, 'CorpuscularObject'), '$existential'(B, '?SUBSTANCE2', exists(C, and(subclass(C, 'Substance'), and(subclass('?SUBSTANCE2', 'Substance'), and(material(C, A), and(material('?SUBSTANCE2', A), not(equal(C, '?SUBSTANCE2'))))))))), '$existential'(C, '?SUBSTANCE1', and(subclass('?SUBSTANCE1', 'Substance'), and(subclass(B, 'Substance'), and(material('?SUBSTANCE1', A), and(material(B, A), not(equal('?SUBSTANCE1', B)))))))), material(B, A))), and(entails(equal(C, B), not(instance(A, 'CorpuscularObject'))), entails(instance(A, 'CorpuscularObject'), not(equal(C, B)))))))), [domainV(C, [material:1, subclass:1]), domainV(B, [material:1, subclass:1]), domainV(A, ['$instanceof':'CorpuscularObject', material:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?SUBSTANCE2', exists(C, and(subclass(C, 'Substance'), and(subclass('?SUBSTANCE2', 'Substance'), and(material(C, A), and(material('?SUBSTANCE2', A), not(equal(C, '?SUBSTANCE2'))))))))), replaceConsVar(C, '$existential'('?SUBSTANCE1', and(subclass('?SUBSTANCE1', 'Substance'), and(subclass(B, 'Substance'), and(material('?SUBSTANCE1', A), and(material(B, A), not(equal('?SUBSTANCE1', B))))))))], ['OBJ'=A, 'SUBSTANCE1'=C, 'SUBSTANCE2'=B], 'Merge', 'BASE ONTOLOGY', 747, 'Anonymous', on).
mooCache(subclass('Region', 'SelfConnectedObject'), subclass('Region', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 749, 'Anonymous', on).
mooCache(documentation('Region', string('"A topographic location.  Regions encompass   surfaces of Objects and GeographicAreas.  Note that a Region is   the only kind of Object which can be located at itself."')), documentation('Region', string('"A topographic location.  Regions encompass   surfaces of Objects and GeographicAreas.  Note that a Region is   the only kind of Object which can be located at itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 751, 'Anonymous', on).
mooCache(subclass('Collection', 'Object'), subclass('Collection', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 753, 'Anonymous', on).
mooCache(disjoint('Collection', 'SelfConnectedObject'), disjoint('Collection', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 755, 'Anonymous', on).
mooCache(documentation('Collection', string('"Collections have members like Classes, but,   unlike Classes, they have a position in space-time and members can be   added and subtracted without thereby changing the identity of the   Collection.  Some examples are toolkits, football teams, and flocks   of sheep."')), documentation('Collection', string('"Collections have members like Classes, but,   unlike Classes, they have a position in space-time and members can be   added and subtracted without thereby changing the identity of the   Collection.  Some examples are toolkits, football teams, and flocks   of sheep."')), [], [], 'Merge', 'BASE ONTOLOGY', 757, 'Anonymous', on).
mooCache(=>(instance(A, 'Collection'), exists(B, member(B, A))), and(entails(not(member(B, A)), not(instance(A, 'Collection'))), entails(and(instance(A, 'Collection'), '$existential'(B, '?OBJ', member('?OBJ', A))), member(B, A))), [domainV(B, [member:1]), domainV(A, ['$instanceof':'Collection', member:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', member('?OBJ', A)))], ['COLL'=A, 'OBJ'=B], 'Merge', 'BASE ONTOLOGY', 759, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Collection'), and(member(B, A), member(C, A))), orientation(B, C, 'Near')), and(entails(and(instance(A, 'Collection'), and(member(B, A), member(C, A))), orientation(B, C, 'Near')), and(entails(and(not(orientation(B, C, 'Near')), and(member(B, A), member(C, A))), not(instance(A, 'Collection'))), and(entails(and(not(orientation(B, C, 'Near')), and(instance(A, 'Collection'), member(C, A))), not(member(B, A))), entails(and(not(orientation(B, C, 'Near')), and(instance(A, 'Collection'), member(B, A))), not(member(C, A)))))), [domainV(C, [member:1, orientation:2]), domainV(B, [member:1, orientation:1]), domainV(A, ['$instanceof':'Collection', member:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['COLL'=A, 'MEMBER1'=B, 'MEMBER2'=C], 'Merge', 'BASE ONTOLOGY', 761, 'Anonymous', on).
mooCache(instance(member, 'BinaryPredicate'), instance(member, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 763, 'Anonymous', on).
mooCache(instance(member, 'SpatialRelation'), instance(member, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 765, 'Anonymous', on).
mooCache(instance(member, 'AsymmetricRelation'), instance(member, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 767, 'Anonymous', on).
mooCache(instance(member, 'IntransitiveRelation'), instance(member, 'IntransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 769, 'Anonymous', on).
mooCache(domain(member, 1, 'SelfConnectedObject'), domain(member, 1, 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 771, 'Anonymous', on).
mooCache(domain(member, 2, 'Collection'), domain(member, 2, 'Collection'), [], [], 'Merge', 'BASE ONTOLOGY', 773, 'Anonymous', on).
mooCache(relatedInternalConcept(member, instance), relatedInternalConcept(member, instance), [], [], 'Merge', 'BASE ONTOLOGY', 775, 'Anonymous', on).
mooCache(relatedInternalConcept(member, element), relatedInternalConcept(member, element), [], [], 'Merge', 'BASE ONTOLOGY', 777, 'Anonymous', on).
mooCache(documentation(member, string('"A specialized common sense notion of part for   uniform parts of Collections.  For example, each sheep in a flock of   sheep would have the relationship of member to the flock."')), documentation(member, string('"A specialized common sense notion of part for   uniform parts of Collections.  For example, each sheep in a flock of   sheep would have the relationship of member to the flock."')), [], [], 'Merge', 'BASE ONTOLOGY', 779, 'Anonymous', on).
mooCache(instance(subCollection, 'BinaryPredicate'), instance(subCollection, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 781, 'Anonymous', on).
mooCache(instance(subCollection, 'TransitiveRelation'), instance(subCollection, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 783, 'Anonymous', on).
mooCache(instance(subCollection, 'IrreflexiveRelation'), instance(subCollection, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 785, 'Anonymous', on).
mooCache(domain(subCollection, 1, 'Collection'), domain(subCollection, 1, 'Collection'), [], [], 'Merge', 'BASE ONTOLOGY', 787, 'Anonymous', on).
mooCache(domain(subCollection, 2, 'Collection'), domain(subCollection, 2, 'Collection'), [], [], 'Merge', 'BASE ONTOLOGY', 789, 'Anonymous', on).
mooCache(documentation(subCollection, string('"(subCollection ?COLL1 ?COLL2) means that   the Collection ?COLL1 is a proper part of the Collection ?COLL2."')), documentation(subCollection, string('"(subCollection ?COLL1 ?COLL2) means that   the Collection ?COLL1 is a proper part of the Collection ?COLL2."')), [], [], 'Merge', 'BASE ONTOLOGY', 791, 'Anonymous', on).
mooCache(subclass('ContentBearingObject', 'Object'), subclass('ContentBearingObject', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 793, 'Anonymous', on).
mooCache(relatedInternalConcept('ContentBearingObject', containsInformation), relatedInternalConcept('ContentBearingObject', containsInformation), [], [], 'Merge', 'BASE ONTOLOGY', 795, 'Anonymous', on).
mooCache(documentation('ContentBearingObject', string('"Any Object that expresses information."')), documentation('ContentBearingObject', string('"Any Object that expresses information."')), [], [], 'Merge', 'BASE ONTOLOGY', 797, 'Anonymous', on).
mooCache(subclass('SymbolicString', 'ContentBearingObject'), subclass('SymbolicString', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 799, 'Anonymous', on).
mooCache(documentation('SymbolicString', string('"The Class of alphanumeric sequences."')), documentation('SymbolicString', string('"The Class of alphanumeric sequences."')), [], [], 'Merge', 'BASE ONTOLOGY', 801, 'Anonymous', on).
mooCache(subclass('Character', 'SymbolicString'), subclass('Character', 'SymbolicString'), [], [], 'Merge', 'BASE ONTOLOGY', 803, 'Anonymous', on).
mooCache(documentation('Character', string('"An element of an alphabet, a set of numerals, etc.    Note that a Character may or may not be part of a Language.  Character   is a subclass of SymbolicString, because every instance of Character is   an alphanumeric sequence consisting of a single element."')), documentation('Character', string('"An element of an alphabet, a set of numerals, etc.    Note that a Character may or may not be part of a Language.  Character   is a subclass of SymbolicString, because every instance of Character is   an alphanumeric sequence consisting of a single element."')), [], [], 'Merge', 'BASE ONTOLOGY', 805, 'Anonymous', on).
mooCache(=>(instance(A, 'SymbolicString'), exists(B, and(part(B, A), instance(B, 'Character')))), and(and(entails(not(part(B, A)), not(instance(A, 'SymbolicString'))), entails(and(instance(A, 'SymbolicString'), '$existential'(B, '?PART', and(part('?PART', A), instance('?PART', 'Character')))), part(B, A))), and(entails(not(instance(B, 'Character')), not(instance(A, 'SymbolicString'))), entails(and(instance(A, 'SymbolicString'), '$existential'(B, '?PART', and(part('?PART', A), instance('?PART', 'Character')))), instance(B, 'Character')))), [domainV(B, ['$instanceof':'Character', part:1]), domainV(A, ['$instanceof':'SymbolicString', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PART', and(part('?PART', A), instance('?PART', 'Character'))))], ['STRING'=A, 'PART'=B], 'Merge', 'BASE ONTOLOGY', 807, 'Anonymous', on).
mooCache(subclass('CodeNumber', 'SymbolicString'), subclass('CodeNumber', 'SymbolicString'), [], [], 'Merge', 'BASE ONTOLOGY', 809, 'Anonymous', on).
mooCache(documentation('CodeNumber', string('"SymbolicStrings that are not part of a Language   and that uniquely identify an instance or subclass of Object.  Some examples   of CodeNumber are the keys of tables in database applications and the ISBN   (International Standard Book Number)."')), documentation('CodeNumber', string('"SymbolicStrings that are not part of a Language   and that uniquely identify an instance or subclass of Object.  Some examples   of CodeNumber are the keys of tables in database applications and the ISBN   (International Standard Book Number)."')), [], [], 'Merge', 'BASE ONTOLOGY', 811, 'Anonymous', on).
mooCache(instance(containsInformation, 'BinaryPredicate'), instance(containsInformation, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 813, 'Anonymous', on).
mooCache(instance(containsInformation, 'AsymmetricRelation'), instance(containsInformation, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 815, 'Anonymous', on).
mooCache(subrelation(containsInformation, represents), subrelation(containsInformation, represents), [], [], 'Merge', 'BASE ONTOLOGY', 817, 'Anonymous', on).
mooCache(domain(containsInformation, 1, 'ContentBearingObject'), domain(containsInformation, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 819, 'Anonymous', on).
mooCache(domain(containsInformation, 2, 'Proposition'), domain(containsInformation, 2, 'Proposition'), [], [], 'Merge', 'BASE ONTOLOGY', 821, 'Anonymous', on).
mooCache(documentation(containsInformation, string('"A subrelation of represents.  This   predicate relates a ContentBearingObject to the Proposition that is   expressed by the ContentBearingObject. Examples include the relationships   between a physical novel and its story and between a printed score and its   musical content."')), documentation(containsInformation, string('"A subrelation of represents.  This   predicate relates a ContentBearingObject to the Proposition that is   expressed by the ContentBearingObject. Examples include the relationships   between a physical novel and its story and between a printed score and its   musical content."')), [], [], 'Merge', 'BASE ONTOLOGY', 823, 'Anonymous', on).
mooCache(subclass('Advertisement', 'ContentBearingObject'), subclass('Advertisement', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 825, 'Anonymous', on).
mooCache(documentation('Advertisement', string('"A ContentBearingObject whose purpose is to   promote the sale of an Object described in the Advertisement."')), documentation('Advertisement', string('"A ContentBearingObject whose purpose is to   promote the sale of an Object described in the Advertisement."')), [], [], 'Merge', 'BASE ONTOLOGY', 827, 'Anonymous', on).
mooCache(=>(instance(A, 'Advertisement'), exists(B, and(refers(A, B), hasPurpose(A, exists(C, and(instance(C, 'Selling'), patient(C, B))))))), and(and(entails(not(refers(A, B)), not(instance(A, 'Advertisement'))), entails(and(and(instance(A, 'Advertisement'), '$existential'(B, '?OBJ', and(refers(A, '?OBJ'), exists(C, and(hasPurpose(A, instance(C, 'Selling')), hasPurpose(A, patient(C, '?OBJ'))))))), '$existential'(C, '?SALE', and(hasPurpose(A, instance('?SALE', 'Selling')), hasPurpose(A, patient('?SALE', B))))), refers(A, B))), and(and(entails(not(hasPurpose(A, instance(C, 'Selling'))), not(instance(A, 'Advertisement'))), entails(and(instance(A, 'Advertisement'), '$existential'(C, '?SALE', and(hasPurpose(A, instance('?SALE', 'Selling')), hasPurpose(A, patient('?SALE', B))))), hasPurpose(A, instance(C, 'Selling')))), and(entails(not(hasPurpose(A, patient(C, B))), not(instance(A, 'Advertisement'))), entails(and(and(instance(A, 'Advertisement'), '$existential'(B, '?OBJ', and(refers(A, '?OBJ'), exists(C, and(hasPurpose(A, instance(C, 'Selling')), hasPurpose(A, patient(C, '?OBJ'))))))), '$existential'(C, '?SALE', and(hasPurpose(A, instance('?SALE', 'Selling')), hasPurpose(A, patient('?SALE', B))))), hasPurpose(A, patient(C, B)))))), [domainV(C, ['$instanceof':'Selling', patient:1]), domainV(B, [patient:2, refers:2]), domainV(A, ['$instanceof':'Advertisement', hasPurpose:1, refers:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(refers(A, '?OBJ'), exists(C, and(hasPurpose(A, instance(C, 'Selling')), hasPurpose(A, patient(C, '?OBJ'))))))), replaceConsVar(C, '$existential'('?SALE', and(hasPurpose(A, instance('?SALE', 'Selling')), hasPurpose(A, patient('?SALE', B)))))], ['ADVERT'=A, 'OBJ'=B, 'SALE'=C], 'Merge', 'BASE ONTOLOGY', 829, 'Anonymous', on).
mooCache(subclass('MotionPicture', 'ContentBearingObject'), subclass('MotionPicture', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 831, 'Anonymous', on).
mooCache(documentation('MotionPicture', string('"ContentBearingObjects which depict motion   (and which may have an audio or text component as well).  This Class covers   films, videos, etc."')), documentation('MotionPicture', string('"ContentBearingObjects which depict motion   (and which may have an audio or text component as well).  This Class covers   films, videos, etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 833, 'Anonymous', on).
mooCache(subclass('Icon', 'ContentBearingObject'), subclass('Icon', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 835, 'Anonymous', on).
mooCache(documentation('Icon', string('"This is the subclass of ContentBearingObjects   which are not part of a Language and which have some sort of similarity   with the Objects that they represent.  This Class would include symbolic   roadway signs, \'icons\' in a graphical computer operating system, etc."')), documentation('Icon', string('"This is the subclass of ContentBearingObjects   which are not part of a Language and which have some sort of similarity   with the Objects that they represent.  This Class would include symbolic   roadway signs, \'icons\' in a graphical computer operating system, etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 837, 'Anonymous', on).
mooCache(subclass('LinguisticExpression', 'ContentBearingObject'), subclass('LinguisticExpression', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 839, 'Anonymous', on).
mooCache(disjoint('LinguisticExpression', 'Icon'), disjoint('LinguisticExpression', 'Icon'), [], [], 'Merge', 'BASE ONTOLOGY', 841, 'Anonymous', on).
mooCache(documentation('LinguisticExpression', string('"This is the subclass of   ContentBearingObjects which are language-related.  Note that this Class   encompasses both Language and the the elements of Languages,   e.g. Words."')), documentation('LinguisticExpression', string('"This is the subclass of   ContentBearingObjects which are language-related.  Note that this Class   encompasses both Language and the the elements of Languages,   e.g. Words."')), [], [], 'Merge', 'BASE ONTOLOGY', 843, 'Anonymous', on).
mooCache(subclass('Language', 'LinguisticExpression'), subclass('Language', 'LinguisticExpression'), [], [], 'Merge', 'BASE ONTOLOGY', 845, 'Anonymous', on).
mooCache(disjointDecomposition('Language', 'AnimalLanguage', 'HumanLanguage', 'ComputerLanguage'), disjointDecomposition('Language', 'AnimalLanguage', 'HumanLanguage', 'ComputerLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 847, 'Anonymous', on).
mooCache(documentation('Language', string('"A system of signs for expressing thought.  The   system can be either natural or artificial, i.e. something that emerges   gradually as a cultural artifact or something that is intentionally created   by a person or group of people."')), documentation('Language', string('"A system of signs for expressing thought.  The   system can be either natural or artificial, i.e. something that emerges   gradually as a cultural artifact or something that is intentionally created   by a person or group of people."')), [], [], 'Merge', 'BASE ONTOLOGY', 849, 'Anonymous', on).
mooCache(subclass('AnimalLanguage', 'Language'), subclass('AnimalLanguage', 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 851, 'Anonymous', on).
mooCache(documentation('AnimalLanguage', string('"The subclass of Languages used by   Animals other than Humans."')), documentation('AnimalLanguage', string('"The subclass of Languages used by   Animals other than Humans."')), [], [], 'Merge', 'BASE ONTOLOGY', 853, 'Anonymous', on).
mooCache(=>(and(instance(A, 'AnimalLanguage'), and(agent(B, C), instrument(B, A))), and(instance(C, 'Animal'), not(instance(C, 'Human')))), and(and(entails(and(instance(A, 'AnimalLanguage'), and(agent(B, C), instrument(B, A))), instance(C, 'Animal')), and(entails(and(not(instance(C, 'Animal')), and(agent(B, C), instrument(B, A))), not(instance(A, 'AnimalLanguage'))), and(entails(and(not(instance(C, 'Animal')), and(instance(A, 'AnimalLanguage'), instrument(B, A))), not(agent(B, C))), entails(and(not(instance(C, 'Animal')), and(instance(A, 'AnimalLanguage'), agent(B, C))), not(instrument(B, A)))))), and(entails(and(instance(A, 'AnimalLanguage'), and(agent(B, C), instrument(B, A))), not(instance(C, 'Human'))), and(entails(and(instance(C, 'Human'), and(agent(B, C), instrument(B, A))), not(instance(A, 'AnimalLanguage'))), and(entails(and(instance(C, 'Human'), and(instance(A, 'AnimalLanguage'), instrument(B, A))), not(agent(B, C))), entails(and(instance(C, 'Human'), and(instance(A, 'AnimalLanguage'), agent(B, C))), not(instrument(B, A))))))), [domainV(C, ['$instanceof':'Animal', '$instanceof':'Human', agent:2]), domainV(B, [agent:1, instrument:1]), domainV(A, ['$instanceof':'AnimalLanguage', instrument:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['LANG'=A, 'PROC'=B, 'AGENT'=C], 'Merge', 'BASE ONTOLOGY', 855, 'Anonymous', on).
mooCache(subclass('ComputerLanguage', 'Language'), subclass('ComputerLanguage', 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 857, 'Anonymous', on).
mooCache(documentation('ComputerLanguage', string('"The class of Languages designed for   and interpreted by a computer."')), documentation('ComputerLanguage', string('"The class of Languages designed for   and interpreted by a computer."')), [], [], 'Merge', 'BASE ONTOLOGY', 859, 'Anonymous', on).
mooCache(=>(and(instance(A, 'ComputerLanguage'), and(agent(B, C), instrument(B, A))), instance(C, 'Machine')), and(entails(and(instance(A, 'ComputerLanguage'), and(agent(B, C), instrument(B, A))), instance(C, 'Machine')), and(entails(and(not(instance(C, 'Machine')), and(agent(B, C), instrument(B, A))), not(instance(A, 'ComputerLanguage'))), and(entails(and(not(instance(C, 'Machine')), and(instance(A, 'ComputerLanguage'), instrument(B, A))), not(agent(B, C))), entails(and(not(instance(C, 'Machine')), and(instance(A, 'ComputerLanguage'), agent(B, C))), not(instrument(B, A)))))), [domainV(C, ['$instanceof':'Machine', agent:2]), domainV(B, [agent:1, instrument:1]), domainV(A, ['$instanceof':'ComputerLanguage', instrument:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['LANG'=A, 'PROC'=B, 'AGENT'=C], 'Merge', 'BASE ONTOLOGY', 861, 'Anonymous', on).
mooCache(subclass('HumanLanguage', 'Language'), subclass('HumanLanguage', 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 863, 'Anonymous', on).
mooCache(documentation('HumanLanguage', string('"The subclass of Languages used by   Humans."')), documentation('HumanLanguage', string('"The subclass of Languages used by   Humans."')), [], [], 'Merge', 'BASE ONTOLOGY', 865, 'Anonymous', on).
mooCache(=>(and(instance(A, 'HumanLanguage'), and(agent(B, C), instrument(B, A))), instance(C, 'Human')), and(entails(and(instance(A, 'HumanLanguage'), and(agent(B, C), instrument(B, A))), instance(C, 'Human')), and(entails(and(not(instance(C, 'Human')), and(agent(B, C), instrument(B, A))), not(instance(A, 'HumanLanguage'))), and(entails(and(not(instance(C, 'Human')), and(instance(A, 'HumanLanguage'), instrument(B, A))), not(agent(B, C))), entails(and(not(instance(C, 'Human')), and(instance(A, 'HumanLanguage'), agent(B, C))), not(instrument(B, A)))))), [domainV(C, ['$instanceof':'Human', agent:2]), domainV(B, [agent:1, instrument:1]), domainV(A, ['$instanceof':'HumanLanguage', instrument:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['LANG'=A, 'PROC'=B, 'AGENT'=C], 'Merge', 'BASE ONTOLOGY', 867, 'Anonymous', on).
mooCache(subclass('ConstructedLanguage', 'HumanLanguage'), subclass('ConstructedLanguage', 'HumanLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 869, 'Anonymous', on).
mooCache(documentation('ConstructedLanguage', string('"The subclass of HumanLanguages   that did not originate diachronically, but were designed by a Human.    This Class includes languages like Esperanto that were created to   facilitate international communication."')), documentation('ConstructedLanguage', string('"The subclass of HumanLanguages   that did not originate diachronically, but were designed by a Human.    This Class includes languages like Esperanto that were created to   facilitate international communication."')), [], [], 'Merge', 'BASE ONTOLOGY', 871, 'Anonymous', on).
mooCache(=>(instance(A, 'ConstructedLanguage'), exists(B, and(instance(B, 'Planning'), result(B, A)))), and(and(entails(not(instance(B, 'Planning')), not(instance(A, 'ConstructedLanguage'))), entails(and(instance(A, 'ConstructedLanguage'), '$existential'(B, '?PLAN', and(instance('?PLAN', 'Planning'), result('?PLAN', A)))), instance(B, 'Planning'))), and(entails(not(result(B, A)), not(instance(A, 'ConstructedLanguage'))), entails(and(instance(A, 'ConstructedLanguage'), '$existential'(B, '?PLAN', and(instance('?PLAN', 'Planning'), result('?PLAN', A)))), result(B, A)))), [domainV(B, ['$instanceof':'Planning', result:1]), domainV(A, ['$instanceof':'ConstructedLanguage', result:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PLAN', and(instance('?PLAN', 'Planning'), result('?PLAN', A))))], ['LANG'=A, 'PLAN'=B], 'Merge', 'BASE ONTOLOGY', 873, 'Anonymous', on).
mooCache(subclass('NaturalLanguage', 'HumanLanguage'), subclass('NaturalLanguage', 'HumanLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 875, 'Anonymous', on).
mooCache(disjoint('NaturalLanguage', 'ConstructedLanguage'), disjoint('NaturalLanguage', 'ConstructedLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 877, 'Anonymous', on).
mooCache(documentation('NaturalLanguage', string('"The subclass of HumanLanguages which   are not designed and which evolve from generation to generation.  This   Class includes all of the national languages, e.g. English, Spanish,   Japanese, etc."')), documentation('NaturalLanguage', string('"The subclass of HumanLanguages which   are not designed and which evolve from generation to generation.  This   Class includes all of the national languages, e.g. English, Spanish,   Japanese, etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 879, 'Anonymous', on).
mooCache(subclass('Word', 'LinguisticExpression'), subclass('Word', 'LinguisticExpression'), [], [], 'Merge', 'BASE ONTOLOGY', 881, 'Anonymous', on).
mooCache(documentation('Word', string('"A term of a Language that represents a concept."')), documentation('Word', string('"A term of a Language that represents a concept."')), [], [], 'Merge', 'BASE ONTOLOGY', 883, 'Anonymous', on).
mooCache(subclass('Clause', 'Phrase'), subclass('Clause', 'Phrase'), [], [], 'Merge', 'BASE ONTOLOGY', 885, 'Anonymous', on).
mooCache(documentation('Clause', string('"A clause is a grammatical unit that includes, at minimum,   a predicate and a subject (which may be explicit or implicit) and that expresses   a Proposition."')), documentation('Clause', string('"A clause is a grammatical unit that includes, at minimum,   a predicate and a subject (which may be explicit or implicit) and that expresses   a Proposition."')), [], [], 'Merge', 'BASE ONTOLOGY', 887, 'Anonymous', on).
mooCache(=>(instance(A, 'Clause'), exists(B, and(instance(B, 'Proposition'), containsInformation(A, B)))), and(and(entails(not(instance(B, 'Proposition')), not(instance(A, 'Clause'))), entails(and(instance(A, 'Clause'), '$existential'(B, '?PROP', and(instance('?PROP', 'Proposition'), containsInformation(A, '?PROP')))), instance(B, 'Proposition'))), and(entails(not(containsInformation(A, B)), not(instance(A, 'Clause'))), entails(and(instance(A, 'Clause'), '$existential'(B, '?PROP', and(instance('?PROP', 'Proposition'), containsInformation(A, '?PROP')))), containsInformation(A, B)))), [domainV(B, ['$instanceof':'Proposition', containsInformation:2]), domainV(A, ['$instanceof':'Clause', containsInformation:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PROP', and(instance('?PROP', 'Proposition'), containsInformation(A, '?PROP'))))], ['CLAUSE'=A, 'PROP'=B], 'Merge', 'BASE ONTOLOGY', 889, 'Anonymous', on).
mooCache(subclass('Sentence', 'Clause'), subclass('Sentence', 'Clause'), [], [], 'Merge', 'BASE ONTOLOGY', 891, 'Anonymous', on).
mooCache(documentation('Sentence', string('"A syntactically well-formed formula of a   Language."')), documentation('Sentence', string('"A syntactically well-formed formula of a   Language."')), [], [], 'Merge', 'BASE ONTOLOGY', 893, 'Anonymous', on).
mooCache(subclass('Formula', 'Sentence'), subclass('Formula', 'Sentence'), [], [], 'Merge', 'BASE ONTOLOGY', 895, 'Anonymous', on).
mooCache(documentation('Formula', string('"A syntactically well-formed formula in the   SUO-KIF knowledge representation language."')), documentation('Formula', string('"A syntactically well-formed formula in the   SUO-KIF knowledge representation language."')), [], [], 'Merge', 'BASE ONTOLOGY', 897, 'Anonymous', on).
mooCache(subclass('Agent', 'Object'), subclass('Agent', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 905, 'Anonymous', on).
mooCache(documentation('Agent', string('"Something or someone that can act on its own and   produce changes in the world."')), documentation('Agent', string('"Something or someone that can act on its own and   produce changes in the world."')), [], [], 'Merge', 'BASE ONTOLOGY', 907, 'Anonymous', on).
mooCache(<=>(instance(A, 'Agent'), exists(B, agent(B, A))), and(and(entails(and(instance(A, 'Agent'), '$existential'(B, '?PROC', agent('?PROC', A))), agent(B, A)), entails(not(agent(B, A)), not(instance(A, 'Agent')))), and(entails(agent(B, A), instance(A, 'Agent')), entails(not(instance(A, 'Agent')), not(agent(B, A))))), [domainV(B, [agent:1]), domainV(A, ['$instanceof':'Agent', agent:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PROC', agent('?PROC', A))), forall(B)], ['AGENT'=A, 'PROC'=B], 'Merge', 'BASE ONTOLOGY', 909, 'Anonymous', on).
mooCache(subclass('SentientAgent', 'Agent'), subclass('SentientAgent', 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 911, 'Anonymous', on).
mooCache(documentation('SentientAgent', string('"An Agent that has rights but may or may   not have responsibilities and the ability to reason.  If the latter are   present, then the Agent is also an instance of CognitiveAgent.    Domesticated animals are an example of SentientAgents that are not   also CognitiveAgents."')), documentation('SentientAgent', string('"An Agent that has rights but may or may   not have responsibilities and the ability to reason.  If the latter are   present, then the Agent is also an instance of CognitiveAgent.    Domesticated animals are an example of SentientAgents that are not   also CognitiveAgents."')), [], [], 'Merge', 'BASE ONTOLOGY', 913, 'Anonymous', on).
mooCache(subclass('CognitiveAgent', 'SentientAgent'), subclass('CognitiveAgent', 'SentientAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 915, 'Anonymous', on).
mooCache(documentation('CognitiveAgent', string('"A SentientAgent with responsibilities   and the ability to reason, deliberate, make plans, etc.  This is   essentially the legal/ethical notion of a person.  Note that, although   Human is a subclass of CognitiveAgent, there may be instances of   CognitiveAgent which are not also instances of Human.  For example,   chimpanzees, gorillas, dolphins, whales, and some extraterrestrials   (if they exist) may be CognitiveAgents."')), documentation('CognitiveAgent', string('"A SentientAgent with responsibilities   and the ability to reason, deliberate, make plans, etc.  This is   essentially the legal/ethical notion of a person.  Note that, although   Human is a subclass of CognitiveAgent, there may be instances of   CognitiveAgent which are not also instances of Human.  For example,   chimpanzees, gorillas, dolphins, whales, and some extraterrestrials   (if they exist) may be CognitiveAgents."')), [], [], 'Merge', 'BASE ONTOLOGY', 917, 'Anonymous', on).
mooCache(subclass('Process', 'Physical'), subclass('Process', 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 919, 'Anonymous', on).
mooCache(documentation('Process', string('"Intuitively, the class of things that happen   rather than endure.  A Process is thought of as having temporal parts   or stages, and so it cannot have all these parts together at one time   (contrast Object).  Examples include extended \'events\' such as a football   match or a race, events and actions of various kinds, states of motion and   lifespans of Objects, which occupy the same space and time but are thought   of as having stages instead of parts. The formal definition is: anything   that lasts for a time but is not an Object.  Note that a Process may   have participants \'inside\' it which are Objects, such as the players   in a football match.  In a 4D ontology, a Process is something whose   spatiotemporal extent is thought of as dividing into temporal stages   roughly perpendicular to the time-axis."')), documentation('Process', string('"Intuitively, the class of things that happen   rather than endure.  A Process is thought of as having temporal parts   or stages, and so it cannot have all these parts together at one time   (contrast Object).  Examples include extended \'events\' such as a football   match or a race, events and actions of various kinds, states of motion and   lifespans of Objects, which occupy the same space and time but are thought   of as having stages instead of parts. The formal definition is: anything   that lasts for a time but is not an Object.  Note that a Process may   have participants \'inside\' it which are Objects, such as the players   in a football match.  In a 4D ontology, a Process is something whose   spatiotemporal extent is thought of as dividing into temporal stages   roughly perpendicular to the time-axis."')), [], [], 'Merge', 'BASE ONTOLOGY', 921, 'Anonymous', on).
mooCache(subclass('ChemicalProcess', 'Process'), subclass('ChemicalProcess', 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 923, 'Anonymous', on).
mooCache(documentation('ChemicalProcess', string('"A ChemicalProcess occurs whenever   chemical compounds (CompoundSubstances) are formed or decomposed.    For example, reactants disappear as chemical change occurs, and products   appear as chemical change occurs.  In a chemical change a chemical   reaction takes place.  Catalysts in a ChemicalProcess may speed up the   reaction, but aren\'t themselves produced or consumed.  Examples: rusting of   iron and the decomposition of water, induced by an electric current, to   gaseous hydrogen and gaseous oxygen."')), documentation('ChemicalProcess', string('"A ChemicalProcess occurs whenever   chemical compounds (CompoundSubstances) are formed or decomposed.    For example, reactants disappear as chemical change occurs, and products   appear as chemical change occurs.  In a chemical change a chemical   reaction takes place.  Catalysts in a ChemicalProcess may speed up the   reaction, but aren\'t themselves produced or consumed.  Examples: rusting of   iron and the decomposition of water, induced by an electric current, to   gaseous hydrogen and gaseous oxygen."')), [], [], 'Merge', 'BASE ONTOLOGY', 925, 'Anonymous', on).
mooCache(subclass('ChemicalSynthesis', 'ChemicalProcess'), subclass('ChemicalSynthesis', 'ChemicalProcess'), [], [], 'Merge', 'BASE ONTOLOGY', 927, 'Anonymous', on).
mooCache(documentation('ChemicalSynthesis', string('"The Class of ChemicalProcesses in   which a CompoundSubstance is formed from simpler reactants."')), documentation('ChemicalSynthesis', string('"The Class of ChemicalProcesses in   which a CompoundSubstance is formed from simpler reactants."')), [], [], 'Merge', 'BASE ONTOLOGY', 929, 'Anonymous', on).
mooCache(subclass('ChemicalDecomposition', 'ChemicalProcess'), subclass('ChemicalDecomposition', 'ChemicalProcess'), [], [], 'Merge', 'BASE ONTOLOGY', 931, 'Anonymous', on).
mooCache(documentation('ChemicalDecomposition', string('"The Class of ChemicalProcesses   in which a CompoundSubstance breaks down into simpler products."')), documentation('ChemicalDecomposition', string('"The Class of ChemicalProcesses   in which a CompoundSubstance breaks down into simpler products."')), [], [], 'Merge', 'BASE ONTOLOGY', 933, 'Anonymous', on).
mooCache(subclass('Abstract', 'Entity'), subclass('Abstract', 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 935, 'Anonymous', on).
mooCache(disjoint('Abstract', 'Physical'), disjoint('Abstract', 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 937, 'Anonymous', on).
mooCache(documentation('Abstract', string('"Properties or qualities as distinguished from any   particular embodiment of the properties/qualities in a physical medium.    Instances of Abstract can be said to exist in the same sense as mathematical   objects such as sets and relations, but they cannot exist at a particular   place and time without some physical encoding or embodiment."')), documentation('Abstract', string('"Properties or qualities as distinguished from any   particular embodiment of the properties/qualities in a physical medium.    Instances of Abstract can be said to exist in the same sense as mathematical   objects such as sets and relations, but they cannot exist at a particular   place and time without some physical encoding or embodiment."')), [], [], 'Merge', 'BASE ONTOLOGY', 939, 'Anonymous', on).
mooCache(<=>(instance(A, 'Abstract'), not(exists(B, or(located(A, B), time(A, B))))), and(and(entails(instance(A, 'Abstract'), not(located(A, B))), and(entails(instance(A, 'Abstract'), not(time(A, B))), entails(or(located(A, B), time(A, B)), not(instance(A, 'Abstract'))))), and(entails(and(not(located(A, B)), not(time(A, B))), instance(A, 'Abstract')), and(entails(and(and(not(instance(A, 'Abstract')), not(time(A, B))), '$existential'(B, '?POINT', or(located(A, '?POINT'), time(A, '?POINT')))), located(A, B)), entails(and(and(not(instance(A, 'Abstract')), not(located(A, B))), '$existential'(B, '?POINT', or(located(A, '?POINT'), time(A, '?POINT')))), time(A, B))))), [domainV(B, [located:2, time:2]), domainV(A, ['$instanceof':'Abstract', located:1, time:1]), domainV(C, []), forall(A), forall(B), forall(B), replaceConsVar(B, '$existential'('?POINT', or(located(A, '?POINT'), time(A, '?POINT'))))], ['ABS'=A, 'POINT'=B], 'Merge', 'BASE ONTOLOGY', 945, 'Anonymous', on).
mooCache(subclass('Quantity', 'Abstract'), subclass('Quantity', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 947, 'Anonymous', on).
mooCache(documentation('Quantity', string('"Any specification of how many or how much of   something there is.  Accordingly, there are two subclasses of Quantity:    Number (how many) and PhysicalQuantity (how much)."')), documentation('Quantity', string('"Any specification of how many or how much of   something there is.  Accordingly, there are two subclasses of Quantity:    Number (how many) and PhysicalQuantity (how much)."')), [], [], 'Merge', 'BASE ONTOLOGY', 949, 'Anonymous', on).
mooCache(subclass('Attribute', 'Abstract'), subclass('Attribute', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 951, 'Anonymous', on).
mooCache(disjoint('Attribute', 'Quantity'), disjoint('Attribute', 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 953, 'Anonymous', on).
mooCache(documentation('Attribute', string('"Qualities which we cannot or choose not to   reify into subclasses of Object."')), documentation('Attribute', string('"Qualities which we cannot or choose not to   reify into subclasses of Object."')), [], [], 'Merge', 'BASE ONTOLOGY', 955, 'Anonymous', on).
mooCache(instance(property, 'BinaryPredicate'), instance(property, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 957, 'Anonymous', on).
mooCache(domain(property, 1, 'Entity'), domain(property, 1, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 959, 'Anonymous', on).
mooCache(domain(property, 2, 'Attribute'), domain(property, 2, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 961, 'Anonymous', on).
mooCache(documentation(property, string('"This Predicate holds between an instance of   Entity and an instance of Attribute.  (property ?ENTITY ?ATTR)   means that ?ENTITY has the Attribute ?ATTR."')), documentation(property, string('"This Predicate holds between an instance of   Entity and an instance of Attribute.  (property ?ENTITY ?ATTR)   means that ?ENTITY has the Attribute ?ATTR."')), [], [], 'Merge', 'BASE ONTOLOGY', 963, 'Anonymous', on).
mooCache(instance(attribute, 'AsymmetricRelation'), instance(attribute, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 965, 'Anonymous', on).
mooCache(instance(attribute, 'IrreflexiveRelation'), instance(attribute, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 967, 'Anonymous', on).
mooCache(subrelation(attribute, property), subrelation(attribute, property), [], [], 'Merge', 'BASE ONTOLOGY', 969, 'Anonymous', on).
mooCache(domain(attribute, 1, 'Object'), domain(attribute, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 971, 'Anonymous', on).
mooCache(domain(attribute, 2, 'Attribute'), domain(attribute, 2, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 973, 'Anonymous', on).
mooCache(documentation(attribute, string('"(attribute ?OBJECT ?PROPERTY) means that   ?PROPERTY is a Attribute of ?OBJECT.  For example,   (attribute MyLittleRedWagon Red)."')), documentation(attribute, string('"(attribute ?OBJECT ?PROPERTY) means that   ?PROPERTY is a Attribute of ?OBJECT.  For example,   (attribute MyLittleRedWagon Red)."')), [], [], 'Merge', 'BASE ONTOLOGY', 975, 'Anonymous', on).
mooCache(instance(manner, 'AsymmetricRelation'), instance(manner, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 977, 'Anonymous', on).
mooCache(instance(manner, 'IrreflexiveRelation'), instance(manner, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 979, 'Anonymous', on).
mooCache(subrelation(manner, property), subrelation(manner, property), [], [], 'Merge', 'BASE ONTOLOGY', 981, 'Anonymous', on).
mooCache(domain(manner, 1, 'Process'), domain(manner, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 983, 'Anonymous', on).
mooCache(domain(manner, 2, 'Attribute'), domain(manner, 2, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 985, 'Anonymous', on).
mooCache(disjointRelation(manner, attribute), disjointRelation(manner, attribute), [], [], 'Merge', 'BASE ONTOLOGY', 987, 'Anonymous', on).
mooCache(documentation(manner, string('"(manner ?PROCESS ?MANNER) means that the   Process ?PROCESS is qualified by the Attribute ?MANNER.  The Attributes   of Processes are usually denoted by adverbs and include things like the   speed of the wind, the style of a dance, or the intensity of a sports   competition."')), documentation(manner, string('"(manner ?PROCESS ?MANNER) means that the   Process ?PROCESS is qualified by the Attribute ?MANNER.  The Attributes   of Processes are usually denoted by adverbs and include things like the   speed of the wind, the style of a dance, or the intensity of a sports   competition."')), [], [], 'Merge', 'BASE ONTOLOGY', 989, 'Anonymous', on).
mooCache(instance('AbstractionFn', 'UnaryFunction'), instance('AbstractionFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 991, 'Anonymous', on).
mooCache(domain('AbstractionFn', 1, 'Class'), domain('AbstractionFn', 1, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 993, 'Anonymous', on).
mooCache(range('AbstractionFn', 'Attribute'), range('AbstractionFn', 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 995, 'Anonymous', on).
mooCache(documentation('AbstractionFn', string('"A UnaryFunction that maps a Class into   the instance of Attribute that specifies the condition(s) for membership   in the Class."')), documentation('AbstractionFn', string('"A UnaryFunction that maps a Class into   the instance of Attribute that specifies the condition(s) for membership   in the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 997, 'Anonymous', on).
mooCache(<=>(equal('AbstractionFn'(A), B), forall(C, <=>(instance(C, A), attribute(C, B)))), and(and(entails(and(and(or(and(not(instance(C, A)), instance(C, A)), not(instance(C, A))), or(instance(C, A), and(not(instance(C, A)), instance(C, A)))), '$existential'(C, '?INST', not(<=>(instance('?INST', A), attribute('?INST', B))))), not(attribute(C, B))), and(entails(and(and(or(and(not(attribute(C, B)), attribute(C, B)), not(attribute(C, B))), or(and(attribute(C, B), not(attribute(C, B))), attribute(C, B))), '$existential'(C, '?INST', not(<=>(instance('?INST', A), attribute('?INST', B))))), not(instance(C, A))), and(entails(and(or(and(not(attribute(C, B)), attribute(C, B)), attribute(C, B)), or(and(attribute(C, B), not(attribute(C, B))), not(attribute(C, B)))), instance(C, A)), entails(and(or(instance(C, A), and(not(instance(C, A)), instance(C, A))), or(and(not(instance(C, A)), instance(C, A)), not(instance(C, A)))), attribute(C, B))))), and(and(entails(and(or(instance(C, A), and(not(instance(C, A)), instance(C, A))), holds('AbstractionFn', A, B)), attribute(C, B)), and(entails(and(and(or(and(not(attribute(C, B)), attribute(C, B)), not(attribute(C, B))), holds('AbstractionFn', A, B)), '$existential'(C, '?INST', not(<=>(instance('?INST', A), attribute('?INST', B))))), not(instance(C, A))), and(entails(and(or(and(not(attribute(C, B)), attribute(C, B)), attribute(C, B)), holds('AbstractionFn', A, B)), instance(C, A)), and(entails(and(and(or(and(not(instance(C, A)), instance(C, A)), not(instance(C, A))), holds('AbstractionFn', A, B)), '$existential'(C, '?INST', not(<=>(instance('?INST', A), attribute('?INST', B))))), not(attribute(C, B))), entails(or(and(not(attribute(C, B)), attribute(C, B)), or(and(not(attribute(C, B)), instance(C, A)), or(and(not(instance(C, A)), instance(C, A)), and(not(instance(C, A)), attribute(C, B))))), not(holds('AbstractionFn', A, B))))))), and(entails(or(and(attribute(C, B), not(attribute(C, B))), or(and(attribute(C, B), instance(C, A)), or(and(not(instance(C, A)), instance(C, A)), and(not(instance(C, A)), not(attribute(C, B)))))), holds('AbstractionFn', A, B)), and(entails(and(and(not(holds('AbstractionFn', A, B)), or(instance(C, A), and(not(instance(C, A)), instance(C, A)))), '$existential'(C, '?INST', not(<=>(instance('?INST', A), attribute('?INST', B))))), not(attribute(C, B))), and(entails(and(and(not(holds('AbstractionFn', A, B)), or(and(attribute(C, B), not(attribute(C, B))), attribute(C, B))), '$existential'(C, '?INST', not(<=>(instance('?INST', A), attribute('?INST', B))))), not(instance(C, A))), and(entails(and(not(holds('AbstractionFn', A, B)), or(and(attribute(C, B), not(attribute(C, B))), not(attribute(C, B)))), instance(C, A)), entails(and(not(holds('AbstractionFn', A, B)), or(and(not(instance(C, A)), instance(C, A)), not(instance(C, A)))), attribute(C, B)))))))), [domainV(C, [attribute:1]), domainV(B, ['AbstractionFn':2, attribute:2]), domainV(A, ['AbstractionFn':1, instance:2]), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(C, '$existential'('?INST', not(<=>(instance('?INST', A), attribute('?INST', B)))))], ['CLASS'=A, 'ATTR'=B, 'INST'=C], 'Merge', 'BASE ONTOLOGY', 999, 'Anonymous', on).
mooCache(instance('ExtensionFn', 'UnaryFunction'), instance('ExtensionFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1001, 'Anonymous', on).
mooCache(domain('ExtensionFn', 1, 'Attribute'), domain('ExtensionFn', 1, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 1003, 'Anonymous', on).
mooCache(range('ExtensionFn', 'Class'), range('ExtensionFn', 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1005, 'Anonymous', on).
mooCache(documentation('ExtensionFn', string('"A UnaryFunction that maps an Attribute   into the Class whose condition for membership is the Attribute."')), documentation('ExtensionFn', string('"A UnaryFunction that maps an Attribute   into the Class whose condition for membership is the Attribute."')), [], [], 'Merge', 'BASE ONTOLOGY', 1007, 'Anonymous', on).
mooCache(<=>(equal('ExtensionFn'(A), B), equal('AbstractionFn'(B), A)), and(and(entails(holds('ExtensionFn', A, B), holds('AbstractionFn', B, A)), entails(not(holds('AbstractionFn', B, A)), not(holds('ExtensionFn', A, B)))), and(entails(holds('AbstractionFn', B, A), holds('ExtensionFn', A, B)), entails(not(holds('ExtensionFn', A, B)), not(holds('AbstractionFn', B, A))))), [domainV(B, ['AbstractionFn':1, 'ExtensionFn':2]), domainV(A, ['AbstractionFn':2, 'ExtensionFn':1]), domainV(C, []), forall(A), forall(B)], ['ATTRIBUTE'=A, 'CLASS'=B], 'Merge', 'BASE ONTOLOGY', 1009, 'Anonymous', on).
mooCache(subclass('TruthValue', 'Attribute'), subclass('TruthValue', 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 1011, 'Anonymous', on).
mooCache(documentation('TruthValue', string('"The Class of truth values, e.g. True and   False.  These are Attributes of Sentences."')), documentation('TruthValue', string('"The Class of truth values, e.g. True and   False.  These are Attributes of Sentences."')), [], [], 'Merge', 'BASE ONTOLOGY', 1013, 'Anonymous', on).
mooCache(instance('True', 'TruthValue'), instance('True', 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1015, 'Anonymous', on).
mooCache(documentation('True', string('"The TruthValue of being true."')), documentation('True', string('"The TruthValue of being true."')), [], [], 'Merge', 'BASE ONTOLOGY', 1017, 'Anonymous', on).
mooCache(instance('False', 'TruthValue'), instance('False', 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1019, 'Anonymous', on).
mooCache(contraryProperty('False', 'True'), contraryProperty('False', 'True'), [], [], 'Merge', 'BASE ONTOLOGY', 1021, 'Anonymous', on).
mooCache(documentation('False', string('"The TruthValue of being false."')), documentation('False', string('"The TruthValue of being false."')), [], [], 'Merge', 'BASE ONTOLOGY', 1023, 'Anonymous', on).
mooCache(instance('TruthFn', 'UnaryFunction'), instance('TruthFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1025, 'Anonymous', on).
mooCache(domain('TruthFn', 1, 'Sentence'), domain('TruthFn', 1, 'Sentence'), [], [], 'Merge', 'BASE ONTOLOGY', 1027, 'Anonymous', on).
mooCache(domain('TruthFn', 2, 'TruthValue'), domain('TruthFn', 2, 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1029, 'Anonymous', on).
mooCache(documentation('TruthFn', string('"The function mapping Sentences to   TruthValues."')), documentation('TruthFn', string('"The function mapping Sentences to   TruthValues."')), [], [], 'Merge', 'BASE ONTOLOGY', 1031, 'Anonymous', on).
mooCache(subrelation(true, attribute), subrelation(true, attribute), [], [], 'Merge', 'BASE ONTOLOGY', 1033, 'Anonymous', on).
mooCache(relatedInternalConcept(true, 'TruthFn'), relatedInternalConcept(true, 'TruthFn'), [], [], 'Merge', 'BASE ONTOLOGY', 1035, 'Anonymous', on).
mooCache(domain(true, 1, 'Sentence'), domain(true, 1, 'Sentence'), [], [], 'Merge', 'BASE ONTOLOGY', 1037, 'Anonymous', on).
mooCache(domain(true, 2, 'TruthValue'), domain(true, 2, 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1039, 'Anonymous', on).
mooCache(documentation(true, string('"The BinaryPredicate that relates a Sentence   to its TruthValue."')), documentation(true, string('"The BinaryPredicate that relates a Sentence   to its TruthValue."')), [], [], 'Merge', 'BASE ONTOLOGY', 1041, 'Anonymous', on).
mooCache(subclass('Number', 'Quantity'), subclass('Number', 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1047, 'Anonymous', on).
mooCache(documentation('Number', string('"A measure of how many things there are, or how  much there is, of a certain kind.  Numbers are subclassed into   RealNumber and ComplexNumber (ImaginaryNumber is an instance of   Number)."')), documentation('Number', string('"A measure of how many things there are, or how  much there is, of a certain kind.  Numbers are subclassed into   RealNumber and ComplexNumber (ImaginaryNumber is an instance of   Number)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1049, 'Anonymous', on).
mooCache(instance(lessThan, 'BinaryPredicate'), instance(lessThan, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1051, 'Anonymous', on).
mooCache(instance(lessThan, 'TransitiveRelation'), instance(lessThan, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1053, 'Anonymous', on).
mooCache(instance(lessThan, 'IrreflexiveRelation'), instance(lessThan, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1055, 'Anonymous', on).
mooCache(instance(lessThan, 'RelationExtendedToQuantities'), instance(lessThan, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1057, 'Anonymous', on).
mooCache(trichotomizingOn(lessThan, 'RealNumber'), trichotomizingOn(lessThan, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1059, 'Anonymous', on).
mooCache(domain(lessThan, 1, 'Quantity'), domain(lessThan, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1061, 'Anonymous', on).
mooCache(domain(lessThan, 2, 'Quantity'), domain(lessThan, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1063, 'Anonymous', on).
mooCache(documentation(lessThan, string('"(lessThan ?NUMBER1 ?NUMBER2) is true just   in case the Quantity ?NUMBER1 is less than the Quantity ?NUMBER2."')), documentation(lessThan, string('"(lessThan ?NUMBER1 ?NUMBER2) is true just   in case the Quantity ?NUMBER1 is less than the Quantity ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1065, 'Anonymous', on).
mooCache(instance(greaterThan, 'BinaryPredicate'), instance(greaterThan, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1067, 'Anonymous', on).
mooCache(instance(greaterThan, 'TransitiveRelation'), instance(greaterThan, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1069, 'Anonymous', on).
mooCache(instance(greaterThan, 'IrreflexiveRelation'), instance(greaterThan, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1071, 'Anonymous', on).
mooCache(instance(greaterThan, 'RelationExtendedToQuantities'), instance(greaterThan, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1073, 'Anonymous', on).
mooCache(trichotomizingOn(greaterThan, 'RealNumber'), trichotomizingOn(greaterThan, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1075, 'Anonymous', on).
mooCache(domain(greaterThan, 1, 'Quantity'), domain(greaterThan, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1077, 'Anonymous', on).
mooCache(domain(greaterThan, 2, 'Quantity'), domain(greaterThan, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1079, 'Anonymous', on).
mooCache(inverse(greaterThan, lessThan), inverse(greaterThan, lessThan), [], [], 'Merge', 'BASE ONTOLOGY', 1081, 'Anonymous', on).
mooCache(documentation(greaterThan, string('"(greaterThan ?NUMBER1 ?NUMBER2) is true   just in case the Quantity ?NUMBER1 is greater than the Quantity   ?NUMBER2."')), documentation(greaterThan, string('"(greaterThan ?NUMBER1 ?NUMBER2) is true   just in case the Quantity ?NUMBER1 is greater than the Quantity   ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1083, 'Anonymous', on).
mooCache(instance(lessThanOrEqualTo, 'BinaryPredicate'), instance(lessThanOrEqualTo, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1085, 'Anonymous', on).
mooCache(instance(lessThanOrEqualTo, 'PartialOrderingRelation'), instance(lessThanOrEqualTo, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1087, 'Anonymous', on).
mooCache(instance(lessThanOrEqualTo, 'RelationExtendedToQuantities'), instance(lessThanOrEqualTo, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1089, 'Anonymous', on).
mooCache(trichotomizingOn(lessThanOrEqualTo, 'RealNumber'), trichotomizingOn(lessThanOrEqualTo, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1091, 'Anonymous', on).
mooCache(domain(lessThanOrEqualTo, 1, 'Quantity'), domain(lessThanOrEqualTo, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1093, 'Anonymous', on).
mooCache(domain(lessThanOrEqualTo, 2, 'Quantity'), domain(lessThanOrEqualTo, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1095, 'Anonymous', on).
mooCache(documentation(lessThanOrEqualTo, string('"(lessThanOrEqualTo ?NUMBER1 ?NUMBER2)   is true just in case the Quantity ?NUMBER1 is less than or equal to   the Quantity ?NUMBER2."')), documentation(lessThanOrEqualTo, string('"(lessThanOrEqualTo ?NUMBER1 ?NUMBER2)   is true just in case the Quantity ?NUMBER1 is less than or equal to   the Quantity ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1097, 'Anonymous', on).
mooCache(<=>(lessThanOrEqualTo(A, B), or(equal(A, B), lessThan(A, B))), and(and(entails(not(lessThanOrEqualTo(A, B)), not(equal(A, B))), and(entails(not(lessThanOrEqualTo(A, B)), not(lessThan(A, B))), entails(or(equal(A, B), lessThan(A, B)), lessThanOrEqualTo(A, B)))), and(entails(and(not(equal(A, B)), not(lessThan(A, B))), not(lessThanOrEqualTo(A, B))), and(entails(and(lessThanOrEqualTo(A, B), not(lessThan(A, B))), equal(A, B)), entails(and(lessThanOrEqualTo(A, B), not(equal(A, B))), lessThan(A, B))))), [domainV(B, [lessThan:2, lessThanOrEqualTo:2]), domainV(A, [lessThan:1, lessThanOrEqualTo:1]), domainV(C, []), forall(A), forall(B)], ['NUMBER1'=A, 'NUMBER2'=B], 'Merge', 'BASE ONTOLOGY', 1099, 'Anonymous', on).
mooCache(instance(greaterThanOrEqualTo, 'BinaryPredicate'), instance(greaterThanOrEqualTo, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1101, 'Anonymous', on).
mooCache(instance(greaterThanOrEqualTo, 'PartialOrderingRelation'), instance(greaterThanOrEqualTo, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1103, 'Anonymous', on).
mooCache(instance(greaterThanOrEqualTo, 'RelationExtendedToQuantities'), instance(greaterThanOrEqualTo, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1105, 'Anonymous', on).
mooCache(trichotomizingOn(greaterThanOrEqualTo, 'RealNumber'), trichotomizingOn(greaterThanOrEqualTo, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1107, 'Anonymous', on).
mooCache(domain(greaterThanOrEqualTo, 1, 'Quantity'), domain(greaterThanOrEqualTo, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1109, 'Anonymous', on).
mooCache(domain(greaterThanOrEqualTo, 2, 'Quantity'), domain(greaterThanOrEqualTo, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1111, 'Anonymous', on).
mooCache(inverse(greaterThanOrEqualTo, lessThanOrEqualTo), inverse(greaterThanOrEqualTo, lessThanOrEqualTo), [], [], 'Merge', 'BASE ONTOLOGY', 1113, 'Anonymous', on).
mooCache(documentation(greaterThanOrEqualTo, string('"(greaterThanOrEqualTo ?NUMBER1   ?NUMBER2) is true just in case the Quantity ?NUMBER1 is greater   than the Quantity ?NUMBER2."')), documentation(greaterThanOrEqualTo, string('"(greaterThanOrEqualTo ?NUMBER1   ?NUMBER2) is true just in case the Quantity ?NUMBER1 is greater   than the Quantity ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1115, 'Anonymous', on).
mooCache(<=>(greaterThanOrEqualTo(A, B), or(equal(A, B), greaterThan(A, B))), and(and(entails(not(greaterThanOrEqualTo(A, B)), not(equal(A, B))), and(entails(not(greaterThanOrEqualTo(A, B)), not(greaterThan(A, B))), entails(or(equal(A, B), greaterThan(A, B)), greaterThanOrEqualTo(A, B)))), and(entails(and(not(equal(A, B)), not(greaterThan(A, B))), not(greaterThanOrEqualTo(A, B))), and(entails(and(greaterThanOrEqualTo(A, B), not(greaterThan(A, B))), equal(A, B)), entails(and(greaterThanOrEqualTo(A, B), not(equal(A, B))), greaterThan(A, B))))), [domainV(B, [greaterThan:2, greaterThanOrEqualTo:2]), domainV(A, [greaterThan:1, greaterThanOrEqualTo:1]), domainV(C, []), forall(A), forall(B)], ['NUMBER1'=A, 'NUMBER2'=B], 'Merge', 'BASE ONTOLOGY', 1117, 'Anonymous', on).
mooCache(subclass('RealNumber', 'Number'), subclass('RealNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1119, 'Anonymous', on).
mooCache(partition('RealNumber', 'NegativeRealNumber', 'NonnegativeRealNumber'), partition('RealNumber', 'NegativeRealNumber', 'NonnegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1121, 'Anonymous', on).
mooCache(documentation('RealNumber', string('"Any Number that can be expressed as a   (possibly infinite) decimal, i.e. any Number that has a position   on the number line."')), documentation('RealNumber', string('"Any Number that can be expressed as a   (possibly infinite) decimal, i.e. any Number that has a position   on the number line."')), [], [], 'Merge', 'BASE ONTOLOGY', 1123, 'Anonymous', on).
mooCache(subclass('ImaginaryNumber', 'Number'), subclass('ImaginaryNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1125, 'Anonymous', on).
mooCache(documentation('ImaginaryNumber', string('"A subclass of Number containing a   single instance, viz. the square root of -1."')), documentation('ImaginaryNumber', string('"A subclass of Number containing a   single instance, viz. the square root of -1."')), [], [], 'Merge', 'BASE ONTOLOGY', 1127, 'Anonymous', on).
mooCache(subclass('RationalNumber', 'RealNumber'), subclass('RationalNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1129, 'Anonymous', on).
mooCache(documentation('RationalNumber', string('"Any RealNumber that is the product of   dividing two Integers."')), documentation('RationalNumber', string('"Any RealNumber that is the product of   dividing two Integers."')), [], [], 'Merge', 'BASE ONTOLOGY', 1131, 'Anonymous', on).
mooCache(subclass('NonnegativeRealNumber', 'RealNumber'), subclass('NonnegativeRealNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1133, 'Anonymous', on).
mooCache(documentation('NonnegativeRealNumber', string('"A RealNumber that is greater than   or equal to zero."')), documentation('NonnegativeRealNumber', string('"A RealNumber that is greater than   or equal to zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1135, 'Anonymous', on).
mooCache(=>(instance(A, 'NonnegativeRealNumber'), greaterThanOrEqualTo(A, 0)), and(entails(not(greaterThanOrEqualTo(A, 0)), not(instance(A, 'NonnegativeRealNumber'))), entails(instance(A, 'NonnegativeRealNumber'), greaterThanOrEqualTo(A, 0))), [domainV(A, ['$instanceof':'NonnegativeRealNumber', greaterThanOrEqualTo:1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'BASE ONTOLOGY', 1137, 'Anonymous', on).
mooCache(subclass('PositiveRealNumber', 'NonnegativeRealNumber'), subclass('PositiveRealNumber', 'NonnegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1139, 'Anonymous', on).
mooCache(documentation('PositiveRealNumber', string('"A RealNumber that is greater than   zero."')), documentation('PositiveRealNumber', string('"A RealNumber that is greater than   zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1141, 'Anonymous', on).
mooCache(=>(instance(A, 'PositiveRealNumber'), greaterThan(A, 0)), and(entails(not(greaterThan(A, 0)), not(instance(A, 'PositiveRealNumber'))), entails(instance(A, 'PositiveRealNumber'), greaterThan(A, 0))), [domainV(A, ['$instanceof':'PositiveRealNumber', greaterThan:1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'BASE ONTOLOGY', 1143, 'Anonymous', on).
mooCache(subclass('NegativeRealNumber', 'RealNumber'), subclass('NegativeRealNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1145, 'Anonymous', on).
mooCache(documentation('NegativeRealNumber', string('"A RealNumber that is less than   zero."')), documentation('NegativeRealNumber', string('"A RealNumber that is less than   zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1147, 'Anonymous', on).
mooCache(=>(instance(A, 'NegativeRealNumber'), lessThan(A, 0)), and(entails(not(lessThan(A, 0)), not(instance(A, 'NegativeRealNumber'))), entails(instance(A, 'NegativeRealNumber'), lessThan(A, 0))), [domainV(A, ['$instanceof':'NegativeRealNumber', lessThan:1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'BASE ONTOLOGY', 1149, 'Anonymous', on).
mooCache(subclass('Integer', 'RationalNumber'), subclass('Integer', 'RationalNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1151, 'Anonymous', on).
mooCache(partition('Integer', 'OddInteger', 'EvenInteger'), partition('Integer', 'OddInteger', 'EvenInteger'), [], [], 'Merge', 'BASE ONTOLOGY', 1153, 'Anonymous', on).
mooCache(partition('Integer', 'NegativeInteger', 'NonnegativeInteger'), partition('Integer', 'NegativeInteger', 'NonnegativeInteger'), [], [], 'Merge', 'BASE ONTOLOGY', 1155, 'Anonymous', on).
mooCache(documentation('Integer', string('"A negative or nonnegative whole number."')), documentation('Integer', string('"A negative or nonnegative whole number."')), [], [], 'Merge', 'BASE ONTOLOGY', 1157, 'Anonymous', on).
mooCache(subclass('EvenInteger', 'Integer'), subclass('EvenInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1159, 'Anonymous', on).
mooCache(documentation('EvenInteger', string('"An Integer that is evenly divisible   by 2."')), documentation('EvenInteger', string('"An Integer that is evenly divisible   by 2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1161, 'Anonymous', on).
mooCache(subclass('OddInteger', 'Integer'), subclass('OddInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1163, 'Anonymous', on).
mooCache(documentation('OddInteger', string('"An Integer that is not evenly divisible   by 2."')), documentation('OddInteger', string('"An Integer that is not evenly divisible   by 2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1165, 'Anonymous', on).
mooCache(subclass('PrimeNumber', 'Integer'), subclass('PrimeNumber', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1167, 'Anonymous', on).
mooCache(documentation('PrimeNumber', string('"An Integer that is evenly divisible only   by itself and 1."')), documentation('PrimeNumber', string('"An Integer that is evenly divisible only   by itself and 1."')), [], [], 'Merge', 'BASE ONTOLOGY', 1169, 'Anonymous', on).
mooCache(subclass('NonnegativeInteger', 'Integer'), subclass('NonnegativeInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1171, 'Anonymous', on).
mooCache(subclass('NonnegativeInteger', 'NonnegativeRealNumber'), subclass('NonnegativeInteger', 'NonnegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1173, 'Anonymous', on).
mooCache(documentation('NonnegativeInteger', string('"An Integer that is greater than   or equal to zero."')), documentation('NonnegativeInteger', string('"An Integer that is greater than   or equal to zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1175, 'Anonymous', on).
mooCache(subclass('NegativeInteger', 'Integer'), subclass('NegativeInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1177, 'Anonymous', on).
mooCache(subclass('NegativeInteger', 'NegativeRealNumber'), subclass('NegativeInteger', 'NegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1179, 'Anonymous', on).
mooCache(documentation('NegativeInteger', string('"An Integer that is less than zero."')), documentation('NegativeInteger', string('"An Integer that is less than zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1181, 'Anonymous', on).
mooCache(subclass('PositiveInteger', 'NonnegativeInteger'), subclass('PositiveInteger', 'NonnegativeInteger'), [], [], 'Merge', 'BASE ONTOLOGY', 1183, 'Anonymous', on).
mooCache(subclass('PositiveInteger', 'PositiveRealNumber'), subclass('PositiveInteger', 'PositiveRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1185, 'Anonymous', on).
mooCache(documentation('PositiveInteger', string('"An Integer that is greater than zero."')), documentation('PositiveInteger', string('"An Integer that is greater than zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1187, 'Anonymous', on).
mooCache(subclass('BinaryNumber', 'RealNumber'), subclass('BinaryNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1189, 'Anonymous', on).
mooCache(documentation('BinaryNumber', string('"Elements from the number system with base 2.    Every BinaryNumber is expressed as a sequence of the digits 1 and 0."')), documentation('BinaryNumber', string('"Elements from the number system with base 2.    Every BinaryNumber is expressed as a sequence of the digits 1 and 0."')), [], [], 'Merge', 'BASE ONTOLOGY', 1191, 'Anonymous', on).
mooCache(subclass('ComplexNumber', 'Number'), subclass('ComplexNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1193, 'Anonymous', on).
mooCache(disjoint('ComplexNumber', 'RealNumber'), disjoint('ComplexNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1195, 'Anonymous', on).
mooCache(documentation('ComplexNumber', string('"A Number that consists of two components:    a RealNumber and the ImaginaryNumber."')), documentation('ComplexNumber', string('"A Number that consists of two components:    a RealNumber and the ImaginaryNumber."')), [], [], 'Merge', 'BASE ONTOLOGY', 1197, 'Anonymous', on).
mooCache(subclass('NonspecificNumber', 'Number'), subclass('NonspecificNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1199, 'Anonymous', on).
mooCache(documentation('NonspecificNumber', string('"A NonspecificNumber is used to indicate   quantity of items when one cannot or does not want to say exactly how many   items there are."')), documentation('NonspecificNumber', string('"A NonspecificNumber is used to indicate   quantity of items when one cannot or does not want to say exactly how many   items there are."')), [], [], 'Merge', 'BASE ONTOLOGY', 1201, 'Anonymous', on).
mooCache(instance('Few', 'NonspecificNumber'), instance('Few', 'NonspecificNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1203, 'Anonymous', on).
mooCache(documentation('Few', string('"Useful for contextual assessment of number.  Note that   a formula containing this Class cannot be converted into a precise numeric   range.  For example, compare \'few books on the table\' (perhaps there are   three books) and \'few eritrocytes in your blood\' (this might mean there are   3 million per part)."')), documentation('Few', string('"Useful for contextual assessment of number.  Note that   a formula containing this Class cannot be converted into a precise numeric   range.  For example, compare \'few books on the table\' (perhaps there are   three books) and \'few eritrocytes in your blood\' (this might mean there are   3 million per part)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1205, 'Anonymous', on).
mooCache(instance('Many', 'NonspecificNumber'), instance('Many', 'NonspecificNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1207, 'Anonymous', on).
mooCache(documentation('Many', string('"Useful for contextual assessment of number.  Note that   this cannot be converted into a precise numeric range.  For example, compare   \'many books on the table\' (perhaps there are twelve books) and \'many   eritrocytes in your blood\' (this might mean there are 8 million per part)."')), documentation('Many', string('"Useful for contextual assessment of number.  Note that   this cannot be converted into a precise numeric range.  For example, compare   \'many books on the table\' (perhaps there are twelve books) and \'many   eritrocytes in your blood\' (this might mean there are 8 million per part)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1209, 'Anonymous', on).
mooCache(subclass('PhysicalQuantity', 'Quantity'), subclass('PhysicalQuantity', 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1211, 'Anonymous', on).
mooCache(partition('PhysicalQuantity', 'ConstantQuantity', 'FunctionQuantity'), partition('PhysicalQuantity', 'ConstantQuantity', 'FunctionQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1213, 'Anonymous', on).
mooCache(documentation('PhysicalQuantity', string('"A PhysicalQuantity is a measure of   some quantifiable aspect of the modeled world, such as \'the earth\'s   diameter\' (a constant length) and \'the stress in a loaded deformable   solid\' (a measure of stress, which is a function of three spatial   coordinates).  All PhysicalQuantities are either ConstantQuantities   or FunctionQuantities.  Instances of ConstantQuantity are dependent   on a UnitOfMeasure, while instances of FunctionQuantity are   Functions that map instances of ConstantQuantity to other instances   of ConstantQuantity (e.g., TimeDependentQuantities are   FunctionQuantities).  Although the name and definition of   PhysicalQuantity is borrowed from physics, PhysicalQuantities need   not be material.  Aside from the dimensions of length, time, velocity,   etc., nonphysical dimensions such as currency are also possible.    Accordingly, amounts of money would be instances of PhysicalQuantity.    PhysicalQuantities are distinguished from Numbers by the fact that   the former are associated with a dimension of measurement."')), documentation('PhysicalQuantity', string('"A PhysicalQuantity is a measure of   some quantifiable aspect of the modeled world, such as \'the earth\'s   diameter\' (a constant length) and \'the stress in a loaded deformable   solid\' (a measure of stress, which is a function of three spatial   coordinates).  All PhysicalQuantities are either ConstantQuantities   or FunctionQuantities.  Instances of ConstantQuantity are dependent   on a UnitOfMeasure, while instances of FunctionQuantity are   Functions that map instances of ConstantQuantity to other instances   of ConstantQuantity (e.g., TimeDependentQuantities are   FunctionQuantities).  Although the name and definition of   PhysicalQuantity is borrowed from physics, PhysicalQuantities need   not be material.  Aside from the dimensions of length, time, velocity,   etc., nonphysical dimensions such as currency are also possible.    Accordingly, amounts of money would be instances of PhysicalQuantity.    PhysicalQuantities are distinguished from Numbers by the fact that   the former are associated with a dimension of measurement."')), [], [], 'Merge', 'BASE ONTOLOGY', 1215, 'Anonymous', on).
mooCache(subclass('ConstantQuantity', 'PhysicalQuantity'), subclass('ConstantQuantity', 'PhysicalQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1217, 'Anonymous', on).
mooCache(documentation('ConstantQuantity', string('"A ConstantQuantity is a   PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.    The magnitude (see MagnitudeFn) of every ConstantQuantity is a   RealNumber.  ConstantQuantities are distinguished from   FunctionQuantities, which map ConstantQuantities to other   ConstantQuantities.  All ConstantQuantites are expressed with the   BinaryFunction MeasureFn, which takes a Number and a UnitOfMeasure   as arguments.  For example, 3 Meters can be expressed as (MeasureFn 3   Meter).  ConstantQuantities form a partial order (see   PartialOrderingRelation) with the lessThan relation, since lessThan   is a RelationExtendedToQuantities and lessThan is defined over the   RealNumbers.  The lessThan relation is not a total order (see   TotalOrderingRelation) over the class ConstantQuantity since elements   of some subclasses of ConstantQuantity (such as length quantities)   are incomparable to elements of other subclasses of ConstantQuantity   (such as mass quantities)."')), documentation('ConstantQuantity', string('"A ConstantQuantity is a   PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.    The magnitude (see MagnitudeFn) of every ConstantQuantity is a   RealNumber.  ConstantQuantities are distinguished from   FunctionQuantities, which map ConstantQuantities to other   ConstantQuantities.  All ConstantQuantites are expressed with the   BinaryFunction MeasureFn, which takes a Number and a UnitOfMeasure   as arguments.  For example, 3 Meters can be expressed as (MeasureFn 3   Meter).  ConstantQuantities form a partial order (see   PartialOrderingRelation) with the lessThan relation, since lessThan   is a RelationExtendedToQuantities and lessThan is defined over the   RealNumbers.  The lessThan relation is not a total order (see   TotalOrderingRelation) over the class ConstantQuantity since elements   of some subclasses of ConstantQuantity (such as length quantities)   are incomparable to elements of other subclasses of ConstantQuantity   (such as mass quantities)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1219, 'Anonymous', on).
mooCache(subclass('TimeMeasure', 'ConstantQuantity'), subclass('TimeMeasure', 'ConstantQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1221, 'Anonymous', on).
mooCache(documentation('TimeMeasure', string('"The class of temporal durations (instances   of TimeDuration) and positions of TimePoints and TimeIntervals along   the universal timeline (instances of TimePosition)."')), documentation('TimeMeasure', string('"The class of temporal durations (instances   of TimeDuration) and positions of TimePoints and TimeIntervals along   the universal timeline (instances of TimePosition)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1223, 'Anonymous', on).
mooCache(subclass('TimeDuration', 'TimeMeasure'), subclass('TimeDuration', 'TimeMeasure'), [], [], 'Merge', 'BASE ONTOLOGY', 1225, 'Anonymous', on).
mooCache(documentation('TimeDuration', string('"Any measure of length of time,   with or without respect to the universal timeline."')), documentation('TimeDuration', string('"Any measure of length of time,   with or without respect to the universal timeline."')), [], [], 'Merge', 'BASE ONTOLOGY', 1227, 'Anonymous', on).
mooCache(subclass('TimePosition', 'TimeMeasure'), subclass('TimePosition', 'TimeMeasure'), [], [], 'Merge', 'BASE ONTOLOGY', 1229, 'Anonymous', on).
mooCache(partition('TimePosition', 'TimeInterval', 'TimePoint'), partition('TimePosition', 'TimeInterval', 'TimePoint'), [], [], 'Merge', 'BASE ONTOLOGY', 1231, 'Anonymous', on).
mooCache(documentation('TimePosition', string('"Any TimePoint or TimeInterval   along the universal timeline from NegativeInfinity to   PositiveInfinity."')), documentation('TimePosition', string('"Any TimePoint or TimeInterval   along the universal timeline from NegativeInfinity to   PositiveInfinity."')), [], [], 'Merge', 'BASE ONTOLOGY', 1233, 'Anonymous', on).
mooCache(subclass('TimeInterval', 'TimePosition'), subclass('TimeInterval', 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1235, 'Anonymous', on).
mooCache(documentation('TimeInterval', string('"An interval of time.  Note that a   TimeInterval has both an extent and a location on the universal   timeline."')), documentation('TimeInterval', string('"An interval of time.  Note that a   TimeInterval has both an extent and a location on the universal   timeline."')), [], [], 'Merge', 'BASE ONTOLOGY', 1237, 'Anonymous', on).
mooCache(subclass('TimePoint', 'TimePosition'), subclass('TimePoint', 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1239, 'Anonymous', on).
mooCache(documentation('TimePoint', string('"An extensionless point on the universal timeline.   The TimePoints at which Processes occur can be known with various   degrees of precision and approximation, but conceptually TimePoints are   point-like and not interval-like.  That is, it doesn\'t make sense to talk   about what happens during a TimePoint, or how long the TimePoint lasts."')), documentation('TimePoint', string('"An extensionless point on the universal timeline.   The TimePoints at which Processes occur can be known with various   degrees of precision and approximation, but conceptually TimePoints are   point-like and not interval-like.  That is, it doesn\'t make sense to talk   about what happens during a TimePoint, or how long the TimePoint lasts."')), [], [], 'Merge', 'BASE ONTOLOGY', 1241, 'Anonymous', on).
mooCache(subclass('FunctionQuantity', 'PhysicalQuantity'), subclass('FunctionQuantity', 'PhysicalQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1243, 'Anonymous', on).
mooCache(subclass('FunctionQuantity', 'Function'), subclass('FunctionQuantity', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1245, 'Anonymous', on).
mooCache(documentation('FunctionQuantity', string('"A FunctionQuantity is a Function that   maps from one or more instances of ConstantQuantity to another instance   of ConstantQuantity.  For example, the velocity of a particle would be   represented by a FunctionQuantity mapping values of time (which are   ConstantQuantities) to values of distance (also ConstantQuantities).    Note that all instances of FunctionQuantity are Functions with a fixed   arity.  Note too that all elements of the range of a FunctionQuantity   have the same physical dimension as the FunctionQuantity itself."')), documentation('FunctionQuantity', string('"A FunctionQuantity is a Function that   maps from one or more instances of ConstantQuantity to another instance   of ConstantQuantity.  For example, the velocity of a particle would be   represented by a FunctionQuantity mapping values of time (which are   ConstantQuantities) to values of distance (also ConstantQuantities).    Note that all instances of FunctionQuantity are Functions with a fixed   arity.  Note too that all elements of the range of a FunctionQuantity   have the same physical dimension as the FunctionQuantity itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 1247, 'Anonymous', on).
mooCache(subclass('UnaryConstantFunctionQuantity', 'FunctionQuantity'), subclass('UnaryConstantFunctionQuantity', 'FunctionQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1249, 'Anonymous', on).
mooCache(subclass('UnaryConstantFunctionQuantity', 'UnaryFunction'), subclass('UnaryConstantFunctionQuantity', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1251, 'Anonymous', on).
mooCache(documentation('UnaryConstantFunctionQuantity', string('"The class of UnaryFunctions   that map from the Class ConstantQuantity to the Class   ConstantQuantity."')), documentation('UnaryConstantFunctionQuantity', string('"The class of UnaryFunctions   that map from the Class ConstantQuantity to the Class   ConstantQuantity."')), [], [], 'Merge', 'BASE ONTOLOGY', 1253, 'Anonymous', on).
mooCache(=>(instance(A, 'UnaryConstantFunctionQuantity'), and(domain(A, 1, 'ConstantQuantity'), range(A, 'ConstantQuantity'))), and(and(entails(not(domain(A, 1, 'ConstantQuantity')), not(instance(A, 'UnaryConstantFunctionQuantity'))), entails(instance(A, 'UnaryConstantFunctionQuantity'), domain(A, 1, 'ConstantQuantity'))), and(entails(not(range(A, 'ConstantQuantity')), not(instance(A, 'UnaryConstantFunctionQuantity'))), entails(instance(A, 'UnaryConstantFunctionQuantity'), range(A, 'ConstantQuantity')))), [domainV(A, ['$instanceof':'UnaryConstantFunctionQuantity', domain:1, range:1]), domainV(B, []), forall(A)], ['FUNCTION'=A], 'Merge', 'BASE ONTOLOGY', 1255, 'Anonymous', on).
mooCache(subclass('TimeDependentQuantity', 'UnaryConstantFunctionQuantity'), subclass('TimeDependentQuantity', 'UnaryConstantFunctionQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1257, 'Anonymous', on).
mooCache(subclass('TimeDependentQuantity', 'ContinuousFunction'), subclass('TimeDependentQuantity', 'ContinuousFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1259, 'Anonymous', on).
mooCache(documentation('TimeDependentQuantity', string('"A UnaryConstantFunction of continuous   time.  All instances of this Class map a time quantity into another   ConstantQuantity such as temperature.  For example, \'the temperature at   the top of the Empire State Building\' is a TimeDependentQuantity since   its value depends on the time."')), documentation('TimeDependentQuantity', string('"A UnaryConstantFunction of continuous   time.  All instances of this Class map a time quantity into another   ConstantQuantity such as temperature.  For example, \'the temperature at   the top of the Empire State Building\' is a TimeDependentQuantity since   its value depends on the time."')), [], [], 'Merge', 'BASE ONTOLOGY', 1261, 'Anonymous', on).
mooCache(=>(instance(A, 'TimeDependentQuantity'), domain(A, 1, 'TimeMeasure')), and(entails(not(domain(A, 1, 'TimeMeasure')), not(instance(A, 'TimeDependentQuantity'))), entails(instance(A, 'TimeDependentQuantity'), domain(A, 1, 'TimeMeasure'))), [domainV(A, ['$instanceof':'TimeDependentQuantity', domain:1]), domainV(B, []), forall(A)], ['FUNCTION'=A], 'Merge', 'BASE ONTOLOGY', 1263, 'Anonymous', on).
mooCache(subclass('Class', 'Abstract'), subclass('Class', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 1265, 'Anonymous', on).
mooCache(documentation('Class', string('"Class generalizes Set.  Classes, like   Sets, are collections of things.  Accordingly, the notion of membership   is generalized as well - a member of a Class is an instance the   Class.  Classes can differ from Sets in two important respects.    First, Classes that are not explicitly identified as Sets are not assumed   to be extensional.  That is, distinct Classes might well have exactly the   same instances.  Second, Classes typically have an associated `condition\'   that determines the instances of the Class.  So, for example, the   condition `human\' determines the Class of Humans.  Note that some   Classes might satisfy their own condition (e.g., the Class of Abstract   things is Abstract) and hence be instances of themselves."')), documentation('Class', string('"Class generalizes Set.  Classes, like   Sets, are collections of things.  Accordingly, the notion of membership   is generalized as well - a member of a Class is an instance the   Class.  Classes can differ from Sets in two important respects.    First, Classes that are not explicitly identified as Sets are not assumed   to be extensional.  That is, distinct Classes might well have exactly the   same instances.  Second, Classes typically have an associated `condition\'   that determines the instances of the Class.  So, for example, the   condition `human\' determines the Class of Humans.  Note that some   Classes might satisfy their own condition (e.g., the Class of Abstract   things is Abstract) and hence be instances of themselves."')), [], [], 'Merge', 'BASE ONTOLOGY', 1267, 'Anonymous', on).
mooCache(subclass('Relation', 'Abstract'), subclass('Relation', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 1269, 'Anonymous', on).
mooCache(documentation('Relation', string('"A relation between the things related."')), documentation('Relation', string('"A relation between the things related."')), [], [], 'Merge', 'BASE ONTOLOGY', 1271, 'Anonymous', on).
mooCache(subclass('BinaryRelation', 'Relation'), subclass('BinaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1281, 'Anonymous', on).
mooCache(instance('BinaryRelation', 'InheritableRelation'), instance('BinaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1283, 'Anonymous', on).
mooCache(documentation('BinaryRelation', string('"BinaryRelations map instances of a   Class to instances of another Class.  BinaryRelations are   represented as slots in frame systems."')), documentation('BinaryRelation', string('"BinaryRelations map instances of a   Class to instances of another Class.  BinaryRelations are   represented as slots in frame systems."')), [], [], 'Merge', 'BASE ONTOLOGY', 1285, 'Anonymous', on).
mooCache(subclass('ReflexiveRelation', 'BinaryRelation'), subclass('ReflexiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1287, 'Anonymous', on).
mooCache(documentation('ReflexiveRelation', string('"Relation ?REL is reflexive if   (?REL ?INST ?INST) for all ?INST."')), documentation('ReflexiveRelation', string('"Relation ?REL is reflexive if   (?REL ?INST ?INST) for all ?INST."')), [], [], 'Merge', 'BASE ONTOLOGY', 1289, 'Anonymous', on).
mooCache(=>(instance(A, 'ReflexiveRelation'), forall(B, holds(A, B, B))), and(entails(not(holds(A, B, B)), not(instance(A, 'ReflexiveRelation'))), entails(instance(A, 'ReflexiveRelation'), holds(A, B, B))), [domainV(B, [A:1, A:2]), domainV(A, ['$instanceof':'ReflexiveRelation', holds:1]), domainV(C, []), forall(A), forall(B)], ['REL'=A, 'INST'=B], 'Merge', 'BASE ONTOLOGY', 1291, 'Anonymous', on).
mooCache(subclass('IrreflexiveRelation', 'BinaryRelation'), subclass('IrreflexiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1293, 'Anonymous', on).
mooCache(documentation('IrreflexiveRelation', string('"Relation ?REL is irreflexive   if (?REL ?INST ?INST) holds for no value of ?INST."')), documentation('IrreflexiveRelation', string('"Relation ?REL is irreflexive   if (?REL ?INST ?INST) holds for no value of ?INST."')), [], [], 'Merge', 'BASE ONTOLOGY', 1295, 'Anonymous', on).
mooCache(=>(instance(A, 'IrreflexiveRelation'), forall(B, not(holds(A, B, B)))), and(entails(holds(A, B, B), not(instance(A, 'IrreflexiveRelation'))), entails(instance(A, 'IrreflexiveRelation'), not(holds(A, B, B)))), [domainV(B, [A:1, A:2]), domainV(A, ['$instanceof':'IrreflexiveRelation', holds:1]), domainV(C, []), forall(A), forall(B)], ['REL'=A, 'INST'=B], 'Merge', 'BASE ONTOLOGY', 1297, 'Anonymous', on).
mooCache(subclass('SymmetricRelation', 'BinaryRelation'), subclass('SymmetricRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1299, 'Anonymous', on).
mooCache(documentation('SymmetricRelation', string('"A BinaryRelation ?REL is  symmetric just in case (?REL ?INST1 ?INST2) imples (?REL   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), documentation('SymmetricRelation', string('"A BinaryRelation ?REL is  symmetric just in case (?REL ?INST1 ?INST2) imples (?REL   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1301, 'Anonymous', on).
mooCache(=>(instance(A, 'SymmetricRelation'), forall(B, forall(C, =>(holds(A, C, B), holds(A, B, C))))), and(entails(and(holds(A, C, B), not(holds(A, B, C))), not(instance(A, 'SymmetricRelation'))), and(entails(and(instance(A, 'SymmetricRelation'), not(holds(A, B, C))), not(holds(A, C, B))), entails(and(instance(A, 'SymmetricRelation'), holds(A, C, B)), holds(A, B, C)))), [domainV(C, [A:1, A:2]), domainV(B, [A:1, A:2]), domainV(A, ['$instanceof':'SymmetricRelation', holds:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['REL'=A, 'INST1'=C, 'INST2'=B], 'Merge', 'BASE ONTOLOGY', 1303, 'Anonymous', on).
mooCache(subclass('AsymmetricRelation', 'IrreflexiveRelation'), subclass('AsymmetricRelation', 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1305, 'Anonymous', on).
mooCache(subclass('AsymmetricRelation', 'AntisymmetricRelation'), subclass('AsymmetricRelation', 'AntisymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1307, 'Anonymous', on).
mooCache(documentation('AsymmetricRelation', string('"A BinaryRelation is asymmetric only   if it is both an AntisymmetricRelation and an IrreflexiveRelation."')), documentation('AsymmetricRelation', string('"A BinaryRelation is asymmetric only   if it is both an AntisymmetricRelation and an IrreflexiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1309, 'Anonymous', on).
mooCache(subclass('AntisymmetricRelation', 'BinaryRelation'), subclass('AntisymmetricRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1311, 'Anonymous', on).
mooCache(documentation('AntisymmetricRelation', string('"BinaryRelation ?REL is an   AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1   ?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1   and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1   and ?INST2 are identical.  Note that it is possible for an   AntisymmetricRelation to be a ReflexiveRelation."')), documentation('AntisymmetricRelation', string('"BinaryRelation ?REL is an   AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1   ?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1   and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1   and ?INST2 are identical.  Note that it is possible for an   AntisymmetricRelation to be a ReflexiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1313, 'Anonymous', on).
mooCache(=>(instance(A, 'AntisymmetricRelation'), forall(B, forall(C, =>(and(holds(A, C, B), holds(A, B, C)), equal(C, B))))), and(entails(and(not(equal(C, B)), and(holds(A, C, B), holds(A, B, C))), not(instance(A, 'AntisymmetricRelation'))), and(entails(and(instance(A, 'AntisymmetricRelation'), and(holds(A, C, B), holds(A, B, C))), equal(C, B)), and(entails(and(instance(A, 'AntisymmetricRelation'), and(not(equal(C, B)), holds(A, B, C))), not(holds(A, C, B))), entails(and(instance(A, 'AntisymmetricRelation'), and(not(equal(C, B)), holds(A, C, B))), not(holds(A, B, C)))))), [domainV(C, [A:1, A:2]), domainV(B, [A:1, A:2]), domainV(A, ['$instanceof':'AntisymmetricRelation', holds:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['REL'=A, 'INST1'=C, 'INST2'=B], 'Merge', 'BASE ONTOLOGY', 1315, 'Anonymous', on).
mooCache(subclass('TrichotomizingRelation', 'BinaryRelation'), subclass('TrichotomizingRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1317, 'Anonymous', on).
mooCache(documentation('TrichotomizingRelation', string('"A BinaryRelation ?REL is a   TrichotomizingRelation just in case all ordered pairs consisting of   distinct individuals are elements of ?REL."')), documentation('TrichotomizingRelation', string('"A BinaryRelation ?REL is a   TrichotomizingRelation just in case all ordered pairs consisting of   distinct individuals are elements of ?REL."')), [], [], 'Merge', 'BASE ONTOLOGY', 1319, 'Anonymous', on).
mooCache(=>(instance(A, 'TrichotomizingRelation'), forall(B, forall(C, or(holds(A, C, B), or(equal(C, B), holds(A, B, C)))))), and(entails(and(not(holds(A, C, B)), and(not(equal(C, B)), not(holds(A, B, C)))), not(instance(A, 'TrichotomizingRelation'))), and(entails(and(instance(A, 'TrichotomizingRelation'), and(not(equal(C, B)), not(holds(A, B, C)))), holds(A, C, B)), and(entails(and(instance(A, 'TrichotomizingRelation'), and(not(holds(A, C, B)), not(holds(A, B, C)))), equal(C, B)), entails(and(instance(A, 'TrichotomizingRelation'), and(not(holds(A, C, B)), not(equal(C, B)))), holds(A, B, C))))), [domainV(C, [A:1, A:2]), domainV(B, [A:1, A:2]), domainV(A, ['$instanceof':'TrichotomizingRelation', holds:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['REL'=A, 'INST1'=C, 'INST2'=B], 'Merge', 'BASE ONTOLOGY', 1321, 'Anonymous', on).
mooCache(subclass('TransitiveRelation', 'BinaryRelation'), subclass('TransitiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1323, 'Anonymous', on).
mooCache(documentation('TransitiveRelation', string('"A BinaryRelation ?REL is transitive   if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3),   for all ?INST1, ?INST2, and ?INST3."')), documentation('TransitiveRelation', string('"A BinaryRelation ?REL is transitive   if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3),   for all ?INST1, ?INST2, and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1325, 'Anonymous', on).
mooCache(=>(instance(A, 'TransitiveRelation'), forall(B, forall(C, forall(D, =>(and(holds(A, D, C), holds(A, C, B)), holds(A, D, B)))))), and(entails(and(not(holds(A, D, B)), and(holds(A, D, C), holds(A, C, B))), not(instance(A, 'TransitiveRelation'))), and(entails(and(instance(A, 'TransitiveRelation'), and(holds(A, D, C), holds(A, C, B))), holds(A, D, B)), and(entails(and(instance(A, 'TransitiveRelation'), and(not(holds(A, D, B)), holds(A, C, B))), not(holds(A, D, C))), entails(and(instance(A, 'TransitiveRelation'), and(not(holds(A, D, B)), holds(A, D, C))), not(holds(A, C, B)))))), [domainV(D, [A:1]), domainV(C, [A:1, A:2]), domainV(B, [A:2]), domainV(A, ['$instanceof':'TransitiveRelation', holds:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['REL'=A, 'INST1'=D, 'INST2'=C, 'INST3'=B], 'Merge', 'BASE ONTOLOGY', 1327, 'Anonymous', on).
mooCache(subclass('IntransitiveRelation', 'BinaryRelation'), subclass('IntransitiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1329, 'Anonymous', on).
mooCache(documentation('IntransitiveRelation', string('"A BinaryRelation ?REL is   intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not   (?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3."')), documentation('IntransitiveRelation', string('"A BinaryRelation ?REL is   intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not   (?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1331, 'Anonymous', on).
mooCache(=>(instance(A, 'IntransitiveRelation'), forall(B, forall(C, forall(D, =>(and(holds(A, D, C), holds(A, C, B)), not(holds(A, D, B))))))), and(entails(and(holds(A, D, B), and(holds(A, D, C), holds(A, C, B))), not(instance(A, 'IntransitiveRelation'))), and(entails(and(instance(A, 'IntransitiveRelation'), and(holds(A, D, C), holds(A, C, B))), not(holds(A, D, B))), and(entails(and(instance(A, 'IntransitiveRelation'), and(holds(A, D, B), holds(A, C, B))), not(holds(A, D, C))), entails(and(instance(A, 'IntransitiveRelation'), and(holds(A, D, B), holds(A, D, C))), not(holds(A, C, B)))))), [domainV(D, [A:1]), domainV(C, [A:1, A:2]), domainV(B, [A:2]), domainV(A, ['$instanceof':'IntransitiveRelation', holds:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['REL'=A, 'INST1'=D, 'INST2'=C, 'INST3'=B], 'Merge', 'BASE ONTOLOGY', 1333, 'Anonymous', on).
mooCache(subclass('PartialOrderingRelation', 'TransitiveRelation'), subclass('PartialOrderingRelation', 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1335, 'Anonymous', on).
mooCache(subclass('PartialOrderingRelation', 'AntisymmetricRelation'), subclass('PartialOrderingRelation', 'AntisymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1337, 'Anonymous', on).
mooCache(subclass('PartialOrderingRelation', 'ReflexiveRelation'), subclass('PartialOrderingRelation', 'ReflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1339, 'Anonymous', on).
mooCache(documentation('PartialOrderingRelation', string('"A BinaryRelation is a partial   ordering if it is a ReflexiveRelation, an AntisymmetricRelation, and   a TransitiveRelation."')), documentation('PartialOrderingRelation', string('"A BinaryRelation is a partial   ordering if it is a ReflexiveRelation, an AntisymmetricRelation, and   a TransitiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1341, 'Anonymous', on).
mooCache(subclass('TotalOrderingRelation', 'PartialOrderingRelation'), subclass('TotalOrderingRelation', 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1343, 'Anonymous', on).
mooCache(subclass('TotalOrderingRelation', 'TrichotomizingRelation'), subclass('TotalOrderingRelation', 'TrichotomizingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1345, 'Anonymous', on).
mooCache(documentation('TotalOrderingRelation', string('"A BinaryRelation is a   TotalOrderingRelation if it is a PartialOrderingRelation   and a TrichotomizingRelation."')), documentation('TotalOrderingRelation', string('"A BinaryRelation is a   TotalOrderingRelation if it is a PartialOrderingRelation   and a TrichotomizingRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1347, 'Anonymous', on).
mooCache(=>(instance(A, 'TotalOrderingRelation'), forall(B, forall(C, or(holds(A, C, B), holds(A, B, C))))), and(entails(and(not(holds(A, C, B)), not(holds(A, B, C))), not(instance(A, 'TotalOrderingRelation'))), and(entails(and(instance(A, 'TotalOrderingRelation'), not(holds(A, B, C))), holds(A, C, B)), entails(and(instance(A, 'TotalOrderingRelation'), not(holds(A, C, B))), holds(A, B, C)))), [domainV(C, [A:1, A:2]), domainV(B, [A:1, A:2]), domainV(A, ['$instanceof':'TotalOrderingRelation', holds:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['REL'=A, 'INST1'=C, 'INST2'=B], 'Merge', 'BASE ONTOLOGY', 1349, 'Anonymous', on).
mooCache(subclass('EquivalenceRelation', 'TransitiveRelation'), subclass('EquivalenceRelation', 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1351, 'Anonymous', on).
mooCache(subclass('EquivalenceRelation', 'SymmetricRelation'), subclass('EquivalenceRelation', 'SymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1353, 'Anonymous', on).
mooCache(subclass('EquivalenceRelation', 'ReflexiveRelation'), subclass('EquivalenceRelation', 'ReflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1355, 'Anonymous', on).
mooCache(documentation('EquivalenceRelation', string('"A BinaryRelation is an equivalence   relation if it is a ReflexiveRelation, a SymmetricRelation, and a   TransitiveRelation."')), documentation('EquivalenceRelation', string('"A BinaryRelation is an equivalence   relation if it is a ReflexiveRelation, a SymmetricRelation, and a   TransitiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1357, 'Anonymous', on).
mooCache(subclass('CaseRole', 'BinaryPredicate'), subclass('CaseRole', 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1359, 'Anonymous', on).
mooCache(instance('CaseRole', 'InheritableRelation'), instance('CaseRole', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1361, 'Anonymous', on).
mooCache(subclass('CaseRole', 'AsymmetricRelation'), subclass('CaseRole', 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1363, 'Anonymous', on).
mooCache(documentation('CaseRole', string('"The Class of Predicates relating the   spatially distinguished parts of a Process. CaseRoles include, for   example, the agent, patient or destination of an action, the flammable   substance in a burning process, or the water that falls in rain."')), documentation('CaseRole', string('"The Class of Predicates relating the   spatially distinguished parts of a Process. CaseRoles include, for   example, the agent, patient or destination of an action, the flammable   substance in a burning process, or the water that falls in rain."')), [], [], 'Merge', 'BASE ONTOLOGY', 1365, 'Anonymous', on).
mooCache(instance(agent, 'CaseRole'), instance(agent, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1367, 'Anonymous', on).
mooCache(domain(agent, 1, 'Process'), domain(agent, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1369, 'Anonymous', on).
mooCache(domain(agent, 2, 'Agent'), domain(agent, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1371, 'Anonymous', on).
mooCache(documentation(agent, string('"(agent ?PROCESS ?AGENT) means that ?AGENT is   an active determinant, either animate or inanimate, of the Process   ?PROCESS, with or without voluntary intention.  For example, water is   the agent of erosion in the following proposition:  the water   eroded the coastline.  For another example, Eve is an agent in the   following proposition: Eve bit an apple."')), documentation(agent, string('"(agent ?PROCESS ?AGENT) means that ?AGENT is   an active determinant, either animate or inanimate, of the Process   ?PROCESS, with or without voluntary intention.  For example, water is   the agent of erosion in the following proposition:  the water   eroded the coastline.  For another example, Eve is an agent in the   following proposition: Eve bit an apple."')), [], [], 'Merge', 'BASE ONTOLOGY', 1373, 'Anonymous', on).
mooCache(=>(instance(A, 'Process'), exists(B, agent(A, B))), and(entails(not(agent(A, B)), not(instance(A, 'Process'))), entails(and(instance(A, 'Process'), '$existential'(B, '?CAUSE', agent(A, '?CAUSE'))), agent(A, B))), [domainV(B, [agent:2]), domainV(A, ['$instanceof':'Process', agent:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?CAUSE', agent(A, '?CAUSE')))], ['PROCESS'=A, 'CAUSE'=B], 'Merge', 'BASE ONTOLOGY', 1375, 'Anonymous', on).
mooCache(instance(destination, 'CaseRole'), instance(destination, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1377, 'Anonymous', on).
mooCache(domain(destination, 1, 'Process'), domain(destination, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1379, 'Anonymous', on).
mooCache(domain(destination, 2, 'Entity'), domain(destination, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 1381, 'Anonymous', on).
mooCache(documentation(destination, string('"(destination ?PROCESS ?GOAL) means that   ?GOAL is the target or goal of the Process ?PROCESS.  For example,   Danbury would be the destination in the following proposition:  Bob went   to Danbury.  Note that this is a very general CaseRole and, in   particular, that it covers the concepts of \'recipient\' and \'beneficiary\'.    Thus, John would be the destination in the following proposition:    Tom gave a book to John."')), documentation(destination, string('"(destination ?PROCESS ?GOAL) means that   ?GOAL is the target or goal of the Process ?PROCESS.  For example,   Danbury would be the destination in the following proposition:  Bob went   to Danbury.  Note that this is a very general CaseRole and, in   particular, that it covers the concepts of \'recipient\' and \'beneficiary\'.    Thus, John would be the destination in the following proposition:    Tom gave a book to John."')), [], [], 'Merge', 'BASE ONTOLOGY', 1383, 'Anonymous', on).
mooCache(instance(experiencer, 'CaseRole'), instance(experiencer, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1385, 'Anonymous', on).
mooCache(domain(experiencer, 1, 'Process'), domain(experiencer, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1387, 'Anonymous', on).
mooCache(domain(experiencer, 2, 'Agent'), domain(experiencer, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1389, 'Anonymous', on).
mooCache(documentation(experiencer, string('"(experiencer ?PROCESS ?AGENT) means   that ?AGENT experiences the Process ?PROCESS.  For example, Yojo   is the experiencer of seeing in the following proposition:  Yojo   sees the fish.  Note that experiencer, unlike agent, does   not entail a causal relation between its arguments."')), documentation(experiencer, string('"(experiencer ?PROCESS ?AGENT) means   that ?AGENT experiences the Process ?PROCESS.  For example, Yojo   is the experiencer of seeing in the following proposition:  Yojo   sees the fish.  Note that experiencer, unlike agent, does   not entail a causal relation between its arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1391, 'Anonymous', on).
mooCache(subrelation(instrument, patient), subrelation(instrument, patient), [], [], 'Merge', 'BASE ONTOLOGY', 1393, 'Anonymous', on).
mooCache(domain(instrument, 1, 'Process'), domain(instrument, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1395, 'Anonymous', on).
mooCache(domain(instrument, 2, 'Object'), domain(instrument, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1397, 'Anonymous', on).
mooCache(documentation(instrument, string('"(instrument ?EVENT ?TOOL) means that ?TOOL   is used by an agent in bringing about ?EVENT and that ?TOOL is not   changed by ?EVENT.  For example, the key is an instrument in the   following proposition: The key opened the door.  Note that instrument   and resource cannot be satisfied by the same ordered pair."')), documentation(instrument, string('"(instrument ?EVENT ?TOOL) means that ?TOOL   is used by an agent in bringing about ?EVENT and that ?TOOL is not   changed by ?EVENT.  For example, the key is an instrument in the   following proposition: The key opened the door.  Note that instrument   and resource cannot be satisfied by the same ordered pair."')), [], [], 'Merge', 'BASE ONTOLOGY', 1399, 'Anonymous', on).
mooCache(instance(origin, 'CaseRole'), instance(origin, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1401, 'Anonymous', on).
mooCache(domain(origin, 1, 'Process'), domain(origin, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1403, 'Anonymous', on).
mooCache(domain(origin, 2, 'Object'), domain(origin, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1405, 'Anonymous', on).
mooCache(documentation(origin, string('"(origin ?PROCESS ?SOURCE) means that ?SOURCE   indicates where the ?Process began.  Note that this relation implies   that ?SOURCE is present at the beginning of the process, but need not   participate throughout the process.  For example, the submarine is the   origin in the following proposition: the missile was launched from a   submarine."')), documentation(origin, string('"(origin ?PROCESS ?SOURCE) means that ?SOURCE   indicates where the ?Process began.  Note that this relation implies   that ?SOURCE is present at the beginning of the process, but need not   participate throughout the process.  For example, the submarine is the   origin in the following proposition: the missile was launched from a   submarine."')), [], [], 'Merge', 'BASE ONTOLOGY', 1407, 'Anonymous', on).
mooCache(instance(patient, 'CaseRole'), instance(patient, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1409, 'Anonymous', on).
mooCache(domain(patient, 1, 'Process'), domain(patient, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1411, 'Anonymous', on).
mooCache(domain(patient, 2, 'Entity'), domain(patient, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 1413, 'Anonymous', on).
mooCache(documentation(patient, string('"(patient ?PROCESS ?ENTITY) means that ?ENTITY   is a participant in ?PROCESS that may be moved, said, experienced, etc.    For example, the direct objects in the sentences \'The cat swallowed the   canary\' and \'Billy likes the beer\' would be examples of patients.  Note   that the patient of a Process may or may not undergo structural   change as a result of the Process.  The CaseRole of patient is used   when one wants to specify as broadly as possible the object of a   Process."')), documentation(patient, string('"(patient ?PROCESS ?ENTITY) means that ?ENTITY   is a participant in ?PROCESS that may be moved, said, experienced, etc.    For example, the direct objects in the sentences \'The cat swallowed the   canary\' and \'Billy likes the beer\' would be examples of patients.  Note   that the patient of a Process may or may not undergo structural   change as a result of the Process.  The CaseRole of patient is used   when one wants to specify as broadly as possible the object of a   Process."')), [], [], 'Merge', 'BASE ONTOLOGY', 1415, 'Anonymous', on).
mooCache(subrelation(resource, patient), subrelation(resource, patient), [], [], 'Merge', 'BASE ONTOLOGY', 1417, 'Anonymous', on).
mooCache(domain(resource, 1, 'Process'), domain(resource, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1419, 'Anonymous', on).
mooCache(domain(resource, 2, 'Object'), domain(resource, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1421, 'Anonymous', on).
mooCache(disjointRelation(resource, instrument), disjointRelation(resource, instrument), [], [], 'Merge', 'BASE ONTOLOGY', 1423, 'Anonymous', on).
mooCache(documentation(resource, string('"(resource ?PROCESS ?RESOURCE) means that   ?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS,   and as a consequence is changed by ?PROCESS.  For example, soap is a   resource in the following proposition:  the gun was carved out of soap.    Note that resource differs from instrument, another subrelation of   patient, in that it is structurally altered in some way by the   Process."')), documentation(resource, string('"(resource ?PROCESS ?RESOURCE) means that   ?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS,   and as a consequence is changed by ?PROCESS.  For example, soap is a   resource in the following proposition:  the gun was carved out of soap.    Note that resource differs from instrument, another subrelation of   patient, in that it is structurally altered in some way by the   Process."')), [], [], 'Merge', 'BASE ONTOLOGY', 1425, 'Anonymous', on).
mooCache(subrelation(result, patient), subrelation(result, patient), [], [], 'Merge', 'BASE ONTOLOGY', 1427, 'Anonymous', on).
mooCache(domain(result, 1, 'Process'), domain(result, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1429, 'Anonymous', on).
mooCache(domain(result, 2, 'Object'), domain(result, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1431, 'Anonymous', on).
mooCache(documentation(result, string('"(result ?ACTION ?OUTPUT) means that ?OUTPUT is   a product of ?ACTION.  For example, house is a result in the   following proposition: Eric built a house."')), documentation(result, string('"(result ?ACTION ?OUTPUT) means that ?OUTPUT is   a product of ?ACTION.  For example, house is a result in the   following proposition: Eric built a house."')), [], [], 'Merge', 'BASE ONTOLOGY', 1433, 'Anonymous', on).
mooCache(instance('InheritableRelation', 'Class'), instance('InheritableRelation', 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1435, 'Anonymous', on).
mooCache(documentation('InheritableRelation', string('"This is a Class of Classes.  Each   instance of InheritableRelation is a subclass of Relation whose   properties can be inherited downward in the class hierarchy via the   subrelation Predicate."')), documentation('InheritableRelation', string('"This is a Class of Classes.  Each   instance of InheritableRelation is a subclass of Relation whose   properties can be inherited downward in the class hierarchy via the   subrelation Predicate."')), [], [], 'Merge', 'BASE ONTOLOGY', 1437, 'Anonymous', on).
mooCache(subclass('ProbabilityRelation', 'Relation'), subclass('ProbabilityRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1439, 'Anonymous', on).
mooCache(instance('ProbabilityRelation', 'InheritableRelation'), instance('ProbabilityRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1441, 'Anonymous', on).
mooCache(documentation('ProbabilityRelation', string('"The Class of Relations that   permit assessment of the probability of an event or situation."')), documentation('ProbabilityRelation', string('"The Class of Relations that   permit assessment of the probability of an event or situation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1443, 'Anonymous', on).
mooCache(instance(probability, 'ProbabilityRelation'), instance(probability, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1445, 'Anonymous', on).
mooCache(instance(probability, 'BinaryPredicate'), instance(probability, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1447, 'Anonymous', on).
mooCache(domain(probability, 1, 'Formula'), domain(probability, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1449, 'Anonymous', on).
mooCache(domain(probability, 2, 'RealNumber'), domain(probability, 2, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1451, 'Anonymous', on).
mooCache(instance(probability, 'AsymmetricRelation'), instance(probability, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1453, 'Anonymous', on).
mooCache(instance(probability, 'IrreflexiveRelation'), instance(probability, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1455, 'Anonymous', on).
mooCache(documentation(probability, string('"One of the basic ProbabilityRelations,   probability is used to state the a priori probability of a state of   affairs.  (probability ?FORMULA ?NUMBER) means that the state of   affairs denoted by ?FORMULA has the a priori probability of ?NUMBER."')), documentation(probability, string('"One of the basic ProbabilityRelations,   probability is used to state the a priori probability of a state of   affairs.  (probability ?FORMULA ?NUMBER) means that the state of   affairs denoted by ?FORMULA has the a priori probability of ?NUMBER."')), [], [], 'Merge', 'BASE ONTOLOGY', 1457, 'Anonymous', on).
mooCache(instance(conditionalProbability, 'ProbabilityRelation'), instance(conditionalProbability, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1459, 'Anonymous', on).
mooCache(instance(conditionalProbability, 'TernaryPredicate'), instance(conditionalProbability, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1461, 'Anonymous', on).
mooCache(domain(conditionalProbability, 1, 'Formula'), domain(conditionalProbability, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1463, 'Anonymous', on).
mooCache(domain(conditionalProbability, 2, 'Formula'), domain(conditionalProbability, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1465, 'Anonymous', on).
mooCache(domain(conditionalProbability, 3, 'RealNumber'), domain(conditionalProbability, 3, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1467, 'Anonymous', on).
mooCache(documentation(conditionalProbability, string('"One of the basic ProbabilityRelations.    conditionalProbability is used to state the numeric value of a conditional   probability.  (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means   that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is   ?NUMBER."')), documentation(conditionalProbability, string('"One of the basic ProbabilityRelations.    conditionalProbability is used to state the numeric value of a conditional   probability.  (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means   that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is   ?NUMBER."')), [], [], 'Merge', 'BASE ONTOLOGY', 1469, 'Anonymous', on).
mooCache(instance(increasesLikelihood, 'ProbabilityRelation'), instance(increasesLikelihood, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1471, 'Anonymous', on).
mooCache(instance(increasesLikelihood, 'BinaryPredicate'), instance(increasesLikelihood, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1473, 'Anonymous', on).
mooCache(instance(increasesLikelihood, 'IrreflexiveRelation'), instance(increasesLikelihood, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1475, 'Anonymous', on).
mooCache(domain(increasesLikelihood, 1, 'Formula'), domain(increasesLikelihood, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1477, 'Anonymous', on).
mooCache(domain(increasesLikelihood, 2, 'Formula'), domain(increasesLikelihood, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1479, 'Anonymous', on).
mooCache(disjointRelation(increasesLikelihood, decreasesLikelihood), disjointRelation(increasesLikelihood, decreasesLikelihood), [], [], 'Merge', 'BASE ONTOLOGY', 1481, 'Anonymous', on).
mooCache(disjointRelation(increasesLikelihood, independentProbability), disjointRelation(increasesLikelihood, independentProbability), [], [], 'Merge', 'BASE ONTOLOGY', 1483, 'Anonymous', on).
mooCache(documentation(increasesLikelihood, string('"One of the basic ProbabilityRelations.    (increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more   likely to be true if ?FORMULA1 is true."')), documentation(increasesLikelihood, string('"One of the basic ProbabilityRelations.    (increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more   likely to be true if ?FORMULA1 is true."')), [], [], 'Merge', 'BASE ONTOLOGY', 1485, 'Anonymous', on).
mooCache(=>(and(increasesLikelihood(A, B), and(probability(B, C), conditionalProbability(A, B, D))), greaterThan(D, C)), and(entails(and(increasesLikelihood(A, B), and(probability(B, C), conditionalProbability(A, B, D))), greaterThan(D, C)), and(entails(and(not(greaterThan(D, C)), and(probability(B, C), conditionalProbability(A, B, D))), not(increasesLikelihood(A, B))), and(entails(and(not(greaterThan(D, C)), and(increasesLikelihood(A, B), conditionalProbability(A, B, D))), not(probability(B, C))), entails(and(not(greaterThan(D, C)), and(increasesLikelihood(A, B), probability(B, C))), not(conditionalProbability(A, B, D)))))), [domainV(D, [conditionalProbability:3, greaterThan:1]), domainV(C, [greaterThan:2, probability:2]), domainV(B, [conditionalProbability:2, increasesLikelihood:2, probability:1]), domainV(A, [conditionalProbability:1, increasesLikelihood:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['FORMULA1'=A, 'FORMULA2'=B, 'NUMBER1'=C, 'NUMBER2'=D], 'Merge', 'BASE ONTOLOGY', 1487, 'Anonymous', on).
mooCache(instance(decreasesLikelihood, 'ProbabilityRelation'), instance(decreasesLikelihood, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1489, 'Anonymous', on).
mooCache(instance(decreasesLikelihood, 'BinaryPredicate'), instance(decreasesLikelihood, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1491, 'Anonymous', on).
mooCache(instance(decreasesLikelihood, 'IrreflexiveRelation'), instance(decreasesLikelihood, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1493, 'Anonymous', on).
mooCache(domain(decreasesLikelihood, 1, 'Formula'), domain(decreasesLikelihood, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1495, 'Anonymous', on).
mooCache(domain(decreasesLikelihood, 2, 'Formula'), domain(decreasesLikelihood, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1497, 'Anonymous', on).
mooCache(disjointRelation(decreasesLikelihood, independentProbability), disjointRelation(decreasesLikelihood, independentProbability), [], [], 'Merge', 'BASE ONTOLOGY', 1499, 'Anonymous', on).
mooCache(documentation(decreasesLikelihood, string('"One of the basic ProbabilityRelations.    (decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less   likely to be true if ?FORMULA1 is true."')), documentation(decreasesLikelihood, string('"One of the basic ProbabilityRelations.    (decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less   likely to be true if ?FORMULA1 is true."')), [], [], 'Merge', 'BASE ONTOLOGY', 1501, 'Anonymous', on).
mooCache(=>(and(decreasesLikelihood(A, B), and(probability(B, C), conditionalProbability(A, B, D))), lessThan(D, C)), and(entails(and(decreasesLikelihood(A, B), and(probability(B, C), conditionalProbability(A, B, D))), lessThan(D, C)), and(entails(and(not(lessThan(D, C)), and(probability(B, C), conditionalProbability(A, B, D))), not(decreasesLikelihood(A, B))), and(entails(and(not(lessThan(D, C)), and(decreasesLikelihood(A, B), conditionalProbability(A, B, D))), not(probability(B, C))), entails(and(not(lessThan(D, C)), and(decreasesLikelihood(A, B), probability(B, C))), not(conditionalProbability(A, B, D)))))), [domainV(D, [conditionalProbability:3, lessThan:1]), domainV(C, [lessThan:2, probability:2]), domainV(B, [conditionalProbability:2, decreasesLikelihood:2, probability:1]), domainV(A, [conditionalProbability:1, decreasesLikelihood:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['FORMULA1'=A, 'FORMULA2'=B, 'NUMBER1'=C, 'NUMBER2'=D], 'Merge', 'BASE ONTOLOGY', 1503, 'Anonymous', on).
mooCache(instance(independentProbability, 'ProbabilityRelation'), instance(independentProbability, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1505, 'Anonymous', on).
mooCache(instance(independentProbability, 'BinaryPredicate'), instance(independentProbability, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1507, 'Anonymous', on).
mooCache(instance(independentProbability, 'SymmetricRelation'), instance(independentProbability, 'SymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1509, 'Anonymous', on).
mooCache(domain(independentProbability, 1, 'Formula'), domain(independentProbability, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1511, 'Anonymous', on).
mooCache(domain(independentProbability, 2, 'Formula'), domain(independentProbability, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1513, 'Anonymous', on).
mooCache(documentation(independentProbability, string('"One of the basic ProbabilityRelations.    (independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of   ?FORMULA1 and ?FORMULA2 being true are independent."')), documentation(independentProbability, string('"One of the basic ProbabilityRelations.    (independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of   ?FORMULA1 and ?FORMULA2 being true are independent."')), [], [], 'Merge', 'BASE ONTOLOGY', 1515, 'Anonymous', on).
mooCache(=>(and(independentProbability(A, B), and(probability(B, C), conditionalProbability(A, B, D))), equal(D, C)), and(entails(and(independentProbability(A, B), and(probability(B, C), conditionalProbability(A, B, D))), equal(D, C)), and(entails(and(not(equal(D, C)), and(probability(B, C), conditionalProbability(A, B, D))), not(independentProbability(A, B))), and(entails(and(not(equal(D, C)), and(independentProbability(A, B), conditionalProbability(A, B, D))), not(probability(B, C))), entails(and(not(equal(D, C)), and(independentProbability(A, B), probability(B, C))), not(conditionalProbability(A, B, D)))))), [domainV(D, [conditionalProbability:3]), domainV(C, [probability:2]), domainV(B, [conditionalProbability:2, independentProbability:2, probability:1]), domainV(A, [conditionalProbability:1, independentProbability:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['FORMULA1'=A, 'FORMULA2'=B, 'NUMBER1'=C, 'NUMBER2'=D], 'Merge', 'BASE ONTOLOGY', 1517, 'Anonymous', on).
mooCache(or(increasesLikelihood(A, B), or(decreasesLikelihood(A, B), independentProbability(A, B))), and(entails(and(not(decreasesLikelihood(A, B)), not(independentProbability(A, B))), increasesLikelihood(A, B)), and(entails(and(not(increasesLikelihood(A, B)), not(independentProbability(A, B))), decreasesLikelihood(A, B)), entails(and(not(increasesLikelihood(A, B)), not(decreasesLikelihood(A, B))), independentProbability(A, B)))), [domainV(B, [decreasesLikelihood:2, increasesLikelihood:2, independentProbability:2]), domainV(A, [decreasesLikelihood:1, increasesLikelihood:1, independentProbability:1]), domainV(C, []), forall(A), forall(B)], ['FORMULA1'=A, 'FORMULA2'=B], 'Merge', 'BASE ONTOLOGY', 1519, 'Anonymous', on).
mooCache(subclass('SpatialRelation', 'Relation'), subclass('SpatialRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1521, 'Anonymous', on).
mooCache(instance('SpatialRelation', 'InheritableRelation'), instance('SpatialRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1523, 'Anonymous', on).
mooCache(documentation('SpatialRelation', string('"The Class of Relations that are   spatial in a wide sense.  This Class includes mereological relations   and topological relations."')), documentation('SpatialRelation', string('"The Class of Relations that are   spatial in a wide sense.  This Class includes mereological relations   and topological relations."')), [], [], 'Merge', 'BASE ONTOLOGY', 1525, 'Anonymous', on).
mooCache(subclass('TemporalRelation', 'Relation'), subclass('TemporalRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1527, 'Anonymous', on).
mooCache(instance('TemporalRelation', 'InheritableRelation'), instance('TemporalRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1529, 'Anonymous', on).
mooCache(documentation('TemporalRelation', string('"The Class of temporal Relations.    This Class includes notions of (temporal) topology of intervals,   (temporal) schemata, and (temporal) extension."')), documentation('TemporalRelation', string('"The Class of temporal Relations.    This Class includes notions of (temporal) topology of intervals,   (temporal) schemata, and (temporal) extension."')), [], [], 'Merge', 'BASE ONTOLOGY', 1531, 'Anonymous', on).
mooCache(subclass('IntentionalRelation', 'AsymmetricRelation'), subclass('IntentionalRelation', 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1533, 'Anonymous', on).
mooCache(instance('IntentionalRelation', 'InheritableRelation'), instance('IntentionalRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1535, 'Anonymous', on).
mooCache(documentation('IntentionalRelation', string('"The Class of Relations between   an Agent and an Entity, where the Relation requires that the   Agent have awareness of the Entity."')), documentation('IntentionalRelation', string('"The Class of Relations between   an Agent and an Entity, where the Relation requires that the   Agent have awareness of the Entity."')), [], [], 'Merge', 'BASE ONTOLOGY', 1537, 'Anonymous', on).
mooCache(subclass('PropositionalAttitude', 'IntentionalRelation'), subclass('PropositionalAttitude', 'IntentionalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1539, 'Anonymous', on).
mooCache(instance('PropositionalAttitude', 'InheritableRelation'), instance('PropositionalAttitude', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1541, 'Anonymous', on).
mooCache(documentation('PropositionalAttitude', string('"The Class of   IntentionalRelations where the Agent has awareness of a   Proposition."')), documentation('PropositionalAttitude', string('"The Class of   IntentionalRelations where the Agent has awareness of a   Proposition."')), [], [], 'Merge', 'BASE ONTOLOGY', 1543, 'Anonymous', on).
mooCache(subclass('ObjectAttitude', 'IntentionalRelation'), subclass('ObjectAttitude', 'IntentionalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1545, 'Anonymous', on).
mooCache(instance('ObjectAttitude', 'InheritableRelation'), instance('ObjectAttitude', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1547, 'Anonymous', on).
mooCache(disjoint('ObjectAttitude', 'PropositionalAttitude'), disjoint('ObjectAttitude', 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1549, 'Anonymous', on).
mooCache(documentation('ObjectAttitude', string('"The Class of IntentionalRelations   where the Agent has awareness of an instance of Physical."')), documentation('ObjectAttitude', string('"The Class of IntentionalRelations   where the Agent has awareness of an instance of Physical."')), [], [], 'Merge', 'BASE ONTOLOGY', 1551, 'Anonymous', on).
mooCache(instance(inScopeOfInterest, 'BinaryPredicate'), instance(inScopeOfInterest, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1553, 'Anonymous', on).
mooCache(instance(inScopeOfInterest, 'IntentionalRelation'), instance(inScopeOfInterest, 'IntentionalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1555, 'Anonymous', on).
mooCache(instance(inScopeOfInterest, 'AsymmetricRelation'), instance(inScopeOfInterest, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1557, 'Anonymous', on).
mooCache(domain(inScopeOfInterest, 1, 'Agent'), domain(inScopeOfInterest, 1, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1559, 'Anonymous', on).
mooCache(domain(inScopeOfInterest, 2, 'Entity'), domain(inScopeOfInterest, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 1561, 'Anonymous', on).
mooCache(documentation(inScopeOfInterest, string('"A very general Predicate.    (inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the   scope of interest of ?AGENT.  Note that the interest indicated can be   either positive or negative, i.e. the ?AGENT can have an interest in   avoiding or promoting ?ENTITY."')), documentation(inScopeOfInterest, string('"A very general Predicate.    (inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the   scope of interest of ?AGENT.  Note that the interest indicated can be   either positive or negative, i.e. the ?AGENT can have an interest in   avoiding or promoting ?ENTITY."')), [], [], 'Merge', 'BASE ONTOLOGY', 1563, 'Anonymous', on).
mooCache(instance(notices, 'ObjectAttitude'), instance(notices, 'ObjectAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1565, 'Anonymous', on).
mooCache(subrelation(notices, 'InScopeOfInterest'), subrelation(notices, 'InScopeOfInterest'), [], [], 'Merge', 'BASE ONTOLOGY', 1567, 'Anonymous', on).
mooCache(domain(notices, 1, 'CognitiveAgent'), domain(notices, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1569, 'Anonymous', on).
mooCache(domain(notices, 2, 'Object'), domain(notices, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1571, 'Anonymous', on).
mooCache(documentation(notices, string('"(notices ?AGENT ?OBJECT) means that ?AGENT is   paying attention to ?OBJECT, that ?OBJECT is currently the object of   ?AGENT\'s conscious awareness."')), documentation(notices, string('"(notices ?AGENT ?OBJECT) means that ?AGENT is   paying attention to ?OBJECT, that ?OBJECT is currently the object of   ?AGENT\'s conscious awareness."')), [], [], 'Merge', 'BASE ONTOLOGY', 1573, 'Anonymous', on).
mooCache(instance(needs, 'ObjectAttitude'), instance(needs, 'ObjectAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1575, 'Anonymous', on).
mooCache(subrelation(needs, inScopeOfInterest), subrelation(needs, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1577, 'Anonymous', on).
mooCache(domain(needs, 1, 'CognitiveAgent'), domain(needs, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1579, 'Anonymous', on).
mooCache(domain(needs, 2, 'Object'), domain(needs, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1581, 'Anonymous', on).
mooCache(documentation(needs, string('"(needs ?AGENT ?OBJECT) means that ?OBJECT is   physically required for the continued existence of ?AGENT."')), documentation(needs, string('"(needs ?AGENT ?OBJECT) means that ?OBJECT is   physically required for the continued existence of ?AGENT."')), [], [], 'Merge', 'BASE ONTOLOGY', 1583, 'Anonymous', on).
mooCache(=>(needs(A, B), wants(A, B)), and(entails(not(wants(A, B)), not(needs(A, B))), entails(needs(A, B), wants(A, B))), [domainV(B, [needs:2, wants:2]), domainV(A, [needs:1, wants:1]), domainV(C, []), forall(A), forall(B)], ['AGENT'=A, 'OBJECT'=B], 'Merge', 'BASE ONTOLOGY', 1585, 'Anonymous', on).
mooCache(instance(wants, 'ObjectAttitude'), instance(wants, 'ObjectAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1587, 'Anonymous', on).
mooCache(subrelation(wants, inScopeOfInterest), subrelation(wants, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1589, 'Anonymous', on).
mooCache(relatedInternalConcept(wants, desires), relatedInternalConcept(wants, desires), [], [], 'Merge', 'BASE ONTOLOGY', 1591, 'Anonymous', on).
mooCache(domain(wants, 1, 'CognitiveAgent'), domain(wants, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1593, 'Anonymous', on).
mooCache(domain(wants, 2, 'Object'), domain(wants, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1595, 'Anonymous', on).
mooCache(documentation(wants, string('"(wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT,   i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals."')), documentation(wants, string('"(wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT,   i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals."')), [], [], 'Merge', 'BASE ONTOLOGY', 1597, 'Anonymous', on).
mooCache(=>(wants(A, B), exists(C, hasPurposeForAgent(B, C, A))), and(entails(not(hasPurposeForAgent(B, C, A)), not(wants(A, B))), entails(and(wants(A, B), '$existential'(C, '?PURP', hasPurposeForAgent(B, '?PURP', A))), hasPurposeForAgent(B, C, A))), [domainV(C, [hasPurposeForAgent:2]), domainV(B, [hasPurposeForAgent:1, wants:2]), domainV(A, [hasPurposeForAgent:3, wants:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PURP', hasPurposeForAgent(B, '?PURP', A)))], ['AGENT'=A, 'OBJ'=B, 'PURP'=C], 'Merge', 'BASE ONTOLOGY', 1599, 'Anonymous', on).
mooCache(instance(desires, 'PropositionalAttitude'), instance(desires, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1601, 'Anonymous', on).
mooCache(subrelation(desires, inScopeOfInterest), subrelation(desires, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1603, 'Anonymous', on).
mooCache(relatedInternalConcept(desires, wants), relatedInternalConcept(desires, wants), [], [], 'Merge', 'BASE ONTOLOGY', 1605, 'Anonymous', on).
mooCache(domain(desires, 1, 'CognitiveAgent'), domain(desires, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1607, 'Anonymous', on).
mooCache(domain(desires, 2, 'Formula'), domain(desires, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1609, 'Anonymous', on).
mooCache(documentation(desires, string('"(desires ?AGENT ?FORMULA) means that ?AGENT wants to bring about the state of affairs expressed by ?FORMULA.  Note that desires is distinguished from wants only in that the former is a PropositionalAttitude, while wants is an ObjectAttitude."')), documentation(desires, string('"(desires ?AGENT ?FORMULA) means that ?AGENT wants to bring about the state of affairs expressed by ?FORMULA.  Note that desires is distinguished from wants only in that the former is a PropositionalAttitude, while wants is an ObjectAttitude."')), [], [], 'Merge', 'BASE ONTOLOGY', 1611, 'Anonymous', on).
mooCache(instance(considers, 'PropositionalAttitude'), instance(considers, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1613, 'Anonymous', on).
mooCache(subrelation(considers, inScopeOfInterest), subrelation(considers, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1615, 'Anonymous', on).
mooCache(domain(considers, 1, 'CognitiveAgent'), domain(considers, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1617, 'Anonymous', on).
mooCache(domain(considers, 2, 'Formula'), domain(considers, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1619, 'Anonymous', on).
mooCache(documentation(considers, string('"(considers ?AGENT ?FORMULA) means that ?AGENT   considers or wonders about the truth of the proposition expressed by   ?FORMULA."')), documentation(considers, string('"(considers ?AGENT ?FORMULA) means that ?AGENT   considers or wonders about the truth of the proposition expressed by   ?FORMULA."')), [], [], 'Merge', 'BASE ONTOLOGY', 1621, 'Anonymous', on).
mooCache(instance(believes, 'PropositionalAttitude'), instance(believes, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1623, 'Anonymous', on).
mooCache(subrelation(believes, inScopeOfInterest), subrelation(believes, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1625, 'Anonymous', on).
mooCache(domain(believes, 1, 'CognitiveAgent'), domain(believes, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1627, 'Anonymous', on).
mooCache(domain(believes, 2, 'Formula'), domain(believes, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1629, 'Anonymous', on).
mooCache(documentation(believes, string('"The epistemic predicate of belief.    (believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition   expressed by ?FORMULA."')), documentation(believes, string('"The epistemic predicate of belief.    (believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition   expressed by ?FORMULA."')), [], [], 'Merge', 'BASE ONTOLOGY', 1631, 'Anonymous', on).
mooCache(instance(knows, 'PropositionalAttitude'), instance(knows, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1633, 'Anonymous', on).
mooCache(subrelation(knows, inScopeOfInterest), subrelation(knows, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1635, 'Anonymous', on).
mooCache(domain(knows, 1, 'CognitiveAgent'), domain(knows, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1637, 'Anonymous', on).
mooCache(domain(knows, 2, 'Formula'), domain(knows, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1639, 'Anonymous', on).
mooCache(documentation(knows, string('"The epistemic predicate of knowing.  (knows   ?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by   ?FORMULA.  Note that knows entails conscious awareness, so this   Predicate cannot be used to express tacit or subconscious or   unconscious knowledge."')), documentation(knows, string('"The epistemic predicate of knowing.  (knows   ?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by   ?FORMULA.  Note that knows entails conscious awareness, so this   Predicate cannot be used to express tacit or subconscious or   unconscious knowledge."')), [], [], 'Merge', 'BASE ONTOLOGY', 1641, 'Anonymous', on).
mooCache(=>(knows(A, B), believes(A, B)), and(entails(not(believes(A, B)), not(knows(A, B))), entails(knows(A, B), believes(A, B))), [domainV(B, [believes:2, knows:2]), domainV(A, [believes:1, knows:1]), domainV(C, []), forall(A), forall(B)], ['AGENT'=A, 'FORMULA'=B], 'Merge', 'BASE ONTOLOGY', 1643, 'Anonymous', on).
mooCache(=>(knows(A, B), and(true(B), true('True'))), and(and(entails(not(true(B)), not(knows(A, B))), entails(knows(A, B), true(B))), and(entails(not(true('True')), not(knows(A, B))), entails(knows(A, B), true('True')))), [domainV(B, [knows:2, true:1]), domainV(A, [knows:1]), domainV(C, []), forall(A), forall(B)], ['AGENT'=A, 'FORMULA'=B], 'Merge', 'BASE ONTOLOGY', 1645, 'Anonymous', on).
mooCache(subclass('TernaryRelation', 'Relation'), subclass('TernaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1647, 'Anonymous', on).
mooCache(instance('TernaryRelation', 'InheritableRelation'), instance('TernaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1649, 'Anonymous', on).
mooCache(documentation('TernaryRelation', string('"TernaryRelations relate three items.    The two subclasses of TernaryRelation are TernaryPredicate and   BinaryFunction."')), documentation('TernaryRelation', string('"TernaryRelations relate three items.    The two subclasses of TernaryRelation are TernaryPredicate and   BinaryFunction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1651, 'Anonymous', on).
mooCache(subclass('QuaternaryRelation', 'Relation'), subclass('QuaternaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1653, 'Anonymous', on).
mooCache(instance('QuaternaryRelation', 'InheritableRelation'), instance('QuaternaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1655, 'Anonymous', on).
mooCache(documentation('QuaternaryRelation', string('"QuaternaryRelations relate four   items.  The two subclasses of QuaternaryRelation are   QuaternaryPredicate and TernaryFunction."')), documentation('QuaternaryRelation', string('"QuaternaryRelations relate four   items.  The two subclasses of QuaternaryRelation are   QuaternaryPredicate and TernaryFunction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1657, 'Anonymous', on).
mooCache(subclass('QuintaryRelation', 'Relation'), subclass('QuintaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1659, 'Anonymous', on).
mooCache(instance('QuintaryRelation', 'InheritableRelation'), instance('QuintaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1661, 'Anonymous', on).
mooCache(documentation('QuintaryRelation', string('"QuintaryRelations relate five items.    The two subclasses of QuintaryRelation are QuintaryPredicate and   QuaternaryFunction."')), documentation('QuintaryRelation', string('"QuintaryRelations relate five items.    The two subclasses of QuintaryRelation are QuintaryPredicate and   QuaternaryFunction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1663, 'Anonymous', on).
mooCache(subclass('Predicate', 'Relation'), subclass('Predicate', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1665, 'Anonymous', on).
mooCache(instance('Predicate', 'InheritableRelation'), instance('Predicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1667, 'Anonymous', on).
mooCache(documentation('Predicate', string('"A Predicate is a sentence-forming Relation.    Each tuple in the Relation is a finite, ordered sequence of objects.    The fact that a particular tuple is an element of a Predicate is denoted   by \'(*predicate* arg_1 arg_2 .. arg_n)\', where the arg_i are the   objects so related.  In the case of BinaryPredicates, the fact can  be read as `arg_1 is *predicate* arg_2\' or `a *predicate* of  arg_1 is arg_2\'."')), documentation('Predicate', string('"A Predicate is a sentence-forming Relation.    Each tuple in the Relation is a finite, ordered sequence of objects.    The fact that a particular tuple is an element of a Predicate is denoted   by \'(*predicate* arg_1 arg_2 .. arg_n)\', where the arg_i are the   objects so related.  In the case of BinaryPredicates, the fact can  be read as `arg_1 is *predicate* arg_2\' or `a *predicate* of  arg_1 is arg_2\'."')), [], [], 'Merge', 'BASE ONTOLOGY', 1669, 'Anonymous', on).
mooCache(subclass('Function', 'Relation'), subclass('Function', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1671, 'Anonymous', on).
mooCache(instance('Function', 'InheritableRelation'), instance('Function', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1673, 'Anonymous', on).
mooCache(documentation('Function', string('"A Function is a term-forming Relation that   maps from a n-tuple of arguments to a range and that associates this   n-tuple with exactly one range element.  Note that the range is a Class,   and each element of the range is an instance of the Class."')), documentation('Function', string('"A Function is a term-forming Relation that   maps from a n-tuple of arguments to a range and that associates this   n-tuple with exactly one range element.  Note that the range is a Class,   and each element of the range is an instance of the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 1675, 'Anonymous', on).
mooCache(subclass('UnaryFunction', 'Function'), subclass('UnaryFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1677, 'Anonymous', on).
mooCache(subclass('UnaryFunction', 'BinaryRelation'), subclass('UnaryFunction', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1679, 'Anonymous', on).
mooCache(instance('UnaryFunction', 'InheritableRelation'), instance('UnaryFunction', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1681, 'Anonymous', on).
mooCache(documentation('UnaryFunction', string('"The Class of Functions that require a   single argument."')), documentation('UnaryFunction', string('"The Class of Functions that require a   single argument."')), [], [], 'Merge', 'BASE ONTOLOGY', 1683, 'Anonymous', on).
mooCache(=>(instance(A, 'UnaryFunction'), valence(A, 1)), and(entails(not(valence(A, 1)), not(instance(A, 'UnaryFunction'))), entails(instance(A, 'UnaryFunction'), valence(A, 1))), [domainV(A, ['$instanceof':'UnaryFunction', valence:1]), domainV(B, []), forall(A)], ['FUNCTION'=A], 'Merge', 'BASE ONTOLOGY', 1685, 'Anonymous', on).
mooCache(=>(and(instance(A, 'UnaryFunction'), and(equal('AssignmentFn'(A, B), C), equal('AssignmentFn'(A, B), D))), equal(C, D)), and(entails(and(instance(A, 'UnaryFunction'), and(holds(A, B, C), holds(A, B, D))), equal(C, D)), and(entails(and(not(equal(C, D)), and(holds(A, B, C), holds(A, B, D))), not(instance(A, 'UnaryFunction'))), and(entails(and(not(equal(C, D)), and(instance(A, 'UnaryFunction'), holds(A, B, D))), not(holds(A, B, C))), entails(and(not(equal(C, D)), and(instance(A, 'UnaryFunction'), holds(A, B, C))), not(holds(A, B, D)))))), [domainV(D, [A:2]), domainV(C, [A:2]), domainV(B, [A:1]), domainV(A, ['$instanceof':'UnaryFunction', holds:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['FUNCTION'=A, 'ARG'=B, 'VALUE1'=C, 'VALUE2'=D], 'Merge', 'BASE ONTOLOGY', 1687, 'Anonymous', on).
mooCache(subclass('OneToOneFunction', 'UnaryFunction'), subclass('OneToOneFunction', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1689, 'Anonymous', on).
mooCache(documentation('OneToOneFunction', string('"The Class of UnaryFunctions which   are one to one.  A function F is one to one just in case for all X, Y in the   domain of F, if X is not identical to Y, then F(X) is not identical to F(Y)."')), documentation('OneToOneFunction', string('"The Class of UnaryFunctions which   are one to one.  A function F is one to one just in case for all X, Y in the   domain of F, if X is not identical to Y, then F(X) is not identical to F(Y)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1691, 'Anonymous', on).
mooCache(<=>(instance(A, 'OneToOneFunction'), forall(B, forall(C, =>(and(instance(C, 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal(C, B)))), not(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B))))))), and(and(entails(not(instance(A, 'OneToOneFunction')), instance(C, 'DomainFn'(A))), and(entails(not(instance(A, 'OneToOneFunction')), instance(B, 'DomainFn'(A))), and(entails(and(and(not(instance(A, 'OneToOneFunction')), '$existential'(B, '?ARG2', not(forall(C, =>(and(instance(C, 'DomainFn'(A)), and(instance('?ARG2', 'DomainFn'(A)), not(equal(C, '?ARG2')))), not(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, '?ARG2')))))))), '$existential'(C, '?ARG1', not(=>(and(instance('?ARG1', 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal('?ARG1', B)))), not(equal('AssignmentFn'(A, '?ARG1'), 'AssignmentFn'(A, B))))))), not(equal(C, B))), and(entails(not(instance(A, 'OneToOneFunction')), equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B))), entails(or(or(not(instance(C, 'DomainFn'(A))), or(not(instance(B, 'DomainFn'(A))), equal(C, B))), not(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B)))), instance(A, 'OneToOneFunction')))))), and(entails(and(and(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B)), and(instance(C, 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal(C, B))))), '$existential'(C, '?ARG1', not(=>(and(instance('?ARG1', 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal('?ARG1', B)))), not(equal('AssignmentFn'(A, '?ARG1'), 'AssignmentFn'(A, B))))))), not(instance(A, 'OneToOneFunction'))), and(entails(and(and(and(instance(A, 'OneToOneFunction'), and(instance(C, 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal(C, B))))), '$existential'(B, '?ARG2', not(forall(C, =>(and(instance(C, 'DomainFn'(A)), and(instance('?ARG2', 'DomainFn'(A)), not(equal(C, '?ARG2')))), not(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, '?ARG2')))))))), '$existential'(C, '?ARG1', not(=>(and(instance('?ARG1', 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal('?ARG1', B)))), not(equal('AssignmentFn'(A, '?ARG1'), 'AssignmentFn'(A, B))))))), not(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B)))), and(entails(and(and(instance(A, 'OneToOneFunction'), and(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B)), and(instance(B, 'DomainFn'(A)), not(equal(C, B))))), '$existential'(C, '?ARG1', not(=>(and(instance('?ARG1', 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal('?ARG1', B)))), not(equal('AssignmentFn'(A, '?ARG1'), 'AssignmentFn'(A, B))))))), not(instance(C, 'DomainFn'(A)))), and(entails(and(and(and(instance(A, 'OneToOneFunction'), and(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B)), and(instance(C, 'DomainFn'(A)), not(equal(C, B))))), '$existential'(B, '?ARG2', not(forall(C, =>(and(instance(C, 'DomainFn'(A)), and(instance('?ARG2', 'DomainFn'(A)), not(equal(C, '?ARG2')))), not(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, '?ARG2')))))))), '$existential'(C, '?ARG1', not(=>(and(instance('?ARG1', 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal('?ARG1', B)))), not(equal('AssignmentFn'(A, '?ARG1'), 'AssignmentFn'(A, B))))))), not(instance(B, 'DomainFn'(A)))), entails(and(instance(A, 'OneToOneFunction'), and(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, B)), and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A))))), equal(C, B))))))), [domainV(C, [A:1]), domainV(B, [A:1]), domainV(A, ['$instanceof':'OneToOneFunction', 'AssignmentFn':1, 'DomainFn':1]), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(B, '$existential'('?ARG2', not(forall(C, =>(and(instance(C, 'DomainFn'(A)), and(instance('?ARG2', 'DomainFn'(A)), not(equal(C, '?ARG2')))), not(equal('AssignmentFn'(A, C), 'AssignmentFn'(A, '?ARG2')))))))), replaceConsVar(C, '$existential'('?ARG1', not(=>(and(instance('?ARG1', 'DomainFn'(A)), and(instance(B, 'DomainFn'(A)), not(equal('?ARG1', B)))), not(equal('AssignmentFn'(A, '?ARG1'), 'AssignmentFn'(A, B)))))))], ['FUN'=A, 'ARG1'=C, 'ARG2'=B], 'Merge', 'BASE ONTOLOGY', 1693, 'Anonymous', on).
mooCache(subclass('SequenceFunction', 'OneToOneFunction'), subclass('SequenceFunction', 'OneToOneFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1695, 'Anonymous', on).
mooCache(documentation('SequenceFunction', string('"The Class of OneToOneFunctions whose range   is a subclass of the PositiveIntegers."')), documentation('SequenceFunction', string('"The Class of OneToOneFunctions whose range   is a subclass of the PositiveIntegers."')), [], [], 'Merge', 'BASE ONTOLOGY', 1697, 'Anonymous', on).
mooCache(=>(instance(A, 'SequenceFunction'), subclass('RangeFn'(A), 'Integer')), and(entails(not(subclass('RangeFn'(A), 'Integer')), not(instance(A, 'SequenceFunction'))), entails(instance(A, 'SequenceFunction'), subclass('RangeFn'(A), 'Integer'))), [domainV(A, ['$instanceof':'SequenceFunction', 'RangeFn':1]), domainV(B, []), forall(A)], ['SEQ'=A], 'Merge', 'BASE ONTOLOGY', 1699, 'Anonymous', on).
mooCache(subclass('BinaryFunction', 'Function'), subclass('BinaryFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1701, 'Anonymous', on).
mooCache(subclass('BinaryFunction', 'TernaryRelation'), subclass('BinaryFunction', 'TernaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1703, 'Anonymous', on).
mooCache(instance('BinaryFunction', 'InheritableRelation'), instance('BinaryFunction', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1705, 'Anonymous', on).
mooCache(documentation('BinaryFunction', string('"The Class of Functions that require   two arguments."')), documentation('BinaryFunction', string('"The Class of Functions that require   two arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1707, 'Anonymous', on).
mooCache(=>(instance(A, 'BinaryFunction'), valence(A, 2)), and(entails(not(valence(A, 2)), not(instance(A, 'BinaryFunction'))), entails(instance(A, 'BinaryFunction'), valence(A, 2))), [domainV(A, ['$instanceof':'BinaryFunction', valence:1]), domainV(B, []), forall(A)], ['FUNCTION'=A], 'Merge', 'BASE ONTOLOGY', 1709, 'Anonymous', on).
mooCache(=>(and(instance(A, 'BinaryFunction'), and(equal('AssignmentFn'(A, B, C), D), equal('AssignmentFn'(A, B, C), E))), equal(D, E)), and(entails(and(instance(A, 'BinaryFunction'), and(holds(A, B, C, D), holds(A, B, C, E))), equal(D, E)), and(entails(and(not(equal(D, E)), and(holds(A, B, C, D), holds(A, B, C, E))), not(instance(A, 'BinaryFunction'))), and(entails(and(not(equal(D, E)), and(instance(A, 'BinaryFunction'), holds(A, B, C, E))), not(holds(A, B, C, D))), entails(and(not(equal(D, E)), and(instance(A, 'BinaryFunction'), holds(A, B, C, D))), not(holds(A, B, C, E)))))), [domainV(E, [A:3]), domainV(D, [A:3]), domainV(C, [A:2]), domainV(B, [A:1]), domainV(A, ['$instanceof':'BinaryFunction', holds:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['FUNCTION'=A, 'ARG1'=B, 'ARG2'=C, 'VALUE1'=D, 'VALUE2'=E], 'Merge', 'BASE ONTOLOGY', 1711, 'Anonymous', on).
mooCache(subclass('AssociativeFunction', 'BinaryFunction'), subclass('AssociativeFunction', 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1713, 'Anonymous', on).
mooCache(documentation('AssociativeFunction', string('"A BinaryFunction is associative if   bracketing has no effect on the value returned by the Function.  More   precisely, a Function ?FUNCTION is associative just in case   (?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to   (?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2,   and ?INST3."')), documentation('AssociativeFunction', string('"A BinaryFunction is associative if   bracketing has no effect on the value returned by the Function.  More   precisely, a Function ?FUNCTION is associative just in case   (?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to   (?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2,   and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1715, 'Anonymous', on).
mooCache(=>(instance(A, 'AssociativeFunction'), forall(B, forall(C, forall(D, =>(and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A)))), equal('AssignmentFn'(A, D, 'AssignmentFn'(A, D, C)), 'AssignmentFn'(A, 'AssignmentFn'(A, D, C), B))))))), and(entails(and(not(equal('AssignmentFn'(A, D, 'AssignmentFn'(A, D, C)), 'AssignmentFn'(A, 'AssignmentFn'(A, D, C), B))), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A))))), not(instance(A, 'AssociativeFunction'))), and(entails(and(instance(A, 'AssociativeFunction'), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A))))), equal('AssignmentFn'(A, D, 'AssignmentFn'(A, D, C)), 'AssignmentFn'(A, 'AssignmentFn'(A, D, C), B))), and(entails(and(instance(A, 'AssociativeFunction'), and(not(equal('AssignmentFn'(A, D, 'AssignmentFn'(A, D, C)), 'AssignmentFn'(A, 'AssignmentFn'(A, D, C), B))), and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A))))), not(instance(D, 'DomainFn'(A)))), and(entails(and(instance(A, 'AssociativeFunction'), and(not(equal('AssignmentFn'(A, D, 'AssignmentFn'(A, D, C)), 'AssignmentFn'(A, 'AssignmentFn'(A, D, C), B))), and(instance(D, 'DomainFn'(A)), instance(B, 'DomainFn'(A))))), not(instance(C, 'DomainFn'(A)))), entails(and(instance(A, 'AssociativeFunction'), and(not(equal('AssignmentFn'(A, D, 'AssignmentFn'(A, D, C)), 'AssignmentFn'(A, 'AssignmentFn'(A, D, C), B))), and(instance(D, 'DomainFn'(A)), instance(C, 'DomainFn'(A))))), not(instance(B, 'DomainFn'(A)))))))), [domainV(D, [A:1]), domainV(C, [A:2]), domainV(B, [A:2]), domainV(A, ['$instanceof':'AssociativeFunction', 'AssignmentFn':1, 'DomainFn':1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['FUNCTION'=A, 'INST1'=D, 'INST2'=C, 'INST3'=B], 'Merge', 'BASE ONTOLOGY', 1717, 'Anonymous', on).
mooCache(subclass('CommutativeFunction', 'BinaryFunction'), subclass('CommutativeFunction', 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1719, 'Anonymous', on).
mooCache(documentation('CommutativeFunction', string('"A BinaryFunction is commutative if   the ordering of the arguments of the function has no effect on the value   returned by the function.  More precisely, a function ?FUNCTION is   commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), documentation('CommutativeFunction', string('"A BinaryFunction is commutative if   the ordering of the arguments of the function has no effect on the value   returned by the function.  More precisely, a function ?FUNCTION is   commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1721, 'Anonymous', on).
mooCache(=>(instance(A, 'CommutativeFunction'), forall(B, forall(C, =>(and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A))), equal('AssignmentFn'(A, C, B), 'AssignmentFn'(A, B, C)))))), and(entails(and(not(equal('AssignmentFn'(A, C, B), 'AssignmentFn'(A, B, C))), and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A)))), not(instance(A, 'CommutativeFunction'))), and(entails(and(instance(A, 'CommutativeFunction'), and(instance(C, 'DomainFn'(A)), instance(B, 'DomainFn'(A)))), equal('AssignmentFn'(A, C, B), 'AssignmentFn'(A, B, C))), and(entails(and(instance(A, 'CommutativeFunction'), and(not(equal('AssignmentFn'(A, C, B), 'AssignmentFn'(A, B, C))), instance(B, 'DomainFn'(A)))), not(instance(C, 'DomainFn'(A)))), entails(and(instance(A, 'CommutativeFunction'), and(not(equal('AssignmentFn'(A, C, B), 'AssignmentFn'(A, B, C))), instance(C, 'DomainFn'(A)))), not(instance(B, 'DomainFn'(A))))))), [domainV(C, [A:1, A:2]), domainV(B, [A:1, A:2]), domainV(A, ['$instanceof':'CommutativeFunction', 'AssignmentFn':1, 'DomainFn':1]), domainV(D, []), forall(A), forall(B), forall(C)], ['FUNCTION'=A, 'INST1'=C, 'INST2'=B], 'Merge', 'BASE ONTOLOGY', 1723, 'Anonymous', on).
mooCache(subclass('TernaryFunction', 'Function'), subclass('TernaryFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1725, 'Anonymous', on).
mooCache(subclass('TernaryFunction', 'QuaternaryRelation'), subclass('TernaryFunction', 'QuaternaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1727, 'Anonymous', on).
mooCache(instance('TernaryFunction', 'InheritableRelation'), instance('TernaryFunction', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1729, 'Anonymous', on).
mooCache(documentation('TernaryFunction', string('"The Class of Functions that require   exactly three arguments."')), documentation('TernaryFunction', string('"The Class of Functions that require   exactly three arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1731, 'Anonymous', on).
mooCache(=>(instance(A, 'TernaryFunction'), valence(A, 3)), and(entails(not(valence(A, 3)), not(instance(A, 'TernaryFunction'))), entails(instance(A, 'TernaryFunction'), valence(A, 3))), [domainV(A, ['$instanceof':'TernaryFunction', valence:1]), domainV(B, []), forall(A)], ['FUNCTION'=A], 'Merge', 'BASE ONTOLOGY', 1733, 'Anonymous', on).
mooCache(=>(and(instance(A, 'TernaryFunction'), and(equal('AssignmentFn'(A, B, C, D), E), equal('AssignmentFn'(A, B, C, D), F))), equal(E, F)), and(entails(and(instance(A, 'TernaryFunction'), and(holds(A, B, C, D, E), holds(A, B, C, D, F))), equal(E, F)), and(entails(and(not(equal(E, F)), and(holds(A, B, C, D, E), holds(A, B, C, D, F))), not(instance(A, 'TernaryFunction'))), and(entails(and(not(equal(E, F)), and(instance(A, 'TernaryFunction'), holds(A, B, C, D, F))), not(holds(A, B, C, D, E))), entails(and(not(equal(E, F)), and(instance(A, 'TernaryFunction'), holds(A, B, C, D, E))), not(holds(A, B, C, D, F)))))), [domainV(F, [A:4]), domainV(E, [A:4]), domainV(D, [A:3]), domainV(C, [A:2]), domainV(B, [A:1]), domainV(A, ['$instanceof':'TernaryFunction', holds:1]), domainV(G, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(F)], ['FUNCTION'=A, 'ARG1'=B, 'ARG2'=C, 'ARG3'=D, 'VALUE1'=E, 'VALUE2'=F], 'Merge', 'BASE ONTOLOGY', 1735, 'Anonymous', on).
mooCache(subclass('ContinuousFunction', 'Function'), subclass('ContinuousFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1737, 'Anonymous', on).
mooCache(documentation('ContinuousFunction', string('"Functions which are continuous.    This concept is taken as primitive until representations for limits   are devised."')), documentation('ContinuousFunction', string('"Functions which are continuous.    This concept is taken as primitive until representations for limits   are devised."')), [], [], 'Merge', 'BASE ONTOLOGY', 1739, 'Anonymous', on).
mooCache(subclass('SententialOperator', 'Predicate'), subclass('SententialOperator', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1741, 'Anonymous', on).
mooCache(documentation('SententialOperator', string('"This Class currently comprises all   of the logical operators (viz. \'and\', \'or\', \'not\', \'=>\', and \'<=>\')."')), documentation('SententialOperator', string('"This Class currently comprises all   of the logical operators (viz. \'and\', \'or\', \'not\', \'=>\', and \'<=>\')."')), [], [], 'Merge', 'BASE ONTOLOGY', 1743, 'Anonymous', on).
mooCache(subclass('BinaryPredicate', 'Predicate'), subclass('BinaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1745, 'Anonymous', on).
mooCache(subclass('BinaryPredicate', 'BinaryRelation'), subclass('BinaryPredicate', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1747, 'Anonymous', on).
mooCache(instance('BinaryPredicate', 'InheritableRelation'), instance('BinaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1749, 'Anonymous', on).
mooCache(documentation('BinaryPredicate', string('"A Predicate relating two items - its   valence is two."')), documentation('BinaryPredicate', string('"A Predicate relating two items - its   valence is two."')), [], [], 'Merge', 'BASE ONTOLOGY', 1751, 'Anonymous', on).
mooCache(=>(instance(A, 'BinaryPredicate'), valence(A, 2)), and(entails(not(valence(A, 2)), not(instance(A, 'BinaryPredicate'))), entails(instance(A, 'BinaryPredicate'), valence(A, 2))), [domainV(A, ['$instanceof':'BinaryPredicate', valence:1]), domainV(B, []), forall(A)], ['REL'=A], 'Merge', 'BASE ONTOLOGY', 1753, 'Anonymous', on).
mooCache(subclass('TernaryPredicate', 'Predicate'), subclass('TernaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1755, 'Anonymous', on).
mooCache(subclass('TernaryPredicate', 'TernaryRelation'), subclass('TernaryPredicate', 'TernaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1757, 'Anonymous', on).
mooCache(instance('TernaryPredicate', 'InheritableRelation'), instance('TernaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1759, 'Anonymous', on).
mooCache(documentation('TernaryPredicate', string('"The Class of Predicates that require   exactly three arguments."')), documentation('TernaryPredicate', string('"The Class of Predicates that require   exactly three arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1761, 'Anonymous', on).
mooCache(=>(instance(A, 'TernaryPredicate'), valence(A, 3)), and(entails(not(valence(A, 3)), not(instance(A, 'TernaryPredicate'))), entails(instance(A, 'TernaryPredicate'), valence(A, 3))), [domainV(A, ['$instanceof':'TernaryPredicate', valence:1]), domainV(B, []), forall(A)], ['REL'=A], 'Merge', 'BASE ONTOLOGY', 1763, 'Anonymous', on).
mooCache(subclass('QuaternaryPredicate', 'Predicate'), subclass('QuaternaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1765, 'Anonymous', on).
mooCache(subclass('QuaternaryPredicate', 'QuaternaryRelation'), subclass('QuaternaryPredicate', 'QuaternaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1767, 'Anonymous', on).
mooCache(instance('QuaternaryPredicate', 'InheritableRelation'), instance('QuaternaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1769, 'Anonymous', on).
mooCache(documentation('QuaternaryPredicate', string('"The Class of Predicates that   require four arguments."')), documentation('QuaternaryPredicate', string('"The Class of Predicates that   require four arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1771, 'Anonymous', on).
mooCache(=>(instance(A, 'QuaternaryPredicate'), valence(A, 4)), and(entails(not(valence(A, 4)), not(instance(A, 'QuaternaryPredicate'))), entails(instance(A, 'QuaternaryPredicate'), valence(A, 4))), [domainV(A, ['$instanceof':'QuaternaryPredicate', valence:1]), domainV(B, []), forall(A)], ['REL'=A], 'Merge', 'BASE ONTOLOGY', 1773, 'Anonymous', on).
mooCache(subclass('QuintaryPredicate', 'Predicate'), subclass('QuintaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1775, 'Anonymous', on).
mooCache(subclass('QuintaryPredicate', 'QuintaryRelation'), subclass('QuintaryPredicate', 'QuintaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1777, 'Anonymous', on).
mooCache(instance('QuintaryPredicate', 'InheritableRelation'), instance('QuintaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1779, 'Anonymous', on).
mooCache(documentation('QuintaryPredicate', string('"The Class of Predicates that   require five arguments."')), documentation('QuintaryPredicate', string('"The Class of Predicates that   require five arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1781, 'Anonymous', on).
mooCache(=>(instance(A, 'QuintaryPredicate'), valence(A, 5)), and(entails(not(valence(A, 5)), not(instance(A, 'QuintaryPredicate'))), entails(instance(A, 'QuintaryPredicate'), valence(A, 5))), [domainV(A, ['$instanceof':'QuintaryPredicate', valence:1]), domainV(B, []), forall(A)], ['REL'=A], 'Merge', 'BASE ONTOLOGY', 1783, 'Anonymous', on).
mooCache(subclass('VariableArityRelation', 'Relation'), subclass('VariableArityRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1785, 'Anonymous', on).
mooCache(documentation('VariableArityRelation', string('"The Class of Relations that   do not have a fixed number of arguments."')), documentation('VariableArityRelation', string('"The Class of Relations that   do not have a fixed number of arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1787, 'Anonymous', on).
mooCache(=>(instance(A, 'VariableArityRelation'), not(exists(B, valence(A, B)))), and(entails(valence(A, B), not(instance(A, 'VariableArityRelation'))), entails(instance(A, 'VariableArityRelation'), not(valence(A, B)))), [domainV(B, [valence:2]), domainV(A, ['$instanceof':'VariableArityRelation', valence:1]), domainV(C, []), forall(A), forall(B), forall(B)], ['REL'=A, 'INT'=B], 'Merge', 'BASE ONTOLOGY', 1789, 'Anonymous', on).
mooCache(subclass('RelationExtendedToQuantities', 'Relation'), subclass('RelationExtendedToQuantities', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1791, 'Anonymous', on).
mooCache(instance('RelationExtendedToQuantities', 'InheritableRelation'), instance('RelationExtendedToQuantities', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1793, 'Anonymous', on).
mooCache(documentation('RelationExtendedToQuantities', string('"A   RelationExtendedToQuantities is a Relation that, when it is true on   a sequence of arguments that are RealNumbers, it is also true on a   sequence of ConstantQuantites with those magnitudes in some unit of   measure.  For example, the lessThan relation is extended to quantities.    This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2,   (lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1,   ?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT),   ?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2),   for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.    Note that, when a RelationExtendedToQuantities is extended from   RealNumbers to ConstantQuantities, the ConstantQuantities must be   measured along the same physical dimension."')), documentation('RelationExtendedToQuantities', string('"A   RelationExtendedToQuantities is a Relation that, when it is true on   a sequence of arguments that are RealNumbers, it is also true on a   sequence of ConstantQuantites with those magnitudes in some unit of   measure.  For example, the lessThan relation is extended to quantities.    This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2,   (lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1,   ?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT),   ?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2),   for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.    Note that, when a RelationExtendedToQuantities is extended from   RealNumbers to ConstantQuantities, the ConstantQuantities must be   measured along the same physical dimension."')), [], [], 'Merge', 'BASE ONTOLOGY', 1795, 'Anonymous', on).
mooCache(subclass('Set', 'Class'), subclass('Set', 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1797, 'Anonymous', on).
mooCache(documentation('Set', string('"A Class that satisfies extensionality as well as  other conditions specified by some choice of set theory.  Unlike   Classes generally, Sets need not have an associated condition that   determines their membership.  Rather, they are thought of metaphorically   as `built up\' from some initial stock of objects by means of certain  constructive operations (such as the pairing or power set operations).  Note that extensionality alone is not sufficient for identifying   Classes with Sets, since some Classes (e.g. Entity) cannot be   assumed to be Sets without contradiction."')), documentation('Set', string('"A Class that satisfies extensionality as well as  other conditions specified by some choice of set theory.  Unlike   Classes generally, Sets need not have an associated condition that   determines their membership.  Rather, they are thought of metaphorically   as `built up\' from some initial stock of objects by means of certain  constructive operations (such as the pairing or power set operations).  Note that extensionality alone is not sufficient for identifying   Classes with Sets, since some Classes (e.g. Entity) cannot be   assumed to be Sets without contradiction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1799, 'Anonymous', on).
mooCache(subclass('Proposition', 'Abstract'), subclass('Proposition', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 1801, 'Anonymous', on).
mooCache(documentation('Proposition', string('"Propositions are Abstract entities that   express a complete thought or a set of such thoughts.  As an example,   the formula \'(instance Yojo Cat)\' expresses the Proposition that the   entity named Yojo is an element of the Class of Cats.  Note that   propositions are not restricted to the content expressed by individual   sentences of a Language.  They may encompass the content expressed by   theories, books, and even whole libraries.  It is important to distinguish   Propositions from the ContentBearingObjects that express them.  A   Proposition is a piece of information, e.g. that the cat is on the mat,   but a ContentBearingObject is an Object that represents this information.    A Proposition is an abstraction that may have multiple representations:   strings, sounds, icons, etc.  For example, the Proposition that the cat is   on the mat is represented here as a string of graphical characters displayed   on a monitor and/or printed on paper, but it can be represented by a sequence   of sounds or by some non-latin alphabet or by some cryptographic form"')), documentation('Proposition', string('"Propositions are Abstract entities that   express a complete thought or a set of such thoughts.  As an example,   the formula \'(instance Yojo Cat)\' expresses the Proposition that the   entity named Yojo is an element of the Class of Cats.  Note that   propositions are not restricted to the content expressed by individual   sentences of a Language.  They may encompass the content expressed by   theories, books, and even whole libraries.  It is important to distinguish   Propositions from the ContentBearingObjects that express them.  A   Proposition is a piece of information, e.g. that the cat is on the mat,   but a ContentBearingObject is an Object that represents this information.    A Proposition is an abstraction that may have multiple representations:   strings, sounds, icons, etc.  For example, the Proposition that the cat is   on the mat is represented here as a string of graphical characters displayed   on a monitor and/or printed on paper, but it can be represented by a sequence   of sounds or by some non-latin alphabet or by some cryptographic form"')), [], [], 'Merge', 'BASE ONTOLOGY', 1803, 'Anonymous', on).
mooCache(instance(closedOn, 'BinaryPredicate'), instance(closedOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1805, 'Anonymous', on).
mooCache(instance(closedOn, 'AsymmetricRelation'), instance(closedOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1807, 'Anonymous', on).
mooCache(domain(closedOn, 1, 'Function'), domain(closedOn, 1, 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1809, 'Anonymous', on).
mooCache(domain(closedOn, 2, 'Class'), domain(closedOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1811, 'Anonymous', on).
mooCache(documentation(closedOn, string('"A BinaryFunction is closed on a Class   if it is defined for all instances of the Class and its value is   always an instance of the Class."')), documentation(closedOn, string('"A BinaryFunction is closed on a Class   if it is defined for all instances of the Class and its value is   always an instance of the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 1813, 'Anonymous', on).
mooCache(=>(and(closedOn(A, B), instance(A, 'UnaryFunction')), forall(C, =>(instance(C, B), instance('AssignmentFn'(A, C), B)))), and(entails(and(instance(A, 'UnaryFunction'), and(instance(C, B), not(instance('AssignmentFn'(A, C), B)))), not(closedOn(A, B))), and(entails(and(closedOn(A, B), and(instance(C, B), not(instance('AssignmentFn'(A, C), B)))), not(instance(A, 'UnaryFunction'))), and(entails(and(and(closedOn(A, B), instance(A, 'UnaryFunction')), not(instance('AssignmentFn'(A, C), B))), not(instance(C, B))), entails(and(and(closedOn(A, B), instance(A, 'UnaryFunction')), instance(C, B)), instance('AssignmentFn'(A, C), B))))), [domainV(C, [A:1]), domainV(B, [closedOn:2, instance:2]), domainV(A, ['$instanceof':'UnaryFunction', 'AssignmentFn':1, closedOn:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['FUNCTION'=A, 'CLASS'=B, 'INST'=C], 'Merge', 'BASE ONTOLOGY', 1815, 'Anonymous', on).
mooCache(=>(and(closedOn(A, B), instance(A, 'BinaryFunction')), forall(C, forall(D, =>(and(instance(D, B), instance(C, B)), instance('AssignmentFn'(A, D, C), B))))), and(entails(and(instance(A, 'BinaryFunction'), and(not(instance('AssignmentFn'(A, D, C), B)), and(instance(D, B), instance(C, B)))), not(closedOn(A, B))), and(entails(and(closedOn(A, B), and(not(instance('AssignmentFn'(A, D, C), B)), and(instance(D, B), instance(C, B)))), not(instance(A, 'BinaryFunction'))), and(entails(and(and(closedOn(A, B), instance(A, 'BinaryFunction')), and(instance(D, B), instance(C, B))), instance('AssignmentFn'(A, D, C), B)), and(entails(and(and(closedOn(A, B), instance(A, 'BinaryFunction')), and(not(instance('AssignmentFn'(A, D, C), B)), instance(C, B))), not(instance(D, B))), entails(and(and(closedOn(A, B), instance(A, 'BinaryFunction')), and(not(instance('AssignmentFn'(A, D, C), B)), instance(D, B))), not(instance(C, B))))))), [domainV(D, [A:1]), domainV(C, [A:2]), domainV(B, [closedOn:2, instance:2]), domainV(A, ['$instanceof':'BinaryFunction', 'AssignmentFn':1, closedOn:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['FUNCTION'=A, 'CLASS'=B, 'INST1'=D, 'INST2'=C], 'Merge', 'BASE ONTOLOGY', 1817, 'Anonymous', on).
mooCache(instance(reflexiveOn, 'BinaryPredicate'), instance(reflexiveOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1819, 'Anonymous', on).
mooCache(instance(reflexiveOn, 'AsymmetricRelation'), instance(reflexiveOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1821, 'Anonymous', on).
mooCache(domain(reflexiveOn, 1, 'BinaryRelation'), domain(reflexiveOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1823, 'Anonymous', on).
mooCache(domain(reflexiveOn, 2, 'Class'), domain(reflexiveOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1825, 'Anonymous', on).
mooCache(documentation(reflexiveOn, string('"A BinaryRelation is reflexive on a   Class only if every instance of the Class bears the relation   to itself."')), documentation(reflexiveOn, string('"A BinaryRelation is reflexive on a   Class only if every instance of the Class bears the relation   to itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 1827, 'Anonymous', on).
mooCache(=>(reflexiveOn(A, B), forall(C, =>(instance(C, B), holds(A, C, C)))), and(entails(and(instance(C, B), not(holds(A, C, C))), not(reflexiveOn(A, B))), and(entails(and(reflexiveOn(A, B), not(holds(A, C, C))), not(instance(C, B))), entails(and(reflexiveOn(A, B), instance(C, B)), holds(A, C, C)))), [domainV(C, [A:1, A:2]), domainV(B, [instance:2, reflexiveOn:2]), domainV(A, [holds:1, reflexiveOn:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['RELATION'=A, 'CLASS'=B, 'INST'=C], 'Merge', 'BASE ONTOLOGY', 1829, 'Anonymous', on).
mooCache(instance(irreflexiveOn, 'BinaryPredicate'), instance(irreflexiveOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1831, 'Anonymous', on).
mooCache(instance(irreflexiveOn, 'AsymmetricRelation'), instance(irreflexiveOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1833, 'Anonymous', on).
mooCache(domain(irreflexiveOn, 1, 'BinaryRelation'), domain(irreflexiveOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1835, 'Anonymous', on).
mooCache(domain(irreflexiveOn, 2, 'Class'), domain(irreflexiveOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1837, 'Anonymous', on).
mooCache(documentation(irreflexiveOn, string('"A BinaryRelation is irreflexive on a   Class only if no instance of the Class bears the relation to   itself."')), documentation(irreflexiveOn, string('"A BinaryRelation is irreflexive on a   Class only if no instance of the Class bears the relation to   itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 1839, 'Anonymous', on).
mooCache(=>(irreflexiveOn(A, B), forall(C, =>(instance(C, B), not(holds(A, C, C))))), and(entails(and(instance(C, B), holds(A, C, C)), not(irreflexiveOn(A, B))), and(entails(and(irreflexiveOn(A, B), holds(A, C, C)), not(instance(C, B))), entails(and(irreflexiveOn(A, B), instance(C, B)), not(holds(A, C, C))))), [domainV(C, [A:1, A:2]), domainV(B, [instance:2, irreflexiveOn:2]), domainV(A, [holds:1, irreflexiveOn:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['RELATION'=A, 'CLASS'=B, 'INST'=C], 'Merge', 'BASE ONTOLOGY', 1841, 'Anonymous', on).
mooCache(instance(partialOrderingOn, 'BinaryPredicate'), instance(partialOrderingOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1843, 'Anonymous', on).
mooCache(instance(partialOrderingOn, 'AsymmetricRelation'), instance(partialOrderingOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1845, 'Anonymous', on).
mooCache(domain(partialOrderingOn, 1, 'BinaryRelation'), domain(partialOrderingOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1847, 'Anonymous', on).
mooCache(domain(partialOrderingOn, 2, 'Class'), domain(partialOrderingOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1849, 'Anonymous', on).
mooCache(documentation(partialOrderingOn, string('"A BinaryRelation is a partial   ordering on a Class only if the relation is reflexiveOn the   Class, and it is both an AntisymmetricRelation, and a   TransitiveRelation."')), documentation(partialOrderingOn, string('"A BinaryRelation is a partial   ordering on a Class only if the relation is reflexiveOn the   Class, and it is both an AntisymmetricRelation, and a   TransitiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1851, 'Anonymous', on).
mooCache(=>(partialOrderingOn(A, B), and(reflexiveOn(A, B), and(instance(A, 'TransitiveRelation'), instance(A, 'AntisymmetricRelation')))), and(and(entails(not(reflexiveOn(A, B)), not(partialOrderingOn(A, B))), entails(partialOrderingOn(A, B), reflexiveOn(A, B))), and(and(entails(not(instance(A, 'TransitiveRelation')), not(partialOrderingOn(A, B))), entails(partialOrderingOn(A, B), instance(A, 'TransitiveRelation'))), and(entails(not(instance(A, 'AntisymmetricRelation')), not(partialOrderingOn(A, B))), entails(partialOrderingOn(A, B), instance(A, 'AntisymmetricRelation'))))), [domainV(B, [partialOrderingOn:2, reflexiveOn:2]), domainV(A, ['$instanceof':'AntisymmetricRelation', '$instanceof':'TransitiveRelation', partialOrderingOn:1, reflexiveOn:1]), domainV(C, []), forall(A), forall(B)], ['RELATION'=A, 'CLASS'=B], 'Merge', 'BASE ONTOLOGY', 1853, 'Anonymous', on).
mooCache(instance(totalOrderingOn, 'BinaryPredicate'), instance(totalOrderingOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1855, 'Anonymous', on).
mooCache(instance(totalOrderingOn, 'AsymmetricRelation'), instance(totalOrderingOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1857, 'Anonymous', on).
mooCache(domain(totalOrderingOn, 1, 'BinaryRelation'), domain(totalOrderingOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1859, 'Anonymous', on).
mooCache(domain(totalOrderingOn, 2, 'Class'), domain(totalOrderingOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1861, 'Anonymous', on).
mooCache(documentation(totalOrderingOn, string('"A BinaryRelation ?REL is a total   ordering on a Class only if it is a partial ordering for which either   (?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2   in the Class."')), documentation(totalOrderingOn, string('"A BinaryRelation ?REL is a total   ordering on a Class only if it is a partial ordering for which either   (?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2   in the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 1863, 'Anonymous', on).
mooCache(<=>(totalOrderingOn(A, B), and(partialOrderingOn(A, B), trichotomizingOn(A, B))), and(and(entails(totalOrderingOn(A, B), partialOrderingOn(A, B)), and(entails(totalOrderingOn(A, B), trichotomizingOn(A, B)), entails(or(not(partialOrderingOn(A, B)), not(trichotomizingOn(A, B))), not(totalOrderingOn(A, B))))), and(entails(and(partialOrderingOn(A, B), trichotomizingOn(A, B)), totalOrderingOn(A, B)), and(entails(and(not(totalOrderingOn(A, B)), trichotomizingOn(A, B)), not(partialOrderingOn(A, B))), entails(and(not(totalOrderingOn(A, B)), partialOrderingOn(A, B)), not(trichotomizingOn(A, B)))))), [domainV(B, [partialOrderingOn:2, totalOrderingOn:2, trichotomizingOn:2]), domainV(A, [partialOrderingOn:1, totalOrderingOn:1, trichotomizingOn:1]), domainV(C, []), forall(A), forall(B)], ['RELATION'=A, 'CLASS'=B], 'Merge', 'BASE ONTOLOGY', 1865, 'Anonymous', on).
mooCache(instance(trichotomizingOn, 'BinaryPredicate'), instance(trichotomizingOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1867, 'Anonymous', on).
mooCache(instance(trichotomizingOn, 'AsymmetricRelation'), instance(trichotomizingOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1869, 'Anonymous', on).
mooCache(domain(trichotomizingOn, 1, 'BinaryRelation'), domain(trichotomizingOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1871, 'Anonymous', on).
mooCache(domain(trichotomizingOn, 2, 'Class'), domain(trichotomizingOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1873, 'Anonymous', on).
mooCache(documentation(trichotomizingOn, string('"A BinaryRelation ?REL is   trichotomizing on a Class only if, for all instances ?INST1 and ?INST2   of the Class, at least one of the following holds:  (?REL ?INST1 ?INST2),  (?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2)."')), documentation(trichotomizingOn, string('"A BinaryRelation ?REL is   trichotomizing on a Class only if, for all instances ?INST1 and ?INST2   of the Class, at least one of the following holds:  (?REL ?INST1 ?INST2),  (?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1875, 'Anonymous', on).
mooCache(=>(trichotomizingOn(A, B), forall(C, forall(D, =>(and(instance(D, B), instance(C, B)), or(holds(A, D, C), or(holds(A, C, D), equal(D, C))))))), and(entails(and(and(instance(D, B), instance(C, B)), and(not(holds(A, D, C)), and(not(holds(A, C, D)), not(equal(D, C))))), not(trichotomizingOn(A, B))), and(entails(and(trichotomizingOn(A, B), and(instance(C, B), and(not(holds(A, D, C)), and(not(holds(A, C, D)), not(equal(D, C)))))), not(instance(D, B))), and(entails(and(trichotomizingOn(A, B), and(instance(D, B), and(not(holds(A, D, C)), and(not(holds(A, C, D)), not(equal(D, C)))))), not(instance(C, B))), and(entails(and(trichotomizingOn(A, B), and(and(instance(D, B), instance(C, B)), and(not(holds(A, C, D)), not(equal(D, C))))), holds(A, D, C)), and(entails(and(trichotomizingOn(A, B), and(and(instance(D, B), instance(C, B)), and(not(holds(A, D, C)), not(equal(D, C))))), holds(A, C, D)), entails(and(trichotomizingOn(A, B), and(and(instance(D, B), instance(C, B)), and(not(holds(A, D, C)), not(holds(A, C, D))))), equal(D, C))))))), [domainV(D, [A:1, A:2]), domainV(C, [A:1, A:2]), domainV(B, [instance:2, trichotomizingOn:2]), domainV(A, [holds:1, trichotomizingOn:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['RELATION'=A, 'CLASS'=B, 'INST1'=D, 'INST2'=C], 'Merge', 'BASE ONTOLOGY', 1877, 'Anonymous', on).
mooCache(instance(equivalenceRelationOn, 'BinaryPredicate'), instance(equivalenceRelationOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1879, 'Anonymous', on).
mooCache(instance(equivalenceRelationOn, 'AsymmetricRelation'), instance(equivalenceRelationOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1881, 'Anonymous', on).
mooCache(domain(equivalenceRelationOn, 1, 'BinaryRelation'), domain(equivalenceRelationOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1883, 'Anonymous', on).
mooCache(domain(equivalenceRelationOn, 2, 'Class'), domain(equivalenceRelationOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1885, 'Anonymous', on).
mooCache(documentation(equivalenceRelationOn, string('"A BinaryRelation is an   equivalenceRelationOn a Class only if the relation is reflexiveOn   the Class and it is both a TransitiveRelation and a   SymmetricRelation."')), documentation(equivalenceRelationOn, string('"A BinaryRelation is an   equivalenceRelationOn a Class only if the relation is reflexiveOn   the Class and it is both a TransitiveRelation and a   SymmetricRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1887, 'Anonymous', on).
mooCache(=>(equivalenceRelationOn(A, B), and(instance(A, 'TransitiveRelation'), and(instance(A, 'SymmetricRelation'), reflexiveOn(A, B)))), and(and(entails(not(instance(A, 'TransitiveRelation')), not(equivalenceRelationOn(A, B))), entails(equivalenceRelationOn(A, B), instance(A, 'TransitiveRelation'))), and(and(entails(not(instance(A, 'SymmetricRelation')), not(equivalenceRelationOn(A, B))), entails(equivalenceRelationOn(A, B), instance(A, 'SymmetricRelation'))), and(entails(not(reflexiveOn(A, B)), not(equivalenceRelationOn(A, B))), entails(equivalenceRelationOn(A, B), reflexiveOn(A, B))))), [domainV(B, [equivalenceRelationOn:2, reflexiveOn:2]), domainV(A, ['$instanceof':'SymmetricRelation', '$instanceof':'TransitiveRelation', equivalenceRelationOn:1, reflexiveOn:1]), domainV(C, []), forall(A), forall(B)], ['RELATION'=A, 'CLASS'=B], 'Merge', 'BASE ONTOLOGY', 1889, 'Anonymous', on).
mooCache(instance(distributes, 'BinaryPredicate'), instance(distributes, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1891, 'Anonymous', on).
mooCache(instance(distributes, 'BinaryRelation'), instance(distributes, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1893, 'Anonymous', on).
mooCache(domain(distributes, 1, 'BinaryFunction'), domain(distributes, 1, 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1895, 'Anonymous', on).
mooCache(domain(distributes, 2, 'BinaryFunction'), domain(distributes, 2, 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1897, 'Anonymous', on).
mooCache(documentation(distributes, string('"A BinaryFunction ?FUNCTION1 is   distributive over another BinaryFunction ?FUNCTION2 just in case   (?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to   (?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)),   for all ?INST1, ?INST2, and ?INST3."')), documentation(distributes, string('"A BinaryFunction ?FUNCTION1 is   distributive over another BinaryFunction ?FUNCTION2 just in case   (?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to   (?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)),   for all ?INST1, ?INST2, and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1899, 'Anonymous', on).
mooCache(=>(distributes(A, B), forall(C, forall(D, forall(E, =>(and(instance(E, 'DomainFn'(A)), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), and(instance(D, 'DomainFn'(B)), instance(C, 'DomainFn'(B))))))), equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))))))), and(entails(and(not(equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(instance(E, 'DomainFn'(A)), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), and(instance(D, 'DomainFn'(B)), instance(C, 'DomainFn'(B)))))))), not(distributes(A, B))), and(entails(and(distributes(A, B), and(instance(E, 'DomainFn'(A)), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), and(instance(D, 'DomainFn'(B)), instance(C, 'DomainFn'(B)))))))), equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(entails(and(distributes(A, B), and(not(equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), and(instance(D, 'DomainFn'(B)), instance(C, 'DomainFn'(B)))))))), not(instance(E, 'DomainFn'(A)))), and(entails(and(distributes(A, B), and(not(equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(instance(E, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), and(instance(D, 'DomainFn'(B)), instance(C, 'DomainFn'(B)))))))), not(instance(D, 'DomainFn'(A)))), and(entails(and(distributes(A, B), and(not(equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(instance(E, 'DomainFn'(A)), and(instance(D, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), and(instance(D, 'DomainFn'(B)), instance(C, 'DomainFn'(B)))))))), not(instance(C, 'DomainFn'(A)))), and(entails(and(distributes(A, B), and(not(equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(instance(E, 'DomainFn'(A)), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(D, 'DomainFn'(B)), instance(C, 'DomainFn'(B)))))))), not(instance(E, 'DomainFn'(B)))), and(entails(and(distributes(A, B), and(not(equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(instance(E, 'DomainFn'(A)), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), instance(C, 'DomainFn'(B)))))))), not(instance(D, 'DomainFn'(B)))), entails(and(distributes(A, B), and(not(equal('AssignmentFn'(A, E, 'AssignmentFn'(B, D, C)), 'AssignmentFn'(B, 'AssignmentFn'(A, E, D), 'AssignmentFn'(A, E, C)))), and(instance(E, 'DomainFn'(A)), and(instance(D, 'DomainFn'(A)), and(instance(C, 'DomainFn'(A)), and(instance(E, 'DomainFn'(B)), instance(D, 'DomainFn'(B)))))))), not(instance(C, 'DomainFn'(B))))))))))), [domainV(E, [A:1]), domainV(D, [A:2, B:1]), domainV(C, [A:2, B:2]), domainV(B, ['AssignmentFn':1, 'DomainFn':1, distributes:2]), domainV(A, ['AssignmentFn':1, 'DomainFn':1, distributes:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['FUNCTION1'=A, 'FUNCTION2'=B, 'INST1'=E, 'INST2'=D, 'INST3'=C], 'Merge', 'BASE ONTOLOGY', 1901, 'Anonymous', on).
mooCache(instance(causes, 'BinaryPredicate'), instance(causes, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1903, 'Anonymous', on).
mooCache(instance(causes, 'AsymmetricRelation'), instance(causes, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1905, 'Anonymous', on).
mooCache(domain(causes, 1, 'Process'), domain(causes, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1907, 'Anonymous', on).
mooCache(domain(causes, 2, 'Process'), domain(causes, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1909, 'Anonymous', on).
mooCache(documentation(causes, string('"The causation relation between situations or   propositions.  (causes ?PROCESS1 ?PROCESS2) means that the state of   affairs expressed by ?PROCESS1 brings about the state of affairs   expressed by ?PROCESS2."')), documentation(causes, string('"The causation relation between situations or   propositions.  (causes ?PROCESS1 ?PROCESS2) means that the state of   affairs expressed by ?PROCESS1 brings about the state of affairs   expressed by ?PROCESS2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1911, 'Anonymous', on).
mooCache(=>(instance(A, 'Process'), exists(B, causes(B, A))), and(entails(not(causes(B, A)), not(instance(A, 'Process'))), entails(and(instance(A, 'Process'), '$existential'(B, '?PROC2', causes('?PROC2', A))), causes(B, A))), [domainV(B, [causes:1]), domainV(A, ['$instanceof':'Process', causes:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PROC2', causes('?PROC2', A)))], ['PROC1'=A, 'PROC2'=B], 'Merge', 'BASE ONTOLOGY', 1913, 'Anonymous', on).
mooCache(instance(copy, 'BinaryPredicate'), instance(copy, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1915, 'Anonymous', on).
mooCache(instance(copy, 'EquivalenceRelation'), instance(copy, 'EquivalenceRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1917, 'Anonymous', on).
mooCache(domain(copy, 1, 'Object'), domain(copy, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1919, 'Anonymous', on).
mooCache(domain(copy, 2, 'Object'), domain(copy, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1921, 'Anonymous', on).
mooCache(documentation(copy, string('"relates an Object to an exact copy of the   Object, where an exact copy is indistinguishable from the original   with regard to every property except (possibly) spatial and/or temporal   location."')), documentation(copy, string('"relates an Object to an exact copy of the   Object, where an exact copy is indistinguishable from the original   with regard to every property except (possibly) spatial and/or temporal   location."')), [], [], 'Merge', 'BASE ONTOLOGY', 1923, 'Anonymous', on).
mooCache(=>(copy(A, B), forall(C, =>(attribute(A, C), attribute(B, C)))), and(entails(and(attribute(A, C), not(attribute(B, C))), not(copy(A, B))), and(entails(and(copy(A, B), not(attribute(B, C))), not(attribute(A, C))), entails(and(copy(A, B), attribute(A, C)), attribute(B, C)))), [domainV(C, [attribute:2]), domainV(B, [attribute:1, copy:2]), domainV(A, [attribute:1, copy:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'OBJ2'=B, 'ATTR'=C], 'Merge', 'BASE ONTOLOGY', 1925, 'Anonymous', on).
mooCache(instance(time, 'BinaryPredicate'), instance(time, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1927, 'Anonymous', on).
mooCache(instance(time, 'TemporalRelation'), instance(time, 'TemporalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1929, 'Anonymous', on).
mooCache(instance(time, 'AsymmetricRelation'), instance(time, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1931, 'Anonymous', on).
mooCache(domain(time, 1, 'Physical'), domain(time, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 1933, 'Anonymous', on).
mooCache(domain(time, 2, 'TimePosition'), domain(time, 2, 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1935, 'Anonymous', on).
mooCache(documentation(time, string('"This relation holds between an instance of   Physical and an instance of TimePosition just in case the temporal   lifespan of the former includes the latter.  The constants located   and time are the basic spatial and temporal predicates,   respectively."')), documentation(time, string('"This relation holds between an instance of   Physical and an instance of TimePosition just in case the temporal   lifespan of the former includes the latter.  The constants located   and time are the basic spatial and temporal predicates,   respectively."')), [], [], 'Merge', 'BASE ONTOLOGY', 1937, 'Anonymous', on).
mooCache(instance(holdsDuring, 'BinaryPredicate'), instance(holdsDuring, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1939, 'Anonymous', on).
mooCache(instance(holdsDuring, 'AsymmetricRelation'), instance(holdsDuring, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1941, 'Anonymous', on).
mooCache(domain(holdsDuring, 1, 'TimePosition'), domain(holdsDuring, 1, 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1943, 'Anonymous', on).
mooCache(domain(holdsDuring, 2, 'Formula'), domain(holdsDuring, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1945, 'Anonymous', on).
mooCache(documentation(holdsDuring, string('"(holdsDuring ?TIME ?FORMULA) means that the   proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note   that this implies that ?FORMULA is true at every TimePoint which is a   temporalPart of ?TIME."')), documentation(holdsDuring, string('"(holdsDuring ?TIME ?FORMULA) means that the   proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note   that this implies that ?FORMULA is true at every TimePoint which is a   temporalPart of ?TIME."')), [], [], 'Merge', 'BASE ONTOLOGY', 1947, 'Anonymous', on).
mooCache(=>(and(holdsDuring(A, B), entails(B, C)), holdsDuring(A, C)), and(entails(and(holdsDuring(A, B), entails(B, C)), holdsDuring(A, C)), and(entails(and(not(holdsDuring(A, C)), entails(B, C)), not(holdsDuring(A, B))), entails(and(not(holdsDuring(A, C)), holdsDuring(A, B)), not(entails(B, C))))), [domainV(C, [entails:2, holdsDuring:2]), domainV(B, [entails:1, holdsDuring:2]), domainV(A, [holdsDuring:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TIME'=A, 'SITUATION1'=B, 'SITUATION2'=C], 'Merge', 'BASE ONTOLOGY', 1949, 'Anonymous', on).
mooCache(=>(holdsDuring(A, not(B)), not(holdsDuring(A, B))), and(entails(holdsDuring(A, B), not(holdsDuring(A, not(B)))), entails(holdsDuring(A, not(B)), not(holdsDuring(A, B)))), [domainV(B, [holdsDuring:2]), domainV(A, [holdsDuring:1]), domainV(C, []), forall(A), forall(B)], ['TIME'=A, 'SITUATION'=B], 'Merge', 'BASE ONTOLOGY', 1951, 'Anonymous', on).
mooCache(instance(capability, 'TernaryPredicate'), instance(capability, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1953, 'Anonymous', on).
mooCache(domainSubclass(capability, 1, 'Process'), domainSubclass(capability, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1955, 'Anonymous', on).
mooCache(domain(capability, 2, 'CaseRole'), domain(capability, 2, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1957, 'Anonymous', on).
mooCache(domain(capability, 3, 'Object'), domain(capability, 3, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1959, 'Anonymous', on).
mooCache(documentation(capability, string('"(capability ?PROCESS ?ROLE ?OBJ) means   that ?OBJ has the ability to play the role of ?ROLE in Processes of   type ?PROCESS."')), documentation(capability, string('"(capability ?PROCESS ?ROLE ?OBJ) means   that ?OBJ has the ability to play the role of ?ROLE in Processes of   type ?PROCESS."')), [], [], 'Merge', 'BASE ONTOLOGY', 1961, 'Anonymous', on).
mooCache(=>(and(instance(A, 'CaseRole'), and(holds(A, B, C), instance(B, D))), capability(D, A, C)), and(entails(and(instance(A, 'CaseRole'), and(holds(A, B, C), instance(B, D))), capability(D, A, C)), and(entails(and(not(capability(D, A, C)), and(holds(A, B, C), instance(B, D))), not(instance(A, 'CaseRole'))), and(entails(and(not(capability(D, A, C)), and(instance(A, 'CaseRole'), instance(B, D))), not(holds(A, B, C))), entails(and(not(capability(D, A, C)), and(instance(A, 'CaseRole'), holds(A, B, C))), not(instance(B, D)))))), [domainV(D, [capability:1, instance:2]), domainV(C, [capability:3, A:2]), domainV(B, [A:1]), domainV(A, ['$instanceof':'CaseRole', capability:2, holds:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['ROLE'=A, 'ARG1'=B, 'ARG2'=C, 'PROC'=D], 'Merge', 'BASE ONTOLOGY', 1963, 'Anonymous', on).
mooCache(instance(exploits, 'BinaryPredicate'), instance(exploits, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1965, 'Anonymous', on).
mooCache(instance(exploits, 'AsymmetricRelation'), instance(exploits, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1967, 'Anonymous', on).
mooCache(domain(exploits, 1, 'Object'), domain(exploits, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1969, 'Anonymous', on).
mooCache(domain(exploits, 2, 'Agent'), domain(exploits, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1971, 'Anonymous', on).
mooCache(documentation(exploits, string('"(exploits ?OBJ ?AGENT) means that ?OBJ is used   by ?AGENT as a resource in an unspecified instance of Process.  This   Predicate, as its corresponding axiom indicates, is a composition of the   relations agent and resource."')), documentation(exploits, string('"(exploits ?OBJ ?AGENT) means that ?OBJ is used   by ?AGENT as a resource in an unspecified instance of Process.  This   Predicate, as its corresponding axiom indicates, is a composition of the   relations agent and resource."')), [], [], 'Merge', 'BASE ONTOLOGY', 1973, 'Anonymous', on).
mooCache(=>(exploits(A, B), exists(C, and(agent(C, B), resource(C, A)))), and(and(entails(not(agent(C, B)), not(exploits(A, B))), entails(and(exploits(A, B), '$existential'(C, '?PROCESS', and(agent('?PROCESS', B), resource('?PROCESS', A)))), agent(C, B))), and(entails(not(resource(C, A)), not(exploits(A, B))), entails(and(exploits(A, B), '$existential'(C, '?PROCESS', and(agent('?PROCESS', B), resource('?PROCESS', A)))), resource(C, A)))), [domainV(C, [agent:1, resource:1]), domainV(B, [agent:2, exploits:2]), domainV(A, [exploits:1, resource:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROCESS', and(agent('?PROCESS', B), resource('?PROCESS', A))))], ['OBJ'=A, 'AGENT'=B, 'PROCESS'=C], 'Merge', 'BASE ONTOLOGY', 1975, 'Anonymous', on).
mooCache(instance(hasPurpose, 'BinaryPredicate'), instance(hasPurpose, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1977, 'Anonymous', on).
mooCache(instance(hasPurpose, 'AsymmetricRelation'), instance(hasPurpose, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1979, 'Anonymous', on).
mooCache(domain(hasPurpose, 1, 'Physical'), domain(hasPurpose, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 1981, 'Anonymous', on).
mooCache(domain(hasPurpose, 2, 'Formula'), domain(hasPurpose, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1983, 'Anonymous', on).
mooCache(documentation(hasPurpose, string('"This Predicate expresses the concept of a   conventional goal, i.e. a goal with a neutralized agent\'s intention.    Accordingly, (hasPurpose ?THING ?FORMULA) means that the instance of   Physical ?THING has, as its purpose, the Proposition expressed by   ?FORMULA.  Note that there is an important difference in meaning between   the Predicates hasPurpose and result.  Although the second argument   of the latter can satisfy the second argument of the former,   a conventional goal is an expected and desired outcome, while a result   may be neither expected nor desired.  For example, a machine process may   have outcomes but no goals, aimless wandering may have an outcome but no   goal; a learning process may have goals with no outcomes, and so on."')), documentation(hasPurpose, string('"This Predicate expresses the concept of a   conventional goal, i.e. a goal with a neutralized agent\'s intention.    Accordingly, (hasPurpose ?THING ?FORMULA) means that the instance of   Physical ?THING has, as its purpose, the Proposition expressed by   ?FORMULA.  Note that there is an important difference in meaning between   the Predicates hasPurpose and result.  Although the second argument   of the latter can satisfy the second argument of the former,   a conventional goal is an expected and desired outcome, while a result   may be neither expected nor desired.  For example, a machine process may   have outcomes but no goals, aimless wandering may have an outcome but no   goal; a learning process may have goals with no outcomes, and so on."')), [], [], 'Merge', 'BASE ONTOLOGY', 1985, 'Anonymous', on).
mooCache(instance(hasPurposeForAgent, 'TernaryPredicate'), instance(hasPurposeForAgent, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1987, 'Anonymous', on).
mooCache(domain(hasPurposeForAgent, 1, 'Physical'), domain(hasPurposeForAgent, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 1989, 'Anonymous', on).
mooCache(domain(hasPurposeForAgent, 2, 'Formula'), domain(hasPurposeForAgent, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1991, 'Anonymous', on).
mooCache(domain(hasPurposeForAgent, 3, 'Agent'), domain(hasPurposeForAgent, 3, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1993, 'Anonymous', on).
mooCache(documentation(hasPurposeForAgent, string('"Expresses a cognitive attitude of an   agent with respect to a particular instance of Physical.  More precisely,   (hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of   ?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex   issues are involved here.  In particular, the rules of inference of the   first order predicate calculus are not truth-preserving for the second   argument position of this Predicate."')), documentation(hasPurposeForAgent, string('"Expresses a cognitive attitude of an   agent with respect to a particular instance of Physical.  More precisely,   (hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of   ?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex   issues are involved here.  In particular, the rules of inference of the   first order predicate calculus are not truth-preserving for the second   argument position of this Predicate."')), [], [], 'Merge', 'BASE ONTOLOGY', 1995, 'Anonymous', on).
mooCache(=>(hasPurpose(A, B), exists(C, hasPurposeForAgent(A, B, C))), and(entails(not(hasPurposeForAgent(A, B, C)), not(hasPurpose(A, B))), entails(and(hasPurpose(A, B), '$existential'(C, '?AGENT', hasPurposeForAgent(A, B, '?AGENT'))), hasPurposeForAgent(A, B, C))), [domainV(C, [hasPurposeForAgent:3]), domainV(B, [hasPurpose:2, hasPurposeForAgent:2]), domainV(A, [hasPurpose:1, hasPurposeForAgent:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?AGENT', hasPurposeForAgent(A, B, '?AGENT')))], ['THING'=A, 'PURPOSE'=B, 'AGENT'=C], 'Merge', 'BASE ONTOLOGY', 1997, 'Anonymous', on).
mooCache(instance(hasSkill, 'BinaryPredicate'), instance(hasSkill, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1999, 'Anonymous', on).
mooCache(instance(hasSkill, 'AsymmetricRelation'), instance(hasSkill, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2001, 'Anonymous', on).
mooCache(domainSubclass(hasSkill, 1, 'Process'), domainSubclass(hasSkill, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2003, 'Anonymous', on).
mooCache(domain(hasSkill, 2, 'Agent'), domain(hasSkill, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2005, 'Anonymous', on).
mooCache(documentation(hasSkill, string('"Similar to the capability Predicate   with the additional restriction that the ability be practised/  demonstrated to some measurable degree."')), documentation(hasSkill, string('"Similar to the capability Predicate   with the additional restriction that the ability be practised/  demonstrated to some measurable degree."')), [], [], 'Merge', 'BASE ONTOLOGY', 2007, 'Anonymous', on).
mooCache(=>(hasSkill(A, B), capability(A, agent, B)), and(entails(not(capability(A, agent, B)), not(hasSkill(A, B))), entails(hasSkill(A, B), capability(A, agent, B))), [domainV(B, [capability:3, hasSkill:2]), domainV(A, [capability:1, hasSkill:1]), domainV(C, []), forall(A), forall(B)], ['PROC'=A, 'AGENT'=B], 'Merge', 'BASE ONTOLOGY', 2009, 'Anonymous', on).
mooCache(instance(holdsRight, 'BinaryPredicate'), instance(holdsRight, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2011, 'Anonymous', on).
mooCache(instance(holdsRight, 'AsymmetricRelation'), instance(holdsRight, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2013, 'Anonymous', on).
mooCache(domainSubclass(holdsRight, 1, 'Process'), domainSubclass(holdsRight, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2015, 'Anonymous', on).
mooCache(domain(holdsRight, 2, 'CognitiveAgent'), domain(holdsRight, 2, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2017, 'Anonymous', on).
mooCache(documentation(holdsRight, string('"Expresses a relationship between a subclass   of Process and a CognitiveAgent whereby the CognitiveAgent has   the right to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), documentation(holdsRight, string('"Expresses a relationship between a subclass   of Process and a CognitiveAgent whereby the CognitiveAgent has   the right to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2019, 'Anonymous', on).
mooCache(=>(holdsRight(A, B), capability(A, agent, B)), and(entails(not(capability(A, agent, B)), not(holdsRight(A, B))), entails(holdsRight(A, B), capability(A, agent, B))), [domainV(B, [capability:3, holdsRight:2]), domainV(A, [capability:1, holdsRight:1]), domainV(C, []), forall(A), forall(B)], ['PROCESS'=A, 'AGENT'=B], 'Merge', 'BASE ONTOLOGY', 2021, 'Anonymous', on).
mooCache(instance(confersRight, 'TernaryPredicate'), instance(confersRight, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2023, 'Anonymous', on).
mooCache(domainSubclass(confersRight, 1, 'Process'), domainSubclass(confersRight, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2025, 'Anonymous', on).
mooCache(domain(confersRight, 2, 'Entity'), domain(confersRight, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2027, 'Anonymous', on).
mooCache(domain(confersRight, 3, 'CognitiveAgent'), domain(confersRight, 3, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2029, 'Anonymous', on).
mooCache(documentation(confersRight, string('"Expresses the relationship between a subclass   of Process, an Entity, and a CognitiveAgent when the Entity   authorizes the CognitiveAgent to perform instances of the Process type   specified, i.e. to be an agent of instances of the Process type."')), documentation(confersRight, string('"Expresses the relationship between a subclass   of Process, an Entity, and a CognitiveAgent when the Entity   authorizes the CognitiveAgent to perform instances of the Process type   specified, i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2031, 'Anonymous', on).
mooCache(=>(confersRight(A, B, C), holdsRight(A, C)), and(entails(not(holdsRight(A, C)), not(confersRight(A, B, C))), entails(confersRight(A, B, C), holdsRight(A, C))), [domainV(C, [confersRight:3, holdsRight:2]), domainV(B, [confersRight:2]), domainV(A, [confersRight:1, holdsRight:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PROCESS'=A, 'AGENT1'=B, 'AGENT2'=C], 'Merge', 'BASE ONTOLOGY', 2033, 'Anonymous', on).
mooCache(instance(holdsObligation, 'BinaryPredicate'), instance(holdsObligation, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2035, 'Anonymous', on).
mooCache(instance(holdsObligation, 'AsymmetricRelation'), instance(holdsObligation, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2037, 'Anonymous', on).
mooCache(domainSubclass(holdsObligation, 1, 'Process'), domainSubclass(holdsObligation, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2039, 'Anonymous', on).
mooCache(domain(holdsObligation, 2, 'CognitiveAgent'), domain(holdsObligation, 2, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2041, 'Anonymous', on).
mooCache(relatedInternalConcept(holdsObligation, holdsRight), relatedInternalConcept(holdsObligation, holdsRight), [], [], 'Merge', 'BASE ONTOLOGY', 2043, 'Anonymous', on).
mooCache(documentation(holdsObligation, string('"Expresses a relationship between a   subclass of Process and a CognitiveAgent whereby the CognitiveAgent   has the obligation to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), documentation(holdsObligation, string('"Expresses a relationship between a   subclass of Process and a CognitiveAgent whereby the CognitiveAgent   has the obligation to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2045, 'Anonymous', on).
mooCache(=>(holdsObligation(A, B), capability(A, agent, B)), and(entails(not(capability(A, agent, B)), not(holdsObligation(A, B))), entails(holdsObligation(A, B), capability(A, agent, B))), [domainV(B, [capability:3, holdsObligation:2]), domainV(A, [capability:1, holdsObligation:1]), domainV(C, []), forall(A), forall(B)], ['PROCESS'=A, 'AGENT'=B], 'Merge', 'BASE ONTOLOGY', 2047, 'Anonymous', on).
mooCache(instance(confersObligation, 'TernaryPredicate'), instance(confersObligation, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2049, 'Anonymous', on).
mooCache(domainSubclass(confersObligation, 1, 'Process'), domainSubclass(confersObligation, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2051, 'Anonymous', on).
mooCache(domain(confersObligation, 2, 'Entity'), domain(confersObligation, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2053, 'Anonymous', on).
mooCache(domain(confersObligation, 3, 'CognitiveAgent'), domain(confersObligation, 3, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2055, 'Anonymous', on).
mooCache(relatedInternalConcept(confersObligation, confersRight), relatedInternalConcept(confersObligation, confersRight), [], [], 'Merge', 'BASE ONTOLOGY', 2057, 'Anonymous', on).
mooCache(documentation(confersObligation, string('"Expresses the relationship between a   subclass of Process, an Entity, and a CognitiveAgent when the   Entity obligates the CognitiveAgent to perform instances of the Process   type specified, i.e. to be an agent of instances of the Process type."')), documentation(confersObligation, string('"Expresses the relationship between a   subclass of Process, an Entity, and a CognitiveAgent when the   Entity obligates the CognitiveAgent to perform instances of the Process   type specified, i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2059, 'Anonymous', on).
mooCache(=>(confersObligation(A, B, C), holdsObligation(A, C)), and(entails(not(holdsObligation(A, C)), not(confersObligation(A, B, C))), entails(confersObligation(A, B, C), holdsObligation(A, C))), [domainV(C, [confersObligation:3, holdsObligation:2]), domainV(B, [confersObligation:2]), domainV(A, [confersObligation:1, holdsObligation:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PROCESS'=A, 'AGENT1'=B, 'AGENT2'=C], 'Merge', 'BASE ONTOLOGY', 2061, 'Anonymous', on).
mooCache(instance(located, 'PartialOrderingRelation'), instance(located, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2063, 'Anonymous', on).
mooCache(subrelation(located, partlyLocated), subrelation(located, partlyLocated), [], [], 'Merge', 'BASE ONTOLOGY', 2065, 'Anonymous', on).
mooCache(domain(located, 1, 'Physical'), domain(located, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2067, 'Anonymous', on).
mooCache(domain(located, 2, 'Object'), domain(located, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2069, 'Anonymous', on).
mooCache(relatedInternalConcept(located, time), relatedInternalConcept(located, time), [], [], 'Merge', 'BASE ONTOLOGY', 2071, 'Anonymous', on).
mooCache(documentation(located, string('"A very general predicate.  (located   ?PHYS ?OBJ) means that ?PHYS is situated at ?OBJ, in some sense.  The   Predicates located and time are spatial and temporal   predicates, respectively."')), documentation(located, string('"A very general predicate.  (located   ?PHYS ?OBJ) means that ?PHYS is situated at ?OBJ, in some sense.  The   Predicates located and time are spatial and temporal   predicates, respectively."')), [], [], 'Merge', 'BASE ONTOLOGY', 2073, 'Anonymous', on).
mooCache(=>(located(A, B), forall(C, =>(part(C, A), located(C, B)))), and(entails(and(part(C, A), not(located(C, B))), not(located(A, B))), and(entails(and(located(A, B), not(located(C, B))), not(part(C, A))), entails(and(located(A, B), part(C, A)), located(C, B)))), [domainV(C, [located:1, part:1]), domainV(B, [located:2]), domainV(A, [located:1, part:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ'=A, 'REGION'=B, 'SUBOBJ'=C], 'Merge', 'BASE ONTOLOGY', 2075, 'Anonymous', on).
mooCache(instance(partlyLocated, 'SpatialRelation'), instance(partlyLocated, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2077, 'Anonymous', on).
mooCache(instance(partlyLocated, 'ReflexiveRelation'), instance(partlyLocated, 'ReflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2079, 'Anonymous', on).
mooCache(instance(partlyLocated, 'BinaryPredicate'), instance(partlyLocated, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2081, 'Anonymous', on).
mooCache(domain(partlyLocated, 1, 'Object'), domain(partlyLocated, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2083, 'Anonymous', on).
mooCache(domain(partlyLocated, 2, 'Region'), domain(partlyLocated, 2, 'Region'), [], [], 'Merge', 'BASE ONTOLOGY', 2085, 'Anonymous', on).
mooCache(documentation(partlyLocated, string('"The predicate of partial localization.    For example, Istanbul is partly located in Asia.  Note that this is the   most basic localization relation:  located and exactlyLocated   are both subrelations of partlyLocated."')), documentation(partlyLocated, string('"The predicate of partial localization.    For example, Istanbul is partly located in Asia.  Note that this is the   most basic localization relation:  located and exactlyLocated   are both subrelations of partlyLocated."')), [], [], 'Merge', 'BASE ONTOLOGY', 2087, 'Anonymous', on).
mooCache(=>(partlyLocated(A, B), exists(C, and(part(C, A), exactlyLocated(C, B)))), and(and(entails(not(part(C, A)), not(partlyLocated(A, B))), entails(and(partlyLocated(A, B), '$existential'(C, '?SUBOBJ', and(part('?SUBOBJ', A), exactlyLocated('?SUBOBJ', B)))), part(C, A))), and(entails(not(exactlyLocated(C, B)), not(partlyLocated(A, B))), entails(and(partlyLocated(A, B), '$existential'(C, '?SUBOBJ', and(part('?SUBOBJ', A), exactlyLocated('?SUBOBJ', B)))), exactlyLocated(C, B)))), [domainV(C, [exactlyLocated:1, part:1]), domainV(B, [exactlyLocated:2, partlyLocated:2]), domainV(A, [part:2, partlyLocated:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?SUBOBJ', and(part('?SUBOBJ', A), exactlyLocated('?SUBOBJ', B))))], ['OBJ'=A, 'REGION'=B, 'SUBOBJ'=C], 'Merge', 'BASE ONTOLOGY', 2089, 'Anonymous', on).
mooCache(subrelation(exactlyLocated, located), subrelation(exactlyLocated, located), [], [], 'Merge', 'BASE ONTOLOGY', 2091, 'Anonymous', on).
mooCache(documentation(exactlyLocated, string('"The actual, minimal location of an   Object.  This is a subrelation of the more general Predicate   located."')), documentation(exactlyLocated, string('"The actual, minimal location of an   Object.  This is a subrelation of the more general Predicate   located."')), [], [], 'Merge', 'BASE ONTOLOGY', 2093, 'Anonymous', on).
mooCache(=>(exactlyLocated(A, B), not(exists(C, and(exactlyLocated(C, B), not(equal(C, A)))))), and(entails(and(exactlyLocated(C, B), not(equal(C, A))), not(exactlyLocated(A, B))), and(entails(and(exactlyLocated(A, B), not(equal(C, A))), not(exactlyLocated(C, B))), entails(and(exactlyLocated(A, B), exactlyLocated(C, B)), equal(C, A)))), [domainV(C, [exactlyLocated:1]), domainV(B, [exactlyLocated:2]), domainV(A, [exactlyLocated:1]), domainV(D, []), forall(A), forall(B), forall(C), forall(C)], ['OBJ'=A, 'REGION'=B, 'OTHEROBJ'=C], 'Merge', 'BASE ONTOLOGY', 2095, 'Anonymous', on).
mooCache(instance(between, 'SpatialRelation'), instance(between, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2097, 'Anonymous', on).
mooCache(instance(between, 'TernaryPredicate'), instance(between, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2099, 'Anonymous', on).
mooCache(domain(between, 1, 'Object'), domain(between, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2101, 'Anonymous', on).
mooCache(domain(between, 2, 'Object'), domain(between, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2103, 'Anonymous', on).
mooCache(domain(between, 3, 'Object'), domain(between, 3, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2105, 'Anonymous', on).
mooCache(documentation(between, string('"(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is   spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that   ?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1   and ?OBJ3 overlap with ?OBJ2."')), documentation(between, string('"(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is   spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that   ?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1   and ?OBJ3 overlap with ?OBJ2."')), [], [], 'Merge', 'BASE ONTOLOGY', 2107, 'Anonymous', on).
mooCache(instance(traverses, 'SpatialRelation'), instance(traverses, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2109, 'Anonymous', on).
mooCache(domain(traverses, 1, 'Object'), domain(traverses, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2111, 'Anonymous', on).
mooCache(domain(traverses, 2, 'Object'), domain(traverses, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2113, 'Anonymous', on).
mooCache(documentation(traverses, string('"(traverses ?OBJ1 ?OBJ2) means that ?OBJ1   crosses or extends across ?OBJ2.  Note that crosses and   penetrates are subrelations of traverses."')), documentation(traverses, string('"(traverses ?OBJ1 ?OBJ2) means that ?OBJ1   crosses or extends across ?OBJ2.  Note that crosses and   penetrates are subrelations of traverses."')), [], [], 'Merge', 'BASE ONTOLOGY', 2115, 'Anonymous', on).
mooCache(=>(traverses(A, B), or(crosses(A, B), penetrates(A, B))), and(entails(and(not(crosses(A, B)), not(penetrates(A, B))), not(traverses(A, B))), and(entails(and(traverses(A, B), not(penetrates(A, B))), crosses(A, B)), entails(and(traverses(A, B), not(crosses(A, B))), penetrates(A, B)))), [domainV(B, [crosses:2, penetrates:2, traverses:2]), domainV(A, [crosses:1, penetrates:1, traverses:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'BASE ONTOLOGY', 2117, 'Anonymous', on).
mooCache(subrelation(crosses, traverses), subrelation(crosses, traverses), [], [], 'Merge', 'BASE ONTOLOGY', 2119, 'Anonymous', on).
mooCache(instance(crosses, 'AsymmetricRelation'), instance(crosses, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2121, 'Anonymous', on).
mooCache(instance(crosses, 'TransitiveRelation'), instance(crosses, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2123, 'Anonymous', on).
mooCache(disjointRelation(crosses, connected), disjointRelation(crosses, connected), [], [], 'Merge', 'BASE ONTOLOGY', 2125, 'Anonymous', on).
mooCache(documentation(crosses, string('"(crosses ?OBJ1 ?OBJ2) means that   Object ?OBJ1 traverses Object ?OBJ2, without being connected   to it."')), documentation(crosses, string('"(crosses ?OBJ1 ?OBJ2) means that   Object ?OBJ1 traverses Object ?OBJ2, without being connected   to it."')), [], [], 'Merge', 'BASE ONTOLOGY', 2127, 'Anonymous', on).
mooCache(subrelation(penetrates, traverses), subrelation(penetrates, traverses), [], [], 'Merge', 'BASE ONTOLOGY', 2129, 'Anonymous', on).
mooCache(subrelation(penetrates, meetsSpatially), subrelation(penetrates, meetsSpatially), [], [], 'Merge', 'BASE ONTOLOGY', 2131, 'Anonymous', on).
mooCache(instance(penetrates, 'AsymmetricRelation'), instance(penetrates, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2133, 'Anonymous', on).
mooCache(instance(penetrates, 'IntransitiveRelation'), instance(penetrates, 'IntransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2135, 'Anonymous', on).
mooCache(documentation(penetrates, string('"(penetrates ?OBJ1 ?OBJ2) means that   ?OBJ1 is connected to ?OBJ2 along at least one whole dimension (length,   width or depth)."')), documentation(penetrates, string('"(penetrates ?OBJ1 ?OBJ2) means that   ?OBJ1 is connected to ?OBJ2 along at least one whole dimension (length,   width or depth)."')), [], [], 'Merge', 'BASE ONTOLOGY', 2137, 'Anonymous', on).
mooCache(instance('WhereFn', 'BinaryFunction'), instance('WhereFn', 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 2139, 'Anonymous', on).
mooCache(instance('WhereFn', 'SpatialRelation'), instance('WhereFn', 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2141, 'Anonymous', on).
mooCache(domain('WhereFn', 1, 'Physical'), domain('WhereFn', 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2143, 'Anonymous', on).
mooCache(domain('WhereFn', 2, 'TimePoint'), domain('WhereFn', 2, 'TimePoint'), [], [], 'Merge', 'BASE ONTOLOGY', 2145, 'Anonymous', on).
mooCache(range('WhereFn', 'Region'), range('WhereFn', 'Region'), [], [], 'Merge', 'BASE ONTOLOGY', 2147, 'Anonymous', on).
mooCache(relatedInternalConcept('WhereFn', 'WhenFn'), relatedInternalConcept('WhereFn', 'WhenFn'), [], [], 'Merge', 'BASE ONTOLOGY', 2149, 'Anonymous', on).
mooCache(documentation('WhereFn', string('"Maps an Object and a TimePoint at which the   Object exists to the Region where the Object existed at that   TimePoint."')), documentation('WhereFn', string('"Maps an Object and a TimePoint at which the   Object exists to the Region where the Object existed at that   TimePoint."')), [], [], 'Merge', 'BASE ONTOLOGY', 2151, 'Anonymous', on).
mooCache(<=>(equal('WhereFn'(A, B), C), holdsDuring(B, exactlyLocated(A, C))), and(and(entails(holds('WhereFn', A, B, C), holdsDuring(B, exactlyLocated(A, C))), entails(not(holdsDuring(B, exactlyLocated(A, C))), not(holds('WhereFn', A, B, C)))), and(entails(holdsDuring(B, exactlyLocated(A, C)), holds('WhereFn', A, B, C)), entails(not(holds('WhereFn', A, B, C)), not(holdsDuring(B, exactlyLocated(A, C)))))), [domainV(C, ['WhereFn':3, exactlyLocated:2]), domainV(B, ['WhereFn':2, holdsDuring:1]), domainV(A, ['WhereFn':1, exactlyLocated:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['THING'=A, 'TIME'=B, 'REGION'=C], 'Merge', 'BASE ONTOLOGY', 2153, 'Anonymous', on).
mooCache(instance(possesses, 'BinaryPredicate'), instance(possesses, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2155, 'Anonymous', on).
mooCache(instance(possesses, 'AsymmetricRelation'), instance(possesses, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2157, 'Anonymous', on).
mooCache(domain(possesses, 1, 'Agent'), domain(possesses, 1, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2159, 'Anonymous', on).
mooCache(domain(possesses, 2, 'Object'), domain(possesses, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2161, 'Anonymous', on).
mooCache(documentation(possesses, string('"Relation that holds between an Agent and   an Object when the Agent has ownership of the Object."')), documentation(possesses, string('"Relation that holds between an Agent and   an Object when the Agent has ownership of the Object."')), [], [], 'Merge', 'BASE ONTOLOGY', 2163, 'Anonymous', on).
mooCache(=>(possesses(A, B), exists(C, and(holdsRight(A, C), forall(D, =>(instance(D, C), patient(D, B)))))), and(and(entails(not(holdsRight(A, C)), not(possesses(A, B))), entails(and(possesses(A, B), '$existential'(C, '?TYPE', and(holdsRight(A, '?TYPE'), forall(D, =>(instance(D, '?TYPE'), patient(D, B)))))), holdsRight(A, C))), and(entails(and(instance(D, C), not(patient(D, B))), not(possesses(A, B))), and(entails(and(possesses(A, B), not(patient(D, B))), not(instance(D, C))), entails(and(possesses(A, B), instance(D, C)), patient(D, B))))), [domainV(D, [patient:1]), domainV(C, [holdsRight:2, instance:2]), domainV(B, [patient:2, possesses:2]), domainV(A, [holdsRight:1, possesses:1]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?TYPE', and(holdsRight(A, '?TYPE'), forall(D, =>(instance(D, '?TYPE'), patient(D, B)))))), forall(D)], ['PERSON'=A, 'OBJ'=B, 'TYPE'=C, 'PROCESS'=D], 'Merge', 'BASE ONTOLOGY', 2165, 'Anonymous', on).
mooCache(=>(and(instance(A, 'TimePosition'), and(holdsDuring(A, possesses(B, C)), holdsDuring(A, possesses(D, C)))), equal(B, D)), and(entails(and(instance(A, 'TimePosition'), and(holdsDuring(A, possesses(B, C)), holdsDuring(A, possesses(D, C)))), equal(B, D)), and(entails(and(not(equal(B, D)), and(holdsDuring(A, possesses(B, C)), holdsDuring(A, possesses(D, C)))), not(instance(A, 'TimePosition'))), and(entails(and(not(equal(B, D)), and(instance(A, 'TimePosition'), holdsDuring(A, possesses(D, C)))), not(holdsDuring(A, possesses(B, C)))), entails(and(not(equal(B, D)), and(instance(A, 'TimePosition'), holdsDuring(A, possesses(B, C)))), not(holdsDuring(A, possesses(D, C))))))), [domainV(D, [possesses:1]), domainV(C, [possesses:2]), domainV(B, [possesses:1]), domainV(A, ['$instanceof':'TimePosition', holdsDuring:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['TIME'=A, 'AGENT1'=B, 'OBJ'=C, 'AGENT2'=D], 'Merge', 'BASE ONTOLOGY', 2167, 'Anonymous', on).
mooCache(instance('PropertyFn', 'UnaryFunction'), instance('PropertyFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 2169, 'Anonymous', on).
mooCache(domain('PropertyFn', 1, 'Agent'), domain('PropertyFn', 1, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2171, 'Anonymous', on).
mooCache(range('PropertyFn', 'Set'), range('PropertyFn', 'Set'), [], [], 'Merge', 'BASE ONTOLOGY', 2173, 'Anonymous', on).
mooCache(documentation('PropertyFn', string('"A UnaryFunction that maps an Agent to the Set of Property owned by the Agent."')), documentation('PropertyFn', string('"A UnaryFunction that maps an Agent to the Set of Property owned by the Agent."')), [], [], 'Merge', 'BASE ONTOLOGY', 2175, 'Anonymous', on).
mooCache(<=>(instance(A, 'PropertyFn'(B)), possesses(B, A)), and(and(entails(instance(A, 'PropertyFn'(B)), possesses(B, A)), entails(not(possesses(B, A)), not(instance(A, 'PropertyFn'(B))))), and(entails(possesses(B, A), instance(A, 'PropertyFn'(B))), entails(not(instance(A, 'PropertyFn'(B))), not(possesses(B, A))))), [domainV(B, ['PropertyFn':1, possesses:1]), domainV(A, [possesses:2]), domainV(C, []), forall(A), forall(B)], ['OBJ'=A, 'PERSON'=B], 'Merge', 'BASE ONTOLOGY', 2177, 'Anonymous', on).
mooCache(instance(precondition, 'BinaryPredicate'), instance(precondition, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2179, 'Anonymous', on).
mooCache(instance(precondition, 'AsymmetricRelation'), instance(precondition, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2181, 'Anonymous', on).
mooCache(instance(precondition, 'TransitiveRelation'), instance(precondition, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2183, 'Anonymous', on).
mooCache(domainSubclass(precondition, 1, 'Process'), domainSubclass(precondition, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2185, 'Anonymous', on).
mooCache(domainSubclass(precondition, 2, 'Process'), domainSubclass(precondition, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2187, 'Anonymous', on).
mooCache(documentation(precondition, string('"A very general Predicate.  (precondition   ?PROC1 ?PROC2) means that ?PROC2 can exist or be true only if   ?PROC1 exists or is true.  At some point, this Predicate should   probably be broken up into more specific Predicates with more   restrictive domain restrictions."')), documentation(precondition, string('"A very general Predicate.  (precondition   ?PROC1 ?PROC2) means that ?PROC2 can exist or be true only if   ?PROC1 exists or is true.  At some point, this Predicate should   probably be broken up into more specific Predicates with more   restrictive domain restrictions."')), [], [], 'Merge', 'BASE ONTOLOGY', 2189, 'Anonymous', on).
mooCache(instance(inhibits, 'BinaryPredicate'), instance(inhibits, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2191, 'Anonymous', on).
mooCache(instance(inhibits, 'IrreflexiveRelation'), instance(inhibits, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2193, 'Anonymous', on).
mooCache(domainSubclass(inhibits, 1, 'Process'), domainSubclass(inhibits, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2195, 'Anonymous', on).
mooCache(domainSubclass(inhibits, 2, 'Process'), domainSubclass(inhibits, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2197, 'Anonymous', on).
mooCache(documentation(inhibits, string('"A very general Predicate.  (inhibits   ?PROC1 ?PROC2) means that the Process ?PROC1 inhibits or hinders   the occurrence of the Process ?PROC2.  For example, obstructing an   object inhibits moving it.  Note that this is a relation between types   of Processes, not between instances."')), documentation(inhibits, string('"A very general Predicate.  (inhibits   ?PROC1 ?PROC2) means that the Process ?PROC1 inhibits or hinders   the occurrence of the Process ?PROC2.  For example, obstructing an   object inhibits moving it.  Note that this is a relation between types   of Processes, not between instances."')), [], [], 'Merge', 'BASE ONTOLOGY', 2199, 'Anonymous', on).
mooCache(instance(prevents, 'BinaryPredicate'), instance(prevents, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2201, 'Anonymous', on).
mooCache(instance(prevents, 'IrreflexiveRelation'), instance(prevents, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2203, 'Anonymous', on).
mooCache(domainSubclass(prevents, 1, 'Process'), domainSubclass(prevents, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2205, 'Anonymous', on).
mooCache(domainSubclass(prevents, 2, 'Process'), domainSubclass(prevents, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2207, 'Anonymous', on).
mooCache(documentation(prevents, string('"A very general Predicate.  (prevents ?PROC1   ?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other   words, if ?PROC1 is occurring in a particular time and place, ?PROC2   cannot occur at the same time and place.  For example, innoculating   prevents contracting disease.  Note that this is a relation between types   of Processes, not between instances."')), documentation(prevents, string('"A very general Predicate.  (prevents ?PROC1   ?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other   words, if ?PROC1 is occurring in a particular time and place, ?PROC2   cannot occur at the same time and place.  For example, innoculating   prevents contracting disease.  Note that this is a relation between types   of Processes, not between instances."')), [], [], 'Merge', 'BASE ONTOLOGY', 2209, 'Anonymous', on).
mooCache(instance(refers, 'BinaryPredicate'), instance(refers, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2211, 'Anonymous', on).
mooCache(domain(refers, 1, 'Physical'), domain(refers, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2213, 'Anonymous', on).
mooCache(domain(refers, 2, 'Entity'), domain(refers, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2215, 'Anonymous', on).
mooCache(documentation(refers, string('"(refers ?OBJ1 ?OBJ2) means that ?OBJ1   mentions or includes a reference to ?OBJ2. Note that refers is   more general in meaning than represents, because presumably something   can represent something else only if it refers to this other thing.    For example, an article whose topic is a recent change in the price of   oil may refer to many other things, e.g. the general state of the economy,   the weather in California, the prospect of global warming, the options   for alternative energy sources, the stock prices of various oil companies,   etc."')), documentation(refers, string('"(refers ?OBJ1 ?OBJ2) means that ?OBJ1   mentions or includes a reference to ?OBJ2. Note that refers is   more general in meaning than represents, because presumably something   can represent something else only if it refers to this other thing.    For example, an article whose topic is a recent change in the price of   oil may refer to many other things, e.g. the general state of the economy,   the weather in California, the prospect of global warming, the options   for alternative energy sources, the stock prices of various oil companies,   etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 2217, 'Anonymous', on).
mooCache(instance(represents, 'BinaryPredicate'), instance(represents, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2219, 'Anonymous', on).
mooCache(domain(represents, 1, 'Physical'), domain(represents, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2221, 'Anonymous', on).
mooCache(domain(represents, 2, 'Entity'), domain(represents, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2223, 'Anonymous', on).
mooCache(subrelation(represents, refers), subrelation(represents, refers), [], [], 'Merge', 'BASE ONTOLOGY', 2225, 'Anonymous', on).
mooCache(documentation(represents, string('"A very general semiotics Predicate.    (represents ?THING ?ENTITY) means that ?THING in some way expresses,   connotes, pictures, describes, etc. ?ENTITY.  The Predicates   containsInformation and realization are subrelations of represents.    Note that represents is a subrelation of refers, since something can   represent something else only if it refers to this other thing."')), documentation(represents, string('"A very general semiotics Predicate.    (represents ?THING ?ENTITY) means that ?THING in some way expresses,   connotes, pictures, describes, etc. ?ENTITY.  The Predicates   containsInformation and realization are subrelations of represents.    Note that represents is a subrelation of refers, since something can   represent something else only if it refers to this other thing."')), [], [], 'Merge', 'BASE ONTOLOGY', 2227, 'Anonymous', on).
mooCache(=>(represents(A, B), exists(C, representsInLanguage(A, B, C))), and(entails(not(representsInLanguage(A, B, C)), not(represents(A, B))), entails(and(represents(A, B), '$existential'(C, '?LANGUAGE', representsInLanguage(A, B, '?LANGUAGE'))), representsInLanguage(A, B, C))), [domainV(C, [representsInLanguage:3]), domainV(B, [represents:2, representsInLanguage:2]), domainV(A, [represents:1, representsInLanguage:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?LANGUAGE', representsInLanguage(A, B, '?LANGUAGE')))], ['REP'=A, 'ENTITY'=B, 'LANGUAGE'=C], 'Merge', 'BASE ONTOLOGY', 2229, 'Anonymous', on).
mooCache(instance(representsForAgent, 'TernaryPredicate'), instance(representsForAgent, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2231, 'Anonymous', on).
mooCache(domain(representsForAgent, 1, 'Physical'), domain(representsForAgent, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2233, 'Anonymous', on).
mooCache(domain(representsForAgent, 2, 'Entity'), domain(representsForAgent, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2235, 'Anonymous', on).
mooCache(domain(representsForAgent, 3, 'Agent'), domain(representsForAgent, 3, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2237, 'Anonymous', on).
mooCache(documentation(representsForAgent, string('"A very general predicate.    (representsForAgent ?THING ?ENTITY ?AGENT) means that the ?AGENT   chooses to use the instance of Physical ?THING to \'stand for\'   ?ENTITY."')), documentation(representsForAgent, string('"A very general predicate.    (representsForAgent ?THING ?ENTITY ?AGENT) means that the ?AGENT   chooses to use the instance of Physical ?THING to \'stand for\'   ?ENTITY."')), [], [], 'Merge', 'BASE ONTOLOGY', 2239, 'Anonymous', on).
mooCache(instance(representsInLanguage, 'TernaryPredicate'), instance(representsInLanguage, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2241, 'Anonymous', on).
mooCache(domain(representsInLanguage, 1, 'Physical'), domain(representsInLanguage, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2243, 'Anonymous', on).
mooCache(domain(representsInLanguage, 2, 'Entity'), domain(representsInLanguage, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2245, 'Anonymous', on).
mooCache(domain(representsInLanguage, 3, 'Language'), domain(representsInLanguage, 3, 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 2247, 'Anonymous', on).
mooCache(documentation(representsInLanguage, string('"A very general predicate.    (representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the   instance of Physical ?THING stands for ?ENTITY in the language   ?LANGUAGE."')), documentation(representsInLanguage, string('"A very general predicate.    (representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the   instance of Physical ?THING stands for ?ENTITY in the language   ?LANGUAGE."')), [], [], 'Merge', 'BASE ONTOLOGY', 2249, 'Anonymous', on).
mooCache(=>(representsInLanguage(A, B, C), exists(D, representsForAgent(A, B, D))), and(entails(not(representsForAgent(A, B, D)), not(representsInLanguage(A, B, C))), entails(and(representsInLanguage(A, B, C), '$existential'(D, '?AGENT', representsForAgent(A, B, '?AGENT'))), representsForAgent(A, B, D))), [domainV(D, [representsForAgent:3]), domainV(C, [representsInLanguage:3]), domainV(B, [representsForAgent:2, representsInLanguage:2]), domainV(A, [representsForAgent:1, representsInLanguage:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?AGENT', representsForAgent(A, B, '?AGENT')))], ['REP'=A, 'ENTITY'=B, 'LANGUAGE'=C, 'AGENT'=D], 'Merge', 'BASE ONTOLOGY', 2251, 'Anonymous', on).
mooCache(subrelation(equivalentContentClass, subsumesContentClass), subrelation(equivalentContentClass, subsumesContentClass), [], [], 'Merge', 'BASE ONTOLOGY', 2253, 'Anonymous', on).
mooCache(instance(equivalentContentClass, 'EquivalenceRelation'), instance(equivalentContentClass, 'EquivalenceRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2255, 'Anonymous', on).
mooCache(domainSubclass(equivalentContentClass, 1, 'ContentBearingObject'), domainSubclass(equivalentContentClass, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2257, 'Anonymous', on).
mooCache(domainSubclass(equivalentContentClass, 2, 'ContentBearingObject'), domainSubclass(equivalentContentClass, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2259, 'Anonymous', on).
mooCache(documentation(equivalentContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (equivalentContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS1 is   also expressed by each instance of ?CLASS2, and vice versa.  An example   would be the relationship between English and Russian editions of Agatha   Christie\'s \'Murder on the Orient Express\'.  Note that   (equivalentContentClass ?CLASS1 ?CLASS2) implies (subsumesContentClass   ?CLASS1 ?CLASS2) and (subsumesContentClass ?CLASS2 ?CLASS1)."')), documentation(equivalentContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (equivalentContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS1 is   also expressed by each instance of ?CLASS2, and vice versa.  An example   would be the relationship between English and Russian editions of Agatha   Christie\'s \'Murder on the Orient Express\'.  Note that   (equivalentContentClass ?CLASS1 ?CLASS2) implies (subsumesContentClass   ?CLASS1 ?CLASS2) and (subsumesContentClass ?CLASS2 ?CLASS1)."')), [], [], 'Merge', 'BASE ONTOLOGY', 2261, 'Anonymous', on).
mooCache(<=>(and(subsumesContentClass(A, B), subsumesContentClass(B, A)), equivalentContentClass(A, B)), and(and(entails(and(subsumesContentClass(A, B), subsumesContentClass(B, A)), equivalentContentClass(A, B)), and(entails(and(not(equivalentContentClass(A, B)), subsumesContentClass(B, A)), not(subsumesContentClass(A, B))), entails(and(not(equivalentContentClass(A, B)), subsumesContentClass(A, B)), not(subsumesContentClass(B, A))))), and(entails(equivalentContentClass(A, B), subsumesContentClass(A, B)), and(entails(equivalentContentClass(A, B), subsumesContentClass(B, A)), entails(or(not(subsumesContentClass(A, B)), not(subsumesContentClass(B, A))), not(equivalentContentClass(A, B)))))), [domainV(B, [equivalentContentClass:2, subsumesContentClass:1, subsumesContentClass:2]), domainV(A, [equivalentContentClass:1, subsumesContentClass:1, subsumesContentClass:2]), domainV(C, []), forall(A), forall(B)], ['CLASS1'=A, 'CLASS2'=B], 'Merge', 'BASE ONTOLOGY', 2263, 'Anonymous', on).
mooCache(instance(subsumesContentClass, 'BinaryPredicate'), instance(subsumesContentClass, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2265, 'Anonymous', on).
mooCache(instance(subsumesContentClass, 'PartialOrderingRelation'), instance(subsumesContentClass, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2267, 'Anonymous', on).
mooCache(domainSubclass(subsumesContentClass, 1, 'ContentBearingObject'), domainSubclass(subsumesContentClass, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2269, 'Anonymous', on).
mooCache(domainSubclass(subsumesContentClass, 2, 'ContentBearingObject'), domainSubclass(subsumesContentClass, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2271, 'Anonymous', on).
mooCache(documentation(subsumesContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (subsumesContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS2 is   also expressed by each instance of ?CLASS1.  Examples include the   relationship between a poem and one of its stanzas or between a book and   one of its chapters.  Note that this is a relation between subclasses of   ContentBearingObject, rather than instances.  If one wants to relate   instances, the Predicate subsumesContentInstance can be used.  Note   that subsumesContentClass is needed in many cases.  Consider, for   example, the relation between the King James edition of the Bible and its   Book of Genesis.  This relation holds for every copy of this edition and   not just for a single instance."')), documentation(subsumesContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (subsumesContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS2 is   also expressed by each instance of ?CLASS1.  Examples include the   relationship between a poem and one of its stanzas or between a book and   one of its chapters.  Note that this is a relation between subclasses of   ContentBearingObject, rather than instances.  If one wants to relate   instances, the Predicate subsumesContentInstance can be used.  Note   that subsumesContentClass is needed in many cases.  Consider, for   example, the relation between the King James edition of the Bible and its   Book of Genesis.  This relation holds for every copy of this edition and   not just for a single instance."')), [], [], 'Merge', 'BASE ONTOLOGY', 2273, 'Anonymous', on).
mooCache(<=>(subsumesContentClass(A, B), forall(C, forall(D, forall(E, =>(and(instance(D, A), and(instance(C, B), containsInformation(C, E))), containsInformation(D, E)))))), and(and(entails(not(subsumesContentClass(A, B)), instance(D, A)), and(entails(not(subsumesContentClass(A, B)), instance(C, B)), and(entails(not(subsumesContentClass(A, B)), containsInformation(C, E)), and(entails(and(and(not(subsumesContentClass(A, B)), '$existential'(D, '?OBJ1', not(forall(E, =>(and(instance('?OBJ1', A), and(instance(C, B), containsInformation(C, E))), containsInformation('?OBJ1', E)))))), '$existential'(E, '?INFO', not(=>(and(instance(D, A), and(instance(C, B), containsInformation(C, '?INFO'))), containsInformation(D, '?INFO'))))), not(containsInformation(D, E))), entails(or(or(not(instance(D, A)), or(not(instance(C, B)), not(containsInformation(C, E)))), containsInformation(D, E)), subsumesContentClass(A, B)))))), and(entails(and(and(and(not(containsInformation(D, E)), and(instance(D, A), and(instance(C, B), containsInformation(C, E)))), '$existential'(D, '?OBJ1', not(forall(E, =>(and(instance('?OBJ1', A), and(instance(C, B), containsInformation(C, E))), containsInformation('?OBJ1', E)))))), '$existential'(E, '?INFO', not(=>(and(instance(D, A), and(instance(C, B), containsInformation(C, '?INFO'))), containsInformation(D, '?INFO'))))), not(subsumesContentClass(A, B))), and(entails(and(subsumesContentClass(A, B), and(instance(D, A), and(instance(C, B), containsInformation(C, E)))), containsInformation(D, E)), and(entails(and(and(and(subsumesContentClass(A, B), and(not(containsInformation(D, E)), and(instance(C, B), containsInformation(C, E)))), '$existential'(D, '?OBJ1', not(forall(E, =>(and(instance('?OBJ1', A), and(instance(C, B), containsInformation(C, E))), containsInformation('?OBJ1', E)))))), '$existential'(E, '?INFO', not(=>(and(instance(D, A), and(instance(C, B), containsInformation(C, '?INFO'))), containsInformation(D, '?INFO'))))), not(instance(D, A))), and(entails(and(and(and(and(subsumesContentClass(A, B), and(not(containsInformation(D, E)), and(instance(D, A), containsInformation(C, E)))), '$existential'(C, '?OBJ2', not(forall(D, forall(E, =>(and(instance(D, A), and(instance('?OBJ2', B), containsInformation('?OBJ2', E))), containsInformation(D, E))))))), '$existential'(D, '?OBJ1', not(forall(E, =>(and(instance('?OBJ1', A), and(instance(C, B), containsInformation(C, E))), containsInformation('?OBJ1', E)))))), '$existential'(E, '?INFO', not(=>(and(instance(D, A), and(instance(C, B), containsInformation(C, '?INFO'))), containsInformation(D, '?INFO'))))), not(instance(C, B))), entails(and(and(and(and(subsumesContentClass(A, B), and(not(containsInformation(D, E)), and(instance(D, A), instance(C, B)))), '$existential'(C, '?OBJ2', not(forall(D, forall(E, =>(and(instance(D, A), and(instance('?OBJ2', B), containsInformation('?OBJ2', E))), containsInformation(D, E))))))), '$existential'(D, '?OBJ1', not(forall(E, =>(and(instance('?OBJ1', A), and(instance(C, B), containsInformation(C, E))), containsInformation('?OBJ1', E)))))), '$existential'(E, '?INFO', not(=>(and(instance(D, A), and(instance(C, B), containsInformation(C, '?INFO'))), containsInformation(D, '?INFO'))))), not(containsInformation(C, E)))))))), [domainV(E, [containsInformation:2]), domainV(D, [containsInformation:1]), domainV(C, [containsInformation:1]), domainV(B, [instance:2, subsumesContentClass:2]), domainV(A, [instance:2, subsumesContentClass:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E), replaceConsVar(C, '$existential'('?OBJ2', not(forall(D, forall(E, =>(and(instance(D, A), and(instance('?OBJ2', B), containsInformation('?OBJ2', E))), containsInformation(D, E))))))), replaceConsVar(D, '$existential'('?OBJ1', not(forall(E, =>(and(instance('?OBJ1', A), and(instance(C, B), containsInformation(C, E))), containsInformation('?OBJ1', E)))))), replaceConsVar(E, '$existential'('?INFO', not(=>(and(instance(D, A), and(instance(C, B), containsInformation(C, '?INFO'))), containsInformation(D, '?INFO')))))], ['CLASS1'=A, 'CLASS2'=B, 'INFO'=E, 'OBJ1'=D, 'OBJ2'=C], 'Merge', 'BASE ONTOLOGY', 2275, 'Anonymous', on).
mooCache(subrelation(equivalentContentInstance, subsumesContentInstance), subrelation(equivalentContentInstance, subsumesContentInstance), [], [], 'Merge', 'BASE ONTOLOGY', 2277, 'Anonymous', on).
mooCache(instance(equivalentContentInstance, 'EquivalenceRelation'), instance(equivalentContentInstance, 'EquivalenceRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2279, 'Anonymous', on).
mooCache(domain(equivalentContentInstance, 1, 'ContentBearingObject'), domain(equivalentContentInstance, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2281, 'Anonymous', on).
mooCache(domain(equivalentContentInstance, 2, 'ContentBearingObject'), domain(equivalentContentInstance, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2283, 'Anonymous', on).
mooCache(relatedInternalConcept(equivalentContentInstance, equivalentContentClass), relatedInternalConcept(equivalentContentInstance, equivalentContentClass), [], [], 'Merge', 'BASE ONTOLOGY', 2285, 'Anonymous', on).
mooCache(documentation(equivalentContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (equivalentContentInstance   ?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to   the content expressed by ?OBJ2.  An example would be the relationship   between a handwritten draft of a letter to one\'s lawyer and a typed   copy of the same letter.  Note that (equivalentContentInstance ?OBJ1   ?OBJ2) implies (subsumesContentInstance ?OBJ1 ?OBJ2) and   (subsumesContentInstance ?OBJ2 ?OBJ2)."')), documentation(equivalentContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (equivalentContentInstance   ?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to   the content expressed by ?OBJ2.  An example would be the relationship   between a handwritten draft of a letter to one\'s lawyer and a typed   copy of the same letter.  Note that (equivalentContentInstance ?OBJ1   ?OBJ2) implies (subsumesContentInstance ?OBJ1 ?OBJ2) and   (subsumesContentInstance ?OBJ2 ?OBJ2)."')), [], [], 'Merge', 'BASE ONTOLOGY', 2287, 'Anonymous', on).
mooCache(<=>(and(subsumesContentInstance(A, B), subsumesContentInstance(B, A)), equivalentContentInstance(A, B)), and(and(entails(and(subsumesContentInstance(A, B), subsumesContentInstance(B, A)), equivalentContentInstance(A, B)), and(entails(and(not(equivalentContentInstance(A, B)), subsumesContentInstance(B, A)), not(subsumesContentInstance(A, B))), entails(and(not(equivalentContentInstance(A, B)), subsumesContentInstance(A, B)), not(subsumesContentInstance(B, A))))), and(entails(equivalentContentInstance(A, B), subsumesContentInstance(A, B)), and(entails(equivalentContentInstance(A, B), subsumesContentInstance(B, A)), entails(or(not(subsumesContentInstance(A, B)), not(subsumesContentInstance(B, A))), not(equivalentContentInstance(A, B)))))), [domainV(B, [equivalentContentInstance:2, subsumesContentInstance:1, subsumesContentInstance:2]), domainV(A, [equivalentContentInstance:1, subsumesContentInstance:1, subsumesContentInstance:2]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'BASE ONTOLOGY', 2289, 'Anonymous', on).
mooCache(instance(subsumesContentInstance, 'BinaryPredicate'), instance(subsumesContentInstance, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2291, 'Anonymous', on).
mooCache(instance(subsumesContentInstance, 'PartialOrderingRelation'), instance(subsumesContentInstance, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2293, 'Anonymous', on).
mooCache(domain(subsumesContentInstance, 1, 'ContentBearingObject'), domain(subsumesContentInstance, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2295, 'Anonymous', on).
mooCache(domain(subsumesContentInstance, 2, 'ContentBearingObject'), domain(subsumesContentInstance, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2297, 'Anonymous', on).
mooCache(relatedInternalConcept(subsumesContentInstance, subsumesContentClass), relatedInternalConcept(subsumesContentInstance, subsumesContentClass), [], [], 'Merge', 'BASE ONTOLOGY', 2299, 'Anonymous', on).
mooCache(documentation(subsumesContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (subsumesContentInstance ?OBJ1 ?OBJ2)   means that the content expressed by ?OBJ2 is part of the content expressed   by ?OBJ1.  An example is the relationship between a handwritten poem and   one of its stanzas.  Note that this is a relation between instances,   rather than Classes.  If one wants to assert a content relationship   between Classes, e.g. between the version of an intellectual work and a   part of that work, the relation subsumesContentClass should be used."')), documentation(subsumesContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (subsumesContentInstance ?OBJ1 ?OBJ2)   means that the content expressed by ?OBJ2 is part of the content expressed   by ?OBJ1.  An example is the relationship between a handwritten poem and   one of its stanzas.  Note that this is a relation between instances,   rather than Classes.  If one wants to assert a content relationship   between Classes, e.g. between the version of an intellectual work and a   part of that work, the relation subsumesContentClass should be used."')), [], [], 'Merge', 'BASE ONTOLOGY', 2301, 'Anonymous', on).
mooCache(<=>(subsumesContentInstance(A, B), forall(C, =>(containsInformation(B, C), containsInformation(A, C)))), and(and(entails(not(subsumesContentInstance(A, B)), containsInformation(B, C)), and(entails(and(not(subsumesContentInstance(A, B)), '$existential'(C, '?INFO', not(=>(containsInformation(B, '?INFO'), containsInformation(A, '?INFO'))))), not(containsInformation(A, C))), entails(or(not(containsInformation(B, C)), containsInformation(A, C)), subsumesContentInstance(A, B)))), and(entails(and(containsInformation(B, C), not(containsInformation(A, C))), not(subsumesContentInstance(A, B))), and(entails(and(and(subsumesContentInstance(A, B), not(containsInformation(A, C))), '$existential'(C, '?INFO', not(=>(containsInformation(B, '?INFO'), containsInformation(A, '?INFO'))))), not(containsInformation(B, C))), entails(and(subsumesContentInstance(A, B), containsInformation(B, C)), containsInformation(A, C))))), [domainV(C, [containsInformation:2]), domainV(B, [containsInformation:1, subsumesContentInstance:2]), domainV(A, [containsInformation:1, subsumesContentInstance:1]), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(C, '$existential'('?INFO', not(=>(containsInformation(B, '?INFO'), containsInformation(A, '?INFO')))))], ['OBJ1'=A, 'OBJ2'=B, 'INFO'=C], 'Merge', 'BASE ONTOLOGY', 2303, 'Anonymous', on).
mooCache(subrelation(realization, represents), subrelation(realization, represents), [], [], 'Merge', 'BASE ONTOLOGY', 2305, 'Anonymous', on).
mooCache(instance(realization, 'AsymmetricRelation'), instance(realization, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2307, 'Anonymous', on).
mooCache(domain(realization, 1, 'Process'), domain(realization, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2309, 'Anonymous', on).
mooCache(domain(realization, 2, 'Proposition'), domain(realization, 2, 'Proposition'), [], [], 'Merge', 'BASE ONTOLOGY', 2311, 'Anonymous', on).
mooCache(relatedInternalConcept(realization, equivalentContentInstance), relatedInternalConcept(realization, equivalentContentInstance), [], [], 'Merge', 'BASE ONTOLOGY', 2313, 'Anonymous', on).
mooCache(relatedInternalConcept(realization, containsInformation), relatedInternalConcept(realization, containsInformation), [], [], 'Merge', 'BASE ONTOLOGY', 2315, 'Anonymous', on).
mooCache(documentation(realization, string('"A subrelation of represents.    (realization ?PROCESS ?PROP) means that ?PROCESS is a Process which   expresses the content of ?PROP. Examples include a particular musical   performance, which realizes the content of a musical score, or the   reading of a poem."')), documentation(realization, string('"A subrelation of represents.    (realization ?PROCESS ?PROP) means that ?PROCESS is a Process which   expresses the content of ?PROP. Examples include a particular musical   performance, which realizes the content of a musical score, or the   reading of a poem."')), [], [], 'Merge', 'BASE ONTOLOGY', 2317, 'Anonymous', on).
mooCache(=>(realization(A, B), exists(C, and(instance(C, 'ContentBearingObject'), containsInformation(C, B)))), and(and(entails(not(instance(C, 'ContentBearingObject')), not(realization(A, B))), entails(and(realization(A, B), '$existential'(C, '?OBJ', and(instance('?OBJ', 'ContentBearingObject'), containsInformation('?OBJ', B)))), instance(C, 'ContentBearingObject'))), and(entails(not(containsInformation(C, B)), not(realization(A, B))), entails(and(realization(A, B), '$existential'(C, '?OBJ', and(instance('?OBJ', 'ContentBearingObject'), containsInformation('?OBJ', B)))), containsInformation(C, B)))), [domainV(C, ['$instanceof':'ContentBearingObject', containsInformation:1]), domainV(B, [containsInformation:2, realization:2]), domainV(A, [realization:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?OBJ', and(instance('?OBJ', 'ContentBearingObject'), containsInformation('?OBJ', B))))], ['PROCESS'=A, 'PROP'=B, 'OBJ'=C], 'Merge', 'BASE ONTOLOGY', 2319, 'Anonymous', on).
mooCache(instance(expressedInLanguage, 'BinaryPredicate'), instance(expressedInLanguage, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2321, 'Anonymous', on).
mooCache(instance(expressedInLanguage, 'AsymmetricRelation'), instance(expressedInLanguage, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2323, 'Anonymous', on).
mooCache(domain(expressedInLanguage, 1, 'LinguisticExpression'), domain(expressedInLanguage, 1, 'LinguisticExpression'), [], [], 'Merge', 'BASE ONTOLOGY', 2325, 'Anonymous', on).
mooCache(domain(expressedInLanguage, 2, 'Language'), domain(expressedInLanguage, 2, 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 2327, 'Anonymous', on).
mooCache(documentation(expressedInLanguage, string('"(expressedInLanguage ?EXPRESS ?LANG)   means that ?EXPRESS is expressed in Language ?LANG."')), documentation(expressedInLanguage, string('"(expressedInLanguage ?EXPRESS ?LANG)   means that ?EXPRESS is expressed in Language ?LANG."')), [], [], 'Merge', 'BASE ONTOLOGY', 2329, 'Anonymous', on).
mooCache(<=>(expressedInLanguage(A, B), exists(C, representsInLanguage(A, C, B))), and(and(entails(and(expressedInLanguage(A, B), '$existential'(C, '?PROP', representsInLanguage(A, '?PROP', B))), representsInLanguage(A, C, B)), entails(not(representsInLanguage(A, C, B)), not(expressedInLanguage(A, B)))), and(entails(representsInLanguage(A, C, B), expressedInLanguage(A, B)), entails(not(expressedInLanguage(A, B)), not(representsInLanguage(A, C, B))))), [domainV(C, [representsInLanguage:2]), domainV(B, [expressedInLanguage:2, representsInLanguage:3]), domainV(A, [expressedInLanguage:1, representsInLanguage:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROP', representsInLanguage(A, '?PROP', B))), forall(C)], ['EXPRESS'=A, 'LANGUAGE'=B, 'PROP'=C], 'Merge', 'BASE ONTOLOGY', 2331, 'Anonymous', on).
mooCache(instance(subPlan, 'BinaryPredicate'), instance(subPlan, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2333, 'Anonymous', on).
mooCache(instance(subPlan, 'TransitiveRelation'), instance(subPlan, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2335, 'Anonymous', on).
mooCache(instance(subPlan, 'IrreflexiveRelation'), instance(subPlan, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2337, 'Anonymous', on).
mooCache(domain(subPlan, 1, 'Plan'), domain(subPlan, 1, 'Plan'), [], [], 'Merge', 'BASE ONTOLOGY', 2339, 'Anonymous', on).
mooCache(domain(subPlan, 2, 'Plan'), domain(subPlan, 2, 'Plan'), [], [], 'Merge', 'BASE ONTOLOGY', 2341, 'Anonymous', on).
mooCache(documentation(subPlan, string('"(subPlan ?PLAN1 ?PLAN2) means that ?PLAN1   is a Plan which is a proper part of ?PLAN2.  This relation is generally   used to relate a supporting Plan to the overall Plan in a particular   context."')), documentation(subPlan, string('"(subPlan ?PLAN1 ?PLAN2) means that ?PLAN1   is a Plan which is a proper part of ?PLAN2.  This relation is generally   used to relate a supporting Plan to the overall Plan in a particular   context."')), [], [], 'Merge', 'BASE ONTOLOGY', 2343, 'Anonymous', on).
mooCache(=>(subPlan(A, B), forall(C, forall(D, =>(and(containsInformation(D, A), containsInformation(C, B)), subsumesContentInstance(C, D))))), and(entails(and(not(subsumesContentInstance(C, D)), and(containsInformation(D, A), containsInformation(C, B))), not(subPlan(A, B))), and(entails(and(subPlan(A, B), and(containsInformation(D, A), containsInformation(C, B))), subsumesContentInstance(C, D)), and(entails(and(subPlan(A, B), and(not(subsumesContentInstance(C, D)), containsInformation(C, B))), not(containsInformation(D, A))), entails(and(subPlan(A, B), and(not(subsumesContentInstance(C, D)), containsInformation(D, A))), not(containsInformation(C, B)))))), [domainV(D, [containsInformation:1, subsumesContentInstance:2]), domainV(C, [containsInformation:1, subsumesContentInstance:1]), domainV(B, [containsInformation:2, subPlan:2]), domainV(A, [containsInformation:2, subPlan:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['PLAN1'=A, 'PLAN2'=B, 'OBJ1'=D, 'OBJ2'=C], 'Merge', 'BASE ONTOLOGY', 2345, 'Anonymous', on).
mooCache(instance(uses, 'BinaryPredicate'), instance(uses, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2347, 'Anonymous', on).
mooCache(instance(uses, 'AsymmetricRelation'), instance(uses, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2349, 'Anonymous', on).
mooCache(domain(uses, 1, 'Object'), domain(uses, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2351, 'Anonymous', on).
mooCache(domain(uses, 2, 'Agent'), domain(uses, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2353, 'Anonymous', on).
mooCache(documentation(uses, string('"(uses ?OBJECT AGENT) means that ?OBJECT is used by   ?AGENT as an instrument in an unspecified Process.  This Predicate,   as its corresponding axiom indicates, is a composition of the CaseRoles   agent and instrument."')), documentation(uses, string('"(uses ?OBJECT AGENT) means that ?OBJECT is used by   ?AGENT as an instrument in an unspecified Process.  This Predicate,   as its corresponding axiom indicates, is a composition of the CaseRoles   agent and instrument."')), [], [], 'Merge', 'BASE ONTOLOGY', 2355, 'Anonymous', on).
mooCache(=>(uses(A, B), exists(C, and(agent(C, B), instrument(C, A)))), and(and(entails(not(agent(C, B)), not(uses(A, B))), entails(and(uses(A, B), '$existential'(C, '?PROC', and(agent('?PROC', B), instrument('?PROC', A)))), agent(C, B))), and(entails(not(instrument(C, A)), not(uses(A, B))), entails(and(uses(A, B), '$existential'(C, '?PROC', and(agent('?PROC', B), instrument('?PROC', A)))), instrument(C, A)))), [domainV(C, [agent:1, instrument:1]), domainV(B, [agent:2, uses:2]), domainV(A, [instrument:2, uses:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROC', and(agent('?PROC', B), instrument('?PROC', A))))], ['OBJ'=A, 'AGENT'=B, 'PROC'=C], 'Merge', 'BASE ONTOLOGY', 2357, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2369, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2372, 'Anonymous', on).
mooCache(instance('MultiplicationFn', 'AssociativeFunction'), instance('MultiplicationFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2375, 'Anonymous', on).
mooCache(instance('MultiplicationFn', 'CommutativeFunction'), instance('MultiplicationFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2377, 'Anonymous', on).
mooCache(instance('MultiplicationFn', 'RelationExtendedToQuantities'), instance('MultiplicationFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2379, 'Anonymous', on).
mooCache(domain('MultiplicationFn', 1, 'Quantity'), domain('MultiplicationFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2381, 'Anonymous', on).
mooCache(domain('MultiplicationFn', 2, 'Quantity'), domain('MultiplicationFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2383, 'Anonymous', on).
mooCache(range('MultiplicationFn', 'Quantity'), range('MultiplicationFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2385, 'Anonymous', on).
mooCache(documentation('MultiplicationFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product   of these numbers."')), documentation('MultiplicationFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product   of these numbers."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2387, 'Anonymous', on).
mooCache(instance('AdditionFn', 'AssociativeFunction'), instance('AdditionFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2389, 'Anonymous', on).
mooCache(instance('AdditionFn', 'CommutativeFunction'), instance('AdditionFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2391, 'Anonymous', on).
mooCache(instance('AdditionFn', 'RelationExtendedToQuantities'), instance('AdditionFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2393, 'Anonymous', on).
mooCache(domain('AdditionFn', 1, 'Quantity'), domain('AdditionFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2395, 'Anonymous', on).
mooCache(domain('AdditionFn', 2, 'Quantity'), domain('AdditionFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2397, 'Anonymous', on).
mooCache(range('AdditionFn', 'Quantity'), range('AdditionFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2399, 'Anonymous', on).
mooCache(documentation('AdditionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these   numbers."')), documentation('AdditionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these   numbers."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2401, 'Anonymous', on).
mooCache(instance('SubtractionFn', 'AssociativeFunction'), instance('SubtractionFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2403, 'Anonymous', on).
mooCache(instance('SubtractionFn', 'RelationExtendedToQuantities'), instance('SubtractionFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2405, 'Anonymous', on).
mooCache(domain('SubtractionFn', 1, 'Quantity'), domain('SubtractionFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2407, 'Anonymous', on).
mooCache(domain('SubtractionFn', 2, 'Quantity'), domain('SubtractionFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2409, 'Anonymous', on).
mooCache(range('SubtractionFn', 'Quantity'), range('SubtractionFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2411, 'Anonymous', on).
mooCache(documentation('SubtractionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference   between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An   exception occurs when ?NUMBER1 is equal to 0, in which case   (SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2."')), documentation('SubtractionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference   between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An   exception occurs when ?NUMBER1 is equal to 0, in which case   (SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2413, 'Anonymous', on).
mooCache(instance('DivisionFn', 'AssociativeFunction'), instance('DivisionFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2415, 'Anonymous', on).
mooCache(instance('DivisionFn', 'RelationExtendedToQuantities'), instance('DivisionFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2417, 'Anonymous', on).
mooCache(domain('DivisionFn', 1, 'Quantity'), domain('DivisionFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2419, 'Anonymous', on).
mooCache(domain('DivisionFn', 2, 'Quantity'), domain('DivisionFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2421, 'Anonymous', on).
mooCache(range('DivisionFn', 'Quantity'), range('DivisionFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2423, 'Anonymous', on).
mooCache(documentation('DivisionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by   ?NUMBER2.  An exception occurs when ?NUMBER1 = 1, in which case   (DivisionFn ?NUMBER1 ?NUMBER2) is the reciprocal of ?NUMBER2."')), documentation('DivisionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by   ?NUMBER2.  An exception occurs when ?NUMBER1 = 1, in which case   (DivisionFn ?NUMBER1 ?NUMBER2) is the reciprocal of ?NUMBER2."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2425, 'Anonymous', on).
mooCache(=>(instance(A, 'RationalNumber'), exists(B, exists(C, and(instance(C, 'Integer'), and(instance(B, 'Integer'), equal(A, 'DivisionFn'(C, B))))))), and(and(entails(not(instance(C, 'Integer')), not(instance(A, 'RationalNumber'))), entails(and(instance(A, 'RationalNumber'), '$existential'(C, '?INT1', and(instance('?INT1', 'Integer'), and(instance(B, 'Integer'), holds('DivisionFn', '?INT1', B, A))))), instance(C, 'Integer'))), and(and(entails(not(instance(B, 'Integer')), not(instance(A, 'RationalNumber'))), entails(and(and(instance(A, 'RationalNumber'), '$existential'(B, '?INT2', exists(C, and(instance(C, 'Integer'), and(instance('?INT2', 'Integer'), holds('DivisionFn', C, '?INT2', A)))))), '$existential'(C, '?INT1', and(instance('?INT1', 'Integer'), and(instance(B, 'Integer'), holds('DivisionFn', '?INT1', B, A))))), instance(B, 'Integer'))), and(entails(not(holds('DivisionFn', C, B, A)), not(instance(A, 'RationalNumber'))), entails(and(and(instance(A, 'RationalNumber'), '$existential'(B, '?INT2', exists(C, and(instance(C, 'Integer'), and(instance('?INT2', 'Integer'), holds('DivisionFn', C, '?INT2', A)))))), '$existential'(C, '?INT1', and(instance('?INT1', 'Integer'), and(instance(B, 'Integer'), holds('DivisionFn', '?INT1', B, A))))), holds('DivisionFn', C, B, A))))), [domainV(C, ['$instanceof':'Integer', 'DivisionFn':1]), domainV(B, ['$instanceof':'Integer', 'DivisionFn':2]), domainV(A, ['$instanceof':'RationalNumber', 'DivisionFn':3]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?INT2', exists(C, and(instance(C, 'Integer'), and(instance('?INT2', 'Integer'), holds('DivisionFn', C, '?INT2', A)))))), replaceConsVar(C, '$existential'('?INT1', and(instance('?INT1', 'Integer'), and(instance(B, 'Integer'), holds('DivisionFn', '?INT1', B, A)))))], ['NUMBER'=A, 'INT1'=C, 'INT2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2427, 'Anonymous', on).
mooCache(instance('AbsoluteValueFn', 'UnaryFunction'), instance('AbsoluteValueFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2429, 'Anonymous', on).
mooCache(domain('AbsoluteValueFn', 1, 'RealNumber'), domain('AbsoluteValueFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2431, 'Anonymous', on).
mooCache(range('AbsoluteValueFn', 'PositiveRealNumber'), range('AbsoluteValueFn', 'PositiveRealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2433, 'Anonymous', on).
mooCache(documentation('AbsoluteValueFn', string('"The value of (AbsoluteValueFn ?NUMBER)   is the absolute value of the RealNumber ?NUMBER."')), documentation('AbsoluteValueFn', string('"The value of (AbsoluteValueFn ?NUMBER)   is the absolute value of the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2435, 'Anonymous', on).
mooCache(<=>(equal('AbsoluteValueFn'(A), B), or(and(instance(A, 'PositiveInteger'), equal(A, B)), and(instance(A, 'NegativeInteger'), equal(B, 'SubtractionFn'(0, A))))), and(and(entails(and(or(not(holds('SubtractionFn', 0, A, B)), or(not(instance(A, 'NegativeInteger')), or(and(not(instance(A, 'PositiveInteger')), not(instance(A, 'NegativeInteger'))), and(not(instance(A, 'PositiveInteger')), not(holds('SubtractionFn', 0, A, B)))))), and(instance(A, 'NegativeInteger'), holds('SubtractionFn', 0, A, B))), equal(A, B)), and(entails(and(or(and(not(equal(A, B)), not(holds('SubtractionFn', 0, A, B))), or(not(equal(A, B)), or(not(instance(A, 'PositiveInteger')), and(not(instance(A, 'PositiveInteger')), not(holds('SubtractionFn', 0, A, B)))))), and(instance(A, 'PositiveInteger'), equal(A, B))), instance(A, 'NegativeInteger')), and(entails(and(or(and(not(equal(A, B)), not(holds('SubtractionFn', 0, A, B))), or(and(not(equal(A, B)), not(instance(A, 'NegativeInteger'))), or(not(instance(A, 'NegativeInteger')), not(holds('SubtractionFn', 0, A, B))))), and(instance(A, 'NegativeInteger'), holds('SubtractionFn', 0, A, B))), instance(A, 'PositiveInteger')), and(entails(and(or(not(equal(A, B)), or(and(not(equal(A, B)), not(instance(A, 'NegativeInteger'))), or(and(not(instance(A, 'PositiveInteger')), not(instance(A, 'NegativeInteger'))), not(instance(A, 'PositiveInteger'))))), and(instance(A, 'PositiveInteger'), equal(A, B))), holds('SubtractionFn', 0, A, B)), and(entails(and(or(and(not(equal(A, B)), not(holds('SubtractionFn', 0, A, B))), and(not(equal(A, B)), not(instance(A, 'NegativeInteger')))), or(equal(A, B), and(instance(A, 'NegativeInteger'), holds('SubtractionFn', 0, A, B)))), not(instance(A, 'PositiveInteger'))), and(entails(and(or(and(not(instance(A, 'PositiveInteger')), not(instance(A, 'NegativeInteger'))), and(not(instance(A, 'PositiveInteger')), not(holds('SubtractionFn', 0, A, B)))), or(instance(A, 'PositiveInteger'), and(instance(A, 'NegativeInteger'), holds('SubtractionFn', 0, A, B)))), not(equal(A, B))), and(entails(and(or(and(not(equal(A, B)), not(holds('SubtractionFn', 0, A, B))), and(not(instance(A, 'PositiveInteger')), not(holds('SubtractionFn', 0, A, B)))), or(and(instance(A, 'PositiveInteger'), equal(A, B)), holds('SubtractionFn', 0, A, B))), not(instance(A, 'NegativeInteger'))), entails(and(or(and(not(equal(A, B)), not(instance(A, 'NegativeInteger'))), and(not(instance(A, 'PositiveInteger')), not(instance(A, 'NegativeInteger')))), or(and(instance(A, 'PositiveInteger'), equal(A, B)), instance(A, 'NegativeInteger'))), not(holds('SubtractionFn', 0, A, B)))))))))), and(and(entails(and(or(not(holds('SubtractionFn', 0, A, B)), or(not(instance(A, 'NegativeInteger')), or(and(not(instance(A, 'PositiveInteger')), not(instance(A, 'NegativeInteger'))), and(not(instance(A, 'PositiveInteger')), not(holds('SubtractionFn', 0, A, B)))))), holds('AbsoluteValueFn', A, B)), equal(A, B)), and(entails(and(or(and(not(equal(A, B)), not(holds('SubtractionFn', 0, A, B))), or(not(equal(A, B)), or(not(instance(A, 'PositiveInteger')), and(not(instance(A, 'PositiveInteger')), not(holds('SubtractionFn', 0, A, B)))))), holds('AbsoluteValueFn', A, B)), instance(A, 'NegativeInteger')), and(entails(and(or(and(not(equal(A, B)), not(holds('SubtractionFn', 0, A, B))), or(and(not(equal(A, B)), not(instance(A, 'NegativeInteger'))), or(not(instance(A, 'NegativeInteger')), not(holds('SubtractionFn', 0, A, B))))), holds('AbsoluteValueFn', A, B)), instance(A, 'PositiveInteger')), and(entails(and(or(not(equal(A, B)), or(and(not(equal(A, B)), not(instance(A, 'NegativeInteger'))), or(and(not(instance(A, 'PositiveInteger')), not(instance(A, 'NegativeInteger'))), not(instance(A, 'PositiveInteger'))))), holds('AbsoluteValueFn', A, B)), holds('SubtractionFn', 0, A, B)), entails(or(and(not(equal(A, B)), not(holds('SubtractionFn', 0, A, B))), or(and(not(equal(A, B)), not(instance(A, 'NegativeInteger'))), or(and(not(instance(A, 'PositiveInteger')), not(instance(A, 'NegativeInteger'))), and(not(instance(A, 'PositiveInteger')), not(holds('SubtractionFn', 0, A, B)))))), not(holds('AbsoluteValueFn', A, B))))))), and(entails(or(and(instance(A, 'PositiveInteger'), equal(A, B)), and(instance(A, 'NegativeInteger'), holds('SubtractionFn', 0, A, B))), holds('AbsoluteValueFn', A, B)), and(entails(and(not(holds('AbsoluteValueFn', A, B)), or(equal(A, B), and(instance(A, 'NegativeInteger'), holds('SubtractionFn', 0, A, B)))), not(instance(A, 'PositiveInteger'))), and(entails(and(not(holds('AbsoluteValueFn', A, B)), or(instance(A, 'PositiveInteger'), and(instance(A, 'NegativeInteger'), holds('SubtractionFn', 0, A, B)))), not(equal(A, B))), and(entails(and(not(holds('AbsoluteValueFn', A, B)), or(and(instance(A, 'PositiveInteger'), equal(A, B)), holds('SubtractionFn', 0, A, B))), not(instance(A, 'NegativeInteger'))), entails(and(not(holds('AbsoluteValueFn', A, B)), or(and(instance(A, 'PositiveInteger'), equal(A, B)), instance(A, 'NegativeInteger'))), not(holds('SubtractionFn', 0, A, B))))))))), [domainV(B, ['AbsoluteValueFn':2, 'SubtractionFn':3]), domainV(A, ['$instanceof':'NegativeInteger', '$instanceof':'PositiveInteger', 'AbsoluteValueFn':1, 'SubtractionFn':2]), domainV(C, []), forall(A), forall(B)], ['NUMBER1'=A, 'NUMBER2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2437, 'Anonymous', on).
mooCache(instance('ArcCosineFn', 'UnaryFunction'), instance('ArcCosineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2439, 'Anonymous', on).
mooCache(inverse('ArcCosineFn', 'CosineFn'), inverse('ArcCosineFn', 'CosineFn'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2441, 'Anonymous', on).
mooCache(domain('ArcCosineFn', 1, 'RealNumber'), domain('ArcCosineFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2443, 'Anonymous', on).
mooCache(range('ArcCosineFn', 'PlaneAngleMeasure'), range('ArcCosineFn', 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2445, 'Anonymous', on).
mooCache(documentation('ArcCosineFn', string('"(ArcCosineFn ?NUMBER) returns the arc   cosine of the RealNumber ?NUMBER.  It is the inverse of CosineFn."')), documentation('ArcCosineFn', string('"(ArcCosineFn ?NUMBER) returns the arc   cosine of the RealNumber ?NUMBER.  It is the inverse of CosineFn."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2447, 'Anonymous', on).
mooCache(instance('ArcSineFn', 'UnaryFunction'), instance('ArcSineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2449, 'Anonymous', on).
mooCache(inverse('ArcSineFn', 'SineFn'), inverse('ArcSineFn', 'SineFn'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2451, 'Anonymous', on).
mooCache(domain('ArcSineFn', 1, 'RealNumber'), domain('ArcSineFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2453, 'Anonymous', on).
mooCache(range('ArcSineFn', 'PlaneAngleMeasure'), range('ArcSineFn', 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2455, 'Anonymous', on).
mooCache(documentation('ArcSineFn', string('"(ArcSineFn ?NUMBER) returns the arc sine of   the RealNumber ?NUMBER.  It is the inverse of SineFn."')), documentation('ArcSineFn', string('"(ArcSineFn ?NUMBER) returns the arc sine of   the RealNumber ?NUMBER.  It is the inverse of SineFn."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2457, 'Anonymous', on).
mooCache(instance('ArcTangentFn', 'UnaryFunction'), instance('ArcTangentFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2459, 'Anonymous', on).
mooCache(inverse('ArcTangentFn', 'TangentFn'), inverse('ArcTangentFn', 'TangentFn'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2461, 'Anonymous', on).
mooCache(domain('ArcTangentFn', 1, 'RealNumber'), domain('ArcTangentFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2463, 'Anonymous', on).
mooCache(range('ArcTangentFn', 'PlaneAngleMeasure'), range('ArcTangentFn', 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2465, 'Anonymous', on).
mooCache(documentation('ArcTangentFn', string('"(ArcTangentFn ?NUMBER) returns the arc   tangent of the RealNumber ?NUMBER.  It is the inverse of TangentFn."')), documentation('ArcTangentFn', string('"(ArcTangentFn ?NUMBER) returns the arc   tangent of the RealNumber ?NUMBER.  It is the inverse of TangentFn."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2467, 'Anonymous', on).
mooCache(instance('CeilingFn', 'UnaryFunction'), instance('CeilingFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2469, 'Anonymous', on).
mooCache(domain('CeilingFn', 1, 'RealNumber'), domain('CeilingFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2471, 'Anonymous', on).
mooCache(range('CeilingFn', 'Integer'), range('CeilingFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2473, 'Anonymous', on).
mooCache(documentation('CeilingFn', string('"(CeilingFn ?NUMBER) returns the smallest   Integer greater than or equal to the RealNumber ?NUMBER."')), documentation('CeilingFn', string('"(CeilingFn ?NUMBER) returns the smallest   Integer greater than or equal to the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2475, 'Anonymous', on).
mooCache(=>(equal('CeilingFn'(A), B), not(exists(C, and(instance(C, 'Integer'), and(greaterThanOrEqualTo(C, A), lessThan(C, B)))))), and(entails(and(instance(C, 'Integer'), and(greaterThanOrEqualTo(C, A), lessThan(C, B))), not(holds('CeilingFn', A, B))), and(entails(and(holds('CeilingFn', A, B), and(greaterThanOrEqualTo(C, A), lessThan(C, B))), not(instance(C, 'Integer'))), and(entails(and(holds('CeilingFn', A, B), and(instance(C, 'Integer'), lessThan(C, B))), not(greaterThanOrEqualTo(C, A))), entails(and(holds('CeilingFn', A, B), and(instance(C, 'Integer'), greaterThanOrEqualTo(C, A))), not(lessThan(C, B)))))), [domainV(C, ['$instanceof':'Integer', greaterThanOrEqualTo:1, lessThan:1]), domainV(B, ['CeilingFn':2, lessThan:2]), domainV(A, ['CeilingFn':1, greaterThanOrEqualTo:2]), domainV(D, []), forall(A), forall(B), forall(C), forall(C)], ['NUMBER'=A, 'INT'=B, 'OTHERINT'=C], 'Merge', 'NUMERIC FUNCTIONS', 2477, 'Anonymous', on).
mooCache(instance('CosineFn', 'UnaryFunction'), instance('CosineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2479, 'Anonymous', on).
mooCache(domain('CosineFn', 1, 'PlaneAngleMeasure'), domain('CosineFn', 1, 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2481, 'Anonymous', on).
mooCache(range('CosineFn', 'RealNumber'), range('CosineFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2483, 'Anonymous', on).
mooCache(documentation('CosineFn', string('"(CosineFn ?DEGREE) returns the cosine of the   PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the   side next to ?DEGREE to the hypotenuse in a right-angled triangle."')), documentation('CosineFn', string('"(CosineFn ?DEGREE) returns the cosine of the   PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the   side next to ?DEGREE to the hypotenuse in a right-angled triangle."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2485, 'Anonymous', on).
mooCache(instance('DenominatorFn', 'UnaryFunction'), instance('DenominatorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2487, 'Anonymous', on).
mooCache(domain('DenominatorFn', 1, 'RealNumber'), domain('DenominatorFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2489, 'Anonymous', on).
mooCache(range('DenominatorFn', 'Integer'), range('DenominatorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2491, 'Anonymous', on).
mooCache(documentation('DenominatorFn', string('"(DenominatorFn ?NUMBER) returns the   denominator of the canonical reduced form of the RealNumber ?NUMBER."')), documentation('DenominatorFn', string('"(DenominatorFn ?NUMBER) returns the   denominator of the canonical reduced form of the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2493, 'Anonymous', on).
mooCache(instance('ExponentiationFn', 'BinaryFunction'), instance('ExponentiationFn', 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2495, 'Anonymous', on).
mooCache(instance('ExponentiationFn', 'RelationExtendedToQuantities'), instance('ExponentiationFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2497, 'Anonymous', on).
mooCache(domain('ExponentiationFn', 1, 'Quantity'), domain('ExponentiationFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2499, 'Anonymous', on).
mooCache(domain('ExponentiationFn', 2, 'Integer'), domain('ExponentiationFn', 2, 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2501, 'Anonymous', on).
mooCache(range('ExponentiationFn', 'Quantity'), range('ExponentiationFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2503, 'Anonymous', on).
mooCache(documentation('ExponentiationFn', string('"(ExponentiationFn ?NUMBER ?INT) returns   the RealNumber ?NUMBER raised to the power of the Integer ?INT."')), documentation('ExponentiationFn', string('"(ExponentiationFn ?NUMBER ?INT) returns   the RealNumber ?NUMBER raised to the power of the Integer ?INT."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2505, 'Anonymous', on).
mooCache(instance('FloorFn', 'UnaryFunction'), instance('FloorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2507, 'Anonymous', on).
mooCache(domain('FloorFn', 1, 'RealNumber'), domain('FloorFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2509, 'Anonymous', on).
mooCache(range('FloorFn', 'Integer'), range('FloorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2511, 'Anonymous', on).
mooCache(documentation('FloorFn', string('"(FloorFn ?NUMBER) returns the largest Integer   less than or equal to the RealNumber ?NUMBER."')), documentation('FloorFn', string('"(FloorFn ?NUMBER) returns the largest Integer   less than or equal to the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2513, 'Anonymous', on).
mooCache(=>(equal('FloorFn'(A), B), not(exists(C, and(instance(C, 'Integer'), and(lessThanOrEqualTo(C, A), greaterThan(C, B)))))), and(entails(and(instance(C, 'Integer'), and(lessThanOrEqualTo(C, A), greaterThan(C, B))), not(holds('FloorFn', A, B))), and(entails(and(holds('FloorFn', A, B), and(lessThanOrEqualTo(C, A), greaterThan(C, B))), not(instance(C, 'Integer'))), and(entails(and(holds('FloorFn', A, B), and(instance(C, 'Integer'), greaterThan(C, B))), not(lessThanOrEqualTo(C, A))), entails(and(holds('FloorFn', A, B), and(instance(C, 'Integer'), lessThanOrEqualTo(C, A))), not(greaterThan(C, B)))))), [domainV(C, ['$instanceof':'Integer', greaterThan:1, lessThanOrEqualTo:1]), domainV(B, ['FloorFn':2, greaterThan:2]), domainV(A, ['FloorFn':1, lessThanOrEqualTo:2]), domainV(D, []), forall(A), forall(B), forall(C), forall(C)], ['NUMBER'=A, 'INT'=B, 'OTHERINT'=C], 'Merge', 'NUMERIC FUNCTIONS', 2515, 'Anonymous', on).
mooCache(instance('GreatestCommonDivisorFn', 'Function'), instance('GreatestCommonDivisorFn', 'Function'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2517, 'Anonymous', on).
mooCache(instance('GreatestCommonDivisorFn', 'VariableArityRelation'), instance('GreatestCommonDivisorFn', 'VariableArityRelation'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2519, 'Anonymous', on).
mooCache(range('GreatestCommonDivisorFn', 'Integer'), range('GreatestCommonDivisorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2521, 'Anonymous', on).
mooCache(documentation('GreatestCommonDivisorFn', string('"(GreatestCommonDivisorFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of   ?NUMBER1 through ?NUMBER."')), documentation('GreatestCommonDivisorFn', string('"(GreatestCommonDivisorFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of   ?NUMBER1 through ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2523, 'Anonymous', on).
mooCache(instance('ImaginaryPartFn', 'UnaryFunction'), instance('ImaginaryPartFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2525, 'Anonymous', on).
mooCache(domain('ImaginaryPartFn', 1, 'ComplexNumber'), domain('ImaginaryPartFn', 1, 'ComplexNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2527, 'Anonymous', on).
mooCache(range('ImaginaryPartFn', 'ImaginaryNumber'), range('ImaginaryPartFn', 'ImaginaryNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2529, 'Anonymous', on).
mooCache(documentation('ImaginaryPartFn', string('"(ImaginaryPartFn ?NUMBER) returns   the imaginary part of ?NUMBER."')), documentation('ImaginaryPartFn', string('"(ImaginaryPartFn ?NUMBER) returns   the imaginary part of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2531, 'Anonymous', on).
mooCache(=>(instance(A, 'ComplexNumber'), exists(B, exists(C, and(equal(C, 'RealNumberFn'(A)), equal(B, 'ImaginaryPartFn'(A)))))), and(and(entails(not(holds('RealNumberFn', A, C)), not(instance(A, 'ComplexNumber'))), entails(and(instance(A, 'ComplexNumber'), '$existential'(C, '?PART1', and(holds('RealNumberFn', A, '?PART1'), holds('ImaginaryPartFn', A, B)))), holds('RealNumberFn', A, C))), and(entails(not(holds('ImaginaryPartFn', A, B)), not(instance(A, 'ComplexNumber'))), entails(and(and(instance(A, 'ComplexNumber'), '$existential'(B, '?PART2', exists(C, and(holds('RealNumberFn', A, C), holds('ImaginaryPartFn', A, '?PART2'))))), '$existential'(C, '?PART1', and(holds('RealNumberFn', A, '?PART1'), holds('ImaginaryPartFn', A, B)))), holds('ImaginaryPartFn', A, B)))), [domainV(C, ['RealNumberFn':2]), domainV(B, ['ImaginaryPartFn':2]), domainV(A, ['$instanceof':'ComplexNumber', 'ImaginaryPartFn':1, 'RealNumberFn':1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PART2', exists(C, and(holds('RealNumberFn', A, C), holds('ImaginaryPartFn', A, '?PART2'))))), replaceConsVar(C, '$existential'('?PART1', and(holds('RealNumberFn', A, '?PART1'), holds('ImaginaryPartFn', A, B))))], ['NUMBER'=A, 'PART1'=C, 'PART2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2533, 'Anonymous', on).
mooCache(instance('IntegerSquareRootFn', 'UnaryFunction'), instance('IntegerSquareRootFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2535, 'Anonymous', on).
mooCache(domain('IntegerSquareRootFn', 1, 'RealNumber'), domain('IntegerSquareRootFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2537, 'Anonymous', on).
mooCache(range('IntegerSquareRootFn', 'NonnegativeInteger'), range('IntegerSquareRootFn', 'NonnegativeInteger'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2539, 'Anonymous', on).
mooCache(documentation('IntegerSquareRootFn', string('"(IntegerSquareRootFn ?NUMBER)   returns the integer square root of ?NUMBER."')), documentation('IntegerSquareRootFn', string('"(IntegerSquareRootFn ?NUMBER)   returns the integer square root of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2541, 'Anonymous', on).
mooCache(instance('LeastCommonMultipleFn', 'Function'), instance('LeastCommonMultipleFn', 'Function'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2543, 'Anonymous', on).
mooCache(instance('LeastCommonMultipleFn', 'VariableArityRelation'), instance('LeastCommonMultipleFn', 'VariableArityRelation'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2545, 'Anonymous', on).
mooCache(range('LeastCommonMultipleFn', 'Integer'), range('LeastCommonMultipleFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2547, 'Anonymous', on).
mooCache(documentation('LeastCommonMultipleFn', string('"(LeastCommonMultipleFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of   ?NUMBER1 through ?NUMBER."')), documentation('LeastCommonMultipleFn', string('"(LeastCommonMultipleFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of   ?NUMBER1 through ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2549, 'Anonymous', on).
mooCache(instance('LogFn', 'BinaryFunction'), instance('LogFn', 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2551, 'Anonymous', on).
mooCache(domain('LogFn', 1, 'RealNumber'), domain('LogFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2553, 'Anonymous', on).
mooCache(domain('LogFn', 2, 'PositiveInteger'), domain('LogFn', 2, 'PositiveInteger'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2555, 'Anonymous', on).
mooCache(range('LogFn', 'RealNumber'), range('LogFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2557, 'Anonymous', on).
mooCache(documentation('LogFn', string('"(LogFn ?NUMBER ?INT) returns the logarithm of the   RealNumber ?NUMBER in the base denoted by the Integer ?INT."')), documentation('LogFn', string('"(LogFn ?NUMBER ?INT) returns the logarithm of the   RealNumber ?NUMBER in the base denoted by the Integer ?INT."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2559, 'Anonymous', on).
mooCache(instance('MaxFn', 'AssociativeFunction'), instance('MaxFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2561, 'Anonymous', on).
mooCache(instance('MaxFn', 'CommutativeFunction'), instance('MaxFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2563, 'Anonymous', on).
mooCache(instance('MaxFn', 'RelationExtendedToQuantities'), instance('MaxFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2565, 'Anonymous', on).
mooCache(domain('MaxFn', 1, 'Quantity'), domain('MaxFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2567, 'Anonymous', on).
mooCache(domain('MaxFn', 2, 'Quantity'), domain('MaxFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2569, 'Anonymous', on).
mooCache(range('MaxFn', 'Quantity'), range('MaxFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2571, 'Anonymous', on).
mooCache(documentation('MaxFn', string('"(MaxFn ?NUMBER1 ?NUMBER2) is the largest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MaxFn returns one of its arguments."')), documentation('MaxFn', string('"(MaxFn ?NUMBER1 ?NUMBER2) is the largest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MaxFn returns one of its arguments."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2573, 'Anonymous', on).
mooCache(=>(equal('MaxFn'(A, B), C), or(and(equal(C, A), greaterThan(A, B)), or(and(equal(C, B), greaterThan(B, A)), and(equal(C, A), equal(C, B))))), and(and(and(entails(and(not(equal(C, A)), and(not(greaterThan(B, A)), not(equal(C, B)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(B, A)), not(equal(C, B)))), equal(C, A)), and(entails(and(holds('MaxFn', A, B, C), and(not(equal(C, A)), not(equal(C, B)))), greaterThan(B, A)), entails(and(holds('MaxFn', A, B, C), and(not(equal(C, A)), not(greaterThan(B, A)))), equal(C, B))))), and(and(entails(and(not(equal(C, A)), and(not(greaterThan(B, A)), not(equal(C, A)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(equal(C, A)), not(equal(C, A)))), greaterThan(B, A)), entails(and(holds('MaxFn', A, B, C), not(greaterThan(B, A))), equal(C, A)))), and(and(entails(and(not(equal(C, A)), and(not(equal(C, B)), not(equal(C, A)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(equal(C, A)), not(equal(C, A)))), equal(C, B)), entails(and(holds('MaxFn', A, B, C), not(equal(C, B))), equal(C, A)))), and(entails(and(not(equal(C, A)), and(not(equal(C, B)), not(equal(C, B)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(equal(C, B)), not(equal(C, B)))), equal(C, A)), entails(and(holds('MaxFn', A, B, C), not(equal(C, A))), equal(C, B))))))), and(and(entails(and(not(greaterThan(A, B)), and(not(greaterThan(B, A)), not(equal(C, B)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(B, A)), not(equal(C, B)))), greaterThan(A, B)), and(entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(A, B)), not(equal(C, B)))), greaterThan(B, A)), entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(A, B)), not(greaterThan(B, A)))), equal(C, B))))), and(and(entails(and(not(greaterThan(A, B)), and(not(greaterThan(B, A)), not(equal(C, A)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(B, A)), not(equal(C, A)))), greaterThan(A, B)), and(entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(A, B)), not(equal(C, A)))), greaterThan(B, A)), entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(A, B)), not(greaterThan(B, A)))), equal(C, A))))), and(and(entails(and(not(greaterThan(A, B)), and(not(equal(C, B)), not(equal(C, A)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(equal(C, B)), not(equal(C, A)))), greaterThan(A, B)), and(entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(A, B)), not(equal(C, A)))), equal(C, B)), entails(and(holds('MaxFn', A, B, C), and(not(greaterThan(A, B)), not(equal(C, B)))), equal(C, A))))), and(entails(and(not(greaterThan(A, B)), and(not(equal(C, B)), not(equal(C, B)))), not(holds('MaxFn', A, B, C))), and(entails(and(holds('MaxFn', A, B, C), and(not(equal(C, B)), not(equal(C, B)))), greaterThan(A, B)), entails(and(holds('MaxFn', A, B, C), not(greaterThan(A, B))), equal(C, B)))))))), [domainV(C, ['MaxFn':3]), domainV(B, ['MaxFn':2, greaterThan:1, greaterThan:2]), domainV(A, ['MaxFn':1, greaterThan:1, greaterThan:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['NUMBER1'=A, 'NUMBER2'=B, 'NUMBER'=C], 'Merge', 'NUMERIC FUNCTIONS', 2575, 'Anonymous', on).
mooCache(instance('MinFn', 'AssociativeFunction'), instance('MinFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2577, 'Anonymous', on).
mooCache(instance('MinFn', 'CommutativeFunction'), instance('MinFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2579, 'Anonymous', on).
mooCache(instance('MinFn', 'RelationExtendedToQuantities'), instance('MinFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2581, 'Anonymous', on).
mooCache(domain('MinFn', 1, 'Quantity'), domain('MinFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2583, 'Anonymous', on).
mooCache(domain('MinFn', 2, 'Quantity'), domain('MinFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2585, 'Anonymous', on).
mooCache(range('MinFn', 'Quantity'), range('MinFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2587, 'Anonymous', on).
mooCache(documentation('MinFn', string('"(MinFn ?NUMBER1 ?NUMBER2) is the smallest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MinFn returns one of its arguments."')), documentation('MinFn', string('"(MinFn ?NUMBER1 ?NUMBER2) is the smallest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MinFn returns one of its arguments."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2589, 'Anonymous', on).
mooCache(=>(equal('MinFn'(A, B), C), or(and(equal(C, A), lessThan(A, B)), or(and(equal(C, B), lessThan(B, A)), and(equal(C, A), equal(C, B))))), and(and(and(entails(and(not(equal(C, A)), and(not(lessThan(B, A)), not(equal(C, B)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(lessThan(B, A)), not(equal(C, B)))), equal(C, A)), and(entails(and(holds('MinFn', A, B, C), and(not(equal(C, A)), not(equal(C, B)))), lessThan(B, A)), entails(and(holds('MinFn', A, B, C), and(not(equal(C, A)), not(lessThan(B, A)))), equal(C, B))))), and(and(entails(and(not(equal(C, A)), and(not(lessThan(B, A)), not(equal(C, A)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(equal(C, A)), not(equal(C, A)))), lessThan(B, A)), entails(and(holds('MinFn', A, B, C), not(lessThan(B, A))), equal(C, A)))), and(and(entails(and(not(equal(C, A)), and(not(equal(C, B)), not(equal(C, A)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(equal(C, A)), not(equal(C, A)))), equal(C, B)), entails(and(holds('MinFn', A, B, C), not(equal(C, B))), equal(C, A)))), and(entails(and(not(equal(C, A)), and(not(equal(C, B)), not(equal(C, B)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(equal(C, B)), not(equal(C, B)))), equal(C, A)), entails(and(holds('MinFn', A, B, C), not(equal(C, A))), equal(C, B))))))), and(and(entails(and(not(lessThan(A, B)), and(not(lessThan(B, A)), not(equal(C, B)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(lessThan(B, A)), not(equal(C, B)))), lessThan(A, B)), and(entails(and(holds('MinFn', A, B, C), and(not(lessThan(A, B)), not(equal(C, B)))), lessThan(B, A)), entails(and(holds('MinFn', A, B, C), and(not(lessThan(A, B)), not(lessThan(B, A)))), equal(C, B))))), and(and(entails(and(not(lessThan(A, B)), and(not(lessThan(B, A)), not(equal(C, A)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(lessThan(B, A)), not(equal(C, A)))), lessThan(A, B)), and(entails(and(holds('MinFn', A, B, C), and(not(lessThan(A, B)), not(equal(C, A)))), lessThan(B, A)), entails(and(holds('MinFn', A, B, C), and(not(lessThan(A, B)), not(lessThan(B, A)))), equal(C, A))))), and(and(entails(and(not(lessThan(A, B)), and(not(equal(C, B)), not(equal(C, A)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(equal(C, B)), not(equal(C, A)))), lessThan(A, B)), and(entails(and(holds('MinFn', A, B, C), and(not(lessThan(A, B)), not(equal(C, A)))), equal(C, B)), entails(and(holds('MinFn', A, B, C), and(not(lessThan(A, B)), not(equal(C, B)))), equal(C, A))))), and(entails(and(not(lessThan(A, B)), and(not(equal(C, B)), not(equal(C, B)))), not(holds('MinFn', A, B, C))), and(entails(and(holds('MinFn', A, B, C), and(not(equal(C, B)), not(equal(C, B)))), lessThan(A, B)), entails(and(holds('MinFn', A, B, C), not(lessThan(A, B))), equal(C, B)))))))), [domainV(C, ['MinFn':3]), domainV(B, ['MinFn':2, lessThan:1, lessThan:2]), domainV(A, ['MinFn':1, lessThan:1, lessThan:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['NUMBER1'=A, 'NUMBER2'=B, 'NUMBER'=C], 'Merge', 'NUMERIC FUNCTIONS', 2591, 'Anonymous', on).
mooCache(instance('NumeratorFn', 'UnaryFunction'), instance('NumeratorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2593, 'Anonymous', on).
mooCache(domain('NumeratorFn', 1, 'RealNumber'), domain('NumeratorFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2595, 'Anonymous', on).
mooCache(range('NumeratorFn', 'Integer'), range('NumeratorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2597, 'Anonymous', on).
mooCache(documentation('NumeratorFn', string('"(NumeratorFn ?NUMBER) returns the numerator   of the canonical reduced form ?NUMBER."')), documentation('NumeratorFn', string('"(NumeratorFn ?NUMBER) returns the numerator   of the canonical reduced form ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2599, 'Anonymous', on).
mooCache(instance('Pi', 'RealNumber'), instance('Pi', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2601, 'Anonymous', on).
mooCache(documentation('Pi', string('"Pi is the RealNumber that   is the ratio of the perimeter of a circle to its diameter.  It is   approximately equal to 3.141592653589793."')), documentation('Pi', string('"Pi is the RealNumber that   is the ratio of the perimeter of a circle to its diameter.  It is   approximately equal to 3.141592653589793."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2603, 'Anonymous', on).
mooCache(instance('RationalNumberFn', 'UnaryFunction'), instance('RationalNumberFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2605, 'Anonymous', on).
mooCache(domain('RationalNumberFn', 1, 'Number'), domain('RationalNumberFn', 1, 'Number'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2607, 'Anonymous', on).
mooCache(range('RationalNumberFn', 'RationalNumber'), range('RationalNumberFn', 'RationalNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2609, 'Anonymous', on).
mooCache(documentation('RationalNumberFn', string('"(RationalNumberFn ?NUMBER) returns   the rational representation of ?NUMBER."')), documentation('RationalNumberFn', string('"(RationalNumberFn ?NUMBER) returns   the rational representation of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2611, 'Anonymous', on).
mooCache(instance('RealNumberFn', 'UnaryFunction'), instance('RealNumberFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2613, 'Anonymous', on).
mooCache(domain('RealNumberFn', 1, 'Number'), domain('RealNumberFn', 1, 'Number'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2615, 'Anonymous', on).
mooCache(range('RealNumberFn', 'RealNumber'), range('RealNumberFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2617, 'Anonymous', on).
mooCache(documentation('RealNumberFn', string('"(RealNumberFn ?NUMBER) returns the part of   ?NUMBER that is a RealNumber."')), documentation('RealNumberFn', string('"(RealNumberFn ?NUMBER) returns the part of   ?NUMBER that is a RealNumber."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2619, 'Anonymous', on).
mooCache(instance('ReciprocalFn', 'UnaryFunction'), instance('ReciprocalFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2621, 'Anonymous', on).
mooCache(instance('ReciprocalFn', 'RelationExtendedToQuantities'), instance('ReciprocalFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2623, 'Anonymous', on).
mooCache(domain('ReciprocalFn', 1, 'Quantity'), domain('ReciprocalFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2625, 'Anonymous', on).
mooCache(range('ReciprocalFn', 'Quantity'), range('ReciprocalFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2627, 'Anonymous', on).
mooCache(documentation('ReciprocalFn', string('"(ReciprocalFn ?NUMBER) is the reciprocal   element of ?NUMBER with respect to the multiplication operator   (MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal   element.  For example the number 0 does not.  If a number ?NUMBER has a   reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be   1, e.g. 3*1/3 = 1.  The reciprocal of an element is equal to   applying the ExponentiationFn function to the element to the power   -1."')), documentation('ReciprocalFn', string('"(ReciprocalFn ?NUMBER) is the reciprocal   element of ?NUMBER with respect to the multiplication operator   (MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal   element.  For example the number 0 does not.  If a number ?NUMBER has a   reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be   1, e.g. 3*1/3 = 1.  The reciprocal of an element is equal to   applying the ExponentiationFn function to the element to the power   -1."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2629, 'Anonymous', on).
mooCache(equal('ReciprocalFn'(A), 'ExponentiationFn'(A, -1)), equal('ReciprocalFn'(A), 'ExponentiationFn'(A, -1)), [domainV(A, ['ExponentiationFn':1, 'ReciprocalFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'NUMERIC FUNCTIONS', 2631, 'Anonymous', on).
mooCache(equal(1, 'MultiplicationFn'(A, 'ReciprocalFn'(A))), equal(1, 'MultiplicationFn'(A, 'ReciprocalFn'(A))), [domainV(A, ['MultiplicationFn':1, 'ReciprocalFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'NUMERIC FUNCTIONS', 2633, 'Anonymous', on).
mooCache(instance('RemainderFn', 'BinaryFunction'), instance('RemainderFn', 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2635, 'Anonymous', on).
mooCache(instance('RemainderFn', 'RelationExtendedToQuantities'), instance('RemainderFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2637, 'Anonymous', on).
mooCache(domain('RemainderFn', 1, 'Quantity'), domain('RemainderFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2639, 'Anonymous', on).
mooCache(domain('RemainderFn', 2, 'Quantity'), domain('RemainderFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2641, 'Anonymous', on).
mooCache(range('RemainderFn', 'Quantity'), range('RemainderFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2643, 'Anonymous', on).
mooCache(documentation('RemainderFn', string('"(RemainderFn ?NUMBER ?DIVISOR) is the   remainder of the number ?NUMBER divided by the number ?DIVISOR.    The result has the same sign as ?DIVISOR."')), documentation('RemainderFn', string('"(RemainderFn ?NUMBER ?DIVISOR) is the   remainder of the number ?NUMBER divided by the number ?DIVISOR.    The result has the same sign as ?DIVISOR."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2645, 'Anonymous', on).
mooCache(<=>(equal('RemainderFn'(A, B), C), equal('AdditionFn'('MultiplicationFn'('FloorFn'('DivisionFn'(A, B)), B), C), A)), and(and(entails(holds('RemainderFn', A, B, C), holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(A, B)), B), C, A)), entails(not(holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(A, B)), B), C, A)), not(holds('RemainderFn', A, B, C)))), and(entails(holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(A, B)), B), C, A), holds('RemainderFn', A, B, C)), entails(not(holds('RemainderFn', A, B, C)), not(holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(A, B)), B), C, A))))), [domainV(C, ['AdditionFn':2, 'RemainderFn':3]), domainV(B, ['DivisionFn':2, 'MultiplicationFn':2, 'RemainderFn':2]), domainV(A, ['AdditionFn':3, 'DivisionFn':1, 'RemainderFn':1]), domainV(D, []), forall(A), forall(B), forall(C)], ['NUMBER1'=A, 'NUMBER2'=B, 'NUMBER'=C], 'Merge', 'NUMERIC FUNCTIONS', 2647, 'Anonymous', on).
mooCache(=>(equal('RemainderFn'(A, B), C), equal('SignumFn'(B), 'SignumFn'(C))), and(entails(not(equal('SignumFn'(B), 'SignumFn'(C))), not(holds('RemainderFn', A, B, C))), entails(holds('RemainderFn', A, B, C), equal('SignumFn'(B), 'SignumFn'(C)))), [domainV(C, ['RemainderFn':3, 'SignumFn':1]), domainV(B, ['RemainderFn':2, 'SignumFn':1]), domainV(A, ['RemainderFn':1]), domainV(D, []), forall(A), forall(B), forall(C)], ['NUMBER1'=A, 'NUMBER2'=B, 'NUMBER'=C], 'Merge', 'NUMERIC FUNCTIONS', 2649, 'Anonymous', on).
mooCache(=>(instance(A, 'EvenInteger'), equal('RemainderFn'(A, 2), 0)), and(entails(not(equal('RemainderFn'(A, 2), 0)), not(instance(A, 'EvenInteger'))), entails(instance(A, 'EvenInteger'), equal('RemainderFn'(A, 2), 0))), [domainV(A, ['$instanceof':'EvenInteger', 'RemainderFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'NUMERIC FUNCTIONS', 2651, 'Anonymous', on).
mooCache(=>(instance(A, 'OddInteger'), equal('RemainderFn'(A, 2), 1)), and(entails(not(equal('RemainderFn'(A, 2), 1)), not(instance(A, 'OddInteger'))), entails(instance(A, 'OddInteger'), equal('RemainderFn'(A, 2), 1))), [domainV(A, ['$instanceof':'OddInteger', 'RemainderFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'NUMERIC FUNCTIONS', 2653, 'Anonymous', on).
mooCache(=>(instance(A, 'PrimeNumber'), forall(B, =>(equal('RemainderFn'(A, B), 0), or(equal(B, 1), equal(B, A))))), and(entails(and(equal('RemainderFn'(A, B), 0), and(not(equal(1, B)), not(equal(B, A)))), not(instance(A, 'PrimeNumber'))), and(entails(and(instance(A, 'PrimeNumber'), and(not(equal(1, B)), not(equal(B, A)))), not(equal('RemainderFn'(A, B), 0))), and(entails(and(instance(A, 'PrimeNumber'), and(equal('RemainderFn'(A, B), 0), not(equal(B, A)))), equal(1, B)), entails(and(instance(A, 'PrimeNumber'), and(equal('RemainderFn'(A, B), 0), not(equal(1, B)))), equal(B, A))))), [domainV(B, ['RemainderFn':2]), domainV(A, ['$instanceof':'PrimeNumber', 'RemainderFn':1]), domainV(C, []), forall(A), forall(B)], ['PRIME'=A, 'NUMBER'=B], 'Merge', 'NUMERIC FUNCTIONS', 2655, 'Anonymous', on).
mooCache(instance('RoundFn', 'UnaryFunction'), instance('RoundFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2657, 'Anonymous', on).
mooCache(instance('RoundFn', 'RelationExtendedToQuantities'), instance('RoundFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2659, 'Anonymous', on).
mooCache(domain('RoundFn', 1, 'Quantity'), domain('RoundFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2661, 'Anonymous', on).
mooCache(range('RoundFn', 'Quantity'), range('RoundFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2663, 'Anonymous', on).
mooCache(documentation('RoundFn', string('"(RoundFn ?NUMBER) is the Integer closest   to ?NUMBER on the number line.  If ?NUMBER is halfway between two   Integers (for example 3.5), it denotes the larger Integer."')), documentation('RoundFn', string('"(RoundFn ?NUMBER) is the Integer closest   to ?NUMBER on the number line.  If ?NUMBER is halfway between two   Integers (for example 3.5), it denotes the larger Integer."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2665, 'Anonymous', on).
mooCache(=>(equal('RoundFn'(A), B), or(=>(lessThan('SubtractionFn'(A, 'FloorFn'(A)), 0.5), equal(B, 'FloorFn'(A))), =>(greaterThanOrEqualTo('SubtractionFn'(A, 'FloorFn'(A)), 0.5), equal(B, 'CeilingFn'(A))))), and(entails(and(and(lessThan('SubtractionFn'(A, 'FloorFn'(A)), 0.5), not(holds('FloorFn', A, B))), and(greaterThanOrEqualTo('SubtractionFn'(A, 'FloorFn'(A)), 0.5), not(holds('CeilingFn', A, B)))), not(holds('RoundFn', A, B))), and(entails(and(holds('RoundFn', A, B), and(not(holds('FloorFn', A, B)), and(greaterThanOrEqualTo('SubtractionFn'(A, 'FloorFn'(A)), 0.5), not(holds('CeilingFn', A, B))))), not(lessThan('SubtractionFn'(A, 'FloorFn'(A)), 0.5))), and(entails(and(holds('RoundFn', A, B), and(lessThan('SubtractionFn'(A, 'FloorFn'(A)), 0.5), and(greaterThanOrEqualTo('SubtractionFn'(A, 'FloorFn'(A)), 0.5), not(holds('CeilingFn', A, B))))), holds('FloorFn', A, B)), and(entails(and(holds('RoundFn', A, B), and(and(lessThan('SubtractionFn'(A, 'FloorFn'(A)), 0.5), not(holds('FloorFn', A, B))), not(holds('CeilingFn', A, B)))), not(greaterThanOrEqualTo('SubtractionFn'(A, 'FloorFn'(A)), 0.5))), entails(and(holds('RoundFn', A, B), and(and(lessThan('SubtractionFn'(A, 'FloorFn'(A)), 0.5), not(holds('FloorFn', A, B))), greaterThanOrEqualTo('SubtractionFn'(A, 'FloorFn'(A)), 0.5))), holds('CeilingFn', A, B)))))), [domainV(B, ['CeilingFn':2, 'FloorFn':2, 'RoundFn':2]), domainV(A, ['CeilingFn':1, 'FloorFn':1, 'RoundFn':1, 'SubtractionFn':1]), domainV(C, []), forall(A), forall(B)], ['NUMBER1'=A, 'NUMBER2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2667, 'Anonymous', on).
mooCache(instance('SignumFn', 'UnaryFunction'), instance('SignumFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2669, 'Anonymous', on).
mooCache(domain('SignumFn', 1, 'RealNumber'), domain('SignumFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2671, 'Anonymous', on).
mooCache(range('SignumFn', 'Integer'), range('SignumFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2673, 'Anonymous', on).
mooCache(documentation('SignumFn', string('"(SignumFn ?NUMBER) denotes the sign of ?NUMBER.    This is one of the following values:  -1, 1, or 0."')), documentation('SignumFn', string('"(SignumFn ?NUMBER) denotes the sign of ?NUMBER.    This is one of the following values:  -1, 1, or 0."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2675, 'Anonymous', on).
mooCache(=>(instance(A, 'NonnegativeRealNumber'), or(equal('SignumFn'(A), 1), equal('SignumFn'(A), 0))), and(entails(and(not(equal('SignumFn'(A), 1)), not(equal('SignumFn'(A), 0))), not(instance(A, 'NonnegativeRealNumber'))), and(entails(and(instance(A, 'NonnegativeRealNumber'), not(equal('SignumFn'(A), 0))), equal('SignumFn'(A), 1)), entails(and(instance(A, 'NonnegativeRealNumber'), not(equal('SignumFn'(A), 1))), equal('SignumFn'(A), 0)))), [domainV(A, ['$instanceof':'NonnegativeRealNumber', 'SignumFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'NUMERIC FUNCTIONS', 2677, 'Anonymous', on).
mooCache(=>(instance(A, 'PositiveRealNumber'), equal('SignumFn'(A), 1)), and(entails(not(equal('SignumFn'(A), 1)), not(instance(A, 'PositiveRealNumber'))), entails(instance(A, 'PositiveRealNumber'), equal('SignumFn'(A), 1))), [domainV(A, ['$instanceof':'PositiveRealNumber', 'SignumFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'NUMERIC FUNCTIONS', 2679, 'Anonymous', on).
mooCache(=>(instance(A, 'NegativeRealNumber'), equal('SignumFn'(A), -1)), and(entails(not(equal('SignumFn'(A), -1)), not(instance(A, 'NegativeRealNumber'))), entails(instance(A, 'NegativeRealNumber'), equal('SignumFn'(A), -1))), [domainV(A, ['$instanceof':'NegativeRealNumber', 'SignumFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'NUMERIC FUNCTIONS', 2681, 'Anonymous', on).
mooCache(instance('SineFn', 'UnaryFunction'), instance('SineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2683, 'Anonymous', on).
mooCache(domain('SineFn', 1, 'PlaneAngleMeasure'), domain('SineFn', 1, 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2685, 'Anonymous', on).
mooCache(range('SineFn', 'RealNumber'), range('SineFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2687, 'Anonymous', on).
mooCache(documentation('SineFn', string('"(SineFn ?DEGREE) is the sine of the   PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side   opposite ?DEGREE to the hypotenuse in a right-angled triangle."')), documentation('SineFn', string('"(SineFn ?DEGREE) is the sine of the   PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side   opposite ?DEGREE to the hypotenuse in a right-angled triangle."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2689, 'Anonymous', on).
mooCache(instance('SquareRootFn', 'UnaryFunction'), instance('SquareRootFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2691, 'Anonymous', on).
mooCache(domain('SquareRootFn', 1, 'RealNumber'), domain('SquareRootFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2693, 'Anonymous', on).
mooCache(range('SquareRootFn', 'RealNumber'), range('SquareRootFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2695, 'Anonymous', on).
mooCache(documentation('SquareRootFn', string('"(SquareRootFn ?NUMBER) is the principal   square root of ?NUMBER."')), documentation('SquareRootFn', string('"(SquareRootFn ?NUMBER) is the principal   square root of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2697, 'Anonymous', on).
mooCache(=>(equal('SquareRootFn'(A), B), equal('MultiplicationFn'(B, B), A)), and(entails(not(holds('MultiplicationFn', B, B, A)), not(holds('SquareRootFn', A, B))), entails(holds('SquareRootFn', A, B), holds('MultiplicationFn', B, B, A))), [domainV(B, ['MultiplicationFn':1, 'MultiplicationFn':2, 'SquareRootFn':2]), domainV(A, ['MultiplicationFn':3, 'SquareRootFn':1]), domainV(C, []), forall(A), forall(B)], ['NUMBER1'=A, 'NUMBER2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2699, 'Anonymous', on).
mooCache(instance('TangentFn', 'UnaryFunction'), instance('TangentFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2701, 'Anonymous', on).
mooCache(domain('TangentFn', 1, 'PlaneAngleMeasure'), domain('TangentFn', 1, 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2703, 'Anonymous', on).
mooCache(range('TangentFn', 'RealNumber'), range('TangentFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2705, 'Anonymous', on).
mooCache(documentation('TangentFn', string('"(TangentFn ?DEGREE) is the tangent of the   PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of   the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled   triangle."')), documentation('TangentFn', string('"(TangentFn ?DEGREE) is the tangent of the   PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of   the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled   triangle."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2707, 'Anonymous', on).
mooCache(equal('TangentFn'(A), 'DivisionFn'('SineFn'(A), 'CosineFn'(A))), equal('TangentFn'(A), 'DivisionFn'('SineFn'(A), 'CosineFn'(A))), [domainV(A, ['CosineFn':1, 'SineFn':1, 'TangentFn':1]), domainV(B, []), forall(A)], ['DEGREE'=A], 'Merge', 'NUMERIC FUNCTIONS', 2709, 'Anonymous', on).
mooCache(instance('IdentityFn', 'UnaryFunction'), instance('IdentityFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2711, 'Anonymous', on).
mooCache(domain('IdentityFn', 1, 'Entity'), domain('IdentityFn', 1, 'Entity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2713, 'Anonymous', on).
mooCache(range('IdentityFn', 'Entity'), range('IdentityFn', 'Entity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2715, 'Anonymous', on).
mooCache(documentation('IdentityFn', string('"The value of the identity function is   just its argument."')), documentation('IdentityFn', string('"The value of the identity function is   just its argument."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2717, 'Anonymous', on).
mooCache(equal('IdentityFn'(A), A), holds('IdentityFn', A, A), [domainV(A, ['IdentityFn':1, 'IdentityFn':2]), domainV(B, []), forall(A)], ['INST'=A], 'Merge', 'NUMERIC FUNCTIONS', 2719, 'Anonymous', on).
mooCache(instance(identityElement, 'BinaryPredicate'), instance(identityElement, 'BinaryPredicate'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2721, 'Anonymous', on).
mooCache(instance(identityElement, 'AsymmetricRelation'), instance(identityElement, 'AsymmetricRelation'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2723, 'Anonymous', on).
mooCache(domain(identityElement, 1, 'BinaryFunction'), domain(identityElement, 1, 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2725, 'Anonymous', on).
mooCache(domain(identityElement, 2, 'Entity'), domain(identityElement, 2, 'Entity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2727, 'Anonymous', on).
mooCache(documentation(identityElement, string('"An object ?ID is the identity element   for BinaryFunction ?FUNCTION just in case, for every instance ?INST,   applying ?FUNCTION to ?INST and ?ID results in ?INST."')), documentation(identityElement, string('"An object ?ID is the identity element   for BinaryFunction ?FUNCTION just in case, for every instance ?INST,   applying ?FUNCTION to ?INST and ?ID results in ?INST."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2729, 'Anonymous', on).
mooCache(=>(identityElement(A, B), forall(C, =>(instance(C, 'DomainFn'(A)), equal('AssignmentFn'(A, B, C), C)))), and(entails(and(instance(C, 'DomainFn'(A)), not(holds(A, B, C, C))), not(identityElement(A, B))), and(entails(and(identityElement(A, B), not(holds(A, B, C, C))), not(instance(C, 'DomainFn'(A)))), entails(and(identityElement(A, B), instance(C, 'DomainFn'(A))), holds(A, B, C, C)))), [domainV(C, [A:2, A:3]), domainV(B, [identityElement:2, A:1]), domainV(A, ['DomainFn':1, holds:1, identityElement:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['FUNCTION'=A, 'ID'=B, 'INST'=C], 'Merge', 'NUMERIC FUNCTIONS', 2731, 'Anonymous', on).
mooCache(identityElement('MultiplicationFn', 1), identityElement('MultiplicationFn', 1), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2733, 'Anonymous', on).
mooCache(identityElement('AdditionFn', 0), identityElement('AdditionFn', 0), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2735, 'Anonymous', on).
mooCache(identityElement('SubtractionFn', 0), identityElement('SubtractionFn', 0), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2737, 'Anonymous', on).
mooCache(identityElement('DivisionFn', 1), identityElement('DivisionFn', 1), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2739, 'Anonymous', on).
mooCache(instance('SuccessorFn', 'UnaryFunction'), instance('SuccessorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2741, 'Anonymous', on).
mooCache(domain('SuccessorFn', 1, 'Integer'), domain('SuccessorFn', 1, 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2743, 'Anonymous', on).
mooCache(range('SuccessorFn', 'Integer'), range('SuccessorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2745, 'Anonymous', on).
mooCache(documentation('SuccessorFn', string('"A UnaryFunction that maps an Integer to   its successor, e.g. the successor of 5 is 6."')), documentation('SuccessorFn', string('"A UnaryFunction that maps an Integer to   its successor, e.g. the successor of 5 is 6."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2747, 'Anonymous', on).
mooCache(=>(equal('SuccessorFn'(A), 'SuccessorFn'(B)), equal(A, B)), and(entails(not(equal(A, B)), not(equal('SuccessorFn'(A), 'SuccessorFn'(B)))), entails(equal('SuccessorFn'(A), 'SuccessorFn'(B)), equal(A, B))), [domainV(B, ['SuccessorFn':1]), domainV(A, ['SuccessorFn':1]), domainV(C, []), forall(A), forall(B)], ['INT1'=A, 'INT2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2749, 'Anonymous', on).
mooCache(=>(instance(A, 'Integer'), lessThan(A, 'SuccessorFn'(A))), and(entails(not(lessThan(A, 'SuccessorFn'(A))), not(instance(A, 'Integer'))), entails(instance(A, 'Integer'), lessThan(A, 'SuccessorFn'(A)))), [domainV(A, ['$instanceof':'Integer', 'SuccessorFn':1, lessThan:1]), domainV(B, []), forall(A)], ['INT'=A], 'Merge', 'NUMERIC FUNCTIONS', 2751, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Integer'), instance(B, 'Integer')), not(and(lessThan(A, B), lessThan(B, 'SuccessorFn'(A))))), and(entails(and(instance(B, 'Integer'), and(lessThan(A, B), lessThan(B, 'SuccessorFn'(A)))), not(instance(A, 'Integer'))), and(entails(and(instance(A, 'Integer'), and(lessThan(A, B), lessThan(B, 'SuccessorFn'(A)))), not(instance(B, 'Integer'))), and(entails(and(and(instance(A, 'Integer'), instance(B, 'Integer')), lessThan(B, 'SuccessorFn'(A))), not(lessThan(A, B))), entails(and(and(instance(A, 'Integer'), instance(B, 'Integer')), lessThan(A, B)), not(lessThan(B, 'SuccessorFn'(A))))))), [domainV(B, ['$instanceof':'Integer', lessThan:1, lessThan:2]), domainV(A, ['$instanceof':'Integer', 'SuccessorFn':1, lessThan:1]), domainV(C, []), forall(A), forall(B)], ['INT1'=A, 'INT2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2753, 'Anonymous', on).
mooCache(=>(instance(A, 'Integer'), equal(A, 'SuccessorFn'('PredecessorFn'(A)))), and(entails(not(holds('SuccessorFn', 'PredecessorFn'(A), A)), not(instance(A, 'Integer'))), entails(instance(A, 'Integer'), holds('SuccessorFn', 'PredecessorFn'(A), A))), [domainV(A, ['$instanceof':'Integer', 'PredecessorFn':1, 'SuccessorFn':2]), domainV(B, []), forall(A)], ['INT'=A], 'Merge', 'NUMERIC FUNCTIONS', 2755, 'Anonymous', on).
mooCache(=>(instance(A, 'Integer'), equal(A, 'PredecessorFn'('SuccessorFn'(A)))), and(entails(not(holds('PredecessorFn', 'SuccessorFn'(A), A)), not(instance(A, 'Integer'))), entails(instance(A, 'Integer'), holds('PredecessorFn', 'SuccessorFn'(A), A))), [domainV(A, ['$instanceof':'Integer', 'PredecessorFn':2, 'SuccessorFn':1]), domainV(B, []), forall(A)], ['INT'=A], 'Merge', 'NUMERIC FUNCTIONS', 2757, 'Anonymous', on).
mooCache(instance('PredecessorFn', 'UnaryFunction'), instance('PredecessorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2759, 'Anonymous', on).
mooCache(domain('PredecessorFn', 1, 'Integer'), domain('PredecessorFn', 1, 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2761, 'Anonymous', on).
mooCache(range('PredecessorFn', 'Integer'), range('PredecessorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2763, 'Anonymous', on).
mooCache(documentation('PredecessorFn', string('"A UnaryFunction that maps an Integer to   its predecessor, e.g. the predecessor of 5 is 4."')), documentation('PredecessorFn', string('"A UnaryFunction that maps an Integer to   its predecessor, e.g. the predecessor of 5 is 4."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2765, 'Anonymous', on).
mooCache(=>(equal('PredecessorFn'(A), 'PredecessorFn'(B)), equal(A, B)), and(entails(not(equal(A, B)), not(equal('PredecessorFn'(A), 'PredecessorFn'(B)))), entails(equal('PredecessorFn'(A), 'PredecessorFn'(B)), equal(A, B))), [domainV(B, ['PredecessorFn':1]), domainV(A, ['PredecessorFn':1]), domainV(C, []), forall(A), forall(B)], ['INT1'=A, 'INT2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2767, 'Anonymous', on).
mooCache(=>(instance(A, 'Integer'), greaterThan(A, 'PredecessorFn'(A))), and(entails(not(greaterThan(A, 'PredecessorFn'(A))), not(instance(A, 'Integer'))), entails(instance(A, 'Integer'), greaterThan(A, 'PredecessorFn'(A)))), [domainV(A, ['$instanceof':'Integer', 'PredecessorFn':1, greaterThan:1]), domainV(B, []), forall(A)], ['INT'=A], 'Merge', 'NUMERIC FUNCTIONS', 2769, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Integer'), instance(B, 'Integer')), not(and(lessThan(B, A), lessThan('PredecessorFn'(A), B)))), and(entails(and(instance(B, 'Integer'), and(lessThan(B, A), lessThan('PredecessorFn'(A), B))), not(instance(A, 'Integer'))), and(entails(and(instance(A, 'Integer'), and(lessThan(B, A), lessThan('PredecessorFn'(A), B))), not(instance(B, 'Integer'))), and(entails(and(and(instance(A, 'Integer'), instance(B, 'Integer')), lessThan('PredecessorFn'(A), B)), not(lessThan(B, A))), entails(and(and(instance(A, 'Integer'), instance(B, 'Integer')), lessThan(B, A)), not(lessThan('PredecessorFn'(A), B)))))), [domainV(B, ['$instanceof':'Integer', lessThan:1, lessThan:2]), domainV(A, ['$instanceof':'Integer', 'PredecessorFn':1, lessThan:2]), domainV(C, []), forall(A), forall(B)], ['INT1'=A, 'INT2'=B], 'Merge', 'NUMERIC FUNCTIONS', 2771, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'SET/CLASS Context', 2783, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'SET/CLASS Context', 2786, 'Anonymous', on).
mooCache(subrelation(subset, subclass), subrelation(subset, subclass), [], [], 'Merge', 'SET/CLASS Context', 2795, 'Anonymous', on).
mooCache(domain(subset, 1, 'Set'), domain(subset, 1, 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2797, 'Anonymous', on).
mooCache(domain(subset, 2, 'Set'), domain(subset, 2, 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2799, 'Anonymous', on).
mooCache(documentation(subset, string('"(subset ?SET1 ?SET2) is true just in case the   elements of the Set ?SET1 are also elements of the Set ?SET2."')), documentation(subset, string('"(subset ?SET1 ?SET2) is true just in case the   elements of the Set ?SET1 are also elements of the Set ?SET2."')), [], [], 'Merge', 'SET/CLASS Context', 2801, 'Anonymous', on).
mooCache(=>(subset(A, B), forall(C, =>(element(C, A), element(C, B)))), and(entails(and(element(C, A), not(element(C, B))), not(subset(A, B))), and(entails(and(subset(A, B), not(element(C, B))), not(element(C, A))), entails(and(subset(A, B), element(C, A)), element(C, B)))), [domainV(C, [element:1]), domainV(B, [element:2, subset:2]), domainV(A, [element:2, subset:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['SUBSET'=A, 'SET'=B, 'ELEMENT'=C], 'Merge', 'SET/CLASS Context', 2803, 'Anonymous', on).
mooCache(instance(element, 'BinaryPredicate'), instance(element, 'BinaryPredicate'), [], [], 'Merge', 'SET/CLASS Context', 2805, 'Anonymous', on).
mooCache(instance(element, 'AsymmetricRelation'), instance(element, 'AsymmetricRelation'), [], [], 'Merge', 'SET/CLASS Context', 2807, 'Anonymous', on).
mooCache(instance(element, 'IntransitiveRelation'), instance(element, 'IntransitiveRelation'), [], [], 'Merge', 'SET/CLASS Context', 2809, 'Anonymous', on).
mooCache(subrelation(element, instance), subrelation(element, instance), [], [], 'Merge', 'SET/CLASS Context', 2811, 'Anonymous', on).
mooCache(domain(element, 1, 'Entity'), domain(element, 1, 'Entity'), [], [], 'Merge', 'SET/CLASS Context', 2813, 'Anonymous', on).
mooCache(domain(element, 2, 'Set'), domain(element, 2, 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2815, 'Anonymous', on).
mooCache(documentation(element, string('"(element ?ENTITY ?SET) is true just in case   ?ENTITY is contained in the Set ?SET.  An Entity can be an element   of another Entity only if the latter is a Set."')), documentation(element, string('"(element ?ENTITY ?SET) is true just in case   ?ENTITY is contained in the Set ?SET.  An Entity can be an element   of another Entity only if the latter is a Set."')), [], [], 'Merge', 'SET/CLASS Context', 2817, 'Anonymous', on).
mooCache(=>(forall(A, <=>(element(A, B), element(A, C))), equal(B, C)), and(entails(and(element(A, C), not(element(A, C))), equal(B, C)), and(and(entails(and(element(A, C), element(A, B)), equal(B, C)), and(entails(and(and(not(equal(B, C)), element(A, B)), '$existential'(A, '?ELEMENT', not(<=>(element('?ELEMENT', B), element('?ELEMENT', C))))), not(element(A, C))), entails(and(and(not(equal(B, C)), element(A, C)), '$existential'(A, '?ELEMENT', not(<=>(element('?ELEMENT', B), element('?ELEMENT', C))))), not(element(A, B))))), and(entails(and(not(element(A, B)), element(A, B)), equal(B, C)), and(entails(and(not(element(A, B)), not(element(A, C))), equal(B, C)), and(entails(and(not(equal(B, C)), not(element(A, C))), element(A, B)), entails(and(not(equal(B, C)), not(element(A, B))), element(A, C))))))), [domainV(C, [element:2]), domainV(B, [element:2]), domainV(A, [element:1]), domainV(D, []), forall(B), forall(C), replaceConsVar(A, '$existential'('?ELEMENT', not(<=>(element('?ELEMENT', B), element('?ELEMENT', C)))))], ['ELEMENT'=A, 'SET1'=B, 'SET2'=C], 'Merge', 'SET/CLASS Context', 2819, 'Anonymous', on).
mooCache(instance('UnionFn', 'BinaryFunction'), instance('UnionFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2821, 'Anonymous', on).
mooCache(domain('UnionFn', 1, 'Class'), domain('UnionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2823, 'Anonymous', on).
mooCache(domain('UnionFn', 2, 'Class'), domain('UnionFn', 2, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2825, 'Anonymous', on).
mooCache(range('UnionFn', 'Class'), range('UnionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2827, 'Anonymous', on).
mooCache(documentation('UnionFn', string('"A BinaryFunction that maps two Classes to   the union of these Classes.  An object is an instance of the union of   two Classes just in case it is an instance of either Class."')), documentation('UnionFn', string('"A BinaryFunction that maps two Classes to   the union of these Classes.  An object is an instance of the union of   two Classes just in case it is an instance of either Class."')), [], [], 'Merge', 'SET/CLASS Context', 2829, 'Anonymous', on).
mooCache(<=>(instance(A, 'UnionFn'(B, C)), or(instance(A, B), instance(A, C))), and(and(entails(not(instance(A, 'UnionFn'(B, C))), not(instance(A, B))), and(entails(not(instance(A, 'UnionFn'(B, C))), not(instance(A, C))), entails(or(instance(A, B), instance(A, C)), instance(A, 'UnionFn'(B, C))))), and(entails(and(not(instance(A, B)), not(instance(A, C))), not(instance(A, 'UnionFn'(B, C)))), and(entails(and(instance(A, 'UnionFn'(B, C)), not(instance(A, C))), instance(A, B)), entails(and(instance(A, 'UnionFn'(B, C)), not(instance(A, B))), instance(A, C))))), [domainV(C, ['UnionFn':2, instance:2]), domainV(B, ['UnionFn':1, instance:2]), domainV(A, []), domainV(D, []), forall(A), forall(B), forall(C)], ['ENTITY'=A, 'CLASS1'=B, 'CLASS2'=C], 'Merge', 'SET/CLASS Context', 2831, 'Anonymous', on).
mooCache(instance('IntersectionFn', 'BinaryFunction'), instance('IntersectionFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2833, 'Anonymous', on).
mooCache(domain('IntersectionFn', 1, 'Class'), domain('IntersectionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2835, 'Anonymous', on).
mooCache(domain('IntersectionFn', 2, 'Class'), domain('IntersectionFn', 2, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2837, 'Anonymous', on).
mooCache(range('IntersectionFn', 'Class'), range('IntersectionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2839, 'Anonymous', on).
mooCache(documentation('IntersectionFn', string('"A BinaryFunction that maps two   %Classes to the intersection of these Classes.  An object is an instance   of the intersection of two Classes just in case it is an instance of   both of those Classes."')), documentation('IntersectionFn', string('"A BinaryFunction that maps two   %Classes to the intersection of these Classes.  An object is an instance   of the intersection of two Classes just in case it is an instance of   both of those Classes."')), [], [], 'Merge', 'SET/CLASS Context', 2841, 'Anonymous', on).
mooCache(<=>(instance(A, 'IntersectionFn'(B, C)), and(instance(A, B), instance(A, C))), and(and(entails(instance(A, 'IntersectionFn'(B, C)), instance(A, B)), and(entails(instance(A, 'IntersectionFn'(B, C)), instance(A, C)), entails(or(not(instance(A, B)), not(instance(A, C))), not(instance(A, 'IntersectionFn'(B, C)))))), and(entails(and(instance(A, B), instance(A, C)), instance(A, 'IntersectionFn'(B, C))), and(entails(and(not(instance(A, 'IntersectionFn'(B, C))), instance(A, C)), not(instance(A, B))), entails(and(not(instance(A, 'IntersectionFn'(B, C))), instance(A, B)), not(instance(A, C)))))), [domainV(C, ['IntersectionFn':2, instance:2]), domainV(B, ['IntersectionFn':1, instance:2]), domainV(A, []), domainV(D, []), forall(A), forall(B), forall(C)], ['ENTITY'=A, 'CLASS1'=B, 'CLASS2'=C], 'Merge', 'SET/CLASS Context', 2843, 'Anonymous', on).
mooCache(instance('RelativeComplementFn', 'BinaryFunction'), instance('RelativeComplementFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2845, 'Anonymous', on).
mooCache(domain('RelativeComplementFn', 1, 'Class'), domain('RelativeComplementFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2847, 'Anonymous', on).
mooCache(domain('RelativeComplementFn', 2, 'Class'), domain('RelativeComplementFn', 2, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2849, 'Anonymous', on).
mooCache(range('RelativeComplementFn', 'Class'), range('RelativeComplementFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2851, 'Anonymous', on).
mooCache(documentation('RelativeComplementFn', string('"A BinaryFunction that maps two   Classes to the difference between these Classes.  More precisely,   the relative complement of one class C1 relative to another C2 consists   of the instances of C1 that are instances of the ComplementFn of C2."')), documentation('RelativeComplementFn', string('"A BinaryFunction that maps two   Classes to the difference between these Classes.  More precisely,   the relative complement of one class C1 relative to another C2 consists   of the instances of C1 that are instances of the ComplementFn of C2."')), [], [], 'Merge', 'SET/CLASS Context', 2853, 'Anonymous', on).
mooCache(equal('RelativeComplementFn'(A, B), 'IntersectionFn'(A, 'ComplementFn'(B))), equal('RelativeComplementFn'(A, B), 'IntersectionFn'(A, 'ComplementFn'(B))), [domainV(B, ['ComplementFn':1, 'RelativeComplementFn':2]), domainV(A, ['IntersectionFn':1, 'RelativeComplementFn':1]), domainV(C, []), forall(A), forall(B)], ['CLASS1'=A, 'CLASS2'=B], 'Merge', 'SET/CLASS Context', 2855, 'Anonymous', on).
mooCache(=>(instance(A, 'ImaginaryNumber'), instance(A, 'RelativeComplementFn'('Number', 'RealNumber'))), and(entails(not(instance(A, 'RelativeComplementFn'('Number', 'RealNumber'))), not(instance(A, 'ImaginaryNumber'))), entails(instance(A, 'ImaginaryNumber'), instance(A, 'RelativeComplementFn'('Number', 'RealNumber')))), [domainV(A, ['$instanceof':'ImaginaryNumber']), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'SET/CLASS Context', 2857, 'Anonymous', on).
mooCache(instance('ComplementFn', 'UnaryFunction'), instance('ComplementFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2859, 'Anonymous', on).
mooCache(domain('ComplementFn', 1, 'Class'), domain('ComplementFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2861, 'Anonymous', on).
mooCache(range('ComplementFn', 'Class'), range('ComplementFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2863, 'Anonymous', on).
mooCache(documentation('ComplementFn', string('"The complement of a given Class C is the   Class of all things that are not instances of C.  In other words, an   object is an instance of the complement of a Class C just in case it   is not an instance of C."')), documentation('ComplementFn', string('"The complement of a given Class C is the   Class of all things that are not instances of C.  In other words, an   object is an instance of the complement of a Class C just in case it   is not an instance of C."')), [], [], 'Merge', 'SET/CLASS Context', 2865, 'Anonymous', on).
mooCache(<=>(instance(A, 'ComplementFn'(B)), not(instance(A, B))), and(and(entails(instance(A, 'ComplementFn'(B)), not(instance(A, B))), entails(instance(A, B), not(instance(A, 'ComplementFn'(B))))), and(entails(not(instance(A, B)), instance(A, 'ComplementFn'(B))), entails(not(instance(A, 'ComplementFn'(B))), instance(A, B)))), [domainV(B, ['ComplementFn':1, instance:2]), domainV(A, []), domainV(C, []), forall(A), forall(B)], ['ENTITY'=A, 'CLASS'=B], 'Merge', 'SET/CLASS Context', 2867, 'Anonymous', on).
mooCache(instance('GeneralizedUnionFn', 'UnaryFunction'), instance('GeneralizedUnionFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2869, 'Anonymous', on).
mooCache(domainSubclass('GeneralizedUnionFn', 1, 'Class'), domainSubclass('GeneralizedUnionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2871, 'Anonymous', on).
mooCache(range('GeneralizedUnionFn', 'Class'), range('GeneralizedUnionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2873, 'Anonymous', on).
mooCache(documentation('GeneralizedUnionFn', string('"A UnaryFunction that takes a Class   of Classes as its single argument and returns a Class which is the   merge of all of the Classes in the original Class, i.e. the Class   containing just those instances which are instances of an instance of the   original Class."')), documentation('GeneralizedUnionFn', string('"A UnaryFunction that takes a Class   of Classes as its single argument and returns a Class which is the   merge of all of the Classes in the original Class, i.e. the Class   containing just those instances which are instances of an instance of the   original Class."')), [], [], 'Merge', 'SET/CLASS Context', 2875, 'Anonymous', on).
mooCache(<=>(instance(A, 'GeneralizedUnionFn'(B)), exists(C, and(instance(C, B), instance(A, C)))), and(and(entails(and(instance(A, 'GeneralizedUnionFn'(B)), '$existential'(C, '?CLASS', and(instance('?CLASS', B), instance(A, '?CLASS')))), instance(C, B)), and(entails(and(instance(A, 'GeneralizedUnionFn'(B)), '$existential'(C, '?CLASS', and(instance('?CLASS', B), instance(A, '?CLASS')))), instance(A, C)), entails(or(not(instance(C, B)), not(instance(A, C))), not(instance(A, 'GeneralizedUnionFn'(B)))))), and(entails(and(instance(C, B), instance(A, C)), instance(A, 'GeneralizedUnionFn'(B))), and(entails(and(not(instance(A, 'GeneralizedUnionFn'(B))), instance(A, C)), not(instance(C, B))), entails(and(not(instance(A, 'GeneralizedUnionFn'(B))), instance(C, B)), not(instance(A, C)))))), [domainV(C, [instance:2]), domainV(B, ['GeneralizedUnionFn':1, instance:2]), domainV(A, []), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?CLASS', and(instance('?CLASS', B), instance(A, '?CLASS')))), forall(C)], ['ENTITY'=A, 'SUPERCLASS'=B, 'CLASS'=C], 'Merge', 'SET/CLASS Context', 2877, 'Anonymous', on).
mooCache(instance('GeneralizedIntersectionFn', 'UnaryFunction'), instance('GeneralizedIntersectionFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2879, 'Anonymous', on).
mooCache(domainSubclass('GeneralizedIntersectionFn', 1, 'Class'), domainSubclass('GeneralizedIntersectionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2881, 'Anonymous', on).
mooCache(range('GeneralizedIntersectionFn', 'Class'), range('GeneralizedIntersectionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2883, 'Anonymous', on).
mooCache(documentation('GeneralizedIntersectionFn', string('"A UnaryFunction that takes a   Class of Classes as its single argument and returns a Class which   is the intersection of all of the Classes in the original Class, i.e.   the Class containing just those instances which are instances of all   instances of the original Class."')), documentation('GeneralizedIntersectionFn', string('"A UnaryFunction that takes a   Class of Classes as its single argument and returns a Class which   is the intersection of all of the Classes in the original Class, i.e.   the Class containing just those instances which are instances of all   instances of the original Class."')), [], [], 'Merge', 'SET/CLASS Context', 2885, 'Anonymous', on).
mooCache(<=>(instance(A, 'GeneralizedIntersectionFn'(B)), forall(C, =>(instance(C, B), instance(A, C)))), and(and(entails(not(instance(A, 'GeneralizedIntersectionFn'(B))), instance(C, B)), and(entails(and(not(instance(A, 'GeneralizedIntersectionFn'(B))), '$existential'(C, '?CLASS', not(=>(instance('?CLASS', B), instance(A, '?CLASS'))))), not(instance(A, C))), entails(or(not(instance(C, B)), instance(A, C)), instance(A, 'GeneralizedIntersectionFn'(B))))), and(entails(and(instance(C, B), not(instance(A, C))), not(instance(A, 'GeneralizedIntersectionFn'(B)))), and(entails(and(and(instance(A, 'GeneralizedIntersectionFn'(B)), not(instance(A, C))), '$existential'(C, '?CLASS', not(=>(instance('?CLASS', B), instance(A, '?CLASS'))))), not(instance(C, B))), entails(and(instance(A, 'GeneralizedIntersectionFn'(B)), instance(C, B)), instance(A, C))))), [domainV(C, [instance:2]), domainV(B, ['GeneralizedIntersectionFn':1, instance:2]), domainV(A, []), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(C, '$existential'('?CLASS', not(=>(instance('?CLASS', B), instance(A, '?CLASS')))))], ['ENTITY'=A, 'SUPERCLASS'=B, 'CLASS'=C], 'Merge', 'SET/CLASS Context', 2887, 'Anonymous', on).
mooCache(instance('CardinalityFn', 'UnaryFunction'), instance('CardinalityFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2889, 'Anonymous', on).
mooCache(instance('CardinalityFn', 'AsymmetricRelation'), instance('CardinalityFn', 'AsymmetricRelation'), [], [], 'Merge', 'SET/CLASS Context', 2891, 'Anonymous', on).
mooCache(domain('CardinalityFn', 1, 'UnionFn'('Class', 'Collection')), domain('CardinalityFn', 1, 'UnionFn'('Class', 'Collection')), [], [], 'Merge', 'SET/CLASS Context', 2893, 'Anonymous', on).
mooCache(domain('CardinalityFn', 2, 'Number'), domain('CardinalityFn', 2, 'Number'), [], [], 'Merge', 'SET/CLASS Context', 2895, 'Anonymous', on).
mooCache(documentation('CardinalityFn', string('"(CardinalityFn ?CLASS) returns the   number of instances in the Class or Collection ?CLASS."')), documentation('CardinalityFn', string('"(CardinalityFn ?CLASS) returns the   number of instances in the Class or Collection ?CLASS."')), [], [], 'Merge', 'SET/CLASS Context', 2897, 'Anonymous', on).
mooCache(instance('NullSet', 'Set'), instance('NullSet', 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2899, 'Anonymous', on).
mooCache(documentation('NullSet', string('"The Set that contains no instances."')), documentation('NullSet', string('"The Set that contains no instances."')), [], [], 'Merge', 'SET/CLASS Context', 2901, 'Anonymous', on).
mooCache(equal('NullSet', 'ComplementFn'('Entity')), equal('NullSet', 'ComplementFn'('Entity')), [], [], 'Merge', 'SET/CLASS Context', 2903, 'Anonymous', on).
mooCache(subclass('FiniteSet', 'Set'), subclass('FiniteSet', 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2905, 'Anonymous', on).
mooCache(documentation('FiniteSet', string('"A Set containing a finite number of elements."')), documentation('FiniteSet', string('"A Set containing a finite number of elements."')), [], [], 'Merge', 'SET/CLASS Context', 2907, 'Anonymous', on).
mooCache(=>(instance(A, 'FiniteSet'), exists(B, and(instance(B, 'NonnegativeInteger'), equal(B, 'CardinalityFn'(A))))), and(and(entails(not(instance(B, 'NonnegativeInteger')), not(instance(A, 'FiniteSet'))), entails(and(instance(A, 'FiniteSet'), '$existential'(B, '?NUMBER', and(instance('?NUMBER', 'NonnegativeInteger'), holds('CardinalityFn', A, '?NUMBER')))), instance(B, 'NonnegativeInteger'))), and(entails(not(holds('CardinalityFn', A, B)), not(instance(A, 'FiniteSet'))), entails(and(instance(A, 'FiniteSet'), '$existential'(B, '?NUMBER', and(instance('?NUMBER', 'NonnegativeInteger'), holds('CardinalityFn', A, '?NUMBER')))), holds('CardinalityFn', A, B)))), [domainV(B, ['$instanceof':'NonnegativeInteger', 'CardinalityFn':2]), domainV(A, ['$instanceof':'FiniteSet', 'CardinalityFn':1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?NUMBER', and(instance('?NUMBER', 'NonnegativeInteger'), holds('CardinalityFn', A, '?NUMBER'))))], ['SET'=A, 'NUMBER'=B], 'Merge', 'SET/CLASS Context', 2909, 'Anonymous', on).
mooCache(subclass('PairwiseDisjointClass', 'Class'), subclass('PairwiseDisjointClass', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2911, 'Anonymous', on).
mooCache(documentation('PairwiseDisjointClass', string('"A Class of Classes is a   PairwiseDisjointClass just in case every instance of the Class   is either equal to or disjoint from every other instance of the   Class."')), documentation('PairwiseDisjointClass', string('"A Class of Classes is a   PairwiseDisjointClass just in case every instance of the Class   is either equal to or disjoint from every other instance of the   Class."')), [], [], 'Merge', 'SET/CLASS Context', 2913, 'Anonymous', on).
mooCache(=>(instance(A, 'PairwiseDisjointClass'), forall(B, forall(C, =>(and(instance(C, A), instance(B, A)), or(equal(C, B), disjoint(C, B)))))), and(entails(and(and(instance(C, A), instance(B, A)), and(not(equal(C, B)), not(disjoint(C, B)))), not(instance(A, 'PairwiseDisjointClass'))), and(entails(and(instance(A, 'PairwiseDisjointClass'), and(instance(B, A), and(not(equal(C, B)), not(disjoint(C, B))))), not(instance(C, A))), and(entails(and(instance(A, 'PairwiseDisjointClass'), and(instance(C, A), and(not(equal(C, B)), not(disjoint(C, B))))), not(instance(B, A))), and(entails(and(instance(A, 'PairwiseDisjointClass'), and(and(instance(C, A), instance(B, A)), not(disjoint(C, B)))), equal(C, B)), entails(and(instance(A, 'PairwiseDisjointClass'), and(and(instance(C, A), instance(B, A)), not(equal(C, B)))), disjoint(C, B)))))), [domainV(C, [disjoint:1]), domainV(B, [disjoint:2]), domainV(A, ['$instanceof':'PairwiseDisjointClass', instance:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['SUPERCLASS'=A, 'CLASS1'=C, 'CLASS2'=B], 'Merge', 'SET/CLASS Context', 2915, 'Anonymous', on).
mooCache(subclass('MutuallyDisjointClass', 'Class'), subclass('MutuallyDisjointClass', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2917, 'Anonymous', on).
mooCache(documentation('MutuallyDisjointClass', string('"A Class of Classes is a   MutuallyDisjointClass just in case there exists no instance of an   instance of the original Class which is an instance of all of the   instances of the original Class."')), documentation('MutuallyDisjointClass', string('"A Class of Classes is a   MutuallyDisjointClass just in case there exists no instance of an   instance of the original Class which is an instance of all of the   instances of the original Class."')), [], [], 'Merge', 'SET/CLASS Context', 2919, 'Anonymous', on).
mooCache(=>(instance(A, 'MutuallyDisjointClass'), equal('GeneralizedIntersectionFn'(A), 'NullSet')), and(entails(not(equal('GeneralizedIntersectionFn'(A), 'NullSet')), not(instance(A, 'MutuallyDisjointClass'))), entails(instance(A, 'MutuallyDisjointClass'), equal('GeneralizedIntersectionFn'(A), 'NullSet'))), [domainV(A, ['$instanceof':'MutuallyDisjointClass', 'GeneralizedIntersectionFn':1]), domainV(B, []), forall(A)], ['CLASS'=A], 'Merge', 'SET/CLASS Context', 2921, 'Anonymous', on).
mooCache(instance('KappaFn', 'BinaryFunction'), instance('KappaFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2923, 'Anonymous', on).
mooCache(domain('KappaFn', 1, 'SymbolicString'), domain('KappaFn', 1, 'SymbolicString'), [], [], 'Merge', 'SET/CLASS Context', 2925, 'Anonymous', on).
mooCache(domain('KappaFn', 2, 'Formula'), domain('KappaFn', 2, 'Formula'), [], [], 'Merge', 'SET/CLASS Context', 2927, 'Anonymous', on).
mooCache(range('KappaFn', 'Class'), range('KappaFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2929, 'Anonymous', on).
mooCache(documentation('KappaFn', string('"A class-forming operator that takes two   arguments:  a variable and a formula containing at least one unbound   occurrence of the variable.  The result of applying KappaFn to a   variable and a formula is the Class of things that satisfy the formula.    For example, we can denote the Class of prime numbers that are less   than 100 with the following expression:  (KappaFn ?NUMBER   (and (instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100))).  Note that   the use of this function is discouraged, since there is currently no   axiomatic support for it."')), documentation('KappaFn', string('"A class-forming operator that takes two   arguments:  a variable and a formula containing at least one unbound   occurrence of the variable.  The result of applying KappaFn to a   variable and a formula is the Class of things that satisfy the formula.    For example, we can denote the Class of prime numbers that are less   than 100 with the following expression:  (KappaFn ?NUMBER   (and (instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100))).  Note that   the use of this function is discouraged, since there is currently no   axiomatic support for it."')), [], [], 'Merge', 'SET/CLASS Context', 2931, 'Anonymous', on).
mooCache(subclass('Graph', 'Abstract'), subclass('Graph', 'Abstract'), [], [], 'Merge', 'GRAPH Context', 2943, 'Anonymous', on).
mooCache(documentation('Graph', string('"The Class of graphs, where a graph is understood   to be a set of GraphNodes connected by GraphArcs.  Note that this   Class includes only connected graphs, i.e. graphs in which there is a   GraphPath between any two GraphNodes.  Note too that every Graph   is assumed to contain at least two GraphArcs and three GraphNodes."')), documentation('Graph', string('"The Class of graphs, where a graph is understood   to be a set of GraphNodes connected by GraphArcs.  Note that this   Class includes only connected graphs, i.e. graphs in which there is a   GraphPath between any two GraphNodes.  Note too that every Graph   is assumed to contain at least two GraphArcs and three GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 2945, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), exists(D, exists(E, or(links(B, C, E), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(equal('BeginNodeFn'(D), B), equal('EndNodeFn'(D), C)), and(equal('BeginNodeFn'(D), C), equal('EndNodeFn'(D), B))))))))), and(and(entails(and(and(not(subGraph(D, A)), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), links(B, C, E)), and(entails(and(and(and(not(links(B, C, E)), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), subGraph(D, A)), and(entails(and(and(not(links(B, C, E)), not(subGraph(D, A))), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(A, 'Graph'))), and(entails(and(and(not(links(B, C, E)), not(subGraph(D, A))), and(instance(A, 'Graph'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(B, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), not(subGraph(D, A))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(C, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), not(subGraph(D, A))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(C, A), not(equal(B, C))))))), not(graphPart(B, A))), and(entails(and(and(not(links(B, C, E)), not(subGraph(D, A))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), not(equal(B, C))))))), not(graphPart(C, A))), entails(and(and(and(not(links(B, C, E)), not(subGraph(D, A))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), graphPart(C, A)))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), equal(B, C))))))))), and(and(entails(and(and(not(instance(D, 'GraphPath')), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), links(B, C, E)), and(entails(and(and(and(not(links(B, C, E)), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), instance(D, 'GraphPath')), and(entails(and(and(not(links(B, C, E)), not(instance(D, 'GraphPath'))), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(A, 'Graph'))), and(entails(and(and(not(links(B, C, E)), not(instance(D, 'GraphPath'))), and(instance(A, 'Graph'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(B, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), not(instance(D, 'GraphPath'))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(C, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), not(instance(D, 'GraphPath'))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(C, A), not(equal(B, C))))))), not(graphPart(B, A))), and(entails(and(and(not(links(B, C, E)), not(instance(D, 'GraphPath'))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), not(equal(B, C))))))), not(graphPart(C, A))), entails(and(and(and(not(links(B, C, E)), not(instance(D, 'GraphPath'))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), graphPart(C, A)))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), equal(B, C))))))))), and(and(entails(and(and(and(not(holds('EndNodeFn', D, C)), not(holds('EndNodeFn', D, B))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), links(B, C, E)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('EndNodeFn', D, B))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('EndNodeFn', D, C)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('EndNodeFn', D, C))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('EndNodeFn', D, B)), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('EndNodeFn', D, B)))), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(A, 'Graph'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(B, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(C, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(C, A), not(equal(B, C))))))), not(graphPart(B, A))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), not(equal(B, C))))))), not(graphPart(C, A))), entails(and(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), graphPart(C, A)))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), equal(B, C)))))))))), and(and(entails(and(and(and(not(holds('EndNodeFn', D, C)), not(holds('BeginNodeFn', D, C))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), links(B, C, E)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('BeginNodeFn', D, C))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('EndNodeFn', D, C)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('EndNodeFn', D, C))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('BeginNodeFn', D, C)), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('BeginNodeFn', D, C)))), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(A, 'Graph'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(B, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(C, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(C, A), not(equal(B, C))))))), not(graphPart(B, A))), and(entails(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), not(equal(B, C))))))), not(graphPart(C, A))), entails(and(and(and(not(links(B, C, E)), and(not(holds('EndNodeFn', D, C)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), graphPart(C, A)))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), equal(B, C)))))))))), and(and(entails(and(and(and(not(holds('BeginNodeFn', D, B)), not(holds('BeginNodeFn', D, C))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), links(B, C, E)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('BeginNodeFn', D, C))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('BeginNodeFn', D, B)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('BeginNodeFn', D, B))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('BeginNodeFn', D, C)), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('BeginNodeFn', D, C)))), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(A, 'Graph'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(B, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(C, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(C, A), not(equal(B, C))))))), not(graphPart(B, A))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), not(equal(B, C))))))), not(graphPart(C, A))), entails(and(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('BeginNodeFn', D, C)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), graphPart(C, A)))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), equal(B, C)))))))))), and(entails(and(and(and(not(holds('BeginNodeFn', D, B)), not(holds('EndNodeFn', D, B))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), links(B, C, E)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('EndNodeFn', D, B))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('BeginNodeFn', D, B)), and(entails(and(and(and(and(not(links(B, C, E)), not(holds('BeginNodeFn', D, B))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C)))))))), '$existential'(D, '?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), holds('EndNodeFn', D, B)), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('EndNodeFn', D, B)))), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(A, 'Graph'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(C, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(B, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(graphPart(B, A), and(graphPart(C, A), not(equal(B, C))))))), not(instance(C, 'GraphNode'))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(C, A), not(equal(B, C))))))), not(graphPart(B, A))), and(entails(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), not(equal(B, C))))))), not(graphPart(C, A))), entails(and(and(and(not(links(B, C, E)), and(not(holds('BeginNodeFn', D, B)), not(holds('EndNodeFn', D, B)))), and(instance(A, 'Graph'), and(instance(B, 'GraphNode'), and(instance(C, 'GraphNode'), and(graphPart(B, A), graphPart(C, A)))))), '$existential'(E, '?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B)))))))), equal(B, C))))))))))))))), [domainV(E, [links:3]), domainV(D, ['$instanceof':'GraphPath', 'BeginNodeFn':1, 'EndNodeFn':1, subGraph:1]), domainV(C, ['$instanceof':'GraphNode', 'BeginNodeFn':2, 'EndNodeFn':2, graphPart:1, links:2]), domainV(B, ['$instanceof':'GraphNode', 'BeginNodeFn':2, 'EndNodeFn':2, graphPart:1, links:1]), domainV(A, ['$instanceof':'Graph', graphPart:2, subGraph:2]), domainV(F, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?PATH', exists(E, or(links(B, C, E), and(subGraph('?PATH', A), and(instance('?PATH', 'GraphPath'), or(and(holds('BeginNodeFn', '?PATH', B), holds('EndNodeFn', '?PATH', C)), and(holds('BeginNodeFn', '?PATH', C), holds('EndNodeFn', '?PATH', B))))))))), replaceConsVar(E, '$existential'('?ARC', or(links(B, C, '?ARC'), and(subGraph(D, A), and(instance(D, 'GraphPath'), or(and(holds('BeginNodeFn', D, B), holds('EndNodeFn', D, C)), and(holds('BeginNodeFn', D, C), holds('EndNodeFn', D, B))))))))], ['GRAPH'=A, 'NODE1'=B, 'NODE2'=C, 'ARC'=E, 'PATH'=D], 'Merge', 'GRAPH Context', 2947, 'Anonymous', on).
mooCache(=>(instance(A, 'Graph'), exists(B, exists(C, exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, E), and(links(B, E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal(C, B)))))))))))))))))), and(and(entails(not(graphPart(F, A)), not(instance(A, 'Graph'))), entails(and(instance(A, 'Graph'), '$existential'(F, '?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B)))))))))))))), graphPart(F, A))), and(and(entails(not(graphPart(E, A)), not(instance(A, 'Graph'))), entails(and(and(instance(A, 'Graph'), '$existential'(E, '?NODE2', exists(F, and(graphPart(F, A), and(graphPart('?NODE2', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, '?NODE2'), and(links(B, '?NODE2', D), and(not(equal(F, '?NODE2')), and(not(equal('?NODE2', D)), and(not(equal(F, D)), not(equal(C, B))))))))))))))), '$existential'(F, '?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B)))))))))))))), graphPart(E, A))), and(and(entails(not(graphPart(D, A)), not(instance(A, 'Graph'))), entails(and(and(and(instance(A, 'Graph'), '$existential'(D, '?NODE3', exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart('?NODE3', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, E), and(links(B, E, '?NODE3'), and(not(equal(F, E)), and(not(equal(E, '?NODE3')), and(not(equal(F, '?NODE3')), not(equal(C, B)))))))))))))))), '$existential'(E, '?NODE2', exists(F, and(graphPart(F, A), and(graphPart('?NODE2', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, '?NODE2'), and(links(B, '?NODE2', D), and(not(equal(F, '?NODE2')), and(not(equal('?NODE2', D)), and(not(equal(F, D)), not(equal(C, B))))))))))))))), '$existential'(F, '?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B)))))))))))))), graphPart(D, A))), and(and(entails(not(graphPart(C, A)), not(instance(A, 'Graph'))), entails(and(and(and(and(instance(A, 'Graph'), '$existential'(C, '?ARC1', exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?ARC1', A), and(graphPart(B, A), and(links('?ARC1', F, E), and(links(B, E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal('?ARC1', B))))))))))))))))), '$existential'(D, '?NODE3', exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart('?NODE3', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, E), and(links(B, E, '?NODE3'), and(not(equal(F, E)), and(not(equal(E, '?NODE3')), and(not(equal(F, '?NODE3')), not(equal(C, B)))))))))))))))), '$existential'(E, '?NODE2', exists(F, and(graphPart(F, A), and(graphPart('?NODE2', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, '?NODE2'), and(links(B, '?NODE2', D), and(not(equal(F, '?NODE2')), and(not(equal('?NODE2', D)), and(not(equal(F, D)), not(equal(C, B))))))))))))))), '$existential'(F, '?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B)))))))))))))), graphPart(C, A))), and(and(entails(not(graphPart(B, A)), not(instance(A, 'Graph'))), entails(and(and(and(and(and(instance(A, 'Graph'), '$existential'(B, '?ARC2', exists(C, exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart('?ARC2', A), and(links(C, F, E), and(links('?ARC2', E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal(C, '?ARC2')))))))))))))))))), '$existential'(C, '?ARC1', exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?ARC1', A), and(graphPart(B, A), and(links('?ARC1', F, E), and(links(B, E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal('?ARC1', B))))))))))))))))), '$existential'(D, '?NODE3', exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart('?NODE3', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, E), and(links(B, E, '?NODE3'), and(not(equal(F, E)), and(not(equal(E, '?NODE3')), and(not(equal(F, '?NODE3')), not(equal(C, B)))))))))))))))), '$existential'(E, '?NODE2', exists(F, and(graphPart(F, A), and(graphPart('?NODE2', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, '?NODE2'), and(links(B, '?NODE2', D), and(not(equal(F, '?NODE2')), and(not(equal('?NODE2', D)), and(not(equal(F, D)), not(equal(C, B))))))))))))))), '$existential'(F, '?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B)))))))))))))), graphPart(B, A))), and(and(entails(not(links(C, F, E)), not(instance(A, 'Graph'))), entails(and(and(and(and(instance(A, 'Graph'), '$existential'(C, '?ARC1', exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?ARC1', A), and(graphPart(B, A), and(links('?ARC1', F, E), and(links(B, E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal('?ARC1', B))))))))))))))))), '$existential'(D, '?NODE3', exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart('?NODE3', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, E), and(links(B, E, '?NODE3'), and(not(equal(F, E)), and(not(equal(E, '?NODE3')), and(not(equal(F, '?NODE3')), not(equal(C, B)))))))))))))))), '$existential'(E, '?NODE2', exists(F, and(graphPart(F, A), and(graphPart('?NODE2', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, '?NODE2'), and(links(B, '?NODE2', D), and(not(equal(F, '?NODE2')), and(not(equal('?NODE2', D)), and(not(equal(F, D)), not(equal(C, B))))))))))))))), '$existential'(F, '?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B)))))))))))))), links(C, F, E))), and(and(entails(not(links(B, E, D)), not(instance(A, 'Graph'))), entails(and(and(and(and(and(instance(A, 'Graph'), '$existential'(B, '?ARC2', exists(C, exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart('?ARC2', A), and(links(C, F, E), and(links('?ARC2', E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal(C, '?ARC2')))))))))))))))))), '$existential'(C, '?ARC1', exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?ARC1', A), and(graphPart(B, A), and(links('?ARC1', F, E), and(links(B, E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal('?ARC1', B))))))))))))))))), '$existential'(D, '?NODE3', exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart('?NODE3', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, E), and(links(B, E, '?NODE3'), and(not(equal(F, E)), and(not(equal(E, '?NODE3')), and(not(equal(F, '?NODE3')), not(equal(C, B)))))))))))))))), '$existential'(E, '?NODE2', exists(F, and(graphPart(F, A), and(graphPart('?NODE2', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, '?NODE2'), and(links(B, '?NODE2', D), and(not(equal(F, '?NODE2')), and(not(equal('?NODE2', D)), and(not(equal(F, D)), not(equal(C, B))))))))))))))), '$existential'(F, '?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B)))))))))))))), links(B, E, D))), and(and(entails(equal(F, E), not(instance(A, 'Graph'))), entails(instance(A, 'Graph'), not(equal(F, E)))), and(and(entails(equal(E, D), not(instance(A, 'Graph'))), entails(instance(A, 'Graph'), not(equal(E, D)))), and(and(entails(equal(F, D), not(instance(A, 'Graph'))), entails(instance(A, 'Graph'), not(equal(F, D)))), and(entails(equal(C, B), not(instance(A, 'Graph'))), entails(instance(A, 'Graph'), not(equal(C, B)))))))))))))), [domainV(F, [graphPart:1, links:2]), domainV(E, [graphPart:1, links:2, links:3]), domainV(D, [graphPart:1, links:3]), domainV(C, [graphPart:1, links:1]), domainV(B, [graphPart:1, links:1]), domainV(A, ['$instanceof':'Graph', graphPart:2]), domainV(G, []), forall(A), replaceConsVar(B, '$existential'('?ARC2', exists(C, exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart('?ARC2', A), and(links(C, F, E), and(links('?ARC2', E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal(C, '?ARC2')))))))))))))))))), replaceConsVar(C, '$existential'('?ARC1', exists(D, exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?ARC1', A), and(graphPart(B, A), and(links('?ARC1', F, E), and(links(B, E, D), and(not(equal(F, E)), and(not(equal(E, D)), and(not(equal(F, D)), not(equal('?ARC1', B))))))))))))))))), replaceConsVar(D, '$existential'('?NODE3', exists(E, exists(F, and(graphPart(F, A), and(graphPart(E, A), and(graphPart('?NODE3', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, E), and(links(B, E, '?NODE3'), and(not(equal(F, E)), and(not(equal(E, '?NODE3')), and(not(equal(F, '?NODE3')), not(equal(C, B)))))))))))))))), replaceConsVar(E, '$existential'('?NODE2', exists(F, and(graphPart(F, A), and(graphPart('?NODE2', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, F, '?NODE2'), and(links(B, '?NODE2', D), and(not(equal(F, '?NODE2')), and(not(equal('?NODE2', D)), and(not(equal(F, D)), not(equal(C, B))))))))))))))), replaceConsVar(F, '$existential'('?NODE1', and(graphPart('?NODE1', A), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, '?NODE1', E), and(links(B, E, D), and(not(equal('?NODE1', E)), and(not(equal(E, D)), and(not(equal('?NODE1', D)), not(equal(C, B))))))))))))))], ['GRAPH'=A, 'NODE1'=F, 'NODE2'=E, 'NODE3'=D, 'ARC1'=C, 'ARC2'=B], 'Merge', 'GRAPH Context', 2949, 'Anonymous', on).
mooCache(subclass('DirectedGraph', 'Graph'), subclass('DirectedGraph', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2951, 'Anonymous', on).
mooCache(documentation('DirectedGraph', string('"The Class of directed graphs.  A   directed graph is a Graph in which all GraphArcs  have direction, i.e. every GraphArc has an initial node (see   InitialNodeFn) and a terminal node (see TerminalNodeFn)."')), documentation('DirectedGraph', string('"The Class of directed graphs.  A   directed graph is a Graph in which all GraphArcs  have direction, i.e. every GraphArc has an initial node (see   InitialNodeFn) and a terminal node (see TerminalNodeFn)."')), [], [], 'Merge', 'GRAPH Context', 2953, 'Anonymous', on).
mooCache(=>(and(instance(A, 'DirectedGraph'), and(instance(B, 'GraphArc'), graphPart(B, A))), exists(C, exists(D, and(equal('InitialNodeFn'(B), D), equal('TerminalNodeFn'(B), C))))), and(and(entails(and(and(instance(A, 'DirectedGraph'), and(instance(B, 'GraphArc'), graphPart(B, A))), '$existential'(D, '?NODE1', and(holds('InitialNodeFn', B, '?NODE1'), holds('TerminalNodeFn', B, C)))), holds('InitialNodeFn', B, D)), and(entails(and(not(holds('InitialNodeFn', B, D)), and(instance(B, 'GraphArc'), graphPart(B, A))), not(instance(A, 'DirectedGraph'))), and(entails(and(not(holds('InitialNodeFn', B, D)), and(instance(A, 'DirectedGraph'), graphPart(B, A))), not(instance(B, 'GraphArc'))), entails(and(not(holds('InitialNodeFn', B, D)), and(instance(A, 'DirectedGraph'), instance(B, 'GraphArc'))), not(graphPart(B, A)))))), and(entails(and(and(and(instance(A, 'DirectedGraph'), and(instance(B, 'GraphArc'), graphPart(B, A))), '$existential'(C, '?NODE2', exists(D, and(holds('InitialNodeFn', B, D), holds('TerminalNodeFn', B, '?NODE2'))))), '$existential'(D, '?NODE1', and(holds('InitialNodeFn', B, '?NODE1'), holds('TerminalNodeFn', B, C)))), holds('TerminalNodeFn', B, C)), and(entails(and(not(holds('TerminalNodeFn', B, C)), and(instance(B, 'GraphArc'), graphPart(B, A))), not(instance(A, 'DirectedGraph'))), and(entails(and(not(holds('TerminalNodeFn', B, C)), and(instance(A, 'DirectedGraph'), graphPart(B, A))), not(instance(B, 'GraphArc'))), entails(and(not(holds('TerminalNodeFn', B, C)), and(instance(A, 'DirectedGraph'), instance(B, 'GraphArc'))), not(graphPart(B, A))))))), [domainV(D, ['InitialNodeFn':2]), domainV(C, ['TerminalNodeFn':2]), domainV(B, ['$instanceof':'GraphArc', 'InitialNodeFn':1, 'TerminalNodeFn':1, graphPart:1]), domainV(A, ['$instanceof':'DirectedGraph', graphPart:2]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?NODE2', exists(D, and(holds('InitialNodeFn', B, D), holds('TerminalNodeFn', B, '?NODE2'))))), replaceConsVar(D, '$existential'('?NODE1', and(holds('InitialNodeFn', B, '?NODE1'), holds('TerminalNodeFn', B, C))))], ['GRAPH'=A, 'ARC'=B, 'NODE1'=D, 'NODE2'=C], 'Merge', 'GRAPH Context', 2955, 'Anonymous', on).
mooCache(subclass('Tree', 'Graph'), subclass('Tree', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2957, 'Anonymous', on).
mooCache(documentation('Tree', string('"A Tree is a DirectedGraph that has no   GraphLoops."')), documentation('Tree', string('"A Tree is a DirectedGraph that has no   GraphLoops."')), [], [], 'Merge', 'GRAPH Context', 2959, 'Anonymous', on).
mooCache(=>(instance(A, 'Tree'), not(exists(B, and(instance(B, 'GraphLoop'), graphPart(B, A))))), and(entails(and(instance(B, 'GraphLoop'), graphPart(B, A)), not(instance(A, 'Tree'))), and(entails(and(instance(A, 'Tree'), graphPart(B, A)), not(instance(B, 'GraphLoop'))), entails(and(instance(A, 'Tree'), instance(B, 'GraphLoop')), not(graphPart(B, A))))), [domainV(B, ['$instanceof':'GraphLoop', graphPart:1]), domainV(A, ['$instanceof':'Tree', graphPart:2]), domainV(C, []), forall(A), forall(B), forall(B)], ['GRAPH'=A, 'LOOP'=B], 'Merge', 'GRAPH Context', 2961, 'Anonymous', on).
mooCache(subclass('GraphPath', 'DirectedGraph'), subclass('GraphPath', 'DirectedGraph'), [], [], 'Merge', 'GRAPH Context', 2963, 'Anonymous', on).
mooCache(documentation('GraphPath', string('"Informally, a single, directed route between   two GraphNodes in a Graph.  Formally, a DirectedGraph that is a   subGraph of the original Graph and such that no two GraphArcs in   the DirectedGraph have the same intial node (see InitialNodeFn) or   the same terminal node (see TerminalNodeFn)."')), documentation('GraphPath', string('"Informally, a single, directed route between   two GraphNodes in a Graph.  Formally, a DirectedGraph that is a   subGraph of the original Graph and such that no two GraphArcs in   the DirectedGraph have the same intial node (see InitialNodeFn) or   the same terminal node (see TerminalNodeFn)."')), [], [], 'Merge', 'GRAPH Context', 2965, 'Anonymous', on).
mooCache(=>(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), =>(equal('InitialNodeFn'(B), C), not(exists(D, and(equal('InitialNodeFn'(D), C), not(equal(D, B))))))), and(entails(and(and(instance(B, 'GraphArc'), graphPart(B, A)), and(holds('InitialNodeFn', B, C), and(holds('InitialNodeFn', D, C), not(equal(D, B))))), not(instance(A, 'GraphPath'))), and(entails(and(and(instance(A, 'GraphPath'), graphPart(B, A)), and(holds('InitialNodeFn', B, C), and(holds('InitialNodeFn', D, C), not(equal(D, B))))), not(instance(B, 'GraphArc'))), and(entails(and(and(instance(A, 'GraphPath'), instance(B, 'GraphArc')), and(holds('InitialNodeFn', B, C), and(holds('InitialNodeFn', D, C), not(equal(D, B))))), not(graphPart(B, A))), and(entails(and(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), and(holds('InitialNodeFn', D, C), not(equal(D, B)))), not(holds('InitialNodeFn', B, C))), and(entails(and(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), and(holds('InitialNodeFn', B, C), not(equal(D, B)))), not(holds('InitialNodeFn', D, C))), entails(and(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), and(holds('InitialNodeFn', B, C), holds('InitialNodeFn', D, C))), equal(D, B))))))), [domainV(D, ['InitialNodeFn':1]), domainV(C, ['InitialNodeFn':2]), domainV(B, ['$instanceof':'GraphArc', 'InitialNodeFn':1, graphPart:1]), domainV(A, ['$instanceof':'GraphPath', graphPart:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D), forall(D)], ['GRAPH'=A, 'ARC'=B, 'NODE'=C, 'OTHER'=D], 'Merge', 'GRAPH Context', 2967, 'Anonymous', on).
mooCache(=>(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), =>(equal('TerminalNodeFn'(B), C), not(exists(D, and(equal('TerminalNodeFn'(D), C), not(equal(D, B))))))), and(entails(and(and(instance(B, 'GraphArc'), graphPart(B, A)), and(holds('TerminalNodeFn', B, C), and(holds('TerminalNodeFn', D, C), not(equal(D, B))))), not(instance(A, 'GraphPath'))), and(entails(and(and(instance(A, 'GraphPath'), graphPart(B, A)), and(holds('TerminalNodeFn', B, C), and(holds('TerminalNodeFn', D, C), not(equal(D, B))))), not(instance(B, 'GraphArc'))), and(entails(and(and(instance(A, 'GraphPath'), instance(B, 'GraphArc')), and(holds('TerminalNodeFn', B, C), and(holds('TerminalNodeFn', D, C), not(equal(D, B))))), not(graphPart(B, A))), and(entails(and(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), and(holds('TerminalNodeFn', D, C), not(equal(D, B)))), not(holds('TerminalNodeFn', B, C))), and(entails(and(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), and(holds('TerminalNodeFn', B, C), not(equal(D, B)))), not(holds('TerminalNodeFn', D, C))), entails(and(and(instance(A, 'GraphPath'), and(instance(B, 'GraphArc'), graphPart(B, A))), and(holds('TerminalNodeFn', B, C), holds('TerminalNodeFn', D, C))), equal(D, B))))))), [domainV(D, ['TerminalNodeFn':1]), domainV(C, ['TerminalNodeFn':2]), domainV(B, ['$instanceof':'GraphArc', 'TerminalNodeFn':1, graphPart:1]), domainV(A, ['$instanceof':'GraphPath', graphPart:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D), forall(D)], ['GRAPH'=A, 'ARC'=B, 'NODE'=C, 'OTHER'=D], 'Merge', 'GRAPH Context', 2969, 'Anonymous', on).
mooCache(subclass('GraphCircuit', 'GraphPath'), subclass('GraphCircuit', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 2971, 'Anonymous', on).
mooCache(documentation('GraphCircuit', string('"A GraphPath that begins (see   BeginNodeFn) and ends (see EndNodeFn) at the same   GraphNode."')), documentation('GraphCircuit', string('"A GraphPath that begins (see   BeginNodeFn) and ends (see EndNodeFn) at the same   GraphNode."')), [], [], 'Merge', 'GRAPH Context', 2973, 'Anonymous', on).
mooCache(<=>(instance(A, 'GraphCircuit'), exists(B, and(equal('BeginNodeFn'(A), B), equal('EndNodeFn'(A), B)))), and(and(entails(and(instance(A, 'GraphCircuit'), '$existential'(B, '?NODE', and(holds('BeginNodeFn', A, '?NODE'), holds('EndNodeFn', A, '?NODE')))), holds('BeginNodeFn', A, B)), and(entails(and(instance(A, 'GraphCircuit'), '$existential'(B, '?NODE', and(holds('BeginNodeFn', A, '?NODE'), holds('EndNodeFn', A, '?NODE')))), holds('EndNodeFn', A, B)), entails(or(not(holds('BeginNodeFn', A, B)), not(holds('EndNodeFn', A, B))), not(instance(A, 'GraphCircuit'))))), and(entails(and(holds('BeginNodeFn', A, B), holds('EndNodeFn', A, B)), instance(A, 'GraphCircuit')), and(entails(and(not(instance(A, 'GraphCircuit')), holds('EndNodeFn', A, B)), not(holds('BeginNodeFn', A, B))), entails(and(not(instance(A, 'GraphCircuit')), holds('BeginNodeFn', A, B)), not(holds('EndNodeFn', A, B)))))), [domainV(B, ['BeginNodeFn':2, 'EndNodeFn':2]), domainV(A, ['$instanceof':'GraphCircuit', 'BeginNodeFn':1, 'EndNodeFn':1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?NODE', and(holds('BeginNodeFn', A, '?NODE'), holds('EndNodeFn', A, '?NODE')))), forall(B)], ['GRAPH'=A, 'NODE'=B], 'Merge', 'GRAPH Context', 2975, 'Anonymous', on).
mooCache(subclass('MultiGraph', 'Graph'), subclass('MultiGraph', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2977, 'Anonymous', on).
mooCache(documentation('MultiGraph', string('"The Class of multigraphs.  A multigraph   is a Graph containing at least one pair of GraphNodes that are   connected by more than one GraphArc."')), documentation('MultiGraph', string('"The Class of multigraphs.  A multigraph   is a Graph containing at least one pair of GraphNodes that are   connected by more than one GraphArc."')), [], [], 'Merge', 'GRAPH Context', 2979, 'Anonymous', on).
mooCache(<=>(instance(A, 'MultiGraph'), exists(B, exists(C, exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, D), not(equal(E, D))))))))))))), and(and(entails(and(instance(A, 'MultiGraph'), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), graphPart(E, A)), and(entails(and(and(instance(A, 'MultiGraph'), '$existential'(D, '?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), graphPart(D, A)), and(entails(and(and(and(instance(A, 'MultiGraph'), '$existential'(C, '?NODE1', exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?NODE1', A), and(graphPart(B, A), and(links('?NODE1', B, E), and(links('?NODE1', B, D), not(equal(E, D)))))))))))), '$existential'(D, '?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), graphPart(C, A)), and(entails(and(and(and(and(instance(A, 'MultiGraph'), '$existential'(B, '?NODE2', exists(C, exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart('?NODE2', A), and(links(C, '?NODE2', E), and(links(C, '?NODE2', D), not(equal(E, D))))))))))))), '$existential'(C, '?NODE1', exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?NODE1', A), and(graphPart(B, A), and(links('?NODE1', B, E), and(links('?NODE1', B, D), not(equal(E, D)))))))))))), '$existential'(D, '?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), graphPart(B, A)), and(entails(and(and(and(and(instance(A, 'MultiGraph'), '$existential'(B, '?NODE2', exists(C, exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart('?NODE2', A), and(links(C, '?NODE2', E), and(links(C, '?NODE2', D), not(equal(E, D))))))))))))), '$existential'(C, '?NODE1', exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?NODE1', A), and(graphPart(B, A), and(links('?NODE1', B, E), and(links('?NODE1', B, D), not(equal(E, D)))))))))))), '$existential'(D, '?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), links(C, B, E)), and(entails(and(and(and(and(instance(A, 'MultiGraph'), '$existential'(B, '?NODE2', exists(C, exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart('?NODE2', A), and(links(C, '?NODE2', E), and(links(C, '?NODE2', D), not(equal(E, D))))))))))))), '$existential'(C, '?NODE1', exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?NODE1', A), and(graphPart(B, A), and(links('?NODE1', B, E), and(links('?NODE1', B, D), not(equal(E, D)))))))))))), '$existential'(D, '?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), links(C, B, D)), and(entails(instance(A, 'MultiGraph'), not(equal(E, D))), entails(or(not(graphPart(E, A)), or(not(graphPart(D, A)), or(not(graphPart(C, A)), or(not(graphPart(B, A)), or(not(links(C, B, E)), or(not(links(C, B, D)), equal(E, D))))))), not(instance(A, 'MultiGraph')))))))))), and(entails(and(and(and(and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, D), not(equal(E, D)))))))), '$existential'(C, '?NODE1', exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?NODE1', A), and(graphPart(B, A), and(links('?NODE1', B, E), and(links('?NODE1', B, D), not(equal(E, D)))))))))))), '$existential'(D, '?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), instance(A, 'MultiGraph')), and(entails(and(not(instance(A, 'MultiGraph')), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, D), not(equal(E, D)))))))), not(graphPart(E, A))), and(entails(and(not(instance(A, 'MultiGraph')), and(graphPart(E, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, D), not(equal(E, D)))))))), not(graphPart(D, A))), and(entails(and(not(instance(A, 'MultiGraph')), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, D), not(equal(E, D)))))))), not(graphPart(C, A))), and(entails(and(not(instance(A, 'MultiGraph')), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(links(C, B, E), and(links(C, B, D), not(equal(E, D)))))))), not(graphPart(B, A))), and(entails(and(not(instance(A, 'MultiGraph')), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, D), not(equal(E, D)))))))), not(links(C, B, E))), and(entails(and(not(instance(A, 'MultiGraph')), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), not(equal(E, D)))))))), not(links(C, B, D))), entails(and(and(and(and(not(instance(A, 'MultiGraph')), and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), links(C, B, D))))))), '$existential'(C, '?NODE1', exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?NODE1', A), and(graphPart(B, A), and(links('?NODE1', B, E), and(links('?NODE1', B, D), not(equal(E, D)))))))))))), '$existential'(D, '?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), '$existential'(E, '?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), equal(E, D)))))))))), [domainV(E, [graphPart:1, links:3]), domainV(D, [graphPart:1, links:3]), domainV(C, [graphPart:1, links:1]), domainV(B, [graphPart:1, links:2]), domainV(A, ['$instanceof':'MultiGraph', graphPart:2]), domainV(F, []), forall(A), replaceConsVar(B, '$existential'('?NODE2', exists(C, exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart('?NODE2', A), and(links(C, '?NODE2', E), and(links(C, '?NODE2', D), not(equal(E, D))))))))))))), replaceConsVar(C, '$existential'('?NODE1', exists(D, exists(E, and(graphPart(E, A), and(graphPart(D, A), and(graphPart('?NODE1', A), and(graphPart(B, A), and(links('?NODE1', B, E), and(links('?NODE1', B, D), not(equal(E, D)))))))))))), replaceConsVar(D, '$existential'('?ARC2', exists(E, and(graphPart(E, A), and(graphPart('?ARC2', A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, E), and(links(C, B, '?ARC2'), not(equal(E, '?ARC2'))))))))))), replaceConsVar(E, '$existential'('?ARC1', and(graphPart('?ARC1', A), and(graphPart(D, A), and(graphPart(C, A), and(graphPart(B, A), and(links(C, B, '?ARC1'), and(links(C, B, D), not(equal('?ARC1', D)))))))))), forall(B), forall(C), forall(D), forall(E)], ['GRAPH'=A, 'ARC1'=E, 'ARC2'=D, 'NODE1'=C, 'NODE2'=B], 'Merge', 'GRAPH Context', 2981, 'Anonymous', on).
mooCache(subclass('PseudoGraph', 'Graph'), subclass('PseudoGraph', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2983, 'Anonymous', on).
mooCache(documentation('PseudoGraph', string('"The Class of pseudographs.  A pseudograph   is a Graph containing at least one GraphLoop."')), documentation('PseudoGraph', string('"The Class of pseudographs.  A pseudograph   is a Graph containing at least one GraphLoop."')), [], [], 'Merge', 'GRAPH Context', 2985, 'Anonymous', on).
mooCache(<=>(instance(A, 'PseudoGraph'), exists(B, and(instance(B, 'GraphLoop'), graphPart(B, A)))), and(and(entails(and(instance(A, 'PseudoGraph'), '$existential'(B, '?LOOP', and(instance('?LOOP', 'GraphLoop'), graphPart('?LOOP', A)))), instance(B, 'GraphLoop')), and(entails(and(instance(A, 'PseudoGraph'), '$existential'(B, '?LOOP', and(instance('?LOOP', 'GraphLoop'), graphPart('?LOOP', A)))), graphPart(B, A)), entails(or(not(instance(B, 'GraphLoop')), not(graphPart(B, A))), not(instance(A, 'PseudoGraph'))))), and(entails(and(instance(B, 'GraphLoop'), graphPart(B, A)), instance(A, 'PseudoGraph')), and(entails(and(not(instance(A, 'PseudoGraph')), graphPart(B, A)), not(instance(B, 'GraphLoop'))), entails(and(not(instance(A, 'PseudoGraph')), instance(B, 'GraphLoop')), not(graphPart(B, A)))))), [domainV(B, ['$instanceof':'GraphLoop', graphPart:1]), domainV(A, ['$instanceof':'PseudoGraph', graphPart:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?LOOP', and(instance('?LOOP', 'GraphLoop'), graphPart('?LOOP', A)))), forall(B)], ['GRAPH'=A, 'LOOP'=B], 'Merge', 'GRAPH Context', 2987, 'Anonymous', on).
mooCache(subclass('GraphElement', 'Abstract'), subclass('GraphElement', 'Abstract'), [], [], 'Merge', 'GRAPH Context', 2989, 'Anonymous', on).
mooCache(disjoint('GraphElement', 'Graph'), disjoint('GraphElement', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2991, 'Anonymous', on).
mooCache(partition('GraphElement', 'GraphNode', 'GraphArc'), partition('GraphElement', 'GraphNode', 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 2993, 'Anonymous', on).
mooCache(documentation('GraphElement', string('"Noncompositional parts of Graphs.    These parts are restricted to GraphNodes and GraphArcs."')), documentation('GraphElement', string('"Noncompositional parts of Graphs.    These parts are restricted to GraphNodes and GraphArcs."')), [], [], 'Merge', 'GRAPH Context', 2995, 'Anonymous', on).
mooCache(=>(instance(A, 'GraphElement'), exists(B, and(instance(B, 'Graph'), graphPart(A, B)))), and(and(entails(not(instance(B, 'Graph')), not(instance(A, 'GraphElement'))), entails(and(instance(A, 'GraphElement'), '$existential'(B, '?GRAPH', and(instance('?GRAPH', 'Graph'), graphPart(A, '?GRAPH')))), instance(B, 'Graph'))), and(entails(not(graphPart(A, B)), not(instance(A, 'GraphElement'))), entails(and(instance(A, 'GraphElement'), '$existential'(B, '?GRAPH', and(instance('?GRAPH', 'Graph'), graphPart(A, '?GRAPH')))), graphPart(A, B)))), [domainV(B, ['$instanceof':'Graph', graphPart:2]), domainV(A, ['$instanceof':'GraphElement', graphPart:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?GRAPH', and(instance('?GRAPH', 'Graph'), graphPart(A, '?GRAPH'))))], ['PART'=A, 'GRAPH'=B], 'Merge', 'GRAPH Context', 2997, 'Anonymous', on).
mooCache(subclass('GraphNode', 'GraphElement'), subclass('GraphNode', 'GraphElement'), [], [], 'Merge', 'GRAPH Context', 2999, 'Anonymous', on).
mooCache(documentation('GraphNode', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphNode is linked by a GraphArc."')), documentation('GraphNode', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphNode is linked by a GraphArc."')), [], [], 'Merge', 'GRAPH Context', 3001, 'Anonymous', on).
mooCache(=>(instance(A, 'GraphNode'), exists(B, exists(C, links(A, C, B)))), and(entails(not(links(A, C, B)), not(instance(A, 'GraphNode'))), entails(and(and(instance(A, 'GraphNode'), '$existential'(B, '?ARC', exists(C, links(A, C, '?ARC')))), '$existential'(C, '?OTHER', links(A, '?OTHER', B))), links(A, C, B))), [domainV(C, [links:2]), domainV(B, [links:3]), domainV(A, ['$instanceof':'GraphNode', links:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?ARC', exists(C, links(A, C, '?ARC')))), replaceConsVar(C, '$existential'('?OTHER', links(A, '?OTHER', B)))], ['NODE'=A, 'OTHER'=C, 'ARC'=B], 'Merge', 'GRAPH Context', 3003, 'Anonymous', on).
mooCache(subclass('GraphArc', 'GraphElement'), subclass('GraphArc', 'GraphElement'), [], [], 'Merge', 'GRAPH Context', 3005, 'Anonymous', on).
mooCache(documentation('GraphArc', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphArc links two GraphNodes."')), documentation('GraphArc', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphArc links two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3007, 'Anonymous', on).
mooCache(=>(instance(A, 'GraphArc'), exists(B, exists(C, links(C, B, A)))), and(entails(not(links(C, B, A)), not(instance(A, 'GraphArc'))), entails(and(and(instance(A, 'GraphArc'), '$existential'(B, '?NODE2', exists(C, links(C, '?NODE2', A)))), '$existential'(C, '?NODE1', links('?NODE1', B, A))), links(C, B, A))), [domainV(C, [links:1]), domainV(B, [links:2]), domainV(A, ['$instanceof':'GraphArc', links:3]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?NODE2', exists(C, links(C, '?NODE2', A)))), replaceConsVar(C, '$existential'('?NODE1', links('?NODE1', B, A)))], ['ARC'=A, 'NODE1'=C, 'NODE2'=B], 'Merge', 'GRAPH Context', 3009, 'Anonymous', on).
mooCache(subclass('GraphLoop', 'GraphArc'), subclass('GraphLoop', 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3011, 'Anonymous', on).
mooCache(documentation('GraphLoop', string('"A GraphArc in which a GraphNode is   linked to itself."')), documentation('GraphLoop', string('"A GraphArc in which a GraphNode is   linked to itself."')), [], [], 'Merge', 'GRAPH Context', 3013, 'Anonymous', on).
mooCache(<=>(instance(A, 'GraphLoop'), exists(B, links(B, B, A))), and(and(entails(and(instance(A, 'GraphLoop'), '$existential'(B, '?NODE', links('?NODE', '?NODE', A))), links(B, B, A)), entails(not(links(B, B, A)), not(instance(A, 'GraphLoop')))), and(entails(links(B, B, A), instance(A, 'GraphLoop')), entails(not(instance(A, 'GraphLoop')), not(links(B, B, A))))), [domainV(B, [links:1, links:2]), domainV(A, ['$instanceof':'GraphLoop', links:3]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?NODE', links('?NODE', '?NODE', A))), forall(B)], ['LOOP'=A, 'NODE'=B], 'Merge', 'GRAPH Context', 3015, 'Anonymous', on).
mooCache(=>(and(equal('InitialNodeFn'(A), B), equal('TerminalNodeFn'(A), B)), instance(A, 'GraphLoop')), and(entails(and(holds('InitialNodeFn', A, B), holds('TerminalNodeFn', A, B)), instance(A, 'GraphLoop')), and(entails(and(not(instance(A, 'GraphLoop')), holds('TerminalNodeFn', A, B)), not(holds('InitialNodeFn', A, B))), entails(and(not(instance(A, 'GraphLoop')), holds('InitialNodeFn', A, B)), not(holds('TerminalNodeFn', A, B))))), [domainV(B, ['InitialNodeFn':2, 'TerminalNodeFn':2]), domainV(A, ['$instanceof':'GraphLoop', 'InitialNodeFn':1, 'TerminalNodeFn':1]), domainV(C, []), forall(A), forall(B)], ['ARC'=A, 'NODE'=B], 'Merge', 'GRAPH Context', 3017, 'Anonymous', on).
mooCache(instance(links, 'TernaryPredicate'), instance(links, 'TernaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3019, 'Anonymous', on).
mooCache(domain(links, 1, 'GraphNode'), domain(links, 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3021, 'Anonymous', on).
mooCache(domain(links, 2, 'GraphNode'), domain(links, 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3023, 'Anonymous', on).
mooCache(domain(links, 3, 'GraphArc'), domain(links, 3, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3025, 'Anonymous', on).
mooCache(documentation(links, string('"a TernaryPredicate that specifies the   GraphArc connecting two GraphNodes."')), documentation(links, string('"a TernaryPredicate that specifies the   GraphArc connecting two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3027, 'Anonymous', on).
mooCache(=>(links(A, B, C), links(B, A, C)), and(entails(not(links(B, A, C)), not(links(A, B, C))), entails(links(A, B, C), links(B, A, C))), [domainV(C, [links:3]), domainV(B, [links:1, links:2]), domainV(A, [links:1, links:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['NODE1'=A, 'NODE2'=B, 'ARC'=C], 'Merge', 'GRAPH Context', 3029, 'Anonymous', on).
mooCache(instance(graphPart, 'BinaryPredicate'), instance(graphPart, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3031, 'Anonymous', on).
mooCache(instance(graphPart, 'AsymmetricRelation'), instance(graphPart, 'AsymmetricRelation'), [], [], 'Merge', 'GRAPH Context', 3033, 'Anonymous', on).
mooCache(instance(graphPart, 'IrreflexiveRelation'), instance(graphPart, 'IrreflexiveRelation'), [], [], 'Merge', 'GRAPH Context', 3035, 'Anonymous', on).
mooCache(domain(graphPart, 1, 'GraphElement'), domain(graphPart, 1, 'GraphElement'), [], [], 'Merge', 'GRAPH Context', 3037, 'Anonymous', on).
mooCache(domain(graphPart, 2, 'Graph'), domain(graphPart, 2, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3039, 'Anonymous', on).
mooCache(documentation(graphPart, string('"A basic relation for Graphs and their   parts.  (graphPart ?PART ?GRAPH) means that ?PART is a GraphArc   or GraphNode of the Graph ?GRAPH."')), documentation(graphPart, string('"A basic relation for Graphs and their   parts.  (graphPart ?PART ?GRAPH) means that ?PART is a GraphArc   or GraphNode of the Graph ?GRAPH."')), [], [], 'Merge', 'GRAPH Context', 3041, 'Anonymous', on).
mooCache(instance(subGraph, 'BinaryPredicate'), instance(subGraph, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3043, 'Anonymous', on).
mooCache(instance(subGraph, 'ReflexiveRelation'), instance(subGraph, 'ReflexiveRelation'), [], [], 'Merge', 'GRAPH Context', 3045, 'Anonymous', on).
mooCache(instance(subGraph, 'TransitiveRelation'), instance(subGraph, 'TransitiveRelation'), [], [], 'Merge', 'GRAPH Context', 3047, 'Anonymous', on).
mooCache(domain(subGraph, 1, 'Graph'), domain(subGraph, 1, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3049, 'Anonymous', on).
mooCache(domain(subGraph, 2, 'Graph'), domain(subGraph, 2, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3051, 'Anonymous', on).
mooCache(documentation(subGraph, string('"The relation between two Graphs when one   Graph is a part of the other.  (subGraph ?GRAPH1 ?GRAPH2) means   that ?GRAPH1 is a part of ?GRAPH2."')), documentation(subGraph, string('"The relation between two Graphs when one   Graph is a part of the other.  (subGraph ?GRAPH1 ?GRAPH2) means   that ?GRAPH1 is a part of ?GRAPH2."')), [], [], 'Merge', 'GRAPH Context', 3053, 'Anonymous', on).
mooCache(=>(and(subGraph(A, B), graphPart(C, A)), graphPart(C, B)), and(entails(and(subGraph(A, B), graphPart(C, A)), graphPart(C, B)), and(entails(and(not(graphPart(C, B)), graphPart(C, A)), not(subGraph(A, B))), entails(and(not(graphPart(C, B)), subGraph(A, B)), not(graphPart(C, A))))), [domainV(C, [graphPart:1]), domainV(B, [graphPart:2, subGraph:2]), domainV(A, [graphPart:2, subGraph:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['GRAPH1'=A, 'GRAPH2'=B, 'ELEMENT'=C], 'Merge', 'GRAPH Context', 3055, 'Anonymous', on).
mooCache(instance(pathLength, 'BinaryPredicate'), instance(pathLength, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3057, 'Anonymous', on).
mooCache(instance(pathLength, 'AsymmetricRelation'), instance(pathLength, 'AsymmetricRelation'), [], [], 'Merge', 'GRAPH Context', 3059, 'Anonymous', on).
mooCache(instance(pathLength, 'IrreflexiveRelation'), instance(pathLength, 'IrreflexiveRelation'), [], [], 'Merge', 'GRAPH Context', 3061, 'Anonymous', on).
mooCache(domain(pathLength, 1, 'GraphPath'), domain(pathLength, 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3063, 'Anonymous', on).
mooCache(domain(pathLength, 2, 'PositiveInteger'), domain(pathLength, 2, 'PositiveInteger'), [], [], 'Merge', 'GRAPH Context', 3065, 'Anonymous', on).
mooCache(documentation(pathLength, string('"A BinaryPredicate that specifies the   length (in number of GraphNodes) of a GraphPath.  (pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in   the GraphPath ?PATH."')), documentation(pathLength, string('"A BinaryPredicate that specifies the   length (in number of GraphNodes) of a GraphPath.  (pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in   the GraphPath ?PATH."')), [], [], 'Merge', 'GRAPH Context', 3067, 'Anonymous', on).
mooCache(instance('InitialNodeFn', 'UnaryFunction'), instance('InitialNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3069, 'Anonymous', on).
mooCache(domain('InitialNodeFn', 1, 'GraphArc'), domain('InitialNodeFn', 1, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3071, 'Anonymous', on).
mooCache(range('InitialNodeFn', 'GraphNode'), range('InitialNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3073, 'Anonymous', on).
mooCache(documentation('InitialNodeFn', string('"A UnaryFunction that maps a   GraphArc to the initial node of the GraphArc.  Note  that this is a partial function.  In particular, the function is   undefined for GraphArcs that are not part of a DirectedGraph."')), documentation('InitialNodeFn', string('"A UnaryFunction that maps a   GraphArc to the initial node of the GraphArc.  Note  that this is a partial function.  In particular, the function is   undefined for GraphArcs that are not part of a DirectedGraph."')), [], [], 'Merge', 'GRAPH Context', 3075, 'Anonymous', on).
mooCache(instance('TerminalNodeFn', 'UnaryFunction'), instance('TerminalNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3077, 'Anonymous', on).
mooCache(domain('TerminalNodeFn', 1, 'GraphArc'), domain('TerminalNodeFn', 1, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3079, 'Anonymous', on).
mooCache(range('TerminalNodeFn', 'GraphNode'), range('TerminalNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3081, 'Anonymous', on).
mooCache(documentation('TerminalNodeFn', string('"A UnaryFunction that maps a   GraphArc to the terminal node of the GraphArc.  Note that this   is a partial function.  In particular, the function is undefined   for GraphArcs that are not part of a DirectedGraph."')), documentation('TerminalNodeFn', string('"A UnaryFunction that maps a   GraphArc to the terminal node of the GraphArc.  Note that this   is a partial function.  In particular, the function is undefined   for GraphArcs that are not part of a DirectedGraph."')), [], [], 'Merge', 'GRAPH Context', 3083, 'Anonymous', on).
mooCache(instance('BeginNodeFn', 'UnaryFunction'), instance('BeginNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3085, 'Anonymous', on).
mooCache(domain('BeginNodeFn', 1, 'GraphPath'), domain('BeginNodeFn', 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3087, 'Anonymous', on).
mooCache(range('BeginNodeFn', 'GraphNode'), range('BeginNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3089, 'Anonymous', on).
mooCache(relatedInternalConcept('BeginNodeFn', 'InitialNodeFn'), relatedInternalConcept('BeginNodeFn', 'InitialNodeFn'), [], [], 'Merge', 'GRAPH Context', 3091, 'Anonymous', on).
mooCache(documentation('BeginNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the beginning of the GraphPath.  Note that,   unlike InitialNodeFn (which relates a GraphArc to a GraphNode),    BeginNodeFn is a total function - every GraphPath has a beginning."')), documentation('BeginNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the beginning of the GraphPath.  Note that,   unlike InitialNodeFn (which relates a GraphArc to a GraphNode),    BeginNodeFn is a total function - every GraphPath has a beginning."')), [], [], 'Merge', 'GRAPH Context', 3093, 'Anonymous', on).
mooCache(instance('EndNodeFn', 'UnaryFunction'), instance('EndNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3095, 'Anonymous', on).
mooCache(domain('EndNodeFn', 1, 'GraphPath'), domain('EndNodeFn', 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3097, 'Anonymous', on).
mooCache(range('EndNodeFn', 'GraphNode'), range('EndNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3099, 'Anonymous', on).
mooCache(relatedInternalConcept('EndNodeFn', 'TerminalNodeFn'), relatedInternalConcept('EndNodeFn', 'TerminalNodeFn'), [], [], 'Merge', 'GRAPH Context', 3101, 'Anonymous', on).
mooCache(documentation('EndNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the end of the GraphPath.  Note that, unlike   TerminalNodeFn (which relates a GraphArc to a GraphNode),    EndNodeFn is a total function - every GraphPath has a end."')), documentation('EndNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the end of the GraphPath.  Note that, unlike   TerminalNodeFn (which relates a GraphArc to a GraphNode),    EndNodeFn is a total function - every GraphPath has a end."')), [], [], 'Merge', 'GRAPH Context', 3103, 'Anonymous', on).
mooCache(instance(arcWeight, 'BinaryPredicate'), instance(arcWeight, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3105, 'Anonymous', on).
mooCache(domain(arcWeight, 1, 'GraphArc'), domain(arcWeight, 1, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3107, 'Anonymous', on).
mooCache(domain(arcWeight, 2, 'RealNumber'), domain(arcWeight, 2, 'RealNumber'), [], [], 'Merge', 'GRAPH Context', 3109, 'Anonymous', on).
mooCache(documentation(arcWeight, string('"This predicate indicates the value of a   GraphArc in a Graph.  This could map to the length of a road in   a road network or the flow rate of a pipe in a plumbing system."')), documentation(arcWeight, string('"This predicate indicates the value of a   GraphArc in a Graph.  This could map to the length of a road in   a road network or the flow rate of a pipe in a plumbing system."')), [], [], 'Merge', 'GRAPH Context', 3111, 'Anonymous', on).
mooCache(instance('PathWeightFn', 'UnaryFunction'), instance('PathWeightFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3113, 'Anonymous', on).
mooCache(domain('PathWeightFn', 1, 'GraphPath'), domain('PathWeightFn', 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3115, 'Anonymous', on).
mooCache(range('PathWeightFn', 'RealNumber'), range('PathWeightFn', 'RealNumber'), [], [], 'Merge', 'GRAPH Context', 3117, 'Anonymous', on).
mooCache(documentation('PathWeightFn', string('"A UnaryFunction that maps a   GraphPath to the sum of the arcWeights on the GraphArcs in   the GraphPath."')), documentation('PathWeightFn', string('"A UnaryFunction that maps a   GraphPath to the sum of the arcWeights on the GraphArcs in   the GraphPath."')), [], [], 'Merge', 'GRAPH Context', 3119, 'Anonymous', on).
mooCache(=>(and(equal('PathWeightFn'(A), B), and(subGraph(C, A), and(graphPart(D, A), and(arcWeight(D, E), forall(F, =>(graphPart(F, A), or(graphPart(F, C), equal(F, D)))))))), equal(B, 'AdditionFn'('PathWeightFn'(C), E))), and(and(entails(and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), and(arcWeight(D, E), not(graphPart(F, A)))))), holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(subGraph(C, A), and(graphPart(D, A), and(arcWeight(D, E), not(graphPart(F, A)))))), not(holds('PathWeightFn', A, B))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(graphPart(D, A), and(arcWeight(D, E), not(graphPart(F, A)))))), not(subGraph(C, A))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(arcWeight(D, E), not(graphPart(F, A)))))), not(graphPart(D, A))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), not(graphPart(F, A)))))), not(arcWeight(D, E))), entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), arcWeight(D, E))))), graphPart(F, A))))))), and(and(entails(and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), and(arcWeight(D, E), graphPart(F, C))))), holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(subGraph(C, A), and(graphPart(D, A), and(arcWeight(D, E), graphPart(F, C))))), not(holds('PathWeightFn', A, B))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(graphPart(D, A), and(arcWeight(D, E), graphPart(F, C))))), not(subGraph(C, A))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(arcWeight(D, E), graphPart(F, C))))), not(graphPart(D, A))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), graphPart(F, C))))), not(arcWeight(D, E))), entails(and(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), arcWeight(D, E))))), '$existential'(F, '?ARC2', not(=>(graphPart('?ARC2', A), or(graphPart('?ARC2', C), equal('?ARC2', D)))))), not(graphPart(F, C)))))))), and(entails(and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), and(arcWeight(D, E), equal(F, D))))), holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(subGraph(C, A), and(graphPart(D, A), and(arcWeight(D, E), equal(F, D))))), not(holds('PathWeightFn', A, B))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(graphPart(D, A), and(arcWeight(D, E), equal(F, D))))), not(subGraph(C, A))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(arcWeight(D, E), equal(F, D))))), not(graphPart(D, A))), and(entails(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), equal(F, D))))), not(arcWeight(D, E))), entails(and(and(not(holds('AdditionFn', 'PathWeightFn'(C), E, B)), and(holds('PathWeightFn', A, B), and(subGraph(C, A), and(graphPart(D, A), arcWeight(D, E))))), '$existential'(F, '?ARC2', not(=>(graphPart('?ARC2', A), or(graphPart('?ARC2', C), equal('?ARC2', D)))))), not(equal(F, D)))))))))), [domainV(F, [graphPart:1]), domainV(E, ['AdditionFn':2, arcWeight:2]), domainV(D, [arcWeight:1, graphPart:1]), domainV(C, ['PathWeightFn':1, graphPart:2, subGraph:1]), domainV(B, ['AdditionFn':3, 'PathWeightFn':2]), domainV(A, ['PathWeightFn':1, graphPart:2, subGraph:2]), domainV(G, []), forall(A), forall(B), forall(C), forall(D), forall(E), replaceConsVar(F, '$existential'('?ARC2', not(=>(graphPart('?ARC2', A), or(graphPart('?ARC2', C), equal('?ARC2', D))))))], ['PATH'=A, 'SUM'=B, 'SUBPATH'=C, 'ARC1'=D, 'NUMBER1'=E, 'ARC2'=F], 'Merge', 'GRAPH Context', 3121, 'Anonymous', on).
mooCache(=>(and(equal('PathWeightFn'(A), B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), forall(G, =>(graphPart(G, A), or(equal(G, C), equal(G, D))))))))), equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(and(entails(and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), not(graphPart(G, A))))))), equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), not(graphPart(G, A))))))), not(holds('PathWeightFn', A, B))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), not(graphPart(G, A))))))), not(graphPart(C, A))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(arcWeight(C, E), and(arcWeight(D, F), not(graphPart(G, A))))))), not(graphPart(D, A))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(D, F), not(graphPart(G, A))))))), not(arcWeight(C, E))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), not(graphPart(G, A))))))), not(arcWeight(D, F))), entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), arcWeight(D, F)))))), graphPart(G, A)))))))), and(and(entails(and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, C)))))), equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, C)))))), not(holds('PathWeightFn', A, B))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, C)))))), not(graphPart(C, A))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, C)))))), not(graphPart(D, A))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(D, F), equal(G, C)))))), not(arcWeight(C, E))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), equal(G, C)))))), not(arcWeight(D, F))), entails(and(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), arcWeight(D, F)))))), '$existential'(G, '?ARC3', not(=>(graphPart('?ARC3', A), or(equal('?ARC3', C), equal('?ARC3', D)))))), not(equal(G, C))))))))), and(entails(and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, D)))))), equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, D)))))), not(holds('PathWeightFn', A, B))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(D, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, D)))))), not(graphPart(C, A))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(arcWeight(C, E), and(arcWeight(D, F), equal(G, D)))))), not(graphPart(D, A))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(D, F), equal(G, D)))))), not(arcWeight(C, E))), and(entails(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), equal(G, D)))))), not(arcWeight(D, F))), entails(and(and(not(equal('PathWeightFn'(A), 'AdditionFn'(E, F))), and(holds('PathWeightFn', A, B), and(graphPart(C, A), and(graphPart(D, A), and(arcWeight(C, E), arcWeight(D, F)))))), '$existential'(G, '?ARC3', not(=>(graphPart('?ARC3', A), or(equal('?ARC3', C), equal('?ARC3', D)))))), not(equal(G, D))))))))))), [domainV(G, [graphPart:1]), domainV(F, ['AdditionFn':2, arcWeight:2]), domainV(E, ['AdditionFn':1, arcWeight:2]), domainV(D, [arcWeight:1, graphPart:1]), domainV(C, [arcWeight:1, graphPart:1]), domainV(B, ['PathWeightFn':2]), domainV(A, ['PathWeightFn':1, graphPart:2]), domainV(H, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(F), replaceConsVar(G, '$existential'('?ARC3', not(=>(graphPart('?ARC3', A), or(equal('?ARC3', C), equal('?ARC3', D))))))], ['PATH'=A, 'SUM'=B, 'ARC1'=C, 'ARC2'=D, 'NUMBER1'=E, 'NUMBER2'=F, 'ARC3'=G], 'Merge', 'GRAPH Context', 3123, 'Anonymous', on).
mooCache(instance('MinimalWeightedPathFn', 'BinaryFunction'), instance('MinimalWeightedPathFn', 'BinaryFunction'), [], [], 'Merge', 'GRAPH Context', 3125, 'Anonymous', on).
mooCache(domain('MinimalWeightedPathFn', 1, 'GraphNode'), domain('MinimalWeightedPathFn', 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3127, 'Anonymous', on).
mooCache(domain('MinimalWeightedPathFn', 2, 'GraphNode'), domain('MinimalWeightedPathFn', 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3129, 'Anonymous', on).
mooCache(range('MinimalWeightedPathFn', 'GraphPath'), range('MinimalWeightedPathFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3131, 'Anonymous', on).
mooCache(documentation('MinimalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the smallest sum of weighted arcs   between the two GraphNodes."')), documentation('MinimalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the smallest sum of weighted arcs   between the two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3133, 'Anonymous', on).
mooCache(=>(equal('MinimalWeightedPathFn'(A, B), C), instance(C, 'GraphPathFn'(A, B))), and(entails(not(instance(C, 'GraphPathFn'(A, B))), not(holds('MinimalWeightedPathFn', A, B, C))), entails(holds('MinimalWeightedPathFn', A, B, C), instance(C, 'GraphPathFn'(A, B)))), [domainV(C, ['MinimalWeightedPathFn':3]), domainV(B, ['GraphPathFn':2, 'MinimalWeightedPathFn':2]), domainV(A, ['GraphPathFn':1, 'MinimalWeightedPathFn':1]), domainV(D, []), forall(A), forall(B), forall(C)], ['NODE1'=A, 'NODE2'=B, 'PATH'=C], 'Merge', 'GRAPH Context', 3135, 'Anonymous', on).
mooCache(=>(and(equal('MinimalWeightedPathFn'(A, B), C), equal('PathWeightFn'(C), D)), forall(E, =>(and(instance(E, 'GraphPathFn'(A, B)), equal('PathWeightFn'(E), F)), greaterThanOrEqualTo(F, G)))), and(entails(and(holds('PathWeightFn', C, D), and(not(greaterThanOrEqualTo(F, G)), and(instance(E, 'GraphPathFn'(A, B)), holds('PathWeightFn', E, F)))), not(holds('MinimalWeightedPathFn', A, B, C))), and(entails(and(holds('MinimalWeightedPathFn', A, B, C), and(not(greaterThanOrEqualTo(F, G)), and(instance(E, 'GraphPathFn'(A, B)), holds('PathWeightFn', E, F)))), not(holds('PathWeightFn', C, D))), and(entails(and(and(holds('MinimalWeightedPathFn', A, B, C), holds('PathWeightFn', C, D)), and(instance(E, 'GraphPathFn'(A, B)), holds('PathWeightFn', E, F))), greaterThanOrEqualTo(F, G)), and(entails(and(and(holds('MinimalWeightedPathFn', A, B, C), holds('PathWeightFn', C, D)), and(not(greaterThanOrEqualTo(F, G)), holds('PathWeightFn', E, F))), not(instance(E, 'GraphPathFn'(A, B)))), entails(and(and(holds('MinimalWeightedPathFn', A, B, C), holds('PathWeightFn', C, D)), and(not(greaterThanOrEqualTo(F, G)), instance(E, 'GraphPathFn'(A, B)))), not(holds('PathWeightFn', E, F))))))), [domainV(G, [greaterThanOrEqualTo:2]), domainV(F, ['PathWeightFn':2, greaterThanOrEqualTo:1]), domainV(E, ['PathWeightFn':1]), domainV(D, ['PathWeightFn':2]), domainV(C, ['MinimalWeightedPathFn':3, 'PathWeightFn':1]), domainV(B, ['GraphPathFn':2, 'MinimalWeightedPathFn':2]), domainV(A, ['GraphPathFn':1, 'MinimalWeightedPathFn':1]), domainV(H, []), forall(A), forall(B), forall(C), forall(D), forall(F), forall(G), forall(E)], ['NODE1'=A, 'NODE2'=B, 'PATH'=C, 'NUMBER'=D, 'PATH2'=E, 'NUMBER2'=F, 'NUMBER1'=G], 'Merge', 'GRAPH Context', 3137, 'Anonymous', on).
mooCache(instance('MaximalWeightedPathFn', 'BinaryFunction'), instance('MaximalWeightedPathFn', 'BinaryFunction'), [], [], 'Merge', 'GRAPH Context', 3139, 'Anonymous', on).
mooCache(domain('MaximalWeightedPathFn', 1, 'GraphNode'), domain('MaximalWeightedPathFn', 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3141, 'Anonymous', on).
mooCache(domain('MaximalWeightedPathFn', 2, 'GraphNode'), domain('MaximalWeightedPathFn', 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3143, 'Anonymous', on).
mooCache(range('MaximalWeightedPathFn', 'GraphPath'), range('MaximalWeightedPathFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3145, 'Anonymous', on).
mooCache(documentation('MaximalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the largest sum of weighted arcs   between the two GraphNodes."')), documentation('MaximalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the largest sum of weighted arcs   between the two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3147, 'Anonymous', on).
mooCache(=>(equal('MaximalWeightedPathFn'(A, B), C), instance(C, 'GraphPathFn'(A, B))), and(entails(not(instance(C, 'GraphPathFn'(A, B))), not(holds('MaximalWeightedPathFn', A, B, C))), entails(holds('MaximalWeightedPathFn', A, B, C), instance(C, 'GraphPathFn'(A, B)))), [domainV(C, ['MaximalWeightedPathFn':3]), domainV(B, ['GraphPathFn':2, 'MaximalWeightedPathFn':2]), domainV(A, ['GraphPathFn':1, 'MaximalWeightedPathFn':1]), domainV(D, []), forall(A), forall(B), forall(C)], ['NODE1'=A, 'NODE2'=B, 'PATH'=C], 'Merge', 'GRAPH Context', 3149, 'Anonymous', on).
mooCache(=>(and(equal('MaximalWeightedPathFn'(A, B), C), equal('PathWeightFn'(C), D)), forall(E, =>(and(instance(E, 'GraphPathFn'(A, B)), equal('PathWeightFn'(E), F)), lessThanOrEqualTo(F, G)))), and(entails(and(holds('PathWeightFn', C, D), and(not(lessThanOrEqualTo(F, G)), and(instance(E, 'GraphPathFn'(A, B)), holds('PathWeightFn', E, F)))), not(holds('MaximalWeightedPathFn', A, B, C))), and(entails(and(holds('MaximalWeightedPathFn', A, B, C), and(not(lessThanOrEqualTo(F, G)), and(instance(E, 'GraphPathFn'(A, B)), holds('PathWeightFn', E, F)))), not(holds('PathWeightFn', C, D))), and(entails(and(and(holds('MaximalWeightedPathFn', A, B, C), holds('PathWeightFn', C, D)), and(instance(E, 'GraphPathFn'(A, B)), holds('PathWeightFn', E, F))), lessThanOrEqualTo(F, G)), and(entails(and(and(holds('MaximalWeightedPathFn', A, B, C), holds('PathWeightFn', C, D)), and(not(lessThanOrEqualTo(F, G)), holds('PathWeightFn', E, F))), not(instance(E, 'GraphPathFn'(A, B)))), entails(and(and(holds('MaximalWeightedPathFn', A, B, C), holds('PathWeightFn', C, D)), and(not(lessThanOrEqualTo(F, G)), instance(E, 'GraphPathFn'(A, B)))), not(holds('PathWeightFn', E, F))))))), [domainV(G, [lessThanOrEqualTo:2]), domainV(F, ['PathWeightFn':2, lessThanOrEqualTo:1]), domainV(E, ['PathWeightFn':1]), domainV(D, ['PathWeightFn':2]), domainV(C, ['MaximalWeightedPathFn':3, 'PathWeightFn':1]), domainV(B, ['GraphPathFn':2, 'MaximalWeightedPathFn':2]), domainV(A, ['GraphPathFn':1, 'MaximalWeightedPathFn':1]), domainV(H, []), forall(A), forall(B), forall(C), forall(D), forall(F), forall(G), forall(E)], ['NODE1'=A, 'NODE2'=B, 'PATH'=C, 'NUMBER'=D, 'PATH2'=E, 'NUMBER2'=F, 'NUMBER1'=G], 'Merge', 'GRAPH Context', 3151, 'Anonymous', on).
mooCache(instance('GraphPathFn', 'BinaryFunction'), instance('GraphPathFn', 'BinaryFunction'), [], [], 'Merge', 'GRAPH Context', 3153, 'Anonymous', on).
mooCache(domain('GraphPathFn', 1, 'GraphNode'), domain('GraphPathFn', 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3155, 'Anonymous', on).
mooCache(domain('GraphPathFn', 2, 'GraphNode'), domain('GraphPathFn', 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3157, 'Anonymous', on).
mooCache(rangeSubclass('GraphPathFn', 'GraphPath'), rangeSubclass('GraphPathFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3159, 'Anonymous', on).
mooCache(documentation('GraphPathFn', string('"A BinaryFunction that maps two GraphNodes   to the Class of GraphPaths between those two nodes.  Note that the two   GraphNodes must belong to the same Graph."')), documentation('GraphPathFn', string('"A BinaryFunction that maps two GraphNodes   to the Class of GraphPaths between those two nodes.  Note that the two   GraphNodes must belong to the same Graph."')), [], [], 'Merge', 'GRAPH Context', 3161, 'Anonymous', on).
mooCache(=>(and(graphPart(A, B), not(instance(B, 'DirectedGraph'))), <=>(equal('GraphPathFn'(C, D), A), equal('GraphPathFn'(D, C), A))), and(and(entails(and(not(instance(B, 'DirectedGraph')), and(not(holds('GraphPathFn', D, C, A)), holds('GraphPathFn', D, C, A))), not(graphPart(A, B))), entails(and(graphPart(A, B), and(not(holds('GraphPathFn', D, C, A)), holds('GraphPathFn', D, C, A))), instance(B, 'DirectedGraph'))), and(and(entails(and(not(instance(B, 'DirectedGraph')), and(not(holds('GraphPathFn', D, C, A)), holds('GraphPathFn', C, D, A))), not(graphPart(A, B))), and(entails(and(graphPart(A, B), and(not(holds('GraphPathFn', D, C, A)), holds('GraphPathFn', C, D, A))), instance(B, 'DirectedGraph')), and(entails(and(and(graphPart(A, B), not(instance(B, 'DirectedGraph'))), holds('GraphPathFn', C, D, A)), holds('GraphPathFn', D, C, A)), entails(and(and(graphPart(A, B), not(instance(B, 'DirectedGraph'))), not(holds('GraphPathFn', D, C, A))), not(holds('GraphPathFn', C, D, A)))))), and(and(entails(and(not(instance(B, 'DirectedGraph')), and(not(holds('GraphPathFn', C, D, A)), holds('GraphPathFn', C, D, A))), not(graphPart(A, B))), entails(and(graphPart(A, B), and(not(holds('GraphPathFn', C, D, A)), holds('GraphPathFn', C, D, A))), instance(B, 'DirectedGraph'))), and(entails(and(not(instance(B, 'DirectedGraph')), and(not(holds('GraphPathFn', C, D, A)), holds('GraphPathFn', D, C, A))), not(graphPart(A, B))), and(entails(and(graphPart(A, B), and(not(holds('GraphPathFn', C, D, A)), holds('GraphPathFn', D, C, A))), instance(B, 'DirectedGraph')), and(entails(and(and(graphPart(A, B), not(instance(B, 'DirectedGraph'))), holds('GraphPathFn', D, C, A)), holds('GraphPathFn', C, D, A)), entails(and(and(graphPart(A, B), not(instance(B, 'DirectedGraph'))), not(holds('GraphPathFn', C, D, A))), not(holds('GraphPathFn', D, C, A))))))))), [domainV(D, ['GraphPathFn':1, 'GraphPathFn':2]), domainV(C, ['GraphPathFn':1, 'GraphPathFn':2]), domainV(B, ['$instanceof':'DirectedGraph', graphPart:2]), domainV(A, ['GraphPathFn':3, graphPart:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['PATH'=A, 'GRAPH'=B, 'NODE1'=C, 'NODE2'=D], 'Merge', 'GRAPH Context', 3163, 'Anonymous', on).
mooCache(instance('CutSetFn', 'UnaryFunction'), instance('CutSetFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3165, 'Anonymous', on).
mooCache(domain('CutSetFn', 1, 'Graph'), domain('CutSetFn', 1, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3167, 'Anonymous', on).
mooCache(rangeSubclass('CutSetFn', 'GraphPath'), rangeSubclass('CutSetFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3169, 'Anonymous', on).
mooCache(documentation('CutSetFn', string('"A UnaryFunction that assigns a Graph the   Class of GraphPaths that partition the graph into two separate   graphs if cut.  There may be more than one cutset for a given graph."')), documentation('CutSetFn', string('"A UnaryFunction that assigns a Graph the   Class of GraphPaths that partition the graph into two separate   graphs if cut.  There may be more than one cutset for a given graph."')), [], [], 'Merge', 'GRAPH Context', 3171, 'Anonymous', on).
mooCache(instance('MinimalCutSetFn', 'UnaryFunction'), instance('MinimalCutSetFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3173, 'Anonymous', on).
mooCache(domain('MinimalCutSetFn', 1, 'Graph'), domain('MinimalCutSetFn', 1, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3175, 'Anonymous', on).
mooCache(rangeSubclass('MinimalCutSetFn', 'GraphPath'), rangeSubclass('MinimalCutSetFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3177, 'Anonymous', on).
mooCache(relatedInternalConcept('MinimalCutSetFn', 'CutSetFn'), relatedInternalConcept('MinimalCutSetFn', 'CutSetFn'), [], [], 'Merge', 'GRAPH Context', 3179, 'Anonymous', on).
mooCache(documentation('MinimalCutSetFn', string('"A UnaryFunction that assigns a Graph   the Class of GraphPaths which comprise cutsets for the Graph and   which have the least number of GraphArcs."')), documentation('MinimalCutSetFn', string('"A UnaryFunction that assigns a Graph   the Class of GraphPaths which comprise cutsets for the Graph and   which have the least number of GraphArcs."')), [], [], 'Merge', 'GRAPH Context', 3181, 'Anonymous', on).
mooCache(subclass('MinimalCutSetFn'(A), 'CutSetFn'(A)), subclass('MinimalCutSetFn'(A), 'CutSetFn'(A)), [domainV(A, ['CutSetFn':1, 'MinimalCutSetFn':1]), domainV(B, []), forall(A)], ['GRAPH'=A], 'Merge', 'GRAPH Context', 3183, 'Anonymous', on).
mooCache(=>(equal('MinimalCutSetFn'(A), B), exists(C, forall(D, =>(instance(D, B), pathLength(D, C))))), and(entails(and(instance(D, B), not(pathLength(D, C))), not(holds('MinimalCutSetFn', A, B))), and(entails(and(holds('MinimalCutSetFn', A, B), not(pathLength(D, C))), not(instance(D, B))), entails(and(and(holds('MinimalCutSetFn', A, B), instance(D, B)), '$existential'(C, '?NUMBER', forall(D, =>(instance(D, B), pathLength(D, '?NUMBER'))))), pathLength(D, C)))), [domainV(D, [pathLength:1]), domainV(C, [pathLength:2]), domainV(B, ['MinimalCutSetFn':2, instance:2]), domainV(A, ['MinimalCutSetFn':1]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?NUMBER', forall(D, =>(instance(D, B), pathLength(D, '?NUMBER'))))), forall(D)], ['GRAPH'=A, 'PATHCLASS'=B, 'NUMBER'=C, 'PATH'=D], 'Merge', 'GRAPH Context', 3185, 'Anonymous', on).
mooCache(not(exists(A, exists(B, and(instance(B, 'CutSetFn'(C)), and(instance(A, 'MinimalCutSetFn'(C)), and(pathLength(B, D), and(pathLength(A, E), lessThan(D, E)))))))), and(entails(and(instance(A, 'MinimalCutSetFn'(C)), and(pathLength(B, D), and(pathLength(A, E), lessThan(D, E)))), not(instance(B, 'CutSetFn'(C)))), and(entails(and(instance(B, 'CutSetFn'(C)), and(pathLength(B, D), and(pathLength(A, E), lessThan(D, E)))), not(instance(A, 'MinimalCutSetFn'(C)))), and(entails(and(instance(B, 'CutSetFn'(C)), and(instance(A, 'MinimalCutSetFn'(C)), and(pathLength(A, E), lessThan(D, E)))), not(pathLength(B, D))), and(entails(and(instance(B, 'CutSetFn'(C)), and(instance(A, 'MinimalCutSetFn'(C)), and(pathLength(B, D), lessThan(D, E)))), not(pathLength(A, E))), entails(and(instance(B, 'CutSetFn'(C)), and(instance(A, 'MinimalCutSetFn'(C)), and(pathLength(B, D), pathLength(A, E)))), not(lessThan(D, E))))))), [domainV(E, [lessThan:2, pathLength:2]), domainV(D, [lessThan:1, pathLength:2]), domainV(C, ['CutSetFn':1, 'MinimalCutSetFn':1]), domainV(B, [pathLength:1]), domainV(A, [pathLength:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(A), forall(B)], ['PATH1'=B, 'PATH2'=A, 'GRAPH'=C, 'NUMBER1'=D, 'NUMBER2'=E], 'Merge', 'GRAPH Context', 3187, 'Anonymous', on).
mooCache('include-context'('NUMERIC', 'FUNCTIONS'), 'include-context'('NUMERIC', 'FUNCTIONS'), [], [], 'Merge', 'UNITS OF MEASURE', 3199, 'Anonymous', on).
mooCache(subclass('UnitOfMeasure', 'PhysicalQuantity'), subclass('UnitOfMeasure', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3220, 'Anonymous', on).
mooCache(documentation('UnitOfMeasure', string('"A standard of measurement for some dimension.   For example, the Meter is a UnitOfMeasure for the dimension of length,   as is the Inch.  There is no intrisic property of a UnitOfMeasure that   makes it primitive or fundamental; rather, a system-of-units (e.g.   SystemeInternationalUnit) defines a set of orthogonal dimensions and   assigns units for each."')), documentation('UnitOfMeasure', string('"A standard of measurement for some dimension.   For example, the Meter is a UnitOfMeasure for the dimension of length,   as is the Inch.  There is no intrisic property of a UnitOfMeasure that   makes it primitive or fundamental; rather, a system-of-units (e.g.   SystemeInternationalUnit) defines a set of orthogonal dimensions and   assigns units for each."')), [], [], 'Merge', 'UNITS OF MEASURE', 3222, 'Anonymous', on).
mooCache(subclass('SystemeInternationalUnit', 'UnitOfMeasure'), subclass('SystemeInternationalUnit', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3224, 'Anonymous', on).
mooCache(documentation('SystemeInternationalUnit', string('"The Class of Systeme   International (SI) units."')), documentation('SystemeInternationalUnit', string('"The Class of Systeme   International (SI) units."')), [], [], 'Merge', 'UNITS OF MEASURE', 3226, 'Anonymous', on).
mooCache(subclass('LengthMeasure', 'ConstantQuantity'), subclass('LengthMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3228, 'Anonymous', on).
mooCache(documentation('LengthMeasure', string('"The Class of ConstantQuantities relating   to length."')), documentation('LengthMeasure', string('"The Class of ConstantQuantities relating   to length."')), [], [], 'Merge', 'UNITS OF MEASURE', 3230, 'Anonymous', on).
mooCache(subclass('MassMeasure', 'ConstantQuantity'), subclass('MassMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3232, 'Anonymous', on).
mooCache(documentation('MassMeasure', string('"The Class of ConstantQuantities relating   to the amount of matter in an Object."')), documentation('MassMeasure', string('"The Class of ConstantQuantities relating   to the amount of matter in an Object."')), [], [], 'Merge', 'UNITS OF MEASURE', 3234, 'Anonymous', on).
mooCache(subclass('AreaMeasure', 'ConstantQuantity'), subclass('AreaMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3236, 'Anonymous', on).
mooCache(documentation('AreaMeasure', string('"Measures of the amount of space in two   dimensions."')), documentation('AreaMeasure', string('"Measures of the amount of space in two   dimensions."')), [], [], 'Merge', 'UNITS OF MEASURE', 3238, 'Anonymous', on).
mooCache(subclass('VolumeMeasure', 'ConstantQuantity'), subclass('VolumeMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3240, 'Anonymous', on).
mooCache(documentation('VolumeMeasure', string('"Measures of the amount of space in three   dimensions."')), documentation('VolumeMeasure', string('"Measures of the amount of space in three   dimensions."')), [], [], 'Merge', 'UNITS OF MEASURE', 3242, 'Anonymous', on).
mooCache(subclass('TemperatureMeasure', 'ConstantQuantity'), subclass('TemperatureMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3244, 'Anonymous', on).
mooCache(documentation('TemperatureMeasure', string('"Measures of temperature.    In scientific circles, the temperature of something is understood as the   average velocity of the atoms or molecules that make up the thing."')), documentation('TemperatureMeasure', string('"Measures of temperature.    In scientific circles, the temperature of something is understood as the   average velocity of the atoms or molecules that make up the thing."')), [], [], 'Merge', 'UNITS OF MEASURE', 3246, 'Anonymous', on).
mooCache(subclass('CurrencyMeasure', 'ConstantQuantity'), subclass('CurrencyMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3248, 'Anonymous', on).
mooCache(documentation('CurrencyMeasure', string('"Includes all standard measures of monetary   value, including DollarUnitedStates, CentUnitedStates, Lire, Yen, etc."')), documentation('CurrencyMeasure', string('"Includes all standard measures of monetary   value, including DollarUnitedStates, CentUnitedStates, Lire, Yen, etc."')), [], [], 'Merge', 'UNITS OF MEASURE', 3250, 'Anonymous', on).
mooCache(subclass('AngleMeasure', 'ConstantQuantity'), subclass('AngleMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3252, 'Anonymous', on).
mooCache(documentation('AngleMeasure', string('"The value of an angle in a plane or in a   solid."')), documentation('AngleMeasure', string('"The value of an angle in a plane or in a   solid."')), [], [], 'Merge', 'UNITS OF MEASURE', 3254, 'Anonymous', on).
mooCache(subclass('PlaneAngleMeasure', 'AngleMeasure'), subclass('PlaneAngleMeasure', 'AngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3256, 'Anonymous', on).
mooCache(documentation('PlaneAngleMeasure', string('"The value of an angle in a plane."')), documentation('PlaneAngleMeasure', string('"The value of an angle in a plane."')), [], [], 'Merge', 'UNITS OF MEASURE', 3258, 'Anonymous', on).
mooCache(subclass('SolidAngleMeasure', 'AngleMeasure'), subclass('SolidAngleMeasure', 'AngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3260, 'Anonymous', on).
mooCache(disjoint('SolidAngleMeasure', 'PlaneAngleMeasure'), disjoint('SolidAngleMeasure', 'PlaneAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3262, 'Anonymous', on).
mooCache(documentation('SolidAngleMeasure', string('"The value of an angle in a solid."')), documentation('SolidAngleMeasure', string('"The value of an angle in a solid."')), [], [], 'Merge', 'UNITS OF MEASURE', 3264, 'Anonymous', on).
mooCache(instance('MeasureFn', 'BinaryFunction'), instance('MeasureFn', 'BinaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3266, 'Anonymous', on).
mooCache(domain('MeasureFn', 1, 'RealNumber'), domain('MeasureFn', 1, 'RealNumber'), [], [], 'Merge', 'UNITS OF MEASURE', 3268, 'Anonymous', on).
mooCache(domain('MeasureFn', 2, 'UnitOfMeasure'), domain('MeasureFn', 2, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3270, 'Anonymous', on).
mooCache(range('MeasureFn', 'ConstantQuantity'), range('MeasureFn', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3272, 'Anonymous', on).
mooCache(documentation('MeasureFn', string('"This BinaryFunction maps a RealNumber and   a UnitOfMeasure to that Number of units.  It is used for expressing   ConstantQuantities.  For example, the concept of three meters is   represented as (MeasureFn 3 Meter)."')), documentation('MeasureFn', string('"This BinaryFunction maps a RealNumber and   a UnitOfMeasure to that Number of units.  It is used for expressing   ConstantQuantities.  For example, the concept of three meters is   represented as (MeasureFn 3 Meter)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3274, 'Anonymous', on).
mooCache(=>(and(equal('MeasureFn'(A, B), C), and(instance(B, D), not(equal(D, 'UnitOfMeasure')))), instance(C, D)), and(entails(and(holds('MeasureFn', A, B, C), and(instance(B, D), not(equal('UnitOfMeasure', D)))), instance(C, D)), and(entails(and(not(instance(C, D)), and(instance(B, D), not(equal('UnitOfMeasure', D)))), not(holds('MeasureFn', A, B, C))), and(entails(and(not(instance(C, D)), and(holds('MeasureFn', A, B, C), not(equal('UnitOfMeasure', D)))), not(instance(B, D))), entails(and(not(instance(C, D)), and(holds('MeasureFn', A, B, C), instance(B, D))), equal('UnitOfMeasure', D))))), [domainV(D, [instance:2]), domainV(C, ['MeasureFn':3]), domainV(B, ['MeasureFn':2]), domainV(A, ['MeasureFn':1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['NUMBER'=A, 'UNIT'=B, 'QUANT'=C, 'QUANTTYPE'=D], 'Merge', 'UNITS OF MEASURE', 3276, 'Anonymous', on).
mooCache(=>(and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryFunction'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), equal('AssignmentFn'(A, B, C), D))))), forall(E, =>(instance(E, 'UnitOfMeasure'), equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E))))), and(entails(and(not(equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryFunction'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C, D)))))), not(instance(E, 'UnitOfMeasure'))), and(entails(and(instance(E, 'UnitOfMeasure'), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryFunction'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C, D)))))), equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E))), and(entails(and(and(instance(E, 'UnitOfMeasure'), not(equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E)))), and(instance(A, 'BinaryFunction'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C, D))))), not(instance(A, 'RelationExtendedToQuantities'))), and(entails(and(and(instance(E, 'UnitOfMeasure'), not(equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C, D))))), not(instance(A, 'BinaryFunction'))), and(entails(and(and(instance(E, 'UnitOfMeasure'), not(equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryFunction'), and(instance(C, 'RealNumber'), holds(A, B, C, D))))), not(instance(B, 'RealNumber'))), and(entails(and(and(instance(E, 'UnitOfMeasure'), not(equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryFunction'), and(instance(B, 'RealNumber'), holds(A, B, C, D))))), not(instance(C, 'RealNumber'))), entails(and(and(instance(E, 'UnitOfMeasure'), not(equal('AssignmentFn'(A, 'MeasureFn'(B, E), 'MeasureFn'(C, E)), 'MeasureFn'(D, E)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryFunction'), and(instance(B, 'RealNumber'), instance(C, 'RealNumber'))))), not(holds(A, B, C, D))))))))), [domainV(E, ['$instanceof':'UnitOfMeasure', 'MeasureFn':2]), domainV(D, ['MeasureFn':1, A:3]), domainV(C, ['$instanceof':'RealNumber', 'MeasureFn':1, A:2]), domainV(B, ['$instanceof':'RealNumber', 'MeasureFn':1, A:1]), domainV(A, ['$instanceof':'BinaryFunction', '$instanceof':'RelationExtendedToQuantities', 'AssignmentFn':1, holds:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['FUNCTION'=A, 'NUMBER1'=B, 'NUMBER2'=C, 'VALUE'=D, 'UNIT'=E], 'Merge', 'UNITS OF MEASURE', 3278, 'Anonymous', on).
mooCache(=>(and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryRelation'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C))))), forall(D, =>(instance(D, 'UnitOfMeasure'), holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D))))), and(entails(and(not(holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryRelation'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C)))))), not(instance(D, 'UnitOfMeasure'))), and(entails(and(instance(D, 'UnitOfMeasure'), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryRelation'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C)))))), holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D))), and(entails(and(and(instance(D, 'UnitOfMeasure'), not(holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D)))), and(instance(A, 'BinaryRelation'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C))))), not(instance(A, 'RelationExtendedToQuantities'))), and(entails(and(and(instance(D, 'UnitOfMeasure'), not(holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(B, 'RealNumber'), and(instance(C, 'RealNumber'), holds(A, B, C))))), not(instance(A, 'BinaryRelation'))), and(entails(and(and(instance(D, 'UnitOfMeasure'), not(holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryRelation'), and(instance(C, 'RealNumber'), holds(A, B, C))))), not(instance(B, 'RealNumber'))), and(entails(and(and(instance(D, 'UnitOfMeasure'), not(holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryRelation'), and(instance(B, 'RealNumber'), holds(A, B, C))))), not(instance(C, 'RealNumber'))), entails(and(and(instance(D, 'UnitOfMeasure'), not(holds(A, 'MeasureFn'(B, D), 'MeasureFn'(C, D)))), and(instance(A, 'RelationExtendedToQuantities'), and(instance(A, 'BinaryRelation'), and(instance(B, 'RealNumber'), instance(C, 'RealNumber'))))), not(holds(A, B, C))))))))), [domainV(D, ['$instanceof':'UnitOfMeasure', 'MeasureFn':2]), domainV(C, ['$instanceof':'RealNumber', 'MeasureFn':1, A:2]), domainV(B, ['$instanceof':'RealNumber', 'MeasureFn':1, A:1]), domainV(A, ['$instanceof':'BinaryRelation', '$instanceof':'RelationExtendedToQuantities', holds:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['REL'=A, 'NUMBER1'=B, 'NUMBER2'=C, 'UNIT'=D], 'Merge', 'UNITS OF MEASURE', 3280, 'Anonymous', on).
mooCache(instance('KiloFn', 'UnaryFunction'), instance('KiloFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3282, 'Anonymous', on).
mooCache(domain('KiloFn', 1, 'UnitOfMeasure'), domain('KiloFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3284, 'Anonymous', on).
mooCache(range('KiloFn', 'PhysicalQuantity'), range('KiloFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3286, 'Anonymous', on).
mooCache(documentation('KiloFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000 units of the UnitOfMeasure.  For example, (KiloFn Gram) is   1,000 Grams."')), documentation('KiloFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000 units of the UnitOfMeasure.  For example, (KiloFn Gram) is   1,000 Grams."')), [], [], 'Merge', 'UNITS OF MEASURE', 3288, 'Anonymous', on).
mooCache(equal('KiloFn'(A), 'MeasureFn'(1000, A)), equal('KiloFn'(A), 'MeasureFn'(1000, A)), [domainV(A, ['KiloFn':1, 'MeasureFn':2]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3290, 'Anonymous', on).
mooCache(instance('MegaFn', 'UnaryFunction'), instance('MegaFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3292, 'Anonymous', on).
mooCache(domain('MegaFn', 1, 'UnitOfMeasure'), domain('MegaFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3294, 'Anonymous', on).
mooCache(range('MegaFn', 'PhysicalQuantity'), range('MegaFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3296, 'Anonymous', on).
mooCache(documentation('MegaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000 units of the UnitOfMeasure.  For example, (KiloFn Hertz)   is 1,000,000 Hertz."')), documentation('MegaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000 units of the UnitOfMeasure.  For example, (KiloFn Hertz)   is 1,000,000 Hertz."')), [], [], 'Merge', 'UNITS OF MEASURE', 3298, 'Anonymous', on).
mooCache(equal('MegaFn'(A), 'MeasureFn'(1000000, A)), equal('MegaFn'(A), 'MeasureFn'(1000000, A)), [domainV(A, ['MeasureFn':2, 'MegaFn':1]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3300, 'Anonymous', on).
mooCache(instance('GigaFn', 'UnaryFunction'), instance('GigaFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3302, 'Anonymous', on).
mooCache(domain('GigaFn', 1, 'UnitOfMeasure'), domain('GigaFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3304, 'Anonymous', on).
mooCache(range('GigaFn', 'PhysicalQuantity'), range('GigaFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3306, 'Anonymous', on).
mooCache(documentation('GigaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000,000 units of the UnitOfMeasure.  For example, (GigaFn Hertz)   is 1,000,000,000 Hertz."')), documentation('GigaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000,000 units of the UnitOfMeasure.  For example, (GigaFn Hertz)   is 1,000,000,000 Hertz."')), [], [], 'Merge', 'UNITS OF MEASURE', 3308, 'Anonymous', on).
mooCache(equal('GigaFn'(A), 'MeasureFn'(1000000000, A)), equal('GigaFn'(A), 'MeasureFn'(1000000000, A)), [domainV(A, ['GigaFn':1, 'MeasureFn':2]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3310, 'Anonymous', on).
mooCache(instance('TeraFn', 'UnaryFunction'), instance('TeraFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3312, 'Anonymous', on).
mooCache(domain('TeraFn', 1, 'UnitOfMeasure'), domain('TeraFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3314, 'Anonymous', on).
mooCache(range('TeraFn', 'PhysicalQuantity'), range('TeraFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3316, 'Anonymous', on).
mooCache(documentation('TeraFn', string('"A UnaryFunction that maps a UnitOfMeasure   into 1,000,000,000,000 units of the UnitOfMeasure.  For example,   (TeraFn Hertz) is 1,000,000,000,000 Hertz."')), documentation('TeraFn', string('"A UnaryFunction that maps a UnitOfMeasure   into 1,000,000,000,000 units of the UnitOfMeasure.  For example,   (TeraFn Hertz) is 1,000,000,000,000 Hertz."')), [], [], 'Merge', 'UNITS OF MEASURE', 3318, 'Anonymous', on).
mooCache(equal('TeraFn'(A), 'MeasureFn'(1e+12, A)), equal('TeraFn'(A), 'MeasureFn'(1e+12, A)), [domainV(A, ['MeasureFn':2, 'TeraFn':1]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3320, 'Anonymous', on).
mooCache(instance('MilliFn', 'UnaryFunction'), instance('MilliFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3322, 'Anonymous', on).
mooCache(domain('MilliFn', 1, 'UnitOfMeasure'), domain('MilliFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3324, 'Anonymous', on).
mooCache(range('MilliFn', 'PhysicalQuantity'), range('MilliFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3326, 'Anonymous', on).
mooCache(documentation('MilliFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .001 units of the UnitOfMeasure.  For example, (MilliFn Ampere) is   .001 Amperes."')), documentation('MilliFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .001 units of the UnitOfMeasure.  For example, (MilliFn Ampere) is   .001 Amperes."')), [], [], 'Merge', 'UNITS OF MEASURE', 3328, 'Anonymous', on).
mooCache(equal('MilliFn'(A), 'MeasureFn'(0.001, A)), equal('MilliFn'(A), 'MeasureFn'(0.001, A)), [domainV(A, ['MeasureFn':2, 'MilliFn':1]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3330, 'Anonymous', on).
mooCache(instance('MicroFn', 'UnaryFunction'), instance('MicroFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3332, 'Anonymous', on).
mooCache(domain('MicroFn', 1, 'UnitOfMeasure'), domain('MicroFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3334, 'Anonymous', on).
mooCache(range('MicroFn', 'PhysicalQuantity'), range('MicroFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3336, 'Anonymous', on).
mooCache(documentation('MicroFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000001 units of the UnitOfMeasure.  For example, (MicroFn Meter) is   .000001 Meters."')), documentation('MicroFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000001 units of the UnitOfMeasure.  For example, (MicroFn Meter) is   .000001 Meters."')), [], [], 'Merge', 'UNITS OF MEASURE', 3338, 'Anonymous', on).
mooCache(equal('MicroFn'(A), 'MeasureFn'(1e-06, A)), equal('MicroFn'(A), 'MeasureFn'(1e-06, A)), [domainV(A, ['MeasureFn':2, 'MicroFn':1]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3340, 'Anonymous', on).
mooCache(instance('NanoFn', 'UnaryFunction'), instance('NanoFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3342, 'Anonymous', on).
mooCache(domain('NanoFn', 1, 'UnitOfMeasure'), domain('NanoFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3344, 'Anonymous', on).
mooCache(range('NanoFn', 'PhysicalQuantity'), range('NanoFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3346, 'Anonymous', on).
mooCache(documentation('NanoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000001 units of the UnitOfMeasure.  For example, (MicroFn SecondDuration)   is .000000001 SecondDurations."')), documentation('NanoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000001 units of the UnitOfMeasure.  For example, (MicroFn SecondDuration)   is .000000001 SecondDurations."')), [], [], 'Merge', 'UNITS OF MEASURE', 3348, 'Anonymous', on).
mooCache(equal('NanoFn'(A), 'MeasureFn'(1e-09, A)), equal('NanoFn'(A), 'MeasureFn'(1e-09, A)), [domainV(A, ['MeasureFn':2, 'NanoFn':1]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3350, 'Anonymous', on).
mooCache(instance('PicoFn', 'UnaryFunction'), instance('PicoFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3352, 'Anonymous', on).
mooCache(domain('PicoFn', 1, 'UnitOfMeasure'), domain('PicoFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3354, 'Anonymous', on).
mooCache(range('PicoFn', 'PhysicalQuantity'), range('PicoFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3356, 'Anonymous', on).
mooCache(documentation('PicoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000000001 units of the UnitOfMeasure.  For example, (PicoFn   Ampere) is .000000000001 Amperes."')), documentation('PicoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000000001 units of the UnitOfMeasure.  For example, (PicoFn   Ampere) is .000000000001 Amperes."')), [], [], 'Merge', 'UNITS OF MEASURE', 3358, 'Anonymous', on).
mooCache(equal('PicoFn'(A), 'MeasureFn'(1e-12, A)), equal('PicoFn'(A), 'MeasureFn'(1e-12, A)), [domainV(A, ['MeasureFn':2, 'PicoFn':1]), domainV(B, []), forall(A)], ['UNIT'=A], 'Merge', 'UNITS OF MEASURE', 3360, 'Anonymous', on).
mooCache(instance('IntervalFn', 'BinaryFunction'), instance('IntervalFn', 'BinaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3362, 'Anonymous', on).
mooCache(domain('IntervalFn', 1, 'ConstantQuantity'), domain('IntervalFn', 1, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3364, 'Anonymous', on).
mooCache(domain('IntervalFn', 2, 'ConstantQuantity'), domain('IntervalFn', 2, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3366, 'Anonymous', on).
mooCache(range('IntervalFn', 'ConstantQuantity'), range('IntervalFn', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3368, 'Anonymous', on).
mooCache(documentation('IntervalFn', string('"A BinaryFunction that maps two ConstantQuantities   to the ConstantQuantity that is an interval from the first ConstantQuantity   to the second ConstantQuantity.  For example, (IntervalFn (MeasureFn 6 Hour)   (MeasureFn 12 Hour)) would return the TimeInterval which begins at 6 in the   morning and ends at 12 noon.  For a slightly different example, (IntervalFn   (MeasureFn 8 Meter) (MeasureFn 14 Meter)) would return the ConstantQuantity   of being between 8 and 14 meters in length."')), documentation('IntervalFn', string('"A BinaryFunction that maps two ConstantQuantities   to the ConstantQuantity that is an interval from the first ConstantQuantity   to the second ConstantQuantity.  For example, (IntervalFn (MeasureFn 6 Hour)   (MeasureFn 12 Hour)) would return the TimeInterval which begins at 6 in the   morning and ends at 12 noon.  For a slightly different example, (IntervalFn   (MeasureFn 8 Meter) (MeasureFn 14 Meter)) would return the ConstantQuantity   of being between 8 and 14 meters in length."')), [], [], 'Merge', 'UNITS OF MEASURE', 3370, 'Anonymous', on).
mooCache(instance('MagnitudeFn', 'UnaryFunction'), instance('MagnitudeFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3372, 'Anonymous', on).
mooCache(domain('MagnitudeFn', 1, 'ConstantQuantity'), domain('MagnitudeFn', 1, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3374, 'Anonymous', on).
mooCache(range('MagnitudeFn', 'RealNumber'), range('MagnitudeFn', 'RealNumber'), [], [], 'Merge', 'UNITS OF MEASURE', 3376, 'Anonymous', on).
mooCache(documentation('MagnitudeFn', string('"The magnitude of a ConstantQuantity is the   numeric value for the quantity.  In other words, MagnitudeFn converts   a ConstantQuantity with an associated UnitOfMeasure into an ordinary   RealNumber.  For example, the magnitude of the ConstantQuantity 2   Kilometers is the RealNumber 2.   Note that the magnitude of a   quantity in a given unit times that unit is equal to the original   quantity."')), documentation('MagnitudeFn', string('"The magnitude of a ConstantQuantity is the   numeric value for the quantity.  In other words, MagnitudeFn converts   a ConstantQuantity with an associated UnitOfMeasure into an ordinary   RealNumber.  For example, the magnitude of the ConstantQuantity 2   Kilometers is the RealNumber 2.   Note that the magnitude of a   quantity in a given unit times that unit is equal to the original   quantity."')), [], [], 'Merge', 'UNITS OF MEASURE', 3378, 'Anonymous', on).
mooCache(equal('MagnitudeFn'('MeasureFn'(A, B)), A), holds('MagnitudeFn', 'MeasureFn'(A, B), A), [domainV(B, ['MeasureFn':2]), domainV(A, ['MagnitudeFn':2, 'MeasureFn':1]), domainV(C, []), forall(A), forall(B)], ['NUMBER'=A, 'UNIT'=B], 'Merge', 'UNITS OF MEASURE', 3380, 'Anonymous', on).
mooCache(instance('DensityFn', 'BinaryFunction'), instance('DensityFn', 'BinaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3382, 'Anonymous', on).
mooCache(domain('DensityFn', 1, 'MassMeasure'), domain('DensityFn', 1, 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3384, 'Anonymous', on).
mooCache(domain('DensityFn', 2, 'VolumeMeasure'), domain('DensityFn', 2, 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3386, 'Anonymous', on).
mooCache(range('DensityFn', 'FunctionQuantity'), range('DensityFn', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3388, 'Anonymous', on).
mooCache(documentation('DensityFn', string('"A very general FunctionQuantity.  DensityFn   maps an instance of MassMeasure and an instance of VolumeMeasure to   the density represented by this combination of mass and volume.  For   example, (DensityFn (MeasureFn 3 Gram) (MeasureFn 1 Liter))   represents the density of 3 grams per liter."')), documentation('DensityFn', string('"A very general FunctionQuantity.  DensityFn   maps an instance of MassMeasure and an instance of VolumeMeasure to   the density represented by this combination of mass and volume.  For   example, (DensityFn (MeasureFn 3 Gram) (MeasureFn 1 Liter))   represents the density of 3 grams per liter."')), [], [], 'Merge', 'UNITS OF MEASURE', 3390, 'Anonymous', on).
mooCache(instance('Meter', 'LengthMeasure'), instance('Meter', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3400, 'Anonymous', on).
mooCache(instance('Meter', 'SystemeInternationalUnit'), instance('Meter', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3402, 'Anonymous', on).
mooCache(documentation('Meter', string('"SI LengthMeasure.  Symbol:  m. It is one of the  base units in SI, and it is currently defined as follows: the Meter   is the length of the path traveled by light in a vacuum during a time   interval of 1/299792458 of a SecondDuration."')), documentation('Meter', string('"SI LengthMeasure.  Symbol:  m. It is one of the  base units in SI, and it is currently defined as follows: the Meter   is the length of the path traveled by light in a vacuum during a time   interval of 1/299792458 of a SecondDuration."')), [], [], 'Merge', 'UNITS OF MEASURE', 3404, 'Anonymous', on).
mooCache(instance('Gram', 'MassMeasure'), instance('Gram', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3408, 'Anonymous', on).
mooCache(instance('Gram', 'SystemeInternationalUnit'), instance('Gram', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3410, 'Anonymous', on).
mooCache(documentation('Gram', string('"Submultiple of kilogram.  Symbol: g.   1 kilogram = 1000 Grams."')), documentation('Gram', string('"Submultiple of kilogram.  Symbol: g.   1 kilogram = 1000 Grams."')), [], [], 'Merge', 'UNITS OF MEASURE', 3412, 'Anonymous', on).
mooCache(instance('SecondDuration', 'TimeDuration'), instance('SecondDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3416, 'Anonymous', on).
mooCache(instance('SecondDuration', 'SystemeInternationalUnit'), instance('SecondDuration', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3418, 'Anonymous', on).
mooCache(documentation('SecondDuration', string('"SI TimeDuration.  Symbol: s.   It is one of the base units in SI, and it is currently defined as   follows: the SecondDuration is the duration of 9192631770 periods of   the radiation corresponding to the transition between the two hyperfine   levels of the ground state of the cesium 133 atom."')), documentation('SecondDuration', string('"SI TimeDuration.  Symbol: s.   It is one of the base units in SI, and it is currently defined as   follows: the SecondDuration is the duration of 9192631770 periods of   the radiation corresponding to the transition between the two hyperfine   levels of the ground state of the cesium 133 atom."')), [], [], 'Merge', 'UNITS OF MEASURE', 3420, 'Anonymous', on).
mooCache(instance('Ampere', 'FunctionQuantity'), instance('Ampere', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3424, 'Anonymous', on).
mooCache(instance('Ampere', 'SystemeInternationalUnit'), instance('Ampere', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3426, 'Anonymous', on).
mooCache(documentation('Ampere', string('"SI electric current measure.  Symbol: A. It is   one of the base units in SI. It is defined as follows: the Ampere is   that constant current which, if maintained in two straight parallel   conductors of infinite length, of negligible circular cross-section, and   placed 1 Meter apart in a vacuum, would produce between these conductors   a force equal to 2*10^(-7) Newton per Meter of length."')), documentation('Ampere', string('"SI electric current measure.  Symbol: A. It is   one of the base units in SI. It is defined as follows: the Ampere is   that constant current which, if maintained in two straight parallel   conductors of infinite length, of negligible circular cross-section, and   placed 1 Meter apart in a vacuum, would produce between these conductors   a force equal to 2*10^(-7) Newton per Meter of length."')), [], [], 'Merge', 'UNITS OF MEASURE', 3428, 'Anonymous', on).
mooCache(instance('Kelvin', 'TemperatureMeasure'), instance('Kelvin', 'TemperatureMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3432, 'Anonymous', on).
mooCache(instance('Kelvin', 'SystemeInternationalUnit'), instance('Kelvin', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3434, 'Anonymous', on).
mooCache(documentation('Kelvin', string('"SI TemperatureMeasure.  Symbol: K.   It is one of the base units in SI (it is also a unit in the ITS system).   It is defined as follows: the Kelvin is the fraction 1/273.16 of the   thermodynamic temperature of the triple point of water."')), documentation('Kelvin', string('"SI TemperatureMeasure.  Symbol: K.   It is one of the base units in SI (it is also a unit in the ITS system).   It is defined as follows: the Kelvin is the fraction 1/273.16 of the   thermodynamic temperature of the triple point of water."')), [], [], 'Merge', 'UNITS OF MEASURE', 3436, 'Anonymous', on).
mooCache(instance('Mole', 'ConstantQuantity'), instance('Mole', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3440, 'Anonymous', on).
mooCache(instance('Mole', 'SystemeInternationalUnit'), instance('Mole', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3442, 'Anonymous', on).
mooCache(documentation('Mole', string('"SI amount of substance unit. symbol: mol. It is one   of the base units in SI. It is defined as follows:  the Mole is the   amount of substance of a system which contains as many elementary entities   as there are atoms in 0.012 Kilograms of carbon 12.  Note that, when this   UnitOfMeasure is used, the elementary entities must be specified - they   may be atoms, molecules, ions, electrons, etc. or groups of such   particles."')), documentation('Mole', string('"SI amount of substance unit. symbol: mol. It is one   of the base units in SI. It is defined as follows:  the Mole is the   amount of substance of a system which contains as many elementary entities   as there are atoms in 0.012 Kilograms of carbon 12.  Note that, when this   UnitOfMeasure is used, the elementary entities must be specified - they   may be atoms, molecules, ions, electrons, etc. or groups of such   particles."')), [], [], 'Merge', 'UNITS OF MEASURE', 3444, 'Anonymous', on).
mooCache(instance('Candela', 'FunctionQuantity'), instance('Candela', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3448, 'Anonymous', on).
mooCache(instance('Candela', 'SystemeInternationalUnit'), instance('Candela', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3450, 'Anonymous', on).
mooCache(documentation('Candela', string('"SI luminosity intensity measure.  Symbol: cd.   It is one of the base units in SI, and it is currently defined as   follows:  the Candela is the luminous intensity, in a given direction,   of a source that emits monochromatic radiation of frequency 540*10^12   Hertz and that has a radiant intensity in that direction of 1/683   Watt per Steradian."')), documentation('Candela', string('"SI luminosity intensity measure.  Symbol: cd.   It is one of the base units in SI, and it is currently defined as   follows:  the Candela is the luminous intensity, in a given direction,   of a source that emits monochromatic radiation of frequency 540*10^12   Hertz and that has a radiant intensity in that direction of 1/683   Watt per Steradian."')), [], [], 'Merge', 'UNITS OF MEASURE', 3452, 'Anonymous', on).
mooCache(instance('Liter', 'VolumeMeasure'), instance('Liter', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3454, 'Anonymous', on).
mooCache(instance('Liter', 'UnitOfMeasure'), instance('Liter', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3456, 'Anonymous', on).
mooCache(documentation('Liter', string('"Unit of volume in the metric system.  It is currently   defined to be equal to one cubic decimeter (0.001 cubic meter).  Symbol: l."')), documentation('Liter', string('"Unit of volume in the metric system.  It is currently   defined to be equal to one cubic decimeter (0.001 cubic meter).  Symbol: l."')), [], [], 'Merge', 'UNITS OF MEASURE', 3458, 'Anonymous', on).
mooCache(instance('Centimeter', 'LengthMeasure'), instance('Centimeter', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3460, 'Anonymous', on).
mooCache(instance('Centimeter', 'UnitOfMeasure'), instance('Centimeter', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3462, 'Anonymous', on).
mooCache(documentation('Centimeter', string('"Submultiple of Meter.  Symbol: cm. It is   the 100th part of a Meter"')), documentation('Centimeter', string('"Submultiple of Meter.  Symbol: cm. It is   the 100th part of a Meter"')), [], [], 'Merge', 'UNITS OF MEASURE', 3464, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Centimeter'), 'MeasureFn'('MultiplicationFn'(A, 0.01), 'Meter')), equal('MeasureFn'(A, 'Centimeter'), 'MeasureFn'('MultiplicationFn'(A, 0.01), 'Meter')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3466, 'Anonymous', on).
mooCache(instance('Radian', 'PlaneAngleMeasure'), instance('Radian', 'PlaneAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3476, 'Anonymous', on).
mooCache(instance('Radian', 'SystemeInternationalUnit'), instance('Radian', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3478, 'Anonymous', on).
mooCache(documentation('Radian', string('"SI plane angle measure.  Symbol: rad.  It is the   angle of a circle subtended by an arc equal in length to the circle\'s   radius. Another definition is:  the plane angle between two radii of a   circle which cut off on the circumference an arc equal in length to the   radius.  Radian = m/m = 1."')), documentation('Radian', string('"SI plane angle measure.  Symbol: rad.  It is the   angle of a circle subtended by an arc equal in length to the circle\'s   radius. Another definition is:  the plane angle between two radii of a   circle which cut off on the circumference an arc equal in length to the   radius.  Radian = m/m = 1."')), [], [], 'Merge', 'UNITS OF MEASURE', 3480, 'Anonymous', on).
mooCache(instance('Steradian', 'SolidAngleMeasure'), instance('Steradian', 'SolidAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3484, 'Anonymous', on).
mooCache(instance('Steradian', 'SystemeInternationalUnit'), instance('Steradian', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3486, 'Anonymous', on).
mooCache(documentation('Steradian', string('"SI solid angle measure.  Symbol: sr.  It is   the solid angle of a sphere subtended by a portion of the surface whose   area is equal to the square of the sphere\'s radius.  Another definition   is: the solid angle which, having its vertex in the center of the sphere,   cuts off an area of the surface of the sphere equal to that of a square   with sides of length equal to the radius of the sphere.  Steradian =   m^2/m^2 = 1."')), documentation('Steradian', string('"SI solid angle measure.  Symbol: sr.  It is   the solid angle of a sphere subtended by a portion of the surface whose   area is equal to the square of the sphere\'s radius.  Another definition   is: the solid angle which, having its vertex in the center of the sphere,   cuts off an area of the surface of the sphere equal to that of a square   with sides of length equal to the radius of the sphere.  Steradian =   m^2/m^2 = 1."')), [], [], 'Merge', 'UNITS OF MEASURE', 3488, 'Anonymous', on).
mooCache(instance('Hertz', 'TimeDependentQuantity'), instance('Hertz', 'TimeDependentQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3492, 'Anonymous', on).
mooCache(instance('Hertz', 'SystemeInternationalUnit'), instance('Hertz', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3494, 'Anonymous', on).
mooCache(documentation('Hertz', string('"SI frequency measure.  Symbol: Hz. It is the   number of cycles per second.  Hertz = s^(-1).  Note that Hertz   does not have a conversion function."')), documentation('Hertz', string('"SI frequency measure.  Symbol: Hz. It is the   number of cycles per second.  Hertz = s^(-1).  Note that Hertz   does not have a conversion function."')), [], [], 'Merge', 'UNITS OF MEASURE', 3496, 'Anonymous', on).
mooCache(instance('Newton', 'FunctionQuantity'), instance('Newton', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3500, 'Anonymous', on).
mooCache(instance('Newton', 'SystemeInternationalUnit'), instance('Newton', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3502, 'Anonymous', on).
mooCache(documentation('Newton', string('"SI force measure.  Symbol: N. It is that force   which gives to a mass of 1 kilogram an acceleration of 1 Meter per   SecondDuration.  Newton = m*kg*s^(-2)."')), documentation('Newton', string('"SI force measure.  Symbol: N. It is that force   which gives to a mass of 1 kilogram an acceleration of 1 Meter per   SecondDuration.  Newton = m*kg*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3504, 'Anonymous', on).
mooCache(instance('Pascal', 'FunctionQuantity'), instance('Pascal', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3508, 'Anonymous', on).
mooCache(instance('Pascal', 'SystemeInternationalUnit'), instance('Pascal', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3510, 'Anonymous', on).
mooCache(documentation('Pascal', string('"SI pressure measure.  Symbol:Pa. It is the   pressure of one Newton per square Meter.  Pascal = N/m^2   = m^(-1)*kg*s^(-2)."')), documentation('Pascal', string('"SI pressure measure.  Symbol:Pa. It is the   pressure of one Newton per square Meter.  Pascal = N/m^2   = m^(-1)*kg*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3512, 'Anonymous', on).
mooCache(instance('Joule', 'FunctionQuantity'), instance('Joule', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3516, 'Anonymous', on).
mooCache(instance('Joule', 'SystemeInternationalUnit'), instance('Joule', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3518, 'Anonymous', on).
mooCache(documentation('Joule', string('"SI energy measure.  Symbol: J.  It is the work   done when the point of application of 1 Newton is displaced a distance   of 1 Meter in the direction of the force.  Joule = N*m =   m^2*kg*s^(-2)."')), documentation('Joule', string('"SI energy measure.  Symbol: J.  It is the work   done when the point of application of 1 Newton is displaced a distance   of 1 Meter in the direction of the force.  Joule = N*m =   m^2*kg*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3520, 'Anonymous', on).
mooCache(instance('Watt', 'FunctionQuantity'), instance('Watt', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3524, 'Anonymous', on).
mooCache(instance('Watt', 'SystemeInternationalUnit'), instance('Watt', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3526, 'Anonymous', on).
mooCache(documentation('Watt', string('"SI power measure.  Aymbol: W.  A UnitOfMeasure   that measures power, i.e. energy produced or expended divided by   TimeDuration. It is the power which gives rise to the production   of energy (or work) at the rate of one Joule per SecondDuration.    Watt = J/s = m^2*kg*s^(-3)."')), documentation('Watt', string('"SI power measure.  Aymbol: W.  A UnitOfMeasure   that measures power, i.e. energy produced or expended divided by   TimeDuration. It is the power which gives rise to the production   of energy (or work) at the rate of one Joule per SecondDuration.    Watt = J/s = m^2*kg*s^(-3)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3528, 'Anonymous', on).
mooCache(instance('Coulomb', 'TimeDependentQuantity'), instance('Coulomb', 'TimeDependentQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3534, 'Anonymous', on).
mooCache(instance('Coulomb', 'SystemeInternationalUnit'), instance('Coulomb', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3536, 'Anonymous', on).
mooCache(documentation('Coulomb', string('"SI electric charge measure.  Symbol: C. It is   the quantity of electric charge transported through a cross section of   a conductor in an electric circuit during each SecondDuration by a   current of 1 Ampere.  Coulomb = s*A."')), documentation('Coulomb', string('"SI electric charge measure.  Symbol: C. It is   the quantity of electric charge transported through a cross section of   a conductor in an electric circuit during each SecondDuration by a   current of 1 Ampere.  Coulomb = s*A."')), [], [], 'Merge', 'UNITS OF MEASURE', 3538, 'Anonymous', on).
mooCache(instance('Volt', 'FunctionQuantity'), instance('Volt', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3542, 'Anonymous', on).
mooCache(instance('Volt', 'SystemeInternationalUnit'), instance('Volt', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3544, 'Anonymous', on).
mooCache(documentation('Volt', string('"SI electric potential measure.  Symbol: V.  It is   the difference of electric potential between two points of a conducting   wire carrying a constant current of 1 Ampere, when the power dissipated   between these points is equal to 1 Watt.  Volt = W/A =   m^2*kg*s^(-3)*A^(-1)."')), documentation('Volt', string('"SI electric potential measure.  Symbol: V.  It is   the difference of electric potential between two points of a conducting   wire carrying a constant current of 1 Ampere, when the power dissipated   between these points is equal to 1 Watt.  Volt = W/A =   m^2*kg*s^(-3)*A^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3546, 'Anonymous', on).
mooCache(instance('Farad', 'FunctionQuantity'), instance('Farad', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3550, 'Anonymous', on).
mooCache(instance('Farad', 'SystemeInternationalUnit'), instance('Farad', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3552, 'Anonymous', on).
mooCache(documentation('Farad', string('"SI capacitance measure.  Symbol: F.  It is the   capacitance of a capacitator between the plates of which there appears   a difference of potential of 1 Volt when it is charged by a quantity   of electricity equal to 1 Coulomb.  Farad = C/V =   m^(-2)*kg(-1)*s^4*A^2."')), documentation('Farad', string('"SI capacitance measure.  Symbol: F.  It is the   capacitance of a capacitator between the plates of which there appears   a difference of potential of 1 Volt when it is charged by a quantity   of electricity equal to 1 Coulomb.  Farad = C/V =   m^(-2)*kg(-1)*s^4*A^2."')), [], [], 'Merge', 'UNITS OF MEASURE', 3554, 'Anonymous', on).
mooCache(instance('Ohm', 'FunctionQuantity'), instance('Ohm', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3558, 'Anonymous', on).
mooCache(instance('Ohm', 'SystemeInternationalUnit'), instance('Ohm', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3560, 'Anonymous', on).
mooCache(documentation('Ohm', string('"SI electric resistance measure. It is the electric  resistance between two points of a conductor when a constant difference   of potential of 1 Volt, applied between these two points,  produces in this conductor a current of 1 Ampere, this conductor not  being the force of any electromotive force.  Ohm = V/A =   m^2*kg*s^(-3)*A^(-2)."')), documentation('Ohm', string('"SI electric resistance measure. It is the electric  resistance between two points of a conductor when a constant difference   of potential of 1 Volt, applied between these two points,  produces in this conductor a current of 1 Ampere, this conductor not  being the force of any electromotive force.  Ohm = V/A =   m^2*kg*s^(-3)*A^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3562, 'Anonymous', on).
mooCache(instance('Siemens', 'FunctionQuantity'), instance('Siemens', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3566, 'Anonymous', on).
mooCache(instance('Siemens', 'SystemeInternationalUnit'), instance('Siemens', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3568, 'Anonymous', on).
mooCache(documentation('Siemens', string('"SI electric conductance measure.  Symbol:  S.    In the case of direct current, the conductance in Siemens is the   reciprocal of the resistance in Ohms; in the case of alternating current,   it is the reciprocal of the impedance in ohms.  siemens = A/V =   m^(-2)*kg(-1)*s^(3)*A^2."')), documentation('Siemens', string('"SI electric conductance measure.  Symbol:  S.    In the case of direct current, the conductance in Siemens is the   reciprocal of the resistance in Ohms; in the case of alternating current,   it is the reciprocal of the impedance in ohms.  siemens = A/V =   m^(-2)*kg(-1)*s^(3)*A^2."')), [], [], 'Merge', 'UNITS OF MEASURE', 3570, 'Anonymous', on).
mooCache(instance('Weber', 'FunctionQuantity'), instance('Weber', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3574, 'Anonymous', on).
mooCache(instance('Weber', 'SystemeInternationalUnit'), instance('Weber', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3576, 'Anonymous', on).
mooCache(documentation('Weber', string('"SI magnetic flux measure.  Symbol: Wb. It is the   magnetic flux which, linking a circuit of one turn, produces in it an  electromotive force of 1 Volt as it is reduced to zero at a uniform  rate in 1 SecondDuration.  Weber = V*s = m^2*kg*s^(-2)*A^(-1)."')), documentation('Weber', string('"SI magnetic flux measure.  Symbol: Wb. It is the   magnetic flux which, linking a circuit of one turn, produces in it an  electromotive force of 1 Volt as it is reduced to zero at a uniform  rate in 1 SecondDuration.  Weber = V*s = m^2*kg*s^(-2)*A^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3578, 'Anonymous', on).
mooCache(instance('Tesla', 'FunctionQuantity'), instance('Tesla', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3582, 'Anonymous', on).
mooCache(instance('Tesla', 'SystemeInternationalUnit'), instance('Tesla', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3584, 'Anonymous', on).
mooCache(documentation('Tesla', string('"SI magnetic flux density measure.  Symbol:  T.  One Tesla equals one Weber per square Meter.  Tesla = Wb/m^2 =   kg*s^(-2)*A^(-1)."')), documentation('Tesla', string('"SI magnetic flux density measure.  Symbol:  T.  One Tesla equals one Weber per square Meter.  Tesla = Wb/m^2 =   kg*s^(-2)*A^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3586, 'Anonymous', on).
mooCache(instance('Henry', 'FunctionQuantity'), instance('Henry', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3590, 'Anonymous', on).
mooCache(instance('Henry', 'SystemeInternationalUnit'), instance('Henry', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3592, 'Anonymous', on).
mooCache(documentation('Henry', string('"SI inductance measure.  Symbol: H.  One Henry   is equivalent to one Volt divided by one Ampere per SecondDuration.   If a current changing at the rate of one Ampere per SecondDuration   induces an electromotive force of one Volt, the circuit has an   inductance of one Henry.  Henry = Wb/A = m^2*kg*s^(-2)*A^(-2)."')), documentation('Henry', string('"SI inductance measure.  Symbol: H.  One Henry   is equivalent to one Volt divided by one Ampere per SecondDuration.   If a current changing at the rate of one Ampere per SecondDuration   induces an electromotive force of one Volt, the circuit has an   inductance of one Henry.  Henry = Wb/A = m^2*kg*s^(-2)*A^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3594, 'Anonymous', on).
mooCache(instance('Celsius', 'TemperatureMeasure'), instance('Celsius', 'TemperatureMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3598, 'Anonymous', on).
mooCache(instance('Celsius', 'SystemeInternationalUnit'), instance('Celsius', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3600, 'Anonymous', on).
mooCache(documentation('Celsius', string('"A TemperatureMeasure.  Kelvin differs from   the Celsius scale in that the triple point of water is defined to be   273.16 degrees Kelvin while it is 0 degrees Celsius. The boiling point   of water is 100 degrees Celsius.  The magnitudes of intervals in the two   scales are the same.  By definition the conversion constant is 273.15"')), documentation('Celsius', string('"A TemperatureMeasure.  Kelvin differs from   the Celsius scale in that the triple point of water is defined to be   273.16 degrees Kelvin while it is 0 degrees Celsius. The boiling point   of water is 100 degrees Celsius.  The magnitudes of intervals in the two   scales are the same.  By definition the conversion constant is 273.15"')), [], [], 'Merge', 'UNITS OF MEASURE', 3602, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Celsius'), 'MeasureFn'('SubtractionFn'(A, 273.15), 'Kelvin')), equal('MeasureFn'(A, 'Celsius'), 'MeasureFn'('SubtractionFn'(A, 273.15), 'Kelvin')), [domainV(A, ['MeasureFn':1, 'SubtractionFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3604, 'Anonymous', on).
mooCache(instance('Lumen', 'FunctionQuantity'), instance('Lumen', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3608, 'Anonymous', on).
mooCache(instance('Lumen', 'SystemeInternationalUnit'), instance('Lumen', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3610, 'Anonymous', on).
mooCache(documentation('Lumen', string('"SI luminous flux measure.  Symbol: lm.  It is the   amount streaming outward through one solid angle of 1 Steradian from a   uniform point source having an intensity of one Candela.  Lumen =   cd*sr = cd * 1."')), documentation('Lumen', string('"SI luminous flux measure.  Symbol: lm.  It is the   amount streaming outward through one solid angle of 1 Steradian from a   uniform point source having an intensity of one Candela.  Lumen =   cd*sr = cd * 1."')), [], [], 'Merge', 'UNITS OF MEASURE', 3612, 'Anonymous', on).
mooCache(instance('Lux', 'FunctionQuantity'), instance('Lux', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3616, 'Anonymous', on).
mooCache(instance('Lux', 'SystemeInternationalUnit'), instance('Lux', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3618, 'Anonymous', on).
mooCache(documentation('Lux', string('"SI illuminance measure.  Symbol: lx.  It is the   amount of illumination provided when one Lumen is evenly distributed   over an area of 1 square Meter. This is also equivalent to the   illumination that would exist on a surface all points of which are one   Meter from a point source of one Candela.  Lux = lm/m^2 =   m^(-2)*cd."')), documentation('Lux', string('"SI illuminance measure.  Symbol: lx.  It is the   amount of illumination provided when one Lumen is evenly distributed   over an area of 1 square Meter. This is also equivalent to the   illumination that would exist on a surface all points of which are one   Meter from a point source of one Candela.  Lux = lm/m^2 =   m^(-2)*cd."')), [], [], 'Merge', 'UNITS OF MEASURE', 3620, 'Anonymous', on).
mooCache(instance('Becquerel', 'TimeDependentQuantity'), instance('Becquerel', 'TimeDependentQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3624, 'Anonymous', on).
mooCache(instance('Becquerel', 'SystemeInternationalUnit'), instance('Becquerel', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3626, 'Anonymous', on).
mooCache(documentation('Becquerel', string('"SI activity measure.  Symbol: Bq.  It measures   the amount of radioactivity contained in a given sample of matter. It is   that quantity of a radioactive element in which there is one atomic   disintegration per SecondDuration.  Becquerel = s^(-1)."')), documentation('Becquerel', string('"SI activity measure.  Symbol: Bq.  It measures   the amount of radioactivity contained in a given sample of matter. It is   that quantity of a radioactive element in which there is one atomic   disintegration per SecondDuration.  Becquerel = s^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3628, 'Anonymous', on).
mooCache(instance('Gray', 'FunctionQuantity'), instance('Gray', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3632, 'Anonymous', on).
mooCache(instance('Gray', 'SystemeInternationalUnit'), instance('Gray', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3634, 'Anonymous', on).
mooCache(documentation('Gray', string('"SI absorbed dose measure.  Symbol: Gy.  It measures   the dose of radiation absorbed in living tissue. It is equal approximately   to the absorbed dose delivered when the energy per unit mass imparted to  matter by ionizing radiation is 1 Joule per kilogram.  Gray = J/kg   = m^2*s^(-2)."')), documentation('Gray', string('"SI absorbed dose measure.  Symbol: Gy.  It measures   the dose of radiation absorbed in living tissue. It is equal approximately   to the absorbed dose delivered when the energy per unit mass imparted to  matter by ionizing radiation is 1 Joule per kilogram.  Gray = J/kg   = m^2*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3636, 'Anonymous', on).
mooCache(instance('Sievert', 'FunctionQuantity'), instance('Sievert', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3640, 'Anonymous', on).
mooCache(instance('Sievert', 'SystemeInternationalUnit'), instance('Sievert', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3642, 'Anonymous', on).
mooCache(documentation('Sievert', string('"SI dose equivalent measure.  Symbol: Sv.  It is   a unit of biologic dose of ionizing radiation.  The Sievert makes it   possible to normalize doses of different types of radiation. It takes   into account the relative biologic effectiveness of ionizing radiation,   since each form of such radiation--e.g., X rays, gamma rays, neutrons--  has a slightly different effect on living tissue for a given absorbed   dose. The dose equivalent of a given type of radiation (in Sievert) is   the dose of the radiation in Gray multiplied by a quality factor that   is based on the relative biologic effectiveness of the radiation.   Accordingly, one Sievert is generally defined as the amount of radiation   roughly equivalent in biologic effectiveness to one Gray of gamma   radiation.  Sievert = J/kg = m^2*s^(-2)"')), documentation('Sievert', string('"SI dose equivalent measure.  Symbol: Sv.  It is   a unit of biologic dose of ionizing radiation.  The Sievert makes it   possible to normalize doses of different types of radiation. It takes   into account the relative biologic effectiveness of ionizing radiation,   since each form of such radiation--e.g., X rays, gamma rays, neutrons--  has a slightly different effect on living tissue for a given absorbed   dose. The dose equivalent of a given type of radiation (in Sievert) is   the dose of the radiation in Gray multiplied by a quality factor that   is based on the relative biologic effectiveness of the radiation.   Accordingly, one Sievert is generally defined as the amount of radiation   roughly equivalent in biologic effectiveness to one Gray of gamma   radiation.  Sievert = J/kg = m^2*s^(-2)"')), [], [], 'Merge', 'UNITS OF MEASURE', 3644, 'Anonymous', on).
mooCache(instance('DayDuration', 'TimeDuration'), instance('DayDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3648, 'Anonymous', on).
mooCache(instance('DayDuration', 'UnitOfMeasure'), instance('DayDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3650, 'Anonymous', on).
mooCache(documentation('DayDuration', string('"Time unit. 1 day = 24 hours."')), documentation('DayDuration', string('"Time unit. 1 day = 24 hours."')), [], [], 'Merge', 'UNITS OF MEASURE', 3652, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'DayDuration'), 'MeasureFn'('MultiplicationFn'(A, 24), 'HourDuration')), equal('MeasureFn'(A, 'DayDuration'), 'MeasureFn'('MultiplicationFn'(A, 24), 'HourDuration')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3654, 'Anonymous', on).
mooCache(instance('HourDuration', 'TimeDuration'), instance('HourDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3656, 'Anonymous', on).
mooCache(instance('HourDuration', 'UnitOfMeasure'), instance('HourDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3658, 'Anonymous', on).
mooCache(documentation('HourDuration', string('"Time unit. 1 hour = 60 minutes."')), documentation('HourDuration', string('"Time unit. 1 hour = 60 minutes."')), [], [], 'Merge', 'UNITS OF MEASURE', 3660, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'HourDuration'), 'MeasureFn'('MultiplicationFn'(A, 60), 'MinuteDuration')), equal('MeasureFn'(A, 'HourDuration'), 'MeasureFn'('MultiplicationFn'(A, 60), 'MinuteDuration')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3662, 'Anonymous', on).
mooCache(instance('MinuteDuration', 'TimeDuration'), instance('MinuteDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3664, 'Anonymous', on).
mooCache(instance('MinuteDuration', 'UnitOfMeasure'), instance('MinuteDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3666, 'Anonymous', on).
mooCache(documentation('MinuteDuration', string('"Time unit. 1 minute = 60 seconds. "')), documentation('MinuteDuration', string('"Time unit. 1 minute = 60 seconds. "')), [], [], 'Merge', 'UNITS OF MEASURE', 3668, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'MinuteDuration'), 'MeasureFn'('MultiplicationFn'(A, 60), 'SecondDuration')), equal('MeasureFn'(A, 'MinuteDuration'), 'MeasureFn'('MultiplicationFn'(A, 60), 'SecondDuration')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3670, 'Anonymous', on).
mooCache(instance('WeekDuration', 'TimeDuration'), instance('WeekDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3672, 'Anonymous', on).
mooCache(instance('WeekDuration', 'UnitOfMeasure'), instance('WeekDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3674, 'Anonymous', on).
mooCache(documentation('WeekDuration', string('"Time unit.  A week\'s duration is seven days."')), documentation('WeekDuration', string('"Time unit.  A week\'s duration is seven days."')), [], [], 'Merge', 'UNITS OF MEASURE', 3676, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'WeekDuration'), 'MeasureFn'('MultiplicationFn'(A, 7), 'DayDuration')), equal('MeasureFn'(A, 'WeekDuration'), 'MeasureFn'('MultiplicationFn'(A, 7), 'DayDuration')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3678, 'Anonymous', on).
mooCache(instance('YearDuration', 'TimeDuration'), instance('YearDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3680, 'Anonymous', on).
mooCache(instance('YearDuration', 'UnitOfMeasure'), instance('YearDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3682, 'Anonymous', on).
mooCache(documentation('YearDuration', string('"Time unit. one calendar year. 1 year =  365 days = 31536000 seconds."')), documentation('YearDuration', string('"Time unit. one calendar year. 1 year =  365 days = 31536000 seconds."')), [], [], 'Merge', 'UNITS OF MEASURE', 3684, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'YearDuration'), 'MeasureFn'('MultiplicationFn'(A, 365), 'DayDuration')), equal('MeasureFn'(A, 'YearDuration'), 'MeasureFn'('MultiplicationFn'(A, 365), 'DayDuration')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3686, 'Anonymous', on).
mooCache(instance('Amu', 'MassMeasure'), instance('Amu', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3692, 'Anonymous', on).
mooCache(instance('Amu', 'UnitOfMeasure'), instance('Amu', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3694, 'Anonymous', on).
mooCache(documentation('Amu', string('"Atomic mass unit.  Symbol: u. It is the mass of   the twelfth part of an atom of the Carbon 12 isotope."')), documentation('Amu', string('"Atomic mass unit.  Symbol: u. It is the mass of   the twelfth part of an atom of the Carbon 12 isotope."')), [], [], 'Merge', 'UNITS OF MEASURE', 3696, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Amu'), 'MeasureFn'('MultiplicationFn'(A, 1.66054e-24), 'Gram')), equal('MeasureFn'(A, 'Amu'), 'MeasureFn'('MultiplicationFn'(A, 1.66054e-24), 'Gram')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3698, 'Anonymous', on).
mooCache(instance('ElectronVolt', 'FunctionQuantity'), instance('ElectronVolt', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3700, 'Anonymous', on).
mooCache(instance('ElectronVolt', 'UnitOfMeasure'), instance('ElectronVolt', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3702, 'Anonymous', on).
mooCache(documentation('ElectronVolt', string('"The ElectronVolt is an energy measure.    Symbol: eV.  It is the kinetic energy acquired by an electron in passing   through a potential difference of 1 Volt in a vacuum."')), documentation('ElectronVolt', string('"The ElectronVolt is an energy measure.    Symbol: eV.  It is the kinetic energy acquired by an electron in passing   through a potential difference of 1 Volt in a vacuum."')), [], [], 'Merge', 'UNITS OF MEASURE', 3704, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'ElectronVolt'), 'MeasureFn'('MultiplicationFn'(A, 1.60218e-19), 'Joule')), equal('MeasureFn'(A, 'ElectronVolt'), 'MeasureFn'('MultiplicationFn'(A, 1.60218e-19), 'Joule')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3706, 'Anonymous', on).
mooCache(instance('Angstrom', 'LengthMeasure'), instance('Angstrom', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3712, 'Anonymous', on).
mooCache(instance('Angstrom', 'UnitOfMeasure'), instance('Angstrom', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3714, 'Anonymous', on).
mooCache(documentation('Angstrom', string('"The Angstrom is a LengthMeasure.   1 Angstrom = 10^(-10) m"')), documentation('Angstrom', string('"The Angstrom is a LengthMeasure.   1 Angstrom = 10^(-10) m"')), [], [], 'Merge', 'UNITS OF MEASURE', 3716, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Angstrom'), 'MeasureFn'('MultiplicationFn'(A, 1e-10), 'Meter')), equal('MeasureFn'(A, 'Angstrom'), 'MeasureFn'('MultiplicationFn'(A, 1e-10), 'Meter')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3718, 'Anonymous', on).
mooCache(instance('Foot', 'LengthMeasure'), instance('Foot', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3726, 'Anonymous', on).
mooCache(instance('Foot', 'UnitOfMeasure'), instance('Foot', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3728, 'Anonymous', on).
mooCache(documentation('Foot', string('"English length unit of feet."')), documentation('Foot', string('"English length unit of feet."')), [], [], 'Merge', 'UNITS OF MEASURE', 3730, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Foot'), 'MeasureFn'('MultiplicationFn'(A, 0.3048), 'Meter')), equal('MeasureFn'(A, 'Foot'), 'MeasureFn'('MultiplicationFn'(A, 0.3048), 'Meter')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3732, 'Anonymous', on).
mooCache(instance('Inch', 'LengthMeasure'), instance('Inch', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3734, 'Anonymous', on).
mooCache(instance('Inch', 'UnitOfMeasure'), instance('Inch', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3736, 'Anonymous', on).
mooCache(documentation('Inch', string('"English length unit of inches."')), documentation('Inch', string('"English length unit of inches."')), [], [], 'Merge', 'UNITS OF MEASURE', 3738, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Inch'), 'MeasureFn'('MultiplicationFn'(A, 0.0254), 'Meter')), equal('MeasureFn'(A, 'Inch'), 'MeasureFn'('MultiplicationFn'(A, 0.0254), 'Meter')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3740, 'Anonymous', on).
mooCache(instance('Mile', 'LengthMeasure'), instance('Mile', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3742, 'Anonymous', on).
mooCache(instance('Mile', 'UnitOfMeasure'), instance('Mile', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3744, 'Anonymous', on).
mooCache(documentation('Mile', string('"English length unit of miles."')), documentation('Mile', string('"English length unit of miles."')), [], [], 'Merge', 'UNITS OF MEASURE', 3746, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Mile'), 'MeasureFn'('MultiplicationFn'(A, 1609.34), 'Meter')), equal('MeasureFn'(A, 'Mile'), 'MeasureFn'('MultiplicationFn'(A, 1609.34), 'Meter')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3748, 'Anonymous', on).
mooCache(instance('UnitedStatesGallon', 'VolumeMeasure'), instance('UnitedStatesGallon', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3752, 'Anonymous', on).
mooCache(instance('UnitedStatesGallon', 'UnitOfMeasure'), instance('UnitedStatesGallon', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3754, 'Anonymous', on).
mooCache(relatedInternalConcept('UnitedStatesGallon', 'UnitedKingdomGallon'), relatedInternalConcept('UnitedStatesGallon', 'UnitedKingdomGallon'), [], [], 'Merge', 'UNITS OF MEASURE', 3756, 'Anonymous', on).
mooCache(documentation('UnitedStatesGallon', string('"Unit of volume commonly used in the   United States."')), documentation('UnitedStatesGallon', string('"Unit of volume commonly used in the   United States."')), [], [], 'Merge', 'UNITS OF MEASURE', 3758, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'UnitedStatesGallon'), 'MeasureFn'('MultiplicationFn'(A, 3.78541), 'Liter')), equal('MeasureFn'(A, 'UnitedStatesGallon'), 'MeasureFn'('MultiplicationFn'(A, 3.78541), 'Liter')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3760, 'Anonymous', on).
mooCache(instance('Quart', 'VolumeMeasure'), instance('Quart', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3762, 'Anonymous', on).
mooCache(instance('Quart', 'UnitOfMeasure'), instance('Quart', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3764, 'Anonymous', on).
mooCache(documentation('Quart', string('"English unit of volume equal to 1/4 of a   UnitedStatesGallon."')), documentation('Quart', string('"English unit of volume equal to 1/4 of a   UnitedStatesGallon."')), [], [], 'Merge', 'UNITS OF MEASURE', 3766, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Quart'), 'MeasureFn'('DivisionFn'(A, 4), 'UnitedStatesGallon')), equal('MeasureFn'(A, 'Quart'), 'MeasureFn'('DivisionFn'(A, 4), 'UnitedStatesGallon')), [domainV(A, ['DivisionFn':1, 'MeasureFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3768, 'Anonymous', on).
mooCache(instance('Pint', 'VolumeMeasure'), instance('Pint', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3770, 'Anonymous', on).
mooCache(instance('Pint', 'UnitOfMeasure'), instance('Pint', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3772, 'Anonymous', on).
mooCache(documentation('Pint', string('"English unit of volume equal to 1/2 of a   Quart."')), documentation('Pint', string('"English unit of volume equal to 1/2 of a   Quart."')), [], [], 'Merge', 'UNITS OF MEASURE', 3774, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Pint'), 'MeasureFn'('DivisionFn'(A, 2), 'Quart')), equal('MeasureFn'(A, 'Pint'), 'MeasureFn'('DivisionFn'(A, 2), 'Quart')), [domainV(A, ['DivisionFn':1, 'MeasureFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3776, 'Anonymous', on).
mooCache(instance('Cup', 'VolumeMeasure'), instance('Cup', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3778, 'Anonymous', on).
mooCache(instance('Cup', 'UnitOfMeasure'), instance('Cup', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3780, 'Anonymous', on).
mooCache(documentation('Cup', string('"English unit of volume equal to 1/2 of a   Pint."')), documentation('Cup', string('"English unit of volume equal to 1/2 of a   Pint."')), [], [], 'Merge', 'UNITS OF MEASURE', 3782, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Cup'), 'MeasureFn'('DivisionFn'(A, 2), 'Pint')), equal('MeasureFn'(A, 'Cup'), 'MeasureFn'('DivisionFn'(A, 2), 'Pint')), [domainV(A, ['DivisionFn':1, 'MeasureFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3784, 'Anonymous', on).
mooCache(instance('Ounce', 'VolumeMeasure'), instance('Ounce', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3786, 'Anonymous', on).
mooCache(instance('Ounce', 'UnitOfMeasure'), instance('Ounce', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3788, 'Anonymous', on).
mooCache(documentation('Ounce', string('"English unit of volume equal to 1/8 of a   Cup."')), documentation('Ounce', string('"English unit of volume equal to 1/8 of a   Cup."')), [], [], 'Merge', 'UNITS OF MEASURE', 3790, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Ounce'), 'MeasureFn'('DivisionFn'(A, 8), 'Cup')), equal('MeasureFn'(A, 'Ounce'), 'MeasureFn'('DivisionFn'(A, 8), 'Cup')), [domainV(A, ['DivisionFn':1, 'MeasureFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3792, 'Anonymous', on).
mooCache(instance('UnitedKingdomGallon', 'VolumeMeasure'), instance('UnitedKingdomGallon', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3794, 'Anonymous', on).
mooCache(instance('UnitedKingdomGallon', 'UnitOfMeasure'), instance('UnitedKingdomGallon', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3796, 'Anonymous', on).
mooCache(documentation('UnitedKingdomGallon', string('"Unit of volume commonly used in the   United Kingdom."')), documentation('UnitedKingdomGallon', string('"Unit of volume commonly used in the   United Kingdom."')), [], [], 'Merge', 'UNITS OF MEASURE', 3798, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'UnitedKingdomGallon'), 'MeasureFn'('MultiplicationFn'(A, 4.54609), 'Liter')), equal('MeasureFn'(A, 'UnitedKingdomGallon'), 'MeasureFn'('MultiplicationFn'(A, 4.54609), 'Liter')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3800, 'Anonymous', on).
mooCache(instance('AtomGram', 'MassMeasure'), instance('AtomGram', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3804, 'Anonymous', on).
mooCache(instance('AtomGram', 'UnitOfMeasure'), instance('AtomGram', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3806, 'Anonymous', on).
mooCache(documentation('AtomGram', string('"MassMeasure that is also known as the gram-atom.    Defined as the mass in grams of 1 Mole of pure substance.  For example,   1 AtomGram of Carbon 12 will be 12 Grams of pure Carbon 12.  2 AtomGrams   of the same substance will be 24 Grams of it.  This is an unusual unit in   that it is essentially 1 Mole of \'stuff\' measured in grams, so that the   actual value (i.e. mass) depends on the type of substance."')), documentation('AtomGram', string('"MassMeasure that is also known as the gram-atom.    Defined as the mass in grams of 1 Mole of pure substance.  For example,   1 AtomGram of Carbon 12 will be 12 Grams of pure Carbon 12.  2 AtomGrams   of the same substance will be 24 Grams of it.  This is an unusual unit in   that it is essentially 1 Mole of \'stuff\' measured in grams, so that the   actual value (i.e. mass) depends on the type of substance."')), [], [], 'Merge', 'UNITS OF MEASURE', 3808, 'Anonymous', on).
mooCache(instance('PoundMass', 'MassMeasure'), instance('PoundMass', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3810, 'Anonymous', on).
mooCache(instance('PoundMass', 'UnitOfMeasure'), instance('PoundMass', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3812, 'Anonymous', on).
mooCache(documentation('PoundMass', string('"English mass unit of pounds."')), documentation('PoundMass', string('"English mass unit of pounds."')), [], [], 'Merge', 'UNITS OF MEASURE', 3814, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'PoundMass'), 'MeasureFn'('MultiplicationFn'(A, 453.592), 'Gram')), equal('MeasureFn'(A, 'PoundMass'), 'MeasureFn'('MultiplicationFn'(A, 453.592), 'Gram')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3816, 'Anonymous', on).
mooCache(instance('Slug', 'MassMeasure'), instance('Slug', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3818, 'Anonymous', on).
mooCache(instance('Slug', 'UnitOfMeasure'), instance('Slug', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3820, 'Anonymous', on).
mooCache(documentation('Slug', string('"English mass unit of slugs."')), documentation('Slug', string('"English mass unit of slugs."')), [], [], 'Merge', 'UNITS OF MEASURE', 3822, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Slug'), 'MeasureFn'('MultiplicationFn'(A, 14593.9), 'Gram')), equal('MeasureFn'(A, 'Slug'), 'MeasureFn'('MultiplicationFn'(A, 14593.9), 'Gram')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3824, 'Anonymous', on).
mooCache(instance('Rankine', 'TemperatureMeasure'), instance('Rankine', 'TemperatureMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3828, 'Anonymous', on).
mooCache(instance('Rankine', 'UnitOfMeasure'), instance('Rankine', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3830, 'Anonymous', on).
mooCache(documentation('Rankine', string('"A TemperatureMeasure.  Note   that 0 degrees Rankine is the same as the absolute zero (i.e. 0   degrees Kelvin)."')), documentation('Rankine', string('"A TemperatureMeasure.  Note   that 0 degrees Rankine is the same as the absolute zero (i.e. 0   degrees Kelvin)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3832, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Rankine'), 'MeasureFn'('MultiplicationFn'(A, 1.8), 'Kelvin')), equal('MeasureFn'(A, 'Rankine'), 'MeasureFn'('MultiplicationFn'(A, 1.8), 'Kelvin')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3834, 'Anonymous', on).
mooCache(instance('PoundForce', 'FunctionQuantity'), instance('PoundForce', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3838, 'Anonymous', on).
mooCache(instance('PoundForce', 'UnitOfMeasure'), instance('PoundForce', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3840, 'Anonymous', on).
mooCache(documentation('PoundForce', string('"English pound of force. The conversion  factor depends on the local value of the acceleration of free fall. A  mean value is used in the conversion axiom associated with this   constant."')), documentation('PoundForce', string('"English pound of force. The conversion  factor depends on the local value of the acceleration of free fall. A  mean value is used in the conversion axiom associated with this   constant."')), [], [], 'Merge', 'UNITS OF MEASURE', 3842, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'PoundForce'), 'MeasureFn'('MultiplicationFn'(A, 4.44822), 'Newton')), equal('MeasureFn'(A, 'PoundForce'), 'MeasureFn'('MultiplicationFn'(A, 4.44822), 'Newton')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3844, 'Anonymous', on).
mooCache(instance('Calorie', 'FunctionQuantity'), instance('Calorie', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3848, 'Anonymous', on).
mooCache(instance('Calorie', 'UnitOfMeasure'), instance('Calorie', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3850, 'Anonymous', on).
mooCache(documentation('Calorie', string('"A Calorie is an energy measure."')), documentation('Calorie', string('"A Calorie is an energy measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3852, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Calorie'), 'MeasureFn'('MultiplicationFn'(A, 4.1868), 'Joule')), equal('MeasureFn'(A, 'Calorie'), 'MeasureFn'('MultiplicationFn'(A, 4.1868), 'Joule')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3854, 'Anonymous', on).
mooCache(instance('BritishThermalUnit', 'FunctionQuantity'), instance('BritishThermalUnit', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3856, 'Anonymous', on).
mooCache(instance('BritishThermalUnit', 'UnitOfMeasure'), instance('BritishThermalUnit', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3858, 'Anonymous', on).
mooCache(documentation('BritishThermalUnit', string('"An energy measure."')), documentation('BritishThermalUnit', string('"An energy measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3860, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'BritishThermalUnit'), 'MeasureFn'('MultiplicationFn'(A, 1055.06), 'Joule')), equal('MeasureFn'(A, 'BritishThermalUnit'), 'MeasureFn'('MultiplicationFn'(A, 1055.06), 'Joule')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3862, 'Anonymous', on).
mooCache(instance('AngularDegree', 'PlaneAngleMeasure'), instance('AngularDegree', 'PlaneAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3866, 'Anonymous', on).
mooCache(instance('AngularDegree', 'UnitOfMeasure'), instance('AngularDegree', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3868, 'Anonymous', on).
mooCache(documentation('AngularDegree', string('"A plane angle measure."')), documentation('AngularDegree', string('"A plane angle measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3870, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'AngularDegree'), 'MeasureFn'('MultiplicationFn'(A, 'DivisionFn'('Pi', 180)), 'Radian')), equal('MeasureFn'(A, 'AngularDegree'), 'MeasureFn'('MultiplicationFn'(A, 'DivisionFn'('Pi', 180)), 'Radian')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3872, 'Anonymous', on).
mooCache(instance('DollarUnitedStates', 'CurrencyMeasure'), instance('DollarUnitedStates', 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3878, 'Anonymous', on).
mooCache(instance('DollarUnitedStates', 'UnitOfMeasure'), instance('DollarUnitedStates', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3880, 'Anonymous', on).
mooCache(documentation('DollarUnitedStates', string('"A currency measure."')), documentation('DollarUnitedStates', string('"A currency measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3882, 'Anonymous', on).
mooCache(instance('CentUnitedStates', 'CurrencyMeasure'), instance('CentUnitedStates', 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3884, 'Anonymous', on).
mooCache(instance('CentUnitedStates', 'UnitOfMeasure'), instance('CentUnitedStates', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3886, 'Anonymous', on).
mooCache(documentation('CentUnitedStates', string('"A currency measure.  1 US cent =   10^-2 US dollars."')), documentation('CentUnitedStates', string('"A currency measure.  1 US cent =   10^-2 US dollars."')), [], [], 'Merge', 'UNITS OF MEASURE', 3888, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'CentUnitedStates'), 'MeasureFn'('MultiplicationFn'(A, 0.01), 'DollarUnitedStates')), equal('MeasureFn'(A, 'CentUnitedStates'), 'MeasureFn'('MultiplicationFn'(A, 0.01), 'DollarUnitedStates')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3890, 'Anonymous', on).
mooCache(instance('Bit', 'ConstantQuantity'), instance('Bit', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3894, 'Anonymous', on).
mooCache(instance('Bit', 'UnitOfMeasure'), instance('Bit', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3896, 'Anonymous', on).
mooCache(documentation('Bit', string('"One Bit of information.  A one or a zero."')), documentation('Bit', string('"One Bit of information.  A one or a zero."')), [], [], 'Merge', 'UNITS OF MEASURE', 3898, 'Anonymous', on).
mooCache(instance('Byte', 'ConstantQuantity'), instance('Byte', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3900, 'Anonymous', on).
mooCache(instance('Byte', 'UnitOfMeasure'), instance('Byte', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3902, 'Anonymous', on).
mooCache(documentation('Byte', string('"One Byte of information.  A Byte is eight   Bits."')), documentation('Byte', string('"One Byte of information.  A Byte is eight   Bits."')), [], [], 'Merge', 'UNITS OF MEASURE', 3904, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'Byte'), 'MeasureFn'('MultiplicationFn'(A, 8), 'Bit')), equal('MeasureFn'(A, 'Byte'), 'MeasureFn'('MultiplicationFn'(A, 8), 'Bit')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3906, 'Anonymous', on).
mooCache(instance('KiloByte', 'ConstantQuantity'), instance('KiloByte', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3908, 'Anonymous', on).
mooCache(instance('KiloByte', 'UnitOfMeasure'), instance('KiloByte', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3910, 'Anonymous', on).
mooCache(documentation('KiloByte', string('"One KiloByte (K) of information.  One   KiloByte is 1024 Bytes.  Note that this sense of \'kilo\' is   different from the one accepted in the SI system."')), documentation('KiloByte', string('"One KiloByte (K) of information.  One   KiloByte is 1024 Bytes.  Note that this sense of \'kilo\' is   different from the one accepted in the SI system."')), [], [], 'Merge', 'UNITS OF MEASURE', 3912, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'KiloByte'), 'MeasureFn'('MultiplicationFn'(A, 1024), 'Byte')), equal('MeasureFn'(A, 'KiloByte'), 'MeasureFn'('MultiplicationFn'(A, 1024), 'Byte')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3914, 'Anonymous', on).
mooCache(instance('MegaByte', 'ConstantQuantity'), instance('MegaByte', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3916, 'Anonymous', on).
mooCache(instance('MegaByte', 'UnitOfMeasure'), instance('MegaByte', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3918, 'Anonymous', on).
mooCache(documentation('MegaByte', string('"One MegaByte (MB) of information.  One   MegaByte is 1024 KiloBytes.  Note that this sense of \'mega\' is   different from the one accepted in the SI system."')), documentation('MegaByte', string('"One MegaByte (MB) of information.  One   MegaByte is 1024 KiloBytes.  Note that this sense of \'mega\' is   different from the one accepted in the SI system."')), [], [], 'Merge', 'UNITS OF MEASURE', 3920, 'Anonymous', on).
mooCache(equal('MeasureFn'(A, 'MegaByte'), 'MeasureFn'('MultiplicationFn'(A, 1024), 'KiloByte')), equal('MeasureFn'(A, 'MegaByte'), 'MeasureFn'('MultiplicationFn'(A, 1024), 'KiloByte')), [domainV(A, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(B, []), forall(A)], ['NUMBER'=A], 'Merge', 'UNITS OF MEASURE', 3922, 'Anonymous', on).
mooCache(instance(measure, 'BinaryPredicate'), instance(measure, 'BinaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3928, 'Anonymous', on).
mooCache(instance(measure, 'AsymmetricRelation'), instance(measure, 'AsymmetricRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3930, 'Anonymous', on).
mooCache(domain(measure, 1, 'Object'), domain(measure, 1, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 3932, 'Anonymous', on).
mooCache(domain(measure, 2, 'ConstantQuantity'), domain(measure, 2, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3934, 'Anonymous', on).
mooCache(documentation(measure, string('"A very general Predicate for asserting that a   particular Object is measured by a particular ConstantQuantity.    In general, the second argument of this Predicate will be an instance   of the Function MeasureFn."')), documentation(measure, string('"A very general Predicate for asserting that a   particular Object is measured by a particular ConstantQuantity.    In general, the second argument of this Predicate will be an instance   of the Function MeasureFn."')), [], [], 'Merge', 'UNITS OF MEASURE', 3936, 'Anonymous', on).
mooCache(subrelation(age, measure), subrelation(age, measure), [], [], 'Merge', 'UNITS OF MEASURE', 3938, 'Anonymous', on).
mooCache(domain(age, 2, 'TimeDuration'), domain(age, 2, 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3940, 'Anonymous', on).
mooCache(singleValued(age, 2), singleValued(age, 2), [], [], 'Merge', 'UNITS OF MEASURE', 3942, 'Anonymous', on).
mooCache(documentation(age, string('"Simply relates an Object to a ConstantQuantity   specifying the age of the Object."')), documentation(age, string('"Simply relates an Object to a ConstantQuantity   specifying the age of the Object."')), [], [], 'Merge', 'UNITS OF MEASURE', 3944, 'Anonymous', on).
mooCache(subrelation(length, measure), subrelation(length, measure), [], [], 'Merge', 'UNITS OF MEASURE', 3946, 'Anonymous', on).
mooCache(domain(length, 2, 'LengthMeasure'), domain(length, 2, 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3948, 'Anonymous', on).
mooCache(documentation(length, string('"BinaryPredicate that is used to state the measure   of an Object from one point to another point along its surface."')), documentation(length, string('"BinaryPredicate that is used to state the measure   of an Object from one point to another point along its surface."')), [], [], 'Merge', 'UNITS OF MEASURE', 3950, 'Anonymous', on).
mooCache(subrelation(width, length), subrelation(width, length), [], [], 'Merge', 'UNITS OF MEASURE', 3952, 'Anonymous', on).
mooCache(singleValued(width, 2), singleValued(width, 2), [], [], 'Merge', 'UNITS OF MEASURE', 3954, 'Anonymous', on).
mooCache(documentation(width, string('"BinaryPredicate that is used to state the measure   of an Object from side to side at its widest span."')), documentation(width, string('"BinaryPredicate that is used to state the measure   of an Object from side to side at its widest span."')), [], [], 'Merge', 'UNITS OF MEASURE', 3956, 'Anonymous', on).
mooCache(subrelation(diameter, width), subrelation(diameter, width), [], [], 'Merge', 'UNITS OF MEASURE', 3958, 'Anonymous', on).
mooCache(documentation(diameter, string('"BinaryPredicate that is used to state the   measure of a circular Object from side to side."')), documentation(diameter, string('"BinaryPredicate that is used to state the   measure of a circular Object from side to side."')), [], [], 'Merge', 'UNITS OF MEASURE', 3960, 'Anonymous', on).
mooCache(subrelation(height, length), subrelation(height, length), [], [], 'Merge', 'UNITS OF MEASURE', 3962, 'Anonymous', on).
mooCache(singleValued(height, 2), singleValued(height, 2), [], [], 'Merge', 'UNITS OF MEASURE', 3964, 'Anonymous', on).
mooCache(documentation(height, string('"BinaryPredicate that is used to state the measure   of an Object from its lowest point to its highest point."')), documentation(height, string('"BinaryPredicate that is used to state the measure   of an Object from its lowest point to its highest point."')), [], [], 'Merge', 'UNITS OF MEASURE', 3966, 'Anonymous', on).
mooCache(instance(distance, 'SpatialRelation'), instance(distance, 'SpatialRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3968, 'Anonymous', on).
mooCache(instance(distance, 'TernaryPredicate'), instance(distance, 'TernaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3970, 'Anonymous', on).
mooCache(domain(distance, 1, 'Physical'), domain(distance, 1, 'Physical'), [], [], 'Merge', 'UNITS OF MEASURE', 3972, 'Anonymous', on).
mooCache(domain(distance, 2, 'Physical'), domain(distance, 2, 'Physical'), [], [], 'Merge', 'UNITS OF MEASURE', 3974, 'Anonymous', on).
mooCache(domain(distance, 3, 'LengthMeasure'), domain(distance, 3, 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3976, 'Anonymous', on).
mooCache(singleValued(distance, 3), singleValued(distance, 3), [], [], 'Merge', 'UNITS OF MEASURE', 3978, 'Anonymous', on).
mooCache(documentation(distance, string('"(distance ?OBJ1 ?OBJ2 ?QUANT) means that the   shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT."')), documentation(distance, string('"(distance ?OBJ1 ?OBJ2 ?QUANT) means that the   shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT."')), [], [], 'Merge', 'UNITS OF MEASURE', 3980, 'Anonymous', on).
mooCache(instance(larger, 'BinaryPredicate'), instance(larger, 'BinaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3982, 'Anonymous', on).
mooCache(instance(larger, 'SpatialRelation'), instance(larger, 'SpatialRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3984, 'Anonymous', on).
mooCache(instance(larger, 'TransitiveRelation'), instance(larger, 'TransitiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3986, 'Anonymous', on).
mooCache(instance(larger, 'IrreflexiveRelation'), instance(larger, 'IrreflexiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3988, 'Anonymous', on).
mooCache(domain(larger, 1, 'Object'), domain(larger, 1, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 3990, 'Anonymous', on).
mooCache(domain(larger, 2, 'Object'), domain(larger, 2, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 3992, 'Anonymous', on).
mooCache(documentation(larger, string('"(larger ?OBJ1 ?OBJ2) simply means that ?OBJ1 is   larger, with respect to all LengthMeasures, than ?OBJ2."')), documentation(larger, string('"(larger ?OBJ1 ?OBJ2) simply means that ?OBJ1 is   larger, with respect to all LengthMeasures, than ?OBJ2."')), [], [], 'Merge', 'UNITS OF MEASURE', 3994, 'Anonymous', on).
mooCache(=>(larger(A, B), forall(C, forall(D, =>(and(measure(A, 'MeasureFn'(D, 'LengthMeasure')), measure(B, 'MeasureFn'(C, 'LengthMeasure'))), greaterThan(D, C))))), and(entails(and(not(greaterThan(D, C)), and(measure(A, 'MeasureFn'(D, 'LengthMeasure')), measure(B, 'MeasureFn'(C, 'LengthMeasure')))), not(larger(A, B))), and(entails(and(larger(A, B), and(measure(A, 'MeasureFn'(D, 'LengthMeasure')), measure(B, 'MeasureFn'(C, 'LengthMeasure')))), greaterThan(D, C)), and(entails(and(larger(A, B), and(not(greaterThan(D, C)), measure(B, 'MeasureFn'(C, 'LengthMeasure')))), not(measure(A, 'MeasureFn'(D, 'LengthMeasure')))), entails(and(larger(A, B), and(not(greaterThan(D, C)), measure(A, 'MeasureFn'(D, 'LengthMeasure')))), not(measure(B, 'MeasureFn'(C, 'LengthMeasure'))))))), [domainV(D, ['MeasureFn':1, greaterThan:1]), domainV(C, ['MeasureFn':1, greaterThan:2]), domainV(B, [larger:2, measure:1]), domainV(A, [larger:1, measure:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ1'=A, 'OBJ2'=B, 'QUANT1'=D, 'QUANT2'=C], 'Merge', 'UNITS OF MEASURE', 3996, 'Anonymous', on).
mooCache(instance(smaller, 'BinaryPredicate'), instance(smaller, 'BinaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3998, 'Anonymous', on).
mooCache(instance(smaller, 'SpatialRelation'), instance(smaller, 'SpatialRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 4000, 'Anonymous', on).
mooCache(instance(smaller, 'TransitiveRelation'), instance(smaller, 'TransitiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 4002, 'Anonymous', on).
mooCache(instance(smaller, 'IrreflexiveRelation'), instance(smaller, 'IrreflexiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 4004, 'Anonymous', on).
mooCache(domain(smaller, 1, 'Object'), domain(smaller, 1, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 4006, 'Anonymous', on).
mooCache(domain(smaller, 2, 'Object'), domain(smaller, 2, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 4008, 'Anonymous', on).
mooCache(inverse(smaller, larger), inverse(smaller, larger), [], [], 'Merge', 'UNITS OF MEASURE', 4010, 'Anonymous', on).
mooCache(documentation(smaller, string('"(smaller ?OBJ1 ?OBJ2) simply means that ?OBJ1   is smaller, with respect to all LengthMeasures, than ?OBJ2."')), documentation(smaller, string('"(smaller ?OBJ1 ?OBJ2) simply means that ?OBJ1   is smaller, with respect to all LengthMeasures, than ?OBJ2."')), [], [], 'Merge', 'UNITS OF MEASURE', 4012, 'Anonymous', on).
mooCache(subrelation(monetaryValue, measure), subrelation(monetaryValue, measure), [], [], 'Merge', 'UNITS OF MEASURE', 4014, 'Anonymous', on).
mooCache(domain(monetaryValue, 2, 'CurrencyMeasure'), domain(monetaryValue, 2, 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 4016, 'Anonymous', on).
mooCache(singleValued(monetaryValue, 2), singleValued(monetaryValue, 2), [], [], 'Merge', 'UNITS OF MEASURE', 4018, 'Anonymous', on).
mooCache(documentation(monetaryValue, string('"A BinaryPredicate that associates an   Object with its value expressed as an instance of CurrencyMeasure."')), documentation(monetaryValue, string('"A BinaryPredicate that associates an   Object with its value expressed as an instance of CurrencyMeasure."')), [], [], 'Merge', 'UNITS OF MEASURE', 4020, 'Anonymous', on).
mooCache(instance('WealthFn', 'UnaryFunction'), instance('WealthFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 4022, 'Anonymous', on).
mooCache(domain('WealthFn', 1, 'Agent'), domain('WealthFn', 1, 'Agent'), [], [], 'Merge', 'UNITS OF MEASURE', 4024, 'Anonymous', on).
mooCache(range('WealthFn', 'CurrencyMeasure'), range('WealthFn', 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 4026, 'Anonymous', on).
mooCache(documentation('WealthFn', string('"A UnaryFunction that maps an Agent to a CurrencyMeasure specifying the value of the property owned by the Agent.  Note that this Function is generally used in conjunction with the Function PropertyFn, e.g. (WealthFn (PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates\' holdings."')), documentation('WealthFn', string('"A UnaryFunction that maps an Agent to a CurrencyMeasure specifying the value of the property owned by the Agent.  Note that this Function is generally used in conjunction with the Function PropertyFn, e.g. (WealthFn (PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates\' holdings."')), [], [], 'Merge', 'UNITS OF MEASURE', 4028, 'Anonymous', on).
mooCache(<=>(equal('WealthFn'(A), B), monetaryValue('PropertyFn'(A), B)), and(and(entails(holds('WealthFn', A, B), monetaryValue('PropertyFn'(A), B)), entails(not(monetaryValue('PropertyFn'(A), B)), not(holds('WealthFn', A, B)))), and(entails(monetaryValue('PropertyFn'(A), B), holds('WealthFn', A, B)), entails(not(holds('WealthFn', A, B)), not(monetaryValue('PropertyFn'(A), B))))), [domainV(B, ['WealthFn':2, monetaryValue:2]), domainV(A, ['PropertyFn':1, 'WealthFn':1]), domainV(C, []), forall(A), forall(B)], ['PERSON'=A, 'AMOUNT'=B], 'Merge', 'UNITS OF MEASURE', 4030, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4042, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4045, 'Anonymous', on).
mooCache(instance('PositiveInfinity', 'TimePoint'), instance('PositiveInfinity', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4060, 'Anonymous', on).
mooCache(documentation('PositiveInfinity', string('"The TimePoint that is after   all other TimePoints."')), documentation('PositiveInfinity', string('"The TimePoint that is after   all other TimePoints."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4062, 'Anonymous', on).
mooCache(=>(and(instance(A, 'TimePoint'), not(equal(A, 'PositiveInfinity'))), before(A, 'PositiveInfinity')), and(entails(and(instance(A, 'TimePoint'), not(equal('PositiveInfinity', A))), before(A, 'PositiveInfinity')), and(entails(and(not(before(A, 'PositiveInfinity')), not(equal('PositiveInfinity', A))), not(instance(A, 'TimePoint'))), entails(and(not(before(A, 'PositiveInfinity')), instance(A, 'TimePoint')), equal('PositiveInfinity', A)))), [domainV(A, ['$instanceof':'TimePoint', before:1]), domainV(B, []), forall(A)], ['POINT'=A], 'Merge', 'TEMPORAL CONCEPTS', 4064, 'Anonymous', on).
mooCache(=>(and(instance(A, 'TimePoint'), not(equal(A, 'PositiveInfinity'))), exists(B, temporallyBetween(A, B, 'PositiveInfinity'))), and(entails(and(and(instance(A, 'TimePoint'), not(equal('PositiveInfinity', A))), '$existential'(B, '?OTHERPOINT', temporallyBetween(A, '?OTHERPOINT', 'PositiveInfinity'))), temporallyBetween(A, B, 'PositiveInfinity')), and(entails(and(not(temporallyBetween(A, B, 'PositiveInfinity')), not(equal('PositiveInfinity', A))), not(instance(A, 'TimePoint'))), entails(and(not(temporallyBetween(A, B, 'PositiveInfinity')), instance(A, 'TimePoint')), equal('PositiveInfinity', A)))), [domainV(B, [temporallyBetween:2]), domainV(A, ['$instanceof':'TimePoint', temporallyBetween:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OTHERPOINT', temporallyBetween(A, '?OTHERPOINT', 'PositiveInfinity')))], ['POINT'=A, 'OTHERPOINT'=B], 'Merge', 'TEMPORAL CONCEPTS', 4066, 'Anonymous', on).
mooCache(instance('NegativeInfinity', 'TimePoint'), instance('NegativeInfinity', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4068, 'Anonymous', on).
mooCache(documentation('NegativeInfinity', string('"The TimePoint that is before   all other TimePoints."')), documentation('NegativeInfinity', string('"The TimePoint that is before   all other TimePoints."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4070, 'Anonymous', on).
mooCache(=>(and(instance(A, 'TimePoint'), not(equal(A, 'NegativeInfinity'))), before('NegativeInfinity', A)), and(entails(and(instance(A, 'TimePoint'), not(equal('NegativeInfinity', A))), before('NegativeInfinity', A)), and(entails(and(not(before('NegativeInfinity', A)), not(equal('NegativeInfinity', A))), not(instance(A, 'TimePoint'))), entails(and(not(before('NegativeInfinity', A)), instance(A, 'TimePoint')), equal('NegativeInfinity', A)))), [domainV(A, ['$instanceof':'TimePoint', before:2]), domainV(B, []), forall(A)], ['POINT'=A], 'Merge', 'TEMPORAL CONCEPTS', 4072, 'Anonymous', on).
mooCache(=>(and(instance(A, 'TimePoint'), not(equal(A, 'NegativeInfinity'))), exists(B, temporallyBetween('NegativeInfinity', B, A))), and(entails(and(and(instance(A, 'TimePoint'), not(equal('NegativeInfinity', A))), '$existential'(B, '?OTHERPOINT', temporallyBetween('NegativeInfinity', '?OTHERPOINT', A))), temporallyBetween('NegativeInfinity', B, A)), and(entails(and(not(temporallyBetween('NegativeInfinity', B, A)), not(equal('NegativeInfinity', A))), not(instance(A, 'TimePoint'))), entails(and(not(temporallyBetween('NegativeInfinity', B, A)), instance(A, 'TimePoint')), equal('NegativeInfinity', A)))), [domainV(B, [temporallyBetween:2]), domainV(A, ['$instanceof':'TimePoint', temporallyBetween:3]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OTHERPOINT', temporallyBetween('NegativeInfinity', '?OTHERPOINT', A)))], ['POINT'=A, 'OTHERPOINT'=B], 'Merge', 'TEMPORAL CONCEPTS', 4074, 'Anonymous', on).
mooCache(instance(duration, 'BinaryPredicate'), instance(duration, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4076, 'Anonymous', on).
mooCache(instance(duration, 'AsymmetricRelation'), instance(duration, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4078, 'Anonymous', on).
mooCache(domain(duration, 1, 'TimePosition'), domain(duration, 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4080, 'Anonymous', on).
mooCache(domain(duration, 2, 'TimeDuration'), domain(duration, 2, 'TimeDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4082, 'Anonymous', on).
mooCache(documentation(duration, string('"(duration ?POS ?TIME) means that the   duration of the TimePosition ?POS is ?TIME.  Note that this   Predicate can be used in conjunction with the Function WhenFn   to specify the duration of any instance of Physical."')), documentation(duration, string('"(duration ?POS ?TIME) means that the   duration of the TimePosition ?POS is ?TIME.  Note that this   Predicate can be used in conjunction with the Function WhenFn   to specify the duration of any instance of Physical."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4084, 'Anonymous', on).
mooCache(=>(instance(A, 'TimeInterval'), exists(B, duration(A, B))), and(entails(not(duration(A, B)), not(instance(A, 'TimeInterval'))), entails(and(instance(A, 'TimeInterval'), '$existential'(B, '?DURATION', duration(A, '?DURATION'))), duration(A, B))), [domainV(B, [duration:2]), domainV(A, ['$instanceof':'TimeInterval', duration:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?DURATION', duration(A, '?DURATION')))], ['INTERVAL'=A, 'DURATION'=B], 'Merge', 'TEMPORAL CONCEPTS', 4086, 'Anonymous', on).
mooCache(=>(instance(A, 'TimePoint'), not(exists(B, duration(A, B)))), and(entails(duration(A, B), not(instance(A, 'TimePoint'))), entails(instance(A, 'TimePoint'), not(duration(A, B)))), [domainV(B, [duration:2]), domainV(A, ['$instanceof':'TimePoint', duration:1]), domainV(C, []), forall(A), forall(B), forall(B)], ['POINT'=A, 'DURATION'=B], 'Merge', 'TEMPORAL CONCEPTS', 4088, 'Anonymous', on).
mooCache(instance(frequency, 'BinaryPredicate'), instance(frequency, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4090, 'Anonymous', on).
mooCache(instance(frequency, 'AsymmetricRelation'), instance(frequency, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4092, 'Anonymous', on).
mooCache(domainSubclass(frequency, 1, 'Process'), domainSubclass(frequency, 1, 'Process'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4094, 'Anonymous', on).
mooCache(domain(frequency, 2, 'TimeDuration'), domain(frequency, 2, 'TimeDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4096, 'Anonymous', on).
mooCache(documentation(frequency, string('"(frequency ?PROC ?TIME) means that the   Process type of ?PROC recurs after every interval of ?TIME."')), documentation(frequency, string('"(frequency ?PROC ?TIME) means that the   Process type of ?PROC recurs after every interval of ?TIME."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4098, 'Anonymous', on).
mooCache(=>(frequency(A, B), forall(C, =>(duration(C, B), exists(D, and(temporalPart(D, C), holdsDuring(D, exists(E, instance(E, A)))))))), and(and(entails(and(duration(C, B), not(temporalPart(D, C))), not(frequency(A, B))), and(entails(and(frequency(A, B), not(temporalPart(D, C))), not(duration(C, B))), entails(and(and(and(frequency(A, B), duration(C, B)), '$existential'(D, '?POSITION', and(temporalPart('?POSITION', C), exists(E, holdsDuring('?POSITION', instance(E, A)))))), '$existential'(E, '?INST', holdsDuring(D, instance('?INST', A)))), temporalPart(D, C)))), and(entails(and(duration(C, B), not(holdsDuring(D, instance(E, A)))), not(frequency(A, B))), and(entails(and(frequency(A, B), not(holdsDuring(D, instance(E, A)))), not(duration(C, B))), entails(and(and(and(frequency(A, B), duration(C, B)), '$existential'(D, '?POSITION', and(temporalPart('?POSITION', C), exists(E, holdsDuring('?POSITION', instance(E, A)))))), '$existential'(E, '?INST', holdsDuring(D, instance('?INST', A)))), holdsDuring(D, instance(E, A)))))), [domainV(E, []), domainV(D, [holdsDuring:1, temporalPart:1]), domainV(C, [duration:1, temporalPart:2]), domainV(B, [duration:2, frequency:2]), domainV(A, [frequency:1, instance:2]), domainV(F, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?POSITION', and(temporalPart('?POSITION', C), exists(E, holdsDuring('?POSITION', instance(E, A)))))), replaceConsVar(E, '$existential'('?INST', holdsDuring(D, instance('?INST', A))))], ['PROC'=A, 'TIME1'=B, 'TIME2'=C, 'POSITION'=D, 'INST'=E], 'Merge', 'TEMPORAL CONCEPTS', 4100, 'Anonymous', on).
mooCache(instance(temporalPart, 'BinaryPredicate'), instance(temporalPart, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4102, 'Anonymous', on).
mooCache(instance(temporalPart, 'AsymmetricRelation'), instance(temporalPart, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4104, 'Anonymous', on).
mooCache(domain(temporalPart, 1, 'TimePosition'), domain(temporalPart, 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4106, 'Anonymous', on).
mooCache(domain(temporalPart, 2, 'TimePosition'), domain(temporalPart, 2, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4108, 'Anonymous', on).
mooCache(documentation(temporalPart, string('"(temporalPart ?POS1 ?POS2)   means that TimePosition ?POS1 is part of TimePosition ?POS2."')), documentation(temporalPart, string('"(temporalPart ?POS1 ?POS2)   means that TimePosition ?POS1 is part of TimePosition ?POS2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4110, 'Anonymous', on).
mooCache(=>(instance(A, 'TimePoint'), exists(B, and(instance(B, 'TimeInterval'), temporalPart(A, B)))), and(and(entails(not(instance(B, 'TimeInterval')), not(instance(A, 'TimePoint'))), entails(and(instance(A, 'TimePoint'), '$existential'(B, '?INTERVAL', and(instance('?INTERVAL', 'TimeInterval'), temporalPart(A, '?INTERVAL')))), instance(B, 'TimeInterval'))), and(entails(not(temporalPart(A, B)), not(instance(A, 'TimePoint'))), entails(and(instance(A, 'TimePoint'), '$existential'(B, '?INTERVAL', and(instance('?INTERVAL', 'TimeInterval'), temporalPart(A, '?INTERVAL')))), temporalPart(A, B)))), [domainV(B, ['$instanceof':'TimeInterval', temporalPart:2]), domainV(A, ['$instanceof':'TimePoint', temporalPart:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?INTERVAL', and(instance('?INTERVAL', 'TimeInterval'), temporalPart(A, '?INTERVAL'))))], ['POINT'=A, 'INTERVAL'=B], 'Merge', 'TEMPORAL CONCEPTS', 4112, 'Anonymous', on).
mooCache(=>(and(holdsDuring(A, B), temporalPart(C, A)), holdsDuring(C, B)), and(entails(and(holdsDuring(A, B), temporalPart(C, A)), holdsDuring(C, B)), and(entails(and(not(holdsDuring(C, B)), temporalPart(C, A)), not(holdsDuring(A, B))), entails(and(not(holdsDuring(C, B)), holdsDuring(A, B)), not(temporalPart(C, A))))), [domainV(C, [holdsDuring:1, temporalPart:1]), domainV(B, [holdsDuring:2]), domainV(A, [holdsDuring:1, temporalPart:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['TIME1'=A, 'SITUATION'=B, 'TIME2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4114, 'Anonymous', on).
mooCache(=>(and(holdsDuring(A, holds(B, C, D)), and(instance(C, 'Physical'), instance(D, 'Physical'))), and(time(C, A), time(D, A))), and(and(entails(and(holdsDuring(A, holds(B, C, D)), and(instance(C, 'Physical'), instance(D, 'Physical'))), time(C, A)), and(entails(and(not(time(C, A)), and(instance(C, 'Physical'), instance(D, 'Physical'))), not(holdsDuring(A, holds(B, C, D)))), and(entails(and(not(time(C, A)), and(holdsDuring(A, holds(B, C, D)), instance(D, 'Physical'))), not(instance(C, 'Physical'))), entails(and(not(time(C, A)), and(holdsDuring(A, holds(B, C, D)), instance(C, 'Physical'))), not(instance(D, 'Physical')))))), and(entails(and(holdsDuring(A, holds(B, C, D)), and(instance(C, 'Physical'), instance(D, 'Physical'))), time(D, A)), and(entails(and(not(time(D, A)), and(instance(C, 'Physical'), instance(D, 'Physical'))), not(holdsDuring(A, holds(B, C, D)))), and(entails(and(not(time(D, A)), and(holdsDuring(A, holds(B, C, D)), instance(D, 'Physical'))), not(instance(C, 'Physical'))), entails(and(not(time(D, A)), and(holdsDuring(A, holds(B, C, D)), instance(C, 'Physical'))), not(instance(D, 'Physical'))))))), [domainV(D, ['$instanceof':'Physical', time:1, B:2]), domainV(C, ['$instanceof':'Physical', time:1, B:1]), domainV(B, [holds:1]), domainV(A, [holdsDuring:1, time:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['INTERVAL'=A, 'REL'=B, 'INST1'=C, 'INST2'=D], 'Merge', 'TEMPORAL CONCEPTS', 4116, 'Anonymous', on).
mooCache(<=>(temporalPart(A, 'WhenFn'(B)), time(B, A)), and(and(entails(temporalPart(A, 'WhenFn'(B)), time(B, A)), entails(not(time(B, A)), not(temporalPart(A, 'WhenFn'(B))))), and(entails(time(B, A), temporalPart(A, 'WhenFn'(B))), entails(not(temporalPart(A, 'WhenFn'(B))), not(time(B, A))))), [domainV(B, ['WhenFn':1, time:1]), domainV(A, [temporalPart:1, time:2]), domainV(C, []), forall(A), forall(B)], ['POS'=A, 'THING'=B], 'Merge', 'TEMPORAL CONCEPTS', 4118, 'Anonymous', on).
mooCache(instance('BeginFn', 'TemporalRelation'), instance('BeginFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4120, 'Anonymous', on).
mooCache(instance('BeginFn', 'UnaryFunction'), instance('BeginFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4122, 'Anonymous', on).
mooCache(domain('BeginFn', 1, 'TimeInterval'), domain('BeginFn', 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4124, 'Anonymous', on).
mooCache(range('BeginFn', 'TimePoint'), range('BeginFn', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4126, 'Anonymous', on).
mooCache(documentation('BeginFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval begins."')), documentation('BeginFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval begins."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4128, 'Anonymous', on).
mooCache(=>(equal('BeginFn'(A), B), forall(C, =>(and(temporalPart(C, A), not(equal(C, B))), before(B, C)))), and(entails(and(not(before(B, C)), and(temporalPart(C, A), not(equal(C, B)))), not(holds('BeginFn', A, B))), and(entails(and(holds('BeginFn', A, B), and(temporalPart(C, A), not(equal(C, B)))), before(B, C)), and(entails(and(holds('BeginFn', A, B), and(not(before(B, C)), not(equal(C, B)))), not(temporalPart(C, A))), entails(and(holds('BeginFn', A, B), and(not(before(B, C)), temporalPart(C, A))), equal(C, B))))), [domainV(C, [before:2, temporalPart:1]), domainV(B, ['BeginFn':2, before:1]), domainV(A, ['BeginFn':1, temporalPart:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['INTERVAL'=A, 'POINT'=B, 'OTHERPOINT'=C], 'Merge', 'TEMPORAL CONCEPTS', 4130, 'Anonymous', on).
mooCache(=>(origin(A, B), located('WhereFn'(A, 'BeginFn'('WhenFn'(A))), 'WhereFn'(B, 'BeginFn'('WhenFn'(B))))), and(entails(not(located('WhereFn'(A, 'BeginFn'('WhenFn'(A))), 'WhereFn'(B, 'BeginFn'('WhenFn'(B))))), not(origin(A, B))), entails(origin(A, B), located('WhereFn'(A, 'BeginFn'('WhenFn'(A))), 'WhereFn'(B, 'BeginFn'('WhenFn'(B)))))), [domainV(B, ['WhenFn':1, 'WhereFn':1, origin:2]), domainV(A, ['WhenFn':1, 'WhereFn':1, origin:1]), domainV(C, []), forall(A), forall(B)], ['PROCESS'=A, 'OBJ'=B], 'Merge', 'TEMPORAL CONCEPTS', 4132, 'Anonymous', on).
mooCache(instance('EndFn', 'TemporalRelation'), instance('EndFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4134, 'Anonymous', on).
mooCache(instance('EndFn', 'UnaryFunction'), instance('EndFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4136, 'Anonymous', on).
mooCache(domain('EndFn', 1, 'TimeInterval'), domain('EndFn', 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4138, 'Anonymous', on).
mooCache(range('EndFn', 'TimePoint'), range('EndFn', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4140, 'Anonymous', on).
mooCache(documentation('EndFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval ends."')), documentation('EndFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval ends."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4142, 'Anonymous', on).
mooCache(=>(equal('EndFn'(A), B), forall(C, =>(and(temporalPart(C, A), not(equal(C, B))), before(C, B)))), and(entails(and(not(before(C, B)), and(temporalPart(C, A), not(equal(C, B)))), not(holds('EndFn', A, B))), and(entails(and(holds('EndFn', A, B), and(temporalPart(C, A), not(equal(C, B)))), before(C, B)), and(entails(and(holds('EndFn', A, B), and(not(before(C, B)), not(equal(C, B)))), not(temporalPart(C, A))), entails(and(holds('EndFn', A, B), and(not(before(C, B)), temporalPart(C, A))), equal(C, B))))), [domainV(C, [before:1, temporalPart:1]), domainV(B, ['EndFn':2, before:2]), domainV(A, ['EndFn':1, temporalPart:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['INTERVAL'=A, 'POINT'=B, 'OTHERPOINT'=C], 'Merge', 'TEMPORAL CONCEPTS', 4144, 'Anonymous', on).
mooCache(instance(starts, 'BinaryPredicate'), instance(starts, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4146, 'Anonymous', on).
mooCache(instance(starts, 'TemporalRelation'), instance(starts, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4148, 'Anonymous', on).
mooCache(instance(starts, 'TransitiveRelation'), instance(starts, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4150, 'Anonymous', on).
mooCache(instance(starts, 'IrreflexiveRelation'), instance(starts, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4152, 'Anonymous', on).
mooCache(domain(starts, 1, 'TimeInterval'), domain(starts, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4154, 'Anonymous', on).
mooCache(domain(starts, 2, 'TimeInterval'), domain(starts, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4156, 'Anonymous', on).
mooCache(documentation(starts, string('"(starts ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   initial TimePoint and that ?INTERVAL1 ends before ?INTERVAL2."')), documentation(starts, string('"(starts ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   initial TimePoint and that ?INTERVAL1 ends before ?INTERVAL2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4158, 'Anonymous', on).
mooCache(<=>(starts(A, B), and(equal('BeginFn'(A), 'BeginFn'(B)), before('EndFn'(A), 'EndFn'(B)))), and(and(entails(starts(A, B), equal('BeginFn'(A), 'BeginFn'(B))), and(entails(starts(A, B), before('EndFn'(A), 'EndFn'(B))), entails(or(not(equal('BeginFn'(A), 'BeginFn'(B))), not(before('EndFn'(A), 'EndFn'(B)))), not(starts(A, B))))), and(entails(and(equal('BeginFn'(A), 'BeginFn'(B)), before('EndFn'(A), 'EndFn'(B))), starts(A, B)), and(entails(and(not(starts(A, B)), before('EndFn'(A), 'EndFn'(B))), not(equal('BeginFn'(A), 'BeginFn'(B)))), entails(and(not(starts(A, B)), equal('BeginFn'(A), 'BeginFn'(B))), not(before('EndFn'(A), 'EndFn'(B))))))), [domainV(B, ['BeginFn':1, 'EndFn':1, starts:2]), domainV(A, ['BeginFn':1, 'EndFn':1, starts:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4160, 'Anonymous', on).
mooCache(instance(finishes, 'BinaryPredicate'), instance(finishes, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4162, 'Anonymous', on).
mooCache(instance(finishes, 'TemporalRelation'), instance(finishes, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4164, 'Anonymous', on).
mooCache(instance(finishes, 'TransitiveRelation'), instance(finishes, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4166, 'Anonymous', on).
mooCache(instance(finishes, 'IrreflexiveRelation'), instance(finishes, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4168, 'Anonymous', on).
mooCache(domain(finishes, 1, 'TimeInterval'), domain(finishes, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4170, 'Anonymous', on).
mooCache(domain(finishes, 2, 'TimeInterval'), domain(finishes, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4172, 'Anonymous', on).
mooCache(documentation(finishes, string('"(finishes ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   ending TimePoint and that ?INTERVAL2 begins before ?INTERVAL1."')), documentation(finishes, string('"(finishes ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   ending TimePoint and that ?INTERVAL2 begins before ?INTERVAL1."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4174, 'Anonymous', on).
mooCache(<=>(finishes(A, B), and(before('BeginFn'(B), 'BeginFn'(A)), equal('EndFn'(B), 'EndFn'(A)))), and(and(entails(finishes(A, B), before('BeginFn'(B), 'BeginFn'(A))), and(entails(finishes(A, B), equal('EndFn'(B), 'EndFn'(A))), entails(or(not(before('BeginFn'(B), 'BeginFn'(A))), not(equal('EndFn'(B), 'EndFn'(A)))), not(finishes(A, B))))), and(entails(and(before('BeginFn'(B), 'BeginFn'(A)), equal('EndFn'(B), 'EndFn'(A))), finishes(A, B)), and(entails(and(not(finishes(A, B)), equal('EndFn'(B), 'EndFn'(A))), not(before('BeginFn'(B), 'BeginFn'(A)))), entails(and(not(finishes(A, B)), before('BeginFn'(B), 'BeginFn'(A))), not(equal('EndFn'(B), 'EndFn'(A))))))), [domainV(B, ['BeginFn':1, 'EndFn':1, finishes:2]), domainV(A, ['BeginFn':1, 'EndFn':1, finishes:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4176, 'Anonymous', on).
mooCache(instance(before, 'TemporalRelation'), instance(before, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4178, 'Anonymous', on).
mooCache(instance(before, 'IrreflexiveRelation'), instance(before, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4180, 'Anonymous', on).
mooCache(instance(before, 'TransitiveRelation'), instance(before, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4182, 'Anonymous', on).
mooCache(subrelation(before, beforeOrEqual), subrelation(before, beforeOrEqual), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4184, 'Anonymous', on).
mooCache(domain(before, 1, 'TimePoint'), domain(before, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4186, 'Anonymous', on).
mooCache(domain(before, 2, 'TimePoint'), domain(before, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4188, 'Anonymous', on).
mooCache(documentation(before, string('"(before ?POINT1 ?POINT2) means that ?POINT1   precedes ?POINT2 on the universal timeline."')), documentation(before, string('"(before ?POINT1 ?POINT2) means that ?POINT1   precedes ?POINT2 on the universal timeline."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4190, 'Anonymous', on).
mooCache(=>(instance(A, 'Object'), exists(B, exists(C, and(instance(C, 'TimePoint'), and(instance(B, 'TimePoint'), and(before(C, B), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, B)), time(A, D))))))))), and(and(entails(not(instance(C, 'TimePoint')), not(instance(A, 'Object'))), entails(and(instance(A, 'Object'), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), instance(C, 'TimePoint'))), and(and(entails(not(instance(B, 'TimePoint')), not(instance(A, 'Object'))), entails(and(and(instance(A, 'Object'), '$existential'(B, '?TIME2', exists(C, and(instance(C, 'TimePoint'), and(instance('?TIME2', 'TimePoint'), and(before(C, '?TIME2'), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, '?TIME2')), time(A, D))))))))), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), instance(B, 'TimePoint'))), and(and(entails(not(before(C, B)), not(instance(A, 'Object'))), entails(and(and(instance(A, 'Object'), '$existential'(B, '?TIME2', exists(C, and(instance(C, 'TimePoint'), and(instance('?TIME2', 'TimePoint'), and(before(C, '?TIME2'), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, '?TIME2')), time(A, D))))))))), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), before(C, B))), and(entails(and(not(time(A, D)), and(beforeOrEqual(C, D), beforeOrEqual(D, B))), not(instance(A, 'Object'))), and(entails(and(and(instance(A, 'Object'), and(beforeOrEqual(C, D), beforeOrEqual(D, B))), '$existential'(C, '?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), time(A, D)), and(entails(and(instance(A, 'Object'), and(not(time(A, D)), beforeOrEqual(D, B))), not(beforeOrEqual(C, D))), entails(and(instance(A, 'Object'), and(not(time(A, D)), beforeOrEqual(C, D))), not(beforeOrEqual(D, B))))))))), [domainV(D, [beforeOrEqual:1, beforeOrEqual:2, time:2]), domainV(C, ['$instanceof':'TimePoint', before:1, beforeOrEqual:1]), domainV(B, ['$instanceof':'TimePoint', before:2, beforeOrEqual:2]), domainV(A, ['$instanceof':'Object', time:1]), domainV(E, []), forall(A), replaceConsVar(B, '$existential'('?TIME2', exists(C, and(instance(C, 'TimePoint'), and(instance('?TIME2', 'TimePoint'), and(before(C, '?TIME2'), forall(D, =>(and(beforeOrEqual(C, D), beforeOrEqual(D, '?TIME2')), time(A, D))))))))), replaceConsVar(C, '$existential'('?TIME1', and(instance('?TIME1', 'TimePoint'), and(instance(B, 'TimePoint'), and(before('?TIME1', B), forall(D, =>(and(beforeOrEqual('?TIME1', D), beforeOrEqual(D, B)), time(A, D)))))))), forall(D)], ['OBJ'=A, 'TIME1'=C, 'TIME2'=B, 'TIME'=D], 'Merge', 'TEMPORAL CONCEPTS', 4196, 'Anonymous', on).
mooCache(=>(result(A, B), forall(C, =>(before(C, 'BeginFn'('WhenFn'(A))), not(time(B, C))))), and(entails(and(before(C, 'BeginFn'('WhenFn'(A))), time(B, C)), not(result(A, B))), and(entails(and(result(A, B), time(B, C)), not(before(C, 'BeginFn'('WhenFn'(A))))), entails(and(result(A, B), before(C, 'BeginFn'('WhenFn'(A)))), not(time(B, C))))), [domainV(C, [before:1, time:2]), domainV(B, [result:2, time:1]), domainV(A, ['WhenFn':1, result:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PROC'=A, 'OBJ'=B, 'TIME'=C], 'Merge', 'TEMPORAL CONCEPTS', 4198, 'Anonymous', on).
mooCache(instance(beforeOrEqual, 'BinaryPredicate'), instance(beforeOrEqual, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4200, 'Anonymous', on).
mooCache(instance(beforeOrEqual, 'PartialOrderingRelation'), instance(beforeOrEqual, 'PartialOrderingRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4202, 'Anonymous', on).
mooCache(domain(beforeOrEqual, 1, 'TimePoint'), domain(beforeOrEqual, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4204, 'Anonymous', on).
mooCache(domain(beforeOrEqual, 2, 'TimePoint'), domain(beforeOrEqual, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4206, 'Anonymous', on).
mooCache(documentation(beforeOrEqual, string('"(beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1   is identical with ?POINT2 or occurs before it on the universal timeline."')), documentation(beforeOrEqual, string('"(beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1   is identical with ?POINT2 or occurs before it on the universal timeline."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4208, 'Anonymous', on).
mooCache(=>(beforeOrEqual(A, B), or(before(A, B), equal(A, B))), and(entails(and(not(before(A, B)), not(equal(A, B))), not(beforeOrEqual(A, B))), and(entails(and(beforeOrEqual(A, B), not(equal(A, B))), before(A, B)), entails(and(beforeOrEqual(A, B), not(before(A, B))), equal(A, B)))), [domainV(B, [before:2, beforeOrEqual:2]), domainV(A, [before:1, beforeOrEqual:1]), domainV(C, []), forall(A), forall(B)], ['POINT1'=A, 'POINT2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4210, 'Anonymous', on).
mooCache(instance(temporallyBetween, 'TemporalRelation'), instance(temporallyBetween, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4212, 'Anonymous', on).
mooCache(instance(temporallyBetween, 'TernaryPredicate'), instance(temporallyBetween, 'TernaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4214, 'Anonymous', on).
mooCache(subrelation(temporallyBetween, temporallyBetweenOrEqual), subrelation(temporallyBetween, temporallyBetweenOrEqual), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4216, 'Anonymous', on).
mooCache(domain(temporallyBetween, 1, 'TimePoint'), domain(temporallyBetween, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4218, 'Anonymous', on).
mooCache(domain(temporallyBetween, 2, 'TimePoint'), domain(temporallyBetween, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4220, 'Anonymous', on).
mooCache(domain(temporallyBetween, 3, 'TimePoint'), domain(temporallyBetween, 3, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4222, 'Anonymous', on).
mooCache(documentation(temporallyBetween, string('"(temporallyBetween ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT2 is between the TimePoints   ?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before   ?POINT3."')), documentation(temporallyBetween, string('"(temporallyBetween ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT2 is between the TimePoints   ?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before   ?POINT3."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4224, 'Anonymous', on).
mooCache(<=>(temporallyBetween(A, B, C), and(before(A, B), before(B, C))), and(and(entails(temporallyBetween(A, B, C), before(A, B)), and(entails(temporallyBetween(A, B, C), before(B, C)), entails(or(not(before(A, B)), not(before(B, C))), not(temporallyBetween(A, B, C))))), and(entails(and(before(A, B), before(B, C)), temporallyBetween(A, B, C)), and(entails(and(not(temporallyBetween(A, B, C)), before(B, C)), not(before(A, B))), entails(and(not(temporallyBetween(A, B, C)), before(A, B)), not(before(B, C)))))), [domainV(C, [before:2, temporallyBetween:3]), domainV(B, [before:1, before:2, temporallyBetween:2]), domainV(A, [before:1, temporallyBetween:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['POINT1'=A, 'POINT2'=B, 'POINT3'=C], 'Merge', 'TEMPORAL CONCEPTS', 4226, 'Anonymous', on).
mooCache(instance(temporallyBetweenOrEqual, 'TemporalRelation'), instance(temporallyBetweenOrEqual, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4228, 'Anonymous', on).
mooCache(instance(temporallyBetweenOrEqual, 'TernaryPredicate'), instance(temporallyBetweenOrEqual, 'TernaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4230, 'Anonymous', on).
mooCache(domain(temporallyBetweenOrEqual, 1, 'TimePoint'), domain(temporallyBetweenOrEqual, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4232, 'Anonymous', on).
mooCache(domain(temporallyBetweenOrEqual, 2, 'TimePoint'), domain(temporallyBetweenOrEqual, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4234, 'Anonymous', on).
mooCache(domain(temporallyBetweenOrEqual, 3, 'TimePoint'), domain(temporallyBetweenOrEqual, 3, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4236, 'Anonymous', on).
mooCache(documentation(temporallyBetweenOrEqual, string('"(temporallyBetweenOrEqual ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT1 is before or equal to the   TimePoint ?POINT2 and ?POINT2 is before or equal to the TimePoint   ?POINT3."')), documentation(temporallyBetweenOrEqual, string('"(temporallyBetweenOrEqual ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT1 is before or equal to the   TimePoint ?POINT2 and ?POINT2 is before or equal to the TimePoint   ?POINT3."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4238, 'Anonymous', on).
mooCache(<=>(temporallyBetweenOrEqual(A, B, C), and(beforeOrEqual(A, B), beforeOrEqual(B, C))), and(and(entails(temporallyBetweenOrEqual(A, B, C), beforeOrEqual(A, B)), and(entails(temporallyBetweenOrEqual(A, B, C), beforeOrEqual(B, C)), entails(or(not(beforeOrEqual(A, B)), not(beforeOrEqual(B, C))), not(temporallyBetweenOrEqual(A, B, C))))), and(entails(and(beforeOrEqual(A, B), beforeOrEqual(B, C)), temporallyBetweenOrEqual(A, B, C)), and(entails(and(not(temporallyBetweenOrEqual(A, B, C)), beforeOrEqual(B, C)), not(beforeOrEqual(A, B))), entails(and(not(temporallyBetweenOrEqual(A, B, C)), beforeOrEqual(A, B)), not(beforeOrEqual(B, C)))))), [domainV(C, [beforeOrEqual:2, temporallyBetweenOrEqual:3]), domainV(B, [beforeOrEqual:1, beforeOrEqual:2, temporallyBetweenOrEqual:2]), domainV(A, [beforeOrEqual:1, temporallyBetweenOrEqual:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['POINT1'=A, 'POINT2'=B, 'POINT3'=C], 'Merge', 'TEMPORAL CONCEPTS', 4240, 'Anonymous', on).
mooCache(<=>(and(time(A, B), instance(B, 'TimePoint')), temporallyBetweenOrEqual('BeginFn'('WhenFn'(A)), B, 'EndFn'('WhenFn'(A)))), and(and(entails(and(time(A, B), instance(B, 'TimePoint')), temporallyBetweenOrEqual('BeginFn'('WhenFn'(A)), B, 'EndFn'('WhenFn'(A)))), and(entails(and(not(temporallyBetweenOrEqual('BeginFn'('WhenFn'(A)), B, 'EndFn'('WhenFn'(A)))), instance(B, 'TimePoint')), not(time(A, B))), entails(and(not(temporallyBetweenOrEqual('BeginFn'('WhenFn'(A)), B, 'EndFn'('WhenFn'(A)))), time(A, B)), not(instance(B, 'TimePoint'))))), and(entails(temporallyBetweenOrEqual('BeginFn'('WhenFn'(A)), B, 'EndFn'('WhenFn'(A))), time(A, B)), and(entails(temporallyBetweenOrEqual('BeginFn'('WhenFn'(A)), B, 'EndFn'('WhenFn'(A))), instance(B, 'TimePoint')), entails(or(not(time(A, B)), not(instance(B, 'TimePoint'))), not(temporallyBetweenOrEqual('BeginFn'('WhenFn'(A)), B, 'EndFn'('WhenFn'(A)))))))), [domainV(B, ['$instanceof':'TimePoint', temporallyBetweenOrEqual:2, time:2]), domainV(A, ['WhenFn':1, time:1]), domainV(C, []), forall(A), forall(B)], ['PHYS'=A, 'TIME'=B], 'Merge', 'TEMPORAL CONCEPTS', 4242, 'Anonymous', on).
mooCache(instance(overlapsTemporally, 'BinaryPredicate'), instance(overlapsTemporally, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4244, 'Anonymous', on).
mooCache(instance(overlapsTemporally, 'TemporalRelation'), instance(overlapsTemporally, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4246, 'Anonymous', on).
mooCache(instance(overlapsTemporally, 'PartialOrderingRelation'), instance(overlapsTemporally, 'PartialOrderingRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4248, 'Anonymous', on).
mooCache(domain(overlapsTemporally, 1, 'TimeInterval'), domain(overlapsTemporally, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4250, 'Anonymous', on).
mooCache(domain(overlapsTemporally, 2, 'TimeInterval'), domain(overlapsTemporally, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4252, 'Anonymous', on).
mooCache(documentation(overlapsTemporally, string('"(overlapsTemporally ?INTERVAL1   ?INTERVAL2) means that the two TimeIntervals ?INTERVAL1 and ?INTERVAL2   have a TimeInterval in common.  Note that this is consistent with   ?INTERVAL1 and ?INTERVAL2 being the same TimeInterval."')), documentation(overlapsTemporally, string('"(overlapsTemporally ?INTERVAL1   ?INTERVAL2) means that the two TimeIntervals ?INTERVAL1 and ?INTERVAL2   have a TimeInterval in common.  Note that this is consistent with   ?INTERVAL1 and ?INTERVAL2 being the same TimeInterval."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4254, 'Anonymous', on).
mooCache(<=>(overlapsTemporally(A, B), or(equal(A, B), or(during(A, B), or(starts(A, B), finishes(A, B))))), and(and(entails(not(overlapsTemporally(A, B)), not(equal(A, B))), and(entails(not(overlapsTemporally(A, B)), not(during(A, B))), and(entails(not(overlapsTemporally(A, B)), not(starts(A, B))), and(entails(not(overlapsTemporally(A, B)), not(finishes(A, B))), entails(or(equal(A, B), or(during(A, B), or(starts(A, B), finishes(A, B)))), overlapsTemporally(A, B)))))), and(entails(and(not(equal(A, B)), and(not(during(A, B)), and(not(starts(A, B)), not(finishes(A, B))))), not(overlapsTemporally(A, B))), and(entails(and(overlapsTemporally(A, B), and(not(during(A, B)), and(not(starts(A, B)), not(finishes(A, B))))), equal(A, B)), and(entails(and(overlapsTemporally(A, B), and(not(equal(A, B)), and(not(starts(A, B)), not(finishes(A, B))))), during(A, B)), and(entails(and(overlapsTemporally(A, B), and(not(equal(A, B)), and(not(during(A, B)), not(finishes(A, B))))), starts(A, B)), entails(and(overlapsTemporally(A, B), and(not(equal(A, B)), and(not(during(A, B)), not(starts(A, B))))), finishes(A, B))))))), [domainV(B, [during:2, finishes:2, overlapsTemporally:2, starts:2]), domainV(A, [during:1, finishes:1, overlapsTemporally:1, starts:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4256, 'Anonymous', on).
mooCache(=>(and(instance(A, 'SpatialRelation'), holds(A, B, C)), overlapsTemporally('WhenFn'(B), 'WhenFn'(C))), and(entails(and(instance(A, 'SpatialRelation'), holds(A, B, C)), overlapsTemporally('WhenFn'(B), 'WhenFn'(C))), and(entails(and(not(overlapsTemporally('WhenFn'(B), 'WhenFn'(C))), holds(A, B, C)), not(instance(A, 'SpatialRelation'))), entails(and(not(overlapsTemporally('WhenFn'(B), 'WhenFn'(C))), instance(A, 'SpatialRelation')), not(holds(A, B, C))))), [domainV(C, ['WhenFn':1, A:2]), domainV(B, ['WhenFn':1, A:1]), domainV(A, ['$instanceof':'SpatialRelation', holds:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['REL'=A, 'OBJ1'=B, 'OBJ2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4258, 'Anonymous', on).
mooCache(instance(during, 'TemporalRelation'), instance(during, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4260, 'Anonymous', on).
mooCache(instance(during, 'TransitiveRelation'), instance(during, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4262, 'Anonymous', on).
mooCache(instance(during, 'IrreflexiveRelation'), instance(during, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4264, 'Anonymous', on).
mooCache(subrelation(during, overlapsTemporally), subrelation(during, overlapsTemporally), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4266, 'Anonymous', on).
mooCache(domain(during, 1, 'TimeInterval'), domain(during, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4268, 'Anonymous', on).
mooCache(domain(during, 2, 'TimeInterval'), domain(during, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4270, 'Anonymous', on).
mooCache(documentation(during, string('"(during ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 starts after and ends before ?INTERVAL2."')), documentation(during, string('"(during ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 starts after and ends before ?INTERVAL2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4272, 'Anonymous', on).
mooCache(=>(during(A, B), and(before('EndFn'(A), 'EndFn'(B)), before('BeginFn'(B), 'BeginFn'(A)))), and(and(entails(not(before('EndFn'(A), 'EndFn'(B))), not(during(A, B))), entails(during(A, B), before('EndFn'(A), 'EndFn'(B)))), and(entails(not(before('BeginFn'(B), 'BeginFn'(A))), not(during(A, B))), entails(during(A, B), before('BeginFn'(B), 'BeginFn'(A))))), [domainV(B, ['BeginFn':1, 'EndFn':1, during:2]), domainV(A, ['BeginFn':1, 'EndFn':1, during:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4274, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'BinaryPredicate'), instance(meetsTemporally, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4276, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'TemporalRelation'), instance(meetsTemporally, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4278, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'AsymmetricRelation'), instance(meetsTemporally, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4280, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'IntransitiveRelation'), instance(meetsTemporally, 'IntransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4282, 'Anonymous', on).
mooCache(domain(meetsTemporally, 1, 'TimeInterval'), domain(meetsTemporally, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4284, 'Anonymous', on).
mooCache(domain(meetsTemporally, 2, 'TimeInterval'), domain(meetsTemporally, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4286, 'Anonymous', on).
mooCache(documentation(meetsTemporally, string('"(meetsTemporally ?INTERVAL1 ?INTERVAL2)   means that the terminal point of the TimeInterval ?INTERVAL1 is the   initial point of the TimeInterval ?INTERVAL2."')), documentation(meetsTemporally, string('"(meetsTemporally ?INTERVAL1 ?INTERVAL2)   means that the terminal point of the TimeInterval ?INTERVAL1 is the   initial point of the TimeInterval ?INTERVAL2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4288, 'Anonymous', on).
mooCache(<=>(meetsTemporally(A, B), equal('EndFn'(A), 'BeginFn'(B))), and(and(entails(meetsTemporally(A, B), equal('EndFn'(A), 'BeginFn'(B))), entails(not(equal('EndFn'(A), 'BeginFn'(B))), not(meetsTemporally(A, B)))), and(entails(equal('EndFn'(A), 'BeginFn'(B)), meetsTemporally(A, B)), entails(not(meetsTemporally(A, B)), not(equal('EndFn'(A), 'BeginFn'(B)))))), [domainV(B, ['BeginFn':1, meetsTemporally:2]), domainV(A, ['EndFn':1, meetsTemporally:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4290, 'Anonymous', on).
mooCache(=>(and(equal('BeginFn'(A), 'BeginFn'(B)), equal('EndFn'(A), 'EndFn'(B))), equal(A, B)), and(entails(and(equal('BeginFn'(A), 'BeginFn'(B)), equal('EndFn'(A), 'EndFn'(B))), equal(A, B)), and(entails(and(not(equal(A, B)), equal('EndFn'(A), 'EndFn'(B))), not(equal('BeginFn'(A), 'BeginFn'(B)))), entails(and(not(equal(A, B)), equal('BeginFn'(A), 'BeginFn'(B))), not(equal('EndFn'(A), 'EndFn'(B)))))), [domainV(B, ['BeginFn':1, 'EndFn':1]), domainV(A, ['BeginFn':1, 'EndFn':1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4292, 'Anonymous', on).
mooCache(instance(earlier, 'BinaryPredicate'), instance(earlier, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4294, 'Anonymous', on).
mooCache(instance(earlier, 'TemporalRelation'), instance(earlier, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4296, 'Anonymous', on).
mooCache(instance(earlier, 'TransitiveRelation'), instance(earlier, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4298, 'Anonymous', on).
mooCache(instance(earlier, 'IrreflexiveRelation'), instance(earlier, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4300, 'Anonymous', on).
mooCache(domain(earlier, 1, 'TimeInterval'), domain(earlier, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4302, 'Anonymous', on).
mooCache(domain(earlier, 2, 'TimeInterval'), domain(earlier, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4304, 'Anonymous', on).
mooCache(documentation(earlier, string('"(earlier INTERVAL1 INTERVAL2) means that   INTERVAL1 ends before INTERVAL2 begins."')), documentation(earlier, string('"(earlier INTERVAL1 INTERVAL2) means that   INTERVAL1 ends before INTERVAL2 begins."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4306, 'Anonymous', on).
mooCache(<=>(earlier(A, B), before('EndFn'(A), 'BeginFn'(B))), and(and(entails(earlier(A, B), before('EndFn'(A), 'BeginFn'(B))), entails(not(before('EndFn'(A), 'BeginFn'(B))), not(earlier(A, B)))), and(entails(before('EndFn'(A), 'BeginFn'(B)), earlier(A, B)), entails(not(earlier(A, B)), not(before('EndFn'(A), 'BeginFn'(B)))))), [domainV(B, ['BeginFn':1, earlier:2]), domainV(A, ['EndFn':1, earlier:1]), domainV(C, []), forall(A), forall(B)], ['INTERVAL1'=A, 'INTERVAL2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4308, 'Anonymous', on).
mooCache(instance(cooccur, 'BinaryPredicate'), instance(cooccur, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4310, 'Anonymous', on).
mooCache(instance(cooccur, 'TemporalRelation'), instance(cooccur, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4312, 'Anonymous', on).
mooCache(instance(cooccur, 'EquivalenceRelation'), instance(cooccur, 'EquivalenceRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4314, 'Anonymous', on).
mooCache(domain(cooccur, 1, 'Physical'), domain(cooccur, 1, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4316, 'Anonymous', on).
mooCache(domain(cooccur, 2, 'Physical'), domain(cooccur, 2, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4318, 'Anonymous', on).
mooCache(documentation(cooccur, string('"(cooccur ?THING1 ?THING2) means that the   Object or Process ?THING1 occurs at the same time as, together with,   or jointly with the Object or Process ?THING2.  This covers the   following temporal relations:  is co-incident with, is concurrent with,   is contemporaneous with, and is concomitant with."')), documentation(cooccur, string('"(cooccur ?THING1 ?THING2) means that the   Object or Process ?THING1 occurs at the same time as, together with,   or jointly with the Object or Process ?THING2.  This covers the   following temporal relations:  is co-incident with, is concurrent with,   is contemporaneous with, and is concomitant with."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4320, 'Anonymous', on).
mooCache(<=>(cooccur(A, B), equal('WhenFn'(A), 'WhenFn'(B))), and(and(entails(cooccur(A, B), equal('WhenFn'(A), 'WhenFn'(B))), entails(not(equal('WhenFn'(A), 'WhenFn'(B))), not(cooccur(A, B)))), and(entails(equal('WhenFn'(A), 'WhenFn'(B)), cooccur(A, B)), entails(not(cooccur(A, B)), not(equal('WhenFn'(A), 'WhenFn'(B)))))), [domainV(B, ['WhenFn':1, cooccur:2]), domainV(A, ['WhenFn':1, cooccur:1]), domainV(C, []), forall(A), forall(B)], ['PHYS1'=A, 'PHYS2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4322, 'Anonymous', on).
mooCache(instance('TimeIntervalFn', 'BinaryFunction'), instance('TimeIntervalFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4326, 'Anonymous', on).
mooCache(instance('TimeIntervalFn', 'TemporalRelation'), instance('TimeIntervalFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4328, 'Anonymous', on).
mooCache(domain('TimeIntervalFn', 1, 'TimePoint'), domain('TimeIntervalFn', 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4330, 'Anonymous', on).
mooCache(domain('TimeIntervalFn', 2, 'TimePoint'), domain('TimeIntervalFn', 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4332, 'Anonymous', on).
mooCache(range('TimeIntervalFn', 'TimeInterval'), range('TimeIntervalFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4334, 'Anonymous', on).
mooCache(documentation('TimeIntervalFn', string('"A BinaryFunction that takes two TimePoints   as arguments and returns the TimeInterval defined by these two TimePoints.    Note that the first TimePoint must occur earlier than the second TimePoint."')), documentation('TimeIntervalFn', string('"A BinaryFunction that takes two TimePoints   as arguments and returns the TimeInterval defined by these two TimePoints.    Note that the first TimePoint must occur earlier than the second TimePoint."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4336, 'Anonymous', on).
mooCache(=>(equal('TimeIntervalFn'(A, B), C), and(equal('BeginFn'(C), A), equal('EndFn'(C), B))), and(and(entails(not(holds('BeginFn', C, A)), not(holds('TimeIntervalFn', A, B, C))), entails(holds('TimeIntervalFn', A, B, C), holds('BeginFn', C, A))), and(entails(not(holds('EndFn', C, B)), not(holds('TimeIntervalFn', A, B, C))), entails(holds('TimeIntervalFn', A, B, C), holds('EndFn', C, B)))), [domainV(C, ['BeginFn':1, 'EndFn':1, 'TimeIntervalFn':3]), domainV(B, ['EndFn':2, 'TimeIntervalFn':2]), domainV(A, ['BeginFn':2, 'TimeIntervalFn':1]), domainV(D, []), forall(A), forall(B), forall(C)], ['POINT1'=A, 'POINT2'=B, 'INTERVAL'=C], 'Merge', 'TEMPORAL CONCEPTS', 4338, 'Anonymous', on).
mooCache(=>(equal('TimeIntervalFn'(A, B), C), forall(D, <=>(temporallyBetweenOrEqual(A, D, B), temporalPart(D, C)))), and(entails(and(not(temporalPart(D, C)), temporalPart(D, C)), not(holds('TimeIntervalFn', A, B, C))), and(and(entails(and(not(temporalPart(D, C)), temporallyBetweenOrEqual(A, D, B)), not(holds('TimeIntervalFn', A, B, C))), and(entails(and(holds('TimeIntervalFn', A, B, C), temporallyBetweenOrEqual(A, D, B)), temporalPart(D, C)), entails(and(holds('TimeIntervalFn', A, B, C), not(temporalPart(D, C))), not(temporallyBetweenOrEqual(A, D, B))))), and(entails(and(not(temporallyBetweenOrEqual(A, D, B)), temporallyBetweenOrEqual(A, D, B)), not(holds('TimeIntervalFn', A, B, C))), and(entails(and(not(temporallyBetweenOrEqual(A, D, B)), temporalPart(D, C)), not(holds('TimeIntervalFn', A, B, C))), and(entails(and(holds('TimeIntervalFn', A, B, C), temporalPart(D, C)), temporallyBetweenOrEqual(A, D, B)), entails(and(holds('TimeIntervalFn', A, B, C), not(temporallyBetweenOrEqual(A, D, B))), not(temporalPart(D, C)))))))), [domainV(D, [temporalPart:1, temporallyBetweenOrEqual:2]), domainV(C, ['TimeIntervalFn':3, temporalPart:2]), domainV(B, ['TimeIntervalFn':2, temporallyBetweenOrEqual:3]), domainV(A, ['TimeIntervalFn':1, temporallyBetweenOrEqual:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['POINT1'=A, 'POINT2'=B, 'INTERVAL'=C, 'POINT'=D], 'Merge', 'TEMPORAL CONCEPTS', 4340, 'Anonymous', on).
mooCache(instance('WhenFn', 'TemporalRelation'), instance('WhenFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4342, 'Anonymous', on).
mooCache(instance('WhenFn', 'UnaryFunction'), instance('WhenFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4344, 'Anonymous', on).
mooCache(domain('WhenFn', 1, 'Physical'), domain('WhenFn', 1, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4346, 'Anonymous', on).
mooCache(range('WhenFn', 'TimeInterval'), range('WhenFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4348, 'Anonymous', on).
mooCache(documentation('WhenFn', string('"A UnaryFunction that maps an Object or   Process to the exact TimeInterval during which it exists.  Note   that, for every TimePoint ?TIME outside of the TimeInterval   (WhenFn ?THING), (time ?THING ?TIME) does not hold."')), documentation('WhenFn', string('"A UnaryFunction that maps an Object or   Process to the exact TimeInterval during which it exists.  Note   that, for every TimePoint ?TIME outside of the TimeInterval   (WhenFn ?THING), (time ?THING ?TIME) does not hold."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4350, 'Anonymous', on).
mooCache(before('BeginFn'('WhenFn'(A)), 'EndFn'('WhenFn'(A))), before('BeginFn'('WhenFn'(A)), 'EndFn'('WhenFn'(A))), [domainV(A, ['WhenFn':1]), domainV(B, []), forall(A)], ['THING'=A], 'Merge', 'TEMPORAL CONCEPTS', 4352, 'Anonymous', on).
mooCache(instance('PastFn', 'TemporalRelation'), instance('PastFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4354, 'Anonymous', on).
mooCache(instance('PastFn', 'UnaryFunction'), instance('PastFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4356, 'Anonymous', on).
mooCache(domain('PastFn', 1, 'TimePosition'), domain('PastFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4358, 'Anonymous', on).
mooCache(range('PastFn', 'TimeInterval'), range('PastFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4360, 'Anonymous', on).
mooCache(documentation('PastFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval that meets it and that begins at   NegativeInfinity."')), documentation('PastFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval that meets it and that begins at   NegativeInfinity."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4362, 'Anonymous', on).
mooCache(meetsTemporally('PastFn'('WhenFn'(A)), 'WhenFn'(A)), meetsTemporally('PastFn'('WhenFn'(A)), 'WhenFn'(A)), [domainV(A, ['WhenFn':1]), domainV(B, []), forall(A)], ['THING'=A], 'Merge', 'TEMPORAL CONCEPTS', 4364, 'Anonymous', on).
mooCache(equal('BeginFn'('PastFn'(A)), 'NegativeInfinity'), equal('BeginFn'('PastFn'(A)), 'NegativeInfinity'), [domainV(A, ['PastFn':1]), domainV(B, []), forall(A)], ['TIME'=A], 'Merge', 'TEMPORAL CONCEPTS', 4366, 'Anonymous', on).
mooCache(instance('ImmediatePastFn', 'TemporalRelation'), instance('ImmediatePastFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4368, 'Anonymous', on).
mooCache(instance('ImmediatePastFn', 'UnaryFunction'), instance('ImmediatePastFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4370, 'Anonymous', on).
mooCache(domain('ImmediatePastFn', 1, 'TimePosition'), domain('ImmediatePastFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4372, 'Anonymous', on).
mooCache(range('ImmediatePastFn', 'TimeInterval'), range('ImmediatePastFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4374, 'Anonymous', on).
mooCache(documentation('ImmediatePastFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately precedes the TimePosition."')), documentation('ImmediatePastFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately precedes the TimePosition."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4376, 'Anonymous', on).
mooCache(finishes('ImmediatePastFn'('WhenFn'(A)), 'PastFn'('WhenFn'(A))), finishes('ImmediatePastFn'('WhenFn'(A)), 'PastFn'('WhenFn'(A))), [domainV(A, ['WhenFn':1]), domainV(B, []), forall(A)], ['THING'=A], 'Merge', 'TEMPORAL CONCEPTS', 4378, 'Anonymous', on).
mooCache(=>(and(resource(A, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), measure(B, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), measure(B, D)))), greaterThan(C, D)), and(entails(and(resource(A, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), measure(B, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), measure(B, D)))), greaterThan(C, D)), and(entails(and(not(greaterThan(C, D)), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), measure(B, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), measure(B, D)))), not(resource(A, B))), and(entails(and(not(greaterThan(C, D)), and(resource(A, B), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), measure(B, D)))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), measure(B, C)))), entails(and(not(greaterThan(C, D)), and(resource(A, B), holdsDuring('ImmediatePastFn'('WhenFn'(A)), measure(B, C)))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), measure(B, D))))))), [domainV(D, [greaterThan:2, measure:2]), domainV(C, [greaterThan:1, measure:2]), domainV(B, [measure:1, resource:2]), domainV(A, ['WhenFn':1, resource:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['PROC'=A, 'OBJ'=B, 'QUANT1'=C, 'QUANT2'=D], 'Merge', 'TEMPORAL CONCEPTS', 4380, 'Anonymous', on).
mooCache(instance('FutureFn', 'TemporalRelation'), instance('FutureFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4382, 'Anonymous', on).
mooCache(instance('FutureFn', 'UnaryFunction'), instance('FutureFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4384, 'Anonymous', on).
mooCache(domain('FutureFn', 1, 'TimePosition'), domain('FutureFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4386, 'Anonymous', on).
mooCache(range('FutureFn', 'TimeInterval'), range('FutureFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4388, 'Anonymous', on).
mooCache(documentation('FutureFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval which it meets and which ends at   PositiveInfinity."')), documentation('FutureFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval which it meets and which ends at   PositiveInfinity."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4390, 'Anonymous', on).
mooCache(meetsTemporally('WhenFn'(A), 'FutureFn'('WhenFn'(A))), meetsTemporally('WhenFn'(A), 'FutureFn'('WhenFn'(A))), [domainV(A, ['WhenFn':1]), domainV(B, []), forall(A)], ['THING'=A], 'Merge', 'TEMPORAL CONCEPTS', 4392, 'Anonymous', on).
mooCache(equal('EndFn'('FutureFn'(A)), 'PositiveInfinity'), equal('EndFn'('FutureFn'(A)), 'PositiveInfinity'), [domainV(A, ['FutureFn':1]), domainV(B, []), forall(A)], ['TIME'=A], 'Merge', 'TEMPORAL CONCEPTS', 4394, 'Anonymous', on).
mooCache(instance('ImmediateFutureFn', 'TemporalRelation'), instance('ImmediateFutureFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4396, 'Anonymous', on).
mooCache(instance('ImmediateFutureFn', 'UnaryFunction'), instance('ImmediateFutureFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4398, 'Anonymous', on).
mooCache(domain('ImmediateFutureFn', 1, 'TimePosition'), domain('ImmediateFutureFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4400, 'Anonymous', on).
mooCache(range('ImmediateFutureFn', 'TimeInterval'), range('ImmediateFutureFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4402, 'Anonymous', on).
mooCache(documentation('ImmediateFutureFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately follows the TimePosition."')), documentation('ImmediateFutureFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately follows the TimePosition."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4404, 'Anonymous', on).
mooCache(starts('ImmediateFutureFn'('WhenFn'(A)), 'FutureFn'('WhenFn'(A))), starts('ImmediateFutureFn'('WhenFn'(A)), 'FutureFn'('WhenFn'(A))), [domainV(A, ['WhenFn':1]), domainV(B, []), forall(A)], ['THING'=A], 'Merge', 'TEMPORAL CONCEPTS', 4406, 'Anonymous', on).
mooCache(instance(date, 'BinaryPredicate'), instance(date, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4412, 'Anonymous', on).
mooCache(instance(date, 'AsymmetricRelation'), instance(date, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4414, 'Anonymous', on).
mooCache(domain(date, 1, 'Physical'), domain(date, 1, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4416, 'Anonymous', on).
mooCache(domain(date, 2, 'Day'), domain(date, 2, 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4418, 'Anonymous', on).
mooCache(subrelation(date, time), subrelation(date, time), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4420, 'Anonymous', on).
mooCache(singleValued(date, 2), singleValued(date, 2), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4422, 'Anonymous', on).
mooCache(documentation(date, string('"A BinaryPredicate that specifies a   TimePosition in absolute calendar time, at the resolution   of one day, for a particular Object or Process."')), documentation(date, string('"A BinaryPredicate that specifies a   TimePosition in absolute calendar time, at the resolution   of one day, for a particular Object or Process."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4424, 'Anonymous', on).
mooCache(instance('YearFn', 'TemporalRelation'), instance('YearFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4426, 'Anonymous', on).
mooCache(instance('YearFn', 'UnaryFunction'), instance('YearFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4428, 'Anonymous', on).
mooCache(domain('YearFn', 1, 'Integer'), domain('YearFn', 1, 'Integer'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4430, 'Anonymous', on).
mooCache(range('YearFn', 'Year'), range('YearFn', 'Year'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4432, 'Anonymous', on).
mooCache(documentation('YearFn', string('"A UnaryFunction that maps a number to the   corresponding calendar Year.  For example, (YearFn 1912) denotes   the Year 1912."')), documentation('YearFn', string('"A UnaryFunction that maps a number to the   corresponding calendar Year.  For example, (YearFn 1912) denotes   the Year 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4434, 'Anonymous', on).
mooCache(instance('MonthFn', 'TemporalRelation'), instance('MonthFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4436, 'Anonymous', on).
mooCache(instance('MonthFn', 'BinaryFunction'), instance('MonthFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4438, 'Anonymous', on).
mooCache(domainSubclass('MonthFn', 1, 'Month'), domainSubclass('MonthFn', 1, 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4440, 'Anonymous', on).
mooCache(domain('MonthFn', 2, 'Year'), domain('MonthFn', 2, 'Year'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4442, 'Anonymous', on).
mooCache(range('MonthFn', 'Month'), range('MonthFn', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4444, 'Anonymous', on).
mooCache(documentation('MonthFn', string('"A BinaryFunction that maps a subclass of   Month and an instance of Year to the corresponding Month of the   Year.  For example (MonthFn January (YearFn 1912)) denotes the   eighth Month, i.e. August, of the Year 1912."')), documentation('MonthFn', string('"A BinaryFunction that maps a subclass of   Month and an instance of Year to the corresponding Month of the   Year.  For example (MonthFn January (YearFn 1912)) denotes the   eighth Month, i.e. August, of the Year 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4446, 'Anonymous', on).
mooCache(instance('DayFn', 'TemporalRelation'), instance('DayFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4448, 'Anonymous', on).
mooCache(instance('DayFn', 'BinaryFunction'), instance('DayFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4450, 'Anonymous', on).
mooCache(domain('DayFn', 1, 'PositiveInteger'), domain('DayFn', 1, 'PositiveInteger'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4452, 'Anonymous', on).
mooCache(domain('DayFn', 2, 'Month'), domain('DayFn', 2, 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4454, 'Anonymous', on).
mooCache(range('DayFn', 'Day'), range('DayFn', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4456, 'Anonymous', on).
mooCache(documentation('DayFn', string('"A BinaryFunction that maps a number and a   Month to the corresponding Day of the Month.  For example,   (DayFn 18 (MonthFn 8 (YearFn 1912))) denotes the 18th day of   August 1912."')), documentation('DayFn', string('"A BinaryFunction that maps a number and a   Month to the corresponding Day of the Month.  For example,   (DayFn 18 (MonthFn 8 (YearFn 1912))) denotes the 18th day of   August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4458, 'Anonymous', on).
mooCache(=>(instance('DayFn'(A, B), 'Day'), lessThanOrEqualTo(A, 31)), and(entails(not(lessThanOrEqualTo(A, 31)), not(instance('DayFn'(A, B), 'Day'))), entails(instance('DayFn'(A, B), 'Day'), lessThanOrEqualTo(A, 31))), [domainV(B, ['DayFn':2]), domainV(A, ['DayFn':1, lessThanOrEqualTo:1]), domainV(C, []), forall(A), forall(B)], ['NUMBER'=A, 'MONTH'=B], 'Merge', 'TEMPORAL CONCEPTS', 4460, 'Anonymous', on).
mooCache(=>(and(equal(A, 'DayFn'(B, C)), and(equal(D, 'DayFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('DayFn', B, C, A), and(holds('DayFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('DayFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('DayFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('DayFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('DayFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('DayFn', B, C, A), holds('DayFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['DayFn':1, 'SubtractionFn':1]), domainV(D, ['DayFn':3, meetsTemporally:2]), domainV(C, ['DayFn':2]), domainV(B, ['DayFn':1, 'SubtractionFn':2]), domainV(A, ['DayFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['DAY1'=A, 'NUMBER1'=B, 'MONTH'=C, 'DAY2'=D, 'NUMBER2'=E], 'Merge', 'TEMPORAL CONCEPTS', 4462, 'Anonymous', on).
mooCache(instance('HourFn', 'TemporalRelation'), instance('HourFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4464, 'Anonymous', on).
mooCache(instance('HourFn', 'BinaryFunction'), instance('HourFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4466, 'Anonymous', on).
mooCache(domain('HourFn', 1, 'PositiveRealNumber'), domain('HourFn', 1, 'PositiveRealNumber'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4468, 'Anonymous', on).
mooCache(domain('HourFn', 2, 'Day'), domain('HourFn', 2, 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4470, 'Anonymous', on).
mooCache(range('HourFn', 'Hour'), range('HourFn', 'Hour'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4472, 'Anonymous', on).
mooCache(documentation('HourFn', string('"A BinaryFunction that maps a number and a   Day to the corresponding Hour of the Day.  For example,    (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))) denotes the   14th hour, i.e. 2 PM, on the 18th day of August 1912."')), documentation('HourFn', string('"A BinaryFunction that maps a number and a   Day to the corresponding Hour of the Day.  For example,    (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))) denotes the   14th hour, i.e. 2 PM, on the 18th day of August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4474, 'Anonymous', on).
mooCache(=>(instance('HourFn'(A, B), 'Hour'), lessThan(A, 24)), and(entails(not(lessThan(A, 24)), not(instance('HourFn'(A, B), 'Hour'))), entails(instance('HourFn'(A, B), 'Hour'), lessThan(A, 24))), [domainV(B, ['HourFn':2]), domainV(A, ['HourFn':1, lessThan:1]), domainV(C, []), forall(A), forall(B)], ['NUMBER'=A, 'DAY'=B], 'Merge', 'TEMPORAL CONCEPTS', 4476, 'Anonymous', on).
mooCache(=>(and(equal(A, 'HourFn'(B, C)), and(equal(D, 'HourFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('HourFn', B, C, A), and(holds('HourFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('HourFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('HourFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('HourFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('HourFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('HourFn', B, C, A), holds('HourFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['HourFn':1, 'SubtractionFn':1]), domainV(D, ['HourFn':3, meetsTemporally:2]), domainV(C, ['HourFn':2]), domainV(B, ['HourFn':1, 'SubtractionFn':2]), domainV(A, ['HourFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['HOUR1'=A, 'NUMBER1'=B, 'DAY'=C, 'HOUR2'=D, 'NUMBER2'=E], 'Merge', 'TEMPORAL CONCEPTS', 4478, 'Anonymous', on).
mooCache(instance('MinuteFn', 'TemporalRelation'), instance('MinuteFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4480, 'Anonymous', on).
mooCache(instance('MinuteFn', 'BinaryFunction'), instance('MinuteFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4482, 'Anonymous', on).
mooCache(domain('MinuteFn', 1, 'PositiveRealNumber'), domain('MinuteFn', 1, 'PositiveRealNumber'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4484, 'Anonymous', on).
mooCache(domain('MinuteFn', 2, 'Hour'), domain('MinuteFn', 2, 'Hour'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4486, 'Anonymous', on).
mooCache(range('MinuteFn', 'Minute'), range('MinuteFn', 'Minute'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4488, 'Anonymous', on).
mooCache(documentation('MinuteFn', string('"A BinaryFunction that maps a number and an   Hour to the corresponding Minute of the Hour.  For example,   (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))))   denotes 15 minutes after 2 PM on the 18th day of August 1912."')), documentation('MinuteFn', string('"A BinaryFunction that maps a number and an   Hour to the corresponding Minute of the Hour.  For example,   (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))))   denotes 15 minutes after 2 PM on the 18th day of August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4490, 'Anonymous', on).
mooCache(=>(instance('MinuteFn'(A, B), 'Minute'), lessThan(A, 60)), and(entails(not(lessThan(A, 60)), not(instance('MinuteFn'(A, B), 'Minute'))), entails(instance('MinuteFn'(A, B), 'Minute'), lessThan(A, 60))), [domainV(B, ['MinuteFn':2]), domainV(A, ['MinuteFn':1, lessThan:1]), domainV(C, []), forall(A), forall(B)], ['NUMBER'=A, 'HOUR'=B], 'Merge', 'TEMPORAL CONCEPTS', 4492, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MinuteFn'(B, C)), and(equal(D, 'MinuteFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('MinuteFn', B, C, A), and(holds('MinuteFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('MinuteFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('MinuteFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('MinuteFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('MinuteFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('MinuteFn', B, C, A), holds('MinuteFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['MinuteFn':1, 'SubtractionFn':1]), domainV(D, ['MinuteFn':3, meetsTemporally:2]), domainV(C, ['MinuteFn':2]), domainV(B, ['MinuteFn':1, 'SubtractionFn':2]), domainV(A, ['MinuteFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['MINUTE1'=A, 'NUMBER1'=B, 'HOUR'=C, 'MINUTE2'=D, 'NUMBER2'=E], 'Merge', 'TEMPORAL CONCEPTS', 4494, 'Anonymous', on).
mooCache(instance('SecondFn', 'TemporalRelation'), instance('SecondFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4496, 'Anonymous', on).
mooCache(instance('SecondFn', 'BinaryFunction'), instance('SecondFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4498, 'Anonymous', on).
mooCache(domain('SecondFn', 1, 'PositiveRealNumber'), domain('SecondFn', 1, 'PositiveRealNumber'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4500, 'Anonymous', on).
mooCache(domain('SecondFn', 2, 'Minute'), domain('SecondFn', 2, 'Minute'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4502, 'Anonymous', on).
mooCache(range('SecondFn', 'Second'), range('SecondFn', 'Second'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4504, 'Anonymous', on).
mooCache(documentation('SecondFn', string('"A BinaryFunction that maps a number and a   Minute to the corresponding Second of the Minute.  For example,  (SecondFn 9 (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8   (YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the   18th day of August 1912."')), documentation('SecondFn', string('"A BinaryFunction that maps a number and a   Minute to the corresponding Second of the Minute.  For example,  (SecondFn 9 (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8   (YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the   18th day of August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4506, 'Anonymous', on).
mooCache(=>(instance('SecondFn'(A, B), 'Second'), lessThan(A, 60)), and(entails(not(lessThan(A, 60)), not(instance('SecondFn'(A, B), 'Second'))), entails(instance('SecondFn'(A, B), 'Second'), lessThan(A, 60))), [domainV(B, ['SecondFn':2]), domainV(A, ['SecondFn':1, lessThan:1]), domainV(C, []), forall(A), forall(B)], ['NUMBER'=A, 'MINUTE'=B], 'Merge', 'TEMPORAL CONCEPTS', 4508, 'Anonymous', on).
mooCache(=>(and(equal(A, 'SecondFn'(B, C)), and(equal(D, 'SecondFn'(E, C)), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(holds('SecondFn', B, C, A), and(holds('SecondFn', E, C, D), equal('SubtractionFn'(E, B), 1))), meetsTemporally(A, D)), and(entails(and(not(meetsTemporally(A, D)), and(holds('SecondFn', E, C, D), equal('SubtractionFn'(E, B), 1))), not(holds('SecondFn', B, C, A))), and(entails(and(not(meetsTemporally(A, D)), and(holds('SecondFn', B, C, A), equal('SubtractionFn'(E, B), 1))), not(holds('SecondFn', E, C, D))), entails(and(not(meetsTemporally(A, D)), and(holds('SecondFn', B, C, A), holds('SecondFn', E, C, D))), not(equal('SubtractionFn'(E, B), 1)))))), [domainV(E, ['SecondFn':1, 'SubtractionFn':1]), domainV(D, ['SecondFn':3, meetsTemporally:2]), domainV(C, ['SecondFn':2]), domainV(B, ['SecondFn':1, 'SubtractionFn':2]), domainV(A, ['SecondFn':3, meetsTemporally:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['SECOND1'=A, 'NUMBER1'=B, 'MINUTE'=C, 'SECOND2'=D, 'NUMBER2'=E], 'Merge', 'TEMPORAL CONCEPTS', 4510, 'Anonymous', on).
mooCache(subclass('Year', 'TimeInterval'), subclass('Year', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4512, 'Anonymous', on).
mooCache(relatedInternalConcept('Year', 'YearFn'), relatedInternalConcept('Year', 'YearFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4514, 'Anonymous', on).
mooCache(relatedInternalConcept('Year', 'YearDuration'), relatedInternalConcept('Year', 'YearDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4516, 'Anonymous', on).
mooCache(documentation('Year', string('"The Class of all calendar Years."')), documentation('Year', string('"The Class of all calendar Years."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4518, 'Anonymous', on).
mooCache(=>(instance(A, 'Year'), duration(A, 'YearDuration')), and(entails(not(duration(A, 'YearDuration')), not(instance(A, 'Year'))), entails(instance(A, 'Year'), duration(A, 'YearDuration'))), [domainV(A, ['$instanceof':'Year', duration:1]), domainV(B, []), forall(A)], ['YEAR'=A], 'Merge', 'TEMPORAL CONCEPTS', 4520, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Year'), and(instance(B, 'Year'), equal('SubtractionFn'(B, A), 1))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Year'), and(instance(B, 'Year'), equal('SubtractionFn'(B, A), 1))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Year'), equal('SubtractionFn'(B, A), 1))), not(instance(A, 'Year'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Year'), equal('SubtractionFn'(B, A), 1))), not(instance(B, 'Year'))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Year'), instance(B, 'Year'))), not(equal('SubtractionFn'(B, A), 1)))))), [domainV(B, ['$instanceof':'Year', 'SubtractionFn':1, meetsTemporally:2]), domainV(A, ['$instanceof':'Year', 'SubtractionFn':2, meetsTemporally:1]), domainV(C, []), forall(A), forall(B)], ['YEAR1'=A, 'YEAR2'=B], 'Merge', 'TEMPORAL CONCEPTS', 4522, 'Anonymous', on).
mooCache(subclass('LeapYear', 'Year'), subclass('LeapYear', 'Year'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4524, 'Anonymous', on).
mooCache(documentation('LeapYear', string('"The Class of all leap years.  These are years   which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly   divisible by 400 (this latter case is known as a leap century)."')), documentation('LeapYear', string('"The Class of all leap years.  These are years   which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly   divisible by 400 (this latter case is known as a leap century)."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4526, 'Anonymous', on).
mooCache(=>(and(instance(A, 'LeapYear'), equal(A, 'MeasureFn'(B, 'Year'))), or(and(equal('RemainderFn'(B, 4), 0), not(equal('RemainderFn'(B, 100), 0))), equal('RemainderFn'(B, 400), 0))), and(and(entails(and(holds('MeasureFn', B, 'Year', A), and(not(equal('RemainderFn'(B, 4), 0)), not(equal('RemainderFn'(B, 400), 0)))), not(instance(A, 'LeapYear'))), and(entails(and(instance(A, 'LeapYear'), and(not(equal('RemainderFn'(B, 4), 0)), not(equal('RemainderFn'(B, 400), 0)))), not(holds('MeasureFn', B, 'Year', A))), and(entails(and(and(instance(A, 'LeapYear'), holds('MeasureFn', B, 'Year', A)), not(equal('RemainderFn'(B, 400), 0))), equal('RemainderFn'(B, 4), 0)), entails(and(and(instance(A, 'LeapYear'), holds('MeasureFn', B, 'Year', A)), not(equal('RemainderFn'(B, 4), 0))), equal('RemainderFn'(B, 400), 0))))), and(entails(and(holds('MeasureFn', B, 'Year', A), and(equal('RemainderFn'(B, 100), 0), not(equal('RemainderFn'(B, 400), 0)))), not(instance(A, 'LeapYear'))), and(entails(and(instance(A, 'LeapYear'), and(equal('RemainderFn'(B, 100), 0), not(equal('RemainderFn'(B, 400), 0)))), not(holds('MeasureFn', B, 'Year', A))), and(entails(and(and(instance(A, 'LeapYear'), holds('MeasureFn', B, 'Year', A)), not(equal('RemainderFn'(B, 400), 0))), not(equal('RemainderFn'(B, 100), 0))), entails(and(and(instance(A, 'LeapYear'), holds('MeasureFn', B, 'Year', A)), equal('RemainderFn'(B, 100), 0)), equal('RemainderFn'(B, 400), 0)))))), [domainV(B, ['MeasureFn':1, 'RemainderFn':1]), domainV(A, ['$instanceof':'LeapYear', 'MeasureFn':3]), domainV(C, []), forall(A), forall(B)], ['LEAP'=A, 'NUMBER'=B], 'Merge', 'TEMPORAL CONCEPTS', 4528, 'Anonymous', on).
mooCache(subclass('Month', 'TimeInterval'), subclass('Month', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4530, 'Anonymous', on).
mooCache(relatedInternalConcept('Month', 'MonthFn'), relatedInternalConcept('Month', 'MonthFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4532, 'Anonymous', on).
mooCache(documentation('Month', string('"The Class of all calendar Months."')), documentation('Month', string('"The Class of all calendar Months."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4534, 'Anonymous', on).
mooCache(subclass('January', 'Month'), subclass('January', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4536, 'Anonymous', on).
mooCache(documentation('January', string('"The Class of all Months which are January."')), documentation('January', string('"The Class of all Months which are January."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4538, 'Anonymous', on).
mooCache(=>(instance(A, 'January'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'January'))), entails(instance(A, 'January'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'January', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4540, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('January', B)), equal(C, 'MonthFn'('February', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'January', B, A), holds('MonthFn', 'February', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'February', B, C)), not(holds('MonthFn', 'January', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'January', B, A)), not(holds('MonthFn', 'February', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4542, 'Anonymous', on).
mooCache(subclass('February', 'Month'), subclass('February', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4544, 'Anonymous', on).
mooCache(documentation('February', string('"The Class of all Months which are February."')), documentation('February', string('"The Class of all Months which are February."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4546, 'Anonymous', on).
mooCache(=>(and(equal('MonthFn'('February', A), B), not(instance(A, 'LeapYear'))), duration(B, 'MeasureFn'(28, 'DayDuration'))), and(entails(and(holds('MonthFn', 'February', A, B), not(instance(A, 'LeapYear'))), duration(B, 'MeasureFn'(28, 'DayDuration'))), and(entails(and(not(duration(B, 'MeasureFn'(28, 'DayDuration'))), not(instance(A, 'LeapYear'))), not(holds('MonthFn', 'February', A, B))), entails(and(not(duration(B, 'MeasureFn'(28, 'DayDuration'))), holds('MonthFn', 'February', A, B)), instance(A, 'LeapYear')))), [domainV(B, ['MonthFn':3, duration:1]), domainV(A, ['$instanceof':'LeapYear', 'MonthFn':2]), domainV(C, []), forall(A), forall(B)], ['YEAR'=A, 'MONTH'=B], 'Merge', 'TEMPORAL CONCEPTS', 4548, 'Anonymous', on).
mooCache(=>(and(equal('MonthFn'('February', A), B), instance(A, 'LeapYear')), duration(B, 'MeasureFn'(29, 'DayDuration'))), and(entails(and(holds('MonthFn', 'February', A, B), instance(A, 'LeapYear')), duration(B, 'MeasureFn'(29, 'DayDuration'))), and(entails(and(not(duration(B, 'MeasureFn'(29, 'DayDuration'))), instance(A, 'LeapYear')), not(holds('MonthFn', 'February', A, B))), entails(and(not(duration(B, 'MeasureFn'(29, 'DayDuration'))), holds('MonthFn', 'February', A, B)), not(instance(A, 'LeapYear'))))), [domainV(B, ['MonthFn':3, duration:1]), domainV(A, ['$instanceof':'LeapYear', 'MonthFn':2]), domainV(C, []), forall(A), forall(B)], ['YEAR'=A, 'MONTH'=B], 'Merge', 'TEMPORAL CONCEPTS', 4550, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('February', B)), equal(C, 'MonthFn'('March', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'February', B, A), holds('MonthFn', 'March', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'March', B, C)), not(holds('MonthFn', 'February', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'February', B, A)), not(holds('MonthFn', 'March', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4552, 'Anonymous', on).
mooCache(subclass('March', 'Month'), subclass('March', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4554, 'Anonymous', on).
mooCache(documentation('March', string('"The Class of all Months which are March."')), documentation('March', string('"The Class of all Months which are March."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4556, 'Anonymous', on).
mooCache(=>(instance(A, 'March'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'March'))), entails(instance(A, 'March'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'March', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4558, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('March', B)), equal(C, 'MonthFn'('April', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'March', B, A), holds('MonthFn', 'April', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'April', B, C)), not(holds('MonthFn', 'March', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'March', B, A)), not(holds('MonthFn', 'April', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4560, 'Anonymous', on).
mooCache(subclass('April', 'Month'), subclass('April', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4562, 'Anonymous', on).
mooCache(documentation('April', string('"The Class of all Months which are April."')), documentation('April', string('"The Class of all Months which are April."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4564, 'Anonymous', on).
mooCache(=>(instance(A, 'April'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'April'))), entails(instance(A, 'April'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'April', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4566, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('April', B)), equal(C, 'MonthFn'('May', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'April', B, A), holds('MonthFn', 'May', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'May', B, C)), not(holds('MonthFn', 'April', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'April', B, A)), not(holds('MonthFn', 'May', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4568, 'Anonymous', on).
mooCache(subclass('May', 'Month'), subclass('May', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4570, 'Anonymous', on).
mooCache(documentation('May', string('"The Class of all Months which are May."')), documentation('May', string('"The Class of all Months which are May."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4572, 'Anonymous', on).
mooCache(=>(instance(A, 'May'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'May'))), entails(instance(A, 'May'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'May', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4574, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('May', B)), equal(C, 'MonthFn'('June', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'May', B, A), holds('MonthFn', 'June', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'June', B, C)), not(holds('MonthFn', 'May', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'May', B, A)), not(holds('MonthFn', 'June', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4576, 'Anonymous', on).
mooCache(subclass('June', 'Month'), subclass('June', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4578, 'Anonymous', on).
mooCache(documentation('June', string('"The Class of all Months which are June."')), documentation('June', string('"The Class of all Months which are June."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4580, 'Anonymous', on).
mooCache(=>(instance(A, 'June'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'June'))), entails(instance(A, 'June'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'June', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4582, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('June', B)), equal(C, 'MonthFn'('July', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'June', B, A), holds('MonthFn', 'July', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'July', B, C)), not(holds('MonthFn', 'June', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'June', B, A)), not(holds('MonthFn', 'July', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4584, 'Anonymous', on).
mooCache(subclass('July', 'Month'), subclass('July', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4586, 'Anonymous', on).
mooCache(documentation('July', string('"The Class of all Months which are July."')), documentation('July', string('"The Class of all Months which are July."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4588, 'Anonymous', on).
mooCache(=>(instance(A, 'July'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'July'))), entails(instance(A, 'July'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'July', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4590, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('July', B)), equal(C, 'MonthFn'('August', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'July', B, A), holds('MonthFn', 'August', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'August', B, C)), not(holds('MonthFn', 'July', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'July', B, A)), not(holds('MonthFn', 'August', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4592, 'Anonymous', on).
mooCache(subclass('August', 'Month'), subclass('August', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4594, 'Anonymous', on).
mooCache(documentation('August', string('"The Class of all Months which are August."')), documentation('August', string('"The Class of all Months which are August."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4596, 'Anonymous', on).
mooCache(=>(instance(A, 'August'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'August'))), entails(instance(A, 'August'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'August', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4598, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('August', B)), equal(C, 'MonthFn'('September', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'August', B, A), holds('MonthFn', 'September', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'September', B, C)), not(holds('MonthFn', 'August', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'August', B, A)), not(holds('MonthFn', 'September', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4600, 'Anonymous', on).
mooCache(subclass('September', 'Month'), subclass('September', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4602, 'Anonymous', on).
mooCache(documentation('September', string('"The Class of all Months which are September."')), documentation('September', string('"The Class of all Months which are September."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4604, 'Anonymous', on).
mooCache(=>(instance(A, 'September'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'September'))), entails(instance(A, 'September'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'September', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4606, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('September', B)), equal(C, 'MonthFn'('October', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'September', B, A), holds('MonthFn', 'October', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'October', B, C)), not(holds('MonthFn', 'September', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'September', B, A)), not(holds('MonthFn', 'October', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4608, 'Anonymous', on).
mooCache(subclass('October', 'Month'), subclass('October', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4610, 'Anonymous', on).
mooCache(documentation('October', string('"The Class of all Months which are October."')), documentation('October', string('"The Class of all Months which are October."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4612, 'Anonymous', on).
mooCache(=>(instance(A, 'October'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'October'))), entails(instance(A, 'October'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'October', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4614, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('October', B)), equal(C, 'MonthFn'('November', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'October', B, A), holds('MonthFn', 'November', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'November', B, C)), not(holds('MonthFn', 'October', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'October', B, A)), not(holds('MonthFn', 'November', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4616, 'Anonymous', on).
mooCache(subclass('November', 'Month'), subclass('November', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4618, 'Anonymous', on).
mooCache(documentation('November', string('"The Class of all Months which are November."')), documentation('November', string('"The Class of all Months which are November."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4620, 'Anonymous', on).
mooCache(=>(instance(A, 'November'), duration(A, 'MeasureFn'(30, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(30, 'DayDuration'))), not(instance(A, 'November'))), entails(instance(A, 'November'), duration(A, 'MeasureFn'(30, 'DayDuration')))), [domainV(A, ['$instanceof':'November', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4622, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('November', B)), equal(C, 'MonthFn'('December', B))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'November', B, A), holds('MonthFn', 'December', B, C)), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'December', B, C)), not(holds('MonthFn', 'November', B, A))), entails(and(not(meetsTemporally(A, C)), holds('MonthFn', 'November', B, A)), not(holds('MonthFn', 'December', B, C))))), [domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MONTH1'=A, 'YEAR'=B, 'MONTH2'=C], 'Merge', 'TEMPORAL CONCEPTS', 4624, 'Anonymous', on).
mooCache(subclass('December', 'Month'), subclass('December', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4626, 'Anonymous', on).
mooCache(documentation('December', string('"The Class of all Months which are December."')), documentation('December', string('"The Class of all Months which are December."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4628, 'Anonymous', on).
mooCache(=>(instance(A, 'December'), duration(A, 'MeasureFn'(31, 'DayDuration'))), and(entails(not(duration(A, 'MeasureFn'(31, 'DayDuration'))), not(instance(A, 'December'))), entails(instance(A, 'December'), duration(A, 'MeasureFn'(31, 'DayDuration')))), [domainV(A, ['$instanceof':'December', duration:1]), domainV(B, []), forall(A)], ['MONTH'=A], 'Merge', 'TEMPORAL CONCEPTS', 4630, 'Anonymous', on).
mooCache(=>(and(equal(A, 'MonthFn'('December', B)), and(equal(C, 'MonthFn'('January', D)), meetsTemporally(B, D))), meetsTemporally(A, C)), and(entails(and(holds('MonthFn', 'December', B, A), and(holds('MonthFn', 'January', D, C), meetsTemporally(B, D))), meetsTemporally(A, C)), and(entails(and(not(meetsTemporally(A, C)), and(holds('MonthFn', 'January', D, C), meetsTemporally(B, D))), not(holds('MonthFn', 'December', B, A))), and(entails(and(not(meetsTemporally(A, C)), and(holds('MonthFn', 'December', B, A), meetsTemporally(B, D))), not(holds('MonthFn', 'January', D, C))), entails(and(not(meetsTemporally(A, C)), and(holds('MonthFn', 'December', B, A), holds('MonthFn', 'January', D, C))), not(meetsTemporally(B, D)))))), [domainV(D, ['MonthFn':2, meetsTemporally:2]), domainV(C, ['MonthFn':3, meetsTemporally:2]), domainV(B, ['MonthFn':2, meetsTemporally:1]), domainV(A, ['MonthFn':3, meetsTemporally:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['MONTH1'=A, 'YEAR1'=B, 'MONTH2'=C, 'YEAR2'=D], 'Merge', 'TEMPORAL CONCEPTS', 4632, 'Anonymous', on).
mooCache(subclass('Day', 'TimeInterval'), subclass('Day', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4634, 'Anonymous', on).
mooCache(relatedInternalConcept('Day', 'DayFn'), relatedInternalConcept('Day', 'DayFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4636, 'Anonymous', on).
mooCache(relatedInternalConcept('Day', 'DayDuration'), relatedInternalConcept('Day', 'DayDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4638, 'Anonymous', on).
mooCache(documentation('Day', string('"The Class of all calendar Days."')), documentation('Day', string('"The Class of all calendar Days."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4640, 'Anonymous', on).
mooCache(=>(instance(A, 'Day'), duration(A, 'DayDuration')), and(entails(not(duration(A, 'DayDuration')), not(instance(A, 'Day'))), entails(instance(A, 'Day'), duration(A, 'DayDuration'))), [domainV(A, ['$instanceof':'Day', duration:1]), domainV(B, []), forall(A)], ['DAY'=A], 'Merge', 'TEMPORAL CONCEPTS', 4642, 'Anonymous', on).
mooCache(subclass('Monday', 'Day'), subclass('Monday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4644, 'Anonymous', on).
mooCache(documentation('Monday', string('"The Class of all calendar Mondays."')), documentation('Monday', string('"The Class of all calendar Mondays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4646, 'Anonymous', on).
mooCache(subclass('Tuesday', 'Day'), subclass('Tuesday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4648, 'Anonymous', on).
mooCache(documentation('Tuesday', string('"The Class of all calendar Tuesdays."')), documentation('Tuesday', string('"The Class of all calendar Tuesdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4650, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Monday'), and(instance(B, 'Tuesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Monday'), and(instance(B, 'Tuesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Tuesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Monday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Monday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Tuesday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Monday'), and(instance(B, 'Tuesday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Monday'), and(instance(B, 'Tuesday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Monday'), and(instance(B, 'Tuesday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Tuesday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Monday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'Merge', 'TEMPORAL CONCEPTS', 4652, 'Anonymous', on).
mooCache(subclass('Wednesday', 'Day'), subclass('Wednesday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4654, 'Anonymous', on).
mooCache(documentation('Wednesday', string('"The Class of all calendar Wednesdays."')), documentation('Wednesday', string('"The Class of all calendar Wednesdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4656, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Tuesday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Wednesday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Tuesday'), and(instance(B, 'Wednesday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Wednesday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Tuesday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'Merge', 'TEMPORAL CONCEPTS', 4658, 'Anonymous', on).
mooCache(subclass('Thursday', 'Day'), subclass('Thursday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4660, 'Anonymous', on).
mooCache(documentation('Thursday', string('"The Class of all calendar Thursdays."')), documentation('Thursday', string('"The Class of all calendar Thursdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4662, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Wednesday'), and(instance(B, 'Thursday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Wednesday'), and(instance(B, 'Thursday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Thursday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Wednesday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Wednesday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Thursday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Wednesday'), and(instance(B, 'Thursday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Wednesday'), and(instance(B, 'Thursday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Wednesday'), and(instance(B, 'Thursday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Thursday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Wednesday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'Merge', 'TEMPORAL CONCEPTS', 4664, 'Anonymous', on).
mooCache(subclass('Friday', 'Day'), subclass('Friday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4666, 'Anonymous', on).
mooCache(documentation('Friday', string('"The Class of all calendar Fridays."')), documentation('Friday', string('"The Class of all calendar Fridays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4668, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Friday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Thursday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Friday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Thursday'), and(instance(B, 'Friday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Friday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Thursday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'Merge', 'TEMPORAL CONCEPTS', 4670, 'Anonymous', on).
mooCache(subclass('Saturday', 'Day'), subclass('Saturday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4672, 'Anonymous', on).
mooCache(documentation('Saturday', string('"The Class of all calendar Saturdays."')), documentation('Saturday', string('"The Class of all calendar Saturdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4674, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Friday'), and(instance(B, 'Saturday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Friday'), and(instance(B, 'Saturday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Saturday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Friday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Friday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Saturday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Friday'), and(instance(B, 'Saturday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Friday'), and(instance(B, 'Saturday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Friday'), and(instance(B, 'Saturday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Saturday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Friday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'Merge', 'TEMPORAL CONCEPTS', 4676, 'Anonymous', on).
mooCache(subclass('Sunday', 'Day'), subclass('Sunday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4678, 'Anonymous', on).
mooCache(documentation('Sunday', string('"The Class of all calendar Sundays."')), documentation('Sunday', string('"The Class of all calendar Sundays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4680, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Sunday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(A, 'Saturday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(C, 'Week'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(B, 'Sunday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(temporalPart(A, C), temporalPart(B, C))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), temporalPart(B, C))))), not(temporalPart(A, C))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Saturday'), and(instance(B, 'Sunday'), and(instance(C, 'Week'), temporalPart(A, C))))), not(temporalPart(B, C)))))))), [domainV(C, ['$instanceof':'Week', temporalPart:2]), domainV(B, ['$instanceof':'Sunday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Saturday', meetsTemporally:1, temporalPart:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['DAY1'=A, 'DAY2'=B, 'WEEK'=C], 'Merge', 'TEMPORAL CONCEPTS', 4682, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Sunday'), and(instance(B, 'Monday'), and(instance(C, 'Week'), and(instance(D, 'Week'), and(temporalPart(A, C), and(temporalPart(B, D), meetsTemporally(C, D))))))), meetsTemporally(A, B)), and(entails(and(instance(A, 'Sunday'), and(instance(B, 'Monday'), and(instance(C, 'Week'), and(instance(D, 'Week'), and(temporalPart(A, C), and(temporalPart(B, D), meetsTemporally(C, D))))))), meetsTemporally(A, B)), and(entails(and(not(meetsTemporally(A, B)), and(instance(B, 'Monday'), and(instance(C, 'Week'), and(instance(D, 'Week'), and(temporalPart(A, C), and(temporalPart(B, D), meetsTemporally(C, D))))))), not(instance(A, 'Sunday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Sunday'), and(instance(C, 'Week'), and(instance(D, 'Week'), and(temporalPart(A, C), and(temporalPart(B, D), meetsTemporally(C, D))))))), not(instance(B, 'Monday'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Sunday'), and(instance(B, 'Monday'), and(instance(D, 'Week'), and(temporalPart(A, C), and(temporalPart(B, D), meetsTemporally(C, D))))))), not(instance(C, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Sunday'), and(instance(B, 'Monday'), and(instance(C, 'Week'), and(temporalPart(A, C), and(temporalPart(B, D), meetsTemporally(C, D))))))), not(instance(D, 'Week'))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Sunday'), and(instance(B, 'Monday'), and(instance(C, 'Week'), and(instance(D, 'Week'), and(temporalPart(B, D), meetsTemporally(C, D))))))), not(temporalPart(A, C))), and(entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Sunday'), and(instance(B, 'Monday'), and(instance(C, 'Week'), and(instance(D, 'Week'), and(temporalPart(A, C), meetsTemporally(C, D))))))), not(temporalPart(B, D))), entails(and(not(meetsTemporally(A, B)), and(instance(A, 'Sunday'), and(instance(B, 'Monday'), and(instance(C, 'Week'), and(instance(D, 'Week'), and(temporalPart(A, C), temporalPart(B, D))))))), not(meetsTemporally(C, D)))))))))), [domainV(D, ['$instanceof':'Week', meetsTemporally:2, temporalPart:2]), domainV(C, ['$instanceof':'Week', meetsTemporally:1, temporalPart:2]), domainV(B, ['$instanceof':'Monday', meetsTemporally:2, temporalPart:1]), domainV(A, ['$instanceof':'Sunday', meetsTemporally:1, temporalPart:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['DAY1'=A, 'DAY2'=B, 'WEEK1'=C, 'WEEK2'=D], 'Merge', 'TEMPORAL CONCEPTS', 4684, 'Anonymous', on).
mooCache(subclass('Week', 'TimeInterval'), subclass('Week', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4686, 'Anonymous', on).
mooCache(documentation('Week', string('"The Class of all calendar weeks."')), documentation('Week', string('"The Class of all calendar weeks."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4688, 'Anonymous', on).
mooCache(=>(instance(A, 'Week'), duration(A, 'WeekDuration')), and(entails(not(duration(A, 'WeekDuration')), not(instance(A, 'Week'))), entails(instance(A, 'Week'), duration(A, 'WeekDuration'))), [domainV(A, ['$instanceof':'Week', duration:1]), domainV(B, []), forall(A)], ['WEEK'=A], 'Merge', 'TEMPORAL CONCEPTS', 4690, 'Anonymous', on).
mooCache(subclass('Hour', 'TimeInterval'), subclass('Hour', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4692, 'Anonymous', on).
mooCache(relatedInternalConcept('Hour', 'HourFn'), relatedInternalConcept('Hour', 'HourFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4694, 'Anonymous', on).
mooCache(relatedInternalConcept('Hour', 'HourDuration'), relatedInternalConcept('Hour', 'HourDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4696, 'Anonymous', on).
mooCache(documentation('Hour', string('"The Class of all clock Hours."')), documentation('Hour', string('"The Class of all clock Hours."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4698, 'Anonymous', on).
mooCache(=>(instance(A, 'Hour'), duration(A, 'HourDuration')), and(entails(not(duration(A, 'HourDuration')), not(instance(A, 'Hour'))), entails(instance(A, 'Hour'), duration(A, 'HourDuration'))), [domainV(A, ['$instanceof':'Hour', duration:1]), domainV(B, []), forall(A)], ['HOUR'=A], 'Merge', 'TEMPORAL CONCEPTS', 4700, 'Anonymous', on).
mooCache(subclass('Minute', 'TimeInterval'), subclass('Minute', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4702, 'Anonymous', on).
mooCache(relatedInternalConcept('Minute', 'MinuteFn'), relatedInternalConcept('Minute', 'MinuteFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4704, 'Anonymous', on).
mooCache(relatedInternalConcept('Minute', 'MinuteDuration'), relatedInternalConcept('Minute', 'MinuteDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4706, 'Anonymous', on).
mooCache(documentation('Minute', string('"The Class of all clock Minutes."')), documentation('Minute', string('"The Class of all clock Minutes."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4708, 'Anonymous', on).
mooCache(=>(instance(A, 'Minute'), duration(A, 'MinuteDuration')), and(entails(not(duration(A, 'MinuteDuration')), not(instance(A, 'Minute'))), entails(instance(A, 'Minute'), duration(A, 'MinuteDuration'))), [domainV(A, ['$instanceof':'Minute', duration:1]), domainV(B, []), forall(A)], ['MINUTE'=A], 'Merge', 'TEMPORAL CONCEPTS', 4710, 'Anonymous', on).
mooCache(subclass('Second', 'TimeInterval'), subclass('Second', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4712, 'Anonymous', on).
mooCache(relatedInternalConcept('Second', 'SecondDuration'), relatedInternalConcept('Second', 'SecondDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4714, 'Anonymous', on).
mooCache(relatedInternalConcept('Second', 'SecondFn'), relatedInternalConcept('Second', 'SecondFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4716, 'Anonymous', on).
mooCache(documentation('Second', string('"The Class of all clock Seconds."')), documentation('Second', string('"The Class of all clock Seconds."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4718, 'Anonymous', on).
mooCache(=>(instance(A, 'Second'), duration(A, 'SecondDuration')), and(entails(not(duration(A, 'SecondDuration')), not(instance(A, 'Second'))), entails(instance(A, 'Second'), duration(A, 'SecondDuration'))), [domainV(A, ['$instanceof':'Second', duration:1]), domainV(B, []), forall(A)], ['SECOND'=A], 'Merge', 'TEMPORAL CONCEPTS', 4720, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'MEREOTOPOLOGY', 4732, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'MEREOTOPOLOGY', 4735, 'Anonymous', on).
mooCache(instance(connected, 'BinaryPredicate'), instance(connected, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4742, 'Anonymous', on).
mooCache(instance(connected, 'SpatialRelation'), instance(connected, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4744, 'Anonymous', on).
mooCache(instance(connected, 'ReflexiveRelation'), instance(connected, 'ReflexiveRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4746, 'Anonymous', on).
mooCache(instance(connected, 'SymmetricRelation'), instance(connected, 'SymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4748, 'Anonymous', on).
mooCache(domain(connected, 1, 'Object'), domain(connected, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4750, 'Anonymous', on).
mooCache(domain(connected, 2, 'Object'), domain(connected, 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4752, 'Anonymous', on).
mooCache(documentation(connected, string('"(connected ?OBJ1 ?OBJ2) means that ?OBJ1   meetsSpatially ?OBJ2 or that ?OBJ1 overlapsSpatially ?OBJ2."')), documentation(connected, string('"(connected ?OBJ1 ?OBJ2) means that ?OBJ1   meetsSpatially ?OBJ2 or that ?OBJ1 overlapsSpatially ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4754, 'Anonymous', on).
mooCache(=>(connected(A, B), or(meetsSpatially(A, B), overlapsSpatially(A, B))), and(entails(and(not(meetsSpatially(A, B)), not(overlapsSpatially(A, B))), not(connected(A, B))), and(entails(and(connected(A, B), not(overlapsSpatially(A, B))), meetsSpatially(A, B)), entails(and(connected(A, B), not(meetsSpatially(A, B))), overlapsSpatially(A, B)))), [domainV(B, [connected:2, meetsSpatially:2, overlapsSpatially:2]), domainV(A, [connected:1, meetsSpatially:1, overlapsSpatially:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'MEREOTOPOLOGY', 4756, 'Anonymous', on).
mooCache(<=>(instance(A, 'SelfConnectedObject'), forall(B, forall(C, =>(equal(A, 'MereologicalSumFn'(C, B)), connected(C, B))))), and(and(entails(not(instance(A, 'SelfConnectedObject')), holds('MereologicalSumFn', C, B, A)), and(entails(and(and(not(instance(A, 'SelfConnectedObject')), '$existential'(B, '?PART2', not(forall(C, =>(holds('MereologicalSumFn', C, '?PART2', A), connected(C, '?PART2')))))), '$existential'(C, '?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B))))), not(connected(C, B))), entails(or(not(holds('MereologicalSumFn', C, B, A)), connected(C, B)), instance(A, 'SelfConnectedObject')))), and(entails(and(and(holds('MereologicalSumFn', C, B, A), not(connected(C, B))), '$existential'(C, '?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B))))), not(instance(A, 'SelfConnectedObject'))), and(entails(and(and(and(instance(A, 'SelfConnectedObject'), not(connected(C, B))), '$existential'(B, '?PART2', not(forall(C, =>(holds('MereologicalSumFn', C, '?PART2', A), connected(C, '?PART2')))))), '$existential'(C, '?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B))))), not(holds('MereologicalSumFn', C, B, A))), entails(and(instance(A, 'SelfConnectedObject'), holds('MereologicalSumFn', C, B, A)), connected(C, B))))), [domainV(C, ['MereologicalSumFn':1, connected:1]), domainV(B, ['MereologicalSumFn':2, connected:2]), domainV(A, ['$instanceof':'SelfConnectedObject', 'MereologicalSumFn':3]), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(B, '$existential'('?PART2', not(forall(C, =>(holds('MereologicalSumFn', C, '?PART2', A), connected(C, '?PART2')))))), replaceConsVar(C, '$existential'('?PART1', not(=>(holds('MereologicalSumFn', '?PART1', B, A), connected('?PART1', B)))))], ['OBJ'=A, 'PART1'=C, 'PART2'=B], 'Merge', 'MEREOTOPOLOGY', 4758, 'Anonymous', on).
mooCache(instance(connects, 'SpatialRelation'), instance(connects, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4760, 'Anonymous', on).
mooCache(instance(connects, 'TernaryPredicate'), instance(connects, 'TernaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4762, 'Anonymous', on).
mooCache(domain(connects, 1, 'Object'), domain(connects, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4764, 'Anonymous', on).
mooCache(domain(connects, 2, 'Object'), domain(connects, 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4766, 'Anonymous', on).
mooCache(domain(connects, 3, 'Object'), domain(connects, 3, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4768, 'Anonymous', on).
mooCache(documentation(connects, string('"The relationship between three things, when one of   the three things connects the other two.  More formally, (connects ?OBJ1   ?OBJ2 ?OBJ3) means that (connected ?OBJ1 ?OBJ2) and (connected ?OBJ1 ?OBJ3)   and not (connected ?OBJ2 ?OBJ3)."')), documentation(connects, string('"The relationship between three things, when one of   the three things connects the other two.  More formally, (connects ?OBJ1   ?OBJ2 ?OBJ3) means that (connected ?OBJ1 ?OBJ2) and (connected ?OBJ1 ?OBJ3)   and not (connected ?OBJ2 ?OBJ3)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4770, 'Anonymous', on).
mooCache(<=>(connects(A, B, C), and(connected(A, B), and(connected(A, C), not(connected(B, C))))), and(and(entails(connects(A, B, C), connected(A, B)), and(entails(connects(A, B, C), connected(A, C)), and(entails(connects(A, B, C), not(connected(B, C))), entails(or(not(connected(A, B)), or(not(connected(A, C)), connected(B, C))), not(connects(A, B, C)))))), and(entails(and(connected(A, B), and(connected(A, C), not(connected(B, C)))), connects(A, B, C)), and(entails(and(not(connects(A, B, C)), and(connected(A, C), not(connected(B, C)))), not(connected(A, B))), and(entails(and(not(connects(A, B, C)), and(connected(A, B), not(connected(B, C)))), not(connected(A, C))), entails(and(not(connects(A, B, C)), and(connected(A, B), connected(A, C))), connected(B, C)))))), [domainV(C, [connected:2, connects:3]), domainV(B, [connected:1, connected:2, connects:2]), domainV(A, [connected:1, connects:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'OBJ2'=B, 'OBJ3'=C], 'Merge', 'MEREOTOPOLOGY', 4772, 'Anonymous', on).
mooCache(subrelation(meetsSpatially, connected), subrelation(meetsSpatially, connected), [], [], 'Merge', 'MEREOTOPOLOGY', 4774, 'Anonymous', on).
mooCache(disjointRelation(meetsSpatially, overlapsSpatially), disjointRelation(meetsSpatially, overlapsSpatially), [], [], 'Merge', 'MEREOTOPOLOGY', 4776, 'Anonymous', on).
mooCache(documentation(meetsSpatially, string('"(meetsSpatially ?OBJ1 ?OBJ2) means that   ?OBJ1 and ?OBJ2 are connected but that neither ?OBJ1 nor ?OBJ2   overlapsSpatially the other."')), documentation(meetsSpatially, string('"(meetsSpatially ?OBJ1 ?OBJ2) means that   ?OBJ1 and ?OBJ2 are connected but that neither ?OBJ1 nor ?OBJ2   overlapsSpatially the other."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4778, 'Anonymous', on).
mooCache(subrelation(overlapsSpatially, connected), subrelation(overlapsSpatially, connected), [], [], 'Merge', 'MEREOTOPOLOGY', 4780, 'Anonymous', on).
mooCache(documentation(overlapsSpatially, string('"(overlapsSpatially ?OBJ1 ?OBJ2) means   that the Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a   reflexive and symmetric (but not transitive) relation."')), documentation(overlapsSpatially, string('"(overlapsSpatially ?OBJ1 ?OBJ2) means   that the Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a   reflexive and symmetric (but not transitive) relation."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4782, 'Anonymous', on).
mooCache(<=>(overlapsSpatially(A, B), exists(C, and(part(C, A), part(C, B)))), and(and(entails(and(overlapsSpatially(A, B), '$existential'(C, '?OBJ3', and(part('?OBJ3', A), part('?OBJ3', B)))), part(C, A)), and(entails(and(overlapsSpatially(A, B), '$existential'(C, '?OBJ3', and(part('?OBJ3', A), part('?OBJ3', B)))), part(C, B)), entails(or(not(part(C, A)), not(part(C, B))), not(overlapsSpatially(A, B))))), and(entails(and(part(C, A), part(C, B)), overlapsSpatially(A, B)), and(entails(and(not(overlapsSpatially(A, B)), part(C, B)), not(part(C, A))), entails(and(not(overlapsSpatially(A, B)), part(C, A)), not(part(C, B)))))), [domainV(C, [part:1]), domainV(B, [overlapsSpatially:2, part:2]), domainV(A, [overlapsSpatially:1, part:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?OBJ3', and(part('?OBJ3', A), part('?OBJ3', B)))), forall(C)], ['OBJ1'=A, 'OBJ2'=B, 'OBJ3'=C], 'Merge', 'MEREOTOPOLOGY', 4784, 'Anonymous', on).
mooCache(=>(forall(A, =>(part(A, B), overlapsSpatially(A, C))), part(B, C)), and(and(entails(not(part(B, C)), part(A, B)), entails(not(part(A, B)), part(B, C))), and(entails(and(not(part(B, C)), '$existential'(A, '?OBJ3', not(=>(part('?OBJ3', B), overlapsSpatially('?OBJ3', C))))), not(overlapsSpatially(A, C))), entails(overlapsSpatially(A, C), part(B, C)))), [domainV(C, [overlapsSpatially:2, part:2]), domainV(B, [part:1, part:2]), domainV(A, [overlapsSpatially:1, part:1]), domainV(D, []), forall(B), forall(C), replaceConsVar(A, '$existential'('?OBJ3', not(=>(part('?OBJ3', B), overlapsSpatially('?OBJ3', C)))))], ['OBJ3'=A, 'OBJ1'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 4786, 'Anonymous', on).
mooCache(=>(partlyLocated(A, B), overlapsSpatially(A, B)), and(entails(not(overlapsSpatially(A, B)), not(partlyLocated(A, B))), entails(partlyLocated(A, B), overlapsSpatially(A, B))), [domainV(B, [overlapsSpatially:2, partlyLocated:2]), domainV(A, [overlapsSpatially:1, partlyLocated:1]), domainV(C, []), forall(A), forall(B)], ['OBJ'=A, 'REGION'=B], 'Merge', 'MEREOTOPOLOGY', 4788, 'Anonymous', on).
mooCache(=>(and(member(A, B), member(C, B)), not(overlapsSpatially(A, C))), and(entails(and(member(A, B), member(C, B)), not(overlapsSpatially(A, C))), and(entails(and(overlapsSpatially(A, C), member(C, B)), not(member(A, B))), entails(and(overlapsSpatially(A, C), member(A, B)), not(member(C, B))))), [domainV(C, [member:1, overlapsSpatially:2]), domainV(B, [member:2]), domainV(A, [member:1, overlapsSpatially:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'COLL'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 4790, 'Anonymous', on).
mooCache(=>(and(instance(A, 'CaseRole'), holds(A, B, C)), exists(D, overlapsSpatially('WhereFn'(B, D), C))), and(entails(and(and(instance(A, 'CaseRole'), holds(A, B, C)), '$existential'(D, '?TIME', overlapsSpatially('WhereFn'(B, '?TIME'), C))), overlapsSpatially('WhereFn'(B, D), C)), and(entails(and(not(overlapsSpatially('WhereFn'(B, D), C)), holds(A, B, C)), not(instance(A, 'CaseRole'))), entails(and(not(overlapsSpatially('WhereFn'(B, D), C)), instance(A, 'CaseRole')), not(holds(A, B, C))))), [domainV(D, ['WhereFn':2]), domainV(C, [overlapsSpatially:2, A:2]), domainV(B, ['WhereFn':1, A:1]), domainV(A, ['$instanceof':'CaseRole', holds:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?TIME', overlapsSpatially('WhereFn'(B, '?TIME'), C)))], ['REL'=A, 'PROCESS'=B, 'OBJ'=C, 'TIME'=D], 'Merge', 'MEREOTOPOLOGY', 4792, 'Anonymous', on).
mooCache(subrelation(overlapsPartially, overlapsSpatially), subrelation(overlapsPartially, overlapsSpatially), [], [], 'Merge', 'MEREOTOPOLOGY', 4794, 'Anonymous', on).
mooCache(documentation(overlapsPartially, string('"(overlapsPartially ?OBJ1 ?OBJ2) means   that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2   is a part of the other."')), documentation(overlapsPartially, string('"(overlapsPartially ?OBJ1 ?OBJ2) means   that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2   is a part of the other."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4796, 'Anonymous', on).
mooCache(=>(overlapsPartially(A, B), and(not(part(A, B)), not(part(B, A)))), and(and(entails(part(A, B), not(overlapsPartially(A, B))), entails(overlapsPartially(A, B), not(part(A, B)))), and(entails(part(B, A), not(overlapsPartially(A, B))), entails(overlapsPartially(A, B), not(part(B, A))))), [domainV(B, [overlapsPartially:2, part:1, part:2]), domainV(A, [overlapsPartially:1, part:1, part:2]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'MEREOTOPOLOGY', 4798, 'Anonymous', on).
mooCache(instance(superficialPart, 'BinaryPredicate'), instance(superficialPart, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4800, 'Anonymous', on).
mooCache(instance(superficialPart, 'SpatialRelation'), instance(superficialPart, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4802, 'Anonymous', on).
mooCache(subrelation(superficialPart, part), subrelation(superficialPart, part), [], [], 'Merge', 'MEREOTOPOLOGY', 4804, 'Anonymous', on).
mooCache(documentation(superficialPart, string('"(superficialPart ?OBJ1 ?OBJ2)   means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own   (or, intuitively, that only overlaps those parts of ?OBJ2 that are   externally connected with the geometric complement of ?OBJ2). This too   is a transitive relation closed under MereologicalSumFn and   MereologicalProductFn."')), documentation(superficialPart, string('"(superficialPart ?OBJ1 ?OBJ2)   means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own   (or, intuitively, that only overlaps those parts of ?OBJ2 that are   externally connected with the geometric complement of ?OBJ2). This too   is a transitive relation closed under MereologicalSumFn and   MereologicalProductFn."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4806, 'Anonymous', on).
mooCache(=>(superficialPart(A, B), and(not(interiorPart(A, B)), not(exists(C, interiorPart(C, A))))), and(and(entails(interiorPart(A, B), not(superficialPart(A, B))), entails(superficialPart(A, B), not(interiorPart(A, B)))), and(entails(interiorPart(C, A), not(superficialPart(A, B))), entails(superficialPart(A, B), not(interiorPart(C, A))))), [domainV(C, [interiorPart:1]), domainV(B, [interiorPart:2, superficialPart:2]), domainV(A, [interiorPart:1, interiorPart:2, superficialPart:1]), domainV(D, []), forall(A), forall(B), forall(C), forall(C)], ['OBJ1'=A, 'OBJ2'=B, 'OBJ3'=C], 'Merge', 'MEREOTOPOLOGY', 4808, 'Anonymous', on).
mooCache(subrelation(surface, superficialPart), subrelation(surface, superficialPart), [], [], 'Merge', 'MEREOTOPOLOGY', 4810, 'Anonymous', on).
mooCache(documentation(surface, string('"(surface ?OBJ1 ?OBJ2) means that ?OBJ1   is a maximally connected superficialPart of ?OBJ2."')), documentation(surface, string('"(surface ?OBJ1 ?OBJ2) means that ?OBJ1   is a maximally connected superficialPart of ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4812, 'Anonymous', on).
mooCache(=>(surface(A, B), and(instance(A, 'SelfConnectedObject'), forall(C, =>(superficialPart(C, B), part(C, A))))), and(and(entails(not(instance(A, 'SelfConnectedObject')), not(surface(A, B))), entails(surface(A, B), instance(A, 'SelfConnectedObject'))), and(entails(and(superficialPart(C, B), not(part(C, A))), not(surface(A, B))), and(entails(and(surface(A, B), not(part(C, A))), not(superficialPart(C, B))), entails(and(surface(A, B), superficialPart(C, B)), part(C, A))))), [domainV(C, [part:1, superficialPart:1]), domainV(B, [superficialPart:2, surface:2]), domainV(A, ['$instanceof':'SelfConnectedObject', part:2, surface:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'OBJ2'=B, 'OBJ3'=C], 'Merge', 'MEREOTOPOLOGY', 4814, 'Anonymous', on).
mooCache(subrelation(interiorPart, part), subrelation(interiorPart, part), [], [], 'Merge', 'MEREOTOPOLOGY', 4816, 'Anonymous', on).
mooCache(documentation(interiorPart, string('"(interiorPart ?OBJ1 ?OBJ2) means   that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and   any superficialPart ?OBJ2."')), documentation(interiorPart, string('"(interiorPart ?OBJ1 ?OBJ2) means   that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and   any superficialPart ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4818, 'Anonymous', on).
mooCache(<=>(interiorPart(A, B), forall(C, =>(superficialPart(C, B), not(overlapsSpatially(A, C))))), and(and(entails(not(interiorPart(A, B)), superficialPart(C, B)), and(entails(not(interiorPart(A, B)), overlapsSpatially(A, C)), entails(or(not(superficialPart(C, B)), not(overlapsSpatially(A, C))), interiorPart(A, B)))), and(entails(and(superficialPart(C, B), overlapsSpatially(A, C)), not(interiorPart(A, B))), and(entails(and(and(interiorPart(A, B), overlapsSpatially(A, C)), '$existential'(C, '?PART', not(=>(superficialPart('?PART', B), not(overlapsSpatially(A, '?PART')))))), not(superficialPart(C, B))), entails(and(and(interiorPart(A, B), superficialPart(C, B)), '$existential'(C, '?PART', not(=>(superficialPart('?PART', B), not(overlapsSpatially(A, '?PART')))))), not(overlapsSpatially(A, C)))))), [domainV(C, [overlapsSpatially:2, superficialPart:1]), domainV(B, [interiorPart:2, superficialPart:2]), domainV(A, [interiorPart:1, overlapsSpatially:1]), domainV(D, []), forall(A), forall(B), forall(C), replaceConsVar(C, '$existential'('?PART', not(=>(superficialPart('?PART', B), not(overlapsSpatially(A, '?PART'))))))], ['OBJ1'=A, 'OBJ2'=B, 'PART'=C], 'Merge', 'MEREOTOPOLOGY', 4820, 'Anonymous', on).
mooCache(instance('MereologicalSumFn', 'SpatialRelation'), instance('MereologicalSumFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4822, 'Anonymous', on).
mooCache(instance('MereologicalSumFn', 'BinaryFunction'), instance('MereologicalSumFn', 'BinaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4824, 'Anonymous', on).
mooCache(domain('MereologicalSumFn', 1, 'Object'), domain('MereologicalSumFn', 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4826, 'Anonymous', on).
mooCache(domain('MereologicalSumFn', 2, 'Object'), domain('MereologicalSumFn', 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4828, 'Anonymous', on).
mooCache(range('MereologicalSumFn', 'Object'), range('MereologicalSumFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4830, 'Anonymous', on).
mooCache(relatedInternalConcept('MereologicalSumFn', 'MereologicalProductFn'), relatedInternalConcept('MereologicalSumFn', 'MereologicalProductFn'), [], [], 'Merge', 'MEREOTOPOLOGY', 4832, 'Anonymous', on).
mooCache(relatedInternalConcept('MereologicalSumFn', 'MereologicalDifferenceFn'), relatedInternalConcept('MereologicalSumFn', 'MereologicalDifferenceFn'), [], [], 'Merge', 'MEREOTOPOLOGY', 4834, 'Anonymous', on).
mooCache(documentation('MereologicalSumFn', string('"(MereologicalSumFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to either   ?OBJ1 or ?OBJ2."')), documentation('MereologicalSumFn', string('"(MereologicalSumFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to either   ?OBJ1 or ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4836, 'Anonymous', on).
mooCache(=>(equal(A, 'MereologicalSumFn'(B, C)), forall(D, <=>(part(D, A), or(part(D, B), part(D, C))))), and(entails(and(or(part(D, B), part(D, C)), and(not(part(D, B)), not(part(D, C)))), not(holds('MereologicalSumFn', B, C, A))), and(and(entails(and(or(part(D, B), part(D, C)), not(part(D, A))), not(holds('MereologicalSumFn', B, C, A))), and(entails(and(holds('MereologicalSumFn', B, C, A), not(part(D, A))), not(part(D, B))), and(entails(and(holds('MereologicalSumFn', B, C, A), not(part(D, A))), not(part(D, C))), entails(and(holds('MereologicalSumFn', B, C, A), or(part(D, B), part(D, C))), part(D, A))))), and(entails(and(part(D, A), not(part(D, A))), not(holds('MereologicalSumFn', B, C, A))), and(entails(and(part(D, A), and(not(part(D, B)), not(part(D, C)))), not(holds('MereologicalSumFn', B, C, A))), and(entails(and(holds('MereologicalSumFn', B, C, A), and(not(part(D, B)), not(part(D, C)))), not(part(D, A))), and(entails(and(holds('MereologicalSumFn', B, C, A), and(part(D, A), not(part(D, C)))), part(D, B)), entails(and(holds('MereologicalSumFn', B, C, A), and(part(D, A), not(part(D, B)))), part(D, C)))))))), [domainV(D, [part:1]), domainV(C, ['MereologicalSumFn':2, part:2]), domainV(B, ['MereologicalSumFn':1, part:2]), domainV(A, ['MereologicalSumFn':3, part:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ3'=A, 'OBJ1'=B, 'OBJ2'=C, 'PART'=D], 'Merge', 'MEREOTOPOLOGY', 4838, 'Anonymous', on).
mooCache(instance('MereologicalProductFn', 'SpatialRelation'), instance('MereologicalProductFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4840, 'Anonymous', on).
mooCache(instance('MereologicalProductFn', 'BinaryFunction'), instance('MereologicalProductFn', 'BinaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4842, 'Anonymous', on).
mooCache(domain('MereologicalProductFn', 1, 'Object'), domain('MereologicalProductFn', 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4844, 'Anonymous', on).
mooCache(domain('MereologicalProductFn', 2, 'Object'), domain('MereologicalProductFn', 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4846, 'Anonymous', on).
mooCache(range('MereologicalProductFn', 'Object'), range('MereologicalProductFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4848, 'Anonymous', on).
mooCache(relatedInternalConcept('MereologicalProductFn', 'MereologicalDifferenceFn'), relatedInternalConcept('MereologicalProductFn', 'MereologicalDifferenceFn'), [], [], 'Merge', 'MEREOTOPOLOGY', 4850, 'Anonymous', on).
mooCache(documentation('MereologicalProductFn', string('"(MereologicalProductFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to both ?OBJ1   and ?OBJ2."')), documentation('MereologicalProductFn', string('"(MereologicalProductFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to both ?OBJ1   and ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4852, 'Anonymous', on).
mooCache(=>(equal(A, 'MereologicalProductFn'(B, C)), forall(D, <=>(part(D, A), and(part(D, B), part(D, C))))), and(entails(and(or(not(part(D, B)), not(part(D, C))), and(part(D, B), part(D, C))), not(holds('MereologicalProductFn', B, C, A))), and(and(entails(and(or(not(part(D, B)), not(part(D, C))), part(D, A)), not(holds('MereologicalProductFn', B, C, A))), and(entails(and(holds('MereologicalProductFn', B, C, A), part(D, A)), part(D, B)), and(entails(and(holds('MereologicalProductFn', B, C, A), part(D, A)), part(D, C)), entails(and(holds('MereologicalProductFn', B, C, A), or(not(part(D, B)), not(part(D, C)))), not(part(D, A)))))), and(entails(and(not(part(D, A)), part(D, A)), not(holds('MereologicalProductFn', B, C, A))), and(entails(and(not(part(D, A)), and(part(D, B), part(D, C))), not(holds('MereologicalProductFn', B, C, A))), and(entails(and(holds('MereologicalProductFn', B, C, A), and(part(D, B), part(D, C))), part(D, A)), and(entails(and(holds('MereologicalProductFn', B, C, A), and(not(part(D, A)), part(D, C))), not(part(D, B))), entails(and(holds('MereologicalProductFn', B, C, A), and(not(part(D, A)), part(D, B))), not(part(D, C))))))))), [domainV(D, [part:1]), domainV(C, ['MereologicalProductFn':2, part:2]), domainV(B, ['MereologicalProductFn':1, part:2]), domainV(A, ['MereologicalProductFn':3, part:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ3'=A, 'OBJ1'=B, 'OBJ2'=C, 'PART'=D], 'Merge', 'MEREOTOPOLOGY', 4854, 'Anonymous', on).
mooCache(instance('MereologicalDifferenceFn', 'SpatialRelation'), instance('MereologicalDifferenceFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4856, 'Anonymous', on).
mooCache(instance('MereologicalDifferenceFn', 'BinaryFunction'), instance('MereologicalDifferenceFn', 'BinaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4858, 'Anonymous', on).
mooCache(domain('MereologicalDifferenceFn', 1, 'Object'), domain('MereologicalDifferenceFn', 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4860, 'Anonymous', on).
mooCache(domain('MereologicalDifferenceFn', 2, 'Object'), domain('MereologicalDifferenceFn', 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4862, 'Anonymous', on).
mooCache(range('MereologicalDifferenceFn', 'Object'), range('MereologicalDifferenceFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4864, 'Anonymous', on).
mooCache(documentation('MereologicalDifferenceFn', string('"(MereologicalDifferenceFn ?OBJ1   ?OBJ2) denotes the Object consisting of the parts which belong to ?OBJ1   and not to ?OBJ2."')), documentation('MereologicalDifferenceFn', string('"(MereologicalDifferenceFn ?OBJ1   ?OBJ2) denotes the Object consisting of the parts which belong to ?OBJ1   and not to ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4866, 'Anonymous', on).
mooCache(=>(equal(A, 'MereologicalDifferenceFn'(B, C)), forall(D, <=>(part(D, A), and(part(D, B), not(part(D, C)))))), and(entails(and(or(not(part(D, B)), part(D, C)), and(part(D, B), not(part(D, C)))), not(holds('MereologicalDifferenceFn', B, C, A))), and(and(entails(and(or(not(part(D, B)), part(D, C)), part(D, A)), not(holds('MereologicalDifferenceFn', B, C, A))), and(entails(and(holds('MereologicalDifferenceFn', B, C, A), part(D, A)), part(D, B)), and(entails(and(holds('MereologicalDifferenceFn', B, C, A), part(D, A)), not(part(D, C))), entails(and(holds('MereologicalDifferenceFn', B, C, A), or(not(part(D, B)), part(D, C))), not(part(D, A)))))), and(entails(and(not(part(D, A)), part(D, A)), not(holds('MereologicalDifferenceFn', B, C, A))), and(entails(and(not(part(D, A)), and(part(D, B), not(part(D, C)))), not(holds('MereologicalDifferenceFn', B, C, A))), and(entails(and(holds('MereologicalDifferenceFn', B, C, A), and(part(D, B), not(part(D, C)))), part(D, A)), and(entails(and(holds('MereologicalDifferenceFn', B, C, A), and(not(part(D, A)), not(part(D, C)))), not(part(D, B))), entails(and(holds('MereologicalDifferenceFn', B, C, A), and(not(part(D, A)), part(D, B))), part(D, C)))))))), [domainV(D, [part:1]), domainV(C, ['MereologicalDifferenceFn':2, part:2]), domainV(B, ['MereologicalDifferenceFn':1, part:2]), domainV(A, ['MereologicalDifferenceFn':3, part:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ3'=A, 'OBJ1'=B, 'OBJ2'=C, 'PART'=D], 'Merge', 'MEREOTOPOLOGY', 4868, 'Anonymous', on).
mooCache(instance(hole, 'BinaryPredicate'), instance(hole, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4874, 'Anonymous', on).
mooCache(instance(hole, 'SpatialRelation'), instance(hole, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4876, 'Anonymous', on).
mooCache(instance(hole, 'AsymmetricRelation'), instance(hole, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4878, 'Anonymous', on).
mooCache(domain(hole, 1, 'Hole'), domain(hole, 1, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 4880, 'Anonymous', on).
mooCache(domain(hole, 2, 'Object'), domain(hole, 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4882, 'Anonymous', on).
mooCache(documentation(hole, string('"(hole ?HOLE ?OBJ) means that ?HOLE is a   Hole in ?OBJ.  A Hole is a fillable body located at the   surface an Object."')), documentation(hole, string('"(hole ?HOLE ?OBJ) means that ?HOLE is a   Hole in ?OBJ.  A Hole is a fillable body located at the   surface an Object."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4884, 'Anonymous', on).
mooCache(subclass('Hole', 'Region'), subclass('Hole', 'Region'), [], [], 'Merge', 'MEREOTOPOLOGY', 4886, 'Anonymous', on).
mooCache(relatedInternalConcept('Hole', hole), relatedInternalConcept('Hole', hole), [], [], 'Merge', 'MEREOTOPOLOGY', 4888, 'Anonymous', on).
mooCache(documentation('Hole', string('"A hole is an immaterial body located at the surface   of an Object.  Since every Hole is ontologically dependent on its host   (i.e., the object in which it is a hole), being a Hole is defined as   being a hole in something.  Note that two Holes may occupy the same   region, or part of the same region, without sharing any parts."')), documentation('Hole', string('"A hole is an immaterial body located at the surface   of an Object.  Since every Hole is ontologically dependent on its host   (i.e., the object in which it is a hole), being a Hole is defined as   being a hole in something.  Note that two Holes may occupy the same   region, or part of the same region, without sharing any parts."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4890, 'Anonymous', on).
mooCache(<=>(instance(A, 'Hole'), exists(B, hole(A, B))), and(and(entails(and(instance(A, 'Hole'), '$existential'(B, '?OBJ', hole(A, '?OBJ'))), hole(A, B)), entails(not(hole(A, B)), not(instance(A, 'Hole')))), and(entails(hole(A, B), instance(A, 'Hole')), entails(not(instance(A, 'Hole')), not(hole(A, B))))), [domainV(B, [hole:2]), domainV(A, ['$instanceof':'Hole', hole:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', hole(A, '?OBJ'))), forall(B)], ['HOLE'=A, 'OBJ'=B], 'Merge', 'MEREOTOPOLOGY', 4892, 'Anonymous', on).
mooCache(=>(hole(A, B), not(instance(B, 'Hole'))), and(entails(instance(B, 'Hole'), not(hole(A, B))), entails(hole(A, B), not(instance(B, 'Hole')))), [domainV(B, ['$instanceof':'Hole', hole:2]), domainV(A, [hole:1]), domainV(C, []), forall(A), forall(B)], ['HOLE'=A, 'OBJ'=B], 'Merge', 'MEREOTOPOLOGY', 4894, 'Anonymous', on).
mooCache(=>(hole(A, B), not(overlapsSpatially(A, B))), and(entails(overlapsSpatially(A, B), not(hole(A, B))), entails(hole(A, B), not(overlapsSpatially(A, B)))), [domainV(B, [hole:2, overlapsSpatially:2]), domainV(A, [hole:1, overlapsSpatially:1]), domainV(C, []), forall(A), forall(B)], ['HOLE'=A, 'OBJ'=B], 'Merge', 'MEREOTOPOLOGY', 4896, 'Anonymous', on).
mooCache(=>(and(hole(A, B), hole(A, C)), exists(D, and(properPart(D, 'MereologicalProductFn'(B, C)), hole(A, D)))), and(and(entails(and(and(hole(A, B), hole(A, C)), '$existential'(D, '?OBJ3', and(properPart('?OBJ3', 'MereologicalProductFn'(B, C)), hole(A, '?OBJ3')))), properPart(D, 'MereologicalProductFn'(B, C))), and(entails(and(not(properPart(D, 'MereologicalProductFn'(B, C))), hole(A, C)), not(hole(A, B))), entails(and(not(properPart(D, 'MereologicalProductFn'(B, C))), hole(A, B)), not(hole(A, C))))), and(entails(and(and(hole(A, B), hole(A, C)), '$existential'(D, '?OBJ3', and(properPart('?OBJ3', 'MereologicalProductFn'(B, C)), hole(A, '?OBJ3')))), hole(A, D)), and(entails(and(not(hole(A, D)), hole(A, C)), not(hole(A, B))), entails(and(not(hole(A, D)), hole(A, B)), not(hole(A, C)))))), [domainV(D, [hole:2, properPart:1]), domainV(C, ['MereologicalProductFn':2, hole:2]), domainV(B, ['MereologicalProductFn':1, hole:2]), domainV(A, [hole:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?OBJ3', and(properPart('?OBJ3', 'MereologicalProductFn'(B, C)), hole(A, '?OBJ3'))))], ['HOLE'=A, 'OBJ1'=B, 'OBJ2'=C, 'OBJ3'=D], 'Merge', 'MEREOTOPOLOGY', 4902, 'Anonymous', on).
mooCache(=>(and(hole(A, B), hole(C, B)), forall(D, =>(part(D, 'MereologicalSumFn'(A, C)), hole(D, B)))), and(entails(and(hole(C, B), and(part(D, 'MereologicalSumFn'(A, C)), not(hole(D, B)))), not(hole(A, B))), and(entails(and(hole(A, B), and(part(D, 'MereologicalSumFn'(A, C)), not(hole(D, B)))), not(hole(C, B))), and(entails(and(and(hole(A, B), hole(C, B)), not(hole(D, B))), not(part(D, 'MereologicalSumFn'(A, C)))), entails(and(and(hole(A, B), hole(C, B)), part(D, 'MereologicalSumFn'(A, C))), hole(D, B))))), [domainV(D, [hole:1, part:1]), domainV(C, ['MereologicalSumFn':2, hole:1]), domainV(B, [hole:2]), domainV(A, ['MereologicalSumFn':1, hole:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['HOLE1'=A, 'OBJ'=B, 'HOLE2'=C, 'HOLE3'=D], 'Merge', 'MEREOTOPOLOGY', 4906, 'Anonymous', on).
mooCache(=>(and(hole(A, B), part(B, C)), or(overlapsSpatially(A, C), hole(A, C))), and(entails(and(part(B, C), and(not(overlapsSpatially(A, C)), not(hole(A, C)))), not(hole(A, B))), and(entails(and(hole(A, B), and(not(overlapsSpatially(A, C)), not(hole(A, C)))), not(part(B, C))), and(entails(and(and(hole(A, B), part(B, C)), not(hole(A, C))), overlapsSpatially(A, C)), entails(and(and(hole(A, B), part(B, C)), not(overlapsSpatially(A, C))), hole(A, C))))), [domainV(C, [hole:2, overlapsSpatially:2, part:2]), domainV(B, [hole:2, part:1]), domainV(A, [hole:1, overlapsSpatially:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['HOLE'=A, 'OBJ1'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 4912, 'Anonymous', on).
mooCache(=>(and(hole(A, B), and(hole(C, D), overlapsSpatially(A, C))), overlapsSpatially(B, D)), and(entails(and(hole(A, B), and(hole(C, D), overlapsSpatially(A, C))), overlapsSpatially(B, D)), and(entails(and(not(overlapsSpatially(B, D)), and(hole(C, D), overlapsSpatially(A, C))), not(hole(A, B))), and(entails(and(not(overlapsSpatially(B, D)), and(hole(A, B), overlapsSpatially(A, C))), not(hole(C, D))), entails(and(not(overlapsSpatially(B, D)), and(hole(A, B), hole(C, D))), not(overlapsSpatially(A, C)))))), [domainV(D, [hole:2, overlapsSpatially:2]), domainV(C, [hole:1, overlapsSpatially:2]), domainV(B, [hole:2, overlapsSpatially:1]), domainV(A, [hole:1, overlapsSpatially:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['HOLE1'=A, 'OBJ1'=B, 'HOLE2'=C, 'OBJ2'=D], 'Merge', 'MEREOTOPOLOGY', 4916, 'Anonymous', on).
mooCache(=>(instance(A, 'Hole'), exists(B, properPart(B, A))), and(entails(not(properPart(B, A)), not(instance(A, 'Hole'))), entails(and(instance(A, 'Hole'), '$existential'(B, '?HOLE2', properPart('?HOLE2', A))), properPart(B, A))), [domainV(B, [properPart:1]), domainV(A, ['$instanceof':'Hole', properPart:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?HOLE2', properPart('?HOLE2', A)))], ['HOLE1'=A, 'HOLE2'=B], 'Merge', 'MEREOTOPOLOGY', 4920, 'Anonymous', on).
mooCache(instance('PrincipalHostFn', 'SpatialRelation'), instance('PrincipalHostFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4926, 'Anonymous', on).
mooCache(instance('PrincipalHostFn', 'UnaryFunction'), instance('PrincipalHostFn', 'UnaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4928, 'Anonymous', on).
mooCache(domain('PrincipalHostFn', 1, 'Hole'), domain('PrincipalHostFn', 1, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 4930, 'Anonymous', on).
mooCache(range('PrincipalHostFn', 'Object'), range('PrincipalHostFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4932, 'Anonymous', on).
mooCache(documentation('PrincipalHostFn', string('"A UnaryFunction that maps a Hole to   the Object which is its principal host.  The principle host of a Hole   is its maximally connected host (a notion taken here to be defined only   when the argument is a hole)."')), documentation('PrincipalHostFn', string('"A UnaryFunction that maps a Hole to   the Object which is its principal host.  The principle host of a Hole   is its maximally connected host (a notion taken here to be defined only   when the argument is a hole)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4934, 'Anonymous', on).
mooCache(=>(equal(A, 'PrincipalHostFn'(B)), forall(C, <=>(overlapsSpatially(C, A), exists(D, and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D))))))), and(entails(and(or(not(hole(B, D)), or(not(instance(D, 'SelfConnectedObject')), not(overlapsSpatially(C, D)))), and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), not(holds('PrincipalHostFn', B, A))), and(and(entails(and(or(not(hole(B, D)), or(not(instance(D, 'SelfConnectedObject')), not(overlapsSpatially(C, D)))), overlapsSpatially(C, A)), not(holds('PrincipalHostFn', B, A))), and(entails(and(and(holds('PrincipalHostFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), hole(B, D)), and(entails(and(and(holds('PrincipalHostFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), instance(D, 'SelfConnectedObject')), and(entails(and(and(holds('PrincipalHostFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), overlapsSpatially(C, D)), entails(and(holds('PrincipalHostFn', B, A), or(not(hole(B, D)), or(not(instance(D, 'SelfConnectedObject')), not(overlapsSpatially(C, D))))), not(overlapsSpatially(C, A))))))), and(entails(and(not(overlapsSpatially(C, A)), overlapsSpatially(C, A)), not(holds('PrincipalHostFn', B, A))), and(entails(and(not(overlapsSpatially(C, A)), and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), not(holds('PrincipalHostFn', B, A))), and(entails(and(holds('PrincipalHostFn', B, A), and(hole(B, D), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), overlapsSpatially(C, A)), and(entails(and(holds('PrincipalHostFn', B, A), and(not(overlapsSpatially(C, A)), and(instance(D, 'SelfConnectedObject'), overlapsSpatially(C, D)))), not(hole(B, D))), and(entails(and(holds('PrincipalHostFn', B, A), and(not(overlapsSpatially(C, A)), and(hole(B, D), overlapsSpatially(C, D)))), not(instance(D, 'SelfConnectedObject'))), entails(and(holds('PrincipalHostFn', B, A), and(not(overlapsSpatially(C, A)), and(hole(B, D), instance(D, 'SelfConnectedObject')))), not(overlapsSpatially(C, D)))))))))), [domainV(D, ['$instanceof':'SelfConnectedObject', hole:2, overlapsSpatially:2]), domainV(C, [overlapsSpatially:1]), domainV(B, ['PrincipalHostFn':1, hole:1]), domainV(A, ['PrincipalHostFn':2, overlapsSpatially:2]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?OBJ3', and(hole(B, '?OBJ3'), and(instance('?OBJ3', 'SelfConnectedObject'), overlapsSpatially(C, '?OBJ3'))))), forall(D)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C, 'OBJ3'=D], 'Merge', 'MEREOTOPOLOGY', 4936, 'Anonymous', on).
mooCache(=>(instance(A, 'Hole'), instance(A, 'SelfConnectedObject')), and(entails(not(instance(A, 'SelfConnectedObject')), not(instance(A, 'Hole'))), entails(instance(A, 'Hole'), instance(A, 'SelfConnectedObject'))), [domainV(A, ['$instanceof':'Hole', '$instanceof':'SelfConnectedObject']), domainV(B, []), forall(A)], ['HOLE'=A], 'Merge', 'MEREOTOPOLOGY', 4940, 'Anonymous', on).
mooCache(=>(hole(A, B), connected(A, B)), and(entails(not(connected(A, B)), not(hole(A, B))), entails(hole(A, B), connected(A, B))), [domainV(B, [connected:2, hole:2]), domainV(A, [connected:1, hole:1]), domainV(C, []), forall(A), forall(B)], ['HOLE'=A, 'OBJ'=B], 'Merge', 'MEREOTOPOLOGY', 4944, 'Anonymous', on).
mooCache(=>(instance(A, 'Hole'), exists(B, and(hole(A, B), instance(B, 'SelfConnectedObject')))), and(and(entails(not(hole(A, B)), not(instance(A, 'Hole'))), entails(and(instance(A, 'Hole'), '$existential'(B, '?OBJ', and(hole(A, '?OBJ'), instance('?OBJ', 'SelfConnectedObject')))), hole(A, B))), and(entails(not(instance(B, 'SelfConnectedObject')), not(instance(A, 'Hole'))), entails(and(instance(A, 'Hole'), '$existential'(B, '?OBJ', and(hole(A, '?OBJ'), instance('?OBJ', 'SelfConnectedObject')))), instance(B, 'SelfConnectedObject')))), [domainV(B, ['$instanceof':'SelfConnectedObject', hole:2]), domainV(A, ['$instanceof':'Hole', hole:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(hole(A, '?OBJ'), instance('?OBJ', 'SelfConnectedObject'))))], ['HOLE'=A, 'OBJ'=B], 'Merge', 'MEREOTOPOLOGY', 4948, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Hole'), properPart(B, A)), exists(C, and(meetsSpatially(A, C), not(meetsSpatially(B, C))))), and(and(entails(and(and(instance(A, 'Hole'), properPart(B, A)), '$existential'(C, '?OBJ', and(meetsSpatially(A, '?OBJ'), not(meetsSpatially(B, '?OBJ'))))), meetsSpatially(A, C)), and(entails(and(not(meetsSpatially(A, C)), properPart(B, A)), not(instance(A, 'Hole'))), entails(and(not(meetsSpatially(A, C)), instance(A, 'Hole')), not(properPart(B, A))))), and(entails(and(instance(A, 'Hole'), properPart(B, A)), not(meetsSpatially(B, C))), and(entails(and(meetsSpatially(B, C), properPart(B, A)), not(instance(A, 'Hole'))), entails(and(meetsSpatially(B, C), instance(A, 'Hole')), not(properPart(B, A)))))), [domainV(C, [meetsSpatially:2]), domainV(B, [meetsSpatially:1, properPart:1]), domainV(A, ['$instanceof':'Hole', meetsSpatially:1, properPart:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?OBJ', and(meetsSpatially(A, '?OBJ'), not(meetsSpatially(B, '?OBJ')))))], ['HOLE1'=A, 'HOLE2'=B, 'OBJ'=C], 'Merge', 'MEREOTOPOLOGY', 4954, 'Anonymous', on).
mooCache(instance(fills, 'BinaryPredicate'), instance(fills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4956, 'Anonymous', on).
mooCache(instance(fills, 'SpatialRelation'), instance(fills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4958, 'Anonymous', on).
mooCache(instance(fills, 'AsymmetricRelation'), instance(fills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4960, 'Anonymous', on).
mooCache(subrelation(fills, completelyFills), subrelation(fills, completelyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 4962, 'Anonymous', on).
mooCache(subrelation(fills, properlyFills), subrelation(fills, properlyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 4964, 'Anonymous', on).
mooCache(domain(fills, 1, 'Object'), domain(fills, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4966, 'Anonymous', on).
mooCache(domain(fills, 2, 'Hole'), domain(fills, 2, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 4968, 'Anonymous', on).
mooCache(relatedInternalConcept(fills, 'Fillable'), relatedInternalConcept(fills, 'Fillable'), [], [], 'Merge', 'MEREOTOPOLOGY', 4970, 'Anonymous', on).
mooCache(documentation(fills, string('"Holes can be filled.  (fills ?OBJ ?HOLE)   means that the Object ?OBJ fills the Hole ?HOLE.  Note that   fills here means perfectly filled."')), documentation(fills, string('"Holes can be filled.  (fills ?OBJ ?HOLE)   means that the Object ?OBJ fills the Hole ?HOLE.  Note that   fills here means perfectly filled."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4972, 'Anonymous', on).
mooCache(instance('Fillable', 'ShapeProperty'), instance('Fillable', 'ShapeProperty'), [], [], 'Merge', 'MEREOTOPOLOGY', 4974, 'Anonymous', on).
mooCache(documentation('Fillable', string('"Something is Fillable if it can be filled by   something else.  Note that \'filled\' here means perfectly filled."')), documentation('Fillable', string('"Something is Fillable if it can be filled by   something else.  Note that \'filled\' here means perfectly filled."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4976, 'Anonymous', on).
mooCache(=>(holdsDuring(A, fills(B, C)), attribute(C, 'Fillable')), and(entails(not(attribute(C, 'Fillable')), not(holdsDuring(A, fills(B, C)))), entails(holdsDuring(A, fills(B, C)), attribute(C, 'Fillable'))), [domainV(C, [attribute:1, fills:2]), domainV(B, [fills:1]), domainV(A, [holdsDuring:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TIME'=A, 'OBJ'=B, 'HOLE'=C], 'Merge', 'MEREOTOPOLOGY', 4978, 'Anonymous', on).
mooCache(<=>(attribute(A, 'Fillable'), exists(B, and(instance(B, 'Hole'), part(A, B)))), and(and(entails(and(attribute(A, 'Fillable'), '$existential'(B, '?HOLE2', and(instance('?HOLE2', 'Hole'), part(A, '?HOLE2')))), instance(B, 'Hole')), and(entails(and(attribute(A, 'Fillable'), '$existential'(B, '?HOLE2', and(instance('?HOLE2', 'Hole'), part(A, '?HOLE2')))), part(A, B)), entails(or(not(instance(B, 'Hole')), not(part(A, B))), not(attribute(A, 'Fillable'))))), and(entails(and(instance(B, 'Hole'), part(A, B)), attribute(A, 'Fillable')), and(entails(and(not(attribute(A, 'Fillable')), part(A, B)), not(instance(B, 'Hole'))), entails(and(not(attribute(A, 'Fillable')), instance(B, 'Hole')), not(part(A, B)))))), [domainV(B, ['$instanceof':'Hole', part:2]), domainV(A, [attribute:1, part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?HOLE2', and(instance('?HOLE2', 'Hole'), part(A, '?HOLE2')))), forall(B)], ['HOLE1'=A, 'HOLE2'=B], 'Merge', 'MEREOTOPOLOGY', 4984, 'Anonymous', on).
mooCache(instance(completelyFills, 'BinaryPredicate'), instance(completelyFills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4986, 'Anonymous', on).
mooCache(instance(completelyFills, 'SpatialRelation'), instance(completelyFills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4988, 'Anonymous', on).
mooCache(instance(completelyFills, 'AsymmetricRelation'), instance(completelyFills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4990, 'Anonymous', on).
mooCache(subrelation(completelyFills, partiallyFills), subrelation(completelyFills, partiallyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 4992, 'Anonymous', on).
mooCache(documentation(completelyFills, string('"(completelyFills ?OBJ ?HOLE)   means that some part of the Object ?OBJ fills the Hole ?HOLE.    Note that if (completelyFills ?OBJ1 ?HOLE) and (part   ?OBJ1 ?OBJ2), then (completelyFills ?OBJ2 ?HOLE)."')), documentation(completelyFills, string('"(completelyFills ?OBJ ?HOLE)   means that some part of the Object ?OBJ fills the Hole ?HOLE.    Note that if (completelyFills ?OBJ1 ?HOLE) and (part   ?OBJ1 ?OBJ2), then (completelyFills ?OBJ2 ?HOLE)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4994, 'Anonymous', on).
mooCache(=>(completelyFills(A, B), exists(C, and(part(C, A), fills(C, B)))), and(and(entails(not(part(C, A)), not(completelyFills(A, B))), entails(and(completelyFills(A, B), '$existential'(C, '?OBJ2', and(part('?OBJ2', A), fills('?OBJ2', B)))), part(C, A))), and(entails(not(fills(C, B)), not(completelyFills(A, B))), entails(and(completelyFills(A, B), '$existential'(C, '?OBJ2', and(part('?OBJ2', A), fills('?OBJ2', B)))), fills(C, B)))), [domainV(C, [fills:1, part:1]), domainV(B, [completelyFills:2, fills:2]), domainV(A, [completelyFills:1, part:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?OBJ2', and(part('?OBJ2', A), fills('?OBJ2', B))))], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 4996, 'Anonymous', on).
mooCache(instance(partiallyFills, 'BinaryPredicate'), instance(partiallyFills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4998, 'Anonymous', on).
mooCache(instance(partiallyFills, 'SpatialRelation'), instance(partiallyFills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5000, 'Anonymous', on).
mooCache(instance(partiallyFills, 'AsymmetricRelation'), instance(partiallyFills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5002, 'Anonymous', on).
mooCache(domain(partiallyFills, 1, 'Object'), domain(partiallyFills, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 5004, 'Anonymous', on).
mooCache(domain(partiallyFills, 2, 'Hole'), domain(partiallyFills, 2, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 5006, 'Anonymous', on).
mooCache(documentation(partiallyFills, string('"(partiallyFills ?OBJ ?HOLE) means that   ?OBJ completelyFills some part of ?HOLE. Note that if (partiallyFills   ?OBJ1 ?HOLE) and (part ?OBJ1 ?OBJ2), then (partiallyFills ?OBJ2 ?HOLE).   Note too that a partial filler need not be wholly inside a hole (it may   stick out), which means that every complete filler also qualifies as   (is a limit case of) a partial one."')), documentation(partiallyFills, string('"(partiallyFills ?OBJ ?HOLE) means that   ?OBJ completelyFills some part of ?HOLE. Note that if (partiallyFills   ?OBJ1 ?HOLE) and (part ?OBJ1 ?OBJ2), then (partiallyFills ?OBJ2 ?HOLE).   Note too that a partial filler need not be wholly inside a hole (it may   stick out), which means that every complete filler also qualifies as   (is a limit case of) a partial one."')), [], [], 'Merge', 'MEREOTOPOLOGY', 5008, 'Anonymous', on).
mooCache(=>(partiallyFills(A, B), exists(C, and(part(C, B), completelyFills(A, C)))), and(and(entails(not(part(C, B)), not(partiallyFills(A, B))), entails(and(partiallyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), completelyFills(A, '?HOLE2')))), part(C, B))), and(entails(not(completelyFills(A, C)), not(partiallyFills(A, B))), entails(and(partiallyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), completelyFills(A, '?HOLE2')))), completelyFills(A, C)))), [domainV(C, [completelyFills:2, part:1]), domainV(B, [part:2, partiallyFills:2]), domainV(A, [completelyFills:1, partiallyFills:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?HOLE2', and(part('?HOLE2', B), completelyFills(A, '?HOLE2'))))], ['OBJ'=A, 'HOLE1'=B, 'HOLE2'=C], 'Merge', 'MEREOTOPOLOGY', 5010, 'Anonymous', on).
mooCache(instance(properlyFills, 'BinaryPredicate'), instance(properlyFills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 5012, 'Anonymous', on).
mooCache(instance(properlyFills, 'SpatialRelation'), instance(properlyFills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5014, 'Anonymous', on).
mooCache(instance(properlyFills, 'AsymmetricRelation'), instance(properlyFills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5016, 'Anonymous', on).
mooCache(subrelation(properlyFills, partiallyFills), subrelation(properlyFills, partiallyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 5018, 'Anonymous', on).
mooCache(domain(properlyFills, 1, 'Object'), domain(properlyFills, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 5020, 'Anonymous', on).
mooCache(domain(properlyFills, 2, 'Hole'), domain(properlyFills, 2, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 5022, 'Anonymous', on).
mooCache(documentation(properlyFills, string('"(properlyFills ?OBJ ?HOLE)   means that ?HOLE is properly (though perhaps incompletely) filled by   ?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that   properlyFills is the dual of completelyFills, and is so   related to partiallyFills that ?OBJ properlyFills ?HOLE just in   case ?OBJ partiallyFills every part of ?HOLE.  (Thus, every perfect   filler is both complete and proper in this sense)."')), documentation(properlyFills, string('"(properlyFills ?OBJ ?HOLE)   means that ?HOLE is properly (though perhaps incompletely) filled by   ?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that   properlyFills is the dual of completelyFills, and is so   related to partiallyFills that ?OBJ properlyFills ?HOLE just in   case ?OBJ partiallyFills every part of ?HOLE.  (Thus, every perfect   filler is both complete and proper in this sense)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 5024, 'Anonymous', on).
mooCache(=>(properlyFills(A, B), exists(C, and(part(C, B), fills(A, C)))), and(and(entails(not(part(C, B)), not(properlyFills(A, B))), entails(and(properlyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), fills(A, '?HOLE2')))), part(C, B))), and(entails(not(fills(A, C)), not(properlyFills(A, B))), entails(and(properlyFills(A, B), '$existential'(C, '?HOLE2', and(part('?HOLE2', B), fills(A, '?HOLE2')))), fills(A, C)))), [domainV(C, [fills:2, part:1]), domainV(B, [part:2, properlyFills:2]), domainV(A, [fills:1, properlyFills:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?HOLE2', and(part('?HOLE2', B), fills(A, '?HOLE2'))))], ['OBJ'=A, 'HOLE1'=B, 'HOLE2'=C], 'Merge', 'MEREOTOPOLOGY', 5026, 'Anonymous', on).
mooCache(=>(and(fills(A, B), attribute(C, 'Fillable')), not(overlapsSpatially(A, C))), and(entails(and(fills(A, B), attribute(C, 'Fillable')), not(overlapsSpatially(A, C))), and(entails(and(overlapsSpatially(A, C), attribute(C, 'Fillable')), not(fills(A, B))), entails(and(overlapsSpatially(A, C), fills(A, B)), not(attribute(C, 'Fillable'))))), [domainV(C, [attribute:1, overlapsSpatially:2]), domainV(B, [fills:2]), domainV(A, [fills:1, overlapsSpatially:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 5032, 'Anonymous', on).
mooCache(=>(completelyFills(A, B), forall(C, =>(connected(C, B), connected(C, A)))), and(entails(and(connected(C, B), not(connected(C, A))), not(completelyFills(A, B))), and(entails(and(completelyFills(A, B), not(connected(C, A))), not(connected(C, B))), entails(and(completelyFills(A, B), connected(C, B)), connected(C, A)))), [domainV(C, [connected:1]), domainV(B, [completelyFills:2, connected:2]), domainV(A, [completelyFills:1, connected:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 5038, 'Anonymous', on).
mooCache(=>(and(properlyFills(A, B), connected(C, A)), connected(B, C)), and(entails(and(properlyFills(A, B), connected(C, A)), connected(B, C)), and(entails(and(not(connected(B, C)), connected(C, A)), not(properlyFills(A, B))), entails(and(not(connected(B, C)), properlyFills(A, B)), not(connected(C, A))))), [domainV(C, [connected:1, connected:2]), domainV(B, [connected:1, properlyFills:2]), domainV(A, [connected:2, properlyFills:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 5044, 'Anonymous', on).
mooCache(=>(and(fills(A, B), properPart(C, B)), completelyFills(A, C)), and(entails(and(fills(A, B), properPart(C, B)), completelyFills(A, C)), and(entails(and(not(completelyFills(A, C)), properPart(C, B)), not(fills(A, B))), entails(and(not(completelyFills(A, C)), fills(A, B)), not(properPart(C, B))))), [domainV(C, [completelyFills:2, properPart:1]), domainV(B, [fills:2, properPart:2]), domainV(A, [completelyFills:1, fills:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ'=A, 'HOLE1'=B, 'HOLE2'=C], 'Merge', 'MEREOTOPOLOGY', 5050, 'Anonymous', on).
mooCache(=>(and(fills(A, B), properPart(C, A)), properlyFills(C, B)), and(entails(and(fills(A, B), properPart(C, A)), properlyFills(C, B)), and(entails(and(not(properlyFills(C, B)), properPart(C, A)), not(fills(A, B))), entails(and(not(properlyFills(C, B)), fills(A, B)), not(properPart(C, A))))), [domainV(C, [properPart:1, properlyFills:1]), domainV(B, [fills:2, properlyFills:2]), domainV(A, [fills:1, properPart:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C], 'Merge', 'MEREOTOPOLOGY', 5056, 'Anonymous', on).
mooCache(instance('SkinFn', 'SpatialRelation'), instance('SkinFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5058, 'Anonymous', on).
mooCache(instance('SkinFn', 'UnaryFunction'), instance('SkinFn', 'UnaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 5060, 'Anonymous', on).
mooCache(domain('SkinFn', 1, 'Hole'), domain('SkinFn', 1, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 5062, 'Anonymous', on).
mooCache(range('SkinFn', 'Object'), range('SkinFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 5064, 'Anonymous', on).
mooCache(documentation('SkinFn', string('"A UnaryFunction that maps a Hole to the skin   of the Hole.  The skin of a Hole is the fusion of those superficial   parts (see superficialPart) of the Hole\'s principal host (see   PrincipalHostFn) with which the Hole is externally connected."')), documentation('SkinFn', string('"A UnaryFunction that maps a Hole to the skin   of the Hole.  The skin of a Hole is the fusion of those superficial   parts (see superficialPart) of the Hole\'s principal host (see   PrincipalHostFn) with which the Hole is externally connected."')), [], [], 'Merge', 'MEREOTOPOLOGY', 5066, 'Anonymous', on).
mooCache(=>(equal(A, 'SkinFn'(B)), forall(C, <=>(overlapsSpatially(C, A), exists(D, and(superficialPart(D, 'PrincipalHostFn'(B)), and(meetsSpatially(B, D), overlapsSpatially(C, D))))))), and(entails(and(or(not(superficialPart(D, 'PrincipalHostFn'(B))), or(not(meetsSpatially(B, D)), not(overlapsSpatially(C, D)))), and(superficialPart(D, 'PrincipalHostFn'(B)), and(meetsSpatially(B, D), overlapsSpatially(C, D)))), not(holds('SkinFn', B, A))), and(and(entails(and(or(not(superficialPart(D, 'PrincipalHostFn'(B))), or(not(meetsSpatially(B, D)), not(overlapsSpatially(C, D)))), overlapsSpatially(C, A)), not(holds('SkinFn', B, A))), and(entails(and(and(holds('SkinFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(superficialPart('?OBJ3', 'PrincipalHostFn'(B)), and(meetsSpatially(B, '?OBJ3'), overlapsSpatially(C, '?OBJ3'))))), superficialPart(D, 'PrincipalHostFn'(B))), and(entails(and(and(holds('SkinFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(superficialPart('?OBJ3', 'PrincipalHostFn'(B)), and(meetsSpatially(B, '?OBJ3'), overlapsSpatially(C, '?OBJ3'))))), meetsSpatially(B, D)), and(entails(and(and(holds('SkinFn', B, A), overlapsSpatially(C, A)), '$existential'(D, '?OBJ3', and(superficialPart('?OBJ3', 'PrincipalHostFn'(B)), and(meetsSpatially(B, '?OBJ3'), overlapsSpatially(C, '?OBJ3'))))), overlapsSpatially(C, D)), entails(and(holds('SkinFn', B, A), or(not(superficialPart(D, 'PrincipalHostFn'(B))), or(not(meetsSpatially(B, D)), not(overlapsSpatially(C, D))))), not(overlapsSpatially(C, A))))))), and(entails(and(not(overlapsSpatially(C, A)), overlapsSpatially(C, A)), not(holds('SkinFn', B, A))), and(entails(and(not(overlapsSpatially(C, A)), and(superficialPart(D, 'PrincipalHostFn'(B)), and(meetsSpatially(B, D), overlapsSpatially(C, D)))), not(holds('SkinFn', B, A))), and(entails(and(holds('SkinFn', B, A), and(superficialPart(D, 'PrincipalHostFn'(B)), and(meetsSpatially(B, D), overlapsSpatially(C, D)))), overlapsSpatially(C, A)), and(entails(and(holds('SkinFn', B, A), and(not(overlapsSpatially(C, A)), and(meetsSpatially(B, D), overlapsSpatially(C, D)))), not(superficialPart(D, 'PrincipalHostFn'(B)))), and(entails(and(holds('SkinFn', B, A), and(not(overlapsSpatially(C, A)), and(superficialPart(D, 'PrincipalHostFn'(B)), overlapsSpatially(C, D)))), not(meetsSpatially(B, D))), entails(and(holds('SkinFn', B, A), and(not(overlapsSpatially(C, A)), and(superficialPart(D, 'PrincipalHostFn'(B)), meetsSpatially(B, D)))), not(overlapsSpatially(C, D)))))))))), [domainV(D, [meetsSpatially:2, overlapsSpatially:2, superficialPart:1]), domainV(C, [overlapsSpatially:1]), domainV(B, ['PrincipalHostFn':1, 'SkinFn':1, meetsSpatially:1]), domainV(A, ['SkinFn':2, overlapsSpatially:2]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?OBJ3', and(superficialPart('?OBJ3', 'PrincipalHostFn'(B)), and(meetsSpatially(B, '?OBJ3'), overlapsSpatially(C, '?OBJ3'))))), forall(D)], ['OBJ1'=A, 'HOLE'=B, 'OBJ2'=C, 'OBJ3'=D], 'Merge', 'MEREOTOPOLOGY', 5068, 'Anonymous', on).
mooCache('include-context'('TEMPORAL', 'CONCEPTS'), 'include-context'('TEMPORAL', 'CONCEPTS'), [], [], 'Merge', 'PROCESSES', 5080, 'Anonymous', on).
mooCache('include-context'('OBJECTS'), 'include-context'('OBJECTS'), [], [], 'Merge', 'PROCESSES', 5083, 'Anonymous', on).
mooCache('include-context'('QUALITIES'), 'include-context'('QUALITIES'), [], [], 'Merge', 'PROCESSES', 5086, 'Anonymous', on).
mooCache(instance(subProcess, 'BinaryPredicate'), instance(subProcess, 'BinaryPredicate'), [], [], 'Merge', 'PROCESSES', 5089, 'Anonymous', on).
mooCache(instance(subProcess, 'PartialOrderingRelation'), instance(subProcess, 'PartialOrderingRelation'), [], [], 'Merge', 'PROCESSES', 5091, 'Anonymous', on).
mooCache(domain(subProcess, 1, 'Process'), domain(subProcess, 1, 'Process'), [], [], 'Merge', 'PROCESSES', 5093, 'Anonymous', on).
mooCache(domain(subProcess, 2, 'Process'), domain(subProcess, 2, 'Process'), [], [], 'Merge', 'PROCESSES', 5095, 'Anonymous', on).
mooCache(documentation(subProcess, string('"(subProcess ?SUBPROC ?PROC) means that ?SUBPROC   is a subprocess of ?PROC.  A subprocess is here understood as a temporally   distinguished part (proper or not) of a Process."')), documentation(subProcess, string('"(subProcess ?SUBPROC ?PROC) means that ?SUBPROC   is a subprocess of ?PROC.  A subprocess is here understood as a temporally   distinguished part (proper or not) of a Process."')), [], [], 'Merge', 'PROCESSES', 5097, 'Anonymous', on).
mooCache(=>(subProcess(A, B), or(equal('WhenFn'(A), 'WhenFn'(B)), during('WhenFn'(A), 'WhenFn'(B)))), and(entails(and(not(equal('WhenFn'(A), 'WhenFn'(B))), not(during('WhenFn'(A), 'WhenFn'(B)))), not(subProcess(A, B))), and(entails(and(subProcess(A, B), not(during('WhenFn'(A), 'WhenFn'(B)))), equal('WhenFn'(A), 'WhenFn'(B))), entails(and(subProcess(A, B), not(equal('WhenFn'(A), 'WhenFn'(B)))), during('WhenFn'(A), 'WhenFn'(B))))), [domainV(B, ['WhenFn':1, subProcess:2]), domainV(A, ['WhenFn':1, subProcess:1]), domainV(C, []), forall(A), forall(B)], ['SUBPROC'=A, 'PROC'=B], 'Merge', 'PROCESSES', 5099, 'Anonymous', on).
mooCache(=>(subProcess(A, B), forall(C, =>(located(B, C), located(A, C)))), and(entails(and(located(B, C), not(located(A, C))), not(subProcess(A, B))), and(entails(and(subProcess(A, B), not(located(A, C))), not(located(B, C))), entails(and(subProcess(A, B), located(B, C)), located(A, C)))), [domainV(C, [located:2]), domainV(B, [located:1, subProcess:2]), domainV(A, [located:1, subProcess:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['SUBPROC'=A, 'PROC'=B, 'REGION'=C], 'Merge', 'PROCESSES', 5101, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Process'), subProcess(B, A)), exists(C, time(B, C))), and(entails(and(and(instance(A, 'Process'), subProcess(B, A)), '$existential'(C, '?TIME', time(B, '?TIME'))), time(B, C)), and(entails(and(not(time(B, C)), subProcess(B, A)), not(instance(A, 'Process'))), entails(and(not(time(B, C)), instance(A, 'Process')), not(subProcess(B, A))))), [domainV(C, [time:2]), domainV(B, [subProcess:1, time:1]), domainV(A, ['$instanceof':'Process', subProcess:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?TIME', time(B, '?TIME')))], ['PROC'=A, 'SUBPROC'=B, 'TIME'=C], 'Merge', 'PROCESSES', 5105, 'Anonymous', on).
mooCache(=>(instance(A, 'Process'), exists(B, subProcess(B, A))), and(entails(not(subProcess(B, A)), not(instance(A, 'Process'))), entails(and(instance(A, 'Process'), '$existential'(B, '?SUBPROC', subProcess('?SUBPROC', A))), subProcess(B, A))), [domainV(B, [subProcess:1]), domainV(A, ['$instanceof':'Process', subProcess:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?SUBPROC', subProcess('?SUBPROC', A)))], ['PROC'=A, 'SUBPROC'=B], 'Merge', 'PROCESSES', 5109, 'Anonymous', on).
mooCache(subclass('NonintentionalProcess', 'Process'), subclass('NonintentionalProcess', 'Process'), [], [], 'Merge', 'PROCESSES', 5111, 'Anonymous', on).
mooCache(documentation('NonintentionalProcess', string('"A Process that occurs irrespective   of the intentions of Humans or Animals."')), documentation('NonintentionalProcess', string('"A Process that occurs irrespective   of the intentions of Humans or Animals."')), [], [], 'Merge', 'PROCESSES', 5113, 'Anonymous', on).
mooCache(subclass('BiologicalProcess', 'NonintentionalProcess'), subclass('BiologicalProcess', 'NonintentionalProcess'), [], [], 'Merge', 'PROCESSES', 5119, 'Anonymous', on).
mooCache(documentation('BiologicalProcess', string('"A NonintentionalProcess embodied in an   Organism."')), documentation('BiologicalProcess', string('"A NonintentionalProcess embodied in an   Organism."')), [], [], 'Merge', 'PROCESSES', 5121, 'Anonymous', on).
mooCache(=>(instance(A, 'BiologicalProcess'), exists(B, and(instance(B, 'Organism'), located(A, B)))), and(and(entails(not(instance(B, 'Organism')), not(instance(A, 'BiologicalProcess'))), entails(and(instance(A, 'BiologicalProcess'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'Organism'), located(A, '?OBJ')))), instance(B, 'Organism'))), and(entails(not(located(A, B)), not(instance(A, 'BiologicalProcess'))), entails(and(instance(A, 'BiologicalProcess'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'Organism'), located(A, '?OBJ')))), located(A, B)))), [domainV(B, ['$instanceof':'Organism', located:2]), domainV(A, ['$instanceof':'BiologicalProcess', located:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(instance('?OBJ', 'Organism'), located(A, '?OBJ'))))], ['PROC'=A, 'OBJ'=B], 'Merge', 'PROCESSES', 5123, 'Anonymous', on).
mooCache(subclass('PhysiologicProcess', 'BiologicalProcess'), subclass('PhysiologicProcess', 'BiologicalProcess'), [], [], 'Merge', 'PROCESSES', 5125, 'Anonymous', on).
mooCache(documentation('PhysiologicProcess', string('"A normal process of an Organism   or part of an Organism."')), documentation('PhysiologicProcess', string('"A normal process of an Organism   or part of an Organism."')), [], [], 'Merge', 'PROCESSES', 5127, 'Anonymous', on).
mooCache(subclass('OrganismProcess', 'PhysiologicProcess'), subclass('OrganismProcess', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5129, 'Anonymous', on).
mooCache(documentation('OrganismProcess', string('"A physiologic function of the   Organism as a whole, of multiple organ systems or of multiple   Organs or Tissues."')), documentation('OrganismProcess', string('"A physiologic function of the   Organism as a whole, of multiple organ systems or of multiple   Organs or Tissues."')), [], [], 'Merge', 'PROCESSES', 5131, 'Anonymous', on).
mooCache(subclass('Birth', 'OrganismProcess'), subclass('Birth', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5133, 'Anonymous', on).
mooCache(documentation('Birth', string('"The Process of being born."')), documentation('Birth', string('"The Process of being born."')), [], [], 'Merge', 'PROCESSES', 5135, 'Anonymous', on).
mooCache(=>(instance(A, 'Organism'), exists(B, and(instance(B, 'Birth'), experiencer(B, A)))), and(and(entails(not(instance(B, 'Birth')), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(B, '?BIRTH', and(instance('?BIRTH', 'Birth'), experiencer('?BIRTH', A)))), instance(B, 'Birth'))), and(entails(not(experiencer(B, A)), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(B, '?BIRTH', and(instance('?BIRTH', 'Birth'), experiencer('?BIRTH', A)))), experiencer(B, A)))), [domainV(B, ['$instanceof':'Birth', experiencer:1]), domainV(A, ['$instanceof':'Organism', experiencer:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BIRTH', and(instance('?BIRTH', 'Birth'), experiencer('?BIRTH', A))))], ['ORGANISM'=A, 'BIRTH'=B], 'Merge', 'PROCESSES', 5137, 'Anonymous', on).
mooCache(subclass('Death', 'OrganismProcess'), subclass('Death', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5139, 'Anonymous', on).
mooCache(documentation('Death', string('"The Process of dying."')), documentation('Death', string('"The Process of dying."')), [], [], 'Merge', 'PROCESSES', 5141, 'Anonymous', on).
mooCache(=>(instance(A, 'Organism'), exists(B, and(instance(B, 'Death'), experiencer(B, A)))), and(and(entails(not(instance(B, 'Death')), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(B, '?DEATH', and(instance('?DEATH', 'Death'), experiencer('?DEATH', A)))), instance(B, 'Death'))), and(entails(not(experiencer(B, A)), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(B, '?DEATH', and(instance('?DEATH', 'Death'), experiencer('?DEATH', A)))), experiencer(B, A)))), [domainV(B, ['$instanceof':'Death', experiencer:1]), domainV(A, ['$instanceof':'Organism', experiencer:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?DEATH', and(instance('?DEATH', 'Death'), experiencer('?DEATH', A))))], ['ORGANISM'=A, 'DEATH'=B], 'Merge', 'PROCESSES', 5143, 'Anonymous', on).
mooCache(subclass('Breathing', 'OrganismProcess'), subclass('Breathing', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5145, 'Anonymous', on).
mooCache(documentation('Breathing', string('"The Process of respiration, by which oxygen   is made available to an Animal.  This covers processes of inhalation,   exhalation, and alternations between the two."')), documentation('Breathing', string('"The Process of respiration, by which oxygen   is made available to an Animal.  This covers processes of inhalation,   exhalation, and alternations between the two."')), [], [], 'Merge', 'PROCESSES', 5147, 'Anonymous', on).
mooCache(subclass('Ingesting', 'OrganismProcess'), subclass('Ingesting', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5149, 'Anonymous', on).
mooCache(documentation('Ingesting', string('"The Process by which Food is   incorporated into an Animal."')), documentation('Ingesting', string('"The Process by which Food is   incorporated into an Animal."')), [], [], 'Merge', 'PROCESSES', 5151, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Ingesting'), patient(A, B)), instance(B, 'Food')), and(entails(and(instance(A, 'Ingesting'), patient(A, B)), instance(B, 'Food')), and(entails(and(not(instance(B, 'Food')), patient(A, B)), not(instance(A, 'Ingesting'))), entails(and(not(instance(B, 'Food')), instance(A, 'Ingesting')), not(patient(A, B))))), [domainV(B, ['$instanceof':'Food', patient:2]), domainV(A, ['$instanceof':'Ingesting', patient:1]), domainV(C, []), forall(A), forall(B)], ['ACT'=A, 'FOOD'=B], 'Merge', 'PROCESSES', 5153, 'Anonymous', on).
mooCache(subclass('Eating', 'Ingesting'), subclass('Eating', 'Ingesting'), [], [], 'Merge', 'PROCESSES', 5155, 'Anonymous', on).
mooCache(documentation('Eating', string('"The Process by which solid Food is   incorporated into an Animal."')), documentation('Eating', string('"The Process by which solid Food is   incorporated into an Animal."')), [], [], 'Merge', 'PROCESSES', 5157, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Eating'), patient(A, B)), attribute(B, 'Solid')), and(entails(and(instance(A, 'Eating'), patient(A, B)), attribute(B, 'Solid')), and(entails(and(not(attribute(B, 'Solid')), patient(A, B)), not(instance(A, 'Eating'))), entails(and(not(attribute(B, 'Solid')), instance(A, 'Eating')), not(patient(A, B))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Eating', patient:1]), domainV(C, []), forall(A), forall(B)], ['ACT'=A, 'FOOD'=B], 'Merge', 'PROCESSES', 5159, 'Anonymous', on).
mooCache(subclass('Drinking', 'Ingesting'), subclass('Drinking', 'Ingesting'), [], [], 'Merge', 'PROCESSES', 5161, 'Anonymous', on).
mooCache(documentation('Drinking', string('"The Process by which liquid Food is   incorporated into an Animal."')), documentation('Drinking', string('"The Process by which liquid Food is   incorporated into an Animal."')), [], [], 'Merge', 'PROCESSES', 5163, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Drinking'), patient(A, B)), attribute(B, 'Liquid')), and(entails(and(instance(A, 'Drinking'), patient(A, B)), attribute(B, 'Liquid')), and(entails(and(not(attribute(B, 'Liquid')), patient(A, B)), not(instance(A, 'Drinking'))), entails(and(not(attribute(B, 'Liquid')), instance(A, 'Drinking')), not(patient(A, B))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Drinking', patient:1]), domainV(C, []), forall(A), forall(B)], ['ACT'=A, 'FOOD'=B], 'Merge', 'PROCESSES', 5165, 'Anonymous', on).
mooCache(subclass('Growth', 'PhysiologicProcess'), subclass('Growth', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5167, 'Anonymous', on).
mooCache(documentation('Growth', string('"The Process of biological development in which   an Organism changes its form or its size."')), documentation('Growth', string('"The Process of biological development in which   an Organism changes its form or its size."')), [], [], 'Merge', 'PROCESSES', 5169, 'Anonymous', on).
mooCache(subclass('Replication', 'PhysiologicProcess'), subclass('Replication', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5171, 'Anonymous', on).
mooCache(documentation('Replication', string('"The Process of biological reproduction.    This can be either a sexual or an asexual process."')), documentation('Replication', string('"The Process of biological reproduction.    This can be either a sexual or an asexual process."')), [], [], 'Merge', 'PROCESSES', 5173, 'Anonymous', on).
mooCache(subclass('SexualReproduction', 'Replication'), subclass('SexualReproduction', 'Replication'), [], [], 'Merge', 'PROCESSES', 5175, 'Anonymous', on).
mooCache(disjoint('SexualReproduction', 'AsexualReproduction'), disjoint('SexualReproduction', 'AsexualReproduction'), [], [], 'Merge', 'PROCESSES', 5177, 'Anonymous', on).
mooCache(documentation('SexualReproduction', string('"Sexual Processes of biological   reproduction."')), documentation('SexualReproduction', string('"Sexual Processes of biological   reproduction."')), [], [], 'Merge', 'PROCESSES', 5179, 'Anonymous', on).
mooCache(subclass('AsexualReproduction', 'Replication'), subclass('AsexualReproduction', 'Replication'), [], [], 'Merge', 'PROCESSES', 5181, 'Anonymous', on).
mooCache(documentation('AsexualReproduction', string('"Asexual Processes of biological   reproduction."')), documentation('AsexualReproduction', string('"Asexual Processes of biological   reproduction."')), [], [], 'Merge', 'PROCESSES', 5183, 'Anonymous', on).
mooCache(subclass('MentalProcess', 'IntentionalProcess'), subclass('MentalProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5185, 'Anonymous', on).
mooCache(documentation('MentalProcess', string('"An OrganismProcess involving the mind   or cognitive processing."')), documentation('MentalProcess', string('"An OrganismProcess involving the mind   or cognitive processing."')), [], [], 'Merge', 'PROCESSES', 5187, 'Anonymous', on).
mooCache(=>(instance(A, 'MentalProcess'), exists(B, and(instance(B, 'Animal'), experiencer(A, B)))), and(and(entails(not(instance(B, 'Animal')), not(instance(A, 'MentalProcess'))), entails(and(instance(A, 'MentalProcess'), '$existential'(B, '?ANIMAL', and(instance('?ANIMAL', 'Animal'), experiencer(A, '?ANIMAL')))), instance(B, 'Animal'))), and(entails(not(experiencer(A, B)), not(instance(A, 'MentalProcess'))), entails(and(instance(A, 'MentalProcess'), '$existential'(B, '?ANIMAL', and(instance('?ANIMAL', 'Animal'), experiencer(A, '?ANIMAL')))), experiencer(A, B)))), [domainV(B, ['$instanceof':'Animal', experiencer:2]), domainV(A, ['$instanceof':'MentalProcess', experiencer:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ANIMAL', and(instance('?ANIMAL', 'Animal'), experiencer(A, '?ANIMAL'))))], ['PROCESS'=A, 'ANIMAL'=B], 'Merge', 'PROCESSES', 5189, 'Anonymous', on).
mooCache(subclass('OrganOrTissueProcess', 'PhysiologicProcess'), subclass('OrganOrTissueProcess', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5191, 'Anonymous', on).
mooCache(disjoint('OrganOrTissueProcess', 'OrganismProcess'), disjoint('OrganOrTissueProcess', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5193, 'Anonymous', on).
mooCache(documentation('OrganOrTissueProcess', string('"A PhysiologicProcess of a   particular Organ or Tissue."')), documentation('OrganOrTissueProcess', string('"A PhysiologicProcess of a   particular Organ or Tissue."')), [], [], 'Merge', 'PROCESSES', 5195, 'Anonymous', on).
mooCache(=>(instance(A, 'OrganOrTissueProcess'), exists(B, and(located(A, B), or(instance(B, 'Organ'), instance(B, 'Tissue'))))), and(and(entails(not(located(A, B)), not(instance(A, 'OrganOrTissueProcess'))), entails(and(instance(A, 'OrganOrTissueProcess'), '$existential'(B, '?THING', and(located(A, '?THING'), or(instance('?THING', 'Organ'), instance('?THING', 'Tissue'))))), located(A, B))), and(entails(and(not(instance(B, 'Organ')), not(instance(B, 'Tissue'))), not(instance(A, 'OrganOrTissueProcess'))), and(entails(and(and(instance(A, 'OrganOrTissueProcess'), not(instance(B, 'Tissue'))), '$existential'(B, '?THING', and(located(A, '?THING'), or(instance('?THING', 'Organ'), instance('?THING', 'Tissue'))))), instance(B, 'Organ')), entails(and(and(instance(A, 'OrganOrTissueProcess'), not(instance(B, 'Organ'))), '$existential'(B, '?THING', and(located(A, '?THING'), or(instance('?THING', 'Organ'), instance('?THING', 'Tissue'))))), instance(B, 'Tissue'))))), [domainV(B, ['$instanceof':'Organ', '$instanceof':'Tissue', located:2]), domainV(A, ['$instanceof':'OrganOrTissueProcess', located:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?THING', and(located(A, '?THING'), or(instance('?THING', 'Organ'), instance('?THING', 'Tissue')))))], ['PROC'=A, 'THING'=B], 'Merge', 'PROCESSES', 5197, 'Anonymous', on).
mooCache(subclass('PathologicProcess', 'BiologicalProcess'), subclass('PathologicProcess', 'BiologicalProcess'), [], [], 'Merge', 'PROCESSES', 5199, 'Anonymous', on).
mooCache(disjoint('PathologicProcess', 'PhysiologicProcess'), disjoint('PathologicProcess', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5201, 'Anonymous', on).
mooCache(documentation('PathologicProcess', string('"A disordered process, activity, or   state of the Organism as a whole, of a body system or systems, or of   multiple Organs or Tissues. Included here are normal responses to a   negative stimulus as well as patholologic conditions or states that are   less specific than a disease. Pathologic functions frequently have   systemic effects."')), documentation('PathologicProcess', string('"A disordered process, activity, or   state of the Organism as a whole, of a body system or systems, or of   multiple Organs or Tissues. Included here are normal responses to a   negative stimulus as well as patholologic conditions or states that are   less specific than a disease. Pathologic functions frequently have   systemic effects."')), [], [], 'Merge', 'PROCESSES', 5203, 'Anonymous', on).
mooCache(subclass('DiseaseOrSyndrome', 'PathologicProcess'), subclass('DiseaseOrSyndrome', 'PathologicProcess'), [], [], 'Merge', 'PROCESSES', 5205, 'Anonymous', on).
mooCache(documentation('DiseaseOrSyndrome', string('"A PathologicProcess which alters or   interferes with a normal process, state or activity of an Organism.    It is usually characterized by the abnormal functioning of one or more   of the host\'s systems, parts, or Organs."')), documentation('DiseaseOrSyndrome', string('"A PathologicProcess which alters or   interferes with a normal process, state or activity of an Organism.    It is usually characterized by the abnormal functioning of one or more   of the host\'s systems, parts, or Organs."')), [], [], 'Merge', 'PROCESSES', 5207, 'Anonymous', on).
mooCache(subclass('MentalOrBehavioralDysfunction', 'DiseaseOrSyndrome'), subclass('MentalOrBehavioralDysfunction', 'DiseaseOrSyndrome'), [], [], 'Merge', 'PROCESSES', 5209, 'Anonymous', on).
mooCache(documentation('MentalOrBehavioralDysfunction', string('"A clinically significant   dysfunction whose major manifestation is behavioral or psychological.    These dysfunctions may have identified or presumed biological etiologies   or manifestations."')), documentation('MentalOrBehavioralDysfunction', string('"A clinically significant   dysfunction whose major manifestation is behavioral or psychological.    These dysfunctions may have identified or presumed biological etiologies   or manifestations."')), [], [], 'Merge', 'PROCESSES', 5211, 'Anonymous', on).
mooCache(=>(instance(A, 'MentalOrBehavioralDysfunction'), exists(B, and(instance(B, 'Animal'), patient(A, B)))), and(and(entails(not(instance(B, 'Animal')), not(instance(A, 'MentalOrBehavioralDysfunction'))), entails(and(instance(A, 'MentalOrBehavioralDysfunction'), '$existential'(B, '?ANIMAL', and(instance('?ANIMAL', 'Animal'), patient(A, '?ANIMAL')))), instance(B, 'Animal'))), and(entails(not(patient(A, B)), not(instance(A, 'MentalOrBehavioralDysfunction'))), entails(and(instance(A, 'MentalOrBehavioralDysfunction'), '$existential'(B, '?ANIMAL', and(instance('?ANIMAL', 'Animal'), patient(A, '?ANIMAL')))), patient(A, B)))), [domainV(B, ['$instanceof':'Animal', patient:2]), domainV(A, ['$instanceof':'MentalOrBehavioralDysfunction', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ANIMAL', and(instance('?ANIMAL', 'Animal'), patient(A, '?ANIMAL'))))], ['DISEASE'=A, 'ANIMAL'=B], 'Merge', 'PROCESSES', 5213, 'Anonymous', on).
mooCache(subclass('Injuring', 'PathologicProcess'), subclass('Injuring', 'PathologicProcess'), [], [], 'Merge', 'PROCESSES', 5215, 'Anonymous', on).
mooCache(documentation('Injuring', string('"A traumatic wound or injury caused by an   external agent or force.  Since no injury is possible without some   biologic function which affects the organism being injured, it is a   subclass of BiologicalProcess."')), documentation('Injuring', string('"A traumatic wound or injury caused by an   external agent or force.  Since no injury is possible without some   biologic function which affects the organism being injured, it is a   subclass of BiologicalProcess."')), [], [], 'Merge', 'PROCESSES', 5217, 'Anonymous', on).
mooCache(=>(instance(A, 'Injuring'), exists(B, and(instance(B, 'AnatomicalStructure'), patient(A, B)))), and(and(entails(not(instance(B, 'AnatomicalStructure')), not(instance(A, 'Injuring'))), entails(and(instance(A, 'Injuring'), '$existential'(B, '?STRUCT', and(instance('?STRUCT', 'AnatomicalStructure'), patient(A, '?STRUCT')))), instance(B, 'AnatomicalStructure'))), and(entails(not(patient(A, B)), not(instance(A, 'Injuring'))), entails(and(instance(A, 'Injuring'), '$existential'(B, '?STRUCT', and(instance('?STRUCT', 'AnatomicalStructure'), patient(A, '?STRUCT')))), patient(A, B)))), [domainV(B, ['$instanceof':'AnatomicalStructure', patient:2]), domainV(A, ['$instanceof':'Injuring', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?STRUCT', and(instance('?STRUCT', 'AnatomicalStructure'), patient(A, '?STRUCT'))))], ['INJ'=A, 'STRUCT'=B], 'Merge', 'PROCESSES', 5219, 'Anonymous', on).
mooCache(<=>(instance(A, 'Injuring'), and(instance(A, 'Damaging'), patient(A, 'Organism'))), and(and(entails(instance(A, 'Injuring'), instance(A, 'Damaging')), and(entails(instance(A, 'Injuring'), patient(A, 'Organism')), entails(or(not(instance(A, 'Damaging')), not(patient(A, 'Organism'))), not(instance(A, 'Injuring'))))), and(entails(and(instance(A, 'Damaging'), patient(A, 'Organism')), instance(A, 'Injuring')), and(entails(and(not(instance(A, 'Injuring')), patient(A, 'Organism')), not(instance(A, 'Damaging'))), entails(and(not(instance(A, 'Injuring')), instance(A, 'Damaging')), not(patient(A, 'Organism')))))), [domainV(A, ['$instanceof':'Damaging', '$instanceof':'Injuring', patient:1]), domainV(B, []), forall(A)], ['INJ'=A], 'Merge', 'PROCESSES', 5221, 'Anonymous', on).
mooCache(subclass('Poisoning', 'Injuring'), subclass('Poisoning', 'Injuring'), [], [], 'Merge', 'PROCESSES', 5223, 'Anonymous', on).
mooCache(documentation('Poisoning', string('"A Poisoning is caused by an external   substance.  Since Poisoning is not possible without some biologic   function which affects the Organism being injured, it is a subclass   of BiologicalProcess."')), documentation('Poisoning', string('"A Poisoning is caused by an external   substance.  Since Poisoning is not possible without some biologic   function which affects the Organism being injured, it is a subclass   of BiologicalProcess."')), [], [], 'Merge', 'PROCESSES', 5225, 'Anonymous', on).
mooCache(=>(instance(A, 'Poisoning'), exists(B, and(patient(A, B), or(instance(B, 'Organism'), instance(B, 'AnatomicalStructure'))))), and(and(entails(not(patient(A, B)), not(instance(A, 'Poisoning'))), entails(and(instance(A, 'Poisoning'), '$existential'(B, '?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure'))))), patient(A, B))), and(entails(and(not(instance(B, 'Organism')), not(instance(B, 'AnatomicalStructure'))), not(instance(A, 'Poisoning'))), and(entails(and(and(instance(A, 'Poisoning'), not(instance(B, 'AnatomicalStructure'))), '$existential'(B, '?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure'))))), instance(B, 'Organism')), entails(and(and(instance(A, 'Poisoning'), not(instance(B, 'Organism'))), '$existential'(B, '?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure'))))), instance(B, 'AnatomicalStructure'))))), [domainV(B, ['$instanceof':'AnatomicalStructure', '$instanceof':'Organism', patient:2]), domainV(A, ['$instanceof':'Poisoning', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?THING', and(patient(A, '?THING'), or(instance('?THING', 'Organism'), instance('?THING', 'AnatomicalStructure')))))], ['POISON'=A, 'THING'=B], 'Merge', 'PROCESSES', 5227, 'Anonymous', on).
mooCache(=>(instance(A, 'Poisoning'), exists(B, and(instance(B, 'BiologicallyActiveSubstance'), instrument(A, B)))), and(and(entails(not(instance(B, 'BiologicallyActiveSubstance')), not(instance(A, 'Poisoning'))), entails(and(instance(A, 'Poisoning'), '$existential'(B, '?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), instrument(A, '?SUBSTANCE')))), instance(B, 'BiologicallyActiveSubstance'))), and(entails(not(instrument(A, B)), not(instance(A, 'Poisoning'))), entails(and(instance(A, 'Poisoning'), '$existential'(B, '?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), instrument(A, '?SUBSTANCE')))), instrument(A, B)))), [domainV(B, ['$instanceof':'BiologicallyActiveSubstance', instrument:2]), domainV(A, ['$instanceof':'Poisoning', instrument:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), instrument(A, '?SUBSTANCE'))))], ['POISON'=A, 'SUBSTANCE'=B], 'Merge', 'PROCESSES', 5229, 'Anonymous', on).
mooCache(subclass('IntentionalProcess', 'Process'), subclass('IntentionalProcess', 'Process'), [], [], 'Merge', 'PROCESSES', 5231, 'Anonymous', on).
mooCache(disjoint('IntentionalProcess', 'NonintentionalProcess'), disjoint('IntentionalProcess', 'NonintentionalProcess'), [], [], 'Merge', 'PROCESSES', 5233, 'Anonymous', on).
mooCache(documentation('IntentionalProcess', string('"A Process that is   deliberately set in motion by a CognitiveAgent."')), documentation('IntentionalProcess', string('"A Process that is   deliberately set in motion by a CognitiveAgent."')), [], [], 'Merge', 'PROCESSES', 5235, 'Anonymous', on).
mooCache(=>(and(instance(A, 'IntentionalProcess'), agent(A, B)), and(instance(B, 'CognitiveAgent'), exists(C, hasPurposeForAgent(A, C, B)))), and(and(entails(and(instance(A, 'IntentionalProcess'), agent(A, B)), instance(B, 'CognitiveAgent')), and(entails(and(not(instance(B, 'CognitiveAgent')), agent(A, B)), not(instance(A, 'IntentionalProcess'))), entails(and(not(instance(B, 'CognitiveAgent')), instance(A, 'IntentionalProcess')), not(agent(A, B))))), and(entails(and(and(instance(A, 'IntentionalProcess'), agent(A, B)), '$existential'(C, '?PURP', hasPurposeForAgent(A, '?PURP', B))), hasPurposeForAgent(A, C, B)), and(entails(and(not(hasPurposeForAgent(A, C, B)), agent(A, B)), not(instance(A, 'IntentionalProcess'))), entails(and(not(hasPurposeForAgent(A, C, B)), instance(A, 'IntentionalProcess')), not(agent(A, B)))))), [domainV(C, [hasPurposeForAgent:2]), domainV(B, ['$instanceof':'CognitiveAgent', agent:2, hasPurposeForAgent:3]), domainV(A, ['$instanceof':'IntentionalProcess', agent:1, hasPurposeForAgent:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PURP', hasPurposeForAgent(A, '?PURP', B)))], ['PROC'=A, 'AGENT'=B, 'PURP'=C], 'Merge', 'PROCESSES', 5237, 'Anonymous', on).
mooCache(=>(instance(A, 'IntentionalProcess'), exists(B, and(instance(B, 'CognitiveAgent'), agent(A, B)))), and(and(entails(not(instance(B, 'CognitiveAgent')), not(instance(A, 'IntentionalProcess'))), entails(and(instance(A, 'IntentionalProcess'), '$existential'(B, '?AGENT', and(instance('?AGENT', 'CognitiveAgent'), agent(A, '?AGENT')))), instance(B, 'CognitiveAgent'))), and(entails(not(agent(A, B)), not(instance(A, 'IntentionalProcess'))), entails(and(instance(A, 'IntentionalProcess'), '$existential'(B, '?AGENT', and(instance('?AGENT', 'CognitiveAgent'), agent(A, '?AGENT')))), agent(A, B)))), [domainV(B, ['$instanceof':'CognitiveAgent', agent:2]), domainV(A, ['$instanceof':'IntentionalProcess', agent:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?AGENT', and(instance('?AGENT', 'CognitiveAgent'), agent(A, '?AGENT'))))], ['PROC'=A, 'AGENT'=B], 'Merge', 'PROCESSES', 5239, 'Anonymous', on).
mooCache(subclass('RecreationalProcess', 'IntentionalProcess'), subclass('RecreationalProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5241, 'Anonymous', on).
mooCache(documentation('RecreationalProcess', string('"A Process that is carried out   for the purpose of recreation."')), documentation('RecreationalProcess', string('"A Process that is carried out   for the purpose of recreation."')), [], [], 'Merge', 'PROCESSES', 5243, 'Anonymous', on).
mooCache(subclass('ExerciseProcess', 'IntentionalProcess'), subclass('ExerciseProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5245, 'Anonymous', on).
mooCache(documentation('ExerciseProcess', string('"A Process that is carried out for   the purpose of exercise."')), documentation('ExerciseProcess', string('"A Process that is carried out for   the purpose of exercise."')), [], [], 'Merge', 'PROCESSES', 5247, 'Anonymous', on).
mooCache(subclass('DiagnosticProcess', 'IntentionalProcess'), subclass('DiagnosticProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5249, 'Anonymous', on).
mooCache(documentation('DiagnosticProcess', string('"A Process that is carried out for   the purpose of determining the nature of a DiseaseOrSyndrome."')), documentation('DiagnosticProcess', string('"A Process that is carried out for   the purpose of determining the nature of a DiseaseOrSyndrome."')), [], [], 'Merge', 'PROCESSES', 5251, 'Anonymous', on).
mooCache(subclass('TherapeuticProcess', 'IntentionalProcess'), subclass('TherapeuticProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5253, 'Anonymous', on).
mooCache(documentation('TherapeuticProcess', string('"A Process that is carried out   for the purpose of curing, improving or reducing the pain associated   with a DiseaseOrSyndrome."')), documentation('TherapeuticProcess', string('"A Process that is carried out   for the purpose of curing, improving or reducing the pain associated   with a DiseaseOrSyndrome."')), [], [], 'Merge', 'PROCESSES', 5255, 'Anonymous', on).
mooCache(subclass('Surgery', 'TherapeuticProcess'), subclass('Surgery', 'TherapeuticProcess'), [], [], 'Merge', 'PROCESSES', 5257, 'Anonymous', on).
mooCache(documentation('Surgery', string('"Any TherapeuticProcess that involves making an   incision in the Animal that is the patient of the TherapeuticProcess."')), documentation('Surgery', string('"Any TherapeuticProcess that involves making an   incision in the Animal that is the patient of the TherapeuticProcess."')), [], [], 'Merge', 'PROCESSES', 5259, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Surgery'), patient(A, B)), exists(C, and(instance(C, 'Cutting'), and(instance(B, 'Animal'), and(patient(B, D), subProcess(C, A)))))), and(and(entails(and(and(instance(A, 'Surgery'), patient(A, B)), '$existential'(C, '?SUBACT', and(instance('?SUBACT', 'Cutting'), and(instance(B, 'Animal'), and(patient(B, D), subProcess('?SUBACT', A)))))), instance(C, 'Cutting')), and(entails(and(not(instance(C, 'Cutting')), patient(A, B)), not(instance(A, 'Surgery'))), entails(and(not(instance(C, 'Cutting')), instance(A, 'Surgery')), not(patient(A, B))))), and(and(entails(and(instance(A, 'Surgery'), patient(A, B)), instance(B, 'Animal')), and(entails(and(not(instance(B, 'Animal')), patient(A, B)), not(instance(A, 'Surgery'))), entails(and(not(instance(B, 'Animal')), instance(A, 'Surgery')), not(patient(A, B))))), and(and(entails(and(instance(A, 'Surgery'), patient(A, B)), patient(B, D)), and(entails(and(not(patient(B, D)), patient(A, B)), not(instance(A, 'Surgery'))), entails(and(not(patient(B, D)), instance(A, 'Surgery')), not(patient(A, B))))), and(entails(and(and(instance(A, 'Surgery'), patient(A, B)), '$existential'(C, '?SUBACT', and(instance('?SUBACT', 'Cutting'), and(instance(B, 'Animal'), and(patient(B, D), subProcess('?SUBACT', A)))))), subProcess(C, A)), and(entails(and(not(subProcess(C, A)), patient(A, B)), not(instance(A, 'Surgery'))), entails(and(not(subProcess(C, A)), instance(A, 'Surgery')), not(patient(A, B)))))))), [domainV(D, [patient:2]), domainV(C, ['$instanceof':'Cutting', subProcess:1]), domainV(B, ['$instanceof':'Animal', patient:1, patient:2]), domainV(A, ['$instanceof':'Surgery', patient:1, subProcess:2]), domainV(E, []), forall(A), forall(B), forall(D), replaceConsVar(C, '$existential'('?SUBACT', and(instance('?SUBACT', 'Cutting'), and(instance(B, 'Animal'), and(patient(B, D), subProcess('?SUBACT', A))))))], ['ACT'=A, 'ANIMAL'=B, 'SUBACT'=C, 'CUTTING'=D], 'Merge', 'PROCESSES', 5261, 'Anonymous', on).
mooCache(subclass('OrganizationalProcess', 'IntentionalProcess'), subclass('OrganizationalProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5263, 'Anonymous', on).
mooCache(documentation('OrganizationalProcess', string('"An IntentionalProcess that   is carried out within or by an Organization."')), documentation('OrganizationalProcess', string('"An IntentionalProcess that   is carried out within or by an Organization."')), [], [], 'Merge', 'PROCESSES', 5265, 'Anonymous', on).
mooCache(=>(and(instance(A, 'OrganizationalProcess'), agent(A, B)), or(instance(B, 'Organization'), exists(C, and(instance(C, 'Organization'), member(B, C))))), and(and(entails(and(agent(A, B), and(not(instance(B, 'Organization')), not(instance(C, 'Organization')))), not(instance(A, 'OrganizationalProcess'))), and(entails(and(instance(A, 'OrganizationalProcess'), and(not(instance(B, 'Organization')), not(instance(C, 'Organization')))), not(agent(A, B))), and(entails(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(instance(C, 'Organization'))), instance(B, 'Organization')), entails(and(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(instance(B, 'Organization'))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), member(B, '?ORG')))), instance(C, 'Organization'))))), and(entails(and(agent(A, B), and(not(instance(B, 'Organization')), not(member(B, C)))), not(instance(A, 'OrganizationalProcess'))), and(entails(and(instance(A, 'OrganizationalProcess'), and(not(instance(B, 'Organization')), not(member(B, C)))), not(agent(A, B))), and(entails(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(member(B, C))), instance(B, 'Organization')), entails(and(and(and(instance(A, 'OrganizationalProcess'), agent(A, B)), not(instance(B, 'Organization'))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), member(B, '?ORG')))), member(B, C)))))), [domainV(C, ['$instanceof':'Organization', member:2]), domainV(B, ['$instanceof':'Organization', agent:2, member:1]), domainV(A, ['$instanceof':'OrganizationalProcess', agent:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?ORG', and(instance('?ORG', 'Organization'), member(B, '?ORG'))))], ['ACT'=A, 'AGENT'=B, 'ORG'=C], 'Merge', 'PROCESSES', 5267, 'Anonymous', on).
mooCache(subclass('EducationalProcess', 'OrganizationalProcess'), subclass('EducationalProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5269, 'Anonymous', on).
mooCache(documentation('EducationalProcess', string('"Any Process which occurs in an   organizational setting and which is intended to result in Learning."')), documentation('EducationalProcess', string('"Any Process which occurs in an   organizational setting and which is intended to result in Learning."')), [], [], 'Merge', 'PROCESSES', 5271, 'Anonymous', on).
mooCache(subclass('Managing', 'OrganizationalProcess'), subclass('Managing', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5273, 'Anonymous', on).
mooCache(documentation('Managing', string('"OccupationalProcesses that involve overseeing   the activities of others."')), documentation('Managing', string('"OccupationalProcesses that involve overseeing   the activities of others."')), [], [], 'Merge', 'PROCESSES', 5275, 'Anonymous', on).
mooCache(subclass('ReligiousProcess', 'OrganizationalProcess'), subclass('ReligiousProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5277, 'Anonymous', on).
mooCache(documentation('ReligiousProcess', string('"An OrganizationalProcess that is   carried out within or by a ReligiousOrganization."')), documentation('ReligiousProcess', string('"An OrganizationalProcess that is   carried out within or by a ReligiousOrganization."')), [], [], 'Merge', 'PROCESSES', 5279, 'Anonymous', on).
mooCache(=>(and(instance(A, 'ReligiousProcess'), agent(A, B)), or(instance(B, 'ReligiousOrganization'), exists(C, and(member(B, C), instance(C, 'ReligiousOrganization'))))), and(and(entails(and(agent(A, B), and(not(instance(B, 'ReligiousOrganization')), not(member(B, C)))), not(instance(A, 'ReligiousProcess'))), and(entails(and(instance(A, 'ReligiousProcess'), and(not(instance(B, 'ReligiousOrganization')), not(member(B, C)))), not(agent(A, B))), and(entails(and(and(instance(A, 'ReligiousProcess'), agent(A, B)), not(member(B, C))), instance(B, 'ReligiousOrganization')), entails(and(and(and(instance(A, 'ReligiousProcess'), agent(A, B)), not(instance(B, 'ReligiousOrganization'))), '$existential'(C, '?ORG', and(member(B, '?ORG'), instance('?ORG', 'ReligiousOrganization')))), member(B, C))))), and(entails(and(agent(A, B), and(not(instance(B, 'ReligiousOrganization')), not(instance(C, 'ReligiousOrganization')))), not(instance(A, 'ReligiousProcess'))), and(entails(and(instance(A, 'ReligiousProcess'), and(not(instance(B, 'ReligiousOrganization')), not(instance(C, 'ReligiousOrganization')))), not(agent(A, B))), and(entails(and(and(instance(A, 'ReligiousProcess'), agent(A, B)), not(instance(C, 'ReligiousOrganization'))), instance(B, 'ReligiousOrganization')), entails(and(and(and(instance(A, 'ReligiousProcess'), agent(A, B)), not(instance(B, 'ReligiousOrganization'))), '$existential'(C, '?ORG', and(member(B, '?ORG'), instance('?ORG', 'ReligiousOrganization')))), instance(C, 'ReligiousOrganization')))))), [domainV(C, ['$instanceof':'ReligiousOrganization', member:2]), domainV(B, ['$instanceof':'ReligiousOrganization', agent:2, member:1]), domainV(A, ['$instanceof':'ReligiousProcess', agent:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?ORG', and(member(B, '?ORG'), instance('?ORG', 'ReligiousOrganization'))))], ['ACT'=A, 'AGENT'=B, 'ORG'=C], 'Merge', 'PROCESSES', 5281, 'Anonymous', on).
mooCache(subclass('Graduation', 'OrganizationalProcess'), subclass('Graduation', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5283, 'Anonymous', on).
mooCache(documentation('Graduation', string('"The IntentionalProcess of graduating   from an EducationalOrganization."')), documentation('Graduation', string('"The IntentionalProcess of graduating   from an EducationalOrganization."')), [], [], 'Merge', 'PROCESSES', 5285, 'Anonymous', on).
mooCache(subclass('PoliticalProcess', 'OrganizationalProcess'), subclass('PoliticalProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5287, 'Anonymous', on).
mooCache(documentation('PoliticalProcess', string('"An OrganizationalProcess carried   out by officially constituted governments or with the aim of overthrowing   or modifying such a government."')), documentation('PoliticalProcess', string('"An OrganizationalProcess carried   out by officially constituted governments or with the aim of overthrowing   or modifying such a government."')), [], [], 'Merge', 'PROCESSES', 5289, 'Anonymous', on).
mooCache(subclass('RegulatoryProcess', 'OrganizationalProcess'), subclass('RegulatoryProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5291, 'Anonymous', on).
mooCache(documentation('RegulatoryProcess', string('"an OrganizationalProcess related   to the creation or enforcement of rules or regulations."')), documentation('RegulatoryProcess', string('"an OrganizationalProcess related   to the creation or enforcement of rules or regulations."')), [], [], 'Merge', 'PROCESSES', 5293, 'Anonymous', on).
mooCache(subclass('OccupationalProcess', 'OrganizationalProcess'), subclass('OccupationalProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5295, 'Anonymous', on).
mooCache(documentation('OccupationalProcess', string('"An OrganizationalProcess carried   out as part of an occupation or job."')), documentation('OccupationalProcess', string('"An OrganizationalProcess carried   out as part of an occupation or job."')), [], [], 'Merge', 'PROCESSES', 5297, 'Anonymous', on).
mooCache(=>(instance(A, 'OccupationalProcess'), exists(B, exists(C, and(instance(C, 'Organization'), and(employs(C, B), agent(A, B)))))), and(and(entails(not(instance(C, 'Organization')), not(instance(A, 'OccupationalProcess'))), entails(and(instance(A, 'OccupationalProcess'), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B))))), instance(C, 'Organization'))), and(and(entails(not(employs(C, B)), not(instance(A, 'OccupationalProcess'))), entails(and(and(instance(A, 'OccupationalProcess'), '$existential'(B, '?EMP', exists(C, and(instance(C, 'Organization'), and(employs(C, '?EMP'), agent(A, '?EMP')))))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B))))), employs(C, B))), and(entails(not(agent(A, B)), not(instance(A, 'OccupationalProcess'))), entails(and(and(instance(A, 'OccupationalProcess'), '$existential'(B, '?EMP', exists(C, and(instance(C, 'Organization'), and(employs(C, '?EMP'), agent(A, '?EMP')))))), '$existential'(C, '?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B))))), agent(A, B))))), [domainV(C, ['$instanceof':'Organization', employs:1]), domainV(B, [agent:2, employs:2]), domainV(A, ['$instanceof':'OccupationalProcess', agent:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?EMP', exists(C, and(instance(C, 'Organization'), and(employs(C, '?EMP'), agent(A, '?EMP')))))), replaceConsVar(C, '$existential'('?ORG', and(instance('?ORG', 'Organization'), and(employs('?ORG', B), agent(A, B)))))], ['ACT'=A, 'ORG'=C, 'EMP'=B], 'Merge', 'PROCESSES', 5299, 'Anonymous', on).
mooCache(subclass('Planning', 'MentalProcess'), subclass('Planning', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5301, 'Anonymous', on).
mooCache(documentation('Planning', string('"Specifying a set of actions in order to meet a   set of goals or objectives."')), documentation('Planning', string('"Specifying a set of actions in order to meet a   set of goals or objectives."')), [], [], 'Merge', 'PROCESSES', 5303, 'Anonymous', on).
mooCache(subclass('Increasing', 'Process'), subclass('Increasing', 'Process'), [], [], 'Merge', 'PROCESSES', 5305, 'Anonymous', on).
mooCache(disjoint('Increasing', 'Decreasing'), disjoint('Increasing', 'Decreasing'), [], [], 'Merge', 'PROCESSES', 5307, 'Anonymous', on).
mooCache(relatedInternalConcept('Increasing', 'Putting'), relatedInternalConcept('Increasing', 'Putting'), [], [], 'Merge', 'PROCESSES', 5309, 'Anonymous', on).
mooCache(documentation('Increasing', string('"Any Process where a PhysicalQuantity associated   with the patient is increased."')), documentation('Increasing', string('"Any Process where a PhysicalQuantity associated   with the patient is increased."')), [], [], 'Merge', 'PROCESSES', 5311, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Increasing'), patient(A, B)), exists(C, exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), equal('MeasureFn'(B, E), D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), equal('MeasureFn'(B, E), C)), greaterThan(C, D))))))), and(and(entails(and(and(and(instance(A, 'Increasing'), patient(A, B)), '$existential'(D, '?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1')))))), '$existential'(E, '?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), patient(A, B)), not(instance(A, 'Increasing'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), instance(A, 'Increasing')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Increasing'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), greaterThan('?QUANT2', D))))))), '$existential'(D, '?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1')))))), '$existential'(E, '?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), patient(A, B)), not(instance(A, 'Increasing'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), instance(A, 'Increasing')), not(patient(A, B))))), and(entails(and(and(and(and(instance(A, 'Increasing'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), greaterThan('?QUANT2', D))))))), '$existential'(D, '?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1')))))), '$existential'(E, '?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D))))), greaterThan(C, D)), and(entails(and(not(greaterThan(C, D)), patient(A, B)), not(instance(A, 'Increasing'))), entails(and(not(greaterThan(C, D)), instance(A, 'Increasing')), not(patient(A, B))))))), [domainV(E, ['MeasureFn':2]), domainV(D, ['MeasureFn':3, greaterThan:2]), domainV(C, ['MeasureFn':3, greaterThan:1]), domainV(B, ['MeasureFn':1, patient:2]), domainV(A, ['$instanceof':'Increasing', 'WhenFn':1, patient:1]), domainV(F, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?QUANT2', exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), greaterThan('?QUANT2', D))))))), replaceConsVar(D, '$existential'('?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1')))))), replaceConsVar(E, '$existential'('?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D)))))], ['INCREASE'=A, 'OBJ'=B, 'UNIT'=E, 'QUANT1'=D, 'QUANT2'=C], 'Merge', 'PROCESSES', 5313, 'Anonymous', on).
mooCache(subclass('Heating', 'Increasing'), subclass('Heating', 'Increasing'), [], [], 'Merge', 'PROCESSES', 5315, 'Anonymous', on).
mooCache(disjoint('Heating', 'Cooling'), disjoint('Heating', 'Cooling'), [], [], 'Merge', 'PROCESSES', 5317, 'Anonymous', on).
mooCache(documentation('Heating', string('"Any Increasing Process where the PhysicalQuantity   increased is a TemperatureMeasure."')), documentation('Heating', string('"Any Increasing Process where the PhysicalQuantity   increased is a TemperatureMeasure."')), [], [], 'Merge', 'PROCESSES', 5319, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Heating'), patient(A, B)), exists(C, exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), equal('MeasureFn'(B, E), D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), equal('MeasureFn'(B, E), C)), greaterThan(C, D)))))))), and(and(entails(and(and(instance(A, 'Heating'), patient(A, B)), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D)))))), instance(E, 'TemperatureMeasure')), and(entails(and(not(instance(E, 'TemperatureMeasure')), patient(A, B)), not(instance(A, 'Heating'))), entails(and(not(instance(E, 'TemperatureMeasure')), instance(A, 'Heating')), not(patient(A, B))))), and(and(entails(and(and(and(instance(A, 'Heating'), patient(A, B)), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D)))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), patient(A, B)), not(instance(A, 'Heating'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), instance(A, 'Heating')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Heating'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), greaterThan('?QUANT2', D)))))))), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D)))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), patient(A, B)), not(instance(A, 'Heating'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), instance(A, 'Heating')), not(patient(A, B))))), and(entails(and(and(and(and(instance(A, 'Heating'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), greaterThan('?QUANT2', D)))))))), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D)))))), greaterThan(C, D)), and(entails(and(not(greaterThan(C, D)), patient(A, B)), not(instance(A, 'Heating'))), entails(and(not(greaterThan(C, D)), instance(A, 'Heating')), not(patient(A, B)))))))), [domainV(E, ['$instanceof':'TemperatureMeasure', 'MeasureFn':2]), domainV(D, ['MeasureFn':3, greaterThan:2]), domainV(C, ['MeasureFn':3, greaterThan:1]), domainV(B, ['MeasureFn':1, patient:2]), domainV(A, ['$instanceof':'Heating', 'WhenFn':1, patient:1]), domainV(F, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), greaterThan('?QUANT2', D)))))))), replaceConsVar(D, '$existential'('?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), greaterThan(C, '?QUANT1'))))))), replaceConsVar(E, '$existential'('?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), greaterThan(C, D))))))], ['HEAT'=A, 'OBJ'=B, 'UNIT'=E, 'QUANT1'=D, 'QUANT2'=C], 'Merge', 'PROCESSES', 5321, 'Anonymous', on).
mooCache(subclass('Decreasing', 'Process'), subclass('Decreasing', 'Process'), [], [], 'Merge', 'PROCESSES', 5323, 'Anonymous', on).
mooCache(relatedInternalConcept('Decreasing', 'Removing'), relatedInternalConcept('Decreasing', 'Removing'), [], [], 'Merge', 'PROCESSES', 5325, 'Anonymous', on).
mooCache(documentation('Decreasing', string('"Any Process where a PhysicalQuantity associated   with the patient is decreased."')), documentation('Decreasing', string('"Any Process where a PhysicalQuantity associated   with the patient is decreased."')), [], [], 'Merge', 'PROCESSES', 5327, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Decreasing'), patient(A, B)), exists(C, exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), equal('MeasureFn'(B, E), D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), equal('MeasureFn'(B, E), C)), lessThan(C, D))))))), and(and(entails(and(and(and(instance(A, 'Decreasing'), patient(A, B)), '$existential'(D, '?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1')))))), '$existential'(E, '?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), patient(A, B)), not(instance(A, 'Decreasing'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), instance(A, 'Decreasing')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Decreasing'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D))))))), '$existential'(D, '?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1')))))), '$existential'(E, '?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), patient(A, B)), not(instance(A, 'Decreasing'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), instance(A, 'Decreasing')), not(patient(A, B))))), and(entails(and(and(and(and(instance(A, 'Decreasing'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D))))))), '$existential'(D, '?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1')))))), '$existential'(E, '?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D))))), lessThan(C, D)), and(entails(and(not(lessThan(C, D)), patient(A, B)), not(instance(A, 'Decreasing'))), entails(and(not(lessThan(C, D)), instance(A, 'Decreasing')), not(patient(A, B))))))), [domainV(E, ['MeasureFn':2]), domainV(D, ['MeasureFn':3, lessThan:2]), domainV(C, ['MeasureFn':3, lessThan:1]), domainV(B, ['MeasureFn':1, patient:2]), domainV(A, ['$instanceof':'Decreasing', 'WhenFn':1, patient:1]), domainV(F, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?QUANT2', exists(D, exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D))))))), replaceConsVar(D, '$existential'('?QUANT1', exists(E, and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1')))))), replaceConsVar(E, '$existential'('?UNIT', and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))], ['DECREASE'=A, 'OBJ'=B, 'UNIT'=E, 'QUANT1'=D, 'QUANT2'=C], 'Merge', 'PROCESSES', 5329, 'Anonymous', on).
mooCache(subclass('Cooling', 'Decreasing'), subclass('Cooling', 'Decreasing'), [], [], 'Merge', 'PROCESSES', 5331, 'Anonymous', on).
mooCache(documentation('Cooling', string('"Any Decreasing Process where the PhysicalQuantity   decreased is a TemperatureMeasure."')), documentation('Cooling', string('"Any Decreasing Process where the PhysicalQuantity   decreased is a TemperatureMeasure."')), [], [], 'Merge', 'PROCESSES', 5333, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Cooling'), patient(A, B)), exists(C, exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), equal('MeasureFn'(B, E), D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), equal('MeasureFn'(B, E), C)), lessThan(C, D)))))))), and(and(entails(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), instance(E, 'TemperatureMeasure')), and(entails(and(not(instance(E, 'TemperatureMeasure')), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(instance(E, 'TemperatureMeasure')), instance(A, 'Cooling')), not(patient(A, B))))), and(and(entails(and(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D))), instance(A, 'Cooling')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D)))))))), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C))), instance(A, 'Cooling')), not(patient(A, B))))), and(entails(and(and(and(and(instance(A, 'Cooling'), patient(A, B)), '$existential'(C, '?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D)))))))), '$existential'(D, '?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), '$existential'(E, '?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D)))))), lessThan(C, D)), and(entails(and(not(lessThan(C, D)), patient(A, B)), not(instance(A, 'Cooling'))), entails(and(not(lessThan(C, D)), instance(A, 'Cooling')), not(patient(A, B)))))))), [domainV(E, ['$instanceof':'TemperatureMeasure', 'MeasureFn':2]), domainV(D, ['MeasureFn':3, lessThan:2]), domainV(C, ['MeasureFn':3, lessThan:1]), domainV(B, ['MeasureFn':1, patient:2]), domainV(A, ['$instanceof':'Cooling', 'WhenFn':1, patient:1]), domainV(F, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?QUANT2', exists(D, exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT2')), lessThan('?QUANT2', D)))))))), replaceConsVar(D, '$existential'('?QUANT1', exists(E, and(instance(E, 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, E, '?QUANT1')), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, E, C)), lessThan(C, '?QUANT1'))))))), replaceConsVar(E, '$existential'('?UNIT', and(instance('?UNIT', 'TemperatureMeasure'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', D)), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), holds('MeasureFn', B, '?UNIT', C)), lessThan(C, D))))))], ['COOL'=A, 'OBJ'=B, 'UNIT'=E, 'QUANT1'=D, 'QUANT2'=C], 'Merge', 'PROCESSES', 5335, 'Anonymous', on).
mooCache(subclass('Motion', 'Process'), subclass('Motion', 'Process'), [], [], 'Merge', 'PROCESSES', 5337, 'Anonymous', on).
mooCache(documentation('Motion', string('"Any Process of movement."')), documentation('Motion', string('"Any Process of movement."')), [], [], 'Merge', 'PROCESSES', 5339, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Motion'), and(patient(A, B), origin(A, C))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(B, C))), and(entails(and(instance(A, 'Motion'), and(patient(A, B), origin(A, C))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(B, C))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(B, C))), and(patient(A, B), origin(A, C))), not(instance(A, 'Motion'))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(B, C))), and(instance(A, 'Motion'), origin(A, C))), not(patient(A, B))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(B, C))), and(instance(A, 'Motion'), patient(A, B))), not(origin(A, C)))))), [domainV(C, [located:2, origin:2]), domainV(B, [located:1, patient:2]), domainV(A, ['$instanceof':'Motion', 'WhenFn':1, origin:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MOTION'=A, 'OBJ'=B, 'PLACE'=C], 'Merge', 'PROCESSES', 5341, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Motion'), and(patient(A, B), destination(A, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(entails(and(instance(A, 'Motion'), and(patient(A, B), destination(A, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(patient(A, B), destination(A, C))), not(instance(A, 'Motion'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(instance(A, 'Motion'), destination(A, C))), not(patient(A, B))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(B, C))), and(instance(A, 'Motion'), patient(A, B))), not(destination(A, C)))))), [domainV(C, [destination:2, located:2]), domainV(B, [located:1, patient:2]), domainV(A, ['$instanceof':'Motion', 'WhenFn':1, destination:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['MOTION'=A, 'OBJ'=B, 'PLACE'=C], 'Merge', 'PROCESSES', 5343, 'Anonymous', on).
mooCache(instance(path, 'CaseRole'), instance(path, 'CaseRole'), [], [], 'Merge', 'PROCESSES', 5345, 'Anonymous', on).
mooCache(domain(path, 1, 'Motion'), domain(path, 1, 'Motion'), [], [], 'Merge', 'PROCESSES', 5347, 'Anonymous', on).
mooCache(domain(path, 2, 'Region'), domain(path, 2, 'Region'), [], [], 'Merge', 'PROCESSES', 5349, 'Anonymous', on).
mooCache(documentation(path, string('"(path ?MOTION ?PATH) means that ?PATH is a route   along which ?MOTION occurs.  For example, Highway 101 is the path in the   following proposition:  the car drove up Highway 101."')), documentation(path, string('"(path ?MOTION ?PATH) means that ?PATH is a route   along which ?MOTION occurs.  For example, Highway 101 is the path in the   following proposition:  the car drove up Highway 101."')), [], [], 'Merge', 'PROCESSES', 5351, 'Anonymous', on).
mooCache(=>(and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(exists(F, exists(G, and(path(A, G), and(origin(A, H), and(destination(A, D), and(length(G, F), lessThan(F, E)))))))))))), forall(I, =>(part(I, B), between(C, I, D)))), and(and(entails(and(not(between(C, I, D)), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(path(A, G))))))), not(part(I, B))), and(entails(and(and(part(I, B), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(path(A, G))))))), '$existential'(G, '?PATH2', and(path(A, '?PATH2'), and(origin(A, H), and(destination(A, D), and(length('?PATH2', F), lessThan(F, E))))))), between(C, I, D)), and(entails(and(and(part(I, B), not(between(C, I, D))), and(origin(A, C), and(destination(A, D), and(length(B, E), not(path(A, G)))))), not(path(A, B))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(destination(A, D), and(length(B, E), not(path(A, G)))))), not(origin(A, C))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(length(B, E), not(path(A, G)))))), not(destination(A, D))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), not(path(A, G)))))), not(length(B, E))), entails(and(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), length(B, E))))), '$existential'(G, '?PATH2', and(path(A, '?PATH2'), and(origin(A, H), and(destination(A, D), and(length('?PATH2', F), lessThan(F, E))))))), path(A, G)))))))), and(and(entails(and(not(between(C, I, D)), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(origin(A, H))))))), not(part(I, B))), and(entails(and(part(I, B), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(origin(A, H))))))), between(C, I, D)), and(entails(and(and(part(I, B), not(between(C, I, D))), and(origin(A, C), and(destination(A, D), and(length(B, E), not(origin(A, H)))))), not(path(A, B))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(destination(A, D), and(length(B, E), not(origin(A, H)))))), not(origin(A, C))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(length(B, E), not(origin(A, H)))))), not(destination(A, D))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), not(origin(A, H)))))), not(length(B, E))), entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), length(B, E))))), origin(A, H)))))))), and(and(entails(and(not(between(C, I, D)), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(destination(A, D))))))), not(part(I, B))), and(entails(and(part(I, B), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(destination(A, D))))))), between(C, I, D)), and(entails(and(and(part(I, B), not(between(C, I, D))), and(origin(A, C), and(destination(A, D), and(length(B, E), not(destination(A, D)))))), not(path(A, B))), entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(destination(A, D), and(length(B, E), not(destination(A, D)))))), not(origin(A, C)))))), and(and(entails(and(not(between(C, I, D)), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(length(G, F))))))), not(part(I, B))), and(entails(and(and(part(I, B), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(length(G, F))))))), '$existential'(G, '?PATH2', and(path(A, '?PATH2'), and(origin(A, H), and(destination(A, D), and(length('?PATH2', F), lessThan(F, E))))))), between(C, I, D)), and(entails(and(and(part(I, B), not(between(C, I, D))), and(origin(A, C), and(destination(A, D), and(length(B, E), not(length(G, F)))))), not(path(A, B))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(destination(A, D), and(length(B, E), not(length(G, F)))))), not(origin(A, C))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(length(B, E), not(length(G, F)))))), not(destination(A, D))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), not(length(G, F)))))), not(length(B, E))), entails(and(and(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), length(B, E))))), '$existential'(F, '?MEASURE2', exists(G, and(path(A, G), and(origin(A, H), and(destination(A, D), and(length(G, '?MEASURE2'), lessThan('?MEASURE2', E)))))))), '$existential'(G, '?PATH2', and(path(A, '?PATH2'), and(origin(A, H), and(destination(A, D), and(length('?PATH2', F), lessThan(F, E))))))), length(G, F)))))))), and(entails(and(not(between(C, I, D)), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(lessThan(F, E))))))), not(part(I, B))), and(entails(and(part(I, B), and(path(A, B), and(origin(A, C), and(destination(A, D), and(length(B, E), not(lessThan(F, E))))))), between(C, I, D)), and(entails(and(and(part(I, B), not(between(C, I, D))), and(origin(A, C), and(destination(A, D), and(length(B, E), not(lessThan(F, E)))))), not(path(A, B))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(destination(A, D), and(length(B, E), not(lessThan(F, E)))))), not(origin(A, C))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(length(B, E), not(lessThan(F, E)))))), not(destination(A, D))), and(entails(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), not(lessThan(F, E)))))), not(length(B, E))), entails(and(and(and(and(part(I, B), not(between(C, I, D))), and(path(A, B), and(origin(A, C), and(destination(A, D), length(B, E))))), '$existential'(F, '?MEASURE2', exists(G, and(path(A, G), and(origin(A, H), and(destination(A, D), and(length(G, '?MEASURE2'), lessThan('?MEASURE2', E)))))))), '$existential'(G, '?PATH2', and(path(A, '?PATH2'), and(origin(A, H), and(destination(A, D), and(length('?PATH2', F), lessThan(F, E))))))), lessThan(F, E)))))))))))), [domainV(I, [between:2, part:1]), domainV(H, [origin:2]), domainV(G, [length:1, path:2]), domainV(F, [length:2, lessThan:1]), domainV(E, [length:2, lessThan:2]), domainV(D, [between:3, destination:2]), domainV(C, [between:1, origin:2]), domainV(B, [length:1, part:2, path:2]), domainV(A, [destination:1, origin:1, path:1]), domainV(J, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(F), forall(G), forall(H), replaceConsVar(F, '$existential'('?MEASURE2', exists(G, and(path(A, G), and(origin(A, H), and(destination(A, D), and(length(G, '?MEASURE2'), lessThan('?MEASURE2', E)))))))), replaceConsVar(G, '$existential'('?PATH2', and(path(A, '?PATH2'), and(origin(A, H), and(destination(A, D), and(length('?PATH2', F), lessThan(F, E))))))), forall(I)], ['PROCESS'=A, 'PATH1'=B, 'SOURCE'=C, 'DEST'=D, 'MEASURE1'=E, 'PATH2'=G, 'MEASURE2'=F, 'ORIGIN'=H, 'OBJ'=I], 'Merge', 'PROCESSES', 5353, 'Anonymous', on).
mooCache(subclass('BodyMotion', 'Motion'), subclass('BodyMotion', 'Motion'), [], [], 'Merge', 'PROCESSES', 5355, 'Anonymous', on).
mooCache(documentation('BodyMotion', string('"Any Motion where the patient is a BodyPart."')), documentation('BodyMotion', string('"Any Motion where the patient is a BodyPart."')), [], [], 'Merge', 'PROCESSES', 5357, 'Anonymous', on).
mooCache(=>(instance(A, 'BodyMotion'), exists(B, and(instance(B, 'BodyPart'), patient(A, B)))), and(and(entails(not(instance(B, 'BodyPart')), not(instance(A, 'BodyMotion'))), entails(and(instance(A, 'BodyMotion'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'BodyPart'), patient(A, '?OBJ')))), instance(B, 'BodyPart'))), and(entails(not(patient(A, B)), not(instance(A, 'BodyMotion'))), entails(and(instance(A, 'BodyMotion'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'BodyPart'), patient(A, '?OBJ')))), patient(A, B)))), [domainV(B, ['$instanceof':'BodyPart', patient:2]), domainV(A, ['$instanceof':'BodyMotion', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(instance('?OBJ', 'BodyPart'), patient(A, '?OBJ'))))], ['MOTION'=A, 'OBJ'=B], 'Merge', 'PROCESSES', 5359, 'Anonymous', on).
mooCache(subclass('Walking', 'BodyMotion'), subclass('Walking', 'BodyMotion'), [], [], 'Merge', 'PROCESSES', 5361, 'Anonymous', on).
mooCache(documentation('Walking', string('"Any BodyMotion which is accomplished by   means of the legs of an Organism on land for the purpose of moving   from one point to another."')), documentation('Walking', string('"Any BodyMotion which is accomplished by   means of the legs of an Organism on land for the purpose of moving   from one point to another."')), [], [], 'Merge', 'PROCESSES', 5363, 'Anonymous', on).
mooCache(subclass('Swimming', 'BodyMotion'), subclass('Swimming', 'BodyMotion'), [], [], 'Merge', 'PROCESSES', 5365, 'Anonymous', on).
mooCache(documentation('Swimming', string('"Any deliberate and controlled BodyMotion   through water that is accomplished by an Organism."')), documentation('Swimming', string('"Any deliberate and controlled BodyMotion   through water that is accomplished by an Organism."')), [], [], 'Merge', 'PROCESSES', 5367, 'Anonymous', on).
mooCache(subclass('Dancing', 'BodyMotion'), subclass('Dancing', 'BodyMotion'), [], [], 'Merge', 'PROCESSES', 5369, 'Anonymous', on).
mooCache(documentation('Dancing', string('"Any BodyMotion of Humans which is   deliberately coordinated with music."')), documentation('Dancing', string('"Any BodyMotion of Humans which is   deliberately coordinated with music."')), [], [], 'Merge', 'PROCESSES', 5371, 'Anonymous', on).
mooCache(subclass('DirectionChange', 'Motion'), subclass('DirectionChange', 'Motion'), [], [], 'Merge', 'PROCESSES', 5373, 'Anonymous', on).
mooCache(documentation('DirectionChange', string('"The act of changing the direction in   which the patient of the act is oriented."')), documentation('DirectionChange', string('"The act of changing the direction in   which the patient of the act is oriented."')), [], [], 'Merge', 'PROCESSES', 5375, 'Anonymous', on).
mooCache(=>(instance(A, 'DirectionChange'), exists(B, and(instance(B, 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, B)))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, B)), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, B)))))))), and(and(entails(not(instance(B, 'DirectionalAttribute')), not(instance(A, 'DirectionChange'))), entails(and(instance(A, 'DirectionChange'), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), instance(B, 'DirectionalAttribute'))), and(and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, B)))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, B))))), not(instance(A, 'DirectionChange'))), and(entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, B))))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, B)))), entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, B))))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, B)))))), and(and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, B)))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, B)))), not(instance(A, 'DirectionChange'))), and(entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, B)))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, B)))), entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, B))))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, B))))), and(and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, B))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, B)))), not(instance(A, 'DirectionChange'))), and(entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, B)))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, B))), entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, B)))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, B))))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, B))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, B))))), not(instance(A, 'DirectionChange'))), and(entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, B))))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, B))), entails(and(and(instance(A, 'DirectionChange'), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, B)))), '$existential'(B, '?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, B)))))))))), [domainV(B, ['$instanceof':'DirectionalAttribute', attribute:2]), domainV(A, ['$instanceof':'DirectionChange', 'WhenFn':1, attribute:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ATTR', and(instance('?ATTR', 'DirectionalAttribute'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(A, '?ATTR')))), and(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(A, '?ATTR')), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(A, '?ATTR'))))))))], ['PROC'=A, 'ATTR'=B], 'Merge', 'PROCESSES', 5377, 'Anonymous', on).
mooCache(subclass('Transfer', 'Motion'), subclass('Transfer', 'Motion'), [], [], 'Merge', 'PROCESSES', 5379, 'Anonymous', on).
mooCache(documentation('Transfer', string('"Any instance of Motion where the agent   of the Motion and the patient of the Motion are not the same   thing."')), documentation('Transfer', string('"Any instance of Motion where the agent   of the Motion and the patient of the Motion are not the same   thing."')), [], [], 'Merge', 'PROCESSES', 5381, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Transfer'), and(agent(A, B), patient(A, C))), not(equal(B, C))), and(entails(and(instance(A, 'Transfer'), and(agent(A, B), patient(A, C))), not(equal(B, C))), and(entails(and(equal(B, C), and(agent(A, B), patient(A, C))), not(instance(A, 'Transfer'))), and(entails(and(equal(B, C), and(instance(A, 'Transfer'), patient(A, C))), not(agent(A, B))), entails(and(equal(B, C), and(instance(A, 'Transfer'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [patient:2]), domainV(B, [agent:2]), domainV(A, ['$instanceof':'Transfer', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TRANSFER'=A, 'AGENT'=B, 'PATIENT'=C], 'Merge', 'PROCESSES', 5383, 'Anonymous', on).
mooCache(subclass('Removing', 'Transfer'), subclass('Removing', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5385, 'Anonymous', on).
mooCache(documentation('Removing', string('"The Class of Processes where something is   taken away from a location.  Note that the thing removed and the location   are specified with the CaseRoles patient and origin, respectively."')), documentation('Removing', string('"The Class of Processes where something is   taken away from a location.  Note that the thing removed and the location   are specified with the CaseRoles patient and origin, respectively."')), [], [], 'Merge', 'PROCESSES', 5387, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Removing'), and(origin(A, B), patient(A, C))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(C, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(located(C, B))))), and(and(entails(and(instance(A, 'Removing'), and(origin(A, B), patient(A, C))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(C, B))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(C, B))), and(origin(A, B), patient(A, C))), not(instance(A, 'Removing'))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(C, B))), and(instance(A, 'Removing'), patient(A, C))), not(origin(A, B))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), located(C, B))), and(instance(A, 'Removing'), origin(A, B))), not(patient(A, C)))))), and(entails(and(instance(A, 'Removing'), and(origin(A, B), patient(A, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(located(C, B)))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(located(C, B)))), and(origin(A, B), patient(A, C))), not(instance(A, 'Removing'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(located(C, B)))), and(instance(A, 'Removing'), patient(A, C))), not(origin(A, B))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(located(C, B)))), and(instance(A, 'Removing'), origin(A, B))), not(patient(A, C))))))), [domainV(C, [located:1, patient:2]), domainV(B, [located:2, origin:2]), domainV(A, ['$instanceof':'Removing', 'WhenFn':1, origin:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['REMOVE'=A, 'PLACE'=B, 'OBJ'=C], 'Merge', 'PROCESSES', 5389, 'Anonymous', on).
mooCache(subclass('Cleaning', 'Removing'), subclass('Cleaning', 'Removing'), [], [], 'Merge', 'PROCESSES', 5391, 'Anonymous', on).
mooCache(documentation('Cleaning', string('"The Class of Processes where undesirable   Substances and/or Microorganisms are removed from an Object."')), documentation('Cleaning', string('"The Class of Processes where undesirable   Substances and/or Microorganisms are removed from an Object."')), [], [], 'Merge', 'PROCESSES', 5393, 'Anonymous', on).
mooCache(subclass('Putting', 'Transfer'), subclass('Putting', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5395, 'Anonymous', on).
mooCache(documentation('Putting', string('"The Class of Processes where something is put   in a location.  Note that the location is specified with the CaseRole   destination."')), documentation('Putting', string('"The Class of Processes where something is put   in a location.  Note that the location is specified with the CaseRole   destination."')), [], [], 'Merge', 'PROCESSES', 5397, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Putting'), and(destination(A, B), patient(A, C))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B)))), and(and(entails(and(instance(A, 'Putting'), and(destination(A, B), patient(A, C))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(destination(A, B), patient(A, C))), not(instance(A, 'Putting'))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(instance(A, 'Putting'), patient(A, C))), not(destination(A, B))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(located(C, B)))), and(instance(A, 'Putting'), destination(A, B))), not(patient(A, C)))))), and(entails(and(instance(A, 'Putting'), and(destination(A, B), patient(A, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(destination(A, B), patient(A, C))), not(instance(A, 'Putting'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(instance(A, 'Putting'), patient(A, C))), not(destination(A, B))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), located(C, B))), and(instance(A, 'Putting'), destination(A, B))), not(patient(A, C))))))), [domainV(C, [located:1, patient:2]), domainV(B, [destination:2, located:2]), domainV(A, ['$instanceof':'Putting', 'WhenFn':1, destination:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PUT'=A, 'PLACE'=B, 'OBJ'=C], 'Merge', 'PROCESSES', 5399, 'Anonymous', on).
mooCache(subclass('Substituting', 'Transfer'), subclass('Substituting', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5401, 'Anonymous', on).
mooCache(documentation('Substituting', string('"The Class of Transfers where one thing is   replaced with something else."')), documentation('Substituting', string('"The Class of Transfers where one thing is   replaced with something else."')), [], [], 'Merge', 'PROCESSES', 5403, 'Anonymous', on).
mooCache(=>(instance(A, 'Substituting'), exists(B, exists(C, exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient(F, C), and(destination(F, B), not(equal(D, C)))))))))))))))), and(and(entails(not(instance(F, 'Putting')), not(instance(A, 'Substituting'))), entails(and(instance(A, 'Substituting'), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), instance(F, 'Putting'))), and(and(entails(not(instance(E, 'Removing')), not(instance(A, 'Substituting'))), entails(and(and(instance(A, 'Substituting'), '$existential'(E, '?REMOVE', exists(F, and(instance(F, 'Putting'), and(instance('?REMOVE', 'Removing'), and(subProcess(F, A), and(subProcess('?REMOVE', A), and(patient('?REMOVE', D), and(origin('?REMOVE', B), and(patient(F, C), and(destination(F, B), not(equal(D, C))))))))))))), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), instance(E, 'Removing'))), and(and(entails(not(subProcess(F, A)), not(instance(A, 'Substituting'))), entails(and(instance(A, 'Substituting'), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), subProcess(F, A))), and(and(entails(not(subProcess(E, A)), not(instance(A, 'Substituting'))), entails(and(and(instance(A, 'Substituting'), '$existential'(E, '?REMOVE', exists(F, and(instance(F, 'Putting'), and(instance('?REMOVE', 'Removing'), and(subProcess(F, A), and(subProcess('?REMOVE', A), and(patient('?REMOVE', D), and(origin('?REMOVE', B), and(patient(F, C), and(destination(F, B), not(equal(D, C))))))))))))), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), subProcess(E, A))), and(and(entails(not(patient(E, D)), not(instance(A, 'Substituting'))), entails(and(and(and(instance(A, 'Substituting'), '$existential'(D, '?OBJ1', exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, '?OBJ1'), and(origin(E, B), and(patient(F, C), and(destination(F, B), not(equal('?OBJ1', C)))))))))))))), '$existential'(E, '?REMOVE', exists(F, and(instance(F, 'Putting'), and(instance('?REMOVE', 'Removing'), and(subProcess(F, A), and(subProcess('?REMOVE', A), and(patient('?REMOVE', D), and(origin('?REMOVE', B), and(patient(F, C), and(destination(F, B), not(equal(D, C))))))))))))), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), patient(E, D))), and(and(entails(not(origin(E, B)), not(instance(A, 'Substituting'))), entails(and(and(and(and(and(instance(A, 'Substituting'), '$existential'(B, '?PLACE', exists(C, exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, '?PLACE'), and(patient(F, C), and(destination(F, '?PLACE'), not(equal(D, C)))))))))))))))), '$existential'(C, '?OBJ2', exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient(F, '?OBJ2'), and(destination(F, B), not(equal(D, '?OBJ2'))))))))))))))), '$existential'(D, '?OBJ1', exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, '?OBJ1'), and(origin(E, B), and(patient(F, C), and(destination(F, B), not(equal('?OBJ1', C)))))))))))))), '$existential'(E, '?REMOVE', exists(F, and(instance(F, 'Putting'), and(instance('?REMOVE', 'Removing'), and(subProcess(F, A), and(subProcess('?REMOVE', A), and(patient('?REMOVE', D), and(origin('?REMOVE', B), and(patient(F, C), and(destination(F, B), not(equal(D, C))))))))))))), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), origin(E, B))), and(and(entails(not(patient(F, C)), not(instance(A, 'Substituting'))), entails(and(and(and(and(instance(A, 'Substituting'), '$existential'(C, '?OBJ2', exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient(F, '?OBJ2'), and(destination(F, B), not(equal(D, '?OBJ2'))))))))))))))), '$existential'(D, '?OBJ1', exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, '?OBJ1'), and(origin(E, B), and(patient(F, C), and(destination(F, B), not(equal('?OBJ1', C)))))))))))))), '$existential'(E, '?REMOVE', exists(F, and(instance(F, 'Putting'), and(instance('?REMOVE', 'Removing'), and(subProcess(F, A), and(subProcess('?REMOVE', A), and(patient('?REMOVE', D), and(origin('?REMOVE', B), and(patient(F, C), and(destination(F, B), not(equal(D, C))))))))))))), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), patient(F, C))), and(and(entails(not(destination(F, B)), not(instance(A, 'Substituting'))), entails(and(and(and(and(and(instance(A, 'Substituting'), '$existential'(B, '?PLACE', exists(C, exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, '?PLACE'), and(patient(F, C), and(destination(F, '?PLACE'), not(equal(D, C)))))))))))))))), '$existential'(C, '?OBJ2', exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient(F, '?OBJ2'), and(destination(F, B), not(equal(D, '?OBJ2'))))))))))))))), '$existential'(D, '?OBJ1', exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, '?OBJ1'), and(origin(E, B), and(patient(F, C), and(destination(F, B), not(equal('?OBJ1', C)))))))))))))), '$existential'(E, '?REMOVE', exists(F, and(instance(F, 'Putting'), and(instance('?REMOVE', 'Removing'), and(subProcess(F, A), and(subProcess('?REMOVE', A), and(patient('?REMOVE', D), and(origin('?REMOVE', B), and(patient(F, C), and(destination(F, B), not(equal(D, C))))))))))))), '$existential'(F, '?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C)))))))))))), destination(F, B))), and(entails(equal(D, C), not(instance(A, 'Substituting'))), entails(instance(A, 'Substituting'), not(equal(D, C)))))))))))), [domainV(F, ['$instanceof':'Putting', destination:1, patient:1, subProcess:1]), domainV(E, ['$instanceof':'Removing', origin:1, patient:1, subProcess:1]), domainV(D, [patient:2]), domainV(C, [patient:2]), domainV(B, [destination:2, origin:2]), domainV(A, ['$instanceof':'Substituting', subProcess:2]), domainV(G, []), forall(A), replaceConsVar(B, '$existential'('?PLACE', exists(C, exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, '?PLACE'), and(patient(F, C), and(destination(F, '?PLACE'), not(equal(D, C)))))))))))))))), replaceConsVar(C, '$existential'('?OBJ2', exists(D, exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient(F, '?OBJ2'), and(destination(F, B), not(equal(D, '?OBJ2'))))))))))))))), replaceConsVar(D, '$existential'('?OBJ1', exists(E, exists(F, and(instance(F, 'Putting'), and(instance(E, 'Removing'), and(subProcess(F, A), and(subProcess(E, A), and(patient(E, '?OBJ1'), and(origin(E, B), and(patient(F, C), and(destination(F, B), not(equal('?OBJ1', C)))))))))))))), replaceConsVar(E, '$existential'('?REMOVE', exists(F, and(instance(F, 'Putting'), and(instance('?REMOVE', 'Removing'), and(subProcess(F, A), and(subProcess('?REMOVE', A), and(patient('?REMOVE', D), and(origin('?REMOVE', B), and(patient(F, C), and(destination(F, B), not(equal(D, C))))))))))))), replaceConsVar(F, '$existential'('?PUT', and(instance('?PUT', 'Putting'), and(instance(E, 'Removing'), and(subProcess('?PUT', A), and(subProcess(E, A), and(patient(E, D), and(origin(E, B), and(patient('?PUT', C), and(destination('?PUT', B), not(equal(D, C))))))))))))], ['SUB'=A, 'PUT'=F, 'REMOVE'=E, 'OBJ1'=D, 'OBJ2'=C, 'PLACE'=B], 'Merge', 'PROCESSES', 5405, 'Anonymous', on).
mooCache(subclass('Arranging', 'Transfer'), subclass('Arranging', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5407, 'Anonymous', on).
mooCache(documentation('Arranging', string('"The Class of IntentionallyCausedProcesses   where the order of Objects in a Collection is altered."')), documentation('Arranging', string('"The Class of IntentionallyCausedProcesses   where the order of Objects in a Collection is altered."')), [], [], 'Merge', 'PROCESSES', 5409, 'Anonymous', on).
mooCache(subclass('Impelling', 'Transfer'), subclass('Impelling', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5411, 'Anonymous', on).
mooCache(documentation('Impelling', string('"The subclass of Transfer where the patient   travels through space by means of a sudden, forceful event.  Some examples   would be shooting, throwing, tossing, etc."')), documentation('Impelling', string('"The subclass of Transfer where the patient   travels through space by means of a sudden, forceful event.  Some examples   would be shooting, throwing, tossing, etc."')), [], [], 'Merge', 'PROCESSES', 5413, 'Anonymous', on).
mooCache(subclass('Shooting', 'Impelling'), subclass('Shooting', 'Impelling'), [], [], 'Merge', 'PROCESSES', 5415, 'Anonymous', on).
mooCache(documentation('Shooting', string('"The subclass of Impelling where the patient   is a projectile that is fired through the air by means of some sort of   Device."')), documentation('Shooting', string('"The subclass of Impelling where the patient   is a projectile that is fired through the air by means of some sort of   Device."')), [], [], 'Merge', 'PROCESSES', 5417, 'Anonymous', on).
mooCache(subclass('Transportation', 'Motion'), subclass('Transportation', 'Motion'), [], [], 'Merge', 'PROCESSES', 5419, 'Anonymous', on).
mooCache(relatedInternalConcept('Transportation', 'TransportationDevice'), relatedInternalConcept('Transportation', 'TransportationDevice'), [], [], 'Merge', 'PROCESSES', 5421, 'Anonymous', on).
mooCache(documentation('Transportation', string('"Motion from one point to another by means   of a TransportationDevice."')), documentation('Transportation', string('"Motion from one point to another by means   of a TransportationDevice."')), [], [], 'Merge', 'PROCESSES', 5423, 'Anonymous', on).
mooCache(=>(instance(A, 'Transportation'), exists(B, and(instance(B, 'TransportationDevice'), instrument(A, B)))), and(and(entails(not(instance(B, 'TransportationDevice')), not(instance(A, 'Transportation'))), entails(and(instance(A, 'Transportation'), '$existential'(B, '?DEVICE', and(instance('?DEVICE', 'TransportationDevice'), instrument(A, '?DEVICE')))), instance(B, 'TransportationDevice'))), and(entails(not(instrument(A, B)), not(instance(A, 'Transportation'))), entails(and(instance(A, 'Transportation'), '$existential'(B, '?DEVICE', and(instance('?DEVICE', 'TransportationDevice'), instrument(A, '?DEVICE')))), instrument(A, B)))), [domainV(B, ['$instanceof':'TransportationDevice', instrument:2]), domainV(A, ['$instanceof':'Transportation', instrument:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?DEVICE', and(instance('?DEVICE', 'TransportationDevice'), instrument(A, '?DEVICE'))))], ['TRANS'=A, 'DEVICE'=B], 'Merge', 'PROCESSES', 5425, 'Anonymous', on).
mooCache(subclass('Guiding', 'IntentionalProcess'), subclass('Guiding', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5427, 'Anonymous', on).
mooCache(documentation('Guiding', string('"Controlling the direction and/or speed of a   CorpuscularObject.  This includes aiming a gun or arrow, navigating a   ship, driving a car or truck, operating a train, etc."')), documentation('Guiding', string('"Controlling the direction and/or speed of a   CorpuscularObject.  This includes aiming a gun or arrow, navigating a   ship, driving a car or truck, operating a train, etc."')), [], [], 'Merge', 'PROCESSES', 5429, 'Anonymous', on).
mooCache(subclass('ChangeOfPossession', 'SocialInteraction'), subclass('ChangeOfPossession', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5431, 'Anonymous', on).
mooCache(relatedInternalConcept('ChangeOfPossession', possesses), relatedInternalConcept('ChangeOfPossession', possesses), [], [], 'Merge', 'PROCESSES', 5433, 'Anonymous', on).
mooCache(documentation('ChangeOfPossession', string('"The Class of Processes where   ownership of something is transferred from one Agent to another."')), documentation('ChangeOfPossession', string('"The Class of Processes where   ownership of something is transferred from one Agent to another."')), [], [], 'Merge', 'PROCESSES', 5435, 'Anonymous', on).
mooCache(=>(and(instance(A, 'ChangeOfPossession'), and(patient(A, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(C, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(D, B))))), not(equal(C, D))), and(entails(and(instance(A, 'ChangeOfPossession'), and(patient(A, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(C, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(D, B))))), not(equal(C, D))), and(entails(and(equal(C, D), and(patient(A, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(C, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(D, B))))), not(instance(A, 'ChangeOfPossession'))), and(entails(and(equal(C, D), and(instance(A, 'ChangeOfPossession'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(C, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(D, B))))), not(patient(A, B))), and(entails(and(equal(C, D), and(instance(A, 'ChangeOfPossession'), and(patient(A, B), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(D, B))))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(C, B)))), entails(and(equal(C, D), and(instance(A, 'ChangeOfPossession'), and(patient(A, B), holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(C, B))))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(D, B)))))))), [domainV(D, [possesses:1]), domainV(C, [possesses:1]), domainV(B, [patient:2, possesses:2]), domainV(A, ['$instanceof':'ChangeOfPossession', 'WhenFn':1, patient:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['CHANGE'=A, 'OBJ'=B, 'AGENT1'=C, 'AGENT2'=D], 'Merge', 'PROCESSES', 5437, 'Anonymous', on).
mooCache(subclass('Giving', 'ChangeOfPossession'), subclass('Giving', 'ChangeOfPossession'), [], [], 'Merge', 'PROCESSES', 5439, 'Anonymous', on).
mooCache(documentation('Giving', string('"The subclass of ChangeOfPossession where the   agent gives the destination something."')), documentation('Giving', string('"The subclass of ChangeOfPossession where the   agent gives the destination something."')), [], [], 'Merge', 'PROCESSES', 5441, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D)))), and(and(entails(and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Giving'))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(destination(A, C))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), possesses(B, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), instance(C, 'Agent'))))), not(patient(A, D)))))))), and(entails(and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(agent(A, B), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Giving'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(destination(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(destination(A, C))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), possesses(C, D))), and(instance(A, 'Giving'), and(agent(A, B), and(destination(A, C), instance(C, 'Agent'))))), not(patient(A, D))))))))), [domainV(D, [patient:2, possesses:2]), domainV(C, ['$instanceof':'Agent', destination:2, possesses:1]), domainV(B, [agent:2, possesses:1]), domainV(A, ['$instanceof':'Giving', 'WhenFn':1, agent:1, destination:1, patient:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['GIVE'=A, 'AGENT1'=B, 'AGENT2'=C, 'OBJ'=D], 'Merge', 'PROCESSES', 5443, 'Anonymous', on).
mooCache(subclass('Lending', 'Giving'), subclass('Lending', 'Giving'), [], [], 'Merge', 'PROCESSES', 5445, 'Anonymous', on).
mooCache(documentation('Lending', string('"The subclass of Giving Processes where   the agent gives the destination something for a limited period of   time with the expectation that it will be returned later (perhaps with   interest)."')), documentation('Lending', string('"The subclass of Giving Processes where   the agent gives the destination something for a limited period of   time with the expectation that it will be returned later (perhaps with   interest)."')), [], [], 'Merge', 'PROCESSES', 5447, 'Anonymous', on).
mooCache(subclass('Getting', 'ChangeOfPossession'), subclass('Getting', 'ChangeOfPossession'), [], [], 'Merge', 'PROCESSES', 5449, 'Anonymous', on).
mooCache(documentation('Getting', string('"The subclass of ChangeOfPossession where the  agent gets something.  Note that the source from which something is   obtained is specified with the origin CaseRole."')), documentation('Getting', string('"The subclass of ChangeOfPossession where the  agent gets something.  Note that the source from which something is   obtained is specified with the origin CaseRole."')), [], [], 'Merge', 'PROCESSES', 5451, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), exists(E, and(instance(E, 'Giving'), and(agent(E, C), and(destination(E, B), patient(E, D)))))), and(and(entails(and(and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), '$existential'(E, '?GIVE', and(instance('?GIVE', 'Giving'), and(agent('?GIVE', C), and(destination('?GIVE', B), patient('?GIVE', D)))))), instance(E, 'Giving')), and(entails(and(not(instance(E, 'Giving')), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Getting'))), and(entails(and(not(instance(E, 'Giving')), and(instance(A, 'Getting'), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(instance(E, 'Giving')), and(instance(A, 'Getting'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(origin(A, C))), and(entails(and(not(instance(E, 'Giving')), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(instance(E, 'Giving')), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), instance(C, 'Agent'))))), not(patient(A, D)))))))), and(and(entails(and(and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), '$existential'(E, '?GIVE', and(instance('?GIVE', 'Giving'), and(agent('?GIVE', C), and(destination('?GIVE', B), patient('?GIVE', D)))))), agent(E, C)), and(entails(and(not(agent(E, C)), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Getting'))), and(entails(and(not(agent(E, C)), and(instance(A, 'Getting'), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(agent(E, C)), and(instance(A, 'Getting'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(origin(A, C))), and(entails(and(not(agent(E, C)), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(agent(E, C)), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), instance(C, 'Agent'))))), not(patient(A, D)))))))), and(and(entails(and(and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), '$existential'(E, '?GIVE', and(instance('?GIVE', 'Giving'), and(agent('?GIVE', C), and(destination('?GIVE', B), patient('?GIVE', D)))))), destination(E, B)), and(entails(and(not(destination(E, B)), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Getting'))), and(entails(and(not(destination(E, B)), and(instance(A, 'Getting'), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(destination(E, B)), and(instance(A, 'Getting'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(origin(A, C))), and(entails(and(not(destination(E, B)), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(destination(E, B)), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), instance(C, 'Agent'))))), not(patient(A, D)))))))), and(entails(and(and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), '$existential'(E, '?GIVE', and(instance('?GIVE', 'Giving'), and(agent('?GIVE', C), and(destination('?GIVE', B), patient('?GIVE', D)))))), patient(E, D)), and(entails(and(not(patient(E, D)), and(agent(A, B), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(instance(A, 'Getting'))), and(entails(and(not(patient(E, D)), and(instance(A, 'Getting'), and(origin(A, C), and(instance(C, 'Agent'), patient(A, D))))), not(agent(A, B))), and(entails(and(not(patient(E, D)), and(instance(A, 'Getting'), and(agent(A, B), and(instance(C, 'Agent'), patient(A, D))))), not(origin(A, C))), and(entails(and(not(patient(E, D)), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), patient(A, D))))), not(instance(C, 'Agent'))), entails(and(not(patient(E, D)), and(instance(A, 'Getting'), and(agent(A, B), and(origin(A, C), instance(C, 'Agent'))))), not(patient(A, D))))))))))), [domainV(E, ['$instanceof':'Giving', agent:1, destination:1, patient:1]), domainV(D, [patient:2]), domainV(C, ['$instanceof':'Agent', agent:2, origin:2]), domainV(B, [agent:2, destination:2]), domainV(A, ['$instanceof':'Getting', agent:1, origin:1, patient:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), replaceConsVar(E, '$existential'('?GIVE', and(instance('?GIVE', 'Giving'), and(agent('?GIVE', C), and(destination('?GIVE', B), patient('?GIVE', D))))))], ['GET'=A, 'AGENT1'=B, 'AGENT2'=C, 'OBJ'=D, 'GIVE'=E], 'Merge', 'PROCESSES', 5453, 'Anonymous', on).
mooCache(subclass('Borrowing', 'Getting'), subclass('Borrowing', 'Getting'), [], [], 'Merge', 'PROCESSES', 5455, 'Anonymous', on).
mooCache(documentation('Borrowing', string('"The subclass of Getting Processes where   the agent gets something for a limited period of time with the expectation   that it will be returned later (perhaps with interest)."')), documentation('Borrowing', string('"The subclass of Getting Processes where   the agent gets something for a limited period of time with the expectation   that it will be returned later (perhaps with interest)."')), [], [], 'Merge', 'PROCESSES', 5457, 'Anonymous', on).
mooCache(subclass('Transaction', 'ChangeOfPossession'), subclass('Transaction', 'ChangeOfPossession'), [], [], 'Merge', 'PROCESSES', 5459, 'Anonymous', on).
mooCache(documentation('Transaction', string('"The subclass of ChangeOfPossession where   something is exchanged for something else."')), documentation('Transaction', string('"The subclass of ChangeOfPossession where   something is exchanged for something else."')), [], [], 'Merge', 'PROCESSES', 5461, 'Anonymous', on).
mooCache(=>(instance(A, 'Transaction'), exists(B, exists(C, exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))))), and(and(entails(not(instance(E, 'Giving')), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), instance(E, 'Giving'))), and(and(entails(not(instance(D, 'Giving')), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), instance(D, 'Giving'))), and(and(entails(not(subProcess(E, A)), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), subProcess(E, A))), and(and(entails(not(subProcess(D, A)), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), subProcess(D, A))), and(and(entails(not(agent(E, G)), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), agent(E, G))), and(and(entails(not(agent(D, F)), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), agent(D, F))), and(and(entails(not(patient(E, C)), not(instance(A, 'Transaction'))), entails(and(and(and(and(and(instance(A, 'Transaction'), '$existential'(C, '?OBJ1', exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, '?OBJ1'), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal('?OBJ1', B))))))))))))))))))), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), patient(E, C))), and(and(entails(not(patient(D, B)), not(instance(A, 'Transaction'))), entails(and(and(and(and(and(and(instance(A, 'Transaction'), '$existential'(B, '?OBJ2', exists(C, exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, C), and(patient(D, '?OBJ2'), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, '?OBJ2')))))))))))))))))))), '$existential'(C, '?OBJ1', exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, '?OBJ1'), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal('?OBJ1', B))))))))))))))))))), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), patient(D, B))), and(and(entails(not(destination(E, F)), not(instance(A, 'Transaction'))), entails(and(and(and(instance(A, 'Transaction'), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), destination(E, F))), and(and(entails(not(destination(D, G)), not(instance(A, 'Transaction'))), entails(and(and(and(and(instance(A, 'Transaction'), '$existential'(D, '?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), '$existential'(E, '?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), '$existential'(F, '?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), '$existential'(G, '?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B))))))))))))))), destination(D, G))), and(and(entails(equal(G, F), not(instance(A, 'Transaction'))), entails(instance(A, 'Transaction'), not(equal(G, F)))), and(entails(equal(C, B), not(instance(A, 'Transaction'))), entails(instance(A, 'Transaction'), not(equal(C, B))))))))))))))), [domainV(G, [agent:2, destination:2]), domainV(F, [agent:2, destination:2]), domainV(E, ['$instanceof':'Giving', agent:1, destination:1, patient:1, subProcess:1]), domainV(D, ['$instanceof':'Giving', agent:1, destination:1, patient:1, subProcess:1]), domainV(C, [patient:2]), domainV(B, [patient:2]), domainV(A, ['$instanceof':'Transaction', subProcess:2]), domainV(H, []), forall(A), replaceConsVar(B, '$existential'('?OBJ2', exists(C, exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, C), and(patient(D, '?OBJ2'), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, '?OBJ2')))))))))))))))))))), replaceConsVar(C, '$existential'('?OBJ1', exists(D, exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, F), and(patient(E, '?OBJ1'), and(patient(D, B), and(destination(E, F), and(destination(D, G), and(not(equal(G, F)), not(equal('?OBJ1', B))))))))))))))))))), replaceConsVar(D, '$existential'('?GIVE2', exists(E, exists(F, exists(G, and(instance(E, 'Giving'), and(instance('?GIVE2', 'Giving'), and(subProcess(E, A), and(subProcess('?GIVE2', A), and(agent(E, G), and(agent('?GIVE2', F), and(patient(E, C), and(patient('?GIVE2', B), and(destination(E, F), and(destination('?GIVE2', G), and(not(equal(G, F)), not(equal(C, B)))))))))))))))))), replaceConsVar(E, '$existential'('?GIVE1', exists(F, exists(G, and(instance('?GIVE1', 'Giving'), and(instance(D, 'Giving'), and(subProcess('?GIVE1', A), and(subProcess(D, A), and(agent('?GIVE1', G), and(agent(D, F), and(patient('?GIVE1', C), and(patient(D, B), and(destination('?GIVE1', F), and(destination(D, G), and(not(equal(G, F)), not(equal(C, B))))))))))))))))), replaceConsVar(F, '$existential'('?AGENT2', exists(G, and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, G), and(agent(D, '?AGENT2'), and(patient(E, C), and(patient(D, B), and(destination(E, '?AGENT2'), and(destination(D, G), and(not(equal(G, '?AGENT2')), not(equal(C, B)))))))))))))))), replaceConsVar(G, '$existential'('?AGENT1', and(instance(E, 'Giving'), and(instance(D, 'Giving'), and(subProcess(E, A), and(subProcess(D, A), and(agent(E, '?AGENT1'), and(agent(D, F), and(patient(E, C), and(patient(D, B), and(destination(E, F), and(destination(D, '?AGENT1'), and(not(equal('?AGENT1', F)), not(equal(C, B)))))))))))))))], ['TRANS'=A, 'AGENT1'=G, 'AGENT2'=F, 'GIVE1'=E, 'GIVE2'=D, 'OBJ1'=C, 'OBJ2'=B], 'Merge', 'PROCESSES', 5463, 'Anonymous', on).
mooCache(subclass('FinancialTransaction', 'Transaction'), subclass('FinancialTransaction', 'Transaction'), [], [], 'Merge', 'PROCESSES', 5465, 'Anonymous', on).
mooCache(documentation('FinancialTransaction', string('"A Transaction where an instance   of CurrencyMeasure is exchanged for something else."')), documentation('FinancialTransaction', string('"A Transaction where an instance   of CurrencyMeasure is exchanged for something else."')), [], [], 'Merge', 'PROCESSES', 5467, 'Anonymous', on).
mooCache(subclass('Betting', 'FinancialTransaction'), subclass('Betting', 'FinancialTransaction'), [], [], 'Merge', 'PROCESSES', 5469, 'Anonymous', on).
mooCache(documentation('Betting', string('"A FinancialTransaction where an instance of   CurrencyMeasure is exchanged for the possibility of winning a larger   instance of CurrencyMeasure within the context of some sort of   Game."')), documentation('Betting', string('"A FinancialTransaction where an instance of   CurrencyMeasure is exchanged for the possibility of winning a larger   instance of CurrencyMeasure within the context of some sort of   Game."')), [], [], 'Merge', 'PROCESSES', 5471, 'Anonymous', on).
mooCache(subclass('Buying', 'FinancialTransaction'), subclass('Buying', 'FinancialTransaction'), [], [], 'Merge', 'PROCESSES', 5473, 'Anonymous', on).
mooCache(relatedInternalConcept('Buying', 'Selling'), relatedInternalConcept('Buying', 'Selling'), [], [], 'Merge', 'PROCESSES', 5475, 'Anonymous', on).
mooCache(documentation('Buying', string('"A FinancialTransaction in which an instance of   CurrencyMeasure is exchanged for an instance of Physical."')), documentation('Buying', string('"A FinancialTransaction in which an instance of   CurrencyMeasure is exchanged for an instance of Physical."')), [], [], 'Merge', 'PROCESSES', 5477, 'Anonymous', on).
mooCache(subclass('Selling', 'FinancialTransaction'), subclass('Selling', 'FinancialTransaction'), [], [], 'Merge', 'PROCESSES', 5479, 'Anonymous', on).
mooCache(documentation('Selling', string('"A FinancialTransaction in which an instance of   Physical is exchanged for an instance of CurrencyMeasure."')), documentation('Selling', string('"A FinancialTransaction in which an instance of   Physical is exchanged for an instance of CurrencyMeasure."')), [], [], 'Merge', 'PROCESSES', 5481, 'Anonymous', on).
mooCache(<=>(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D))))), and(and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), instance(E, 'Selling')), and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), agent(E, C)), and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), destination(E, B)), and(entails(and(instance(A, 'Buying'), and(agent(A, B), and(origin(A, C), patient(A, D)))), patient(E, D)), and(entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(agent(A, B), and(origin(A, C), patient(A, D)))), not(instance(A, 'Buying'))), and(entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(instance(A, 'Buying'), and(origin(A, C), patient(A, D)))), not(agent(A, B))), and(entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(instance(A, 'Buying'), and(agent(A, B), patient(A, D)))), not(origin(A, C))), entails(and(or(not(instance(E, 'Selling')), or(not(agent(E, C)), or(not(destination(E, B)), not(patient(E, D))))), and(instance(A, 'Buying'), and(agent(A, B), origin(A, C)))), not(patient(A, D)))))))))), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), instance(A, 'Buying')), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), agent(A, B)), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), origin(A, C)), and(entails(and(instance(E, 'Selling'), and(agent(E, C), and(destination(E, B), patient(E, D)))), patient(A, D)), and(entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(agent(E, C), and(destination(E, B), patient(E, D)))), not(instance(E, 'Selling'))), and(entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(instance(E, 'Selling'), and(destination(E, B), patient(E, D)))), not(agent(E, C))), and(entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(instance(E, 'Selling'), and(agent(E, C), patient(E, D)))), not(destination(E, B))), entails(and(or(not(instance(A, 'Buying')), or(not(agent(A, B)), or(not(origin(A, C)), not(patient(A, D))))), and(instance(E, 'Selling'), and(agent(E, C), destination(E, B)))), not(patient(E, D))))))))))), [domainV(E, ['$instanceof':'Selling', agent:1, destination:1, patient:1]), domainV(D, [patient:2]), domainV(C, [agent:2, origin:2]), domainV(B, [agent:2, destination:2]), domainV(A, ['$instanceof':'Buying', agent:1, origin:1, patient:1]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['BUY'=A, 'AGENT1'=B, 'AGENT2'=C, 'OBJECT'=D, 'SELL'=E], 'Merge', 'PROCESSES', 5483, 'Anonymous', on).
mooCache(subclass('Learning', 'MentalProcess'), subclass('Learning', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5485, 'Anonymous', on).
mooCache(documentation('Learning', string('"The Class of Processes which relate to the   acquisition of information."')), documentation('Learning', string('"The Class of Processes which relate to the   acquisition of information."')), [], [], 'Merge', 'PROCESSES', 5487, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Learning'), agent(A, B)), instance(B, 'CognitiveAgent')), and(entails(and(instance(A, 'Learning'), agent(A, B)), instance(B, 'CognitiveAgent')), and(entails(and(not(instance(B, 'CognitiveAgent')), agent(A, B)), not(instance(A, 'Learning'))), entails(and(not(instance(B, 'CognitiveAgent')), instance(A, 'Learning')), not(agent(A, B))))), [domainV(B, ['$instanceof':'CognitiveAgent', agent:2]), domainV(A, ['$instanceof':'Learning', agent:1]), domainV(C, []), forall(A), forall(B)], ['LEARN'=A, 'AGENT'=B], 'Merge', 'PROCESSES', 5489, 'Anonymous', on).
mooCache(=>(holdsDuring(A, exists(B, and(instance(B, 'Learning'), and(agent(B, C), patient(B, D))))), holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(entails(and(holdsDuring(A, instance(B, 'Learning')), and(holdsDuring(A, agent(B, C)), holdsDuring(A, patient(B, D)))), holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(entails(and(not(holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(holdsDuring(A, agent(B, C)), holdsDuring(A, patient(B, D)))), not(holdsDuring(A, instance(B, 'Learning')))), and(entails(and(not(holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(holdsDuring(A, instance(B, 'Learning')), holdsDuring(A, patient(B, D)))), not(holdsDuring(A, agent(B, C)))), entails(and(not(holdsDuring('ImmediateFutureFn'(A), believes(C, D))), and(holdsDuring(A, instance(B, 'Learning')), holdsDuring(A, agent(B, C)))), not(holdsDuring(A, patient(B, D))))))), [domainV(D, [believes:2, patient:2]), domainV(C, [agent:2, believes:1]), domainV(B, ['$instanceof':'Learning', agent:1, patient:1]), domainV(A, ['ImmediateFutureFn':1, holdsDuring:1]), domainV(E, []), forall(A), forall(C), forall(D), forall(B)], ['TIME'=A, 'LEARN'=B, 'AGENT'=C, 'PROP'=D], 'Merge', 'PROCESSES', 5491, 'Anonymous', on).
mooCache(subclass('Classifying', 'MentalProcess'), subclass('Classifying', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5493, 'Anonymous', on).
mooCache(documentation('Classifying', string('"The Class of MentalProcesses which   involve attaching a name or category to a thing or set of things.    Note that Classifying is distinguished from Learning by the fact   that the latter covers the acquisition by a CognitiveAgent of any   Proposition, while the former involves the assignment of a label   or category."')), documentation('Classifying', string('"The Class of MentalProcesses which   involve attaching a name or category to a thing or set of things.    Note that Classifying is distinguished from Learning by the fact   that the latter covers the acquisition by a CognitiveAgent of any   Proposition, while the former involves the assignment of a label   or category."')), [], [], 'Merge', 'PROCESSES', 5495, 'Anonymous', on).
mooCache(subclass('Reasoning', 'MentalProcess'), subclass('Reasoning', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5497, 'Anonymous', on).
mooCache(documentation('Reasoning', string('"The Class of MentalProcesses which   involve concluding, on the basis of either deductive or inductive   evidence, that a particular Proposition or Sentence is true."')), documentation('Reasoning', string('"The Class of MentalProcesses which   involve concluding, on the basis of either deductive or inductive   evidence, that a particular Proposition or Sentence is true."')), [], [], 'Merge', 'PROCESSES', 5499, 'Anonymous', on).
mooCache(subclass('Selecting', 'MentalProcess'), subclass('Selecting', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5501, 'Anonymous', on).
mooCache(documentation('Selecting', string('"The Class of MentalProcesses which involve   opting for one or more Entity out of a larger set of Entities."')), documentation('Selecting', string('"The Class of MentalProcesses which involve   opting for one or more Entity out of a larger set of Entities."')), [], [], 'Merge', 'PROCESSES', 5503, 'Anonymous', on).
mooCache(subclass('Comparing', 'MentalProcess'), subclass('Comparing', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5505, 'Anonymous', on).
mooCache(documentation('Comparing', string('"The Class of MentalProcesses which   involve comparing, relating, contrasting, etc. the properties of   two or more Entities."')), documentation('Comparing', string('"The Class of MentalProcesses which   involve comparing, relating, contrasting, etc. the properties of   two or more Entities."')), [], [], 'Merge', 'PROCESSES', 5507, 'Anonymous', on).
mooCache(subclass('Calculating', 'MentalProcess'), subclass('Calculating', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5509, 'Anonymous', on).
mooCache(documentation('Calculating', string('"MentalProcesses which involve the consideration   and/or manipulation of instances of Quantity."')), documentation('Calculating', string('"MentalProcesses which involve the consideration   and/or manipulation of instances of Quantity."')), [], [], 'Merge', 'PROCESSES', 5511, 'Anonymous', on).
mooCache(subclass('Measuring', 'Calculating'), subclass('Measuring', 'Calculating'), [], [], 'Merge', 'PROCESSES', 5513, 'Anonymous', on).
mooCache(documentation('Measuring', string('"The Class of Calculating Processes where   the aim is to determine the PhysicalQuantity of some aspect of the patient."')), documentation('Measuring', string('"The Class of Calculating Processes where   the aim is to determine the PhysicalQuantity of some aspect of the patient."')), [], [], 'Merge', 'PROCESSES', 5515, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Measuring'), and(agent(A, B), patient(A, C))), exists(D, exists(E, holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'(E, D))))))), and(entails(and(and(and(instance(A, 'Measuring'), and(agent(A, B), patient(A, C))), '$existential'(D, '?UNIT', exists(E, holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'(E, '?UNIT'))))))), '$existential'(E, '?QUANT', holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'('?QUANT', D)))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'(E, D))))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'(E, D))))), and(agent(A, B), patient(A, C))), not(instance(A, 'Measuring'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'(E, D))))), and(instance(A, 'Measuring'), patient(A, C))), not(agent(A, B))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'(E, D))))), and(instance(A, 'Measuring'), agent(A, B))), not(patient(A, C)))))), [domainV(E, ['MeasureFn':1]), domainV(D, ['MeasureFn':2]), domainV(C, [measure:1, patient:2]), domainV(B, [agent:2, knows:1]), domainV(A, ['$instanceof':'Measuring', 'WhenFn':1, agent:1, patient:1]), domainV(F, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?UNIT', exists(E, holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'(E, '?UNIT'))))))), replaceConsVar(E, '$existential'('?QUANT', holdsDuring('ImmediateFutureFn'('WhenFn'(A)), knows(B, measure(C, 'MeasureFn'('?QUANT', D))))))], ['MEAS'=A, 'AGENT'=B, 'OBJ'=C, 'QUANT'=E, 'UNIT'=D], 'Merge', 'PROCESSES', 5517, 'Anonymous', on).
mooCache(subclass('Counting', 'Calculating'), subclass('Counting', 'Calculating'), [], [], 'Merge', 'PROCESSES', 5519, 'Anonymous', on).
mooCache(documentation('Counting', string('"Enumerating the instances of a Class or the   members of a Collection."')), documentation('Counting', string('"Enumerating the instances of a Class or the   members of a Collection."')), [], [], 'Merge', 'PROCESSES', 5521, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Counting'), and(agent(A, B), patient(A, C))), exists(D, knows(B, equal('CardinalityFn'(C))))), and(entails(and(instance(A, 'Counting'), and(agent(A, B), patient(A, C))), knows(B, equal('CardinalityFn'(C)))), and(entails(and(not(knows(B, equal('CardinalityFn'(C)))), and(agent(A, B), patient(A, C))), not(instance(A, 'Counting'))), and(entails(and(not(knows(B, equal('CardinalityFn'(C)))), and(instance(A, 'Counting'), patient(A, C))), not(agent(A, B))), entails(and(not(knows(B, equal('CardinalityFn'(C)))), and(instance(A, 'Counting'), agent(A, B))), not(patient(A, C)))))), [domainV(C, ['CardinalityFn':1, patient:2]), domainV(B, [agent:2, knows:1]), domainV(A, ['$instanceof':'Counting', agent:1, patient:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?NUMBER', knows(B, equal('CardinalityFn'(C)))))], ['COUNT'=A, 'AGENT'=B, 'ENTITY'=C, 'NUMBER'=D], 'Merge', 'PROCESSES', 5523, 'Anonymous', on).
mooCache(subclass('Predicting', 'MentalProcess'), subclass('Predicting', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5525, 'Anonymous', on).
mooCache(documentation('Predicting', string('"The Class of MentalProcesses which   involve the formulation of a Proposition about a state of affairs   which might be realized in the future."')), documentation('Predicting', string('"The Class of MentalProcesses which   involve the formulation of a Proposition about a state of affairs   which might be realized in the future."')), [], [], 'Merge', 'PROCESSES', 5527, 'Anonymous', on).
mooCache(subclass('Remembering', 'MentalProcess'), subclass('Remembering', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5529, 'Anonymous', on).
mooCache(documentation('Remembering', string('"The Class of MentalProcesses which   involve the recollection of prior experiences and/or of knowledge   which was previously acquired."')), documentation('Remembering', string('"The Class of MentalProcesses which   involve the recollection of prior experiences and/or of knowledge   which was previously acquired."')), [], [], 'Merge', 'PROCESSES', 5531, 'Anonymous', on).
mooCache(subclass('Opening', 'Process'), subclass('Opening', 'Process'), [], [], 'Merge', 'PROCESSES', 5533, 'Anonymous', on).
mooCache(relatedInternalConcept('Opening', 'Closing'), relatedInternalConcept('Opening', 'Closing'), [], [], 'Merge', 'PROCESSES', 5535, 'Anonymous', on).
mooCache(documentation('Opening', string('"The Class of Processes where an aperture is   created in an Object.  Note that the aperture may be created intentionally,   as when one opens a door, or unintentionally, as when the ground ruptures   in a seismic event."')), documentation('Opening', string('"The Class of Processes where an aperture is   created in an Object.  Note that the aperture may be created intentionally,   as when one opens a door, or unintentionally, as when the ground ruptures   in a seismic event."')), [], [], 'Merge', 'PROCESSES', 5537, 'Anonymous', on).
mooCache(subclass('Closing', 'Process'), subclass('Closing', 'Process'), [], [], 'Merge', 'PROCESSES', 5539, 'Anonymous', on).
mooCache(documentation('Closing', string('"The Class of Processes where an aperture is   closed in an Object."')), documentation('Closing', string('"The Class of Processes where an aperture is   closed in an Object."')), [], [], 'Merge', 'PROCESSES', 5541, 'Anonymous', on).
mooCache(subclass('Keeping', 'IntentionalProcess'), subclass('Keeping', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5543, 'Anonymous', on).
mooCache(documentation('Keeping', string('"The Class of Processes where the agent   keeps something in a particular location for an extended period of time."')), documentation('Keeping', string('"The Class of Processes where the agent   keeps something in a particular location for an extended period of time."')), [], [], 'Merge', 'PROCESSES', 5545, 'Anonymous', on).
mooCache(subclass('Securing', 'Keeping'), subclass('Securing', 'Keeping'), [], [], 'Merge', 'PROCESSES', 5547, 'Anonymous', on).
mooCache(documentation('Securing', string('"The Class of Keeping Processes where the   patient is secured in some manner, e.g. by locking it up in a strongbox."')), documentation('Securing', string('"The Class of Keeping Processes where the   patient is secured in some manner, e.g. by locking it up in a strongbox."')), [], [], 'Merge', 'PROCESSES', 5549, 'Anonymous', on).
mooCache(subclass('Confining', 'Securing'), subclass('Confining', 'Securing'), [], [], 'Merge', 'PROCESSES', 5551, 'Anonymous', on).
mooCache(subclass('Confining', 'RegulatoryProcess'), subclass('Confining', 'RegulatoryProcess'), [], [], 'Merge', 'PROCESSES', 5553, 'Anonymous', on).
mooCache(documentation('Confining', string('"The Class of Securing Processes where the   patient is Human and is kept against his/her will.  This covers   imprisonment, being jailed, held in custody, etc."')), documentation('Confining', string('"The Class of Securing Processes where the   patient is Human and is kept against his/her will.  This covers   imprisonment, being jailed, held in custody, etc."')), [], [], 'Merge', 'PROCESSES', 5555, 'Anonymous', on).
mooCache(subclass('Maintaining', 'IntentionalProcess'), subclass('Maintaining', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5557, 'Anonymous', on).
mooCache(documentation('Maintaining', string('"The Class of Processes where the agent   cares for or maintains the Object."')), documentation('Maintaining', string('"The Class of Processes where the agent   cares for or maintains the Object."')), [], [], 'Merge', 'PROCESSES', 5559, 'Anonymous', on).
mooCache(subclass('Repairing', 'IntentionalProcess'), subclass('Repairing', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5561, 'Anonymous', on).
mooCache(relatedInternalConcept('Repairing', 'Maintaining'), relatedInternalConcept('Repairing', 'Maintaining'), [], [], 'Merge', 'PROCESSES', 5563, 'Anonymous', on).
mooCache(documentation('Repairing', string('"The Class of Processes where the agent   makes a modification or series of modifications to an Object that is not   functioning as intended so that it works properly."')), documentation('Repairing', string('"The Class of Processes where the agent   makes a modification or series of modifications to an Object that is not   functioning as intended so that it works properly."')), [], [], 'Merge', 'PROCESSES', 5565, 'Anonymous', on).
mooCache(subclass('Damaging', 'Process'), subclass('Damaging', 'Process'), [], [], 'Merge', 'PROCESSES', 5567, 'Anonymous', on).
mooCache(documentation('Damaging', string('"The Class of Processes where the agent   brings about a situation where the patient no longer functions normally   or as intended."')), documentation('Damaging', string('"The Class of Processes where the agent   brings about a situation where the patient no longer functions normally   or as intended."')), [], [], 'Merge', 'PROCESSES', 5569, 'Anonymous', on).
mooCache(subclass('Concealing', 'IntentionalProcess'), subclass('Concealing', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5571, 'Anonymous', on).
mooCache(documentation('Concealing', string('"The Class of Processes where something is   moved out of view."')), documentation('Concealing', string('"The Class of Processes where something is   moved out of view."')), [], [], 'Merge', 'PROCESSES', 5573, 'Anonymous', on).
mooCache(subclass('Revealing', 'IntentionalProcess'), subclass('Revealing', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5575, 'Anonymous', on).
mooCache(disjoint('Revealing', 'Concealing'), disjoint('Revealing', 'Concealing'), [], [], 'Merge', 'PROCESSES', 5577, 'Anonymous', on).
mooCache(documentation('Revealing', string('"The Class of Processes where something is   moved into view."')), documentation('Revealing', string('"The Class of Processes where something is   moved into view."')), [], [], 'Merge', 'PROCESSES', 5579, 'Anonymous', on).
mooCache(subclass('Impacting', 'Process'), subclass('Impacting', 'Process'), [], [], 'Merge', 'PROCESSES', 5581, 'Anonymous', on).
mooCache(documentation('Impacting', string('"The Class of Processes where something comes   into sudden, forceful, physical contact with something else.  Some examples   would be striking, knocking, whipping etc."')), documentation('Impacting', string('"The Class of Processes where something comes   into sudden, forceful, physical contact with something else.  Some examples   would be striking, knocking, whipping etc."')), [], [], 'Merge', 'PROCESSES', 5583, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Impacting'), and(instrument(A, B), patient(A, C))), holdsDuring('WhenFn'(A), connected(B, C))), and(entails(and(instance(A, 'Impacting'), and(instrument(A, B), patient(A, C))), holdsDuring('WhenFn'(A), connected(B, C))), and(entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(instrument(A, B), patient(A, C))), not(instance(A, 'Impacting'))), and(entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(instance(A, 'Impacting'), patient(A, C))), not(instrument(A, B))), entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(instance(A, 'Impacting'), instrument(A, B))), not(patient(A, C)))))), [domainV(C, [connected:2, patient:2]), domainV(B, [connected:1, instrument:2]), domainV(A, ['$instanceof':'Impacting', 'WhenFn':1, instrument:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['IMPACT'=A, 'INST'=B, 'PLACE'=C], 'Merge', 'PROCESSES', 5585, 'Anonymous', on).
mooCache(subclass('Striking', 'Impacting'), subclass('Striking', 'Impacting'), [], [], 'Merge', 'PROCESSES', 5587, 'Anonymous', on).
mooCache(subclass('Striking', 'IntentionalProcess'), subclass('Striking', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5589, 'Anonymous', on).
mooCache(documentation('Striking', string('"The Class of Impactings that are   intentionally caused by a CognitiveAgent."')), documentation('Striking', string('"The Class of Impactings that are   intentionally caused by a CognitiveAgent."')), [], [], 'Merge', 'PROCESSES', 5591, 'Anonymous', on).
mooCache(subclass('Poking', 'IntentionalProcess'), subclass('Poking', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5593, 'Anonymous', on).
mooCache(documentation('Poking', string('"The Class of Processes where the agent brings   a something long and narrow into contact with an Object and, in some cases,   pierces the surface of the Object."')), documentation('Poking', string('"The Class of Processes where the agent brings   a something long and narrow into contact with an Object and, in some cases,   pierces the surface of the Object."')), [], [], 'Merge', 'PROCESSES', 5595, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Poking'), and(agent(A, B), and(patient(A, C), instrument(A, D)))), holdsDuring('WhenFn'(A), connects(D, B, C))), and(entails(and(instance(A, 'Poking'), and(agent(A, B), and(patient(A, C), instrument(A, D)))), holdsDuring('WhenFn'(A), connects(D, B, C))), and(entails(and(not(holdsDuring('WhenFn'(A), connects(D, B, C))), and(agent(A, B), and(patient(A, C), instrument(A, D)))), not(instance(A, 'Poking'))), and(entails(and(not(holdsDuring('WhenFn'(A), connects(D, B, C))), and(instance(A, 'Poking'), and(patient(A, C), instrument(A, D)))), not(agent(A, B))), and(entails(and(not(holdsDuring('WhenFn'(A), connects(D, B, C))), and(instance(A, 'Poking'), and(agent(A, B), instrument(A, D)))), not(patient(A, C))), entails(and(not(holdsDuring('WhenFn'(A), connects(D, B, C))), and(instance(A, 'Poking'), and(agent(A, B), patient(A, C)))), not(instrument(A, D))))))), [domainV(D, [connects:1, instrument:2]), domainV(C, [connects:3, patient:2]), domainV(B, [agent:2, connects:2]), domainV(A, ['$instanceof':'Poking', 'WhenFn':1, agent:1, instrument:1, patient:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['POKE'=A, 'AGENT'=B, 'OBJ'=C, 'INST'=D], 'Merge', 'PROCESSES', 5597, 'Anonymous', on).
mooCache(subclass('Touching', 'IntentionalProcess'), subclass('Touching', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5599, 'Anonymous', on).
mooCache(documentation('Touching', string('"The Class of Processes where there is immediate   physical contact between an Organism and another Object."')), documentation('Touching', string('"The Class of Processes where there is immediate   physical contact between an Organism and another Object."')), [], [], 'Merge', 'PROCESSES', 5601, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Touching'), and(agent(A, B), patient(A, C))), holdsDuring('WhenFn'(A), connected(B, C))), and(entails(and(instance(A, 'Touching'), and(agent(A, B), patient(A, C))), holdsDuring('WhenFn'(A), connected(B, C))), and(entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(agent(A, B), patient(A, C))), not(instance(A, 'Touching'))), and(entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(instance(A, 'Touching'), patient(A, C))), not(agent(A, B))), entails(and(not(holdsDuring('WhenFn'(A), connected(B, C))), and(instance(A, 'Touching'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [connected:2, patient:2]), domainV(B, [agent:2, connected:1]), domainV(A, ['$instanceof':'Touching', 'WhenFn':1, agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TOUCH'=A, 'AGENT'=B, 'OBJ'=C], 'Merge', 'PROCESSES', 5603, 'Anonymous', on).
mooCache(subclass('Holding', 'Touching'), subclass('Holding', 'Touching'), [], [], 'Merge', 'PROCESSES', 5605, 'Anonymous', on).
mooCache(documentation('Holding', string('"The Class of Processes where the agent   maintains physical contact with something for an extended period of time."')), documentation('Holding', string('"The Class of Processes where the agent   maintains physical contact with something for an extended period of time."')), [], [], 'Merge', 'PROCESSES', 5607, 'Anonymous', on).
mooCache(subclass('Covering', 'Process'), subclass('Covering', 'Process'), [], [], 'Merge', 'PROCESSES', 5609, 'Anonymous', on).
mooCache(documentation('Covering', string('"The Class of Processes where the agent   covers the patient, either completely or only partially, with   something else."')), documentation('Covering', string('"The Class of Processes where the agent   covers the patient, either completely or only partially, with   something else."')), [], [], 'Merge', 'PROCESSES', 5611, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Covering'), patient(A, B)), exists(C, exists(D, and(instance(D, 'Concealing'), and(subProcess(D, A), and(part(C, B), patient(D, C))))))), and(and(entails(and(and(instance(A, 'Covering'), patient(A, B)), '$existential'(D, '?CONCEAL', and(instance('?CONCEAL', 'Concealing'), and(subProcess('?CONCEAL', A), and(part(C, B), patient('?CONCEAL', C)))))), instance(D, 'Concealing')), and(entails(and(not(instance(D, 'Concealing')), patient(A, B)), not(instance(A, 'Covering'))), entails(and(not(instance(D, 'Concealing')), instance(A, 'Covering')), not(patient(A, B))))), and(and(entails(and(and(instance(A, 'Covering'), patient(A, B)), '$existential'(D, '?CONCEAL', and(instance('?CONCEAL', 'Concealing'), and(subProcess('?CONCEAL', A), and(part(C, B), patient('?CONCEAL', C)))))), subProcess(D, A)), and(entails(and(not(subProcess(D, A)), patient(A, B)), not(instance(A, 'Covering'))), entails(and(not(subProcess(D, A)), instance(A, 'Covering')), not(patient(A, B))))), and(and(entails(and(and(and(instance(A, 'Covering'), patient(A, B)), '$existential'(C, '?PART', exists(D, and(instance(D, 'Concealing'), and(subProcess(D, A), and(part('?PART', B), patient(D, '?PART'))))))), '$existential'(D, '?CONCEAL', and(instance('?CONCEAL', 'Concealing'), and(subProcess('?CONCEAL', A), and(part(C, B), patient('?CONCEAL', C)))))), part(C, B)), and(entails(and(not(part(C, B)), patient(A, B)), not(instance(A, 'Covering'))), entails(and(not(part(C, B)), instance(A, 'Covering')), not(patient(A, B))))), and(entails(and(and(and(instance(A, 'Covering'), patient(A, B)), '$existential'(C, '?PART', exists(D, and(instance(D, 'Concealing'), and(subProcess(D, A), and(part('?PART', B), patient(D, '?PART'))))))), '$existential'(D, '?CONCEAL', and(instance('?CONCEAL', 'Concealing'), and(subProcess('?CONCEAL', A), and(part(C, B), patient('?CONCEAL', C)))))), patient(D, C)), and(entails(and(not(patient(D, C)), patient(A, B)), not(instance(A, 'Covering'))), entails(and(not(patient(D, C)), instance(A, 'Covering')), not(patient(A, B)))))))), [domainV(D, ['$instanceof':'Concealing', patient:1, subProcess:1]), domainV(C, [part:1, patient:2]), domainV(B, [part:2, patient:2]), domainV(A, ['$instanceof':'Covering', patient:1, subProcess:2]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PART', exists(D, and(instance(D, 'Concealing'), and(subProcess(D, A), and(part('?PART', B), patient(D, '?PART'))))))), replaceConsVar(D, '$existential'('?CONCEAL', and(instance('?CONCEAL', 'Concealing'), and(subProcess('?CONCEAL', A), and(part(C, B), patient('?CONCEAL', C))))))], ['COVER'=A, 'OBJ'=B, 'CONCEAL'=D, 'PART'=C], 'Merge', 'PROCESSES', 5613, 'Anonymous', on).
mooCache(subclass('Dressing', 'Process'), subclass('Dressing', 'Process'), [], [], 'Merge', 'PROCESSES', 5615, 'Anonymous', on).
mooCache(documentation('Dressing', string('"The act of putting clothing on an Animal."')), documentation('Dressing', string('"The act of putting clothing on an Animal."')), [], [], 'Merge', 'PROCESSES', 5617, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Dressing'), instrument(A, B)), instance(B, 'Clothing')), and(entails(and(instance(A, 'Dressing'), instrument(A, B)), instance(B, 'Clothing')), and(entails(and(not(instance(B, 'Clothing')), instrument(A, B)), not(instance(A, 'Dressing'))), entails(and(not(instance(B, 'Clothing')), instance(A, 'Dressing')), not(instrument(A, B))))), [domainV(B, ['$instanceof':'Clothing', instrument:2]), domainV(A, ['$instanceof':'Dressing', instrument:1]), domainV(C, []), forall(A), forall(B)], ['DRESS'=A, 'CLOTH'=B], 'Merge', 'PROCESSES', 5619, 'Anonymous', on).
mooCache(subclass('Attaching', 'Process'), subclass('Attaching', 'Process'), [], [], 'Merge', 'PROCESSES', 5621, 'Anonymous', on).
mooCache(disjoint('Attaching', 'Detaching'), disjoint('Attaching', 'Detaching'), [], [], 'Merge', 'PROCESSES', 5623, 'Anonymous', on).
mooCache(relatedInternalConcept('Attaching', 'Putting'), relatedInternalConcept('Attaching', 'Putting'), [], [], 'Merge', 'PROCESSES', 5625, 'Anonymous', on).
mooCache(documentation('Attaching', string('"A Process where the agent attaches one thing   to something else.  Note that this is different from Putting in that two   things which are attached may already be in the same location."')), documentation('Attaching', string('"A Process where the agent attaches one thing   to something else.  Note that this is different from Putting in that two   things which are attached may already be in the same location."')), [], [], 'Merge', 'PROCESSES', 5627, 'Anonymous', on).
mooCache(subclass('Tying', 'Attaching'), subclass('Tying', 'Attaching'), [], [], 'Merge', 'PROCESSES', 5629, 'Anonymous', on).
mooCache(documentation('Tying', string('"The Process of tying two things, or two strands   of the same thing, together."')), documentation('Tying', string('"The Process of tying two things, or two strands   of the same thing, together."')), [], [], 'Merge', 'PROCESSES', 5631, 'Anonymous', on).
mooCache(subclass('Detaching', 'Process'), subclass('Detaching', 'Process'), [], [], 'Merge', 'PROCESSES', 5633, 'Anonymous', on).
mooCache(documentation('Detaching', string('"A Process where the agent detaches one thing   from something else.  Note that this is different from Removing in that   neither of the two things which are detached may be removed from the location   where it was attached."')), documentation('Detaching', string('"A Process where the agent detaches one thing   from something else.  Note that this is different from Removing in that   neither of the two things which are detached may be removed from the location   where it was attached."')), [], [], 'Merge', 'PROCESSES', 5635, 'Anonymous', on).
mooCache(subclass('Untying', 'Detaching'), subclass('Untying', 'Detaching'), [], [], 'Merge', 'PROCESSES', 5637, 'Anonymous', on).
mooCache(disjoint('Untying', 'Tying'), disjoint('Untying', 'Tying'), [], [], 'Merge', 'PROCESSES', 5639, 'Anonymous', on).
mooCache(documentation('Untying', string('"The Process of untying two things, or two strands   of the same thing."')), documentation('Untying', string('"The Process of untying two things, or two strands   of the same thing."')), [], [], 'Merge', 'PROCESSES', 5641, 'Anonymous', on).
mooCache(subclass('Cutting', 'Detaching'), subclass('Cutting', 'Detaching'), [], [], 'Merge', 'PROCESSES', 5643, 'Anonymous', on).
mooCache(documentation('Cutting', string('"The subclass of Detaching Processes which   involve a relatively sharp instrument."')), documentation('Cutting', string('"The subclass of Detaching Processes which   involve a relatively sharp instrument."')), [], [], 'Merge', 'PROCESSES', 5645, 'Anonymous', on).
mooCache(subclass('Combining', 'Process'), subclass('Combining', 'Process'), [], [], 'Merge', 'PROCESSES', 5647, 'Anonymous', on).
mooCache(documentation('Combining', string('"A Process where two or more things are combined   into a single thing."')), documentation('Combining', string('"A Process where two or more things are combined   into a single thing."')), [], [], 'Merge', 'PROCESSES', 5649, 'Anonymous', on).
mooCache(subclass('Separating', 'Process'), subclass('Separating', 'Process'), [], [], 'Merge', 'PROCESSES', 5651, 'Anonymous', on).
mooCache(disjoint('Separating', 'Combining'), disjoint('Separating', 'Combining'), [], [], 'Merge', 'PROCESSES', 5653, 'Anonymous', on).
mooCache(documentation('Separating', string('"A Process where something is disassembled   into (some of) its parts."')), documentation('Separating', string('"A Process where something is disassembled   into (some of) its parts."')), [], [], 'Merge', 'PROCESSES', 5655, 'Anonymous', on).
mooCache(subclass('Decorating', 'IntentionalProcess'), subclass('Decorating', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5657, 'Anonymous', on).
mooCache(relatedInternalConcept('Decorating', 'SurfaceAlteration'), relatedInternalConcept('Decorating', 'SurfaceAlteration'), [], [], 'Merge', 'PROCESSES', 5659, 'Anonymous', on).
mooCache(documentation('Decorating', string('"The act of modifying or embellishing something   with the aim of making it more aesthetically pleasing."')), documentation('Decorating', string('"The act of modifying or embellishing something   with the aim of making it more aesthetically pleasing."')), [], [], 'Merge', 'PROCESSES', 5661, 'Anonymous', on).
mooCache(subclass('ShapeAlteration', 'Process'), subclass('ShapeAlteration', 'Process'), [], [], 'Merge', 'PROCESSES', 5663, 'Anonymous', on).
mooCache(documentation('ShapeAlteration', string('"The act of changing the shape of an   Object."')), documentation('ShapeAlteration', string('"The act of changing the shape of an   Object."')), [], [], 'Merge', 'PROCESSES', 5665, 'Anonymous', on).
mooCache(=>(and(instance(A, 'ShapeAlteration'), patient(A, B)), exists(C, and(instance(C, 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))))), and(and(entails(and(patient(A, B), not(instance(C, 'ShapeProperty'))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), not(instance(C, 'ShapeProperty'))), not(patient(A, B))), entails(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), instance(C, 'ShapeProperty')))), and(and(entails(and(patient(A, B), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))))), and(and(entails(and(patient(A, B), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))))), and(and(entails(and(patient(A, B), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C)))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, C))))))), and(entails(and(patient(A, B), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(instance(A, 'ShapeAlteration'))), and(entails(and(instance(A, 'ShapeAlteration'), and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C))))), not(patient(A, B))), and(entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), entails(and(and(and(instance(A, 'ShapeAlteration'), patient(A, B)), not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)))), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, C)))))))))), [domainV(C, ['$instanceof':'ShapeProperty', attribute:2]), domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'ShapeAlteration', 'WhenFn':1, patient:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROPERTY', and(instance('?PROPERTY', 'ShapeProperty'), or(and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, '?PROPERTY')))))))], ['ALT'=A, 'OBJ'=B, 'PROPERTY'=C], 'Merge', 'PROCESSES', 5667, 'Anonymous', on).
mooCache(subclass('SurfaceAlteration', 'Process'), subclass('SurfaceAlteration', 'Process'), [], [], 'Merge', 'PROCESSES', 5669, 'Anonymous', on).
mooCache(documentation('SurfaceAlteration', string('"The act of changing the appearance of the   surface of an Object."')), documentation('SurfaceAlteration', string('"The act of changing the appearance of the   surface of an Object."')), [], [], 'Merge', 'PROCESSES', 5671, 'Anonymous', on).
mooCache(=>(and(instance(A, 'SurfaceAlteration'), patient(A, B)), exists(C, exists(D, and(superficialPart(D, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(D, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(D, C)))))))), and(and(entails(and(and(instance(A, 'SurfaceAlteration'), patient(A, B)), '$existential'(D, '?PART', and(superficialPart('?PART', B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute('?PART', C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute('?PART', C))))))), superficialPart(D, B)), and(entails(and(not(superficialPart(D, B)), patient(A, B)), not(instance(A, 'SurfaceAlteration'))), entails(and(not(superficialPart(D, B)), instance(A, 'SurfaceAlteration')), not(patient(A, B))))), and(and(entails(and(and(and(instance(A, 'SurfaceAlteration'), patient(A, B)), '$existential'(C, '?PROPERTY', exists(D, and(superficialPart(D, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(D, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(D, '?PROPERTY')))))))), '$existential'(D, '?PART', and(superficialPart('?PART', B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute('?PART', C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute('?PART', C))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(D, C))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(D, C))), patient(A, B)), not(instance(A, 'SurfaceAlteration'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(D, C))), instance(A, 'SurfaceAlteration')), not(patient(A, B))))), and(entails(and(and(and(instance(A, 'SurfaceAlteration'), patient(A, B)), '$existential'(C, '?PROPERTY', exists(D, and(superficialPart(D, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(D, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(D, '?PROPERTY')))))))), '$existential'(D, '?PART', and(superficialPart('?PART', B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute('?PART', C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute('?PART', C))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(D, C)))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(D, C)))), patient(A, B)), not(instance(A, 'SurfaceAlteration'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(D, C)))), instance(A, 'SurfaceAlteration')), not(patient(A, B))))))), [domainV(D, [attribute:1, superficialPart:1]), domainV(C, [attribute:2]), domainV(B, [patient:2, superficialPart:2]), domainV(A, ['$instanceof':'SurfaceAlteration', 'WhenFn':1, patient:1]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROPERTY', exists(D, and(superficialPart(D, B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(D, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(D, '?PROPERTY')))))))), replaceConsVar(D, '$existential'('?PART', and(superficialPart('?PART', B), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute('?PART', C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute('?PART', C)))))))], ['ALT'=A, 'OBJ'=B, 'PART'=D, 'PROPERTY'=C], 'Merge', 'PROCESSES', 5673, 'Anonymous', on).
mooCache(subclass('Coloring', 'SurfaceAlteration'), subclass('Coloring', 'SurfaceAlteration'), [], [], 'Merge', 'PROCESSES', 5675, 'Anonymous', on).
mooCache(documentation('Coloring', string('"The subclass of SurfaceAlteration where a   ColorProperty of the patient is altered."')), documentation('Coloring', string('"The subclass of SurfaceAlteration where a   ColorProperty of the patient is altered."')), [], [], 'Merge', 'PROCESSES', 5677, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Coloring'), patient(A, B)), exists(C, and(instance(C, 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C))))))), and(and(entails(and(and(instance(A, 'Coloring'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))))))), instance(C, 'ColorProperty')), and(entails(and(not(instance(C, 'ColorProperty')), patient(A, B)), not(instance(A, 'Coloring'))), entails(and(not(instance(C, 'ColorProperty')), instance(A, 'Coloring')), not(patient(A, B))))), and(and(entails(and(and(instance(A, 'Coloring'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), patient(A, B)), not(instance(A, 'Coloring'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, C))), instance(A, 'Coloring')), not(patient(A, B))))), and(entails(and(and(instance(A, 'Coloring'), patient(A, B)), '$existential'(C, '?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY'))))))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), patient(A, B)), not(instance(A, 'Coloring'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, C)))), instance(A, 'Coloring')), not(patient(A, B))))))), [domainV(C, ['$instanceof':'ColorProperty', attribute:2]), domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Coloring', 'WhenFn':1, patient:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROPERTY', and(instance('?PROPERTY', 'ColorProperty'), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, '?PROPERTY')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), not(attribute(B, '?PROPERTY')))))))], ['COLORING'=A, 'OBJ'=B, 'PROPERTY'=C], 'Merge', 'PROCESSES', 5679, 'Anonymous', on).
mooCache(subclass('Grooming', 'IntentionalProcess'), subclass('Grooming', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5681, 'Anonymous', on).
mooCache(documentation('Grooming', string('"The subclass of Process where parts of an   Organism are arranged in a socially pleasing manner.  Some examples are   shaving, brushing, combing, etc."')), documentation('Grooming', string('"The subclass of Process where parts of an   Organism are arranged in a socially pleasing manner.  Some examples are   shaving, brushing, combing, etc."')), [], [], 'Merge', 'PROCESSES', 5683, 'Anonymous', on).
mooCache(subclass('ContentDevelopment', 'IntentionalProcess'), subclass('ContentDevelopment', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5685, 'Anonymous', on).
mooCache(documentation('ContentDevelopment', string('"A subclass of IntentionalProcess in   which content is modified, its form is altered or it is created anew."')), documentation('ContentDevelopment', string('"A subclass of IntentionalProcess in   which content is modified, its form is altered or it is created anew."')), [], [], 'Merge', 'PROCESSES', 5687, 'Anonymous', on).
mooCache(subclass('Reading', 'ContentDevelopment'), subclass('Reading', 'ContentDevelopment'), [], [], 'Merge', 'PROCESSES', 5689, 'Anonymous', on).
mooCache(documentation('Reading', string('"A subclass of ContentDevelopment in which   content is converted from a written form into a spoken or mental representation."')), documentation('Reading', string('"A subclass of ContentDevelopment in which   content is converted from a written form into a spoken or mental representation."')), [], [], 'Merge', 'PROCESSES', 5691, 'Anonymous', on).
mooCache(subclass('Writing', 'ContentDevelopment'), subclass('Writing', 'ContentDevelopment'), [], [], 'Merge', 'PROCESSES', 5693, 'Anonymous', on).
mooCache(documentation('Writing', string('"A subclass of ContentDevelopment in which   content is expressed in a Language."')), documentation('Writing', string('"A subclass of ContentDevelopment in which   content is expressed in a Language."')), [], [], 'Merge', 'PROCESSES', 5695, 'Anonymous', on).
mooCache(subclass('Encoding', 'Writing'), subclass('Encoding', 'Writing'), [], [], 'Merge', 'PROCESSES', 5697, 'Anonymous', on).
mooCache(documentation('Encoding', string('"Converting a document or message into a formal   language or into a code that can be understood only by a relatively small   body of Agents.  Generally speaking, this hinders wide dissemination of   the content in the original document or message."')), documentation('Encoding', string('"Converting a document or message into a formal   language or into a code that can be understood only by a relatively small   body of Agents.  Generally speaking, this hinders wide dissemination of   the content in the original document or message."')), [], [], 'Merge', 'PROCESSES', 5699, 'Anonymous', on).
mooCache(subclass('Decoding', 'Writing'), subclass('Decoding', 'Writing'), [], [], 'Merge', 'PROCESSES', 5701, 'Anonymous', on).
mooCache(disjoint('Decoding', 'Encoding'), disjoint('Decoding', 'Encoding'), [], [], 'Merge', 'PROCESSES', 5703, 'Anonymous', on).
mooCache(documentation('Decoding', string('"Converting a document or message that has previously   been encoded (see Encoding) into a Language that can be understood by a   relatively large number of speakers."')), documentation('Decoding', string('"Converting a document or message that has previously   been encoded (see Encoding) into a Language that can be understood by a   relatively large number of speakers."')), [], [], 'Merge', 'PROCESSES', 5705, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Decoding'), patient(A, B)), exists(C, exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), holdsDuring(C, and(instance(E, 'Encoding'), patient(E, D)))))))))), and(and(entails(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), containsInformation(D, F)), and(entails(and(not(containsInformation(D, F)), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(containsInformation(D, F)), instance(A, 'Decoding')), not(patient(A, B))))), and(and(entails(and(instance(A, 'Decoding'), patient(A, B)), containsInformation(B, F)), and(entails(and(not(containsInformation(B, F)), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(containsInformation(B, F)), instance(A, 'Decoding')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(C, '?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), temporalPart(C, 'PastFn'('WhenFn'(A)))), and(entails(and(not(temporalPart(C, 'PastFn'('WhenFn'(A)))), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(temporalPart(C, 'PastFn'('WhenFn'(A)))), instance(A, 'Decoding')), not(patient(A, B))))), and(and(entails(and(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(C, '?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), holdsDuring(C, instance(E, 'Encoding'))), and(entails(and(not(holdsDuring(C, instance(E, 'Encoding'))), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(holdsDuring(C, instance(E, 'Encoding'))), instance(A, 'Decoding')), not(patient(A, B))))), and(entails(and(and(and(and(instance(A, 'Decoding'), patient(A, B)), '$existential'(C, '?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), '$existential'(D, '?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), '$existential'(E, '?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D)))))))), holdsDuring(C, patient(E, D))), and(entails(and(not(holdsDuring(C, patient(E, D))), patient(A, B)), not(instance(A, 'Decoding'))), entails(and(not(holdsDuring(C, patient(E, D))), instance(A, 'Decoding')), not(patient(A, B))))))))), [domainV(F, [containsInformation:2]), domainV(E, ['$instanceof':'Encoding', patient:1]), domainV(D, [containsInformation:1, patient:2]), domainV(C, [holdsDuring:1, temporalPart:1]), domainV(B, [containsInformation:1, patient:2]), domainV(A, ['$instanceof':'Decoding', 'WhenFn':1, patient:1]), domainV(G, []), forall(A), forall(B), forall(F), replaceConsVar(C, '$existential'('?TIME', exists(D, exists(E, and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart('?TIME', 'PastFn'('WhenFn'(A))), and(holdsDuring('?TIME', instance(E, 'Encoding')), holdsDuring('?TIME', patient(E, D)))))))))), replaceConsVar(D, '$existential'('?DOC2', exists(E, and(containsInformation('?DOC2', F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance(E, 'Encoding')), holdsDuring(C, patient(E, '?DOC2'))))))))), replaceConsVar(E, '$existential'('?ENCODE', and(containsInformation(D, F), and(containsInformation(B, F), and(temporalPart(C, 'PastFn'('WhenFn'(A))), and(holdsDuring(C, instance('?ENCODE', 'Encoding')), holdsDuring(C, patient('?ENCODE', D))))))))], ['DECODE'=A, 'DOC1'=B, 'ENCODE'=E, 'DOC2'=D, 'TIME'=C, 'PROP'=F], 'Merge', 'PROCESSES', 5707, 'Anonymous', on).
mooCache(subclass('Wetting', 'Process'), subclass('Wetting', 'Process'), [], [], 'Merge', 'PROCESSES', 5709, 'Anonymous', on).
mooCache(documentation('Wetting', string('"The Class of Processes where Water is added to an Object."')), documentation('Wetting', string('"The Class of Processes where Water is added to an Object."')), [], [], 'Merge', 'PROCESSES', 5711, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Wetting'), patient(A, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), or(attribute(B, 'Wet'), attribute(B, 'Damp')))), and(entails(and(patient(A, B), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Wet'))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Damp'))))), not(instance(A, 'Wetting'))), and(entails(and(instance(A, 'Wetting'), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Wet'))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Damp'))))), not(patient(A, B))), and(entails(and(and(instance(A, 'Wetting'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Damp')))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Wet'))), entails(and(and(instance(A, 'Wetting'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Wet')))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Damp')))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Wetting', 'WhenFn':1, patient:1]), domainV(C, []), forall(A), forall(B)], ['WET'=A, 'OBJ'=B], 'Merge', 'PROCESSES', 5713, 'Anonymous', on).
mooCache(subclass('Drying', 'Process'), subclass('Drying', 'Process'), [], [], 'Merge', 'PROCESSES', 5715, 'Anonymous', on).
mooCache(documentation('Drying', string('"The Class of Processes where water is removed   from an Object."')), documentation('Drying', string('"The Class of Processes where water is removed   from an Object."')), [], [], 'Merge', 'PROCESSES', 5717, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Drying'), patient(A, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), or(attribute(B, 'Anhydrous'), attribute(B, 'Dry')))), and(entails(and(patient(A, B), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous'))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry'))))), not(instance(A, 'Drying'))), and(entails(and(instance(A, 'Drying'), and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous'))), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry'))))), not(patient(A, B))), and(entails(and(and(instance(A, 'Drying'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry')))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous'))), entails(and(and(instance(A, 'Drying'), patient(A, B)), not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Anhydrous')))), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dry')))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Drying', 'WhenFn':1, patient:1]), domainV(C, []), forall(A), forall(B)], ['DRY'=A, 'OBJ'=B], 'Merge', 'PROCESSES', 5719, 'Anonymous', on).
mooCache(subclass('Creation', 'Process'), subclass('Creation', 'Process'), [], [], 'Merge', 'PROCESSES', 5721, 'Anonymous', on).
mooCache(documentation('Creation', string('"The subclass of Process in which   something is created.  Note that the thing created is specified   with the result CaseRole."')), documentation('Creation', string('"The subclass of Process in which   something is created.  Note that the thing created is specified   with the result CaseRole."')), [], [], 'Merge', 'PROCESSES', 5723, 'Anonymous', on).
mooCache(=>(instance(A, 'Creation'), exists(B, result(A, B))), and(entails(not(result(A, B)), not(instance(A, 'Creation'))), entails(and(instance(A, 'Creation'), '$existential'(B, '?RESULT', result(A, '?RESULT'))), result(A, B))), [domainV(B, [result:2]), domainV(A, ['$instanceof':'Creation', result:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?RESULT', result(A, '?RESULT')))], ['ACTION'=A, 'RESULT'=B], 'Merge', 'PROCESSES', 5725, 'Anonymous', on).
mooCache(<=>(instance(A, 'Creation'), exists(B, and(patient(A, B), and(time(B, 'ImmediateFutureFn'('WhenFn'(A))), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))))), and(and(entails(and(instance(A, 'Creation'), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), patient(A, B)), and(entails(and(instance(A, 'Creation'), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), time(B, 'ImmediateFutureFn'('WhenFn'(A)))), and(entails(instance(A, 'Creation'), not(time(B, 'ImmediatePastFn'('WhenFn'(A))))), entails(or(not(patient(A, B)), or(not(time(B, 'ImmediateFutureFn'('WhenFn'(A)))), time(B, 'ImmediatePastFn'('WhenFn'(A))))), not(instance(A, 'Creation')))))), and(entails(and(patient(A, B), and(time(B, 'ImmediateFutureFn'('WhenFn'(A))), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))), instance(A, 'Creation')), and(entails(and(not(instance(A, 'Creation')), and(time(B, 'ImmediateFutureFn'('WhenFn'(A))), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))), not(patient(A, B))), and(entails(and(not(instance(A, 'Creation')), and(patient(A, B), not(time(B, 'ImmediatePastFn'('WhenFn'(A)))))), not(time(B, 'ImmediateFutureFn'('WhenFn'(A))))), entails(and(and(not(instance(A, 'Creation')), and(patient(A, B), time(B, 'ImmediateFutureFn'('WhenFn'(A))))), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), time(B, 'ImmediatePastFn'('WhenFn'(A)))))))), [domainV(B, [patient:2, time:1]), domainV(A, ['$instanceof':'Creation', 'WhenFn':1, patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A)))))))), forall(B)], ['PROCESS'=A, 'PATIENT'=B], 'Merge', 'PROCESSES', 5727, 'Anonymous', on).
mooCache(subclass('Making', 'Creation'), subclass('Making', 'Creation'), [], [], 'Merge', 'PROCESSES', 5729, 'Anonymous', on).
mooCache(relatedInternalConcept('Making', 'OccupationalProcess'), relatedInternalConcept('Making', 'OccupationalProcess'), [], [], 'Merge', 'PROCESSES', 5731, 'Anonymous', on).
mooCache(documentation('Making', string('"The subclass of Creation in which an individual   Artifact or a type of Artifact is made."')), documentation('Making', string('"The subclass of Creation in which an individual   Artifact or a type of Artifact is made."')), [], [], 'Merge', 'PROCESSES', 5733, 'Anonymous', on).
mooCache(=>(instance(A, 'Making'), exists(B, and(instance(B, 'Artifact'), result(A, B)))), and(and(entails(not(instance(B, 'Artifact')), not(instance(A, 'Making'))), entails(and(instance(A, 'Making'), '$existential'(B, '?ARTIFACT', and(instance('?ARTIFACT', 'Artifact'), result(A, '?ARTIFACT')))), instance(B, 'Artifact'))), and(entails(not(result(A, B)), not(instance(A, 'Making'))), entails(and(instance(A, 'Making'), '$existential'(B, '?ARTIFACT', and(instance('?ARTIFACT', 'Artifact'), result(A, '?ARTIFACT')))), result(A, B)))), [domainV(B, ['$instanceof':'Artifact', result:2]), domainV(A, ['$instanceof':'Making', result:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ARTIFACT', and(instance('?ARTIFACT', 'Artifact'), result(A, '?ARTIFACT'))))], ['MAKE'=A, 'ARTIFACT'=B], 'Merge', 'PROCESSES', 5735, 'Anonymous', on).
mooCache(subclass('Constructing', 'Making'), subclass('Constructing', 'Making'), [], [], 'Merge', 'PROCESSES', 5737, 'Anonymous', on).
mooCache(documentation('Constructing', string('"The subclass of Making in which a   StationaryArtifact is built."')), documentation('Constructing', string('"The subclass of Making in which a   StationaryArtifact is built."')), [], [], 'Merge', 'PROCESSES', 5739, 'Anonymous', on).
mooCache(<=>(exists(A, and(instance(A, 'Constructing'), result(A, B))), instance(B, 'StationaryArtifact')), and(and(entails(and(instance(A, 'Constructing'), result(A, B)), instance(B, 'StationaryArtifact')), and(entails(and(not(instance(B, 'StationaryArtifact')), result(A, B)), not(instance(A, 'Constructing'))), entails(and(not(instance(B, 'StationaryArtifact')), instance(A, 'Constructing')), not(result(A, B))))), and(entails(and(instance(B, 'StationaryArtifact'), '$existential'(A, '?BUILD', and(instance('?BUILD', 'Constructing'), result('?BUILD', B)))), instance(A, 'Constructing')), and(entails(and(instance(B, 'StationaryArtifact'), '$existential'(A, '?BUILD', and(instance('?BUILD', 'Constructing'), result('?BUILD', B)))), result(A, B)), entails(or(not(instance(A, 'Constructing')), not(result(A, B))), not(instance(B, 'StationaryArtifact')))))), [domainV(B, ['$instanceof':'StationaryArtifact', result:2]), domainV(A, ['$instanceof':'Constructing', result:1]), domainV(C, []), forall(B), replaceConsVar(A, '$existential'('?BUILD', and(instance('?BUILD', 'Constructing'), result('?BUILD', B)))), forall(A)], ['BUILD'=A, 'ARTIFACT'=B], 'Merge', 'PROCESSES', 5741, 'Anonymous', on).
mooCache(subclass('Manufacture', 'Making'), subclass('Manufacture', 'Making'), [], [], 'Merge', 'PROCESSES', 5743, 'Anonymous', on).
mooCache(documentation('Manufacture', string('"The Making of Artifacts on a mass   scale."')), documentation('Manufacture', string('"The Making of Artifacts on a mass   scale."')), [], [], 'Merge', 'PROCESSES', 5745, 'Anonymous', on).
mooCache(subclass('Publication', 'Manufacture'), subclass('Publication', 'Manufacture'), [], [], 'Merge', 'PROCESSES', 5747, 'Anonymous', on).
mooCache(documentation('Publication', string('"The Manufacture of Texts.  Note that   this concept does not imply that the Texts are disseminated.  Such   dissemination, when it occurs, is an instance of Communication."')), documentation('Publication', string('"The Manufacture of Texts.  Note that   this concept does not imply that the Texts are disseminated.  Such   dissemination, when it occurs, is an instance of Communication."')), [], [], 'Merge', 'PROCESSES', 5749, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Publication'), patient(A, B)), subclass(B, 'Text')), and(entails(and(instance(A, 'Publication'), patient(A, B)), subclass(B, 'Text')), and(entails(and(not(subclass(B, 'Text')), patient(A, B)), not(instance(A, 'Publication'))), entails(and(not(subclass(B, 'Text')), instance(A, 'Publication')), not(patient(A, B))))), [domainV(B, [patient:2, subclass:1]), domainV(A, ['$instanceof':'Publication', patient:1]), domainV(C, []), forall(A), forall(B)], ['PUB'=A, 'TEXT'=B], 'Merge', 'PROCESSES', 5751, 'Anonymous', on).
mooCache(subclass('Cooking', 'Making'), subclass('Cooking', 'Making'), [], [], 'Merge', 'PROCESSES', 5753, 'Anonymous', on).
mooCache(documentation('Cooking', string('"The Making of an instance of Food."')), documentation('Cooking', string('"The Making of an instance of Food."')), [], [], 'Merge', 'PROCESSES', 5755, 'Anonymous', on).
mooCache(subclass('Destruction', 'Process'), subclass('Destruction', 'Process'), [], [], 'Merge', 'PROCESSES', 5757, 'Anonymous', on).
mooCache(documentation('Destruction', string('"The subclass of Process in which   the patient (or an essential element of the patient) is destroyed."')), documentation('Destruction', string('"The subclass of Process in which   the patient (or an essential element of the patient) is destroyed."')), [], [], 'Merge', 'PROCESSES', 5759, 'Anonymous', on).
mooCache(<=>(instance(A, 'Destruction'), exists(B, and(patient(A, B), and(time(B, 'ImmediatePastFn'('WhenFn'(A))), not(time(B, 'ImmediateFutureFn'('WhenFn'(A)))))))), and(and(entails(and(instance(A, 'Destruction'), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A)))))))), patient(A, B)), and(entails(and(instance(A, 'Destruction'), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A)))))))), time(B, 'ImmediatePastFn'('WhenFn'(A)))), and(entails(instance(A, 'Destruction'), not(time(B, 'ImmediateFutureFn'('WhenFn'(A))))), entails(or(not(patient(A, B)), or(not(time(B, 'ImmediatePastFn'('WhenFn'(A)))), time(B, 'ImmediateFutureFn'('WhenFn'(A))))), not(instance(A, 'Destruction')))))), and(entails(and(patient(A, B), and(time(B, 'ImmediatePastFn'('WhenFn'(A))), not(time(B, 'ImmediateFutureFn'('WhenFn'(A)))))), instance(A, 'Destruction')), and(entails(and(not(instance(A, 'Destruction')), and(time(B, 'ImmediatePastFn'('WhenFn'(A))), not(time(B, 'ImmediateFutureFn'('WhenFn'(A)))))), not(patient(A, B))), and(entails(and(not(instance(A, 'Destruction')), and(patient(A, B), not(time(B, 'ImmediateFutureFn'('WhenFn'(A)))))), not(time(B, 'ImmediatePastFn'('WhenFn'(A))))), entails(and(and(not(instance(A, 'Destruction')), and(patient(A, B), time(B, 'ImmediatePastFn'('WhenFn'(A))))), '$existential'(B, '?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A)))))))), time(B, 'ImmediateFutureFn'('WhenFn'(A)))))))), [domainV(B, [patient:2, time:1]), domainV(A, ['$instanceof':'Destruction', 'WhenFn':1, patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PATIENT', and(patient(A, '?PATIENT'), and(time('?PATIENT', 'ImmediatePastFn'('WhenFn'(A))), not(time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(A)))))))), forall(B)], ['PROCESS'=A, 'PATIENT'=B], 'Merge', 'PROCESSES', 5761, 'Anonymous', on).
mooCache(subclass('Killing', 'Destruction'), subclass('Killing', 'Destruction'), [], [], 'Merge', 'PROCESSES', 5763, 'Anonymous', on).
mooCache(documentation('Killing', string('"The subclass of Destruction in which the   death of an Organism is caused by an Organism.  Note that in cases   of suicide the Organism would be the same in both cases."')), documentation('Killing', string('"The subclass of Destruction in which the   death of an Organism is caused by an Organism.  Note that in cases   of suicide the Organism would be the same in both cases."')), [], [], 'Merge', 'PROCESSES', 5765, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Killing'), and(agent(A, B), patient(A, C))), and(instance(B, 'Organism'), instance(C, 'Organism'))), and(and(entails(and(instance(A, 'Killing'), and(agent(A, B), patient(A, C))), instance(B, 'Organism')), and(entails(and(not(instance(B, 'Organism')), and(agent(A, B), patient(A, C))), not(instance(A, 'Killing'))), and(entails(and(not(instance(B, 'Organism')), and(instance(A, 'Killing'), patient(A, C))), not(agent(A, B))), entails(and(not(instance(B, 'Organism')), and(instance(A, 'Killing'), agent(A, B))), not(patient(A, C)))))), and(entails(and(instance(A, 'Killing'), and(agent(A, B), patient(A, C))), instance(C, 'Organism')), and(entails(and(not(instance(C, 'Organism')), and(agent(A, B), patient(A, C))), not(instance(A, 'Killing'))), and(entails(and(not(instance(C, 'Organism')), and(instance(A, 'Killing'), patient(A, C))), not(agent(A, B))), entails(and(not(instance(C, 'Organism')), and(instance(A, 'Killing'), agent(A, B))), not(patient(A, C))))))), [domainV(C, ['$instanceof':'Organism', patient:2]), domainV(B, ['$instanceof':'Organism', agent:2]), domainV(A, ['$instanceof':'Killing', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['KILL'=A, 'AGENT'=B, 'PATIENT'=C], 'Merge', 'PROCESSES', 5767, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Killing'), patient(A, B)), and(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, 'Living')), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dead')))), and(and(entails(and(instance(A, 'Killing'), patient(A, B)), holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, 'Living'))), and(entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, 'Living'))), patient(A, B)), not(instance(A, 'Killing'))), entails(and(not(holdsDuring('ImmediatePastFn'('WhenFn'(A)), attribute(B, 'Living'))), instance(A, 'Killing')), not(patient(A, B))))), and(entails(and(instance(A, 'Killing'), patient(A, B)), holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dead'))), and(entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dead'))), patient(A, B)), not(instance(A, 'Killing'))), entails(and(not(holdsDuring('ImmediateFutureFn'('WhenFn'(A)), attribute(B, 'Dead'))), instance(A, 'Killing')), not(patient(A, B)))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'Killing', 'WhenFn':1, patient:1]), domainV(C, []), forall(A), forall(B)], ['KILL'=A, 'PATIENT'=B], 'Merge', 'PROCESSES', 5769, 'Anonymous', on).
mooCache(subclass('Searching', 'IntentionalProcess'), subclass('Searching', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5771, 'Anonymous', on).
mooCache(documentation('Searching', string('"Any Process where the aim is to find   something, whether it be information (i.e. a Proposition) or an   Object."')), documentation('Searching', string('"Any Process where the aim is to find   something, whether it be information (i.e. a Proposition) or an   Object."')), [], [], 'Merge', 'PROCESSES', 5773, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Searching'), and(agent(A, B), patient(A, C))), inScopeOfInterest(B, C)), and(entails(and(instance(A, 'Searching'), and(agent(A, B), patient(A, C))), inScopeOfInterest(B, C)), and(entails(and(not(inScopeOfInterest(B, C)), and(agent(A, B), patient(A, C))), not(instance(A, 'Searching'))), and(entails(and(not(inScopeOfInterest(B, C)), and(instance(A, 'Searching'), patient(A, C))), not(agent(A, B))), entails(and(not(inScopeOfInterest(B, C)), and(instance(A, 'Searching'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [inScopeOfInterest:2, patient:2]), domainV(B, [agent:2, inScopeOfInterest:1]), domainV(A, ['$instanceof':'Searching', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['SEARCH'=A, 'AGENT'=B, 'ENTITY'=C], 'Merge', 'PROCESSES', 5775, 'Anonymous', on).
mooCache(subclass('Pursuing', 'Searching'), subclass('Pursuing', 'Searching'), [], [], 'Merge', 'PROCESSES', 5777, 'Anonymous', on).
mooCache(documentation('Pursuing', string('"The subclass of Searching where the thing   sought is an Object.  Some examples would be hunting, shopping,   trawling, and stalking."')), documentation('Pursuing', string('"The subclass of Searching where the thing   sought is an Object.  Some examples would be hunting, shopping,   trawling, and stalking."')), [], [], 'Merge', 'PROCESSES', 5779, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Pursuing'), and(agent(A, B), patient(A, C))), wants(B, C)), and(entails(and(instance(A, 'Pursuing'), and(agent(A, B), patient(A, C))), wants(B, C)), and(entails(and(not(wants(B, C)), and(agent(A, B), patient(A, C))), not(instance(A, 'Pursuing'))), and(entails(and(not(wants(B, C)), and(instance(A, 'Pursuing'), patient(A, C))), not(agent(A, B))), entails(and(not(wants(B, C)), and(instance(A, 'Pursuing'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [patient:2, wants:2]), domainV(B, [agent:2, wants:1]), domainV(A, ['$instanceof':'Pursuing', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PURSUE'=A, 'AGENT'=B, 'OBJ'=C], 'Merge', 'PROCESSES', 5781, 'Anonymous', on).
mooCache(subclass('Investigating', 'Searching'), subclass('Investigating', 'Searching'), [], [], 'Merge', 'PROCESSES', 5783, 'Anonymous', on).
mooCache(documentation('Investigating', string('"The subclass of Searching where the   thing sought is a piece of information (i.e. a Proposition denoted by   a Formula)."')), documentation('Investigating', string('"The subclass of Searching where the   thing sought is a piece of information (i.e. a Proposition denoted by   a Formula)."')), [], [], 'Merge', 'PROCESSES', 5785, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Investigating'), patient(A, B)), instance(B, 'Formula')), and(entails(and(instance(A, 'Investigating'), patient(A, B)), instance(B, 'Formula')), and(entails(and(not(instance(B, 'Formula')), patient(A, B)), not(instance(A, 'Investigating'))), entails(and(not(instance(B, 'Formula')), instance(A, 'Investigating')), not(patient(A, B))))), [domainV(B, ['$instanceof':'Formula', patient:2]), domainV(A, ['$instanceof':'Investigating', patient:1]), domainV(C, []), forall(A), forall(B)], ['INVESTIGATE'=A, 'PROP'=B], 'Merge', 'PROCESSES', 5787, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Investigating'), and(agent(A, B), patient(A, C))), holdsDuring('WhenFn'(A), not(knows(B, C)))), and(entails(and(instance(A, 'Investigating'), and(agent(A, B), patient(A, C))), holdsDuring('WhenFn'(A), not(knows(B, C)))), and(entails(and(not(holdsDuring('WhenFn'(A), not(knows(B, C)))), and(agent(A, B), patient(A, C))), not(instance(A, 'Investigating'))), and(entails(and(not(holdsDuring('WhenFn'(A), not(knows(B, C)))), and(instance(A, 'Investigating'), patient(A, C))), not(agent(A, B))), entails(and(not(holdsDuring('WhenFn'(A), not(knows(B, C)))), and(instance(A, 'Investigating'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [knows:2, patient:2]), domainV(B, [agent:2, knows:1]), domainV(A, ['$instanceof':'Investigating', 'WhenFn':1, agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['INVESTIGATE'=A, 'AGENT'=B, 'PROP'=C], 'Merge', 'PROCESSES', 5789, 'Anonymous', on).
mooCache(subclass('SocialInteraction', 'IntentionalProcess'), subclass('SocialInteraction', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5791, 'Anonymous', on).
mooCache(documentation('SocialInteraction', string('"The subclass of   IntentionalProcess that involves interactions between   CognitiveAgents."')), documentation('SocialInteraction', string('"The subclass of   IntentionalProcess that involves interactions between   CognitiveAgents."')), [], [], 'Merge', 'PROCESSES', 5793, 'Anonymous', on).
mooCache(=>(instance(A, 'SocialInteraction'), exists(B, exists(C, and(agent(A, C), and(agent(A, B), not(equal(C, B))))))), and(and(entails(not(agent(A, C)), not(instance(A, 'SocialInteraction'))), entails(and(instance(A, 'SocialInteraction'), '$existential'(C, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, B), not(equal('?AGENT1', B)))))), agent(A, C))), and(and(entails(not(agent(A, B)), not(instance(A, 'SocialInteraction'))), entails(and(and(instance(A, 'SocialInteraction'), '$existential'(B, '?AGENT2', exists(C, and(agent(A, C), and(agent(A, '?AGENT2'), not(equal(C, '?AGENT2'))))))), '$existential'(C, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, B), not(equal('?AGENT1', B)))))), agent(A, B))), and(entails(equal(C, B), not(instance(A, 'SocialInteraction'))), entails(instance(A, 'SocialInteraction'), not(equal(C, B)))))), [domainV(C, [agent:2]), domainV(B, [agent:2]), domainV(A, ['$instanceof':'SocialInteraction', agent:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?AGENT2', exists(C, and(agent(A, C), and(agent(A, '?AGENT2'), not(equal(C, '?AGENT2'))))))), replaceConsVar(C, '$existential'('?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, B), not(equal('?AGENT1', B))))))], ['INTERACTION'=A, 'AGENT1'=C, 'AGENT2'=B], 'Merge', 'PROCESSES', 5795, 'Anonymous', on).
mooCache(subclass('Pretending', 'SocialInteraction'), subclass('Pretending', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5797, 'Anonymous', on).
mooCache(documentation('Pretending', string('"Any SocialInteraction where a   CognitiveAgent or Group of CognitiveAgents attempts to make   another CognitiveAgent or Group of CognitiveAgents believe   something that is false.  This covers deceit, affectation,   impersonation, and entertainment productions, to give just a few   examples."')), documentation('Pretending', string('"Any SocialInteraction where a   CognitiveAgent or Group of CognitiveAgents attempts to make   another CognitiveAgent or Group of CognitiveAgents believe   something that is false.  This covers deceit, affectation,   impersonation, and entertainment productions, to give just a few   examples."')), [], [], 'Merge', 'PROCESSES', 5799, 'Anonymous', on).
mooCache(=>(instance(A, 'Pretending'), exists(B, exists(C, and(hasPurpose(A, believes(C, B)), and(true(B), true('True')))))), and(and(entails(not(hasPurpose(A, believes(C, B))), not(instance(A, 'Pretending'))), entails(and(and(instance(A, 'Pretending'), '$existential'(B, '?PROP', exists(C, and(hasPurpose(A, believes(C, '?PROP')), and(true('?PROP'), true('True')))))), '$existential'(C, '?PERSON', and(hasPurpose(A, believes('?PERSON', B)), and(true(B), true('True'))))), hasPurpose(A, believes(C, B)))), and(and(entails(not(true(B)), not(instance(A, 'Pretending'))), entails(and(and(instance(A, 'Pretending'), '$existential'(B, '?PROP', exists(C, and(hasPurpose(A, believes(C, '?PROP')), and(true('?PROP'), true('True')))))), '$existential'(C, '?PERSON', and(hasPurpose(A, believes('?PERSON', B)), and(true(B), true('True'))))), true(B))), and(entails(not(true('True')), not(instance(A, 'Pretending'))), entails(instance(A, 'Pretending'), true('True'))))), [domainV(C, [believes:1]), domainV(B, [believes:2, true:1]), domainV(A, ['$instanceof':'Pretending', hasPurpose:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PROP', exists(C, and(hasPurpose(A, believes(C, '?PROP')), and(true('?PROP'), true('True')))))), replaceConsVar(C, '$existential'('?PERSON', and(hasPurpose(A, believes('?PERSON', B)), and(true(B), true('True')))))], ['PRETEND'=A, 'PERSON'=C, 'PROP'=B], 'Merge', 'PROCESSES', 5801, 'Anonymous', on).
mooCache(subclass('Communication', 'SocialInteraction'), subclass('Communication', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5803, 'Anonymous', on).
mooCache(documentation('Communication', string('"A SocialInteraction that involves   the transfer of information between two or more CognitiveAgents   via a ContentBearingObject."')), documentation('Communication', string('"A SocialInteraction that involves   the transfer of information between two or more CognitiveAgents   via a ContentBearingObject."')), [], [], 'Merge', 'PROCESSES', 5805, 'Anonymous', on).
mooCache(=>(instance(A, 'Communication'), exists(B, and(instance(B, 'ContentBearingObject'), patient(A, B)))), and(and(entails(not(instance(B, 'ContentBearingObject')), not(instance(A, 'Communication'))), entails(and(instance(A, 'Communication'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'ContentBearingObject'), patient(A, '?OBJ')))), instance(B, 'ContentBearingObject'))), and(entails(not(patient(A, B)), not(instance(A, 'Communication'))), entails(and(instance(A, 'Communication'), '$existential'(B, '?OBJ', and(instance('?OBJ', 'ContentBearingObject'), patient(A, '?OBJ')))), patient(A, B)))), [domainV(B, ['$instanceof':'ContentBearingObject', patient:2]), domainV(A, ['$instanceof':'Communication', patient:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?OBJ', and(instance('?OBJ', 'ContentBearingObject'), patient(A, '?OBJ'))))], ['ACTION'=A, 'OBJ'=B], 'Merge', 'PROCESSES', 5807, 'Anonymous', on).
mooCache(subclass('Disseminating', 'Communication'), subclass('Disseminating', 'Communication'), [], [], 'Merge', 'PROCESSES', 5809, 'Anonymous', on).
mooCache(documentation('Disseminating', string('"Any Communication that involves a   single source and many destinations.  This covers the release   of a published book, broadcasting, a theatrical performance, giving   orders to assembled troops, delivering a public lecture, etc."')), documentation('Disseminating', string('"Any Communication that involves a   single source and many destinations.  This covers the release   of a published book, broadcasting, a theatrical performance, giving   orders to assembled troops, delivering a public lecture, etc."')), [], [], 'Merge', 'PROCESSES', 5811, 'Anonymous', on).
mooCache(subclass('Stating', 'Communication'), subclass('Stating', 'Communication'), [], [], 'Merge', 'PROCESSES', 5813, 'Anonymous', on).
mooCache(documentation('Stating', string('"Instances of this Class commit a sender to some truth.   Example: John concluded that Peter was not present, and predicted that he would   arrive soon."')), documentation('Stating', string('"Instances of this Class commit a sender to some truth.   Example: John concluded that Peter was not present, and predicted that he would   arrive soon."')), [], [], 'Merge', 'PROCESSES', 5815, 'Anonymous', on).
mooCache(subclass('Directing', 'Communication'), subclass('Directing', 'Communication'), [], [], 'Merge', 'PROCESSES', 5817, 'Anonymous', on).
mooCache(documentation('Directing', string('"Instances of this Class urge some further action   among the receivers.  Example: The 5th Battalion requested air support from   the 3rd Bomber Group."')), documentation('Directing', string('"Instances of this Class urge some further action   among the receivers.  Example: The 5th Battalion requested air support from   the 3rd Bomber Group."')), [], [], 'Merge', 'PROCESSES', 5819, 'Anonymous', on).
mooCache(subclass('Ordering', 'Directing'), subclass('Ordering', 'Directing'), [], [], 'Merge', 'PROCESSES', 5821, 'Anonymous', on).
mooCache(documentation('Ordering', string('"A Directing in which the receiver is   commanded to realize the content of a ContentBearingObject.  Orders   are injunctions, the disobedience of which involves sanctions, or   which express an obligation upon the part of the orderee."')), documentation('Ordering', string('"A Directing in which the receiver is   commanded to realize the content of a ContentBearingObject.  Orders   are injunctions, the disobedience of which involves sanctions, or   which express an obligation upon the part of the orderee."')), [], [], 'Merge', 'PROCESSES', 5823, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Ordering'), patient(A, B)), modalProperty(B, 'Obligation')), and(entails(and(instance(A, 'Ordering'), patient(A, B)), modalProperty(B, 'Obligation')), and(entails(and(not(modalProperty(B, 'Obligation')), patient(A, B)), not(instance(A, 'Ordering'))), entails(and(not(modalProperty(B, 'Obligation')), instance(A, 'Ordering')), not(patient(A, B))))), [domainV(B, [modalProperty:1, patient:2]), domainV(A, ['$instanceof':'Ordering', patient:1]), domainV(C, []), forall(A), forall(B)], ['ORDER'=A, 'FORMULA'=B], 'Merge', 'PROCESSES', 5825, 'Anonymous', on).
mooCache(subclass('Requesting', 'Directing'), subclass('Requesting', 'Directing'), [], [], 'Merge', 'PROCESSES', 5827, 'Anonymous', on).
mooCache(documentation('Requesting', string('"A request expresses a desire by the agent of the   request that the destination of the request perform some future action."')), documentation('Requesting', string('"A request expresses a desire by the agent of the   request that the destination of the request perform some future action."')), [], [], 'Merge', 'PROCESSES', 5829, 'Anonymous', on).
mooCache(subclass('Questioning', 'Directing'), subclass('Questioning', 'Directing'), [], [], 'Merge', 'PROCESSES', 5831, 'Anonymous', on).
mooCache(documentation('Questioning', string('"A request for information."')), documentation('Questioning', string('"A request for information."')), [], [], 'Merge', 'PROCESSES', 5833, 'Anonymous', on).
mooCache(subclass('Committing', 'Communication'), subclass('Committing', 'Communication'), [], [], 'Merge', 'PROCESSES', 5835, 'Anonymous', on).
mooCache(documentation('Committing', string('"Instances of this Class commit the sender to some   future course. Example: Bob promised Susan that he would be home by 11pm."')), documentation('Committing', string('"Instances of this Class commit the sender to some   future course. Example: Bob promised Susan that he would be home by 11pm."')), [], [], 'Merge', 'PROCESSES', 5837, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Committing'), patient(A, B)), modalProperty(A, 'Promise')), and(entails(and(instance(A, 'Committing'), patient(A, B)), modalProperty(A, 'Promise')), and(entails(and(not(modalProperty(A, 'Promise')), patient(A, B)), not(instance(A, 'Committing'))), entails(and(not(modalProperty(A, 'Promise')), instance(A, 'Committing')), not(patient(A, B))))), [domainV(B, [patient:2]), domainV(A, ['$instanceof':'Committing', modalProperty:1, patient:1]), domainV(C, []), forall(A), forall(B)], ['COMMIT'=A, 'FORMULA'=B], 'Merge', 'PROCESSES', 5839, 'Anonymous', on).
mooCache(subclass('Expressing', 'Communication'), subclass('Expressing', 'Communication'), [], [], 'Merge', 'PROCESSES', 5841, 'Anonymous', on).
mooCache(documentation('Expressing', string('"Instances of this Class express a state of the sender.   Example: Jane thanked Barbara for the present she had given her."')), documentation('Expressing', string('"Instances of this Class express a state of the sender.   Example: Jane thanked Barbara for the present she had given her."')), [], [], 'Merge', 'PROCESSES', 5843, 'Anonymous', on).
mooCache(subclass('Declaring', 'Communication'), subclass('Declaring', 'Communication'), [], [], 'Merge', 'PROCESSES', 5845, 'Anonymous', on).
mooCache(documentation('Declaring', string('"The Class of Communications that effect an   institutional alteration when performed by competent authority.  Some   examples are nominating, marrying, and excommunicating."')), documentation('Declaring', string('"The Class of Communications that effect an   institutional alteration when performed by competent authority.  Some   examples are nominating, marrying, and excommunicating."')), [], [], 'Merge', 'PROCESSES', 5847, 'Anonymous', on).
mooCache(subclass('Cooperation', 'SocialInteraction'), subclass('Cooperation', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5849, 'Anonymous', on).
mooCache(documentation('Cooperation', string('"The subclass of SocialInteraction where   the participants involved work together for the achievement of a common   goal."')), documentation('Cooperation', string('"The subclass of SocialInteraction where   the participants involved work together for the achievement of a common   goal."')), [], [], 'Merge', 'PROCESSES', 5851, 'Anonymous', on).
mooCache(=>(instance(A, 'Cooperation'), exists(B, forall(C, =>(agent(A, C), hasPurposeForAgent(A, B, C))))), and(entails(and(agent(A, C), not(hasPurposeForAgent(A, B, C))), not(instance(A, 'Cooperation'))), and(entails(and(instance(A, 'Cooperation'), not(hasPurposeForAgent(A, B, C))), not(agent(A, C))), entails(and(and(instance(A, 'Cooperation'), agent(A, C)), '$existential'(B, '?PURP', forall(C, =>(agent(A, C), hasPurposeForAgent(A, '?PURP', C))))), hasPurposeForAgent(A, B, C)))), [domainV(C, [agent:2, hasPurposeForAgent:3]), domainV(B, [hasPurposeForAgent:2]), domainV(A, ['$instanceof':'Cooperation', agent:1, hasPurposeForAgent:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PURP', forall(C, =>(agent(A, C), hasPurposeForAgent(A, '?PURP', C))))), forall(C)], ['COOPERATE'=A, 'PURP'=B, 'AGENT'=C], 'Merge', 'PROCESSES', 5853, 'Anonymous', on).
mooCache(subclass('Meeting', 'SocialInteraction'), subclass('Meeting', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5855, 'Anonymous', on).
mooCache(documentation('Meeting', string('"The coming together of two or more   CognitiveAgents for the purpose of Communication.  This covers informal   meetings, e.g. visits with family members, and formal meetings, e.g. a board   of directors meeting."')), documentation('Meeting', string('"The coming together of two or more   CognitiveAgents for the purpose of Communication.  This covers informal   meetings, e.g. visits with family members, and formal meetings, e.g. a board   of directors meeting."')), [], [], 'Merge', 'PROCESSES', 5857, 'Anonymous', on).
mooCache(subclass('Competition', 'Process'), subclass('Competition', 'Process'), [], [], 'Merge', 'PROCESSES', 5859, 'Anonymous', on).
mooCache(documentation('Competition', string('"A Process where the agent and   patient are Agents who are trying to defeat one another.  The Agents   need not be CognitiveAgents.  For example, the struggle of plants for   space or sunlight, or of bacteria for food resources in some environment   would be instances of Competition."')), documentation('Competition', string('"A Process where the agent and   patient are Agents who are trying to defeat one another.  The Agents   need not be CognitiveAgents.  For example, the struggle of plants for   space or sunlight, or of bacteria for food resources in some environment   would be instances of Competition."')), [], [], 'Merge', 'PROCESSES', 5861, 'Anonymous', on).
mooCache(subclass('Contest', 'Competition'), subclass('Contest', 'Competition'), [], [], 'Merge', 'PROCESSES', 5863, 'Anonymous', on).
mooCache(subclass('Contest', 'SocialInteraction'), subclass('Contest', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5865, 'Anonymous', on).
mooCache(documentation('Contest', string('"A Competition in which the Agents are   CognitiveAgents.  More specifically, the Agents are aware at some   level that there is a prize at stake in the Competition."')), documentation('Contest', string('"A Competition in which the Agents are   CognitiveAgents.  More specifically, the Agents are aware at some   level that there is a prize at stake in the Competition."')), [], [], 'Merge', 'PROCESSES', 5867, 'Anonymous', on).
mooCache(=>(instance(A, 'Contest'), exists(B, exists(C, exists(D, exists(E, and(agent(A, E), and(agent(A, D), and(hasPurposeForAgent(A, C, E), and(hasPurposeForAgent(A, B, D), and(not(equal(E, D)), not(equal(C, B)))))))))))), and(and(entails(not(agent(A, E)), not(instance(A, 'Contest'))), entails(and(instance(A, 'Contest'), '$existential'(E, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, D), and(hasPurposeForAgent(A, C, '?AGENT1'), and(hasPurposeForAgent(A, B, D), and(not(equal('?AGENT1', D)), not(equal(C, B))))))))), agent(A, E))), and(and(entails(not(agent(A, D)), not(instance(A, 'Contest'))), entails(and(and(instance(A, 'Contest'), '$existential'(D, '?AGENT2', exists(E, and(agent(A, E), and(agent(A, '?AGENT2'), and(hasPurposeForAgent(A, C, E), and(hasPurposeForAgent(A, B, '?AGENT2'), and(not(equal(E, '?AGENT2')), not(equal(C, B)))))))))), '$existential'(E, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, D), and(hasPurposeForAgent(A, C, '?AGENT1'), and(hasPurposeForAgent(A, B, D), and(not(equal('?AGENT1', D)), not(equal(C, B))))))))), agent(A, D))), and(and(entails(not(hasPurposeForAgent(A, C, E)), not(instance(A, 'Contest'))), entails(and(and(and(instance(A, 'Contest'), '$existential'(C, '?PURP1', exists(D, exists(E, and(agent(A, E), and(agent(A, D), and(hasPurposeForAgent(A, '?PURP1', E), and(hasPurposeForAgent(A, B, D), and(not(equal(E, D)), not(equal('?PURP1', B))))))))))), '$existential'(D, '?AGENT2', exists(E, and(agent(A, E), and(agent(A, '?AGENT2'), and(hasPurposeForAgent(A, C, E), and(hasPurposeForAgent(A, B, '?AGENT2'), and(not(equal(E, '?AGENT2')), not(equal(C, B)))))))))), '$existential'(E, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, D), and(hasPurposeForAgent(A, C, '?AGENT1'), and(hasPurposeForAgent(A, B, D), and(not(equal('?AGENT1', D)), not(equal(C, B))))))))), hasPurposeForAgent(A, C, E))), and(and(entails(not(hasPurposeForAgent(A, B, D)), not(instance(A, 'Contest'))), entails(and(and(and(and(instance(A, 'Contest'), '$existential'(B, '?PURP2', exists(C, exists(D, exists(E, and(agent(A, E), and(agent(A, D), and(hasPurposeForAgent(A, C, E), and(hasPurposeForAgent(A, '?PURP2', D), and(not(equal(E, D)), not(equal(C, '?PURP2')))))))))))), '$existential'(C, '?PURP1', exists(D, exists(E, and(agent(A, E), and(agent(A, D), and(hasPurposeForAgent(A, '?PURP1', E), and(hasPurposeForAgent(A, B, D), and(not(equal(E, D)), not(equal('?PURP1', B))))))))))), '$existential'(D, '?AGENT2', exists(E, and(agent(A, E), and(agent(A, '?AGENT2'), and(hasPurposeForAgent(A, C, E), and(hasPurposeForAgent(A, B, '?AGENT2'), and(not(equal(E, '?AGENT2')), not(equal(C, B)))))))))), '$existential'(E, '?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, D), and(hasPurposeForAgent(A, C, '?AGENT1'), and(hasPurposeForAgent(A, B, D), and(not(equal('?AGENT1', D)), not(equal(C, B))))))))), hasPurposeForAgent(A, B, D))), and(and(entails(equal(E, D), not(instance(A, 'Contest'))), entails(instance(A, 'Contest'), not(equal(E, D)))), and(entails(equal(C, B), not(instance(A, 'Contest'))), entails(instance(A, 'Contest'), not(equal(C, B))))))))), [domainV(E, [agent:2, hasPurposeForAgent:3]), domainV(D, [agent:2, hasPurposeForAgent:3]), domainV(C, [hasPurposeForAgent:2]), domainV(B, [hasPurposeForAgent:2]), domainV(A, ['$instanceof':'Contest', agent:1, hasPurposeForAgent:1]), domainV(F, []), forall(A), replaceConsVar(B, '$existential'('?PURP2', exists(C, exists(D, exists(E, and(agent(A, E), and(agent(A, D), and(hasPurposeForAgent(A, C, E), and(hasPurposeForAgent(A, '?PURP2', D), and(not(equal(E, D)), not(equal(C, '?PURP2')))))))))))), replaceConsVar(C, '$existential'('?PURP1', exists(D, exists(E, and(agent(A, E), and(agent(A, D), and(hasPurposeForAgent(A, '?PURP1', E), and(hasPurposeForAgent(A, B, D), and(not(equal(E, D)), not(equal('?PURP1', B))))))))))), replaceConsVar(D, '$existential'('?AGENT2', exists(E, and(agent(A, E), and(agent(A, '?AGENT2'), and(hasPurposeForAgent(A, C, E), and(hasPurposeForAgent(A, B, '?AGENT2'), and(not(equal(E, '?AGENT2')), not(equal(C, B)))))))))), replaceConsVar(E, '$existential'('?AGENT1', and(agent(A, '?AGENT1'), and(agent(A, D), and(hasPurposeForAgent(A, C, '?AGENT1'), and(hasPurposeForAgent(A, B, D), and(not(equal('?AGENT1', D)), not(equal(C, B)))))))))], ['CONTEST'=A, 'AGENT1'=E, 'AGENT2'=D, 'PURP1'=C, 'PURP2'=B], 'Merge', 'PROCESSES', 5869, 'Anonymous', on).
mooCache(subclass('ViolentContest', 'Contest'), subclass('ViolentContest', 'Contest'), [], [], 'Merge', 'PROCESSES', 5871, 'Anonymous', on).
mooCache(documentation('ViolentContest', string('"A Contest where one participant attempts to   physically injure another participant."')), documentation('ViolentContest', string('"A Contest where one participant attempts to   physically injure another participant."')), [], [], 'Merge', 'PROCESSES', 5873, 'Anonymous', on).
mooCache(subclass('War', 'ViolentContest'), subclass('War', 'ViolentContest'), [], [], 'Merge', 'PROCESSES', 5875, 'Anonymous', on).
mooCache(documentation('War', string('"A military confrontation between two or more   Nations or Organizations whose members are Nations.  As the   corresponding axiom specifies, a War is made up of Battles."')), documentation('War', string('"A military confrontation between two or more   Nations or Organizations whose members are Nations.  As the   corresponding axiom specifies, a War is made up of Battles."')), [], [], 'Merge', 'PROCESSES', 5877, 'Anonymous', on).
mooCache(=>(instance(A, 'War'), exists(B, and(instance(B, 'Battle'), subProcess(B, A)))), and(and(entails(not(instance(B, 'Battle')), not(instance(A, 'War'))), entails(and(instance(A, 'War'), '$existential'(B, '?BATTLE', and(instance('?BATTLE', 'Battle'), subProcess('?BATTLE', A)))), instance(B, 'Battle'))), and(entails(not(subProcess(B, A)), not(instance(A, 'War'))), entails(and(instance(A, 'War'), '$existential'(B, '?BATTLE', and(instance('?BATTLE', 'Battle'), subProcess('?BATTLE', A)))), subProcess(B, A)))), [domainV(B, ['$instanceof':'Battle', subProcess:1]), domainV(A, ['$instanceof':'War', subProcess:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BATTLE', and(instance('?BATTLE', 'Battle'), subProcess('?BATTLE', A))))], ['WAR'=A, 'BATTLE'=B], 'Merge', 'PROCESSES', 5879, 'Anonymous', on).
mooCache(=>(and(instance(A, 'War'), agent(A, B)), or(instance(B, 'Nation'), and(instance(B, 'Organization'), forall(C, =>(member(C, B), instance(C, 'Nation')))))), and(and(entails(and(agent(A, B), and(not(instance(B, 'Nation')), not(instance(B, 'Organization')))), not(instance(A, 'War'))), and(entails(and(instance(A, 'War'), and(not(instance(B, 'Nation')), not(instance(B, 'Organization')))), not(agent(A, B))), and(entails(and(and(instance(A, 'War'), agent(A, B)), not(instance(B, 'Organization'))), instance(B, 'Nation')), entails(and(and(instance(A, 'War'), agent(A, B)), not(instance(B, 'Nation'))), instance(B, 'Organization'))))), and(entails(and(agent(A, B), and(not(instance(B, 'Nation')), and(member(C, B), not(instance(C, 'Nation'))))), not(instance(A, 'War'))), and(entails(and(instance(A, 'War'), and(not(instance(B, 'Nation')), and(member(C, B), not(instance(C, 'Nation'))))), not(agent(A, B))), and(entails(and(and(instance(A, 'War'), agent(A, B)), and(member(C, B), not(instance(C, 'Nation')))), instance(B, 'Nation')), and(entails(and(and(instance(A, 'War'), agent(A, B)), and(not(instance(B, 'Nation')), not(instance(C, 'Nation')))), not(member(C, B))), entails(and(and(instance(A, 'War'), agent(A, B)), and(not(instance(B, 'Nation')), member(C, B))), instance(C, 'Nation'))))))), [domainV(C, ['$instanceof':'Nation', member:1]), domainV(B, ['$instanceof':'Nation', '$instanceof':'Organization', agent:2, member:2]), domainV(A, ['$instanceof':'War', agent:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['WAR'=A, 'AGENT'=B, 'MEMBER'=C], 'Merge', 'PROCESSES', 5881, 'Anonymous', on).
mooCache(subclass('Battle', 'ViolentContest'), subclass('Battle', 'ViolentContest'), [], [], 'Merge', 'PROCESSES', 5883, 'Anonymous', on).
mooCache(documentation('Battle', string('"A ViolentContest between two or more military   units within the context of a war.  Note that this does not cover the   metaphorical sense of \'battle\', which simply means a struggle of some   sort.  This sense should be represented with the more general concept of   Competition."')), documentation('Battle', string('"A ViolentContest between two or more military   units within the context of a war.  Note that this does not cover the   metaphorical sense of \'battle\', which simply means a struggle of some   sort.  This sense should be represented with the more general concept of   Competition."')), [], [], 'Merge', 'PROCESSES', 5885, 'Anonymous', on).
mooCache(=>(instance(A, 'Battle'), exists(B, and(instance(B, 'War'), subProcess(A, B)))), and(and(entails(not(instance(B, 'War')), not(instance(A, 'Battle'))), entails(and(instance(A, 'Battle'), '$existential'(B, '?WAR', and(instance('?WAR', 'War'), subProcess(A, '?WAR')))), instance(B, 'War'))), and(entails(not(subProcess(A, B)), not(instance(A, 'Battle'))), entails(and(instance(A, 'Battle'), '$existential'(B, '?WAR', and(instance('?WAR', 'War'), subProcess(A, '?WAR')))), subProcess(A, B)))), [domainV(B, ['$instanceof':'War', subProcess:2]), domainV(A, ['$instanceof':'Battle', subProcess:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?WAR', and(instance('?WAR', 'War'), subProcess(A, '?WAR'))))], ['BATTLE'=A, 'WAR'=B], 'Merge', 'PROCESSES', 5887, 'Anonymous', on).
mooCache(=>(instance(A, 'Battle'), exists(B, and(instance(B, 'ViolentContest'), subProcess(B, A)))), and(and(entails(not(instance(B, 'ViolentContest')), not(instance(A, 'Battle'))), entails(and(instance(A, 'Battle'), '$existential'(B, '?ATTACK', and(instance('?ATTACK', 'ViolentContest'), subProcess('?ATTACK', A)))), instance(B, 'ViolentContest'))), and(entails(not(subProcess(B, A)), not(instance(A, 'Battle'))), entails(and(instance(A, 'Battle'), '$existential'(B, '?ATTACK', and(instance('?ATTACK', 'ViolentContest'), subProcess('?ATTACK', A)))), subProcess(B, A)))), [domainV(B, ['$instanceof':'ViolentContest', subProcess:1]), domainV(A, ['$instanceof':'Battle', subProcess:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ATTACK', and(instance('?ATTACK', 'ViolentContest'), subProcess('?ATTACK', A))))], ['BATTLE'=A, 'ATTACK'=B], 'Merge', 'PROCESSES', 5889, 'Anonymous', on).
mooCache(subclass('Game', 'Contest'), subclass('Game', 'Contest'), [], [], 'Merge', 'PROCESSES', 5891, 'Anonymous', on).
mooCache(subclass('Game', 'RecreationalProcess'), subclass('Game', 'RecreationalProcess'), [], [], 'Merge', 'PROCESSES', 5893, 'Anonymous', on).
mooCache(documentation('Game', string('"A Contest whose purpose is the   enjoyment/stimulation of the participants or spectators of the Game."')), documentation('Game', string('"A Contest whose purpose is the   enjoyment/stimulation of the participants or spectators of the Game."')), [], [], 'Merge', 'PROCESSES', 5895, 'Anonymous', on).
mooCache(subclass('Sport', 'Game'), subclass('Sport', 'Game'), [], [], 'Merge', 'PROCESSES', 5897, 'Anonymous', on).
mooCache(subclass('Sport', 'ExerciseProcess'), subclass('Sport', 'ExerciseProcess'), [], [], 'Merge', 'PROCESSES', 5899, 'Anonymous', on).
mooCache(documentation('Sport', string('"A Game which requires some degree of physical   exercion from the participants of the game."')), documentation('Sport', string('"A Game which requires some degree of physical   exercion from the participants of the game."')), [], [], 'Merge', 'PROCESSES', 5901, 'Anonymous', on).
mooCache(subclass('LegalAction', 'Contest'), subclass('LegalAction', 'Contest'), [], [], 'Merge', 'PROCESSES', 5903, 'Anonymous', on).
mooCache(documentation('LegalAction', string('"Any Process where a CognitiveAgent seeks   to obtain something from another CognitiveAgent through a court of law."')), documentation('LegalAction', string('"Any Process where a CognitiveAgent seeks   to obtain something from another CognitiveAgent through a court of law."')), [], [], 'Merge', 'PROCESSES', 5905, 'Anonymous', on).
mooCache(subclass('Maneuver', 'IntentionalProcess'), subclass('Maneuver', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5907, 'Anonymous', on).
mooCache(documentation('Maneuver', string('"An intentional move or play within a Contest.    In many cases, a Maneuver is part of a strategy for winning the   larger Contest of which the Maneuver is a part."')), documentation('Maneuver', string('"An intentional move or play within a Contest.    In many cases, a Maneuver is part of a strategy for winning the   larger Contest of which the Maneuver is a part."')), [], [], 'Merge', 'PROCESSES', 5909, 'Anonymous', on).
mooCache(=>(instance(A, 'Maneuver'), exists(B, and(instance(B, 'Contest'), subProcess(A, B)))), and(and(entails(not(instance(B, 'Contest')), not(instance(A, 'Maneuver'))), entails(and(instance(A, 'Maneuver'), '$existential'(B, '?CONTEST', and(instance('?CONTEST', 'Contest'), subProcess(A, '?CONTEST')))), instance(B, 'Contest'))), and(entails(not(subProcess(A, B)), not(instance(A, 'Maneuver'))), entails(and(instance(A, 'Maneuver'), '$existential'(B, '?CONTEST', and(instance('?CONTEST', 'Contest'), subProcess(A, '?CONTEST')))), subProcess(A, B)))), [domainV(B, ['$instanceof':'Contest', subProcess:2]), domainV(A, ['$instanceof':'Maneuver', subProcess:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?CONTEST', and(instance('?CONTEST', 'Contest'), subProcess(A, '?CONTEST'))))], ['MOVE'=A, 'CONTEST'=B], 'Merge', 'PROCESSES', 5911, 'Anonymous', on).
mooCache(subclass('Perception', 'MentalProcess'), subclass('Perception', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5913, 'Anonymous', on).
mooCache(documentation('Perception', string('"Sensing some aspect of the material world.    Note that the agent of this sensing is assumed to be an Animal."')), documentation('Perception', string('"Sensing some aspect of the material world.    Note that the agent of this sensing is assumed to be an Animal."')), [], [], 'Merge', 'PROCESSES', 5915, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Perception'), agent(A, B)), instance(B, 'Animal')), and(entails(and(instance(A, 'Perception'), agent(A, B)), instance(B, 'Animal')), and(entails(and(not(instance(B, 'Animal')), agent(A, B)), not(instance(A, 'Perception'))), entails(and(not(instance(B, 'Animal')), instance(A, 'Perception')), not(agent(A, B))))), [domainV(B, ['$instanceof':'Animal', agent:2]), domainV(A, ['$instanceof':'Perception', agent:1]), domainV(C, []), forall(A), forall(B)], ['PERCEPT'=A, 'AGENT'=B], 'Merge', 'PROCESSES', 5917, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Perception'), and(agent(A, B), patient(A, C))), notices(B, C)), and(entails(and(instance(A, 'Perception'), and(agent(A, B), patient(A, C))), notices(B, C)), and(entails(and(not(notices(B, C)), and(agent(A, B), patient(A, C))), not(instance(A, 'Perception'))), and(entails(and(not(notices(B, C)), and(instance(A, 'Perception'), patient(A, C))), not(agent(A, B))), entails(and(not(notices(B, C)), and(instance(A, 'Perception'), agent(A, B))), not(patient(A, C)))))), [domainV(C, [notices:2, patient:2]), domainV(B, [agent:2, notices:1]), domainV(A, ['$instanceof':'Perception', agent:1, patient:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PERCEPT'=A, 'AGENT'=B, 'OBJECT'=C], 'Merge', 'PROCESSES', 5919, 'Anonymous', on).
mooCache(subclass('Seeing', 'Perception'), subclass('Seeing', 'Perception'), [], [], 'Merge', 'PROCESSES', 5921, 'Anonymous', on).
mooCache(documentation('Seeing', string('"The subclass of Perception in which the   sensing is done by an ocular Organ."')), documentation('Seeing', string('"The subclass of Perception in which the   sensing is done by an ocular Organ."')), [], [], 'Merge', 'PROCESSES', 5923, 'Anonymous', on).
mooCache(subclass('Smelling', 'Perception'), subclass('Smelling', 'Perception'), [], [], 'Merge', 'PROCESSES', 5925, 'Anonymous', on).
mooCache(documentation('Smelling', string('"The subclass of Perception in which the   sensing is done by an olefactory Organ."')), documentation('Smelling', string('"The subclass of Perception in which the   sensing is done by an olefactory Organ."')), [], [], 'Merge', 'PROCESSES', 5927, 'Anonymous', on).
mooCache(subclass('Tasting', 'Perception'), subclass('Tasting', 'Perception'), [], [], 'Merge', 'PROCESSES', 5929, 'Anonymous', on).
mooCache(documentation('Tasting', string('"The subclass of Perception in which the   sensing is done by of an Organ which can discriminate various tastes."')), documentation('Tasting', string('"The subclass of Perception in which the   sensing is done by of an Organ which can discriminate various tastes."')), [], [], 'Merge', 'PROCESSES', 5931, 'Anonymous', on).
mooCache(subclass('Hearing', 'Perception'), subclass('Hearing', 'Perception'), [], [], 'Merge', 'PROCESSES', 5933, 'Anonymous', on).
mooCache(documentation('Hearing', string('"The subclass of Perception in which the   sensing is done by an auditory Organ."')), documentation('Hearing', string('"The subclass of Perception in which the   sensing is done by an auditory Organ."')), [], [], 'Merge', 'PROCESSES', 5935, 'Anonymous', on).
mooCache(subclass('TactilePerception', 'Perception'), subclass('TactilePerception', 'Perception'), [], [], 'Merge', 'PROCESSES', 5937, 'Anonymous', on).
mooCache(documentation('TactilePerception', string('"The subclass of Perception in which   the sensing is done by Touching."')), documentation('TactilePerception', string('"The subclass of Perception in which   the sensing is done by Touching."')), [], [], 'Merge', 'PROCESSES', 5939, 'Anonymous', on).
mooCache(=>(instance(A, 'TactilePerception'), exists(B, and(instance(B, 'Touching'), subProcess(B, A)))), and(and(entails(not(instance(B, 'Touching')), not(instance(A, 'TactilePerception'))), entails(and(instance(A, 'TactilePerception'), '$existential'(B, '?TOUCH', and(instance('?TOUCH', 'Touching'), subProcess('?TOUCH', A)))), instance(B, 'Touching'))), and(entails(not(subProcess(B, A)), not(instance(A, 'TactilePerception'))), entails(and(instance(A, 'TactilePerception'), '$existential'(B, '?TOUCH', and(instance('?TOUCH', 'Touching'), subProcess('?TOUCH', A)))), subProcess(B, A)))), [domainV(B, ['$instanceof':'Touching', subProcess:1]), domainV(A, ['$instanceof':'TactilePerception', subProcess:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?TOUCH', and(instance('?TOUCH', 'Touching'), subProcess('?TOUCH', A))))], ['TACTILE'=A, 'TOUCH'=B], 'Merge', 'PROCESSES', 5941, 'Anonymous', on).
mooCache(subclass('Emitting', 'Process'), subclass('Emitting', 'Process'), [], [], 'Merge', 'PROCESSES', 5943, 'Anonymous', on).
mooCache(documentation('Emitting', string('"Processes in which something is given off by   something else."')), documentation('Emitting', string('"Processes in which something is given off by   something else."')), [], [], 'Merge', 'PROCESSES', 5945, 'Anonymous', on).
mooCache(subclass('EmittingLight', 'Emitting'), subclass('EmittingLight', 'Emitting'), [], [], 'Merge', 'PROCESSES', 5947, 'Anonymous', on).
mooCache(documentation('EmittingLight', string('"The subclass of Emitting in which   light is given off.  Some examples include blinking, flashing, and   glittering."')), documentation('EmittingLight', string('"The subclass of Emitting in which   light is given off.  Some examples include blinking, flashing, and   glittering."')), [], [], 'Merge', 'PROCESSES', 5949, 'Anonymous', on).
mooCache(subclass('EmittingSmell', 'Emitting'), subclass('EmittingSmell', 'Emitting'), [], [], 'Merge', 'PROCESSES', 5951, 'Anonymous', on).
mooCache(documentation('EmittingSmell', string('"The subclass of Emitting in which   smells are given off.  Some examples include reeking, smelling, and   stinking."')), documentation('EmittingSmell', string('"The subclass of Emitting in which   smells are given off.  Some examples include reeking, smelling, and   stinking."')), [], [], 'Merge', 'PROCESSES', 5953, 'Anonymous', on).
mooCache(subclass('EmittingSound', 'Emitting'), subclass('EmittingSound', 'Emitting'), [], [], 'Merge', 'PROCESSES', 5955, 'Anonymous', on).
mooCache(documentation('EmittingSound', string('"The subclass of Emitting in which   sound is given off.  Some examples include creaking, roaring, and   whistling."')), documentation('EmittingSound', string('"The subclass of Emitting in which   sound is given off.  Some examples include creaking, roaring, and   whistling."')), [], [], 'Merge', 'PROCESSES', 5957, 'Anonymous', on).
mooCache(subclass('Music', 'EmittingSound'), subclass('Music', 'EmittingSound'), [], [], 'Merge', 'PROCESSES', 5959, 'Anonymous', on).
mooCache(documentation('Music', string('"The subclass of EmittingSound where the   sound is intended to be melodic and is produced deliberately."')), documentation('Music', string('"The subclass of EmittingSound where the   sound is intended to be melodic and is produced deliberately."')), [], [], 'Merge', 'PROCESSES', 5961, 'Anonymous', on).
mooCache('include-context'('MEREOTOPOLOGY'), 'include-context'('MEREOTOPOLOGY'), [], [], 'Merge', 'OBJECTS', 5973, 'Anonymous', on).
mooCache('include-context'('PROCESSES'), 'include-context'('PROCESSES'), [], [], 'Merge', 'OBJECTS', 5976, 'Anonymous', on).
mooCache('include-context'('QUALITIES'), 'include-context'('QUALITIES'), [], [], 'Merge', 'OBJECTS', 5979, 'Anonymous', on).
mooCache(subclass('Nation', 'Agent'), subclass('Nation', 'Agent'), [], [], 'Merge', 'OBJECTS', 5982, 'Anonymous', on).
mooCache(relatedInternalConcept('Nation', 'Land'), relatedInternalConcept('Nation', 'Land'), [], [], 'Merge', 'OBJECTS', 5984, 'Anonymous', on).
mooCache(documentation('Nation', string('"That aspect of a Nation which can act automonously   and which is the same throughout the changes in population and borders.    Compare the Class Land."')), documentation('Nation', string('"That aspect of a Nation which can act automonously   and which is the same throughout the changes in population and borders.    Compare the Class Land."')), [], [], 'Merge', 'OBJECTS', 5986, 'Anonymous', on).
mooCache(=>(instance(A, 'Nation'), exists(B, and(instance(B, 'Government'), subOrganizations(B, A)))), and(and(entails(not(instance(B, 'Government')), not(instance(A, 'Nation'))), entails(and(instance(A, 'Nation'), '$existential'(B, '?GOV', and(instance('?GOV', 'Government'), subOrganizations('?GOV', A)))), instance(B, 'Government'))), and(entails(not(subOrganizations(B, A)), not(instance(A, 'Nation'))), entails(and(instance(A, 'Nation'), '$existential'(B, '?GOV', and(instance('?GOV', 'Government'), subOrganizations('?GOV', A)))), subOrganizations(B, A)))), [domainV(B, ['$instanceof':'Government', subOrganizations:1]), domainV(A, ['$instanceof':'Nation', subOrganizations:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?GOV', and(instance('?GOV', 'Government'), subOrganizations('?GOV', A))))], ['NATION'=A, 'GOV'=B], 'Merge', 'OBJECTS', 5988, 'Anonymous', on).
mooCache(subclass('GeographicArea', 'Region'), subclass('GeographicArea', 'Region'), [], [], 'Merge', 'OBJECTS', 5990, 'Anonymous', on).
mooCache(documentation('GeographicArea', string('"A geographic location, generally having   definite boundaries.  Note that this differs from its immediate superclass   Region in that a GeographicArea is a Region of land of significant   size."')), documentation('GeographicArea', string('"A geographic location, generally having   definite boundaries.  Note that this differs from its immediate superclass   Region in that a GeographicArea is a Region of land of significant   size."')), [], [], 'Merge', 'OBJECTS', 5992, 'Anonymous', on).
mooCache(subclass('TimeZone', 'GeographicArea'), subclass('TimeZone', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 5994, 'Anonymous', on).
mooCache(documentation('TimeZone', string('"A GeographicArea in which time measures are   uniform, i.e. all time devices are synchronized to the same temporal   coordinates."')), documentation('TimeZone', string('"A GeographicArea in which time measures are   uniform, i.e. all time devices are synchronized to the same temporal   coordinates."')), [], [], 'Merge', 'OBJECTS', 5996, 'Anonymous', on).
mooCache(instance('CoordinatedUniversalTimeZone', 'TimeZone'), instance('CoordinatedUniversalTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 5998, 'Anonymous', on).
mooCache(documentation('CoordinatedUniversalTimeZone', string('"A TimeZone which functions   as the standard time zone.  It is also known as Zulu time (in the military),   Greenwich Mean Time, and the Western European time zone.  Note that whenever   a TimeZone is not specified, the TimePosition is understood to be with   respect to the CoordinatedUniversalTimeZone."')), documentation('CoordinatedUniversalTimeZone', string('"A TimeZone which functions   as the standard time zone.  It is also known as Zulu time (in the military),   Greenwich Mean Time, and the Western European time zone.  Note that whenever   a TimeZone is not specified, the TimePosition is understood to be with   respect to the CoordinatedUniversalTimeZone."')), [], [], 'Merge', 'OBJECTS', 6000, 'Anonymous', on).
mooCache(instance('PacificTimeZone', 'TimeZone'), instance('PacificTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6002, 'Anonymous', on).
mooCache(documentation('PacificTimeZone', string('"A TimeZone that covers much of the   western part of the United States."')), documentation('PacificTimeZone', string('"A TimeZone that covers much of the   western part of the United States."')), [], [], 'Merge', 'OBJECTS', 6004, 'Anonymous', on).
mooCache(=>(equal('RelativeTimeFn'(A, 'PacificTimeZone'), B), equal(B, 'AdditionFn'(A, 8))), and(entails(not(holds('AdditionFn', A, 8, B)), not(holds('RelativeTimeFn', A, 'PacificTimeZone', B))), entails(holds('RelativeTimeFn', A, 'PacificTimeZone', B), holds('AdditionFn', A, 8, B))), [domainV(B, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(A, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(C, []), forall(A), forall(B)], ['TIME1'=A, 'TIME2'=B], 'Merge', 'OBJECTS', 6006, 'Anonymous', on).
mooCache(instance('MountainTimeZone', 'TimeZone'), instance('MountainTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6008, 'Anonymous', on).
mooCache(documentation('MountainTimeZone', string('"A TimeZone that covers much of the   Rocky Mountain region of the United States."')), documentation('MountainTimeZone', string('"A TimeZone that covers much of the   Rocky Mountain region of the United States."')), [], [], 'Merge', 'OBJECTS', 6010, 'Anonymous', on).
mooCache(=>(equal('RelativeTimeFn'(A, 'MountainTimeZone'), B), equal(B, 'AdditionFn'(A, 7))), and(entails(not(holds('AdditionFn', A, 7, B)), not(holds('RelativeTimeFn', A, 'MountainTimeZone', B))), entails(holds('RelativeTimeFn', A, 'MountainTimeZone', B), holds('AdditionFn', A, 7, B))), [domainV(B, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(A, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(C, []), forall(A), forall(B)], ['TIME1'=A, 'TIME2'=B], 'Merge', 'OBJECTS', 6012, 'Anonymous', on).
mooCache(instance('CentralTimeZone', 'TimeZone'), instance('CentralTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6014, 'Anonymous', on).
mooCache(documentation('CentralTimeZone', string('"A TimeZone that covers much of the   midwestern United States."')), documentation('CentralTimeZone', string('"A TimeZone that covers much of the   midwestern United States."')), [], [], 'Merge', 'OBJECTS', 6016, 'Anonymous', on).
mooCache(=>(equal('RelativeTimeFn'(A, 'CentralTimeZone'), B), equal(B, 'AdditionFn'(A, 6))), and(entails(not(holds('AdditionFn', A, 6, B)), not(holds('RelativeTimeFn', A, 'CentralTimeZone', B))), entails(holds('RelativeTimeFn', A, 'CentralTimeZone', B), holds('AdditionFn', A, 6, B))), [domainV(B, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(A, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(C, []), forall(A), forall(B)], ['TIME1'=A, 'TIME2'=B], 'Merge', 'OBJECTS', 6018, 'Anonymous', on).
mooCache(instance('EasternTimeZone', 'TimeZone'), instance('EasternTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6020, 'Anonymous', on).
mooCache(documentation('EasternTimeZone', string('"A TimeZone that covers much of the   eastern United States."')), documentation('EasternTimeZone', string('"A TimeZone that covers much of the   eastern United States."')), [], [], 'Merge', 'OBJECTS', 6022, 'Anonymous', on).
mooCache(=>(equal('RelativeTimeFn'(A, 'EasternTimeZone'), B), equal(B, 'AdditionFn'(A, 5))), and(entails(not(holds('AdditionFn', A, 5, B)), not(holds('RelativeTimeFn', A, 'EasternTimeZone', B))), entails(holds('RelativeTimeFn', A, 'EasternTimeZone', B), holds('AdditionFn', A, 5, B))), [domainV(B, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(A, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(C, []), forall(A), forall(B)], ['TIME1'=A, 'TIME2'=B], 'Merge', 'OBJECTS', 6024, 'Anonymous', on).
mooCache(instance('RelativeTimeFn', 'BinaryFunction'), instance('RelativeTimeFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6026, 'Anonymous', on).
mooCache(instance('RelativeTimeFn', 'TemporalRelation'), instance('RelativeTimeFn', 'TemporalRelation'), [], [], 'Merge', 'OBJECTS', 6028, 'Anonymous', on).
mooCache(domain('RelativeTimeFn', 1, 'TimePosition'), domain('RelativeTimeFn', 1, 'TimePosition'), [], [], 'Merge', 'OBJECTS', 6030, 'Anonymous', on).
mooCache(domain('RelativeTimeFn', 2, 'TimeZone'), domain('RelativeTimeFn', 2, 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6032, 'Anonymous', on).
mooCache(range('RelativeTimeFn', 'TimePosition'), range('RelativeTimeFn', 'TimePosition'), [], [], 'Merge', 'OBJECTS', 6034, 'Anonymous', on).
mooCache(documentation('RelativeTimeFn', string('"A means of converting TimePositions   between different TimeZones.  (RelativeTimeFn ?TIME ?ZONE)   denotes the TimePosition in CoordinatedUniversalTime that is   contemporaneous with the TimePosition ?TIME in TimeZone ?ZONE.    For example, (RelativeTimeFn (MeasureFn 14 Hour) EasternTimeZone)   would return the value (MeasureFn 19 Hour)."')), documentation('RelativeTimeFn', string('"A means of converting TimePositions   between different TimeZones.  (RelativeTimeFn ?TIME ?ZONE)   denotes the TimePosition in CoordinatedUniversalTime that is   contemporaneous with the TimePosition ?TIME in TimeZone ?ZONE.    For example, (RelativeTimeFn (MeasureFn 14 Hour) EasternTimeZone)   would return the value (MeasureFn 19 Hour)."')), [], [], 'Merge', 'OBJECTS', 6036, 'Anonymous', on).
mooCache(subclass('Land', 'GeographicArea'), subclass('Land', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 6038, 'Anonymous', on).
mooCache(documentation('Land', string('"A Land is the GeographicArea associated with   a nation.  For example, the Land of Australia is the Region making   up the continent of Oceania."')), documentation('Land', string('"A Land is the GeographicArea associated with   a nation.  For example, the Land of Australia is the Region making   up the continent of Oceania."')), [], [], 'Merge', 'OBJECTS', 6040, 'Anonymous', on).
mooCache(subclass('Address', 'GeographicArea'), subclass('Address', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 6042, 'Anonymous', on).
mooCache(documentation('Address', string('"A GeographicArea with definite boundaries   and of relatively small size.  This concept represents the state of   \'being at an address\'."')), documentation('Address', string('"A GeographicArea with definite boundaries   and of relatively small size.  This concept represents the state of   \'being at an address\'."')), [], [], 'Merge', 'OBJECTS', 6044, 'Anonymous', on).
mooCache(subclass('City', 'GeographicArea'), subclass('City', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 6046, 'Anonymous', on).
mooCache(documentation('City', string('"A GeographicArea of relatively small size, inhabited   by people, and exhibiting a distinctive sort of political structure."')), documentation('City', string('"A GeographicArea of relatively small size, inhabited   by people, and exhibiting a distinctive sort of political structure."')), [], [], 'Merge', 'OBJECTS', 6048, 'Anonymous', on).
mooCache(subclass('Water', 'CompoundSubstance'), subclass('Water', 'CompoundSubstance'), [], [], 'Merge', 'OBJECTS', 6050, 'Anonymous', on).
mooCache(documentation('Water', string('"The Class of samples of the compound H20.  Note   that this Class covers both pure and impure Water."')), documentation('Water', string('"The Class of samples of the compound H20.  Note   that this Class covers both pure and impure Water."')), [], [], 'Merge', 'OBJECTS', 6052, 'Anonymous', on).
mooCache(subclass('Mineral', 'Mixture'), subclass('Mineral', 'Mixture'), [], [], 'Merge', 'OBJECTS', 6054, 'Anonymous', on).
mooCache(documentation('Mineral', string('" Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."')), documentation('Mineral', string('" Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."')), [], [], 'Merge', 'OBJECTS', 6056, 'Anonymous', on).
mooCache(instance(developmentalForm, 'BinaryPredicate'), instance(developmentalForm, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6058, 'Anonymous', on).
mooCache(instance(developmentalForm, 'AsymmetricRelation'), instance(developmentalForm, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6060, 'Anonymous', on).
mooCache(instance(developmentalForm, 'TransitiveRelation'), instance(developmentalForm, 'TransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6062, 'Anonymous', on).
mooCache(domain(developmentalForm, 1, 'UnionFn'('Organism', 'AnatomicalStructure')), domain(developmentalForm, 1, 'UnionFn'('Organism', 'AnatomicalStructure')), [], [], 'Merge', 'OBJECTS', 6064, 'Anonymous', on).
mooCache(domain(developmentalForm, 2, 'DevelopmentalProperty'), domain(developmentalForm, 2, 'DevelopmentalProperty'), [], [], 'Merge', 'OBJECTS', 6066, 'Anonymous', on).
mooCache(documentation(developmentalForm, string('"(developmentalForm ?OBJECT ?FORM)   means that ?FORM is an earlier stage in the individual maturation of   ?OBJECT.  For example, tadpole and caterpillar are developmentalForms   of frogs and butterflies, respectively."')), documentation(developmentalForm, string('"(developmentalForm ?OBJECT ?FORM)   means that ?FORM is an earlier stage in the individual maturation of   ?OBJECT.  For example, tadpole and caterpillar are developmentalForms   of frogs and butterflies, respectively."')), [], [], 'Merge', 'OBJECTS', 6068, 'Anonymous', on).
mooCache(subclass('Organism', 'CorpuscularObject'), subclass('Organism', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6070, 'Anonymous', on).
mooCache(subclass('Organism', 'Agent'), subclass('Organism', 'Agent'), [], [], 'Merge', 'OBJECTS', 6072, 'Anonymous', on).
mooCache(documentation('Organism', string('"Generally, a living individual, including all   Plants and Animals."')), documentation('Organism', string('"Generally, a living individual, including all   Plants and Animals."')), [], [], 'Merge', 'OBJECTS', 6074, 'Anonymous', on).
mooCache(=>(instance(A, 'Organism'), exists(B, exists(C, and(birthTime(A, C), deathTime(A, B))))), and(and(entails(not(birthTime(A, C)), not(instance(A, 'Organism'))), entails(and(instance(A, 'Organism'), '$existential'(C, '?TIME1', and(birthTime(A, '?TIME1'), deathTime(A, B)))), birthTime(A, C))), and(entails(not(deathTime(A, B)), not(instance(A, 'Organism'))), entails(and(and(instance(A, 'Organism'), '$existential'(B, '?TIME2', exists(C, and(birthTime(A, C), deathTime(A, '?TIME2'))))), '$existential'(C, '?TIME1', and(birthTime(A, '?TIME1'), deathTime(A, B)))), deathTime(A, B)))), [domainV(C, [birthTime:2]), domainV(B, [deathTime:2]), domainV(A, ['$instanceof':'Organism', birthTime:1, deathTime:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?TIME2', exists(C, and(birthTime(A, C), deathTime(A, '?TIME2'))))), replaceConsVar(C, '$existential'('?TIME1', and(birthTime(A, '?TIME1'), deathTime(A, B))))], ['ORGANISM'=A, 'TIME1'=C, 'TIME2'=B], 'Merge', 'OBJECTS', 6076, 'Anonymous', on).
mooCache(instance(inhabits, 'BinaryPredicate'), instance(inhabits, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6078, 'Anonymous', on).
mooCache(instance(inhabits, 'AsymmetricRelation'), instance(inhabits, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6080, 'Anonymous', on).
mooCache(domain(inhabits, 1, 'Organism'), domain(inhabits, 1, 'Organism'), [], [], 'Merge', 'OBJECTS', 6082, 'Anonymous', on).
mooCache(domain(inhabits, 2, 'Object'), domain(inhabits, 2, 'Object'), [], [], 'Merge', 'OBJECTS', 6084, 'Anonymous', on).
mooCache(documentation(inhabits, string('"A very basic notion of living within something   else.  (inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence,   nest, home, etc. of ?ORGANISM."')), documentation(inhabits, string('"A very basic notion of living within something   else.  (inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence,   nest, home, etc. of ?ORGANISM."')), [], [], 'Merge', 'OBJECTS', 6086, 'Anonymous', on).
mooCache(instance(parent, 'BinaryPredicate'), instance(parent, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6088, 'Anonymous', on).
mooCache(subrelation(parent, familyRelation), subrelation(parent, familyRelation), [], [], 'Merge', 'OBJECTS', 6090, 'Anonymous', on).
mooCache(instance(parent, 'AsymmetricRelation'), instance(parent, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6092, 'Anonymous', on).
mooCache(instance(parent, 'IntransitiveRelation'), instance(parent, 'IntransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6094, 'Anonymous', on).
mooCache(domain(parent, 1, 'Organism'), domain(parent, 1, 'Organism'), [], [], 'Merge', 'OBJECTS', 6096, 'Anonymous', on).
mooCache(domain(parent, 2, 'Organism'), domain(parent, 2, 'Organism'), [], [], 'Merge', 'OBJECTS', 6098, 'Anonymous', on).
mooCache(documentation(parent, string('"The general relationship of parenthood.    (parent ?PARENT ?CHILD) means that ?PARENT is a biological parent   of ?CHILD."')), documentation(parent, string('"The general relationship of parenthood.    (parent ?PARENT ?CHILD) means that ?PARENT is a biological parent   of ?CHILD."')), [], [], 'Merge', 'OBJECTS', 6100, 'Anonymous', on).
mooCache(=>(parent(A, B), before('BeginFn'('WhenFn'(A)), 'BeginFn'('WhenFn'(B)))), and(entails(not(before('BeginFn'('WhenFn'(A)), 'BeginFn'('WhenFn'(B)))), not(parent(A, B))), entails(parent(A, B), before('BeginFn'('WhenFn'(A)), 'BeginFn'('WhenFn'(B))))), [domainV(B, ['WhenFn':1, parent:2]), domainV(A, ['WhenFn':1, parent:1]), domainV(C, []), forall(A), forall(B)], ['PARENT'=A, 'CHILD'=B], 'Merge', 'OBJECTS', 6102, 'Anonymous', on).
mooCache(=>(and(parent(A, B), and(subclass(C, 'Organism'), instance(A, C))), instance(B, C)), and(entails(and(parent(A, B), and(subclass(C, 'Organism'), instance(A, C))), instance(B, C)), and(entails(and(not(instance(B, C)), and(subclass(C, 'Organism'), instance(A, C))), not(parent(A, B))), and(entails(and(not(instance(B, C)), and(parent(A, B), instance(A, C))), not(subclass(C, 'Organism'))), entails(and(not(instance(B, C)), and(parent(A, B), subclass(C, 'Organism'))), not(instance(A, C)))))), [domainV(C, [instance:2, subclass:1]), domainV(B, [parent:2]), domainV(A, [parent:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PARENT'=A, 'CHILD'=B, 'CLASS'=C], 'Merge', 'OBJECTS', 6104, 'Anonymous', on).
mooCache(=>(parent(A, B), or(mother(A, B), father(A, B))), and(entails(and(not(mother(A, B)), not(father(A, B))), not(parent(A, B))), and(entails(and(parent(A, B), not(father(A, B))), mother(A, B)), entails(and(parent(A, B), not(mother(A, B))), father(A, B)))), [domainV(B, [father:2, mother:2, parent:2]), domainV(A, [father:1, mother:1, parent:1]), domainV(C, []), forall(A), forall(B)], ['PARENT'=A, 'CHILD'=B], 'Merge', 'OBJECTS', 6106, 'Anonymous', on).
mooCache(subrelation(mother, parent), subrelation(mother, parent), [], [], 'Merge', 'OBJECTS', 6108, 'Anonymous', on).
mooCache(domain(mother, 1, 'Animal'), domain(mother, 1, 'Animal'), [], [], 'Merge', 'OBJECTS', 6110, 'Anonymous', on).
mooCache(singleValued(mother, 1), singleValued(mother, 1), [], [], 'Merge', 'OBJECTS', 6112, 'Anonymous', on).
mooCache(documentation(mother, string('"The general relationship of motherhood.    (mother ?MOTHER ?CHILD) means that ?MOTHER is the biological mother   of ?CHILD."')), documentation(mother, string('"The general relationship of motherhood.    (mother ?MOTHER ?CHILD) means that ?MOTHER is the biological mother   of ?CHILD."')), [], [], 'Merge', 'OBJECTS', 6114, 'Anonymous', on).
mooCache(=>(mother(A, B), attribute(A, 'Female')), and(entails(not(attribute(A, 'Female')), not(mother(A, B))), entails(mother(A, B), attribute(A, 'Female'))), [domainV(B, [mother:2]), domainV(A, [attribute:1, mother:1]), domainV(C, []), forall(A), forall(B)], ['MOTHER'=A, 'CHILD'=B], 'Merge', 'OBJECTS', 6116, 'Anonymous', on).
mooCache(subrelation(father, parent), subrelation(father, parent), [], [], 'Merge', 'OBJECTS', 6118, 'Anonymous', on).
mooCache(domain(father, 1, 'Animal'), domain(father, 1, 'Animal'), [], [], 'Merge', 'OBJECTS', 6120, 'Anonymous', on).
mooCache(singleValued(father, 1), singleValued(father, 1), [], [], 'Merge', 'OBJECTS', 6122, 'Anonymous', on).
mooCache(documentation(father, string('"The general relationship of fatherhood.    (father ?FATHER ?CHILD) means that ?FATHER is the biological father  of ?CHILD."')), documentation(father, string('"The general relationship of fatherhood.    (father ?FATHER ?CHILD) means that ?FATHER is the biological father  of ?CHILD."')), [], [], 'Merge', 'OBJECTS', 6124, 'Anonymous', on).
mooCache(=>(father(A, B), attribute(A, 'Male')), and(entails(not(attribute(A, 'Male')), not(father(A, B))), entails(father(A, B), attribute(A, 'Male'))), [domainV(B, [father:2]), domainV(A, [attribute:1, father:1]), domainV(C, []), forall(A), forall(B)], ['FATHER'=A, 'CHILD'=B], 'Merge', 'OBJECTS', 6126, 'Anonymous', on).
mooCache(instance(siblings, 'BinaryPredicate'), instance(siblings, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6128, 'Anonymous', on).
mooCache(subrelation(siblings, familyRelation), subrelation(siblings, familyRelation), [], [], 'Merge', 'OBJECTS', 6130, 'Anonymous', on).
mooCache(instance(siblings, 'SymmetricRelation'), instance(siblings, 'SymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6132, 'Anonymous', on).
mooCache(instance(siblings, 'TransitiveRelation'), instance(siblings, 'TransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6134, 'Anonymous', on).
mooCache(instance(siblings, 'IrreflexiveRelation'), instance(siblings, 'IrreflexiveRelation'), [], [], 'Merge', 'OBJECTS', 6136, 'Anonymous', on).
mooCache(domain(siblings, 1, 'Animal'), domain(siblings, 1, 'Animal'), [], [], 'Merge', 'OBJECTS', 6138, 'Anonymous', on).
mooCache(domain(siblings, 2, 'Animal'), domain(siblings, 2, 'Animal'), [], [], 'Merge', 'OBJECTS', 6140, 'Anonymous', on).
mooCache(documentation(siblings, string('"The relationship between two Animals that have the   same parents."')), documentation(siblings, string('"The relationship between two Animals that have the   same parents."')), [], [], 'Merge', 'OBJECTS', 6142, 'Anonymous', on).
mooCache(<=>(siblings(A, B), exists(C, exists(D, and(father(D, A), and(father(D, B), and(mother(C, A), mother(C, B))))))), and(and(entails(and(siblings(A, B), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), father(D, A)), and(entails(and(siblings(A, B), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), father(D, B)), and(entails(and(and(siblings(A, B), '$existential'(C, '?MOTHER', exists(D, and(father(D, A), and(father(D, B), and(mother('?MOTHER', A), mother('?MOTHER', B))))))), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), mother(C, A)), and(entails(and(and(siblings(A, B), '$existential'(C, '?MOTHER', exists(D, and(father(D, A), and(father(D, B), and(mother('?MOTHER', A), mother('?MOTHER', B))))))), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), mother(C, B)), entails(or(not(father(D, A)), or(not(father(D, B)), or(not(mother(C, A)), not(mother(C, B))))), not(siblings(A, B))))))), and(entails(and(and(father(D, A), and(father(D, B), and(mother(C, A), mother(C, B)))), '$existential'(D, '?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), siblings(A, B)), and(entails(and(not(siblings(A, B)), and(father(D, B), and(mother(C, A), mother(C, B)))), not(father(D, A))), and(entails(and(not(siblings(A, B)), and(father(D, A), and(mother(C, A), mother(C, B)))), not(father(D, B))), and(entails(and(not(siblings(A, B)), and(father(D, A), and(father(D, B), mother(C, B)))), not(mother(C, A))), entails(and(not(siblings(A, B)), and(father(D, A), and(father(D, B), mother(C, A)))), not(mother(C, B)))))))), [domainV(D, [father:1]), domainV(C, [mother:1]), domainV(B, [father:2, mother:2, siblings:2]), domainV(A, [father:2, mother:2, siblings:1]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?MOTHER', exists(D, and(father(D, A), and(father(D, B), and(mother('?MOTHER', A), mother('?MOTHER', B))))))), replaceConsVar(D, '$existential'('?FATHER', and(father('?FATHER', A), and(father('?FATHER', B), and(mother(C, A), mother(C, B)))))), forall(C), forall(D)], ['ANIMAL1'=A, 'ANIMAL2'=B, 'FATHER'=D, 'MOTHER'=C], 'Merge', 'OBJECTS', 6144, 'Anonymous', on).
mooCache(subclass('Plant', 'Organism'), subclass('Plant', 'Organism'), [], [], 'Merge', 'OBJECTS', 6152, 'Anonymous', on).
mooCache(disjoint('Plant', 'Animal'), disjoint('Plant', 'Animal'), [], [], 'Merge', 'OBJECTS', 6154, 'Anonymous', on).
mooCache(documentation('Plant', string('"An Organism having cellulose cell walls, growing   by synthesis of Substances, generally distinguished by the presence of   chlorophyll, and lacking the power of locomotion."')), documentation('Plant', string('"An Organism having cellulose cell walls, growing   by synthesis of Substances, generally distinguished by the presence of   chlorophyll, and lacking the power of locomotion."')), [], [], 'Merge', 'OBJECTS', 6156, 'Anonymous', on).
mooCache(subclass('Animal', 'Organism'), subclass('Animal', 'Organism'), [], [], 'Merge', 'OBJECTS', 6158, 'Anonymous', on).
mooCache(documentation('Animal', string('"An Organism with eukaryotic Cells, and lacking   stiff cell walls, plastids, and photosynthetic pigments."')), documentation('Animal', string('"An Organism with eukaryotic Cells, and lacking   stiff cell walls, plastids, and photosynthetic pigments."')), [], [], 'Merge', 'OBJECTS', 6160, 'Anonymous', on).
mooCache(subclass('Microorganism', 'Organism'), subclass('Microorganism', 'Organism'), [], [], 'Merge', 'OBJECTS', 6162, 'Anonymous', on).
mooCache(documentation('Microorganism', string('"An Organism that can be seen only with   the aid of a microscope."')), documentation('Microorganism', string('"An Organism that can be seen only with   the aid of a microscope."')), [], [], 'Merge', 'OBJECTS', 6164, 'Anonymous', on).
mooCache(subclass('Bacterium', 'Microorganism'), subclass('Bacterium', 'Microorganism'), [], [], 'Merge', 'OBJECTS', 6166, 'Anonymous', on).
mooCache(documentation('Bacterium', string('"A small, typically one-celled, prokaryotic   Microorganism."')), documentation('Bacterium', string('"A small, typically one-celled, prokaryotic   Microorganism."')), [], [], 'Merge', 'OBJECTS', 6168, 'Anonymous', on).
mooCache(=>(instance(A, 'Bacterium'), exists(B, and(component(B, A), and(instance(B, 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal(B, C))))))), and(and(entails(not(component(B, A)), not(instance(A, 'Bacterium'))), entails(and(instance(A, 'Bacterium'), '$existential'(B, '?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), component(B, A))), and(and(entails(not(instance(B, 'Cell')), not(instance(A, 'Bacterium'))), entails(and(instance(A, 'Bacterium'), '$existential'(B, '?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), instance(B, 'Cell'))), and(entails(and(not(equal(B, C)), and(component(C, A), instance(C, 'Cell'))), not(instance(A, 'Bacterium'))), and(entails(and(and(instance(A, 'Bacterium'), and(component(C, A), instance(C, 'Cell'))), '$existential'(B, '?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), equal(B, C)), and(entails(and(instance(A, 'Bacterium'), and(not(equal(B, C)), instance(C, 'Cell'))), not(component(C, A))), entails(and(instance(A, 'Bacterium'), and(not(equal(B, C)), component(C, A))), not(instance(C, 'Cell')))))))), [domainV(C, ['$instanceof':'Cell', component:1]), domainV(B, ['$instanceof':'Cell', component:1]), domainV(A, ['$instanceof':'Bacterium', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?CELL1', and(component('?CELL1', A), and(instance('?CELL1', 'Cell'), forall(C, =>(and(component(C, A), instance(C, 'Cell')), equal('?CELL1', C))))))), forall(C)], ['BACTERIUM'=A, 'CELL1'=B, 'CELL2'=C], 'Merge', 'OBJECTS', 6170, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Bacterium'), inhabits(A, B)), instance(B, 'Organism')), and(entails(and(instance(A, 'Bacterium'), inhabits(A, B)), instance(B, 'Organism')), and(entails(and(not(instance(B, 'Organism')), inhabits(A, B)), not(instance(A, 'Bacterium'))), entails(and(not(instance(B, 'Organism')), instance(A, 'Bacterium')), not(inhabits(A, B))))), [domainV(B, ['$instanceof':'Organism', inhabits:2]), domainV(A, ['$instanceof':'Bacterium', inhabits:1]), domainV(C, []), forall(A), forall(B)], ['BACTERIUM'=A, 'OBJ'=B], 'Merge', 'OBJECTS', 6172, 'Anonymous', on).
mooCache(subclass('Virus', 'Microorganism'), subclass('Virus', 'Microorganism'), [], [], 'Merge', 'OBJECTS', 6174, 'Anonymous', on).
mooCache(documentation('Virus', string('"An Organism consisting of a core of a single   nucleic acid enclosed in a protective coat of protein. A virus may replicate   only inside a host living cell. A virus exhibits some but not all of the   usual characteristics of living things."')), documentation('Virus', string('"An Organism consisting of a core of a single   nucleic acid enclosed in a protective coat of protein. A virus may replicate   only inside a host living cell. A virus exhibits some but not all of the   usual characteristics of living things."')), [], [], 'Merge', 'OBJECTS', 6176, 'Anonymous', on).
mooCache(=>(instance(A, 'Virus'), exists(B, and(component(B, A), and(instance(B, 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal(B, C))))))), and(and(entails(not(component(B, A)), not(instance(A, 'Virus'))), entails(and(instance(A, 'Virus'), '$existential'(B, '?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), component(B, A))), and(and(entails(not(instance(B, 'Molecule')), not(instance(A, 'Virus'))), entails(and(instance(A, 'Virus'), '$existential'(B, '?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), instance(B, 'Molecule'))), and(entails(and(not(equal(B, C)), and(component(C, A), instance(C, 'Molecule'))), not(instance(A, 'Virus'))), and(entails(and(and(instance(A, 'Virus'), and(component(C, A), instance(C, 'Molecule'))), '$existential'(B, '?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), equal(B, C)), and(entails(and(instance(A, 'Virus'), and(not(equal(B, C)), instance(C, 'Molecule'))), not(component(C, A))), entails(and(instance(A, 'Virus'), and(not(equal(B, C)), component(C, A))), not(instance(C, 'Molecule')))))))), [domainV(C, ['$instanceof':'Molecule', component:1]), domainV(B, ['$instanceof':'Molecule', component:1]), domainV(A, ['$instanceof':'Virus', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?MOL1', and(component('?MOL1', A), and(instance('?MOL1', 'Molecule'), forall(C, =>(and(component(C, A), instance(C, 'Molecule')), equal('?MOL1', C))))))), forall(C)], ['VIRUS'=A, 'MOL1'=B, 'MOL2'=C], 'Merge', 'OBJECTS', 6178, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Virus'), inhabits(A, B)), instance(B, 'Organism')), and(entails(and(instance(A, 'Virus'), inhabits(A, B)), instance(B, 'Organism')), and(entails(and(not(instance(B, 'Organism')), inhabits(A, B)), not(instance(A, 'Virus'))), entails(and(not(instance(B, 'Organism')), instance(A, 'Virus')), not(inhabits(A, B))))), [domainV(B, ['$instanceof':'Organism', inhabits:2]), domainV(A, ['$instanceof':'Virus', inhabits:1]), domainV(C, []), forall(A), forall(B)], ['VIRUS'=A, 'OBJ'=B], 'Merge', 'OBJECTS', 6180, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Virus'), and(instance(B, 'Replication'), agent(B, A))), exists(C, and(located(B, C), instance(C, 'Cell')))), and(and(entails(and(and(instance(A, 'Virus'), and(instance(B, 'Replication'), agent(B, A))), '$existential'(C, '?CELL', and(located(B, '?CELL'), instance('?CELL', 'Cell')))), located(B, C)), and(entails(and(not(located(B, C)), and(instance(B, 'Replication'), agent(B, A))), not(instance(A, 'Virus'))), and(entails(and(not(located(B, C)), and(instance(A, 'Virus'), agent(B, A))), not(instance(B, 'Replication'))), entails(and(not(located(B, C)), and(instance(A, 'Virus'), instance(B, 'Replication'))), not(agent(B, A)))))), and(entails(and(and(instance(A, 'Virus'), and(instance(B, 'Replication'), agent(B, A))), '$existential'(C, '?CELL', and(located(B, '?CELL'), instance('?CELL', 'Cell')))), instance(C, 'Cell')), and(entails(and(not(instance(C, 'Cell')), and(instance(B, 'Replication'), agent(B, A))), not(instance(A, 'Virus'))), and(entails(and(not(instance(C, 'Cell')), and(instance(A, 'Virus'), agent(B, A))), not(instance(B, 'Replication'))), entails(and(not(instance(C, 'Cell')), and(instance(A, 'Virus'), instance(B, 'Replication'))), not(agent(B, A))))))), [domainV(C, ['$instanceof':'Cell', located:2]), domainV(B, ['$instanceof':'Replication', agent:1, located:1]), domainV(A, ['$instanceof':'Virus', agent:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?CELL', and(located(B, '?CELL'), instance('?CELL', 'Cell'))))], ['VIRUS'=A, 'PROC'=B, 'CELL'=C], 'Merge', 'OBJECTS', 6182, 'Anonymous', on).
mooCache(subclass('Vertebrate', 'Animal'), subclass('Vertebrate', 'Animal'), [], [], 'Merge', 'OBJECTS', 6184, 'Anonymous', on).
mooCache(documentation('Vertebrate', string('"An Animal which has a spinal column."')), documentation('Vertebrate', string('"An Animal which has a spinal column."')), [], [], 'Merge', 'OBJECTS', 6186, 'Anonymous', on).
mooCache(subclass('Invertebrate', 'Animal'), subclass('Invertebrate', 'Animal'), [], [], 'Merge', 'OBJECTS', 6188, 'Anonymous', on).
mooCache(disjoint('Invertebrate', 'Vertebrate'), disjoint('Invertebrate', 'Vertebrate'), [], [], 'Merge', 'OBJECTS', 6190, 'Anonymous', on).
mooCache(disjointDecomposition('Invertebrate', 'Worm', 'Mollusk', 'Arthropod'), disjointDecomposition('Invertebrate', 'Worm', 'Mollusk', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6192, 'Anonymous', on).
mooCache(documentation('Invertebrate', string('"An Animal which has no spinal column."')), documentation('Invertebrate', string('"An Animal which has no spinal column."')), [], [], 'Merge', 'OBJECTS', 6194, 'Anonymous', on).
mooCache(subclass('Worm', 'Invertebrate'), subclass('Worm', 'Invertebrate'), [], [], 'Merge', 'OBJECTS', 6196, 'Anonymous', on).
mooCache(documentation('Worm', string('"Long, narrow, soft-bodied Invertebrates."')), documentation('Worm', string('"Long, narrow, soft-bodied Invertebrates."')), [], [], 'Merge', 'OBJECTS', 6198, 'Anonymous', on).
mooCache(subclass('Mollusk', 'Invertebrate'), subclass('Mollusk', 'Invertebrate'), [], [], 'Merge', 'OBJECTS', 6200, 'Anonymous', on).
mooCache(documentation('Mollusk', string('"Soft-bodied Invertebrate that is usually   contained in a shell.  Includes oysters, clams, mussels, snails, slugs,   octopi, and squid."')), documentation('Mollusk', string('"Soft-bodied Invertebrate that is usually   contained in a shell.  Includes oysters, clams, mussels, snails, slugs,   octopi, and squid."')), [], [], 'Merge', 'OBJECTS', 6202, 'Anonymous', on).
mooCache(subclass('Arthropod', 'Invertebrate'), subclass('Arthropod', 'Invertebrate'), [], [], 'Merge', 'OBJECTS', 6204, 'Anonymous', on).
mooCache(disjointDecomposition('Arthropod', 'Arachnid', 'Myriapod', 'Insect', 'Crustacean'), disjointDecomposition('Arthropod', 'Arachnid', 'Myriapod', 'Insect', 'Crustacean'), [], [], 'Merge', 'OBJECTS', 6206, 'Anonymous', on).
mooCache(documentation('Arthropod', string('"A Class of Invertebrate that includes   Arachnids and Insects."')), documentation('Arthropod', string('"A Class of Invertebrate that includes   Arachnids and Insects."')), [], [], 'Merge', 'OBJECTS', 6208, 'Anonymous', on).
mooCache(subclass('Arachnid', 'Arthropod'), subclass('Arachnid', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6210, 'Anonymous', on).
mooCache(documentation('Arachnid', string('"A Class of Arthropods that includes   ticks and spiders."')), documentation('Arachnid', string('"A Class of Arthropods that includes   ticks and spiders."')), [], [], 'Merge', 'OBJECTS', 6212, 'Anonymous', on).
mooCache(subclass('Myriapod', 'Arthropod'), subclass('Myriapod', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6214, 'Anonymous', on).
mooCache(documentation('Myriapod', string('"A Class of Arthropods that includes   centipedes and millipedes."')), documentation('Myriapod', string('"A Class of Arthropods that includes   centipedes and millipedes."')), [], [], 'Merge', 'OBJECTS', 6216, 'Anonymous', on).
mooCache(subclass('Insect', 'Arthropod'), subclass('Insect', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6218, 'Anonymous', on).
mooCache(documentation('Insect', string('"A Class of small Arthropods that are   air-breathing and that are distinguished by appearance."')), documentation('Insect', string('"A Class of small Arthropods that are   air-breathing and that are distinguished by appearance."')), [], [], 'Merge', 'OBJECTS', 6220, 'Anonymous', on).
mooCache(subclass('Crustacean', 'Arthropod'), subclass('Crustacean', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6222, 'Anonymous', on).
mooCache(documentation('Crustacean', string('"A Class of Arthropods that mainly dwells   in water and has a segmented body and a chitinous exoskeleton.  Includes   lobsters, crabs, shrimp, and barnacles."')), documentation('Crustacean', string('"A Class of Arthropods that mainly dwells   in water and has a segmented body and a chitinous exoskeleton.  Includes   lobsters, crabs, shrimp, and barnacles."')), [], [], 'Merge', 'OBJECTS', 6224, 'Anonymous', on).
mooCache(subclass('ColdBloodedVertebrate', 'Vertebrate'), subclass('ColdBloodedVertebrate', 'Vertebrate'), [], [], 'Merge', 'OBJECTS', 6226, 'Anonymous', on).
mooCache(disjointDecomposition('ColdBloodedVertebrate', 'Amphibian', 'Fish', 'Reptile'), disjointDecomposition('ColdBloodedVertebrate', 'Amphibian', 'Fish', 'Reptile'), [], [], 'Merge', 'OBJECTS', 6228, 'Anonymous', on).
mooCache(documentation('ColdBloodedVertebrate', string('"Vertebrates whose body temperature   is not internally regulated."')), documentation('ColdBloodedVertebrate', string('"Vertebrates whose body temperature   is not internally regulated."')), [], [], 'Merge', 'OBJECTS', 6230, 'Anonymous', on).
mooCache(subclass('WarmBloodedVertebrate', 'Vertebrate'), subclass('WarmBloodedVertebrate', 'Vertebrate'), [], [], 'Merge', 'OBJECTS', 6232, 'Anonymous', on).
mooCache(disjoint('WarmBloodedVertebrate', 'ColdBloodedVertebrate'), disjoint('WarmBloodedVertebrate', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6234, 'Anonymous', on).
mooCache(documentation('WarmBloodedVertebrate', string('"Vertebrates whose body temperature   is internally regulated."')), documentation('WarmBloodedVertebrate', string('"Vertebrates whose body temperature   is internally regulated."')), [], [], 'Merge', 'OBJECTS', 6236, 'Anonymous', on).
mooCache(subclass('Alga', 'Plant'), subclass('Alga', 'Plant'), [], [], 'Merge', 'OBJECTS', 6238, 'Anonymous', on).
mooCache(documentation('Alga', string('"A chiefly aquatic plant that contains chlorophyll,   but does not form embryos during development and lacks vascular tissue."')), documentation('Alga', string('"A chiefly aquatic plant that contains chlorophyll,   but does not form embryos during development and lacks vascular tissue."')), [], [], 'Merge', 'OBJECTS', 6240, 'Anonymous', on).
mooCache(=>(instance(A, 'Alga'), exists(B, and(inhabits(A, B), instance(B, 'Water')))), and(and(entails(not(inhabits(A, B)), not(instance(A, 'Alga'))), entails(and(instance(A, 'Alga'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), inhabits(A, B))), and(entails(not(instance(B, 'Water')), not(instance(A, 'Alga'))), entails(and(instance(A, 'Alga'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), instance(B, 'Water')))), [domainV(B, ['$instanceof':'Water', inhabits:2]), domainV(A, ['$instanceof':'Alga', inhabits:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water'))))], ['ALGA'=A, 'WATER'=B], 'Merge', 'OBJECTS', 6242, 'Anonymous', on).
mooCache(subclass('Amphibian', 'ColdBloodedVertebrate'), subclass('Amphibian', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6244, 'Anonymous', on).
mooCache(documentation('Amphibian', string('"A cold-blooded, smooth-skinned Vertebrate   which characteristically hatches as an aquatic larva, breathing by   gills.  When mature, the Amphibian breathes with Lungs."')), documentation('Amphibian', string('"A cold-blooded, smooth-skinned Vertebrate   which characteristically hatches as an aquatic larva, breathing by   gills.  When mature, the Amphibian breathes with Lungs."')), [], [], 'Merge', 'OBJECTS', 6246, 'Anonymous', on).
mooCache(subclass('Bird', 'WarmBloodedVertebrate'), subclass('Bird', 'WarmBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6248, 'Anonymous', on).
mooCache(disjoint('Bird', 'Mammal'), disjoint('Bird', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6250, 'Anonymous', on).
mooCache(documentation('Bird', string('"A Vertebrate having a constant body temperature   and characterized by the presence of feathers."')), documentation('Bird', string('"A Vertebrate having a constant body temperature   and characterized by the presence of feathers."')), [], [], 'Merge', 'OBJECTS', 6252, 'Anonymous', on).
mooCache(subclass('Fish', 'ColdBloodedVertebrate'), subclass('Fish', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6254, 'Anonymous', on).
mooCache(documentation('Fish', string('"A cold-blooded aquatic Vertebrate characterized by   fins and breathing by gills. Included here are Fish having either a bony   skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.    Also included are those Fish lacking a jaw, such as a lamprey or   hagfish."')), documentation('Fish', string('"A cold-blooded aquatic Vertebrate characterized by   fins and breathing by gills. Included here are Fish having either a bony   skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.    Also included are those Fish lacking a jaw, such as a lamprey or   hagfish."')), [], [], 'Merge', 'OBJECTS', 6256, 'Anonymous', on).
mooCache(=>(instance(A, 'Fish'), exists(B, and(inhabits(A, B), instance(B, 'Water')))), and(and(entails(not(inhabits(A, B)), not(instance(A, 'Fish'))), entails(and(instance(A, 'Fish'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), inhabits(A, B))), and(entails(not(instance(B, 'Water')), not(instance(A, 'Fish'))), entails(and(instance(A, 'Fish'), '$existential'(B, '?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water')))), instance(B, 'Water')))), [domainV(B, ['$instanceof':'Water', inhabits:2]), domainV(A, ['$instanceof':'Fish', inhabits:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?WATER', and(inhabits(A, '?WATER'), instance('?WATER', 'Water'))))], ['FISH'=A, 'WATER'=B], 'Merge', 'OBJECTS', 6258, 'Anonymous', on).
mooCache(subclass('Fungus', 'Plant'), subclass('Fungus', 'Plant'), [], [], 'Merge', 'OBJECTS', 6260, 'Anonymous', on).
mooCache(documentation('Fungus', string('"A eukaryotic Organism characterized by the   absence of chlorophyll and the presence of rigid cell walls. Included   here are both slime molds and true fungi such as yeasts, molds, mildews,   and mushrooms."')), documentation('Fungus', string('"A eukaryotic Organism characterized by the   absence of chlorophyll and the presence of rigid cell walls. Included   here are both slime molds and true fungi such as yeasts, molds, mildews,   and mushrooms."')), [], [], 'Merge', 'OBJECTS', 6262, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Fungus'), inhabits(A, B)), instance(B, 'Organism')), and(entails(and(instance(A, 'Fungus'), inhabits(A, B)), instance(B, 'Organism')), and(entails(and(not(instance(B, 'Organism')), inhabits(A, B)), not(instance(A, 'Fungus'))), entails(and(not(instance(B, 'Organism')), instance(A, 'Fungus')), not(inhabits(A, B))))), [domainV(B, ['$instanceof':'Organism', inhabits:2]), domainV(A, ['$instanceof':'Fungus', inhabits:1]), domainV(C, []), forall(A), forall(B)], ['FUNGUS'=A, 'OBJ'=B], 'Merge', 'OBJECTS', 6264, 'Anonymous', on).
mooCache(subclass('Mammal', 'WarmBloodedVertebrate'), subclass('Mammal', 'WarmBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6266, 'Anonymous', on).
mooCache(disjointDecomposition('Mammal', 'AquaticMammal', 'HoofedMammal', 'Marsupial', 'Rodent', 'Primate'), disjointDecomposition('Mammal', 'AquaticMammal', 'HoofedMammal', 'Marsupial', 'Rodent', 'Primate'), [], [], 'Merge', 'OBJECTS', 6268, 'Anonymous', on).
mooCache(documentation('Mammal', string('"A Vertebrate having a constant body temperature   and characterized by the presence of hair, mammary glands, and sweat   glands."')), documentation('Mammal', string('"A Vertebrate having a constant body temperature   and characterized by the presence of hair, mammary glands, and sweat   glands."')), [], [], 'Merge', 'OBJECTS', 6270, 'Anonymous', on).
mooCache(subclass('AquaticMammal', 'Mammal'), subclass('AquaticMammal', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6272, 'Anonymous', on).
mooCache(documentation('AquaticMammal', string('"The Class of Mammals that dwell chiefly   in the water.  Includes whales, dolphins, manatees, seals, and walruses."')), documentation('AquaticMammal', string('"The Class of Mammals that dwell chiefly   in the water.  Includes whales, dolphins, manatees, seals, and walruses."')), [], [], 'Merge', 'OBJECTS', 6274, 'Anonymous', on).
mooCache(subclass('HoofedMammal', 'Mammal'), subclass('HoofedMammal', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6276, 'Anonymous', on).
mooCache(documentation('HoofedMammal', string('"The Class of Mammals with hooves.    Includes horses, cows, sheep, pigs, antelope, etc."')), documentation('HoofedMammal', string('"The Class of Mammals with hooves.    Includes horses, cows, sheep, pigs, antelope, etc."')), [], [], 'Merge', 'OBJECTS', 6278, 'Anonymous', on).
mooCache(subclass('Marsupial', 'Mammal'), subclass('Marsupial', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6280, 'Anonymous', on).
mooCache(documentation('Marsupial', string('"The Class of Mammals which have a pouch for   their young."')), documentation('Marsupial', string('"The Class of Mammals which have a pouch for   their young."')), [], [], 'Merge', 'OBJECTS', 6282, 'Anonymous', on).
mooCache(subclass('Carnivore', 'Mammal'), subclass('Carnivore', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6284, 'Anonymous', on).
mooCache(documentation('Carnivore', string('"The Class of flesh-eating Mammals.  Members   of this Class typically have four or five claws on each paw.  Includes   cats, dogs, bears, racoons, and skunks."')), documentation('Carnivore', string('"The Class of flesh-eating Mammals.  Members   of this Class typically have four or five claws on each paw.  Includes   cats, dogs, bears, racoons, and skunks."')), [], [], 'Merge', 'OBJECTS', 6286, 'Anonymous', on).
mooCache(subclass('Canine', 'Carnivore'), subclass('Canine', 'Carnivore'), [], [], 'Merge', 'OBJECTS', 6288, 'Anonymous', on).
mooCache(disjoint('Canine', 'Feline'), disjoint('Canine', 'Feline'), [], [], 'Merge', 'OBJECTS', 6290, 'Anonymous', on).
mooCache(documentation('Canine', string('"The Class of Carnivores with completely   separable toes, nonretractable claws, and long muzzles."')), documentation('Canine', string('"The Class of Carnivores with completely   separable toes, nonretractable claws, and long muzzles."')), [], [], 'Merge', 'OBJECTS', 6292, 'Anonymous', on).
mooCache(subclass('Feline', 'Carnivore'), subclass('Feline', 'Carnivore'), [], [], 'Merge', 'OBJECTS', 6294, 'Anonymous', on).
mooCache(documentation('Feline', string('"The Class of Carnivores with completely  separable toes, nonretractable claws, slim bodies, and rounded heads."')), documentation('Feline', string('"The Class of Carnivores with completely  separable toes, nonretractable claws, slim bodies, and rounded heads."')), [], [], 'Merge', 'OBJECTS', 6296, 'Anonymous', on).
mooCache(subclass('Rodent', 'Mammal'), subclass('Rodent', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6298, 'Anonymous', on).
mooCache(documentation('Rodent', string('"The Class of Mammals with one or two pairs   of incisors for gnawing.  Includes rats, mice, guinea pigs, and   rabbits."')), documentation('Rodent', string('"The Class of Mammals with one or two pairs   of incisors for gnawing.  Includes rats, mice, guinea pigs, and   rabbits."')), [], [], 'Merge', 'OBJECTS', 6300, 'Anonymous', on).
mooCache(subclass('Primate', 'Mammal'), subclass('Primate', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6302, 'Anonymous', on).
mooCache(disjointDecomposition('Primate', 'Ape', 'Monkey', 'Hominid'), disjointDecomposition('Primate', 'Ape', 'Monkey', 'Hominid'), [], [], 'Merge', 'OBJECTS', 6304, 'Anonymous', on).
mooCache(documentation('Primate', string('"The Class of Mammals which are   Primates."')), documentation('Primate', string('"The Class of Mammals which are   Primates."')), [], [], 'Merge', 'OBJECTS', 6306, 'Anonymous', on).
mooCache(subclass('Ape', 'Primate'), subclass('Ape', 'Primate'), [], [], 'Merge', 'OBJECTS', 6308, 'Anonymous', on).
mooCache(documentation('Ape', string('"Various Primates with no tails or only short   tails."')), documentation('Ape', string('"Various Primates with no tails or only short   tails."')), [], [], 'Merge', 'OBJECTS', 6310, 'Anonymous', on).
mooCache(subclass('Monkey', 'Primate'), subclass('Monkey', 'Primate'), [], [], 'Merge', 'OBJECTS', 6312, 'Anonymous', on).
mooCache(documentation('Monkey', string('"Various Primates with relatively long   tails."')), documentation('Monkey', string('"Various Primates with relatively long   tails."')), [], [], 'Merge', 'OBJECTS', 6314, 'Anonymous', on).
mooCache(subclass('Hominid', 'Primate'), subclass('Hominid', 'Primate'), [], [], 'Merge', 'OBJECTS', 6316, 'Anonymous', on).
mooCache(documentation('Hominid', string('"Includes Humans and relatively recent   ancestors of Humans."')), documentation('Hominid', string('"Includes Humans and relatively recent   ancestors of Humans."')), [], [], 'Merge', 'OBJECTS', 6318, 'Anonymous', on).
mooCache(subclass('Human', 'Hominid'), subclass('Human', 'Hominid'), [], [], 'Merge', 'OBJECTS', 6320, 'Anonymous', on).
mooCache(subclass('Human', 'CognitiveAgent'), subclass('Human', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6322, 'Anonymous', on).
mooCache(documentation('Human', string('"Modern man, the only remaining species of the Homo   genus."')), documentation('Human', string('"Modern man, the only remaining species of the Homo   genus."')), [], [], 'Merge', 'OBJECTS', 6324, 'Anonymous', on).
mooCache(subclass('Reptile', 'ColdBloodedVertebrate'), subclass('Reptile', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6326, 'Anonymous', on).
mooCache(documentation('Reptile', string('"A ColdBloodedVertebrate having an external   covering of scales or horny plates.  Reptiles breathe by means of   Lungs and generally lay eggs."')), documentation('Reptile', string('"A ColdBloodedVertebrate having an external   covering of scales or horny plates.  Reptiles breathe by means of   Lungs and generally lay eggs."')), [], [], 'Merge', 'OBJECTS', 6328, 'Anonymous', on).
mooCache(subclass('BiologicallyActiveSubstance', 'Substance'), subclass('BiologicallyActiveSubstance', 'Substance'), [], [], 'Merge', 'OBJECTS', 6334, 'Anonymous', on).
mooCache(documentation('BiologicallyActiveSubstance', string('"A Substance that is   capable of inducing a change in the structure or functioning of an   Organism.  This Class includes Substances used in the treatment,   diagnosis, prevention or analysis of normal and abnormal body function.    This Class also includes Substances that occur naturally in the body   and are administered therapeutically.  Finally, BiologicallyActiveSubstance   includes Nutrients, most drugs of abuse, and agents that require special   handling because of their toxicity."')), documentation('BiologicallyActiveSubstance', string('"A Substance that is   capable of inducing a change in the structure or functioning of an   Organism.  This Class includes Substances used in the treatment,   diagnosis, prevention or analysis of normal and abnormal body function.    This Class also includes Substances that occur naturally in the body   and are administered therapeutically.  Finally, BiologicallyActiveSubstance   includes Nutrients, most drugs of abuse, and agents that require special   handling because of their toxicity."')), [], [], 'Merge', 'OBJECTS', 6336, 'Anonymous', on).
mooCache(subclass('Nutrient', 'BiologicallyActiveSubstance'), subclass('Nutrient', 'BiologicallyActiveSubstance'), [], [], 'Merge', 'OBJECTS', 6338, 'Anonymous', on).
mooCache(documentation('Nutrient', string('"A BiologicallyActiveSubstance produced or   required by an Organism, of primary interest because of its role in the   biologic functioning of the Organism."')), documentation('Nutrient', string('"A BiologicallyActiveSubstance produced or   required by an Organism, of primary interest because of its role in the   biologic functioning of the Organism."')), [], [], 'Merge', 'OBJECTS', 6340, 'Anonymous', on).
mooCache(subclass('Protein', 'Nutrient'), subclass('Protein', 'Nutrient'), [], [], 'Merge', 'OBJECTS', 6342, 'Anonymous', on).
mooCache(documentation('Protein', string('"A Nutrient made up of amino acids joined by   peptide bonds."')), documentation('Protein', string('"A Nutrient made up of amino acids joined by   peptide bonds."')), [], [], 'Merge', 'OBJECTS', 6344, 'Anonymous', on).
mooCache(subclass('Enzyme', 'Protein'), subclass('Enzyme', 'Protein'), [], [], 'Merge', 'OBJECTS', 6346, 'Anonymous', on).
mooCache(documentation('Enzyme', string('"A complex Protein that is produced by living   cells and which catalyzes specific biochemical reactions. There are six   main types of enzymes:  oxidoreductases, transferases, hydrolases,   lyases, isomerases, and ligases."')), documentation('Enzyme', string('"A complex Protein that is produced by living   cells and which catalyzes specific biochemical reactions. There are six   main types of enzymes:  oxidoreductases, transferases, hydrolases,   lyases, isomerases, and ligases."')), [], [], 'Merge', 'OBJECTS', 6348, 'Anonymous', on).
mooCache(subclass('Vitamin', 'Nutrient'), subclass('Vitamin', 'Nutrient'), [], [], 'Merge', 'OBJECTS', 6350, 'Anonymous', on).
mooCache(documentation('Vitamin', string('"A BiologicallyActiveSubstance present in natural   products or made synthetically, which is essential in the diet of Humans   and other higher Animals.  Included here are Vitamin precursors and   provitamins."')), documentation('Vitamin', string('"A BiologicallyActiveSubstance present in natural   products or made synthetically, which is essential in the diet of Humans   and other higher Animals.  Included here are Vitamin precursors and   provitamins."')), [], [], 'Merge', 'OBJECTS', 6352, 'Anonymous', on).
mooCache(subclass('Metal', 'PureSubstance'), subclass('Metal', 'PureSubstance'), [], [], 'Merge', 'OBJECTS', 6354, 'Anonymous', on).
mooCache(documentation('Metal', string('"A Metal is a PureSubstance that conducts heat and   electricity, is shiny and reflects many colors of light, and can be hammered   into sheets or drawn into wire.  About 80% of the known chemical elements   (ElementalSubstances) are metals."')), documentation('Metal', string('"A Metal is a PureSubstance that conducts heat and   electricity, is shiny and reflects many colors of light, and can be hammered   into sheets or drawn into wire.  About 80% of the known chemical elements   (ElementalSubstances) are metals."')), [], [], 'Merge', 'OBJECTS', 6356, 'Anonymous', on).
mooCache(subclass('BodySubstance', 'Mixture'), subclass('BodySubstance', 'Mixture'), [], [], 'Merge', 'OBJECTS', 6358, 'Anonymous', on).
mooCache(documentation('BodySubstance', string('"Extracellular material and mixtures of   cells and extracellular material that are produced, excreted or accreted   by an Organism.  Included here are Substances such as saliva, dental   enamel, sweat, and gastric acid."')), documentation('BodySubstance', string('"Extracellular material and mixtures of   cells and extracellular material that are produced, excreted or accreted   by an Organism.  Included here are Substances such as saliva, dental   enamel, sweat, and gastric acid."')), [], [], 'Merge', 'OBJECTS', 6360, 'Anonymous', on).
mooCache(subclass('Hormone', 'BodySubstance'), subclass('Hormone', 'BodySubstance'), [], [], 'Merge', 'OBJECTS', 6362, 'Anonymous', on).
mooCache(documentation('Hormone', string('"In Animals, a chemical secreted by an   endocrine gland whose products are released into the circulating fluid.    Plant hormones or synthetic hormones which are used only to alter or   control various physiologic processes, e.g., reproductive control agents,   are assigned to the Class BiologicallyActiveSubstance. Hormones act as   chemical messengers and regulate various physiologic processes such as   growth, reproduction, metabolism, etc.  They usually fall into two broad   categories, viz. steroid hormones and peptide hormones."')), documentation('Hormone', string('"In Animals, a chemical secreted by an   endocrine gland whose products are released into the circulating fluid.    Plant hormones or synthetic hormones which are used only to alter or   control various physiologic processes, e.g., reproductive control agents,   are assigned to the Class BiologicallyActiveSubstance. Hormones act as   chemical messengers and regulate various physiologic processes such as   growth, reproduction, metabolism, etc.  They usually fall into two broad   categories, viz. steroid hormones and peptide hormones."')), [], [], 'Merge', 'OBJECTS', 6364, 'Anonymous', on).
mooCache(subclass('Blood', 'BodySubstance'), subclass('Blood', 'BodySubstance'), [], [], 'Merge', 'OBJECTS', 6366, 'Anonymous', on).
mooCache(documentation('Blood', string('"A fluid present in Animals that transports   Nutrients to and waste products away from various BodyParts."')), documentation('Blood', string('"A fluid present in Animals that transports   Nutrients to and waste products away from various BodyParts."')), [], [], 'Merge', 'OBJECTS', 6368, 'Anonymous', on).
mooCache(subclass('ToxicOrganism', 'Organism'), subclass('ToxicOrganism', 'Organism'), [], [], 'Merge', 'OBJECTS', 6370, 'Anonymous', on).
mooCache(documentation('ToxicOrganism', string('"The Class of Organisms which are   poisonous to other Organisms."')), documentation('ToxicOrganism', string('"The Class of Organisms which are   poisonous to other Organisms."')), [], [], 'Merge', 'OBJECTS', 6372, 'Anonymous', on).
mooCache(=>(instance(A, 'ToxicOrganism'), exists(B, and(instance(B, 'BiologicallyActiveSubstance'), part(B, A)))), and(and(entails(not(instance(B, 'BiologicallyActiveSubstance')), not(instance(A, 'ToxicOrganism'))), entails(and(instance(A, 'ToxicOrganism'), '$existential'(B, '?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), part('?SUBSTANCE', A)))), instance(B, 'BiologicallyActiveSubstance'))), and(entails(not(part(B, A)), not(instance(A, 'ToxicOrganism'))), entails(and(instance(A, 'ToxicOrganism'), '$existential'(B, '?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), part('?SUBSTANCE', A)))), part(B, A)))), [domainV(B, ['$instanceof':'BiologicallyActiveSubstance', part:1]), domainV(A, ['$instanceof':'ToxicOrganism', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?SUBSTANCE', and(instance('?SUBSTANCE', 'BiologicallyActiveSubstance'), part('?SUBSTANCE', A))))], ['ORGANISM'=A, 'SUBSTANCE'=B], 'Merge', 'OBJECTS', 6374, 'Anonymous', on).
mooCache(subclass('Food', 'Object'), subclass('Food', 'Object'), [], [], 'Merge', 'OBJECTS', 6376, 'Anonymous', on).
mooCache(documentation('Food', string('"Any Object containing Nutrients, such as   carbohydrates, proteins, and fats, that can be ingested by a living   Organism and metabolized into energy and body tissue."')), documentation('Food', string('"Any Object containing Nutrients, such as   carbohydrates, proteins, and fats, that can be ingested by a living   Organism and metabolized into energy and body tissue."')), [], [], 'Merge', 'OBJECTS', 6378, 'Anonymous', on).
mooCache(=>(instance(A, 'Food'), exists(B, and(instance(B, 'Nutrient'), part(B, A)))), and(and(entails(not(instance(B, 'Nutrient')), not(instance(A, 'Food'))), entails(and(instance(A, 'Food'), '$existential'(B, '?NUTRIENT', and(instance('?NUTRIENT', 'Nutrient'), part('?NUTRIENT', A)))), instance(B, 'Nutrient'))), and(entails(not(part(B, A)), not(instance(A, 'Food'))), entails(and(instance(A, 'Food'), '$existential'(B, '?NUTRIENT', and(instance('?NUTRIENT', 'Nutrient'), part('?NUTRIENT', A)))), part(B, A)))), [domainV(B, ['$instanceof':'Nutrient', part:1]), domainV(A, ['$instanceof':'Food', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?NUTRIENT', and(instance('?NUTRIENT', 'Nutrient'), part('?NUTRIENT', A))))], ['FOOD'=A, 'NUTRIENT'=B], 'Merge', 'OBJECTS', 6380, 'Anonymous', on).
mooCache(=>(instance(A, 'Food'), forall(B, =>(part(B, A), exists(C, exists(D, and(part(B, D), and(part(D, C), instance(C, 'Organism')))))))), and(and(entails(and(part(B, A), not(part(B, D))), not(instance(A, 'Food'))), and(entails(and(instance(A, 'Food'), not(part(B, D))), not(part(B, A))), entails(and(and(instance(A, 'Food'), part(B, A)), '$existential'(D, '?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism'))))), part(B, D)))), and(and(entails(and(part(B, A), not(part(D, C))), not(instance(A, 'Food'))), and(entails(and(instance(A, 'Food'), not(part(D, C))), not(part(B, A))), entails(and(and(and(instance(A, 'Food'), part(B, A)), '$existential'(C, '?ORGANISM', exists(D, and(part(B, D), and(part(D, '?ORGANISM'), instance('?ORGANISM', 'Organism')))))), '$existential'(D, '?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism'))))), part(D, C)))), and(entails(and(part(B, A), not(instance(C, 'Organism'))), not(instance(A, 'Food'))), and(entails(and(instance(A, 'Food'), not(instance(C, 'Organism'))), not(part(B, A))), entails(and(and(and(instance(A, 'Food'), part(B, A)), '$existential'(C, '?ORGANISM', exists(D, and(part(B, D), and(part(D, '?ORGANISM'), instance('?ORGANISM', 'Organism')))))), '$existential'(D, '?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism'))))), instance(C, 'Organism')))))), [domainV(D, [part:1, part:2]), domainV(C, ['$instanceof':'Organism', part:2]), domainV(B, [part:1]), domainV(A, ['$instanceof':'Food', part:2]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?ORGANISM', exists(D, and(part(B, D), and(part(D, '?ORGANISM'), instance('?ORGANISM', 'Organism')))))), replaceConsVar(D, '$existential'('?PART2', and(part(B, '?PART2'), and(part('?PART2', C), instance(C, 'Organism')))))], ['FOOD'=A, 'PART1'=B, 'PART2'=D, 'ORGANISM'=C], 'Merge', 'OBJECTS', 6382, 'Anonymous', on).
mooCache(subclass('AnatomicalStructure', 'CorpuscularObject'), subclass('AnatomicalStructure', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6384, 'Anonymous', on).
mooCache(disjoint('AnatomicalStructure', 'Organism'), disjoint('AnatomicalStructure', 'Organism'), [], [], 'Merge', 'OBJECTS', 6386, 'Anonymous', on).
mooCache(documentation('AnatomicalStructure', string('"A normal or pathological part of the   anatomy or structural organization of an Organism."')), documentation('AnatomicalStructure', string('"A normal or pathological part of the   anatomy or structural organization of an Organism."')), [], [], 'Merge', 'OBJECTS', 6388, 'Anonymous', on).
mooCache(=>(instance(A, 'AnatomicalStructure'), exists(B, and(instance(B, 'Organism'), part(A, B)))), and(and(entails(not(instance(B, 'Organism')), not(instance(A, 'AnatomicalStructure'))), entails(and(instance(A, 'AnatomicalStructure'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), instance(B, 'Organism'))), and(entails(not(part(A, B)), not(instance(A, 'AnatomicalStructure'))), entails(and(instance(A, 'AnatomicalStructure'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), part(A, B)))), [domainV(B, ['$instanceof':'Organism', part:2]), domainV(A, ['$instanceof':'AnatomicalStructure', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM'))))], ['ANAT'=A, 'ORGANISM'=B], 'Merge', 'OBJECTS', 6390, 'Anonymous', on).
mooCache(subclass('Egg', 'AnatomicalStructure'), subclass('Egg', 'AnatomicalStructure'), [], [], 'Merge', 'OBJECTS', 6392, 'Anonymous', on).
mooCache(documentation(string('"Reproductive structure of Animals.  Consists of an   Embryonic Object and a nutritive/protective envelope."')), documentation(string('"Reproductive structure of Animals.  Consists of an   Embryonic Object and a nutritive/protective envelope."')), [], [], 'Merge', 'OBJECTS', 6394, 'Anonymous', on).
mooCache(subclass('BodyPart', 'AnatomicalStructure'), subclass('BodyPart', 'AnatomicalStructure'), [], [], 'Merge', 'OBJECTS', 6396, 'Anonymous', on).
mooCache(documentation('BodyPart', string('"A collection of Cells and Tissues which   are localized to a specific area. The instances of this Class range   from gross structures to small components of complex Organs."')), documentation('BodyPart', string('"A collection of Cells and Tissues which   are localized to a specific area. The instances of this Class range   from gross structures to small components of complex Organs."')), [], [], 'Merge', 'OBJECTS', 6398, 'Anonymous', on).
mooCache(=>(instance(A, 'BodyPart'), exists(B, and(instance(B, 'Cell'), part(B, A)))), and(and(entails(not(instance(B, 'Cell')), not(instance(A, 'BodyPart'))), entails(and(instance(A, 'BodyPart'), '$existential'(B, '?CELL', and(instance('?CELL', 'Cell'), part('?CELL', A)))), instance(B, 'Cell'))), and(entails(not(part(B, A)), not(instance(A, 'BodyPart'))), entails(and(instance(A, 'BodyPart'), '$existential'(B, '?CELL', and(instance('?CELL', 'Cell'), part('?CELL', A)))), part(B, A)))), [domainV(B, ['$instanceof':'Cell', part:1]), domainV(A, ['$instanceof':'BodyPart', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?CELL', and(instance('?CELL', 'Cell'), part('?CELL', A))))], ['PART'=A, 'CELL'=B], 'Merge', 'OBJECTS', 6400, 'Anonymous', on).
mooCache(subclass('BodyCovering', 'BodyPart'), subclass('BodyCovering', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6402, 'Anonymous', on).
mooCache(documentation('BodyCovering', string('"Any BodyPart which is a covering of another   BodyPart or of an entire Organism."')), documentation('BodyCovering', string('"Any BodyPart which is a covering of another   BodyPart or of an entire Organism."')), [], [], 'Merge', 'OBJECTS', 6404, 'Anonymous', on).
mooCache(=>(instance(A, 'BodyCovering'), exists(B, and(superficialPart(A, B), or(instance(B, 'Organism'), instance(B, 'BodyPart'))))), and(and(entails(not(superficialPart(A, B)), not(instance(A, 'BodyCovering'))), entails(and(instance(A, 'BodyCovering'), '$existential'(B, '?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart'))))), superficialPart(A, B))), and(entails(and(not(instance(B, 'Organism')), not(instance(B, 'BodyPart'))), not(instance(A, 'BodyCovering'))), and(entails(and(and(instance(A, 'BodyCovering'), not(instance(B, 'BodyPart'))), '$existential'(B, '?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart'))))), instance(B, 'Organism')), entails(and(and(instance(A, 'BodyCovering'), not(instance(B, 'Organism'))), '$existential'(B, '?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart'))))), instance(B, 'BodyPart'))))), [domainV(B, ['$instanceof':'BodyPart', '$instanceof':'Organism', superficialPart:2]), domainV(A, ['$instanceof':'BodyCovering', superficialPart:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BODY', and(superficialPart(A, '?BODY'), or(instance('?BODY', 'Organism'), instance('?BODY', 'BodyPart')))))], ['COVER'=A, 'BODY'=B], 'Merge', 'OBJECTS', 6406, 'Anonymous', on).
mooCache(subclass('BodyJunction', 'BodyPart'), subclass('BodyJunction', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6408, 'Anonymous', on).
mooCache(documentation('BodyJunction', string('"The place where two BodyParts   meet or connect."')), documentation('BodyJunction', string('"The place where two BodyParts   meet or connect."')), [], [], 'Merge', 'OBJECTS', 6410, 'Anonymous', on).
mooCache(=>(instance(A, 'BodyJunction'), exists(B, and(instance(B, 'BodyPart'), component(A, B)))), and(and(entails(not(instance(B, 'BodyPart')), not(instance(A, 'BodyJunction'))), entails(and(instance(A, 'BodyJunction'), '$existential'(B, '?STRUCT', and(instance('?STRUCT', 'BodyPart'), component(A, '?STRUCT')))), instance(B, 'BodyPart'))), and(entails(not(component(A, B)), not(instance(A, 'BodyJunction'))), entails(and(instance(A, 'BodyJunction'), '$existential'(B, '?STRUCT', and(instance('?STRUCT', 'BodyPart'), component(A, '?STRUCT')))), component(A, B)))), [domainV(B, ['$instanceof':'BodyPart', component:2]), domainV(A, ['$instanceof':'BodyJunction', component:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?STRUCT', and(instance('?STRUCT', 'BodyPart'), component(A, '?STRUCT'))))], ['JUNCT'=A, 'STRUCT'=B], 'Merge', 'OBJECTS', 6412, 'Anonymous', on).
mooCache(=>(instance(A, 'BodyJunction'), exists(B, exists(C, and(connected(A, C), and(connected(A, B), and(instance(C, 'BodyPart'), and(instance(B, 'BodyPart'), not(equal(C, B))))))))), and(and(entails(not(connected(A, C)), not(instance(A, 'BodyJunction'))), entails(and(instance(A, 'BodyJunction'), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), connected(A, C))), and(and(entails(not(connected(A, B)), not(instance(A, 'BodyJunction'))), entails(and(and(instance(A, 'BodyJunction'), '$existential'(B, '?STRUCT2', exists(C, and(connected(A, C), and(connected(A, '?STRUCT2'), and(instance(C, 'BodyPart'), and(instance('?STRUCT2', 'BodyPart'), not(equal(C, '?STRUCT2'))))))))), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), connected(A, B))), and(and(entails(not(instance(C, 'BodyPart')), not(instance(A, 'BodyJunction'))), entails(and(instance(A, 'BodyJunction'), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), instance(C, 'BodyPart'))), and(and(entails(not(instance(B, 'BodyPart')), not(instance(A, 'BodyJunction'))), entails(and(and(instance(A, 'BodyJunction'), '$existential'(B, '?STRUCT2', exists(C, and(connected(A, C), and(connected(A, '?STRUCT2'), and(instance(C, 'BodyPart'), and(instance('?STRUCT2', 'BodyPart'), not(equal(C, '?STRUCT2'))))))))), '$existential'(C, '?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B)))))))), instance(B, 'BodyPart'))), and(entails(equal(C, B), not(instance(A, 'BodyJunction'))), entails(instance(A, 'BodyJunction'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'BodyPart', connected:2]), domainV(B, ['$instanceof':'BodyPart', connected:2]), domainV(A, ['$instanceof':'BodyJunction', connected:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?STRUCT2', exists(C, and(connected(A, C), and(connected(A, '?STRUCT2'), and(instance(C, 'BodyPart'), and(instance('?STRUCT2', 'BodyPart'), not(equal(C, '?STRUCT2'))))))))), replaceConsVar(C, '$existential'('?STRUCT1', and(connected(A, '?STRUCT1'), and(connected(A, B), and(instance('?STRUCT1', 'BodyPart'), and(instance(B, 'BodyPart'), not(equal('?STRUCT1', B))))))))], ['JUNCT'=A, 'STRUCT1'=C, 'STRUCT2'=B], 'Merge', 'OBJECTS', 6414, 'Anonymous', on).
mooCache(subclass('BodyVessel', 'BodyPart'), subclass('BodyVessel', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6416, 'Anonymous', on).
mooCache(documentation('BodyVessel', string('"Any tube-like structure which occurs naturally in   an Organism and through which a BodySubstance can circulate."')), documentation('BodyVessel', string('"Any tube-like structure which occurs naturally in   an Organism and through which a BodySubstance can circulate."')), [], [], 'Merge', 'OBJECTS', 6418, 'Anonymous', on).
mooCache(subclass('Cell', 'BodyPart'), subclass('Cell', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6420, 'Anonymous', on).
mooCache(documentation('Cell', string('"The fundamental structural and functional unit of   living Organisms."')), documentation('Cell', string('"The fundamental structural and functional unit of   living Organisms."')), [], [], 'Merge', 'OBJECTS', 6422, 'Anonymous', on).
mooCache(subclass('Organ', 'BodyPart'), subclass('Organ', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6424, 'Anonymous', on).
mooCache(documentation('Organ', string('"A somewhat independent BodyPart that performs a   specialized function."')), documentation('Organ', string('"A somewhat independent BodyPart that performs a   specialized function."')), [], [], 'Merge', 'OBJECTS', 6426, 'Anonymous', on).
mooCache(=>(instance(A, 'Organ'), exists(B, hasPurpose(A, B))), and(entails(not(hasPurpose(A, B)), not(instance(A, 'Organ'))), entails(and(instance(A, 'Organ'), '$existential'(B, '?PURP', hasPurpose(A, '?PURP'))), hasPurpose(A, B))), [domainV(B, [hasPurpose:2]), domainV(A, ['$instanceof':'Organ', hasPurpose:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PURP', hasPurpose(A, '?PURP')))], ['ORGAN'=A, 'PURP'=B], 'Merge', 'OBJECTS', 6428, 'Anonymous', on).
mooCache(subclass('Gland', 'Organ'), subclass('Gland', 'Organ'), [], [], 'Merge', 'OBJECTS', 6430, 'Anonymous', on).
mooCache(documentation('Gland', string('"An Organ that removes Substances from the Blood,   alters them in some way, and then releases them."')), documentation('Gland', string('"An Organ that removes Substances from the Blood,   alters them in some way, and then releases them."')), [], [], 'Merge', 'OBJECTS', 6432, 'Anonymous', on).
mooCache(subclass('Fruit', 'Organ'), subclass('Fruit', 'Organ'), [], [], 'Merge', 'OBJECTS', 6434, 'Anonymous', on).
mooCache(documentation('Fruit', string('"A ripe Plant Organ that produces seeds for   reproduction."')), documentation('Fruit', string('"A ripe Plant Organ that produces seeds for   reproduction."')), [], [], 'Merge', 'OBJECTS', 6436, 'Anonymous', on).
mooCache(=>(instance(A, 'Fruit'), exists(B, and(component(A, B), instance(B, 'Plant')))), and(and(entails(not(component(A, B)), not(instance(A, 'Fruit'))), entails(and(instance(A, 'Fruit'), '$existential'(B, '?PLANT', and(component(A, '?PLANT'), instance('?PLANT', 'Plant')))), component(A, B))), and(entails(not(instance(B, 'Plant')), not(instance(A, 'Fruit'))), entails(and(instance(A, 'Fruit'), '$existential'(B, '?PLANT', and(component(A, '?PLANT'), instance('?PLANT', 'Plant')))), instance(B, 'Plant')))), [domainV(B, ['$instanceof':'Plant', component:2]), domainV(A, ['$instanceof':'Fruit', component:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PLANT', and(component(A, '?PLANT'), instance('?PLANT', 'Plant'))))], ['FRUIT'=A, 'PLANT'=B], 'Merge', 'OBJECTS', 6438, 'Anonymous', on).
mooCache(subclass('Tissue', 'BodySubstance'), subclass('Tissue', 'BodySubstance'), [], [], 'Merge', 'OBJECTS', 6440, 'Anonymous', on).
mooCache(documentation('Tissue', string('"An aggregation of similarly specialized Cells   and the associated intercellular substance. Tissues are relatively   non-localized in comparison to BodyParts, Organs or Organ components.    The main features of Tissues are self-connectivity (see   SelfConnectedObject) and being a homogeneous mass (all parts in the   same granularity are instances of Tissue as well)."')), documentation('Tissue', string('"An aggregation of similarly specialized Cells   and the associated intercellular substance. Tissues are relatively   non-localized in comparison to BodyParts, Organs or Organ components.    The main features of Tissues are self-connectivity (see   SelfConnectedObject) and being a homogeneous mass (all parts in the   same granularity are instances of Tissue as well)."')), [], [], 'Merge', 'OBJECTS', 6442, 'Anonymous', on).
mooCache(=>(instance(A, 'Tissue'), exists(B, and(instance(B, 'Cell'), part(B, A)))), and(and(entails(not(instance(B, 'Cell')), not(instance(A, 'Tissue'))), entails(and(instance(A, 'Tissue'), '$existential'(B, '?PART', and(instance('?PART', 'Cell'), part('?PART', A)))), instance(B, 'Cell'))), and(entails(not(part(B, A)), not(instance(A, 'Tissue'))), entails(and(instance(A, 'Tissue'), '$existential'(B, '?PART', and(instance('?PART', 'Cell'), part('?PART', A)))), part(B, A)))), [domainV(B, ['$instanceof':'Cell', part:1]), domainV(A, ['$instanceof':'Tissue', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PART', and(instance('?PART', 'Cell'), part('?PART', A))))], ['STUFF'=A, 'PART'=B], 'Merge', 'OBJECTS', 6444, 'Anonymous', on).
mooCache(=>(instance(A, 'Tissue'), exists(B, and(instance(B, 'Organism'), part(A, B)))), and(and(entails(not(instance(B, 'Organism')), not(instance(A, 'Tissue'))), entails(and(instance(A, 'Tissue'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), instance(B, 'Organism'))), and(entails(not(part(A, B)), not(instance(A, 'Tissue'))), entails(and(instance(A, 'Tissue'), '$existential'(B, '?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM')))), part(A, B)))), [domainV(B, ['$instanceof':'Organism', part:2]), domainV(A, ['$instanceof':'Tissue', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ORGANISM', and(instance('?ORGANISM', 'Organism'), part(A, '?ORGANISM'))))], ['STUFF'=A, 'ORGANISM'=B], 'Merge', 'OBJECTS', 6446, 'Anonymous', on).
mooCache(subclass('Bone', 'Tissue'), subclass('Bone', 'Tissue'), [], [], 'Merge', 'OBJECTS', 6448, 'Anonymous', on).
mooCache(documentation('Bone', string('"Rigid Tissue composed largely of calcium that makes up   the skeleton of Vertebrates.  Note that this Class also includes teeth."')), documentation('Bone', string('"Rigid Tissue composed largely of calcium that makes up   the skeleton of Vertebrates.  Note that this Class also includes teeth."')), [], [], 'Merge', 'OBJECTS', 6450, 'Anonymous', on).
mooCache(=>(instance(A, 'Bone'), exists(B, and(instance(B, 'Vertebrate'), part(A, B)))), and(and(entails(not(instance(B, 'Vertebrate')), not(instance(A, 'Bone'))), entails(and(instance(A, 'Bone'), '$existential'(B, '?VERT', and(instance('?VERT', 'Vertebrate'), part(A, '?VERT')))), instance(B, 'Vertebrate'))), and(entails(not(part(A, B)), not(instance(A, 'Bone'))), entails(and(instance(A, 'Bone'), '$existential'(B, '?VERT', and(instance('?VERT', 'Vertebrate'), part(A, '?VERT')))), part(A, B)))), [domainV(B, ['$instanceof':'Vertebrate', part:2]), domainV(A, ['$instanceof':'Bone', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?VERT', and(instance('?VERT', 'Vertebrate'), part(A, '?VERT'))))], ['BONE'=A, 'VERT'=B], 'Merge', 'OBJECTS', 6452, 'Anonymous', on).
mooCache(subclass('Muscle', 'Tissue'), subclass('Muscle', 'Tissue'), [], [], 'Merge', 'OBJECTS', 6454, 'Anonymous', on).
mooCache(disjoint('Muscle', 'Bone'), disjoint('Muscle', 'Bone'), [], [], 'Merge', 'OBJECTS', 6456, 'Anonymous', on).
mooCache(documentation('Muscle', string('"Nonrigid Tissue appearing only in Animals and   composed largely of contractile cells."')), documentation('Muscle', string('"Nonrigid Tissue appearing only in Animals and   composed largely of contractile cells."')), [], [], 'Merge', 'OBJECTS', 6458, 'Anonymous', on).
mooCache(subclass('Noun', 'Word'), subclass('Noun', 'Word'), [], [], 'Merge', 'OBJECTS', 6460, 'Anonymous', on).
mooCache(partition('Word', 'Noun', 'Verb', 'Adjective', 'Adverb', 'Particle'), partition('Word', 'Noun', 'Verb', 'Adjective', 'Adverb', 'Particle'), [], [], 'Merge', 'OBJECTS', 6462, 'Anonymous', on).
mooCache(documentation('Noun', string('"One of the parts of speech.  The Class of Words   that conventionally denote Objects."')), documentation('Noun', string('"One of the parts of speech.  The Class of Words   that conventionally denote Objects."')), [], [], 'Merge', 'OBJECTS', 6464, 'Anonymous', on).
mooCache(subclass('Verb', 'Word'), subclass('Verb', 'Word'), [], [], 'Merge', 'OBJECTS', 6466, 'Anonymous', on).
mooCache(documentation('Verb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Processes."')), documentation('Verb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Processes."')), [], [], 'Merge', 'OBJECTS', 6468, 'Anonymous', on).
mooCache(subclass('Adjective', 'Word'), subclass('Adjective', 'Word'), [], [], 'Merge', 'OBJECTS', 6470, 'Anonymous', on).
mooCache(documentation('Adjective', string('"One of the parts of speech.  The Class of   Words that conventionally denote Attributes of Objects."')), documentation('Adjective', string('"One of the parts of speech.  The Class of   Words that conventionally denote Attributes of Objects."')), [], [], 'Merge', 'OBJECTS', 6472, 'Anonymous', on).
mooCache(subclass('Adverb', 'Word'), subclass('Adverb', 'Word'), [], [], 'Merge', 'OBJECTS', 6474, 'Anonymous', on).
mooCache(documentation('Adverb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Attributes of Processes."')), documentation('Adverb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Attributes of Processes."')), [], [], 'Merge', 'OBJECTS', 6476, 'Anonymous', on).
mooCache(subclass('Particle', 'Word'), subclass('Particle', 'Word'), [], [], 'Merge', 'OBJECTS', 6478, 'Anonymous', on).
mooCache(documentation('Particle', string('"An umbrella Class for any Word that does not   fit into the other subclasses of Word.  A Particle is generally a small   term that serves a grammatical or logical function, e.g. \'and\', \'of\',   \'since\', etc.  At some point, this class might be broken up into the   subclasses \'Connective\', \'Preposition\', etc."')), documentation('Particle', string('"An umbrella Class for any Word that does not   fit into the other subclasses of Word.  A Particle is generally a small   term that serves a grammatical or logical function, e.g. \'and\', \'of\',   \'since\', etc.  At some point, this class might be broken up into the   subclasses \'Connective\', \'Preposition\', etc."')), [], [], 'Merge', 'OBJECTS', 6480, 'Anonymous', on).
mooCache(subclass('Morpheme', 'LinguisticExpression'), subclass('Morpheme', 'LinguisticExpression'), [], [], 'Merge', 'OBJECTS', 6482, 'Anonymous', on).
mooCache(documentation('Morpheme', string('"Part of a Word which cannot be subdivided   and which expresses a meaning."')), documentation('Morpheme', string('"Part of a Word which cannot be subdivided   and which expresses a meaning."')), [], [], 'Merge', 'OBJECTS', 6484, 'Anonymous', on).
mooCache(=>(instance(A, 'Morpheme'), not(exists(B, and(instance(B, 'Morpheme'), and(part(B, A), not(equal(B, A))))))), and(entails(and(instance(B, 'Morpheme'), and(part(B, A), not(equal(B, A)))), not(instance(A, 'Morpheme'))), and(entails(and(instance(A, 'Morpheme'), and(part(B, A), not(equal(B, A)))), not(instance(B, 'Morpheme'))), and(entails(and(instance(A, 'Morpheme'), and(instance(B, 'Morpheme'), not(equal(B, A)))), not(part(B, A))), entails(and(instance(A, 'Morpheme'), and(instance(B, 'Morpheme'), part(B, A))), equal(B, A))))), [domainV(B, ['$instanceof':'Morpheme', part:1]), domainV(A, ['$instanceof':'Morpheme', part:2]), domainV(C, []), forall(A), forall(B), forall(B)], ['MORPH'=A, 'OTHERMORPH'=B], 'Merge', 'OBJECTS', 6486, 'Anonymous', on).
mooCache(=>(instance(A, 'Morpheme'), exists(B, and(instance(B, 'Word'), part(A, B)))), and(and(entails(not(instance(B, 'Word')), not(instance(A, 'Morpheme'))), entails(and(instance(A, 'Morpheme'), '$existential'(B, '?WORD', and(instance('?WORD', 'Word'), part(A, '?WORD')))), instance(B, 'Word'))), and(entails(not(part(A, B)), not(instance(A, 'Morpheme'))), entails(and(instance(A, 'Morpheme'), '$existential'(B, '?WORD', and(instance('?WORD', 'Word'), part(A, '?WORD')))), part(A, B)))), [domainV(B, ['$instanceof':'Word', part:2]), domainV(A, ['$instanceof':'Morpheme', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?WORD', and(instance('?WORD', 'Word'), part(A, '?WORD'))))], ['MORPH'=A, 'WORD'=B], 'Merge', 'OBJECTS', 6488, 'Anonymous', on).
mooCache(=>(instance(A, 'Word'), exists(B, and(part(B, A), instance(B, 'Morpheme')))), and(and(entails(not(part(B, A)), not(instance(A, 'Word'))), entails(and(instance(A, 'Word'), '$existential'(B, '?PART', and(part('?PART', A), instance('?PART', 'Morpheme')))), part(B, A))), and(entails(not(instance(B, 'Morpheme')), not(instance(A, 'Word'))), entails(and(instance(A, 'Word'), '$existential'(B, '?PART', and(part('?PART', A), instance('?PART', 'Morpheme')))), instance(B, 'Morpheme')))), [domainV(B, ['$instanceof':'Morpheme', part:1]), domainV(A, ['$instanceof':'Word', part:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PART', and(part('?PART', A), instance('?PART', 'Morpheme'))))], ['WORD'=A, 'PART'=B], 'Merge', 'OBJECTS', 6490, 'Anonymous', on).
mooCache(subclass('Phrase', 'LinguisticExpression'), subclass('Phrase', 'LinguisticExpression'), [], [], 'Merge', 'OBJECTS', 6492, 'Anonymous', on).
mooCache(disjointDecomposition('Phrase', 'VerbPhrase', 'NounPhrase', 'PrepositionalPhrase', 'Clause'), disjointDecomposition('Phrase', 'VerbPhrase', 'NounPhrase', 'PrepositionalPhrase', 'Clause'), [], [], 'Merge', 'OBJECTS', 6494, 'Anonymous', on).
mooCache(documentation('Phrase', string('"A set of Words in a Language which form a unit,   i.e. express a meaning in the Language."')), documentation('Phrase', string('"A set of Words in a Language which form a unit,   i.e. express a meaning in the Language."')), [], [], 'Merge', 'OBJECTS', 6496, 'Anonymous', on).
mooCache(=>(instance(A, 'Phrase'), exists(B, exists(C, and(part(C, A), and(part(B, A), and(instance(C, 'Word'), and(instance(B, 'Word'), not(equal(C, B))))))))), and(and(entails(not(part(C, A)), not(instance(A, 'Phrase'))), entails(and(instance(A, 'Phrase'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), part(C, A))), and(and(entails(not(part(B, A)), not(instance(A, 'Phrase'))), entails(and(and(instance(A, 'Phrase'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Word'), and(instance('?PART2', 'Word'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), part(B, A))), and(and(entails(not(instance(C, 'Word')), not(instance(A, 'Phrase'))), entails(and(instance(A, 'Phrase'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), instance(C, 'Word'))), and(and(entails(not(instance(B, 'Word')), not(instance(A, 'Phrase'))), entails(and(and(instance(A, 'Phrase'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Word'), and(instance('?PART2', 'Word'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B)))))))), instance(B, 'Word'))), and(entails(equal(C, B), not(instance(A, 'Phrase'))), entails(instance(A, 'Phrase'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'Word', part:1]), domainV(B, ['$instanceof':'Word', part:1]), domainV(A, ['$instanceof':'Phrase', part:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Word'), and(instance('?PART2', 'Word'), not(equal(C, '?PART2'))))))))), replaceConsVar(C, '$existential'('?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Word'), and(instance(B, 'Word'), not(equal('?PART1', B))))))))], ['PHRASE'=A, 'PART1'=C, 'PART2'=B], 'Merge', 'OBJECTS', 6498, 'Anonymous', on).
mooCache(subclass('VerbPhrase', 'Phrase'), subclass('VerbPhrase', 'Phrase'), [], [], 'Merge', 'OBJECTS', 6500, 'Anonymous', on).
mooCache(documentation('VerbPhrase', string('"A Phrase that has the same function as a   Verb."')), documentation('VerbPhrase', string('"A Phrase that has the same function as a   Verb."')), [], [], 'Merge', 'OBJECTS', 6502, 'Anonymous', on).
mooCache(subclass('NounPhrase', 'Phrase'), subclass('NounPhrase', 'Phrase'), [], [], 'Merge', 'OBJECTS', 6504, 'Anonymous', on).
mooCache(disjoint('NounPhrase', 'VerbPhrase'), disjoint('NounPhrase', 'VerbPhrase'), [], [], 'Merge', 'OBJECTS', 6506, 'Anonymous', on).
mooCache(documentation('NounPhrase', string('"A Phrase that has the same function as a   Noun."')), documentation('NounPhrase', string('"A Phrase that has the same function as a   Noun."')), [], [], 'Merge', 'OBJECTS', 6508, 'Anonymous', on).
mooCache(=>(instance(A, 'Sentence'), exists(B, exists(C, and(instance(C, 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part(C, A), part(B, A))))))), and(and(entails(not(instance(C, 'NounPhrase')), not(instance(A, 'Sentence'))), entails(and(instance(A, 'Sentence'), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), instance(C, 'NounPhrase'))), and(and(entails(not(instance(B, 'VerbPhrase')), not(instance(A, 'Sentence'))), entails(and(and(instance(A, 'Sentence'), '$existential'(B, '?PHRASE2', exists(C, and(instance(C, 'NounPhrase'), and(instance('?PHRASE2', 'VerbPhrase'), and(part(C, A), part('?PHRASE2', A))))))), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), instance(B, 'VerbPhrase'))), and(and(entails(not(part(C, A)), not(instance(A, 'Sentence'))), entails(and(instance(A, 'Sentence'), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), part(C, A))), and(entails(not(part(B, A)), not(instance(A, 'Sentence'))), entails(and(and(instance(A, 'Sentence'), '$existential'(B, '?PHRASE2', exists(C, and(instance(C, 'NounPhrase'), and(instance('?PHRASE2', 'VerbPhrase'), and(part(C, A), part('?PHRASE2', A))))))), '$existential'(C, '?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A)))))), part(B, A)))))), [domainV(C, ['$instanceof':'NounPhrase', part:1]), domainV(B, ['$instanceof':'VerbPhrase', part:1]), domainV(A, ['$instanceof':'Sentence', part:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PHRASE2', exists(C, and(instance(C, 'NounPhrase'), and(instance('?PHRASE2', 'VerbPhrase'), and(part(C, A), part('?PHRASE2', A))))))), replaceConsVar(C, '$existential'('?PHRASE1', and(instance('?PHRASE1', 'NounPhrase'), and(instance(B, 'VerbPhrase'), and(part('?PHRASE1', A), part(B, A))))))], ['SENTENCE'=A, 'PHRASE1'=C, 'PHRASE2'=B], 'Merge', 'OBJECTS', 6510, 'Anonymous', on).
mooCache(subclass('PrepositionalPhrase', 'Phrase'), subclass('PrepositionalPhrase', 'Phrase'), [], [], 'Merge', 'OBJECTS', 6512, 'Anonymous', on).
mooCache(documentation('PrepositionalPhrase', string('"A Phrase that begins with a   preposition and that functions as an Adjective or an Adverb."')), documentation('PrepositionalPhrase', string('"A Phrase that begins with a   preposition and that functions as an Adjective or an Adverb."')), [], [], 'Merge', 'OBJECTS', 6514, 'Anonymous', on).
mooCache(subclass('Text', 'LinguisticExpression'), subclass('Text', 'LinguisticExpression'), [], [], 'Merge', 'OBJECTS', 6516, 'Anonymous', on).
mooCache(subclass('Text', 'Artifact'), subclass('Text', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6518, 'Anonymous', on).
mooCache(documentation('Text', string('"A Phrase, Sentence or set of Sentences   that perform a specific function related to Communication, e.g.   express a discourse about a particular topic."')), documentation('Text', string('"A Phrase, Sentence or set of Sentences   that perform a specific function related to Communication, e.g.   express a discourse about a particular topic."')), [], [], 'Merge', 'OBJECTS', 6520, 'Anonymous', on).
mooCache(=>(instance(A, 'Text'), exists(B, exists(C, and(part(C, A), and(part(B, A), and(instance(C, 'Sentence'), and(instance(B, 'Sentence'), not(equal(C, B))))))))), and(and(entails(not(part(C, A)), not(instance(A, 'Text'))), entails(and(instance(A, 'Text'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), part(C, A))), and(and(entails(not(part(B, A)), not(instance(A, 'Text'))), entails(and(and(instance(A, 'Text'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Sentence'), and(instance('?PART2', 'Sentence'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), part(B, A))), and(and(entails(not(instance(C, 'Sentence')), not(instance(A, 'Text'))), entails(and(instance(A, 'Text'), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), instance(C, 'Sentence'))), and(and(entails(not(instance(B, 'Sentence')), not(instance(A, 'Text'))), entails(and(and(instance(A, 'Text'), '$existential'(B, '?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Sentence'), and(instance('?PART2', 'Sentence'), not(equal(C, '?PART2'))))))))), '$existential'(C, '?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B)))))))), instance(B, 'Sentence'))), and(entails(equal(C, B), not(instance(A, 'Text'))), entails(instance(A, 'Text'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'Sentence', part:1]), domainV(B, ['$instanceof':'Sentence', part:1]), domainV(A, ['$instanceof':'Text', part:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PART2', exists(C, and(part(C, A), and(part('?PART2', A), and(instance(C, 'Sentence'), and(instance('?PART2', 'Sentence'), not(equal(C, '?PART2'))))))))), replaceConsVar(C, '$existential'('?PART1', and(part('?PART1', A), and(part(B, A), and(instance('?PART1', 'Sentence'), and(instance(B, 'Sentence'), not(equal('?PART1', B))))))))], ['TEXT'=A, 'PART1'=C, 'PART2'=B], 'Merge', 'OBJECTS', 6522, 'Anonymous', on).
mooCache(instance(authors, 'BinaryPredicate'), instance(authors, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6524, 'Anonymous', on).
mooCache(instance(authors, 'AsymmetricRelation'), instance(authors, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6526, 'Anonymous', on).
mooCache(domain(authors, 1, 'Agent'), domain(authors, 1, 'Agent'), [], [], 'Merge', 'OBJECTS', 6528, 'Anonymous', on).
mooCache(domainSubclass(authors, 2, 'Text'), domainSubclass(authors, 2, 'Text'), [], [], 'Merge', 'OBJECTS', 6530, 'Anonymous', on).
mooCache(documentation(authors, string('"(authors ?AGENT ?TEXT) means that ?AGENT is   creatively responsible for ?TEXT.  For example, Agatha Christie is   author of Murder_on_the_Orient_Express."')), documentation(authors, string('"(authors ?AGENT ?TEXT) means that ?AGENT is   creatively responsible for ?TEXT.  For example, Agatha Christie is   author of Murder_on_the_Orient_Express."')), [], [], 'Merge', 'OBJECTS', 6532, 'Anonymous', on).
mooCache(=>(authors(A, B), exists(C, exists(D, and(agent(D, A), and(instance(C, B), result(D, B)))))), and(and(entails(not(agent(D, A)), not(authors(A, B))), entails(and(authors(A, B), '$existential'(D, '?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B))))), agent(D, A))), and(and(entails(not(instance(C, B)), not(authors(A, B))), entails(and(and(authors(A, B), '$existential'(C, '?INSTANCE', exists(D, and(agent(D, A), and(instance('?INSTANCE', B), result(D, B)))))), '$existential'(D, '?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B))))), instance(C, B))), and(entails(not(result(D, B)), not(authors(A, B))), entails(and(authors(A, B), '$existential'(D, '?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B))))), result(D, B))))), [domainV(D, [agent:1, result:1]), domainV(C, []), domainV(B, [authors:2, instance:2, result:2]), domainV(A, [agent:2, authors:1]), domainV(E, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?INSTANCE', exists(D, and(agent(D, A), and(instance('?INSTANCE', B), result(D, B)))))), replaceConsVar(D, '$existential'('?PROCESS', and(agent('?PROCESS', A), and(instance(C, B), result('?PROCESS', B)))))], ['AGENT'=A, 'TEXT'=B, 'PROCESS'=D, 'INSTANCE'=C], 'Merge', 'OBJECTS', 6534, 'Anonymous', on).
mooCache(instance(editor, 'BinaryPredicate'), instance(editor, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6536, 'Anonymous', on).
mooCache(instance(editor, 'AsymmetricRelation'), instance(editor, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6538, 'Anonymous', on).
mooCache(domain(editor, 1, 'Agent'), domain(editor, 1, 'Agent'), [], [], 'Merge', 'OBJECTS', 6540, 'Anonymous', on).
mooCache(domainSubclass(editor, 2, 'Text'), domainSubclass(editor, 2, 'Text'), [], [], 'Merge', 'OBJECTS', 6542, 'Anonymous', on).
mooCache(documentation(editor, string('"(editor ?AGENT ?TEXT) means that ?AGENT is   an editor of ?TEXT."')), documentation(editor, string('"(editor ?AGENT ?TEXT) means that ?AGENT is   an editor of ?TEXT."')), [], [], 'Merge', 'OBJECTS', 6544, 'Anonymous', on).
mooCache(instance(publishes, 'BinaryPredicate'), instance(publishes, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6546, 'Anonymous', on).
mooCache(instance(publishes, 'AsymmetricRelation'), instance(publishes, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6548, 'Anonymous', on).
mooCache(domain(publishes, 1, 'Organization'), domain(publishes, 1, 'Organization'), [], [], 'Merge', 'OBJECTS', 6550, 'Anonymous', on).
mooCache(domainSubclass(publishes, 2, 'Text'), domainSubclass(publishes, 2, 'Text'), [], [], 'Merge', 'OBJECTS', 6552, 'Anonymous', on).
mooCache(documentation(publishes, string('"(publishes ?ORG ?TEXT) means that ?ORG   publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie\'s   Murder_on_the_Orient_Express."')), documentation(publishes, string('"(publishes ?ORG ?TEXT) means that ?ORG   publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie\'s   Murder_on_the_Orient_Express."')), [], [], 'Merge', 'OBJECTS', 6554, 'Anonymous', on).
mooCache(<=>(publishes(A, B), exists(C, and(instance(C, 'Publication'), and(agent(C, A), patient(C, B))))), and(and(entails(and(publishes(A, B), '$existential'(C, '?PUB', and(instance('?PUB', 'Publication'), and(agent('?PUB', A), patient('?PUB', B))))), instance(C, 'Publication')), and(entails(and(publishes(A, B), '$existential'(C, '?PUB', and(instance('?PUB', 'Publication'), and(agent('?PUB', A), patient('?PUB', B))))), agent(C, A)), and(entails(and(publishes(A, B), '$existential'(C, '?PUB', and(instance('?PUB', 'Publication'), and(agent('?PUB', A), patient('?PUB', B))))), patient(C, B)), entails(or(not(instance(C, 'Publication')), or(not(agent(C, A)), not(patient(C, B)))), not(publishes(A, B)))))), and(entails(and(instance(C, 'Publication'), and(agent(C, A), patient(C, B))), publishes(A, B)), and(entails(and(not(publishes(A, B)), and(agent(C, A), patient(C, B))), not(instance(C, 'Publication'))), and(entails(and(not(publishes(A, B)), and(instance(C, 'Publication'), patient(C, B))), not(agent(C, A))), entails(and(not(publishes(A, B)), and(instance(C, 'Publication'), agent(C, A))), not(patient(C, B))))))), [domainV(C, ['$instanceof':'Publication', agent:1, patient:1]), domainV(B, [patient:2, publishes:2]), domainV(A, [agent:2, publishes:1]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PUB', and(instance('?PUB', 'Publication'), and(agent('?PUB', A), patient('?PUB', B))))), forall(C)], ['ORG'=A, 'TEXT'=B, 'PUB'=C], 'Merge', 'OBJECTS', 6556, 'Anonymous', on).
mooCache(instance('EditionFn', 'BinaryFunction'), instance('EditionFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6558, 'Anonymous', on).
mooCache(domainSubclass('EditionFn', 1, 'ContentBearingObject'), domainSubclass('EditionFn', 1, 'ContentBearingObject'), [], [], 'Merge', 'OBJECTS', 6560, 'Anonymous', on).
mooCache(domain('EditionFn', 2, 'PositiveInteger'), domain('EditionFn', 2, 'PositiveInteger'), [], [], 'Merge', 'OBJECTS', 6562, 'Anonymous', on).
mooCache(rangeSubclass('EditionFn', 'ContentBearingObject'), rangeSubclass('EditionFn', 'ContentBearingObject'), [], [], 'Merge', 'OBJECTS', 6564, 'Anonymous', on).
mooCache(documentation('EditionFn', string('"A BinaryFunction that maps a type of text   (e.g. Agatha Christie\'s Murder_on_the_Orient_Express) and a number   to the edition of the text type corresponding to the number."')), documentation('EditionFn', string('"A BinaryFunction that maps a type of text   (e.g. Agatha Christie\'s Murder_on_the_Orient_Express) and a number   to the edition of the text type corresponding to the number."')), [], [], 'Merge', 'OBJECTS', 6566, 'Anonymous', on).
mooCache(=>(and(equal('EditionFn'(A, B), C), and(equal('EditionFn'(A, D), E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I))))))))), before('EndFn'(H), 'EndFn'(I))), and(entails(and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I))))))))), before('EndFn'(H), 'EndFn'(I))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I))))))))), not(holds('EditionFn', A, B, C))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I))))))))), not(holds('EditionFn', A, D, E))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I))))))))), not(greaterThan(D, B))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I))))))))), not(instance(F, 'Publication'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I))))))))), not(instance(G, 'Publication'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(G, E), and(date(F, H), date(G, I))))))))), not(patient(F, C))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(date(F, H), date(G, I))))))))), not(patient(G, E))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), date(G, I))))))))), not(date(F, H))), entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('EditionFn', A, B, C), and(holds('EditionFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), date(F, H))))))))), not(date(G, I)))))))))))), [domainV(I, ['EndFn':1, date:2]), domainV(H, ['EndFn':1, date:2]), domainV(G, ['$instanceof':'Publication', date:1, patient:1]), domainV(F, ['$instanceof':'Publication', date:1, patient:1]), domainV(E, ['EditionFn':3, patient:2]), domainV(D, ['EditionFn':2, greaterThan:1]), domainV(C, ['EditionFn':3, patient:2]), domainV(B, ['EditionFn':2, greaterThan:2]), domainV(A, ['EditionFn':1]), domainV(J, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(F), forall(G), forall(H), forall(I)], ['TEXT'=A, 'INT1'=B, 'EDITION1'=C, 'INT2'=D, 'EDITION2'=E, 'PUB1'=F, 'PUB2'=G, 'DATE1'=H, 'DATE2'=I], 'Merge', 'OBJECTS', 6568, 'Anonymous', on).
mooCache(=>(equal('EditionFn'(A, B), C), subsumesContentClass(A, C)), and(entails(not(subsumesContentClass(A, C)), not(holds('EditionFn', A, B, C))), entails(holds('EditionFn', A, B, C), subsumesContentClass(A, C))), [domainV(C, ['EditionFn':3, subsumesContentClass:2]), domainV(B, ['EditionFn':2]), domainV(A, ['EditionFn':1, subsumesContentClass:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['TEXT1'=A, 'NUMBER'=B, 'TEXT2'=C], 'Merge', 'OBJECTS', 6570, 'Anonymous', on).
mooCache(instance('SeriesVolumeFn', 'BinaryFunction'), instance('SeriesVolumeFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6572, 'Anonymous', on).
mooCache(domainSubclass('SeriesVolumeFn', 1, 'Series'), domainSubclass('SeriesVolumeFn', 1, 'Series'), [], [], 'Merge', 'OBJECTS', 6574, 'Anonymous', on).
mooCache(domain('SeriesVolumeFn', 2, 'PositiveInteger'), domain('SeriesVolumeFn', 2, 'PositiveInteger'), [], [], 'Merge', 'OBJECTS', 6576, 'Anonymous', on).
mooCache(rangeSubclass('SeriesVolumeFn', 'Text'), rangeSubclass('SeriesVolumeFn', 'Text'), [], [], 'Merge', 'OBJECTS', 6578, 'Anonymous', on).
mooCache(documentation('SeriesVolumeFn', string('"A BinaryFunction that maps a type of Series   (e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a   number to the volumes of the text type designated by the number."')), documentation('SeriesVolumeFn', string('"A BinaryFunction that maps a type of Series   (e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a   number to the volumes of the text type designated by the number."')), [], [], 'Merge', 'OBJECTS', 6580, 'Anonymous', on).
mooCache(=>(and(subclass(A, 'Periodical'), and(equal('SeriesVolumeFn'(A, B), C), and(equal('SeriesVolumeFn'(A, D), E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), before('EndFn'(H), 'EndFn'(I))), and(entails(and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), before('EndFn'(H), 'EndFn'(I))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(subclass(A, 'Periodical'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(holds('SeriesVolumeFn', A, B, C))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(holds('SeriesVolumeFn', A, D, E))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(greaterThan(D, B))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(instance(F, 'Publication'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(patient(F, C), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(instance(G, 'Publication'))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(G, E), and(date(F, H), date(G, I)))))))))), not(patient(F, C))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(date(F, H), date(G, I)))))))))), not(patient(G, E))), and(entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), date(G, I)))))))))), not(date(F, H))), entails(and(not(before('EndFn'(H), 'EndFn'(I))), and(subclass(A, 'Periodical'), and(holds('SeriesVolumeFn', A, B, C), and(holds('SeriesVolumeFn', A, D, E), and(greaterThan(D, B), and(instance(F, 'Publication'), and(instance(G, 'Publication'), and(patient(F, C), and(patient(G, E), date(F, H)))))))))), not(date(G, I))))))))))))), [domainV(I, ['EndFn':1, date:2]), domainV(H, ['EndFn':1, date:2]), domainV(G, ['$instanceof':'Publication', date:1, patient:1]), domainV(F, ['$instanceof':'Publication', date:1, patient:1]), domainV(E, ['SeriesVolumeFn':3, patient:2]), domainV(D, ['SeriesVolumeFn':2, greaterThan:1]), domainV(C, ['SeriesVolumeFn':3, patient:2]), domainV(B, ['SeriesVolumeFn':2, greaterThan:2]), domainV(A, ['SeriesVolumeFn':1, subclass:1]), domainV(J, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(F), forall(G), forall(H), forall(I)], ['TEXT'=A, 'INT1'=B, 'VOLUME1'=C, 'INT2'=D, 'VOLUME2'=E, 'PUB1'=F, 'PUB2'=G, 'DATE1'=H, 'DATE2'=I], 'Merge', 'OBJECTS', 6582, 'Anonymous', on).
mooCache(=>(equal('SeriesVolumeFn'(A, B), C), subsumesContentClass(A, C)), and(entails(not(subsumesContentClass(A, C)), not(holds('SeriesVolumeFn', A, B, C))), entails(holds('SeriesVolumeFn', A, B, C), subsumesContentClass(A, C))), [domainV(C, ['SeriesVolumeFn':3, subsumesContentClass:2]), domainV(B, ['SeriesVolumeFn':2]), domainV(A, ['SeriesVolumeFn':1, subsumesContentClass:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['SERIES'=A, 'NUMBER'=B, 'VOLUME'=C], 'Merge', 'OBJECTS', 6584, 'Anonymous', on).
mooCache(instance('PeriodicalIssueFn', 'BinaryFunction'), instance('PeriodicalIssueFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6586, 'Anonymous', on).
mooCache(domainSubclass('PeriodicalIssueFn', 1, 'Periodical'), domainSubclass('PeriodicalIssueFn', 1, 'Periodical'), [], [], 'Merge', 'OBJECTS', 6588, 'Anonymous', on).
mooCache(domain('PeriodicalIssueFn', 2, 'PositiveInteger'), domain('PeriodicalIssueFn', 2, 'PositiveInteger'), [], [], 'Merge', 'OBJECTS', 6590, 'Anonymous', on).
mooCache(rangeSubclass('PeriodicalIssueFn', 'Periodical'), rangeSubclass('PeriodicalIssueFn', 'Periodical'), [], [], 'Merge', 'OBJECTS', 6592, 'Anonymous', on).
mooCache(documentation('PeriodicalIssueFn', string('"A BinaryFunction that maps a subclass of   Periodical and a number to all of the issues of the Periodical corresponding   to the number."')), documentation('PeriodicalIssueFn', string('"A BinaryFunction that maps a subclass of   Periodical and a number to all of the issues of the Periodical corresponding   to the number."')), [], [], 'Merge', 'OBJECTS', 6594, 'Anonymous', on).
mooCache(=>(equal('PeriodicalIssueFn'(A, B), C), subsumesContentClass(A, C)), and(entails(not(subsumesContentClass(A, C)), not(holds('PeriodicalIssueFn', A, B, C))), entails(holds('PeriodicalIssueFn', A, B, C), subsumesContentClass(A, C))), [domainV(C, ['PeriodicalIssueFn':3, subsumesContentClass:2]), domainV(B, ['PeriodicalIssueFn':2]), domainV(A, ['PeriodicalIssueFn':1, subsumesContentClass:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PERIODICAL'=A, 'NUMBER'=B, 'ISSUE'=C], 'Merge', 'OBJECTS', 6596, 'Anonymous', on).
mooCache(subclass('Book', 'Text'), subclass('Book', 'Text'), [], [], 'Merge', 'OBJECTS', 6598, 'Anonymous', on).
mooCache(documentation('Book', string('"A Text that has pages and is bound."')), documentation('Book', string('"A Text that has pages and is bound."')), [], [], 'Merge', 'OBJECTS', 6600, 'Anonymous', on).
mooCache(subclass('Summary', 'Text'), subclass('Summary', 'Text'), [], [], 'Merge', 'OBJECTS', 6602, 'Anonymous', on).
mooCache(documentation('Summary', string('"A short Text that is a summary of another,   longer Text."')), documentation('Summary', string('"A short Text that is a summary of another,   longer Text."')), [], [], 'Merge', 'OBJECTS', 6604, 'Anonymous', on).
mooCache(=>(instance(A, 'Summary'), exists(B, and(instance(B, 'Text'), subsumesContentInstance(B, A)))), and(and(entails(not(instance(B, 'Text')), not(instance(A, 'Summary'))), entails(and(instance(A, 'Summary'), '$existential'(B, '?TEXT2', and(instance('?TEXT2', 'Text'), subsumesContentInstance('?TEXT2', A)))), instance(B, 'Text'))), and(entails(not(subsumesContentInstance(B, A)), not(instance(A, 'Summary'))), entails(and(instance(A, 'Summary'), '$existential'(B, '?TEXT2', and(instance('?TEXT2', 'Text'), subsumesContentInstance('?TEXT2', A)))), subsumesContentInstance(B, A)))), [domainV(B, ['$instanceof':'Text', subsumesContentInstance:1]), domainV(A, ['$instanceof':'Summary', subsumesContentInstance:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?TEXT2', and(instance('?TEXT2', 'Text'), subsumesContentInstance('?TEXT2', A))))], ['TEXT'=A, 'TEXT2'=B], 'Merge', 'OBJECTS', 6606, 'Anonymous', on).
mooCache(subclass('Series', 'ContentBearingObject'), subclass('Series', 'ContentBearingObject'), [], [], 'Merge', 'OBJECTS', 6608, 'Anonymous', on).
mooCache(documentation('Series', string('"A ContentBearingObject consisting of multiple   self-contained units.  Some examples are an encyclopedia containing a couple   dozen volumes, a television series made up of many dozens of episodes, a   film serial, etc."')), documentation('Series', string('"A ContentBearingObject consisting of multiple   self-contained units.  Some examples are an encyclopedia containing a couple   dozen volumes, a television series made up of many dozens of episodes, a   film serial, etc."')), [], [], 'Merge', 'OBJECTS', 6610, 'Anonymous', on).
mooCache(=>(instance(A, 'Series'), exists(B, exists(C, and(instance(C, 'Book'), and(instance(B, 'Book'), and(subsumesContentInstance(A, C), and(subsumesContentInstance(A, B), not(equal(C, B))))))))), and(and(entails(not(instance(C, 'Book')), not(instance(A, 'Series'))), entails(and(instance(A, 'Series'), '$existential'(C, '?BOOK1', and(instance('?BOOK1', 'Book'), and(instance(B, 'Book'), and(subsumesContentInstance(A, '?BOOK1'), and(subsumesContentInstance(A, B), not(equal('?BOOK1', B)))))))), instance(C, 'Book'))), and(and(entails(not(instance(B, 'Book')), not(instance(A, 'Series'))), entails(and(and(instance(A, 'Series'), '$existential'(B, '?BOOK2', exists(C, and(instance(C, 'Book'), and(instance('?BOOK2', 'Book'), and(subsumesContentInstance(A, C), and(subsumesContentInstance(A, '?BOOK2'), not(equal(C, '?BOOK2'))))))))), '$existential'(C, '?BOOK1', and(instance('?BOOK1', 'Book'), and(instance(B, 'Book'), and(subsumesContentInstance(A, '?BOOK1'), and(subsumesContentInstance(A, B), not(equal('?BOOK1', B)))))))), instance(B, 'Book'))), and(and(entails(not(subsumesContentInstance(A, C)), not(instance(A, 'Series'))), entails(and(instance(A, 'Series'), '$existential'(C, '?BOOK1', and(instance('?BOOK1', 'Book'), and(instance(B, 'Book'), and(subsumesContentInstance(A, '?BOOK1'), and(subsumesContentInstance(A, B), not(equal('?BOOK1', B)))))))), subsumesContentInstance(A, C))), and(and(entails(not(subsumesContentInstance(A, B)), not(instance(A, 'Series'))), entails(and(and(instance(A, 'Series'), '$existential'(B, '?BOOK2', exists(C, and(instance(C, 'Book'), and(instance('?BOOK2', 'Book'), and(subsumesContentInstance(A, C), and(subsumesContentInstance(A, '?BOOK2'), not(equal(C, '?BOOK2'))))))))), '$existential'(C, '?BOOK1', and(instance('?BOOK1', 'Book'), and(instance(B, 'Book'), and(subsumesContentInstance(A, '?BOOK1'), and(subsumesContentInstance(A, B), not(equal('?BOOK1', B)))))))), subsumesContentInstance(A, B))), and(entails(equal(C, B), not(instance(A, 'Series'))), entails(instance(A, 'Series'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'Book', subsumesContentInstance:2]), domainV(B, ['$instanceof':'Book', subsumesContentInstance:2]), domainV(A, ['$instanceof':'Series', subsumesContentInstance:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?BOOK2', exists(C, and(instance(C, 'Book'), and(instance('?BOOK2', 'Book'), and(subsumesContentInstance(A, C), and(subsumesContentInstance(A, '?BOOK2'), not(equal(C, '?BOOK2'))))))))), replaceConsVar(C, '$existential'('?BOOK1', and(instance('?BOOK1', 'Book'), and(instance(B, 'Book'), and(subsumesContentInstance(A, '?BOOK1'), and(subsumesContentInstance(A, B), not(equal('?BOOK1', B))))))))], ['SERIES'=A, 'BOOK1'=C, 'BOOK2'=B], 'Merge', 'OBJECTS', 6612, 'Anonymous', on).
mooCache(subclass('Periodical', 'Series'), subclass('Periodical', 'Series'), [], [], 'Merge', 'OBJECTS', 6614, 'Anonymous', on).
mooCache(documentation('Periodical', string('"A Series whose elements are published separately   and on a periodic basis."')), documentation('Periodical', string('"A Series whose elements are published separately   and on a periodic basis."')), [], [], 'Merge', 'OBJECTS', 6616, 'Anonymous', on).
mooCache(subclass('Article', 'Text'), subclass('Article', 'Text'), [], [], 'Merge', 'OBJECTS', 6618, 'Anonymous', on).
mooCache(documentation('Article', string('"An article in a Book or Series."')), documentation('Article', string('"An article in a Book or Series."')), [], [], 'Merge', 'OBJECTS', 6620, 'Anonymous', on).
mooCache(=>(instance(A, 'Article'), exists(B, and(instance(B, 'Book'), subsumesContentInstance(B, A)))), and(and(entails(not(instance(B, 'Book')), not(instance(A, 'Article'))), entails(and(instance(A, 'Article'), '$existential'(B, '?BOOK', and(instance('?BOOK', 'Book'), subsumesContentInstance('?BOOK', A)))), instance(B, 'Book'))), and(entails(not(subsumesContentInstance(B, A)), not(instance(A, 'Article'))), entails(and(instance(A, 'Article'), '$existential'(B, '?BOOK', and(instance('?BOOK', 'Book'), subsumesContentInstance('?BOOK', A)))), subsumesContentInstance(B, A)))), [domainV(B, ['$instanceof':'Book', subsumesContentInstance:1]), domainV(A, ['$instanceof':'Article', subsumesContentInstance:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BOOK', and(instance('?BOOK', 'Book'), subsumesContentInstance('?BOOK', A))))], ['ARTICLE'=A, 'BOOK'=B], 'Merge', 'OBJECTS', 6622, 'Anonymous', on).
mooCache(subclass('Certificate', 'Text'), subclass('Certificate', 'Text'), [], [], 'Merge', 'OBJECTS', 6624, 'Anonymous', on).
mooCache(documentation('Certificate', string('"A Text that confers a right or obligation   on the holder of the Certificate.  Note that the right or obligation   need not be a legal one, as in the case of an academic diploma that grants   certain privileges in the professional world."')), documentation('Certificate', string('"A Text that confers a right or obligation   on the holder of the Certificate.  Note that the right or obligation   need not be a legal one, as in the case of an academic diploma that grants   certain privileges in the professional world."')), [], [], 'Merge', 'OBJECTS', 6626, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Certificate'), possesses(B, A)), exists(C, or(confersRight(C, A, B), confersObligation(C, A, B)))), and(entails(and(possesses(B, A), and(not(confersRight(C, A, B)), not(confersObligation(C, A, B)))), not(instance(A, 'Certificate'))), and(entails(and(instance(A, 'Certificate'), and(not(confersRight(C, A, B)), not(confersObligation(C, A, B)))), not(possesses(B, A))), and(entails(and(and(and(instance(A, 'Certificate'), possesses(B, A)), not(confersObligation(C, A, B))), '$existential'(C, '?PROC', or(confersRight('?PROC', A, B), confersObligation('?PROC', A, B)))), confersRight(C, A, B)), entails(and(and(and(instance(A, 'Certificate'), possesses(B, A)), not(confersRight(C, A, B))), '$existential'(C, '?PROC', or(confersRight('?PROC', A, B), confersObligation('?PROC', A, B)))), confersObligation(C, A, B))))), [domainV(C, [confersObligation:1, confersRight:1]), domainV(B, [confersObligation:3, confersRight:3, possesses:1]), domainV(A, ['$instanceof':'Certificate', confersObligation:2, confersRight:2, possesses:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PROC', or(confersRight('?PROC', A, B), confersObligation('?PROC', A, B))))], ['DOC'=A, 'AGENT'=B, 'PROC'=C], 'Merge', 'OBJECTS', 6628, 'Anonymous', on).
mooCache(subclass('Patent', 'Certificate'), subclass('Patent', 'Certificate'), [], [], 'Merge', 'OBJECTS', 6630, 'Anonymous', on).
mooCache(documentation('Patent', string('"A Certificate that expresses the content of an   invention that has been accorded legal protection by a governemental   entity."')), documentation('Patent', string('"A Certificate that expresses the content of an   invention that has been accorded legal protection by a governemental   entity."')), [], [], 'Merge', 'OBJECTS', 6632, 'Anonymous', on).
mooCache(subclass('SubmolecularObject', 'CorpuscularObject'), subclass('SubmolecularObject', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6634, 'Anonymous', on).
mooCache(documentation('SubmolecularObject', string('"The Class of CorpuscularObjects   that compose Molecules."')), documentation('SubmolecularObject', string('"The Class of CorpuscularObjects   that compose Molecules."')), [], [], 'Merge', 'OBJECTS', 6636, 'Anonymous', on).
mooCache(=>(instance(A, 'SubmolecularObject'), exists(B, and(instance(B, 'Molecule'), part(A, B)))), and(and(entails(not(instance(B, 'Molecule')), not(instance(A, 'SubmolecularObject'))), entails(and(instance(A, 'SubmolecularObject'), '$existential'(B, '?MOLE', and(instance('?MOLE', 'Molecule'), part(A, '?MOLE')))), instance(B, 'Molecule'))), and(entails(not(part(A, B)), not(instance(A, 'SubmolecularObject'))), entails(and(instance(A, 'SubmolecularObject'), '$existential'(B, '?MOLE', and(instance('?MOLE', 'Molecule'), part(A, '?MOLE')))), part(A, B)))), [domainV(B, ['$instanceof':'Molecule', part:2]), domainV(A, ['$instanceof':'SubmolecularObject', part:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?MOLE', and(instance('?MOLE', 'Molecule'), part(A, '?MOLE'))))], ['SUBMOLE'=A, 'MOLE'=B], 'Merge', 'OBJECTS', 6638, 'Anonymous', on).
mooCache(subclass('Molecule', 'CompoundSubstance'), subclass('Molecule', 'CompoundSubstance'), [], [], 'Merge', 'OBJECTS', 6640, 'Anonymous', on).
mooCache(documentation('Molecule', string('"A molecule is the smallest unit of matter of a   CompoundSubstance that retains all the physical and chemical properties   of that substance, e.g., Ne, H2, H2O.  A molecule is two or more Atoms   linked by a chemical bond."')), documentation('Molecule', string('"A molecule is the smallest unit of matter of a   CompoundSubstance that retains all the physical and chemical properties   of that substance, e.g., Ne, H2, H2O.  A molecule is two or more Atoms   linked by a chemical bond."')), [], [], 'Merge', 'OBJECTS', 6642, 'Anonymous', on).
mooCache(=>(instance(A, 'Molecule'), exists(B, exists(C, and(instance(C, 'Atom'), and(instance(B, 'Atom'), and(part(C, A), and(part(B, A), not(equal(C, B))))))))), and(and(entails(not(instance(C, 'Atom')), not(instance(A, 'Molecule'))), entails(and(instance(A, 'Molecule'), '$existential'(C, '?ATOM1', and(instance('?ATOM1', 'Atom'), and(instance(B, 'Atom'), and(part('?ATOM1', A), and(part(B, A), not(equal('?ATOM1', B)))))))), instance(C, 'Atom'))), and(and(entails(not(instance(B, 'Atom')), not(instance(A, 'Molecule'))), entails(and(and(instance(A, 'Molecule'), '$existential'(B, '?ATOM2', exists(C, and(instance(C, 'Atom'), and(instance('?ATOM2', 'Atom'), and(part(C, A), and(part('?ATOM2', A), not(equal(C, '?ATOM2'))))))))), '$existential'(C, '?ATOM1', and(instance('?ATOM1', 'Atom'), and(instance(B, 'Atom'), and(part('?ATOM1', A), and(part(B, A), not(equal('?ATOM1', B)))))))), instance(B, 'Atom'))), and(and(entails(not(part(C, A)), not(instance(A, 'Molecule'))), entails(and(instance(A, 'Molecule'), '$existential'(C, '?ATOM1', and(instance('?ATOM1', 'Atom'), and(instance(B, 'Atom'), and(part('?ATOM1', A), and(part(B, A), not(equal('?ATOM1', B)))))))), part(C, A))), and(and(entails(not(part(B, A)), not(instance(A, 'Molecule'))), entails(and(and(instance(A, 'Molecule'), '$existential'(B, '?ATOM2', exists(C, and(instance(C, 'Atom'), and(instance('?ATOM2', 'Atom'), and(part(C, A), and(part('?ATOM2', A), not(equal(C, '?ATOM2'))))))))), '$existential'(C, '?ATOM1', and(instance('?ATOM1', 'Atom'), and(instance(B, 'Atom'), and(part('?ATOM1', A), and(part(B, A), not(equal('?ATOM1', B)))))))), part(B, A))), and(entails(equal(C, B), not(instance(A, 'Molecule'))), entails(instance(A, 'Molecule'), not(equal(C, B)))))))), [domainV(C, ['$instanceof':'Atom', part:1]), domainV(B, ['$instanceof':'Atom', part:1]), domainV(A, ['$instanceof':'Molecule', part:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?ATOM2', exists(C, and(instance(C, 'Atom'), and(instance('?ATOM2', 'Atom'), and(part(C, A), and(part('?ATOM2', A), not(equal(C, '?ATOM2'))))))))), replaceConsVar(C, '$existential'('?ATOM1', and(instance('?ATOM1', 'Atom'), and(instance(B, 'Atom'), and(part('?ATOM1', A), and(part(B, A), not(equal('?ATOM1', B))))))))], ['MOLE'=A, 'ATOM1'=C, 'ATOM2'=B], 'Merge', 'OBJECTS', 6644, 'Anonymous', on).
mooCache(subclass('Atom', 'SubmolecularObject'), subclass('Atom', 'SubmolecularObject'), [], [], 'Merge', 'OBJECTS', 6646, 'Anonymous', on).
mooCache(documentation('Atom', string('"An extremely small unit of matter that retains its   identity in Chemical reactions.  It consists of an AtomicNucleus and   Electrons surrounding the AtomicNucleus."')), documentation('Atom', string('"An extremely small unit of matter that retains its   identity in Chemical reactions.  It consists of an AtomicNucleus and   Electrons surrounding the AtomicNucleus."')), [], [], 'Merge', 'OBJECTS', 6648, 'Anonymous', on).
mooCache(=>(instance(A, 'Atom'), exists(B, exists(C, and(component(C, A), and(component(B, A), and(instance(C, 'Proton'), instance(B, 'Electron'))))))), and(and(entails(not(component(C, A)), not(instance(A, 'Atom'))), entails(and(instance(A, 'Atom'), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), component(C, A))), and(and(entails(not(component(B, A)), not(instance(A, 'Atom'))), entails(and(and(instance(A, 'Atom'), '$existential'(B, '?ELECTRON', exists(C, and(component(C, A), and(component('?ELECTRON', A), and(instance(C, 'Proton'), instance('?ELECTRON', 'Electron'))))))), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), component(B, A))), and(and(entails(not(instance(C, 'Proton')), not(instance(A, 'Atom'))), entails(and(instance(A, 'Atom'), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), instance(C, 'Proton'))), and(entails(not(instance(B, 'Electron')), not(instance(A, 'Atom'))), entails(and(and(instance(A, 'Atom'), '$existential'(B, '?ELECTRON', exists(C, and(component(C, A), and(component('?ELECTRON', A), and(instance(C, 'Proton'), instance('?ELECTRON', 'Electron'))))))), '$existential'(C, '?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron')))))), instance(B, 'Electron')))))), [domainV(C, ['$instanceof':'Proton', component:1]), domainV(B, ['$instanceof':'Electron', component:1]), domainV(A, ['$instanceof':'Atom', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?ELECTRON', exists(C, and(component(C, A), and(component('?ELECTRON', A), and(instance(C, 'Proton'), instance('?ELECTRON', 'Electron'))))))), replaceConsVar(C, '$existential'('?PROTON', and(component('?PROTON', A), and(component(B, A), and(instance('?PROTON', 'Proton'), instance(B, 'Electron'))))))], ['ATOM'=A, 'PROTON'=C, 'ELECTRON'=B], 'Merge', 'OBJECTS', 6650, 'Anonymous', on).
mooCache(=>(instance(A, 'Atom'), forall(B, forall(C, =>(and(component(C, A), and(component(B, A), and(instance(C, 'AtomicNucleus'), instance(B, 'AtomicNucleus')))), equal(C, B))))), and(entails(and(not(equal(C, B)), and(component(C, A), and(component(B, A), and(instance(C, 'AtomicNucleus'), instance(B, 'AtomicNucleus'))))), not(instance(A, 'Atom'))), and(entails(and(instance(A, 'Atom'), and(component(C, A), and(component(B, A), and(instance(C, 'AtomicNucleus'), instance(B, 'AtomicNucleus'))))), equal(C, B)), and(entails(and(instance(A, 'Atom'), and(not(equal(C, B)), and(component(B, A), and(instance(C, 'AtomicNucleus'), instance(B, 'AtomicNucleus'))))), not(component(C, A))), and(entails(and(instance(A, 'Atom'), and(not(equal(C, B)), and(component(C, A), and(instance(C, 'AtomicNucleus'), instance(B, 'AtomicNucleus'))))), not(component(B, A))), and(entails(and(instance(A, 'Atom'), and(not(equal(C, B)), and(component(C, A), and(component(B, A), instance(B, 'AtomicNucleus'))))), not(instance(C, 'AtomicNucleus'))), entails(and(instance(A, 'Atom'), and(not(equal(C, B)), and(component(C, A), and(component(B, A), instance(C, 'AtomicNucleus'))))), not(instance(B, 'AtomicNucleus')))))))), [domainV(C, ['$instanceof':'AtomicNucleus', component:1]), domainV(B, ['$instanceof':'AtomicNucleus', component:1]), domainV(A, ['$instanceof':'Atom', component:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['ATOM'=A, 'NUCLEUS1'=C, 'NUCLEUS2'=B], 'Merge', 'OBJECTS', 6652, 'Anonymous', on).
mooCache(subclass('SubatomicParticle', 'SubmolecularObject'), subclass('SubatomicParticle', 'SubmolecularObject'), [], [], 'Merge', 'OBJECTS', 6654, 'Anonymous', on).
mooCache(documentation('SubatomicParticle', string('"The class of SubmolecularObjects that   are smaller than Atoms and often compose Atoms."')), documentation('SubatomicParticle', string('"The class of SubmolecularObjects that   are smaller than Atoms and often compose Atoms."')), [], [], 'Merge', 'OBJECTS', 6656, 'Anonymous', on).
mooCache(subclass('AtomicNucleus', 'SubatomicParticle'), subclass('AtomicNucleus', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6658, 'Anonymous', on).
mooCache(documentation('AtomicNucleus', string('"The core of the Atom.  It is composed of   Protons and Neutrons."')), documentation('AtomicNucleus', string('"The core of the Atom.  It is composed of   Protons and Neutrons."')), [], [], 'Merge', 'OBJECTS', 6660, 'Anonymous', on).
mooCache(=>(instance(A, 'AtomicNucleus'), exists(B, exists(C, and(component(C, A), and(component(B, A), and(instance(C, 'Neutron'), instance(B, 'Proton'))))))), and(and(entails(not(component(C, A)), not(instance(A, 'AtomicNucleus'))), entails(and(instance(A, 'AtomicNucleus'), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), component(C, A))), and(and(entails(not(component(B, A)), not(instance(A, 'AtomicNucleus'))), entails(and(and(instance(A, 'AtomicNucleus'), '$existential'(B, '?PROTON', exists(C, and(component(C, A), and(component('?PROTON', A), and(instance(C, 'Neutron'), instance('?PROTON', 'Proton'))))))), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), component(B, A))), and(and(entails(not(instance(C, 'Neutron')), not(instance(A, 'AtomicNucleus'))), entails(and(instance(A, 'AtomicNucleus'), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), instance(C, 'Neutron'))), and(entails(not(instance(B, 'Proton')), not(instance(A, 'AtomicNucleus'))), entails(and(and(instance(A, 'AtomicNucleus'), '$existential'(B, '?PROTON', exists(C, and(component(C, A), and(component('?PROTON', A), and(instance(C, 'Neutron'), instance('?PROTON', 'Proton'))))))), '$existential'(C, '?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton')))))), instance(B, 'Proton')))))), [domainV(C, ['$instanceof':'Neutron', component:1]), domainV(B, ['$instanceof':'Proton', component:1]), domainV(A, ['$instanceof':'AtomicNucleus', component:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PROTON', exists(C, and(component(C, A), and(component('?PROTON', A), and(instance(C, 'Neutron'), instance('?PROTON', 'Proton'))))))), replaceConsVar(C, '$existential'('?NEUTRON', and(component('?NEUTRON', A), and(component(B, A), and(instance('?NEUTRON', 'Neutron'), instance(B, 'Proton'))))))], ['NUCLEUS'=A, 'NEUTRON'=C, 'PROTON'=B], 'Merge', 'OBJECTS', 6662, 'Anonymous', on).
mooCache(subclass('Electron', 'SubatomicParticle'), subclass('Electron', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6664, 'Anonymous', on).
mooCache(documentation('Electron', string('"SubatomicParticles that surround the   AtomicNucleus.  They have a negative charge."')), documentation('Electron', string('"SubatomicParticles that surround the   AtomicNucleus.  They have a negative charge."')), [], [], 'Merge', 'OBJECTS', 6666, 'Anonymous', on).
mooCache(subclass('Proton', 'SubatomicParticle'), subclass('Proton', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6668, 'Anonymous', on).
mooCache(documentation('Proton', string('"Components of the AtomicNucleus.  They have a   positive charge."')), documentation('Proton', string('"Components of the AtomicNucleus.  They have a   positive charge."')), [], [], 'Merge', 'OBJECTS', 6670, 'Anonymous', on).
mooCache(subclass('Neutron', 'SubatomicParticle'), subclass('Neutron', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6672, 'Anonymous', on).
mooCache(documentation('Neutron', string('"Components of the AtomicNucleus.  They have no   charge."')), documentation('Neutron', string('"Components of the AtomicNucleus.  They have no   charge."')), [], [], 'Merge', 'OBJECTS', 6674, 'Anonymous', on).
mooCache(subclass('Artifact', 'CorpuscularObject'), subclass('Artifact', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6676, 'Anonymous', on).
mooCache(documentation('Artifact', string('"A CorpuscularObject that is the product of an   IntentionalProcess."')), documentation('Artifact', string('"A CorpuscularObject that is the product of an   IntentionalProcess."')), [], [], 'Merge', 'OBJECTS', 6678, 'Anonymous', on).
mooCache(=>(instance(A, 'Artifact'), exists(B, and(instance(C, 'Making'), result(B, A)))), and(and(entails(not(instance(C, 'Making')), not(instance(A, 'Artifact'))), entails(instance(A, 'Artifact'), instance(C, 'Making'))), and(entails(not(result(B, A)), not(instance(A, 'Artifact'))), entails(and(instance(A, 'Artifact'), '$existential'(B, '?MAKING', and(instance(C, 'Making'), result('?MAKING', A)))), result(B, A)))), [domainV(C, ['$instanceof':'Making']), domainV(B, [result:1]), domainV(A, ['$instanceof':'Artifact', result:2]), domainV(D, []), forall(A), forall(C), replaceConsVar(B, '$existential'('?MAKING', and(instance(C, 'Making'), result('?MAKING', A))))], ['ARTIFACT'=A, 'MAKING'=B, 'PROCESS'=C], 'Merge', 'OBJECTS', 6680, 'Anonymous', on).
mooCache(subclass('Product', 'Artifact'), subclass('Product', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6682, 'Anonymous', on).
mooCache(documentation('Product', string('"An Artifact that is produced by Manufacture and   that is intended to be sold."')), documentation('Product', string('"An Artifact that is produced by Manufacture and   that is intended to be sold."')), [], [], 'Merge', 'OBJECTS', 6684, 'Anonymous', on).
mooCache(=>(instance(A, 'Product'), exists(B, and(instance(B, 'Manufacture'), result(B, A)))), and(and(entails(not(instance(B, 'Manufacture')), not(instance(A, 'Product'))), entails(and(instance(A, 'Product'), '$existential'(B, '?MANUFACTURE', and(instance('?MANUFACTURE', 'Manufacture'), result('?MANUFACTURE', A)))), instance(B, 'Manufacture'))), and(entails(not(result(B, A)), not(instance(A, 'Product'))), entails(and(instance(A, 'Product'), '$existential'(B, '?MANUFACTURE', and(instance('?MANUFACTURE', 'Manufacture'), result('?MANUFACTURE', A)))), result(B, A)))), [domainV(B, ['$instanceof':'Manufacture', result:1]), domainV(A, ['$instanceof':'Product', result:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?MANUFACTURE', and(instance('?MANUFACTURE', 'Manufacture'), result('?MANUFACTURE', A))))], ['PRODUCT'=A, 'MANUFACTURE'=B], 'Merge', 'OBJECTS', 6686, 'Anonymous', on).
mooCache(subclass('Award', 'Artifact'), subclass('Award', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6688, 'Anonymous', on).
mooCache(documentation('Award', string('"An Artifact which is given to someone in honor of   something that he/she has done."')), documentation('Award', string('"An Artifact which is given to someone in honor of   something that he/she has done."')), [], [], 'Merge', 'OBJECTS', 6690, 'Anonymous', on).
mooCache(instance(version, 'BinaryPredicate'), instance(version, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6692, 'Anonymous', on).
mooCache(instance(version, 'AsymmetricRelation'), instance(version, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6694, 'Anonymous', on).
mooCache(instance(version, 'TransitiveRelation'), instance(version, 'TransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6696, 'Anonymous', on).
mooCache(domainSubclass(version, 1, 'Artifact'), domainSubclass(version, 1, 'Artifact'), [], [], 'Merge', 'OBJECTS', 6698, 'Anonymous', on).
mooCache(domainSubclass(version, 2, 'Artifact'), domainSubclass(version, 2, 'Artifact'), [], [], 'Merge', 'OBJECTS', 6700, 'Anonymous', on).
mooCache(documentation(version, string('"Some Artifacts have a life cycle with discrete   stages or versions.  (version ARTIFACT1 ARTIFACT2) means that ARTIFACT1   is a version of ARTIFACT2.  Note that this Predicate relates subclasses of   Artifact and not instances."')), documentation(version, string('"Some Artifacts have a life cycle with discrete   stages or versions.  (version ARTIFACT1 ARTIFACT2) means that ARTIFACT1   is a version of ARTIFACT2.  Note that this Predicate relates subclasses of   Artifact and not instances."')), [], [], 'Merge', 'OBJECTS', 6702, 'Anonymous', on).
mooCache(=>(version(A, B), subclass(A, B)), and(entails(not(subclass(A, B)), not(version(A, B))), entails(version(A, B), subclass(A, B))), [domainV(B, [subclass:2, version:2]), domainV(A, [subclass:1, version:1]), domainV(C, []), forall(A), forall(B)], ['ARTIFACT1'=A, 'ARTIFACT2'=B], 'Merge', 'OBJECTS', 6704, 'Anonymous', on).
mooCache(subclass('StationaryArtifact', 'Artifact'), subclass('StationaryArtifact', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6714, 'Anonymous', on).
mooCache(documentation('StationaryArtifact', string('"A StationaryArtifact is an Artifact   that has a fixed spatial location.  Most instances of this Class are   architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers,   single-family houses, etc."')), documentation('StationaryArtifact', string('"A StationaryArtifact is an Artifact   that has a fixed spatial location.  Most instances of this Class are   architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers,   single-family houses, etc."')), [], [], 'Merge', 'OBJECTS', 6716, 'Anonymous', on).
mooCache(=>(instance(A, 'StationaryArtifact'), exists(B, forall(C, =>(and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C)), equal('WhereFn'(A, C), B))))), and(entails(and(not(holds('WhereFn', A, C, B)), and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C))), not(instance(A, 'StationaryArtifact'))), and(entails(and(and(instance(A, 'StationaryArtifact'), and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C))), '$existential'(B, '?PLACE', forall(C, =>(and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C)), holds('WhereFn', A, C, '?PLACE'))))), holds('WhereFn', A, C, B)), and(entails(and(instance(A, 'StationaryArtifact'), and(not(holds('WhereFn', A, C, B)), beforeOrEqual('BeginFn'('WhenFn'(A)), C))), not(beforeOrEqual(C, 'EndFn'('WhenFn'(A))))), entails(and(instance(A, 'StationaryArtifact'), and(not(holds('WhereFn', A, C, B)), beforeOrEqual(C, 'EndFn'('WhenFn'(A))))), not(beforeOrEqual('BeginFn'('WhenFn'(A)), C)))))), [domainV(C, ['WhereFn':2, beforeOrEqual:1, beforeOrEqual:2]), domainV(B, ['WhereFn':3]), domainV(A, ['$instanceof':'StationaryArtifact', 'WhenFn':1, 'WhereFn':1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PLACE', forall(C, =>(and(beforeOrEqual(C, 'EndFn'('WhenFn'(A))), beforeOrEqual('BeginFn'('WhenFn'(A)), C)), holds('WhereFn', A, C, '?PLACE'))))), forall(C)], ['ARTIFACT'=A, 'PLACE'=B, 'TIME'=C], 'Merge', 'OBJECTS', 6718, 'Anonymous', on).
mooCache(subclass('Building', 'StationaryArtifact'), subclass('Building', 'StationaryArtifact'), [], [], 'Merge', 'OBJECTS', 6720, 'Anonymous', on).
mooCache(documentation('Building', string('"The Class of StationaryArtifacts which are   intended to house Humans and their activities."')), documentation('Building', string('"The Class of StationaryArtifacts which are   intended to house Humans and their activities."')), [], [], 'Merge', 'OBJECTS', 6722, 'Anonymous', on).
mooCache(=>(instance(A, 'Building'), exists(B, and(instance(B, 'Human'), or(inhabits(B, A), exists(C, and(agent(C, B), located(C, A))))))), and(and(entails(not(instance(B, 'Human')), not(instance(A, 'Building'))), entails(and(and(instance(A, 'Building'), '$existential'(B, '?HUMAN', and(instance('?HUMAN', 'Human'), or(inhabits('?HUMAN', A), exists(C, and(agent(C, '?HUMAN'), located(C, A))))))), '$existential'(C, '?ACT', and(agent('?ACT', B), located('?ACT', A)))), instance(B, 'Human'))), and(and(entails(and(not(inhabits(B, A)), not(agent(C, B))), not(instance(A, 'Building'))), and(entails(and(and(and(instance(A, 'Building'), not(agent(C, B))), '$existential'(B, '?HUMAN', and(instance('?HUMAN', 'Human'), or(inhabits('?HUMAN', A), exists(C, and(agent(C, '?HUMAN'), located(C, A))))))), '$existential'(C, '?ACT', and(agent('?ACT', B), located('?ACT', A)))), inhabits(B, A)), entails(and(and(and(instance(A, 'Building'), not(inhabits(B, A))), '$existential'(B, '?HUMAN', and(instance('?HUMAN', 'Human'), or(inhabits('?HUMAN', A), exists(C, and(agent(C, '?HUMAN'), located(C, A))))))), '$existential'(C, '?ACT', and(agent('?ACT', B), located('?ACT', A)))), agent(C, B)))), and(entails(and(not(inhabits(B, A)), not(located(C, A))), not(instance(A, 'Building'))), and(entails(and(and(and(instance(A, 'Building'), not(located(C, A))), '$existential'(B, '?HUMAN', and(instance('?HUMAN', 'Human'), or(inhabits('?HUMAN', A), exists(C, and(agent(C, '?HUMAN'), located(C, A))))))), '$existential'(C, '?ACT', and(agent('?ACT', B), located('?ACT', A)))), inhabits(B, A)), entails(and(and(instance(A, 'Building'), not(inhabits(B, A))), '$existential'(C, '?ACT', and(agent('?ACT', B), located('?ACT', A)))), located(C, A)))))), [domainV(C, [agent:1, located:1]), domainV(B, ['$instanceof':'Human', agent:2, inhabits:1]), domainV(A, ['$instanceof':'Building', inhabits:2, located:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?HUMAN', and(instance('?HUMAN', 'Human'), or(inhabits('?HUMAN', A), exists(C, and(agent(C, '?HUMAN'), located(C, A))))))), replaceConsVar(C, '$existential'('?ACT', and(agent('?ACT', B), located('?ACT', A))))], ['BUILDING'=A, 'HUMAN'=B, 'ACT'=C], 'Merge', 'OBJECTS', 6724, 'Anonymous', on).
mooCache(subclass('Room', 'StationaryArtifact'), subclass('Room', 'StationaryArtifact'), [], [], 'Merge', 'OBJECTS', 6726, 'Anonymous', on).
mooCache(documentation('Room', string('"A component of a Building which has a specific   purpose, e.g. sleeping, bathing, cooking, entertainment, etc."')), documentation('Room', string('"A component of a Building which has a specific   purpose, e.g. sleeping, bathing, cooking, entertainment, etc."')), [], [], 'Merge', 'OBJECTS', 6728, 'Anonymous', on).
mooCache(=>(instance(A, 'Room'), exists(B, and(instance(B, 'Building'), component(A, B)))), and(and(entails(not(instance(B, 'Building')), not(instance(A, 'Room'))), entails(and(instance(A, 'Room'), '$existential'(B, '?BUILD', and(instance('?BUILD', 'Building'), component(A, '?BUILD')))), instance(B, 'Building'))), and(entails(not(component(A, B)), not(instance(A, 'Room'))), entails(and(instance(A, 'Room'), '$existential'(B, '?BUILD', and(instance('?BUILD', 'Building'), component(A, '?BUILD')))), component(A, B)))), [domainV(B, ['$instanceof':'Building', component:2]), domainV(A, ['$instanceof':'Room', component:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?BUILD', and(instance('?BUILD', 'Building'), component(A, '?BUILD'))))], ['ROOM'=A, 'BUILD'=B], 'Merge', 'OBJECTS', 6730, 'Anonymous', on).
mooCache(subclass('ArtWork', 'Artifact'), subclass('ArtWork', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6732, 'Anonymous', on).
mooCache(documentation('ArtWork', string('"Artifacts that are created primarily for   aesthetic appreciation.  Note that this Class does not include   most examples of architecture, which belong under StationaryArtifact."')), documentation('ArtWork', string('"Artifacts that are created primarily for   aesthetic appreciation.  Note that this Class does not include   most examples of architecture, which belong under StationaryArtifact."')), [], [], 'Merge', 'OBJECTS', 6734, 'Anonymous', on).
mooCache(subclass('Fabric', 'Artifact'), subclass('Fabric', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6736, 'Anonymous', on).
mooCache(documentation('Fabric', string('"Artifacts that are created by weaving together   natural or synthetic fibers.  Note that this Class includes articles   that are created by stitching together various types of fabrics, e.g.   bedspreads.  On the other hand, Clothing is not a subclass of Fabric,   because many clothing items contain elements that are not fabrics."')), documentation('Fabric', string('"Artifacts that are created by weaving together   natural or synthetic fibers.  Note that this Class includes articles   that are created by stitching together various types of fabrics, e.g.   bedspreads.  On the other hand, Clothing is not a subclass of Fabric,   because many clothing items contain elements that are not fabrics."')), [], [], 'Merge', 'OBJECTS', 6738, 'Anonymous', on).
mooCache(subclass('Clothing', 'Artifact'), subclass('Clothing', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6740, 'Anonymous', on).
mooCache(documentation('Clothing', string('"Artifact made out of fabrics and/or other   materials that are used to cover the bodies of Humans."')), documentation('Clothing', string('"Artifact made out of fabrics and/or other   materials that are used to cover the bodies of Humans."')), [], [], 'Merge', 'OBJECTS', 6742, 'Anonymous', on).
mooCache(subclass('Device', 'Artifact'), subclass('Device', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6744, 'Anonymous', on).
mooCache(documentation('Device', string('"A Device is an Artifact whose purpose is to   serve as an instrument in a specific type of task."')), documentation('Device', string('"A Device is an Artifact whose purpose is to   serve as an instrument in a specific type of task."')), [], [], 'Merge', 'OBJECTS', 6746, 'Anonymous', on).
mooCache(=>(instance(A, 'Device'), exists(B, and(instance(B, 'Process'), instrument(B, A)))), and(and(entails(not(instance(B, 'Process')), not(instance(A, 'Device'))), entails(and(instance(A, 'Device'), '$existential'(B, '?PROC', and(instance('?PROC', 'Process'), instrument('?PROC', A)))), instance(B, 'Process'))), and(entails(not(instrument(B, A)), not(instance(A, 'Device'))), entails(and(instance(A, 'Device'), '$existential'(B, '?PROC', and(instance('?PROC', 'Process'), instrument('?PROC', A)))), instrument(B, A)))), [domainV(B, ['$instanceof':'Process', instrument:1]), domainV(A, ['$instanceof':'Device', instrument:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PROC', and(instance('?PROC', 'Process'), instrument('?PROC', A))))], ['DEVICE'=A, 'PROC'=B], 'Merge', 'OBJECTS', 6748, 'Anonymous', on).
mooCache(subclass('MusicalInstrument', 'Device'), subclass('MusicalInstrument', 'Device'), [], [], 'Merge', 'OBJECTS', 6750, 'Anonymous', on).
mooCache(documentation('MusicalInstrument', string('"A Device which is manipulated by a Human   and whose purpose is to produce Music."')), documentation('MusicalInstrument', string('"A Device which is manipulated by a Human   and whose purpose is to produce Music."')), [], [], 'Merge', 'OBJECTS', 6752, 'Anonymous', on).
mooCache(=>(instance(A, 'MusicalInstrument'), hasPurpose(A, exists(B, and(instance(B, 'Music'), instrument(B, A))))), and(and(entails(not(hasPurpose(A, instance(B, 'Music'))), not(instance(A, 'MusicalInstrument'))), entails(and(instance(A, 'MusicalInstrument'), '$existential'(B, '?MUSIC', and(hasPurpose(A, instance('?MUSIC', 'Music')), hasPurpose(A, instrument('?MUSIC', A))))), hasPurpose(A, instance(B, 'Music')))), and(entails(not(hasPurpose(A, instrument(B, A))), not(instance(A, 'MusicalInstrument'))), entails(and(instance(A, 'MusicalInstrument'), '$existential'(B, '?MUSIC', and(hasPurpose(A, instance('?MUSIC', 'Music')), hasPurpose(A, instrument('?MUSIC', A))))), hasPurpose(A, instrument(B, A))))), [domainV(B, ['$instanceof':'Music', instrument:1]), domainV(A, ['$instanceof':'MusicalInstrument', hasPurpose:1, instrument:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?MUSIC', and(hasPurpose(A, instance('?MUSIC', 'Music')), hasPurpose(A, instrument('?MUSIC', A)))))], ['INSTRUMENT'=A, 'MUSIC'=B], 'Merge', 'OBJECTS', 6754, 'Anonymous', on).
mooCache(subclass('TransportationDevice', 'Device'), subclass('TransportationDevice', 'Device'), [], [], 'Merge', 'OBJECTS', 6756, 'Anonymous', on).
mooCache(documentation('TransportationDevice', string('"A TransportationDevice is a Device   which serves as an instrument in Transportation Processes."')), documentation('TransportationDevice', string('"A TransportationDevice is a Device   which serves as an instrument in Transportation Processes."')), [], [], 'Merge', 'OBJECTS', 6758, 'Anonymous', on).
mooCache(subclass('Weapon', 'Device'), subclass('Weapon', 'Device'), [], [], 'Merge', 'OBJECTS', 6760, 'Anonymous', on).
mooCache(documentation('Weapon', string('"The Class of Devices that are designed   primarily to damage or destroy Humans/Animals or the places   inhabited by Humans/Animals."')), documentation('Weapon', string('"The Class of Devices that are designed   primarily to damage or destroy Humans/Animals or the places   inhabited by Humans/Animals."')), [], [], 'Merge', 'OBJECTS', 6762, 'Anonymous', on).
mooCache(=>(instance(A, 'Weapon'), hasPurpose(A, exists(B, and(or(instance(B, 'Damaging'), instance(B, 'Destruction')), forall(C, =>(patient(B, C), or(instance(C, 'Animal'), exists(D, and(instance(D, 'Animal'), inhabits(D, C)))))))))), and(and(entails(and(not(hasPurpose(A, instance(B, 'Damaging'))), not(hasPurpose(A, instance(B, 'Destruction')))), not(instance(A, 'Weapon'))), and(entails(and(and(and(instance(A, 'Weapon'), not(hasPurpose(A, instance(B, 'Destruction')))), '$existential'(B, '?DEST', and(or(hasPurpose(A, instance('?DEST', 'Damaging')), hasPurpose(A, instance('?DEST', 'Destruction'))), forall(C, =>(hasPurpose(A, patient('?DEST', C)), or(hasPurpose(A, instance(C, 'Animal')), exists(D, and(hasPurpose(A, instance(D, 'Animal')), hasPurpose(A, inhabits(D, C)))))))))), '$existential'(D, '?ANIMAL', and(hasPurpose(A, instance('?ANIMAL', 'Animal')), hasPurpose(A, inhabits('?ANIMAL', C))))), hasPurpose(A, instance(B, 'Damaging'))), entails(and(and(and(instance(A, 'Weapon'), not(hasPurpose(A, instance(B, 'Damaging')))), '$existential'(B, '?DEST', and(or(hasPurpose(A, instance('?DEST', 'Damaging')), hasPurpose(A, instance('?DEST', 'Destruction'))), forall(C, =>(hasPurpose(A, patient('?DEST', C)), or(hasPurpose(A, instance(C, 'Animal')), exists(D, and(hasPurpose(A, instance(D, 'Animal')), hasPurpose(A, inhabits(D, C)))))))))), '$existential'(D, '?ANIMAL', and(hasPurpose(A, instance('?ANIMAL', 'Animal')), hasPurpose(A, inhabits('?ANIMAL', C))))), hasPurpose(A, instance(B, 'Destruction'))))), and(and(entails(and(hasPurpose(A, patient(B, C)), and(not(hasPurpose(A, instance(C, 'Animal'))), not(hasPurpose(A, instance(D, 'Animal'))))), not(instance(A, 'Weapon'))), and(entails(and(instance(A, 'Weapon'), and(not(hasPurpose(A, instance(C, 'Animal'))), not(hasPurpose(A, instance(D, 'Animal'))))), not(hasPurpose(A, patient(B, C)))), and(entails(and(and(instance(A, 'Weapon'), and(hasPurpose(A, patient(B, C)), not(hasPurpose(A, instance(D, 'Animal'))))), '$existential'(D, '?ANIMAL', and(hasPurpose(A, instance('?ANIMAL', 'Animal')), hasPurpose(A, inhabits('?ANIMAL', C))))), hasPurpose(A, instance(C, 'Animal'))), entails(and(and(instance(A, 'Weapon'), and(hasPurpose(A, patient(B, C)), not(hasPurpose(A, instance(C, 'Animal'))))), '$existential'(D, '?ANIMAL', and(hasPurpose(A, instance('?ANIMAL', 'Animal')), hasPurpose(A, inhabits('?ANIMAL', C))))), hasPurpose(A, instance(D, 'Animal')))))), and(entails(and(hasPurpose(A, patient(B, C)), and(not(hasPurpose(A, instance(C, 'Animal'))), not(hasPurpose(A, inhabits(D, C))))), not(instance(A, 'Weapon'))), and(entails(and(instance(A, 'Weapon'), and(not(hasPurpose(A, instance(C, 'Animal'))), not(hasPurpose(A, inhabits(D, C))))), not(hasPurpose(A, patient(B, C)))), and(entails(and(and(instance(A, 'Weapon'), and(hasPurpose(A, patient(B, C)), not(hasPurpose(A, inhabits(D, C))))), '$existential'(D, '?ANIMAL', and(hasPurpose(A, instance('?ANIMAL', 'Animal')), hasPurpose(A, inhabits('?ANIMAL', C))))), hasPurpose(A, instance(C, 'Animal'))), entails(and(and(instance(A, 'Weapon'), and(hasPurpose(A, patient(B, C)), not(hasPurpose(A, instance(C, 'Animal'))))), '$existential'(D, '?ANIMAL', and(hasPurpose(A, instance('?ANIMAL', 'Animal')), hasPurpose(A, inhabits('?ANIMAL', C))))), hasPurpose(A, inhabits(D, C)))))))), [domainV(D, ['$instanceof':'Animal', inhabits:1]), domainV(C, ['$instanceof':'Animal', inhabits:2, patient:2]), domainV(B, ['$instanceof':'Damaging', '$instanceof':'Destruction', patient:1]), domainV(A, ['$instanceof':'Weapon', hasPurpose:1]), domainV(E, []), forall(A), replaceConsVar(B, '$existential'('?DEST', and(or(hasPurpose(A, instance('?DEST', 'Damaging')), hasPurpose(A, instance('?DEST', 'Destruction'))), forall(C, =>(hasPurpose(A, patient('?DEST', C)), or(hasPurpose(A, instance(C, 'Animal')), exists(D, and(hasPurpose(A, instance(D, 'Animal')), hasPurpose(A, inhabits(D, C)))))))))), forall(C), replaceConsVar(D, '$existential'('?ANIMAL', and(hasPurpose(A, instance('?ANIMAL', 'Animal')), hasPurpose(A, inhabits('?ANIMAL', C)))))], ['WEAPON'=A, 'DEST'=B, 'PATIENT'=C, 'ANIMAL'=D], 'Merge', 'OBJECTS', 6764, 'Anonymous', on).
mooCache(subclass('Machine', 'Device'), subclass('Machine', 'Device'), [], [], 'Merge', 'OBJECTS', 6766, 'Anonymous', on).
mooCache(documentation('Machine', string('"Machines are Devices that that have a   well-defined resource and result and that automatically convert   the resource into the result."')), documentation('Machine', string('"Machines are Devices that that have a   well-defined resource and result and that automatically convert   the resource into the result."')), [], [], 'Merge', 'OBJECTS', 6768, 'Anonymous', on).
mooCache(subclass('EngineeringComponent', 'Device'), subclass('EngineeringComponent', 'Device'), [], [], 'Merge', 'OBJECTS', 6770, 'Anonymous', on).
mooCache(documentation('EngineeringComponent', string('"A fundamental concept that applies   in many engineering domains.  An EngineeringComponent is an element of   a Device that is a physically whole object, such as one might   see listed as standard parts in a catalog.  The main difference betweeen   EngineeringComponents and arbitrary globs of matter is that   EngineeringComponents are object-like in a modeling sense.  Thus, an   EngineeringComponent is not an arbtrary subregion, but a part of a   system with a stable identity."')), documentation('EngineeringComponent', string('"A fundamental concept that applies   in many engineering domains.  An EngineeringComponent is an element of   a Device that is a physically whole object, such as one might   see listed as standard parts in a catalog.  The main difference betweeen   EngineeringComponents and arbitrary globs of matter is that   EngineeringComponents are object-like in a modeling sense.  Thus, an   EngineeringComponent is not an arbtrary subregion, but a part of a   system with a stable identity."')), [], [], 'Merge', 'OBJECTS', 6772, 'Anonymous', on).
mooCache(=>(instance(A, 'EngineeringComponent'), exists(B, and(instance(B, 'Device'), component(A, B)))), and(and(entails(not(instance(B, 'Device')), not(instance(A, 'EngineeringComponent'))), entails(and(instance(A, 'EngineeringComponent'), '$existential'(B, '?DEVICE', and(instance('?DEVICE', 'Device'), component(A, '?DEVICE')))), instance(B, 'Device'))), and(entails(not(component(A, B)), not(instance(A, 'EngineeringComponent'))), entails(and(instance(A, 'EngineeringComponent'), '$existential'(B, '?DEVICE', and(instance('?DEVICE', 'Device'), component(A, '?DEVICE')))), component(A, B)))), [domainV(B, ['$instanceof':'Device', component:2]), domainV(A, ['$instanceof':'EngineeringComponent', component:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?DEVICE', and(instance('?DEVICE', 'Device'), component(A, '?DEVICE'))))], ['COMP'=A, 'DEVICE'=B], 'Merge', 'OBJECTS', 6774, 'Anonymous', on).
mooCache(subrelation(engineeringSubcomponent, properPart), subrelation(engineeringSubcomponent, properPart), [], [], 'Merge', 'OBJECTS', 6776, 'Anonymous', on).
mooCache(domain(engineeringSubcomponent, 1, 'EngineeringComponent'), domain(engineeringSubcomponent, 1, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6778, 'Anonymous', on).
mooCache(domain(engineeringSubcomponent, 2, 'EngineeringComponent'), domain(engineeringSubcomponent, 2, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6780, 'Anonymous', on).
mooCache(documentation(engineeringSubcomponent, string('"(engineeringSubcomponent ?SUB   ?SUPER) means that the EngineeringComponent ?SUB is structurally a   properPart ?SUPER.  This relation is an AsymmetricRelation, since   two EngineeringComponents cannot be subcomponents of each other."')), documentation(engineeringSubcomponent, string('"(engineeringSubcomponent ?SUB   ?SUPER) means that the EngineeringComponent ?SUB is structurally a   properPart ?SUPER.  This relation is an AsymmetricRelation, since   two EngineeringComponents cannot be subcomponents of each other."')), [], [], 'Merge', 'OBJECTS', 6782, 'Anonymous', on).
mooCache(instance(connectedEngineeringComponents, 'SymmetricRelation'), instance(connectedEngineeringComponents, 'SymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6784, 'Anonymous', on).
mooCache(instance(connectedEngineeringComponents, 'IrreflexiveRelation'), instance(connectedEngineeringComponents, 'IrreflexiveRelation'), [], [], 'Merge', 'OBJECTS', 6786, 'Anonymous', on).
mooCache(subrelation(connectedEngineeringComponents, connected), subrelation(connectedEngineeringComponents, connected), [], [], 'Merge', 'OBJECTS', 6788, 'Anonymous', on).
mooCache(domain(connectedEngineeringComponents, 1, 'EngineeringComponent'), domain(connectedEngineeringComponents, 1, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6790, 'Anonymous', on).
mooCache(domain(connectedEngineeringComponents, 2, 'EngineeringComponent'), domain(connectedEngineeringComponents, 2, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6792, 'Anonymous', on).
mooCache(documentation(connectedEngineeringComponents, string('"This is the most general   connection relation between EngineeringComponents.  If   (connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor   ?COMP2 can be an engineeringSubcomponent of the other.  The relation   connectedEngineeringComponents is a SymmetricRelation; there is no   information in the direction of connection between two components.  It is   also an IrreflexiveRelation; no EngineeringComponent bears this relation   to itself.  Note that this relation does not associate a name or type   with the connection."')), documentation(connectedEngineeringComponents, string('"This is the most general   connection relation between EngineeringComponents.  If   (connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor   ?COMP2 can be an engineeringSubcomponent of the other.  The relation   connectedEngineeringComponents is a SymmetricRelation; there is no   information in the direction of connection between two components.  It is   also an IrreflexiveRelation; no EngineeringComponent bears this relation   to itself.  Note that this relation does not associate a name or type   with the connection."')), [], [], 'Merge', 'OBJECTS', 6794, 'Anonymous', on).
mooCache(=>(connectedEngineeringComponents(A, B), and(not(engineeringSubcomponent(A, B)), not(engineeringSubcomponent(B, A)))), and(and(entails(engineeringSubcomponent(A, B), not(connectedEngineeringComponents(A, B))), entails(connectedEngineeringComponents(A, B), not(engineeringSubcomponent(A, B)))), and(entails(engineeringSubcomponent(B, A), not(connectedEngineeringComponents(A, B))), entails(connectedEngineeringComponents(A, B), not(engineeringSubcomponent(B, A))))), [domainV(B, [connectedEngineeringComponents:2, engineeringSubcomponent:1, engineeringSubcomponent:2]), domainV(A, [connectedEngineeringComponents:1, engineeringSubcomponent:1, engineeringSubcomponent:2]), domainV(C, []), forall(A), forall(B)], ['COMP1'=A, 'COMP2'=B], 'Merge', 'OBJECTS', 6796, 'Anonymous', on).
mooCache(=>(connectedEngineeringComponents(A, B), not(or(instance(A, 'EngineeringConnection'), instance(B, 'EngineeringConnection')))), and(and(entails(instance(A, 'EngineeringConnection'), not(connectedEngineeringComponents(A, B))), entails(connectedEngineeringComponents(A, B), not(instance(A, 'EngineeringConnection')))), and(entails(instance(B, 'EngineeringConnection'), not(connectedEngineeringComponents(A, B))), entails(connectedEngineeringComponents(A, B), not(instance(B, 'EngineeringConnection'))))), [domainV(B, ['$instanceof':'EngineeringConnection', connectedEngineeringComponents:2]), domainV(A, ['$instanceof':'EngineeringConnection', connectedEngineeringComponents:1]), domainV(C, []), forall(A), forall(B)], ['COMP1'=A, 'COMP2'=B], 'Merge', 'OBJECTS', 6798, 'Anonymous', on).
mooCache(<=>(connectedEngineeringComponents(A, B), exists(C, connectsEngineeringComponents(C, A, B))), and(and(entails(and(connectedEngineeringComponents(A, B), '$existential'(C, '?CONNECTION', connectsEngineeringComponents('?CONNECTION', A, B))), connectsEngineeringComponents(C, A, B)), entails(not(connectsEngineeringComponents(C, A, B)), not(connectedEngineeringComponents(A, B)))), and(entails(connectsEngineeringComponents(C, A, B), connectedEngineeringComponents(A, B)), entails(not(connectedEngineeringComponents(A, B)), not(connectsEngineeringComponents(C, A, B))))), [domainV(C, [connectsEngineeringComponents:1]), domainV(B, [connectedEngineeringComponents:2, connectsEngineeringComponents:3]), domainV(A, [connectedEngineeringComponents:1, connectsEngineeringComponents:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?CONNECTION', connectsEngineeringComponents('?CONNECTION', A, B))), forall(C)], ['COMP1'=A, 'COMP2'=B, 'CONNECTION'=C], 'Merge', 'OBJECTS', 6800, 'Anonymous', on).
mooCache(subclass('EngineeringConnection', 'EngineeringComponent'), subclass('EngineeringConnection', 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6802, 'Anonymous', on).
mooCache(documentation('EngineeringConnection', string('"An EngineeringConnection is an   EngineeringComponent that represents a connection relationship between   two other EngineeringComponents.  It is a reification of the   Predicate connectedEngineeringComponents.  That means that whenever   this Predicate holds between two EngineeringComponents, there exists an   EngineeringConnection.  The practical reason for reifying a relationship   is to be able to attach other information about it. For example, one  might want to say that a particular connection is associated with some   shared parameters, or that it is of a particular type.    EngineeringConnections are EngineeringComponents and can therefore be   an engineeringSubcomponent of other EngineeringComponents.  However,   to provide for modular regularity in component systems,   EngineeringConnections cannot be connected.  For each pair of   EngineeringComponents related by connectedEngineeringComponents, there   exists at least one EngineeringConnection.  However, that object may not   be unique, and the same EngineeringConnection may be associated with   several pairs of EngineeringComponents."')), documentation('EngineeringConnection', string('"An EngineeringConnection is an   EngineeringComponent that represents a connection relationship between   two other EngineeringComponents.  It is a reification of the   Predicate connectedEngineeringComponents.  That means that whenever   this Predicate holds between two EngineeringComponents, there exists an   EngineeringConnection.  The practical reason for reifying a relationship   is to be able to attach other information about it. For example, one  might want to say that a particular connection is associated with some   shared parameters, or that it is of a particular type.    EngineeringConnections are EngineeringComponents and can therefore be   an engineeringSubcomponent of other EngineeringComponents.  However,   to provide for modular regularity in component systems,   EngineeringConnections cannot be connected.  For each pair of   EngineeringComponents related by connectedEngineeringComponents, there   exists at least one EngineeringConnection.  However, that object may not   be unique, and the same EngineeringConnection may be associated with   several pairs of EngineeringComponents."')), [], [], 'Merge', 'OBJECTS', 6804, 'Anonymous', on).
mooCache(=>(instance(A, 'EngineeringConnection'), exists(B, exists(C, connectsEngineeringComponents(A, C, B)))), and(entails(not(connectsEngineeringComponents(A, C, B)), not(instance(A, 'EngineeringConnection'))), entails(and(and(instance(A, 'EngineeringConnection'), '$existential'(B, '?COMP2', exists(C, connectsEngineeringComponents(A, C, '?COMP2')))), '$existential'(C, '?COMP1', connectsEngineeringComponents(A, '?COMP1', B))), connectsEngineeringComponents(A, C, B))), [domainV(C, [connectsEngineeringComponents:2]), domainV(B, [connectsEngineeringComponents:3]), domainV(A, ['$instanceof':'EngineeringConnection', connectsEngineeringComponents:1]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?COMP2', exists(C, connectsEngineeringComponents(A, C, '?COMP2')))), replaceConsVar(C, '$existential'('?COMP1', connectsEngineeringComponents(A, '?COMP1', B)))], ['CONNECTION'=A, 'COMP1'=C, 'COMP2'=B], 'Merge', 'OBJECTS', 6806, 'Anonymous', on).
mooCache(subrelation(connectsEngineeringComponents, connects), subrelation(connectsEngineeringComponents, connects), [], [], 'Merge', 'OBJECTS', 6808, 'Anonymous', on).
mooCache(domain(connectsEngineeringComponents, 1, 'EngineeringConnection'), domain(connectsEngineeringComponents, 1, 'EngineeringConnection'), [], [], 'Merge', 'OBJECTS', 6810, 'Anonymous', on).
mooCache(domain(connectsEngineeringComponents, 2, 'EngineeringComponent'), domain(connectsEngineeringComponents, 2, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6812, 'Anonymous', on).
mooCache(domain(connectsEngineeringComponents, 3, 'EngineeringComponent'), domain(connectsEngineeringComponents, 3, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6814, 'Anonymous', on).
mooCache(documentation(connectsEngineeringComponents, string('"connectsEngineeringComponents   is a TernaryPredicate that maps from an EngineeringConnection to the   EngineeringComponents it connects.  Since EngineeringComponents cannot   be connected to themselves and there cannot be an EngineeringConnection   without a connectedEngineeringComponents Predicate, the second and third   arguments of any connectsEngineeringComponents relationship will always be   distinct for any given first argument."')), documentation(connectsEngineeringComponents, string('"connectsEngineeringComponents   is a TernaryPredicate that maps from an EngineeringConnection to the   EngineeringComponents it connects.  Since EngineeringComponents cannot   be connected to themselves and there cannot be an EngineeringConnection   without a connectedEngineeringComponents Predicate, the second and third   arguments of any connectsEngineeringComponents relationship will always be   distinct for any given first argument."')), [], [], 'Merge', 'OBJECTS', 6816, 'Anonymous', on).
mooCache(subclass('PersonBySocialRole', 'CognitiveAgent'), subclass('PersonBySocialRole', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6818, 'Anonymous', on).
mooCache(documentation('PersonBySocialRole', string('"The Class of all CognitiveAgents   who are considered with respect to a social role that they have."')), documentation('PersonBySocialRole', string('"The Class of all CognitiveAgents   who are considered with respect to a social role that they have."')), [], [], 'Merge', 'OBJECTS', 6820, 'Anonymous', on).
mooCache(=>(instance(A, 'PersonBySocialRole'), exists(B, and(instance(B, 'OrganizationalProcess'), agent(B, A)))), and(and(entails(not(instance(B, 'OrganizationalProcess')), not(instance(A, 'PersonBySocialRole'))), entails(and(instance(A, 'PersonBySocialRole'), '$existential'(B, '?ACT', and(instance('?ACT', 'OrganizationalProcess'), agent('?ACT', A)))), instance(B, 'OrganizationalProcess'))), and(entails(not(agent(B, A)), not(instance(A, 'PersonBySocialRole'))), entails(and(instance(A, 'PersonBySocialRole'), '$existential'(B, '?ACT', and(instance('?ACT', 'OrganizationalProcess'), agent('?ACT', A)))), agent(B, A)))), [domainV(B, ['$instanceof':'OrganizationalProcess', agent:1]), domainV(A, ['$instanceof':'PersonBySocialRole', agent:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ACT', and(instance('?ACT', 'OrganizationalProcess'), agent('?ACT', A))))], ['PERSON'=A, 'ACT'=B], 'Merge', 'OBJECTS', 6822, 'Anonymous', on).
mooCache(subclass('PersonByOccupationalRole', 'PersonBySocialRole'), subclass('PersonByOccupationalRole', 'PersonBySocialRole'), [], [], 'Merge', 'OBJECTS', 6824, 'Anonymous', on).
mooCache(documentation('PersonByOccupationalRole', string('"The Class of all   CognitiveAgents who are considered with respect to an occupational   role that they have."')), documentation('PersonByOccupationalRole', string('"The Class of all   CognitiveAgents who are considered with respect to an occupational   role that they have."')), [], [], 'Merge', 'OBJECTS', 6826, 'Anonymous', on).
mooCache(=>(instance(A, 'PersonByOccupationalRole'), exists(B, and(instance(B, 'OccupationalProcess'), agent(B, A)))), and(and(entails(not(instance(B, 'OccupationalProcess')), not(instance(A, 'PersonByOccupationalRole'))), entails(and(instance(A, 'PersonByOccupationalRole'), '$existential'(B, '?ACT', and(instance('?ACT', 'OccupationalProcess'), agent('?ACT', A)))), instance(B, 'OccupationalProcess'))), and(entails(not(agent(B, A)), not(instance(A, 'PersonByOccupationalRole'))), entails(and(instance(A, 'PersonByOccupationalRole'), '$existential'(B, '?ACT', and(instance('?ACT', 'OccupationalProcess'), agent('?ACT', A)))), agent(B, A)))), [domainV(B, ['$instanceof':'OccupationalProcess', agent:1]), domainV(A, ['$instanceof':'PersonByOccupationalRole', agent:2]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ACT', and(instance('?ACT', 'OccupationalProcess'), agent('?ACT', A))))], ['PERSON'=A, 'ACT'=B], 'Merge', 'OBJECTS', 6828, 'Anonymous', on).
mooCache(subclass('UnemployedPerson', 'PersonByOccupationalRole'), subclass('UnemployedPerson', 'PersonByOccupationalRole'), [], [], 'Merge', 'OBJECTS', 6830, 'Anonymous', on).
mooCache(documentation('UnemployedPerson', string('"The Class of all CognitiveAgents who   are unemployed."')), documentation('UnemployedPerson', string('"The Class of all CognitiveAgents who   are unemployed."')), [], [], 'Merge', 'OBJECTS', 6832, 'Anonymous', on).
mooCache(=>(instance(A, 'UnemployedPerson'), not(exists(B, employs(B, A)))), and(entails(employs(B, A), not(instance(A, 'UnemployedPerson'))), entails(instance(A, 'UnemployedPerson'), not(employs(B, A)))), [domainV(B, [employs:1]), domainV(A, ['$instanceof':'UnemployedPerson', employs:2]), domainV(C, []), forall(A), forall(B), forall(B)], ['PERSON'=A, 'ORG'=B], 'Merge', 'OBJECTS', 6834, 'Anonymous', on).
mooCache(subclass('Group', 'Collection'), subclass('Group', 'Collection'), [], [], 'Merge', 'OBJECTS', 6840, 'Anonymous', on).
mooCache(subclass('Group', 'Agent'), subclass('Group', 'Agent'), [], [], 'Merge', 'OBJECTS', 6842, 'Anonymous', on).
mooCache(documentation('Group', string('"A Collection of Agents, e.g. a flock   of sheep, a herd of goats, or the local Boy Scout troop."')), documentation('Group', string('"A Collection of Agents, e.g. a flock   of sheep, a herd of goats, or the local Boy Scout troop."')), [], [], 'Merge', 'OBJECTS', 6844, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Group'), member(B, A)), instance(B, 'Agent')), and(entails(and(instance(A, 'Group'), member(B, A)), instance(B, 'Agent')), and(entails(and(not(instance(B, 'Agent')), member(B, A)), not(instance(A, 'Group'))), entails(and(not(instance(B, 'Agent')), instance(A, 'Group')), not(member(B, A))))), [domainV(B, ['$instanceof':'Agent', member:1]), domainV(A, ['$instanceof':'Group', member:2]), domainV(C, []), forall(A), forall(B)], ['GROUP'=A, 'MEMB'=B], 'Merge', 'OBJECTS', 6846, 'Anonymous', on).
mooCache(subclass('AgeGroup', 'Group'), subclass('AgeGroup', 'Group'), [], [], 'Merge', 'OBJECTS', 6848, 'Anonymous', on).
mooCache(documentation('AgeGroup', string('"A Group whose members all have the same age."')), documentation('AgeGroup', string('"A Group whose members all have the same age."')), [], [], 'Merge', 'OBJECTS', 6850, 'Anonymous', on).
mooCache(=>(instance(A, 'AgeGroup'), forall(B, forall(C, forall(D, forall(E, =>(and(member(E, A), and(member(D, A), and(age(E, C), age(D, B)))), equal(C, B))))))), and(entails(and(not(equal(C, B)), and(member(E, A), and(member(D, A), and(age(E, C), age(D, B))))), not(instance(A, 'AgeGroup'))), and(entails(and(instance(A, 'AgeGroup'), and(member(E, A), and(member(D, A), and(age(E, C), age(D, B))))), equal(C, B)), and(entails(and(instance(A, 'AgeGroup'), and(not(equal(C, B)), and(member(D, A), and(age(E, C), age(D, B))))), not(member(E, A))), and(entails(and(instance(A, 'AgeGroup'), and(not(equal(C, B)), and(member(E, A), and(age(E, C), age(D, B))))), not(member(D, A))), and(entails(and(instance(A, 'AgeGroup'), and(not(equal(C, B)), and(member(E, A), and(member(D, A), age(D, B))))), not(age(E, C))), entails(and(instance(A, 'AgeGroup'), and(not(equal(C, B)), and(member(E, A), and(member(D, A), age(E, C))))), not(age(D, B)))))))), [domainV(E, [age:1, member:1]), domainV(D, [age:1, member:1]), domainV(C, [age:2]), domainV(B, [age:2]), domainV(A, ['$instanceof':'AgeGroup', member:2]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E)], ['GROUP'=A, 'MEMB1'=E, 'MEMB2'=D, 'AGE1'=C, 'AGE2'=B], 'Merge', 'OBJECTS', 6852, 'Anonymous', on).
mooCache(subclass('FamilyGroup', 'Group'), subclass('FamilyGroup', 'Group'), [], [], 'Merge', 'OBJECTS', 6854, 'Anonymous', on).
mooCache(documentation('FamilyGroup', string('"A Group whose members bear   familyRelations to one another."')), documentation('FamilyGroup', string('"A Group whose members bear   familyRelations to one another."')), [], [], 'Merge', 'OBJECTS', 6856, 'Anonymous', on).
mooCache(=>(instance(A, 'FamilyGroup'), forall(B, forall(C, =>(and(member(C, A), member(B, A)), familyRelation(C, B))))), and(entails(and(not(familyRelation(C, B)), and(member(C, A), member(B, A))), not(instance(A, 'FamilyGroup'))), and(entails(and(instance(A, 'FamilyGroup'), and(member(C, A), member(B, A))), familyRelation(C, B)), and(entails(and(instance(A, 'FamilyGroup'), and(not(familyRelation(C, B)), member(B, A))), not(member(C, A))), entails(and(instance(A, 'FamilyGroup'), and(not(familyRelation(C, B)), member(C, A))), not(member(B, A)))))), [domainV(C, [familyRelation:1, member:1]), domainV(B, [familyRelation:2, member:1]), domainV(A, ['$instanceof':'FamilyGroup', member:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['GROUP'=A, 'MEMB1'=C, 'MEMB2'=B], 'Merge', 'OBJECTS', 6858, 'Anonymous', on).
mooCache(instance(familyRelation, 'BinaryPredicate'), instance(familyRelation, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6860, 'Anonymous', on).
mooCache(instance(familyRelation, 'EquivalenceRelation'), instance(familyRelation, 'EquivalenceRelation'), [], [], 'Merge', 'OBJECTS', 6862, 'Anonymous', on).
mooCache(domain(familyRelation, 1, 'Organism'), domain(familyRelation, 1, 'Organism'), [], [], 'Merge', 'OBJECTS', 6864, 'Anonymous', on).
mooCache(domain(familyRelation, 2, 'Organism'), domain(familyRelation, 2, 'Organism'), [], [], 'Merge', 'OBJECTS', 6866, 'Anonymous', on).
mooCache(documentation(familyRelation, string('"A very general Predicate for biological   relationships. (familyRelation ?ORGANISM1 ?ORGANISM2) means that   ?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor."')), documentation(familyRelation, string('"A very general Predicate for biological   relationships. (familyRelation ?ORGANISM1 ?ORGANISM2) means that   ?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor."')), [], [], 'Merge', 'OBJECTS', 6868, 'Anonymous', on).
mooCache(=>(familyRelation(A, B), exists(C, and(familyRelation(C, A), familyRelation(C, B)))), and(and(entails(not(familyRelation(C, A)), not(familyRelation(A, B))), entails(and(familyRelation(A, B), '$existential'(C, '?ORGANISM3', and(familyRelation('?ORGANISM3', A), familyRelation('?ORGANISM3', B)))), familyRelation(C, A))), and(entails(not(familyRelation(C, B)), not(familyRelation(A, B))), entails(and(familyRelation(A, B), '$existential'(C, '?ORGANISM3', and(familyRelation('?ORGANISM3', A), familyRelation('?ORGANISM3', B)))), familyRelation(C, B)))), [domainV(C, [familyRelation:1]), domainV(B, [familyRelation:2]), domainV(A, [familyRelation:1, familyRelation:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?ORGANISM3', and(familyRelation('?ORGANISM3', A), familyRelation('?ORGANISM3', B))))], ['ORGANISM1'=A, 'ORGANISM2'=B, 'ORGANISM3'=C], 'Merge', 'OBJECTS', 6870, 'Anonymous', on).
mooCache(subclass('EthnicGroup', 'Group'), subclass('EthnicGroup', 'Group'), [], [], 'Merge', 'OBJECTS', 6872, 'Anonymous', on).
mooCache(documentation('EthnicGroup', string('"A Group whose members originate from the   same Region or share the same Language and/or cultural practices."')), documentation('EthnicGroup', string('"A Group whose members originate from the   same Region or share the same Language and/or cultural practices."')), [], [], 'Merge', 'OBJECTS', 6874, 'Anonymous', on).
mooCache(subclass('OrganizationUnit', 'CognitiveAgent'), subclass('OrganizationUnit', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6876, 'Anonymous', on).
mooCache(documentation('OrganizationUnit', string('"An organization or a divisions or department   within an organization. For example, the Shell Corporation, the accounting   department at Shell, etc. would all be instances of OrganizationUnit.   The continued existence of an OrganizationUnit is not dependent on any of   its members, locations, or facilities. Note that, unlike Organization, an   OrganizationUnit may have no members."')), documentation('OrganizationUnit', string('"An organization or a divisions or department   within an organization. For example, the Shell Corporation, the accounting   department at Shell, etc. would all be instances of OrganizationUnit.   The continued existence of an OrganizationUnit is not dependent on any of   its members, locations, or facilities. Note that, unlike Organization, an   OrganizationUnit may have no members."')), [], [], 'Merge', 'OBJECTS', 6878, 'Anonymous', on).
mooCache(subclass('Organization', 'Group'), subclass('Organization', 'Group'), [], [], 'Merge', 'OBJECTS', 6880, 'Anonymous', on).
mooCache(documentation('Organization', string('"An Organization is a corporate or similar   institution, distinguished from other Agents. The members of an   Organization typically have a common purpose or function. Note that   parts of Organizations should not be included here, unless they are   subOrganizations of an Organization."')), documentation('Organization', string('"An Organization is a corporate or similar   institution, distinguished from other Agents. The members of an   Organization typically have a common purpose or function. Note that   parts of Organizations should not be included here, unless they are   subOrganizations of an Organization."')), [], [], 'Merge', 'OBJECTS', 6882, 'Anonymous', on).
mooCache(instance('OrganizationFn', 'UnaryFunction'), instance('OrganizationFn', 'UnaryFunction'), [], [], 'Merge', 'OBJECTS', 6884, 'Anonymous', on).
mooCache(domain('OrganizationFn', 1, 'OrganizationUnit'), domain('OrganizationFn', 1, 'OrganizationUnit'), [], [], 'Merge', 'OBJECTS', 6886, 'Anonymous', on).
mooCache(range('OrganizationFn', 'Organization'), range('OrganizationFn', 'Organization'), [], [], 'Merge', 'OBJECTS', 6888, 'Anonymous', on).
mooCache(documentation('OrganizationFn', string('"A UnaryFunction that maps an OrganizationUnit,   the notion of an organization which is independent of its members, locations,   and facilities, to the corresponding Organization, i.e. the Group of Humans   who are members of the Organization.  Note that this is a partial function,   since there are many cases of organizations which are legal entities but which   lack any members."')), documentation('OrganizationFn', string('"A UnaryFunction that maps an OrganizationUnit,   the notion of an organization which is independent of its members, locations,   and facilities, to the corresponding Organization, i.e. the Group of Humans   who are members of the Organization.  Note that this is a partial function,   since there are many cases of organizations which are legal entities but which   lack any members."')), [], [], 'Merge', 'OBJECTS', 6890, 'Anonymous', on).
mooCache(=>(and(equal('OrganizationFn'(A), B), instance(C, 'NormativeProperty')), <=>(modalProperty(A, C), modalProperty(B, C))), and(and(entails(and(instance(C, 'NormativeProperty'), and(not(modalProperty(B, C)), modalProperty(B, C))), not(holds('OrganizationFn', A, B))), entails(and(holds('OrganizationFn', A, B), and(not(modalProperty(B, C)), modalProperty(B, C))), not(instance(C, 'NormativeProperty')))), and(and(entails(and(instance(C, 'NormativeProperty'), and(not(modalProperty(B, C)), modalProperty(A, C))), not(holds('OrganizationFn', A, B))), and(entails(and(holds('OrganizationFn', A, B), and(not(modalProperty(B, C)), modalProperty(A, C))), not(instance(C, 'NormativeProperty'))), and(entails(and(and(holds('OrganizationFn', A, B), instance(C, 'NormativeProperty')), modalProperty(A, C)), modalProperty(B, C)), entails(and(and(holds('OrganizationFn', A, B), instance(C, 'NormativeProperty')), not(modalProperty(B, C))), not(modalProperty(A, C)))))), and(and(entails(and(instance(C, 'NormativeProperty'), and(not(modalProperty(A, C)), modalProperty(A, C))), not(holds('OrganizationFn', A, B))), entails(and(holds('OrganizationFn', A, B), and(not(modalProperty(A, C)), modalProperty(A, C))), not(instance(C, 'NormativeProperty')))), and(entails(and(instance(C, 'NormativeProperty'), and(not(modalProperty(A, C)), modalProperty(B, C))), not(holds('OrganizationFn', A, B))), and(entails(and(holds('OrganizationFn', A, B), and(not(modalProperty(A, C)), modalProperty(B, C))), not(instance(C, 'NormativeProperty'))), and(entails(and(and(holds('OrganizationFn', A, B), instance(C, 'NormativeProperty')), modalProperty(B, C)), modalProperty(A, C)), entails(and(and(holds('OrganizationFn', A, B), instance(C, 'NormativeProperty')), not(modalProperty(A, C))), not(modalProperty(B, C))))))))), [domainV(C, ['$instanceof':'NormativeProperty', modalProperty:2]), domainV(B, ['OrganizationFn':2, modalProperty:1]), domainV(A, ['OrganizationFn':1, modalProperty:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['UNIT'=A, 'ORG'=B, 'ATTR'=C], 'Merge', 'OBJECTS', 6892, 'Anonymous', on).
mooCache(instance(employs, 'BinaryPredicate'), instance(employs, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6894, 'Anonymous', on).
mooCache(domain(employs, 1, 'Organization'), domain(employs, 1, 'Organization'), [], [], 'Merge', 'OBJECTS', 6896, 'Anonymous', on).
mooCache(domain(employs, 2, 'CognitiveAgent'), domain(employs, 2, 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6898, 'Anonymous', on).
mooCache(documentation(employs, string('"(employs ?ORG ?PERSON) means that ?ORG has   hired ?PERSON and currently retains ?PERSON, on a salaried or   contractual basis, to provide services in exchange for monetary   compensation."')), documentation(employs, string('"(employs ?ORG ?PERSON) means that ?ORG has   hired ?PERSON and currently retains ?PERSON, on a salaried or   contractual basis, to provide services in exchange for monetary   compensation."')), [], [], 'Merge', 'OBJECTS', 6900, 'Anonymous', on).
mooCache(=>(employs(A, B), member(B, A)), and(entails(not(member(B, A)), not(employs(A, B))), entails(employs(A, B), member(B, A))), [domainV(B, [employs:2, member:1]), domainV(A, [employs:1, member:2]), domainV(C, []), forall(A), forall(B)], ['ORG'=A, 'PERSON'=B], 'Merge', 'OBJECTS', 6902, 'Anonymous', on).
mooCache(subclass('Corporation', 'Organization'), subclass('Corporation', 'Organization'), [], [], 'Merge', 'OBJECTS', 6904, 'Anonymous', on).
mooCache(documentation('Corporation', string('"An Organization that provides products and/or   services for a fee with the aim of making a profit."')), documentation('Corporation', string('"An Organization that provides products and/or   services for a fee with the aim of making a profit."')), [], [], 'Merge', 'OBJECTS', 6906, 'Anonymous', on).
mooCache(subclass('Government', 'Organization'), subclass('Government', 'Organization'), [], [], 'Merge', 'OBJECTS', 6908, 'Anonymous', on).
mooCache(documentation('Government', string('"The ruling body of a Nation or one of the   subOrganizations of a Nation."')), documentation('Government', string('"The ruling body of a Nation or one of the   subOrganizations of a Nation."')), [], [], 'Merge', 'OBJECTS', 6910, 'Anonymous', on).
mooCache(subclass('EducationalOrganization', 'Organization'), subclass('EducationalOrganization', 'Organization'), [], [], 'Merge', 'OBJECTS', 6912, 'Anonymous', on).
mooCache(documentation('EducationalOrganization', string('"A EducationalOrganization is   an institution of learning. Some examples are public and private K-12   schools, and colleges and universities."')), documentation('EducationalOrganization', string('"A EducationalOrganization is   an institution of learning. Some examples are public and private K-12   schools, and colleges and universities."')), [], [], 'Merge', 'OBJECTS', 6914, 'Anonymous', on).
mooCache(subclass('ReligiousOrganization', 'Organization'), subclass('ReligiousOrganization', 'Organization'), [], [], 'Merge', 'OBJECTS', 6916, 'Anonymous', on).
mooCache(documentation('ReligiousOrganization', string('"An Organization whose members   share a set of religious beliefs."')), documentation('ReligiousOrganization', string('"An Organization whose members   share a set of religious beliefs."')), [], [], 'Merge', 'OBJECTS', 6918, 'Anonymous', on).
mooCache(=>(instance(A, 'ReligiousOrganization'), exists(B, forall(C, =>(member(C, A), believes(C, B))))), and(entails(and(member(C, A), not(believes(C, B))), not(instance(A, 'ReligiousOrganization'))), and(entails(and(instance(A, 'ReligiousOrganization'), not(believes(C, B))), not(member(C, A))), entails(and(and(instance(A, 'ReligiousOrganization'), member(C, A)), '$existential'(B, '?PROP', forall(C, =>(member(C, A), believes(C, '?PROP'))))), believes(C, B)))), [domainV(C, [believes:1, member:1]), domainV(B, [believes:2]), domainV(A, ['$instanceof':'ReligiousOrganization', member:2]), domainV(D, []), forall(A), replaceConsVar(B, '$existential'('?PROP', forall(C, =>(member(C, A), believes(C, '?PROP'))))), forall(C)], ['ORG'=A, 'PROP'=B, 'PERSON'=C], 'Merge', 'OBJECTS', 6920, 'Anonymous', on).
mooCache(subrelation(subOrganizations, subCollection), subrelation(subOrganizations, subCollection), [], [], 'Merge', 'OBJECTS', 6922, 'Anonymous', on).
mooCache(domain(subOrganizations, 1, 'Organization'), domain(subOrganizations, 1, 'Organization'), [], [], 'Merge', 'OBJECTS', 6924, 'Anonymous', on).
mooCache(domain(subOrganizations, 2, 'Organization'), domain(subOrganizations, 2, 'Organization'), [], [], 'Merge', 'OBJECTS', 6926, 'Anonymous', on).
mooCache(documentation(subOrganizations, string('"(subOrganizations ?ORG1 ?ORG2) means   that ?ORG1 is an Organization which is a proper part of the   Organization ?ORG2."')), documentation(subOrganizations, string('"(subOrganizations ?ORG1 ?ORG2) means   that ?ORG1 is an Organization which is a proper part of the   Organization ?ORG2."')), [], [], 'Merge', 'OBJECTS', 6928, 'Anonymous', on).
mooCache(subclass('Position', 'CognitiveAgent'), subclass('Position', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6930, 'Anonymous', on).
mooCache(relatedInternalConcept('Position', occupiesPosition), relatedInternalConcept('Position', occupiesPosition), [], [], 'Merge', 'OBJECTS', 6932, 'Anonymous', on).
mooCache(documentation('Position', string('"A formal position of reponsibility within an   Organization. Examples of Positions include president, laboratory   director, senior researcher, sales representative, etc."')), documentation('Position', string('"A formal position of reponsibility within an   Organization. Examples of Positions include president, laboratory   director, senior researcher, sales representative, etc."')), [], [], 'Merge', 'OBJECTS', 6934, 'Anonymous', on).
mooCache(instance(occupiesPosition, 'TernaryPredicate'), instance(occupiesPosition, 'TernaryPredicate'), [], [], 'Merge', 'OBJECTS', 6936, 'Anonymous', on).
mooCache(domain(occupiesPosition, 1, 'Human'), domain(occupiesPosition, 1, 'Human'), [], [], 'Merge', 'OBJECTS', 6938, 'Anonymous', on).
mooCache(domain(occupiesPosition, 2, 'Position'), domain(occupiesPosition, 2, 'Position'), [], [], 'Merge', 'OBJECTS', 6940, 'Anonymous', on).
mooCache(domain(occupiesPosition, 3, 'Organization'), domain(occupiesPosition, 3, 'Organization'), [], [], 'Merge', 'OBJECTS', 6942, 'Anonymous', on).
mooCache(documentation(occupiesPosition, string('"(occupiesPosition ?PERSON ?POSITION ?ORG)   means that ?PERSON holds the Position ?POSITION at Organization ?ORG.   For example, (occupiesPosition TomSmith ResearchDirector   AcmeLaboratory) means that TomSmith is a research director at Acme Labs."')), documentation(occupiesPosition, string('"(occupiesPosition ?PERSON ?POSITION ?ORG)   means that ?PERSON holds the Position ?POSITION at Organization ?ORG.   For example, (occupiesPosition TomSmith ResearchDirector   AcmeLaboratory) means that TomSmith is a research director at Acme Labs."')), [], [], 'Merge', 'OBJECTS', 6944, 'Anonymous', on).
mooCache(=>(occupiesPosition(A, B, C), employs(C, A)), and(entails(not(employs(C, A)), not(occupiesPosition(A, B, C))), entails(occupiesPosition(A, B, C), employs(C, A))), [domainV(C, [employs:1, occupiesPosition:3]), domainV(B, [occupiesPosition:2]), domainV(A, [employs:2, occupiesPosition:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['PERSON'=A, 'POSITION'=B, 'ORG'=C], 'Merge', 'OBJECTS', 6946, 'Anonymous', on).
mooCache(instance(citizen, 'BinaryPredicate'), instance(citizen, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6948, 'Anonymous', on).
mooCache(instance(citizen, 'AsymmetricRelation'), instance(citizen, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6950, 'Anonymous', on).
mooCache(domain(citizen, 1, 'Human'), domain(citizen, 1, 'Human'), [], [], 'Merge', 'OBJECTS', 6952, 'Anonymous', on).
mooCache(domain(citizen, 2, 'Nation'), domain(citizen, 2, 'Nation'), [], [], 'Merge', 'OBJECTS', 6954, 'Anonymous', on).
mooCache(documentation(citizen, string('"(citizen ?PERSON ?NATION) means that the   Human ?PERSON is a citizen of Nation ?NATION."')), documentation(citizen, string('"(citizen ?PERSON ?NATION) means that the   Human ?PERSON is a citizen of Nation ?NATION."')), [], [], 'Merge', 'OBJECTS', 6956, 'Anonymous', on).
mooCache('include-context'('MEREOTOPOLOGY'), 'include-context'('MEREOTOPOLOGY'), [], [], 'Merge', 'QUALITIES', 6968, 'Anonymous', on).
mooCache('include-context'('PROCESSES'), 'include-context'('PROCESSES'), [], [], 'Merge', 'QUALITIES', 6971, 'Anonymous', on).
mooCache('include-context'('OBJECTS'), 'include-context'('OBJECTS'), [], [], 'Merge', 'QUALITIES', 6974, 'Anonymous', on).
mooCache(subclass('FieldOfStudy', 'Proposition'), subclass('FieldOfStudy', 'Proposition'), [], [], 'Merge', 'QUALITIES', 6977, 'Anonymous', on).
mooCache(documentation('FieldOfStudy', string('"An academic or applied discipline with   recognized experts and with a core of accepted theory or practice.  Note   that FieldOfStudy is a subclass of Proposition, because a   FieldOfStudy is understood to be a body of abstract, informational   content, with varying degrees of certainty attached to each element of   this content."')), documentation('FieldOfStudy', string('"An academic or applied discipline with   recognized experts and with a core of accepted theory or practice.  Note   that FieldOfStudy is a subclass of Proposition, because a   FieldOfStudy is understood to be a body of abstract, informational   content, with varying degrees of certainty attached to each element of   this content."')), [], [], 'Merge', 'QUALITIES', 6979, 'Anonymous', on).
mooCache(subclass('Procedure', 'Proposition'), subclass('Procedure', 'Proposition'), [], [], 'Merge', 'QUALITIES', 6981, 'Anonymous', on).
mooCache(documentation('Procedure', string('"A sequence-dependent specification.  Some   examples are ComputerPrograms, finite-state machines, cooking recipes,   musical scores, conference schedules, driving directions, and the scripts   of plays and movies."')), documentation('Procedure', string('"A sequence-dependent specification.  Some   examples are ComputerPrograms, finite-state machines, cooking recipes,   musical scores, conference schedules, driving directions, and the scripts   of plays and movies."')), [], [], 'Merge', 'QUALITIES', 6983, 'Anonymous', on).
mooCache(subclass('ComputerProgram', 'Procedure'), subclass('ComputerProgram', 'Procedure'), [], [], 'Merge', 'QUALITIES', 6985, 'Anonymous', on).
mooCache(documentation('ComputerProgram', string('"A set of instructions in a computer   programming language that can be executed by a computer."')), documentation('ComputerProgram', string('"A set of instructions in a computer   programming language that can be executed by a computer."')), [], [], 'Merge', 'QUALITIES', 6987, 'Anonymous', on).
mooCache(subclass('Plan', 'Procedure'), subclass('Plan', 'Procedure'), [], [], 'Merge', 'QUALITIES', 6989, 'Anonymous', on).
mooCache(documentation('Plan', string('"A specification of a sequence of Processes which   is intended to satisfy a specified purpose at some future time."')), documentation('Plan', string('"A specification of a sequence of Processes which   is intended to satisfy a specified purpose at some future time."')), [], [], 'Merge', 'QUALITIES', 6991, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Plan'), and(instance(B, 'ContentBearingObject'), containsInformation(B, A))), exists(C, and(instance(C, 'Planning'), result(C, B)))), and(and(entails(and(and(instance(A, 'Plan'), and(instance(B, 'ContentBearingObject'), containsInformation(B, A))), '$existential'(C, '?PLANNING', and(instance('?PLANNING', 'Planning'), result('?PLANNING', B)))), instance(C, 'Planning')), and(entails(and(not(instance(C, 'Planning')), and(instance(B, 'ContentBearingObject'), containsInformation(B, A))), not(instance(A, 'Plan'))), and(entails(and(not(instance(C, 'Planning')), and(instance(A, 'Plan'), containsInformation(B, A))), not(instance(B, 'ContentBearingObject'))), entails(and(not(instance(C, 'Planning')), and(instance(A, 'Plan'), instance(B, 'ContentBearingObject'))), not(containsInformation(B, A)))))), and(entails(and(and(instance(A, 'Plan'), and(instance(B, 'ContentBearingObject'), containsInformation(B, A))), '$existential'(C, '?PLANNING', and(instance('?PLANNING', 'Planning'), result('?PLANNING', B)))), result(C, B)), and(entails(and(not(result(C, B)), and(instance(B, 'ContentBearingObject'), containsInformation(B, A))), not(instance(A, 'Plan'))), and(entails(and(not(result(C, B)), and(instance(A, 'Plan'), containsInformation(B, A))), not(instance(B, 'ContentBearingObject'))), entails(and(not(result(C, B)), and(instance(A, 'Plan'), instance(B, 'ContentBearingObject'))), not(containsInformation(B, A))))))), [domainV(C, ['$instanceof':'Planning', result:1]), domainV(B, ['$instanceof':'ContentBearingObject', containsInformation:1, result:2]), domainV(A, ['$instanceof':'Plan', containsInformation:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?PLANNING', and(instance('?PLANNING', 'Planning'), result('?PLANNING', B))))], ['PLAN'=A, 'OBJ'=B, 'PLANNING'=C], 'Merge', 'QUALITIES', 6993, 'Anonymous', on).
mooCache(=>(instance(A, 'Plan'), exists(B, hasPurpose(A, B))), and(entails(not(hasPurpose(A, B)), not(instance(A, 'Plan'))), entails(and(instance(A, 'Plan'), '$existential'(B, '?PURP', hasPurpose(A, '?PURP'))), hasPurpose(A, B))), [domainV(B, [hasPurpose:2]), domainV(A, ['$instanceof':'Plan', hasPurpose:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?PURP', hasPurpose(A, '?PURP')))], ['PLAN'=A, 'PURP'=B], 'Merge', 'QUALITIES', 6995, 'Anonymous', on).
mooCache(instance(orientation, 'SpatialRelation'), instance(orientation, 'SpatialRelation'), [], [], 'Merge', 'QUALITIES', 6997, 'Anonymous', on).
mooCache(instance(orientation, 'TernaryPredicate'), instance(orientation, 'TernaryPredicate'), [], [], 'Merge', 'QUALITIES', 6999, 'Anonymous', on).
mooCache(domain(orientation, 1, 'Object'), domain(orientation, 1, 'Object'), [], [], 'Merge', 'QUALITIES', 7001, 'Anonymous', on).
mooCache(domain(orientation, 2, 'Object'), domain(orientation, 2, 'Object'), [], [], 'Merge', 'QUALITIES', 7003, 'Anonymous', on).
mooCache(domain(orientation, 3, 'PositionalAttribute'), domain(orientation, 3, 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7005, 'Anonymous', on).
mooCache(documentation(orientation, string('"A general Predicate for indicating how two   Objects are oriented with respect to one another.  For example,   (orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and   (orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned   vertically with respect to ?OBJ2."')), documentation(orientation, string('"A general Predicate for indicating how two   Objects are oriented with respect to one another.  For example,   (orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and   (orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned   vertically with respect to ?OBJ2."')), [], [], 'Merge', 'QUALITIES', 7007, 'Anonymous', on).
mooCache(<=>(between(A, B, C), and(orientation(B, A, 'Left'), orientation(A, C, 'Left'))), and(and(entails(between(A, B, C), orientation(B, A, 'Left')), and(entails(between(A, B, C), orientation(A, C, 'Left')), entails(or(not(orientation(B, A, 'Left')), not(orientation(A, C, 'Left'))), not(between(A, B, C))))), and(entails(and(orientation(B, A, 'Left'), orientation(A, C, 'Left')), between(A, B, C)), and(entails(and(not(between(A, B, C)), orientation(A, C, 'Left')), not(orientation(B, A, 'Left'))), entails(and(not(between(A, B, C)), orientation(B, A, 'Left')), not(orientation(A, C, 'Left')))))), [domainV(C, [between:3, orientation:2]), domainV(B, [between:2, orientation:1]), domainV(A, [between:1, orientation:1, orientation:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['OBJ1'=A, 'OBJ2'=B, 'OBJ3'=C], 'Merge', 'QUALITIES', 7009, 'Anonymous', on).
mooCache(instance(direction, 'CaseRole'), instance(direction, 'CaseRole'), [], [], 'Merge', 'QUALITIES', 7011, 'Anonymous', on).
mooCache(domain(direction, 1, 'Process'), domain(direction, 1, 'Process'), [], [], 'Merge', 'QUALITIES', 7013, 'Anonymous', on).
mooCache(domain(direction, 2, 'DirectionalAttribute'), domain(direction, 2, 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7015, 'Anonymous', on).
mooCache(documentation(direction, string('"(direction ?PROC ?ATTR) means that the   Process ?PROC is moving in the direction ?ATTR.  For example, one   would use this Predicate to represent the fact that Max is moving   North."')), documentation(direction, string('"(direction ?PROC ?ATTR) means that the   Process ?PROC is moving in the direction ?ATTR.  For example, one   would use this Predicate to represent the fact that Max is moving   North."')), [], [], 'Merge', 'QUALITIES', 7017, 'Anonymous', on).
mooCache(=>(holdsDuring(A, direction(B, C)), forall(D, =>(holdsDuring(A, direction(B, D)), equal(D, C)))), and(entails(and(holdsDuring(A, direction(B, D)), not(equal(D, C))), not(holdsDuring(A, direction(B, C)))), and(entails(and(holdsDuring(A, direction(B, C)), not(equal(D, C))), not(holdsDuring(A, direction(B, D)))), entails(and(holdsDuring(A, direction(B, C)), holdsDuring(A, direction(B, D))), equal(D, C)))), [domainV(D, [direction:2]), domainV(C, [direction:2]), domainV(B, [direction:1]), domainV(A, [holdsDuring:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['TIME'=A, 'PROC'=B, 'ATTR1'=C, 'ATTR2'=D], 'Merge', 'QUALITIES', 7019, 'Anonymous', on).
mooCache(subclass('PositionalAttribute', 'Attribute'), subclass('PositionalAttribute', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7021, 'Anonymous', on).
mooCache(documentation('PositionalAttribute', string('"Attributes characterizing the   orientation of an Object, e.g. Vertical versus Horizontal, Left   versus Right etc."')), documentation('PositionalAttribute', string('"Attributes characterizing the   orientation of an Object, e.g. Vertical versus Horizontal, Left   versus Right etc."')), [], [], 'Merge', 'QUALITIES', 7023, 'Anonymous', on).
mooCache(subclass('DirectionalAttribute', 'PositionalAttribute'), subclass('DirectionalAttribute', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7025, 'Anonymous', on).
mooCache(documentation('DirectionalAttribute', string('"The subclass of PositionalAttributes   that concern compass directions."')), documentation('DirectionalAttribute', string('"The subclass of PositionalAttributes   that concern compass directions."')), [], [], 'Merge', 'QUALITIES', 7027, 'Anonymous', on).
mooCache(=>(and(orientation(A, B, C), and(instance(C, 'DirectionalAttribute'), and(instance(D, 'DirectionalAttribute'), not(equal(C, D))))), not(orientation(A, B, D))), and(entails(and(orientation(A, B, C), and(instance(C, 'DirectionalAttribute'), and(instance(D, 'DirectionalAttribute'), not(equal(C, D))))), not(orientation(A, B, D))), and(entails(and(orientation(A, B, D), and(instance(C, 'DirectionalAttribute'), and(instance(D, 'DirectionalAttribute'), not(equal(C, D))))), not(orientation(A, B, C))), and(entails(and(orientation(A, B, D), and(orientation(A, B, C), and(instance(D, 'DirectionalAttribute'), not(equal(C, D))))), not(instance(C, 'DirectionalAttribute'))), and(entails(and(orientation(A, B, D), and(orientation(A, B, C), and(instance(C, 'DirectionalAttribute'), not(equal(C, D))))), not(instance(D, 'DirectionalAttribute'))), entails(and(orientation(A, B, D), and(orientation(A, B, C), and(instance(C, 'DirectionalAttribute'), instance(D, 'DirectionalAttribute')))), equal(C, D)))))), [domainV(D, ['$instanceof':'DirectionalAttribute', orientation:3]), domainV(C, ['$instanceof':'DirectionalAttribute', orientation:3]), domainV(B, [orientation:2]), domainV(A, [orientation:1]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ1'=A, 'OBJ2'=B, 'ATTR1'=C, 'ATTR2'=D], 'Merge', 'QUALITIES', 7029, 'Anonymous', on).
mooCache(instance('North', 'DirectionalAttribute'), instance('North', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7031, 'Anonymous', on).
mooCache(documentation('North', string('"The compass direction of North."')), documentation('North', string('"The compass direction of North."')), [], [], 'Merge', 'QUALITIES', 7033, 'Anonymous', on).
mooCache(instance('South', 'DirectionalAttribute'), instance('South', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7035, 'Anonymous', on).
mooCache(documentation('South', string('"The compass direction of South."')), documentation('South', string('"The compass direction of South."')), [], [], 'Merge', 'QUALITIES', 7037, 'Anonymous', on).
mooCache(instance('East', 'DirectionalAttribute'), instance('East', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7039, 'Anonymous', on).
mooCache(documentation('East', string('"The compass direction of East."')), documentation('East', string('"The compass direction of East."')), [], [], 'Merge', 'QUALITIES', 7041, 'Anonymous', on).
mooCache(instance('West', 'DirectionalAttribute'), instance('West', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7043, 'Anonymous', on).
mooCache(documentation('West', string('"The compass direction of West."')), documentation('West', string('"The compass direction of West."')), [], [], 'Merge', 'QUALITIES', 7045, 'Anonymous', on).
mooCache(instance('Vertical', 'PositionalAttribute'), instance('Vertical', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7047, 'Anonymous', on).
mooCache(documentation('Vertical', string('"Attribute used to indicate that an Object   is positioned height-wise with respect to another Object."')), documentation('Vertical', string('"Attribute used to indicate that an Object   is positioned height-wise with respect to another Object."')), [], [], 'Merge', 'QUALITIES', 7049, 'Anonymous', on).
mooCache(instance('Horizontal', 'PositionalAttribute'), instance('Horizontal', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7051, 'Anonymous', on).
mooCache(contraryProperty('Horizontal', 'Vertical'), contraryProperty('Horizontal', 'Vertical'), [], [], 'Merge', 'QUALITIES', 7053, 'Anonymous', on).
mooCache(documentation('Horizontal', string('"Attribute used to indicate that an Object   is positioned width-wise with respect to another Object."')), documentation('Horizontal', string('"Attribute used to indicate that an Object   is positioned width-wise with respect to another Object."')), [], [], 'Merge', 'QUALITIES', 7055, 'Anonymous', on).
mooCache(instance('Above', 'PositionalAttribute'), instance('Above', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7057, 'Anonymous', on).
mooCache(documentation('Above', string('"This is a PositionalAttribute derived from the   up/down schema and not involving contact.  Note that this means directly   above, i.e., if one object is Above another object, then the projections   of the two objects overlap."')), documentation('Above', string('"This is a PositionalAttribute derived from the   up/down schema and not involving contact.  Note that this means directly   above, i.e., if one object is Above another object, then the projections   of the two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7059, 'Anonymous', on).
mooCache(<=>(orientation(A, B, 'Above'), not(orientation(A, B, 'Below'))), and(and(entails(orientation(A, B, 'Above'), not(orientation(A, B, 'Below'))), entails(orientation(A, B, 'Below'), not(orientation(A, B, 'Above')))), and(entails(not(orientation(A, B, 'Below')), orientation(A, B, 'Above')), entails(not(orientation(A, B, 'Above')), orientation(A, B, 'Below')))), [domainV(B, [orientation:2]), domainV(A, [orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7061, 'Anonymous', on).
mooCache(=>(orientation(A, B, 'Above'), not(connected(A, B))), and(entails(connected(A, B), not(orientation(A, B, 'Above'))), entails(orientation(A, B, 'Above'), not(connected(A, B)))), [domainV(B, [connected:2, orientation:2]), domainV(A, [connected:1, orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7063, 'Anonymous', on).
mooCache(instance('Below', 'PositionalAttribute'), instance('Below', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7065, 'Anonymous', on).
mooCache(documentation('Below', string('"This PositionalAttribute is derived from the   up/down schema and may or may not involve contact.  Note that this means   directly below, i.e., if one object is Below another object, then the   projections of the two objects overlap."')), documentation('Below', string('"This PositionalAttribute is derived from the   up/down schema and may or may not involve contact.  Note that this means   directly below, i.e., if one object is Below another object, then the   projections of the two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7067, 'Anonymous', on).
mooCache(=>(orientation(A, B, 'Below'), or(orientation(B, A, 'On'), orientation(B, A, 'Above'))), and(entails(and(not(orientation(B, A, 'On')), not(orientation(B, A, 'Above'))), not(orientation(A, B, 'Below'))), and(entails(and(orientation(A, B, 'Below'), not(orientation(B, A, 'Above'))), orientation(B, A, 'On')), entails(and(orientation(A, B, 'Below'), not(orientation(B, A, 'On'))), orientation(B, A, 'Above')))), [domainV(B, [orientation:1, orientation:2]), domainV(A, [orientation:1, orientation:2]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7069, 'Anonymous', on).
mooCache(instance('Adjacent', 'PositionalAttribute'), instance('Adjacent', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7071, 'Anonymous', on).
mooCache(documentation('Adjacent', string('"Used to assert that an object ?OBJ1 is close   to, near or abutting ?OBJ2.  This PositionalAttribute covers the   following common sense notions:  adjoins, abuts, is contiguous to,   is juxtaposed, and is close to."')), documentation('Adjacent', string('"Used to assert that an object ?OBJ1 is close   to, near or abutting ?OBJ2.  This PositionalAttribute covers the   following common sense notions:  adjoins, abuts, is contiguous to,   is juxtaposed, and is close to."')), [], [], 'Merge', 'QUALITIES', 7073, 'Anonymous', on).
mooCache(=>(orientation(A, B, 'Adjacent'), or(orientation(A, B, 'Near'), connected(A, B))), and(entails(and(not(orientation(A, B, 'Near')), not(connected(A, B))), not(orientation(A, B, 'Adjacent'))), and(entails(and(orientation(A, B, 'Adjacent'), not(connected(A, B))), orientation(A, B, 'Near')), entails(and(orientation(A, B, 'Adjacent'), not(orientation(A, B, 'Near'))), connected(A, B)))), [domainV(B, [connected:2, orientation:2]), domainV(A, [connected:1, orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7075, 'Anonymous', on).
mooCache(instance('Front', 'PositionalAttribute'), instance('Front', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7077, 'Anonymous', on).
mooCache(documentation('Front', string('"This PositionalAttribute is derived from   the front/back schema.  Note that this means directly in front of, so   that, if one object is in front of another, then the projections of   the two objects overlap."')), documentation('Front', string('"This PositionalAttribute is derived from   the front/back schema.  Note that this means directly in front of, so   that, if one object is in front of another, then the projections of   the two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7079, 'Anonymous', on).
mooCache(instance('Behind', 'PositionalAttribute'), instance('Behind', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7081, 'Anonymous', on).
mooCache(documentation('Behind', string('"This PositionalAttribute is derived from the   front/back schema.  Note that this means directly behind, so that, if   one object is behind another, then the projections of the two objects   overlap."')), documentation('Behind', string('"This PositionalAttribute is derived from the   front/back schema.  Note that this means directly behind, so that, if   one object is behind another, then the projections of the two objects   overlap."')), [], [], 'Merge', 'QUALITIES', 7083, 'Anonymous', on).
mooCache(<=>(orientation(A, B, 'Front'), not(orientation(A, B, 'Behind'))), and(and(entails(orientation(A, B, 'Front'), not(orientation(A, B, 'Behind'))), entails(orientation(A, B, 'Behind'), not(orientation(A, B, 'Front')))), and(entails(not(orientation(A, B, 'Behind')), orientation(A, B, 'Front')), entails(not(orientation(A, B, 'Front')), orientation(A, B, 'Behind')))), [domainV(B, [orientation:2]), domainV(A, [orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7085, 'Anonymous', on).
mooCache(instance('Left', 'PositionalAttribute'), instance('Left', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7087, 'Anonymous', on).
mooCache(documentation('Left', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the left, so that,   if one object is to the left of another, then the projections of the   two objects overlap."')), documentation('Left', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the left, so that,   if one object is to the left of another, then the projections of the   two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7089, 'Anonymous', on).
mooCache(instance('Right', 'PositionalAttribute'), instance('Right', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7091, 'Anonymous', on).
mooCache(documentation('Right', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the right, so that,   if one object is to the right of another, then the projections of the   two objects overlap."')), documentation('Right', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the right, so that,   if one object is to the right of another, then the projections of the   two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7093, 'Anonymous', on).
mooCache(<=>(orientation(A, B, 'Right'), not(orientation(A, B, 'Left'))), and(and(entails(orientation(A, B, 'Right'), not(orientation(A, B, 'Left'))), entails(orientation(A, B, 'Left'), not(orientation(A, B, 'Right')))), and(entails(not(orientation(A, B, 'Left')), orientation(A, B, 'Right')), entails(not(orientation(A, B, 'Right')), orientation(A, B, 'Left')))), [domainV(B, [orientation:2]), domainV(A, [orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7095, 'Anonymous', on).
mooCache(instance('Near', 'PositionalAttribute'), instance('Near', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7097, 'Anonymous', on).
mooCache(documentation('Near', string('"The relation of common sense adjacency.  Note that, if   an object is Near another object, then the objects are not connected."')), documentation('Near', string('"The relation of common sense adjacency.  Note that, if   an object is Near another object, then the objects are not connected."')), [], [], 'Merge', 'QUALITIES', 7099, 'Anonymous', on).
mooCache(=>(orientation(A, B, 'Near'), not(connected(A, B))), and(entails(connected(A, B), not(orientation(A, B, 'Near'))), entails(orientation(A, B, 'Near'), not(connected(A, B)))), [domainV(B, [connected:2, orientation:2]), domainV(A, [connected:1, orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7101, 'Anonymous', on).
mooCache(instance('On', 'PositionalAttribute'), instance('On', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7103, 'Anonymous', on).
mooCache(documentation('On', string('"This is used to assert that an object is on top of   another object, and it is derived from the up/down schema and involves   contact."')), documentation('On', string('"This is used to assert that an object is on top of   another object, and it is derived from the up/down schema and involves   contact."')), [], [], 'Merge', 'QUALITIES', 7105, 'Anonymous', on).
mooCache(=>(orientation(A, B, 'On'), connected(A, B)), and(entails(not(connected(A, B)), not(orientation(A, B, 'On'))), entails(orientation(A, B, 'On'), connected(A, B))), [domainV(B, [connected:2, orientation:2]), domainV(A, [connected:1, orientation:1]), domainV(C, []), forall(A), forall(B)], ['OBJ1'=A, 'OBJ2'=B], 'Merge', 'QUALITIES', 7107, 'Anonymous', on).
mooCache(subclass('PhysicalState', 'Attribute'), subclass('PhysicalState', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7109, 'Anonymous', on).
mooCache(documentation('PhysicalState', string('"The physical state of an Object.  There   are three instances of this Class:  Solid, Liquid, and Gas.    Physical changes are not characterized by the transformation of one   substance into another, but rather by the change of the form (physical   states) of a given substance. The bending of a piece of copper wire fails   to change the copper into another substance; crushing a block of ice leaves   only crushed ice; melting an iron nail yields a substance still called   iron: these are all accepted as physical changes."')), documentation('PhysicalState', string('"The physical state of an Object.  There   are three instances of this Class:  Solid, Liquid, and Gas.    Physical changes are not characterized by the transformation of one   substance into another, but rather by the change of the form (physical   states) of a given substance. The bending of a piece of copper wire fails   to change the copper into another substance; crushing a block of ice leaves   only crushed ice; melting an iron nail yields a substance still called   iron: these are all accepted as physical changes."')), [], [], 'Merge', 'QUALITIES', 7111, 'Anonymous', on).
mooCache(instance('Solid', 'PhysicalState'), instance('Solid', 'PhysicalState'), [], [], 'Merge', 'QUALITIES', 7113, 'Anonymous', on).
mooCache(documentation('Solid', string('"An Object has the Attribute of Solid if it   has a fixed shape and a fixed volume."')), documentation('Solid', string('"An Object has the Attribute of Solid if it   has a fixed shape and a fixed volume."')), [], [], 'Merge', 'QUALITIES', 7115, 'Anonymous', on).
mooCache(instance('Liquid', 'PhysicalState'), instance('Liquid', 'PhysicalState'), [], [], 'Merge', 'QUALITIES', 7117, 'Anonymous', on).
mooCache(documentation('Liquid', string('"An Object has the Attribute of Liquid if   it has a fixed volume but not a fixed shape."')), documentation('Liquid', string('"An Object has the Attribute of Liquid if   it has a fixed volume but not a fixed shape."')), [], [], 'Merge', 'QUALITIES', 7119, 'Anonymous', on).
mooCache(=>(instance(A, 'Solution'), attribute(A, 'Liquid')), and(entails(not(attribute(A, 'Liquid')), not(instance(A, 'Solution'))), entails(instance(A, 'Solution'), attribute(A, 'Liquid'))), [domainV(A, ['$instanceof':'Solution', attribute:1]), domainV(B, []), forall(A)], ['X'=A], 'Merge', 'QUALITIES', 7121, 'Anonymous', on).
mooCache(instance('Gas', 'PhysicalState'), instance('Gas', 'PhysicalState'), [], [], 'Merge', 'QUALITIES', 7123, 'Anonymous', on).
mooCache(documentation('Gas', string('"An Object has the Attribute of Gas if it has   neither a fixed volume nor a fixed shape."')), documentation('Gas', string('"An Object has the Attribute of Gas if it has   neither a fixed volume nor a fixed shape."')), [], [], 'Merge', 'QUALITIES', 7125, 'Anonymous', on).
mooCache(=>(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), not(exists(E, and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))))), and(entails(and(and(part(B, C), holdsDuring(D, attribute(C, A))), and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))), not(instance(A, 'PhysicalState'))), and(entails(and(and(instance(A, 'PhysicalState'), holdsDuring(D, attribute(C, A))), and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))), not(part(B, C))), and(entails(and(and(instance(A, 'PhysicalState'), part(B, C)), and(instance(E, 'PhysicalState'), and(holdsDuring(D, attribute(B, E)), not(equal(A, E))))), not(holdsDuring(D, attribute(C, A)))), and(entails(and(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), and(holdsDuring(D, attribute(B, E)), not(equal(A, E)))), not(instance(E, 'PhysicalState'))), and(entails(and(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), and(instance(E, 'PhysicalState'), not(equal(A, E)))), not(holdsDuring(D, attribute(B, E)))), entails(and(and(instance(A, 'PhysicalState'), and(part(B, C), holdsDuring(D, attribute(C, A)))), and(instance(E, 'PhysicalState'), holdsDuring(D, attribute(B, E)))), equal(A, E))))))), [domainV(E, ['$instanceof':'PhysicalState', attribute:2]), domainV(D, [holdsDuring:1]), domainV(C, [attribute:1, part:2]), domainV(B, [attribute:1, part:1]), domainV(A, ['$instanceof':'PhysicalState', attribute:2]), domainV(F, []), forall(A), forall(B), forall(C), forall(D), forall(E), forall(E)], ['STATE'=A, 'PART'=B, 'OBJ'=C, 'TIME'=D, 'OTHERSTATE'=E], 'Merge', 'QUALITIES', 7127, 'Anonymous', on).
mooCache(subclass('TasteProperty', 'Attribute'), subclass('TasteProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7129, 'Anonymous', on).
mooCache(documentation('TasteProperty', string('"The Class of Attributes relating to   the taste of Objects."')), documentation('TasteProperty', string('"The Class of Attributes relating to   the taste of Objects."')), [], [], 'Merge', 'QUALITIES', 7131, 'Anonymous', on).
mooCache(=>(instance(A, 'Food'), exists(B, and(instance(B, 'TasteProperty'), attribute(A, B)))), and(and(entails(not(instance(B, 'TasteProperty')), not(instance(A, 'Food'))), entails(and(instance(A, 'Food'), '$existential'(B, '?ATTR', and(instance('?ATTR', 'TasteProperty'), attribute(A, '?ATTR')))), instance(B, 'TasteProperty'))), and(entails(not(attribute(A, B)), not(instance(A, 'Food'))), entails(and(instance(A, 'Food'), '$existential'(B, '?ATTR', and(instance('?ATTR', 'TasteProperty'), attribute(A, '?ATTR')))), attribute(A, B)))), [domainV(B, ['$instanceof':'TasteProperty', attribute:2]), domainV(A, ['$instanceof':'Food', attribute:1]), domainV(C, []), forall(A), replaceConsVar(B, '$existential'('?ATTR', and(instance('?ATTR', 'TasteProperty'), attribute(A, '?ATTR'))))], ['OBJ'=A, 'ATTR'=B], 'Merge', 'QUALITIES', 7133, 'Anonymous', on).
mooCache(instance('Sweet', 'TasteProperty'), instance('Sweet', 'TasteProperty'), [], [], 'Merge', 'QUALITIES', 7135, 'Anonymous', on).
mooCache(contraryProperty('Sweet', 'Bitter'), contraryProperty('Sweet', 'Bitter'), [], [], 'Merge', 'QUALITIES', 7137, 'Anonymous', on).
mooCache(documentation('Sweet', string('"The Attribute of Objects that are   sweet-tasting."')), documentation('Sweet', string('"The Attribute of Objects that are   sweet-tasting."')), [], [], 'Merge', 'QUALITIES', 7139, 'Anonymous', on).
mooCache(instance('Bitter', 'TasteProperty'), instance('Bitter', 'TasteProperty'), [], [], 'Merge', 'QUALITIES', 7141, 'Anonymous', on).
mooCache(documentation('Bitter', string('"The Attribute of Objects that are   bitter-tasting."')), documentation('Bitter', string('"The Attribute of Objects that are   bitter-tasting."')), [], [], 'Merge', 'QUALITIES', 7143, 'Anonymous', on).
mooCache(subclass('OlfactoryProperty', 'Attribute'), subclass('OlfactoryProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7145, 'Anonymous', on).
mooCache(documentation('OlfactoryProperty', string('"The Class of properties that are   detectable by smell."')), documentation('OlfactoryProperty', string('"The Class of properties that are   detectable by smell."')), [], [], 'Merge', 'QUALITIES', 7147, 'Anonymous', on).
mooCache(subclass('VisualProperty', 'Attribute'), subclass('VisualProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7149, 'Anonymous', on).
mooCache(documentation('VisualProperty', string('"The Class of visually discernible   properties."')), documentation('VisualProperty', string('"The Class of visually discernible   properties."')), [], [], 'Merge', 'QUALITIES', 7151, 'Anonymous', on).
mooCache(subclass('ColorProperty', 'VisualProperty'), subclass('ColorProperty', 'VisualProperty'), [], [], 'Merge', 'QUALITIES', 7153, 'Anonymous', on).
mooCache(documentation('ColorProperty', string('"The Class of VisualProperties   relating to the color of Objects."')), documentation('ColorProperty', string('"The Class of VisualProperties   relating to the color of Objects."')), [], [], 'Merge', 'QUALITIES', 7155, 'Anonymous', on).
mooCache(subclass('PrimaryColor', 'ColorProperty'), subclass('PrimaryColor', 'ColorProperty'), [], [], 'Merge', 'QUALITIES', 7157, 'Anonymous', on).
mooCache(documentation('PrimaryColor', string('"Colors which can be blended to form any   color and which cannot be derived from any other colors."')), documentation('PrimaryColor', string('"Colors which can be blended to form any   color and which cannot be derived from any other colors."')), [], [], 'Merge', 'QUALITIES', 7159, 'Anonymous', on).
mooCache(instance('Red', 'PrimaryColor'), instance('Red', 'PrimaryColor'), [], [], 'Merge', 'QUALITIES', 7161, 'Anonymous', on).
mooCache(contraryProperty('Red', 'Blue'), contraryProperty('Red', 'Blue'), [], [], 'Merge', 'QUALITIES', 7163, 'Anonymous', on).
mooCache(contraryProperty('Red', 'Yellow'), contraryProperty('Red', 'Yellow'), [], [], 'Merge', 'QUALITIES', 7165, 'Anonymous', on).
mooCache(documentation('Red', string('"The Attribute of redness."')), documentation('Red', string('"The Attribute of redness."')), [], [], 'Merge', 'QUALITIES', 7167, 'Anonymous', on).
mooCache(instance('Blue', 'PrimaryColor'), instance('Blue', 'PrimaryColor'), [], [], 'Merge', 'QUALITIES', 7169, 'Anonymous', on).
mooCache(contraryProperty('Blue', 'Yellow'), contraryProperty('Blue', 'Yellow'), [], [], 'Merge', 'QUALITIES', 7171, 'Anonymous', on).
mooCache(documentation('Blue', string('"The Attribute of being blue in color."')), documentation('Blue', string('"The Attribute of being blue in color."')), [], [], 'Merge', 'QUALITIES', 7173, 'Anonymous', on).
mooCache(instance('Yellow', 'PrimaryColor'), instance('Yellow', 'PrimaryColor'), [], [], 'Merge', 'QUALITIES', 7175, 'Anonymous', on).
mooCache(documentation('Yellow', string('"The Attribute of being yellow in color."')), documentation('Yellow', string('"The Attribute of being yellow in color."')), [], [], 'Merge', 'QUALITIES', 7177, 'Anonymous', on).
mooCache(instance('Monochromatic', 'ColorProperty'), instance('Monochromatic', 'ColorProperty'), [], [], 'Merge', 'QUALITIES', 7179, 'Anonymous', on).
mooCache(documentation('Monochromatic', string('"An Object with this Attribute has   the same color on every part of its surface."')), documentation('Monochromatic', string('"An Object with this Attribute has   the same color on every part of its surface."')), [], [], 'Merge', 'QUALITIES', 7181, 'Anonymous', on).
mooCache(=>(and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor')))), forall(D, =>(superficialPart(D, A), attribute(D, C)))), and(entails(and(not(attribute(D, C)), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor'))))), not(superficialPart(D, A))), and(entails(and(superficialPart(D, A), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor'))))), attribute(D, C)), and(entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(superficialPart(B, A), and(attribute(B, C), instance(C, 'PrimaryColor')))), not(attribute(A, 'Monochromatic'))), and(entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(attribute(A, 'Monochromatic'), and(attribute(B, C), instance(C, 'PrimaryColor')))), not(superficialPart(B, A))), and(entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), instance(C, 'PrimaryColor')))), not(attribute(B, C))), entails(and(and(superficialPart(D, A), not(attribute(D, C))), and(attribute(A, 'Monochromatic'), and(superficialPart(B, A), attribute(B, C)))), not(instance(C, 'PrimaryColor')))))))), [domainV(D, [attribute:1, superficialPart:1]), domainV(C, ['$instanceof':'PrimaryColor', attribute:2]), domainV(B, [attribute:1, superficialPart:1]), domainV(A, [attribute:1, superficialPart:2]), domainV(E, []), forall(A), forall(B), forall(C), forall(D)], ['OBJ'=A, 'PART'=B, 'COLOR'=C, 'ELEMENT'=D], 'Merge', 'QUALITIES', 7183, 'Anonymous', on).
mooCache(instance('Polychromatic', 'ColorProperty'), instance('Polychromatic', 'ColorProperty'), [], [], 'Merge', 'QUALITIES', 7185, 'Anonymous', on).
mooCache(contraryProperty('Polychromatic', 'Monochromatic'), contraryProperty('Polychromatic', 'Monochromatic'), [], [], 'Merge', 'QUALITIES', 7187, 'Anonymous', on).
mooCache(documentation('Polychromatic', string('"An Object with this Attribute has   different colors on different parts of its surface."')), documentation('Polychromatic', string('"An Object with this Attribute has   different colors on different parts of its surface."')), [], [], 'Merge', 'QUALITIES', 7189, 'Anonymous', on).
mooCache(=>(attribute(A, 'Polychromatic'), exists(B, exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))))), and(and(entails(not(superficialPart(E, A)), not(attribute(A, 'Polychromatic'))), entails(and(attribute(A, 'Polychromatic'), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), superficialPart(E, A))), and(and(entails(not(superficialPart(D, A)), not(attribute(A, 'Polychromatic'))), entails(and(and(attribute(A, 'Polychromatic'), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), superficialPart(D, A))), and(and(entails(not(attribute(E, C)), not(attribute(A, 'Polychromatic'))), entails(and(and(and(attribute(A, 'Polychromatic'), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), attribute(E, C))), and(and(entails(not(attribute(D, B)), not(attribute(A, 'Polychromatic'))), entails(and(and(and(and(attribute(A, 'Polychromatic'), '$existential'(B, '?COLOR2', exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, '?COLOR2'), and(instance(C, 'ColorProperty'), and(instance('?COLOR2', 'ColorProperty'), not(equal(C, '?COLOR2'))))))))))))), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), attribute(D, B))), and(and(entails(not(instance(C, 'ColorProperty')), not(attribute(A, 'Polychromatic'))), entails(and(and(and(attribute(A, 'Polychromatic'), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), instance(C, 'ColorProperty'))), and(and(entails(not(instance(B, 'ColorProperty')), not(attribute(A, 'Polychromatic'))), entails(and(and(and(and(attribute(A, 'Polychromatic'), '$existential'(B, '?COLOR2', exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, '?COLOR2'), and(instance(C, 'ColorProperty'), and(instance('?COLOR2', 'ColorProperty'), not(equal(C, '?COLOR2'))))))))))))), '$existential'(C, '?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), '$existential'(D, '?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), '$existential'(E, '?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B)))))))))), instance(B, 'ColorProperty'))), and(entails(equal(C, B), not(attribute(A, 'Polychromatic'))), entails(attribute(A, 'Polychromatic'), not(equal(C, B)))))))))), [domainV(E, [attribute:1, superficialPart:1]), domainV(D, [attribute:1, superficialPart:1]), domainV(C, ['$instanceof':'ColorProperty', attribute:2]), domainV(B, ['$instanceof':'ColorProperty', attribute:2]), domainV(A, [attribute:1, superficialPart:2]), domainV(F, []), forall(A), replaceConsVar(B, '$existential'('?COLOR2', exists(C, exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, C), and(attribute(D, '?COLOR2'), and(instance(C, 'ColorProperty'), and(instance('?COLOR2', 'ColorProperty'), not(equal(C, '?COLOR2'))))))))))))), replaceConsVar(C, '$existential'('?COLOR1', exists(D, exists(E, and(superficialPart(E, A), and(superficialPart(D, A), and(attribute(E, '?COLOR1'), and(attribute(D, B), and(instance('?COLOR1', 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal('?COLOR1', B)))))))))))), replaceConsVar(D, '$existential'('?PART2', exists(E, and(superficialPart(E, A), and(superficialPart('?PART2', A), and(attribute(E, C), and(attribute('?PART2', B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))), replaceConsVar(E, '$existential'('?PART1', and(superficialPart('?PART1', A), and(superficialPart(D, A), and(attribute('?PART1', C), and(attribute(D, B), and(instance(C, 'ColorProperty'), and(instance(B, 'ColorProperty'), not(equal(C, B))))))))))], ['OBJ'=A, 'PART1'=E, 'PART2'=D, 'COLOR1'=C, 'COLOR2'=B], 'Merge', 'QUALITIES', 7191, 'Anonymous', on).
mooCache(subclass('ShapeProperty', 'Attribute'), subclass('ShapeProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7193, 'Anonymous', on).
mooCache(documentation('ShapeProperty', string('"Any Attribute that characterizes the   shape of an Object."')), documentation('ShapeProperty', string('"Any Attribute that characterizes the   shape of an Object."')), [], [], 'Merge', 'QUALITIES', 7195, 'Anonymous', on).
mooCache(instance('Pliable', 'ShapeProperty'), instance('Pliable', 'ShapeProperty'), [], [], 'Merge', 'QUALITIES', 7197, 'Anonymous', on).
mooCache(documentation('Pliable', string('"The shape of an Object with this Attribute   can be altered."')), documentation('Pliable', string('"The shape of an Object with this Attribute   can be altered."')), [], [], 'Merge', 'QUALITIES', 7199, 'Anonymous', on).
mooCache(=>(and(instance(A, 'ShapeAlteration'), patient(A, B)), attribute(B, 'Pliable')), and(entails(and(instance(A, 'ShapeAlteration'), patient(A, B)), attribute(B, 'Pliable')), and(entails(and(not(attribute(B, 'Pliable')), patient(A, B)), not(instance(A, 'ShapeAlteration'))), entails(and(not(attribute(B, 'Pliable')), instance(A, 'ShapeAlteration')), not(patient(A, B))))), [domainV(B, [attribute:1, patient:2]), domainV(A, ['$instanceof':'ShapeAlteration', patient:1]), domainV(C, []), forall(A), forall(B)], ['PROC'=A, 'OBJ'=B], 'Merge', 'QUALITIES', 7201, 'Anonymous', on).
mooCache(instance('Rigid', 'ShapeProperty'), instance('Rigid', 'ShapeProperty'), [], [], 'Merge', 'QUALITIES', 7203, 'Anonymous', on).
mooCache(contraryProperty('Rigid', 'Pliable'), contraryProperty('Rigid', 'Pliable'), [], [], 'Merge', 'QUALITIES', 7205, 'Anonymous', on).
mooCache(documentation('Rigid', string('"The shape of an Object with this Attribute   cannot be easily altered."')), documentation('Rigid', string('"The shape of an Object with this Attribute   cannot be easily altered."')), [], [], 'Merge', 'QUALITIES', 7207, 'Anonymous', on).
mooCache(subclass('TextureProperty', 'Attribute'), subclass('TextureProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7209, 'Anonymous', on).
mooCache(documentation('TextureProperty', string('"Any Attribute that characterizes the   texture of an Object."')), documentation('TextureProperty', string('"Any Attribute that characterizes the   texture of an Object."')), [], [], 'Merge', 'QUALITIES', 7211, 'Anonymous', on).
mooCache(=>(and(instance(A, 'TextureProperty'), and(attribute(B, A), surface(C, B))), attribute(C, A)), and(entails(and(instance(A, 'TextureProperty'), and(attribute(B, A), surface(C, B))), attribute(C, A)), and(entails(and(not(attribute(C, A)), and(attribute(B, A), surface(C, B))), not(instance(A, 'TextureProperty'))), and(entails(and(not(attribute(C, A)), and(instance(A, 'TextureProperty'), surface(C, B))), not(attribute(B, A))), entails(and(not(attribute(C, A)), and(instance(A, 'TextureProperty'), attribute(B, A))), not(surface(C, B)))))), [domainV(C, [attribute:1, surface:1]), domainV(B, [attribute:1, surface:2]), domainV(A, ['$instanceof':'TextureProperty', attribute:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['ATTRIBUTE'=A, 'OBJ'=B, 'SURFACE'=C], 'Merge', 'QUALITIES', 7213, 'Anonymous', on).
mooCache(instance('Smooth', 'TextureProperty'), instance('Smooth', 'TextureProperty'), [], [], 'Merge', 'QUALITIES', 7215, 'Anonymous', on).
mooCache(documentation('Smooth', string('"An Object with this Attribute has a smooth   surface."')), documentation('Smooth', string('"An Object with this Attribute has a smooth   surface."')), [], [], 'Merge', 'QUALITIES', 7217, 'Anonymous', on).
mooCache(instance('Rough', 'TextureProperty'), instance('Rough', 'TextureProperty'), [], [], 'Merge', 'QUALITIES', 7219, 'Anonymous', on).
mooCache(contraryProperty('Smooth', 'Rough'), contraryProperty('Smooth', 'Rough'), [], [], 'Merge', 'QUALITIES', 7221, 'Anonymous', on).
mooCache(documentation('Rough', string('"An Object with this Attribute has a rough   surface."')), documentation('Rough', string('"An Object with this Attribute has a rough   surface."')), [], [], 'Merge', 'QUALITIES', 7223, 'Anonymous', on).
mooCache(subclass('SoundProperty', 'Attribute'), subclass('SoundProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7225, 'Anonymous', on).
mooCache(documentation('SoundProperty', string('"Any Attribute that characterizes the   sound made by an Object."')), documentation('SoundProperty', string('"Any Attribute that characterizes the   sound made by an Object."')), [], [], 'Merge', 'QUALITIES', 7227, 'Anonymous', on).
mooCache(subclass('SaturationProperty', 'Attribute'), subclass('SaturationProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7229, 'Anonymous', on).
mooCache(documentation('SaturationProperty', string('"A Class of Attributes that specify,   in qualitative terms, the amount of Water in a particular Object."')), documentation('SaturationProperty', string('"A Class of Attributes that specify,   in qualitative terms, the amount of Water in a particular Object."')), [], [], 'Merge', 'QUALITIES', 7231, 'Anonymous', on).
mooCache(instance('Dry', 'SaturationProperty'), instance('Dry', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7233, 'Anonymous', on).
mooCache(contraryProperty('Dry', 'Damp'), contraryProperty('Dry', 'Damp'), [], [], 'Merge', 'QUALITIES', 7235, 'Anonymous', on).
mooCache(documentation('Dry', string('"An Attribute which indicates that the associated   Object contains a relatively small amount of Water."')), documentation('Dry', string('"An Attribute which indicates that the associated   Object contains a relatively small amount of Water."')), [], [], 'Merge', 'QUALITIES', 7237, 'Anonymous', on).
mooCache(instance('Anhydrous', 'SaturationProperty'), instance('Anhydrous', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7239, 'Anonymous', on).
mooCache(subAttribute('Anhydrous', 'Dry'), subAttribute('Anhydrous', 'Dry'), [], [], 'Merge', 'QUALITIES', 7241, 'Anonymous', on).
mooCache(documentation('Anhydrous', string('"An Attribute which indicates that the   associated Object does not contain any Water."')), documentation('Anhydrous', string('"An Attribute which indicates that the   associated Object does not contain any Water."')), [], [], 'Merge', 'QUALITIES', 7243, 'Anonymous', on).
mooCache(=>(attribute(A, 'Anhydrous'), not(exists(B, and(instance(B, 'Water'), part(B, A))))), and(entails(and(instance(B, 'Water'), part(B, A)), not(attribute(A, 'Anhydrous'))), and(entails(and(attribute(A, 'Anhydrous'), part(B, A)), not(instance(B, 'Water'))), entails(and(attribute(A, 'Anhydrous'), instance(B, 'Water')), not(part(B, A))))), [domainV(B, ['$instanceof':'Water', part:1]), domainV(A, [attribute:1, part:2]), domainV(C, []), forall(A), forall(B), forall(B)], ['OBJ'=A, 'WATER'=B], 'Merge', 'QUALITIES', 7245, 'Anonymous', on).
mooCache(instance('Damp', 'SaturationProperty'), instance('Damp', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7247, 'Anonymous', on).
mooCache(documentation('Damp', string('"An Attribute which indicates that the associated   Object contains a relatively large amount of Water."')), documentation('Damp', string('"An Attribute which indicates that the associated   Object contains a relatively large amount of Water."')), [], [], 'Merge', 'QUALITIES', 7249, 'Anonymous', on).
mooCache(instance('Wet', 'SaturationProperty'), instance('Wet', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7251, 'Anonymous', on).
mooCache(subAttribute('Wet', 'Damp'), subAttribute('Wet', 'Damp'), [], [], 'Merge', 'QUALITIES', 7253, 'Anonymous', on).
mooCache(documentation('Wet', string('"An Attribute which indicates that the   associated Object is fully saturated with Water."')), documentation('Wet', string('"An Attribute which indicates that the   associated Object is fully saturated with Water."')), [], [], 'Merge', 'QUALITIES', 7255, 'Anonymous', on).
mooCache(=>(attribute(A, 'Wet'), forall(B, =>(part(B, A), exists(C, and(instance(C, 'Water'), or(overlapsSpatially(C, B), meetsSpatially(C, B))))))), and(and(entails(and(part(B, A), not(instance(C, 'Water'))), not(attribute(A, 'Wet'))), and(entails(and(attribute(A, 'Wet'), not(instance(C, 'Water'))), not(part(B, A))), entails(and(and(attribute(A, 'Wet'), part(B, A)), '$existential'(C, '?WATER', and(instance('?WATER', 'Water'), or(overlapsSpatially('?WATER', B), meetsSpatially('?WATER', B))))), instance(C, 'Water')))), and(entails(and(part(B, A), and(not(overlapsSpatially(C, B)), not(meetsSpatially(C, B)))), not(attribute(A, 'Wet'))), and(entails(and(attribute(A, 'Wet'), and(not(overlapsSpatially(C, B)), not(meetsSpatially(C, B)))), not(part(B, A))), and(entails(and(and(attribute(A, 'Wet'), and(part(B, A), not(meetsSpatially(C, B)))), '$existential'(C, '?WATER', and(instance('?WATER', 'Water'), or(overlapsSpatially('?WATER', B), meetsSpatially('?WATER', B))))), overlapsSpatially(C, B)), entails(and(and(attribute(A, 'Wet'), and(part(B, A), not(overlapsSpatially(C, B)))), '$existential'(C, '?WATER', and(instance('?WATER', 'Water'), or(overlapsSpatially('?WATER', B), meetsSpatially('?WATER', B))))), meetsSpatially(C, B)))))), [domainV(C, ['$instanceof':'Water', meetsSpatially:1, overlapsSpatially:1]), domainV(B, [meetsSpatially:2, overlapsSpatially:2, part:1]), domainV(A, [attribute:1, part:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?WATER', and(instance('?WATER', 'Water'), or(overlapsSpatially('?WATER', B), meetsSpatially('?WATER', B)))))], ['OBJ'=A, 'PART'=B, 'WATER'=C], 'Merge', 'QUALITIES', 7257, 'Anonymous', on).
mooCache(subclass('BreakabilityProperty', 'Attribute'), subclass('BreakabilityProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7259, 'Anonymous', on).
mooCache(documentation('BreakabilityProperty', string('"A subclass of Attributes for   characterizing the breakability of CorpuscularObjects."')), documentation('BreakabilityProperty', string('"A subclass of Attributes for   characterizing the breakability of CorpuscularObjects."')), [], [], 'Merge', 'QUALITIES', 7261, 'Anonymous', on).
mooCache(instance('Fragile', 'BreakabilityProperty'), instance('Fragile', 'BreakabilityProperty'), [], [], 'Merge', 'QUALITIES', 7263, 'Anonymous', on).
mooCache(documentation('Fragile', string('"An Attribute which indicates that the   associated Object is very breakable."')), documentation('Fragile', string('"An Attribute which indicates that the   associated Object is very breakable."')), [], [], 'Merge', 'QUALITIES', 7265, 'Anonymous', on).
mooCache(instance('Unbreakable', 'BreakabilityProperty'), instance('Unbreakable', 'BreakabilityProperty'), [], [], 'Merge', 'QUALITIES', 7267, 'Anonymous', on).
mooCache(contraryProperty('Unbreakable', 'Fragile'), contraryProperty('Unbreakable', 'Fragile'), [], [], 'Merge', 'QUALITIES', 7269, 'Anonymous', on).
mooCache(documentation('Unbreakable', string('"An Attribute which indicates that the   associated Object cannot be broken under ordinary circumstances."')), documentation('Unbreakable', string('"An Attribute which indicates that the   associated Object cannot be broken under ordinary circumstances."')), [], [], 'Merge', 'QUALITIES', 7271, 'Anonymous', on).
mooCache(subclass('BiologicalProperty', 'Attribute'), subclass('BiologicalProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7273, 'Anonymous', on).
mooCache(documentation('BiologicalProperty', string('"Attributes that apply specifically   to instances of Organism or parts of an Organism."')), documentation('BiologicalProperty', string('"Attributes that apply specifically   to instances of Organism or parts of an Organism."')), [], [], 'Merge', 'QUALITIES', 7275, 'Anonymous', on).
mooCache(=>(and(attribute(A, B), instance(B, 'BiologicalProperty')), instance(A, 'Organism')), and(entails(and(attribute(A, B), instance(B, 'BiologicalProperty')), instance(A, 'Organism')), and(entails(and(not(instance(A, 'Organism')), instance(B, 'BiologicalProperty')), not(attribute(A, B))), entails(and(not(instance(A, 'Organism')), attribute(A, B)), not(instance(B, 'BiologicalProperty'))))), [domainV(B, ['$instanceof':'BiologicalProperty', attribute:2]), domainV(A, ['$instanceof':'Organism', attribute:1]), domainV(C, []), forall(A), forall(B)], ['ORG'=A, 'ATT'=B], 'Merge', 'QUALITIES', 7277, 'Anonymous', on).
mooCache(subclass('AnimacyProperty', 'BiologicalProperty'), subclass('AnimacyProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7279, 'Anonymous', on).
mooCache(documentation('AnimacyProperty', string('"Attributes that indicate whether an   Organism is alive or not."')), documentation('AnimacyProperty', string('"Attributes that indicate whether an   Organism is alive or not."')), [], [], 'Merge', 'QUALITIES', 7281, 'Anonymous', on).
mooCache(instance('Living', 'AnimacyProperty'), instance('Living', 'AnimacyProperty'), [], [], 'Merge', 'QUALITIES', 7283, 'Anonymous', on).
mooCache(documentation('Living', string('"This Attribute applies to Organisms that are   alive."')), documentation('Living', string('"This Attribute applies to Organisms that are   alive."')), [], [], 'Merge', 'QUALITIES', 7285, 'Anonymous', on).
mooCache(=>(and(instance(A, 'Organism'), agent(B, A)), holdsDuring('WhenFn'(B), attribute(A, 'Living'))), and(entails(and(instance(A, 'Organism'), agent(B, A)), holdsDuring('WhenFn'(B), attribute(A, 'Living'))), and(entails(and(not(holdsDuring('WhenFn'(B), attribute(A, 'Living'))), agent(B, A)), not(instance(A, 'Organism'))), entails(and(not(holdsDuring('WhenFn'(B), attribute(A, 'Living'))), instance(A, 'Organism')), not(agent(B, A))))), [domainV(B, ['WhenFn':1, agent:1]), domainV(A, ['$instanceof':'Organism', agent:2, attribute:1]), domainV(C, []), forall(A), forall(B)], ['ORGANISM'=A, 'PROCESS'=B], 'Merge', 'QUALITIES', 7287, 'Anonymous', on).
mooCache(instance(birthTime, 'BinaryPredicate'), instance(birthTime, 'BinaryPredicate'), [], [], 'Merge', 'QUALITIES', 7289, 'Anonymous', on).
mooCache(instance(birthTime, 'AsymmetricRelation'), instance(birthTime, 'AsymmetricRelation'), [], [], 'Merge', 'QUALITIES', 7291, 'Anonymous', on).
mooCache(domain(birthTime, 1, 'Organism'), domain(birthTime, 1, 'Organism'), [], [], 'Merge', 'QUALITIES', 7293, 'Anonymous', on).
mooCache(domain(birthTime, 2, 'TimePosition'), domain(birthTime, 2, 'TimePosition'), [], [], 'Merge', 'QUALITIES', 7295, 'Anonymous', on).
mooCache(subrelation(birthTime, time), subrelation(birthTime, time), [], [], 'Merge', 'QUALITIES', 7297, 'Anonymous', on).
mooCache(documentation(birthTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism was born."')), documentation(birthTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism was born."')), [], [], 'Merge', 'QUALITIES', 7299, 'Anonymous', on).
mooCache(=>(birthTime(A, B), holdsDuring('ImmediateFutureFn'(B), attribute(A, 'Living'))), and(entails(not(holdsDuring('ImmediateFutureFn'(B), attribute(A, 'Living'))), not(birthTime(A, B))), entails(birthTime(A, B), holdsDuring('ImmediateFutureFn'(B), attribute(A, 'Living')))), [domainV(B, ['ImmediateFutureFn':1, birthTime:2]), domainV(A, [attribute:1, birthTime:1]), domainV(C, []), forall(A), forall(B)], ['ORGANISM'=A, 'TIME'=B], 'Merge', 'QUALITIES', 7301, 'Anonymous', on).
mooCache(=>(birthTime(A, B), holdsDuring(B, exists(C, and(instance(C, 'Birth'), experiencer(C, A))))), and(and(entails(not(holdsDuring(B, instance(C, 'Birth'))), not(birthTime(A, B))), entails(and(birthTime(A, B), '$existential'(C, '?BIRTH', and(holdsDuring(B, instance('?BIRTH', 'Birth')), holdsDuring(B, experiencer('?BIRTH', A))))), holdsDuring(B, instance(C, 'Birth')))), and(entails(not(holdsDuring(B, experiencer(C, A))), not(birthTime(A, B))), entails(and(birthTime(A, B), '$existential'(C, '?BIRTH', and(holdsDuring(B, instance('?BIRTH', 'Birth')), holdsDuring(B, experiencer('?BIRTH', A))))), holdsDuring(B, experiencer(C, A))))), [domainV(C, ['$instanceof':'Birth', experiencer:1]), domainV(B, [birthTime:2, holdsDuring:1]), domainV(A, [birthTime:1, experiencer:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?BIRTH', and(holdsDuring(B, instance('?BIRTH', 'Birth')), holdsDuring(B, experiencer('?BIRTH', A)))))], ['ORGANISM'=A, 'TIME'=B, 'BIRTH'=C], 'Merge', 'QUALITIES', 7303, 'Anonymous', on).
mooCache(instance('Dead', 'AnimacyProperty'), instance('Dead', 'AnimacyProperty'), [], [], 'Merge', 'QUALITIES', 7305, 'Anonymous', on).
mooCache(contraryProperty('Dead', 'Living'), contraryProperty('Dead', 'Living'), [], [], 'Merge', 'QUALITIES', 7307, 'Anonymous', on).
mooCache(documentation('Dead', string('"This Attribute applies to Organisms that are   not alive."')), documentation('Dead', string('"This Attribute applies to Organisms that are   not alive."')), [], [], 'Merge', 'QUALITIES', 7309, 'Anonymous', on).
mooCache(instance(deathTime, 'BinaryPredicate'), instance(deathTime, 'BinaryPredicate'), [], [], 'Merge', 'QUALITIES', 7311, 'Anonymous', on).
mooCache(instance(deathTime, 'AsymmetricRelation'), instance(deathTime, 'AsymmetricRelation'), [], [], 'Merge', 'QUALITIES', 7313, 'Anonymous', on).
mooCache(domain(deathTime, 1, 'Organism'), domain(deathTime, 1, 'Organism'), [], [], 'Merge', 'QUALITIES', 7315, 'Anonymous', on).
mooCache(domain(deathTime, 2, 'TimePosition'), domain(deathTime, 2, 'TimePosition'), [], [], 'Merge', 'QUALITIES', 7317, 'Anonymous', on).
mooCache(subrelation(deathTime, time), subrelation(deathTime, time), [], [], 'Merge', 'QUALITIES', 7319, 'Anonymous', on).
mooCache(documentation(deathTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism died."')), documentation(deathTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism died."')), [], [], 'Merge', 'QUALITIES', 7321, 'Anonymous', on).
mooCache(=>(deathTime(A, B), holdsDuring('FutureFn'(B), attribute(A, 'Dead'))), and(entails(not(holdsDuring('FutureFn'(B), attribute(A, 'Dead'))), not(deathTime(A, B))), entails(deathTime(A, B), holdsDuring('FutureFn'(B), attribute(A, 'Dead')))), [domainV(B, ['FutureFn':1, deathTime:2]), domainV(A, [attribute:1, deathTime:1]), domainV(C, []), forall(A), forall(B)], ['ORGANISM'=A, 'TIME'=B], 'Merge', 'QUALITIES', 7323, 'Anonymous', on).
mooCache(=>(deathTime(A, B), holdsDuring(B, exists(C, and(instance(C, 'Death'), experiencer(C, A))))), and(and(entails(not(holdsDuring(B, instance(C, 'Death'))), not(deathTime(A, B))), entails(and(deathTime(A, B), '$existential'(C, '?DEATH', and(holdsDuring(B, instance('?DEATH', 'Death')), holdsDuring(B, experiencer('?DEATH', A))))), holdsDuring(B, instance(C, 'Death')))), and(entails(not(holdsDuring(B, experiencer(C, A))), not(deathTime(A, B))), entails(and(deathTime(A, B), '$existential'(C, '?DEATH', and(holdsDuring(B, instance('?DEATH', 'Death')), holdsDuring(B, experiencer('?DEATH', A))))), holdsDuring(B, experiencer(C, A))))), [domainV(C, ['$instanceof':'Death', experiencer:1]), domainV(B, [deathTime:2, holdsDuring:1]), domainV(A, [deathTime:1, experiencer:2]), domainV(D, []), forall(A), forall(B), replaceConsVar(C, '$existential'('?DEATH', and(holdsDuring(B, instance('?DEATH', 'Death')), holdsDuring(B, experiencer('?DEATH', A)))))], ['ORGANISM'=A, 'TIME'=B, 'DEATH'=C], 'Merge', 'QUALITIES', 7325, 'Anonymous', on).
mooCache(=>(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), exists(D, and(equal('BeginFn'(D), B), and(equal('EndFn'(D), C), holdsDuring(D, attribute(A, 'Living')))))), and(and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), '$existential'(D, '?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), holds('BeginFn', D, B)), and(entails(and(not(holds('BeginFn', D, B)), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(birthTime(A, B))), and(entails(and(not(holds('BeginFn', D, B)), and(birthTime(A, B), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(deathTime(A, C))), and(entails(and(not(holds('BeginFn', D, B)), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimePoint')))), not(instance(B, 'TimePoint'))), entails(and(not(holds('BeginFn', D, B)), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimePoint')))), not(instance(C, 'TimePoint'))))))), and(and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), '$existential'(D, '?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), holds('EndFn', D, C)), and(entails(and(not(holds('EndFn', D, C)), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(birthTime(A, B))), and(entails(and(not(holds('EndFn', D, C)), and(birthTime(A, B), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(deathTime(A, C))), and(entails(and(not(holds('EndFn', D, C)), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimePoint')))), not(instance(B, 'TimePoint'))), entails(and(not(holds('EndFn', D, C)), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimePoint')))), not(instance(C, 'TimePoint'))))))), and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), '$existential'(D, '?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), holdsDuring(D, attribute(A, 'Living'))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(deathTime(A, C), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(birthTime(A, B))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(instance(B, 'TimePoint'), instance(C, 'TimePoint')))), not(deathTime(A, C))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimePoint')))), not(instance(B, 'TimePoint'))), entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimePoint')))), not(instance(C, 'TimePoint'))))))))), [domainV(D, ['BeginFn':1, 'EndFn':1, holdsDuring:1]), domainV(C, ['$instanceof':'TimePoint', 'EndFn':2, deathTime:2]), domainV(B, ['$instanceof':'TimePoint', 'BeginFn':2, birthTime:2]), domainV(A, [attribute:1, birthTime:1, deathTime:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?INTERVAL', and(holds('BeginFn', '?INTERVAL', B), and(holds('EndFn', '?INTERVAL', C), holdsDuring('?INTERVAL', attribute(A, 'Living'))))))], ['ORGANISM'=A, 'TIME1'=B, 'TIME2'=C, 'INTERVAL'=D], 'Merge', 'QUALITIES', 7327, 'Anonymous', on).
mooCache(=>(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), exists(D, and(starts(B, D), and(finishes(C, D), holdsDuring(D, attribute(A, 'Living')))))), and(and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), '$existential'(D, '?INTERVAL', and(starts(B, '?INTERVAL'), and(finishes(C, '?INTERVAL'), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), starts(B, D)), and(entails(and(not(starts(B, D)), and(deathTime(A, C), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), not(birthTime(A, B))), and(entails(and(not(starts(B, D)), and(birthTime(A, B), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), not(deathTime(A, C))), and(entails(and(not(starts(B, D)), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimeInterval')))), not(instance(B, 'TimeInterval'))), entails(and(not(starts(B, D)), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimeInterval')))), not(instance(C, 'TimeInterval'))))))), and(and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), '$existential'(D, '?INTERVAL', and(starts(B, '?INTERVAL'), and(finishes(C, '?INTERVAL'), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), finishes(C, D)), and(entails(and(not(finishes(C, D)), and(deathTime(A, C), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), not(birthTime(A, B))), and(entails(and(not(finishes(C, D)), and(birthTime(A, B), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), not(deathTime(A, C))), and(entails(and(not(finishes(C, D)), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimeInterval')))), not(instance(B, 'TimeInterval'))), entails(and(not(finishes(C, D)), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimeInterval')))), not(instance(C, 'TimeInterval'))))))), and(entails(and(and(birthTime(A, B), and(deathTime(A, C), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), '$existential'(D, '?INTERVAL', and(starts(B, '?INTERVAL'), and(finishes(C, '?INTERVAL'), holdsDuring('?INTERVAL', attribute(A, 'Living')))))), holdsDuring(D, attribute(A, 'Living'))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(deathTime(A, C), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), not(birthTime(A, B))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(instance(B, 'TimeInterval'), instance(C, 'TimeInterval')))), not(deathTime(A, C))), and(entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(deathTime(A, C), instance(C, 'TimeInterval')))), not(instance(B, 'TimeInterval'))), entails(and(not(holdsDuring(D, attribute(A, 'Living'))), and(birthTime(A, B), and(deathTime(A, C), instance(B, 'TimeInterval')))), not(instance(C, 'TimeInterval'))))))))), [domainV(D, [finishes:2, holdsDuring:1, starts:2]), domainV(C, ['$instanceof':'TimeInterval', deathTime:2, finishes:1]), domainV(B, ['$instanceof':'TimeInterval', birthTime:2, starts:1]), domainV(A, [attribute:1, birthTime:1, deathTime:1]), domainV(E, []), forall(A), forall(B), forall(C), replaceConsVar(D, '$existential'('?INTERVAL', and(starts(B, '?INTERVAL'), and(finishes(C, '?INTERVAL'), holdsDuring('?INTERVAL', attribute(A, 'Living'))))))], ['ORGANISM'=A, 'TIME1'=B, 'TIME2'=C, 'INTERVAL'=D], 'Merge', 'QUALITIES', 7329, 'Anonymous', on).
mooCache(subclass('SexProperty', 'BiologicalProperty'), subclass('SexProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7331, 'Anonymous', on).
mooCache(documentation('SexProperty', string('"Attributes that indicate the sex of an   Organism."')), documentation('SexProperty', string('"Attributes that indicate the sex of an   Organism."')), [], [], 'Merge', 'QUALITIES', 7333, 'Anonymous', on).
mooCache(instance('Female', 'SexProperty'), instance('Female', 'SexProperty'), [], [], 'Merge', 'QUALITIES', 7335, 'Anonymous', on).
mooCache(documentation('Female', string('"An Attribute indicating that an Organism is   female in nature."')), documentation('Female', string('"An Attribute indicating that an Organism is   female in nature."')), [], [], 'Merge', 'QUALITIES', 7337, 'Anonymous', on).
mooCache(instance('Male', 'SexProperty'), instance('Male', 'SexProperty'), [], [], 'Merge', 'QUALITIES', 7339, 'Anonymous', on).
mooCache(contraryProperty('Male', 'Female'), contraryProperty('Male', 'Female'), [], [], 'Merge', 'QUALITIES', 7341, 'Anonymous', on).
mooCache(documentation('Male', string('"An Attribute indicating that an Organism is   male in nature."')), documentation('Male', string('"An Attribute indicating that an Organism is   male in nature."')), [], [], 'Merge', 'QUALITIES', 7343, 'Anonymous', on).
mooCache(subclass('DevelopmentalProperty', 'BiologicalProperty'), subclass('DevelopmentalProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7345, 'Anonymous', on).
mooCache(documentation('DevelopmentalProperty', string('"Attributes that indicate the   stage of development of an Organism."')), documentation('DevelopmentalProperty', string('"Attributes that indicate the   stage of development of an Organism."')), [], [], 'Merge', 'QUALITIES', 7347, 'Anonymous', on).
mooCache(instance('FullyFormed', 'DevelopmentalProperty'), instance('FullyFormed', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7349, 'Anonymous', on).
mooCache(documentation('FullyFormed', string('"The stage of an Organism or an   AnatomicalStructure when it has reached the end of its growth   phase."')), documentation('FullyFormed', string('"The stage of an Organism or an   AnatomicalStructure when it has reached the end of its growth   phase."')), [], [], 'Merge', 'QUALITIES', 7351, 'Anonymous', on).
mooCache(instance('NonFullyFormed', 'DevelopmentalProperty'), instance('NonFullyFormed', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7353, 'Anonymous', on).
mooCache(contraryProperty('NonFullyFormed', 'FullyFormed'), contraryProperty('NonFullyFormed', 'FullyFormed'), [], [], 'Merge', 'QUALITIES', 7355, 'Anonymous', on).
mooCache(successorAttribute('NonFullyFormed', 'FullyFormed'), successorAttribute('NonFullyFormed', 'FullyFormed'), [], [], 'Merge', 'QUALITIES', 7357, 'Anonymous', on).
mooCache(documentation('NonFullyFormed', string('"The stage of an Animal before it is   FullyFormed."')), documentation('NonFullyFormed', string('"The stage of an Animal before it is   FullyFormed."')), [], [], 'Merge', 'QUALITIES', 7359, 'Anonymous', on).
mooCache(instance('Larval', 'DevelopmentalProperty'), instance('Larval', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7361, 'Anonymous', on).
mooCache(subAttribute('Larval', 'NonFullyFormed'), subAttribute('Larval', 'NonFullyFormed'), [], [], 'Merge', 'QUALITIES', 7363, 'Anonymous', on).
mooCache(documentation('Larval', string('"Form of most Invertebrates, Amphibians, and   Fish immediately after they hatch.  This form is fundamentally unlike   the adult form, and metamorphosis is required to reach the latter form."')), documentation('Larval', string('"Form of most Invertebrates, Amphibians, and   Fish immediately after they hatch.  This form is fundamentally unlike   the adult form, and metamorphosis is required to reach the latter form."')), [], [], 'Merge', 'QUALITIES', 7365, 'Anonymous', on).
mooCache(instance('Embryonic', 'DevelopmentalProperty'), instance('Embryonic', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7367, 'Anonymous', on).
mooCache(subAttribute('Embryonic', 'NonFullyFormed'), subAttribute('Embryonic', 'NonFullyFormed'), [], [], 'Merge', 'QUALITIES', 7369, 'Anonymous', on).
mooCache(successorAttribute('Embryonic', 'Fetal'), successorAttribute('Embryonic', 'Fetal'), [], [], 'Merge', 'QUALITIES', 7371, 'Anonymous', on).
mooCache(documentation('Embryonic', string('"The stage of an Organism or an   AnatomicalStructure that exists only before the Organism is fully   formed.  Mammals, for example, have this Attribute only prior to   their birth."')), documentation('Embryonic', string('"The stage of an Organism or an   AnatomicalStructure that exists only before the Organism is fully   formed.  Mammals, for example, have this Attribute only prior to   their birth."')), [], [], 'Merge', 'QUALITIES', 7373, 'Anonymous', on).
mooCache(instance('Fetal', 'DevelopmentalProperty'), instance('Fetal', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7375, 'Anonymous', on).
mooCache(subAttribute('Fetal', 'NonFullyFormed'), subAttribute('Fetal', 'NonFullyFormed'), [], [], 'Merge', 'QUALITIES', 7377, 'Anonymous', on).
mooCache(contraryProperty('Fetal', 'Embryonic'), contraryProperty('Fetal', 'Embryonic'), [], [], 'Merge', 'QUALITIES', 7379, 'Anonymous', on).
mooCache(documentation('Fetal', string('"A Vertebrate in the later stage of development before   its birth has this Attribute, which indicates that the main features of the   FullyFormed animal are recognizable."')), documentation('Fetal', string('"A Vertebrate in the later stage of development before   its birth has this Attribute, which indicates that the main features of the   FullyFormed animal are recognizable."')), [], [], 'Merge', 'QUALITIES', 7381, 'Anonymous', on).
mooCache(subclass('PsychologicalProperty', 'BiologicalProperty'), subclass('PsychologicalProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7383, 'Anonymous', on).
mooCache(documentation('PsychologicalProperty', string('"Attributes that characterize the mental   or behavioral life of an Organism (and perhaps other Agents)."')), documentation('PsychologicalProperty', string('"Attributes that characterize the mental   or behavioral life of an Organism (and perhaps other Agents)."')), [], [], 'Merge', 'QUALITIES', 7385, 'Anonymous', on).
mooCache(subclass('EmotionalState', 'PsychologicalProperty'), subclass('EmotionalState', 'PsychologicalProperty'), [], [], 'Merge', 'QUALITIES', 7387, 'Anonymous', on).
mooCache(disjoint('EmotionalState', 'TraitProperty'), disjoint('EmotionalState', 'TraitProperty'), [], [], 'Merge', 'QUALITIES', 7389, 'Anonymous', on).
mooCache(documentation('EmotionalState', string('"The Class of Attributes that denote emotional   states of Organisms (and perhaps other Agents).  Note that EmotionalState   is distinguished from TraitProperty in part by the fact that instances of the   former are relatively transient while instances of the latter are persistent   features of a creature\'s behavioral/psychological make-up."')), documentation('EmotionalState', string('"The Class of Attributes that denote emotional   states of Organisms (and perhaps other Agents).  Note that EmotionalState   is distinguished from TraitProperty in part by the fact that instances of the   former are relatively transient while instances of the latter are persistent   features of a creature\'s behavioral/psychological make-up."')), [], [], 'Merge', 'QUALITIES', 7391, 'Anonymous', on).
mooCache(subclass('TraitProperty', 'PsychologicalProperty'), subclass('TraitProperty', 'PsychologicalProperty'), [], [], 'Merge', 'QUALITIES', 7393, 'Anonymous', on).
mooCache(documentation('TraitProperty', string('"Attributes that indicate the the   behavior/personality traits of an Organism."')), documentation('TraitProperty', string('"Attributes that indicate the the   behavior/personality traits of an Organism."')), [], [], 'Merge', 'QUALITIES', 7395, 'Anonymous', on).
mooCache(instance('Aggressive', 'TraitProperty'), instance('Aggressive', 'TraitProperty'), [], [], 'Merge', 'QUALITIES', 7397, 'Anonymous', on).
mooCache(contraryProperty('Aggressive', 'Docile'), contraryProperty('Aggressive', 'Docile'), [], [], 'Merge', 'QUALITIES', 7399, 'Anonymous', on).
mooCache(documentation('Aggressive', string('"The Attribute of having an aggressive   disposition."')), documentation('Aggressive', string('"The Attribute of having an aggressive   disposition."')), [], [], 'Merge', 'QUALITIES', 7401, 'Anonymous', on).
mooCache(instance('Docile', 'TraitProperty'), instance('Docile', 'TraitProperty'), [], [], 'Merge', 'QUALITIES', 7403, 'Anonymous', on).
mooCache(documentation('Docile', string('"The Attribute of having a docile disposition."')), documentation('Docile', string('"The Attribute of having a docile disposition."')), [], [], 'Merge', 'QUALITIES', 7405, 'Anonymous', on).
mooCache(subclass('ConsciousnessProperty', 'PsychologicalProperty'), subclass('ConsciousnessProperty', 'PsychologicalProperty'), [], [], 'Merge', 'QUALITIES', 7407, 'Anonymous', on).
mooCache(documentation('ConsciousnessProperty', string('"Attributes that indicate whether   an Organism is conscious."')), documentation('ConsciousnessProperty', string('"Attributes that indicate whether   an Organism is conscious."')), [], [], 'Merge', 'QUALITIES', 7409, 'Anonymous', on).
mooCache(=>(instance(A, 'ConsciousnessProperty'), =>(holdsDuring(B, attribute(C, A)), holdsDuring(B, attribute(C, 'Living')))), and(entails(and(holdsDuring(B, attribute(C, A)), not(holdsDuring(B, attribute(C, 'Living')))), not(instance(A, 'ConsciousnessProperty'))), and(entails(and(instance(A, 'ConsciousnessProperty'), not(holdsDuring(B, attribute(C, 'Living')))), not(holdsDuring(B, attribute(C, A)))), entails(and(instance(A, 'ConsciousnessProperty'), holdsDuring(B, attribute(C, A))), holdsDuring(B, attribute(C, 'Living'))))), [domainV(C, [attribute:1]), domainV(B, [holdsDuring:1]), domainV(A, ['$instanceof':'ConsciousnessProperty', attribute:2]), domainV(D, []), forall(A), forall(B), forall(C)], ['PROPERTY'=A, 'TIME'=B, 'ORGANISM'=C], 'Merge', 'QUALITIES', 7411, 'Anonymous', on).
mooCache(subclass('Asleep', 'ConsciousnessProperty'), subclass('Asleep', 'ConsciousnessProperty'), [], [], 'Merge', 'QUALITIES', 7413, 'Anonymous', on).
mooCache(contraryProperty('Asleep', 'Unconscious'), contraryProperty('Asleep', 'Unconscious'), [], [], 'Merge', 'QUALITIES', 7415, 'Anonymous', on).
mooCache(contraryProperty('Asleep', 'Awake'), contraryProperty('Asleep', 'Awake'), [], [], 'Merge', 'QUALITIES', 7417, 'Anonymous', on).
mooCache(documentation('Asleep', string('"This Attribute applies to Organisms that are   sleeping."')), documentation('Asleep', string('"This Attribute applies to Organisms that are   sleeping."')), [], [], 'Merge', 'QUALITIES', 7419, 'Anonymous', on).
mooCache(subclass('Unconscious', 'ConsciousnessProperty'), subclass('Unconscious', 'ConsciousnessProperty'), [], [], 'Merge', 'QUALITIES', 7421, 'Anonymous', on).
mooCache(contraryProperty('Unconscious', 'Awake'), contraryProperty('Unconscious', 'Awake'), [], [], 'Merge', 'QUALITIES', 7423, 'Anonymous', on).
mooCache(documentation('Unconscious', string('"This Attribute applies to Organisms that   are unconscious because of a non-natural process, e.g. a blow to the head,   a drug, etc.  Note that the Attribute Asleep is used to describe the   ConsciousnessProperty of an Organism that is asleep."')), documentation('Unconscious', string('"This Attribute applies to Organisms that   are unconscious because of a non-natural process, e.g. a blow to the head,   a drug, etc.  Note that the Attribute Asleep is used to describe the   ConsciousnessProperty of an Organism that is asleep."')), [], [], 'Merge', 'QUALITIES', 7425, 'Anonymous', on).
mooCache(subclass('Awake', 'ConsciousnessProperty'), subclass('Awake', 'ConsciousnessProperty'), [], [], 'Merge', 'QUALITIES', 7427, 'Anonymous', on).
mooCache(documentation('Awake', string('"This Attribute applies to Organisms that are   neither Unconscious nor Asleep."')), documentation('Awake', string('"This Attribute applies to Organisms that are   neither Unconscious nor Asleep."')), [], [], 'Merge', 'QUALITIES', 7429, 'Anonymous', on).
mooCache(subclass('CompetitionProperty', 'Attribute'), subclass('CompetitionProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7431, 'Anonymous', on).
mooCache(documentation('CompetitionProperty', string('"A Class containing all of the   Attributes that are specific to participants in a Competition.  Some   of these Attributes are winning, losing, won, lost, struggling, etc."')), documentation('CompetitionProperty', string('"A Class containing all of the   Attributes that are specific to participants in a Competition.  Some   of these Attributes are winning, losing, won, lost, struggling, etc."')), [], [], 'Merge', 'QUALITIES', 7433, 'Anonymous', on).
mooCache(subclass('NormativeProperty', 'Attribute'), subclass('NormativeProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7435, 'Anonymous', on).
mooCache(documentation('NormativeProperty', string('"A Class containing all of the   Attributes that are specific to judgements about morality, legality,   aesthetics, etiquette, etc.  In general, these judgements express that   something ought to be the case."')), documentation('NormativeProperty', string('"A Class containing all of the   Attributes that are specific to judgements about morality, legality,   aesthetics, etiquette, etc.  In general, these judgements express that   something ought to be the case."')), [], [], 'Merge', 'QUALITIES', 7437, 'Anonymous', on).
mooCache(instance(modalProperty, 'BinaryPredicate'), instance(modalProperty, 'BinaryPredicate'), [], [], 'Merge', 'QUALITIES', 7439, 'Anonymous', on).
mooCache(instance(modalProperty, 'AsymmetricRelation'), instance(modalProperty, 'AsymmetricRelation'), [], [], 'Merge', 'QUALITIES', 7441, 'Anonymous', on).
mooCache(instance(modalProperty, 'IrreflexiveRelation'), instance(modalProperty, 'IrreflexiveRelation'), [], [], 'Merge', 'QUALITIES', 7443, 'Anonymous', on).
mooCache(subrelation(modalProperty, property), subrelation(modalProperty, property), [], [], 'Merge', 'QUALITIES', 7445, 'Anonymous', on).
mooCache(domain(modalProperty, 1, 'Formula'), domain(modalProperty, 1, 'Formula'), [], [], 'Merge', 'QUALITIES', 7447, 'Anonymous', on).
mooCache(domain(modalProperty, 2, 'NormativeProperty'), domain(modalProperty, 2, 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7449, 'Anonymous', on).
mooCache(documentation(modalProperty, string('"A BinaryRelation that is used to state the   normative force of a Proposition.  (modalProperty ?FORMULA ?PROP) means   that the Proposition expressed by ?FORMULA has the NormativeProperty   ?PROP.  For example, (modalProperty (exists (?ACT ?OBJ) (and   (instance ?ACT Giving) (agent ?ACT John) (patient ?ACT ?OBJ)   (destination ?ACT Tom))) Obligation) means that John is obligated to give   Tom something."')), documentation(modalProperty, string('"A BinaryRelation that is used to state the   normative force of a Proposition.  (modalProperty ?FORMULA ?PROP) means   that the Proposition expressed by ?FORMULA has the NormativeProperty   ?PROP.  For example, (modalProperty (exists (?ACT ?OBJ) (and   (instance ?ACT Giving) (agent ?ACT John) (patient ?ACT ?OBJ)   (destination ?ACT Tom))) Obligation) means that John is obligated to give   Tom something."')), [], [], 'Merge', 'QUALITIES', 7451, 'Anonymous', on).
mooCache(=>(and(modalProperty(A, B), entails(A, C)), modalProperty(C, B)), and(entails(and(modalProperty(A, B), entails(A, C)), modalProperty(C, B)), and(entails(and(not(modalProperty(C, B)), entails(A, C)), not(modalProperty(A, B))), entails(and(not(modalProperty(C, B)), modalProperty(A, B)), not(entails(A, C))))), [domainV(C, [entails:2, modalProperty:1]), domainV(B, [modalProperty:2]), domainV(A, [entails:1, modalProperty:1]), domainV(D, []), forall(A), forall(B), forall(C)], ['FORMULA1'=A, 'PROP'=B, 'FORMULA2'=C], 'Merge', 'QUALITIES', 7453, 'Anonymous', on).
mooCache(subclass('SubjectiveAssessmentProperty', 'NormativeProperty'), subclass('SubjectiveAssessmentProperty', 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7455, 'Anonymous', on).
mooCache(documentation('SubjectiveAssessmentProperty', string('"The Class of NormativeProperties  which lack an objective criterion for their attribution, i.e. the attribution of   these Attributes varies from subject to subject and even with respect to the   same subject over time.  This Class is, generally speaking, only used when   mapping external knowledge sources to the SUMO.  If a term from such a knowledge   source seems to lack objective criteria for its attribution, it is assigned to   this Class."')), documentation('SubjectiveAssessmentProperty', string('"The Class of NormativeProperties  which lack an objective criterion for their attribution, i.e. the attribution of   these Attributes varies from subject to subject and even with respect to the   same subject over time.  This Class is, generally speaking, only used when   mapping external knowledge sources to the SUMO.  If a term from such a knowledge   source seems to lack objective criteria for its attribution, it is assigned to   this Class."')), [], [], 'Merge', 'QUALITIES', 7457, 'Anonymous', on).
mooCache(instance('Obligation', 'NormativeProperty'), instance('Obligation', 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7459, 'Anonymous', on).
mooCache(documentation('Obligation', string('"Attribute that applies to Propositions that an   Agent is required, by some authority, to make true."')), documentation('Obligation', string('"Attribute that applies to Propositions that an   Agent is required, by some authority, to make true."')), [], [], 'Merge', 'QUALITIES', 7461, 'Anonymous', on).
mooCache(subAttribute('Law', 'Obligation'), subAttribute('Law', 'Obligation'), [], [], 'Merge', 'QUALITIES', 7463, 'Anonymous', on).
mooCache(documentation('Law', string('"Attribute that applies to Propositions that are   required by a government or a branch of the government and that are enforced   with penalties for noncompliance.  These Propositions may be codified as   legislation or they may be more informal, as in the case of government policy."')), documentation('Law', string('"Attribute that applies to Propositions that are   required by a government or a branch of the government and that are enforced   with penalties for noncompliance.  These Propositions may be codified as   legislation or they may be more informal, as in the case of government policy."')), [], [], 'Merge', 'QUALITIES', 7465, 'Anonymous', on).
mooCache(instance('Promise', 'NormativeProperty'), instance('Promise', 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7467, 'Anonymous', on).
mooCache(documentation('Promise', string('"Attribute that applies to Propositions that   an Agent promises to make true.  Promises may be implicit or explicit.    They may be expressed in a written or verbal or gestural manner."')), documentation('Promise', string('"Attribute that applies to Propositions that   an Agent promises to make true.  Promises may be implicit or explicit.    They may be expressed in a written or verbal or gestural manner."')), [], [], 'Merge', 'QUALITIES', 7469, 'Anonymous', on).
mooCache(subAttribute('Contract', 'Promise'), subAttribute('Contract', 'Promise'), [], [], 'Merge', 'QUALITIES', 7471, 'Anonymous', on).
mooCache(documentation('Contract', string('"Attribute that applies to Propositions where   something is promised in return, i.e. a reciprocal promise."')), documentation('Contract', string('"Attribute that applies to Propositions where   something is promised in return, i.e. a reciprocal promise."')), [], [], 'Merge', 'QUALITIES', 7473, 'Anonymous', on).
mooCache(subAttribute('PurchaseContract', 'Contract'), subAttribute('PurchaseContract', 'Contract'), [], [], 'Merge', 'QUALITIES', 7475, 'Anonymous', on).
mooCache(documentation('PurchaseContract', string('"A Contract between two Agents in   which one Agent agrees to render the other some good or service in   exchange for currency."')), documentation('PurchaseContract', string('"A Contract between two Agents in   which one Agent agrees to render the other some good or service in   exchange for currency."')), [], [], 'Merge', 'QUALITIES', 7477, 'Anonymous', on).
mooCache(subAttribute('ServiceContract', 'Contract'), subAttribute('ServiceContract', 'Contract'), [], [], 'Merge', 'QUALITIES', 7479, 'Anonymous', on).
mooCache(documentation('ServiceContract', string('"A Contract where an Agent agrees to   perform a service for another Agent (usually for a price)."')), documentation('ServiceContract', string('"A Contract where an Agent agrees to   perform a service for another Agent (usually for a price)."')), [], [], 'Merge', 'QUALITIES', 7481, 'Anonymous', on).
mooCache(subAttribute('Warranty', 'ServiceContract'), subAttribute('Warranty', 'ServiceContract'), [], [], 'Merge', 'QUALITIES', 7483, 'Anonymous', on).
mooCache(documentation('Warranty', string('"A Contract that states the cirumstances   under which defects in the product will be corrected for no charge.    A Warranty is usually limited to a length of time that is specified   in the Warranty itself.  A Warranty also includes information about   what is not covered and actions that invalidate the Warranty."')), documentation('Warranty', string('"A Contract that states the cirumstances   under which defects in the product will be corrected for no charge.    A Warranty is usually limited to a length of time that is specified   in the Warranty itself.  A Warranty also includes information about   what is not covered and actions that invalidate the Warranty."')), [], [], 'Merge', 'QUALITIES', 7485, 'Anonymous', on).
mooCache(subAttribute('NakedPromise', 'Promise'), subAttribute('NakedPromise', 'Promise'), [], [], 'Merge', 'QUALITIES', 7487, 'Anonymous', on).
mooCache(contraryProperty('NakedPromise', 'Contract'), contraryProperty('NakedPromise', 'Contract'), [], [], 'Merge', 'QUALITIES', 7489, 'Anonymous', on).
mooCache(documentation('NakedPromise', string('"A Promise where nothing is promised in return,   i.e. a nudum pactum."')), documentation('NakedPromise', string('"A Promise where nothing is promised in return,   i.e. a nudum pactum."')), [], [], 'Merge', 'QUALITIES', 7491, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 147, 'Anonymous', on).
mooCache(instance(instance, 'BinaryPredicate'), instance(instance, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 156, 'Anonymous', on).
mooCache(instance(instance, 'AntisymmetricRelation'), instance(instance, 'AntisymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 158, 'Anonymous', on).
mooCache(domain(instance, 1, 'Entity'), domain(instance, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 160, 'Anonymous', on).
mooCache(domain(instance, 2, 'Class'), domain(instance, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 162, 'Anonymous', on).
mooCache(documentation(instance, string('"An object is an instance a Class if   it is a member of that Class.  An individual may be an instance of many   classes, some of which may be subclasses of others.  Thus, there is no   assumption in the meaning of instance about specificity or uniqueness."')), documentation(instance, string('"An object is an instance a Class if   it is a member of that Class.  An individual may be an instance of many   classes, some of which may be subclasses of others.  Thus, there is no   assumption in the meaning of instance about specificity or uniqueness."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 164, 'Anonymous', on).
mooCache(instance(inverse, 'BinaryPredicate'), instance(inverse, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 166, 'Anonymous', on).
mooCache(instance(inverse, 'SymmetricRelation'), instance(inverse, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 168, 'Anonymous', on).
mooCache(domain(inverse, 1, 'BinaryRelation'), domain(inverse, 1, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 170, 'Anonymous', on).
mooCache(domain(inverse, 2, 'BinaryRelation'), domain(inverse, 2, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 172, 'Anonymous', on).
mooCache(documentation(inverse, string('"The inverse of a BinaryRelation is a relation   in which all the tuples of the original relation are reversed.  In   other words, one BinaryRelation is the inverse of another if they are   equivalent when their arguments are swapped."')), documentation(inverse, string('"The inverse of a BinaryRelation is a relation   in which all the tuples of the original relation are reversed.  In   other words, one BinaryRelation is the inverse of another if they are   equivalent when their arguments are swapped."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 174, 'Anonymous', on).
mooCache(inverse(Y14, Z14)=>forall(A15, forall(B15, holds(Y14, B15, A15)<=>holds(Z14, A15, B15))), entails(not holds(Z14, A15, B15)and holds(Z14, A15, B15), not inverse(Y14, Z14))and (entails(not holds(Z14, A15, B15)and holds(Y14, B15, A15), not inverse(Y14, Z14))and entails(inverse(Y14, Z14)and holds(Y14, B15, A15), holds(Z14, A15, B15))and entails(inverse(Y14, Z14)and not holds(Z14, A15, B15), not holds(Y14, B15, A15)))and entails(not holds(Y14, B15, A15)and holds(Y14, B15, A15), not inverse(Y14, Z14))and entails(not holds(Y14, B15, A15)and holds(Z14, A15, B15), not inverse(Y14, Z14))and entails(inverse(Y14, Z14)and holds(Z14, A15, B15), holds(Y14, B15, A15))and entails(inverse(Y14, Z14)and not holds(Y14, B15, A15), not holds(Z14, A15, B15)), [domainV(B15, [Y14:1, Z14:2]), domainV(A15, [Y14:2, Z14:1]), domainV(Z14, [holds:1, inverse:2]), domainV(Y14, [holds:1, inverse:1]), domainV(_G9883, []), forall(Y14), forall(Z14), forall(A15), forall(B15)], ['REL1'=Y14, 'REL2'=Z14, 'INST1'=B15, 'INST2'=A15], 'Merge', 'STRUCTURAL ONTOLOGY', 176, 'Anonymous', on).
mooCache(instance(subclass, 'BinaryPredicate'), instance(subclass, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 178, 'Anonymous', on).
mooCache(instance(subclass, 'PartialOrderingRelation'), instance(subclass, 'PartialOrderingRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 180, 'Anonymous', on).
mooCache(domain(subclass, 1, 'Class'), domain(subclass, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 182, 'Anonymous', on).
mooCache(domain(subclass, 2, 'Class'), domain(subclass, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 184, 'Anonymous', on).
mooCache(documentation(subclass, string('"Class C is a subclass of Class P only if   every instance of C is also an instance of P.  A class may have multiple   superclasses and subclasses."')), documentation(subclass, string('"Class C is a subclass of Class P only if   every instance of C is also an instance of P.  A class may have multiple   superclasses and subclasses."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 186, 'Anonymous', on).
mooCache(subclass(D35, E35)=>forall(F35, instance(F35, D35)=>instance(F35, E35)), entails(instance(F35, D35)and not instance(F35, E35), not subclass(D35, E35))and entails(subclass(D35, E35)and not instance(F35, E35), not instance(F35, D35))and entails(subclass(D35, E35)and instance(F35, D35), instance(F35, E35)), [domainV(F35, []), domainV(E35, [instance:2, subclass:2]), domainV(D35, [instance:2, subclass:1]), domainV(_G7278, []), forall(D35), forall(E35), forall(F35)], ['SUBCLASS'=D35, 'CLASS'=E35, 'INST'=F35], 'Merge', 'STRUCTURAL ONTOLOGY', 188, 'Anonymous', on).
mooCache(instance(subrelation, 'BinaryPredicate'), instance(subrelation, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 190, 'Anonymous', on).
mooCache(instance(subrelation, 'PartialOrderingRelation'), instance(subrelation, 'PartialOrderingRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 192, 'Anonymous', on).
mooCache(domain(subrelation, 1, 'Relation'), domain(subrelation, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 194, 'Anonymous', on).
mooCache(domain(subrelation, 2, 'Relation'), domain(subrelation, 2, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 196, 'Anonymous', on).
mooCache(documentation(subrelation, string('"A Relation R is a subrelation   Relation R\' if R is a subclass R\'.  This implies that every   tuple of R is also a tuple of R\'.  Again, if R holds for some arguments   arg_1, arg_2, ... arg_n, then R\' holds for the same arguments.  Thus, a   Relation and its subrelation must have the same valence. In CycL,   subrelation is called #$genlPreds."')), documentation(subrelation, string('"A Relation R is a subrelation   Relation R\' if R is a subclass R\'.  This implies that every   tuple of R is also a tuple of R\'.  Again, if R holds for some arguments   arg_1, arg_2, ... arg_n, then R\' holds for the same arguments.  Thus, a   Relation and its subrelation must have the same valence. In CycL,   subrelation is called #$genlPreds."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 198, 'Anonymous', on).
mooCache(subrelation(P16, Q16)and valence(P16, R16)=>valence(Q16, R16), entails(subrelation(P16, Q16)and valence(P16, R16), valence(Q16, R16))and entails(not valence(Q16, R16)and valence(P16, R16), not subrelation(P16, Q16))and entails(not valence(Q16, R16)and subrelation(P16, Q16), not valence(P16, R16)), [domainV(R16, [valence:2]), domainV(Q16, [subrelation:2, valence:1]), domainV(P16, [subrelation:1, valence:1]), domainV(_G6145, []), forall(P16), forall(Q16), forall(R16)], ['PRED1'=P16, 'PRED2'=Q16, 'NUMBER'=R16], 'Merge', 'STRUCTURAL ONTOLOGY', 200, 'Anonymous', on).
mooCache(subrelation(H20, I20)and domain(I20, J20, K20)and domain(H20, J20, L20)=>subclass(L20, K20), entails(subrelation(H20, I20)and domain(I20, J20, K20)and domain(H20, J20, L20), subclass(L20, K20))and entails(not subclass(L20, K20)and domain(I20, J20, K20)and domain(H20, J20, L20), not subrelation(H20, I20))and entails(not subclass(L20, K20)and subrelation(H20, I20)and domain(H20, J20, L20), not domain(I20, J20, K20))and entails(not subclass(L20, K20)and subrelation(H20, I20)and domain(I20, J20, K20), not domain(H20, J20, L20)), [domainV(L20, [domain:3, subclass:1]), domainV(K20, [domain:3, subclass:2]), domainV(J20, [domain:2]), domainV(I20, [domain:1, subrelation:2]), domainV(H20, [domain:1, subrelation:1]), domainV(_G8587, []), forall(H20), forall(I20), forall(J20), forall(K20), forall(L20)], ['PRED1'=H20, 'PRED2'=I20, 'NUMBER'=J20, 'CLASS2'=K20, 'CLASS1'=L20], 'Merge', 'STRUCTURAL ONTOLOGY', 202, 'Anonymous', on).
mooCache(subrelation(Y25, Z25)and instance(Z25, A26)and instance(A26, 'InheritableRelation')=>instance(Y25, A26), entails(subrelation(Y25, Z25)and instance(Z25, A26)and instance(A26, 'InheritableRelation'), instance(Y25, A26))and entails(not instance(Y25, A26)and instance(Z25, A26)and instance(A26, 'InheritableRelation'), not subrelation(Y25, Z25))and entails(not instance(Y25, A26)and subrelation(Y25, Z25)and instance(A26, 'InheritableRelation'), not instance(Z25, A26))and entails(not instance(Y25, A26)and subrelation(Y25, Z25)and instance(Z25, A26), not instance(A26, 'InheritableRelation')), [domainV(A26, ['$instanceof':'InheritableRelation', instance:2]), domainV(Z25, [subrelation:2]), domainV(Y25, [subrelation:1]), domainV(_G7287, []), forall(Y25), forall(Z25), forall(A26)], ['PRED1'=Y25, 'PRED2'=Z25, 'CLASS'=A26], 'Merge', 'STRUCTURAL ONTOLOGY', 206, 'Anonymous', on).
mooCache(instance(domain, 'TernaryPredicate'), instance(domain, 'TernaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 208, 'Anonymous', on).
mooCache(domain(domain, 1, 'Relation'), domain(domain, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 210, 'Anonymous', on).
mooCache(domain(domain, 2, 'PositiveInteger'), domain(domain, 2, 'PositiveInteger'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 212, 'Anonymous', on).
mooCache(domain(domain, 3, 'Class'), domain(domain, 3, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 214, 'Anonymous', on).
mooCache(documentation(domain, string('"Provides a computationally and heuristically  convenient mechanism for declaring the argument types of a given relation.    The formula (domain ?REL 3 ?CLASS) says that the 3rd element of each   tuple in the relation ?REL is an instance of ?CLASS.  Specifying argument  types is very helpful in maintaining ontologies.  Representation systems can   use these specifications to classify terms and check integrity constraints.    If the restriction on the argument type of a Relation is not captured by a   Class already defined in the ontology, one can specify a Class compositionally   with the functions UnionFn, IntersectionFn, etc."')), documentation(domain, string('"Provides a computationally and heuristically  convenient mechanism for declaring the argument types of a given relation.    The formula (domain ?REL 3 ?CLASS) says that the 3rd element of each   tuple in the relation ?REL is an instance of ?CLASS.  Specifying argument  types is very helpful in maintaining ontologies.  Representation systems can   use these specifications to classify terms and check integrity constraints.    If the restriction on the argument type of a Relation is not captured by a   Class already defined in the ontology, one can specify a Class compositionally   with the functions UnionFn, IntersectionFn, etc."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 216, 'Anonymous', on).
mooCache(instance(domainSubclass, 'TernaryPredicate'), instance(domainSubclass, 'TernaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 228, 'Anonymous', on).
mooCache(domain(domainSubclass, 1, 'Relation'), domain(domainSubclass, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 230, 'Anonymous', on).
mooCache(domain(domainSubclass, 2, 'PositiveInteger'), domain(domainSubclass, 2, 'PositiveInteger'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 232, 'Anonymous', on).
mooCache(domain(domainSubclass, 3, 'Class'), domain(domainSubclass, 3, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 234, 'Anonymous', on).
mooCache(documentation(domainSubclass, string('"Predicate used to specify argument   type restrictions of Predicates.  The formula (domainSubclass   ?REL 3 ?CLASS) says that the 3rd element of each tuple in the relation   ?REL is a subclass of ?CLASS."')), documentation(domainSubclass, string('"Predicate used to specify argument   type restrictions of Predicates.  The formula (domainSubclass   ?REL 3 ?CLASS) says that the 3rd element of each tuple in the relation   ?REL is a subclass of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 236, 'Anonymous', on).
mooCache(instance(equal, 'BinaryPredicate'), instance(equal, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 248, 'Anonymous', on).
mooCache(instance(equal, 'EquivalenceRelation'), instance(equal, 'EquivalenceRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 250, 'Anonymous', on).
mooCache(instance(equal, 'RelationExtendedToQuantities'), instance(equal, 'RelationExtendedToQuantities'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 252, 'Anonymous', on).
mooCache(domain(equal, 1, 'Entity'), domain(equal, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 254, 'Anonymous', on).
mooCache(domain(equal, 2, 'Entity'), domain(equal, 2, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 256, 'Anonymous', on).
mooCache(documentation(equal, string('"(equal ?ENTITY1 ?ENTITY2) is true just in case   ?ENTITY1 is identical with ?ENTITY2."')), documentation(equal, string('"(equal ?ENTITY1 ?ENTITY2) is true just in case   ?ENTITY1 is identical with ?ENTITY2."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 258, 'Anonymous', on).
mooCache(equal(S21, T21)=>forall(U21, attribute(S21, U21)<=>attribute(T21, U21)), entails(not attribute(T21, U21)and attribute(T21, U21), not equal(S21, T21))and (entails(not attribute(T21, U21)and attribute(S21, U21), not equal(S21, T21))and entails(equal(S21, T21)and attribute(S21, U21), attribute(T21, U21))and entails(equal(S21, T21)and not attribute(T21, U21), not attribute(S21, U21)))and entails(not attribute(S21, U21)and attribute(S21, U21), not equal(S21, T21))and entails(not attribute(S21, U21)and attribute(T21, U21), not equal(S21, T21))and entails(equal(S21, T21)and attribute(T21, U21), attribute(S21, U21))and entails(equal(S21, T21)and not attribute(S21, U21), not attribute(T21, U21)), [domainV(U21, [attribute:2]), domainV(T21, [attribute:1]), domainV(S21, [attribute:1]), domainV(_G7842, []), forall(S21), forall(T21), forall(U21)], ['THING1'=S21, 'THING2'=T21, 'ATTR'=U21], 'Merge', 'STRUCTURAL ONTOLOGY', 260, 'Anonymous', on).
mooCache(equal(N25, O25)=>forall(P25, instance(N25, P25)<=>instance(O25, P25)), entails(not instance(O25, P25)and instance(O25, P25), not equal(N25, O25))and (entails(not instance(O25, P25)and instance(N25, P25), not equal(N25, O25))and entails(equal(N25, O25)and instance(N25, P25), instance(O25, P25))and entails(equal(N25, O25)and not instance(O25, P25), not instance(N25, P25)))and entails(not instance(N25, P25)and instance(N25, P25), not equal(N25, O25))and entails(not instance(N25, P25)and instance(O25, P25), not equal(N25, O25))and entails(equal(N25, O25)and instance(O25, P25), instance(N25, P25))and entails(equal(N25, O25)and not instance(N25, P25), not instance(O25, P25)), [domainV(P25, [instance:2]), domainV(O25, []), domainV(N25, []), domainV(_G7848, []), forall(N25), forall(O25), forall(P25)], ['THING1'=N25, 'THING2'=O25, 'CLASS'=P25], 'Merge', 'STRUCTURAL ONTOLOGY', 262, 'Anonymous', on).
mooCache(instance(range, 'BinaryPredicate'), instance(range, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 264, 'Anonymous', on).
mooCache(instance(range, 'AsymmetricRelation'), instance(range, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 266, 'Anonymous', on).
mooCache(domain(range, 1, 'Function'), domain(range, 1, 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 268, 'Anonymous', on).
mooCache(domain(range, 2, 'Class'), domain(range, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 270, 'Anonymous', on).
mooCache(documentation(range, string('"Gives the range of a function.  In other words,   (range ?FUNCTION ?CLASS) means that all of the values assigned by   ?FUNCTION are instances of ?CLASS."')), documentation(range, string('"Gives the range of a function.  In other words,   (range ?FUNCTION ?CLASS) means that all of the values assigned by   ?FUNCTION are instances of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 272, 'Anonymous', on).
mooCache(instance(rangeSubclass, 'BinaryPredicate'), instance(rangeSubclass, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 274, 'Anonymous', on).
mooCache(instance(rangeSubclass, 'AsymmetricRelation'), instance(rangeSubclass, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 276, 'Anonymous', on).
mooCache(domain(rangeSubclass, 1, 'Function'), domain(rangeSubclass, 1, 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 278, 'Anonymous', on).
mooCache(domainSubclass(rangeSubclass, 2, 'Class'), domainSubclass(rangeSubclass, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 280, 'Anonymous', on).
mooCache(documentation(rangeSubclass, string('"(rangeSubclass ?FUNCTION ?CLASS) means that   all of the values assigned by ?FUNCTION are subclasses of ?CLASS."')), documentation(rangeSubclass, string('"(rangeSubclass ?FUNCTION ?CLASS) means that   all of the values assigned by ?FUNCTION are subclasses of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 282, 'Anonymous', on).
mooCache(instance('DomainFn', 'UnaryFunction'), instance('DomainFn', 'UnaryFunction'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 284, 'Anonymous', on).
mooCache(domain('DomainFn', 1, 'BinaryRelation'), domain('DomainFn', 1, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 286, 'Anonymous', on).
mooCache(range('DomainFn', 'Class'), range('DomainFn', 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 288, 'Anonymous', on).
mooCache(documentation('DomainFn', string('"The domain of a BinaryRelation ?REL is  the Class of all things that bear ?REL to something."')), documentation('DomainFn', string('"The domain of a BinaryRelation ?REL is  the Class of all things that bear ?REL to something."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 290, 'Anonymous', on).
mooCache(instance(Y1, 'DomainFn'(Z1))<=>exists(A2, holds(Z1, Y1, A2)), (entails(instance(Y1, 'DomainFn'(Z1))and'$existential'(A2, '?INST2', holds(Z1, Y1, '?INST2')), holds(Z1, Y1, A2))and entails(not holds(Z1, Y1, A2), not instance(Y1, 'DomainFn'(Z1))))and entails(holds(Z1, Y1, A2), instance(Y1, 'DomainFn'(Z1)))and entails(not instance(Y1, 'DomainFn'(Z1)), not holds(Z1, Y1, A2)), [domainV(A2, [Z1:2]), domainV(Z1, ['DomainFn':1, holds:1]), domainV(Y1, [Z1:1]), domainV(_G6920, []), forall(Y1), forall(Z1), replaceConsVar(A2, '$existential'('?INST2', holds(Z1, Y1, '?INST2'))), forall(A2)], ['INST1'=Y1, 'REL'=Z1, 'INST2'=A2], 'Merge', 'STRUCTURAL ONTOLOGY', 292, 'Anonymous', on).
mooCache(instance('RangeFn', 'UnaryFunction'), instance('RangeFn', 'UnaryFunction'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 294, 'Anonymous', on).
mooCache(domain('RangeFn', 1, 'BinaryRelation'), domain('RangeFn', 1, 'BinaryRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 296, 'Anonymous', on).
mooCache(range('RangeFn', 'Class'), range('RangeFn', 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 298, 'Anonymous', on).
mooCache(documentation('RangeFn', string('"The range of a BinaryRelation ?REL is the  Class of all things such that something bears ?REL to them."')), documentation('RangeFn', string('"The range of a BinaryRelation ?REL is the  Class of all things such that something bears ?REL to them."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 300, 'Anonymous', on).
mooCache(instance(M18, 'RangeFn'(N18))<=>exists(O18, holds(N18, O18, M18)), (entails(instance(M18, 'RangeFn'(N18))and'$existential'(O18, '?INST2', holds(N18, '?INST2', M18)), holds(N18, O18, M18))and entails(not holds(N18, O18, M18), not instance(M18, 'RangeFn'(N18))))and entails(holds(N18, O18, M18), instance(M18, 'RangeFn'(N18)))and entails(not instance(M18, 'RangeFn'(N18)), not holds(N18, O18, M18)), [domainV(O18, [N18:1]), domainV(N18, ['RangeFn':1, holds:1]), domainV(M18, [N18:2]), domainV(_G6914, []), forall(M18), forall(N18), replaceConsVar(O18, '$existential'('?INST2', holds(N18, '?INST2', M18))), forall(O18)], ['INST1'=M18, 'REL'=N18, 'INST2'=O18], 'Merge', 'STRUCTURAL ONTOLOGY', 302, 'Anonymous', on).
mooCache(instance(valence, 'BinaryPredicate'), instance(valence, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 304, 'Anonymous', on).
mooCache(instance(valence, 'AsymmetricRelation'), instance(valence, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 306, 'Anonymous', on).
mooCache(domain(valence, 1, 'Relation'), domain(valence, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 308, 'Anonymous', on).
mooCache(domain(valence, 2, 'PositiveInteger'), domain(valence, 2, 'PositiveInteger'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 310, 'Anonymous', on).
mooCache(singleValued(valence, 2), singleValued(valence, 2), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 312, 'Anonymous', on).
mooCache(documentation(valence, string('"Specifies the number of arguments that a   relation can take.  If a relation does not have a fixed number of   arguments, it does not have a valence and it is an instance of   VariableArityRelation.  For example, holds is a   VariableArityRelation."')), documentation(valence, string('"Specifies the number of arguments that a   relation can take.  If a relation does not have a fixed number of   arguments, it does not have a valence and it is an instance of   VariableArityRelation.  For example, holds is a   VariableArityRelation."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 314, 'Anonymous', on).
mooCache(instance(documentation, 'BinaryPredicate'), instance(documentation, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 316, 'Anonymous', on).
mooCache(instance(documentation, 'AsymmetricRelation'), instance(documentation, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 318, 'Anonymous', on).
mooCache(domain(documentation, 1, 'Entity'), domain(documentation, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 320, 'Anonymous', on).
mooCache(domain(documentation, 2, 'SymbolicString'), domain(documentation, 2, 'SymbolicString'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 322, 'Anonymous', on).
mooCache(documentation(documentation, string('"A relation between objects in the domain   of discourse and strings of natural language text.  The domain of   documentation is not constants (names), but the objects themselves.    This means that one does not quote the names when associating them with   their documentation."')), documentation(documentation, string('"A relation between objects in the domain   of discourse and strings of natural language text.  The domain of   documentation is not constants (names), but the objects themselves.    This means that one does not quote the names when associating them with   their documentation."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 324, 'Anonymous', on).
mooCache(instance(disjoint, 'BinaryPredicate'), instance(disjoint, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 326, 'Anonymous', on).
mooCache(instance(disjoint, 'SymmetricRelation'), instance(disjoint, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 328, 'Anonymous', on).
mooCache(instance(disjoint, 'IrreflexiveRelation'), instance(disjoint, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 330, 'Anonymous', on).
mooCache(domain(disjoint, 1, 'Class'), domain(disjoint, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 332, 'Anonymous', on).
mooCache(domain(disjoint, 2, 'Class'), domain(disjoint, 2, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 334, 'Anonymous', on).
mooCache(documentation(disjoint, string('"Classes are disjoint only if they share no   instances, i.e. just in case the result of applying IntersectionFn to  them is empty."')), documentation(disjoint, string('"Classes are disjoint only if they share no   instances, i.e. just in case the result of applying IntersectionFn to  them is empty."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 336, 'Anonymous', on).
mooCache(disjoint(B, C)=>forall(D, not (instance(D, B)and instance(D, C))), entails(instance(D, B)and instance(D, C), not disjoint(B, C))and entails(disjoint(B, C)and instance(D, C), not instance(D, B))and entails(disjoint(B, C)and instance(D, B), not instance(D, C)), [domainV(D, []), domainV(C, [disjoint:2, instance:2]), domainV(B, [disjoint:1, instance:2]), domainV(_G7774, []), forall(B), forall(C), forall(D)], ['CLASS1'=B, 'CLASS2'=C, 'INST'=D], 'Merge', 'STRUCTURAL ONTOLOGY', 338, 'Anonymous', on).
mooCache(instance(disjointRelation, 'BinaryPredicate'), instance(disjointRelation, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 340, 'Anonymous', on).
mooCache(instance(disjointRelation, 'SymmetricRelation'), instance(disjointRelation, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 342, 'Anonymous', on).
mooCache(instance(disjointRelation, 'IrreflexiveRelation'), instance(disjointRelation, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 344, 'Anonymous', on).
mooCache(domain(disjointRelation, 1, 'Relation'), domain(disjointRelation, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 346, 'Anonymous', on).
mooCache(domain(disjointRelation, 2, 'Relation'), domain(disjointRelation, 2, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 348, 'Anonymous', on).
mooCache(relatedInternalConcept(disjointRelation, disjoint), relatedInternalConcept(disjointRelation, disjoint), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 350, 'Anonymous', on).
mooCache(documentation(disjointRelation, string('"(disjointRelation ?REL1 ?REL2) means that the   two relations ?REL1 and ?REL2 have no tuples in common.  In other words, the   intersection of ?REL1 and ?REL2 is the null set."')), documentation(disjointRelation, string('"(disjointRelation ?REL1 ?REL2) means that the   two relations ?REL1 and ?REL2 have no tuples in common.  In other words, the   intersection of ?REL1 and ?REL2 is the null set."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 352, 'Anonymous', on).
mooCache(disjointRelation(D26, E26)and valence(D26, F26)=>valence(E26, F26), entails(disjointRelation(D26, E26)and valence(D26, F26), valence(E26, F26))and entails(not valence(E26, F26)and valence(D26, F26), not disjointRelation(D26, E26))and entails(not valence(E26, F26)and disjointRelation(D26, E26), not valence(D26, F26)), [domainV(F26, [valence:2]), domainV(E26, [disjointRelation:2, valence:1]), domainV(D26, [disjointRelation:1, valence:1]), domainV(_G6151, []), forall(D26), forall(E26), forall(F26)], ['REL1'=D26, 'REL2'=E26, 'NUMBER'=F26], 'Merge', 'STRUCTURAL ONTOLOGY', 354, 'Anonymous', on).
mooCache(domain(X29, Y29, Z29)and domain(A30, Y29, B30)and disjoint(Z29, B30)=>disjointRelation(X29, A30), entails(domain(X29, Y29, Z29)and domain(A30, Y29, B30)and disjoint(Z29, B30), disjointRelation(X29, A30))and entails(not disjointRelation(X29, A30)and domain(A30, Y29, B30)and disjoint(Z29, B30), not domain(X29, Y29, Z29))and entails(not disjointRelation(X29, A30)and domain(X29, Y29, Z29)and disjoint(Z29, B30), not domain(A30, Y29, B30))and entails(not disjointRelation(X29, A30)and domain(X29, Y29, Z29)and domain(A30, Y29, B30), not disjoint(Z29, B30)), [domainV(B30, [disjoint:2, domain:3]), domainV(A30, [disjointRelation:2, domain:1]), domainV(Z29, [disjoint:1, domain:3]), domainV(Y29, [domain:2]), domainV(X29, [disjointRelation:1, domain:1]), domainV(_G8635, []), forall(X29), forall(Y29), forall(Z29), forall(A30), forall(B30)], ['REL1'=X29, 'NUMBER'=Y29, 'CLASS1'=Z29, 'REL2'=A30, 'CLASS2'=B30], 'Merge', 'STRUCTURAL ONTOLOGY', 356, 'Anonymous', on).
mooCache(instance(contraryProperty, 'BinaryPredicate'), instance(contraryProperty, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 360, 'Anonymous', on).
mooCache(instance(contraryProperty, 'SymmetricRelation'), instance(contraryProperty, 'SymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 362, 'Anonymous', on).
mooCache(instance(contraryProperty, 'IrreflexiveRelation'), instance(contraryProperty, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 364, 'Anonymous', on).
mooCache(domain(contraryProperty, 1, 'Attribute'), domain(contraryProperty, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 366, 'Anonymous', on).
mooCache(domain(contraryProperty, 2, 'Attribute'), domain(contraryProperty, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 368, 'Anonymous', on).
mooCache(documentation(contraryProperty, string('"Means that the two arguments are   properties that are opposed to one another, e.g. Pliable versus   Rigid."')), documentation(contraryProperty, string('"Means that the two arguments are   properties that are opposed to one another, e.g. Pliable versus   Rigid."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 370, 'Anonymous', on).
mooCache(attribute(F16, G16)and contraryProperty(G16, H16)=>not attribute(F16, H16), entails(attribute(F16, G16)and contraryProperty(G16, H16), not attribute(F16, H16))and entails(attribute(F16, H16)and contraryProperty(G16, H16), not attribute(F16, G16))and entails(attribute(F16, H16)and attribute(F16, G16), not contraryProperty(G16, H16)), [domainV(H16, [attribute:2, contraryProperty:2]), domainV(G16, [attribute:2, contraryProperty:1]), domainV(F16, [attribute:1]), domainV(_G6542, []), forall(F16), forall(G16), forall(H16)], ['OBJ'=F16, 'ATTR1'=G16, 'ATTR2'=H16], 'Merge', 'STRUCTURAL ONTOLOGY', 372, 'Anonymous', on).
mooCache(instance(exhaustiveDecomposition, 'Predicate'), instance(exhaustiveDecomposition, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 374, 'Anonymous', on).
mooCache(instance(exhaustiveDecomposition, 'VariableArityRelation'), instance(exhaustiveDecomposition, 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 376, 'Anonymous', on).
mooCache(domain(exhaustiveDecomposition, 1, 'Class'), domain(exhaustiveDecomposition, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 378, 'Anonymous', on).
mooCache(relatedInternalConcept(exhaustiveDecomposition, partition), relatedInternalConcept(exhaustiveDecomposition, partition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 380, 'Anonymous', on).
mooCache(documentation(exhaustiveDecomposition, string('"An exhaustiveDecomposition of a   Class C is a set of subclasses of C such that every subclass of C either   is an element of the set or is a subclass of an element of the set.  Note:   this does not necessarily mean that the elements of the set are disjoint   (see partition - a partition is a disjoint exhaustive decomposition.)"')), documentation(exhaustiveDecomposition, string('"An exhaustiveDecomposition of a   Class C is a set of subclasses of C such that every subclass of C either   is an element of the set or is a subclass of an element of the set.  Note:   this does not necessarily mean that the elements of the set are disjoint   (see partition - a partition is a disjoint exhaustive decomposition.)"')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 382, 'Anonymous', on).
mooCache(forall(U35, domain(exhaustiveDecomposition, U35, 'Class')), domain(exhaustiveDecomposition, U35, 'Class'), [domainV(U35, [domain:2]), domainV(_G3616, []), forall(U35)], ['INT'=U35], 'Merge', 'STRUCTURAL ONTOLOGY', 384, 'Anonymous', on).
mooCache(exhaustiveDecomposition(X, Y, Z)=>forall(A1, instance(A1, X)=>instance(A1, Y)or instance(A1, Z)), entails(instance(A1, X)and not instance(A1, Y)and not instance(A1, Z), not exhaustiveDecomposition(X, Y, Z))and entails(exhaustiveDecomposition(X, Y, Z)and not instance(A1, Y)and not instance(A1, Z), not instance(A1, X))and entails(exhaustiveDecomposition(X, Y, Z)and instance(A1, X)and not instance(A1, Z), instance(A1, Y))and entails(exhaustiveDecomposition(X, Y, Z)and instance(A1, X)and not instance(A1, Y), instance(A1, Z)), [domainV(A1, []), domainV(Z, [exhaustiveDecomposition:3, instance:2]), domainV(Y, [exhaustiveDecomposition:2, instance:2]), domainV(X, [exhaustiveDecomposition:1, instance:2]), domainV(_G9838, []), forall(X), forall(Y), forall(Z), forall(A1)], ['CLASS1'=X, 'CLASS2'=Y, 'CLASS3'=Z, 'OBJ'=A1], 'Merge', 'STRUCTURAL ONTOLOGY', 386, 'Anonymous', on).
mooCache(exhaustiveDecomposition(W4, X4, Y4, Z4)=>forall(A5, instance(A5, W4)=>instance(A5, X4)or instance(A5, Y4)or instance(A5, Z4)), entails(instance(A5, W4)and not instance(A5, X4)and not instance(A5, Y4)and not instance(A5, Z4), not exhaustiveDecomposition(W4, X4, Y4, Z4))and entails(exhaustiveDecomposition(W4, X4, Y4, Z4)and not instance(A5, X4)and not instance(A5, Y4)and not instance(A5, Z4), not instance(A5, W4))and entails(exhaustiveDecomposition(W4, X4, Y4, Z4)and instance(A5, W4)and not instance(A5, Y4)and not instance(A5, Z4), instance(A5, X4))and entails(exhaustiveDecomposition(W4, X4, Y4, Z4)and instance(A5, W4)and not instance(A5, X4)and not instance(A5, Z4), instance(A5, Y4))and entails(exhaustiveDecomposition(W4, X4, Y4, Z4)and instance(A5, W4)and not instance(A5, X4)and not instance(A5, Y4), instance(A5, Z4)), [domainV(A5, []), domainV(Z4, [exhaustiveDecomposition:4, instance:2]), domainV(Y4, [exhaustiveDecomposition:3, instance:2]), domainV(X4, [exhaustiveDecomposition:2, instance:2]), domainV(W4, [exhaustiveDecomposition:1, instance:2]), domainV(_G11926, []), forall(W4), forall(X4), forall(Y4), forall(Z4), forall(A5)], ['CLASS1'=W4, 'CLASS2'=X4, 'CLASS3'=Y4, 'CLASS4'=Z4, 'OBJ'=A5], 'Merge', 'STRUCTURAL ONTOLOGY', 388, 'Anonymous', on).
mooCache(exhaustiveDecomposition(B9, C9, D9, E9, F9)=>forall(G9, instance(G9, B9)=>instance(G9, C9)or instance(G9, D9)or instance(G9, E9)or instance(G9, F9)), entails(instance(G9, B9)and not instance(G9, C9)and not instance(G9, D9)and not instance(G9, E9)and not instance(G9, F9), not exhaustiveDecomposition(B9, C9, D9, E9, F9))and entails(exhaustiveDecomposition(B9, C9, D9, E9, F9)and not instance(G9, C9)and not instance(G9, D9)and not instance(G9, E9)and not instance(G9, F9), not instance(G9, B9))and entails(exhaustiveDecomposition(B9, C9, D9, E9, F9)and instance(G9, B9)and not instance(G9, D9)and not instance(G9, E9)and not instance(G9, F9), instance(G9, C9))and entails(exhaustiveDecomposition(B9, C9, D9, E9, F9)and instance(G9, B9)and not instance(G9, C9)and not instance(G9, E9)and not instance(G9, F9), instance(G9, D9))and entails(exhaustiveDecomposition(B9, C9, D9, E9, F9)and instance(G9, B9)and not instance(G9, C9)and not instance(G9, D9)and not instance(G9, F9), instance(G9, E9))and entails(exhaustiveDecomposition(B9, C9, D9, E9, F9)and instance(G9, B9)and not instance(G9, C9)and not instance(G9, D9)and not instance(G9, E9), instance(G9, F9)), [domainV(G9, []), domainV(F9, [exhaustiveDecomposition:5, instance:2]), domainV(E9, [exhaustiveDecomposition:4, instance:2]), domainV(D9, [exhaustiveDecomposition:3, instance:2]), domainV(C9, [exhaustiveDecomposition:2, instance:2]), domainV(B9, [exhaustiveDecomposition:1, instance:2]), domainV(_G14063, []), forall(B9), forall(C9), forall(D9), forall(E9), forall(F9), forall(G9)], ['CLASS1'=B9, 'CLASS2'=C9, 'CLASS3'=D9, 'CLASS4'=E9, 'CLASS5'=F9, 'OBJ'=G9], 'Merge', 'STRUCTURAL ONTOLOGY', 390, 'Anonymous', on).
mooCache(instance(disjointDecomposition, 'Predicate'), instance(disjointDecomposition, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 392, 'Anonymous', on).
mooCache(instance(disjointDecomposition, 'VariableArityRelation'), instance(disjointDecomposition, 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 394, 'Anonymous', on).
mooCache(domain(disjointDecomposition, 1, 'Class'), domain(disjointDecomposition, 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 396, 'Anonymous', on).
mooCache(relatedInternalConcept(disjointDecomposition, exhaustiveDecomposition), relatedInternalConcept(disjointDecomposition, exhaustiveDecomposition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 398, 'Anonymous', on).
mooCache(relatedInternalConcept(disjointDecomposition, disjoint), relatedInternalConcept(disjointDecomposition, disjoint), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 400, 'Anonymous', on).
mooCache(documentation(disjointDecomposition, string('"A disjointDecomposition of a Class   C is a set of subclasses of C that are mutually disjoint."')), documentation(disjointDecomposition, string('"A disjointDecomposition of a Class   C is a set of subclasses of C that are mutually disjoint."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 402, 'Anonymous', on).
mooCache(forall(D36, domain(disjointDecomposition, D36, 'Class')), domain(disjointDecomposition, D36, 'Class'), [domainV(D36, [domain:2]), domainV(_G3604, []), forall(D36)], ['INT'=D36], 'Merge', 'STRUCTURAL ONTOLOGY', 404, 'Anonymous', on).
mooCache(disjointDecomposition(D1, E1, F1)=>subclass(E1, D1)and subclass(F1, D1)and disjoint(E1, F1), (entails(not subclass(E1, D1), not disjointDecomposition(D1, E1, F1))and entails(disjointDecomposition(D1, E1, F1), subclass(E1, D1)))and (entails(not subclass(F1, D1), not disjointDecomposition(D1, E1, F1))and entails(disjointDecomposition(D1, E1, F1), subclass(F1, D1)))and entails(not disjoint(E1, F1), not disjointDecomposition(D1, E1, F1))and entails(disjointDecomposition(D1, E1, F1), disjoint(E1, F1)), [domainV(F1, [disjoint:2, disjointDecomposition:3, subclass:1]), domainV(E1, [disjoint:1, disjointDecomposition:2, subclass:1]), domainV(D1, [disjointDecomposition:1, subclass:2]), domainV(_G8214, []), forall(D1), forall(E1), forall(F1)], ['CLASS1'=D1, 'CLASS2'=E1, 'CLASS3'=F1], 'Merge', 'STRUCTURAL ONTOLOGY', 406, 'Anonymous', on).
mooCache(disjointDecomposition(A5, B5, C5, D5)=>subclass(B5, A5)and subclass(C5, A5)and subclass(D5, A5)and disjoint(B5, C5)and disjoint(C5, D5)and disjoint(B5, D5), (entails(not subclass(B5, A5), not disjointDecomposition(A5, B5, C5, D5))and entails(disjointDecomposition(A5, B5, C5, D5), subclass(B5, A5)))and (entails(not subclass(C5, A5), not disjointDecomposition(A5, B5, C5, D5))and entails(disjointDecomposition(A5, B5, C5, D5), subclass(C5, A5)))and (entails(not subclass(D5, A5), not disjointDecomposition(A5, B5, C5, D5))and entails(disjointDecomposition(A5, B5, C5, D5), subclass(D5, A5)))and (entails(not disjoint(B5, C5), not disjointDecomposition(A5, B5, C5, D5))and entails(disjointDecomposition(A5, B5, C5, D5), disjoint(B5, C5)))and (entails(not disjoint(C5, D5), not disjointDecomposition(A5, B5, C5, D5))and entails(disjointDecomposition(A5, B5, C5, D5), disjoint(C5, D5)))and entails(not disjoint(B5, D5), not disjointDecomposition(A5, B5, C5, D5))and entails(disjointDecomposition(A5, B5, C5, D5), disjoint(B5, D5)), [domainV(D5, [disjoint:2, disjointDecomposition:4, subclass:1]), domainV(C5, [disjoint:1, disjoint:2, disjointDecomposition:3, subclass:1]), domainV(B5, [disjoint:1, disjointDecomposition:2, subclass:1]), domainV(A5, [disjointDecomposition:1, subclass:2]), domainV(_G13087, []), forall(A5), forall(B5), forall(C5), forall(D5)], ['CLASS1'=A5, 'CLASS2'=B5, 'CLASS3'=C5, 'CLASS4'=D5], 'Merge', 'STRUCTURAL ONTOLOGY', 408, 'Anonymous', on).
mooCache(disjointDecomposition(M9, N9, O9, P9, Q9)=>subclass(N9, M9)and subclass(O9, M9)and subclass(P9, M9)and subclass(Q9, M9)and disjoint(N9, O9)and disjoint(O9, P9)and disjoint(N9, P9)and disjoint(Q9, P9)and disjoint(Q9, O9)and disjoint(Q9, N9), (entails(not subclass(N9, M9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), subclass(N9, M9)))and (entails(not subclass(O9, M9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), subclass(O9, M9)))and (entails(not subclass(P9, M9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), subclass(P9, M9)))and (entails(not subclass(Q9, M9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), subclass(Q9, M9)))and (entails(not disjoint(N9, O9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), disjoint(N9, O9)))and (entails(not disjoint(O9, P9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), disjoint(O9, P9)))and (entails(not disjoint(N9, P9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), disjoint(N9, P9)))and (entails(not disjoint(Q9, P9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), disjoint(Q9, P9)))and (entails(not disjoint(Q9, O9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), disjoint(Q9, O9)))and entails(not disjoint(Q9, N9), not disjointDecomposition(M9, N9, O9, P9, Q9))and entails(disjointDecomposition(M9, N9, O9, P9, Q9), disjoint(Q9, N9)), [domainV(Q9, [disjoint:1, disjointDecomposition:5, subclass:1]), domainV(P9, [disjoint:2, disjointDecomposition:4, subclass:1]), domainV(O9, [disjoint:1, disjoint:2, disjointDecomposition:3, subclass:1]), domainV(N9, [disjoint:1, disjoint:2, disjointDecomposition:2, subclass:1]), domainV(M9, [disjointDecomposition:1, subclass:2]), domainV(_G19543, []), forall(M9), forall(N9), forall(O9), forall(P9), forall(Q9)], ['CLASS1'=M9, 'CLASS2'=N9, 'CLASS3'=O9, 'CLASS4'=P9, 'CLASS5'=Q9], 'Merge', 'STRUCTURAL ONTOLOGY', 410, 'Anonymous', on).
mooCache(subrelation(partition, exhaustiveDecomposition), subrelation(partition, exhaustiveDecomposition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 412, 'Anonymous', on).
mooCache(subrelation(partition, disjointDecomposition), subrelation(partition, disjointDecomposition), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 414, 'Anonymous', on).
mooCache(documentation(partition, string('"A partition of a class C is a set of   mutually disjoint classes (a subclass partition) which covers C.    Every instance of C is an instance of exactly one of the subclasses   in the partition."')), documentation(partition, string('"A partition of a class C is a set of   mutually disjoint classes (a subclass partition) which covers C.    Every instance of C is an instance of exactly one of the subclasses   in the partition."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 416, 'Anonymous', on).
mooCache(instance(singleValued, 'BinaryPredicate'), instance(singleValued, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 418, 'Anonymous', on).
mooCache(instance(singleValued, 'AsymmetricRelation'), instance(singleValued, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 420, 'Anonymous', on).
mooCache(domain(singleValued, 1, 'Predicate'), domain(singleValued, 1, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 422, 'Anonymous', on).
mooCache(domain(singleValued, 2, 'Integer'), domain(singleValued, 2, 'Integer'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 424, 'Anonymous', on).
mooCache(documentation(singleValued, string('"(singleValued ?REL ?INT) means   that the argument position of ?REL corresponding to ?INT is   single-valued, i.e. an assignment of values to the other argument   positions determines a unique value for the argument position   corresponding to ?INT."')), documentation(singleValued, string('"(singleValued ?REL ?INT) means   that the argument position of ?REL corresponding to ?INT is   single-valued, i.e. an assignment of values to the other argument   positions determines a unique value for the argument position   corresponding to ?INT."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 426, 'Anonymous', on).
mooCache(instance(relatedInternalConcept, 'BinaryPredicate'), instance(relatedInternalConcept, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 438, 'Anonymous', on).
mooCache(instance(relatedInternalConcept, 'EquivalenceRelation'), instance(relatedInternalConcept, 'EquivalenceRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 440, 'Anonymous', on).
mooCache(domain(relatedInternalConcept, 1, 'Entity'), domain(relatedInternalConcept, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 442, 'Anonymous', on).
mooCache(domain(relatedInternalConcept, 2, 'Entity'), domain(relatedInternalConcept, 2, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 444, 'Anonymous', on).
mooCache(documentation(relatedInternalConcept, string('"Means that the two arguments are   related concepts within the SUMO, i.e. there is a significant similarity   of meaning between them.  To indicate a meaning relation between a SUMO   concept and a concept from another source, use the Predicate   relatedExternalConcept."')), documentation(relatedInternalConcept, string('"Means that the two arguments are   related concepts within the SUMO, i.e. there is a significant similarity   of meaning between them.  To indicate a meaning relation between a SUMO   concept and a concept from another source, use the Predicate   relatedExternalConcept."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 446, 'Anonymous', on).
mooCache(instance(relatedExternalConcept, 'TernaryPredicate'), instance(relatedExternalConcept, 'TernaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 448, 'Anonymous', on).
mooCache(domain(relatedExternalConcept, 1, 'Entity'), domain(relatedExternalConcept, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 450, 'Anonymous', on).
mooCache(domain(relatedExternalConcept, 2, 'SymbolicString'), domain(relatedExternalConcept, 2, 'SymbolicString'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 452, 'Anonymous', on).
mooCache(domain(relatedExternalConcept, 3, 'Language'), domain(relatedExternalConcept, 3, 'Language'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 454, 'Anonymous', on).
mooCache(relatedInternalConcept(relatedExternalConcept, relatedInternalConcept), relatedInternalConcept(relatedExternalConcept, relatedInternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 456, 'Anonymous', on).
mooCache(documentation(relatedExternalConcept, string('"Used to signify a three-place   relation between a concept in an external knowledge source, a concept   in the SUMO, and the name of the other knowledge source."')), documentation(relatedExternalConcept, string('"Used to signify a three-place   relation between a concept in an external knowledge source, a concept   in the SUMO, and the name of the other knowledge source."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 458, 'Anonymous', on).
mooCache(subrelation(synonymousExternalConcept, relatedExternalConcept), subrelation(synonymousExternalConcept, relatedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 460, 'Anonymous', on).
mooCache(disjointRelation(synonymousExternalConcept, subsumedExternalConcept), disjointRelation(synonymousExternalConcept, subsumedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 462, 'Anonymous', on).
mooCache(disjointRelation(synonymousExternalConcept, subsumingExternalConcept), disjointRelation(synonymousExternalConcept, subsumingExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 464, 'Anonymous', on).
mooCache(documentation(synonymousExternalConcept, string('"(synonymousExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the   same meaning as ?STRING in ?LANGUAGE."')), documentation(synonymousExternalConcept, string('"(synonymousExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the   same meaning as ?STRING in ?LANGUAGE."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 466, 'Anonymous', on).
mooCache(subrelation(subsumingExternalConcept, relatedExternalConcept), subrelation(subsumingExternalConcept, relatedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 468, 'Anonymous', on).
mooCache(disjointRelation(subsumingExternalConcept, subsumedExternalConcept), disjointRelation(subsumingExternalConcept, subsumedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 470, 'Anonymous', on).
mooCache(documentation(subsumingExternalConcept, string('"(subsumingExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes   the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader   in meaning than ?STRING."')), documentation(subsumingExternalConcept, string('"(subsumingExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes   the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader   in meaning than ?STRING."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 472, 'Anonymous', on).
mooCache(subrelation(subsumedExternalConcept, relatedExternalConcept), subrelation(subsumedExternalConcept, relatedExternalConcept), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 474, 'Anonymous', on).
mooCache(documentation(subsumedExternalConcept, string('"(subsumedExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed   by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower   in meaning than ?STRING."')), documentation(subsumedExternalConcept, string('"(subsumedExternalConcept   ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed   by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower   in meaning than ?STRING."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 476, 'Anonymous', on).
mooCache(instance(name, 'BinaryPredicate'), instance(name, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 478, 'Anonymous', on).
mooCache(domain(name, 1, 'Entity'), domain(name, 1, 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 480, 'Anonymous', on).
mooCache(domain(name, 2, 'SymbolicString'), domain(name, 2, 'SymbolicString'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 482, 'Anonymous', on).
mooCache(documentation(name, string('"(name ?ENTITY ?STRING) means that the thing ?ENTITY   has the SymbolicString ?STRING as its name."')), documentation(name, string('"(name ?ENTITY ?STRING) means that the thing ?ENTITY   has the SymbolicString ?STRING as its name."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 484, 'Anonymous', on).
mooCache(instance(subAttribute, 'BinaryPredicate'), instance(subAttribute, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 486, 'Anonymous', on).
mooCache(instance(subAttribute, 'PartialOrderingRelation'), instance(subAttribute, 'PartialOrderingRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 488, 'Anonymous', on).
mooCache(domain(subAttribute, 1, 'Attribute'), domain(subAttribute, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 490, 'Anonymous', on).
mooCache(domain(subAttribute, 2, 'Attribute'), domain(subAttribute, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 492, 'Anonymous', on).
mooCache(disjointRelation(subAttribute, successorAttribute), disjointRelation(subAttribute, successorAttribute), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 494, 'Anonymous', on).
mooCache(documentation(subAttribute, string('"Means that the second argument can be   ascribed to everything which has the first argument ascribed to it."')), documentation(subAttribute, string('"Means that the second argument can be   ascribed to everything which has the first argument ascribed to it."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 496, 'Anonymous', on).
mooCache(subAttribute(L27, M27)<=>forall(N27, attribute(N27, L27)=>attribute(N27, M27)), (entails(not subAttribute(L27, M27), attribute(N27, L27))and entails(not subAttribute(L27, M27)and'$existential'(N27, '?OBJ', not (attribute('?OBJ', L27)=>attribute('?OBJ', M27))), not attribute(N27, M27))and entails(not attribute(N27, L27)or attribute(N27, M27), subAttribute(L27, M27)))and entails(attribute(N27, L27)and not attribute(N27, M27), not subAttribute(L27, M27))and entails((subAttribute(L27, M27)and not attribute(N27, M27))and'$existential'(N27, '?OBJ', not (attribute('?OBJ', L27)=>attribute('?OBJ', M27))), not attribute(N27, L27))and entails(subAttribute(L27, M27)and attribute(N27, L27), attribute(N27, M27)), [domainV(N27, [attribute:1]), domainV(M27, [attribute:2, subAttribute:2]), domainV(L27, [attribute:2, subAttribute:1]), domainV(_G8174, []), forall(L27), forall(M27), forall(N27), replaceConsVar(N27, '$existential'('?OBJ', not (attribute('?OBJ', L27)=>attribute('?OBJ', M27))))], ['ATTR1'=L27, 'ATTR2'=M27, 'OBJ'=N27], 'Merge', 'STRUCTURAL ONTOLOGY', 498, 'Anonymous', on).
mooCache(subAttribute(E31, F31)and instance(F31, G31)=>instance(E31, G31), entails(subAttribute(E31, F31)and instance(F31, G31), instance(E31, G31))and entails(not instance(E31, G31)and instance(F31, G31), not subAttribute(E31, F31))and entails(not instance(E31, G31)and subAttribute(E31, F31), not instance(F31, G31)), [domainV(G31, [instance:2]), domainV(F31, [subAttribute:2]), domainV(E31, [subAttribute:1]), domainV(_G6166, []), forall(E31), forall(F31), forall(G31)], ['ATTR1'=E31, 'ATTR2'=F31, 'CLASS'=G31], 'Merge', 'STRUCTURAL ONTOLOGY', 500, 'Anonymous', on).
mooCache(instance(successorAttribute, 'BinaryPredicate'), instance(successorAttribute, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 502, 'Anonymous', on).
mooCache(instance(successorAttribute, 'AsymmetricRelation'), instance(successorAttribute, 'AsymmetricRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 504, 'Anonymous', on).
mooCache(domain(successorAttribute, 1, 'Attribute'), domain(successorAttribute, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 506, 'Anonymous', on).
mooCache(domain(successorAttribute, 2, 'Attribute'), domain(successorAttribute, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 508, 'Anonymous', on).
mooCache(documentation(successorAttribute, string('"(successorAttribute ?ATTR1 ?ATTR2)   means that ?ATTR2 is the attribute that comes immediately after ?ATTR1   on the scale that they share."')), documentation(successorAttribute, string('"(successorAttribute ?ATTR1 ?ATTR2)   means that ?ATTR2 is the attribute that comes immediately after ?ATTR1   on the scale that they share."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 510, 'Anonymous', on).
mooCache(instance(successorAttributeClosure, 'BinaryPredicate'), instance(successorAttributeClosure, 'BinaryPredicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 512, 'Anonymous', on).
mooCache(instance(successorAttributeClosure, 'TransitiveRelation'), instance(successorAttributeClosure, 'TransitiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 514, 'Anonymous', on).
mooCache(instance(successorAttributeClosure, 'IrreflexiveRelation'), instance(successorAttributeClosure, 'IrreflexiveRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 516, 'Anonymous', on).
mooCache(domain(successorAttributeClosure, 1, 'Attribute'), domain(successorAttributeClosure, 1, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 518, 'Anonymous', on).
mooCache(domain(successorAttributeClosure, 2, 'Attribute'), domain(successorAttributeClosure, 2, 'Attribute'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 520, 'Anonymous', on).
mooCache(relatedInternalConcept(successorAttributeClosure, successorAttribute), relatedInternalConcept(successorAttributeClosure, successorAttribute), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 522, 'Anonymous', on).
mooCache(documentation(successorAttributeClosure, string('"The transitive closure of   successorAttribute.  (successorAttributeClosure ?ATTR1 ?ATTR2) means   that there is a chain of successorAttribute assertions connecting   ?ATTR1 and ?ATTR2."')), documentation(successorAttributeClosure, string('"The transitive closure of   successorAttribute.  (successorAttributeClosure ?ATTR1 ?ATTR2) means   that there is a chain of successorAttribute assertions connecting   ?ATTR1 and ?ATTR2."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 524, 'Anonymous', on).
mooCache(successorAttribute(V, W)=>successorAttributeClosure(V, W), entails(not successorAttributeClosure(V, W), not successorAttribute(V, W))and entails(successorAttribute(V, W), successorAttributeClosure(V, W)), [domainV(W, [successorAttribute:2, successorAttributeClosure:2]), domainV(V, [successorAttribute:1, successorAttributeClosure:1]), domainV(_G4676, []), forall(V), forall(W)], ['ATTR1'=V, 'ATTR2'=W], 'Merge', 'STRUCTURAL ONTOLOGY', 526, 'Anonymous', on).
mooCache(instance(and, 'SententialOperator'), instance(and, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 528, 'Anonymous', on).
mooCache(domain(and, 1, 'Formula'), domain(and, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 530, 'Anonymous', on).
mooCache(domain(and, 2, 'Formula'), domain(and, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 532, 'Anonymous', on).
mooCache(documentation(and, string('"The truth-functional connective of conjunction."')), documentation(and, string('"The truth-functional connective of conjunction."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 534, 'Anonymous', on).
mooCache(instance(or, 'SententialOperator'), instance(or, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 536, 'Anonymous', on).
mooCache(domain(or, 1, 'Formula'), domain(or, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 538, 'Anonymous', on).
mooCache(domain(or, 2, 'Formula'), domain(or, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 540, 'Anonymous', on).
mooCache(documentation(or, string('"The truth-functional connective of disjunction."')), documentation(or, string('"The truth-functional connective of disjunction."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 542, 'Anonymous', on).
mooCache(instance(=>, 'SententialOperator'), instance(=>, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 544, 'Anonymous', on).
mooCache(domain(=>, 1, 'Formula'), domain(=>, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 546, 'Anonymous', on).
mooCache(domain(=>, 2, 'Formula'), domain(=>, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 548, 'Anonymous', on).
mooCache(documentation(=>, string('"The truth-functional connective of implication."')), documentation(=>, string('"The truth-functional connective of implication."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 550, 'Anonymous', on).
mooCache(instance(<=>, 'SententialOperator'), instance(<=>, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 552, 'Anonymous', on).
mooCache(domain(<=>, 1, 'Formula'), domain(<=>, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 554, 'Anonymous', on).
mooCache(domain(<=>, 2, 'Formula'), domain(<=>, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 556, 'Anonymous', on).
mooCache(documentation(<=>, string('"The truth-functional connective of bi-implication."')), documentation(<=>, string('"The truth-functional connective of bi-implication."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 558, 'Anonymous', on).
mooCache(instance(not, 'SententialOperator'), instance(not, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 560, 'Anonymous', on).
mooCache(domain(not, 1, 'Formula'), domain(not, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 562, 'Anonymous', on).
mooCache(documentation(not, string('"The truth-functional connective of negation."')), documentation(not, string('"The truth-functional connective of negation."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 564, 'Anonymous', on).
mooCache(instance(entails, 'SententialOperator'), instance(entails, 'SententialOperator'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 566, 'Anonymous', on).
mooCache(domain(entails, 1, 'Formula'), domain(entails, 1, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 568, 'Anonymous', on).
mooCache(domain(entails, 2, 'Formula'), domain(entails, 2, 'Formula'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 570, 'Anonymous', on).
mooCache(documentation(entails, string('"The operator of logical entailment.  (entails   ?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1   by means of the proof theory of SUO-KIF."')), documentation(entails, string('"The operator of logical entailment.  (entails   ?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1   by means of the proof theory of SUO-KIF."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 572, 'Anonymous', on).
mooCache(instance('AssignmentFn', 'Function'), instance('AssignmentFn', 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 574, 'Anonymous', on).
mooCache(instance('AssignmentFn', 'VariableArityRelation'), instance('AssignmentFn', 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 576, 'Anonymous', on).
mooCache(domain('AssignmentFn', 1, 'Function'), domain('AssignmentFn', 1, 'Function'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 578, 'Anonymous', on).
mooCache(range('AssignmentFn', 'Entity'), range('AssignmentFn', 'Entity'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 580, 'Anonymous', on).
mooCache(documentation('AssignmentFn', string('"If F is a function with a value for the   objects denoted by N1,..., NK, then the term (AssignmentFn F N1 ... NK)   denotes the value of applying F to the objects denoted by N1,..., NK.    Otherwise, the value is undefined."')), documentation('AssignmentFn', string('"If F is a function with a value for the   objects denoted by N1,..., NK, then the term (AssignmentFn F N1 ... NK)   denotes the value of applying F to the objects denoted by N1,..., NK.    Otherwise, the value is undefined."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 582, 'Anonymous', on).
mooCache(instance(holds, 'Predicate'), instance(holds, 'Predicate'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 584, 'Anonymous', on).
mooCache(instance(holds, 'VariableArityRelation'), instance(holds, 'VariableArityRelation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 586, 'Anonymous', on).
mooCache(domain(holds, 1, 'Relation'), domain(holds, 1, 'Relation'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 588, 'Anonymous', on).
mooCache(documentation(holds, string('"(holds P N1 ... NK) is true just in case   the tuple of objects denoted by N1,..., NK is an element of   the Relation P."')), documentation(holds, string('"(holds P N1 ... NK) is true just in case   the tuple of objects denoted by N1,..., NK is an element of   the Relation P."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 590, 'Anonymous', on).
mooCache(instance('PowerSetFn', 'UnaryFunction'), instance('PowerSetFn', 'UnaryFunction'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 596, 'Anonymous', on).
mooCache(domain('PowerSetFn', 1, 'Class'), domain('PowerSetFn', 1, 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 598, 'Anonymous', on).
mooCache(rangeSubclass('PowerSetFn', 'Class'), rangeSubclass('PowerSetFn', 'Class'), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 600, 'Anonymous', on).
mooCache(documentation('PowerSetFn', string('"(PowerSetFn ?CLASS) maps the Class   ?CLASS to the Class of all subclasses of ?CLASS."')), documentation('PowerSetFn', string('"(PowerSetFn ?CLASS) maps the Class   ?CLASS to the Class of all subclasses of ?CLASS."')), [], [], 'Merge', 'STRUCTURAL ONTOLOGY', 602, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'BASE ONTOLOGY', 614, 'Anonymous', on).
mooCache(documentation('Entity', string('"The universal class of individuals.  This is the root   node of the ontology."')), documentation('Entity', string('"The universal class of individuals.  This is the root   node of the ontology."')), [], [], 'Merge', 'BASE ONTOLOGY', 621, 'Anonymous', on).
mooCache(forall(Q11, instance(Q11, 'Entity')), instance(Q11, 'Entity'), [domainV(Q11, ['$instanceof':'Entity']), domainV(_G3375, []), forall(Q11)], ['THING'=Q11], 'Merge', 'BASE ONTOLOGY', 625, 'Anonymous', on).
mooCache(exists(W14, instance(W14, 'Entity')), entails('$existential'(W14, '?THING', instance('?THING', 'Entity')), instance(W14, 'Entity')), [domainV(W14, ['$instanceof':'Entity']), domainV(_G3473, []), replaceConsVar(W14, '$existential'('?THING', instance('?THING', 'Entity')))], ['THING'=W14], 'Merge', 'BASE ONTOLOGY', 633, 'Anonymous', on).
mooCache(instance(C18, 'Class')<=>subclass(C18, 'Entity'), (entails(instance(C18, 'Class'), subclass(C18, 'Entity'))and entails(not subclass(C18, 'Entity'), not instance(C18, 'Class')))and entails(subclass(C18, 'Entity'), instance(C18, 'Class'))and entails(not instance(C18, 'Class'), not subclass(C18, 'Entity')), [domainV(C18, ['$instanceof':'Class', subclass:1]), domainV(_G3979, []), forall(C18)], ['CLASS'=C18], 'Merge', 'BASE ONTOLOGY', 637, 'Anonymous', on).
mooCache(subclass('Physical', 'Entity'), subclass('Physical', 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 639, 'Anonymous', on).
mooCache(documentation('Physical', string('"An entity that has a location in space-time.    Note that locations are themselves understood to have a location in   space-time"')), documentation('Physical', string('"An entity that has a location in space-time.    Note that locations are themselves understood to have a location in   space-time"')), [], [], 'Merge', 'BASE ONTOLOGY', 641, 'Anonymous', on).
mooCache(instance(Y27, 'Physical')<=>exists(Z27, exists(A28, located(Y27, A28)and time(Y27, Z27))), (entails(instance(Y27, 'Physical')and'$existential'(A28, '?LOC', located(Y27, '?LOC')and time(Y27, Z27)), located(Y27, A28))and entails((instance(Y27, 'Physical')and'$existential'(Z27, '?TIME', exists(A28, located(Y27, A28)and time(Y27, '?TIME'))))and'$existential'(A28, '?LOC', located(Y27, '?LOC')and time(Y27, Z27)), time(Y27, Z27))and entails(not located(Y27, A28)or not time(Y27, Z27), not instance(Y27, 'Physical')))and entails((located(Y27, A28)and time(Y27, Z27))and'$existential'(A28, '?LOC', located(Y27, '?LOC')and time(Y27, Z27)), instance(Y27, 'Physical'))and entails(not instance(Y27, 'Physical')and time(Y27, Z27), not located(Y27, A28))and entails(not instance(Y27, 'Physical')and located(Y27, A28), not time(Y27, Z27)), [domainV(A28, [located:2]), domainV(Z27, [time:2]), domainV(Y27, ['$instanceof':'Physical', located:1, time:1]), domainV(_G8450, []), forall(Y27), replaceConsVar(Z27, '$existential'('?TIME', exists(A28, located(Y27, A28)and time(Y27, '?TIME')))), replaceConsVar(A28, '$existential'('?LOC', located(Y27, '?LOC')and time(Y27, Z27))), forall(Z27), forall(A28)], ['PHYS'=Y27, 'LOC'=A28, 'TIME'=Z27], 'Merge', 'BASE ONTOLOGY', 645, 'Anonymous', on).
mooCache(subclass('Object', 'Physical'), subclass('Object', 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 647, 'Anonymous', on).
mooCache(disjoint('Object', 'Process'), disjoint('Object', 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 649, 'Anonymous', on).
mooCache(documentation('Object', string('"Corresponds roughly to the class of ordinary   physical objects. An Object is thought of as continuing through time,   but at any particular time is all there is at that time, in contrast to   something that is thought of as being divided into stages (contrast Process).   Examples include normal physical objects, geographical regions, and   locations of Processes.  The formal definition is that all the parts of   an Object are present at the same time that the Object is; in other   words, an Object cannot have \'parts\' which are separated in time, such   as the first and second halves of a football game.  Note that the parts   of an Object may change from time to time, and that every Object   occupies exactly the same space and time as a Process (its lifespan).    In a 4D ontology, an Object is something whose spatiotemporal extent   is thought of as dividing into spatial parts roughly parallel to the   time-axis."')), documentation('Object', string('"Corresponds roughly to the class of ordinary   physical objects. An Object is thought of as continuing through time,   but at any particular time is all there is at that time, in contrast to   something that is thought of as being divided into stages (contrast Process).   Examples include normal physical objects, geographical regions, and   locations of Processes.  The formal definition is that all the parts of   an Object are present at the same time that the Object is; in other   words, an Object cannot have \'parts\' which are separated in time, such   as the first and second halves of a football game.  Note that the parts   of an Object may change from time to time, and that every Object   occupies exactly the same space and time as a Process (its lifespan).    In a 4D ontology, an Object is something whose spatiotemporal extent   is thought of as dividing into spatial parts roughly parallel to the   time-axis."')), [], [], 'Merge', 'BASE ONTOLOGY', 651, 'Anonymous', on).
mooCache(subclass('SelfConnectedObject', 'Object'), subclass('SelfConnectedObject', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 653, 'Anonymous', on).
mooCache(documentation('SelfConnectedObject', string('"A SelfConnectedObject is any   Object that does not consist of two or more disconnected parts."')), documentation('SelfConnectedObject', string('"A SelfConnectedObject is any   Object that does not consist of two or more disconnected parts."')), [], [], 'Merge', 'BASE ONTOLOGY', 655, 'Anonymous', on).
mooCache(instance(part, 'BinaryPredicate'), instance(part, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 657, 'Anonymous', on).
mooCache(instance(part, 'SpatialRelation'), instance(part, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 659, 'Anonymous', on).
mooCache(instance(part, 'PartialOrderingRelation'), instance(part, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 661, 'Anonymous', on).
mooCache(domain(part, 1, 'SelfConnectedObject'), domain(part, 1, 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 663, 'Anonymous', on).
mooCache(domain(part, 2, 'SelfConnectedObject'), domain(part, 2, 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 665, 'Anonymous', on).
mooCache(documentation(part, string('"The basic mereological relation.  All other   mereological relations are defined in terms of this one.    (part ?PART ?WHOLE) simply means that the Object ?PART is part  of the Object ?WHOLE.  Note that, since part is a   ReflexiveRelation, every Object is a part of itself."')), documentation(part, string('"The basic mereological relation.  All other   mereological relations are defined in terms of this one.    (part ?PART ?WHOLE) simply means that the Object ?PART is part  of the Object ?WHOLE.  Note that, since part is a   ReflexiveRelation, every Object is a part of itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 667, 'Anonymous', on).
mooCache(instance(J31, 'SelfConnectedObject')=>exists(K31, part(K31, J31)), entails(not part(K31, J31), not instance(J31, 'SelfConnectedObject'))and entails(instance(J31, 'SelfConnectedObject')and'$existential'(K31, '?PART', part('?PART', J31)), part(K31, J31)), [domainV(K31, [part:1]), domainV(J31, ['$instanceof':'SelfConnectedObject', part:2]), domainV(_G5242, []), forall(J31), replaceConsVar(K31, '$existential'('?PART', part('?PART', J31)))], ['OBJ'=J31, 'PART'=K31], 'Merge', 'BASE ONTOLOGY', 669, 'Anonymous', on).
mooCache(part(E35, F35)and part(F35, E35)=>equal(E35, F35), entails(part(E35, F35)and part(F35, E35), equal(E35, F35))and entails(not equal(E35, F35)and part(F35, E35), not part(E35, F35))and entails(not equal(E35, F35)and part(E35, F35), not part(F35, E35)), [domainV(F35, [part:1, part:2]), domainV(E35, [part:1, part:2]), domainV(_G6048, []), forall(E35), forall(F35)], ['OBJ1'=E35, 'OBJ2'=F35], 'Merge', 'BASE ONTOLOGY', 671, 'Anonymous', on).
mooCache(instance(properPart, 'AsymmetricRelation'), instance(properPart, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 673, 'Anonymous', on).
mooCache(instance(properPart, 'TransitiveRelation'), instance(properPart, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 675, 'Anonymous', on).
mooCache(subrelation(properPart, part), subrelation(properPart, part), [], [], 'Merge', 'BASE ONTOLOGY', 677, 'Anonymous', on).
mooCache(documentation(properPart, string('"(properPart ?OBJ1 ?OBJ2) means that   ?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a   TransitiveRelation and AsymmetricRelation (hence an   IrreflexiveRelation)."')), documentation(properPart, string('"(properPart ?OBJ1 ?OBJ2) means that   ?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a   TransitiveRelation and AsymmetricRelation (hence an   IrreflexiveRelation)."')), [], [], 'Merge', 'BASE ONTOLOGY', 679, 'Anonymous', on).
mooCache(properPart(W12, X12)<=>part(W12, X12)and not part(X12, W12), (entails(properPart(W12, X12), part(W12, X12))and entails(properPart(W12, X12), not part(X12, W12))and entails(not part(W12, X12)or part(X12, W12), not properPart(W12, X12)))and entails(part(W12, X12)and not part(X12, W12), properPart(W12, X12))and entails(not properPart(W12, X12)and not part(X12, W12), not part(W12, X12))and entails(not properPart(W12, X12)and part(W12, X12), part(X12, W12)), [domainV(X12, [part:1, part:2, properPart:2]), domainV(W12, [part:1, part:2, properPart:1]), domainV(_G6965, []), forall(W12), forall(X12)], ['OBJ1'=W12, 'OBJ2'=X12], 'Merge', 'BASE ONTOLOGY', 681, 'Anonymous', on).
mooCache(subrelation(piece, part), subrelation(piece, part), [], [], 'Merge', 'BASE ONTOLOGY', 683, 'Anonymous', on).
mooCache(domain(piece, 1, 'Substance'), domain(piece, 1, 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 685, 'Anonymous', on).
mooCache(domain(piece, 2, 'Substance'), domain(piece, 2, 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 687, 'Anonymous', on).
mooCache(documentation(piece, string('"A specialized common sense notion of part for   arbitrary parts of Substances.  Quasi-synonyms are: chunk, hunk, bit,   etc.  Compare component, the other subrelation of part."')), documentation(piece, string('"A specialized common sense notion of part for   arbitrary parts of Substances.  Quasi-synonyms are: chunk, hunk, bit,   etc.  Compare component, the other subrelation of part."')), [], [], 'Merge', 'BASE ONTOLOGY', 689, 'Anonymous', on).
mooCache(piece(Y28, Z28)=>forall(A29, instance(Y28, A29)=>instance(Z28, A29)), entails(instance(Y28, A29)and not instance(Z28, A29), not piece(Y28, Z28))and entails(piece(Y28, Z28)and not instance(Z28, A29), not instance(Y28, A29))and entails(piece(Y28, Z28)and instance(Y28, A29), instance(Z28, A29)), [domainV(A29, [instance:2]), domainV(Z28, [piece:2]), domainV(Y28, [piece:1]), domainV(_G7554, []), forall(Y28), forall(Z28), forall(A29)], ['SUBSTANCE1'=Y28, 'SUBSTANCE2'=Z28, 'CLASS'=A29], 'Merge', 'BASE ONTOLOGY', 691, 'Anonymous', on).
mooCache(subrelation(component, part), subrelation(component, part), [], [], 'Merge', 'BASE ONTOLOGY', 693, 'Anonymous', on).
mooCache(domain(component, 1, 'CorpuscularObject'), domain(component, 1, 'CorpuscularObject'), [], [], 'Merge', 'BASE ONTOLOGY', 695, 'Anonymous', on).
mooCache(domain(component, 2, 'CorpuscularObject'), domain(component, 2, 'CorpuscularObject'), [], [], 'Merge', 'BASE ONTOLOGY', 697, 'Anonymous', on).
mooCache(documentation(component, string('"A specialized common sense notion of part   for heterogeneous parts of complexes. (component ?COMPONENT ?WHOLE)   means that ?COMPONENT is a component of ?WHOLE. Examples of component   include the doors and walls of a house, the states or provinces of a   country, or the limbs and organs of an animal.  Compare piece, which   is also a subrelation of part."')), documentation(component, string('"A specialized common sense notion of part   for heterogeneous parts of complexes. (component ?COMPONENT ?WHOLE)   means that ?COMPONENT is a component of ?WHOLE. Examples of component   include the doors and walls of a house, the states or provinces of a   country, or the limbs and organs of an animal.  Compare piece, which   is also a subrelation of part."')), [], [], 'Merge', 'BASE ONTOLOGY', 699, 'Anonymous', on).
mooCache(instance(material, 'BinaryPredicate'), instance(material, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 701, 'Anonymous', on).
mooCache(domainSubclass(material, 1, 'Substance'), domainSubclass(material, 1, 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 703, 'Anonymous', on).
mooCache(domain(material, 2, 'CorpuscularObject'), domain(material, 2, 'CorpuscularObject'), [], [], 'Merge', 'BASE ONTOLOGY', 705, 'Anonymous', on).
mooCache(documentation(material, string('"(material ?SUBSTANCE ?OBJECT) means that   ?OBJECT is structurally made up in part of ?SUBSTANCE. This relation   encompasses the concepts of \'composed of\', \'made of\', and \'formed of\'.    For example, plastic is a material of my computer monitor.  Compare   part and its subrelations, viz component and piece."')), documentation(material, string('"(material ?SUBSTANCE ?OBJECT) means that   ?OBJECT is structurally made up in part of ?SUBSTANCE. This relation   encompasses the concepts of \'composed of\', \'made of\', and \'formed of\'.    For example, plastic is a material of my computer monitor.  Compare   part and its subrelations, viz component and piece."')), [], [], 'Merge', 'BASE ONTOLOGY', 707, 'Anonymous', on).
mooCache(subclass('Substance', 'SelfConnectedObject'), subclass('Substance', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 709, 'Anonymous', on).
mooCache(documentation('Substance', string('"An Object in which every part is similar to   every other in every relevant respect.  More precisely, something is a   Substance when it has only arbitrary pieces as parts - any parts have   properties which are similar to those of the whole.  Note that a Substance   may nonetheless have physical properties that vary.  For example, the   temperature, chemical constitution, density, etc. may change from one part   to another.  An example would be a body of water."')), documentation('Substance', string('"An Object in which every part is similar to   every other in every relevant respect.  More precisely, something is a   Substance when it has only arbitrary pieces as parts - any parts have   properties which are similar to those of the whole.  Note that a Substance   may nonetheless have physical properties that vary.  For example, the   temperature, chemical constitution, density, etc. may change from one part   to another.  An example would be a body of water."')), [], [], 'Merge', 'BASE ONTOLOGY', 711, 'Anonymous', on).
mooCache(subclass(H25, 'Substance')and instance(I25, H25)and part(J25, I25)=>instance(J25, H25), entails(subclass(H25, 'Substance')and instance(I25, H25)and part(J25, I25), instance(J25, H25))and entails(not instance(J25, H25)and instance(I25, H25)and part(J25, I25), not subclass(H25, 'Substance'))and entails(not instance(J25, H25)and subclass(H25, 'Substance')and part(J25, I25), not instance(I25, H25))and entails(not instance(J25, H25)and subclass(H25, 'Substance')and instance(I25, H25), not part(J25, I25)), [domainV(J25, [part:1]), domainV(I25, [part:2]), domainV(H25, [instance:2, subclass:1]), domainV(_G7115, []), forall(H25), forall(I25), forall(J25)], ['OBJECTTYPE'=H25, 'OBJECT'=I25, 'PART'=J25], 'Merge', 'BASE ONTOLOGY', 713, 'Anonymous', on).
mooCache(subclass('PureSubstance', 'Substance'), subclass('PureSubstance', 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 715, 'Anonymous', on).
mooCache(partition('PureSubstance', 'CompoundSubstance', 'ElementalSubstance'), partition('PureSubstance', 'CompoundSubstance', 'ElementalSubstance'), [], [], 'Merge', 'BASE ONTOLOGY', 717, 'Anonymous', on).
mooCache(documentation('PureSubstance', string('"The Class of Substances with constant   composition.  A PureSubstance can be either an element (ElementalSubstance)   or a compound of elements (CompoundSubstance).  Examples: Table salt   (sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O),   iron (Fe), copper (Cu), and oxygen (O_2)."')), documentation('PureSubstance', string('"The Class of Substances with constant   composition.  A PureSubstance can be either an element (ElementalSubstance)   or a compound of elements (CompoundSubstance).  Examples: Table salt   (sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O),   iron (Fe), copper (Cu), and oxygen (O_2)."')), [], [], 'Merge', 'BASE ONTOLOGY', 719, 'Anonymous', on).
mooCache(subclass('ElementalSubstance', 'PureSubstance'), subclass('ElementalSubstance', 'PureSubstance'), [], [], 'Merge', 'BASE ONTOLOGY', 721, 'Anonymous', on).
mooCache(documentation('ElementalSubstance', string('"The Class of PureSubstances that   cannot be separated into two or more Substances by ordinary chemical   (or physical) means. This excludes nuclear reactions. ElementalSubstances   are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu),   and oxygen (O_2).  ElementalSubstances are the simplest   PureSubstances."')), documentation('ElementalSubstance', string('"The Class of PureSubstances that   cannot be separated into two or more Substances by ordinary chemical   (or physical) means. This excludes nuclear reactions. ElementalSubstances   are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu),   and oxygen (O_2).  ElementalSubstances are the simplest   PureSubstances."')), [], [], 'Merge', 'BASE ONTOLOGY', 723, 'Anonymous', on).
mooCache(subclass('CompoundSubstance', 'PureSubstance'), subclass('CompoundSubstance', 'PureSubstance'), [], [], 'Merge', 'BASE ONTOLOGY', 725, 'Anonymous', on).
mooCache(documentation('CompoundSubstance', string('"The Class of Substances that contain   two or more elements (ElementalSubstances), in definite proportion by weight.   The composition of a pure compound will be invariant, regardless of the method   of preparation. Compounds are composed of more than one kind of atom (element).   The term molecule is often used for the smallest unit of a compound that still   retains all of the properties of the compound.  Examples: Table salt (sodium   chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). "')), documentation('CompoundSubstance', string('"The Class of Substances that contain   two or more elements (ElementalSubstances), in definite proportion by weight.   The composition of a pure compound will be invariant, regardless of the method   of preparation. Compounds are composed of more than one kind of atom (element).   The term molecule is often used for the smallest unit of a compound that still   retains all of the properties of the compound.  Examples: Table salt (sodium   chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). "')), [], [], 'Merge', 'BASE ONTOLOGY', 727, 'Anonymous', on).
mooCache(instance(Z12, 'CompoundSubstance')=>exists(A13, exists(B13, instance(B13, 'ElementalSubstance')and instance(A13, 'ElementalSubstance')and not equal(B13, A13)and piece(B13, Z12)and piece(A13, Z12))), (entails(not instance(B13, 'ElementalSubstance'), not instance(Z12, 'CompoundSubstance'))and entails(instance(Z12, 'CompoundSubstance')and'$existential'(B13, '?ELEMENT1', instance('?ELEMENT1', 'ElementalSubstance')and instance(A13, 'ElementalSubstance')and not equal('?ELEMENT1', A13)and piece('?ELEMENT1', Z12)and piece(A13, Z12)), instance(B13, 'ElementalSubstance')))and (entails(not instance(A13, 'ElementalSubstance'), not instance(Z12, 'CompoundSubstance'))and entails((instance(Z12, 'CompoundSubstance')and'$existential'(A13, '?ELEMENT2', exists(B13, instance(B13, 'ElementalSubstance')and instance('?ELEMENT2', 'ElementalSubstance')and not equal(B13, '?ELEMENT2')and piece(B13, Z12)and piece('?ELEMENT2', Z12))))and'$existential'(B13, '?ELEMENT1', instance('?ELEMENT1', 'ElementalSubstance')and instance(A13, 'ElementalSubstance')and not equal('?ELEMENT1', A13)and piece('?ELEMENT1', Z12)and piece(A13, Z12)), instance(A13, 'ElementalSubstance')))and (entails(equal(B13, A13), not instance(Z12, 'CompoundSubstance'))and entails(instance(Z12, 'CompoundSubstance'), not equal(B13, A13)))and (entails(not piece(B13, Z12), not instance(Z12, 'CompoundSubstance'))and entails(instance(Z12, 'CompoundSubstance')and'$existential'(B13, '?ELEMENT1', instance('?ELEMENT1', 'ElementalSubstance')and instance(A13, 'ElementalSubstance')and not equal('?ELEMENT1', A13)and piece('?ELEMENT1', Z12)and piece(A13, Z12)), piece(B13, Z12)))and entails(not piece(A13, Z12), not instance(Z12, 'CompoundSubstance'))and entails((instance(Z12, 'CompoundSubstance')and'$existential'(A13, '?ELEMENT2', exists(B13, instance(B13, 'ElementalSubstance')and instance('?ELEMENT2', 'ElementalSubstance')and not equal(B13, '?ELEMENT2')and piece(B13, Z12)and piece('?ELEMENT2', Z12))))and'$existential'(B13, '?ELEMENT1', instance('?ELEMENT1', 'ElementalSubstance')and instance(A13, 'ElementalSubstance')and not equal('?ELEMENT1', A13)and piece('?ELEMENT1', Z12)and piece(A13, Z12)), piece(A13, Z12)), [domainV(B13, ['$instanceof':'ElementalSubstance', piece:1]), domainV(A13, ['$instanceof':'ElementalSubstance', piece:1]), domainV(Z12, ['$instanceof':'CompoundSubstance', piece:2]), domainV(_G13709, []), forall(Z12), replaceConsVar(A13, '$existential'('?ELEMENT2', exists(B13, instance(B13, 'ElementalSubstance')and instance('?ELEMENT2', 'ElementalSubstance')and not equal(B13, '?ELEMENT2')and piece(B13, Z12)and piece('?ELEMENT2', Z12)))), replaceConsVar(B13, '$existential'('?ELEMENT1', instance('?ELEMENT1', 'ElementalSubstance')and instance(A13, 'ElementalSubstance')and not equal('?ELEMENT1', A13)and piece('?ELEMENT1', Z12)and piece(A13, Z12)))], ['COMPOUND'=Z12, 'ELEMENT1'=B13, 'ELEMENT2'=A13], 'Merge', 'BASE ONTOLOGY', 729, 'Anonymous', on).
mooCache(subclass('Mixture', 'Substance'), subclass('Mixture', 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 731, 'Anonymous', on).
mooCache(documentation('Mixture', string('"A Mixture is two or more PureSubstances,   combined in varying proportions - each retaining its own specific properties.   The components of a Mixture can be separated by physical means, i.e. without   the making and breaking of chemical bonds. Examples: Air, table salt thoroughly   dissolved in water, milk, wood, and concrete. "')), documentation('Mixture', string('"A Mixture is two or more PureSubstances,   combined in varying proportions - each retaining its own specific properties.   The components of a Mixture can be separated by physical means, i.e. without   the making and breaking of chemical bonds. Examples: Air, table salt thoroughly   dissolved in water, milk, wood, and concrete. "')), [], [], 'Merge', 'BASE ONTOLOGY', 733, 'Anonymous', on).
mooCache(instance(T23, 'Mixture')=>exists(U23, exists(V23, subclass(V23, 'PureSubstance')and subclass(U23, 'PureSubstance')and not equal(V23, U23)and material(V23, T23)and material(U23, T23))), (entails(not subclass(V23, 'PureSubstance'), not instance(T23, 'Mixture'))and entails(instance(T23, 'Mixture')and'$existential'(V23, '?PURE1', subclass('?PURE1', 'PureSubstance')and subclass(U23, 'PureSubstance')and not equal('?PURE1', U23)and material('?PURE1', T23)and material(U23, T23)), subclass(V23, 'PureSubstance')))and (entails(not subclass(U23, 'PureSubstance'), not instance(T23, 'Mixture'))and entails((instance(T23, 'Mixture')and'$existential'(U23, '?PURE2', exists(V23, subclass(V23, 'PureSubstance')and subclass('?PURE2', 'PureSubstance')and not equal(V23, '?PURE2')and material(V23, T23)and material('?PURE2', T23))))and'$existential'(V23, '?PURE1', subclass('?PURE1', 'PureSubstance')and subclass(U23, 'PureSubstance')and not equal('?PURE1', U23)and material('?PURE1', T23)and material(U23, T23)), subclass(U23, 'PureSubstance')))and (entails(equal(V23, U23), not instance(T23, 'Mixture'))and entails(instance(T23, 'Mixture'), not equal(V23, U23)))and (entails(not material(V23, T23), not instance(T23, 'Mixture'))and entails(instance(T23, 'Mixture')and'$existential'(V23, '?PURE1', subclass('?PURE1', 'PureSubstance')and subclass(U23, 'PureSubstance')and not equal('?PURE1', U23)and material('?PURE1', T23)and material(U23, T23)), material(V23, T23)))and entails(not material(U23, T23), not instance(T23, 'Mixture'))and entails((instance(T23, 'Mixture')and'$existential'(U23, '?PURE2', exists(V23, subclass(V23, 'PureSubstance')and subclass('?PURE2', 'PureSubstance')and not equal(V23, '?PURE2')and material(V23, T23)and material('?PURE2', T23))))and'$existential'(V23, '?PURE1', subclass('?PURE1', 'PureSubstance')and subclass(U23, 'PureSubstance')and not equal('?PURE1', U23)and material('?PURE1', T23)and material(U23, T23)), material(U23, T23)), [domainV(V23, [material:1, subclass:1]), domainV(U23, [material:1, subclass:1]), domainV(T23, ['$instanceof':'Mixture', material:2]), domainV(_G13521, []), forall(T23), replaceConsVar(U23, '$existential'('?PURE2', exists(V23, subclass(V23, 'PureSubstance')and subclass('?PURE2', 'PureSubstance')and not equal(V23, '?PURE2')and material(V23, T23)and material('?PURE2', T23)))), replaceConsVar(V23, '$existential'('?PURE1', subclass('?PURE1', 'PureSubstance')and subclass(U23, 'PureSubstance')and not equal('?PURE1', U23)and material('?PURE1', T23)and material(U23, T23)))], ['MIXTURE'=T23, 'PURE1'=V23, 'PURE2'=U23], 'Merge', 'BASE ONTOLOGY', 735, 'Anonymous', on).
mooCache(subclass('Solution', 'Mixture'), subclass('Solution', 'Mixture'), [], [], 'Merge', 'BASE ONTOLOGY', 737, 'Anonymous', on).
mooCache(documentation('Solution', string('"A homogenous liquid mixture. The most   abundant component in a solution is called the solvent. Other components   are called solutes. A solution, though homogeneous, may nonetheless have   variable composition. Any amount of salt, up to a maximum limit, can be   dissolved in a given amount of water. "')), documentation('Solution', string('"A homogenous liquid mixture. The most   abundant component in a solution is called the solvent. Other components   are called solutes. A solution, though homogeneous, may nonetheless have   variable composition. Any amount of salt, up to a maximum limit, can be   dissolved in a given amount of water. "')), [], [], 'Merge', 'BASE ONTOLOGY', 739, 'Anonymous', on).
mooCache(subclass('CorpuscularObject', 'SelfConnectedObject'), subclass('CorpuscularObject', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 741, 'Anonymous', on).
mooCache(disjoint('CorpuscularObject', 'Substance'), disjoint('CorpuscularObject', 'Substance'), [], [], 'Merge', 'BASE ONTOLOGY', 743, 'Anonymous', on).
mooCache(documentation('CorpuscularObject', string('"A SelfConnectedObject whose parts have   properties that are not shared by the whole."')), documentation('CorpuscularObject', string('"A SelfConnectedObject whose parts have   properties that are not shared by the whole."')), [], [], 'Merge', 'BASE ONTOLOGY', 745, 'Anonymous', on).
mooCache(instance(L6, 'CorpuscularObject')=>exists(M6, exists(N6, subclass(N6, 'Substance')and subclass(M6, 'Substance')and material(N6, L6)and material(M6, L6)and not equal(N6, M6))), (entails(not subclass(N6, 'Substance'), not instance(L6, 'CorpuscularObject'))and entails(instance(L6, 'CorpuscularObject')and'$existential'(N6, '?SUBSTANCE1', subclass('?SUBSTANCE1', 'Substance')and subclass(M6, 'Substance')and material('?SUBSTANCE1', L6)and material(M6, L6)and not equal('?SUBSTANCE1', M6)), subclass(N6, 'Substance')))and (entails(not subclass(M6, 'Substance'), not instance(L6, 'CorpuscularObject'))and entails((instance(L6, 'CorpuscularObject')and'$existential'(M6, '?SUBSTANCE2', exists(N6, subclass(N6, 'Substance')and subclass('?SUBSTANCE2', 'Substance')and material(N6, L6)and material('?SUBSTANCE2', L6)and not equal(N6, '?SUBSTANCE2'))))and'$existential'(N6, '?SUBSTANCE1', subclass('?SUBSTANCE1', 'Substance')and subclass(M6, 'Substance')and material('?SUBSTANCE1', L6)and material(M6, L6)and not equal('?SUBSTANCE1', M6)), subclass(M6, 'Substance')))and (entails(not material(N6, L6), not instance(L6, 'CorpuscularObject'))and entails(instance(L6, 'CorpuscularObject')and'$existential'(N6, '?SUBSTANCE1', subclass('?SUBSTANCE1', 'Substance')and subclass(M6, 'Substance')and material('?SUBSTANCE1', L6)and material(M6, L6)and not equal('?SUBSTANCE1', M6)), material(N6, L6)))and (entails(not material(M6, L6), not instance(L6, 'CorpuscularObject'))and entails((instance(L6, 'CorpuscularObject')and'$existential'(M6, '?SUBSTANCE2', exists(N6, subclass(N6, 'Substance')and subclass('?SUBSTANCE2', 'Substance')and material(N6, L6)and material('?SUBSTANCE2', L6)and not equal(N6, '?SUBSTANCE2'))))and'$existential'(N6, '?SUBSTANCE1', subclass('?SUBSTANCE1', 'Substance')and subclass(M6, 'Substance')and material('?SUBSTANCE1', L6)and material(M6, L6)and not equal('?SUBSTANCE1', M6)), material(M6, L6)))and entails(equal(N6, M6), not instance(L6, 'CorpuscularObject'))and entails(instance(L6, 'CorpuscularObject'), not equal(N6, M6)), [domainV(N6, [material:1, subclass:1]), domainV(M6, [material:1, subclass:1]), domainV(L6, ['$instanceof':'CorpuscularObject', material:2]), domainV(_G13722, []), forall(L6), replaceConsVar(M6, '$existential'('?SUBSTANCE2', exists(N6, subclass(N6, 'Substance')and subclass('?SUBSTANCE2', 'Substance')and material(N6, L6)and material('?SUBSTANCE2', L6)and not equal(N6, '?SUBSTANCE2')))), replaceConsVar(N6, '$existential'('?SUBSTANCE1', subclass('?SUBSTANCE1', 'Substance')and subclass(M6, 'Substance')and material('?SUBSTANCE1', L6)and material(M6, L6)and not equal('?SUBSTANCE1', M6)))], ['OBJ'=L6, 'SUBSTANCE1'=N6, 'SUBSTANCE2'=M6], 'Merge', 'BASE ONTOLOGY', 747, 'Anonymous', on).
mooCache(subclass('Region', 'SelfConnectedObject'), subclass('Region', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 749, 'Anonymous', on).
mooCache(documentation('Region', string('"A topographic location.  Regions encompass   surfaces of Objects and GeographicAreas.  Note that a Region is   the only kind of Object which can be located at itself."')), documentation('Region', string('"A topographic location.  Regions encompass   surfaces of Objects and GeographicAreas.  Note that a Region is   the only kind of Object which can be located at itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 751, 'Anonymous', on).
mooCache(subclass('Collection', 'Object'), subclass('Collection', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 753, 'Anonymous', on).
mooCache(disjoint('Collection', 'SelfConnectedObject'), disjoint('Collection', 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 755, 'Anonymous', on).
mooCache(documentation('Collection', string('"Collections have members like Classes, but,   unlike Classes, they have a position in space-time and members can be   added and subtracted without thereby changing the identity of the   Collection.  Some examples are toolkits, football teams, and flocks   of sheep."')), documentation('Collection', string('"Collections have members like Classes, but,   unlike Classes, they have a position in space-time and members can be   added and subtracted without thereby changing the identity of the   Collection.  Some examples are toolkits, football teams, and flocks   of sheep."')), [], [], 'Merge', 'BASE ONTOLOGY', 757, 'Anonymous', on).
mooCache(instance(T25, 'Collection')=>exists(U25, member(U25, T25)), entails(not member(U25, T25), not instance(T25, 'Collection'))and entails(instance(T25, 'Collection')and'$existential'(U25, '?OBJ', member('?OBJ', T25)), member(U25, T25)), [domainV(U25, [member:1]), domainV(T25, ['$instanceof':'Collection', member:2]), domainV(_G5200, []), forall(T25), replaceConsVar(U25, '$existential'('?OBJ', member('?OBJ', T25)))], ['COLL'=T25, 'OBJ'=U25], 'Merge', 'BASE ONTOLOGY', 759, 'Anonymous', on).
mooCache(instance(E29, 'Collection')and member(F29, E29)and member(G29, E29)=>orientation(F29, G29, 'Near'), entails(instance(E29, 'Collection')and member(F29, E29)and member(G29, E29), orientation(F29, G29, 'Near'))and entails(not orientation(F29, G29, 'Near')and member(F29, E29)and member(G29, E29), not instance(E29, 'Collection'))and entails(not orientation(F29, G29, 'Near')and instance(E29, 'Collection')and member(G29, E29), not member(F29, E29))and entails(not orientation(F29, G29, 'Near')and instance(E29, 'Collection')and member(F29, E29), not member(G29, E29)), [domainV(G29, [member:1, orientation:2]), domainV(F29, [member:1, orientation:1]), domainV(E29, ['$instanceof':'Collection', member:2]), domainV(_G7373, []), forall(E29), forall(F29), forall(G29)], ['COLL'=E29, 'MEMBER1'=F29, 'MEMBER2'=G29], 'Merge', 'BASE ONTOLOGY', 761, 'Anonymous', on).
mooCache(instance(member, 'BinaryPredicate'), instance(member, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 763, 'Anonymous', on).
mooCache(instance(member, 'SpatialRelation'), instance(member, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 765, 'Anonymous', on).
mooCache(instance(member, 'AsymmetricRelation'), instance(member, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 767, 'Anonymous', on).
mooCache(instance(member, 'IntransitiveRelation'), instance(member, 'IntransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 769, 'Anonymous', on).
mooCache(domain(member, 1, 'SelfConnectedObject'), domain(member, 1, 'SelfConnectedObject'), [], [], 'Merge', 'BASE ONTOLOGY', 771, 'Anonymous', on).
mooCache(domain(member, 2, 'Collection'), domain(member, 2, 'Collection'), [], [], 'Merge', 'BASE ONTOLOGY', 773, 'Anonymous', on).
mooCache(relatedInternalConcept(member, instance), relatedInternalConcept(member, instance), [], [], 'Merge', 'BASE ONTOLOGY', 775, 'Anonymous', on).
mooCache(relatedInternalConcept(member, element), relatedInternalConcept(member, element), [], [], 'Merge', 'BASE ONTOLOGY', 777, 'Anonymous', on).
mooCache(documentation(member, string('"A specialized common sense notion of part for   uniform parts of Collections.  For example, each sheep in a flock of   sheep would have the relationship of member to the flock."')), documentation(member, string('"A specialized common sense notion of part for   uniform parts of Collections.  For example, each sheep in a flock of   sheep would have the relationship of member to the flock."')), [], [], 'Merge', 'BASE ONTOLOGY', 779, 'Anonymous', on).
mooCache(instance(subCollection, 'BinaryPredicate'), instance(subCollection, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 781, 'Anonymous', on).
mooCache(instance(subCollection, 'TransitiveRelation'), instance(subCollection, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 783, 'Anonymous', on).
mooCache(instance(subCollection, 'IrreflexiveRelation'), instance(subCollection, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 785, 'Anonymous', on).
mooCache(domain(subCollection, 1, 'Collection'), domain(subCollection, 1, 'Collection'), [], [], 'Merge', 'BASE ONTOLOGY', 787, 'Anonymous', on).
mooCache(domain(subCollection, 2, 'Collection'), domain(subCollection, 2, 'Collection'), [], [], 'Merge', 'BASE ONTOLOGY', 789, 'Anonymous', on).
mooCache(documentation(subCollection, string('"(subCollection ?COLL1 ?COLL2) means that   the Collection ?COLL1 is a proper part of the Collection ?COLL2."')), documentation(subCollection, string('"(subCollection ?COLL1 ?COLL2) means that   the Collection ?COLL1 is a proper part of the Collection ?COLL2."')), [], [], 'Merge', 'BASE ONTOLOGY', 791, 'Anonymous', on).
mooCache(subclass('ContentBearingObject', 'Object'), subclass('ContentBearingObject', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 793, 'Anonymous', on).
mooCache(relatedInternalConcept('ContentBearingObject', containsInformation), relatedInternalConcept('ContentBearingObject', containsInformation), [], [], 'Merge', 'BASE ONTOLOGY', 795, 'Anonymous', on).
mooCache(documentation('ContentBearingObject', string('"Any Object that expresses information."')), documentation('ContentBearingObject', string('"Any Object that expresses information."')), [], [], 'Merge', 'BASE ONTOLOGY', 797, 'Anonymous', on).
mooCache(subclass('SymbolicString', 'ContentBearingObject'), subclass('SymbolicString', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 799, 'Anonymous', on).
mooCache(documentation('SymbolicString', string('"The Class of alphanumeric sequences."')), documentation('SymbolicString', string('"The Class of alphanumeric sequences."')), [], [], 'Merge', 'BASE ONTOLOGY', 801, 'Anonymous', on).
mooCache(subclass('Character', 'SymbolicString'), subclass('Character', 'SymbolicString'), [], [], 'Merge', 'BASE ONTOLOGY', 803, 'Anonymous', on).
mooCache(documentation('Character', string('"An element of an alphabet, a set of numerals, etc.    Note that a Character may or may not be part of a Language.  Character   is a subclass of SymbolicString, because every instance of Character is   an alphanumeric sequence consisting of a single element."')), documentation('Character', string('"An element of an alphabet, a set of numerals, etc.    Note that a Character may or may not be part of a Language.  Character   is a subclass of SymbolicString, because every instance of Character is   an alphanumeric sequence consisting of a single element."')), [], [], 'Merge', 'BASE ONTOLOGY', 805, 'Anonymous', on).
mooCache(instance(P27, 'SymbolicString')=>exists(Q27, part(Q27, P27)and instance(Q27, 'Character')), (entails(not part(Q27, P27), not instance(P27, 'SymbolicString'))and entails(instance(P27, 'SymbolicString')and'$existential'(Q27, '?PART', part('?PART', P27)and instance('?PART', 'Character')), part(Q27, P27)))and entails(not instance(Q27, 'Character'), not instance(P27, 'SymbolicString'))and entails(instance(P27, 'SymbolicString')and'$existential'(Q27, '?PART', part('?PART', P27)and instance('?PART', 'Character')), instance(Q27, 'Character')), [domainV(Q27, ['$instanceof':'Character', part:1]), domainV(P27, ['$instanceof':'SymbolicString', part:2]), domainV(_G6718, []), forall(P27), replaceConsVar(Q27, '$existential'('?PART', part('?PART', P27)and instance('?PART', 'Character')))], ['STRING'=P27, 'PART'=Q27], 'Merge', 'BASE ONTOLOGY', 807, 'Anonymous', on).
mooCache(subclass('CodeNumber', 'SymbolicString'), subclass('CodeNumber', 'SymbolicString'), [], [], 'Merge', 'BASE ONTOLOGY', 809, 'Anonymous', on).
mooCache(documentation('CodeNumber', string('"SymbolicStrings that are not part of a Language   and that uniquely identify an instance or subclass of Object.  Some examples   of CodeNumber are the keys of tables in database applications and the ISBN   (International Standard Book Number)."')), documentation('CodeNumber', string('"SymbolicStrings that are not part of a Language   and that uniquely identify an instance or subclass of Object.  Some examples   of CodeNumber are the keys of tables in database applications and the ISBN   (International Standard Book Number)."')), [], [], 'Merge', 'BASE ONTOLOGY', 811, 'Anonymous', on).
mooCache(instance(containsInformation, 'BinaryPredicate'), instance(containsInformation, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 813, 'Anonymous', on).
mooCache(instance(containsInformation, 'AsymmetricRelation'), instance(containsInformation, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 815, 'Anonymous', on).
mooCache(subrelation(containsInformation, represents), subrelation(containsInformation, represents), [], [], 'Merge', 'BASE ONTOLOGY', 817, 'Anonymous', on).
mooCache(domain(containsInformation, 1, 'ContentBearingObject'), domain(containsInformation, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 819, 'Anonymous', on).
mooCache(domain(containsInformation, 2, 'Proposition'), domain(containsInformation, 2, 'Proposition'), [], [], 'Merge', 'BASE ONTOLOGY', 821, 'Anonymous', on).
mooCache(documentation(containsInformation, string('"A subrelation of represents.  This   predicate relates a ContentBearingObject to the Proposition that is   expressed by the ContentBearingObject. Examples include the relationships   between a physical novel and its story and between a printed score and its   musical content."')), documentation(containsInformation, string('"A subrelation of represents.  This   predicate relates a ContentBearingObject to the Proposition that is   expressed by the ContentBearingObject. Examples include the relationships   between a physical novel and its story and between a printed score and its   musical content."')), [], [], 'Merge', 'BASE ONTOLOGY', 823, 'Anonymous', on).
mooCache(subclass('Advertisement', 'ContentBearingObject'), subclass('Advertisement', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 825, 'Anonymous', on).
mooCache(documentation('Advertisement', string('"A ContentBearingObject whose purpose is to   promote the sale of an Object described in the Advertisement."')), documentation('Advertisement', string('"A ContentBearingObject whose purpose is to   promote the sale of an Object described in the Advertisement."')), [], [], 'Merge', 'BASE ONTOLOGY', 827, 'Anonymous', on).
mooCache(instance(Z23, 'Advertisement')=>exists(A24, refers(Z23, A24)and hasPurpose(Z23, exists(B24, instance(B24, 'Selling')and patient(B24, A24)))), (entails(not refers(Z23, A24), not instance(Z23, 'Advertisement'))and entails((instance(Z23, 'Advertisement')and'$existential'(A24, '?OBJ', refers(Z23, '?OBJ')and exists(B24, hasPurpose(Z23, instance(B24, 'Selling'))and hasPurpose(Z23, patient(B24, '?OBJ')))))and'$existential'(B24, '?SALE', hasPurpose(Z23, instance('?SALE', 'Selling'))and hasPurpose(Z23, patient('?SALE', A24))), refers(Z23, A24)))and (entails(not hasPurpose(Z23, instance(B24, 'Selling')), not instance(Z23, 'Advertisement'))and entails(instance(Z23, 'Advertisement')and'$existential'(B24, '?SALE', hasPurpose(Z23, instance('?SALE', 'Selling'))and hasPurpose(Z23, patient('?SALE', A24))), hasPurpose(Z23, instance(B24, 'Selling'))))and entails(not hasPurpose(Z23, patient(B24, A24)), not instance(Z23, 'Advertisement'))and entails((instance(Z23, 'Advertisement')and'$existential'(A24, '?OBJ', refers(Z23, '?OBJ')and exists(B24, hasPurpose(Z23, instance(B24, 'Selling'))and hasPurpose(Z23, patient(B24, '?OBJ')))))and'$existential'(B24, '?SALE', hasPurpose(Z23, instance('?SALE', 'Selling'))and hasPurpose(Z23, patient('?SALE', A24))), hasPurpose(Z23, patient(B24, A24))), [domainV(B24, ['$instanceof':'Selling', patient:1]), domainV(A24, [patient:2, refers:2]), domainV(Z23, ['$instanceof':'Advertisement', hasPurpose:1, refers:1]), domainV(_G11401, []), forall(Z23), replaceConsVar(A24, '$existential'('?OBJ', refers(Z23, '?OBJ')and exists(B24, hasPurpose(Z23, instance(B24, 'Selling'))and hasPurpose(Z23, patient(B24, '?OBJ'))))), replaceConsVar(B24, '$existential'('?SALE', hasPurpose(Z23, instance('?SALE', 'Selling'))and hasPurpose(Z23, patient('?SALE', A24))))], ['ADVERT'=Z23, 'OBJ'=A24, 'SALE'=B24], 'Merge', 'BASE ONTOLOGY', 829, 'Anonymous', on).
mooCache(subclass('MotionPicture', 'ContentBearingObject'), subclass('MotionPicture', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 831, 'Anonymous', on).
mooCache(documentation('MotionPicture', string('"ContentBearingObjects which depict motion   (and which may have an audio or text component as well).  This Class covers   films, videos, etc."')), documentation('MotionPicture', string('"ContentBearingObjects which depict motion   (and which may have an audio or text component as well).  This Class covers   films, videos, etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 833, 'Anonymous', on).
mooCache(subclass('Icon', 'ContentBearingObject'), subclass('Icon', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 835, 'Anonymous', on).
mooCache(documentation('Icon', string('"This is the subclass of ContentBearingObjects   which are not part of a Language and which have some sort of similarity   with the Objects that they represent.  This Class would include symbolic   roadway signs, \'icons\' in a graphical computer operating system, etc."')), documentation('Icon', string('"This is the subclass of ContentBearingObjects   which are not part of a Language and which have some sort of similarity   with the Objects that they represent.  This Class would include symbolic   roadway signs, \'icons\' in a graphical computer operating system, etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 837, 'Anonymous', on).
mooCache(subclass('LinguisticExpression', 'ContentBearingObject'), subclass('LinguisticExpression', 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 839, 'Anonymous', on).
mooCache(disjoint('LinguisticExpression', 'Icon'), disjoint('LinguisticExpression', 'Icon'), [], [], 'Merge', 'BASE ONTOLOGY', 841, 'Anonymous', on).
mooCache(documentation('LinguisticExpression', string('"This is the subclass of   ContentBearingObjects which are language-related.  Note that this Class   encompasses both Language and the the elements of Languages,   e.g. Words."')), documentation('LinguisticExpression', string('"This is the subclass of   ContentBearingObjects which are language-related.  Note that this Class   encompasses both Language and the the elements of Languages,   e.g. Words."')), [], [], 'Merge', 'BASE ONTOLOGY', 843, 'Anonymous', on).
mooCache(subclass('Language', 'LinguisticExpression'), subclass('Language', 'LinguisticExpression'), [], [], 'Merge', 'BASE ONTOLOGY', 845, 'Anonymous', on).
mooCache(disjointDecomposition('Language', 'AnimalLanguage', 'HumanLanguage', 'ComputerLanguage'), disjointDecomposition('Language', 'AnimalLanguage', 'HumanLanguage', 'ComputerLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 847, 'Anonymous', on).
mooCache(documentation('Language', string('"A system of signs for expressing thought.  The   system can be either natural or artificial, i.e. something that emerges   gradually as a cultural artifact or something that is intentionally created   by a person or group of people."')), documentation('Language', string('"A system of signs for expressing thought.  The   system can be either natural or artificial, i.e. something that emerges   gradually as a cultural artifact or something that is intentionally created   by a person or group of people."')), [], [], 'Merge', 'BASE ONTOLOGY', 849, 'Anonymous', on).
mooCache(subclass('AnimalLanguage', 'Language'), subclass('AnimalLanguage', 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 851, 'Anonymous', on).
mooCache(documentation('AnimalLanguage', string('"The subclass of Languages used by   Animals other than Humans."')), documentation('AnimalLanguage', string('"The subclass of Languages used by   Animals other than Humans."')), [], [], 'Merge', 'BASE ONTOLOGY', 853, 'Anonymous', on).
mooCache(instance(C26, 'AnimalLanguage')and agent(D26, E26)and instrument(D26, C26)=>instance(E26, 'Animal')and not instance(E26, 'Human'), (entails(instance(C26, 'AnimalLanguage')and agent(D26, E26)and instrument(D26, C26), instance(E26, 'Animal'))and entails(not instance(E26, 'Animal')and agent(D26, E26)and instrument(D26, C26), not instance(C26, 'AnimalLanguage'))and entails(not instance(E26, 'Animal')and instance(C26, 'AnimalLanguage')and instrument(D26, C26), not agent(D26, E26))and entails(not instance(E26, 'Animal')and instance(C26, 'AnimalLanguage')and agent(D26, E26), not instrument(D26, C26)))and entails(instance(C26, 'AnimalLanguage')and agent(D26, E26)and instrument(D26, C26), not instance(E26, 'Human'))and entails(instance(E26, 'Human')and agent(D26, E26)and instrument(D26, C26), not instance(C26, 'AnimalLanguage'))and entails(instance(E26, 'Human')and instance(C26, 'AnimalLanguage')and instrument(D26, C26), not agent(D26, E26))and entails(instance(E26, 'Human')and instance(C26, 'AnimalLanguage')and agent(D26, E26), not instrument(D26, C26)), [domainV(E26, ['$instanceof':'Animal', '$instanceof':'Human', agent:2]), domainV(D26, [agent:1, instrument:1]), domainV(C26, ['$instanceof':'AnimalLanguage', instrument:2]), domainV(_G8484, []), forall(C26), forall(D26), forall(E26)], ['LANG'=C26, 'PROC'=D26, 'AGENT'=E26], 'Merge', 'BASE ONTOLOGY', 855, 'Anonymous', on).
mooCache(subclass('ComputerLanguage', 'Language'), subclass('ComputerLanguage', 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 857, 'Anonymous', on).
mooCache(documentation('ComputerLanguage', string('"The class of Languages designed for   and interpreted by a computer."')), documentation('ComputerLanguage', string('"The class of Languages designed for   and interpreted by a computer."')), [], [], 'Merge', 'BASE ONTOLOGY', 859, 'Anonymous', on).
mooCache(instance(X35, 'ComputerLanguage')and agent(Y35, Z35)and instrument(Y35, X35)=>instance(Z35, 'Machine'), entails(instance(X35, 'ComputerLanguage')and agent(Y35, Z35)and instrument(Y35, X35), instance(Z35, 'Machine'))and entails(not instance(Z35, 'Machine')and agent(Y35, Z35)and instrument(Y35, X35), not instance(X35, 'ComputerLanguage'))and entails(not instance(Z35, 'Machine')and instance(X35, 'ComputerLanguage')and instrument(Y35, X35), not agent(Y35, Z35))and entails(not instance(Z35, 'Machine')and instance(X35, 'ComputerLanguage')and agent(Y35, Z35), not instrument(Y35, X35)), [domainV(Z35, ['$instanceof':'Machine', agent:2]), domainV(Y35, [agent:1, instrument:1]), domainV(X35, ['$instanceof':'ComputerLanguage', instrument:2]), domainV(_G6802, []), forall(X35), forall(Y35), forall(Z35)], ['LANG'=X35, 'PROC'=Y35, 'AGENT'=Z35], 'Merge', 'BASE ONTOLOGY', 861, 'Anonymous', on).
mooCache(subclass('HumanLanguage', 'Language'), subclass('HumanLanguage', 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 863, 'Anonymous', on).
mooCache(documentation('HumanLanguage', string('"The subclass of Languages used by   Humans."')), documentation('HumanLanguage', string('"The subclass of Languages used by   Humans."')), [], [], 'Merge', 'BASE ONTOLOGY', 865, 'Anonymous', on).
mooCache(instance(A7, 'HumanLanguage')and agent(B7, C7)and instrument(B7, A7)=>instance(C7, 'Human'), entails(instance(A7, 'HumanLanguage')and agent(B7, C7)and instrument(B7, A7), instance(C7, 'Human'))and entails(not instance(C7, 'Human')and agent(B7, C7)and instrument(B7, A7), not instance(A7, 'HumanLanguage'))and entails(not instance(C7, 'Human')and instance(A7, 'HumanLanguage')and instrument(B7, A7), not agent(B7, C7))and entails(not instance(C7, 'Human')and instance(A7, 'HumanLanguage')and agent(B7, C7), not instrument(B7, A7)), [domainV(C7, ['$instanceof':'Human', agent:2]), domainV(B7, [agent:1, instrument:1]), domainV(A7, ['$instanceof':'HumanLanguage', instrument:2]), domainV(_G6772, []), forall(A7), forall(B7), forall(C7)], ['LANG'=A7, 'PROC'=B7, 'AGENT'=C7], 'Merge', 'BASE ONTOLOGY', 867, 'Anonymous', on).
mooCache(subclass('ConstructedLanguage', 'HumanLanguage'), subclass('ConstructedLanguage', 'HumanLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 869, 'Anonymous', on).
mooCache(documentation('ConstructedLanguage', string('"The subclass of HumanLanguages   that did not originate diachronically, but were designed by a Human.    This Class includes languages like Esperanto that were created to   facilitate international communication."')), documentation('ConstructedLanguage', string('"The subclass of HumanLanguages   that did not originate diachronically, but were designed by a Human.    This Class includes languages like Esperanto that were created to   facilitate international communication."')), [], [], 'Merge', 'BASE ONTOLOGY', 871, 'Anonymous', on).
mooCache(instance(R16, 'ConstructedLanguage')=>exists(S16, instance(S16, 'Planning')and result(S16, R16)), (entails(not instance(S16, 'Planning'), not instance(R16, 'ConstructedLanguage'))and entails(instance(R16, 'ConstructedLanguage')and'$existential'(S16, '?PLAN', instance('?PLAN', 'Planning')and result('?PLAN', R16)), instance(S16, 'Planning')))and entails(not result(S16, R16), not instance(R16, 'ConstructedLanguage'))and entails(instance(R16, 'ConstructedLanguage')and'$existential'(S16, '?PLAN', instance('?PLAN', 'Planning')and result('?PLAN', R16)), result(S16, R16)), [domainV(S16, ['$instanceof':'Planning', result:1]), domainV(R16, ['$instanceof':'ConstructedLanguage', result:2]), domainV(_G6730, []), forall(R16), replaceConsVar(S16, '$existential'('?PLAN', instance('?PLAN', 'Planning')and result('?PLAN', R16)))], ['LANG'=R16, 'PLAN'=S16], 'Merge', 'BASE ONTOLOGY', 873, 'Anonymous', on).
mooCache(subclass('NaturalLanguage', 'HumanLanguage'), subclass('NaturalLanguage', 'HumanLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 875, 'Anonymous', on).
mooCache(disjoint('NaturalLanguage', 'ConstructedLanguage'), disjoint('NaturalLanguage', 'ConstructedLanguage'), [], [], 'Merge', 'BASE ONTOLOGY', 877, 'Anonymous', on).
mooCache(documentation('NaturalLanguage', string('"The subclass of HumanLanguages which   are not designed and which evolve from generation to generation.  This   Class includes all of the national languages, e.g. English, Spanish,   Japanese, etc."')), documentation('NaturalLanguage', string('"The subclass of HumanLanguages which   are not designed and which evolve from generation to generation.  This   Class includes all of the national languages, e.g. English, Spanish,   Japanese, etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 879, 'Anonymous', on).
mooCache(subclass('Word', 'LinguisticExpression'), subclass('Word', 'LinguisticExpression'), [], [], 'Merge', 'BASE ONTOLOGY', 881, 'Anonymous', on).
mooCache(documentation('Word', string('"A term of a Language that represents a concept."')), documentation('Word', string('"A term of a Language that represents a concept."')), [], [], 'Merge', 'BASE ONTOLOGY', 883, 'Anonymous', on).
mooCache(subclass('Clause', 'Phrase'), subclass('Clause', 'Phrase'), [], [], 'Merge', 'BASE ONTOLOGY', 885, 'Anonymous', on).
mooCache(documentation('Clause', string('"A clause is a grammatical unit that includes, at minimum,   a predicate and a subject (which may be explicit or implicit) and that expresses   a Proposition."')), documentation('Clause', string('"A clause is a grammatical unit that includes, at minimum,   a predicate and a subject (which may be explicit or implicit) and that expresses   a Proposition."')), [], [], 'Merge', 'BASE ONTOLOGY', 887, 'Anonymous', on).
mooCache(instance(Y2, 'Clause')=>exists(Z2, instance(Z2, 'Proposition')and containsInformation(Y2, Z2)), (entails(not instance(Z2, 'Proposition'), not instance(Y2, 'Clause'))and entails(instance(Y2, 'Clause')and'$existential'(Z2, '?PROP', instance('?PROP', 'Proposition')and containsInformation(Y2, '?PROP')), instance(Z2, 'Proposition')))and entails(not containsInformation(Y2, Z2), not instance(Y2, 'Clause'))and entails(instance(Y2, 'Clause')and'$existential'(Z2, '?PROP', instance('?PROP', 'Proposition')and containsInformation(Y2, '?PROP')), containsInformation(Y2, Z2)), [domainV(Z2, ['$instanceof':'Proposition', containsInformation:2]), domainV(Y2, ['$instanceof':'Clause', containsInformation:1]), domainV(_G6772, []), forall(Y2), replaceConsVar(Z2, '$existential'('?PROP', instance('?PROP', 'Proposition')and containsInformation(Y2, '?PROP')))], ['CLAUSE'=Y2, 'PROP'=Z2], 'Merge', 'BASE ONTOLOGY', 889, 'Anonymous', on).
mooCache(subclass('Sentence', 'Clause'), subclass('Sentence', 'Clause'), [], [], 'Merge', 'BASE ONTOLOGY', 891, 'Anonymous', on).
mooCache(documentation('Sentence', string('"A syntactically well-formed formula of a   Language."')), documentation('Sentence', string('"A syntactically well-formed formula of a   Language."')), [], [], 'Merge', 'BASE ONTOLOGY', 893, 'Anonymous', on).
mooCache(subclass('Formula', 'Sentence'), subclass('Formula', 'Sentence'), [], [], 'Merge', 'BASE ONTOLOGY', 895, 'Anonymous', on).
mooCache(documentation('Formula', string('"A syntactically well-formed formula in the   SUO-KIF knowledge representation language."')), documentation('Formula', string('"A syntactically well-formed formula in the   SUO-KIF knowledge representation language."')), [], [], 'Merge', 'BASE ONTOLOGY', 897, 'Anonymous', on).
mooCache(subclass('Agent', 'Object'), subclass('Agent', 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 905, 'Anonymous', on).
mooCache(documentation('Agent', string('"Something or someone that can act on its own and   produce changes in the world."')), documentation('Agent', string('"Something or someone that can act on its own and   produce changes in the world."')), [], [], 'Merge', 'BASE ONTOLOGY', 907, 'Anonymous', on).
mooCache(instance(R24, 'Agent')<=>exists(S24, agent(S24, R24)), (entails(instance(R24, 'Agent')and'$existential'(S24, '?PROC', agent('?PROC', R24)), agent(S24, R24))and entails(not agent(S24, R24), not instance(R24, 'Agent')))and entails(agent(S24, R24), instance(R24, 'Agent'))and entails(not instance(R24, 'Agent'), not agent(S24, R24)), [domainV(S24, [agent:1]), domainV(R24, ['$instanceof':'Agent', agent:2]), domainV(_G5443, []), forall(R24), replaceConsVar(S24, '$existential'('?PROC', agent('?PROC', R24))), forall(S24)], ['AGENT'=R24, 'PROC'=S24], 'Merge', 'BASE ONTOLOGY', 909, 'Anonymous', on).
mooCache(subclass('SentientAgent', 'Agent'), subclass('SentientAgent', 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 911, 'Anonymous', on).
mooCache(documentation('SentientAgent', string('"An Agent that has rights but may or may   not have responsibilities and the ability to reason.  If the latter are   present, then the Agent is also an instance of CognitiveAgent.    Domesticated animals are an example of SentientAgents that are not   also CognitiveAgents."')), documentation('SentientAgent', string('"An Agent that has rights but may or may   not have responsibilities and the ability to reason.  If the latter are   present, then the Agent is also an instance of CognitiveAgent.    Domesticated animals are an example of SentientAgents that are not   also CognitiveAgents."')), [], [], 'Merge', 'BASE ONTOLOGY', 913, 'Anonymous', on).
mooCache(subclass('CognitiveAgent', 'SentientAgent'), subclass('CognitiveAgent', 'SentientAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 915, 'Anonymous', on).
mooCache(documentation('CognitiveAgent', string('"A SentientAgent with responsibilities   and the ability to reason, deliberate, make plans, etc.  This is   essentially the legal/ethical notion of a person.  Note that, although   Human is a subclass of CognitiveAgent, there may be instances of   CognitiveAgent which are not also instances of Human.  For example,   chimpanzees, gorillas, dolphins, whales, and some extraterrestrials   (if they exist) may be CognitiveAgents."')), documentation('CognitiveAgent', string('"A SentientAgent with responsibilities   and the ability to reason, deliberate, make plans, etc.  This is   essentially the legal/ethical notion of a person.  Note that, although   Human is a subclass of CognitiveAgent, there may be instances of   CognitiveAgent which are not also instances of Human.  For example,   chimpanzees, gorillas, dolphins, whales, and some extraterrestrials   (if they exist) may be CognitiveAgents."')), [], [], 'Merge', 'BASE ONTOLOGY', 917, 'Anonymous', on).
mooCache(subclass('Process', 'Physical'), subclass('Process', 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 919, 'Anonymous', on).
mooCache(documentation('Process', string('"Intuitively, the class of things that happen   rather than endure.  A Process is thought of as having temporal parts   or stages, and so it cannot have all these parts together at one time   (contrast Object).  Examples include extended \'events\' such as a football   match or a race, events and actions of various kinds, states of motion and   lifespans of Objects, which occupy the same space and time but are thought   of as having stages instead of parts. The formal definition is: anything   that lasts for a time but is not an Object.  Note that a Process may   have participants \'inside\' it which are Objects, such as the players   in a football match.  In a 4D ontology, a Process is something whose   spatiotemporal extent is thought of as dividing into temporal stages   roughly perpendicular to the time-axis."')), documentation('Process', string('"Intuitively, the class of things that happen   rather than endure.  A Process is thought of as having temporal parts   or stages, and so it cannot have all these parts together at one time   (contrast Object).  Examples include extended \'events\' such as a football   match or a race, events and actions of various kinds, states of motion and   lifespans of Objects, which occupy the same space and time but are thought   of as having stages instead of parts. The formal definition is: anything   that lasts for a time but is not an Object.  Note that a Process may   have participants \'inside\' it which are Objects, such as the players   in a football match.  In a 4D ontology, a Process is something whose   spatiotemporal extent is thought of as dividing into temporal stages   roughly perpendicular to the time-axis."')), [], [], 'Merge', 'BASE ONTOLOGY', 921, 'Anonymous', on).
mooCache(subclass('ChemicalProcess', 'Process'), subclass('ChemicalProcess', 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 923, 'Anonymous', on).
mooCache(documentation('ChemicalProcess', string('"A ChemicalProcess occurs whenever   chemical compounds (CompoundSubstances) are formed or decomposed.    For example, reactants disappear as chemical change occurs, and products   appear as chemical change occurs.  In a chemical change a chemical   reaction takes place.  Catalysts in a ChemicalProcess may speed up the   reaction, but aren\'t themselves produced or consumed.  Examples: rusting of   iron and the decomposition of water, induced by an electric current, to   gaseous hydrogen and gaseous oxygen."')), documentation('ChemicalProcess', string('"A ChemicalProcess occurs whenever   chemical compounds (CompoundSubstances) are formed or decomposed.    For example, reactants disappear as chemical change occurs, and products   appear as chemical change occurs.  In a chemical change a chemical   reaction takes place.  Catalysts in a ChemicalProcess may speed up the   reaction, but aren\'t themselves produced or consumed.  Examples: rusting of   iron and the decomposition of water, induced by an electric current, to   gaseous hydrogen and gaseous oxygen."')), [], [], 'Merge', 'BASE ONTOLOGY', 925, 'Anonymous', on).
mooCache(subclass('ChemicalSynthesis', 'ChemicalProcess'), subclass('ChemicalSynthesis', 'ChemicalProcess'), [], [], 'Merge', 'BASE ONTOLOGY', 927, 'Anonymous', on).
mooCache(documentation('ChemicalSynthesis', string('"The Class of ChemicalProcesses in   which a CompoundSubstance is formed from simpler reactants."')), documentation('ChemicalSynthesis', string('"The Class of ChemicalProcesses in   which a CompoundSubstance is formed from simpler reactants."')), [], [], 'Merge', 'BASE ONTOLOGY', 929, 'Anonymous', on).
mooCache(subclass('ChemicalDecomposition', 'ChemicalProcess'), subclass('ChemicalDecomposition', 'ChemicalProcess'), [], [], 'Merge', 'BASE ONTOLOGY', 931, 'Anonymous', on).
mooCache(documentation('ChemicalDecomposition', string('"The Class of ChemicalProcesses   in which a CompoundSubstance breaks down into simpler products."')), documentation('ChemicalDecomposition', string('"The Class of ChemicalProcesses   in which a CompoundSubstance breaks down into simpler products."')), [], [], 'Merge', 'BASE ONTOLOGY', 933, 'Anonymous', on).
mooCache(subclass('Abstract', 'Entity'), subclass('Abstract', 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 935, 'Anonymous', on).
mooCache(disjoint('Abstract', 'Physical'), disjoint('Abstract', 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 937, 'Anonymous', on).
mooCache(documentation('Abstract', string('"Properties or qualities as distinguished from any   particular embodiment of the properties/qualities in a physical medium.    Instances of Abstract can be said to exist in the same sense as mathematical   objects such as sets and relations, but they cannot exist at a particular   place and time without some physical encoding or embodiment."')), documentation('Abstract', string('"Properties or qualities as distinguished from any   particular embodiment of the properties/qualities in a physical medium.    Instances of Abstract can be said to exist in the same sense as mathematical   objects such as sets and relations, but they cannot exist at a particular   place and time without some physical encoding or embodiment."')), [], [], 'Merge', 'BASE ONTOLOGY', 939, 'Anonymous', on).
mooCache(instance(M1, 'Abstract')<=>not exists(N1, located(M1, N1)or time(M1, N1)), (entails(instance(M1, 'Abstract'), not located(M1, N1))and entails(instance(M1, 'Abstract'), not time(M1, N1))and entails(located(M1, N1)or time(M1, N1), not instance(M1, 'Abstract')))and entails(not located(M1, N1)and not time(M1, N1), instance(M1, 'Abstract'))and entails((not instance(M1, 'Abstract')and not time(M1, N1))and'$existential'(N1, '?POINT', located(M1, '?POINT')or time(M1, '?POINT')), located(M1, N1))and entails((not instance(M1, 'Abstract')and not located(M1, N1))and'$existential'(N1, '?POINT', located(M1, '?POINT')or time(M1, '?POINT')), time(M1, N1)), [domainV(N1, [located:2, time:2]), domainV(M1, ['$instanceof':'Abstract', located:1, time:1]), domainV(_G7829, []), forall(M1), forall(N1), forall(N1), replaceConsVar(N1, '$existential'('?POINT', located(M1, '?POINT')or time(M1, '?POINT')))], ['ABS'=M1, 'POINT'=N1], 'Merge', 'BASE ONTOLOGY', 945, 'Anonymous', on).
mooCache(subclass('Quantity', 'Abstract'), subclass('Quantity', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 947, 'Anonymous', on).
mooCache(documentation('Quantity', string('"Any specification of how many or how much of   something there is.  Accordingly, there are two subclasses of Quantity:    Number (how many) and PhysicalQuantity (how much)."')), documentation('Quantity', string('"Any specification of how many or how much of   something there is.  Accordingly, there are two subclasses of Quantity:    Number (how many) and PhysicalQuantity (how much)."')), [], [], 'Merge', 'BASE ONTOLOGY', 949, 'Anonymous', on).
mooCache(subclass('Attribute', 'Abstract'), subclass('Attribute', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 951, 'Anonymous', on).
mooCache(disjoint('Attribute', 'Quantity'), disjoint('Attribute', 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 953, 'Anonymous', on).
mooCache(documentation('Attribute', string('"Qualities which we cannot or choose not to   reify into subclasses of Object."')), documentation('Attribute', string('"Qualities which we cannot or choose not to   reify into subclasses of Object."')), [], [], 'Merge', 'BASE ONTOLOGY', 955, 'Anonymous', on).
mooCache(instance(property, 'BinaryPredicate'), instance(property, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 957, 'Anonymous', on).
mooCache(domain(property, 1, 'Entity'), domain(property, 1, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 959, 'Anonymous', on).
mooCache(domain(property, 2, 'Attribute'), domain(property, 2, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 961, 'Anonymous', on).
mooCache(documentation(property, string('"This Predicate holds between an instance of   Entity and an instance of Attribute.  (property ?ENTITY ?ATTR)   means that ?ENTITY has the Attribute ?ATTR."')), documentation(property, string('"This Predicate holds between an instance of   Entity and an instance of Attribute.  (property ?ENTITY ?ATTR)   means that ?ENTITY has the Attribute ?ATTR."')), [], [], 'Merge', 'BASE ONTOLOGY', 963, 'Anonymous', on).
mooCache(instance(attribute, 'AsymmetricRelation'), instance(attribute, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 965, 'Anonymous', on).
mooCache(instance(attribute, 'IrreflexiveRelation'), instance(attribute, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 967, 'Anonymous', on).
mooCache(subrelation(attribute, property), subrelation(attribute, property), [], [], 'Merge', 'BASE ONTOLOGY', 969, 'Anonymous', on).
mooCache(domain(attribute, 1, 'Object'), domain(attribute, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 971, 'Anonymous', on).
mooCache(domain(attribute, 2, 'Attribute'), domain(attribute, 2, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 973, 'Anonymous', on).
mooCache(documentation(attribute, string('"(attribute ?OBJECT ?PROPERTY) means that   ?PROPERTY is a Attribute of ?OBJECT.  For example,   (attribute MyLittleRedWagon Red)."')), documentation(attribute, string('"(attribute ?OBJECT ?PROPERTY) means that   ?PROPERTY is a Attribute of ?OBJECT.  For example,   (attribute MyLittleRedWagon Red)."')), [], [], 'Merge', 'BASE ONTOLOGY', 975, 'Anonymous', on).
mooCache(instance(manner, 'AsymmetricRelation'), instance(manner, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 977, 'Anonymous', on).
mooCache(instance(manner, 'IrreflexiveRelation'), instance(manner, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 979, 'Anonymous', on).
mooCache(subrelation(manner, property), subrelation(manner, property), [], [], 'Merge', 'BASE ONTOLOGY', 981, 'Anonymous', on).
mooCache(domain(manner, 1, 'Process'), domain(manner, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 983, 'Anonymous', on).
mooCache(domain(manner, 2, 'Attribute'), domain(manner, 2, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 985, 'Anonymous', on).
mooCache(disjointRelation(manner, attribute), disjointRelation(manner, attribute), [], [], 'Merge', 'BASE ONTOLOGY', 987, 'Anonymous', on).
mooCache(documentation(manner, string('"(manner ?PROCESS ?MANNER) means that the   Process ?PROCESS is qualified by the Attribute ?MANNER.  The Attributes   of Processes are usually denoted by adverbs and include things like the   speed of the wind, the style of a dance, or the intensity of a sports   competition."')), documentation(manner, string('"(manner ?PROCESS ?MANNER) means that the   Process ?PROCESS is qualified by the Attribute ?MANNER.  The Attributes   of Processes are usually denoted by adverbs and include things like the   speed of the wind, the style of a dance, or the intensity of a sports   competition."')), [], [], 'Merge', 'BASE ONTOLOGY', 989, 'Anonymous', on).
mooCache(instance('AbstractionFn', 'UnaryFunction'), instance('AbstractionFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 991, 'Anonymous', on).
mooCache(domain('AbstractionFn', 1, 'Class'), domain('AbstractionFn', 1, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 993, 'Anonymous', on).
mooCache(range('AbstractionFn', 'Attribute'), range('AbstractionFn', 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 995, 'Anonymous', on).
mooCache(documentation('AbstractionFn', string('"A UnaryFunction that maps a Class into   the instance of Attribute that specifies the condition(s) for membership   in the Class."')), documentation('AbstractionFn', string('"A UnaryFunction that maps a Class into   the instance of Attribute that specifies the condition(s) for membership   in the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 997, 'Anonymous', on).
mooCache(equal('AbstractionFn'(Z6), A7)<=>forall(B7, instance(B7, Z6)<=>attribute(B7, A7)), (entails(((not instance(B7, Z6)and instance(B7, Z6)or not instance(B7, Z6))and (instance(B7, Z6)or not instance(B7, Z6)and instance(B7, Z6)))and'$existential'(B7, '?INST', not (instance('?INST', Z6)<=>attribute('?INST', A7))), not attribute(B7, A7))and entails(((not attribute(B7, A7)and attribute(B7, A7)or not attribute(B7, A7))and (attribute(B7, A7)and not attribute(B7, A7)or attribute(B7, A7)))and'$existential'(B7, '?INST', not (instance('?INST', Z6)<=>attribute('?INST', A7))), not instance(B7, Z6))and entails((not attribute(B7, A7)and attribute(B7, A7)or attribute(B7, A7))and (attribute(B7, A7)and not attribute(B7, A7)or not attribute(B7, A7)), instance(B7, Z6))and entails((instance(B7, Z6)or not instance(B7, Z6)and instance(B7, Z6))and (not instance(B7, Z6)and instance(B7, Z6)or not instance(B7, Z6)), attribute(B7, A7)))and (entails((instance(B7, Z6)or not instance(B7, Z6)and instance(B7, Z6))and holds('AbstractionFn', Z6, A7), attribute(B7, A7))and entails(((not attribute(B7, A7)and attribute(B7, A7)or not attribute(B7, A7))and holds('AbstractionFn', Z6, A7))and'$existential'(B7, '?INST', not (instance('?INST', Z6)<=>attribute('?INST', A7))), not instance(B7, Z6))and entails((not attribute(B7, A7)and attribute(B7, A7)or attribute(B7, A7))and holds('AbstractionFn', Z6, A7), instance(B7, Z6))and entails(((not instance(B7, Z6)and instance(B7, Z6)or not instance(B7, Z6))and holds('AbstractionFn', Z6, A7))and'$existential'(B7, '?INST', not (instance('?INST', Z6)<=>attribute('?INST', A7))), not attribute(B7, A7))and entails(not attribute(B7, A7)and attribute(B7, A7)or not attribute(B7, A7)and instance(B7, Z6)or not instance(B7, Z6)and instance(B7, Z6)or not instance(B7, Z6)and attribute(B7, A7), not holds('AbstractionFn', Z6, A7)))and entails(attribute(B7, A7)and not attribute(B7, A7)or attribute(B7, A7)and instance(B7, Z6)or not instance(B7, Z6)and instance(B7, Z6)or not instance(B7, Z6)and not attribute(B7, A7), holds('AbstractionFn', Z6, A7))and entails((not holds('AbstractionFn', Z6, A7)and (instance(B7, Z6)or not instance(B7, Z6)and instance(B7, Z6)))and'$existential'(B7, '?INST', not (instance('?INST', Z6)<=>attribute('?INST', A7))), not attribute(B7, A7))and entails((not holds('AbstractionFn', Z6, A7)and (attribute(B7, A7)and not attribute(B7, A7)or attribute(B7, A7)))and'$existential'(B7, '?INST', not (instance('?INST', Z6)<=>attribute('?INST', A7))), not instance(B7, Z6))and entails(not holds('AbstractionFn', Z6, A7)and (attribute(B7, A7)and not attribute(B7, A7)or not attribute(B7, A7)), instance(B7, Z6))and entails(not holds('AbstractionFn', Z6, A7)and (not instance(B7, Z6)and instance(B7, Z6)or not instance(B7, Z6)), attribute(B7, A7)), [domainV(B7, [attribute:1]), domainV(A7, ['AbstractionFn':2, attribute:2]), domainV(Z6, ['AbstractionFn':1, instance:2]), domainV(_G9765, []), forall(Z6), forall(A7), forall(B7), replaceConsVar(B7, '$existential'('?INST', not (instance('?INST', Z6)<=>attribute('?INST', A7))))], ['CLASS'=Z6, 'ATTR'=A7, 'INST'=B7], 'Merge', 'BASE ONTOLOGY', 999, 'Anonymous', on).
mooCache(instance('ExtensionFn', 'UnaryFunction'), instance('ExtensionFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1001, 'Anonymous', on).
mooCache(domain('ExtensionFn', 1, 'Attribute'), domain('ExtensionFn', 1, 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 1003, 'Anonymous', on).
mooCache(range('ExtensionFn', 'Class'), range('ExtensionFn', 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1005, 'Anonymous', on).
mooCache(documentation('ExtensionFn', string('"A UnaryFunction that maps an Attribute   into the Class whose condition for membership is the Attribute."')), documentation('ExtensionFn', string('"A UnaryFunction that maps an Attribute   into the Class whose condition for membership is the Attribute."')), [], [], 'Merge', 'BASE ONTOLOGY', 1007, 'Anonymous', on).
mooCache(equal('ExtensionFn'(V23), W23)<=>equal('AbstractionFn'(W23), V23), (entails(holds('ExtensionFn', V23, W23), holds('AbstractionFn', W23, V23))and entails(not holds('AbstractionFn', W23, V23), not holds('ExtensionFn', V23, W23)))and entails(holds('AbstractionFn', W23, V23), holds('ExtensionFn', V23, W23))and entails(not holds('ExtensionFn', V23, W23), not holds('AbstractionFn', W23, V23)), [domainV(W23, ['AbstractionFn':1, 'ExtensionFn':2]), domainV(V23, ['AbstractionFn':2, 'ExtensionFn':1]), domainV(_G5558, []), forall(V23), forall(W23)], ['ATTRIBUTE'=V23, 'CLASS'=W23], 'Merge', 'BASE ONTOLOGY', 1009, 'Anonymous', on).
mooCache(subclass('TruthValue', 'Attribute'), subclass('TruthValue', 'Attribute'), [], [], 'Merge', 'BASE ONTOLOGY', 1011, 'Anonymous', on).
mooCache(documentation('TruthValue', string('"The Class of truth values, e.g. True and   False.  These are Attributes of Sentences."')), documentation('TruthValue', string('"The Class of truth values, e.g. True and   False.  These are Attributes of Sentences."')), [], [], 'Merge', 'BASE ONTOLOGY', 1013, 'Anonymous', on).
mooCache(instance('True', 'TruthValue'), instance('True', 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1015, 'Anonymous', on).
mooCache(documentation('True', string('"The TruthValue of being true."')), documentation('True', string('"The TruthValue of being true."')), [], [], 'Merge', 'BASE ONTOLOGY', 1017, 'Anonymous', on).
mooCache(instance('False', 'TruthValue'), instance('False', 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1019, 'Anonymous', on).
mooCache(contraryProperty('False', 'True'), contraryProperty('False', 'True'), [], [], 'Merge', 'BASE ONTOLOGY', 1021, 'Anonymous', on).
mooCache(documentation('False', string('"The TruthValue of being false."')), documentation('False', string('"The TruthValue of being false."')), [], [], 'Merge', 'BASE ONTOLOGY', 1023, 'Anonymous', on).
mooCache(instance('TruthFn', 'UnaryFunction'), instance('TruthFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1025, 'Anonymous', on).
mooCache(domain('TruthFn', 1, 'Sentence'), domain('TruthFn', 1, 'Sentence'), [], [], 'Merge', 'BASE ONTOLOGY', 1027, 'Anonymous', on).
mooCache(domain('TruthFn', 2, 'TruthValue'), domain('TruthFn', 2, 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1029, 'Anonymous', on).
mooCache(documentation('TruthFn', string('"The function mapping Sentences to   TruthValues."')), documentation('TruthFn', string('"The function mapping Sentences to   TruthValues."')), [], [], 'Merge', 'BASE ONTOLOGY', 1031, 'Anonymous', on).
mooCache(subrelation(true, attribute), subrelation(true, attribute), [], [], 'Merge', 'BASE ONTOLOGY', 1033, 'Anonymous', on).
mooCache(relatedInternalConcept(true, 'TruthFn'), relatedInternalConcept(true, 'TruthFn'), [], [], 'Merge', 'BASE ONTOLOGY', 1035, 'Anonymous', on).
mooCache(domain(true, 1, 'Sentence'), domain(true, 1, 'Sentence'), [], [], 'Merge', 'BASE ONTOLOGY', 1037, 'Anonymous', on).
mooCache(domain(true, 2, 'TruthValue'), domain(true, 2, 'TruthValue'), [], [], 'Merge', 'BASE ONTOLOGY', 1039, 'Anonymous', on).
mooCache(documentation(true, string('"The BinaryPredicate that relates a Sentence   to its TruthValue."')), documentation(true, string('"The BinaryPredicate that relates a Sentence   to its TruthValue."')), [], [], 'Merge', 'BASE ONTOLOGY', 1041, 'Anonymous', on).
mooCache(subclass('Number', 'Quantity'), subclass('Number', 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1047, 'Anonymous', on).
mooCache(documentation('Number', string('"A measure of how many things there are, or how  much there is, of a certain kind.  Numbers are subclassed into   RealNumber and ComplexNumber (ImaginaryNumber is an instance of   Number)."')), documentation('Number', string('"A measure of how many things there are, or how  much there is, of a certain kind.  Numbers are subclassed into   RealNumber and ComplexNumber (ImaginaryNumber is an instance of   Number)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1049, 'Anonymous', on).
mooCache(instance(lessThan, 'BinaryPredicate'), instance(lessThan, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1051, 'Anonymous', on).
mooCache(instance(lessThan, 'TransitiveRelation'), instance(lessThan, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1053, 'Anonymous', on).
mooCache(instance(lessThan, 'IrreflexiveRelation'), instance(lessThan, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1055, 'Anonymous', on).
mooCache(instance(lessThan, 'RelationExtendedToQuantities'), instance(lessThan, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1057, 'Anonymous', on).
mooCache(trichotomizingOn(lessThan, 'RealNumber'), trichotomizingOn(lessThan, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1059, 'Anonymous', on).
mooCache(domain(lessThan, 1, 'Quantity'), domain(lessThan, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1061, 'Anonymous', on).
mooCache(domain(lessThan, 2, 'Quantity'), domain(lessThan, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1063, 'Anonymous', on).
mooCache(documentation(lessThan, string('"(lessThan ?NUMBER1 ?NUMBER2) is true just   in case the Quantity ?NUMBER1 is less than the Quantity ?NUMBER2."')), documentation(lessThan, string('"(lessThan ?NUMBER1 ?NUMBER2) is true just   in case the Quantity ?NUMBER1 is less than the Quantity ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1065, 'Anonymous', on).
mooCache(instance(greaterThan, 'BinaryPredicate'), instance(greaterThan, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1067, 'Anonymous', on).
mooCache(instance(greaterThan, 'TransitiveRelation'), instance(greaterThan, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1069, 'Anonymous', on).
mooCache(instance(greaterThan, 'IrreflexiveRelation'), instance(greaterThan, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1071, 'Anonymous', on).
mooCache(instance(greaterThan, 'RelationExtendedToQuantities'), instance(greaterThan, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1073, 'Anonymous', on).
mooCache(trichotomizingOn(greaterThan, 'RealNumber'), trichotomizingOn(greaterThan, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1075, 'Anonymous', on).
mooCache(domain(greaterThan, 1, 'Quantity'), domain(greaterThan, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1077, 'Anonymous', on).
mooCache(domain(greaterThan, 2, 'Quantity'), domain(greaterThan, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1079, 'Anonymous', on).
mooCache(inverse(greaterThan, lessThan), inverse(greaterThan, lessThan), [], [], 'Merge', 'BASE ONTOLOGY', 1081, 'Anonymous', on).
mooCache(documentation(greaterThan, string('"(greaterThan ?NUMBER1 ?NUMBER2) is true   just in case the Quantity ?NUMBER1 is greater than the Quantity   ?NUMBER2."')), documentation(greaterThan, string('"(greaterThan ?NUMBER1 ?NUMBER2) is true   just in case the Quantity ?NUMBER1 is greater than the Quantity   ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1083, 'Anonymous', on).
mooCache(instance(lessThanOrEqualTo, 'BinaryPredicate'), instance(lessThanOrEqualTo, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1085, 'Anonymous', on).
mooCache(instance(lessThanOrEqualTo, 'PartialOrderingRelation'), instance(lessThanOrEqualTo, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1087, 'Anonymous', on).
mooCache(instance(lessThanOrEqualTo, 'RelationExtendedToQuantities'), instance(lessThanOrEqualTo, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1089, 'Anonymous', on).
mooCache(trichotomizingOn(lessThanOrEqualTo, 'RealNumber'), trichotomizingOn(lessThanOrEqualTo, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1091, 'Anonymous', on).
mooCache(domain(lessThanOrEqualTo, 1, 'Quantity'), domain(lessThanOrEqualTo, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1093, 'Anonymous', on).
mooCache(domain(lessThanOrEqualTo, 2, 'Quantity'), domain(lessThanOrEqualTo, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1095, 'Anonymous', on).
mooCache(documentation(lessThanOrEqualTo, string('"(lessThanOrEqualTo ?NUMBER1 ?NUMBER2)   is true just in case the Quantity ?NUMBER1 is less than or equal to   the Quantity ?NUMBER2."')), documentation(lessThanOrEqualTo, string('"(lessThanOrEqualTo ?NUMBER1 ?NUMBER2)   is true just in case the Quantity ?NUMBER1 is less than or equal to   the Quantity ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1097, 'Anonymous', on).
mooCache(lessThanOrEqualTo(L3, M3)<=>equal(L3, M3)or lessThan(L3, M3), (entails(not lessThanOrEqualTo(L3, M3), not equal(L3, M3))and entails(not lessThanOrEqualTo(L3, M3), not lessThan(L3, M3))and entails(equal(L3, M3)or lessThan(L3, M3), lessThanOrEqualTo(L3, M3)))and entails(not equal(L3, M3)and not lessThan(L3, M3), not lessThanOrEqualTo(L3, M3))and entails(lessThanOrEqualTo(L3, M3)and not lessThan(L3, M3), equal(L3, M3))and entails(lessThanOrEqualTo(L3, M3)and not equal(L3, M3), lessThan(L3, M3)), [domainV(M3, [lessThan:2, lessThanOrEqualTo:2]), domainV(L3, [lessThan:1, lessThanOrEqualTo:1]), domainV(_G6662, []), forall(L3), forall(M3)], ['NUMBER1'=L3, 'NUMBER2'=M3], 'Merge', 'BASE ONTOLOGY', 1099, 'Anonymous', on).
mooCache(instance(greaterThanOrEqualTo, 'BinaryPredicate'), instance(greaterThanOrEqualTo, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1101, 'Anonymous', on).
mooCache(instance(greaterThanOrEqualTo, 'PartialOrderingRelation'), instance(greaterThanOrEqualTo, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1103, 'Anonymous', on).
mooCache(instance(greaterThanOrEqualTo, 'RelationExtendedToQuantities'), instance(greaterThanOrEqualTo, 'RelationExtendedToQuantities'), [], [], 'Merge', 'BASE ONTOLOGY', 1105, 'Anonymous', on).
mooCache(trichotomizingOn(greaterThanOrEqualTo, 'RealNumber'), trichotomizingOn(greaterThanOrEqualTo, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1107, 'Anonymous', on).
mooCache(domain(greaterThanOrEqualTo, 1, 'Quantity'), domain(greaterThanOrEqualTo, 1, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1109, 'Anonymous', on).
mooCache(domain(greaterThanOrEqualTo, 2, 'Quantity'), domain(greaterThanOrEqualTo, 2, 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1111, 'Anonymous', on).
mooCache(inverse(greaterThanOrEqualTo, lessThanOrEqualTo), inverse(greaterThanOrEqualTo, lessThanOrEqualTo), [], [], 'Merge', 'BASE ONTOLOGY', 1113, 'Anonymous', on).
mooCache(documentation(greaterThanOrEqualTo, string('"(greaterThanOrEqualTo ?NUMBER1   ?NUMBER2) is true just in case the Quantity ?NUMBER1 is greater   than the Quantity ?NUMBER2."')), documentation(greaterThanOrEqualTo, string('"(greaterThanOrEqualTo ?NUMBER1   ?NUMBER2) is true just in case the Quantity ?NUMBER1 is greater   than the Quantity ?NUMBER2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1115, 'Anonymous', on).
mooCache(greaterThanOrEqualTo(S30, T30)<=>equal(S30, T30)or greaterThan(S30, T30), (entails(not greaterThanOrEqualTo(S30, T30), not equal(S30, T30))and entails(not greaterThanOrEqualTo(S30, T30), not greaterThan(S30, T30))and entails(equal(S30, T30)or greaterThan(S30, T30), greaterThanOrEqualTo(S30, T30)))and entails(not equal(S30, T30)and not greaterThan(S30, T30), not greaterThanOrEqualTo(S30, T30))and entails(greaterThanOrEqualTo(S30, T30)and not greaterThan(S30, T30), equal(S30, T30))and entails(greaterThanOrEqualTo(S30, T30)and not equal(S30, T30), greaterThan(S30, T30)), [domainV(T30, [greaterThan:2, greaterThanOrEqualTo:2]), domainV(S30, [greaterThan:1, greaterThanOrEqualTo:1]), domainV(_G6698, []), forall(S30), forall(T30)], ['NUMBER1'=S30, 'NUMBER2'=T30], 'Merge', 'BASE ONTOLOGY', 1117, 'Anonymous', on).
mooCache(subclass('RealNumber', 'Number'), subclass('RealNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1119, 'Anonymous', on).
mooCache(partition('RealNumber', 'NegativeRealNumber', 'NonnegativeRealNumber'), partition('RealNumber', 'NegativeRealNumber', 'NonnegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1121, 'Anonymous', on).
mooCache(documentation('RealNumber', string('"Any Number that can be expressed as a   (possibly infinite) decimal, i.e. any Number that has a position   on the number line."')), documentation('RealNumber', string('"Any Number that can be expressed as a   (possibly infinite) decimal, i.e. any Number that has a position   on the number line."')), [], [], 'Merge', 'BASE ONTOLOGY', 1123, 'Anonymous', on).
mooCache(subclass('ImaginaryNumber', 'Number'), subclass('ImaginaryNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1125, 'Anonymous', on).
mooCache(documentation('ImaginaryNumber', string('"A subclass of Number containing a   single instance, viz. the square root of -1."')), documentation('ImaginaryNumber', string('"A subclass of Number containing a   single instance, viz. the square root of -1."')), [], [], 'Merge', 'BASE ONTOLOGY', 1127, 'Anonymous', on).
mooCache(subclass('RationalNumber', 'RealNumber'), subclass('RationalNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1129, 'Anonymous', on).
mooCache(documentation('RationalNumber', string('"Any RealNumber that is the product of   dividing two Integers."')), documentation('RationalNumber', string('"Any RealNumber that is the product of   dividing two Integers."')), [], [], 'Merge', 'BASE ONTOLOGY', 1131, 'Anonymous', on).
mooCache(subclass('NonnegativeRealNumber', 'RealNumber'), subclass('NonnegativeRealNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1133, 'Anonymous', on).
mooCache(documentation('NonnegativeRealNumber', string('"A RealNumber that is greater than   or equal to zero."')), documentation('NonnegativeRealNumber', string('"A RealNumber that is greater than   or equal to zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1135, 'Anonymous', on).
mooCache(instance(P22, 'NonnegativeRealNumber')=>greaterThanOrEqualTo(P22, 0), entails(not greaterThanOrEqualTo(P22, 0), not instance(P22, 'NonnegativeRealNumber'))and entails(instance(P22, 'NonnegativeRealNumber'), greaterThanOrEqualTo(P22, 0)), [domainV(P22, ['$instanceof':'NonnegativeRealNumber', greaterThanOrEqualTo:1]), domainV(_G3949, []), forall(P22)], ['NUMBER'=P22], 'Merge', 'BASE ONTOLOGY', 1137, 'Anonymous', on).
mooCache(subclass('PositiveRealNumber', 'NonnegativeRealNumber'), subclass('PositiveRealNumber', 'NonnegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1139, 'Anonymous', on).
mooCache(documentation('PositiveRealNumber', string('"A RealNumber that is greater than   zero."')), documentation('PositiveRealNumber', string('"A RealNumber that is greater than   zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1141, 'Anonymous', on).
mooCache(instance(Q31, 'PositiveRealNumber')=>greaterThan(Q31, 0), entails(not greaterThan(Q31, 0), not instance(Q31, 'PositiveRealNumber'))and entails(instance(Q31, 'PositiveRealNumber'), greaterThan(Q31, 0)), [domainV(Q31, ['$instanceof':'PositiveRealNumber', greaterThan:1]), domainV(_G3877, []), forall(Q31)], ['NUMBER'=Q31], 'Merge', 'BASE ONTOLOGY', 1143, 'Anonymous', on).
mooCache(subclass('NegativeRealNumber', 'RealNumber'), subclass('NegativeRealNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1145, 'Anonymous', on).
mooCache(documentation('NegativeRealNumber', string('"A RealNumber that is less than   zero."')), documentation('NegativeRealNumber', string('"A RealNumber that is less than   zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1147, 'Anonymous', on).
mooCache(instance(F2, 'NegativeRealNumber')=>lessThan(F2, 0), entails(not lessThan(F2, 0), not instance(F2, 'NegativeRealNumber'))and entails(instance(F2, 'NegativeRealNumber'), lessThan(F2, 0)), [domainV(F2, ['$instanceof':'NegativeRealNumber', lessThan:1]), domainV(_G3859, []), forall(F2)], ['NUMBER'=F2], 'Merge', 'BASE ONTOLOGY', 1149, 'Anonymous', on).
mooCache(subclass('Integer', 'RationalNumber'), subclass('Integer', 'RationalNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1151, 'Anonymous', on).
mooCache(partition('Integer', 'OddInteger', 'EvenInteger'), partition('Integer', 'OddInteger', 'EvenInteger'), [], [], 'Merge', 'BASE ONTOLOGY', 1153, 'Anonymous', on).
mooCache(partition('Integer', 'NegativeInteger', 'NonnegativeInteger'), partition('Integer', 'NegativeInteger', 'NonnegativeInteger'), [], [], 'Merge', 'BASE ONTOLOGY', 1155, 'Anonymous', on).
mooCache(documentation('Integer', string('"A negative or nonnegative whole number."')), documentation('Integer', string('"A negative or nonnegative whole number."')), [], [], 'Merge', 'BASE ONTOLOGY', 1157, 'Anonymous', on).
mooCache(subclass('EvenInteger', 'Integer'), subclass('EvenInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1159, 'Anonymous', on).
mooCache(documentation('EvenInteger', string('"An Integer that is evenly divisible   by 2."')), documentation('EvenInteger', string('"An Integer that is evenly divisible   by 2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1161, 'Anonymous', on).
mooCache(subclass('OddInteger', 'Integer'), subclass('OddInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1163, 'Anonymous', on).
mooCache(documentation('OddInteger', string('"An Integer that is not evenly divisible   by 2."')), documentation('OddInteger', string('"An Integer that is not evenly divisible   by 2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1165, 'Anonymous', on).
mooCache(subclass('PrimeNumber', 'Integer'), subclass('PrimeNumber', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1167, 'Anonymous', on).
mooCache(documentation('PrimeNumber', string('"An Integer that is evenly divisible only   by itself and 1."')), documentation('PrimeNumber', string('"An Integer that is evenly divisible only   by itself and 1."')), [], [], 'Merge', 'BASE ONTOLOGY', 1169, 'Anonymous', on).
mooCache(subclass('NonnegativeInteger', 'Integer'), subclass('NonnegativeInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1171, 'Anonymous', on).
mooCache(subclass('NonnegativeInteger', 'NonnegativeRealNumber'), subclass('NonnegativeInteger', 'NonnegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1173, 'Anonymous', on).
mooCache(documentation('NonnegativeInteger', string('"An Integer that is greater than   or equal to zero."')), documentation('NonnegativeInteger', string('"An Integer that is greater than   or equal to zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1175, 'Anonymous', on).
mooCache(subclass('NegativeInteger', 'Integer'), subclass('NegativeInteger', 'Integer'), [], [], 'Merge', 'BASE ONTOLOGY', 1177, 'Anonymous', on).
mooCache(subclass('NegativeInteger', 'NegativeRealNumber'), subclass('NegativeInteger', 'NegativeRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1179, 'Anonymous', on).
mooCache(documentation('NegativeInteger', string('"An Integer that is less than zero."')), documentation('NegativeInteger', string('"An Integer that is less than zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1181, 'Anonymous', on).
mooCache(subclass('PositiveInteger', 'NonnegativeInteger'), subclass('PositiveInteger', 'NonnegativeInteger'), [], [], 'Merge', 'BASE ONTOLOGY', 1183, 'Anonymous', on).
mooCache(subclass('PositiveInteger', 'PositiveRealNumber'), subclass('PositiveInteger', 'PositiveRealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1185, 'Anonymous', on).
mooCache(documentation('PositiveInteger', string('"An Integer that is greater than zero."')), documentation('PositiveInteger', string('"An Integer that is greater than zero."')), [], [], 'Merge', 'BASE ONTOLOGY', 1187, 'Anonymous', on).
mooCache(subclass('BinaryNumber', 'RealNumber'), subclass('BinaryNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1189, 'Anonymous', on).
mooCache(documentation('BinaryNumber', string('"Elements from the number system with base 2.    Every BinaryNumber is expressed as a sequence of the digits 1 and 0."')), documentation('BinaryNumber', string('"Elements from the number system with base 2.    Every BinaryNumber is expressed as a sequence of the digits 1 and 0."')), [], [], 'Merge', 'BASE ONTOLOGY', 1191, 'Anonymous', on).
mooCache(subclass('ComplexNumber', 'Number'), subclass('ComplexNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1193, 'Anonymous', on).
mooCache(disjoint('ComplexNumber', 'RealNumber'), disjoint('ComplexNumber', 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1195, 'Anonymous', on).
mooCache(documentation('ComplexNumber', string('"A Number that consists of two components:    a RealNumber and the ImaginaryNumber."')), documentation('ComplexNumber', string('"A Number that consists of two components:    a RealNumber and the ImaginaryNumber."')), [], [], 'Merge', 'BASE ONTOLOGY', 1197, 'Anonymous', on).
mooCache(subclass('NonspecificNumber', 'Number'), subclass('NonspecificNumber', 'Number'), [], [], 'Merge', 'BASE ONTOLOGY', 1199, 'Anonymous', on).
mooCache(documentation('NonspecificNumber', string('"A NonspecificNumber is used to indicate   quantity of items when one cannot or does not want to say exactly how many   items there are."')), documentation('NonspecificNumber', string('"A NonspecificNumber is used to indicate   quantity of items when one cannot or does not want to say exactly how many   items there are."')), [], [], 'Merge', 'BASE ONTOLOGY', 1201, 'Anonymous', on).
mooCache(instance('Few', 'NonspecificNumber'), instance('Few', 'NonspecificNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1203, 'Anonymous', on).
mooCache(documentation('Few', string('"Useful for contextual assessment of number.  Note that   a formula containing this Class cannot be converted into a precise numeric   range.  For example, compare \'few books on the table\' (perhaps there are   three books) and \'few eritrocytes in your blood\' (this might mean there are   3 million per part)."')), documentation('Few', string('"Useful for contextual assessment of number.  Note that   a formula containing this Class cannot be converted into a precise numeric   range.  For example, compare \'few books on the table\' (perhaps there are   three books) and \'few eritrocytes in your blood\' (this might mean there are   3 million per part)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1205, 'Anonymous', on).
mooCache(instance('Many', 'NonspecificNumber'), instance('Many', 'NonspecificNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1207, 'Anonymous', on).
mooCache(documentation('Many', string('"Useful for contextual assessment of number.  Note that   this cannot be converted into a precise numeric range.  For example, compare   \'many books on the table\' (perhaps there are twelve books) and \'many   eritrocytes in your blood\' (this might mean there are 8 million per part)."')), documentation('Many', string('"Useful for contextual assessment of number.  Note that   this cannot be converted into a precise numeric range.  For example, compare   \'many books on the table\' (perhaps there are twelve books) and \'many   eritrocytes in your blood\' (this might mean there are 8 million per part)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1209, 'Anonymous', on).
mooCache(subclass('PhysicalQuantity', 'Quantity'), subclass('PhysicalQuantity', 'Quantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1211, 'Anonymous', on).
mooCache(partition('PhysicalQuantity', 'ConstantQuantity', 'FunctionQuantity'), partition('PhysicalQuantity', 'ConstantQuantity', 'FunctionQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1213, 'Anonymous', on).
mooCache(documentation('PhysicalQuantity', string('"A PhysicalQuantity is a measure of   some quantifiable aspect of the modeled world, such as \'the earth\'s   diameter\' (a constant length) and \'the stress in a loaded deformable   solid\' (a measure of stress, which is a function of three spatial   coordinates).  All PhysicalQuantities are either ConstantQuantities   or FunctionQuantities.  Instances of ConstantQuantity are dependent   on a UnitOfMeasure, while instances of FunctionQuantity are   Functions that map instances of ConstantQuantity to other instances   of ConstantQuantity (e.g., TimeDependentQuantities are   FunctionQuantities).  Although the name and definition of   PhysicalQuantity is borrowed from physics, PhysicalQuantities need   not be material.  Aside from the dimensions of length, time, velocity,   etc., nonphysical dimensions such as currency are also possible.    Accordingly, amounts of money would be instances of PhysicalQuantity.    PhysicalQuantities are distinguished from Numbers by the fact that   the former are associated with a dimension of measurement."')), documentation('PhysicalQuantity', string('"A PhysicalQuantity is a measure of   some quantifiable aspect of the modeled world, such as \'the earth\'s   diameter\' (a constant length) and \'the stress in a loaded deformable   solid\' (a measure of stress, which is a function of three spatial   coordinates).  All PhysicalQuantities are either ConstantQuantities   or FunctionQuantities.  Instances of ConstantQuantity are dependent   on a UnitOfMeasure, while instances of FunctionQuantity are   Functions that map instances of ConstantQuantity to other instances   of ConstantQuantity (e.g., TimeDependentQuantities are   FunctionQuantities).  Although the name and definition of   PhysicalQuantity is borrowed from physics, PhysicalQuantities need   not be material.  Aside from the dimensions of length, time, velocity,   etc., nonphysical dimensions such as currency are also possible.    Accordingly, amounts of money would be instances of PhysicalQuantity.    PhysicalQuantities are distinguished from Numbers by the fact that   the former are associated with a dimension of measurement."')), [], [], 'Merge', 'BASE ONTOLOGY', 1215, 'Anonymous', on).
mooCache(subclass('ConstantQuantity', 'PhysicalQuantity'), subclass('ConstantQuantity', 'PhysicalQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1217, 'Anonymous', on).
mooCache(documentation('ConstantQuantity', string('"A ConstantQuantity is a   PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.    The magnitude (see MagnitudeFn) of every ConstantQuantity is a   RealNumber.  ConstantQuantities are distinguished from   FunctionQuantities, which map ConstantQuantities to other   ConstantQuantities.  All ConstantQuantites are expressed with the   BinaryFunction MeasureFn, which takes a Number and a UnitOfMeasure   as arguments.  For example, 3 Meters can be expressed as (MeasureFn 3   Meter).  ConstantQuantities form a partial order (see   PartialOrderingRelation) with the lessThan relation, since lessThan   is a RelationExtendedToQuantities and lessThan is defined over the   RealNumbers.  The lessThan relation is not a total order (see   TotalOrderingRelation) over the class ConstantQuantity since elements   of some subclasses of ConstantQuantity (such as length quantities)   are incomparable to elements of other subclasses of ConstantQuantity   (such as mass quantities)."')), documentation('ConstantQuantity', string('"A ConstantQuantity is a   PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.    The magnitude (see MagnitudeFn) of every ConstantQuantity is a   RealNumber.  ConstantQuantities are distinguished from   FunctionQuantities, which map ConstantQuantities to other   ConstantQuantities.  All ConstantQuantites are expressed with the   BinaryFunction MeasureFn, which takes a Number and a UnitOfMeasure   as arguments.  For example, 3 Meters can be expressed as (MeasureFn 3   Meter).  ConstantQuantities form a partial order (see   PartialOrderingRelation) with the lessThan relation, since lessThan   is a RelationExtendedToQuantities and lessThan is defined over the   RealNumbers.  The lessThan relation is not a total order (see   TotalOrderingRelation) over the class ConstantQuantity since elements   of some subclasses of ConstantQuantity (such as length quantities)   are incomparable to elements of other subclasses of ConstantQuantity   (such as mass quantities)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1219, 'Anonymous', on).
mooCache(subclass('TimeMeasure', 'ConstantQuantity'), subclass('TimeMeasure', 'ConstantQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1221, 'Anonymous', on).
mooCache(documentation('TimeMeasure', string('"The class of temporal durations (instances   of TimeDuration) and positions of TimePoints and TimeIntervals along   the universal timeline (instances of TimePosition)."')), documentation('TimeMeasure', string('"The class of temporal durations (instances   of TimeDuration) and positions of TimePoints and TimeIntervals along   the universal timeline (instances of TimePosition)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1223, 'Anonymous', on).
mooCache(subclass('TimeDuration', 'TimeMeasure'), subclass('TimeDuration', 'TimeMeasure'), [], [], 'Merge', 'BASE ONTOLOGY', 1225, 'Anonymous', on).
mooCache(documentation('TimeDuration', string('"Any measure of length of time,   with or without respect to the universal timeline."')), documentation('TimeDuration', string('"Any measure of length of time,   with or without respect to the universal timeline."')), [], [], 'Merge', 'BASE ONTOLOGY', 1227, 'Anonymous', on).
mooCache(subclass('TimePosition', 'TimeMeasure'), subclass('TimePosition', 'TimeMeasure'), [], [], 'Merge', 'BASE ONTOLOGY', 1229, 'Anonymous', on).
mooCache(partition('TimePosition', 'TimeInterval', 'TimePoint'), partition('TimePosition', 'TimeInterval', 'TimePoint'), [], [], 'Merge', 'BASE ONTOLOGY', 1231, 'Anonymous', on).
mooCache(documentation('TimePosition', string('"Any TimePoint or TimeInterval   along the universal timeline from NegativeInfinity to   PositiveInfinity."')), documentation('TimePosition', string('"Any TimePoint or TimeInterval   along the universal timeline from NegativeInfinity to   PositiveInfinity."')), [], [], 'Merge', 'BASE ONTOLOGY', 1233, 'Anonymous', on).
mooCache(subclass('TimeInterval', 'TimePosition'), subclass('TimeInterval', 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1235, 'Anonymous', on).
mooCache(documentation('TimeInterval', string('"An interval of time.  Note that a   TimeInterval has both an extent and a location on the universal   timeline."')), documentation('TimeInterval', string('"An interval of time.  Note that a   TimeInterval has both an extent and a location on the universal   timeline."')), [], [], 'Merge', 'BASE ONTOLOGY', 1237, 'Anonymous', on).
mooCache(subclass('TimePoint', 'TimePosition'), subclass('TimePoint', 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1239, 'Anonymous', on).
mooCache(documentation('TimePoint', string('"An extensionless point on the universal timeline.   The TimePoints at which Processes occur can be known with various   degrees of precision and approximation, but conceptually TimePoints are   point-like and not interval-like.  That is, it doesn\'t make sense to talk   about what happens during a TimePoint, or how long the TimePoint lasts."')), documentation('TimePoint', string('"An extensionless point on the universal timeline.   The TimePoints at which Processes occur can be known with various   degrees of precision and approximation, but conceptually TimePoints are   point-like and not interval-like.  That is, it doesn\'t make sense to talk   about what happens during a TimePoint, or how long the TimePoint lasts."')), [], [], 'Merge', 'BASE ONTOLOGY', 1241, 'Anonymous', on).
mooCache(subclass('FunctionQuantity', 'PhysicalQuantity'), subclass('FunctionQuantity', 'PhysicalQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1243, 'Anonymous', on).
mooCache(subclass('FunctionQuantity', 'Function'), subclass('FunctionQuantity', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1245, 'Anonymous', on).
mooCache(documentation('FunctionQuantity', string('"A FunctionQuantity is a Function that   maps from one or more instances of ConstantQuantity to another instance   of ConstantQuantity.  For example, the velocity of a particle would be   represented by a FunctionQuantity mapping values of time (which are   ConstantQuantities) to values of distance (also ConstantQuantities).    Note that all instances of FunctionQuantity are Functions with a fixed   arity.  Note too that all elements of the range of a FunctionQuantity   have the same physical dimension as the FunctionQuantity itself."')), documentation('FunctionQuantity', string('"A FunctionQuantity is a Function that   maps from one or more instances of ConstantQuantity to another instance   of ConstantQuantity.  For example, the velocity of a particle would be   represented by a FunctionQuantity mapping values of time (which are   ConstantQuantities) to values of distance (also ConstantQuantities).    Note that all instances of FunctionQuantity are Functions with a fixed   arity.  Note too that all elements of the range of a FunctionQuantity   have the same physical dimension as the FunctionQuantity itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 1247, 'Anonymous', on).
mooCache(subclass('UnaryConstantFunctionQuantity', 'FunctionQuantity'), subclass('UnaryConstantFunctionQuantity', 'FunctionQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1249, 'Anonymous', on).
mooCache(subclass('UnaryConstantFunctionQuantity', 'UnaryFunction'), subclass('UnaryConstantFunctionQuantity', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1251, 'Anonymous', on).
mooCache(documentation('UnaryConstantFunctionQuantity', string('"The class of UnaryFunctions   that map from the Class ConstantQuantity to the Class   ConstantQuantity."')), documentation('UnaryConstantFunctionQuantity', string('"The class of UnaryFunctions   that map from the Class ConstantQuantity to the Class   ConstantQuantity."')), [], [], 'Merge', 'BASE ONTOLOGY', 1253, 'Anonymous', on).
mooCache(instance(E10, 'UnaryConstantFunctionQuantity')=>domain(E10, 1, 'ConstantQuantity')and range(E10, 'ConstantQuantity'), (entails(not domain(E10, 1, 'ConstantQuantity'), not instance(E10, 'UnaryConstantFunctionQuantity'))and entails(instance(E10, 'UnaryConstantFunctionQuantity'), domain(E10, 1, 'ConstantQuantity')))and entails(not range(E10, 'ConstantQuantity'), not instance(E10, 'UnaryConstantFunctionQuantity'))and entails(instance(E10, 'UnaryConstantFunctionQuantity'), range(E10, 'ConstantQuantity')), [domainV(E10, ['$instanceof':'UnaryConstantFunctionQuantity', domain:1, range:1]), domainV(_G5494, []), forall(E10)], ['FUNCTION'=E10], 'Merge', 'BASE ONTOLOGY', 1255, 'Anonymous', on).
mooCache(subclass('TimeDependentQuantity', 'UnaryConstantFunctionQuantity'), subclass('TimeDependentQuantity', 'UnaryConstantFunctionQuantity'), [], [], 'Merge', 'BASE ONTOLOGY', 1257, 'Anonymous', on).
mooCache(subclass('TimeDependentQuantity', 'ContinuousFunction'), subclass('TimeDependentQuantity', 'ContinuousFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1259, 'Anonymous', on).
mooCache(documentation('TimeDependentQuantity', string('"A UnaryConstantFunction of continuous   time.  All instances of this Class map a time quantity into another   ConstantQuantity such as temperature.  For example, \'the temperature at   the top of the Empire State Building\' is a TimeDependentQuantity since   its value depends on the time."')), documentation('TimeDependentQuantity', string('"A UnaryConstantFunction of continuous   time.  All instances of this Class map a time quantity into another   ConstantQuantity such as temperature.  For example, \'the temperature at   the top of the Empire State Building\' is a TimeDependentQuantity since   its value depends on the time."')), [], [], 'Merge', 'BASE ONTOLOGY', 1261, 'Anonymous', on).
mooCache(instance(G22, 'TimeDependentQuantity')=>domain(G22, 1, 'TimeMeasure'), entails(not domain(G22, 1, 'TimeMeasure'), not instance(G22, 'TimeDependentQuantity'))and entails(instance(G22, 'TimeDependentQuantity'), domain(G22, 1, 'TimeMeasure')), [domainV(G22, ['$instanceof':'TimeDependentQuantity', domain:1]), domainV(_G4062, []), forall(G22)], ['FUNCTION'=G22], 'Merge', 'BASE ONTOLOGY', 1263, 'Anonymous', on).
mooCache(subclass('Class', 'Abstract'), subclass('Class', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 1265, 'Anonymous', on).
mooCache(documentation('Class', string('"Class generalizes Set.  Classes, like   Sets, are collections of things.  Accordingly, the notion of membership   is generalized as well - a member of a Class is an instance the   Class.  Classes can differ from Sets in two important respects.    First, Classes that are not explicitly identified as Sets are not assumed   to be extensional.  That is, distinct Classes might well have exactly the   same instances.  Second, Classes typically have an associated `condition\'   that determines the instances of the Class.  So, for example, the   condition `human\' determines the Class of Humans.  Note that some   Classes might satisfy their own condition (e.g., the Class of Abstract   things is Abstract) and hence be instances of themselves."')), documentation('Class', string('"Class generalizes Set.  Classes, like   Sets, are collections of things.  Accordingly, the notion of membership   is generalized as well - a member of a Class is an instance the   Class.  Classes can differ from Sets in two important respects.    First, Classes that are not explicitly identified as Sets are not assumed   to be extensional.  That is, distinct Classes might well have exactly the   same instances.  Second, Classes typically have an associated `condition\'   that determines the instances of the Class.  So, for example, the   condition `human\' determines the Class of Humans.  Note that some   Classes might satisfy their own condition (e.g., the Class of Abstract   things is Abstract) and hence be instances of themselves."')), [], [], 'Merge', 'BASE ONTOLOGY', 1267, 'Anonymous', on).
mooCache(subclass('Relation', 'Abstract'), subclass('Relation', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 1269, 'Anonymous', on).
mooCache(documentation('Relation', string('"A relation between the things related."')), documentation('Relation', string('"A relation between the things related."')), [], [], 'Merge', 'BASE ONTOLOGY', 1271, 'Anonymous', on).
mooCache(subclass('BinaryRelation', 'Relation'), subclass('BinaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1281, 'Anonymous', on).
mooCache(instance('BinaryRelation', 'InheritableRelation'), instance('BinaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1283, 'Anonymous', on).
mooCache(documentation('BinaryRelation', string('"BinaryRelations map instances of a   Class to instances of another Class.  BinaryRelations are   represented as slots in frame systems."')), documentation('BinaryRelation', string('"BinaryRelations map instances of a   Class to instances of another Class.  BinaryRelations are   represented as slots in frame systems."')), [], [], 'Merge', 'BASE ONTOLOGY', 1285, 'Anonymous', on).
mooCache(subclass('ReflexiveRelation', 'BinaryRelation'), subclass('ReflexiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1287, 'Anonymous', on).
mooCache(documentation('ReflexiveRelation', string('"Relation ?REL is reflexive if   (?REL ?INST ?INST) for all ?INST."')), documentation('ReflexiveRelation', string('"Relation ?REL is reflexive if   (?REL ?INST ?INST) for all ?INST."')), [], [], 'Merge', 'BASE ONTOLOGY', 1289, 'Anonymous', on).
mooCache(instance(P13, 'ReflexiveRelation')=>forall(Q13, holds(P13, Q13, Q13)), entails(not holds(P13, Q13, Q13), not instance(P13, 'ReflexiveRelation'))and entails(instance(P13, 'ReflexiveRelation'), holds(P13, Q13, Q13)), [domainV(Q13, [P13:1, P13:2]), domainV(P13, ['$instanceof':'ReflexiveRelation', holds:1]), domainV(_G5502, []), forall(P13), forall(Q13)], ['REL'=P13, 'INST'=Q13], 'Merge', 'BASE ONTOLOGY', 1291, 'Anonymous', on).
mooCache(subclass('IrreflexiveRelation', 'BinaryRelation'), subclass('IrreflexiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1293, 'Anonymous', on).
mooCache(documentation('IrreflexiveRelation', string('"Relation ?REL is irreflexive   if (?REL ?INST ?INST) holds for no value of ?INST."')), documentation('IrreflexiveRelation', string('"Relation ?REL is irreflexive   if (?REL ?INST ?INST) holds for no value of ?INST."')), [], [], 'Merge', 'BASE ONTOLOGY', 1295, 'Anonymous', on).
mooCache(instance(T22, 'IrreflexiveRelation')=>forall(U22, not holds(T22, U22, U22)), entails(holds(T22, U22, U22), not instance(T22, 'IrreflexiveRelation'))and entails(instance(T22, 'IrreflexiveRelation'), not holds(T22, U22, U22)), [domainV(U22, [T22:1, T22:2]), domainV(T22, ['$instanceof':'IrreflexiveRelation', holds:1]), domainV(_G5916, []), forall(T22), forall(U22)], ['REL'=T22, 'INST'=U22], 'Merge', 'BASE ONTOLOGY', 1297, 'Anonymous', on).
mooCache(subclass('SymmetricRelation', 'BinaryRelation'), subclass('SymmetricRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1299, 'Anonymous', on).
mooCache(documentation('SymmetricRelation', string('"A BinaryRelation ?REL is  symmetric just in case (?REL ?INST1 ?INST2) imples (?REL   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), documentation('SymmetricRelation', string('"A BinaryRelation ?REL is  symmetric just in case (?REL ?INST1 ?INST2) imples (?REL   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1301, 'Anonymous', on).
mooCache(instance(G32, 'SymmetricRelation')=>forall(H32, forall(I32, holds(G32, I32, H32)=>holds(G32, H32, I32))), entails(holds(G32, I32, H32)and not holds(G32, H32, I32), not instance(G32, 'SymmetricRelation'))and entails(instance(G32, 'SymmetricRelation')and not holds(G32, H32, I32), not holds(G32, I32, H32))and entails(instance(G32, 'SymmetricRelation')and holds(G32, I32, H32), holds(G32, H32, I32)), [domainV(I32, [G32:1, G32:2]), domainV(H32, [G32:1, G32:2]), domainV(G32, ['$instanceof':'SymmetricRelation', holds:1]), domainV(_G8911, []), forall(G32), forall(H32), forall(I32)], ['REL'=G32, 'INST1'=I32, 'INST2'=H32], 'Merge', 'BASE ONTOLOGY', 1303, 'Anonymous', on).
mooCache(subclass('AsymmetricRelation', 'IrreflexiveRelation'), subclass('AsymmetricRelation', 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1305, 'Anonymous', on).
mooCache(subclass('AsymmetricRelation', 'AntisymmetricRelation'), subclass('AsymmetricRelation', 'AntisymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1307, 'Anonymous', on).
mooCache(documentation('AsymmetricRelation', string('"A BinaryRelation is asymmetric only   if it is both an AntisymmetricRelation and an IrreflexiveRelation."')), documentation('AsymmetricRelation', string('"A BinaryRelation is asymmetric only   if it is both an AntisymmetricRelation and an IrreflexiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1309, 'Anonymous', on).
mooCache(subclass('AntisymmetricRelation', 'BinaryRelation'), subclass('AntisymmetricRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1311, 'Anonymous', on).
mooCache(documentation('AntisymmetricRelation', string('"BinaryRelation ?REL is an   AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1   ?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1   and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1   and ?INST2 are identical.  Note that it is possible for an   AntisymmetricRelation to be a ReflexiveRelation."')), documentation('AntisymmetricRelation', string('"BinaryRelation ?REL is an   AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1   ?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1   and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1   and ?INST2 are identical.  Note that it is possible for an   AntisymmetricRelation to be a ReflexiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1313, 'Anonymous', on).
mooCache(instance(C12, 'AntisymmetricRelation')=>forall(D12, forall(E12, holds(C12, E12, D12)and holds(C12, D12, E12)=>equal(E12, D12))), entails(not equal(E12, D12)and holds(C12, E12, D12)and holds(C12, D12, E12), not instance(C12, 'AntisymmetricRelation'))and entails(instance(C12, 'AntisymmetricRelation')and holds(C12, E12, D12)and holds(C12, D12, E12), equal(E12, D12))and entails(instance(C12, 'AntisymmetricRelation')and not equal(E12, D12)and holds(C12, D12, E12), not holds(C12, E12, D12))and entails(instance(C12, 'AntisymmetricRelation')and not equal(E12, D12)and holds(C12, E12, D12), not holds(C12, D12, E12)), [domainV(E12, [C12:1, C12:2]), domainV(D12, [C12:1, C12:2]), domainV(C12, ['$instanceof':'AntisymmetricRelation', holds:1]), domainV(_G10929, []), forall(C12), forall(D12), forall(E12)], ['REL'=C12, 'INST1'=E12, 'INST2'=D12], 'Merge', 'BASE ONTOLOGY', 1315, 'Anonymous', on).
mooCache(subclass('TrichotomizingRelation', 'BinaryRelation'), subclass('TrichotomizingRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1317, 'Anonymous', on).
mooCache(documentation('TrichotomizingRelation', string('"A BinaryRelation ?REL is a   TrichotomizingRelation just in case all ordered pairs consisting of   distinct individuals are elements of ?REL."')), documentation('TrichotomizingRelation', string('"A BinaryRelation ?REL is a   TrichotomizingRelation just in case all ordered pairs consisting of   distinct individuals are elements of ?REL."')), [], [], 'Merge', 'BASE ONTOLOGY', 1319, 'Anonymous', on).
mooCache(instance(V23, 'TrichotomizingRelation')=>forall(W23, forall(X23, holds(V23, X23, W23)or equal(X23, W23)or holds(V23, W23, X23))), entails(not holds(V23, X23, W23)and not equal(X23, W23)and not holds(V23, W23, X23), not instance(V23, 'TrichotomizingRelation'))and entails(instance(V23, 'TrichotomizingRelation')and not equal(X23, W23)and not holds(V23, W23, X23), holds(V23, X23, W23))and entails(instance(V23, 'TrichotomizingRelation')and not holds(V23, X23, W23)and not holds(V23, W23, X23), equal(X23, W23))and entails(instance(V23, 'TrichotomizingRelation')and not holds(V23, X23, W23)and not equal(X23, W23), holds(V23, W23, X23)), [domainV(X23, [V23:1, V23:2]), domainV(W23, [V23:1, V23:2]), domainV(V23, ['$instanceof':'TrichotomizingRelation', holds:1]), domainV(_G10503, []), forall(V23), forall(W23), forall(X23)], ['REL'=V23, 'INST1'=X23, 'INST2'=W23], 'Merge', 'BASE ONTOLOGY', 1321, 'Anonymous', on).
mooCache(subclass('TransitiveRelation', 'BinaryRelation'), subclass('TransitiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1323, 'Anonymous', on).
mooCache(documentation('TransitiveRelation', string('"A BinaryRelation ?REL is transitive   if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3),   for all ?INST1, ?INST2, and ?INST3."')), documentation('TransitiveRelation', string('"A BinaryRelation ?REL is transitive   if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3),   for all ?INST1, ?INST2, and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1325, 'Anonymous', on).
mooCache(instance(M35, 'TransitiveRelation')=>forall(N35, forall(O35, forall(P35, holds(M35, P35, O35)and holds(M35, O35, N35)=>holds(M35, P35, N35)))), entails(not holds(M35, P35, N35)and holds(M35, P35, O35)and holds(M35, O35, N35), not instance(M35, 'TransitiveRelation'))and entails(instance(M35, 'TransitiveRelation')and holds(M35, P35, O35)and holds(M35, O35, N35), holds(M35, P35, N35))and entails(instance(M35, 'TransitiveRelation')and not holds(M35, P35, N35)and holds(M35, O35, N35), not holds(M35, P35, O35))and entails(instance(M35, 'TransitiveRelation')and not holds(M35, P35, N35)and holds(M35, P35, O35), not holds(M35, O35, N35)), [domainV(P35, [M35:1]), domainV(O35, [M35:1, M35:2]), domainV(N35, [M35:2]), domainV(M35, ['$instanceof':'TransitiveRelation', holds:1]), domainV(_G12543, []), forall(M35), forall(N35), forall(O35), forall(P35)], ['REL'=M35, 'INST1'=P35, 'INST2'=O35, 'INST3'=N35], 'Merge', 'BASE ONTOLOGY', 1327, 'Anonymous', on).
mooCache(subclass('IntransitiveRelation', 'BinaryRelation'), subclass('IntransitiveRelation', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1329, 'Anonymous', on).
mooCache(documentation('IntransitiveRelation', string('"A BinaryRelation ?REL is   intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not   (?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3."')), documentation('IntransitiveRelation', string('"A BinaryRelation ?REL is   intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not   (?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1331, 'Anonymous', on).
mooCache(instance(V6, 'IntransitiveRelation')=>forall(W6, forall(X6, forall(Y6, holds(V6, Y6, X6)and holds(V6, X6, W6)=>not holds(V6, Y6, W6)))), entails(holds(V6, Y6, W6)and holds(V6, Y6, X6)and holds(V6, X6, W6), not instance(V6, 'IntransitiveRelation'))and entails(instance(V6, 'IntransitiveRelation')and holds(V6, Y6, X6)and holds(V6, X6, W6), not holds(V6, Y6, W6))and entails(instance(V6, 'IntransitiveRelation')and holds(V6, Y6, W6)and holds(V6, X6, W6), not holds(V6, Y6, X6))and entails(instance(V6, 'IntransitiveRelation')and holds(V6, Y6, W6)and holds(V6, Y6, X6), not holds(V6, X6, W6)), [domainV(Y6, [V6:1]), domainV(X6, [V6:1, V6:2]), domainV(W6, [V6:2]), domainV(V6, ['$instanceof':'IntransitiveRelation', holds:1]), domainV(_G13007, []), forall(V6), forall(W6), forall(X6), forall(Y6)], ['REL'=V6, 'INST1'=Y6, 'INST2'=X6, 'INST3'=W6], 'Merge', 'BASE ONTOLOGY', 1333, 'Anonymous', on).
mooCache(subclass('PartialOrderingRelation', 'TransitiveRelation'), subclass('PartialOrderingRelation', 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1335, 'Anonymous', on).
mooCache(subclass('PartialOrderingRelation', 'AntisymmetricRelation'), subclass('PartialOrderingRelation', 'AntisymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1337, 'Anonymous', on).
mooCache(subclass('PartialOrderingRelation', 'ReflexiveRelation'), subclass('PartialOrderingRelation', 'ReflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1339, 'Anonymous', on).
mooCache(documentation('PartialOrderingRelation', string('"A BinaryRelation is a partial   ordering if it is a ReflexiveRelation, an AntisymmetricRelation, and   a TransitiveRelation."')), documentation('PartialOrderingRelation', string('"A BinaryRelation is a partial   ordering if it is a ReflexiveRelation, an AntisymmetricRelation, and   a TransitiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1341, 'Anonymous', on).
mooCache(subclass('TotalOrderingRelation', 'PartialOrderingRelation'), subclass('TotalOrderingRelation', 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1343, 'Anonymous', on).
mooCache(subclass('TotalOrderingRelation', 'TrichotomizingRelation'), subclass('TotalOrderingRelation', 'TrichotomizingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1345, 'Anonymous', on).
mooCache(documentation('TotalOrderingRelation', string('"A BinaryRelation is a   TotalOrderingRelation if it is a PartialOrderingRelation   and a TrichotomizingRelation."')), documentation('TotalOrderingRelation', string('"A BinaryRelation is a   TotalOrderingRelation if it is a PartialOrderingRelation   and a TrichotomizingRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1347, 'Anonymous', on).
mooCache(instance(V30, 'TotalOrderingRelation')=>forall(W30, forall(X30, holds(V30, X30, W30)or holds(V30, W30, X30))), entails(not holds(V30, X30, W30)and not holds(V30, W30, X30), not instance(V30, 'TotalOrderingRelation'))and entails(instance(V30, 'TotalOrderingRelation')and not holds(V30, W30, X30), holds(V30, X30, W30))and entails(instance(V30, 'TotalOrderingRelation')and not holds(V30, X30, W30), holds(V30, W30, X30)), [domainV(X30, [V30:1, V30:2]), domainV(W30, [V30:1, V30:2]), domainV(V30, ['$instanceof':'TotalOrderingRelation', holds:1]), domainV(_G8817, []), forall(V30), forall(W30), forall(X30)], ['REL'=V30, 'INST1'=X30, 'INST2'=W30], 'Merge', 'BASE ONTOLOGY', 1349, 'Anonymous', on).
mooCache(subclass('EquivalenceRelation', 'TransitiveRelation'), subclass('EquivalenceRelation', 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1351, 'Anonymous', on).
mooCache(subclass('EquivalenceRelation', 'SymmetricRelation'), subclass('EquivalenceRelation', 'SymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1353, 'Anonymous', on).
mooCache(subclass('EquivalenceRelation', 'ReflexiveRelation'), subclass('EquivalenceRelation', 'ReflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1355, 'Anonymous', on).
mooCache(documentation('EquivalenceRelation', string('"A BinaryRelation is an equivalence   relation if it is a ReflexiveRelation, a SymmetricRelation, and a   TransitiveRelation."')), documentation('EquivalenceRelation', string('"A BinaryRelation is an equivalence   relation if it is a ReflexiveRelation, a SymmetricRelation, and a   TransitiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1357, 'Anonymous', on).
mooCache(subclass('CaseRole', 'BinaryPredicate'), subclass('CaseRole', 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1359, 'Anonymous', on).
mooCache(instance('CaseRole', 'InheritableRelation'), instance('CaseRole', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1361, 'Anonymous', on).
mooCache(subclass('CaseRole', 'AsymmetricRelation'), subclass('CaseRole', 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1363, 'Anonymous', on).
mooCache(documentation('CaseRole', string('"The Class of Predicates relating the   spatially distinguished parts of a Process. CaseRoles include, for   example, the agent, patient or destination of an action, the flammable   substance in a burning process, or the water that falls in rain."')), documentation('CaseRole', string('"The Class of Predicates relating the   spatially distinguished parts of a Process. CaseRoles include, for   example, the agent, patient or destination of an action, the flammable   substance in a burning process, or the water that falls in rain."')), [], [], 'Merge', 'BASE ONTOLOGY', 1365, 'Anonymous', on).
mooCache(instance(agent, 'CaseRole'), instance(agent, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1367, 'Anonymous', on).
mooCache(domain(agent, 1, 'Process'), domain(agent, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1369, 'Anonymous', on).
mooCache(domain(agent, 2, 'Agent'), domain(agent, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1371, 'Anonymous', on).
mooCache(documentation(agent, string('"(agent ?PROCESS ?AGENT) means that ?AGENT is   an active determinant, either animate or inanimate, of the Process   ?PROCESS, with or without voluntary intention.  For example, water is   the agent of erosion in the following proposition:  the water   eroded the coastline.  For another example, Eve is an agent in the   following proposition: Eve bit an apple."')), documentation(agent, string('"(agent ?PROCESS ?AGENT) means that ?AGENT is   an active determinant, either animate or inanimate, of the Process   ?PROCESS, with or without voluntary intention.  For example, water is   the agent of erosion in the following proposition:  the water   eroded the coastline.  For another example, Eve is an agent in the   following proposition: Eve bit an apple."')), [], [], 'Merge', 'BASE ONTOLOGY', 1373, 'Anonymous', on).
mooCache(instance(W30, 'Process')=>exists(X30, agent(W30, X30)), entails(not agent(W30, X30), not instance(W30, 'Process'))and entails(instance(W30, 'Process')and'$existential'(X30, '?CAUSE', agent(W30, '?CAUSE')), agent(W30, X30)), [domainV(X30, [agent:2]), domainV(W30, ['$instanceof':'Process', agent:1]), domainV(_G5236, []), forall(W30), replaceConsVar(X30, '$existential'('?CAUSE', agent(W30, '?CAUSE')))], ['PROCESS'=W30, 'CAUSE'=X30], 'Merge', 'BASE ONTOLOGY', 1375, 'Anonymous', on).
mooCache(instance(destination, 'CaseRole'), instance(destination, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1377, 'Anonymous', on).
mooCache(domain(destination, 1, 'Process'), domain(destination, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1379, 'Anonymous', on).
mooCache(domain(destination, 2, 'Entity'), domain(destination, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 1381, 'Anonymous', on).
mooCache(documentation(destination, string('"(destination ?PROCESS ?GOAL) means that   ?GOAL is the target or goal of the Process ?PROCESS.  For example,   Danbury would be the destination in the following proposition:  Bob went   to Danbury.  Note that this is a very general CaseRole and, in   particular, that it covers the concepts of \'recipient\' and \'beneficiary\'.    Thus, John would be the destination in the following proposition:    Tom gave a book to John."')), documentation(destination, string('"(destination ?PROCESS ?GOAL) means that   ?GOAL is the target or goal of the Process ?PROCESS.  For example,   Danbury would be the destination in the following proposition:  Bob went   to Danbury.  Note that this is a very general CaseRole and, in   particular, that it covers the concepts of \'recipient\' and \'beneficiary\'.    Thus, John would be the destination in the following proposition:    Tom gave a book to John."')), [], [], 'Merge', 'BASE ONTOLOGY', 1383, 'Anonymous', on).
mooCache(instance(experiencer, 'CaseRole'), instance(experiencer, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1385, 'Anonymous', on).
mooCache(domain(experiencer, 1, 'Process'), domain(experiencer, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1387, 'Anonymous', on).
mooCache(domain(experiencer, 2, 'Agent'), domain(experiencer, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1389, 'Anonymous', on).
mooCache(documentation(experiencer, string('"(experiencer ?PROCESS ?AGENT) means   that ?AGENT experiences the Process ?PROCESS.  For example, Yojo   is the experiencer of seeing in the following proposition:  Yojo   sees the fish.  Note that experiencer, unlike agent, does   not entail a causal relation between its arguments."')), documentation(experiencer, string('"(experiencer ?PROCESS ?AGENT) means   that ?AGENT experiences the Process ?PROCESS.  For example, Yojo   is the experiencer of seeing in the following proposition:  Yojo   sees the fish.  Note that experiencer, unlike agent, does   not entail a causal relation between its arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1391, 'Anonymous', on).
mooCache(subrelation(instrument, patient), subrelation(instrument, patient), [], [], 'Merge', 'BASE ONTOLOGY', 1393, 'Anonymous', on).
mooCache(domain(instrument, 1, 'Process'), domain(instrument, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1395, 'Anonymous', on).
mooCache(domain(instrument, 2, 'Object'), domain(instrument, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1397, 'Anonymous', on).
mooCache(documentation(instrument, string('"(instrument ?EVENT ?TOOL) means that ?TOOL   is used by an agent in bringing about ?EVENT and that ?TOOL is not   changed by ?EVENT.  For example, the key is an instrument in the   following proposition: The key opened the door.  Note that instrument   and resource cannot be satisfied by the same ordered pair."')), documentation(instrument, string('"(instrument ?EVENT ?TOOL) means that ?TOOL   is used by an agent in bringing about ?EVENT and that ?TOOL is not   changed by ?EVENT.  For example, the key is an instrument in the   following proposition: The key opened the door.  Note that instrument   and resource cannot be satisfied by the same ordered pair."')), [], [], 'Merge', 'BASE ONTOLOGY', 1399, 'Anonymous', on).
mooCache(instance(origin, 'CaseRole'), instance(origin, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1401, 'Anonymous', on).
mooCache(domain(origin, 1, 'Process'), domain(origin, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1403, 'Anonymous', on).
mooCache(domain(origin, 2, 'Object'), domain(origin, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1405, 'Anonymous', on).
mooCache(documentation(origin, string('"(origin ?PROCESS ?SOURCE) means that ?SOURCE   indicates where the ?Process began.  Note that this relation implies   that ?SOURCE is present at the beginning of the process, but need not   participate throughout the process.  For example, the submarine is the   origin in the following proposition: the missile was launched from a   submarine."')), documentation(origin, string('"(origin ?PROCESS ?SOURCE) means that ?SOURCE   indicates where the ?Process began.  Note that this relation implies   that ?SOURCE is present at the beginning of the process, but need not   participate throughout the process.  For example, the submarine is the   origin in the following proposition: the missile was launched from a   submarine."')), [], [], 'Merge', 'BASE ONTOLOGY', 1407, 'Anonymous', on).
mooCache(instance(patient, 'CaseRole'), instance(patient, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1409, 'Anonymous', on).
mooCache(domain(patient, 1, 'Process'), domain(patient, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1411, 'Anonymous', on).
mooCache(domain(patient, 2, 'Entity'), domain(patient, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 1413, 'Anonymous', on).
mooCache(documentation(patient, string('"(patient ?PROCESS ?ENTITY) means that ?ENTITY   is a participant in ?PROCESS that may be moved, said, experienced, etc.    For example, the direct objects in the sentences \'The cat swallowed the   canary\' and \'Billy likes the beer\' would be examples of patients.  Note   that the patient of a Process may or may not undergo structural   change as a result of the Process.  The CaseRole of patient is used   when one wants to specify as broadly as possible the object of a   Process."')), documentation(patient, string('"(patient ?PROCESS ?ENTITY) means that ?ENTITY   is a participant in ?PROCESS that may be moved, said, experienced, etc.    For example, the direct objects in the sentences \'The cat swallowed the   canary\' and \'Billy likes the beer\' would be examples of patients.  Note   that the patient of a Process may or may not undergo structural   change as a result of the Process.  The CaseRole of patient is used   when one wants to specify as broadly as possible the object of a   Process."')), [], [], 'Merge', 'BASE ONTOLOGY', 1415, 'Anonymous', on).
mooCache(subrelation(resource, patient), subrelation(resource, patient), [], [], 'Merge', 'BASE ONTOLOGY', 1417, 'Anonymous', on).
mooCache(domain(resource, 1, 'Process'), domain(resource, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1419, 'Anonymous', on).
mooCache(domain(resource, 2, 'Object'), domain(resource, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1421, 'Anonymous', on).
mooCache(disjointRelation(resource, instrument), disjointRelation(resource, instrument), [], [], 'Merge', 'BASE ONTOLOGY', 1423, 'Anonymous', on).
mooCache(documentation(resource, string('"(resource ?PROCESS ?RESOURCE) means that   ?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS,   and as a consequence is changed by ?PROCESS.  For example, soap is a   resource in the following proposition:  the gun was carved out of soap.    Note that resource differs from instrument, another subrelation of   patient, in that it is structurally altered in some way by the   Process."')), documentation(resource, string('"(resource ?PROCESS ?RESOURCE) means that   ?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS,   and as a consequence is changed by ?PROCESS.  For example, soap is a   resource in the following proposition:  the gun was carved out of soap.    Note that resource differs from instrument, another subrelation of   patient, in that it is structurally altered in some way by the   Process."')), [], [], 'Merge', 'BASE ONTOLOGY', 1425, 'Anonymous', on).
mooCache(subrelation(result, patient), subrelation(result, patient), [], [], 'Merge', 'BASE ONTOLOGY', 1427, 'Anonymous', on).
mooCache(domain(result, 1, 'Process'), domain(result, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1429, 'Anonymous', on).
mooCache(domain(result, 2, 'Object'), domain(result, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1431, 'Anonymous', on).
mooCache(documentation(result, string('"(result ?ACTION ?OUTPUT) means that ?OUTPUT is   a product of ?ACTION.  For example, house is a result in the   following proposition: Eric built a house."')), documentation(result, string('"(result ?ACTION ?OUTPUT) means that ?OUTPUT is   a product of ?ACTION.  For example, house is a result in the   following proposition: Eric built a house."')), [], [], 'Merge', 'BASE ONTOLOGY', 1433, 'Anonymous', on).
mooCache(instance('InheritableRelation', 'Class'), instance('InheritableRelation', 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1435, 'Anonymous', on).
mooCache(documentation('InheritableRelation', string('"This is a Class of Classes.  Each   instance of InheritableRelation is a subclass of Relation whose   properties can be inherited downward in the class hierarchy via the   subrelation Predicate."')), documentation('InheritableRelation', string('"This is a Class of Classes.  Each   instance of InheritableRelation is a subclass of Relation whose   properties can be inherited downward in the class hierarchy via the   subrelation Predicate."')), [], [], 'Merge', 'BASE ONTOLOGY', 1437, 'Anonymous', on).
mooCache(subclass('ProbabilityRelation', 'Relation'), subclass('ProbabilityRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1439, 'Anonymous', on).
mooCache(instance('ProbabilityRelation', 'InheritableRelation'), instance('ProbabilityRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1441, 'Anonymous', on).
mooCache(documentation('ProbabilityRelation', string('"The Class of Relations that   permit assessment of the probability of an event or situation."')), documentation('ProbabilityRelation', string('"The Class of Relations that   permit assessment of the probability of an event or situation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1443, 'Anonymous', on).
mooCache(instance(probability, 'ProbabilityRelation'), instance(probability, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1445, 'Anonymous', on).
mooCache(instance(probability, 'BinaryPredicate'), instance(probability, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1447, 'Anonymous', on).
mooCache(domain(probability, 1, 'Formula'), domain(probability, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1449, 'Anonymous', on).
mooCache(domain(probability, 2, 'RealNumber'), domain(probability, 2, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1451, 'Anonymous', on).
mooCache(instance(probability, 'AsymmetricRelation'), instance(probability, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1453, 'Anonymous', on).
mooCache(instance(probability, 'IrreflexiveRelation'), instance(probability, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1455, 'Anonymous', on).
mooCache(documentation(probability, string('"One of the basic ProbabilityRelations,   probability is used to state the a priori probability of a state of   affairs.  (probability ?FORMULA ?NUMBER) means that the state of   affairs denoted by ?FORMULA has the a priori probability of ?NUMBER."')), documentation(probability, string('"One of the basic ProbabilityRelations,   probability is used to state the a priori probability of a state of   affairs.  (probability ?FORMULA ?NUMBER) means that the state of   affairs denoted by ?FORMULA has the a priori probability of ?NUMBER."')), [], [], 'Merge', 'BASE ONTOLOGY', 1457, 'Anonymous', on).
mooCache(instance(conditionalProbability, 'ProbabilityRelation'), instance(conditionalProbability, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1459, 'Anonymous', on).
mooCache(instance(conditionalProbability, 'TernaryPredicate'), instance(conditionalProbability, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1461, 'Anonymous', on).
mooCache(domain(conditionalProbability, 1, 'Formula'), domain(conditionalProbability, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1463, 'Anonymous', on).
mooCache(domain(conditionalProbability, 2, 'Formula'), domain(conditionalProbability, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1465, 'Anonymous', on).
mooCache(domain(conditionalProbability, 3, 'RealNumber'), domain(conditionalProbability, 3, 'RealNumber'), [], [], 'Merge', 'BASE ONTOLOGY', 1467, 'Anonymous', on).
mooCache(documentation(conditionalProbability, string('"One of the basic ProbabilityRelations.    conditionalProbability is used to state the numeric value of a conditional   probability.  (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means   that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is   ?NUMBER."')), documentation(conditionalProbability, string('"One of the basic ProbabilityRelations.    conditionalProbability is used to state the numeric value of a conditional   probability.  (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means   that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is   ?NUMBER."')), [], [], 'Merge', 'BASE ONTOLOGY', 1469, 'Anonymous', on).
mooCache(instance(increasesLikelihood, 'ProbabilityRelation'), instance(increasesLikelihood, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1471, 'Anonymous', on).
mooCache(instance(increasesLikelihood, 'BinaryPredicate'), instance(increasesLikelihood, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1473, 'Anonymous', on).
mooCache(instance(increasesLikelihood, 'IrreflexiveRelation'), instance(increasesLikelihood, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1475, 'Anonymous', on).
mooCache(domain(increasesLikelihood, 1, 'Formula'), domain(increasesLikelihood, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1477, 'Anonymous', on).
mooCache(domain(increasesLikelihood, 2, 'Formula'), domain(increasesLikelihood, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1479, 'Anonymous', on).
mooCache(disjointRelation(increasesLikelihood, decreasesLikelihood), disjointRelation(increasesLikelihood, decreasesLikelihood), [], [], 'Merge', 'BASE ONTOLOGY', 1481, 'Anonymous', on).
mooCache(disjointRelation(increasesLikelihood, independentProbability), disjointRelation(increasesLikelihood, independentProbability), [], [], 'Merge', 'BASE ONTOLOGY', 1483, 'Anonymous', on).
mooCache(documentation(increasesLikelihood, string('"One of the basic ProbabilityRelations.    (increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more   likely to be true if ?FORMULA1 is true."')), documentation(increasesLikelihood, string('"One of the basic ProbabilityRelations.    (increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more   likely to be true if ?FORMULA1 is true."')), [], [], 'Merge', 'BASE ONTOLOGY', 1485, 'Anonymous', on).
mooCache(increasesLikelihood(R6, S6)and probability(S6, T6)and conditionalProbability(R6, S6, U6)=>greaterThan(U6, T6), entails(increasesLikelihood(R6, S6)and probability(S6, T6)and conditionalProbability(R6, S6, U6), greaterThan(U6, T6))and entails(not greaterThan(U6, T6)and probability(S6, T6)and conditionalProbability(R6, S6, U6), not increasesLikelihood(R6, S6))and entails(not greaterThan(U6, T6)and increasesLikelihood(R6, S6)and conditionalProbability(R6, S6, U6), not probability(S6, T6))and entails(not greaterThan(U6, T6)and increasesLikelihood(R6, S6)and probability(S6, T6), not conditionalProbability(R6, S6, U6)), [domainV(U6, [conditionalProbability:3, greaterThan:1]), domainV(T6, [greaterThan:2, probability:2]), domainV(S6, [conditionalProbability:2, increasesLikelihood:2, probability:1]), domainV(R6, [conditionalProbability:1, increasesLikelihood:1]), domainV(_G8481, []), forall(R6), forall(S6), forall(T6), forall(U6)], ['FORMULA1'=R6, 'FORMULA2'=S6, 'NUMBER1'=T6, 'NUMBER2'=U6], 'Merge', 'BASE ONTOLOGY', 1487, 'Anonymous', on).
mooCache(instance(decreasesLikelihood, 'ProbabilityRelation'), instance(decreasesLikelihood, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1489, 'Anonymous', on).
mooCache(instance(decreasesLikelihood, 'BinaryPredicate'), instance(decreasesLikelihood, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1491, 'Anonymous', on).
mooCache(instance(decreasesLikelihood, 'IrreflexiveRelation'), instance(decreasesLikelihood, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1493, 'Anonymous', on).
mooCache(domain(decreasesLikelihood, 1, 'Formula'), domain(decreasesLikelihood, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1495, 'Anonymous', on).
mooCache(domain(decreasesLikelihood, 2, 'Formula'), domain(decreasesLikelihood, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1497, 'Anonymous', on).
mooCache(disjointRelation(decreasesLikelihood, independentProbability), disjointRelation(decreasesLikelihood, independentProbability), [], [], 'Merge', 'BASE ONTOLOGY', 1499, 'Anonymous', on).
mooCache(documentation(decreasesLikelihood, string('"One of the basic ProbabilityRelations.    (decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less   likely to be true if ?FORMULA1 is true."')), documentation(decreasesLikelihood, string('"One of the basic ProbabilityRelations.    (decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less   likely to be true if ?FORMULA1 is true."')), [], [], 'Merge', 'BASE ONTOLOGY', 1501, 'Anonymous', on).
mooCache(decreasesLikelihood(K30, L30)and probability(L30, M30)and conditionalProbability(K30, L30, N30)=>lessThan(N30, M30), entails(decreasesLikelihood(K30, L30)and probability(L30, M30)and conditionalProbability(K30, L30, N30), lessThan(N30, M30))and entails(not lessThan(N30, M30)and probability(L30, M30)and conditionalProbability(K30, L30, N30), not decreasesLikelihood(K30, L30))and entails(not lessThan(N30, M30)and decreasesLikelihood(K30, L30)and conditionalProbability(K30, L30, N30), not probability(L30, M30))and entails(not lessThan(N30, M30)and decreasesLikelihood(K30, L30)and probability(L30, M30), not conditionalProbability(K30, L30, N30)), [domainV(N30, [conditionalProbability:3, lessThan:1]), domainV(M30, [lessThan:2, probability:2]), domainV(L30, [conditionalProbability:2, decreasesLikelihood:2, probability:1]), domainV(K30, [conditionalProbability:1, decreasesLikelihood:1]), domainV(_G8463, []), forall(K30), forall(L30), forall(M30), forall(N30)], ['FORMULA1'=K30, 'FORMULA2'=L30, 'NUMBER1'=M30, 'NUMBER2'=N30], 'Merge', 'BASE ONTOLOGY', 1503, 'Anonymous', on).
mooCache(instance(independentProbability, 'ProbabilityRelation'), instance(independentProbability, 'ProbabilityRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1505, 'Anonymous', on).
mooCache(instance(independentProbability, 'BinaryPredicate'), instance(independentProbability, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1507, 'Anonymous', on).
mooCache(instance(independentProbability, 'SymmetricRelation'), instance(independentProbability, 'SymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1509, 'Anonymous', on).
mooCache(domain(independentProbability, 1, 'Formula'), domain(independentProbability, 1, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1511, 'Anonymous', on).
mooCache(domain(independentProbability, 2, 'Formula'), domain(independentProbability, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1513, 'Anonymous', on).
mooCache(documentation(independentProbability, string('"One of the basic ProbabilityRelations.    (independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of   ?FORMULA1 and ?FORMULA2 being true are independent."')), documentation(independentProbability, string('"One of the basic ProbabilityRelations.    (independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of   ?FORMULA1 and ?FORMULA2 being true are independent."')), [], [], 'Merge', 'BASE ONTOLOGY', 1515, 'Anonymous', on).
mooCache(independentProbability(Q12, R12)and probability(R12, S12)and conditionalProbability(Q12, R12, T12)=>equal(T12, S12), entails(independentProbability(Q12, R12)and probability(R12, S12)and conditionalProbability(Q12, R12, T12), equal(T12, S12))and entails(not equal(T12, S12)and probability(R12, S12)and conditionalProbability(Q12, R12, T12), not independentProbability(Q12, R12))and entails(not equal(T12, S12)and independentProbability(Q12, R12)and conditionalProbability(Q12, R12, T12), not probability(R12, S12))and entails(not equal(T12, S12)and independentProbability(Q12, R12)and probability(R12, S12), not conditionalProbability(Q12, R12, T12)), [domainV(T12, [conditionalProbability:3]), domainV(S12, [probability:2]), domainV(R12, [conditionalProbability:2, independentProbability:2, probability:1]), domainV(Q12, [conditionalProbability:1, independentProbability:1]), domainV(_G8434, []), forall(Q12), forall(R12), forall(S12), forall(T12)], ['FORMULA1'=Q12, 'FORMULA2'=R12, 'NUMBER1'=S12, 'NUMBER2'=T12], 'Merge', 'BASE ONTOLOGY', 1517, 'Anonymous', on).
mooCache(increasesLikelihood(Y15, Z15)or decreasesLikelihood(Y15, Z15)or independentProbability(Y15, Z15), entails(not decreasesLikelihood(Y15, Z15)and not independentProbability(Y15, Z15), increasesLikelihood(Y15, Z15))and entails(not increasesLikelihood(Y15, Z15)and not independentProbability(Y15, Z15), decreasesLikelihood(Y15, Z15))and entails(not increasesLikelihood(Y15, Z15)and not decreasesLikelihood(Y15, Z15), independentProbability(Y15, Z15)), [domainV(Z15, [decreasesLikelihood:2, increasesLikelihood:2, independentProbability:2]), domainV(Y15, [decreasesLikelihood:1, increasesLikelihood:1, independentProbability:1]), domainV(_G6100, []), forall(Y15), forall(Z15)], ['FORMULA1'=Y15, 'FORMULA2'=Z15], 'Merge', 'BASE ONTOLOGY', 1519, 'Anonymous', on).
mooCache(subclass('SpatialRelation', 'Relation'), subclass('SpatialRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1521, 'Anonymous', on).
mooCache(instance('SpatialRelation', 'InheritableRelation'), instance('SpatialRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1523, 'Anonymous', on).
mooCache(documentation('SpatialRelation', string('"The Class of Relations that are   spatial in a wide sense.  This Class includes mereological relations   and topological relations."')), documentation('SpatialRelation', string('"The Class of Relations that are   spatial in a wide sense.  This Class includes mereological relations   and topological relations."')), [], [], 'Merge', 'BASE ONTOLOGY', 1525, 'Anonymous', on).
mooCache(subclass('TemporalRelation', 'Relation'), subclass('TemporalRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1527, 'Anonymous', on).
mooCache(instance('TemporalRelation', 'InheritableRelation'), instance('TemporalRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1529, 'Anonymous', on).
mooCache(documentation('TemporalRelation', string('"The Class of temporal Relations.    This Class includes notions of (temporal) topology of intervals,   (temporal) schemata, and (temporal) extension."')), documentation('TemporalRelation', string('"The Class of temporal Relations.    This Class includes notions of (temporal) topology of intervals,   (temporal) schemata, and (temporal) extension."')), [], [], 'Merge', 'BASE ONTOLOGY', 1531, 'Anonymous', on).
mooCache(subclass('IntentionalRelation', 'AsymmetricRelation'), subclass('IntentionalRelation', 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1533, 'Anonymous', on).
mooCache(instance('IntentionalRelation', 'InheritableRelation'), instance('IntentionalRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1535, 'Anonymous', on).
mooCache(documentation('IntentionalRelation', string('"The Class of Relations between   an Agent and an Entity, where the Relation requires that the   Agent have awareness of the Entity."')), documentation('IntentionalRelation', string('"The Class of Relations between   an Agent and an Entity, where the Relation requires that the   Agent have awareness of the Entity."')), [], [], 'Merge', 'BASE ONTOLOGY', 1537, 'Anonymous', on).
mooCache(subclass('PropositionalAttitude', 'IntentionalRelation'), subclass('PropositionalAttitude', 'IntentionalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1539, 'Anonymous', on).
mooCache(instance('PropositionalAttitude', 'InheritableRelation'), instance('PropositionalAttitude', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1541, 'Anonymous', on).
mooCache(documentation('PropositionalAttitude', string('"The Class of   IntentionalRelations where the Agent has awareness of a   Proposition."')), documentation('PropositionalAttitude', string('"The Class of   IntentionalRelations where the Agent has awareness of a   Proposition."')), [], [], 'Merge', 'BASE ONTOLOGY', 1543, 'Anonymous', on).
mooCache(subclass('ObjectAttitude', 'IntentionalRelation'), subclass('ObjectAttitude', 'IntentionalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1545, 'Anonymous', on).
mooCache(instance('ObjectAttitude', 'InheritableRelation'), instance('ObjectAttitude', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1547, 'Anonymous', on).
mooCache(disjoint('ObjectAttitude', 'PropositionalAttitude'), disjoint('ObjectAttitude', 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1549, 'Anonymous', on).
mooCache(documentation('ObjectAttitude', string('"The Class of IntentionalRelations   where the Agent has awareness of an instance of Physical."')), documentation('ObjectAttitude', string('"The Class of IntentionalRelations   where the Agent has awareness of an instance of Physical."')), [], [], 'Merge', 'BASE ONTOLOGY', 1551, 'Anonymous', on).
mooCache(instance(inScopeOfInterest, 'BinaryPredicate'), instance(inScopeOfInterest, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1553, 'Anonymous', on).
mooCache(instance(inScopeOfInterest, 'IntentionalRelation'), instance(inScopeOfInterest, 'IntentionalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1555, 'Anonymous', on).
mooCache(instance(inScopeOfInterest, 'AsymmetricRelation'), instance(inScopeOfInterest, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1557, 'Anonymous', on).
mooCache(domain(inScopeOfInterest, 1, 'Agent'), domain(inScopeOfInterest, 1, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1559, 'Anonymous', on).
mooCache(domain(inScopeOfInterest, 2, 'Entity'), domain(inScopeOfInterest, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 1561, 'Anonymous', on).
mooCache(documentation(inScopeOfInterest, string('"A very general Predicate.    (inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the   scope of interest of ?AGENT.  Note that the interest indicated can be   either positive or negative, i.e. the ?AGENT can have an interest in   avoiding or promoting ?ENTITY."')), documentation(inScopeOfInterest, string('"A very general Predicate.    (inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the   scope of interest of ?AGENT.  Note that the interest indicated can be   either positive or negative, i.e. the ?AGENT can have an interest in   avoiding or promoting ?ENTITY."')), [], [], 'Merge', 'BASE ONTOLOGY', 1563, 'Anonymous', on).
mooCache(instance(notices, 'ObjectAttitude'), instance(notices, 'ObjectAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1565, 'Anonymous', on).
mooCache(subrelation(notices, 'InScopeOfInterest'), subrelation(notices, 'InScopeOfInterest'), [], [], 'Merge', 'BASE ONTOLOGY', 1567, 'Anonymous', on).
mooCache(domain(notices, 1, 'CognitiveAgent'), domain(notices, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1569, 'Anonymous', on).
mooCache(domain(notices, 2, 'Object'), domain(notices, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1571, 'Anonymous', on).
mooCache(documentation(notices, string('"(notices ?AGENT ?OBJECT) means that ?AGENT is   paying attention to ?OBJECT, that ?OBJECT is currently the object of   ?AGENT\'s conscious awareness."')), documentation(notices, string('"(notices ?AGENT ?OBJECT) means that ?AGENT is   paying attention to ?OBJECT, that ?OBJECT is currently the object of   ?AGENT\'s conscious awareness."')), [], [], 'Merge', 'BASE ONTOLOGY', 1573, 'Anonymous', on).
mooCache(instance(needs, 'ObjectAttitude'), instance(needs, 'ObjectAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1575, 'Anonymous', on).
mooCache(subrelation(needs, inScopeOfInterest), subrelation(needs, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1577, 'Anonymous', on).
mooCache(domain(needs, 1, 'CognitiveAgent'), domain(needs, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1579, 'Anonymous', on).
mooCache(domain(needs, 2, 'Object'), domain(needs, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1581, 'Anonymous', on).
mooCache(documentation(needs, string('"(needs ?AGENT ?OBJECT) means that ?OBJECT is   physically required for the continued existence of ?AGENT."')), documentation(needs, string('"(needs ?AGENT ?OBJECT) means that ?OBJECT is   physically required for the continued existence of ?AGENT."')), [], [], 'Merge', 'BASE ONTOLOGY', 1583, 'Anonymous', on).
mooCache(needs(I38, J38)=>wants(I38, J38), entails(not wants(I38, J38), not needs(I38, J38))and entails(needs(I38, J38), wants(I38, J38)), [domainV(J38, [needs:2, wants:2]), domainV(I38, [needs:1, wants:1]), domainV(_G4298, []), forall(I38), forall(J38)], ['AGENT'=I38, 'OBJECT'=J38], 'Merge', 'BASE ONTOLOGY', 1585, 'Anonymous', on).
mooCache(instance(wants, 'ObjectAttitude'), instance(wants, 'ObjectAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1587, 'Anonymous', on).
mooCache(subrelation(wants, inScopeOfInterest), subrelation(wants, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1589, 'Anonymous', on).
mooCache(relatedInternalConcept(wants, desires), relatedInternalConcept(wants, desires), [], [], 'Merge', 'BASE ONTOLOGY', 1591, 'Anonymous', on).
mooCache(domain(wants, 1, 'CognitiveAgent'), domain(wants, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1593, 'Anonymous', on).
mooCache(domain(wants, 2, 'Object'), domain(wants, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1595, 'Anonymous', on).
mooCache(documentation(wants, string('"(wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT,   i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals."')), documentation(wants, string('"(wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT,   i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals."')), [], [], 'Merge', 'BASE ONTOLOGY', 1597, 'Anonymous', on).
mooCache(wants(W20, X20)=>exists(Y20, hasPurposeForAgent(X20, Y20, W20)), entails(not hasPurposeForAgent(X20, Y20, W20), not wants(W20, X20))and entails(wants(W20, X20)and'$existential'(Y20, '?PURP', hasPurposeForAgent(X20, '?PURP', W20)), hasPurposeForAgent(X20, Y20, W20)), [domainV(Y20, [hasPurposeForAgent:2]), domainV(X20, [hasPurposeForAgent:1, wants:2]), domainV(W20, [hasPurposeForAgent:3, wants:1]), domainV(_G6017, []), forall(W20), forall(X20), replaceConsVar(Y20, '$existential'('?PURP', hasPurposeForAgent(X20, '?PURP', W20)))], ['AGENT'=W20, 'OBJ'=X20, 'PURP'=Y20], 'Merge', 'BASE ONTOLOGY', 1599, 'Anonymous', on).
mooCache(instance(desires, 'PropositionalAttitude'), instance(desires, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1601, 'Anonymous', on).
mooCache(subrelation(desires, inScopeOfInterest), subrelation(desires, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1603, 'Anonymous', on).
mooCache(relatedInternalConcept(desires, wants), relatedInternalConcept(desires, wants), [], [], 'Merge', 'BASE ONTOLOGY', 1605, 'Anonymous', on).
mooCache(domain(desires, 1, 'CognitiveAgent'), domain(desires, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1607, 'Anonymous', on).
mooCache(domain(desires, 2, 'Formula'), domain(desires, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1609, 'Anonymous', on).
mooCache(documentation(desires, string('"(desires ?AGENT ?FORMULA) means that ?AGENT wants to bring about the state of affairs expressed by ?FORMULA.  Note that desires is distinguished from wants only in that the former is a PropositionalAttitude, while wants is an ObjectAttitude."')), documentation(desires, string('"(desires ?AGENT ?FORMULA) means that ?AGENT wants to bring about the state of affairs expressed by ?FORMULA.  Note that desires is distinguished from wants only in that the former is a PropositionalAttitude, while wants is an ObjectAttitude."')), [], [], 'Merge', 'BASE ONTOLOGY', 1611, 'Anonymous', on).
mooCache(instance(considers, 'PropositionalAttitude'), instance(considers, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1613, 'Anonymous', on).
mooCache(subrelation(considers, inScopeOfInterest), subrelation(considers, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1615, 'Anonymous', on).
mooCache(domain(considers, 1, 'CognitiveAgent'), domain(considers, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1617, 'Anonymous', on).
mooCache(domain(considers, 2, 'Formula'), domain(considers, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1619, 'Anonymous', on).
mooCache(documentation(considers, string('"(considers ?AGENT ?FORMULA) means that ?AGENT   considers or wonders about the truth of the proposition expressed by   ?FORMULA."')), documentation(considers, string('"(considers ?AGENT ?FORMULA) means that ?AGENT   considers or wonders about the truth of the proposition expressed by   ?FORMULA."')), [], [], 'Merge', 'BASE ONTOLOGY', 1621, 'Anonymous', on).
mooCache(instance(believes, 'PropositionalAttitude'), instance(believes, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1623, 'Anonymous', on).
mooCache(subrelation(believes, inScopeOfInterest), subrelation(believes, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1625, 'Anonymous', on).
mooCache(domain(believes, 1, 'CognitiveAgent'), domain(believes, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1627, 'Anonymous', on).
mooCache(domain(believes, 2, 'Formula'), domain(believes, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1629, 'Anonymous', on).
mooCache(documentation(believes, string('"The epistemic predicate of belief.    (believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition   expressed by ?FORMULA."')), documentation(believes, string('"The epistemic predicate of belief.    (believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition   expressed by ?FORMULA."')), [], [], 'Merge', 'BASE ONTOLOGY', 1631, 'Anonymous', on).
mooCache(instance(knows, 'PropositionalAttitude'), instance(knows, 'PropositionalAttitude'), [], [], 'Merge', 'BASE ONTOLOGY', 1633, 'Anonymous', on).
mooCache(subrelation(knows, inScopeOfInterest), subrelation(knows, inScopeOfInterest), [], [], 'Merge', 'BASE ONTOLOGY', 1635, 'Anonymous', on).
mooCache(domain(knows, 1, 'CognitiveAgent'), domain(knows, 1, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 1637, 'Anonymous', on).
mooCache(domain(knows, 2, 'Formula'), domain(knows, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1639, 'Anonymous', on).
mooCache(documentation(knows, string('"The epistemic predicate of knowing.  (knows   ?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by   ?FORMULA.  Note that knows entails conscious awareness, so this   Predicate cannot be used to express tacit or subconscious or   unconscious knowledge."')), documentation(knows, string('"The epistemic predicate of knowing.  (knows   ?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by   ?FORMULA.  Note that knows entails conscious awareness, so this   Predicate cannot be used to express tacit or subconscious or   unconscious knowledge."')), [], [], 'Merge', 'BASE ONTOLOGY', 1641, 'Anonymous', on).
mooCache(knows(Z6, A7)=>believes(Z6, A7), entails(not believes(Z6, A7), not knows(Z6, A7))and entails(knows(Z6, A7), believes(Z6, A7)), [domainV(A7, [believes:2, knows:2]), domainV(Z6, [believes:1, knows:1]), domainV(_G4328, []), forall(Z6), forall(A7)], ['AGENT'=Z6, 'FORMULA'=A7], 'Merge', 'BASE ONTOLOGY', 1643, 'Anonymous', on).
mooCache(knows(B10, C10)=>true(C10)and true('True'), (entails(not true(C10), not knows(B10, C10))and entails(knows(B10, C10), true(C10)))and entails(not true('True'), not knows(B10, C10))and entails(knows(B10, C10), true('True')), [domainV(C10, [knows:2, true:1]), domainV(B10, [knows:1]), domainV(_G4258, []), forall(B10), forall(C10)], ['AGENT'=B10, 'FORMULA'=C10], 'Merge', 'BASE ONTOLOGY', 1645, 'Anonymous', on).
mooCache(subclass('TernaryRelation', 'Relation'), subclass('TernaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1647, 'Anonymous', on).
mooCache(instance('TernaryRelation', 'InheritableRelation'), instance('TernaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1649, 'Anonymous', on).
mooCache(documentation('TernaryRelation', string('"TernaryRelations relate three items.    The two subclasses of TernaryRelation are TernaryPredicate and   BinaryFunction."')), documentation('TernaryRelation', string('"TernaryRelations relate three items.    The two subclasses of TernaryRelation are TernaryPredicate and   BinaryFunction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1651, 'Anonymous', on).
mooCache(subclass('QuaternaryRelation', 'Relation'), subclass('QuaternaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1653, 'Anonymous', on).
mooCache(instance('QuaternaryRelation', 'InheritableRelation'), instance('QuaternaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1655, 'Anonymous', on).
mooCache(documentation('QuaternaryRelation', string('"QuaternaryRelations relate four   items.  The two subclasses of QuaternaryRelation are   QuaternaryPredicate and TernaryFunction."')), documentation('QuaternaryRelation', string('"QuaternaryRelations relate four   items.  The two subclasses of QuaternaryRelation are   QuaternaryPredicate and TernaryFunction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1657, 'Anonymous', on).
mooCache(subclass('QuintaryRelation', 'Relation'), subclass('QuintaryRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1659, 'Anonymous', on).
mooCache(instance('QuintaryRelation', 'InheritableRelation'), instance('QuintaryRelation', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1661, 'Anonymous', on).
mooCache(documentation('QuintaryRelation', string('"QuintaryRelations relate five items.    The two subclasses of QuintaryRelation are QuintaryPredicate and   QuaternaryFunction."')), documentation('QuintaryRelation', string('"QuintaryRelations relate five items.    The two subclasses of QuintaryRelation are QuintaryPredicate and   QuaternaryFunction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1663, 'Anonymous', on).
mooCache(subclass('Predicate', 'Relation'), subclass('Predicate', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1665, 'Anonymous', on).
mooCache(instance('Predicate', 'InheritableRelation'), instance('Predicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1667, 'Anonymous', on).
mooCache(documentation('Predicate', string('"A Predicate is a sentence-forming Relation.    Each tuple in the Relation is a finite, ordered sequence of objects.    The fact that a particular tuple is an element of a Predicate is denoted   by \'(*predicate* arg_1 arg_2 .. arg_n)\', where the arg_i are the   objects so related.  In the case of BinaryPredicates, the fact can  be read as `arg_1 is *predicate* arg_2\' or `a *predicate* of  arg_1 is arg_2\'."')), documentation('Predicate', string('"A Predicate is a sentence-forming Relation.    Each tuple in the Relation is a finite, ordered sequence of objects.    The fact that a particular tuple is an element of a Predicate is denoted   by \'(*predicate* arg_1 arg_2 .. arg_n)\', where the arg_i are the   objects so related.  In the case of BinaryPredicates, the fact can  be read as `arg_1 is *predicate* arg_2\' or `a *predicate* of  arg_1 is arg_2\'."')), [], [], 'Merge', 'BASE ONTOLOGY', 1669, 'Anonymous', on).
mooCache(subclass('Function', 'Relation'), subclass('Function', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1671, 'Anonymous', on).
mooCache(instance('Function', 'InheritableRelation'), instance('Function', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1673, 'Anonymous', on).
mooCache(documentation('Function', string('"A Function is a term-forming Relation that   maps from a n-tuple of arguments to a range and that associates this   n-tuple with exactly one range element.  Note that the range is a Class,   and each element of the range is an instance of the Class."')), documentation('Function', string('"A Function is a term-forming Relation that   maps from a n-tuple of arguments to a range and that associates this   n-tuple with exactly one range element.  Note that the range is a Class,   and each element of the range is an instance of the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 1675, 'Anonymous', on).
mooCache(subclass('UnaryFunction', 'Function'), subclass('UnaryFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1677, 'Anonymous', on).
mooCache(subclass('UnaryFunction', 'BinaryRelation'), subclass('UnaryFunction', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1679, 'Anonymous', on).
mooCache(instance('UnaryFunction', 'InheritableRelation'), instance('UnaryFunction', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1681, 'Anonymous', on).
mooCache(documentation('UnaryFunction', string('"The Class of Functions that require a   single argument."')), documentation('UnaryFunction', string('"The Class of Functions that require a   single argument."')), [], [], 'Merge', 'BASE ONTOLOGY', 1683, 'Anonymous', on).
mooCache(instance(U28, 'UnaryFunction')=>valence(U28, 1), entails(not valence(U28, 1), not instance(U28, 'UnaryFunction'))and entails(instance(U28, 'UnaryFunction'), valence(U28, 1)), [domainV(U28, ['$instanceof':'UnaryFunction', valence:1]), domainV(_G3847, []), forall(U28)], ['FUNCTION'=U28], 'Merge', 'BASE ONTOLOGY', 1685, 'Anonymous', on).
mooCache(instance(A32, 'UnaryFunction')and equal('AssignmentFn'(A32, B32), C32)and equal('AssignmentFn'(A32, B32), D32)=>equal(C32, D32), entails(instance(A32, 'UnaryFunction')and holds(A32, B32, C32)and holds(A32, B32, D32), equal(C32, D32))and entails(not equal(C32, D32)and holds(A32, B32, C32)and holds(A32, B32, D32), not instance(A32, 'UnaryFunction'))and entails(not equal(C32, D32)and instance(A32, 'UnaryFunction')and holds(A32, B32, D32), not holds(A32, B32, C32))and entails(not equal(C32, D32)and instance(A32, 'UnaryFunction')and holds(A32, B32, C32), not holds(A32, B32, D32)), [domainV(D32, [A32:2]), domainV(C32, [A32:2]), domainV(B32, [A32:1]), domainV(A32, ['$instanceof':'UnaryFunction', holds:1]), domainV(_G8846, []), forall(A32), forall(B32), forall(C32), forall(D32)], ['FUNCTION'=A32, 'ARG'=B32, 'VALUE1'=C32, 'VALUE2'=D32], 'Merge', 'BASE ONTOLOGY', 1687, 'Anonymous', on).
mooCache(subclass('OneToOneFunction', 'UnaryFunction'), subclass('OneToOneFunction', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1689, 'Anonymous', on).
mooCache(documentation('OneToOneFunction', string('"The Class of UnaryFunctions which   are one to one.  A function F is one to one just in case for all X, Y in the   domain of F, if X is not identical to Y, then F(X) is not identical to F(Y)."')), documentation('OneToOneFunction', string('"The Class of UnaryFunctions which   are one to one.  A function F is one to one just in case for all X, Y in the   domain of F, if X is not identical to Y, then F(X) is not identical to F(Y)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1691, 'Anonymous', on).
mooCache(instance(I3, 'OneToOneFunction')<=>forall(J3, forall(K3, instance(K3, 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal(K3, J3)=>not equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3)))), (entails(not instance(I3, 'OneToOneFunction'), instance(K3, 'DomainFn'(I3)))and entails(not instance(I3, 'OneToOneFunction'), instance(J3, 'DomainFn'(I3)))and entails((not instance(I3, 'OneToOneFunction')and'$existential'(J3, '?ARG2', not forall(K3, instance(K3, 'DomainFn'(I3))and instance('?ARG2', 'DomainFn'(I3))and not equal(K3, '?ARG2')=>not equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, '?ARG2')))))and'$existential'(K3, '?ARG1', not (instance('?ARG1', 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal('?ARG1', J3)=>not equal('AssignmentFn'(I3, '?ARG1'), 'AssignmentFn'(I3, J3)))), not equal(K3, J3))and entails(not instance(I3, 'OneToOneFunction'), equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3)))and entails((not instance(K3, 'DomainFn'(I3))or not instance(J3, 'DomainFn'(I3))or equal(K3, J3))or not equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3)), instance(I3, 'OneToOneFunction')))and entails((equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3))and instance(K3, 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal(K3, J3))and'$existential'(K3, '?ARG1', not (instance('?ARG1', 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal('?ARG1', J3)=>not equal('AssignmentFn'(I3, '?ARG1'), 'AssignmentFn'(I3, J3)))), not instance(I3, 'OneToOneFunction'))and entails(((instance(I3, 'OneToOneFunction')and instance(K3, 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal(K3, J3))and'$existential'(J3, '?ARG2', not forall(K3, instance(K3, 'DomainFn'(I3))and instance('?ARG2', 'DomainFn'(I3))and not equal(K3, '?ARG2')=>not equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, '?ARG2')))))and'$existential'(K3, '?ARG1', not (instance('?ARG1', 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal('?ARG1', J3)=>not equal('AssignmentFn'(I3, '?ARG1'), 'AssignmentFn'(I3, J3)))), not equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3)))and entails((instance(I3, 'OneToOneFunction')and equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3))and instance(J3, 'DomainFn'(I3))and not equal(K3, J3))and'$existential'(K3, '?ARG1', not (instance('?ARG1', 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal('?ARG1', J3)=>not equal('AssignmentFn'(I3, '?ARG1'), 'AssignmentFn'(I3, J3)))), not instance(K3, 'DomainFn'(I3)))and entails(((instance(I3, 'OneToOneFunction')and equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3))and instance(K3, 'DomainFn'(I3))and not equal(K3, J3))and'$existential'(J3, '?ARG2', not forall(K3, instance(K3, 'DomainFn'(I3))and instance('?ARG2', 'DomainFn'(I3))and not equal(K3, '?ARG2')=>not equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, '?ARG2')))))and'$existential'(K3, '?ARG1', not (instance('?ARG1', 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal('?ARG1', J3)=>not equal('AssignmentFn'(I3, '?ARG1'), 'AssignmentFn'(I3, J3)))), not instance(J3, 'DomainFn'(I3)))and entails(instance(I3, 'OneToOneFunction')and equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, J3))and instance(K3, 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3)), equal(K3, J3)), [domainV(K3, [I3:1]), domainV(J3, [I3:1]), domainV(I3, ['$instanceof':'OneToOneFunction', 'AssignmentFn':1, 'DomainFn':1]), domainV(_G17448, []), forall(I3), forall(J3), forall(K3), replaceConsVar(J3, '$existential'('?ARG2', not forall(K3, instance(K3, 'DomainFn'(I3))and instance('?ARG2', 'DomainFn'(I3))and not equal(K3, '?ARG2')=>not equal('AssignmentFn'(I3, K3), 'AssignmentFn'(I3, '?ARG2'))))), replaceConsVar(K3, '$existential'('?ARG1', not (instance('?ARG1', 'DomainFn'(I3))and instance(J3, 'DomainFn'(I3))and not equal('?ARG1', J3)=>not equal('AssignmentFn'(I3, '?ARG1'), 'AssignmentFn'(I3, J3)))))], ['FUN'=I3, 'ARG1'=K3, 'ARG2'=J3], 'Merge', 'BASE ONTOLOGY', 1693, 'Anonymous', on).
mooCache(subclass('SequenceFunction', 'OneToOneFunction'), subclass('SequenceFunction', 'OneToOneFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1695, 'Anonymous', on).
mooCache(documentation('SequenceFunction', string('"The Class of OneToOneFunctions whose range   is a subclass of the PositiveIntegers."')), documentation('SequenceFunction', string('"The Class of OneToOneFunctions whose range   is a subclass of the PositiveIntegers."')), [], [], 'Merge', 'BASE ONTOLOGY', 1697, 'Anonymous', on).
mooCache(instance(F13, 'SequenceFunction')=>subclass('RangeFn'(F13), 'Integer'), entails(not subclass('RangeFn'(F13), 'Integer'), not instance(F13, 'SequenceFunction'))and entails(instance(F13, 'SequenceFunction'), subclass('RangeFn'(F13), 'Integer')), [domainV(F13, ['$instanceof':'SequenceFunction', 'RangeFn':1]), domainV(_G4218, []), forall(F13)], ['SEQ'=F13], 'Merge', 'BASE ONTOLOGY', 1699, 'Anonymous', on).
mooCache(subclass('BinaryFunction', 'Function'), subclass('BinaryFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1701, 'Anonymous', on).
mooCache(subclass('BinaryFunction', 'TernaryRelation'), subclass('BinaryFunction', 'TernaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1703, 'Anonymous', on).
mooCache(instance('BinaryFunction', 'InheritableRelation'), instance('BinaryFunction', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1705, 'Anonymous', on).
mooCache(documentation('BinaryFunction', string('"The Class of Functions that require   two arguments."')), documentation('BinaryFunction', string('"The Class of Functions that require   two arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1707, 'Anonymous', on).
mooCache(instance(L27, 'BinaryFunction')=>valence(L27, 2), entails(not valence(L27, 2), not instance(L27, 'BinaryFunction'))and entails(instance(L27, 'BinaryFunction'), valence(L27, 2)), [domainV(L27, ['$instanceof':'BinaryFunction', valence:1]), domainV(_G3853, []), forall(L27)], ['FUNCTION'=L27], 'Merge', 'BASE ONTOLOGY', 1709, 'Anonymous', on).
mooCache(instance(R30, 'BinaryFunction')and equal('AssignmentFn'(R30, S30, T30), U30)and equal('AssignmentFn'(R30, S30, T30), V30)=>equal(U30, V30), entails(instance(R30, 'BinaryFunction')and holds(R30, S30, T30, U30)and holds(R30, S30, T30, V30), equal(U30, V30))and entails(not equal(U30, V30)and holds(R30, S30, T30, U30)and holds(R30, S30, T30, V30), not instance(R30, 'BinaryFunction'))and entails(not equal(U30, V30)and instance(R30, 'BinaryFunction')and holds(R30, S30, T30, V30), not holds(R30, S30, T30, U30))and entails(not equal(U30, V30)and instance(R30, 'BinaryFunction')and holds(R30, S30, T30, U30), not holds(R30, S30, T30, V30)), [domainV(V30, [R30:3]), domainV(U30, [R30:3]), domainV(T30, [R30:2]), domainV(S30, [R30:1]), domainV(R30, ['$instanceof':'BinaryFunction', holds:1]), domainV(_G9890, []), forall(R30), forall(S30), forall(T30), forall(U30), forall(V30)], ['FUNCTION'=R30, 'ARG1'=S30, 'ARG2'=T30, 'VALUE1'=U30, 'VALUE2'=V30], 'Merge', 'BASE ONTOLOGY', 1711, 'Anonymous', on).
mooCache(subclass('AssociativeFunction', 'BinaryFunction'), subclass('AssociativeFunction', 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1713, 'Anonymous', on).
mooCache(documentation('AssociativeFunction', string('"A BinaryFunction is associative if   bracketing has no effect on the value returned by the Function.  More   precisely, a Function ?FUNCTION is associative just in case   (?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to   (?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2,   and ?INST3."')), documentation('AssociativeFunction', string('"A BinaryFunction is associative if   bracketing has no effect on the value returned by the Function.  More   precisely, a Function ?FUNCTION is associative just in case   (?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to   (?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2,   and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1715, 'Anonymous', on).
mooCache(instance(L5, 'AssociativeFunction')=>forall(M5, forall(N5, forall(O5, instance(O5, 'DomainFn'(L5))and instance(N5, 'DomainFn'(L5))and instance(M5, 'DomainFn'(L5))=>equal('AssignmentFn'(L5, O5, 'AssignmentFn'(L5, O5, N5)), 'AssignmentFn'(L5, 'AssignmentFn'(L5, O5, N5), M5))))), entails(not equal('AssignmentFn'(L5, O5, 'AssignmentFn'(L5, O5, N5)), 'AssignmentFn'(L5, 'AssignmentFn'(L5, O5, N5), M5))and instance(O5, 'DomainFn'(L5))and instance(N5, 'DomainFn'(L5))and instance(M5, 'DomainFn'(L5)), not instance(L5, 'AssociativeFunction'))and entails(instance(L5, 'AssociativeFunction')and instance(O5, 'DomainFn'(L5))and instance(N5, 'DomainFn'(L5))and instance(M5, 'DomainFn'(L5)), equal('AssignmentFn'(L5, O5, 'AssignmentFn'(L5, O5, N5)), 'AssignmentFn'(L5, 'AssignmentFn'(L5, O5, N5), M5)))and entails(instance(L5, 'AssociativeFunction')and not equal('AssignmentFn'(L5, O5, 'AssignmentFn'(L5, O5, N5)), 'AssignmentFn'(L5, 'AssignmentFn'(L5, O5, N5), M5))and instance(N5, 'DomainFn'(L5))and instance(M5, 'DomainFn'(L5)), not instance(O5, 'DomainFn'(L5)))and entails(instance(L5, 'AssociativeFunction')and not equal('AssignmentFn'(L5, O5, 'AssignmentFn'(L5, O5, N5)), 'AssignmentFn'(L5, 'AssignmentFn'(L5, O5, N5), M5))and instance(O5, 'DomainFn'(L5))and instance(M5, 'DomainFn'(L5)), not instance(N5, 'DomainFn'(L5)))and entails(instance(L5, 'AssociativeFunction')and not equal('AssignmentFn'(L5, O5, 'AssignmentFn'(L5, O5, N5)), 'AssignmentFn'(L5, 'AssignmentFn'(L5, O5, N5), M5))and instance(O5, 'DomainFn'(L5))and instance(N5, 'DomainFn'(L5)), not instance(M5, 'DomainFn'(L5))), [domainV(O5, [L5:1]), domainV(N5, [L5:2]), domainV(M5, [L5:2]), domainV(L5, ['$instanceof':'AssociativeFunction', 'AssignmentFn':1, 'DomainFn':1]), domainV(_G20877, []), forall(L5), forall(M5), forall(N5), forall(O5)], ['FUNCTION'=L5, 'INST1'=O5, 'INST2'=N5, 'INST3'=M5], 'Merge', 'BASE ONTOLOGY', 1717, 'Anonymous', on).
mooCache(subclass('CommutativeFunction', 'BinaryFunction'), subclass('CommutativeFunction', 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1719, 'Anonymous', on).
mooCache(documentation('CommutativeFunction', string('"A BinaryFunction is commutative if   the ordering of the arguments of the function has no effect on the value   returned by the function.  More precisely, a function ?FUNCTION is   commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), documentation('CommutativeFunction', string('"A BinaryFunction is commutative if   the ordering of the arguments of the function has no effect on the value   returned by the function.  More precisely, a function ?FUNCTION is   commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION   ?INST2 ?INST1), for all ?INST1 and ?INST2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1721, 'Anonymous', on).
mooCache(instance(K16, 'CommutativeFunction')=>forall(L16, forall(M16, instance(M16, 'DomainFn'(K16))and instance(L16, 'DomainFn'(K16))=>equal('AssignmentFn'(K16, M16, L16), 'AssignmentFn'(K16, L16, M16)))), entails(not equal('AssignmentFn'(K16, M16, L16), 'AssignmentFn'(K16, L16, M16))and instance(M16, 'DomainFn'(K16))and instance(L16, 'DomainFn'(K16)), not instance(K16, 'CommutativeFunction'))and entails(instance(K16, 'CommutativeFunction')and instance(M16, 'DomainFn'(K16))and instance(L16, 'DomainFn'(K16)), equal('AssignmentFn'(K16, M16, L16), 'AssignmentFn'(K16, L16, M16)))and entails(instance(K16, 'CommutativeFunction')and not equal('AssignmentFn'(K16, M16, L16), 'AssignmentFn'(K16, L16, M16))and instance(L16, 'DomainFn'(K16)), not instance(M16, 'DomainFn'(K16)))and entails(instance(K16, 'CommutativeFunction')and not equal('AssignmentFn'(K16, M16, L16), 'AssignmentFn'(K16, L16, M16))and instance(M16, 'DomainFn'(K16)), not instance(L16, 'DomainFn'(K16))), [domainV(M16, [K16:1, K16:2]), domainV(L16, [K16:1, K16:2]), domainV(K16, ['$instanceof':'CommutativeFunction', 'AssignmentFn':1, 'DomainFn':1]), domainV(_G13960, []), forall(K16), forall(L16), forall(M16)], ['FUNCTION'=K16, 'INST1'=M16, 'INST2'=L16], 'Merge', 'BASE ONTOLOGY', 1723, 'Anonymous', on).
mooCache(subclass('TernaryFunction', 'Function'), subclass('TernaryFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1725, 'Anonymous', on).
mooCache(subclass('TernaryFunction', 'QuaternaryRelation'), subclass('TernaryFunction', 'QuaternaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1727, 'Anonymous', on).
mooCache(instance('TernaryFunction', 'InheritableRelation'), instance('TernaryFunction', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1729, 'Anonymous', on).
mooCache(documentation('TernaryFunction', string('"The Class of Functions that require   exactly three arguments."')), documentation('TernaryFunction', string('"The Class of Functions that require   exactly three arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1731, 'Anonymous', on).
mooCache(instance(V30, 'TernaryFunction')=>valence(V30, 3), entails(not valence(V30, 3), not instance(V30, 'TernaryFunction'))and entails(instance(V30, 'TernaryFunction'), valence(V30, 3)), [domainV(V30, ['$instanceof':'TernaryFunction', valence:1]), domainV(_G3859, []), forall(V30)], ['FUNCTION'=V30], 'Merge', 'BASE ONTOLOGY', 1733, 'Anonymous', on).
mooCache(instance(C34, 'TernaryFunction')and equal('AssignmentFn'(C34, D34, E34, F34), G34)and equal('AssignmentFn'(C34, D34, E34, F34), H34)=>equal(G34, H34), entails(instance(C34, 'TernaryFunction')and holds(C34, D34, E34, F34, G34)and holds(C34, D34, E34, F34, H34), equal(G34, H34))and entails(not equal(G34, H34)and holds(C34, D34, E34, F34, G34)and holds(C34, D34, E34, F34, H34), not instance(C34, 'TernaryFunction'))and entails(not equal(G34, H34)and instance(C34, 'TernaryFunction')and holds(C34, D34, E34, F34, H34), not holds(C34, D34, E34, F34, G34))and entails(not equal(G34, H34)and instance(C34, 'TernaryFunction')and holds(C34, D34, E34, F34, G34), not holds(C34, D34, E34, F34, H34)), [domainV(H34, [C34:4]), domainV(G34, [C34:4]), domainV(F34, [C34:3]), domainV(E34, [C34:2]), domainV(D34, [C34:1]), domainV(C34, ['$instanceof':'TernaryFunction', holds:1]), domainV(_G10838, []), forall(C34), forall(D34), forall(E34), forall(F34), forall(G34), forall(H34)], ['FUNCTION'=C34, 'ARG1'=D34, 'ARG2'=E34, 'ARG3'=F34, 'VALUE1'=G34, 'VALUE2'=H34], 'Merge', 'BASE ONTOLOGY', 1735, 'Anonymous', on).
mooCache(subclass('ContinuousFunction', 'Function'), subclass('ContinuousFunction', 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1737, 'Anonymous', on).
mooCache(documentation('ContinuousFunction', string('"Functions which are continuous.    This concept is taken as primitive until representations for limits   are devised."')), documentation('ContinuousFunction', string('"Functions which are continuous.    This concept is taken as primitive until representations for limits   are devised."')), [], [], 'Merge', 'BASE ONTOLOGY', 1739, 'Anonymous', on).
mooCache(subclass('SententialOperator', 'Predicate'), subclass('SententialOperator', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1741, 'Anonymous', on).
mooCache(documentation('SententialOperator', string('"This Class currently comprises all   of the logical operators (viz. \'and\', \'or\', \'not\', \'=>\', and \'<=>\')."')), documentation('SententialOperator', string('"This Class currently comprises all   of the logical operators (viz. \'and\', \'or\', \'not\', \'=>\', and \'<=>\')."')), [], [], 'Merge', 'BASE ONTOLOGY', 1743, 'Anonymous', on).
mooCache(subclass('BinaryPredicate', 'Predicate'), subclass('BinaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1745, 'Anonymous', on).
mooCache(subclass('BinaryPredicate', 'BinaryRelation'), subclass('BinaryPredicate', 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1747, 'Anonymous', on).
mooCache(instance('BinaryPredicate', 'InheritableRelation'), instance('BinaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1749, 'Anonymous', on).
mooCache(documentation('BinaryPredicate', string('"A Predicate relating two items - its   valence is two."')), documentation('BinaryPredicate', string('"A Predicate relating two items - its   valence is two."')), [], [], 'Merge', 'BASE ONTOLOGY', 1751, 'Anonymous', on).
mooCache(instance(I21, 'BinaryPredicate')=>valence(I21, 2), entails(not valence(I21, 2), not instance(I21, 'BinaryPredicate'))and entails(instance(I21, 'BinaryPredicate'), valence(I21, 2)), [domainV(I21, ['$instanceof':'BinaryPredicate', valence:1]), domainV(_G3799, []), forall(I21)], ['REL'=I21], 'Merge', 'BASE ONTOLOGY', 1753, 'Anonymous', on).
mooCache(subclass('TernaryPredicate', 'Predicate'), subclass('TernaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1755, 'Anonymous', on).
mooCache(subclass('TernaryPredicate', 'TernaryRelation'), subclass('TernaryPredicate', 'TernaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1757, 'Anonymous', on).
mooCache(instance('TernaryPredicate', 'InheritableRelation'), instance('TernaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1759, 'Anonymous', on).
mooCache(documentation('TernaryPredicate', string('"The Class of Predicates that require   exactly three arguments."')), documentation('TernaryPredicate', string('"The Class of Predicates that require   exactly three arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1761, 'Anonymous', on).
mooCache(instance(K35, 'TernaryPredicate')=>valence(K35, 3), entails(not valence(K35, 3), not instance(K35, 'TernaryPredicate'))and entails(instance(K35, 'TernaryPredicate'), valence(K35, 3)), [domainV(K35, ['$instanceof':'TernaryPredicate', valence:1]), domainV(_G3805, []), forall(K35)], ['REL'=K35], 'Merge', 'BASE ONTOLOGY', 1763, 'Anonymous', on).
mooCache(subclass('QuaternaryPredicate', 'Predicate'), subclass('QuaternaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1765, 'Anonymous', on).
mooCache(subclass('QuaternaryPredicate', 'QuaternaryRelation'), subclass('QuaternaryPredicate', 'QuaternaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1767, 'Anonymous', on).
mooCache(instance('QuaternaryPredicate', 'InheritableRelation'), instance('QuaternaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1769, 'Anonymous', on).
mooCache(documentation('QuaternaryPredicate', string('"The Class of Predicates that   require four arguments."')), documentation('QuaternaryPredicate', string('"The Class of Predicates that   require four arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1771, 'Anonymous', on).
mooCache(instance(H11, 'QuaternaryPredicate')=>valence(H11, 4), entails(not valence(H11, 4), not instance(H11, 'QuaternaryPredicate'))and entails(instance(H11, 'QuaternaryPredicate'), valence(H11, 4)), [domainV(H11, ['$instanceof':'QuaternaryPredicate', valence:1]), domainV(_G3823, []), forall(H11)], ['REL'=H11], 'Merge', 'BASE ONTOLOGY', 1773, 'Anonymous', on).
mooCache(subclass('QuintaryPredicate', 'Predicate'), subclass('QuintaryPredicate', 'Predicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1775, 'Anonymous', on).
mooCache(subclass('QuintaryPredicate', 'QuintaryRelation'), subclass('QuintaryPredicate', 'QuintaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1777, 'Anonymous', on).
mooCache(instance('QuintaryPredicate', 'InheritableRelation'), instance('QuintaryPredicate', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1779, 'Anonymous', on).
mooCache(documentation('QuintaryPredicate', string('"The Class of Predicates that   require five arguments."')), documentation('QuintaryPredicate', string('"The Class of Predicates that   require five arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1781, 'Anonymous', on).
mooCache(instance(L25, 'QuintaryPredicate')=>valence(L25, 5), entails(not valence(L25, 5), not instance(L25, 'QuintaryPredicate'))and entails(instance(L25, 'QuintaryPredicate'), valence(L25, 5)), [domainV(L25, ['$instanceof':'QuintaryPredicate', valence:1]), domainV(_G3811, []), forall(L25)], ['REL'=L25], 'Merge', 'BASE ONTOLOGY', 1783, 'Anonymous', on).
mooCache(subclass('VariableArityRelation', 'Relation'), subclass('VariableArityRelation', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1785, 'Anonymous', on).
mooCache(documentation('VariableArityRelation', string('"The Class of Relations that   do not have a fixed number of arguments."')), documentation('VariableArityRelation', string('"The Class of Relations that   do not have a fixed number of arguments."')), [], [], 'Merge', 'BASE ONTOLOGY', 1787, 'Anonymous', on).
mooCache(instance(G34, 'VariableArityRelation')=>not exists(H34, valence(G34, H34)), entails(valence(G34, H34), not instance(G34, 'VariableArityRelation'))and entails(instance(G34, 'VariableArityRelation'), not valence(G34, H34)), [domainV(H34, [valence:2]), domainV(G34, ['$instanceof':'VariableArityRelation', valence:1]), domainV(_G5553, []), forall(G34), forall(H34), forall(H34)], ['REL'=G34, 'INT'=H34], 'Merge', 'BASE ONTOLOGY', 1789, 'Anonymous', on).
mooCache(subclass('RelationExtendedToQuantities', 'Relation'), subclass('RelationExtendedToQuantities', 'Relation'), [], [], 'Merge', 'BASE ONTOLOGY', 1791, 'Anonymous', on).
mooCache(instance('RelationExtendedToQuantities', 'InheritableRelation'), instance('RelationExtendedToQuantities', 'InheritableRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1793, 'Anonymous', on).
mooCache(documentation('RelationExtendedToQuantities', string('"A   RelationExtendedToQuantities is a Relation that, when it is true on   a sequence of arguments that are RealNumbers, it is also true on a   sequence of ConstantQuantites with those magnitudes in some unit of   measure.  For example, the lessThan relation is extended to quantities.    This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2,   (lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1,   ?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT),   ?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2),   for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.    Note that, when a RelationExtendedToQuantities is extended from   RealNumbers to ConstantQuantities, the ConstantQuantities must be   measured along the same physical dimension."')), documentation('RelationExtendedToQuantities', string('"A   RelationExtendedToQuantities is a Relation that, when it is true on   a sequence of arguments that are RealNumbers, it is also true on a   sequence of ConstantQuantites with those magnitudes in some unit of   measure.  For example, the lessThan relation is extended to quantities.    This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2,   (lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1,   ?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT),   ?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2),   for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.    Note that, when a RelationExtendedToQuantities is extended from   RealNumbers to ConstantQuantities, the ConstantQuantities must be   measured along the same physical dimension."')), [], [], 'Merge', 'BASE ONTOLOGY', 1795, 'Anonymous', on).
mooCache(subclass('Set', 'Class'), subclass('Set', 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1797, 'Anonymous', on).
mooCache(documentation('Set', string('"A Class that satisfies extensionality as well as  other conditions specified by some choice of set theory.  Unlike   Classes generally, Sets need not have an associated condition that   determines their membership.  Rather, they are thought of metaphorically   as `built up\' from some initial stock of objects by means of certain  constructive operations (such as the pairing or power set operations).  Note that extensionality alone is not sufficient for identifying   Classes with Sets, since some Classes (e.g. Entity) cannot be   assumed to be Sets without contradiction."')), documentation('Set', string('"A Class that satisfies extensionality as well as  other conditions specified by some choice of set theory.  Unlike   Classes generally, Sets need not have an associated condition that   determines their membership.  Rather, they are thought of metaphorically   as `built up\' from some initial stock of objects by means of certain  constructive operations (such as the pairing or power set operations).  Note that extensionality alone is not sufficient for identifying   Classes with Sets, since some Classes (e.g. Entity) cannot be   assumed to be Sets without contradiction."')), [], [], 'Merge', 'BASE ONTOLOGY', 1799, 'Anonymous', on).
mooCache(subclass('Proposition', 'Abstract'), subclass('Proposition', 'Abstract'), [], [], 'Merge', 'BASE ONTOLOGY', 1801, 'Anonymous', on).
mooCache(documentation('Proposition', string('"Propositions are Abstract entities that   express a complete thought or a set of such thoughts.  As an example,   the formula \'(instance Yojo Cat)\' expresses the Proposition that the   entity named Yojo is an element of the Class of Cats.  Note that   propositions are not restricted to the content expressed by individual   sentences of a Language.  They may encompass the content expressed by   theories, books, and even whole libraries.  It is important to distinguish   Propositions from the ContentBearingObjects that express them.  A   Proposition is a piece of information, e.g. that the cat is on the mat,   but a ContentBearingObject is an Object that represents this information.    A Proposition is an abstraction that may have multiple representations:   strings, sounds, icons, etc.  For example, the Proposition that the cat is   on the mat is represented here as a string of graphical characters displayed   on a monitor and/or printed on paper, but it can be represented by a sequence   of sounds or by some non-latin alphabet or by some cryptographic form"')), documentation('Proposition', string('"Propositions are Abstract entities that   express a complete thought or a set of such thoughts.  As an example,   the formula \'(instance Yojo Cat)\' expresses the Proposition that the   entity named Yojo is an element of the Class of Cats.  Note that   propositions are not restricted to the content expressed by individual   sentences of a Language.  They may encompass the content expressed by   theories, books, and even whole libraries.  It is important to distinguish   Propositions from the ContentBearingObjects that express them.  A   Proposition is a piece of information, e.g. that the cat is on the mat,   but a ContentBearingObject is an Object that represents this information.    A Proposition is an abstraction that may have multiple representations:   strings, sounds, icons, etc.  For example, the Proposition that the cat is   on the mat is represented here as a string of graphical characters displayed   on a monitor and/or printed on paper, but it can be represented by a sequence   of sounds or by some non-latin alphabet or by some cryptographic form"')), [], [], 'Merge', 'BASE ONTOLOGY', 1803, 'Anonymous', on).
mooCache(instance(closedOn, 'BinaryPredicate'), instance(closedOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1805, 'Anonymous', on).
mooCache(instance(closedOn, 'AsymmetricRelation'), instance(closedOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1807, 'Anonymous', on).
mooCache(domain(closedOn, 1, 'Function'), domain(closedOn, 1, 'Function'), [], [], 'Merge', 'BASE ONTOLOGY', 1809, 'Anonymous', on).
mooCache(domain(closedOn, 2, 'Class'), domain(closedOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1811, 'Anonymous', on).
mooCache(documentation(closedOn, string('"A BinaryFunction is closed on a Class   if it is defined for all instances of the Class and its value is   always an instance of the Class."')), documentation(closedOn, string('"A BinaryFunction is closed on a Class   if it is defined for all instances of the Class and its value is   always an instance of the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 1813, 'Anonymous', on).
mooCache(closedOn(E33, F33)and instance(E33, 'UnaryFunction')=>forall(G33, instance(G33, F33)=>instance('AssignmentFn'(E33, G33), F33)), entails(instance(E33, 'UnaryFunction')and instance(G33, F33)and not instance('AssignmentFn'(E33, G33), F33), not closedOn(E33, F33))and entails(closedOn(E33, F33)and instance(G33, F33)and not instance('AssignmentFn'(E33, G33), F33), not instance(E33, 'UnaryFunction'))and entails((closedOn(E33, F33)and instance(E33, 'UnaryFunction'))and not instance('AssignmentFn'(E33, G33), F33), not instance(G33, F33))and entails((closedOn(E33, F33)and instance(E33, 'UnaryFunction'))and instance(G33, F33), instance('AssignmentFn'(E33, G33), F33)), [domainV(G33, [E33:1]), domainV(F33, [closedOn:2, instance:2]), domainV(E33, ['$instanceof':'UnaryFunction', 'AssignmentFn':1, closedOn:1]), domainV(_G9582, []), forall(E33), forall(F33), forall(G33)], ['FUNCTION'=E33, 'CLASS'=F33, 'INST'=G33], 'Merge', 'BASE ONTOLOGY', 1815, 'Anonymous', on).
mooCache(closedOn(W36, X36)and instance(W36, 'BinaryFunction')=>forall(Y36, forall(Z36, instance(Z36, X36)and instance(Y36, X36)=>instance('AssignmentFn'(W36, Z36, Y36), X36))), entails(instance(W36, 'BinaryFunction')and not instance('AssignmentFn'(W36, Z36, Y36), X36)and instance(Z36, X36)and instance(Y36, X36), not closedOn(W36, X36))and entails(closedOn(W36, X36)and not instance('AssignmentFn'(W36, Z36, Y36), X36)and instance(Z36, X36)and instance(Y36, X36), not instance(W36, 'BinaryFunction'))and entails((closedOn(W36, X36)and instance(W36, 'BinaryFunction'))and instance(Z36, X36)and instance(Y36, X36), instance('AssignmentFn'(W36, Z36, Y36), X36))and entails((closedOn(W36, X36)and instance(W36, 'BinaryFunction'))and not instance('AssignmentFn'(W36, Z36, Y36), X36)and instance(Y36, X36), not instance(Z36, X36))and entails((closedOn(W36, X36)and instance(W36, 'BinaryFunction'))and not instance('AssignmentFn'(W36, Z36, Y36), X36)and instance(Z36, X36), not instance(Y36, X36)), [domainV(Z36, [W36:1]), domainV(Y36, [W36:2]), domainV(X36, [closedOn:2, instance:2]), domainV(W36, ['$instanceof':'BinaryFunction', 'AssignmentFn':1, closedOn:1]), domainV(_G13146, []), forall(W36), forall(X36), forall(Y36), forall(Z36)], ['FUNCTION'=W36, 'CLASS'=X36, 'INST1'=Z36, 'INST2'=Y36], 'Merge', 'BASE ONTOLOGY', 1817, 'Anonymous', on).
mooCache(instance(reflexiveOn, 'BinaryPredicate'), instance(reflexiveOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1819, 'Anonymous', on).
mooCache(instance(reflexiveOn, 'AsymmetricRelation'), instance(reflexiveOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1821, 'Anonymous', on).
mooCache(domain(reflexiveOn, 1, 'BinaryRelation'), domain(reflexiveOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1823, 'Anonymous', on).
mooCache(domain(reflexiveOn, 2, 'Class'), domain(reflexiveOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1825, 'Anonymous', on).
mooCache(documentation(reflexiveOn, string('"A BinaryRelation is reflexive on a   Class only if every instance of the Class bears the relation   to itself."')), documentation(reflexiveOn, string('"A BinaryRelation is reflexive on a   Class only if every instance of the Class bears the relation   to itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 1827, 'Anonymous', on).
mooCache(reflexiveOn(R15, S15)=>forall(T15, instance(T15, S15)=>holds(R15, T15, T15)), entails(instance(T15, S15)and not holds(R15, T15, T15), not reflexiveOn(R15, S15))and entails(reflexiveOn(R15, S15)and not holds(R15, T15, T15), not instance(T15, S15))and entails(reflexiveOn(R15, S15)and instance(T15, S15), holds(R15, T15, T15)), [domainV(T15, [R15:1, R15:2]), domainV(S15, [instance:2, reflexiveOn:2]), domainV(R15, [holds:1, reflexiveOn:1]), domainV(_G7677, []), forall(R15), forall(S15), forall(T15)], ['RELATION'=R15, 'CLASS'=S15, 'INST'=T15], 'Merge', 'BASE ONTOLOGY', 1829, 'Anonymous', on).
mooCache(instance(irreflexiveOn, 'BinaryPredicate'), instance(irreflexiveOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1831, 'Anonymous', on).
mooCache(instance(irreflexiveOn, 'AsymmetricRelation'), instance(irreflexiveOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1833, 'Anonymous', on).
mooCache(domain(irreflexiveOn, 1, 'BinaryRelation'), domain(irreflexiveOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1835, 'Anonymous', on).
mooCache(domain(irreflexiveOn, 2, 'Class'), domain(irreflexiveOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1837, 'Anonymous', on).
mooCache(documentation(irreflexiveOn, string('"A BinaryRelation is irreflexive on a   Class only if no instance of the Class bears the relation to   itself."')), documentation(irreflexiveOn, string('"A BinaryRelation is irreflexive on a   Class only if no instance of the Class bears the relation to   itself."')), [], [], 'Merge', 'BASE ONTOLOGY', 1839, 'Anonymous', on).
mooCache(irreflexiveOn(Z32, A33)=>forall(B33, instance(B33, A33)=>not holds(Z32, B33, B33)), entails(instance(B33, A33)and holds(Z32, B33, B33), not irreflexiveOn(Z32, A33))and entails(irreflexiveOn(Z32, A33)and holds(Z32, B33, B33), not instance(B33, A33))and entails(irreflexiveOn(Z32, A33)and instance(B33, A33), not holds(Z32, B33, B33)), [domainV(B33, [Z32:1, Z32:2]), domainV(A33, [instance:2, irreflexiveOn:2]), domainV(Z32, [holds:1, irreflexiveOn:1]), domainV(_G8095, []), forall(Z32), forall(A33), forall(B33)], ['RELATION'=Z32, 'CLASS'=A33, 'INST'=B33], 'Merge', 'BASE ONTOLOGY', 1841, 'Anonymous', on).
mooCache(instance(partialOrderingOn, 'BinaryPredicate'), instance(partialOrderingOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1843, 'Anonymous', on).
mooCache(instance(partialOrderingOn, 'AsymmetricRelation'), instance(partialOrderingOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1845, 'Anonymous', on).
mooCache(domain(partialOrderingOn, 1, 'BinaryRelation'), domain(partialOrderingOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1847, 'Anonymous', on).
mooCache(domain(partialOrderingOn, 2, 'Class'), domain(partialOrderingOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1849, 'Anonymous', on).
mooCache(documentation(partialOrderingOn, string('"A BinaryRelation is a partial   ordering on a Class only if the relation is reflexiveOn the   Class, and it is both an AntisymmetricRelation, and a   TransitiveRelation."')), documentation(partialOrderingOn, string('"A BinaryRelation is a partial   ordering on a Class only if the relation is reflexiveOn the   Class, and it is both an AntisymmetricRelation, and a   TransitiveRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1851, 'Anonymous', on).
mooCache(partialOrderingOn(Q15, R15)=>reflexiveOn(Q15, R15)and instance(Q15, 'TransitiveRelation')and instance(Q15, 'AntisymmetricRelation'), (entails(not reflexiveOn(Q15, R15), not partialOrderingOn(Q15, R15))and entails(partialOrderingOn(Q15, R15), reflexiveOn(Q15, R15)))and (entails(not instance(Q15, 'TransitiveRelation'), not partialOrderingOn(Q15, R15))and entails(partialOrderingOn(Q15, R15), instance(Q15, 'TransitiveRelation')))and entails(not instance(Q15, 'AntisymmetricRelation'), not partialOrderingOn(Q15, R15))and entails(partialOrderingOn(Q15, R15), instance(Q15, 'AntisymmetricRelation')), [domainV(R15, [partialOrderingOn:2, reflexiveOn:2]), domainV(Q15, ['$instanceof':'AntisymmetricRelation', '$instanceof':'TransitiveRelation', partialOrderingOn:1, reflexiveOn:1]), domainV(_G6964, []), forall(Q15), forall(R15)], ['RELATION'=Q15, 'CLASS'=R15], 'Merge', 'BASE ONTOLOGY', 1853, 'Anonymous', on).
mooCache(instance(totalOrderingOn, 'BinaryPredicate'), instance(totalOrderingOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1855, 'Anonymous', on).
mooCache(instance(totalOrderingOn, 'AsymmetricRelation'), instance(totalOrderingOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1857, 'Anonymous', on).
mooCache(domain(totalOrderingOn, 1, 'BinaryRelation'), domain(totalOrderingOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1859, 'Anonymous', on).
mooCache(domain(totalOrderingOn, 2, 'Class'), domain(totalOrderingOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1861, 'Anonymous', on).
mooCache(documentation(totalOrderingOn, string('"A BinaryRelation ?REL is a total   ordering on a Class only if it is a partial ordering for which either   (?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2   in the Class."')), documentation(totalOrderingOn, string('"A BinaryRelation ?REL is a total   ordering on a Class only if it is a partial ordering for which either   (?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2   in the Class."')), [], [], 'Merge', 'BASE ONTOLOGY', 1863, 'Anonymous', on).
mooCache(totalOrderingOn(T32, U32)<=>partialOrderingOn(T32, U32)and trichotomizingOn(T32, U32), (entails(totalOrderingOn(T32, U32), partialOrderingOn(T32, U32))and entails(totalOrderingOn(T32, U32), trichotomizingOn(T32, U32))and entails(not partialOrderingOn(T32, U32)or not trichotomizingOn(T32, U32), not totalOrderingOn(T32, U32)))and entails(partialOrderingOn(T32, U32)and trichotomizingOn(T32, U32), totalOrderingOn(T32, U32))and entails(not totalOrderingOn(T32, U32)and trichotomizingOn(T32, U32), not partialOrderingOn(T32, U32))and entails(not totalOrderingOn(T32, U32)and partialOrderingOn(T32, U32), not trichotomizingOn(T32, U32)), [domainV(U32, [partialOrderingOn:2, totalOrderingOn:2, trichotomizingOn:2]), domainV(T32, [partialOrderingOn:1, totalOrderingOn:1, trichotomizingOn:1]), domainV(_G6571, []), forall(T32), forall(U32)], ['RELATION'=T32, 'CLASS'=U32], 'Merge', 'BASE ONTOLOGY', 1865, 'Anonymous', on).
mooCache(instance(trichotomizingOn, 'BinaryPredicate'), instance(trichotomizingOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1867, 'Anonymous', on).
mooCache(instance(trichotomizingOn, 'AsymmetricRelation'), instance(trichotomizingOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1869, 'Anonymous', on).
mooCache(domain(trichotomizingOn, 1, 'BinaryRelation'), domain(trichotomizingOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1871, 'Anonymous', on).
mooCache(domain(trichotomizingOn, 2, 'Class'), domain(trichotomizingOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1873, 'Anonymous', on).
mooCache(documentation(trichotomizingOn, string('"A BinaryRelation ?REL is   trichotomizing on a Class only if, for all instances ?INST1 and ?INST2   of the Class, at least one of the following holds:  (?REL ?INST1 ?INST2),  (?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2)."')), documentation(trichotomizingOn, string('"A BinaryRelation ?REL is   trichotomizing on a Class only if, for all instances ?INST1 and ?INST2   of the Class, at least one of the following holds:  (?REL ?INST1 ?INST2),  (?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2)."')), [], [], 'Merge', 'BASE ONTOLOGY', 1875, 'Anonymous', on).
mooCache(trichotomizingOn(X11, Y11)=>forall(Z11, forall(A12, instance(A12, Y11)and instance(Z11, Y11)=>holds(X11, A12, Z11)or holds(X11, Z11, A12)or equal(A12, Z11))), entails((instance(A12, Y11)and instance(Z11, Y11))and not holds(X11, A12, Z11)and not holds(X11, Z11, A12)and not equal(A12, Z11), not trichotomizingOn(X11, Y11))and entails(trichotomizingOn(X11, Y11)and instance(Z11, Y11)and not holds(X11, A12, Z11)and not holds(X11, Z11, A12)and not equal(A12, Z11), not instance(A12, Y11))and entails(trichotomizingOn(X11, Y11)and instance(A12, Y11)and not holds(X11, A12, Z11)and not holds(X11, Z11, A12)and not equal(A12, Z11), not instance(Z11, Y11))and entails(trichotomizingOn(X11, Y11)and (instance(A12, Y11)and instance(Z11, Y11))and not holds(X11, Z11, A12)and not equal(A12, Z11), holds(X11, A12, Z11))and entails(trichotomizingOn(X11, Y11)and (instance(A12, Y11)and instance(Z11, Y11))and not holds(X11, A12, Z11)and not equal(A12, Z11), holds(X11, Z11, A12))and entails(trichotomizingOn(X11, Y11)and (instance(A12, Y11)and instance(Z11, Y11))and not holds(X11, A12, Z11)and not holds(X11, Z11, A12), equal(A12, Z11)), [domainV(A12, [X11:1, X11:2]), domainV(Z11, [X11:1, X11:2]), domainV(Y11, [instance:2, trichotomizingOn:2]), domainV(X11, [holds:1, trichotomizingOn:1]), domainV(_G15065, []), forall(X11), forall(Y11), forall(Z11), forall(A12)], ['RELATION'=X11, 'CLASS'=Y11, 'INST1'=A12, 'INST2'=Z11], 'Merge', 'BASE ONTOLOGY', 1877, 'Anonymous', on).
mooCache(instance(equivalenceRelationOn, 'BinaryPredicate'), instance(equivalenceRelationOn, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1879, 'Anonymous', on).
mooCache(instance(equivalenceRelationOn, 'AsymmetricRelation'), instance(equivalenceRelationOn, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1881, 'Anonymous', on).
mooCache(domain(equivalenceRelationOn, 1, 'BinaryRelation'), domain(equivalenceRelationOn, 1, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1883, 'Anonymous', on).
mooCache(domain(equivalenceRelationOn, 2, 'Class'), domain(equivalenceRelationOn, 2, 'Class'), [], [], 'Merge', 'BASE ONTOLOGY', 1885, 'Anonymous', on).
mooCache(documentation(equivalenceRelationOn, string('"A BinaryRelation is an   equivalenceRelationOn a Class only if the relation is reflexiveOn   the Class and it is both a TransitiveRelation and a   SymmetricRelation."')), documentation(equivalenceRelationOn, string('"A BinaryRelation is an   equivalenceRelationOn a Class only if the relation is reflexiveOn   the Class and it is both a TransitiveRelation and a   SymmetricRelation."')), [], [], 'Merge', 'BASE ONTOLOGY', 1887, 'Anonymous', on).
mooCache(equivalenceRelationOn(L29, M29)=>instance(L29, 'TransitiveRelation')and instance(L29, 'SymmetricRelation')and reflexiveOn(L29, M29), (entails(not instance(L29, 'TransitiveRelation'), not equivalenceRelationOn(L29, M29))and entails(equivalenceRelationOn(L29, M29), instance(L29, 'TransitiveRelation')))and (entails(not instance(L29, 'SymmetricRelation'), not equivalenceRelationOn(L29, M29))and entails(equivalenceRelationOn(L29, M29), instance(L29, 'SymmetricRelation')))and entails(not reflexiveOn(L29, M29), not equivalenceRelationOn(L29, M29))and entails(equivalenceRelationOn(L29, M29), reflexiveOn(L29, M29)), [domainV(M29, [equivalenceRelationOn:2, reflexiveOn:2]), domainV(L29, ['$instanceof':'SymmetricRelation', '$instanceof':'TransitiveRelation', equivalenceRelationOn:1, reflexiveOn:1]), domainV(_G6952, []), forall(L29), forall(M29)], ['RELATION'=L29, 'CLASS'=M29], 'Merge', 'BASE ONTOLOGY', 1889, 'Anonymous', on).
mooCache(instance(distributes, 'BinaryPredicate'), instance(distributes, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1891, 'Anonymous', on).
mooCache(instance(distributes, 'BinaryRelation'), instance(distributes, 'BinaryRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1893, 'Anonymous', on).
mooCache(domain(distributes, 1, 'BinaryFunction'), domain(distributes, 1, 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1895, 'Anonymous', on).
mooCache(domain(distributes, 2, 'BinaryFunction'), domain(distributes, 2, 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 1897, 'Anonymous', on).
mooCache(documentation(distributes, string('"A BinaryFunction ?FUNCTION1 is   distributive over another BinaryFunction ?FUNCTION2 just in case   (?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to   (?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)),   for all ?INST1, ?INST2, and ?INST3."')), documentation(distributes, string('"A BinaryFunction ?FUNCTION1 is   distributive over another BinaryFunction ?FUNCTION2 just in case   (?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to   (?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)),   for all ?INST1, ?INST2, and ?INST3."')), [], [], 'Merge', 'BASE ONTOLOGY', 1899, 'Anonymous', on).
mooCache(distributes(Y9, Z9)=>forall(A10, forall(B10, forall(C10, instance(C10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(B10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9))=>equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))))), entails(not equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))and instance(C10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(B10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9)), not distributes(Y9, Z9))and entails(distributes(Y9, Z9)and instance(C10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(B10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9)), equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10))))and entails(distributes(Y9, Z9)and not equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))and instance(B10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(B10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9)), not instance(C10, 'DomainFn'(Y9)))and entails(distributes(Y9, Z9)and not equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))and instance(C10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(B10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9)), not instance(B10, 'DomainFn'(Y9)))and entails(distributes(Y9, Z9)and not equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))and instance(C10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(B10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9)), not instance(A10, 'DomainFn'(Y9)))and entails(distributes(Y9, Z9)and not equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))and instance(C10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9)), not instance(C10, 'DomainFn'(Z9)))and entails(distributes(Y9, Z9)and not equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))and instance(C10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(A10, 'DomainFn'(Z9)), not instance(B10, 'DomainFn'(Z9)))and entails(distributes(Y9, Z9)and not equal('AssignmentFn'(Y9, C10, 'AssignmentFn'(Z9, B10, A10)), 'AssignmentFn'(Z9, 'AssignmentFn'(Y9, C10, B10), 'AssignmentFn'(Y9, C10, A10)))and instance(C10, 'DomainFn'(Y9))and instance(B10, 'DomainFn'(Y9))and instance(A10, 'DomainFn'(Y9))and instance(C10, 'DomainFn'(Z9))and instance(B10, 'DomainFn'(Z9)), not instance(A10, 'DomainFn'(Z9))), [domainV(C10, [Y9:1]), domainV(B10, [Y9:2, Z9:1]), domainV(A10, [Y9:2, Z9:2]), domainV(Z9, ['AssignmentFn':1, 'DomainFn':1, distributes:2]), domainV(Y9, ['AssignmentFn':1, 'DomainFn':1, distributes:1]), domainV(_G3749, []), forall(Y9), forall(Z9), forall(A10), forall(B10), forall(C10)], ['FUNCTION1'=Y9, 'FUNCTION2'=Z9, 'INST1'=C10, 'INST2'=B10, 'INST3'=A10], 'Merge', 'BASE ONTOLOGY', 1901, 'Anonymous', on).
mooCache(instance(causes, 'BinaryPredicate'), instance(causes, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1903, 'Anonymous', on).
mooCache(instance(causes, 'AsymmetricRelation'), instance(causes, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1905, 'Anonymous', on).
mooCache(domain(causes, 1, 'Process'), domain(causes, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1907, 'Anonymous', on).
mooCache(domain(causes, 2, 'Process'), domain(causes, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1909, 'Anonymous', on).
mooCache(documentation(causes, string('"The causation relation between situations or   propositions.  (causes ?PROCESS1 ?PROCESS2) means that the state of   affairs expressed by ?PROCESS1 brings about the state of affairs   expressed by ?PROCESS2."')), documentation(causes, string('"The causation relation between situations or   propositions.  (causes ?PROCESS1 ?PROCESS2) means that the state of   affairs expressed by ?PROCESS1 brings about the state of affairs   expressed by ?PROCESS2."')), [], [], 'Merge', 'BASE ONTOLOGY', 1911, 'Anonymous', on).
mooCache(instance(F28, 'Process')=>exists(G28, causes(G28, F28)), entails(not causes(G28, F28), not instance(F28, 'Process'))and entails(instance(F28, 'Process')and'$existential'(G28, '?PROC2', causes('?PROC2', F28)), causes(G28, F28)), [domainV(G28, [causes:1]), domainV(F28, ['$instanceof':'Process', causes:2]), domainV(_G5394, []), forall(F28), replaceConsVar(G28, '$existential'('?PROC2', causes('?PROC2', F28)))], ['PROC1'=F28, 'PROC2'=G28], 'Merge', 'BASE ONTOLOGY', 1913, 'Anonymous', on).
mooCache(instance(copy, 'BinaryPredicate'), instance(copy, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1915, 'Anonymous', on).
mooCache(instance(copy, 'EquivalenceRelation'), instance(copy, 'EquivalenceRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1917, 'Anonymous', on).
mooCache(domain(copy, 1, 'Object'), domain(copy, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1919, 'Anonymous', on).
mooCache(domain(copy, 2, 'Object'), domain(copy, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1921, 'Anonymous', on).
mooCache(documentation(copy, string('"relates an Object to an exact copy of the   Object, where an exact copy is indistinguishable from the original   with regard to every property except (possibly) spatial and/or temporal   location."')), documentation(copy, string('"relates an Object to an exact copy of the   Object, where an exact copy is indistinguishable from the original   with regard to every property except (possibly) spatial and/or temporal   location."')), [], [], 'Merge', 'BASE ONTOLOGY', 1923, 'Anonymous', on).
mooCache(copy(M6, N6)=>forall(O6, attribute(M6, O6)=>attribute(N6, O6)), entails(attribute(M6, O6)and not attribute(N6, O6), not copy(M6, N6))and entails(copy(M6, N6)and not attribute(N6, O6), not attribute(M6, O6))and entails(copy(M6, N6)and attribute(M6, O6), attribute(N6, O6)), [domainV(O6, [attribute:2]), domainV(N6, [attribute:1, copy:2]), domainV(M6, [attribute:1, copy:1]), domainV(_G7382, []), forall(M6), forall(N6), forall(O6)], ['OBJ1'=M6, 'OBJ2'=N6, 'ATTR'=O6], 'Merge', 'BASE ONTOLOGY', 1925, 'Anonymous', on).
mooCache(instance(time, 'BinaryPredicate'), instance(time, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1927, 'Anonymous', on).
mooCache(instance(time, 'TemporalRelation'), instance(time, 'TemporalRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1929, 'Anonymous', on).
mooCache(instance(time, 'AsymmetricRelation'), instance(time, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1931, 'Anonymous', on).
mooCache(domain(time, 1, 'Physical'), domain(time, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 1933, 'Anonymous', on).
mooCache(domain(time, 2, 'TimePosition'), domain(time, 2, 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1935, 'Anonymous', on).
mooCache(documentation(time, string('"This relation holds between an instance of   Physical and an instance of TimePosition just in case the temporal   lifespan of the former includes the latter.  The constants located   and time are the basic spatial and temporal predicates,   respectively."')), documentation(time, string('"This relation holds between an instance of   Physical and an instance of TimePosition just in case the temporal   lifespan of the former includes the latter.  The constants located   and time are the basic spatial and temporal predicates,   respectively."')), [], [], 'Merge', 'BASE ONTOLOGY', 1937, 'Anonymous', on).
mooCache(instance(holdsDuring, 'BinaryPredicate'), instance(holdsDuring, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1939, 'Anonymous', on).
mooCache(instance(holdsDuring, 'AsymmetricRelation'), instance(holdsDuring, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1941, 'Anonymous', on).
mooCache(domain(holdsDuring, 1, 'TimePosition'), domain(holdsDuring, 1, 'TimePosition'), [], [], 'Merge', 'BASE ONTOLOGY', 1943, 'Anonymous', on).
mooCache(domain(holdsDuring, 2, 'Formula'), domain(holdsDuring, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1945, 'Anonymous', on).
mooCache(documentation(holdsDuring, string('"(holdsDuring ?TIME ?FORMULA) means that the   proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note   that this implies that ?FORMULA is true at every TimePoint which is a   temporalPart of ?TIME."')), documentation(holdsDuring, string('"(holdsDuring ?TIME ?FORMULA) means that the   proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note   that this implies that ?FORMULA is true at every TimePoint which is a   temporalPart of ?TIME."')), [], [], 'Merge', 'BASE ONTOLOGY', 1947, 'Anonymous', on).
mooCache(holdsDuring(C1, D1)and entails(D1, E1)=>holdsDuring(C1, E1), entails(holdsDuring(C1, D1)and entails(D1, E1), holdsDuring(C1, E1))and entails(not holdsDuring(C1, E1)and entails(D1, E1), not holdsDuring(C1, D1))and entails(not holdsDuring(C1, E1)and holdsDuring(C1, D1), not entails(D1, E1)), [domainV(E1, [entails:2, holdsDuring:2]), domainV(D1, [entails:1, holdsDuring:2]), domainV(C1, [holdsDuring:1]), domainV(_G6270, []), forall(C1), forall(D1), forall(E1)], ['TIME'=C1, 'SITUATION1'=D1, 'SITUATION2'=E1], 'Merge', 'BASE ONTOLOGY', 1949, 'Anonymous', on).
mooCache(holdsDuring(C4, not D4)=>not holdsDuring(C4, D4), entails(holdsDuring(C4, D4), not holdsDuring(C4, not D4))and entails(holdsDuring(C4, not D4), not holdsDuring(C4, D4)), [domainV(D4, [holdsDuring:2]), domainV(C4, [holdsDuring:1]), domainV(_G5080, []), forall(C4), forall(D4)], ['TIME'=C4, 'SITUATION'=D4], 'Merge', 'BASE ONTOLOGY', 1951, 'Anonymous', on).
mooCache(instance(capability, 'TernaryPredicate'), instance(capability, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1953, 'Anonymous', on).
mooCache(domainSubclass(capability, 1, 'Process'), domainSubclass(capability, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 1955, 'Anonymous', on).
mooCache(domain(capability, 2, 'CaseRole'), domain(capability, 2, 'CaseRole'), [], [], 'Merge', 'BASE ONTOLOGY', 1957, 'Anonymous', on).
mooCache(domain(capability, 3, 'Object'), domain(capability, 3, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1959, 'Anonymous', on).
mooCache(documentation(capability, string('"(capability ?PROCESS ?ROLE ?OBJ) means   that ?OBJ has the ability to play the role of ?ROLE in Processes of   type ?PROCESS."')), documentation(capability, string('"(capability ?PROCESS ?ROLE ?OBJ) means   that ?OBJ has the ability to play the role of ?ROLE in Processes of   type ?PROCESS."')), [], [], 'Merge', 'BASE ONTOLOGY', 1961, 'Anonymous', on).
mooCache(instance(V20, 'CaseRole')and holds(V20, W20, X20)and instance(W20, Y20)=>capability(Y20, V20, X20), entails(instance(V20, 'CaseRole')and holds(V20, W20, X20)and instance(W20, Y20), capability(Y20, V20, X20))and entails(not capability(Y20, V20, X20)and holds(V20, W20, X20)and instance(W20, Y20), not instance(V20, 'CaseRole'))and entails(not capability(Y20, V20, X20)and instance(V20, 'CaseRole')and instance(W20, Y20), not holds(V20, W20, X20))and entails(not capability(Y20, V20, X20)and instance(V20, 'CaseRole')and holds(V20, W20, X20), not instance(W20, Y20)), [domainV(Y20, [capability:1, instance:2]), domainV(X20, [capability:3, V20:2]), domainV(W20, [V20:1]), domainV(V20, ['$instanceof':'CaseRole', capability:2, holds:1]), domainV(_G7970, []), forall(V20), forall(W20), forall(X20), forall(Y20)], ['ROLE'=V20, 'ARG1'=W20, 'ARG2'=X20, 'PROC'=Y20], 'Merge', 'BASE ONTOLOGY', 1963, 'Anonymous', on).
mooCache(instance(exploits, 'BinaryPredicate'), instance(exploits, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1965, 'Anonymous', on).
mooCache(instance(exploits, 'AsymmetricRelation'), instance(exploits, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1967, 'Anonymous', on).
mooCache(domain(exploits, 1, 'Object'), domain(exploits, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 1969, 'Anonymous', on).
mooCache(domain(exploits, 2, 'Agent'), domain(exploits, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1971, 'Anonymous', on).
mooCache(documentation(exploits, string('"(exploits ?OBJ ?AGENT) means that ?OBJ is used   by ?AGENT as a resource in an unspecified instance of Process.  This   Predicate, as its corresponding axiom indicates, is a composition of the   relations agent and resource."')), documentation(exploits, string('"(exploits ?OBJ ?AGENT) means that ?OBJ is used   by ?AGENT as a resource in an unspecified instance of Process.  This   Predicate, as its corresponding axiom indicates, is a composition of the   relations agent and resource."')), [], [], 'Merge', 'BASE ONTOLOGY', 1973, 'Anonymous', on).
mooCache(exploits(P37, Q37)=>exists(R37, agent(R37, Q37)and resource(R37, P37)), (entails(not agent(R37, Q37), not exploits(P37, Q37))and entails(exploits(P37, Q37)and'$existential'(R37, '?PROCESS', agent('?PROCESS', Q37)and resource('?PROCESS', P37)), agent(R37, Q37)))and entails(not resource(R37, P37), not exploits(P37, Q37))and entails(exploits(P37, Q37)and'$existential'(R37, '?PROCESS', agent('?PROCESS', Q37)and resource('?PROCESS', P37)), resource(R37, P37)), [domainV(R37, [agent:1, resource:1]), domainV(Q37, [agent:2, exploits:2]), domainV(P37, [exploits:1, resource:2]), domainV(_G7317, []), forall(P37), forall(Q37), replaceConsVar(R37, '$existential'('?PROCESS', agent('?PROCESS', Q37)and resource('?PROCESS', P37)))], ['OBJ'=P37, 'AGENT'=Q37, 'PROCESS'=R37], 'Merge', 'BASE ONTOLOGY', 1975, 'Anonymous', on).
mooCache(instance(hasPurpose, 'BinaryPredicate'), instance(hasPurpose, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1977, 'Anonymous', on).
mooCache(instance(hasPurpose, 'AsymmetricRelation'), instance(hasPurpose, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 1979, 'Anonymous', on).
mooCache(domain(hasPurpose, 1, 'Physical'), domain(hasPurpose, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 1981, 'Anonymous', on).
mooCache(domain(hasPurpose, 2, 'Formula'), domain(hasPurpose, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1983, 'Anonymous', on).
mooCache(documentation(hasPurpose, string('"This Predicate expresses the concept of a   conventional goal, i.e. a goal with a neutralized agent\'s intention.    Accordingly, (hasPurpose ?THING ?FORMULA) means that the instance of   Physical ?THING has, as its purpose, the Proposition expressed by   ?FORMULA.  Note that there is an important difference in meaning between   the Predicates hasPurpose and result.  Although the second argument   of the latter can satisfy the second argument of the former,   a conventional goal is an expected and desired outcome, while a result   may be neither expected nor desired.  For example, a machine process may   have outcomes but no goals, aimless wandering may have an outcome but no   goal; a learning process may have goals with no outcomes, and so on."')), documentation(hasPurpose, string('"This Predicate expresses the concept of a   conventional goal, i.e. a goal with a neutralized agent\'s intention.    Accordingly, (hasPurpose ?THING ?FORMULA) means that the instance of   Physical ?THING has, as its purpose, the Proposition expressed by   ?FORMULA.  Note that there is an important difference in meaning between   the Predicates hasPurpose and result.  Although the second argument   of the latter can satisfy the second argument of the former,   a conventional goal is an expected and desired outcome, while a result   may be neither expected nor desired.  For example, a machine process may   have outcomes but no goals, aimless wandering may have an outcome but no   goal; a learning process may have goals with no outcomes, and so on."')), [], [], 'Merge', 'BASE ONTOLOGY', 1985, 'Anonymous', on).
mooCache(instance(hasPurposeForAgent, 'TernaryPredicate'), instance(hasPurposeForAgent, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1987, 'Anonymous', on).
mooCache(domain(hasPurposeForAgent, 1, 'Physical'), domain(hasPurposeForAgent, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 1989, 'Anonymous', on).
mooCache(domain(hasPurposeForAgent, 2, 'Formula'), domain(hasPurposeForAgent, 2, 'Formula'), [], [], 'Merge', 'BASE ONTOLOGY', 1991, 'Anonymous', on).
mooCache(domain(hasPurposeForAgent, 3, 'Agent'), domain(hasPurposeForAgent, 3, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 1993, 'Anonymous', on).
mooCache(documentation(hasPurposeForAgent, string('"Expresses a cognitive attitude of an   agent with respect to a particular instance of Physical.  More precisely,   (hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of   ?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex   issues are involved here.  In particular, the rules of inference of the   first order predicate calculus are not truth-preserving for the second   argument position of this Predicate."')), documentation(hasPurposeForAgent, string('"Expresses a cognitive attitude of an   agent with respect to a particular instance of Physical.  More precisely,   (hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of   ?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex   issues are involved here.  In particular, the rules of inference of the   first order predicate calculus are not truth-preserving for the second   argument position of this Predicate."')), [], [], 'Merge', 'BASE ONTOLOGY', 1995, 'Anonymous', on).
mooCache(hasPurpose(T33, U33)=>exists(V33, hasPurposeForAgent(T33, U33, V33)), entails(not hasPurposeForAgent(T33, U33, V33), not hasPurpose(T33, U33))and entails(hasPurpose(T33, U33)and'$existential'(V33, '?AGENT', hasPurposeForAgent(T33, U33, '?AGENT')), hasPurposeForAgent(T33, U33, V33)), [domainV(V33, [hasPurposeForAgent:3]), domainV(U33, [hasPurpose:2, hasPurposeForAgent:2]), domainV(T33, [hasPurpose:1, hasPurposeForAgent:1]), domainV(_G6076, []), forall(T33), forall(U33), replaceConsVar(V33, '$existential'('?AGENT', hasPurposeForAgent(T33, U33, '?AGENT')))], ['THING'=T33, 'PURPOSE'=U33, 'AGENT'=V33], 'Merge', 'BASE ONTOLOGY', 1997, 'Anonymous', on).
mooCache(instance(hasSkill, 'BinaryPredicate'), instance(hasSkill, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 1999, 'Anonymous', on).
mooCache(instance(hasSkill, 'AsymmetricRelation'), instance(hasSkill, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2001, 'Anonymous', on).
mooCache(domainSubclass(hasSkill, 1, 'Process'), domainSubclass(hasSkill, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2003, 'Anonymous', on).
mooCache(domain(hasSkill, 2, 'Agent'), domain(hasSkill, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2005, 'Anonymous', on).
mooCache(documentation(hasSkill, string('"Similar to the capability Predicate   with the additional restriction that the ability be practised/  demonstrated to some measurable degree."')), documentation(hasSkill, string('"Similar to the capability Predicate   with the additional restriction that the ability be practised/  demonstrated to some measurable degree."')), [], [], 'Merge', 'BASE ONTOLOGY', 2007, 'Anonymous', on).
mooCache(hasSkill(A12, B12)=>capability(A12, agent, B12), entails(not capability(A12, agent, B12), not hasSkill(A12, B12))and entails(hasSkill(A12, B12), capability(A12, agent, B12)), [domainV(B12, [capability:3, hasSkill:2]), domainV(A12, [capability:1, hasSkill:1]), domainV(_G4446, []), forall(A12), forall(B12)], ['PROC'=A12, 'AGENT'=B12], 'Merge', 'BASE ONTOLOGY', 2009, 'Anonymous', on).
mooCache(instance(holdsRight, 'BinaryPredicate'), instance(holdsRight, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2011, 'Anonymous', on).
mooCache(instance(holdsRight, 'AsymmetricRelation'), instance(holdsRight, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2013, 'Anonymous', on).
mooCache(domainSubclass(holdsRight, 1, 'Process'), domainSubclass(holdsRight, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2015, 'Anonymous', on).
mooCache(domain(holdsRight, 2, 'CognitiveAgent'), domain(holdsRight, 2, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2017, 'Anonymous', on).
mooCache(documentation(holdsRight, string('"Expresses a relationship between a subclass   of Process and a CognitiveAgent whereby the CognitiveAgent has   the right to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), documentation(holdsRight, string('"Expresses a relationship between a subclass   of Process and a CognitiveAgent whereby the CognitiveAgent has   the right to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2019, 'Anonymous', on).
mooCache(holdsRight(K28, L28)=>capability(K28, agent, L28), entails(not capability(K28, agent, L28), not holdsRight(K28, L28))and entails(holdsRight(K28, L28), capability(K28, agent, L28)), [domainV(L28, [capability:3, holdsRight:2]), domainV(K28, [capability:1, holdsRight:1]), domainV(_G4494, []), forall(K28), forall(L28)], ['PROCESS'=K28, 'AGENT'=L28], 'Merge', 'BASE ONTOLOGY', 2021, 'Anonymous', on).
mooCache(instance(confersRight, 'TernaryPredicate'), instance(confersRight, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2023, 'Anonymous', on).
mooCache(domainSubclass(confersRight, 1, 'Process'), domainSubclass(confersRight, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2025, 'Anonymous', on).
mooCache(domain(confersRight, 2, 'Entity'), domain(confersRight, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2027, 'Anonymous', on).
mooCache(domain(confersRight, 3, 'CognitiveAgent'), domain(confersRight, 3, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2029, 'Anonymous', on).
mooCache(documentation(confersRight, string('"Expresses the relationship between a subclass   of Process, an Entity, and a CognitiveAgent when the Entity   authorizes the CognitiveAgent to perform instances of the Process type   specified, i.e. to be an agent of instances of the Process type."')), documentation(confersRight, string('"Expresses the relationship between a subclass   of Process, an Entity, and a CognitiveAgent when the Entity   authorizes the CognitiveAgent to perform instances of the Process type   specified, i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2031, 'Anonymous', on).
mooCache(confersRight(I6, J6, K6)=>holdsRight(I6, K6), entails(not holdsRight(I6, K6), not confersRight(I6, J6, K6))and entails(confersRight(I6, J6, K6), holdsRight(I6, K6)), [domainV(K6, [confersRight:3, holdsRight:2]), domainV(J6, [confersRight:2]), domainV(I6, [confersRight:1, holdsRight:1]), domainV(_G4964, []), forall(I6), forall(J6), forall(K6)], ['PROCESS'=I6, 'AGENT1'=J6, 'AGENT2'=K6], 'Merge', 'BASE ONTOLOGY', 2033, 'Anonymous', on).
mooCache(instance(holdsObligation, 'BinaryPredicate'), instance(holdsObligation, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2035, 'Anonymous', on).
mooCache(instance(holdsObligation, 'AsymmetricRelation'), instance(holdsObligation, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2037, 'Anonymous', on).
mooCache(domainSubclass(holdsObligation, 1, 'Process'), domainSubclass(holdsObligation, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2039, 'Anonymous', on).
mooCache(domain(holdsObligation, 2, 'CognitiveAgent'), domain(holdsObligation, 2, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2041, 'Anonymous', on).
mooCache(relatedInternalConcept(holdsObligation, holdsRight), relatedInternalConcept(holdsObligation, holdsRight), [], [], 'Merge', 'BASE ONTOLOGY', 2043, 'Anonymous', on).
mooCache(documentation(holdsObligation, string('"Expresses a relationship between a   subclass of Process and a CognitiveAgent whereby the CognitiveAgent   has the obligation to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), documentation(holdsObligation, string('"Expresses a relationship between a   subclass of Process and a CognitiveAgent whereby the CognitiveAgent   has the obligation to perform instances of the Process type specified,   i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2045, 'Anonymous', on).
mooCache(holdsObligation(N25, O25)=>capability(N25, agent, O25), entails(not capability(N25, agent, O25), not holdsObligation(N25, O25))and entails(holdsObligation(N25, O25), capability(N25, agent, O25)), [domainV(O25, [capability:3, holdsObligation:2]), domainV(N25, [capability:1, holdsObligation:1]), domainV(_G4524, []), forall(N25), forall(O25)], ['PROCESS'=N25, 'AGENT'=O25], 'Merge', 'BASE ONTOLOGY', 2047, 'Anonymous', on).
mooCache(instance(confersObligation, 'TernaryPredicate'), instance(confersObligation, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2049, 'Anonymous', on).
mooCache(domainSubclass(confersObligation, 1, 'Process'), domainSubclass(confersObligation, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2051, 'Anonymous', on).
mooCache(domain(confersObligation, 2, 'Entity'), domain(confersObligation, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2053, 'Anonymous', on).
mooCache(domain(confersObligation, 3, 'CognitiveAgent'), domain(confersObligation, 3, 'CognitiveAgent'), [], [], 'Merge', 'BASE ONTOLOGY', 2055, 'Anonymous', on).
mooCache(relatedInternalConcept(confersObligation, confersRight), relatedInternalConcept(confersObligation, confersRight), [], [], 'Merge', 'BASE ONTOLOGY', 2057, 'Anonymous', on).
mooCache(documentation(confersObligation, string('"Expresses the relationship between a   subclass of Process, an Entity, and a CognitiveAgent when the   Entity obligates the CognitiveAgent to perform instances of the Process   type specified, i.e. to be an agent of instances of the Process type."')), documentation(confersObligation, string('"Expresses the relationship between a   subclass of Process, an Entity, and a CognitiveAgent when the   Entity obligates the CognitiveAgent to perform instances of the Process   type specified, i.e. to be an agent of instances of the Process type."')), [], [], 'Merge', 'BASE ONTOLOGY', 2059, 'Anonymous', on).
mooCache(confersObligation(E6, F6, G6)=>holdsObligation(E6, G6), entails(not holdsObligation(E6, G6), not confersObligation(E6, F6, G6))and entails(confersObligation(E6, F6, G6), holdsObligation(E6, G6)), [domainV(G6, [confersObligation:3, holdsObligation:2]), domainV(F6, [confersObligation:2]), domainV(E6, [confersObligation:1, holdsObligation:1]), domainV(_G5024, []), forall(E6), forall(F6), forall(G6)], ['PROCESS'=E6, 'AGENT1'=F6, 'AGENT2'=G6], 'Merge', 'BASE ONTOLOGY', 2061, 'Anonymous', on).
mooCache(instance(located, 'PartialOrderingRelation'), instance(located, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2063, 'Anonymous', on).
mooCache(subrelation(located, partlyLocated), subrelation(located, partlyLocated), [], [], 'Merge', 'BASE ONTOLOGY', 2065, 'Anonymous', on).
mooCache(domain(located, 1, 'Physical'), domain(located, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2067, 'Anonymous', on).
mooCache(domain(located, 2, 'Object'), domain(located, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2069, 'Anonymous', on).
mooCache(relatedInternalConcept(located, time), relatedInternalConcept(located, time), [], [], 'Merge', 'BASE ONTOLOGY', 2071, 'Anonymous', on).
mooCache(documentation(located, string('"A very general predicate.  (located   ?PHYS ?OBJ) means that ?PHYS is situated at ?OBJ, in some sense.  The   Predicates located and time are spatial and temporal   predicates, respectively."')), documentation(located, string('"A very general predicate.  (located   ?PHYS ?OBJ) means that ?PHYS is situated at ?OBJ, in some sense.  The   Predicates located and time are spatial and temporal   predicates, respectively."')), [], [], 'Merge', 'BASE ONTOLOGY', 2073, 'Anonymous', on).
mooCache(located(N25, O25)=>forall(P25, part(P25, N25)=>located(P25, O25)), entails(part(P25, N25)and not located(P25, O25), not located(N25, O25))and entails(located(N25, O25)and not located(P25, O25), not part(P25, N25))and entails(located(N25, O25)and part(P25, N25), located(P25, O25)), [domainV(P25, [located:1, part:1]), domainV(O25, [located:2]), domainV(N25, [located:1, part:2]), domainV(_G7214, []), forall(N25), forall(O25), forall(P25)], ['OBJ'=N25, 'REGION'=O25, 'SUBOBJ'=P25], 'Merge', 'BASE ONTOLOGY', 2075, 'Anonymous', on).
mooCache(instance(partlyLocated, 'SpatialRelation'), instance(partlyLocated, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2077, 'Anonymous', on).
mooCache(instance(partlyLocated, 'ReflexiveRelation'), instance(partlyLocated, 'ReflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2079, 'Anonymous', on).
mooCache(instance(partlyLocated, 'BinaryPredicate'), instance(partlyLocated, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2081, 'Anonymous', on).
mooCache(domain(partlyLocated, 1, 'Object'), domain(partlyLocated, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2083, 'Anonymous', on).
mooCache(domain(partlyLocated, 2, 'Region'), domain(partlyLocated, 2, 'Region'), [], [], 'Merge', 'BASE ONTOLOGY', 2085, 'Anonymous', on).
mooCache(documentation(partlyLocated, string('"The predicate of partial localization.    For example, Istanbul is partly located in Asia.  Note that this is the   most basic localization relation:  located and exactlyLocated   are both subrelations of partlyLocated."')), documentation(partlyLocated, string('"The predicate of partial localization.    For example, Istanbul is partly located in Asia.  Note that this is the   most basic localization relation:  located and exactlyLocated   are both subrelations of partlyLocated."')), [], [], 'Merge', 'BASE ONTOLOGY', 2087, 'Anonymous', on).
mooCache(partlyLocated(F6, G6)=>exists(H6, part(H6, F6)and exactlyLocated(H6, G6)), (entails(not part(H6, F6), not partlyLocated(F6, G6))and entails(partlyLocated(F6, G6)and'$existential'(H6, '?SUBOBJ', part('?SUBOBJ', F6)and exactlyLocated('?SUBOBJ', G6)), part(H6, F6)))and entails(not exactlyLocated(H6, G6), not partlyLocated(F6, G6))and entails(partlyLocated(F6, G6)and'$existential'(H6, '?SUBOBJ', part('?SUBOBJ', F6)and exactlyLocated('?SUBOBJ', G6)), exactlyLocated(H6, G6)), [domainV(H6, [exactlyLocated:1, part:1]), domainV(G6, [exactlyLocated:2, partlyLocated:2]), domainV(F6, [part:2, partlyLocated:1]), domainV(_G7371, []), forall(F6), forall(G6), replaceConsVar(H6, '$existential'('?SUBOBJ', part('?SUBOBJ', F6)and exactlyLocated('?SUBOBJ', G6)))], ['OBJ'=F6, 'REGION'=G6, 'SUBOBJ'=H6], 'Merge', 'BASE ONTOLOGY', 2089, 'Anonymous', on).
mooCache(subrelation(exactlyLocated, located), subrelation(exactlyLocated, located), [], [], 'Merge', 'BASE ONTOLOGY', 2091, 'Anonymous', on).
mooCache(documentation(exactlyLocated, string('"The actual, minimal location of an   Object.  This is a subrelation of the more general Predicate   located."')), documentation(exactlyLocated, string('"The actual, minimal location of an   Object.  This is a subrelation of the more general Predicate   located."')), [], [], 'Merge', 'BASE ONTOLOGY', 2093, 'Anonymous', on).
mooCache(exactlyLocated(Y14, Z14)=>not exists(A15, exactlyLocated(A15, Z14)and not equal(A15, Y14)), entails(exactlyLocated(A15, Z14)and not equal(A15, Y14), not exactlyLocated(Y14, Z14))and entails(exactlyLocated(Y14, Z14)and not equal(A15, Y14), not exactlyLocated(A15, Z14))and entails(exactlyLocated(Y14, Z14)and exactlyLocated(A15, Z14), equal(A15, Y14)), [domainV(A15, [exactlyLocated:1]), domainV(Z14, [exactlyLocated:2]), domainV(Y14, [exactlyLocated:1]), domainV(_G8056, []), forall(Y14), forall(Z14), forall(A15), forall(A15)], ['OBJ'=Y14, 'REGION'=Z14, 'OTHEROBJ'=A15], 'Merge', 'BASE ONTOLOGY', 2095, 'Anonymous', on).
mooCache(instance(between, 'SpatialRelation'), instance(between, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2097, 'Anonymous', on).
mooCache(instance(between, 'TernaryPredicate'), instance(between, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2099, 'Anonymous', on).
mooCache(domain(between, 1, 'Object'), domain(between, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2101, 'Anonymous', on).
mooCache(domain(between, 2, 'Object'), domain(between, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2103, 'Anonymous', on).
mooCache(domain(between, 3, 'Object'), domain(between, 3, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2105, 'Anonymous', on).
mooCache(documentation(between, string('"(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is   spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that   ?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1   and ?OBJ3 overlap with ?OBJ2."')), documentation(between, string('"(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is   spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that   ?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1   and ?OBJ3 overlap with ?OBJ2."')), [], [], 'Merge', 'BASE ONTOLOGY', 2107, 'Anonymous', on).
mooCache(instance(traverses, 'SpatialRelation'), instance(traverses, 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2109, 'Anonymous', on).
mooCache(domain(traverses, 1, 'Object'), domain(traverses, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2111, 'Anonymous', on).
mooCache(domain(traverses, 2, 'Object'), domain(traverses, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2113, 'Anonymous', on).
mooCache(documentation(traverses, string('"(traverses ?OBJ1 ?OBJ2) means that ?OBJ1   crosses or extends across ?OBJ2.  Note that crosses and   penetrates are subrelations of traverses."')), documentation(traverses, string('"(traverses ?OBJ1 ?OBJ2) means that ?OBJ1   crosses or extends across ?OBJ2.  Note that crosses and   penetrates are subrelations of traverses."')), [], [], 'Merge', 'BASE ONTOLOGY', 2115, 'Anonymous', on).
mooCache(traverses(H6, I6)=>crosses(H6, I6)or penetrates(H6, I6), entails(not crosses(H6, I6)and not penetrates(H6, I6), not traverses(H6, I6))and entails(traverses(H6, I6)and not penetrates(H6, I6), crosses(H6, I6))and entails(traverses(H6, I6)and not crosses(H6, I6), penetrates(H6, I6)), [domainV(I6, [crosses:2, penetrates:2, traverses:2]), domainV(H6, [crosses:1, penetrates:1, traverses:1]), domainV(_G6123, []), forall(H6), forall(I6)], ['OBJ1'=H6, 'OBJ2'=I6], 'Merge', 'BASE ONTOLOGY', 2117, 'Anonymous', on).
mooCache(subrelation(crosses, traverses), subrelation(crosses, traverses), [], [], 'Merge', 'BASE ONTOLOGY', 2119, 'Anonymous', on).
mooCache(instance(crosses, 'AsymmetricRelation'), instance(crosses, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2121, 'Anonymous', on).
mooCache(instance(crosses, 'TransitiveRelation'), instance(crosses, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2123, 'Anonymous', on).
mooCache(disjointRelation(crosses, connected), disjointRelation(crosses, connected), [], [], 'Merge', 'BASE ONTOLOGY', 2125, 'Anonymous', on).
mooCache(documentation(crosses, string('"(crosses ?OBJ1 ?OBJ2) means that   Object ?OBJ1 traverses Object ?OBJ2, without being connected   to it."')), documentation(crosses, string('"(crosses ?OBJ1 ?OBJ2) means that   Object ?OBJ1 traverses Object ?OBJ2, without being connected   to it."')), [], [], 'Merge', 'BASE ONTOLOGY', 2127, 'Anonymous', on).
mooCache(subrelation(penetrates, traverses), subrelation(penetrates, traverses), [], [], 'Merge', 'BASE ONTOLOGY', 2129, 'Anonymous', on).
mooCache(subrelation(penetrates, meetsSpatially), subrelation(penetrates, meetsSpatially), [], [], 'Merge', 'BASE ONTOLOGY', 2131, 'Anonymous', on).
mooCache(instance(penetrates, 'AsymmetricRelation'), instance(penetrates, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2133, 'Anonymous', on).
mooCache(instance(penetrates, 'IntransitiveRelation'), instance(penetrates, 'IntransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2135, 'Anonymous', on).
mooCache(documentation(penetrates, string('"(penetrates ?OBJ1 ?OBJ2) means that   ?OBJ1 is connected to ?OBJ2 along at least one whole dimension (length,   width or depth)."')), documentation(penetrates, string('"(penetrates ?OBJ1 ?OBJ2) means that   ?OBJ1 is connected to ?OBJ2 along at least one whole dimension (length,   width or depth)."')), [], [], 'Merge', 'BASE ONTOLOGY', 2137, 'Anonymous', on).
mooCache(instance('WhereFn', 'BinaryFunction'), instance('WhereFn', 'BinaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 2139, 'Anonymous', on).
mooCache(instance('WhereFn', 'SpatialRelation'), instance('WhereFn', 'SpatialRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2141, 'Anonymous', on).
mooCache(domain('WhereFn', 1, 'Physical'), domain('WhereFn', 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2143, 'Anonymous', on).
mooCache(domain('WhereFn', 2, 'TimePoint'), domain('WhereFn', 2, 'TimePoint'), [], [], 'Merge', 'BASE ONTOLOGY', 2145, 'Anonymous', on).
mooCache(range('WhereFn', 'Region'), range('WhereFn', 'Region'), [], [], 'Merge', 'BASE ONTOLOGY', 2147, 'Anonymous', on).
mooCache(relatedInternalConcept('WhereFn', 'WhenFn'), relatedInternalConcept('WhereFn', 'WhenFn'), [], [], 'Merge', 'BASE ONTOLOGY', 2149, 'Anonymous', on).
mooCache(documentation('WhereFn', string('"Maps an Object and a TimePoint at which the   Object exists to the Region where the Object existed at that   TimePoint."')), documentation('WhereFn', string('"Maps an Object and a TimePoint at which the   Object exists to the Region where the Object existed at that   TimePoint."')), [], [], 'Merge', 'BASE ONTOLOGY', 2151, 'Anonymous', on).
mooCache(equal('WhereFn'(L20, M20), N20)<=>holdsDuring(M20, exactlyLocated(L20, N20)), (entails(holds('WhereFn', L20, M20, N20), holdsDuring(M20, exactlyLocated(L20, N20)))and entails(not holdsDuring(M20, exactlyLocated(L20, N20)), not holds('WhereFn', L20, M20, N20)))and entails(holdsDuring(M20, exactlyLocated(L20, N20)), holds('WhereFn', L20, M20, N20))and entails(not holds('WhereFn', L20, M20, N20), not holdsDuring(M20, exactlyLocated(L20, N20))), [domainV(N20, ['WhereFn':3, exactlyLocated:2]), domainV(M20, ['WhereFn':2, holdsDuring:1]), domainV(L20, ['WhereFn':1, exactlyLocated:1]), domainV(_G6423, []), forall(L20), forall(M20), forall(N20)], ['THING'=L20, 'TIME'=M20, 'REGION'=N20], 'Merge', 'BASE ONTOLOGY', 2153, 'Anonymous', on).
mooCache(instance(possesses, 'BinaryPredicate'), instance(possesses, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2155, 'Anonymous', on).
mooCache(instance(possesses, 'AsymmetricRelation'), instance(possesses, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2157, 'Anonymous', on).
mooCache(domain(possesses, 1, 'Agent'), domain(possesses, 1, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2159, 'Anonymous', on).
mooCache(domain(possesses, 2, 'Object'), domain(possesses, 2, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2161, 'Anonymous', on).
mooCache(documentation(possesses, string('"Relation that holds between an Agent and   an Object when the Agent has ownership of the Object."')), documentation(possesses, string('"Relation that holds between an Agent and   an Object when the Agent has ownership of the Object."')), [], [], 'Merge', 'BASE ONTOLOGY', 2163, 'Anonymous', on).
mooCache(possesses(A37, B37)=>exists(C37, holdsRight(A37, C37)and forall(D37, instance(D37, C37)=>patient(D37, B37))), (entails(not holdsRight(A37, C37), not possesses(A37, B37))and entails(possesses(A37, B37)and'$existential'(C37, '?TYPE', holdsRight(A37, '?TYPE')and forall(D37, instance(D37, '?TYPE')=>patient(D37, B37))), holdsRight(A37, C37)))and entails(instance(D37, C37)and not patient(D37, B37), not possesses(A37, B37))and entails(possesses(A37, B37)and not patient(D37, B37), not instance(D37, C37))and entails(possesses(A37, B37)and instance(D37, C37), patient(D37, B37)), [domainV(D37, [patient:1]), domainV(C37, [holdsRight:2, instance:2]), domainV(B37, [patient:2, possesses:2]), domainV(A37, [holdsRight:1, possesses:1]), domainV(_G10732, []), forall(A37), forall(B37), replaceConsVar(C37, '$existential'('?TYPE', holdsRight(A37, '?TYPE')and forall(D37, instance(D37, '?TYPE')=>patient(D37, B37)))), forall(D37)], ['PERSON'=A37, 'OBJ'=B37, 'TYPE'=C37, 'PROCESS'=D37], 'Merge', 'BASE ONTOLOGY', 2165, 'Anonymous', on).
mooCache(instance(W1, 'TimePosition')and holdsDuring(W1, possesses(X1, Y1))and holdsDuring(W1, possesses(Z1, Y1))=>equal(X1, Z1), entails(instance(W1, 'TimePosition')and holdsDuring(W1, possesses(X1, Y1))and holdsDuring(W1, possesses(Z1, Y1)), equal(X1, Z1))and entails(not equal(X1, Z1)and holdsDuring(W1, possesses(X1, Y1))and holdsDuring(W1, possesses(Z1, Y1)), not instance(W1, 'TimePosition'))and entails(not equal(X1, Z1)and instance(W1, 'TimePosition')and holdsDuring(W1, possesses(Z1, Y1)), not holdsDuring(W1, possesses(X1, Y1)))and entails(not equal(X1, Z1)and instance(W1, 'TimePosition')and holdsDuring(W1, possesses(X1, Y1)), not holdsDuring(W1, possesses(Z1, Y1))), [domainV(Z1, [possesses:1]), domainV(Y1, [possesses:2]), domainV(X1, [possesses:1]), domainV(W1, ['$instanceof':'TimePosition', holdsDuring:1]), domainV(_G8896, []), forall(W1), forall(X1), forall(Y1), forall(Z1)], ['TIME'=W1, 'AGENT1'=X1, 'OBJ'=Y1, 'AGENT2'=Z1], 'Merge', 'BASE ONTOLOGY', 2167, 'Anonymous', on).
mooCache(instance('PropertyFn', 'UnaryFunction'), instance('PropertyFn', 'UnaryFunction'), [], [], 'Merge', 'BASE ONTOLOGY', 2169, 'Anonymous', on).
mooCache(domain('PropertyFn', 1, 'Agent'), domain('PropertyFn', 1, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2171, 'Anonymous', on).
mooCache(range('PropertyFn', 'Set'), range('PropertyFn', 'Set'), [], [], 'Merge', 'BASE ONTOLOGY', 2173, 'Anonymous', on).
mooCache(documentation('PropertyFn', string('"A UnaryFunction that maps an Agent to the Set of Property owned by the Agent."')), documentation('PropertyFn', string('"A UnaryFunction that maps an Agent to the Set of Property owned by the Agent."')), [], [], 'Merge', 'BASE ONTOLOGY', 2175, 'Anonymous', on).
mooCache(instance(N15, 'PropertyFn'(O15))<=>possesses(O15, N15), (entails(instance(N15, 'PropertyFn'(O15)), possesses(O15, N15))and entails(not possesses(O15, N15), not instance(N15, 'PropertyFn'(O15))))and entails(possesses(O15, N15), instance(N15, 'PropertyFn'(O15)))and entails(not instance(N15, 'PropertyFn'(O15)), not possesses(O15, N15)), [domainV(O15, ['PropertyFn':1, possesses:1]), domainV(N15, [possesses:2]), domainV(_G5035, []), forall(N15), forall(O15)], ['OBJ'=N15, 'PERSON'=O15], 'Merge', 'BASE ONTOLOGY', 2177, 'Anonymous', on).
mooCache(instance(precondition, 'BinaryPredicate'), instance(precondition, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2179, 'Anonymous', on).
mooCache(instance(precondition, 'AsymmetricRelation'), instance(precondition, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2181, 'Anonymous', on).
mooCache(instance(precondition, 'TransitiveRelation'), instance(precondition, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2183, 'Anonymous', on).
mooCache(domainSubclass(precondition, 1, 'Process'), domainSubclass(precondition, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2185, 'Anonymous', on).
mooCache(domainSubclass(precondition, 2, 'Process'), domainSubclass(precondition, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2187, 'Anonymous', on).
mooCache(documentation(precondition, string('"A very general Predicate.  (precondition   ?PROC1 ?PROC2) means that ?PROC2 can exist or be true only if   ?PROC1 exists or is true.  At some point, this Predicate should   probably be broken up into more specific Predicates with more   restrictive domain restrictions."')), documentation(precondition, string('"A very general Predicate.  (precondition   ?PROC1 ?PROC2) means that ?PROC2 can exist or be true only if   ?PROC1 exists or is true.  At some point, this Predicate should   probably be broken up into more specific Predicates with more   restrictive domain restrictions."')), [], [], 'Merge', 'BASE ONTOLOGY', 2189, 'Anonymous', on).
mooCache(instance(inhibits, 'BinaryPredicate'), instance(inhibits, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2191, 'Anonymous', on).
mooCache(instance(inhibits, 'IrreflexiveRelation'), instance(inhibits, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2193, 'Anonymous', on).
mooCache(domainSubclass(inhibits, 1, 'Process'), domainSubclass(inhibits, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2195, 'Anonymous', on).
mooCache(domainSubclass(inhibits, 2, 'Process'), domainSubclass(inhibits, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2197, 'Anonymous', on).
mooCache(documentation(inhibits, string('"A very general Predicate.  (inhibits   ?PROC1 ?PROC2) means that the Process ?PROC1 inhibits or hinders   the occurrence of the Process ?PROC2.  For example, obstructing an   object inhibits moving it.  Note that this is a relation between types   of Processes, not between instances."')), documentation(inhibits, string('"A very general Predicate.  (inhibits   ?PROC1 ?PROC2) means that the Process ?PROC1 inhibits or hinders   the occurrence of the Process ?PROC2.  For example, obstructing an   object inhibits moving it.  Note that this is a relation between types   of Processes, not between instances."')), [], [], 'Merge', 'BASE ONTOLOGY', 2199, 'Anonymous', on).
mooCache(instance(prevents, 'BinaryPredicate'), instance(prevents, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2201, 'Anonymous', on).
mooCache(instance(prevents, 'IrreflexiveRelation'), instance(prevents, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2203, 'Anonymous', on).
mooCache(domainSubclass(prevents, 1, 'Process'), domainSubclass(prevents, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2205, 'Anonymous', on).
mooCache(domainSubclass(prevents, 2, 'Process'), domainSubclass(prevents, 2, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2207, 'Anonymous', on).
mooCache(documentation(prevents, string('"A very general Predicate.  (prevents ?PROC1   ?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other   words, if ?PROC1 is occurring in a particular time and place, ?PROC2   cannot occur at the same time and place.  For example, innoculating   prevents contracting disease.  Note that this is a relation between types   of Processes, not between instances."')), documentation(prevents, string('"A very general Predicate.  (prevents ?PROC1   ?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other   words, if ?PROC1 is occurring in a particular time and place, ?PROC2   cannot occur at the same time and place.  For example, innoculating   prevents contracting disease.  Note that this is a relation between types   of Processes, not between instances."')), [], [], 'Merge', 'BASE ONTOLOGY', 2209, 'Anonymous', on).
mooCache(instance(refers, 'BinaryPredicate'), instance(refers, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2211, 'Anonymous', on).
mooCache(domain(refers, 1, 'Physical'), domain(refers, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2213, 'Anonymous', on).
mooCache(domain(refers, 2, 'Entity'), domain(refers, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2215, 'Anonymous', on).
mooCache(documentation(refers, string('"(refers ?OBJ1 ?OBJ2) means that ?OBJ1   mentions or includes a reference to ?OBJ2. Note that refers is   more general in meaning than represents, because presumably something   can represent something else only if it refers to this other thing.    For example, an article whose topic is a recent change in the price of   oil may refer to many other things, e.g. the general state of the economy,   the weather in California, the prospect of global warming, the options   for alternative energy sources, the stock prices of various oil companies,   etc."')), documentation(refers, string('"(refers ?OBJ1 ?OBJ2) means that ?OBJ1   mentions or includes a reference to ?OBJ2. Note that refers is   more general in meaning than represents, because presumably something   can represent something else only if it refers to this other thing.    For example, an article whose topic is a recent change in the price of   oil may refer to many other things, e.g. the general state of the economy,   the weather in California, the prospect of global warming, the options   for alternative energy sources, the stock prices of various oil companies,   etc."')), [], [], 'Merge', 'BASE ONTOLOGY', 2217, 'Anonymous', on).
mooCache(instance(represents, 'BinaryPredicate'), instance(represents, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2219, 'Anonymous', on).
mooCache(domain(represents, 1, 'Physical'), domain(represents, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2221, 'Anonymous', on).
mooCache(domain(represents, 2, 'Entity'), domain(represents, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2223, 'Anonymous', on).
mooCache(subrelation(represents, refers), subrelation(represents, refers), [], [], 'Merge', 'BASE ONTOLOGY', 2225, 'Anonymous', on).
mooCache(documentation(represents, string('"A very general semiotics Predicate.    (represents ?THING ?ENTITY) means that ?THING in some way expresses,   connotes, pictures, describes, etc. ?ENTITY.  The Predicates   containsInformation and realization are subrelations of represents.    Note that represents is a subrelation of refers, since something can   represent something else only if it refers to this other thing."')), documentation(represents, string('"A very general semiotics Predicate.    (represents ?THING ?ENTITY) means that ?THING in some way expresses,   connotes, pictures, describes, etc. ?ENTITY.  The Predicates   containsInformation and realization are subrelations of represents.    Note that represents is a subrelation of refers, since something can   represent something else only if it refers to this other thing."')), [], [], 'Merge', 'BASE ONTOLOGY', 2227, 'Anonymous', on).
mooCache(represents(Z7, A8)=>exists(B8, representsInLanguage(Z7, A8, B8)), entails(not representsInLanguage(Z7, A8, B8), not represents(Z7, A8))and entails(represents(Z7, A8)and'$existential'(B8, '?LANGUAGE', representsInLanguage(Z7, A8, '?LANGUAGE')), representsInLanguage(Z7, A8, B8)), [domainV(B8, [representsInLanguage:3]), domainV(A8, [represents:2, representsInLanguage:2]), domainV(Z7, [represents:1, representsInLanguage:1]), domainV(_G6088, []), forall(Z7), forall(A8), replaceConsVar(B8, '$existential'('?LANGUAGE', representsInLanguage(Z7, A8, '?LANGUAGE')))], ['REP'=Z7, 'ENTITY'=A8, 'LANGUAGE'=B8], 'Merge', 'BASE ONTOLOGY', 2229, 'Anonymous', on).
mooCache(instance(representsForAgent, 'TernaryPredicate'), instance(representsForAgent, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2231, 'Anonymous', on).
mooCache(domain(representsForAgent, 1, 'Physical'), domain(representsForAgent, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2233, 'Anonymous', on).
mooCache(domain(representsForAgent, 2, 'Entity'), domain(representsForAgent, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2235, 'Anonymous', on).
mooCache(domain(representsForAgent, 3, 'Agent'), domain(representsForAgent, 3, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2237, 'Anonymous', on).
mooCache(documentation(representsForAgent, string('"A very general predicate.    (representsForAgent ?THING ?ENTITY ?AGENT) means that the ?AGENT   chooses to use the instance of Physical ?THING to \'stand for\'   ?ENTITY."')), documentation(representsForAgent, string('"A very general predicate.    (representsForAgent ?THING ?ENTITY ?AGENT) means that the ?AGENT   chooses to use the instance of Physical ?THING to \'stand for\'   ?ENTITY."')), [], [], 'Merge', 'BASE ONTOLOGY', 2239, 'Anonymous', on).
mooCache(instance(representsInLanguage, 'TernaryPredicate'), instance(representsInLanguage, 'TernaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2241, 'Anonymous', on).
mooCache(domain(representsInLanguage, 1, 'Physical'), domain(representsInLanguage, 1, 'Physical'), [], [], 'Merge', 'BASE ONTOLOGY', 2243, 'Anonymous', on).
mooCache(domain(representsInLanguage, 2, 'Entity'), domain(representsInLanguage, 2, 'Entity'), [], [], 'Merge', 'BASE ONTOLOGY', 2245, 'Anonymous', on).
mooCache(domain(representsInLanguage, 3, 'Language'), domain(representsInLanguage, 3, 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 2247, 'Anonymous', on).
mooCache(documentation(representsInLanguage, string('"A very general predicate.    (representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the   instance of Physical ?THING stands for ?ENTITY in the language   ?LANGUAGE."')), documentation(representsInLanguage, string('"A very general predicate.    (representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the   instance of Physical ?THING stands for ?ENTITY in the language   ?LANGUAGE."')), [], [], 'Merge', 'BASE ONTOLOGY', 2249, 'Anonymous', on).
mooCache(representsInLanguage(I37, J37, K37)=>exists(L37, representsForAgent(I37, J37, L37)), entails(not representsForAgent(I37, J37, L37), not representsInLanguage(I37, J37, K37))and entails(representsInLanguage(I37, J37, K37)and'$existential'(L37, '?AGENT', representsForAgent(I37, J37, '?AGENT')), representsForAgent(I37, J37, L37)), [domainV(L37, [representsForAgent:3]), domainV(K37, [representsInLanguage:3]), domainV(J37, [representsForAgent:2, representsInLanguage:2]), domainV(I37, [representsForAgent:1, representsInLanguage:1]), domainV(_G6560, []), forall(I37), forall(J37), forall(K37), replaceConsVar(L37, '$existential'('?AGENT', representsForAgent(I37, J37, '?AGENT')))], ['REP'=I37, 'ENTITY'=J37, 'LANGUAGE'=K37, 'AGENT'=L37], 'Merge', 'BASE ONTOLOGY', 2251, 'Anonymous', on).
mooCache(subrelation(equivalentContentClass, subsumesContentClass), subrelation(equivalentContentClass, subsumesContentClass), [], [], 'Merge', 'BASE ONTOLOGY', 2253, 'Anonymous', on).
mooCache(instance(equivalentContentClass, 'EquivalenceRelation'), instance(equivalentContentClass, 'EquivalenceRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2255, 'Anonymous', on).
mooCache(domainSubclass(equivalentContentClass, 1, 'ContentBearingObject'), domainSubclass(equivalentContentClass, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2257, 'Anonymous', on).
mooCache(domainSubclass(equivalentContentClass, 2, 'ContentBearingObject'), domainSubclass(equivalentContentClass, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2259, 'Anonymous', on).
mooCache(documentation(equivalentContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (equivalentContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS1 is   also expressed by each instance of ?CLASS2, and vice versa.  An example   would be the relationship between English and Russian editions of Agatha   Christie\'s \'Murder on the Orient Express\'.  Note that   (equivalentContentClass ?CLASS1 ?CLASS2) implies (subsumesContentClass   ?CLASS1 ?CLASS2) and (subsumesContentClass ?CLASS2 ?CLASS1)."')), documentation(equivalentContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (equivalentContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS1 is   also expressed by each instance of ?CLASS2, and vice versa.  An example   would be the relationship between English and Russian editions of Agatha   Christie\'s \'Murder on the Orient Express\'.  Note that   (equivalentContentClass ?CLASS1 ?CLASS2) implies (subsumesContentClass   ?CLASS1 ?CLASS2) and (subsumesContentClass ?CLASS2 ?CLASS1)."')), [], [], 'Merge', 'BASE ONTOLOGY', 2261, 'Anonymous', on).
mooCache(subsumesContentClass(B15, C15)and subsumesContentClass(C15, B15)<=>equivalentContentClass(B15, C15), (entails(subsumesContentClass(B15, C15)and subsumesContentClass(C15, B15), equivalentContentClass(B15, C15))and entails(not equivalentContentClass(B15, C15)and subsumesContentClass(C15, B15), not subsumesContentClass(B15, C15))and entails(not equivalentContentClass(B15, C15)and subsumesContentClass(B15, C15), not subsumesContentClass(C15, B15)))and entails(equivalentContentClass(B15, C15), subsumesContentClass(B15, C15))and entails(equivalentContentClass(B15, C15), subsumesContentClass(C15, B15))and entails(not subsumesContentClass(B15, C15)or not subsumesContentClass(C15, B15), not equivalentContentClass(B15, C15)), [domainV(C15, [equivalentContentClass:2, subsumesContentClass:1, subsumesContentClass:2]), domainV(B15, [equivalentContentClass:1, subsumesContentClass:1, subsumesContentClass:2]), domainV(_G6915, []), forall(B15), forall(C15)], ['CLASS1'=B15, 'CLASS2'=C15], 'Merge', 'BASE ONTOLOGY', 2263, 'Anonymous', on).
mooCache(instance(subsumesContentClass, 'BinaryPredicate'), instance(subsumesContentClass, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2265, 'Anonymous', on).
mooCache(instance(subsumesContentClass, 'PartialOrderingRelation'), instance(subsumesContentClass, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2267, 'Anonymous', on).
mooCache(domainSubclass(subsumesContentClass, 1, 'ContentBearingObject'), domainSubclass(subsumesContentClass, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2269, 'Anonymous', on).
mooCache(domainSubclass(subsumesContentClass, 2, 'ContentBearingObject'), domainSubclass(subsumesContentClass, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2271, 'Anonymous', on).
mooCache(documentation(subsumesContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (subsumesContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS2 is   also expressed by each instance of ?CLASS1.  Examples include the   relationship between a poem and one of its stanzas or between a book and   one of its chapters.  Note that this is a relation between subclasses of   ContentBearingObject, rather than instances.  If one wants to relate   instances, the Predicate subsumesContentInstance can be used.  Note   that subsumesContentClass is needed in many cases.  Consider, for   example, the relation between the King James edition of the Bible and its   Book of Genesis.  This relation holds for every copy of this edition and   not just for a single instance."')), documentation(subsumesContentClass, string('"A BinaryPredicate that relates two   subclasses of ContentBearingObject.  (subsumesContentClass ?CLASS1   ?CLASS2) means that the content expressed by each instance of ?CLASS2 is   also expressed by each instance of ?CLASS1.  Examples include the   relationship between a poem and one of its stanzas or between a book and   one of its chapters.  Note that this is a relation between subclasses of   ContentBearingObject, rather than instances.  If one wants to relate   instances, the Predicate subsumesContentInstance can be used.  Note   that subsumesContentClass is needed in many cases.  Consider, for   example, the relation between the King James edition of the Bible and its   Book of Genesis.  This relation holds for every copy of this edition and   not just for a single instance."')), [], [], 'Merge', 'BASE ONTOLOGY', 2273, 'Anonymous', on).
mooCache(subsumesContentClass(A36, B36)<=>forall(C36, forall(D36, forall(E36, instance(D36, A36)and instance(C36, B36)and containsInformation(C36, E36)=>containsInformation(D36, E36)))), (entails(not subsumesContentClass(A36, B36), instance(D36, A36))and entails(not subsumesContentClass(A36, B36), instance(C36, B36))and entails(not subsumesContentClass(A36, B36), containsInformation(C36, E36))and entails((not subsumesContentClass(A36, B36)and'$existential'(D36, '?OBJ1', not forall(E36, instance('?OBJ1', A36)and instance(C36, B36)and containsInformation(C36, E36)=>containsInformation('?OBJ1', E36))))and'$existential'(E36, '?INFO', not (instance(D36, A36)and instance(C36, B36)and containsInformation(C36, '?INFO')=>containsInformation(D36, '?INFO'))), not containsInformation(D36, E36))and entails((not instance(D36, A36)or not instance(C36, B36)or not containsInformation(C36, E36))or containsInformation(D36, E36), subsumesContentClass(A36, B36)))and entails(((not containsInformation(D36, E36)and instance(D36, A36)and instance(C36, B36)and containsInformation(C36, E36))and'$existential'(D36, '?OBJ1', not forall(E36, instance('?OBJ1', A36)and instance(C36, B36)and containsInformation(C36, E36)=>containsInformation('?OBJ1', E36))))and'$existential'(E36, '?INFO', not (instance(D36, A36)and instance(C36, B36)and containsInformation(C36, '?INFO')=>containsInformation(D36, '?INFO'))), not subsumesContentClass(A36, B36))and entails(subsumesContentClass(A36, B36)and instance(D36, A36)and instance(C36, B36)and containsInformation(C36, E36), containsInformation(D36, E36))and entails(((subsumesContentClass(A36, B36)and not containsInformation(D36, E36)and instance(C36, B36)and containsInformation(C36, E36))and'$existential'(D36, '?OBJ1', not forall(E36, instance('?OBJ1', A36)and instance(C36, B36)and containsInformation(C36, E36)=>containsInformation('?OBJ1', E36))))and'$existential'(E36, '?INFO', not (instance(D36, A36)and instance(C36, B36)and containsInformation(C36, '?INFO')=>containsInformation(D36, '?INFO'))), not instance(D36, A36))and entails((((subsumesContentClass(A36, B36)and not containsInformation(D36, E36)and instance(D36, A36)and containsInformation(C36, E36))and'$existential'(C36, '?OBJ2', not forall(D36, forall(E36, instance(D36, A36)and instance('?OBJ2', B36)and containsInformation('?OBJ2', E36)=>containsInformation(D36, E36)))))and'$existential'(D36, '?OBJ1', not forall(E36, instance('?OBJ1', A36)and instance(C36, B36)and containsInformation(C36, E36)=>containsInformation('?OBJ1', E36))))and'$existential'(E36, '?INFO', not (instance(D36, A36)and instance(C36, B36)and containsInformation(C36, '?INFO')=>containsInformation(D36, '?INFO'))), not instance(C36, B36))and entails((((subsumesContentClass(A36, B36)and not containsInformation(D36, E36)and instance(D36, A36)and instance(C36, B36))and'$existential'(C36, '?OBJ2', not forall(D36, forall(E36, instance(D36, A36)and instance('?OBJ2', B36)and containsInformation('?OBJ2', E36)=>containsInformation(D36, E36)))))and'$existential'(D36, '?OBJ1', not forall(E36, instance('?OBJ1', A36)and instance(C36, B36)and containsInformation(C36, E36)=>containsInformation('?OBJ1', E36))))and'$existential'(E36, '?INFO', not (instance(D36, A36)and instance(C36, B36)and containsInformation(C36, '?INFO')=>containsInformation(D36, '?INFO'))), not containsInformation(C36, E36)), [domainV(E36, [containsInformation:2]), domainV(D36, [containsInformation:1]), domainV(C36, [containsInformation:1]), domainV(B36, [instance:2, subsumesContentClass:2]), domainV(A36, [instance:2, subsumesContentClass:1]), domainV(_G15598, []), forall(A36), forall(B36), forall(C36), forall(D36), forall(E36), replaceConsVar(C36, '$existential'('?OBJ2', not forall(D36, forall(E36, instance(D36, A36)and instance('?OBJ2', B36)and containsInformation('?OBJ2', E36)=>containsInformation(D36, E36))))), replaceConsVar(D36, '$existential'('?OBJ1', not forall(E36, instance('?OBJ1', A36)and instance(C36, B36)and containsInformation(C36, E36)=>containsInformation('?OBJ1', E36)))), replaceConsVar(E36, '$existential'('?INFO', not (instance(D36, A36)and instance(C36, B36)and containsInformation(C36, '?INFO')=>containsInformation(D36, '?INFO'))))], ['CLASS1'=A36, 'CLASS2'=B36, 'INFO'=E36, 'OBJ1'=D36, 'OBJ2'=C36], 'Merge', 'BASE ONTOLOGY', 2275, 'Anonymous', on).
mooCache(subrelation(equivalentContentInstance, subsumesContentInstance), subrelation(equivalentContentInstance, subsumesContentInstance), [], [], 'Merge', 'BASE ONTOLOGY', 2277, 'Anonymous', on).
mooCache(instance(equivalentContentInstance, 'EquivalenceRelation'), instance(equivalentContentInstance, 'EquivalenceRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2279, 'Anonymous', on).
mooCache(domain(equivalentContentInstance, 1, 'ContentBearingObject'), domain(equivalentContentInstance, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2281, 'Anonymous', on).
mooCache(domain(equivalentContentInstance, 2, 'ContentBearingObject'), domain(equivalentContentInstance, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2283, 'Anonymous', on).
mooCache(relatedInternalConcept(equivalentContentInstance, equivalentContentClass), relatedInternalConcept(equivalentContentInstance, equivalentContentClass), [], [], 'Merge', 'BASE ONTOLOGY', 2285, 'Anonymous', on).
mooCache(documentation(equivalentContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (equivalentContentInstance   ?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to   the content expressed by ?OBJ2.  An example would be the relationship   between a handwritten draft of a letter to one\'s lawyer and a typed   copy of the same letter.  Note that (equivalentContentInstance ?OBJ1   ?OBJ2) implies (subsumesContentInstance ?OBJ1 ?OBJ2) and   (subsumesContentInstance ?OBJ2 ?OBJ2)."')), documentation(equivalentContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (equivalentContentInstance   ?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to   the content expressed by ?OBJ2.  An example would be the relationship   between a handwritten draft of a letter to one\'s lawyer and a typed   copy of the same letter.  Note that (equivalentContentInstance ?OBJ1   ?OBJ2) implies (subsumesContentInstance ?OBJ1 ?OBJ2) and   (subsumesContentInstance ?OBJ2 ?OBJ2)."')), [], [], 'Merge', 'BASE ONTOLOGY', 2287, 'Anonymous', on).
mooCache(subsumesContentInstance(P17, Q17)and subsumesContentInstance(Q17, P17)<=>equivalentContentInstance(P17, Q17), (entails(subsumesContentInstance(P17, Q17)and subsumesContentInstance(Q17, P17), equivalentContentInstance(P17, Q17))and entails(not equivalentContentInstance(P17, Q17)and subsumesContentInstance(Q17, P17), not subsumesContentInstance(P17, Q17))and entails(not equivalentContentInstance(P17, Q17)and subsumesContentInstance(P17, Q17), not subsumesContentInstance(Q17, P17)))and entails(equivalentContentInstance(P17, Q17), subsumesContentInstance(P17, Q17))and entails(equivalentContentInstance(P17, Q17), subsumesContentInstance(Q17, P17))and entails(not subsumesContentInstance(P17, Q17)or not subsumesContentInstance(Q17, P17), not equivalentContentInstance(P17, Q17)), [domainV(Q17, [equivalentContentInstance:2, subsumesContentInstance:1, subsumesContentInstance:2]), domainV(P17, [equivalentContentInstance:1, subsumesContentInstance:1, subsumesContentInstance:2]), domainV(_G6897, []), forall(P17), forall(Q17)], ['OBJ1'=P17, 'OBJ2'=Q17], 'Merge', 'BASE ONTOLOGY', 2289, 'Anonymous', on).
mooCache(instance(subsumesContentInstance, 'BinaryPredicate'), instance(subsumesContentInstance, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2291, 'Anonymous', on).
mooCache(instance(subsumesContentInstance, 'PartialOrderingRelation'), instance(subsumesContentInstance, 'PartialOrderingRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2293, 'Anonymous', on).
mooCache(domain(subsumesContentInstance, 1, 'ContentBearingObject'), domain(subsumesContentInstance, 1, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2295, 'Anonymous', on).
mooCache(domain(subsumesContentInstance, 2, 'ContentBearingObject'), domain(subsumesContentInstance, 2, 'ContentBearingObject'), [], [], 'Merge', 'BASE ONTOLOGY', 2297, 'Anonymous', on).
mooCache(relatedInternalConcept(subsumesContentInstance, subsumesContentClass), relatedInternalConcept(subsumesContentInstance, subsumesContentClass), [], [], 'Merge', 'BASE ONTOLOGY', 2299, 'Anonymous', on).
mooCache(documentation(subsumesContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (subsumesContentInstance ?OBJ1 ?OBJ2)   means that the content expressed by ?OBJ2 is part of the content expressed   by ?OBJ1.  An example is the relationship between a handwritten poem and   one of its stanzas.  Note that this is a relation between instances,   rather than Classes.  If one wants to assert a content relationship   between Classes, e.g. between the version of an intellectual work and a   part of that work, the relation subsumesContentClass should be used."')), documentation(subsumesContentInstance, string('"A BinaryPredicate relating two   instances of ContentBearingObject.  (subsumesContentInstance ?OBJ1 ?OBJ2)   means that the content expressed by ?OBJ2 is part of the content expressed   by ?OBJ1.  An example is the relationship between a handwritten poem and   one of its stanzas.  Note that this is a relation between instances,   rather than Classes.  If one wants to assert a content relationship   between Classes, e.g. between the version of an intellectual work and a   part of that work, the relation subsumesContentClass should be used."')), [], [], 'Merge', 'BASE ONTOLOGY', 2301, 'Anonymous', on).
mooCache(subsumesContentInstance(M36, N36)<=>forall(O36, containsInformation(N36, O36)=>containsInformation(M36, O36)), (entails(not subsumesContentInstance(M36, N36), containsInformation(N36, O36))and entails(not subsumesContentInstance(M36, N36)and'$existential'(O36, '?INFO', not (containsInformation(N36, '?INFO')=>containsInformation(M36, '?INFO'))), not containsInformation(M36, O36))and entails(not containsInformation(N36, O36)or containsInformation(M36, O36), subsumesContentInstance(M36, N36)))and entails(containsInformation(N36, O36)and not containsInformation(M36, O36), not subsumesContentInstance(M36, N36))and entails((subsumesContentInstance(M36, N36)and not containsInformation(M36, O36))and'$existential'(O36, '?INFO', not (containsInformation(N36, '?INFO')=>containsInformation(M36, '?INFO'))), not containsInformation(N36, O36))and entails(subsumesContentInstance(M36, N36)and containsInformation(N36, O36), containsInformation(M36, O36)), [domainV(O36, [containsInformation:2]), domainV(N36, [containsInformation:1, subsumesContentInstance:2]), domainV(M36, [containsInformation:1, subsumesContentInstance:1]), domainV(_G8338, []), forall(M36), forall(N36), forall(O36), replaceConsVar(O36, '$existential'('?INFO', not (containsInformation(N36, '?INFO')=>containsInformation(M36, '?INFO'))))], ['OBJ1'=M36, 'OBJ2'=N36, 'INFO'=O36], 'Merge', 'BASE ONTOLOGY', 2303, 'Anonymous', on).
mooCache(subrelation(realization, represents), subrelation(realization, represents), [], [], 'Merge', 'BASE ONTOLOGY', 2305, 'Anonymous', on).
mooCache(instance(realization, 'AsymmetricRelation'), instance(realization, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2307, 'Anonymous', on).
mooCache(domain(realization, 1, 'Process'), domain(realization, 1, 'Process'), [], [], 'Merge', 'BASE ONTOLOGY', 2309, 'Anonymous', on).
mooCache(domain(realization, 2, 'Proposition'), domain(realization, 2, 'Proposition'), [], [], 'Merge', 'BASE ONTOLOGY', 2311, 'Anonymous', on).
mooCache(relatedInternalConcept(realization, equivalentContentInstance), relatedInternalConcept(realization, equivalentContentInstance), [], [], 'Merge', 'BASE ONTOLOGY', 2313, 'Anonymous', on).
mooCache(relatedInternalConcept(realization, containsInformation), relatedInternalConcept(realization, containsInformation), [], [], 'Merge', 'BASE ONTOLOGY', 2315, 'Anonymous', on).
mooCache(documentation(realization, string('"A subrelation of represents.    (realization ?PROCESS ?PROP) means that ?PROCESS is a Process which   expresses the content of ?PROP. Examples include a particular musical   performance, which realizes the content of a musical score, or the   reading of a poem."')), documentation(realization, string('"A subrelation of represents.    (realization ?PROCESS ?PROP) means that ?PROCESS is a Process which   expresses the content of ?PROP. Examples include a particular musical   performance, which realizes the content of a musical score, or the   reading of a poem."')), [], [], 'Merge', 'BASE ONTOLOGY', 2317, 'Anonymous', on).
mooCache(realization(O19, P19)=>exists(Q19, instance(Q19, 'ContentBearingObject')and containsInformation(Q19, P19)), (entails(not instance(Q19, 'ContentBearingObject'), not realization(O19, P19))and entails(realization(O19, P19)and'$existential'(Q19, '?OBJ', instance('?OBJ', 'ContentBearingObject')and containsInformation('?OBJ', P19)), instance(Q19, 'ContentBearingObject')))and entails(not containsInformation(Q19, P19), not realization(O19, P19))and entails(realization(O19, P19)and'$existential'(Q19, '?OBJ', instance('?OBJ', 'ContentBearingObject')and containsInformation('?OBJ', P19)), containsInformation(Q19, P19)), [domainV(Q19, ['$instanceof':'ContentBearingObject', containsInformation:1]), domainV(P19, [containsInformation:2, realization:2]), domainV(O19, [realization:1]), domainV(_G7117, []), forall(O19), forall(P19), replaceConsVar(Q19, '$existential'('?OBJ', instance('?OBJ', 'ContentBearingObject')and containsInformation('?OBJ', P19)))], ['PROCESS'=O19, 'PROP'=P19, 'OBJ'=Q19], 'Merge', 'BASE ONTOLOGY', 2319, 'Anonymous', on).
mooCache(instance(expressedInLanguage, 'BinaryPredicate'), instance(expressedInLanguage, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2321, 'Anonymous', on).
mooCache(instance(expressedInLanguage, 'AsymmetricRelation'), instance(expressedInLanguage, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2323, 'Anonymous', on).
mooCache(domain(expressedInLanguage, 1, 'LinguisticExpression'), domain(expressedInLanguage, 1, 'LinguisticExpression'), [], [], 'Merge', 'BASE ONTOLOGY', 2325, 'Anonymous', on).
mooCache(domain(expressedInLanguage, 2, 'Language'), domain(expressedInLanguage, 2, 'Language'), [], [], 'Merge', 'BASE ONTOLOGY', 2327, 'Anonymous', on).
mooCache(documentation(expressedInLanguage, string('"(expressedInLanguage ?EXPRESS ?LANG)   means that ?EXPRESS is expressed in Language ?LANG."')), documentation(expressedInLanguage, string('"(expressedInLanguage ?EXPRESS ?LANG)   means that ?EXPRESS is expressed in Language ?LANG."')), [], [], 'Merge', 'BASE ONTOLOGY', 2329, 'Anonymous', on).
mooCache(expressedInLanguage(O35, P35)<=>exists(Q35, representsInLanguage(O35, Q35, P35)), (entails(expressedInLanguage(O35, P35)and'$existential'(Q35, '?PROP', representsInLanguage(O35, '?PROP', P35)), representsInLanguage(O35, Q35, P35))and entails(not representsInLanguage(O35, Q35, P35), not expressedInLanguage(O35, P35)))and entails(representsInLanguage(O35, Q35, P35), expressedInLanguage(O35, P35))and entails(not expressedInLanguage(O35, P35), not representsInLanguage(O35, Q35, P35)), [domainV(Q35, [representsInLanguage:2]), domainV(P35, [expressedInLanguage:2, representsInLanguage:3]), domainV(O35, [expressedInLanguage:1, representsInLanguage:1]), domainV(_G6531, []), forall(O35), forall(P35), replaceConsVar(Q35, '$existential'('?PROP', representsInLanguage(O35, '?PROP', P35))), forall(Q35)], ['EXPRESS'=O35, 'LANGUAGE'=P35, 'PROP'=Q35], 'Merge', 'BASE ONTOLOGY', 2331, 'Anonymous', on).
mooCache(instance(subPlan, 'BinaryPredicate'), instance(subPlan, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2333, 'Anonymous', on).
mooCache(instance(subPlan, 'TransitiveRelation'), instance(subPlan, 'TransitiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2335, 'Anonymous', on).
mooCache(instance(subPlan, 'IrreflexiveRelation'), instance(subPlan, 'IrreflexiveRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2337, 'Anonymous', on).
mooCache(domain(subPlan, 1, 'Plan'), domain(subPlan, 1, 'Plan'), [], [], 'Merge', 'BASE ONTOLOGY', 2339, 'Anonymous', on).
mooCache(domain(subPlan, 2, 'Plan'), domain(subPlan, 2, 'Plan'), [], [], 'Merge', 'BASE ONTOLOGY', 2341, 'Anonymous', on).
mooCache(documentation(subPlan, string('"(subPlan ?PLAN1 ?PLAN2) means that ?PLAN1   is a Plan which is a proper part of ?PLAN2.  This relation is generally   used to relate a supporting Plan to the overall Plan in a particular   context."')), documentation(subPlan, string('"(subPlan ?PLAN1 ?PLAN2) means that ?PLAN1   is a Plan which is a proper part of ?PLAN2.  This relation is generally   used to relate a supporting Plan to the overall Plan in a particular   context."')), [], [], 'Merge', 'BASE ONTOLOGY', 2343, 'Anonymous', on).
mooCache(subPlan(B17, C17)=>forall(D17, forall(E17, containsInformation(E17, B17)and containsInformation(D17, C17)=>subsumesContentInstance(D17, E17))), entails(not subsumesContentInstance(D17, E17)and containsInformation(E17, B17)and containsInformation(D17, C17), not subPlan(B17, C17))and entails(subPlan(B17, C17)and containsInformation(E17, B17)and containsInformation(D17, C17), subsumesContentInstance(D17, E17))and entails(subPlan(B17, C17)and not subsumesContentInstance(D17, E17)and containsInformation(D17, C17), not containsInformation(E17, B17))and entails(subPlan(B17, C17)and not subsumesContentInstance(D17, E17)and containsInformation(E17, B17), not containsInformation(D17, C17)), [domainV(E17, [containsInformation:1, subsumesContentInstance:2]), domainV(D17, [containsInformation:1, subsumesContentInstance:1]), domainV(C17, [containsInformation:2, subPlan:2]), domainV(B17, [containsInformation:2, subPlan:1]), domainV(_G10566, []), forall(B17), forall(C17), forall(D17), forall(E17)], ['PLAN1'=B17, 'PLAN2'=C17, 'OBJ1'=E17, 'OBJ2'=D17], 'Merge', 'BASE ONTOLOGY', 2345, 'Anonymous', on).
mooCache(instance(uses, 'BinaryPredicate'), instance(uses, 'BinaryPredicate'), [], [], 'Merge', 'BASE ONTOLOGY', 2347, 'Anonymous', on).
mooCache(instance(uses, 'AsymmetricRelation'), instance(uses, 'AsymmetricRelation'), [], [], 'Merge', 'BASE ONTOLOGY', 2349, 'Anonymous', on).
mooCache(domain(uses, 1, 'Object'), domain(uses, 1, 'Object'), [], [], 'Merge', 'BASE ONTOLOGY', 2351, 'Anonymous', on).
mooCache(domain(uses, 2, 'Agent'), domain(uses, 2, 'Agent'), [], [], 'Merge', 'BASE ONTOLOGY', 2353, 'Anonymous', on).
mooCache(documentation(uses, string('"(uses ?OBJECT AGENT) means that ?OBJECT is used by   ?AGENT as an instrument in an unspecified Process.  This Predicate,   as its corresponding axiom indicates, is a composition of the CaseRoles   agent and instrument."')), documentation(uses, string('"(uses ?OBJECT AGENT) means that ?OBJECT is used by   ?AGENT as an instrument in an unspecified Process.  This Predicate,   as its corresponding axiom indicates, is a composition of the CaseRoles   agent and instrument."')), [], [], 'Merge', 'BASE ONTOLOGY', 2355, 'Anonymous', on).
mooCache(uses(B33, C33)=>exists(D33, agent(D33, C33)and instrument(D33, B33)), (entails(not agent(D33, C33), not uses(B33, C33))and entails(uses(B33, C33)and'$existential'(D33, '?PROC', agent('?PROC', C33)and instrument('?PROC', B33)), agent(D33, C33)))and entails(not instrument(D33, B33), not uses(B33, C33))and entails(uses(B33, C33)and'$existential'(D33, '?PROC', agent('?PROC', C33)and instrument('?PROC', B33)), instrument(D33, B33)), [domainV(D33, [agent:1, instrument:1]), domainV(C33, [agent:2, uses:2]), domainV(B33, [instrument:2, uses:1]), domainV(_G7251, []), forall(B33), forall(C33), replaceConsVar(D33, '$existential'('?PROC', agent('?PROC', C33)and instrument('?PROC', B33)))], ['OBJ'=B33, 'AGENT'=C33, 'PROC'=D33], 'Merge', 'BASE ONTOLOGY', 2357, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2369, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2372, 'Anonymous', on).
mooCache(instance('MultiplicationFn', 'AssociativeFunction'), instance('MultiplicationFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2375, 'Anonymous', on).
mooCache(instance('MultiplicationFn', 'CommutativeFunction'), instance('MultiplicationFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2377, 'Anonymous', on).
mooCache(instance('MultiplicationFn', 'RelationExtendedToQuantities'), instance('MultiplicationFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2379, 'Anonymous', on).
mooCache(domain('MultiplicationFn', 1, 'Quantity'), domain('MultiplicationFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2381, 'Anonymous', on).
mooCache(domain('MultiplicationFn', 2, 'Quantity'), domain('MultiplicationFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2383, 'Anonymous', on).
mooCache(range('MultiplicationFn', 'Quantity'), range('MultiplicationFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2385, 'Anonymous', on).
mooCache(documentation('MultiplicationFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product   of these numbers."')), documentation('MultiplicationFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product   of these numbers."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2387, 'Anonymous', on).
mooCache(instance('AdditionFn', 'AssociativeFunction'), instance('AdditionFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2389, 'Anonymous', on).
mooCache(instance('AdditionFn', 'CommutativeFunction'), instance('AdditionFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2391, 'Anonymous', on).
mooCache(instance('AdditionFn', 'RelationExtendedToQuantities'), instance('AdditionFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2393, 'Anonymous', on).
mooCache(domain('AdditionFn', 1, 'Quantity'), domain('AdditionFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2395, 'Anonymous', on).
mooCache(domain('AdditionFn', 2, 'Quantity'), domain('AdditionFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2397, 'Anonymous', on).
mooCache(range('AdditionFn', 'Quantity'), range('AdditionFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2399, 'Anonymous', on).
mooCache(documentation('AdditionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these   numbers."')), documentation('AdditionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these   numbers."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2401, 'Anonymous', on).
mooCache(instance('SubtractionFn', 'AssociativeFunction'), instance('SubtractionFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2403, 'Anonymous', on).
mooCache(instance('SubtractionFn', 'RelationExtendedToQuantities'), instance('SubtractionFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2405, 'Anonymous', on).
mooCache(domain('SubtractionFn', 1, 'Quantity'), domain('SubtractionFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2407, 'Anonymous', on).
mooCache(domain('SubtractionFn', 2, 'Quantity'), domain('SubtractionFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2409, 'Anonymous', on).
mooCache(range('SubtractionFn', 'Quantity'), range('SubtractionFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2411, 'Anonymous', on).
mooCache(documentation('SubtractionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference   between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An   exception occurs when ?NUMBER1 is equal to 0, in which case   (SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2."')), documentation('SubtractionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers,   then (SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference   between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An   exception occurs when ?NUMBER1 is equal to 0, in which case   (SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2413, 'Anonymous', on).
mooCache(instance('DivisionFn', 'AssociativeFunction'), instance('DivisionFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2415, 'Anonymous', on).
mooCache(instance('DivisionFn', 'RelationExtendedToQuantities'), instance('DivisionFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2417, 'Anonymous', on).
mooCache(domain('DivisionFn', 1, 'Quantity'), domain('DivisionFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2419, 'Anonymous', on).
mooCache(domain('DivisionFn', 2, 'Quantity'), domain('DivisionFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2421, 'Anonymous', on).
mooCache(range('DivisionFn', 'Quantity'), range('DivisionFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2423, 'Anonymous', on).
mooCache(documentation('DivisionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by   ?NUMBER2.  An exception occurs when ?NUMBER1 = 1, in which case   (DivisionFn ?NUMBER1 ?NUMBER2) is the reciprocal of ?NUMBER2."')), documentation('DivisionFn', string('"If ?NUMBER1 and ?NUMBER2 are Numbers, then   (DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by   ?NUMBER2.  An exception occurs when ?NUMBER1 = 1, in which case   (DivisionFn ?NUMBER1 ?NUMBER2) is the reciprocal of ?NUMBER2."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2425, 'Anonymous', on).
mooCache(instance(P35, 'RationalNumber')=>exists(Q35, exists(R35, instance(R35, 'Integer')and instance(Q35, 'Integer')and equal(P35, 'DivisionFn'(R35, Q35)))), (entails(not instance(R35, 'Integer'), not instance(P35, 'RationalNumber'))and entails(instance(P35, 'RationalNumber')and'$existential'(R35, '?INT1', instance('?INT1', 'Integer')and instance(Q35, 'Integer')and holds('DivisionFn', '?INT1', Q35, P35)), instance(R35, 'Integer')))and (entails(not instance(Q35, 'Integer'), not instance(P35, 'RationalNumber'))and entails((instance(P35, 'RationalNumber')and'$existential'(Q35, '?INT2', exists(R35, instance(R35, 'Integer')and instance('?INT2', 'Integer')and holds('DivisionFn', R35, '?INT2', P35))))and'$existential'(R35, '?INT1', instance('?INT1', 'Integer')and instance(Q35, 'Integer')and holds('DivisionFn', '?INT1', Q35, P35)), instance(Q35, 'Integer')))and entails(not holds('DivisionFn', R35, Q35, P35), not instance(P35, 'RationalNumber'))and entails((instance(P35, 'RationalNumber')and'$existential'(Q35, '?INT2', exists(R35, instance(R35, 'Integer')and instance('?INT2', 'Integer')and holds('DivisionFn', R35, '?INT2', P35))))and'$existential'(R35, '?INT1', instance('?INT1', 'Integer')and instance(Q35, 'Integer')and holds('DivisionFn', '?INT1', Q35, P35)), holds('DivisionFn', R35, Q35, P35)), [domainV(R35, ['$instanceof':'Integer', 'DivisionFn':1]), domainV(Q35, ['$instanceof':'Integer', 'DivisionFn':2]), domainV(P35, ['$instanceof':'RationalNumber', 'DivisionFn':3]), domainV(_G10364, []), forall(P35), replaceConsVar(Q35, '$existential'('?INT2', exists(R35, instance(R35, 'Integer')and instance('?INT2', 'Integer')and holds('DivisionFn', R35, '?INT2', P35)))), replaceConsVar(R35, '$existential'('?INT1', instance('?INT1', 'Integer')and instance(Q35, 'Integer')and holds('DivisionFn', '?INT1', Q35, P35)))], ['NUMBER'=P35, 'INT1'=R35, 'INT2'=Q35], 'Merge', 'NUMERIC FUNCTIONS', 2427, 'Anonymous', on).
mooCache(instance('AbsoluteValueFn', 'UnaryFunction'), instance('AbsoluteValueFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2429, 'Anonymous', on).
mooCache(domain('AbsoluteValueFn', 1, 'RealNumber'), domain('AbsoluteValueFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2431, 'Anonymous', on).
mooCache(range('AbsoluteValueFn', 'PositiveRealNumber'), range('AbsoluteValueFn', 'PositiveRealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2433, 'Anonymous', on).
mooCache(documentation('AbsoluteValueFn', string('"The value of (AbsoluteValueFn ?NUMBER)   is the absolute value of the RealNumber ?NUMBER."')), documentation('AbsoluteValueFn', string('"The value of (AbsoluteValueFn ?NUMBER)   is the absolute value of the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2435, 'Anonymous', on).
mooCache(equal('AbsoluteValueFn'(Z10), A11)<=>instance(Z10, 'PositiveInteger')and equal(Z10, A11)or instance(Z10, 'NegativeInteger')and equal(A11, 'SubtractionFn'(0, Z10)), (entails((not holds('SubtractionFn', 0, Z10, A11)or not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not holds('SubtractionFn', 0, Z10, A11))and instance(Z10, 'NegativeInteger')and holds('SubtractionFn', 0, Z10, A11), equal(Z10, A11))and entails((not equal(Z10, A11)and not holds('SubtractionFn', 0, Z10, A11)or not equal(Z10, A11)or not instance(Z10, 'PositiveInteger')or not instance(Z10, 'PositiveInteger')and not holds('SubtractionFn', 0, Z10, A11))and instance(Z10, 'PositiveInteger')and equal(Z10, A11), instance(Z10, 'NegativeInteger'))and entails((not equal(Z10, A11)and not holds('SubtractionFn', 0, Z10, A11)or not equal(Z10, A11)and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'NegativeInteger')or not holds('SubtractionFn', 0, Z10, A11))and instance(Z10, 'NegativeInteger')and holds('SubtractionFn', 0, Z10, A11), instance(Z10, 'PositiveInteger'))and entails((not equal(Z10, A11)or not equal(Z10, A11)and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger'))and instance(Z10, 'PositiveInteger')and equal(Z10, A11), holds('SubtractionFn', 0, Z10, A11))and entails((not equal(Z10, A11)and not holds('SubtractionFn', 0, Z10, A11)or not equal(Z10, A11)and not instance(Z10, 'NegativeInteger'))and (equal(Z10, A11)or instance(Z10, 'NegativeInteger')and holds('SubtractionFn', 0, Z10, A11)), not instance(Z10, 'PositiveInteger'))and entails((not instance(Z10, 'PositiveInteger')and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not holds('SubtractionFn', 0, Z10, A11))and (instance(Z10, 'PositiveInteger')or instance(Z10, 'NegativeInteger')and holds('SubtractionFn', 0, Z10, A11)), not equal(Z10, A11))and entails((not equal(Z10, A11)and not holds('SubtractionFn', 0, Z10, A11)or not instance(Z10, 'PositiveInteger')and not holds('SubtractionFn', 0, Z10, A11))and (instance(Z10, 'PositiveInteger')and equal(Z10, A11)or holds('SubtractionFn', 0, Z10, A11)), not instance(Z10, 'NegativeInteger'))and entails((not equal(Z10, A11)and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not instance(Z10, 'NegativeInteger'))and (instance(Z10, 'PositiveInteger')and equal(Z10, A11)or instance(Z10, 'NegativeInteger')), not holds('SubtractionFn', 0, Z10, A11)))and (entails((not holds('SubtractionFn', 0, Z10, A11)or not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not holds('SubtractionFn', 0, Z10, A11))and holds('AbsoluteValueFn', Z10, A11), equal(Z10, A11))and entails((not equal(Z10, A11)and not holds('SubtractionFn', 0, Z10, A11)or not equal(Z10, A11)or not instance(Z10, 'PositiveInteger')or not instance(Z10, 'PositiveInteger')and not holds('SubtractionFn', 0, Z10, A11))and holds('AbsoluteValueFn', Z10, A11), instance(Z10, 'NegativeInteger'))and entails((not equal(Z10, A11)and not holds('SubtractionFn', 0, Z10, A11)or not equal(Z10, A11)and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'NegativeInteger')or not holds('SubtractionFn', 0, Z10, A11))and holds('AbsoluteValueFn', Z10, A11), instance(Z10, 'PositiveInteger'))and entails((not equal(Z10, A11)or not equal(Z10, A11)and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger'))and holds('AbsoluteValueFn', Z10, A11), holds('SubtractionFn', 0, Z10, A11))and entails(not equal(Z10, A11)and not holds('SubtractionFn', 0, Z10, A11)or not equal(Z10, A11)and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not instance(Z10, 'NegativeInteger')or not instance(Z10, 'PositiveInteger')and not holds('SubtractionFn', 0, Z10, A11), not holds('AbsoluteValueFn', Z10, A11)))and entails(instance(Z10, 'PositiveInteger')and equal(Z10, A11)or instance(Z10, 'NegativeInteger')and holds('SubtractionFn', 0, Z10, A11), holds('AbsoluteValueFn', Z10, A11))and entails(not holds('AbsoluteValueFn', Z10, A11)and (equal(Z10, A11)or instance(Z10, 'NegativeInteger')and holds('SubtractionFn', 0, Z10, A11)), not instance(Z10, 'PositiveInteger'))and entails(not holds('AbsoluteValueFn', Z10, A11)and (instance(Z10, 'PositiveInteger')or instance(Z10, 'NegativeInteger')and holds('SubtractionFn', 0, Z10, A11)), not equal(Z10, A11))and entails(not holds('AbsoluteValueFn', Z10, A11)and (instance(Z10, 'PositiveInteger')and equal(Z10, A11)or holds('SubtractionFn', 0, Z10, A11)), not instance(Z10, 'NegativeInteger'))and entails(not holds('AbsoluteValueFn', Z10, A11)and (instance(Z10, 'PositiveInteger')and equal(Z10, A11)or instance(Z10, 'NegativeInteger')), not holds('SubtractionFn', 0, Z10, A11)), [domainV(A11, ['AbsoluteValueFn':2, 'SubtractionFn':3]), domainV(Z10, ['$instanceof':'NegativeInteger', '$instanceof':'PositiveInteger', 'AbsoluteValueFn':1, 'SubtractionFn':2]), domainV(_G11673, []), forall(Z10), forall(A11)], ['NUMBER1'=Z10, 'NUMBER2'=A11], 'Merge', 'NUMERIC FUNCTIONS', 2437, 'Anonymous', on).
mooCache(instance('ArcCosineFn', 'UnaryFunction'), instance('ArcCosineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2439, 'Anonymous', on).
mooCache(inverse('ArcCosineFn', 'CosineFn'), inverse('ArcCosineFn', 'CosineFn'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2441, 'Anonymous', on).
mooCache(domain('ArcCosineFn', 1, 'RealNumber'), domain('ArcCosineFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2443, 'Anonymous', on).
mooCache(range('ArcCosineFn', 'PlaneAngleMeasure'), range('ArcCosineFn', 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2445, 'Anonymous', on).
mooCache(documentation('ArcCosineFn', string('"(ArcCosineFn ?NUMBER) returns the arc   cosine of the RealNumber ?NUMBER.  It is the inverse of CosineFn."')), documentation('ArcCosineFn', string('"(ArcCosineFn ?NUMBER) returns the arc   cosine of the RealNumber ?NUMBER.  It is the inverse of CosineFn."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2447, 'Anonymous', on).
mooCache(instance('ArcSineFn', 'UnaryFunction'), instance('ArcSineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2449, 'Anonymous', on).
mooCache(inverse('ArcSineFn', 'SineFn'), inverse('ArcSineFn', 'SineFn'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2451, 'Anonymous', on).
mooCache(domain('ArcSineFn', 1, 'RealNumber'), domain('ArcSineFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2453, 'Anonymous', on).
mooCache(range('ArcSineFn', 'PlaneAngleMeasure'), range('ArcSineFn', 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2455, 'Anonymous', on).
mooCache(documentation('ArcSineFn', string('"(ArcSineFn ?NUMBER) returns the arc sine of   the RealNumber ?NUMBER.  It is the inverse of SineFn."')), documentation('ArcSineFn', string('"(ArcSineFn ?NUMBER) returns the arc sine of   the RealNumber ?NUMBER.  It is the inverse of SineFn."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2457, 'Anonymous', on).
mooCache(instance('ArcTangentFn', 'UnaryFunction'), instance('ArcTangentFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2459, 'Anonymous', on).
mooCache(inverse('ArcTangentFn', 'TangentFn'), inverse('ArcTangentFn', 'TangentFn'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2461, 'Anonymous', on).
mooCache(domain('ArcTangentFn', 1, 'RealNumber'), domain('ArcTangentFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2463, 'Anonymous', on).
mooCache(range('ArcTangentFn', 'PlaneAngleMeasure'), range('ArcTangentFn', 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2465, 'Anonymous', on).
mooCache(documentation('ArcTangentFn', string('"(ArcTangentFn ?NUMBER) returns the arc   tangent of the RealNumber ?NUMBER.  It is the inverse of TangentFn."')), documentation('ArcTangentFn', string('"(ArcTangentFn ?NUMBER) returns the arc   tangent of the RealNumber ?NUMBER.  It is the inverse of TangentFn."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2467, 'Anonymous', on).
mooCache(instance('CeilingFn', 'UnaryFunction'), instance('CeilingFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2469, 'Anonymous', on).
mooCache(domain('CeilingFn', 1, 'RealNumber'), domain('CeilingFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2471, 'Anonymous', on).
mooCache(range('CeilingFn', 'Integer'), range('CeilingFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2473, 'Anonymous', on).
mooCache(documentation('CeilingFn', string('"(CeilingFn ?NUMBER) returns the smallest   Integer greater than or equal to the RealNumber ?NUMBER."')), documentation('CeilingFn', string('"(CeilingFn ?NUMBER) returns the smallest   Integer greater than or equal to the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2475, 'Anonymous', on).
mooCache(equal('CeilingFn'(U25), V25)=>not exists(W25, instance(W25, 'Integer')and greaterThanOrEqualTo(W25, U25)and lessThan(W25, V25)), entails(instance(W25, 'Integer')and greaterThanOrEqualTo(W25, U25)and lessThan(W25, V25), not holds('CeilingFn', U25, V25))and entails(holds('CeilingFn', U25, V25)and greaterThanOrEqualTo(W25, U25)and lessThan(W25, V25), not instance(W25, 'Integer'))and entails(holds('CeilingFn', U25, V25)and instance(W25, 'Integer')and lessThan(W25, V25), not greaterThanOrEqualTo(W25, U25))and entails(holds('CeilingFn', U25, V25)and instance(W25, 'Integer')and greaterThanOrEqualTo(W25, U25), not lessThan(W25, V25)), [domainV(W25, ['$instanceof':'Integer', greaterThanOrEqualTo:1, lessThan:1]), domainV(V25, ['CeilingFn':2, lessThan:2]), domainV(U25, ['CeilingFn':1, greaterThanOrEqualTo:2]), domainV(_G9300, []), forall(U25), forall(V25), forall(W25), forall(W25)], ['NUMBER'=U25, 'INT'=V25, 'OTHERINT'=W25], 'Merge', 'NUMERIC FUNCTIONS', 2477, 'Anonymous', on).
mooCache(instance('CosineFn', 'UnaryFunction'), instance('CosineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2479, 'Anonymous', on).
mooCache(domain('CosineFn', 1, 'PlaneAngleMeasure'), domain('CosineFn', 1, 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2481, 'Anonymous', on).
mooCache(range('CosineFn', 'RealNumber'), range('CosineFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2483, 'Anonymous', on).
mooCache(documentation('CosineFn', string('"(CosineFn ?DEGREE) returns the cosine of the   PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the   side next to ?DEGREE to the hypotenuse in a right-angled triangle."')), documentation('CosineFn', string('"(CosineFn ?DEGREE) returns the cosine of the   PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the   side next to ?DEGREE to the hypotenuse in a right-angled triangle."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2485, 'Anonymous', on).
mooCache(instance('DenominatorFn', 'UnaryFunction'), instance('DenominatorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2487, 'Anonymous', on).
mooCache(domain('DenominatorFn', 1, 'RealNumber'), domain('DenominatorFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2489, 'Anonymous', on).
mooCache(range('DenominatorFn', 'Integer'), range('DenominatorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2491, 'Anonymous', on).
mooCache(documentation('DenominatorFn', string('"(DenominatorFn ?NUMBER) returns the   denominator of the canonical reduced form of the RealNumber ?NUMBER."')), documentation('DenominatorFn', string('"(DenominatorFn ?NUMBER) returns the   denominator of the canonical reduced form of the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2493, 'Anonymous', on).
mooCache(instance('ExponentiationFn', 'BinaryFunction'), instance('ExponentiationFn', 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2495, 'Anonymous', on).
mooCache(instance('ExponentiationFn', 'RelationExtendedToQuantities'), instance('ExponentiationFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2497, 'Anonymous', on).
mooCache(domain('ExponentiationFn', 1, 'Quantity'), domain('ExponentiationFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2499, 'Anonymous', on).
mooCache(domain('ExponentiationFn', 2, 'Integer'), domain('ExponentiationFn', 2, 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2501, 'Anonymous', on).
mooCache(range('ExponentiationFn', 'Quantity'), range('ExponentiationFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2503, 'Anonymous', on).
mooCache(documentation('ExponentiationFn', string('"(ExponentiationFn ?NUMBER ?INT) returns   the RealNumber ?NUMBER raised to the power of the Integer ?INT."')), documentation('ExponentiationFn', string('"(ExponentiationFn ?NUMBER ?INT) returns   the RealNumber ?NUMBER raised to the power of the Integer ?INT."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2505, 'Anonymous', on).
mooCache(instance('FloorFn', 'UnaryFunction'), instance('FloorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2507, 'Anonymous', on).
mooCache(domain('FloorFn', 1, 'RealNumber'), domain('FloorFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2509, 'Anonymous', on).
mooCache(range('FloorFn', 'Integer'), range('FloorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2511, 'Anonymous', on).
mooCache(documentation('FloorFn', string('"(FloorFn ?NUMBER) returns the largest Integer   less than or equal to the RealNumber ?NUMBER."')), documentation('FloorFn', string('"(FloorFn ?NUMBER) returns the largest Integer   less than or equal to the RealNumber ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2513, 'Anonymous', on).
mooCache(equal('FloorFn'(G36), H36)=>not exists(I36, instance(I36, 'Integer')and lessThanOrEqualTo(I36, G36)and greaterThan(I36, H36)), entails(instance(I36, 'Integer')and lessThanOrEqualTo(I36, G36)and greaterThan(I36, H36), not holds('FloorFn', G36, H36))and entails(holds('FloorFn', G36, H36)and lessThanOrEqualTo(I36, G36)and greaterThan(I36, H36), not instance(I36, 'Integer'))and entails(holds('FloorFn', G36, H36)and instance(I36, 'Integer')and greaterThan(I36, H36), not lessThanOrEqualTo(I36, G36))and entails(holds('FloorFn', G36, H36)and instance(I36, 'Integer')and lessThanOrEqualTo(I36, G36), not greaterThan(I36, H36)), [domainV(I36, ['$instanceof':'Integer', greaterThan:1, lessThanOrEqualTo:1]), domainV(H36, ['FloorFn':2, greaterThan:2]), domainV(G36, ['FloorFn':1, lessThanOrEqualTo:2]), domainV(_G9288, []), forall(G36), forall(H36), forall(I36), forall(I36)], ['NUMBER'=G36, 'INT'=H36, 'OTHERINT'=I36], 'Merge', 'NUMERIC FUNCTIONS', 2515, 'Anonymous', on).
mooCache(instance('GreatestCommonDivisorFn', 'Function'), instance('GreatestCommonDivisorFn', 'Function'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2517, 'Anonymous', on).
mooCache(instance('GreatestCommonDivisorFn', 'VariableArityRelation'), instance('GreatestCommonDivisorFn', 'VariableArityRelation'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2519, 'Anonymous', on).
mooCache(range('GreatestCommonDivisorFn', 'Integer'), range('GreatestCommonDivisorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2521, 'Anonymous', on).
mooCache(documentation('GreatestCommonDivisorFn', string('"(GreatestCommonDivisorFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of   ?NUMBER1 through ?NUMBER."')), documentation('GreatestCommonDivisorFn', string('"(GreatestCommonDivisorFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of   ?NUMBER1 through ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2523, 'Anonymous', on).
mooCache(instance('ImaginaryPartFn', 'UnaryFunction'), instance('ImaginaryPartFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2525, 'Anonymous', on).
mooCache(domain('ImaginaryPartFn', 1, 'ComplexNumber'), domain('ImaginaryPartFn', 1, 'ComplexNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2527, 'Anonymous', on).
mooCache(range('ImaginaryPartFn', 'ImaginaryNumber'), range('ImaginaryPartFn', 'ImaginaryNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2529, 'Anonymous', on).
mooCache(documentation('ImaginaryPartFn', string('"(ImaginaryPartFn ?NUMBER) returns   the imaginary part of ?NUMBER."')), documentation('ImaginaryPartFn', string('"(ImaginaryPartFn ?NUMBER) returns   the imaginary part of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2531, 'Anonymous', on).
mooCache(instance(H21, 'ComplexNumber')=>exists(I21, exists(J21, equal(J21, 'RealNumberFn'(H21))and equal(I21, 'ImaginaryPartFn'(H21)))), (entails(not holds('RealNumberFn', H21, J21), not instance(H21, 'ComplexNumber'))and entails(instance(H21, 'ComplexNumber')and'$existential'(J21, '?PART1', holds('RealNumberFn', H21, '?PART1')and holds('ImaginaryPartFn', H21, I21)), holds('RealNumberFn', H21, J21)))and entails(not holds('ImaginaryPartFn', H21, I21), not instance(H21, 'ComplexNumber'))and entails((instance(H21, 'ComplexNumber')and'$existential'(I21, '?PART2', exists(J21, holds('RealNumberFn', H21, J21)and holds('ImaginaryPartFn', H21, '?PART2'))))and'$existential'(J21, '?PART1', holds('RealNumberFn', H21, '?PART1')and holds('ImaginaryPartFn', H21, I21)), holds('ImaginaryPartFn', H21, I21)), [domainV(J21, ['RealNumberFn':2]), domainV(I21, ['ImaginaryPartFn':2]), domainV(H21, ['$instanceof':'ComplexNumber', 'ImaginaryPartFn':1, 'RealNumberFn':1]), domainV(_G9345, []), forall(H21), replaceConsVar(I21, '$existential'('?PART2', exists(J21, holds('RealNumberFn', H21, J21)and holds('ImaginaryPartFn', H21, '?PART2')))), replaceConsVar(J21, '$existential'('?PART1', holds('RealNumberFn', H21, '?PART1')and holds('ImaginaryPartFn', H21, I21)))], ['NUMBER'=H21, 'PART1'=J21, 'PART2'=I21], 'Merge', 'NUMERIC FUNCTIONS', 2533, 'Anonymous', on).
mooCache(instance('IntegerSquareRootFn', 'UnaryFunction'), instance('IntegerSquareRootFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2535, 'Anonymous', on).
mooCache(domain('IntegerSquareRootFn', 1, 'RealNumber'), domain('IntegerSquareRootFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2537, 'Anonymous', on).
mooCache(range('IntegerSquareRootFn', 'NonnegativeInteger'), range('IntegerSquareRootFn', 'NonnegativeInteger'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2539, 'Anonymous', on).
mooCache(documentation('IntegerSquareRootFn', string('"(IntegerSquareRootFn ?NUMBER)   returns the integer square root of ?NUMBER."')), documentation('IntegerSquareRootFn', string('"(IntegerSquareRootFn ?NUMBER)   returns the integer square root of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2541, 'Anonymous', on).
mooCache(instance('LeastCommonMultipleFn', 'Function'), instance('LeastCommonMultipleFn', 'Function'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2543, 'Anonymous', on).
mooCache(instance('LeastCommonMultipleFn', 'VariableArityRelation'), instance('LeastCommonMultipleFn', 'VariableArityRelation'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2545, 'Anonymous', on).
mooCache(range('LeastCommonMultipleFn', 'Integer'), range('LeastCommonMultipleFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2547, 'Anonymous', on).
mooCache(documentation('LeastCommonMultipleFn', string('"(LeastCommonMultipleFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of   ?NUMBER1 through ?NUMBER."')), documentation('LeastCommonMultipleFn', string('"(LeastCommonMultipleFn   ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of   ?NUMBER1 through ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2549, 'Anonymous', on).
mooCache(instance('LogFn', 'BinaryFunction'), instance('LogFn', 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2551, 'Anonymous', on).
mooCache(domain('LogFn', 1, 'RealNumber'), domain('LogFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2553, 'Anonymous', on).
mooCache(domain('LogFn', 2, 'PositiveInteger'), domain('LogFn', 2, 'PositiveInteger'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2555, 'Anonymous', on).
mooCache(range('LogFn', 'RealNumber'), range('LogFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2557, 'Anonymous', on).
mooCache(documentation('LogFn', string('"(LogFn ?NUMBER ?INT) returns the logarithm of the   RealNumber ?NUMBER in the base denoted by the Integer ?INT."')), documentation('LogFn', string('"(LogFn ?NUMBER ?INT) returns the logarithm of the   RealNumber ?NUMBER in the base denoted by the Integer ?INT."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2559, 'Anonymous', on).
mooCache(instance('MaxFn', 'AssociativeFunction'), instance('MaxFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2561, 'Anonymous', on).
mooCache(instance('MaxFn', 'CommutativeFunction'), instance('MaxFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2563, 'Anonymous', on).
mooCache(instance('MaxFn', 'RelationExtendedToQuantities'), instance('MaxFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2565, 'Anonymous', on).
mooCache(domain('MaxFn', 1, 'Quantity'), domain('MaxFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2567, 'Anonymous', on).
mooCache(domain('MaxFn', 2, 'Quantity'), domain('MaxFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2569, 'Anonymous', on).
mooCache(range('MaxFn', 'Quantity'), range('MaxFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2571, 'Anonymous', on).
mooCache(documentation('MaxFn', string('"(MaxFn ?NUMBER1 ?NUMBER2) is the largest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MaxFn returns one of its arguments."')), documentation('MaxFn', string('"(MaxFn ?NUMBER1 ?NUMBER2) is the largest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MaxFn returns one of its arguments."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2573, 'Anonymous', on).
mooCache(equal('MaxFn'(S, T), U)=>equal(U, S)and greaterThan(S, T)or equal(U, T)and greaterThan(T, S)or equal(U, S)and equal(U, T), ((entails(not equal(U, S)and not greaterThan(T, S)and not equal(U, T), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not greaterThan(T, S)and not equal(U, T), equal(U, S))and entails(holds('MaxFn', S, T, U)and not equal(U, S)and not equal(U, T), greaterThan(T, S))and entails(holds('MaxFn', S, T, U)and not equal(U, S)and not greaterThan(T, S), equal(U, T)))and (entails(not equal(U, S)and not greaterThan(T, S)and not equal(U, S), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not equal(U, S)and not equal(U, S), greaterThan(T, S))and entails(holds('MaxFn', S, T, U)and not greaterThan(T, S), equal(U, S)))and (entails(not equal(U, S)and not equal(U, T)and not equal(U, S), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not equal(U, S)and not equal(U, S), equal(U, T))and entails(holds('MaxFn', S, T, U)and not equal(U, T), equal(U, S)))and entails(not equal(U, S)and not equal(U, T)and not equal(U, T), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not equal(U, T)and not equal(U, T), equal(U, S))and entails(holds('MaxFn', S, T, U)and not equal(U, S), equal(U, T)))and (entails(not greaterThan(S, T)and not greaterThan(T, S)and not equal(U, T), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not greaterThan(T, S)and not equal(U, T), greaterThan(S, T))and entails(holds('MaxFn', S, T, U)and not greaterThan(S, T)and not equal(U, T), greaterThan(T, S))and entails(holds('MaxFn', S, T, U)and not greaterThan(S, T)and not greaterThan(T, S), equal(U, T)))and (entails(not greaterThan(S, T)and not greaterThan(T, S)and not equal(U, S), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not greaterThan(T, S)and not equal(U, S), greaterThan(S, T))and entails(holds('MaxFn', S, T, U)and not greaterThan(S, T)and not equal(U, S), greaterThan(T, S))and entails(holds('MaxFn', S, T, U)and not greaterThan(S, T)and not greaterThan(T, S), equal(U, S)))and (entails(not greaterThan(S, T)and not equal(U, T)and not equal(U, S), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not equal(U, T)and not equal(U, S), greaterThan(S, T))and entails(holds('MaxFn', S, T, U)and not greaterThan(S, T)and not equal(U, S), equal(U, T))and entails(holds('MaxFn', S, T, U)and not greaterThan(S, T)and not equal(U, T), equal(U, S)))and entails(not greaterThan(S, T)and not equal(U, T)and not equal(U, T), not holds('MaxFn', S, T, U))and entails(holds('MaxFn', S, T, U)and not equal(U, T)and not equal(U, T), greaterThan(S, T))and entails(holds('MaxFn', S, T, U)and not greaterThan(S, T), equal(U, T)), [domainV(U, ['MaxFn':3]), domainV(T, ['MaxFn':2, greaterThan:1, greaterThan:2]), domainV(S, ['MaxFn':1, greaterThan:1, greaterThan:2]), domainV(_G14186, []), forall(S), forall(T), forall(U)], ['NUMBER1'=S, 'NUMBER2'=T, 'NUMBER'=U], 'Merge', 'NUMERIC FUNCTIONS', 2575, 'Anonymous', on).
mooCache(instance('MinFn', 'AssociativeFunction'), instance('MinFn', 'AssociativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2577, 'Anonymous', on).
mooCache(instance('MinFn', 'CommutativeFunction'), instance('MinFn', 'CommutativeFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2579, 'Anonymous', on).
mooCache(instance('MinFn', 'RelationExtendedToQuantities'), instance('MinFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2581, 'Anonymous', on).
mooCache(domain('MinFn', 1, 'Quantity'), domain('MinFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2583, 'Anonymous', on).
mooCache(domain('MinFn', 2, 'Quantity'), domain('MinFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2585, 'Anonymous', on).
mooCache(range('MinFn', 'Quantity'), range('MinFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2587, 'Anonymous', on).
mooCache(documentation('MinFn', string('"(MinFn ?NUMBER1 ?NUMBER2) is the smallest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MinFn returns one of its arguments."')), documentation('MinFn', string('"(MinFn ?NUMBER1 ?NUMBER2) is the smallest of   ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2,   MinFn returns one of its arguments."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2589, 'Anonymous', on).
mooCache(equal('MinFn'(O24, P24), Q24)=>equal(Q24, O24)and lessThan(O24, P24)or equal(Q24, P24)and lessThan(P24, O24)or equal(Q24, O24)and equal(Q24, P24), ((entails(not equal(Q24, O24)and not lessThan(P24, O24)and not equal(Q24, P24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(P24, O24)and not equal(Q24, P24), equal(Q24, O24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, O24)and not equal(Q24, P24), lessThan(P24, O24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, O24)and not lessThan(P24, O24), equal(Q24, P24)))and (entails(not equal(Q24, O24)and not lessThan(P24, O24)and not equal(Q24, O24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, O24)and not equal(Q24, O24), lessThan(P24, O24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(P24, O24), equal(Q24, O24)))and (entails(not equal(Q24, O24)and not equal(Q24, P24)and not equal(Q24, O24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, O24)and not equal(Q24, O24), equal(Q24, P24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, P24), equal(Q24, O24)))and entails(not equal(Q24, O24)and not equal(Q24, P24)and not equal(Q24, P24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, P24)and not equal(Q24, P24), equal(Q24, O24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, O24), equal(Q24, P24)))and (entails(not lessThan(O24, P24)and not lessThan(P24, O24)and not equal(Q24, P24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(P24, O24)and not equal(Q24, P24), lessThan(O24, P24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(O24, P24)and not equal(Q24, P24), lessThan(P24, O24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(O24, P24)and not lessThan(P24, O24), equal(Q24, P24)))and (entails(not lessThan(O24, P24)and not lessThan(P24, O24)and not equal(Q24, O24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(P24, O24)and not equal(Q24, O24), lessThan(O24, P24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(O24, P24)and not equal(Q24, O24), lessThan(P24, O24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(O24, P24)and not lessThan(P24, O24), equal(Q24, O24)))and (entails(not lessThan(O24, P24)and not equal(Q24, P24)and not equal(Q24, O24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, P24)and not equal(Q24, O24), lessThan(O24, P24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(O24, P24)and not equal(Q24, O24), equal(Q24, P24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(O24, P24)and not equal(Q24, P24), equal(Q24, O24)))and entails(not lessThan(O24, P24)and not equal(Q24, P24)and not equal(Q24, P24), not holds('MinFn', O24, P24, Q24))and entails(holds('MinFn', O24, P24, Q24)and not equal(Q24, P24)and not equal(Q24, P24), lessThan(O24, P24))and entails(holds('MinFn', O24, P24, Q24)and not lessThan(O24, P24), equal(Q24, P24)), [domainV(Q24, ['MinFn':3]), domainV(P24, ['MinFn':2, lessThan:1, lessThan:2]), domainV(O24, ['MinFn':1, lessThan:1, lessThan:2]), domainV(_G14150, []), forall(O24), forall(P24), forall(Q24)], ['NUMBER1'=O24, 'NUMBER2'=P24, 'NUMBER'=Q24], 'Merge', 'NUMERIC FUNCTIONS', 2591, 'Anonymous', on).
mooCache(instance('NumeratorFn', 'UnaryFunction'), instance('NumeratorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2593, 'Anonymous', on).
mooCache(domain('NumeratorFn', 1, 'RealNumber'), domain('NumeratorFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2595, 'Anonymous', on).
mooCache(range('NumeratorFn', 'Integer'), range('NumeratorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2597, 'Anonymous', on).
mooCache(documentation('NumeratorFn', string('"(NumeratorFn ?NUMBER) returns the numerator   of the canonical reduced form ?NUMBER."')), documentation('NumeratorFn', string('"(NumeratorFn ?NUMBER) returns the numerator   of the canonical reduced form ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2599, 'Anonymous', on).
mooCache(instance('Pi', 'RealNumber'), instance('Pi', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2601, 'Anonymous', on).
mooCache(documentation('Pi', string('"Pi is the RealNumber that   is the ratio of the perimeter of a circle to its diameter.  It is   approximately equal to 3.141592653589793."')), documentation('Pi', string('"Pi is the RealNumber that   is the ratio of the perimeter of a circle to its diameter.  It is   approximately equal to 3.141592653589793."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2603, 'Anonymous', on).
mooCache(instance('RationalNumberFn', 'UnaryFunction'), instance('RationalNumberFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2605, 'Anonymous', on).
mooCache(domain('RationalNumberFn', 1, 'Number'), domain('RationalNumberFn', 1, 'Number'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2607, 'Anonymous', on).
mooCache(range('RationalNumberFn', 'RationalNumber'), range('RationalNumberFn', 'RationalNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2609, 'Anonymous', on).
mooCache(documentation('RationalNumberFn', string('"(RationalNumberFn ?NUMBER) returns   the rational representation of ?NUMBER."')), documentation('RationalNumberFn', string('"(RationalNumberFn ?NUMBER) returns   the rational representation of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2611, 'Anonymous', on).
mooCache(instance('RealNumberFn', 'UnaryFunction'), instance('RealNumberFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2613, 'Anonymous', on).
mooCache(domain('RealNumberFn', 1, 'Number'), domain('RealNumberFn', 1, 'Number'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2615, 'Anonymous', on).
mooCache(range('RealNumberFn', 'RealNumber'), range('RealNumberFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2617, 'Anonymous', on).
mooCache(documentation('RealNumberFn', string('"(RealNumberFn ?NUMBER) returns the part of   ?NUMBER that is a RealNumber."')), documentation('RealNumberFn', string('"(RealNumberFn ?NUMBER) returns the part of   ?NUMBER that is a RealNumber."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2619, 'Anonymous', on).
mooCache(instance('ReciprocalFn', 'UnaryFunction'), instance('ReciprocalFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2621, 'Anonymous', on).
mooCache(instance('ReciprocalFn', 'RelationExtendedToQuantities'), instance('ReciprocalFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2623, 'Anonymous', on).
mooCache(domain('ReciprocalFn', 1, 'Quantity'), domain('ReciprocalFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2625, 'Anonymous', on).
mooCache(range('ReciprocalFn', 'Quantity'), range('ReciprocalFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2627, 'Anonymous', on).
mooCache(documentation('ReciprocalFn', string('"(ReciprocalFn ?NUMBER) is the reciprocal   element of ?NUMBER with respect to the multiplication operator   (MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal   element.  For example the number 0 does not.  If a number ?NUMBER has a   reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be   1, e.g. 3*1/3 = 1.  The reciprocal of an element is equal to   applying the ExponentiationFn function to the element to the power   -1."')), documentation('ReciprocalFn', string('"(ReciprocalFn ?NUMBER) is the reciprocal   element of ?NUMBER with respect to the multiplication operator   (MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal   element.  For example the number 0 does not.  If a number ?NUMBER has a   reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be   1, e.g. 3*1/3 = 1.  The reciprocal of an element is equal to   applying the ExponentiationFn function to the element to the power   -1."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2629, 'Anonymous', on).
mooCache(equal('ReciprocalFn'(U37), 'ExponentiationFn'(U37, -1)), equal('ReciprocalFn'(U37), 'ExponentiationFn'(U37, -1)), [domainV(U37, ['ExponentiationFn':1, 'ReciprocalFn':1]), domainV(_G3622, []), forall(U37)], ['NUMBER'=U37], 'Merge', 'NUMERIC FUNCTIONS', 2631, 'Anonymous', on).
mooCache(equal(1, 'MultiplicationFn'(E2, 'ReciprocalFn'(E2))), equal(1, 'MultiplicationFn'(E2, 'ReciprocalFn'(E2))), [domainV(E2, ['MultiplicationFn':1, 'ReciprocalFn':1]), domainV(_G3589, []), forall(E2)], ['NUMBER'=E2], 'Merge', 'NUMERIC FUNCTIONS', 2633, 'Anonymous', on).
mooCache(instance('RemainderFn', 'BinaryFunction'), instance('RemainderFn', 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2635, 'Anonymous', on).
mooCache(instance('RemainderFn', 'RelationExtendedToQuantities'), instance('RemainderFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2637, 'Anonymous', on).
mooCache(domain('RemainderFn', 1, 'Quantity'), domain('RemainderFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2639, 'Anonymous', on).
mooCache(domain('RemainderFn', 2, 'Quantity'), domain('RemainderFn', 2, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2641, 'Anonymous', on).
mooCache(range('RemainderFn', 'Quantity'), range('RemainderFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2643, 'Anonymous', on).
mooCache(documentation('RemainderFn', string('"(RemainderFn ?NUMBER ?DIVISOR) is the   remainder of the number ?NUMBER divided by the number ?DIVISOR.    The result has the same sign as ?DIVISOR."')), documentation('RemainderFn', string('"(RemainderFn ?NUMBER ?DIVISOR) is the   remainder of the number ?NUMBER divided by the number ?DIVISOR.    The result has the same sign as ?DIVISOR."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2645, 'Anonymous', on).
mooCache(equal('RemainderFn'(X19, Y19), Z19)<=>equal('AdditionFn'('MultiplicationFn'('FloorFn'('DivisionFn'(X19, Y19)), Y19), Z19), X19), (entails(holds('RemainderFn', X19, Y19, Z19), holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(X19, Y19)), Y19), Z19, X19))and entails(not holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(X19, Y19)), Y19), Z19, X19), not holds('RemainderFn', X19, Y19, Z19)))and entails(holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(X19, Y19)), Y19), Z19, X19), holds('RemainderFn', X19, Y19, Z19))and entails(not holds('RemainderFn', X19, Y19, Z19), not holds('AdditionFn', 'MultiplicationFn'('FloorFn'('DivisionFn'(X19, Y19)), Y19), Z19, X19)), [domainV(Z19, ['AdditionFn':2, 'RemainderFn':3]), domainV(Y19, ['DivisionFn':2, 'MultiplicationFn':2, 'RemainderFn':2]), domainV(X19, ['AdditionFn':3, 'DivisionFn':1, 'RemainderFn':1]), domainV(_G8952, []), forall(X19), forall(Y19), forall(Z19)], ['NUMBER1'=X19, 'NUMBER2'=Y19, 'NUMBER'=Z19], 'Merge', 'NUMERIC FUNCTIONS', 2647, 'Anonymous', on).
mooCache(equal('RemainderFn'(U22, V22), W22)=>equal('SignumFn'(V22), 'SignumFn'(W22)), entails(not equal('SignumFn'(V22), 'SignumFn'(W22)), not holds('RemainderFn', U22, V22, W22))and entails(holds('RemainderFn', U22, V22, W22), equal('SignumFn'(V22), 'SignumFn'(W22))), [domainV(W22, ['RemainderFn':3, 'SignumFn':1]), domainV(V22, ['RemainderFn':2, 'SignumFn':1]), domainV(U22, ['RemainderFn':1]), domainV(_G6073, []), forall(U22), forall(V22), forall(W22)], ['NUMBER1'=U22, 'NUMBER2'=V22, 'NUMBER'=W22], 'Merge', 'NUMERIC FUNCTIONS', 2649, 'Anonymous', on).
mooCache(instance(M25, 'EvenInteger')=>equal('RemainderFn'(M25, 2), 0), entails(not equal('RemainderFn'(M25, 2), 0), not instance(M25, 'EvenInteger'))and entails(instance(M25, 'EvenInteger'), equal('RemainderFn'(M25, 2), 0)), [domainV(M25, ['$instanceof':'EvenInteger', 'RemainderFn':1]), domainV(_G4299, []), forall(M25)], ['NUMBER'=M25], 'Merge', 'NUMERIC FUNCTIONS', 2651, 'Anonymous', on).
mooCache(instance(D28, 'OddInteger')=>equal('RemainderFn'(D28, 2), 1), entails(not equal('RemainderFn'(D28, 2), 1), not instance(D28, 'OddInteger'))and entails(instance(D28, 'OddInteger'), equal('RemainderFn'(D28, 2), 1)), [domainV(D28, ['$instanceof':'OddInteger', 'RemainderFn':1]), domainV(_G4293, []), forall(D28)], ['NUMBER'=D28], 'Merge', 'NUMERIC FUNCTIONS', 2653, 'Anonymous', on).
mooCache(instance(B31, 'PrimeNumber')=>forall(C31, equal('RemainderFn'(B31, C31), 0)=>equal(C31, 1)or equal(C31, B31)), entails(equal('RemainderFn'(B31, C31), 0)and not equal(1, C31)and not equal(C31, B31), not instance(B31, 'PrimeNumber'))and entails(instance(B31, 'PrimeNumber')and not equal(1, C31)and not equal(C31, B31), not equal('RemainderFn'(B31, C31), 0))and entails(instance(B31, 'PrimeNumber')and equal('RemainderFn'(B31, C31), 0)and not equal(C31, B31), equal(1, C31))and entails(instance(B31, 'PrimeNumber')and equal('RemainderFn'(B31, C31), 0)and not equal(1, C31), equal(C31, B31)), [domainV(C31, ['RemainderFn':2]), domainV(B31, ['$instanceof':'PrimeNumber', 'RemainderFn':1]), domainV(_G8927, []), forall(B31), forall(C31)], ['PRIME'=B31, 'NUMBER'=C31], 'Merge', 'NUMERIC FUNCTIONS', 2655, 'Anonymous', on).
mooCache(instance('RoundFn', 'UnaryFunction'), instance('RoundFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2657, 'Anonymous', on).
mooCache(instance('RoundFn', 'RelationExtendedToQuantities'), instance('RoundFn', 'RelationExtendedToQuantities'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2659, 'Anonymous', on).
mooCache(domain('RoundFn', 1, 'Quantity'), domain('RoundFn', 1, 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2661, 'Anonymous', on).
mooCache(range('RoundFn', 'Quantity'), range('RoundFn', 'Quantity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2663, 'Anonymous', on).
mooCache(documentation('RoundFn', string('"(RoundFn ?NUMBER) is the Integer closest   to ?NUMBER on the number line.  If ?NUMBER is halfway between two   Integers (for example 3.5), it denotes the larger Integer."')), documentation('RoundFn', string('"(RoundFn ?NUMBER) is the Integer closest   to ?NUMBER on the number line.  If ?NUMBER is halfway between two   Integers (for example 3.5), it denotes the larger Integer."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2665, 'Anonymous', on).
mooCache(equal('RoundFn'(F8), G8)=> (lessThan('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)=>equal(G8, 'FloorFn'(F8)))or (greaterThanOrEqualTo('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)=>equal(G8, 'CeilingFn'(F8))), entails((lessThan('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)and not holds('FloorFn', F8, G8))and greaterThanOrEqualTo('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)and not holds('CeilingFn', F8, G8), not holds('RoundFn', F8, G8))and entails(holds('RoundFn', F8, G8)and not holds('FloorFn', F8, G8)and greaterThanOrEqualTo('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)and not holds('CeilingFn', F8, G8), not lessThan('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5))and entails(holds('RoundFn', F8, G8)and lessThan('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)and greaterThanOrEqualTo('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)and not holds('CeilingFn', F8, G8), holds('FloorFn', F8, G8))and entails(holds('RoundFn', F8, G8)and (lessThan('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)and not holds('FloorFn', F8, G8))and not holds('CeilingFn', F8, G8), not greaterThanOrEqualTo('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5))and entails(holds('RoundFn', F8, G8)and (lessThan('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5)and not holds('FloorFn', F8, G8))and greaterThanOrEqualTo('SubtractionFn'(F8, 'FloorFn'(F8)), 0.5), holds('CeilingFn', F8, G8)), [domainV(G8, ['CeilingFn':2, 'FloorFn':2, 'RoundFn':2]), domainV(F8, ['CeilingFn':1, 'FloorFn':1, 'RoundFn':1, 'SubtractionFn':1]), domainV(_G13505, []), forall(F8), forall(G8)], ['NUMBER1'=F8, 'NUMBER2'=G8], 'Merge', 'NUMERIC FUNCTIONS', 2667, 'Anonymous', on).
mooCache(instance('SignumFn', 'UnaryFunction'), instance('SignumFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2669, 'Anonymous', on).
mooCache(domain('SignumFn', 1, 'RealNumber'), domain('SignumFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2671, 'Anonymous', on).
mooCache(range('SignumFn', 'Integer'), range('SignumFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2673, 'Anonymous', on).
mooCache(documentation('SignumFn', string('"(SignumFn ?NUMBER) denotes the sign of ?NUMBER.    This is one of the following values:  -1, 1, or 0."')), documentation('SignumFn', string('"(SignumFn ?NUMBER) denotes the sign of ?NUMBER.    This is one of the following values:  -1, 1, or 0."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2675, 'Anonymous', on).
mooCache(instance(F21, 'NonnegativeRealNumber')=>equal('SignumFn'(F21), 1)or equal('SignumFn'(F21), 0), entails(not equal('SignumFn'(F21), 1)and not equal('SignumFn'(F21), 0), not instance(F21, 'NonnegativeRealNumber'))and entails(instance(F21, 'NonnegativeRealNumber')and not equal('SignumFn'(F21), 0), equal('SignumFn'(F21), 1))and entails(instance(F21, 'NonnegativeRealNumber')and not equal('SignumFn'(F21), 1), equal('SignumFn'(F21), 0)), [domainV(F21, ['$instanceof':'NonnegativeRealNumber', 'SignumFn':1]), domainV(_G5884, []), forall(F21)], ['NUMBER'=F21], 'Merge', 'NUMERIC FUNCTIONS', 2677, 'Anonymous', on).
mooCache(instance(Y23, 'PositiveRealNumber')=>equal('SignumFn'(Y23), 1), entails(not equal('SignumFn'(Y23), 1), not instance(Y23, 'PositiveRealNumber'))and entails(instance(Y23, 'PositiveRealNumber'), equal('SignumFn'(Y23), 1)), [domainV(Y23, ['$instanceof':'PositiveRealNumber', 'SignumFn':1]), domainV(_G4204, []), forall(Y23)], ['NUMBER'=Y23], 'Merge', 'NUMERIC FUNCTIONS', 2679, 'Anonymous', on).
mooCache(instance(N26, 'NegativeRealNumber')=>equal('SignumFn'(N26), -1), entails(not equal('SignumFn'(N26), -1), not instance(N26, 'NegativeRealNumber'))and entails(instance(N26, 'NegativeRealNumber'), equal('SignumFn'(N26), -1)), [domainV(N26, ['$instanceof':'NegativeRealNumber', 'SignumFn':1]), domainV(_G4258, []), forall(N26)], ['NUMBER'=N26], 'Merge', 'NUMERIC FUNCTIONS', 2681, 'Anonymous', on).
mooCache(instance('SineFn', 'UnaryFunction'), instance('SineFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2683, 'Anonymous', on).
mooCache(domain('SineFn', 1, 'PlaneAngleMeasure'), domain('SineFn', 1, 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2685, 'Anonymous', on).
mooCache(range('SineFn', 'RealNumber'), range('SineFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2687, 'Anonymous', on).
mooCache(documentation('SineFn', string('"(SineFn ?DEGREE) is the sine of the   PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side   opposite ?DEGREE to the hypotenuse in a right-angled triangle."')), documentation('SineFn', string('"(SineFn ?DEGREE) is the sine of the   PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side   opposite ?DEGREE to the hypotenuse in a right-angled triangle."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2689, 'Anonymous', on).
mooCache(instance('SquareRootFn', 'UnaryFunction'), instance('SquareRootFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2691, 'Anonymous', on).
mooCache(domain('SquareRootFn', 1, 'RealNumber'), domain('SquareRootFn', 1, 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2693, 'Anonymous', on).
mooCache(range('SquareRootFn', 'RealNumber'), range('SquareRootFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2695, 'Anonymous', on).
mooCache(documentation('SquareRootFn', string('"(SquareRootFn ?NUMBER) is the principal   square root of ?NUMBER."')), documentation('SquareRootFn', string('"(SquareRootFn ?NUMBER) is the principal   square root of ?NUMBER."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2697, 'Anonymous', on).
mooCache(equal('SquareRootFn'(K10), L10)=>equal('MultiplicationFn'(L10, L10), K10), entails(not holds('MultiplicationFn', L10, L10, K10), not holds('SquareRootFn', K10, L10))and entails(holds('SquareRootFn', K10, L10), holds('MultiplicationFn', L10, L10, K10)), [domainV(L10, ['MultiplicationFn':1, 'MultiplicationFn':2, 'SquareRootFn':2]), domainV(K10, ['MultiplicationFn':3, 'SquareRootFn':1]), domainV(_G5836, []), forall(K10), forall(L10)], ['NUMBER1'=K10, 'NUMBER2'=L10], 'Merge', 'NUMERIC FUNCTIONS', 2699, 'Anonymous', on).
mooCache(instance('TangentFn', 'UnaryFunction'), instance('TangentFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2701, 'Anonymous', on).
mooCache(domain('TangentFn', 1, 'PlaneAngleMeasure'), domain('TangentFn', 1, 'PlaneAngleMeasure'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2703, 'Anonymous', on).
mooCache(range('TangentFn', 'RealNumber'), range('TangentFn', 'RealNumber'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2705, 'Anonymous', on).
mooCache(documentation('TangentFn', string('"(TangentFn ?DEGREE) is the tangent of the   PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of   the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled   triangle."')), documentation('TangentFn', string('"(TangentFn ?DEGREE) is the tangent of the   PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of   the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled   triangle."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2707, 'Anonymous', on).
mooCache(equal('TangentFn'(X22), 'DivisionFn'('SineFn'(X22), 'CosineFn'(X22))), equal('TangentFn'(X22), 'DivisionFn'('SineFn'(X22), 'CosineFn'(X22))), [domainV(X22, ['CosineFn':1, 'SineFn':1, 'TangentFn':1]), domainV(_G4503, []), forall(X22)], ['DEGREE'=X22], 'Merge', 'NUMERIC FUNCTIONS', 2709, 'Anonymous', on).
mooCache(instance('IdentityFn', 'UnaryFunction'), instance('IdentityFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2711, 'Anonymous', on).
mooCache(domain('IdentityFn', 1, 'Entity'), domain('IdentityFn', 1, 'Entity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2713, 'Anonymous', on).
mooCache(range('IdentityFn', 'Entity'), range('IdentityFn', 'Entity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2715, 'Anonymous', on).
mooCache(documentation('IdentityFn', string('"The value of the identity function is   just its argument."')), documentation('IdentityFn', string('"The value of the identity function is   just its argument."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2717, 'Anonymous', on).
mooCache(equal('IdentityFn'(F35), F35), holds('IdentityFn', F35, F35), [domainV(F35, ['IdentityFn':1, 'IdentityFn':2]), domainV(_G3016, []), forall(F35)], ['INST'=F35], 'Merge', 'NUMERIC FUNCTIONS', 2719, 'Anonymous', on).
mooCache(instance(identityElement, 'BinaryPredicate'), instance(identityElement, 'BinaryPredicate'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2721, 'Anonymous', on).
mooCache(instance(identityElement, 'AsymmetricRelation'), instance(identityElement, 'AsymmetricRelation'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2723, 'Anonymous', on).
mooCache(domain(identityElement, 1, 'BinaryFunction'), domain(identityElement, 1, 'BinaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2725, 'Anonymous', on).
mooCache(domain(identityElement, 2, 'Entity'), domain(identityElement, 2, 'Entity'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2727, 'Anonymous', on).
mooCache(documentation(identityElement, string('"An object ?ID is the identity element   for BinaryFunction ?FUNCTION just in case, for every instance ?INST,   applying ?FUNCTION to ?INST and ?ID results in ?INST."')), documentation(identityElement, string('"An object ?ID is the identity element   for BinaryFunction ?FUNCTION just in case, for every instance ?INST,   applying ?FUNCTION to ?INST and ?ID results in ?INST."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2729, 'Anonymous', on).
mooCache(identityElement(A16, B16)=>forall(C16, instance(C16, 'DomainFn'(A16))=>equal('AssignmentFn'(A16, B16, C16), C16)), entails(instance(C16, 'DomainFn'(A16))and not holds(A16, B16, C16, C16), not identityElement(A16, B16))and entails(identityElement(A16, B16)and not holds(A16, B16, C16, C16), not instance(C16, 'DomainFn'(A16)))and entails(identityElement(A16, B16)and instance(C16, 'DomainFn'(A16)), holds(A16, B16, C16, C16)), [domainV(C16, [A16:2, A16:3]), domainV(B16, [identityElement:2, A16:1]), domainV(A16, ['DomainFn':1, holds:1, identityElement:1]), domainV(_G8985, []), forall(A16), forall(B16), forall(C16)], ['FUNCTION'=A16, 'ID'=B16, 'INST'=C16], 'Merge', 'NUMERIC FUNCTIONS', 2731, 'Anonymous', on).
mooCache(identityElement('MultiplicationFn', 1), identityElement('MultiplicationFn', 1), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2733, 'Anonymous', on).
mooCache(identityElement('AdditionFn', 0), identityElement('AdditionFn', 0), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2735, 'Anonymous', on).
mooCache(identityElement('SubtractionFn', 0), identityElement('SubtractionFn', 0), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2737, 'Anonymous', on).
mooCache(identityElement('DivisionFn', 1), identityElement('DivisionFn', 1), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2739, 'Anonymous', on).
mooCache(instance('SuccessorFn', 'UnaryFunction'), instance('SuccessorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2741, 'Anonymous', on).
mooCache(domain('SuccessorFn', 1, 'Integer'), domain('SuccessorFn', 1, 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2743, 'Anonymous', on).
mooCache(range('SuccessorFn', 'Integer'), range('SuccessorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2745, 'Anonymous', on).
mooCache(documentation('SuccessorFn', string('"A UnaryFunction that maps an Integer to   its successor, e.g. the successor of 5 is 6."')), documentation('SuccessorFn', string('"A UnaryFunction that maps an Integer to   its successor, e.g. the successor of 5 is 6."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2747, 'Anonymous', on).
mooCache(equal('SuccessorFn'(H38), 'SuccessorFn'(I38))=>equal(H38, I38), entails(not equal(H38, I38), not equal('SuccessorFn'(H38), 'SuccessorFn'(I38)))and entails(equal('SuccessorFn'(H38), 'SuccessorFn'(I38)), equal(H38, I38)), [domainV(I38, ['SuccessorFn':1]), domainV(H38, ['SuccessorFn':1]), domainV(_G5210, []), forall(H38), forall(I38)], ['INT1'=H38, 'INT2'=I38], 'Merge', 'NUMERIC FUNCTIONS', 2749, 'Anonymous', on).
mooCache(instance(L2, 'Integer')=>lessThan(L2, 'SuccessorFn'(L2)), entails(not lessThan(L2, 'SuccessorFn'(L2)), not instance(L2, 'Integer'))and entails(instance(L2, 'Integer'), lessThan(L2, 'SuccessorFn'(L2))), [domainV(L2, ['$instanceof':'Integer', 'SuccessorFn':1, lessThan:1]), domainV(_G4370, []), forall(L2)], ['INT'=L2], 'Merge', 'NUMERIC FUNCTIONS', 2751, 'Anonymous', on).
mooCache(instance(G5, 'Integer')and instance(H5, 'Integer')=>not (lessThan(G5, H5)and lessThan(H5, 'SuccessorFn'(G5))), entails(instance(H5, 'Integer')and lessThan(G5, H5)and lessThan(H5, 'SuccessorFn'(G5)), not instance(G5, 'Integer'))and entails(instance(G5, 'Integer')and lessThan(G5, H5)and lessThan(H5, 'SuccessorFn'(G5)), not instance(H5, 'Integer'))and entails((instance(G5, 'Integer')and instance(H5, 'Integer'))and lessThan(H5, 'SuccessorFn'(G5)), not lessThan(G5, H5))and entails((instance(G5, 'Integer')and instance(H5, 'Integer'))and lessThan(G5, H5), not lessThan(H5, 'SuccessorFn'(G5))), [domainV(H5, ['$instanceof':'Integer', lessThan:1, lessThan:2]), domainV(G5, ['$instanceof':'Integer', 'SuccessorFn':1, lessThan:1]), domainV(_G8002, []), forall(G5), forall(H5)], ['INT1'=G5, 'INT2'=H5], 'Merge', 'NUMERIC FUNCTIONS', 2753, 'Anonymous', on).
mooCache(instance(A8, 'Integer')=>equal(A8, 'SuccessorFn'('PredecessorFn'(A8))), entails(not holds('SuccessorFn', 'PredecessorFn'(A8), A8), not instance(A8, 'Integer'))and entails(instance(A8, 'Integer'), holds('SuccessorFn', 'PredecessorFn'(A8), A8)), [domainV(A8, ['$instanceof':'Integer', 'PredecessorFn':1, 'SuccessorFn':2]), domainV(_G4806, []), forall(A8)], ['INT'=A8], 'Merge', 'NUMERIC FUNCTIONS', 2755, 'Anonymous', on).
mooCache(instance(R10, 'Integer')=>equal(R10, 'PredecessorFn'('SuccessorFn'(R10))), entails(not holds('PredecessorFn', 'SuccessorFn'(R10), R10), not instance(R10, 'Integer'))and entails(instance(R10, 'Integer'), holds('PredecessorFn', 'SuccessorFn'(R10), R10)), [domainV(R10, ['$instanceof':'Integer', 'PredecessorFn':2, 'SuccessorFn':1]), domainV(_G4806, []), forall(R10)], ['INT'=R10], 'Merge', 'NUMERIC FUNCTIONS', 2757, 'Anonymous', on).
mooCache(instance('PredecessorFn', 'UnaryFunction'), instance('PredecessorFn', 'UnaryFunction'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2759, 'Anonymous', on).
mooCache(domain('PredecessorFn', 1, 'Integer'), domain('PredecessorFn', 1, 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2761, 'Anonymous', on).
mooCache(range('PredecessorFn', 'Integer'), range('PredecessorFn', 'Integer'), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2763, 'Anonymous', on).
mooCache(documentation('PredecessorFn', string('"A UnaryFunction that maps an Integer to   its predecessor, e.g. the predecessor of 5 is 4."')), documentation('PredecessorFn', string('"A UnaryFunction that maps an Integer to   its predecessor, e.g. the predecessor of 5 is 4."')), [], [], 'Merge', 'NUMERIC FUNCTIONS', 2765, 'Anonymous', on).
mooCache(equal('PredecessorFn'(D23), 'PredecessorFn'(E23))=>equal(D23, E23), entails(not equal(D23, E23), not equal('PredecessorFn'(D23), 'PredecessorFn'(E23)))and entails(equal('PredecessorFn'(D23), 'PredecessorFn'(E23)), equal(D23, E23)), [domainV(E23, ['PredecessorFn':1]), domainV(D23, ['PredecessorFn':1]), domainV(_G5234, []), forall(D23), forall(E23)], ['INT1'=D23, 'INT2'=E23], 'Merge', 'NUMERIC FUNCTIONS', 2767, 'Anonymous', on).
mooCache(instance(U25, 'Integer')=>greaterThan(U25, 'PredecessorFn'(U25)), entails(not greaterThan(U25, 'PredecessorFn'(U25)), not instance(U25, 'Integer'))and entails(instance(U25, 'Integer'), greaterThan(U25, 'PredecessorFn'(U25))), [domainV(U25, ['$instanceof':'Integer', 'PredecessorFn':1, greaterThan:1]), domainV(_G4400, []), forall(U25)], ['INT'=U25], 'Merge', 'NUMERIC FUNCTIONS', 2769, 'Anonymous', on).
mooCache(instance(O28, 'Integer')and instance(P28, 'Integer')=>not (lessThan(P28, O28)and lessThan('PredecessorFn'(O28), P28)), entails(instance(P28, 'Integer')and lessThan(P28, O28)and lessThan('PredecessorFn'(O28), P28), not instance(O28, 'Integer'))and entails(instance(O28, 'Integer')and lessThan(P28, O28)and lessThan('PredecessorFn'(O28), P28), not instance(P28, 'Integer'))and entails((instance(O28, 'Integer')and instance(P28, 'Integer'))and lessThan('PredecessorFn'(O28), P28), not lessThan(P28, O28))and entails((instance(O28, 'Integer')and instance(P28, 'Integer'))and lessThan(P28, O28), not lessThan('PredecessorFn'(O28), P28)), [domainV(P28, ['$instanceof':'Integer', lessThan:1, lessThan:2]), domainV(O28, ['$instanceof':'Integer', 'PredecessorFn':1, lessThan:2]), domainV(_G8014, []), forall(O28), forall(P28)], ['INT1'=O28, 'INT2'=P28], 'Merge', 'NUMERIC FUNCTIONS', 2771, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'SET/CLASS Context', 2783, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'SET/CLASS Context', 2786, 'Anonymous', on).
mooCache(subrelation(subset, subclass), subrelation(subset, subclass), [], [], 'Merge', 'SET/CLASS Context', 2795, 'Anonymous', on).
mooCache(domain(subset, 1, 'Set'), domain(subset, 1, 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2797, 'Anonymous', on).
mooCache(domain(subset, 2, 'Set'), domain(subset, 2, 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2799, 'Anonymous', on).
mooCache(documentation(subset, string('"(subset ?SET1 ?SET2) is true just in case the   elements of the Set ?SET1 are also elements of the Set ?SET2."')), documentation(subset, string('"(subset ?SET1 ?SET2) is true just in case the   elements of the Set ?SET1 are also elements of the Set ?SET2."')), [], [], 'Merge', 'SET/CLASS Context', 2801, 'Anonymous', on).
mooCache(subset(Q7, R7)=>forall(S7, element(S7, Q7)=>element(S7, R7)), entails(element(S7, Q7)and not element(S7, R7), not subset(Q7, R7))and entails(subset(Q7, R7)and not element(S7, R7), not element(S7, Q7))and entails(subset(Q7, R7)and element(S7, Q7), element(S7, R7)), [domainV(S7, [element:1]), domainV(R7, [element:2, subset:2]), domainV(Q7, [element:2, subset:1]), domainV(_G7244, []), forall(Q7), forall(R7), forall(S7)], ['SUBSET'=Q7, 'SET'=R7, 'ELEMENT'=S7], 'Merge', 'SET/CLASS Context', 2803, 'Anonymous', on).
mooCache(instance(element, 'BinaryPredicate'), instance(element, 'BinaryPredicate'), [], [], 'Merge', 'SET/CLASS Context', 2805, 'Anonymous', on).
mooCache(instance(element, 'AsymmetricRelation'), instance(element, 'AsymmetricRelation'), [], [], 'Merge', 'SET/CLASS Context', 2807, 'Anonymous', on).
mooCache(instance(element, 'IntransitiveRelation'), instance(element, 'IntransitiveRelation'), [], [], 'Merge', 'SET/CLASS Context', 2809, 'Anonymous', on).
mooCache(subrelation(element, instance), subrelation(element, instance), [], [], 'Merge', 'SET/CLASS Context', 2811, 'Anonymous', on).
mooCache(domain(element, 1, 'Entity'), domain(element, 1, 'Entity'), [], [], 'Merge', 'SET/CLASS Context', 2813, 'Anonymous', on).
mooCache(domain(element, 2, 'Set'), domain(element, 2, 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2815, 'Anonymous', on).
mooCache(documentation(element, string('"(element ?ENTITY ?SET) is true just in case   ?ENTITY is contained in the Set ?SET.  An Entity can be an element   of another Entity only if the latter is a Set."')), documentation(element, string('"(element ?ENTITY ?SET) is true just in case   ?ENTITY is contained in the Set ?SET.  An Entity can be an element   of another Entity only if the latter is a Set."')), [], [], 'Merge', 'SET/CLASS Context', 2817, 'Anonymous', on).
mooCache(forall(L27, element(L27, M27)<=>element(L27, N27))=>equal(M27, N27), entails(element(L27, N27)and not element(L27, N27), equal(M27, N27))and (entails(element(L27, N27)and element(L27, M27), equal(M27, N27))and entails((not equal(M27, N27)and element(L27, M27))and'$existential'(L27, '?ELEMENT', not (element('?ELEMENT', M27)<=>element('?ELEMENT', N27))), not element(L27, N27))and entails((not equal(M27, N27)and element(L27, N27))and'$existential'(L27, '?ELEMENT', not (element('?ELEMENT', M27)<=>element('?ELEMENT', N27))), not element(L27, M27)))and entails(not element(L27, M27)and element(L27, M27), equal(M27, N27))and entails(not element(L27, M27)and not element(L27, N27), equal(M27, N27))and entails(not equal(M27, N27)and not element(L27, N27), element(L27, M27))and entails(not equal(M27, N27)and not element(L27, M27), element(L27, N27)), [domainV(N27, [element:2]), domainV(M27, [element:2]), domainV(L27, [element:1]), domainV(_G8045, []), forall(M27), forall(N27), replaceConsVar(L27, '$existential'('?ELEMENT', not (element('?ELEMENT', M27)<=>element('?ELEMENT', N27))))], ['ELEMENT'=L27, 'SET1'=M27, 'SET2'=N27], 'Merge', 'SET/CLASS Context', 2819, 'Anonymous', on).
mooCache(instance('UnionFn', 'BinaryFunction'), instance('UnionFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2821, 'Anonymous', on).
mooCache(domain('UnionFn', 1, 'Class'), domain('UnionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2823, 'Anonymous', on).
mooCache(domain('UnionFn', 2, 'Class'), domain('UnionFn', 2, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2825, 'Anonymous', on).
mooCache(range('UnionFn', 'Class'), range('UnionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2827, 'Anonymous', on).
mooCache(documentation('UnionFn', string('"A BinaryFunction that maps two Classes to   the union of these Classes.  An object is an instance of the union of   two Classes just in case it is an instance of either Class."')), documentation('UnionFn', string('"A BinaryFunction that maps two Classes to   the union of these Classes.  An object is an instance of the union of   two Classes just in case it is an instance of either Class."')), [], [], 'Merge', 'SET/CLASS Context', 2829, 'Anonymous', on).
mooCache(instance(D4, 'UnionFn'(E4, F4))<=>instance(D4, E4)or instance(D4, F4), (entails(not instance(D4, 'UnionFn'(E4, F4)), not instance(D4, E4))and entails(not instance(D4, 'UnionFn'(E4, F4)), not instance(D4, F4))and entails(instance(D4, E4)or instance(D4, F4), instance(D4, 'UnionFn'(E4, F4))))and entails(not instance(D4, E4)and not instance(D4, F4), not instance(D4, 'UnionFn'(E4, F4)))and entails(instance(D4, 'UnionFn'(E4, F4))and not instance(D4, F4), instance(D4, E4))and entails(instance(D4, 'UnionFn'(E4, F4))and not instance(D4, E4), instance(D4, F4)), [domainV(F4, ['UnionFn':2, instance:2]), domainV(E4, ['UnionFn':1, instance:2]), domainV(D4, []), domainV(_G7514, []), forall(D4), forall(E4), forall(F4)], ['ENTITY'=D4, 'CLASS1'=E4, 'CLASS2'=F4], 'Merge', 'SET/CLASS Context', 2831, 'Anonymous', on).
mooCache(instance('IntersectionFn', 'BinaryFunction'), instance('IntersectionFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2833, 'Anonymous', on).
mooCache(domain('IntersectionFn', 1, 'Class'), domain('IntersectionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2835, 'Anonymous', on).
mooCache(domain('IntersectionFn', 2, 'Class'), domain('IntersectionFn', 2, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2837, 'Anonymous', on).
mooCache(range('IntersectionFn', 'Class'), range('IntersectionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2839, 'Anonymous', on).
mooCache(documentation('IntersectionFn', string('"A BinaryFunction that maps two   %Classes to the intersection of these Classes.  An object is an instance   of the intersection of two Classes just in case it is an instance of   both of those Classes."')), documentation('IntersectionFn', string('"A BinaryFunction that maps two   %Classes to the intersection of these Classes.  An object is an instance   of the intersection of two Classes just in case it is an instance of   both of those Classes."')), [], [], 'Merge', 'SET/CLASS Context', 2841, 'Anonymous', on).
mooCache(instance(D19, 'IntersectionFn'(E19, F19))<=>instance(D19, E19)and instance(D19, F19), (entails(instance(D19, 'IntersectionFn'(E19, F19)), instance(D19, E19))and entails(instance(D19, 'IntersectionFn'(E19, F19)), instance(D19, F19))and entails(not instance(D19, E19)or not instance(D19, F19), not instance(D19, 'IntersectionFn'(E19, F19))))and entails(instance(D19, E19)and instance(D19, F19), instance(D19, 'IntersectionFn'(E19, F19)))and entails(not instance(D19, 'IntersectionFn'(E19, F19))and instance(D19, F19), not instance(D19, E19))and entails(not instance(D19, 'IntersectionFn'(E19, F19))and instance(D19, E19), not instance(D19, F19)), [domainV(F19, ['IntersectionFn':2, instance:2]), domainV(E19, ['IntersectionFn':1, instance:2]), domainV(D19, []), domainV(_G7562, []), forall(D19), forall(E19), forall(F19)], ['ENTITY'=D19, 'CLASS1'=E19, 'CLASS2'=F19], 'Merge', 'SET/CLASS Context', 2843, 'Anonymous', on).
mooCache(instance('RelativeComplementFn', 'BinaryFunction'), instance('RelativeComplementFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2845, 'Anonymous', on).
mooCache(domain('RelativeComplementFn', 1, 'Class'), domain('RelativeComplementFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2847, 'Anonymous', on).
mooCache(domain('RelativeComplementFn', 2, 'Class'), domain('RelativeComplementFn', 2, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2849, 'Anonymous', on).
mooCache(range('RelativeComplementFn', 'Class'), range('RelativeComplementFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2851, 'Anonymous', on).
mooCache(documentation('RelativeComplementFn', string('"A BinaryFunction that maps two   Classes to the difference between these Classes.  More precisely,   the relative complement of one class C1 relative to another C2 consists   of the instances of C1 that are instances of the ComplementFn of C2."')), documentation('RelativeComplementFn', string('"A BinaryFunction that maps two   Classes to the difference between these Classes.  More precisely,   the relative complement of one class C1 relative to another C2 consists   of the instances of C1 that are instances of the ComplementFn of C2."')), [], [], 'Merge', 'SET/CLASS Context', 2853, 'Anonymous', on).
mooCache(equal('RelativeComplementFn'(A34, B34), 'IntersectionFn'(A34, 'ComplementFn'(B34))), equal('RelativeComplementFn'(A34, B34), 'IntersectionFn'(A34, 'ComplementFn'(B34))), [domainV(B34, ['ComplementFn':1, 'RelativeComplementFn':2]), domainV(A34, ['IntersectionFn':1, 'RelativeComplementFn':1]), domainV(_G4866, []), forall(A34), forall(B34)], ['CLASS1'=A34, 'CLASS2'=B34], 'Merge', 'SET/CLASS Context', 2855, 'Anonymous', on).
mooCache(instance(O36, 'ImaginaryNumber')=>instance(O36, 'RelativeComplementFn'('Number', 'RealNumber')), entails(not instance(O36, 'RelativeComplementFn'('Number', 'RealNumber')), not instance(O36, 'ImaginaryNumber'))and entails(instance(O36, 'ImaginaryNumber'), instance(O36, 'RelativeComplementFn'('Number', 'RealNumber'))), [domainV(O36, ['$instanceof':'ImaginaryNumber']), domainV(_G4459, []), forall(O36)], ['NUMBER'=O36], 'Merge', 'SET/CLASS Context', 2857, 'Anonymous', on).
mooCache(instance('ComplementFn', 'UnaryFunction'), instance('ComplementFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2859, 'Anonymous', on).
mooCache(domain('ComplementFn', 1, 'Class'), domain('ComplementFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2861, 'Anonymous', on).
mooCache(range('ComplementFn', 'Class'), range('ComplementFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2863, 'Anonymous', on).
mooCache(documentation('ComplementFn', string('"The complement of a given Class C is the   Class of all things that are not instances of C.  In other words, an   object is an instance of the complement of a Class C just in case it   is not an instance of C."')), documentation('ComplementFn', string('"The complement of a given Class C is the   Class of all things that are not instances of C.  In other words, an   object is an instance of the complement of a Class C just in case it   is not an instance of C."')), [], [], 'Merge', 'SET/CLASS Context', 2865, 'Anonymous', on).
mooCache(instance(H10, 'ComplementFn'(I10))<=>not instance(H10, I10), (entails(instance(H10, 'ComplementFn'(I10)), not instance(H10, I10))and entails(instance(H10, I10), not instance(H10, 'ComplementFn'(I10))))and entails(not instance(H10, I10), instance(H10, 'ComplementFn'(I10)))and entails(not instance(H10, 'ComplementFn'(I10)), instance(H10, I10)), [domainV(I10, ['ComplementFn':1, instance:2]), domainV(H10, []), domainV(_G5435, []), forall(H10), forall(I10)], ['ENTITY'=H10, 'CLASS'=I10], 'Merge', 'SET/CLASS Context', 2867, 'Anonymous', on).
mooCache(instance('GeneralizedUnionFn', 'UnaryFunction'), instance('GeneralizedUnionFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2869, 'Anonymous', on).
mooCache(domainSubclass('GeneralizedUnionFn', 1, 'Class'), domainSubclass('GeneralizedUnionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2871, 'Anonymous', on).
mooCache(range('GeneralizedUnionFn', 'Class'), range('GeneralizedUnionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2873, 'Anonymous', on).
mooCache(documentation('GeneralizedUnionFn', string('"A UnaryFunction that takes a Class   of Classes as its single argument and returns a Class which is the   merge of all of the Classes in the original Class, i.e. the Class   containing just those instances which are instances of an instance of the   original Class."')), documentation('GeneralizedUnionFn', string('"A UnaryFunction that takes a Class   of Classes as its single argument and returns a Class which is the   merge of all of the Classes in the original Class, i.e. the Class   containing just those instances which are instances of an instance of the   original Class."')), [], [], 'Merge', 'SET/CLASS Context', 2875, 'Anonymous', on).
mooCache(instance(V22, 'GeneralizedUnionFn'(W22))<=>exists(X22, instance(X22, W22)and instance(V22, X22)), (entails(instance(V22, 'GeneralizedUnionFn'(W22))and'$existential'(X22, '?CLASS', instance('?CLASS', W22)and instance(V22, '?CLASS')), instance(X22, W22))and entails(instance(V22, 'GeneralizedUnionFn'(W22))and'$existential'(X22, '?CLASS', instance('?CLASS', W22)and instance(V22, '?CLASS')), instance(V22, X22))and entails(not instance(X22, W22)or not instance(V22, X22), not instance(V22, 'GeneralizedUnionFn'(W22))))and entails(instance(X22, W22)and instance(V22, X22), instance(V22, 'GeneralizedUnionFn'(W22)))and entails(not instance(V22, 'GeneralizedUnionFn'(W22))and instance(V22, X22), not instance(X22, W22))and entails(not instance(V22, 'GeneralizedUnionFn'(W22))and instance(X22, W22), not instance(V22, X22)), [domainV(X22, [instance:2]), domainV(W22, ['GeneralizedUnionFn':1, instance:2]), domainV(V22, []), domainV(_G8387, []), forall(V22), forall(W22), replaceConsVar(X22, '$existential'('?CLASS', instance('?CLASS', W22)and instance(V22, '?CLASS'))), forall(X22)], ['ENTITY'=V22, 'SUPERCLASS'=W22, 'CLASS'=X22], 'Merge', 'SET/CLASS Context', 2877, 'Anonymous', on).
mooCache(instance('GeneralizedIntersectionFn', 'UnaryFunction'), instance('GeneralizedIntersectionFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2879, 'Anonymous', on).
mooCache(domainSubclass('GeneralizedIntersectionFn', 1, 'Class'), domainSubclass('GeneralizedIntersectionFn', 1, 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2881, 'Anonymous', on).
mooCache(range('GeneralizedIntersectionFn', 'Class'), range('GeneralizedIntersectionFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2883, 'Anonymous', on).
mooCache(documentation('GeneralizedIntersectionFn', string('"A UnaryFunction that takes a   Class of Classes as its single argument and returns a Class which   is the intersection of all of the Classes in the original Class, i.e.   the Class containing just those instances which are instances of all   instances of the original Class."')), documentation('GeneralizedIntersectionFn', string('"A UnaryFunction that takes a   Class of Classes as its single argument and returns a Class which   is the intersection of all of the Classes in the original Class, i.e.   the Class containing just those instances which are instances of all   instances of the original Class."')), [], [], 'Merge', 'SET/CLASS Context', 2885, 'Anonymous', on).
mooCache(instance(N35, 'GeneralizedIntersectionFn'(O35))<=>forall(P35, instance(P35, O35)=>instance(N35, P35)), (entails(not instance(N35, 'GeneralizedIntersectionFn'(O35)), instance(P35, O35))and entails(not instance(N35, 'GeneralizedIntersectionFn'(O35))and'$existential'(P35, '?CLASS', not (instance('?CLASS', O35)=>instance(N35, '?CLASS'))), not instance(N35, P35))and entails(not instance(P35, O35)or instance(N35, P35), instance(N35, 'GeneralizedIntersectionFn'(O35))))and entails(instance(P35, O35)and not instance(N35, P35), not instance(N35, 'GeneralizedIntersectionFn'(O35)))and entails((instance(N35, 'GeneralizedIntersectionFn'(O35))and not instance(N35, P35))and'$existential'(P35, '?CLASS', not (instance('?CLASS', O35)=>instance(N35, '?CLASS'))), not instance(P35, O35))and entails(instance(N35, 'GeneralizedIntersectionFn'(O35))and instance(P35, O35), instance(N35, P35)), [domainV(P35, [instance:2]), domainV(O35, ['GeneralizedIntersectionFn':1, instance:2]), domainV(N35, []), domainV(_G8561, []), forall(N35), forall(O35), forall(P35), replaceConsVar(P35, '$existential'('?CLASS', not (instance('?CLASS', O35)=>instance(N35, '?CLASS'))))], ['ENTITY'=N35, 'SUPERCLASS'=O35, 'CLASS'=P35], 'Merge', 'SET/CLASS Context', 2887, 'Anonymous', on).
mooCache(instance('CardinalityFn', 'UnaryFunction'), instance('CardinalityFn', 'UnaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2889, 'Anonymous', on).
mooCache(instance('CardinalityFn', 'AsymmetricRelation'), instance('CardinalityFn', 'AsymmetricRelation'), [], [], 'Merge', 'SET/CLASS Context', 2891, 'Anonymous', on).
mooCache(domain('CardinalityFn', 1, 'UnionFn'('Class', 'Collection')), domain('CardinalityFn', 1, 'UnionFn'('Class', 'Collection')), [], [], 'Merge', 'SET/CLASS Context', 2893, 'Anonymous', on).
mooCache(domain('CardinalityFn', 2, 'Number'), domain('CardinalityFn', 2, 'Number'), [], [], 'Merge', 'SET/CLASS Context', 2895, 'Anonymous', on).
mooCache(documentation('CardinalityFn', string('"(CardinalityFn ?CLASS) returns the   number of instances in the Class or Collection ?CLASS."')), documentation('CardinalityFn', string('"(CardinalityFn ?CLASS) returns the   number of instances in the Class or Collection ?CLASS."')), [], [], 'Merge', 'SET/CLASS Context', 2897, 'Anonymous', on).
mooCache(instance('NullSet', 'Set'), instance('NullSet', 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2899, 'Anonymous', on).
mooCache(documentation('NullSet', string('"The Set that contains no instances."')), documentation('NullSet', string('"The Set that contains no instances."')), [], [], 'Merge', 'SET/CLASS Context', 2901, 'Anonymous', on).
mooCache(equal('NullSet', 'ComplementFn'('Entity')), equal('NullSet', 'ComplementFn'('Entity')), [], [], 'Merge', 'SET/CLASS Context', 2903, 'Anonymous', on).
mooCache(subclass('FiniteSet', 'Set'), subclass('FiniteSet', 'Set'), [], [], 'Merge', 'SET/CLASS Context', 2905, 'Anonymous', on).
mooCache(documentation('FiniteSet', string('"A Set containing a finite number of elements."')), documentation('FiniteSet', string('"A Set containing a finite number of elements."')), [], [], 'Merge', 'SET/CLASS Context', 2907, 'Anonymous', on).
mooCache(instance(D28, 'FiniteSet')=>exists(E28, instance(E28, 'NonnegativeInteger')and equal(E28, 'CardinalityFn'(D28))), (entails(not instance(E28, 'NonnegativeInteger'), not instance(D28, 'FiniteSet'))and entails(instance(D28, 'FiniteSet')and'$existential'(E28, '?NUMBER', instance('?NUMBER', 'NonnegativeInteger')and holds('CardinalityFn', D28, '?NUMBER')), instance(E28, 'NonnegativeInteger')))and entails(not holds('CardinalityFn', D28, E28), not instance(D28, 'FiniteSet'))and entails(instance(D28, 'FiniteSet')and'$existential'(E28, '?NUMBER', instance('?NUMBER', 'NonnegativeInteger')and holds('CardinalityFn', D28, '?NUMBER')), holds('CardinalityFn', D28, E28)), [domainV(E28, ['$instanceof':'NonnegativeInteger', 'CardinalityFn':2]), domainV(D28, ['$instanceof':'FiniteSet', 'CardinalityFn':1]), domainV(_G7240, []), forall(D28), replaceConsVar(E28, '$existential'('?NUMBER', instance('?NUMBER', 'NonnegativeInteger')and holds('CardinalityFn', D28, '?NUMBER')))], ['SET'=D28, 'NUMBER'=E28], 'Merge', 'SET/CLASS Context', 2909, 'Anonymous', on).
mooCache(subclass('PairwiseDisjointClass', 'Class'), subclass('PairwiseDisjointClass', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2911, 'Anonymous', on).
mooCache(documentation('PairwiseDisjointClass', string('"A Class of Classes is a   PairwiseDisjointClass just in case every instance of the Class   is either equal to or disjoint from every other instance of the   Class."')), documentation('PairwiseDisjointClass', string('"A Class of Classes is a   PairwiseDisjointClass just in case every instance of the Class   is either equal to or disjoint from every other instance of the   Class."')), [], [], 'Merge', 'SET/CLASS Context', 2913, 'Anonymous', on).
mooCache(instance(C36, 'PairwiseDisjointClass')=>forall(D36, forall(E36, instance(E36, C36)and instance(D36, C36)=>equal(E36, D36)or disjoint(E36, D36))), entails((instance(E36, C36)and instance(D36, C36))and not equal(E36, D36)and not disjoint(E36, D36), not instance(C36, 'PairwiseDisjointClass'))and entails(instance(C36, 'PairwiseDisjointClass')and instance(D36, C36)and not equal(E36, D36)and not disjoint(E36, D36), not instance(E36, C36))and entails(instance(C36, 'PairwiseDisjointClass')and instance(E36, C36)and not equal(E36, D36)and not disjoint(E36, D36), not instance(D36, C36))and entails(instance(C36, 'PairwiseDisjointClass')and (instance(E36, C36)and instance(D36, C36))and not disjoint(E36, D36), equal(E36, D36))and entails(instance(C36, 'PairwiseDisjointClass')and (instance(E36, C36)and instance(D36, C36))and not equal(E36, D36), disjoint(E36, D36)), [domainV(E36, [disjoint:1]), domainV(D36, [disjoint:2]), domainV(C36, ['$instanceof':'PairwiseDisjointClass', instance:2]), domainV(_G12106, []), forall(C36), forall(D36), forall(E36)], ['SUPERCLASS'=C36, 'CLASS1'=E36, 'CLASS2'=D36], 'Merge', 'SET/CLASS Context', 2915, 'Anonymous', on).
mooCache(subclass('MutuallyDisjointClass', 'Class'), subclass('MutuallyDisjointClass', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2917, 'Anonymous', on).
mooCache(documentation('MutuallyDisjointClass', string('"A Class of Classes is a   MutuallyDisjointClass just in case there exists no instance of an   instance of the original Class which is an instance of all of the   instances of the original Class."')), documentation('MutuallyDisjointClass', string('"A Class of Classes is a   MutuallyDisjointClass just in case there exists no instance of an   instance of the original Class which is an instance of all of the   instances of the original Class."')), [], [], 'Merge', 'SET/CLASS Context', 2919, 'Anonymous', on).
mooCache(instance(H5, 'MutuallyDisjointClass')=>equal('GeneralizedIntersectionFn'(H5), 'NullSet'), entails(not equal('GeneralizedIntersectionFn'(H5), 'NullSet'), not instance(H5, 'MutuallyDisjointClass'))and entails(instance(H5, 'MutuallyDisjointClass'), equal('GeneralizedIntersectionFn'(H5), 'NullSet')), [domainV(H5, ['$instanceof':'MutuallyDisjointClass', 'GeneralizedIntersectionFn':1]), domainV(_G4324, []), forall(H5)], ['CLASS'=H5], 'Merge', 'SET/CLASS Context', 2921, 'Anonymous', on).
mooCache(instance('KappaFn', 'BinaryFunction'), instance('KappaFn', 'BinaryFunction'), [], [], 'Merge', 'SET/CLASS Context', 2923, 'Anonymous', on).
mooCache(domain('KappaFn', 1, 'SymbolicString'), domain('KappaFn', 1, 'SymbolicString'), [], [], 'Merge', 'SET/CLASS Context', 2925, 'Anonymous', on).
mooCache(domain('KappaFn', 2, 'Formula'), domain('KappaFn', 2, 'Formula'), [], [], 'Merge', 'SET/CLASS Context', 2927, 'Anonymous', on).
mooCache(range('KappaFn', 'Class'), range('KappaFn', 'Class'), [], [], 'Merge', 'SET/CLASS Context', 2929, 'Anonymous', on).
mooCache(documentation('KappaFn', string('"A class-forming operator that takes two   arguments:  a variable and a formula containing at least one unbound   occurrence of the variable.  The result of applying KappaFn to a   variable and a formula is the Class of things that satisfy the formula.    For example, we can denote the Class of prime numbers that are less   than 100 with the following expression:  (KappaFn ?NUMBER   (and (instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100))).  Note that   the use of this function is discouraged, since there is currently no   axiomatic support for it."')), documentation('KappaFn', string('"A class-forming operator that takes two   arguments:  a variable and a formula containing at least one unbound   occurrence of the variable.  The result of applying KappaFn to a   variable and a formula is the Class of things that satisfy the formula.    For example, we can denote the Class of prime numbers that are less   than 100 with the following expression:  (KappaFn ?NUMBER   (and (instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100))).  Note that   the use of this function is discouraged, since there is currently no   axiomatic support for it."')), [], [], 'Merge', 'SET/CLASS Context', 2931, 'Anonymous', on).
mooCache(subclass('Graph', 'Abstract'), subclass('Graph', 'Abstract'), [], [], 'Merge', 'GRAPH Context', 2943, 'Anonymous', on).
mooCache(documentation('Graph', string('"The Class of graphs, where a graph is understood   to be a set of GraphNodes connected by GraphArcs.  Note that this   Class includes only connected graphs, i.e. graphs in which there is a   GraphPath between any two GraphNodes.  Note too that every Graph   is assumed to contain at least two GraphArcs and three GraphNodes."')), documentation('Graph', string('"The Class of graphs, where a graph is understood   to be a set of GraphNodes connected by GraphArcs.  Note that this   Class includes only connected graphs, i.e. graphs in which there is a   GraphPath between any two GraphNodes.  Note too that every Graph   is assumed to contain at least two GraphArcs and three GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 2945, 'Anonymous', on).
mooCache(instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26)=>exists(F26, exists(G26, links(D26, E26, G26)or subGraph(F26, C26)and instance(F26, 'GraphPath')and (equal('BeginNodeFn'(F26), D26)and equal('EndNodeFn'(F26), E26)or equal('BeginNodeFn'(F26), E26)and equal('EndNodeFn'(F26), D26)))), (entails((not subGraph(F26, C26)and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), links(D26, E26, G26))and entails(((not links(D26, E26, G26)and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), subGraph(F26, C26))and entails((not links(D26, E26, G26)and not subGraph(F26, C26))and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(C26, 'Graph'))and entails((not links(D26, E26, G26)and not subGraph(F26, C26))and instance(C26, 'Graph')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(D26, 'GraphNode'))and entails((not links(D26, E26, G26)and not subGraph(F26, C26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(E26, 'GraphNode'))and entails((not links(D26, E26, G26)and not subGraph(F26, C26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(E26, C26)and not equal(D26, E26), not graphPart(D26, C26))and entails((not links(D26, E26, G26)and not subGraph(F26, C26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and not equal(D26, E26), not graphPart(E26, C26))and entails(((not links(D26, E26, G26)and not subGraph(F26, C26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), equal(D26, E26)))and (entails((not instance(F26, 'GraphPath')and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), links(D26, E26, G26))and entails(((not links(D26, E26, G26)and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), instance(F26, 'GraphPath'))and entails((not links(D26, E26, G26)and not instance(F26, 'GraphPath'))and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(C26, 'Graph'))and entails((not links(D26, E26, G26)and not instance(F26, 'GraphPath'))and instance(C26, 'Graph')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(D26, 'GraphNode'))and entails((not links(D26, E26, G26)and not instance(F26, 'GraphPath'))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(E26, 'GraphNode'))and entails((not links(D26, E26, G26)and not instance(F26, 'GraphPath'))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(E26, C26)and not equal(D26, E26), not graphPart(D26, C26))and entails((not links(D26, E26, G26)and not instance(F26, 'GraphPath'))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and not equal(D26, E26), not graphPart(E26, C26))and entails(((not links(D26, E26, G26)and not instance(F26, 'GraphPath'))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), equal(D26, E26)))and (entails(((not holds('EndNodeFn', F26, E26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), links(D26, E26, G26))and entails((((not links(D26, E26, G26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('EndNodeFn', F26, E26))and entails((((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('EndNodeFn', F26, D26))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('EndNodeFn', F26, D26))and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(C26, 'Graph'))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(D26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(E26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(E26, C26)and not equal(D26, E26), not graphPart(D26, C26))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and not equal(D26, E26), not graphPart(E26, C26))and entails(((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), equal(D26, E26)))and (entails(((not holds('EndNodeFn', F26, E26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), links(D26, E26, G26))and entails((((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('EndNodeFn', F26, E26))and entails((((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('BeginNodeFn', F26, E26))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('BeginNodeFn', F26, E26))and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(C26, 'Graph'))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(D26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(E26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(E26, C26)and not equal(D26, E26), not graphPart(D26, C26))and entails((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and not equal(D26, E26), not graphPart(E26, C26))and entails(((not links(D26, E26, G26)and not holds('EndNodeFn', F26, E26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), equal(D26, E26)))and (entails(((not holds('BeginNodeFn', F26, D26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), links(D26, E26, G26))and entails((((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('BeginNodeFn', F26, D26))and entails((((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('BeginNodeFn', F26, E26))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('BeginNodeFn', F26, E26))and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(C26, 'Graph'))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(D26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(E26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(E26, C26)and not equal(D26, E26), not graphPart(D26, C26))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and not equal(D26, E26), not graphPart(E26, C26))and entails(((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('BeginNodeFn', F26, E26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), equal(D26, E26)))and entails(((not holds('BeginNodeFn', F26, D26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), links(D26, E26, G26))and entails((((not links(D26, E26, G26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('BeginNodeFn', F26, D26))and entails((((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26))and'$existential'(F26, '?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26)))))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), holds('EndNodeFn', F26, D26))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('EndNodeFn', F26, D26))and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(C26, 'Graph'))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(D26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26)and not equal(D26, E26), not instance(E26, 'GraphNode'))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(E26, C26)and not equal(D26, E26), not graphPart(D26, C26))and entails((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and not equal(D26, E26), not graphPart(E26, C26))and entails(((not links(D26, E26, G26)and not holds('BeginNodeFn', F26, D26)and not holds('EndNodeFn', F26, D26))and instance(C26, 'Graph')and instance(D26, 'GraphNode')and instance(E26, 'GraphNode')and graphPart(D26, C26)and graphPart(E26, C26))and'$existential'(G26, '?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))), equal(D26, E26)), [domainV(G26, [links:3]), domainV(F26, ['$instanceof':'GraphPath', 'BeginNodeFn':1, 'EndNodeFn':1, subGraph:1]), domainV(E26, ['$instanceof':'GraphNode', 'BeginNodeFn':2, 'EndNodeFn':2, graphPart:1, links:2]), domainV(D26, ['$instanceof':'GraphNode', 'BeginNodeFn':2, 'EndNodeFn':2, graphPart:1, links:1]), domainV(C26, ['$instanceof':'Graph', graphPart:2, subGraph:2]), domainV(_G4791, []), forall(C26), forall(D26), forall(E26), replaceConsVar(F26, '$existential'('?PATH', exists(G26, links(D26, E26, G26)or subGraph('?PATH', C26)and instance('?PATH', 'GraphPath')and (holds('BeginNodeFn', '?PATH', D26)and holds('EndNodeFn', '?PATH', E26)or holds('BeginNodeFn', '?PATH', E26)and holds('EndNodeFn', '?PATH', D26))))), replaceConsVar(G26, '$existential'('?ARC', links(D26, E26, '?ARC')or subGraph(F26, C26)and instance(F26, 'GraphPath')and (holds('BeginNodeFn', F26, D26)and holds('EndNodeFn', F26, E26)or holds('BeginNodeFn', F26, E26)and holds('EndNodeFn', F26, D26))))], ['GRAPH'=C26, 'NODE1'=D26, 'NODE2'=E26, 'ARC'=G26, 'PATH'=F26], 'Merge', 'GRAPH Context', 2947, 'Anonymous', on).
mooCache(instance(E4, 'Graph')=>exists(F4, exists(G4, exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, I4)and links(F4, I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal(G4, F4)))))), (entails(not graphPart(J4, E4), not instance(E4, 'Graph'))and entails(instance(E4, 'Graph')and'$existential'(J4, '?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)), graphPart(J4, E4)))and (entails(not graphPart(I4, E4), not instance(E4, 'Graph'))and entails((instance(E4, 'Graph')and'$existential'(I4, '?NODE2', exists(J4, graphPart(J4, E4)and graphPart('?NODE2', E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, '?NODE2')and links(F4, '?NODE2', H4)and not equal(J4, '?NODE2')and not equal('?NODE2', H4)and not equal(J4, H4)and not equal(G4, F4))))and'$existential'(J4, '?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)), graphPart(I4, E4)))and (entails(not graphPart(H4, E4), not instance(E4, 'Graph'))and entails(((instance(E4, 'Graph')and'$existential'(H4, '?NODE3', exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart('?NODE3', E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, I4)and links(F4, I4, '?NODE3')and not equal(J4, I4)and not equal(I4, '?NODE3')and not equal(J4, '?NODE3')and not equal(G4, F4)))))and'$existential'(I4, '?NODE2', exists(J4, graphPart(J4, E4)and graphPart('?NODE2', E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, '?NODE2')and links(F4, '?NODE2', H4)and not equal(J4, '?NODE2')and not equal('?NODE2', H4)and not equal(J4, H4)and not equal(G4, F4))))and'$existential'(J4, '?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)), graphPart(H4, E4)))and (entails(not graphPart(G4, E4), not instance(E4, 'Graph'))and entails((((instance(E4, 'Graph')and'$existential'(G4, '?ARC1', exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart('?ARC1', E4)and graphPart(F4, E4)and links('?ARC1', J4, I4)and links(F4, I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal('?ARC1', F4))))))and'$existential'(H4, '?NODE3', exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart('?NODE3', E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, I4)and links(F4, I4, '?NODE3')and not equal(J4, I4)and not equal(I4, '?NODE3')and not equal(J4, '?NODE3')and not equal(G4, F4)))))and'$existential'(I4, '?NODE2', exists(J4, graphPart(J4, E4)and graphPart('?NODE2', E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, '?NODE2')and links(F4, '?NODE2', H4)and not equal(J4, '?NODE2')and not equal('?NODE2', H4)and not equal(J4, H4)and not equal(G4, F4))))and'$existential'(J4, '?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)), graphPart(G4, E4)))and (entails(not graphPart(F4, E4), not instance(E4, 'Graph'))and entails(((((instance(E4, 'Graph')and'$existential'(F4, '?ARC2', exists(G4, exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart('?ARC2', E4)and links(G4, J4, I4)and links('?ARC2', I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal(G4, '?ARC2')))))))and'$existential'(G4, '?ARC1', exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart('?ARC1', E4)and graphPart(F4, E4)and links('?ARC1', J4, I4)and links(F4, I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal('?ARC1', F4))))))and'$existential'(H4, '?NODE3', exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart('?NODE3', E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, I4)and links(F4, I4, '?NODE3')and not equal(J4, I4)and not equal(I4, '?NODE3')and not equal(J4, '?NODE3')and not equal(G4, F4)))))and'$existential'(I4, '?NODE2', exists(J4, graphPart(J4, E4)and graphPart('?NODE2', E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, '?NODE2')and links(F4, '?NODE2', H4)and not equal(J4, '?NODE2')and not equal('?NODE2', H4)and not equal(J4, H4)and not equal(G4, F4))))and'$existential'(J4, '?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)), graphPart(F4, E4)))and (entails(not links(G4, J4, I4), not instance(E4, 'Graph'))and entails((((instance(E4, 'Graph')and'$existential'(G4, '?ARC1', exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart('?ARC1', E4)and graphPart(F4, E4)and links('?ARC1', J4, I4)and links(F4, I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal('?ARC1', F4))))))and'$existential'(H4, '?NODE3', exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart('?NODE3', E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, I4)and links(F4, I4, '?NODE3')and not equal(J4, I4)and not equal(I4, '?NODE3')and not equal(J4, '?NODE3')and not equal(G4, F4)))))and'$existential'(I4, '?NODE2', exists(J4, graphPart(J4, E4)and graphPart('?NODE2', E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, '?NODE2')and links(F4, '?NODE2', H4)and not equal(J4, '?NODE2')and not equal('?NODE2', H4)and not equal(J4, H4)and not equal(G4, F4))))and'$existential'(J4, '?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)), links(G4, J4, I4)))and (entails(not links(F4, I4, H4), not instance(E4, 'Graph'))and entails(((((instance(E4, 'Graph')and'$existential'(F4, '?ARC2', exists(G4, exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart('?ARC2', E4)and links(G4, J4, I4)and links('?ARC2', I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal(G4, '?ARC2')))))))and'$existential'(G4, '?ARC1', exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart('?ARC1', E4)and graphPart(F4, E4)and links('?ARC1', J4, I4)and links(F4, I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal('?ARC1', F4))))))and'$existential'(H4, '?NODE3', exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart('?NODE3', E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, I4)and links(F4, I4, '?NODE3')and not equal(J4, I4)and not equal(I4, '?NODE3')and not equal(J4, '?NODE3')and not equal(G4, F4)))))and'$existential'(I4, '?NODE2', exists(J4, graphPart(J4, E4)and graphPart('?NODE2', E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, '?NODE2')and links(F4, '?NODE2', H4)and not equal(J4, '?NODE2')and not equal('?NODE2', H4)and not equal(J4, H4)and not equal(G4, F4))))and'$existential'(J4, '?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)), links(F4, I4, H4)))and (entails(equal(J4, I4), not instance(E4, 'Graph'))and entails(instance(E4, 'Graph'), not equal(J4, I4)))and (entails(equal(I4, H4), not instance(E4, 'Graph'))and entails(instance(E4, 'Graph'), not equal(I4, H4)))and (entails(equal(J4, H4), not instance(E4, 'Graph'))and entails(instance(E4, 'Graph'), not equal(J4, H4)))and entails(equal(G4, F4), not instance(E4, 'Graph'))and entails(instance(E4, 'Graph'), not equal(G4, F4)), [domainV(J4, [graphPart:1, links:2]), domainV(I4, [graphPart:1, links:2, links:3]), domainV(H4, [graphPart:1, links:3]), domainV(G4, [graphPart:1, links:1]), domainV(F4, [graphPart:1, links:1]), domainV(E4, ['$instanceof':'Graph', graphPart:2]), domainV(_G3182, []), forall(E4), replaceConsVar(F4, '$existential'('?ARC2', exists(G4, exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart('?ARC2', E4)and links(G4, J4, I4)and links('?ARC2', I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal(G4, '?ARC2'))))))), replaceConsVar(G4, '$existential'('?ARC1', exists(H4, exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart('?ARC1', E4)and graphPart(F4, E4)and links('?ARC1', J4, I4)and links(F4, I4, H4)and not equal(J4, I4)and not equal(I4, H4)and not equal(J4, H4)and not equal('?ARC1', F4)))))), replaceConsVar(H4, '$existential'('?NODE3', exists(I4, exists(J4, graphPart(J4, E4)and graphPart(I4, E4)and graphPart('?NODE3', E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, I4)and links(F4, I4, '?NODE3')and not equal(J4, I4)and not equal(I4, '?NODE3')and not equal(J4, '?NODE3')and not equal(G4, F4))))), replaceConsVar(I4, '$existential'('?NODE2', exists(J4, graphPart(J4, E4)and graphPart('?NODE2', E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, J4, '?NODE2')and links(F4, '?NODE2', H4)and not equal(J4, '?NODE2')and not equal('?NODE2', H4)and not equal(J4, H4)and not equal(G4, F4)))), replaceConsVar(J4, '$existential'('?NODE1', graphPart('?NODE1', E4)and graphPart(I4, E4)and graphPart(H4, E4)and graphPart(G4, E4)and graphPart(F4, E4)and links(G4, '?NODE1', I4)and links(F4, I4, H4)and not equal('?NODE1', I4)and not equal(I4, H4)and not equal('?NODE1', H4)and not equal(G4, F4)))], ['GRAPH'=E4, 'NODE1'=J4, 'NODE2'=I4, 'NODE3'=H4, 'ARC1'=G4, 'ARC2'=F4], 'Merge', 'GRAPH Context', 2949, 'Anonymous', on).
mooCache(subclass('DirectedGraph', 'Graph'), subclass('DirectedGraph', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2951, 'Anonymous', on).
mooCache(documentation('DirectedGraph', string('"The Class of directed graphs.  A   directed graph is a Graph in which all GraphArcs  have direction, i.e. every GraphArc has an initial node (see   InitialNodeFn) and a terminal node (see TerminalNodeFn)."')), documentation('DirectedGraph', string('"The Class of directed graphs.  A   directed graph is a Graph in which all GraphArcs  have direction, i.e. every GraphArc has an initial node (see   InitialNodeFn) and a terminal node (see TerminalNodeFn)."')), [], [], 'Merge', 'GRAPH Context', 2953, 'Anonymous', on).
mooCache(instance(R16, 'DirectedGraph')and instance(S16, 'GraphArc')and graphPart(S16, R16)=>exists(T16, exists(U16, equal('InitialNodeFn'(S16), U16)and equal('TerminalNodeFn'(S16), T16))), (entails((instance(R16, 'DirectedGraph')and instance(S16, 'GraphArc')and graphPart(S16, R16))and'$existential'(U16, '?NODE1', holds('InitialNodeFn', S16, '?NODE1')and holds('TerminalNodeFn', S16, T16)), holds('InitialNodeFn', S16, U16))and entails(not holds('InitialNodeFn', S16, U16)and instance(S16, 'GraphArc')and graphPart(S16, R16), not instance(R16, 'DirectedGraph'))and entails(not holds('InitialNodeFn', S16, U16)and instance(R16, 'DirectedGraph')and graphPart(S16, R16), not instance(S16, 'GraphArc'))and entails(not holds('InitialNodeFn', S16, U16)and instance(R16, 'DirectedGraph')and instance(S16, 'GraphArc'), not graphPart(S16, R16)))and entails(((instance(R16, 'DirectedGraph')and instance(S16, 'GraphArc')and graphPart(S16, R16))and'$existential'(T16, '?NODE2', exists(U16, holds('InitialNodeFn', S16, U16)and holds('TerminalNodeFn', S16, '?NODE2'))))and'$existential'(U16, '?NODE1', holds('InitialNodeFn', S16, '?NODE1')and holds('TerminalNodeFn', S16, T16)), holds('TerminalNodeFn', S16, T16))and entails(not holds('TerminalNodeFn', S16, T16)and instance(S16, 'GraphArc')and graphPart(S16, R16), not instance(R16, 'DirectedGraph'))and entails(not holds('TerminalNodeFn', S16, T16)and instance(R16, 'DirectedGraph')and graphPart(S16, R16), not instance(S16, 'GraphArc'))and entails(not holds('TerminalNodeFn', S16, T16)and instance(R16, 'DirectedGraph')and instance(S16, 'GraphArc'), not graphPart(S16, R16)), [domainV(U16, ['InitialNodeFn':2]), domainV(T16, ['TerminalNodeFn':2]), domainV(S16, ['$instanceof':'GraphArc', 'InitialNodeFn':1, 'TerminalNodeFn':1, graphPart:1]), domainV(R16, ['$instanceof':'DirectedGraph', graphPart:2]), domainV(_G12048, []), forall(R16), forall(S16), replaceConsVar(T16, '$existential'('?NODE2', exists(U16, holds('InitialNodeFn', S16, U16)and holds('TerminalNodeFn', S16, '?NODE2')))), replaceConsVar(U16, '$existential'('?NODE1', holds('InitialNodeFn', S16, '?NODE1')and holds('TerminalNodeFn', S16, T16)))], ['GRAPH'=R16, 'ARC'=S16, 'NODE1'=U16, 'NODE2'=T16], 'Merge', 'GRAPH Context', 2955, 'Anonymous', on).
mooCache(subclass('Tree', 'Graph'), subclass('Tree', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2957, 'Anonymous', on).
mooCache(documentation('Tree', string('"A Tree is a DirectedGraph that has no   GraphLoops."')), documentation('Tree', string('"A Tree is a DirectedGraph that has no   GraphLoops."')), [], [], 'Merge', 'GRAPH Context', 2959, 'Anonymous', on).
mooCache(instance(P24, 'Tree')=>not exists(Q24, instance(Q24, 'GraphLoop')and graphPart(Q24, P24)), entails(instance(Q24, 'GraphLoop')and graphPart(Q24, P24), not instance(P24, 'Tree'))and entails(instance(P24, 'Tree')and graphPart(Q24, P24), not instance(Q24, 'GraphLoop'))and entails(instance(P24, 'Tree')and instance(Q24, 'GraphLoop'), not graphPart(Q24, P24)), [domainV(Q24, ['$instanceof':'GraphLoop', graphPart:1]), domainV(P24, ['$instanceof':'Tree', graphPart:2]), domainV(_G6926, []), forall(P24), forall(Q24), forall(Q24)], ['GRAPH'=P24, 'LOOP'=Q24], 'Merge', 'GRAPH Context', 2961, 'Anonymous', on).
mooCache(subclass('GraphPath', 'DirectedGraph'), subclass('GraphPath', 'DirectedGraph'), [], [], 'Merge', 'GRAPH Context', 2963, 'Anonymous', on).
mooCache(documentation('GraphPath', string('"Informally, a single, directed route between   two GraphNodes in a Graph.  Formally, a DirectedGraph that is a   subGraph of the original Graph and such that no two GraphArcs in   the DirectedGraph have the same intial node (see InitialNodeFn) or   the same terminal node (see TerminalNodeFn)."')), documentation('GraphPath', string('"Informally, a single, directed route between   two GraphNodes in a Graph.  Formally, a DirectedGraph that is a   subGraph of the original Graph and such that no two GraphArcs in   the DirectedGraph have the same intial node (see InitialNodeFn) or   the same terminal node (see TerminalNodeFn)."')), [], [], 'Merge', 'GRAPH Context', 2965, 'Anonymous', on).
mooCache(instance(D32, 'GraphPath')and instance(E32, 'GraphArc')and graphPart(E32, D32)=>equal('InitialNodeFn'(E32), F32)=>not exists(G32, equal('InitialNodeFn'(G32), F32)and not equal(G32, E32)), entails((instance(E32, 'GraphArc')and graphPart(E32, D32))and holds('InitialNodeFn', E32, F32)and holds('InitialNodeFn', G32, F32)and not equal(G32, E32), not instance(D32, 'GraphPath'))and entails((instance(D32, 'GraphPath')and graphPart(E32, D32))and holds('InitialNodeFn', E32, F32)and holds('InitialNodeFn', G32, F32)and not equal(G32, E32), not instance(E32, 'GraphArc'))and entails((instance(D32, 'GraphPath')and instance(E32, 'GraphArc'))and holds('InitialNodeFn', E32, F32)and holds('InitialNodeFn', G32, F32)and not equal(G32, E32), not graphPart(E32, D32))and entails((instance(D32, 'GraphPath')and instance(E32, 'GraphArc')and graphPart(E32, D32))and holds('InitialNodeFn', G32, F32)and not equal(G32, E32), not holds('InitialNodeFn', E32, F32))and entails((instance(D32, 'GraphPath')and instance(E32, 'GraphArc')and graphPart(E32, D32))and holds('InitialNodeFn', E32, F32)and not equal(G32, E32), not holds('InitialNodeFn', G32, F32))and entails((instance(D32, 'GraphPath')and instance(E32, 'GraphArc')and graphPart(E32, D32))and holds('InitialNodeFn', E32, F32)and holds('InitialNodeFn', G32, F32), equal(G32, E32)), [domainV(G32, ['InitialNodeFn':1]), domainV(F32, ['InitialNodeFn':2]), domainV(E32, ['$instanceof':'GraphArc', 'InitialNodeFn':1, graphPart:1]), domainV(D32, ['$instanceof':'GraphPath', graphPart:2]), domainV(_G13060, []), forall(D32), forall(E32), forall(F32), forall(G32), forall(G32)], ['GRAPH'=D32, 'ARC'=E32, 'NODE'=F32, 'OTHER'=G32], 'Merge', 'GRAPH Context', 2967, 'Anonymous', on).
mooCache(instance(O35, 'GraphPath')and instance(P35, 'GraphArc')and graphPart(P35, O35)=>equal('TerminalNodeFn'(P35), Q35)=>not exists(R35, equal('TerminalNodeFn'(R35), Q35)and not equal(R35, P35)), entails((instance(P35, 'GraphArc')and graphPart(P35, O35))and holds('TerminalNodeFn', P35, Q35)and holds('TerminalNodeFn', R35, Q35)and not equal(R35, P35), not instance(O35, 'GraphPath'))and entails((instance(O35, 'GraphPath')and graphPart(P35, O35))and holds('TerminalNodeFn', P35, Q35)and holds('TerminalNodeFn', R35, Q35)and not equal(R35, P35), not instance(P35, 'GraphArc'))and entails((instance(O35, 'GraphPath')and instance(P35, 'GraphArc'))and holds('TerminalNodeFn', P35, Q35)and holds('TerminalNodeFn', R35, Q35)and not equal(R35, P35), not graphPart(P35, O35))and entails((instance(O35, 'GraphPath')and instance(P35, 'GraphArc')and graphPart(P35, O35))and holds('TerminalNodeFn', R35, Q35)and not equal(R35, P35), not holds('TerminalNodeFn', P35, Q35))and entails((instance(O35, 'GraphPath')and instance(P35, 'GraphArc')and graphPart(P35, O35))and holds('TerminalNodeFn', P35, Q35)and not equal(R35, P35), not holds('TerminalNodeFn', R35, Q35))and entails((instance(O35, 'GraphPath')and instance(P35, 'GraphArc')and graphPart(P35, O35))and holds('TerminalNodeFn', P35, Q35)and holds('TerminalNodeFn', R35, Q35), equal(R35, P35)), [domainV(R35, ['TerminalNodeFn':1]), domainV(Q35, ['TerminalNodeFn':2]), domainV(P35, ['$instanceof':'GraphArc', 'TerminalNodeFn':1, graphPart:1]), domainV(O35, ['$instanceof':'GraphPath', graphPart:2]), domainV(_G13072, []), forall(O35), forall(P35), forall(Q35), forall(R35), forall(R35)], ['GRAPH'=O35, 'ARC'=P35, 'NODE'=Q35, 'OTHER'=R35], 'Merge', 'GRAPH Context', 2969, 'Anonymous', on).
mooCache(subclass('GraphCircuit', 'GraphPath'), subclass('GraphCircuit', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 2971, 'Anonymous', on).
mooCache(documentation('GraphCircuit', string('"A GraphPath that begins (see   BeginNodeFn) and ends (see EndNodeFn) at the same   GraphNode."')), documentation('GraphCircuit', string('"A GraphPath that begins (see   BeginNodeFn) and ends (see EndNodeFn) at the same   GraphNode."')), [], [], 'Merge', 'GRAPH Context', 2973, 'Anonymous', on).
mooCache(instance(S4, 'GraphCircuit')<=>exists(T4, equal('BeginNodeFn'(S4), T4)and equal('EndNodeFn'(S4), T4)), (entails(instance(S4, 'GraphCircuit')and'$existential'(T4, '?NODE', holds('BeginNodeFn', S4, '?NODE')and holds('EndNodeFn', S4, '?NODE')), holds('BeginNodeFn', S4, T4))and entails(instance(S4, 'GraphCircuit')and'$existential'(T4, '?NODE', holds('BeginNodeFn', S4, '?NODE')and holds('EndNodeFn', S4, '?NODE')), holds('EndNodeFn', S4, T4))and entails(not holds('BeginNodeFn', S4, T4)or not holds('EndNodeFn', S4, T4), not instance(S4, 'GraphCircuit')))and entails(holds('BeginNodeFn', S4, T4)and holds('EndNodeFn', S4, T4), instance(S4, 'GraphCircuit'))and entails(not instance(S4, 'GraphCircuit')and holds('EndNodeFn', S4, T4), not holds('BeginNodeFn', S4, T4))and entails(not instance(S4, 'GraphCircuit')and holds('BeginNodeFn', S4, T4), not holds('EndNodeFn', S4, T4)), [domainV(T4, ['BeginNodeFn':2, 'EndNodeFn':2]), domainV(S4, ['$instanceof':'GraphCircuit', 'BeginNodeFn':1, 'EndNodeFn':1]), domainV(_G8410, []), forall(S4), replaceConsVar(T4, '$existential'('?NODE', holds('BeginNodeFn', S4, '?NODE')and holds('EndNodeFn', S4, '?NODE'))), forall(T4)], ['GRAPH'=S4, 'NODE'=T4], 'Merge', 'GRAPH Context', 2975, 'Anonymous', on).
mooCache(subclass('MultiGraph', 'Graph'), subclass('MultiGraph', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2977, 'Anonymous', on).
mooCache(documentation('MultiGraph', string('"The Class of multigraphs.  A multigraph   is a Graph containing at least one pair of GraphNodes that are   connected by more than one GraphArc."')), documentation('MultiGraph', string('"The Class of multigraphs.  A multigraph   is a Graph containing at least one pair of GraphNodes that are   connected by more than one GraphArc."')), [], [], 'Merge', 'GRAPH Context', 2979, 'Anonymous', on).
mooCache(instance(K13, 'MultiGraph')<=>exists(L13, exists(M13, exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, N13)and not equal(O13, N13))))), (entails(instance(K13, 'MultiGraph')and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), graphPart(O13, K13))and entails((instance(K13, 'MultiGraph')and'$existential'(N13, '?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2'))))and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), graphPart(N13, K13))and entails(((instance(K13, 'MultiGraph')and'$existential'(M13, '?NODE1', exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart('?NODE1', K13)and graphPart(L13, K13)and links('?NODE1', L13, O13)and links('?NODE1', L13, N13)and not equal(O13, N13)))))and'$existential'(N13, '?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2'))))and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), graphPart(M13, K13))and entails((((instance(K13, 'MultiGraph')and'$existential'(L13, '?NODE2', exists(M13, exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart('?NODE2', K13)and links(M13, '?NODE2', O13)and links(M13, '?NODE2', N13)and not equal(O13, N13))))))and'$existential'(M13, '?NODE1', exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart('?NODE1', K13)and graphPart(L13, K13)and links('?NODE1', L13, O13)and links('?NODE1', L13, N13)and not equal(O13, N13)))))and'$existential'(N13, '?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2'))))and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), graphPart(L13, K13))and entails((((instance(K13, 'MultiGraph')and'$existential'(L13, '?NODE2', exists(M13, exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart('?NODE2', K13)and links(M13, '?NODE2', O13)and links(M13, '?NODE2', N13)and not equal(O13, N13))))))and'$existential'(M13, '?NODE1', exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart('?NODE1', K13)and graphPart(L13, K13)and links('?NODE1', L13, O13)and links('?NODE1', L13, N13)and not equal(O13, N13)))))and'$existential'(N13, '?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2'))))and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), links(M13, L13, O13))and entails((((instance(K13, 'MultiGraph')and'$existential'(L13, '?NODE2', exists(M13, exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart('?NODE2', K13)and links(M13, '?NODE2', O13)and links(M13, '?NODE2', N13)and not equal(O13, N13))))))and'$existential'(M13, '?NODE1', exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart('?NODE1', K13)and graphPart(L13, K13)and links('?NODE1', L13, O13)and links('?NODE1', L13, N13)and not equal(O13, N13)))))and'$existential'(N13, '?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2'))))and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), links(M13, L13, N13))and entails(instance(K13, 'MultiGraph'), not equal(O13, N13))and entails(not graphPart(O13, K13)or not graphPart(N13, K13)or not graphPart(M13, K13)or not graphPart(L13, K13)or not links(M13, L13, O13)or not links(M13, L13, N13)or equal(O13, N13), not instance(K13, 'MultiGraph')))and entails((((graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, N13)and not equal(O13, N13))and'$existential'(M13, '?NODE1', exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart('?NODE1', K13)and graphPart(L13, K13)and links('?NODE1', L13, O13)and links('?NODE1', L13, N13)and not equal(O13, N13)))))and'$existential'(N13, '?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2'))))and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), instance(K13, 'MultiGraph'))and entails(not instance(K13, 'MultiGraph')and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, N13)and not equal(O13, N13), not graphPart(O13, K13))and entails(not instance(K13, 'MultiGraph')and graphPart(O13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, N13)and not equal(O13, N13), not graphPart(N13, K13))and entails(not instance(K13, 'MultiGraph')and graphPart(O13, K13)and graphPart(N13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, N13)and not equal(O13, N13), not graphPart(M13, K13))and entails(not instance(K13, 'MultiGraph')and graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and links(M13, L13, O13)and links(M13, L13, N13)and not equal(O13, N13), not graphPart(L13, K13))and entails(not instance(K13, 'MultiGraph')and graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, N13)and not equal(O13, N13), not links(M13, L13, O13))and entails(not instance(K13, 'MultiGraph')and graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and not equal(O13, N13), not links(M13, L13, N13))and entails((((not instance(K13, 'MultiGraph')and graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, N13))and'$existential'(M13, '?NODE1', exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart('?NODE1', K13)and graphPart(L13, K13)and links('?NODE1', L13, O13)and links('?NODE1', L13, N13)and not equal(O13, N13)))))and'$existential'(N13, '?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2'))))and'$existential'(O13, '?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13)), equal(O13, N13)), [domainV(O13, [graphPart:1, links:3]), domainV(N13, [graphPart:1, links:3]), domainV(M13, [graphPart:1, links:1]), domainV(L13, [graphPart:1, links:2]), domainV(K13, ['$instanceof':'MultiGraph', graphPart:2]), domainV(_G2393, []), forall(K13), replaceConsVar(L13, '$existential'('?NODE2', exists(M13, exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart('?NODE2', K13)and links(M13, '?NODE2', O13)and links(M13, '?NODE2', N13)and not equal(O13, N13)))))), replaceConsVar(M13, '$existential'('?NODE1', exists(N13, exists(O13, graphPart(O13, K13)and graphPart(N13, K13)and graphPart('?NODE1', K13)and graphPart(L13, K13)and links('?NODE1', L13, O13)and links('?NODE1', L13, N13)and not equal(O13, N13))))), replaceConsVar(N13, '$existential'('?ARC2', exists(O13, graphPart(O13, K13)and graphPart('?ARC2', K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, O13)and links(M13, L13, '?ARC2')and not equal(O13, '?ARC2')))), replaceConsVar(O13, '$existential'('?ARC1', graphPart('?ARC1', K13)and graphPart(N13, K13)and graphPart(M13, K13)and graphPart(L13, K13)and links(M13, L13, '?ARC1')and links(M13, L13, N13)and not equal('?ARC1', N13))), forall(L13), forall(M13), forall(N13), forall(O13)], ['GRAPH'=K13, 'ARC1'=O13, 'ARC2'=N13, 'NODE1'=M13, 'NODE2'=L13], 'Merge', 'GRAPH Context', 2981, 'Anonymous', on).
mooCache(subclass('PseudoGraph', 'Graph'), subclass('PseudoGraph', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2983, 'Anonymous', on).
mooCache(documentation('PseudoGraph', string('"The Class of pseudographs.  A pseudograph   is a Graph containing at least one GraphLoop."')), documentation('PseudoGraph', string('"The Class of pseudographs.  A pseudograph   is a Graph containing at least one GraphLoop."')), [], [], 'Merge', 'GRAPH Context', 2985, 'Anonymous', on).
mooCache(instance(D25, 'PseudoGraph')<=>exists(E25, instance(E25, 'GraphLoop')and graphPart(E25, D25)), (entails(instance(D25, 'PseudoGraph')and'$existential'(E25, '?LOOP', instance('?LOOP', 'GraphLoop')and graphPart('?LOOP', D25)), instance(E25, 'GraphLoop'))and entails(instance(D25, 'PseudoGraph')and'$existential'(E25, '?LOOP', instance('?LOOP', 'GraphLoop')and graphPart('?LOOP', D25)), graphPart(E25, D25))and entails(not instance(E25, 'GraphLoop')or not graphPart(E25, D25), not instance(D25, 'PseudoGraph')))and entails(instance(E25, 'GraphLoop')and graphPart(E25, D25), instance(D25, 'PseudoGraph'))and entails(not instance(D25, 'PseudoGraph')and graphPart(E25, D25), not instance(E25, 'GraphLoop'))and entails(not instance(D25, 'PseudoGraph')and instance(E25, 'GraphLoop'), not graphPart(E25, D25)), [domainV(E25, ['$instanceof':'GraphLoop', graphPart:1]), domainV(D25, ['$instanceof':'PseudoGraph', graphPart:2]), domainV(_G7083, []), forall(D25), replaceConsVar(E25, '$existential'('?LOOP', instance('?LOOP', 'GraphLoop')and graphPart('?LOOP', D25))), forall(E25)], ['GRAPH'=D25, 'LOOP'=E25], 'Merge', 'GRAPH Context', 2987, 'Anonymous', on).
mooCache(subclass('GraphElement', 'Abstract'), subclass('GraphElement', 'Abstract'), [], [], 'Merge', 'GRAPH Context', 2989, 'Anonymous', on).
mooCache(disjoint('GraphElement', 'Graph'), disjoint('GraphElement', 'Graph'), [], [], 'Merge', 'GRAPH Context', 2991, 'Anonymous', on).
mooCache(partition('GraphElement', 'GraphNode', 'GraphArc'), partition('GraphElement', 'GraphNode', 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 2993, 'Anonymous', on).
mooCache(documentation('GraphElement', string('"Noncompositional parts of Graphs.    These parts are restricted to GraphNodes and GraphArcs."')), documentation('GraphElement', string('"Noncompositional parts of Graphs.    These parts are restricted to GraphNodes and GraphArcs."')), [], [], 'Merge', 'GRAPH Context', 2995, 'Anonymous', on).
mooCache(instance(R36, 'GraphElement')=>exists(S36, instance(S36, 'Graph')and graphPart(R36, S36)), (entails(not instance(S36, 'Graph'), not instance(R36, 'GraphElement'))and entails(instance(R36, 'GraphElement')and'$existential'(S36, '?GRAPH', instance('?GRAPH', 'Graph')and graphPart(R36, '?GRAPH')), instance(S36, 'Graph')))and entails(not graphPart(R36, S36), not instance(R36, 'GraphElement'))and entails(instance(R36, 'GraphElement')and'$existential'(S36, '?GRAPH', instance('?GRAPH', 'Graph')and graphPart(R36, '?GRAPH')), graphPart(R36, S36)), [domainV(S36, ['$instanceof':'Graph', graphPart:2]), domainV(R36, ['$instanceof':'GraphElement', graphPart:1]), domainV(_G6690, []), forall(R36), replaceConsVar(S36, '$existential'('?GRAPH', instance('?GRAPH', 'Graph')and graphPart(R36, '?GRAPH')))], ['PART'=R36, 'GRAPH'=S36], 'Merge', 'GRAPH Context', 2997, 'Anonymous', on).
mooCache(subclass('GraphNode', 'GraphElement'), subclass('GraphNode', 'GraphElement'), [], [], 'Merge', 'GRAPH Context', 2999, 'Anonymous', on).
mooCache(documentation('GraphNode', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphNode is linked by a GraphArc."')), documentation('GraphNode', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphNode is linked by a GraphArc."')), [], [], 'Merge', 'GRAPH Context', 3001, 'Anonymous', on).
mooCache(instance(D5, 'GraphNode')=>exists(E5, exists(F5, links(D5, F5, E5))), entails(not links(D5, F5, E5), not instance(D5, 'GraphNode'))and entails((instance(D5, 'GraphNode')and'$existential'(E5, '?ARC', exists(F5, links(D5, F5, '?ARC'))))and'$existential'(F5, '?OTHER', links(D5, '?OTHER', E5)), links(D5, F5, E5)), [domainV(F5, [links:2]), domainV(E5, [links:3]), domainV(D5, ['$instanceof':'GraphNode', links:1]), domainV(_G6473, []), forall(D5), replaceConsVar(E5, '$existential'('?ARC', exists(F5, links(D5, F5, '?ARC')))), replaceConsVar(F5, '$existential'('?OTHER', links(D5, '?OTHER', E5)))], ['NODE'=D5, 'OTHER'=F5, 'ARC'=E5], 'Merge', 'GRAPH Context', 3003, 'Anonymous', on).
mooCache(subclass('GraphArc', 'GraphElement'), subclass('GraphArc', 'GraphElement'), [], [], 'Merge', 'GRAPH Context', 3005, 'Anonymous', on).
mooCache(documentation('GraphArc', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphArc links two GraphNodes."')), documentation('GraphArc', string('"Graphs are comprised of GraphNodes   and GraphArcs.  Every GraphArc links two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3007, 'Anonymous', on).
mooCache(instance(B12, 'GraphArc')=>exists(C12, exists(D12, links(D12, C12, B12))), entails(not links(D12, C12, B12), not instance(B12, 'GraphArc'))and entails((instance(B12, 'GraphArc')and'$existential'(C12, '?NODE2', exists(D12, links(D12, '?NODE2', B12))))and'$existential'(D12, '?NODE1', links('?NODE1', C12, B12)), links(D12, C12, B12)), [domainV(D12, [links:1]), domainV(C12, [links:2]), domainV(B12, ['$instanceof':'GraphArc', links:3]), domainV(_G6686, []), forall(B12), replaceConsVar(C12, '$existential'('?NODE2', exists(D12, links(D12, '?NODE2', B12)))), replaceConsVar(D12, '$existential'('?NODE1', links('?NODE1', C12, B12)))], ['ARC'=B12, 'NODE1'=D12, 'NODE2'=C12], 'Merge', 'GRAPH Context', 3009, 'Anonymous', on).
mooCache(subclass('GraphLoop', 'GraphArc'), subclass('GraphLoop', 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3011, 'Anonymous', on).
mooCache(documentation('GraphLoop', string('"A GraphArc in which a GraphNode is   linked to itself."')), documentation('GraphLoop', string('"A GraphArc in which a GraphNode is   linked to itself."')), [], [], 'Merge', 'GRAPH Context', 3013, 'Anonymous', on).
mooCache(instance(X18, 'GraphLoop')<=>exists(Y18, links(Y18, Y18, X18)), (entails(instance(X18, 'GraphLoop')and'$existential'(Y18, '?NODE', links('?NODE', '?NODE', X18)), links(Y18, Y18, X18))and entails(not links(Y18, Y18, X18), not instance(X18, 'GraphLoop')))and entails(links(Y18, Y18, X18), instance(X18, 'GraphLoop'))and entails(not instance(X18, 'GraphLoop'), not links(Y18, Y18, X18)), [domainV(Y18, [links:1, links:2]), domainV(X18, ['$instanceof':'GraphLoop', links:3]), domainV(_G5911, []), forall(X18), replaceConsVar(Y18, '$existential'('?NODE', links('?NODE', '?NODE', X18))), forall(Y18)], ['LOOP'=X18, 'NODE'=Y18], 'Merge', 'GRAPH Context', 3015, 'Anonymous', on).
mooCache(equal('InitialNodeFn'(M21), N21)and equal('TerminalNodeFn'(M21), N21)=>instance(M21, 'GraphLoop'), entails(holds('InitialNodeFn', M21, N21)and holds('TerminalNodeFn', M21, N21), instance(M21, 'GraphLoop'))and entails(not instance(M21, 'GraphLoop')and holds('TerminalNodeFn', M21, N21), not holds('InitialNodeFn', M21, N21))and entails(not instance(M21, 'GraphLoop')and holds('InitialNodeFn', M21, N21), not holds('TerminalNodeFn', M21, N21)), [domainV(N21, ['InitialNodeFn':2, 'TerminalNodeFn':2]), domainV(M21, ['$instanceof':'GraphLoop', 'InitialNodeFn':1, 'TerminalNodeFn':1]), domainV(_G6456, []), forall(M21), forall(N21)], ['ARC'=M21, 'NODE'=N21], 'Merge', 'GRAPH Context', 3017, 'Anonymous', on).
mooCache(instance(links, 'TernaryPredicate'), instance(links, 'TernaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3019, 'Anonymous', on).
mooCache(domain(links, 1, 'GraphNode'), domain(links, 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3021, 'Anonymous', on).
mooCache(domain(links, 2, 'GraphNode'), domain(links, 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3023, 'Anonymous', on).
mooCache(domain(links, 3, 'GraphArc'), domain(links, 3, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3025, 'Anonymous', on).
mooCache(documentation(links, string('"a TernaryPredicate that specifies the   GraphArc connecting two GraphNodes."')), documentation(links, string('"a TernaryPredicate that specifies the   GraphArc connecting two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3027, 'Anonymous', on).
mooCache(links(S34, T34, U34)=>links(T34, S34, U34), entails(not links(T34, S34, U34), not links(S34, T34, U34))and entails(links(S34, T34, U34), links(T34, S34, U34)), [domainV(U34, [links:3]), domainV(T34, [links:1, links:2]), domainV(S34, [links:1, links:2]), domainV(_G5266, []), forall(S34), forall(T34), forall(U34)], ['NODE1'=S34, 'NODE2'=T34, 'ARC'=U34], 'Merge', 'GRAPH Context', 3029, 'Anonymous', on).
mooCache(instance(graphPart, 'BinaryPredicate'), instance(graphPart, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3031, 'Anonymous', on).
mooCache(instance(graphPart, 'AsymmetricRelation'), instance(graphPart, 'AsymmetricRelation'), [], [], 'Merge', 'GRAPH Context', 3033, 'Anonymous', on).
mooCache(instance(graphPart, 'IrreflexiveRelation'), instance(graphPart, 'IrreflexiveRelation'), [], [], 'Merge', 'GRAPH Context', 3035, 'Anonymous', on).
mooCache(domain(graphPart, 1, 'GraphElement'), domain(graphPart, 1, 'GraphElement'), [], [], 'Merge', 'GRAPH Context', 3037, 'Anonymous', on).
mooCache(domain(graphPart, 2, 'Graph'), domain(graphPart, 2, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3039, 'Anonymous', on).
mooCache(documentation(graphPart, string('"A basic relation for Graphs and their   parts.  (graphPart ?PART ?GRAPH) means that ?PART is a GraphArc   or GraphNode of the Graph ?GRAPH."')), documentation(graphPart, string('"A basic relation for Graphs and their   parts.  (graphPart ?PART ?GRAPH) means that ?PART is a GraphArc   or GraphNode of the Graph ?GRAPH."')), [], [], 'Merge', 'GRAPH Context', 3041, 'Anonymous', on).
mooCache(instance(subGraph, 'BinaryPredicate'), instance(subGraph, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3043, 'Anonymous', on).
mooCache(instance(subGraph, 'ReflexiveRelation'), instance(subGraph, 'ReflexiveRelation'), [], [], 'Merge', 'GRAPH Context', 3045, 'Anonymous', on).
mooCache(instance(subGraph, 'TransitiveRelation'), instance(subGraph, 'TransitiveRelation'), [], [], 'Merge', 'GRAPH Context', 3047, 'Anonymous', on).
mooCache(domain(subGraph, 1, 'Graph'), domain(subGraph, 1, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3049, 'Anonymous', on).
mooCache(domain(subGraph, 2, 'Graph'), domain(subGraph, 2, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3051, 'Anonymous', on).
mooCache(documentation(subGraph, string('"The relation between two Graphs when one   Graph is a part of the other.  (subGraph ?GRAPH1 ?GRAPH2) means   that ?GRAPH1 is a part of ?GRAPH2."')), documentation(subGraph, string('"The relation between two Graphs when one   Graph is a part of the other.  (subGraph ?GRAPH1 ?GRAPH2) means   that ?GRAPH1 is a part of ?GRAPH2."')), [], [], 'Merge', 'GRAPH Context', 3053, 'Anonymous', on).
mooCache(subGraph(Z29, A30)and graphPart(B30, Z29)=>graphPart(B30, A30), entails(subGraph(Z29, A30)and graphPart(B30, Z29), graphPart(B30, A30))and entails(not graphPart(B30, A30)and graphPart(B30, Z29), not subGraph(Z29, A30))and entails(not graphPart(B30, A30)and subGraph(Z29, A30), not graphPart(B30, Z29)), [domainV(B30, [graphPart:1]), domainV(A30, [graphPart:2, subGraph:2]), domainV(Z29, [graphPart:2, subGraph:1]), domainV(_G6186, []), forall(Z29), forall(A30), forall(B30)], ['GRAPH1'=Z29, 'GRAPH2'=A30, 'ELEMENT'=B30], 'Merge', 'GRAPH Context', 3055, 'Anonymous', on).
mooCache(instance(pathLength, 'BinaryPredicate'), instance(pathLength, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3057, 'Anonymous', on).
mooCache(instance(pathLength, 'AsymmetricRelation'), instance(pathLength, 'AsymmetricRelation'), [], [], 'Merge', 'GRAPH Context', 3059, 'Anonymous', on).
mooCache(instance(pathLength, 'IrreflexiveRelation'), instance(pathLength, 'IrreflexiveRelation'), [], [], 'Merge', 'GRAPH Context', 3061, 'Anonymous', on).
mooCache(domain(pathLength, 1, 'GraphPath'), domain(pathLength, 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3063, 'Anonymous', on).
mooCache(domain(pathLength, 2, 'PositiveInteger'), domain(pathLength, 2, 'PositiveInteger'), [], [], 'Merge', 'GRAPH Context', 3065, 'Anonymous', on).
mooCache(documentation(pathLength, string('"A BinaryPredicate that specifies the   length (in number of GraphNodes) of a GraphPath.  (pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in   the GraphPath ?PATH."')), documentation(pathLength, string('"A BinaryPredicate that specifies the   length (in number of GraphNodes) of a GraphPath.  (pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in   the GraphPath ?PATH."')), [], [], 'Merge', 'GRAPH Context', 3067, 'Anonymous', on).
mooCache(instance('InitialNodeFn', 'UnaryFunction'), instance('InitialNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3069, 'Anonymous', on).
mooCache(domain('InitialNodeFn', 1, 'GraphArc'), domain('InitialNodeFn', 1, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3071, 'Anonymous', on).
mooCache(range('InitialNodeFn', 'GraphNode'), range('InitialNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3073, 'Anonymous', on).
mooCache(documentation('InitialNodeFn', string('"A UnaryFunction that maps a   GraphArc to the initial node of the GraphArc.  Note  that this is a partial function.  In particular, the function is   undefined for GraphArcs that are not part of a DirectedGraph."')), documentation('InitialNodeFn', string('"A UnaryFunction that maps a   GraphArc to the initial node of the GraphArc.  Note  that this is a partial function.  In particular, the function is   undefined for GraphArcs that are not part of a DirectedGraph."')), [], [], 'Merge', 'GRAPH Context', 3075, 'Anonymous', on).
mooCache(instance('TerminalNodeFn', 'UnaryFunction'), instance('TerminalNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3077, 'Anonymous', on).
mooCache(domain('TerminalNodeFn', 1, 'GraphArc'), domain('TerminalNodeFn', 1, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3079, 'Anonymous', on).
mooCache(range('TerminalNodeFn', 'GraphNode'), range('TerminalNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3081, 'Anonymous', on).
mooCache(documentation('TerminalNodeFn', string('"A UnaryFunction that maps a   GraphArc to the terminal node of the GraphArc.  Note that this   is a partial function.  In particular, the function is undefined   for GraphArcs that are not part of a DirectedGraph."')), documentation('TerminalNodeFn', string('"A UnaryFunction that maps a   GraphArc to the terminal node of the GraphArc.  Note that this   is a partial function.  In particular, the function is undefined   for GraphArcs that are not part of a DirectedGraph."')), [], [], 'Merge', 'GRAPH Context', 3083, 'Anonymous', on).
mooCache(instance('BeginNodeFn', 'UnaryFunction'), instance('BeginNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3085, 'Anonymous', on).
mooCache(domain('BeginNodeFn', 1, 'GraphPath'), domain('BeginNodeFn', 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3087, 'Anonymous', on).
mooCache(range('BeginNodeFn', 'GraphNode'), range('BeginNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3089, 'Anonymous', on).
mooCache(relatedInternalConcept('BeginNodeFn', 'InitialNodeFn'), relatedInternalConcept('BeginNodeFn', 'InitialNodeFn'), [], [], 'Merge', 'GRAPH Context', 3091, 'Anonymous', on).
mooCache(documentation('BeginNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the beginning of the GraphPath.  Note that,   unlike InitialNodeFn (which relates a GraphArc to a GraphNode),    BeginNodeFn is a total function - every GraphPath has a beginning."')), documentation('BeginNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the beginning of the GraphPath.  Note that,   unlike InitialNodeFn (which relates a GraphArc to a GraphNode),    BeginNodeFn is a total function - every GraphPath has a beginning."')), [], [], 'Merge', 'GRAPH Context', 3093, 'Anonymous', on).
mooCache(instance('EndNodeFn', 'UnaryFunction'), instance('EndNodeFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3095, 'Anonymous', on).
mooCache(domain('EndNodeFn', 1, 'GraphPath'), domain('EndNodeFn', 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3097, 'Anonymous', on).
mooCache(range('EndNodeFn', 'GraphNode'), range('EndNodeFn', 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3099, 'Anonymous', on).
mooCache(relatedInternalConcept('EndNodeFn', 'TerminalNodeFn'), relatedInternalConcept('EndNodeFn', 'TerminalNodeFn'), [], [], 'Merge', 'GRAPH Context', 3101, 'Anonymous', on).
mooCache(documentation('EndNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the end of the GraphPath.  Note that, unlike   TerminalNodeFn (which relates a GraphArc to a GraphNode),    EndNodeFn is a total function - every GraphPath has a end."')), documentation('EndNodeFn', string('"A UnaryFunction that maps a GraphPath   to the GraphNode that is the end of the GraphPath.  Note that, unlike   TerminalNodeFn (which relates a GraphArc to a GraphNode),    EndNodeFn is a total function - every GraphPath has a end."')), [], [], 'Merge', 'GRAPH Context', 3103, 'Anonymous', on).
mooCache(instance(arcWeight, 'BinaryPredicate'), instance(arcWeight, 'BinaryPredicate'), [], [], 'Merge', 'GRAPH Context', 3105, 'Anonymous', on).
mooCache(domain(arcWeight, 1, 'GraphArc'), domain(arcWeight, 1, 'GraphArc'), [], [], 'Merge', 'GRAPH Context', 3107, 'Anonymous', on).
mooCache(domain(arcWeight, 2, 'RealNumber'), domain(arcWeight, 2, 'RealNumber'), [], [], 'Merge', 'GRAPH Context', 3109, 'Anonymous', on).
mooCache(documentation(arcWeight, string('"This predicate indicates the value of a   GraphArc in a Graph.  This could map to the length of a road in   a road network or the flow rate of a pipe in a plumbing system."')), documentation(arcWeight, string('"This predicate indicates the value of a   GraphArc in a Graph.  This could map to the length of a road in   a road network or the flow rate of a pipe in a plumbing system."')), [], [], 'Merge', 'GRAPH Context', 3111, 'Anonymous', on).
mooCache(instance('PathWeightFn', 'UnaryFunction'), instance('PathWeightFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3113, 'Anonymous', on).
mooCache(domain('PathWeightFn', 1, 'GraphPath'), domain('PathWeightFn', 1, 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3115, 'Anonymous', on).
mooCache(range('PathWeightFn', 'RealNumber'), range('PathWeightFn', 'RealNumber'), [], [], 'Merge', 'GRAPH Context', 3117, 'Anonymous', on).
mooCache(documentation('PathWeightFn', string('"A UnaryFunction that maps a   GraphPath to the sum of the arcWeights on the GraphArcs in   the GraphPath."')), documentation('PathWeightFn', string('"A UnaryFunction that maps a   GraphPath to the sum of the arcWeights on the GraphArcs in   the GraphPath."')), [], [], 'Merge', 'GRAPH Context', 3119, 'Anonymous', on).
mooCache(equal('PathWeightFn'(Z25), A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26)and forall(E26, graphPart(E26, Z25)=>graphPart(E26, B26)or equal(E26, C26))=>equal(A26, 'AdditionFn'('PathWeightFn'(B26), D26)), (entails(holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26)and not graphPart(E26, Z25), holds('AdditionFn', 'PathWeightFn'(B26), D26, A26))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26)and not graphPart(E26, Z25), not holds('PathWeightFn', Z25, A26))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and graphPart(C26, Z25)and arcWeight(C26, D26)and not graphPart(E26, Z25), not subGraph(B26, Z25))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and arcWeight(C26, D26)and not graphPart(E26, Z25), not graphPart(C26, Z25))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and not graphPart(E26, Z25), not arcWeight(C26, D26))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26), graphPart(E26, Z25)))and (entails(holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26)and graphPart(E26, B26), holds('AdditionFn', 'PathWeightFn'(B26), D26, A26))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26)and graphPart(E26, B26), not holds('PathWeightFn', Z25, A26))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and graphPart(C26, Z25)and arcWeight(C26, D26)and graphPart(E26, B26), not subGraph(B26, Z25))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and arcWeight(C26, D26)and graphPart(E26, B26), not graphPart(C26, Z25))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and graphPart(E26, B26), not arcWeight(C26, D26))and entails((not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26))and'$existential'(E26, '?ARC2', not (graphPart('?ARC2', Z25)=>graphPart('?ARC2', B26)or equal('?ARC2', C26))), not graphPart(E26, B26)))and entails(holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26)and equal(E26, C26), holds('AdditionFn', 'PathWeightFn'(B26), D26, A26))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26)and equal(E26, C26), not holds('PathWeightFn', Z25, A26))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and graphPart(C26, Z25)and arcWeight(C26, D26)and equal(E26, C26), not subGraph(B26, Z25))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and arcWeight(C26, D26)and equal(E26, C26), not graphPart(C26, Z25))and entails(not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and equal(E26, C26), not arcWeight(C26, D26))and entails((not holds('AdditionFn', 'PathWeightFn'(B26), D26, A26)and holds('PathWeightFn', Z25, A26)and subGraph(B26, Z25)and graphPart(C26, Z25)and arcWeight(C26, D26))and'$existential'(E26, '?ARC2', not (graphPart('?ARC2', Z25)=>graphPart('?ARC2', B26)or equal('?ARC2', C26))), not equal(E26, C26)), [domainV(E26, [graphPart:1]), domainV(D26, ['AdditionFn':2, arcWeight:2]), domainV(C26, [arcWeight:1, graphPart:1]), domainV(B26, ['PathWeightFn':1, graphPart:2, subGraph:1]), domainV(A26, ['AdditionFn':3, 'PathWeightFn':2]), domainV(Z25, ['PathWeightFn':1, graphPart:2, subGraph:2]), domainV(_G2312, []), forall(Z25), forall(A26), forall(B26), forall(C26), forall(D26), replaceConsVar(E26, '$existential'('?ARC2', not (graphPart('?ARC2', Z25)=>graphPart('?ARC2', B26)or equal('?ARC2', C26))))], ['PATH'=Z25, 'SUM'=A26, 'SUBPATH'=B26, 'ARC1'=C26, 'NUMBER1'=D26, 'ARC2'=E26], 'Merge', 'GRAPH Context', 3121, 'Anonymous', on).
mooCache(equal('PathWeightFn'(D31), E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and forall(J31, graphPart(J31, D31)=>equal(J31, F31)or equal(J31, G31))=>equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31)), (entails(holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and not graphPart(J31, D31), equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31)))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and not graphPart(J31, D31), not holds('PathWeightFn', D31, E31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and not graphPart(J31, D31), not graphPart(F31, D31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and not graphPart(J31, D31), not graphPart(G31, D31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(G31, I31)and not graphPart(J31, D31), not arcWeight(F31, H31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and not graphPart(J31, D31), not arcWeight(G31, I31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31), graphPart(J31, D31)))and (entails(holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, F31), equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31)))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, F31), not holds('PathWeightFn', D31, E31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, F31), not graphPart(F31, D31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, F31), not graphPart(G31, D31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(G31, I31)and equal(J31, F31), not arcWeight(F31, H31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and equal(J31, F31), not arcWeight(G31, I31))and entails((not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31))and'$existential'(J31, '?ARC3', not (graphPart('?ARC3', D31)=>equal('?ARC3', F31)or equal('?ARC3', G31))), not equal(J31, F31)))and entails(holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, G31), equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31)))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, G31), not holds('PathWeightFn', D31, E31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, G31), not graphPart(F31, D31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31)and equal(J31, G31), not graphPart(G31, D31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(G31, I31)and equal(J31, G31), not arcWeight(F31, H31))and entails(not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and equal(J31, G31), not arcWeight(G31, I31))and entails((not equal('PathWeightFn'(D31), 'AdditionFn'(H31, I31))and holds('PathWeightFn', D31, E31)and graphPart(F31, D31)and graphPart(G31, D31)and arcWeight(F31, H31)and arcWeight(G31, I31))and'$existential'(J31, '?ARC3', not (graphPart('?ARC3', D31)=>equal('?ARC3', F31)or equal('?ARC3', G31))), not equal(J31, G31)), [domainV(J31, [graphPart:1]), domainV(I31, ['AdditionFn':2, arcWeight:2]), domainV(H31, ['AdditionFn':1, arcWeight:2]), domainV(G31, [arcWeight:1, graphPart:1]), domainV(F31, [arcWeight:1, graphPart:1]), domainV(E31, ['PathWeightFn':2]), domainV(D31, ['PathWeightFn':1, graphPart:2]), domainV(_G2545, []), forall(D31), forall(E31), forall(F31), forall(G31), forall(H31), forall(I31), replaceConsVar(J31, '$existential'('?ARC3', not (graphPart('?ARC3', D31)=>equal('?ARC3', F31)or equal('?ARC3', G31))))], ['PATH'=D31, 'SUM'=E31, 'ARC1'=F31, 'ARC2'=G31, 'NUMBER1'=H31, 'NUMBER2'=I31, 'ARC3'=J31], 'Merge', 'GRAPH Context', 3123, 'Anonymous', on).
mooCache(instance('MinimalWeightedPathFn', 'BinaryFunction'), instance('MinimalWeightedPathFn', 'BinaryFunction'), [], [], 'Merge', 'GRAPH Context', 3125, 'Anonymous', on).
mooCache(domain('MinimalWeightedPathFn', 1, 'GraphNode'), domain('MinimalWeightedPathFn', 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3127, 'Anonymous', on).
mooCache(domain('MinimalWeightedPathFn', 2, 'GraphNode'), domain('MinimalWeightedPathFn', 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3129, 'Anonymous', on).
mooCache(range('MinimalWeightedPathFn', 'GraphPath'), range('MinimalWeightedPathFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3131, 'Anonymous', on).
mooCache(documentation('MinimalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the smallest sum of weighted arcs   between the two GraphNodes."')), documentation('MinimalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the smallest sum of weighted arcs   between the two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3133, 'Anonymous', on).
mooCache(equal('MinimalWeightedPathFn'(N8, O8), P8)=>instance(P8, 'GraphPathFn'(N8, O8)), entails(not instance(P8, 'GraphPathFn'(N8, O8)), not holds('MinimalWeightedPathFn', N8, O8, P8))and entails(holds('MinimalWeightedPathFn', N8, O8, P8), instance(P8, 'GraphPathFn'(N8, O8))), [domainV(P8, ['MinimalWeightedPathFn':3]), domainV(O8, ['GraphPathFn':2, 'MinimalWeightedPathFn':2]), domainV(N8, ['GraphPathFn':1, 'MinimalWeightedPathFn':1]), domainV(_G6206, []), forall(N8), forall(O8), forall(P8)], ['NODE1'=N8, 'NODE2'=O8, 'PATH'=P8], 'Merge', 'GRAPH Context', 3135, 'Anonymous', on).
mooCache(equal('MinimalWeightedPathFn'(J11, K11), L11)and equal('PathWeightFn'(L11), M11)=>forall(N11, instance(N11, 'GraphPathFn'(J11, K11))and equal('PathWeightFn'(N11), O11)=>greaterThanOrEqualTo(O11, P11)), entails(holds('PathWeightFn', L11, M11)and not greaterThanOrEqualTo(O11, P11)and instance(N11, 'GraphPathFn'(J11, K11))and holds('PathWeightFn', N11, O11), not holds('MinimalWeightedPathFn', J11, K11, L11))and entails(holds('MinimalWeightedPathFn', J11, K11, L11)and not greaterThanOrEqualTo(O11, P11)and instance(N11, 'GraphPathFn'(J11, K11))and holds('PathWeightFn', N11, O11), not holds('PathWeightFn', L11, M11))and entails((holds('MinimalWeightedPathFn', J11, K11, L11)and holds('PathWeightFn', L11, M11))and instance(N11, 'GraphPathFn'(J11, K11))and holds('PathWeightFn', N11, O11), greaterThanOrEqualTo(O11, P11))and entails((holds('MinimalWeightedPathFn', J11, K11, L11)and holds('PathWeightFn', L11, M11))and not greaterThanOrEqualTo(O11, P11)and holds('PathWeightFn', N11, O11), not instance(N11, 'GraphPathFn'(J11, K11)))and entails((holds('MinimalWeightedPathFn', J11, K11, L11)and holds('PathWeightFn', L11, M11))and not greaterThanOrEqualTo(O11, P11)and instance(N11, 'GraphPathFn'(J11, K11)), not holds('PathWeightFn', N11, O11)), [domainV(P11, [greaterThanOrEqualTo:2]), domainV(O11, ['PathWeightFn':2, greaterThanOrEqualTo:1]), domainV(N11, ['PathWeightFn':1]), domainV(M11, ['PathWeightFn':2]), domainV(L11, ['MinimalWeightedPathFn':3, 'PathWeightFn':1]), domainV(K11, ['GraphPathFn':2, 'MinimalWeightedPathFn':2]), domainV(J11, ['GraphPathFn':1, 'MinimalWeightedPathFn':1]), domainV(_G14094, []), forall(J11), forall(K11), forall(L11), forall(M11), forall(O11), forall(P11), forall(N11)], ['NODE1'=J11, 'NODE2'=K11, 'PATH'=L11, 'NUMBER'=M11, 'PATH2'=N11, 'NUMBER2'=O11, 'NUMBER1'=P11], 'Merge', 'GRAPH Context', 3137, 'Anonymous', on).
mooCache(instance('MaximalWeightedPathFn', 'BinaryFunction'), instance('MaximalWeightedPathFn', 'BinaryFunction'), [], [], 'Merge', 'GRAPH Context', 3139, 'Anonymous', on).
mooCache(domain('MaximalWeightedPathFn', 1, 'GraphNode'), domain('MaximalWeightedPathFn', 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3141, 'Anonymous', on).
mooCache(domain('MaximalWeightedPathFn', 2, 'GraphNode'), domain('MaximalWeightedPathFn', 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3143, 'Anonymous', on).
mooCache(range('MaximalWeightedPathFn', 'GraphPath'), range('MaximalWeightedPathFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3145, 'Anonymous', on).
mooCache(documentation('MaximalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the largest sum of weighted arcs   between the two GraphNodes."')), documentation('MaximalWeightedPathFn', string('"This BinaryFunction assigns two   GraphNodes to the GraphPath with the largest sum of weighted arcs   between the two GraphNodes."')), [], [], 'Merge', 'GRAPH Context', 3147, 'Anonymous', on).
mooCache(equal('MaximalWeightedPathFn'(T24, U24), V24)=>instance(V24, 'GraphPathFn'(T24, U24)), entails(not instance(V24, 'GraphPathFn'(T24, U24)), not holds('MaximalWeightedPathFn', T24, U24, V24))and entails(holds('MaximalWeightedPathFn', T24, U24, V24), instance(V24, 'GraphPathFn'(T24, U24))), [domainV(V24, ['MaximalWeightedPathFn':3]), domainV(U24, ['GraphPathFn':2, 'MaximalWeightedPathFn':2]), domainV(T24, ['GraphPathFn':1, 'MaximalWeightedPathFn':1]), domainV(_G6206, []), forall(T24), forall(U24), forall(V24)], ['NODE1'=T24, 'NODE2'=U24, 'PATH'=V24], 'Merge', 'GRAPH Context', 3149, 'Anonymous', on).
mooCache(equal('MaximalWeightedPathFn'(P27, Q27), R27)and equal('PathWeightFn'(R27), S27)=>forall(T27, instance(T27, 'GraphPathFn'(P27, Q27))and equal('PathWeightFn'(T27), U27)=>lessThanOrEqualTo(U27, V27)), entails(holds('PathWeightFn', R27, S27)and not lessThanOrEqualTo(U27, V27)and instance(T27, 'GraphPathFn'(P27, Q27))and holds('PathWeightFn', T27, U27), not holds('MaximalWeightedPathFn', P27, Q27, R27))and entails(holds('MaximalWeightedPathFn', P27, Q27, R27)and not lessThanOrEqualTo(U27, V27)and instance(T27, 'GraphPathFn'(P27, Q27))and holds('PathWeightFn', T27, U27), not holds('PathWeightFn', R27, S27))and entails((holds('MaximalWeightedPathFn', P27, Q27, R27)and holds('PathWeightFn', R27, S27))and instance(T27, 'GraphPathFn'(P27, Q27))and holds('PathWeightFn', T27, U27), lessThanOrEqualTo(U27, V27))and entails((holds('MaximalWeightedPathFn', P27, Q27, R27)and holds('PathWeightFn', R27, S27))and not lessThanOrEqualTo(U27, V27)and holds('PathWeightFn', T27, U27), not instance(T27, 'GraphPathFn'(P27, Q27)))and entails((holds('MaximalWeightedPathFn', P27, Q27, R27)and holds('PathWeightFn', R27, S27))and not lessThanOrEqualTo(U27, V27)and instance(T27, 'GraphPathFn'(P27, Q27)), not holds('PathWeightFn', T27, U27)), [domainV(V27, [lessThanOrEqualTo:2]), domainV(U27, ['PathWeightFn':2, lessThanOrEqualTo:1]), domainV(T27, ['PathWeightFn':1]), domainV(S27, ['PathWeightFn':2]), domainV(R27, ['MaximalWeightedPathFn':3, 'PathWeightFn':1]), domainV(Q27, ['GraphPathFn':2, 'MaximalWeightedPathFn':2]), domainV(P27, ['GraphPathFn':1, 'MaximalWeightedPathFn':1]), domainV(_G14076, []), forall(P27), forall(Q27), forall(R27), forall(S27), forall(U27), forall(V27), forall(T27)], ['NODE1'=P27, 'NODE2'=Q27, 'PATH'=R27, 'NUMBER'=S27, 'PATH2'=T27, 'NUMBER2'=U27, 'NUMBER1'=V27], 'Merge', 'GRAPH Context', 3151, 'Anonymous', on).
mooCache(instance('GraphPathFn', 'BinaryFunction'), instance('GraphPathFn', 'BinaryFunction'), [], [], 'Merge', 'GRAPH Context', 3153, 'Anonymous', on).
mooCache(domain('GraphPathFn', 1, 'GraphNode'), domain('GraphPathFn', 1, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3155, 'Anonymous', on).
mooCache(domain('GraphPathFn', 2, 'GraphNode'), domain('GraphPathFn', 2, 'GraphNode'), [], [], 'Merge', 'GRAPH Context', 3157, 'Anonymous', on).
mooCache(rangeSubclass('GraphPathFn', 'GraphPath'), rangeSubclass('GraphPathFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3159, 'Anonymous', on).
mooCache(documentation('GraphPathFn', string('"A BinaryFunction that maps two GraphNodes   to the Class of GraphPaths between those two nodes.  Note that the two   GraphNodes must belong to the same Graph."')), documentation('GraphPathFn', string('"A BinaryFunction that maps two GraphNodes   to the Class of GraphPaths between those two nodes.  Note that the two   GraphNodes must belong to the same Graph."')), [], [], 'Merge', 'GRAPH Context', 3161, 'Anonymous', on).
mooCache(graphPart(Q2, R2)and not instance(R2, 'DirectedGraph')=> (equal('GraphPathFn'(S2, T2), Q2)<=>equal('GraphPathFn'(T2, S2), Q2)), (entails(not instance(R2, 'DirectedGraph')and not holds('GraphPathFn', T2, S2, Q2)and holds('GraphPathFn', T2, S2, Q2), not graphPart(Q2, R2))and entails(graphPart(Q2, R2)and not holds('GraphPathFn', T2, S2, Q2)and holds('GraphPathFn', T2, S2, Q2), instance(R2, 'DirectedGraph')))and (entails(not instance(R2, 'DirectedGraph')and not holds('GraphPathFn', T2, S2, Q2)and holds('GraphPathFn', S2, T2, Q2), not graphPart(Q2, R2))and entails(graphPart(Q2, R2)and not holds('GraphPathFn', T2, S2, Q2)and holds('GraphPathFn', S2, T2, Q2), instance(R2, 'DirectedGraph'))and entails((graphPart(Q2, R2)and not instance(R2, 'DirectedGraph'))and holds('GraphPathFn', S2, T2, Q2), holds('GraphPathFn', T2, S2, Q2))and entails((graphPart(Q2, R2)and not instance(R2, 'DirectedGraph'))and not holds('GraphPathFn', T2, S2, Q2), not holds('GraphPathFn', S2, T2, Q2)))and (entails(not instance(R2, 'DirectedGraph')and not holds('GraphPathFn', S2, T2, Q2)and holds('GraphPathFn', S2, T2, Q2), not graphPart(Q2, R2))and entails(graphPart(Q2, R2)and not holds('GraphPathFn', S2, T2, Q2)and holds('GraphPathFn', S2, T2, Q2), instance(R2, 'DirectedGraph')))and entails(not instance(R2, 'DirectedGraph')and not holds('GraphPathFn', S2, T2, Q2)and holds('GraphPathFn', T2, S2, Q2), not graphPart(Q2, R2))and entails(graphPart(Q2, R2)and not holds('GraphPathFn', S2, T2, Q2)and holds('GraphPathFn', T2, S2, Q2), instance(R2, 'DirectedGraph'))and entails((graphPart(Q2, R2)and not instance(R2, 'DirectedGraph'))and holds('GraphPathFn', T2, S2, Q2), holds('GraphPathFn', S2, T2, Q2))and entails((graphPart(Q2, R2)and not instance(R2, 'DirectedGraph'))and not holds('GraphPathFn', S2, T2, Q2), not holds('GraphPathFn', T2, S2, Q2)), [domainV(T2, ['GraphPathFn':1, 'GraphPathFn':2]), domainV(S2, ['GraphPathFn':1, 'GraphPathFn':2]), domainV(R2, ['$instanceof':'DirectedGraph', graphPart:2]), domainV(Q2, ['GraphPathFn':3, graphPart:1]), domainV(_G10358, []), forall(Q2), forall(R2), forall(S2), forall(T2)], ['PATH'=Q2, 'GRAPH'=R2, 'NODE1'=S2, 'NODE2'=T2], 'Merge', 'GRAPH Context', 3163, 'Anonymous', on).
mooCache(instance('CutSetFn', 'UnaryFunction'), instance('CutSetFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3165, 'Anonymous', on).
mooCache(domain('CutSetFn', 1, 'Graph'), domain('CutSetFn', 1, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3167, 'Anonymous', on).
mooCache(rangeSubclass('CutSetFn', 'GraphPath'), rangeSubclass('CutSetFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3169, 'Anonymous', on).
mooCache(documentation('CutSetFn', string('"A UnaryFunction that assigns a Graph the   Class of GraphPaths that partition the graph into two separate   graphs if cut.  There may be more than one cutset for a given graph."')), documentation('CutSetFn', string('"A UnaryFunction that assigns a Graph the   Class of GraphPaths that partition the graph into two separate   graphs if cut.  There may be more than one cutset for a given graph."')), [], [], 'Merge', 'GRAPH Context', 3171, 'Anonymous', on).
mooCache(instance('MinimalCutSetFn', 'UnaryFunction'), instance('MinimalCutSetFn', 'UnaryFunction'), [], [], 'Merge', 'GRAPH Context', 3173, 'Anonymous', on).
mooCache(domain('MinimalCutSetFn', 1, 'Graph'), domain('MinimalCutSetFn', 1, 'Graph'), [], [], 'Merge', 'GRAPH Context', 3175, 'Anonymous', on).
mooCache(rangeSubclass('MinimalCutSetFn', 'GraphPath'), rangeSubclass('MinimalCutSetFn', 'GraphPath'), [], [], 'Merge', 'GRAPH Context', 3177, 'Anonymous', on).
mooCache(relatedInternalConcept('MinimalCutSetFn', 'CutSetFn'), relatedInternalConcept('MinimalCutSetFn', 'CutSetFn'), [], [], 'Merge', 'GRAPH Context', 3179, 'Anonymous', on).
mooCache(documentation('MinimalCutSetFn', string('"A UnaryFunction that assigns a Graph   the Class of GraphPaths which comprise cutsets for the Graph and   which have the least number of GraphArcs."')), documentation('MinimalCutSetFn', string('"A UnaryFunction that assigns a Graph   the Class of GraphPaths which comprise cutsets for the Graph and   which have the least number of GraphArcs."')), [], [], 'Merge', 'GRAPH Context', 3181, 'Anonymous', on).
mooCache(subclass('MinimalCutSetFn'(R24), 'CutSetFn'(R24)), subclass('MinimalCutSetFn'(R24), 'CutSetFn'(R24)), [domainV(R24, ['CutSetFn':1, 'MinimalCutSetFn':1]), domainV(_G3462, []), forall(R24)], ['GRAPH'=R24], 'Merge', 'GRAPH Context', 3183, 'Anonymous', on).
mooCache(equal('MinimalCutSetFn'(E27), F27)=>exists(G27, forall(H27, instance(H27, F27)=>pathLength(H27, G27))), entails(instance(H27, F27)and not pathLength(H27, G27), not holds('MinimalCutSetFn', E27, F27))and entails(holds('MinimalCutSetFn', E27, F27)and not pathLength(H27, G27), not instance(H27, F27))and entails((holds('MinimalCutSetFn', E27, F27)and instance(H27, F27))and'$existential'(G27, '?NUMBER', forall(H27, instance(H27, F27)=>pathLength(H27, '?NUMBER'))), pathLength(H27, G27)), [domainV(H27, [pathLength:1]), domainV(G27, [pathLength:2]), domainV(F27, ['MinimalCutSetFn':2, instance:2]), domainV(E27, ['MinimalCutSetFn':1]), domainV(_G9334, []), forall(E27), forall(F27), replaceConsVar(G27, '$existential'('?NUMBER', forall(H27, instance(H27, F27)=>pathLength(H27, '?NUMBER')))), forall(H27)], ['GRAPH'=E27, 'PATHCLASS'=F27, 'NUMBER'=G27, 'PATH'=H27], 'Merge', 'GRAPH Context', 3185, 'Anonymous', on).
mooCache(not exists(H30, exists(I30, instance(I30, 'CutSetFn'(J30))and instance(H30, 'MinimalCutSetFn'(J30))and pathLength(I30, K30)and pathLength(H30, L30)and lessThan(K30, L30))), entails(instance(H30, 'MinimalCutSetFn'(J30))and pathLength(I30, K30)and pathLength(H30, L30)and lessThan(K30, L30), not instance(I30, 'CutSetFn'(J30)))and entails(instance(I30, 'CutSetFn'(J30))and pathLength(I30, K30)and pathLength(H30, L30)and lessThan(K30, L30), not instance(H30, 'MinimalCutSetFn'(J30)))and entails(instance(I30, 'CutSetFn'(J30))and instance(H30, 'MinimalCutSetFn'(J30))and pathLength(H30, L30)and lessThan(K30, L30), not pathLength(I30, K30))and entails(instance(I30, 'CutSetFn'(J30))and instance(H30, 'MinimalCutSetFn'(J30))and pathLength(I30, K30)and lessThan(K30, L30), not pathLength(H30, L30))and entails(instance(I30, 'CutSetFn'(J30))and instance(H30, 'MinimalCutSetFn'(J30))and pathLength(I30, K30)and pathLength(H30, L30), not lessThan(K30, L30)), [domainV(L30, [lessThan:2, pathLength:2]), domainV(K30, [lessThan:1, pathLength:2]), domainV(J30, ['CutSetFn':1, 'MinimalCutSetFn':1]), domainV(I30, [pathLength:1]), domainV(H30, [pathLength:1]), domainV(_G13055, []), forall(H30), forall(I30), forall(J30), forall(K30), forall(L30), forall(H30), forall(I30)], ['PATH1'=I30, 'PATH2'=H30, 'GRAPH'=J30, 'NUMBER1'=K30, 'NUMBER2'=L30], 'Merge', 'GRAPH Context', 3187, 'Anonymous', on).
mooCache('include-context'('NUMERIC', 'FUNCTIONS'), 'include-context'('NUMERIC', 'FUNCTIONS'), [], [], 'Merge', 'UNITS OF MEASURE', 3199, 'Anonymous', on).
mooCache(subclass('UnitOfMeasure', 'PhysicalQuantity'), subclass('UnitOfMeasure', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3220, 'Anonymous', on).
mooCache(documentation('UnitOfMeasure', string('"A standard of measurement for some dimension.   For example, the Meter is a UnitOfMeasure for the dimension of length,   as is the Inch.  There is no intrisic property of a UnitOfMeasure that   makes it primitive or fundamental; rather, a system-of-units (e.g.   SystemeInternationalUnit) defines a set of orthogonal dimensions and   assigns units for each."')), documentation('UnitOfMeasure', string('"A standard of measurement for some dimension.   For example, the Meter is a UnitOfMeasure for the dimension of length,   as is the Inch.  There is no intrisic property of a UnitOfMeasure that   makes it primitive or fundamental; rather, a system-of-units (e.g.   SystemeInternationalUnit) defines a set of orthogonal dimensions and   assigns units for each."')), [], [], 'Merge', 'UNITS OF MEASURE', 3222, 'Anonymous', on).
mooCache(subclass('SystemeInternationalUnit', 'UnitOfMeasure'), subclass('SystemeInternationalUnit', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3224, 'Anonymous', on).
mooCache(documentation('SystemeInternationalUnit', string('"The Class of Systeme   International (SI) units."')), documentation('SystemeInternationalUnit', string('"The Class of Systeme   International (SI) units."')), [], [], 'Merge', 'UNITS OF MEASURE', 3226, 'Anonymous', on).
mooCache(subclass('LengthMeasure', 'ConstantQuantity'), subclass('LengthMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3228, 'Anonymous', on).
mooCache(documentation('LengthMeasure', string('"The Class of ConstantQuantities relating   to length."')), documentation('LengthMeasure', string('"The Class of ConstantQuantities relating   to length."')), [], [], 'Merge', 'UNITS OF MEASURE', 3230, 'Anonymous', on).
mooCache(subclass('MassMeasure', 'ConstantQuantity'), subclass('MassMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3232, 'Anonymous', on).
mooCache(documentation('MassMeasure', string('"The Class of ConstantQuantities relating   to the amount of matter in an Object."')), documentation('MassMeasure', string('"The Class of ConstantQuantities relating   to the amount of matter in an Object."')), [], [], 'Merge', 'UNITS OF MEASURE', 3234, 'Anonymous', on).
mooCache(subclass('AreaMeasure', 'ConstantQuantity'), subclass('AreaMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3236, 'Anonymous', on).
mooCache(documentation('AreaMeasure', string('"Measures of the amount of space in two   dimensions."')), documentation('AreaMeasure', string('"Measures of the amount of space in two   dimensions."')), [], [], 'Merge', 'UNITS OF MEASURE', 3238, 'Anonymous', on).
mooCache(subclass('VolumeMeasure', 'ConstantQuantity'), subclass('VolumeMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3240, 'Anonymous', on).
mooCache(documentation('VolumeMeasure', string('"Measures of the amount of space in three   dimensions."')), documentation('VolumeMeasure', string('"Measures of the amount of space in three   dimensions."')), [], [], 'Merge', 'UNITS OF MEASURE', 3242, 'Anonymous', on).
mooCache(subclass('TemperatureMeasure', 'ConstantQuantity'), subclass('TemperatureMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3244, 'Anonymous', on).
mooCache(documentation('TemperatureMeasure', string('"Measures of temperature.    In scientific circles, the temperature of something is understood as the   average velocity of the atoms or molecules that make up the thing."')), documentation('TemperatureMeasure', string('"Measures of temperature.    In scientific circles, the temperature of something is understood as the   average velocity of the atoms or molecules that make up the thing."')), [], [], 'Merge', 'UNITS OF MEASURE', 3246, 'Anonymous', on).
mooCache(subclass('CurrencyMeasure', 'ConstantQuantity'), subclass('CurrencyMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3248, 'Anonymous', on).
mooCache(documentation('CurrencyMeasure', string('"Includes all standard measures of monetary   value, including DollarUnitedStates, CentUnitedStates, Lire, Yen, etc."')), documentation('CurrencyMeasure', string('"Includes all standard measures of monetary   value, including DollarUnitedStates, CentUnitedStates, Lire, Yen, etc."')), [], [], 'Merge', 'UNITS OF MEASURE', 3250, 'Anonymous', on).
mooCache(subclass('AngleMeasure', 'ConstantQuantity'), subclass('AngleMeasure', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3252, 'Anonymous', on).
mooCache(documentation('AngleMeasure', string('"The value of an angle in a plane or in a   solid."')), documentation('AngleMeasure', string('"The value of an angle in a plane or in a   solid."')), [], [], 'Merge', 'UNITS OF MEASURE', 3254, 'Anonymous', on).
mooCache(subclass('PlaneAngleMeasure', 'AngleMeasure'), subclass('PlaneAngleMeasure', 'AngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3256, 'Anonymous', on).
mooCache(documentation('PlaneAngleMeasure', string('"The value of an angle in a plane."')), documentation('PlaneAngleMeasure', string('"The value of an angle in a plane."')), [], [], 'Merge', 'UNITS OF MEASURE', 3258, 'Anonymous', on).
mooCache(subclass('SolidAngleMeasure', 'AngleMeasure'), subclass('SolidAngleMeasure', 'AngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3260, 'Anonymous', on).
mooCache(disjoint('SolidAngleMeasure', 'PlaneAngleMeasure'), disjoint('SolidAngleMeasure', 'PlaneAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3262, 'Anonymous', on).
mooCache(documentation('SolidAngleMeasure', string('"The value of an angle in a solid."')), documentation('SolidAngleMeasure', string('"The value of an angle in a solid."')), [], [], 'Merge', 'UNITS OF MEASURE', 3264, 'Anonymous', on).
mooCache(instance('MeasureFn', 'BinaryFunction'), instance('MeasureFn', 'BinaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3266, 'Anonymous', on).
mooCache(domain('MeasureFn', 1, 'RealNumber'), domain('MeasureFn', 1, 'RealNumber'), [], [], 'Merge', 'UNITS OF MEASURE', 3268, 'Anonymous', on).
mooCache(domain('MeasureFn', 2, 'UnitOfMeasure'), domain('MeasureFn', 2, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3270, 'Anonymous', on).
mooCache(range('MeasureFn', 'ConstantQuantity'), range('MeasureFn', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3272, 'Anonymous', on).
mooCache(documentation('MeasureFn', string('"This BinaryFunction maps a RealNumber and   a UnitOfMeasure to that Number of units.  It is used for expressing   ConstantQuantities.  For example, the concept of three meters is   represented as (MeasureFn 3 Meter)."')), documentation('MeasureFn', string('"This BinaryFunction maps a RealNumber and   a UnitOfMeasure to that Number of units.  It is used for expressing   ConstantQuantities.  For example, the concept of three meters is   represented as (MeasureFn 3 Meter)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3274, 'Anonymous', on).
mooCache(equal('MeasureFn'(G21, H21), I21)and instance(H21, J21)and not equal(J21, 'UnitOfMeasure')=>instance(I21, J21), entails(holds('MeasureFn', G21, H21, I21)and instance(H21, J21)and not equal('UnitOfMeasure', J21), instance(I21, J21))and entails(not instance(I21, J21)and instance(H21, J21)and not equal('UnitOfMeasure', J21), not holds('MeasureFn', G21, H21, I21))and entails(not instance(I21, J21)and holds('MeasureFn', G21, H21, I21)and not equal('UnitOfMeasure', J21), not instance(H21, J21))and entails(not instance(I21, J21)and holds('MeasureFn', G21, H21, I21)and instance(H21, J21), equal('UnitOfMeasure', J21)), [domainV(J21, [instance:2]), domainV(I21, ['MeasureFn':3]), domainV(H21, ['MeasureFn':2]), domainV(G21, ['MeasureFn':1]), domainV(_G8336, []), forall(G21), forall(H21), forall(I21), forall(J21)], ['NUMBER'=G21, 'UNIT'=H21, 'QUANT'=I21, 'QUANTTYPE'=J21], 'Merge', 'UNITS OF MEASURE', 3276, 'Anonymous', on).
mooCache(instance(L24, 'RelationExtendedToQuantities')and instance(L24, 'BinaryFunction')and instance(M24, 'RealNumber')and instance(N24, 'RealNumber')and equal('AssignmentFn'(L24, M24, N24), O24)=>forall(P24, instance(P24, 'UnitOfMeasure')=>equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24))), entails(not equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24))and instance(L24, 'RelationExtendedToQuantities')and instance(L24, 'BinaryFunction')and instance(M24, 'RealNumber')and instance(N24, 'RealNumber')and holds(L24, M24, N24, O24), not instance(P24, 'UnitOfMeasure'))and entails(instance(P24, 'UnitOfMeasure')and instance(L24, 'RelationExtendedToQuantities')and instance(L24, 'BinaryFunction')and instance(M24, 'RealNumber')and instance(N24, 'RealNumber')and holds(L24, M24, N24, O24), equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24)))and entails((instance(P24, 'UnitOfMeasure')and not equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24)))and instance(L24, 'BinaryFunction')and instance(M24, 'RealNumber')and instance(N24, 'RealNumber')and holds(L24, M24, N24, O24), not instance(L24, 'RelationExtendedToQuantities'))and entails((instance(P24, 'UnitOfMeasure')and not equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24)))and instance(L24, 'RelationExtendedToQuantities')and instance(M24, 'RealNumber')and instance(N24, 'RealNumber')and holds(L24, M24, N24, O24), not instance(L24, 'BinaryFunction'))and entails((instance(P24, 'UnitOfMeasure')and not equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24)))and instance(L24, 'RelationExtendedToQuantities')and instance(L24, 'BinaryFunction')and instance(N24, 'RealNumber')and holds(L24, M24, N24, O24), not instance(M24, 'RealNumber'))and entails((instance(P24, 'UnitOfMeasure')and not equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24)))and instance(L24, 'RelationExtendedToQuantities')and instance(L24, 'BinaryFunction')and instance(M24, 'RealNumber')and holds(L24, M24, N24, O24), not instance(N24, 'RealNumber'))and entails((instance(P24, 'UnitOfMeasure')and not equal('AssignmentFn'(L24, 'MeasureFn'(M24, P24), 'MeasureFn'(N24, P24)), 'MeasureFn'(O24, P24)))and instance(L24, 'RelationExtendedToQuantities')and instance(L24, 'BinaryFunction')and instance(M24, 'RealNumber')and instance(N24, 'RealNumber'), not holds(L24, M24, N24, O24)), [domainV(P24, ['$instanceof':'UnitOfMeasure', 'MeasureFn':2]), domainV(O24, ['MeasureFn':1, L24:3]), domainV(N24, ['$instanceof':'RealNumber', 'MeasureFn':1, L24:2]), domainV(M24, ['$instanceof':'RealNumber', 'MeasureFn':1, L24:1]), domainV(L24, ['$instanceof':'BinaryFunction', '$instanceof':'RelationExtendedToQuantities', 'AssignmentFn':1, holds:1]), domainV(_G17387, []), forall(L24), forall(M24), forall(N24), forall(O24), forall(P24)], ['FUNCTION'=L24, 'NUMBER1'=M24, 'NUMBER2'=N24, 'VALUE'=O24, 'UNIT'=P24], 'Merge', 'UNITS OF MEASURE', 3278, 'Anonymous', on).
mooCache(instance(C28, 'RelationExtendedToQuantities')and instance(C28, 'BinaryRelation')and instance(D28, 'RealNumber')and instance(E28, 'RealNumber')and holds(C28, D28, E28)=>forall(F28, instance(F28, 'UnitOfMeasure')=>holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28))), entails(not holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28))and instance(C28, 'RelationExtendedToQuantities')and instance(C28, 'BinaryRelation')and instance(D28, 'RealNumber')and instance(E28, 'RealNumber')and holds(C28, D28, E28), not instance(F28, 'UnitOfMeasure'))and entails(instance(F28, 'UnitOfMeasure')and instance(C28, 'RelationExtendedToQuantities')and instance(C28, 'BinaryRelation')and instance(D28, 'RealNumber')and instance(E28, 'RealNumber')and holds(C28, D28, E28), holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28)))and entails((instance(F28, 'UnitOfMeasure')and not holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28)))and instance(C28, 'BinaryRelation')and instance(D28, 'RealNumber')and instance(E28, 'RealNumber')and holds(C28, D28, E28), not instance(C28, 'RelationExtendedToQuantities'))and entails((instance(F28, 'UnitOfMeasure')and not holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28)))and instance(C28, 'RelationExtendedToQuantities')and instance(D28, 'RealNumber')and instance(E28, 'RealNumber')and holds(C28, D28, E28), not instance(C28, 'BinaryRelation'))and entails((instance(F28, 'UnitOfMeasure')and not holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28)))and instance(C28, 'RelationExtendedToQuantities')and instance(C28, 'BinaryRelation')and instance(E28, 'RealNumber')and holds(C28, D28, E28), not instance(D28, 'RealNumber'))and entails((instance(F28, 'UnitOfMeasure')and not holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28)))and instance(C28, 'RelationExtendedToQuantities')and instance(C28, 'BinaryRelation')and instance(D28, 'RealNumber')and holds(C28, D28, E28), not instance(E28, 'RealNumber'))and entails((instance(F28, 'UnitOfMeasure')and not holds(C28, 'MeasureFn'(D28, F28), 'MeasureFn'(E28, F28)))and instance(C28, 'RelationExtendedToQuantities')and instance(C28, 'BinaryRelation')and instance(D28, 'RealNumber')and instance(E28, 'RealNumber'), not holds(C28, D28, E28)), [domainV(F28, ['$instanceof':'UnitOfMeasure', 'MeasureFn':2]), domainV(E28, ['$instanceof':'RealNumber', 'MeasureFn':1, C28:2]), domainV(D28, ['$instanceof':'RealNumber', 'MeasureFn':1, C28:1]), domainV(C28, ['$instanceof':'BinaryRelation', '$instanceof':'RelationExtendedToQuantities', holds:1]), domainV(_G14618, []), forall(C28), forall(D28), forall(E28), forall(F28)], ['REL'=C28, 'NUMBER1'=D28, 'NUMBER2'=E28, 'UNIT'=F28], 'Merge', 'UNITS OF MEASURE', 3280, 'Anonymous', on).
mooCache(instance('KiloFn', 'UnaryFunction'), instance('KiloFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3282, 'Anonymous', on).
mooCache(domain('KiloFn', 1, 'UnitOfMeasure'), domain('KiloFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3284, 'Anonymous', on).
mooCache(range('KiloFn', 'PhysicalQuantity'), range('KiloFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3286, 'Anonymous', on).
mooCache(documentation('KiloFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000 units of the UnitOfMeasure.  For example, (KiloFn Gram) is   1,000 Grams."')), documentation('KiloFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000 units of the UnitOfMeasure.  For example, (KiloFn Gram) is   1,000 Grams."')), [], [], 'Merge', 'UNITS OF MEASURE', 3288, 'Anonymous', on).
mooCache(equal('KiloFn'(R1), 'MeasureFn'(1000, R1)), equal('KiloFn'(R1), 'MeasureFn'(1000, R1)), [domainV(R1, ['KiloFn':1, 'MeasureFn':2]), domainV(_G3631, []), forall(R1)], ['UNIT'=R1], 'Merge', 'UNITS OF MEASURE', 3290, 'Anonymous', on).
mooCache(instance('MegaFn', 'UnaryFunction'), instance('MegaFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3292, 'Anonymous', on).
mooCache(domain('MegaFn', 1, 'UnitOfMeasure'), domain('MegaFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3294, 'Anonymous', on).
mooCache(range('MegaFn', 'PhysicalQuantity'), range('MegaFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3296, 'Anonymous', on).
mooCache(documentation('MegaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000 units of the UnitOfMeasure.  For example, (KiloFn Hertz)   is 1,000,000 Hertz."')), documentation('MegaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000 units of the UnitOfMeasure.  For example, (KiloFn Hertz)   is 1,000,000 Hertz."')), [], [], 'Merge', 'UNITS OF MEASURE', 3298, 'Anonymous', on).
mooCache(equal('MegaFn'(F12), 'MeasureFn'(1000000, F12)), equal('MegaFn'(F12), 'MeasureFn'(1000000, F12)), [domainV(F12, ['MeasureFn':2, 'MegaFn':1]), domainV(_G3793, []), forall(F12)], ['UNIT'=F12], 'Merge', 'UNITS OF MEASURE', 3300, 'Anonymous', on).
mooCache(instance('GigaFn', 'UnaryFunction'), instance('GigaFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3302, 'Anonymous', on).
mooCache(domain('GigaFn', 1, 'UnitOfMeasure'), domain('GigaFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3304, 'Anonymous', on).
mooCache(range('GigaFn', 'PhysicalQuantity'), range('GigaFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3306, 'Anonymous', on).
mooCache(documentation('GigaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000,000 units of the UnitOfMeasure.  For example, (GigaFn Hertz)   is 1,000,000,000 Hertz."')), documentation('GigaFn', string('"A UnaryFunction that maps a UnitOfMeasure into   1,000,000,000 units of the UnitOfMeasure.  For example, (GigaFn Hertz)   is 1,000,000,000 Hertz."')), [], [], 'Merge', 'UNITS OF MEASURE', 3308, 'Anonymous', on).
mooCache(equal('GigaFn'(O22), 'MeasureFn'(1000000000, O22)), equal('GigaFn'(O22), 'MeasureFn'(1000000000, O22)), [domainV(O22, ['GigaFn':1, 'MeasureFn':2]), domainV(_G3958, []), forall(O22)], ['UNIT'=O22], 'Merge', 'UNITS OF MEASURE', 3310, 'Anonymous', on).
mooCache(instance('TeraFn', 'UnaryFunction'), instance('TeraFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3312, 'Anonymous', on).
mooCache(domain('TeraFn', 1, 'UnitOfMeasure'), domain('TeraFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3314, 'Anonymous', on).
mooCache(range('TeraFn', 'PhysicalQuantity'), range('TeraFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3316, 'Anonymous', on).
mooCache(documentation('TeraFn', string('"A UnaryFunction that maps a UnitOfMeasure   into 1,000,000,000,000 units of the UnitOfMeasure.  For example,   (TeraFn Hertz) is 1,000,000,000,000 Hertz."')), documentation('TeraFn', string('"A UnaryFunction that maps a UnitOfMeasure   into 1,000,000,000,000 units of the UnitOfMeasure.  For example,   (TeraFn Hertz) is 1,000,000,000,000 Hertz."')), [], [], 'Merge', 'UNITS OF MEASURE', 3318, 'Anonymous', on).
mooCache(equal('TeraFn'(Y32), 'MeasureFn'(1e+12, Y32)), equal('TeraFn'(Y32), 'MeasureFn'(1e+12, Y32)), [domainV(Y32, ['MeasureFn':2, 'TeraFn':1]), domainV(_G4121, []), forall(Y32)], ['UNIT'=Y32], 'Merge', 'UNITS OF MEASURE', 3320, 'Anonymous', on).
mooCache(instance('MilliFn', 'UnaryFunction'), instance('MilliFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3322, 'Anonymous', on).
mooCache(domain('MilliFn', 1, 'UnitOfMeasure'), domain('MilliFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3324, 'Anonymous', on).
mooCache(range('MilliFn', 'PhysicalQuantity'), range('MilliFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3326, 'Anonymous', on).
mooCache(documentation('MilliFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .001 units of the UnitOfMeasure.  For example, (MilliFn Ampere) is   .001 Amperes."')), documentation('MilliFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .001 units of the UnitOfMeasure.  For example, (MilliFn Ampere) is   .001 Amperes."')), [], [], 'Merge', 'UNITS OF MEASURE', 3328, 'Anonymous', on).
mooCache(equal('MilliFn'(W4), 'MeasureFn'(0.001, W4)), equal('MilliFn'(W4), 'MeasureFn'(0.001, W4)), [domainV(W4, ['MeasureFn':2, 'MilliFn':1]), domainV(_G4559, []), forall(W4)], ['UNIT'=W4], 'Merge', 'UNITS OF MEASURE', 3330, 'Anonymous', on).
mooCache(instance('MicroFn', 'UnaryFunction'), instance('MicroFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3332, 'Anonymous', on).
mooCache(domain('MicroFn', 1, 'UnitOfMeasure'), domain('MicroFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3334, 'Anonymous', on).
mooCache(range('MicroFn', 'PhysicalQuantity'), range('MicroFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3336, 'Anonymous', on).
mooCache(documentation('MicroFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000001 units of the UnitOfMeasure.  For example, (MicroFn Meter) is   .000001 Meters."')), documentation('MicroFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000001 units of the UnitOfMeasure.  For example, (MicroFn Meter) is   .000001 Meters."')), [], [], 'Merge', 'UNITS OF MEASURE', 3338, 'Anonymous', on).
mooCache(equal('MicroFn'(K15), 'MeasureFn'(1e-06, K15)), equal('MicroFn'(K15), 'MeasureFn'(1e-06, K15)), [domainV(K15, ['MeasureFn':2, 'MicroFn':1]), domainV(_G4505, []), forall(K15)], ['UNIT'=K15], 'Merge', 'UNITS OF MEASURE', 3340, 'Anonymous', on).
mooCache(instance('NanoFn', 'UnaryFunction'), instance('NanoFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3342, 'Anonymous', on).
mooCache(domain('NanoFn', 1, 'UnitOfMeasure'), domain('NanoFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3344, 'Anonymous', on).
mooCache(range('NanoFn', 'PhysicalQuantity'), range('NanoFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3346, 'Anonymous', on).
mooCache(documentation('NanoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000001 units of the UnitOfMeasure.  For example, (MicroFn SecondDuration)   is .000000001 SecondDurations."')), documentation('NanoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000001 units of the UnitOfMeasure.  For example, (MicroFn SecondDuration)   is .000000001 SecondDurations."')), [], [], 'Merge', 'UNITS OF MEASURE', 3348, 'Anonymous', on).
mooCache(equal('NanoFn'(S25), 'MeasureFn'(1e-09, S25)), equal('NanoFn'(S25), 'MeasureFn'(1e-09, S25)), [domainV(S25, ['MeasureFn':2, 'NanoFn':1]), domainV(_G4553, []), forall(S25)], ['UNIT'=S25], 'Merge', 'UNITS OF MEASURE', 3350, 'Anonymous', on).
mooCache(instance('PicoFn', 'UnaryFunction'), instance('PicoFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3352, 'Anonymous', on).
mooCache(domain('PicoFn', 1, 'UnitOfMeasure'), domain('PicoFn', 1, 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3354, 'Anonymous', on).
mooCache(range('PicoFn', 'PhysicalQuantity'), range('PicoFn', 'PhysicalQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3356, 'Anonymous', on).
mooCache(documentation('PicoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000000001 units of the UnitOfMeasure.  For example, (PicoFn   Ampere) is .000000000001 Amperes."')), documentation('PicoFn', string('"A UnaryFunction that maps a UnitOfMeasure into   .000000000001 units of the UnitOfMeasure.  For example, (PicoFn   Ampere) is .000000000001 Amperes."')), [], [], 'Merge', 'UNITS OF MEASURE', 3358, 'Anonymous', on).
mooCache(equal('PicoFn'(Z35), 'MeasureFn'(1e-12, Z35)), equal('PicoFn'(Z35), 'MeasureFn'(1e-12, Z35)), [domainV(Z35, ['MeasureFn':2, 'PicoFn':1]), domainV(_G4553, []), forall(Z35)], ['UNIT'=Z35], 'Merge', 'UNITS OF MEASURE', 3360, 'Anonymous', on).
mooCache(instance('IntervalFn', 'BinaryFunction'), instance('IntervalFn', 'BinaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3362, 'Anonymous', on).
mooCache(domain('IntervalFn', 1, 'ConstantQuantity'), domain('IntervalFn', 1, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3364, 'Anonymous', on).
mooCache(domain('IntervalFn', 2, 'ConstantQuantity'), domain('IntervalFn', 2, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3366, 'Anonymous', on).
mooCache(range('IntervalFn', 'ConstantQuantity'), range('IntervalFn', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3368, 'Anonymous', on).
mooCache(documentation('IntervalFn', string('"A BinaryFunction that maps two ConstantQuantities   to the ConstantQuantity that is an interval from the first ConstantQuantity   to the second ConstantQuantity.  For example, (IntervalFn (MeasureFn 6 Hour)   (MeasureFn 12 Hour)) would return the TimeInterval which begins at 6 in the   morning and ends at 12 noon.  For a slightly different example, (IntervalFn   (MeasureFn 8 Meter) (MeasureFn 14 Meter)) would return the ConstantQuantity   of being between 8 and 14 meters in length."')), documentation('IntervalFn', string('"A BinaryFunction that maps two ConstantQuantities   to the ConstantQuantity that is an interval from the first ConstantQuantity   to the second ConstantQuantity.  For example, (IntervalFn (MeasureFn 6 Hour)   (MeasureFn 12 Hour)) would return the TimeInterval which begins at 6 in the   morning and ends at 12 noon.  For a slightly different example, (IntervalFn   (MeasureFn 8 Meter) (MeasureFn 14 Meter)) would return the ConstantQuantity   of being between 8 and 14 meters in length."')), [], [], 'Merge', 'UNITS OF MEASURE', 3370, 'Anonymous', on).
mooCache(instance('MagnitudeFn', 'UnaryFunction'), instance('MagnitudeFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3372, 'Anonymous', on).
mooCache(domain('MagnitudeFn', 1, 'ConstantQuantity'), domain('MagnitudeFn', 1, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3374, 'Anonymous', on).
mooCache(range('MagnitudeFn', 'RealNumber'), range('MagnitudeFn', 'RealNumber'), [], [], 'Merge', 'UNITS OF MEASURE', 3376, 'Anonymous', on).
mooCache(documentation('MagnitudeFn', string('"The magnitude of a ConstantQuantity is the   numeric value for the quantity.  In other words, MagnitudeFn converts   a ConstantQuantity with an associated UnitOfMeasure into an ordinary   RealNumber.  For example, the magnitude of the ConstantQuantity 2   Kilometers is the RealNumber 2.   Note that the magnitude of a   quantity in a given unit times that unit is equal to the original   quantity."')), documentation('MagnitudeFn', string('"The magnitude of a ConstantQuantity is the   numeric value for the quantity.  In other words, MagnitudeFn converts   a ConstantQuantity with an associated UnitOfMeasure into an ordinary   RealNumber.  For example, the magnitude of the ConstantQuantity 2   Kilometers is the RealNumber 2.   Note that the magnitude of a   quantity in a given unit times that unit is equal to the original   quantity."')), [], [], 'Merge', 'UNITS OF MEASURE', 3378, 'Anonymous', on).
mooCache(equal('MagnitudeFn'('MeasureFn'(D18, E18)), D18), holds('MagnitudeFn', 'MeasureFn'(D18, E18), D18), [domainV(E18, ['MeasureFn':2]), domainV(D18, ['MagnitudeFn':2, 'MeasureFn':1]), domainV(_G3838, []), forall(D18), forall(E18)], ['NUMBER'=D18, 'UNIT'=E18], 'Merge', 'UNITS OF MEASURE', 3380, 'Anonymous', on).
mooCache(instance('DensityFn', 'BinaryFunction'), instance('DensityFn', 'BinaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 3382, 'Anonymous', on).
mooCache(domain('DensityFn', 1, 'MassMeasure'), domain('DensityFn', 1, 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3384, 'Anonymous', on).
mooCache(domain('DensityFn', 2, 'VolumeMeasure'), domain('DensityFn', 2, 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3386, 'Anonymous', on).
mooCache(range('DensityFn', 'FunctionQuantity'), range('DensityFn', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3388, 'Anonymous', on).
mooCache(documentation('DensityFn', string('"A very general FunctionQuantity.  DensityFn   maps an instance of MassMeasure and an instance of VolumeMeasure to   the density represented by this combination of mass and volume.  For   example, (DensityFn (MeasureFn 3 Gram) (MeasureFn 1 Liter))   represents the density of 3 grams per liter."')), documentation('DensityFn', string('"A very general FunctionQuantity.  DensityFn   maps an instance of MassMeasure and an instance of VolumeMeasure to   the density represented by this combination of mass and volume.  For   example, (DensityFn (MeasureFn 3 Gram) (MeasureFn 1 Liter))   represents the density of 3 grams per liter."')), [], [], 'Merge', 'UNITS OF MEASURE', 3390, 'Anonymous', on).
mooCache(instance('Meter', 'LengthMeasure'), instance('Meter', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3400, 'Anonymous', on).
mooCache(instance('Meter', 'SystemeInternationalUnit'), instance('Meter', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3402, 'Anonymous', on).
mooCache(documentation('Meter', string('"SI LengthMeasure.  Symbol:  m. It is one of the  base units in SI, and it is currently defined as follows: the Meter   is the length of the path traveled by light in a vacuum during a time   interval of 1/299792458 of a SecondDuration."')), documentation('Meter', string('"SI LengthMeasure.  Symbol:  m. It is one of the  base units in SI, and it is currently defined as follows: the Meter   is the length of the path traveled by light in a vacuum during a time   interval of 1/299792458 of a SecondDuration."')), [], [], 'Merge', 'UNITS OF MEASURE', 3404, 'Anonymous', on).
mooCache(instance('Gram', 'MassMeasure'), instance('Gram', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3408, 'Anonymous', on).
mooCache(instance('Gram', 'SystemeInternationalUnit'), instance('Gram', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3410, 'Anonymous', on).
mooCache(documentation('Gram', string('"Submultiple of kilogram.  Symbol: g.   1 kilogram = 1000 Grams."')), documentation('Gram', string('"Submultiple of kilogram.  Symbol: g.   1 kilogram = 1000 Grams."')), [], [], 'Merge', 'UNITS OF MEASURE', 3412, 'Anonymous', on).
mooCache(instance('SecondDuration', 'TimeDuration'), instance('SecondDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3416, 'Anonymous', on).
mooCache(instance('SecondDuration', 'SystemeInternationalUnit'), instance('SecondDuration', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3418, 'Anonymous', on).
mooCache(documentation('SecondDuration', string('"SI TimeDuration.  Symbol: s.   It is one of the base units in SI, and it is currently defined as   follows: the SecondDuration is the duration of 9192631770 periods of   the radiation corresponding to the transition between the two hyperfine   levels of the ground state of the cesium 133 atom."')), documentation('SecondDuration', string('"SI TimeDuration.  Symbol: s.   It is one of the base units in SI, and it is currently defined as   follows: the SecondDuration is the duration of 9192631770 periods of   the radiation corresponding to the transition between the two hyperfine   levels of the ground state of the cesium 133 atom."')), [], [], 'Merge', 'UNITS OF MEASURE', 3420, 'Anonymous', on).
mooCache(instance('Ampere', 'FunctionQuantity'), instance('Ampere', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3424, 'Anonymous', on).
mooCache(instance('Ampere', 'SystemeInternationalUnit'), instance('Ampere', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3426, 'Anonymous', on).
mooCache(documentation('Ampere', string('"SI electric current measure.  Symbol: A. It is   one of the base units in SI. It is defined as follows: the Ampere is   that constant current which, if maintained in two straight parallel   conductors of infinite length, of negligible circular cross-section, and   placed 1 Meter apart in a vacuum, would produce between these conductors   a force equal to 2*10^(-7) Newton per Meter of length."')), documentation('Ampere', string('"SI electric current measure.  Symbol: A. It is   one of the base units in SI. It is defined as follows: the Ampere is   that constant current which, if maintained in two straight parallel   conductors of infinite length, of negligible circular cross-section, and   placed 1 Meter apart in a vacuum, would produce between these conductors   a force equal to 2*10^(-7) Newton per Meter of length."')), [], [], 'Merge', 'UNITS OF MEASURE', 3428, 'Anonymous', on).
mooCache(instance('Kelvin', 'TemperatureMeasure'), instance('Kelvin', 'TemperatureMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3432, 'Anonymous', on).
mooCache(instance('Kelvin', 'SystemeInternationalUnit'), instance('Kelvin', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3434, 'Anonymous', on).
mooCache(documentation('Kelvin', string('"SI TemperatureMeasure.  Symbol: K.   It is one of the base units in SI (it is also a unit in the ITS system).   It is defined as follows: the Kelvin is the fraction 1/273.16 of the   thermodynamic temperature of the triple point of water."')), documentation('Kelvin', string('"SI TemperatureMeasure.  Symbol: K.   It is one of the base units in SI (it is also a unit in the ITS system).   It is defined as follows: the Kelvin is the fraction 1/273.16 of the   thermodynamic temperature of the triple point of water."')), [], [], 'Merge', 'UNITS OF MEASURE', 3436, 'Anonymous', on).
mooCache(instance('Mole', 'ConstantQuantity'), instance('Mole', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3440, 'Anonymous', on).
mooCache(instance('Mole', 'SystemeInternationalUnit'), instance('Mole', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3442, 'Anonymous', on).
mooCache(documentation('Mole', string('"SI amount of substance unit. symbol: mol. It is one   of the base units in SI. It is defined as follows:  the Mole is the   amount of substance of a system which contains as many elementary entities   as there are atoms in 0.012 Kilograms of carbon 12.  Note that, when this   UnitOfMeasure is used, the elementary entities must be specified - they   may be atoms, molecules, ions, electrons, etc. or groups of such   particles."')), documentation('Mole', string('"SI amount of substance unit. symbol: mol. It is one   of the base units in SI. It is defined as follows:  the Mole is the   amount of substance of a system which contains as many elementary entities   as there are atoms in 0.012 Kilograms of carbon 12.  Note that, when this   UnitOfMeasure is used, the elementary entities must be specified - they   may be atoms, molecules, ions, electrons, etc. or groups of such   particles."')), [], [], 'Merge', 'UNITS OF MEASURE', 3444, 'Anonymous', on).
mooCache(instance('Candela', 'FunctionQuantity'), instance('Candela', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3448, 'Anonymous', on).
mooCache(instance('Candela', 'SystemeInternationalUnit'), instance('Candela', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3450, 'Anonymous', on).
mooCache(documentation('Candela', string('"SI luminosity intensity measure.  Symbol: cd.   It is one of the base units in SI, and it is currently defined as   follows:  the Candela is the luminous intensity, in a given direction,   of a source that emits monochromatic radiation of frequency 540*10^12   Hertz and that has a radiant intensity in that direction of 1/683   Watt per Steradian."')), documentation('Candela', string('"SI luminosity intensity measure.  Symbol: cd.   It is one of the base units in SI, and it is currently defined as   follows:  the Candela is the luminous intensity, in a given direction,   of a source that emits monochromatic radiation of frequency 540*10^12   Hertz and that has a radiant intensity in that direction of 1/683   Watt per Steradian."')), [], [], 'Merge', 'UNITS OF MEASURE', 3452, 'Anonymous', on).
mooCache(instance('Liter', 'VolumeMeasure'), instance('Liter', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3454, 'Anonymous', on).
mooCache(instance('Liter', 'UnitOfMeasure'), instance('Liter', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3456, 'Anonymous', on).
mooCache(documentation('Liter', string('"Unit of volume in the metric system.  It is currently   defined to be equal to one cubic decimeter (0.001 cubic meter).  Symbol: l."')), documentation('Liter', string('"Unit of volume in the metric system.  It is currently   defined to be equal to one cubic decimeter (0.001 cubic meter).  Symbol: l."')), [], [], 'Merge', 'UNITS OF MEASURE', 3458, 'Anonymous', on).
mooCache(instance('Centimeter', 'LengthMeasure'), instance('Centimeter', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3460, 'Anonymous', on).
mooCache(instance('Centimeter', 'UnitOfMeasure'), instance('Centimeter', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3462, 'Anonymous', on).
mooCache(documentation('Centimeter', string('"Submultiple of Meter.  Symbol: cm. It is   the 100th part of a Meter"')), documentation('Centimeter', string('"Submultiple of Meter.  Symbol: cm. It is   the 100th part of a Meter"')), [], [], 'Merge', 'UNITS OF MEASURE', 3464, 'Anonymous', on).
mooCache(equal('MeasureFn'(S12, 'Centimeter'), 'MeasureFn'('MultiplicationFn'(S12, 0.01), 'Meter')), equal('MeasureFn'(S12, 'Centimeter'), 'MeasureFn'('MultiplicationFn'(S12, 0.01), 'Meter')), [domainV(S12, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5238, []), forall(S12)], ['NUMBER'=S12], 'Merge', 'UNITS OF MEASURE', 3466, 'Anonymous', on).
mooCache(instance('Radian', 'PlaneAngleMeasure'), instance('Radian', 'PlaneAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3476, 'Anonymous', on).
mooCache(instance('Radian', 'SystemeInternationalUnit'), instance('Radian', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3478, 'Anonymous', on).
mooCache(documentation('Radian', string('"SI plane angle measure.  Symbol: rad.  It is the   angle of a circle subtended by an arc equal in length to the circle\'s   radius. Another definition is:  the plane angle between two radii of a   circle which cut off on the circumference an arc equal in length to the   radius.  Radian = m/m = 1."')), documentation('Radian', string('"SI plane angle measure.  Symbol: rad.  It is the   angle of a circle subtended by an arc equal in length to the circle\'s   radius. Another definition is:  the plane angle between two radii of a   circle which cut off on the circumference an arc equal in length to the   radius.  Radian = m/m = 1."')), [], [], 'Merge', 'UNITS OF MEASURE', 3480, 'Anonymous', on).
mooCache(instance('Steradian', 'SolidAngleMeasure'), instance('Steradian', 'SolidAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3484, 'Anonymous', on).
mooCache(instance('Steradian', 'SystemeInternationalUnit'), instance('Steradian', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3486, 'Anonymous', on).
mooCache(documentation('Steradian', string('"SI solid angle measure.  Symbol: sr.  It is   the solid angle of a sphere subtended by a portion of the surface whose   area is equal to the square of the sphere\'s radius.  Another definition   is: the solid angle which, having its vertex in the center of the sphere,   cuts off an area of the surface of the sphere equal to that of a square   with sides of length equal to the radius of the sphere.  Steradian =   m^2/m^2 = 1."')), documentation('Steradian', string('"SI solid angle measure.  Symbol: sr.  It is   the solid angle of a sphere subtended by a portion of the surface whose   area is equal to the square of the sphere\'s radius.  Another definition   is: the solid angle which, having its vertex in the center of the sphere,   cuts off an area of the surface of the sphere equal to that of a square   with sides of length equal to the radius of the sphere.  Steradian =   m^2/m^2 = 1."')), [], [], 'Merge', 'UNITS OF MEASURE', 3488, 'Anonymous', on).
mooCache(instance('Hertz', 'TimeDependentQuantity'), instance('Hertz', 'TimeDependentQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3492, 'Anonymous', on).
mooCache(instance('Hertz', 'SystemeInternationalUnit'), instance('Hertz', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3494, 'Anonymous', on).
mooCache(documentation('Hertz', string('"SI frequency measure.  Symbol: Hz. It is the   number of cycles per second.  Hertz = s^(-1).  Note that Hertz   does not have a conversion function."')), documentation('Hertz', string('"SI frequency measure.  Symbol: Hz. It is the   number of cycles per second.  Hertz = s^(-1).  Note that Hertz   does not have a conversion function."')), [], [], 'Merge', 'UNITS OF MEASURE', 3496, 'Anonymous', on).
mooCache(instance('Newton', 'FunctionQuantity'), instance('Newton', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3500, 'Anonymous', on).
mooCache(instance('Newton', 'SystemeInternationalUnit'), instance('Newton', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3502, 'Anonymous', on).
mooCache(documentation('Newton', string('"SI force measure.  Symbol: N. It is that force   which gives to a mass of 1 kilogram an acceleration of 1 Meter per   SecondDuration.  Newton = m*kg*s^(-2)."')), documentation('Newton', string('"SI force measure.  Symbol: N. It is that force   which gives to a mass of 1 kilogram an acceleration of 1 Meter per   SecondDuration.  Newton = m*kg*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3504, 'Anonymous', on).
mooCache(instance('Pascal', 'FunctionQuantity'), instance('Pascal', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3508, 'Anonymous', on).
mooCache(instance('Pascal', 'SystemeInternationalUnit'), instance('Pascal', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3510, 'Anonymous', on).
mooCache(documentation('Pascal', string('"SI pressure measure.  Symbol:Pa. It is the   pressure of one Newton per square Meter.  Pascal = N/m^2   = m^(-1)*kg*s^(-2)."')), documentation('Pascal', string('"SI pressure measure.  Symbol:Pa. It is the   pressure of one Newton per square Meter.  Pascal = N/m^2   = m^(-1)*kg*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3512, 'Anonymous', on).
mooCache(instance('Joule', 'FunctionQuantity'), instance('Joule', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3516, 'Anonymous', on).
mooCache(instance('Joule', 'SystemeInternationalUnit'), instance('Joule', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3518, 'Anonymous', on).
mooCache(documentation('Joule', string('"SI energy measure.  Symbol: J.  It is the work   done when the point of application of 1 Newton is displaced a distance   of 1 Meter in the direction of the force.  Joule = N*m =   m^2*kg*s^(-2)."')), documentation('Joule', string('"SI energy measure.  Symbol: J.  It is the work   done when the point of application of 1 Newton is displaced a distance   of 1 Meter in the direction of the force.  Joule = N*m =   m^2*kg*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3520, 'Anonymous', on).
mooCache(instance('Watt', 'FunctionQuantity'), instance('Watt', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3524, 'Anonymous', on).
mooCache(instance('Watt', 'SystemeInternationalUnit'), instance('Watt', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3526, 'Anonymous', on).
mooCache(documentation('Watt', string('"SI power measure.  Aymbol: W.  A UnitOfMeasure   that measures power, i.e. energy produced or expended divided by   TimeDuration. It is the power which gives rise to the production   of energy (or work) at the rate of one Joule per SecondDuration.    Watt = J/s = m^2*kg*s^(-3)."')), documentation('Watt', string('"SI power measure.  Aymbol: W.  A UnitOfMeasure   that measures power, i.e. energy produced or expended divided by   TimeDuration. It is the power which gives rise to the production   of energy (or work) at the rate of one Joule per SecondDuration.    Watt = J/s = m^2*kg*s^(-3)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3528, 'Anonymous', on).
mooCache(instance('Coulomb', 'TimeDependentQuantity'), instance('Coulomb', 'TimeDependentQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3534, 'Anonymous', on).
mooCache(instance('Coulomb', 'SystemeInternationalUnit'), instance('Coulomb', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3536, 'Anonymous', on).
mooCache(documentation('Coulomb', string('"SI electric charge measure.  Symbol: C. It is   the quantity of electric charge transported through a cross section of   a conductor in an electric circuit during each SecondDuration by a   current of 1 Ampere.  Coulomb = s*A."')), documentation('Coulomb', string('"SI electric charge measure.  Symbol: C. It is   the quantity of electric charge transported through a cross section of   a conductor in an electric circuit during each SecondDuration by a   current of 1 Ampere.  Coulomb = s*A."')), [], [], 'Merge', 'UNITS OF MEASURE', 3538, 'Anonymous', on).
mooCache(instance('Volt', 'FunctionQuantity'), instance('Volt', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3542, 'Anonymous', on).
mooCache(instance('Volt', 'SystemeInternationalUnit'), instance('Volt', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3544, 'Anonymous', on).
mooCache(documentation('Volt', string('"SI electric potential measure.  Symbol: V.  It is   the difference of electric potential between two points of a conducting   wire carrying a constant current of 1 Ampere, when the power dissipated   between these points is equal to 1 Watt.  Volt = W/A =   m^2*kg*s^(-3)*A^(-1)."')), documentation('Volt', string('"SI electric potential measure.  Symbol: V.  It is   the difference of electric potential between two points of a conducting   wire carrying a constant current of 1 Ampere, when the power dissipated   between these points is equal to 1 Watt.  Volt = W/A =   m^2*kg*s^(-3)*A^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3546, 'Anonymous', on).
mooCache(instance('Farad', 'FunctionQuantity'), instance('Farad', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3550, 'Anonymous', on).
mooCache(instance('Farad', 'SystemeInternationalUnit'), instance('Farad', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3552, 'Anonymous', on).
mooCache(documentation('Farad', string('"SI capacitance measure.  Symbol: F.  It is the   capacitance of a capacitator between the plates of which there appears   a difference of potential of 1 Volt when it is charged by a quantity   of electricity equal to 1 Coulomb.  Farad = C/V =   m^(-2)*kg(-1)*s^4*A^2."')), documentation('Farad', string('"SI capacitance measure.  Symbol: F.  It is the   capacitance of a capacitator between the plates of which there appears   a difference of potential of 1 Volt when it is charged by a quantity   of electricity equal to 1 Coulomb.  Farad = C/V =   m^(-2)*kg(-1)*s^4*A^2."')), [], [], 'Merge', 'UNITS OF MEASURE', 3554, 'Anonymous', on).
mooCache(instance('Ohm', 'FunctionQuantity'), instance('Ohm', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3558, 'Anonymous', on).
mooCache(instance('Ohm', 'SystemeInternationalUnit'), instance('Ohm', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3560, 'Anonymous', on).
mooCache(documentation('Ohm', string('"SI electric resistance measure. It is the electric  resistance between two points of a conductor when a constant difference   of potential of 1 Volt, applied between these two points,  produces in this conductor a current of 1 Ampere, this conductor not  being the force of any electromotive force.  Ohm = V/A =   m^2*kg*s^(-3)*A^(-2)."')), documentation('Ohm', string('"SI electric resistance measure. It is the electric  resistance between two points of a conductor when a constant difference   of potential of 1 Volt, applied between these two points,  produces in this conductor a current of 1 Ampere, this conductor not  being the force of any electromotive force.  Ohm = V/A =   m^2*kg*s^(-3)*A^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3562, 'Anonymous', on).
mooCache(instance('Siemens', 'FunctionQuantity'), instance('Siemens', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3566, 'Anonymous', on).
mooCache(instance('Siemens', 'SystemeInternationalUnit'), instance('Siemens', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3568, 'Anonymous', on).
mooCache(documentation('Siemens', string('"SI electric conductance measure.  Symbol:  S.    In the case of direct current, the conductance in Siemens is the   reciprocal of the resistance in Ohms; in the case of alternating current,   it is the reciprocal of the impedance in ohms.  siemens = A/V =   m^(-2)*kg(-1)*s^(3)*A^2."')), documentation('Siemens', string('"SI electric conductance measure.  Symbol:  S.    In the case of direct current, the conductance in Siemens is the   reciprocal of the resistance in Ohms; in the case of alternating current,   it is the reciprocal of the impedance in ohms.  siemens = A/V =   m^(-2)*kg(-1)*s^(3)*A^2."')), [], [], 'Merge', 'UNITS OF MEASURE', 3570, 'Anonymous', on).
mooCache(instance('Weber', 'FunctionQuantity'), instance('Weber', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3574, 'Anonymous', on).
mooCache(instance('Weber', 'SystemeInternationalUnit'), instance('Weber', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3576, 'Anonymous', on).
mooCache(documentation('Weber', string('"SI magnetic flux measure.  Symbol: Wb. It is the   magnetic flux which, linking a circuit of one turn, produces in it an  electromotive force of 1 Volt as it is reduced to zero at a uniform  rate in 1 SecondDuration.  Weber = V*s = m^2*kg*s^(-2)*A^(-1)."')), documentation('Weber', string('"SI magnetic flux measure.  Symbol: Wb. It is the   magnetic flux which, linking a circuit of one turn, produces in it an  electromotive force of 1 Volt as it is reduced to zero at a uniform  rate in 1 SecondDuration.  Weber = V*s = m^2*kg*s^(-2)*A^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3578, 'Anonymous', on).
mooCache(instance('Tesla', 'FunctionQuantity'), instance('Tesla', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3582, 'Anonymous', on).
mooCache(instance('Tesla', 'SystemeInternationalUnit'), instance('Tesla', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3584, 'Anonymous', on).
mooCache(documentation('Tesla', string('"SI magnetic flux density measure.  Symbol:  T.  One Tesla equals one Weber per square Meter.  Tesla = Wb/m^2 =   kg*s^(-2)*A^(-1)."')), documentation('Tesla', string('"SI magnetic flux density measure.  Symbol:  T.  One Tesla equals one Weber per square Meter.  Tesla = Wb/m^2 =   kg*s^(-2)*A^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3586, 'Anonymous', on).
mooCache(instance('Henry', 'FunctionQuantity'), instance('Henry', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3590, 'Anonymous', on).
mooCache(instance('Henry', 'SystemeInternationalUnit'), instance('Henry', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3592, 'Anonymous', on).
mooCache(documentation('Henry', string('"SI inductance measure.  Symbol: H.  One Henry   is equivalent to one Volt divided by one Ampere per SecondDuration.   If a current changing at the rate of one Ampere per SecondDuration   induces an electromotive force of one Volt, the circuit has an   inductance of one Henry.  Henry = Wb/A = m^2*kg*s^(-2)*A^(-2)."')), documentation('Henry', string('"SI inductance measure.  Symbol: H.  One Henry   is equivalent to one Volt divided by one Ampere per SecondDuration.   If a current changing at the rate of one Ampere per SecondDuration   induces an electromotive force of one Volt, the circuit has an   inductance of one Henry.  Henry = Wb/A = m^2*kg*s^(-2)*A^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3594, 'Anonymous', on).
mooCache(instance('Celsius', 'TemperatureMeasure'), instance('Celsius', 'TemperatureMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3598, 'Anonymous', on).
mooCache(instance('Celsius', 'SystemeInternationalUnit'), instance('Celsius', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3600, 'Anonymous', on).
mooCache(documentation('Celsius', string('"A TemperatureMeasure.  Kelvin differs from   the Celsius scale in that the triple point of water is defined to be   273.16 degrees Kelvin while it is 0 degrees Celsius. The boiling point   of water is 100 degrees Celsius.  The magnitudes of intervals in the two   scales are the same.  By definition the conversion constant is 273.15"')), documentation('Celsius', string('"A TemperatureMeasure.  Kelvin differs from   the Celsius scale in that the triple point of water is defined to be   273.16 degrees Kelvin while it is 0 degrees Celsius. The boiling point   of water is 100 degrees Celsius.  The magnitudes of intervals in the two   scales are the same.  By definition the conversion constant is 273.15"')), [], [], 'Merge', 'UNITS OF MEASURE', 3602, 'Anonymous', on).
mooCache(equal('MeasureFn'(H35, 'Celsius'), 'MeasureFn'('SubtractionFn'(H35, 273.15), 'Kelvin')), equal('MeasureFn'(H35, 'Celsius'), 'MeasureFn'('SubtractionFn'(H35, 273.15), 'Kelvin')), [domainV(H35, ['MeasureFn':1, 'SubtractionFn':1]), domainV(_G5046, []), forall(H35)], ['NUMBER'=H35], 'Merge', 'UNITS OF MEASURE', 3604, 'Anonymous', on).
mooCache(instance('Lumen', 'FunctionQuantity'), instance('Lumen', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3608, 'Anonymous', on).
mooCache(instance('Lumen', 'SystemeInternationalUnit'), instance('Lumen', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3610, 'Anonymous', on).
mooCache(documentation('Lumen', string('"SI luminous flux measure.  Symbol: lm.  It is the   amount streaming outward through one solid angle of 1 Steradian from a   uniform point source having an intensity of one Candela.  Lumen =   cd*sr = cd * 1."')), documentation('Lumen', string('"SI luminous flux measure.  Symbol: lm.  It is the   amount streaming outward through one solid angle of 1 Steradian from a   uniform point source having an intensity of one Candela.  Lumen =   cd*sr = cd * 1."')), [], [], 'Merge', 'UNITS OF MEASURE', 3612, 'Anonymous', on).
mooCache(instance('Lux', 'FunctionQuantity'), instance('Lux', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3616, 'Anonymous', on).
mooCache(instance('Lux', 'SystemeInternationalUnit'), instance('Lux', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3618, 'Anonymous', on).
mooCache(documentation('Lux', string('"SI illuminance measure.  Symbol: lx.  It is the   amount of illumination provided when one Lumen is evenly distributed   over an area of 1 square Meter. This is also equivalent to the   illumination that would exist on a surface all points of which are one   Meter from a point source of one Candela.  Lux = lm/m^2 =   m^(-2)*cd."')), documentation('Lux', string('"SI illuminance measure.  Symbol: lx.  It is the   amount of illumination provided when one Lumen is evenly distributed   over an area of 1 square Meter. This is also equivalent to the   illumination that would exist on a surface all points of which are one   Meter from a point source of one Candela.  Lux = lm/m^2 =   m^(-2)*cd."')), [], [], 'Merge', 'UNITS OF MEASURE', 3620, 'Anonymous', on).
mooCache(instance('Becquerel', 'TimeDependentQuantity'), instance('Becquerel', 'TimeDependentQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3624, 'Anonymous', on).
mooCache(instance('Becquerel', 'SystemeInternationalUnit'), instance('Becquerel', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3626, 'Anonymous', on).
mooCache(documentation('Becquerel', string('"SI activity measure.  Symbol: Bq.  It measures   the amount of radioactivity contained in a given sample of matter. It is   that quantity of a radioactive element in which there is one atomic   disintegration per SecondDuration.  Becquerel = s^(-1)."')), documentation('Becquerel', string('"SI activity measure.  Symbol: Bq.  It measures   the amount of radioactivity contained in a given sample of matter. It is   that quantity of a radioactive element in which there is one atomic   disintegration per SecondDuration.  Becquerel = s^(-1)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3628, 'Anonymous', on).
mooCache(instance('Gray', 'FunctionQuantity'), instance('Gray', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3632, 'Anonymous', on).
mooCache(instance('Gray', 'SystemeInternationalUnit'), instance('Gray', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3634, 'Anonymous', on).
mooCache(documentation('Gray', string('"SI absorbed dose measure.  Symbol: Gy.  It measures   the dose of radiation absorbed in living tissue. It is equal approximately   to the absorbed dose delivered when the energy per unit mass imparted to  matter by ionizing radiation is 1 Joule per kilogram.  Gray = J/kg   = m^2*s^(-2)."')), documentation('Gray', string('"SI absorbed dose measure.  Symbol: Gy.  It measures   the dose of radiation absorbed in living tissue. It is equal approximately   to the absorbed dose delivered when the energy per unit mass imparted to  matter by ionizing radiation is 1 Joule per kilogram.  Gray = J/kg   = m^2*s^(-2)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3636, 'Anonymous', on).
mooCache(instance('Sievert', 'FunctionQuantity'), instance('Sievert', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3640, 'Anonymous', on).
mooCache(instance('Sievert', 'SystemeInternationalUnit'), instance('Sievert', 'SystemeInternationalUnit'), [], [], 'Merge', 'UNITS OF MEASURE', 3642, 'Anonymous', on).
mooCache(documentation('Sievert', string('"SI dose equivalent measure.  Symbol: Sv.  It is   a unit of biologic dose of ionizing radiation.  The Sievert makes it   possible to normalize doses of different types of radiation. It takes   into account the relative biologic effectiveness of ionizing radiation,   since each form of such radiation--e.g., X rays, gamma rays, neutrons--  has a slightly different effect on living tissue for a given absorbed   dose. The dose equivalent of a given type of radiation (in Sievert) is   the dose of the radiation in Gray multiplied by a quality factor that   is based on the relative biologic effectiveness of the radiation.   Accordingly, one Sievert is generally defined as the amount of radiation   roughly equivalent in biologic effectiveness to one Gray of gamma   radiation.  Sievert = J/kg = m^2*s^(-2)"')), documentation('Sievert', string('"SI dose equivalent measure.  Symbol: Sv.  It is   a unit of biologic dose of ionizing radiation.  The Sievert makes it   possible to normalize doses of different types of radiation. It takes   into account the relative biologic effectiveness of ionizing radiation,   since each form of such radiation--e.g., X rays, gamma rays, neutrons--  has a slightly different effect on living tissue for a given absorbed   dose. The dose equivalent of a given type of radiation (in Sievert) is   the dose of the radiation in Gray multiplied by a quality factor that   is based on the relative biologic effectiveness of the radiation.   Accordingly, one Sievert is generally defined as the amount of radiation   roughly equivalent in biologic effectiveness to one Gray of gamma   radiation.  Sievert = J/kg = m^2*s^(-2)"')), [], [], 'Merge', 'UNITS OF MEASURE', 3644, 'Anonymous', on).
mooCache(instance('DayDuration', 'TimeDuration'), instance('DayDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3648, 'Anonymous', on).
mooCache(instance('DayDuration', 'UnitOfMeasure'), instance('DayDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3650, 'Anonymous', on).
mooCache(documentation('DayDuration', string('"Time unit. 1 day = 24 hours."')), documentation('DayDuration', string('"Time unit. 1 day = 24 hours."')), [], [], 'Merge', 'UNITS OF MEASURE', 3652, 'Anonymous', on).
mooCache(equal('MeasureFn'(J35, 'DayDuration'), 'MeasureFn'('MultiplicationFn'(J35, 24), 'HourDuration')), equal('MeasureFn'(J35, 'DayDuration'), 'MeasureFn'('MultiplicationFn'(J35, 24), 'HourDuration')), [domainV(J35, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4310, []), forall(J35)], ['NUMBER'=J35], 'Merge', 'UNITS OF MEASURE', 3654, 'Anonymous', on).
mooCache(instance('HourDuration', 'TimeDuration'), instance('HourDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3656, 'Anonymous', on).
mooCache(instance('HourDuration', 'UnitOfMeasure'), instance('HourDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3658, 'Anonymous', on).
mooCache(documentation('HourDuration', string('"Time unit. 1 hour = 60 minutes."')), documentation('HourDuration', string('"Time unit. 1 hour = 60 minutes."')), [], [], 'Merge', 'UNITS OF MEASURE', 3660, 'Anonymous', on).
mooCache(equal('MeasureFn'(A5, 'HourDuration'), 'MeasureFn'('MultiplicationFn'(A5, 60), 'MinuteDuration')), equal('MeasureFn'(A5, 'HourDuration'), 'MeasureFn'('MultiplicationFn'(A5, 60), 'MinuteDuration')), [domainV(A5, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4328, []), forall(A5)], ['NUMBER'=A5], 'Merge', 'UNITS OF MEASURE', 3662, 'Anonymous', on).
mooCache(instance('MinuteDuration', 'TimeDuration'), instance('MinuteDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3664, 'Anonymous', on).
mooCache(instance('MinuteDuration', 'UnitOfMeasure'), instance('MinuteDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3666, 'Anonymous', on).
mooCache(documentation('MinuteDuration', string('"Time unit. 1 minute = 60 seconds. "')), documentation('MinuteDuration', string('"Time unit. 1 minute = 60 seconds. "')), [], [], 'Merge', 'UNITS OF MEASURE', 3668, 'Anonymous', on).
mooCache(equal('MeasureFn'(D13, 'MinuteDuration'), 'MeasureFn'('MultiplicationFn'(D13, 60), 'SecondDuration')), equal('MeasureFn'(D13, 'MinuteDuration'), 'MeasureFn'('MultiplicationFn'(D13, 60), 'SecondDuration')), [domainV(D13, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4340, []), forall(D13)], ['NUMBER'=D13], 'Merge', 'UNITS OF MEASURE', 3670, 'Anonymous', on).
mooCache(instance('WeekDuration', 'TimeDuration'), instance('WeekDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3672, 'Anonymous', on).
mooCache(instance('WeekDuration', 'UnitOfMeasure'), instance('WeekDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3674, 'Anonymous', on).
mooCache(documentation('WeekDuration', string('"Time unit.  A week\'s duration is seven days."')), documentation('WeekDuration', string('"Time unit.  A week\'s duration is seven days."')), [], [], 'Merge', 'UNITS OF MEASURE', 3676, 'Anonymous', on).
mooCache(equal('MeasureFn'(H21, 'WeekDuration'), 'MeasureFn'('MultiplicationFn'(H21, 7), 'DayDuration')), equal('MeasureFn'(H21, 'WeekDuration'), 'MeasureFn'('MultiplicationFn'(H21, 7), 'DayDuration')), [domainV(H21, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4256, []), forall(H21)], ['NUMBER'=H21], 'Merge', 'UNITS OF MEASURE', 3678, 'Anonymous', on).
mooCache(instance('YearDuration', 'TimeDuration'), instance('YearDuration', 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3680, 'Anonymous', on).
mooCache(instance('YearDuration', 'UnitOfMeasure'), instance('YearDuration', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3682, 'Anonymous', on).
mooCache(documentation('YearDuration', string('"Time unit. one calendar year. 1 year =  365 days = 31536000 seconds."')), documentation('YearDuration', string('"Time unit. one calendar year. 1 year =  365 days = 31536000 seconds."')), [], [], 'Merge', 'UNITS OF MEASURE', 3684, 'Anonymous', on).
mooCache(equal('MeasureFn'(K29, 'YearDuration'), 'MeasureFn'('MultiplicationFn'(K29, 365), 'DayDuration')), equal('MeasureFn'(K29, 'YearDuration'), 'MeasureFn'('MultiplicationFn'(K29, 365), 'DayDuration')), [domainV(K29, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4364, []), forall(K29)], ['NUMBER'=K29], 'Merge', 'UNITS OF MEASURE', 3686, 'Anonymous', on).
mooCache(instance('Amu', 'MassMeasure'), instance('Amu', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3692, 'Anonymous', on).
mooCache(instance('Amu', 'UnitOfMeasure'), instance('Amu', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3694, 'Anonymous', on).
mooCache(documentation('Amu', string('"Atomic mass unit.  Symbol: u. It is the mass of   the twelfth part of an atom of the Carbon 12 isotope."')), documentation('Amu', string('"Atomic mass unit.  Symbol: u. It is the mass of   the twelfth part of an atom of the Carbon 12 isotope."')), [], [], 'Merge', 'UNITS OF MEASURE', 3696, 'Anonymous', on).
mooCache(equal('MeasureFn'(E3, 'Amu'), 'MeasureFn'('MultiplicationFn'(E3, 1.66054e-24), 'Gram')), equal('MeasureFn'(E3, 'Amu'), 'MeasureFn'('MultiplicationFn'(E3, 1.66054e-24), 'Gram')), [domainV(E3, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5298, []), forall(E3)], ['NUMBER'=E3], 'Merge', 'UNITS OF MEASURE', 3698, 'Anonymous', on).
mooCache(instance('ElectronVolt', 'FunctionQuantity'), instance('ElectronVolt', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3700, 'Anonymous', on).
mooCache(instance('ElectronVolt', 'UnitOfMeasure'), instance('ElectronVolt', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3702, 'Anonymous', on).
mooCache(documentation('ElectronVolt', string('"The ElectronVolt is an energy measure.    Symbol: eV.  It is the kinetic energy acquired by an electron in passing   through a potential difference of 1 Volt in a vacuum."')), documentation('ElectronVolt', string('"The ElectronVolt is an energy measure.    Symbol: eV.  It is the kinetic energy acquired by an electron in passing   through a potential difference of 1 Volt in a vacuum."')), [], [], 'Merge', 'UNITS OF MEASURE', 3704, 'Anonymous', on).
mooCache(equal('MeasureFn'(I11, 'ElectronVolt'), 'MeasureFn'('MultiplicationFn'(I11, 1.60218e-19), 'Joule')), equal('MeasureFn'(I11, 'ElectronVolt'), 'MeasureFn'('MultiplicationFn'(I11, 1.60218e-19), 'Joule')), [domainV(I11, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5358, []), forall(I11)], ['NUMBER'=I11], 'Merge', 'UNITS OF MEASURE', 3706, 'Anonymous', on).
mooCache(instance('Angstrom', 'LengthMeasure'), instance('Angstrom', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3712, 'Anonymous', on).
mooCache(instance('Angstrom', 'UnitOfMeasure'), instance('Angstrom', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3714, 'Anonymous', on).
mooCache(documentation('Angstrom', string('"The Angstrom is a LengthMeasure.   1 Angstrom = 10^(-10) m"')), documentation('Angstrom', string('"The Angstrom is a LengthMeasure.   1 Angstrom = 10^(-10) m"')), [], [], 'Merge', 'UNITS OF MEASURE', 3716, 'Anonymous', on).
mooCache(equal('MeasureFn'(K19, 'Angstrom'), 'MeasureFn'('MultiplicationFn'(K19, 1e-10), 'Meter')), equal('MeasureFn'(K19, 'Angstrom'), 'MeasureFn'('MultiplicationFn'(K19, 1e-10), 'Meter')), [domainV(K19, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5280, []), forall(K19)], ['NUMBER'=K19], 'Merge', 'UNITS OF MEASURE', 3718, 'Anonymous', on).
mooCache(instance('Foot', 'LengthMeasure'), instance('Foot', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3726, 'Anonymous', on).
mooCache(instance('Foot', 'UnitOfMeasure'), instance('Foot', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3728, 'Anonymous', on).
mooCache(documentation('Foot', string('"English length unit of feet."')), documentation('Foot', string('"English length unit of feet."')), [], [], 'Merge', 'UNITS OF MEASURE', 3730, 'Anonymous', on).
mooCache(equal('MeasureFn'(N27, 'Foot'), 'MeasureFn'('MultiplicationFn'(N27, 0.3048), 'Meter')), equal('MeasureFn'(N27, 'Foot'), 'MeasureFn'('MultiplicationFn'(N27, 0.3048), 'Meter')), [domainV(N27, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5148, []), forall(N27)], ['NUMBER'=N27], 'Merge', 'UNITS OF MEASURE', 3732, 'Anonymous', on).
mooCache(instance('Inch', 'LengthMeasure'), instance('Inch', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3734, 'Anonymous', on).
mooCache(instance('Inch', 'UnitOfMeasure'), instance('Inch', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3736, 'Anonymous', on).
mooCache(documentation('Inch', string('"English length unit of inches."')), documentation('Inch', string('"English length unit of inches."')), [], [], 'Merge', 'UNITS OF MEASURE', 3738, 'Anonymous', on).
mooCache(equal('MeasureFn'(U35, 'Inch'), 'MeasureFn'('MultiplicationFn'(U35, 0.0254), 'Meter')), equal('MeasureFn'(U35, 'Inch'), 'MeasureFn'('MultiplicationFn'(U35, 0.0254), 'Meter')), [domainV(U35, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5148, []), forall(U35)], ['NUMBER'=U35], 'Merge', 'UNITS OF MEASURE', 3740, 'Anonymous', on).
mooCache(instance('Mile', 'LengthMeasure'), instance('Mile', 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3742, 'Anonymous', on).
mooCache(instance('Mile', 'UnitOfMeasure'), instance('Mile', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3744, 'Anonymous', on).
mooCache(documentation('Mile', string('"English length unit of miles."')), documentation('Mile', string('"English length unit of miles."')), [], [], 'Merge', 'UNITS OF MEASURE', 3746, 'Anonymous', on).
mooCache(equal('MeasureFn'(K5, 'Mile'), 'MeasureFn'('MultiplicationFn'(K5, 1609.34), 'Meter')), equal('MeasureFn'(K5, 'Mile'), 'MeasureFn'('MultiplicationFn'(K5, 1609.34), 'Meter')), [domainV(K5, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5040, []), forall(K5)], ['NUMBER'=K5], 'Merge', 'UNITS OF MEASURE', 3748, 'Anonymous', on).
mooCache(instance('UnitedStatesGallon', 'VolumeMeasure'), instance('UnitedStatesGallon', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3752, 'Anonymous', on).
mooCache(instance('UnitedStatesGallon', 'UnitOfMeasure'), instance('UnitedStatesGallon', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3754, 'Anonymous', on).
mooCache(relatedInternalConcept('UnitedStatesGallon', 'UnitedKingdomGallon'), relatedInternalConcept('UnitedStatesGallon', 'UnitedKingdomGallon'), [], [], 'Merge', 'UNITS OF MEASURE', 3756, 'Anonymous', on).
mooCache(documentation('UnitedStatesGallon', string('"Unit of volume commonly used in the   United States."')), documentation('UnitedStatesGallon', string('"Unit of volume commonly used in the   United States."')), [], [], 'Merge', 'UNITS OF MEASURE', 3758, 'Anonymous', on).
mooCache(equal('MeasureFn'(K15, 'UnitedStatesGallon'), 'MeasureFn'('MultiplicationFn'(K15, 3.78541), 'Liter')), equal('MeasureFn'(K15, 'UnitedStatesGallon'), 'MeasureFn'('MultiplicationFn'(K15, 3.78541), 'Liter')), [domainV(K15, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5124, []), forall(K15)], ['NUMBER'=K15], 'Merge', 'UNITS OF MEASURE', 3760, 'Anonymous', on).
mooCache(instance('Quart', 'VolumeMeasure'), instance('Quart', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3762, 'Anonymous', on).
mooCache(instance('Quart', 'UnitOfMeasure'), instance('Quart', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3764, 'Anonymous', on).
mooCache(documentation('Quart', string('"English unit of volume equal to 1/4 of a   UnitedStatesGallon."')), documentation('Quart', string('"English unit of volume equal to 1/4 of a   UnitedStatesGallon."')), [], [], 'Merge', 'UNITS OF MEASURE', 3766, 'Anonymous', on).
mooCache(equal('MeasureFn'(M23, 'Quart'), 'MeasureFn'('DivisionFn'(M23, 4), 'UnitedStatesGallon')), equal('MeasureFn'(M23, 'Quart'), 'MeasureFn'('DivisionFn'(M23, 4), 'UnitedStatesGallon')), [domainV(M23, ['DivisionFn':1, 'MeasureFn':1]), domainV(_G4220, []), forall(M23)], ['NUMBER'=M23], 'Merge', 'UNITS OF MEASURE', 3768, 'Anonymous', on).
mooCache(instance('Pint', 'VolumeMeasure'), instance('Pint', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3770, 'Anonymous', on).
mooCache(instance('Pint', 'UnitOfMeasure'), instance('Pint', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3772, 'Anonymous', on).
mooCache(documentation('Pint', string('"English unit of volume equal to 1/2 of a   Quart."')), documentation('Pint', string('"English unit of volume equal to 1/2 of a   Quart."')), [], [], 'Merge', 'UNITS OF MEASURE', 3774, 'Anonymous', on).
mooCache(equal('MeasureFn'(Q31, 'Pint'), 'MeasureFn'('DivisionFn'(Q31, 2), 'Quart')), equal('MeasureFn'(Q31, 'Pint'), 'MeasureFn'('DivisionFn'(Q31, 2), 'Quart')), [domainV(Q31, ['DivisionFn':1, 'MeasureFn':1]), domainV(_G4136, []), forall(Q31)], ['NUMBER'=Q31], 'Merge', 'UNITS OF MEASURE', 3776, 'Anonymous', on).
mooCache(instance('Cup', 'VolumeMeasure'), instance('Cup', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3778, 'Anonymous', on).
mooCache(instance('Cup', 'UnitOfMeasure'), instance('Cup', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3780, 'Anonymous', on).
mooCache(documentation('Cup', string('"English unit of volume equal to 1/2 of a   Pint."')), documentation('Cup', string('"English unit of volume equal to 1/2 of a   Pint."')), [], [], 'Merge', 'UNITS OF MEASURE', 3782, 'Anonymous', on).
mooCache(equal('MeasureFn'(K1, 'Cup'), 'MeasureFn'('DivisionFn'(K1, 2), 'Pint')), equal('MeasureFn'(K1, 'Cup'), 'MeasureFn'('DivisionFn'(K1, 2), 'Pint')), [domainV(K1, ['DivisionFn':1, 'MeasureFn':1]), domainV(_G4124, []), forall(K1)], ['NUMBER'=K1], 'Merge', 'UNITS OF MEASURE', 3784, 'Anonymous', on).
mooCache(instance('Ounce', 'VolumeMeasure'), instance('Ounce', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3786, 'Anonymous', on).
mooCache(instance('Ounce', 'UnitOfMeasure'), instance('Ounce', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3788, 'Anonymous', on).
mooCache(documentation('Ounce', string('"English unit of volume equal to 1/8 of a   Cup."')), documentation('Ounce', string('"English unit of volume equal to 1/8 of a   Cup."')), [], [], 'Merge', 'UNITS OF MEASURE', 3790, 'Anonymous', on).
mooCache(equal('MeasureFn'(K9, 'Ounce'), 'MeasureFn'('DivisionFn'(K9, 8), 'Cup')), equal('MeasureFn'(K9, 'Ounce'), 'MeasureFn'('DivisionFn'(K9, 8), 'Cup')), [domainV(K9, ['DivisionFn':1, 'MeasureFn':1]), domainV(_G4130, []), forall(K9)], ['NUMBER'=K9], 'Merge', 'UNITS OF MEASURE', 3792, 'Anonymous', on).
mooCache(instance('UnitedKingdomGallon', 'VolumeMeasure'), instance('UnitedKingdomGallon', 'VolumeMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3794, 'Anonymous', on).
mooCache(instance('UnitedKingdomGallon', 'UnitOfMeasure'), instance('UnitedKingdomGallon', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3796, 'Anonymous', on).
mooCache(documentation('UnitedKingdomGallon', string('"Unit of volume commonly used in the   United Kingdom."')), documentation('UnitedKingdomGallon', string('"Unit of volume commonly used in the   United Kingdom."')), [], [], 'Merge', 'UNITS OF MEASURE', 3798, 'Anonymous', on).
mooCache(equal('MeasureFn'(L17, 'UnitedKingdomGallon'), 'MeasureFn'('MultiplicationFn'(L17, 4.54609), 'Liter')), equal('MeasureFn'(L17, 'UnitedKingdomGallon'), 'MeasureFn'('MultiplicationFn'(L17, 4.54609), 'Liter')), [domainV(L17, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5130, []), forall(L17)], ['NUMBER'=L17], 'Merge', 'UNITS OF MEASURE', 3800, 'Anonymous', on).
mooCache(instance('AtomGram', 'MassMeasure'), instance('AtomGram', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3804, 'Anonymous', on).
mooCache(instance('AtomGram', 'UnitOfMeasure'), instance('AtomGram', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3806, 'Anonymous', on).
mooCache(documentation('AtomGram', string('"MassMeasure that is also known as the gram-atom.    Defined as the mass in grams of 1 Mole of pure substance.  For example,   1 AtomGram of Carbon 12 will be 12 Grams of pure Carbon 12.  2 AtomGrams   of the same substance will be 24 Grams of it.  This is an unusual unit in   that it is essentially 1 Mole of \'stuff\' measured in grams, so that the   actual value (i.e. mass) depends on the type of substance."')), documentation('AtomGram', string('"MassMeasure that is also known as the gram-atom.    Defined as the mass in grams of 1 Mole of pure substance.  For example,   1 AtomGram of Carbon 12 will be 12 Grams of pure Carbon 12.  2 AtomGrams   of the same substance will be 24 Grams of it.  This is an unusual unit in   that it is essentially 1 Mole of \'stuff\' measured in grams, so that the   actual value (i.e. mass) depends on the type of substance."')), [], [], 'Merge', 'UNITS OF MEASURE', 3808, 'Anonymous', on).
mooCache(instance('PoundMass', 'MassMeasure'), instance('PoundMass', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3810, 'Anonymous', on).
mooCache(instance('PoundMass', 'UnitOfMeasure'), instance('PoundMass', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3812, 'Anonymous', on).
mooCache(documentation('PoundMass', string('"English mass unit of pounds."')), documentation('PoundMass', string('"English mass unit of pounds."')), [], [], 'Merge', 'UNITS OF MEASURE', 3814, 'Anonymous', on).
mooCache(equal('MeasureFn'(R31, 'PoundMass'), 'MeasureFn'('MultiplicationFn'(R31, 453.592), 'Gram')), equal('MeasureFn'(R31, 'PoundMass'), 'MeasureFn'('MultiplicationFn'(R31, 453.592), 'Gram')), [domainV(R31, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5064, []), forall(R31)], ['NUMBER'=R31], 'Merge', 'UNITS OF MEASURE', 3816, 'Anonymous', on).
mooCache(instance('Slug', 'MassMeasure'), instance('Slug', 'MassMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3818, 'Anonymous', on).
mooCache(instance('Slug', 'UnitOfMeasure'), instance('Slug', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3820, 'Anonymous', on).
mooCache(documentation('Slug', string('"English mass unit of slugs."')), documentation('Slug', string('"English mass unit of slugs."')), [], [], 'Merge', 'UNITS OF MEASURE', 3822, 'Anonymous', on).
mooCache(equal('MeasureFn'(E1, 'Slug'), 'MeasureFn'('MultiplicationFn'(E1, 14593.9), 'Gram')), equal('MeasureFn'(E1, 'Slug'), 'MeasureFn'('MultiplicationFn'(E1, 14593.9), 'Gram')), [domainV(E1, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4926, []), forall(E1)], ['NUMBER'=E1], 'Merge', 'UNITS OF MEASURE', 3824, 'Anonymous', on).
mooCache(instance('Rankine', 'TemperatureMeasure'), instance('Rankine', 'TemperatureMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3828, 'Anonymous', on).
mooCache(instance('Rankine', 'UnitOfMeasure'), instance('Rankine', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3830, 'Anonymous', on).
mooCache(documentation('Rankine', string('"A TemperatureMeasure.  Note   that 0 degrees Rankine is the same as the absolute zero (i.e. 0   degrees Kelvin)."')), documentation('Rankine', string('"A TemperatureMeasure.  Note   that 0 degrees Rankine is the same as the absolute zero (i.e. 0   degrees Kelvin)."')), [], [], 'Merge', 'UNITS OF MEASURE', 3832, 'Anonymous', on).
mooCache(equal('MeasureFn'(F9, 'Rankine'), 'MeasureFn'('MultiplicationFn'(F9, 1.8), 'Kelvin')), equal('MeasureFn'(F9, 'Rankine'), 'MeasureFn'('MultiplicationFn'(F9, 1.8), 'Kelvin')), [domainV(F9, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5118, []), forall(F9)], ['NUMBER'=F9], 'Merge', 'UNITS OF MEASURE', 3834, 'Anonymous', on).
mooCache(instance('PoundForce', 'FunctionQuantity'), instance('PoundForce', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3838, 'Anonymous', on).
mooCache(instance('PoundForce', 'UnitOfMeasure'), instance('PoundForce', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3840, 'Anonymous', on).
mooCache(documentation('PoundForce', string('"English pound of force. The conversion  factor depends on the local value of the acceleration of free fall. A  mean value is used in the conversion axiom associated with this   constant."')), documentation('PoundForce', string('"English pound of force. The conversion  factor depends on the local value of the acceleration of free fall. A  mean value is used in the conversion axiom associated with this   constant."')), [], [], 'Merge', 'UNITS OF MEASURE', 3842, 'Anonymous', on).
mooCache(equal('MeasureFn'(G17, 'PoundForce'), 'MeasureFn'('MultiplicationFn'(G17, 4.44822), 'Newton')), equal('MeasureFn'(G17, 'PoundForce'), 'MeasureFn'('MultiplicationFn'(G17, 4.44822), 'Newton')), [domainV(G17, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5136, []), forall(G17)], ['NUMBER'=G17], 'Merge', 'UNITS OF MEASURE', 3844, 'Anonymous', on).
mooCache(instance('Calorie', 'FunctionQuantity'), instance('Calorie', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3848, 'Anonymous', on).
mooCache(instance('Calorie', 'UnitOfMeasure'), instance('Calorie', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3850, 'Anonymous', on).
mooCache(documentation('Calorie', string('"A Calorie is an energy measure."')), documentation('Calorie', string('"A Calorie is an energy measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3852, 'Anonymous', on).
mooCache(equal('MeasureFn'(G25, 'Calorie'), 'MeasureFn'('MultiplicationFn'(G25, 4.1868), 'Joule')), equal('MeasureFn'(G25, 'Calorie'), 'MeasureFn'('MultiplicationFn'(G25, 4.1868), 'Joule')), [domainV(G25, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5058, []), forall(G25)], ['NUMBER'=G25], 'Merge', 'UNITS OF MEASURE', 3854, 'Anonymous', on).
mooCache(instance('BritishThermalUnit', 'FunctionQuantity'), instance('BritishThermalUnit', 'FunctionQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3856, 'Anonymous', on).
mooCache(instance('BritishThermalUnit', 'UnitOfMeasure'), instance('BritishThermalUnit', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3858, 'Anonymous', on).
mooCache(documentation('BritishThermalUnit', string('"An energy measure."')), documentation('BritishThermalUnit', string('"An energy measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3860, 'Anonymous', on).
mooCache(equal('MeasureFn'(G33, 'BritishThermalUnit'), 'MeasureFn'('MultiplicationFn'(G33, 1055.06), 'Joule')), equal('MeasureFn'(G33, 'BritishThermalUnit'), 'MeasureFn'('MultiplicationFn'(G33, 1055.06), 'Joule')), [domainV(G33, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5124, []), forall(G33)], ['NUMBER'=G33], 'Merge', 'UNITS OF MEASURE', 3862, 'Anonymous', on).
mooCache(instance('AngularDegree', 'PlaneAngleMeasure'), instance('AngularDegree', 'PlaneAngleMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3866, 'Anonymous', on).
mooCache(instance('AngularDegree', 'UnitOfMeasure'), instance('AngularDegree', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3868, 'Anonymous', on).
mooCache(documentation('AngularDegree', string('"A plane angle measure."')), documentation('AngularDegree', string('"A plane angle measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3870, 'Anonymous', on).
mooCache(equal('MeasureFn'(Y2, 'AngularDegree'), 'MeasureFn'('MultiplicationFn'(Y2, 'DivisionFn'('Pi', 180)), 'Radian')), equal('MeasureFn'(Y2, 'AngularDegree'), 'MeasureFn'('MultiplicationFn'(Y2, 'DivisionFn'('Pi', 180)), 'Radian')), [domainV(Y2, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4834, []), forall(Y2)], ['NUMBER'=Y2], 'Merge', 'UNITS OF MEASURE', 3872, 'Anonymous', on).
mooCache(instance('DollarUnitedStates', 'CurrencyMeasure'), instance('DollarUnitedStates', 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3878, 'Anonymous', on).
mooCache(instance('DollarUnitedStates', 'UnitOfMeasure'), instance('DollarUnitedStates', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3880, 'Anonymous', on).
mooCache(documentation('DollarUnitedStates', string('"A currency measure."')), documentation('DollarUnitedStates', string('"A currency measure."')), [], [], 'Merge', 'UNITS OF MEASURE', 3882, 'Anonymous', on).
mooCache(instance('CentUnitedStates', 'CurrencyMeasure'), instance('CentUnitedStates', 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3884, 'Anonymous', on).
mooCache(instance('CentUnitedStates', 'UnitOfMeasure'), instance('CentUnitedStates', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3886, 'Anonymous', on).
mooCache(documentation('CentUnitedStates', string('"A currency measure.  1 US cent =   10^-2 US dollars."')), documentation('CentUnitedStates', string('"A currency measure.  1 US cent =   10^-2 US dollars."')), [], [], 'Merge', 'UNITS OF MEASURE', 3888, 'Anonymous', on).
mooCache(equal('MeasureFn'(V16, 'CentUnitedStates'), 'MeasureFn'('MultiplicationFn'(V16, 0.01), 'DollarUnitedStates')), equal('MeasureFn'(V16, 'CentUnitedStates'), 'MeasureFn'('MultiplicationFn'(V16, 0.01), 'DollarUnitedStates')), [domainV(V16, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G5352, []), forall(V16)], ['NUMBER'=V16], 'Merge', 'UNITS OF MEASURE', 3890, 'Anonymous', on).
mooCache(instance('Bit', 'ConstantQuantity'), instance('Bit', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3894, 'Anonymous', on).
mooCache(instance('Bit', 'UnitOfMeasure'), instance('Bit', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3896, 'Anonymous', on).
mooCache(documentation('Bit', string('"One Bit of information.  A one or a zero."')), documentation('Bit', string('"One Bit of information.  A one or a zero."')), [], [], 'Merge', 'UNITS OF MEASURE', 3898, 'Anonymous', on).
mooCache(instance('Byte', 'ConstantQuantity'), instance('Byte', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3900, 'Anonymous', on).
mooCache(instance('Byte', 'UnitOfMeasure'), instance('Byte', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3902, 'Anonymous', on).
mooCache(documentation('Byte', string('"One Byte of information.  A Byte is eight   Bits."')), documentation('Byte', string('"One Byte of information.  A Byte is eight   Bits."')), [], [], 'Merge', 'UNITS OF MEASURE', 3904, 'Anonymous', on).
mooCache(equal('MeasureFn'(U30, 'Byte'), 'MeasureFn'('MultiplicationFn'(U30, 8), 'Bit')), equal('MeasureFn'(U30, 'Byte'), 'MeasureFn'('MultiplicationFn'(U30, 8), 'Bit')), [domainV(U30, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4160, []), forall(U30)], ['NUMBER'=U30], 'Merge', 'UNITS OF MEASURE', 3906, 'Anonymous', on).
mooCache(instance('KiloByte', 'ConstantQuantity'), instance('KiloByte', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3908, 'Anonymous', on).
mooCache(instance('KiloByte', 'UnitOfMeasure'), instance('KiloByte', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3910, 'Anonymous', on).
mooCache(documentation('KiloByte', string('"One KiloByte (K) of information.  One   KiloByte is 1024 Bytes.  Note that this sense of \'kilo\' is   different from the one accepted in the SI system."')), documentation('KiloByte', string('"One KiloByte (K) of information.  One   KiloByte is 1024 Bytes.  Note that this sense of \'kilo\' is   different from the one accepted in the SI system."')), [], [], 'Merge', 'UNITS OF MEASURE', 3912, 'Anonymous', on).
mooCache(equal('MeasureFn'(H, 'KiloByte'), 'MeasureFn'('MultiplicationFn'(H, 1024), 'Byte')), equal('MeasureFn'(H, 'KiloByte'), 'MeasureFn'('MultiplicationFn'(H, 1024), 'Byte')), [domainV(H, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4352, []), forall(H)], ['NUMBER'=H], 'Merge', 'UNITS OF MEASURE', 3914, 'Anonymous', on).
mooCache(instance('MegaByte', 'ConstantQuantity'), instance('MegaByte', 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3916, 'Anonymous', on).
mooCache(instance('MegaByte', 'UnitOfMeasure'), instance('MegaByte', 'UnitOfMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3918, 'Anonymous', on).
mooCache(documentation('MegaByte', string('"One MegaByte (MB) of information.  One   MegaByte is 1024 KiloBytes.  Note that this sense of \'mega\' is   different from the one accepted in the SI system."')), documentation('MegaByte', string('"One MegaByte (MB) of information.  One   MegaByte is 1024 KiloBytes.  Note that this sense of \'mega\' is   different from the one accepted in the SI system."')), [], [], 'Merge', 'UNITS OF MEASURE', 3920, 'Anonymous', on).
mooCache(equal('MeasureFn'(J12, 'MegaByte'), 'MeasureFn'('MultiplicationFn'(J12, 1024), 'KiloByte')), equal('MeasureFn'(J12, 'MegaByte'), 'MeasureFn'('MultiplicationFn'(J12, 1024), 'KiloByte')), [domainV(J12, ['MeasureFn':1, 'MultiplicationFn':1]), domainV(_G4376, []), forall(J12)], ['NUMBER'=J12], 'Merge', 'UNITS OF MEASURE', 3922, 'Anonymous', on).
mooCache(instance(measure, 'BinaryPredicate'), instance(measure, 'BinaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3928, 'Anonymous', on).
mooCache(instance(measure, 'AsymmetricRelation'), instance(measure, 'AsymmetricRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3930, 'Anonymous', on).
mooCache(domain(measure, 1, 'Object'), domain(measure, 1, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 3932, 'Anonymous', on).
mooCache(domain(measure, 2, 'ConstantQuantity'), domain(measure, 2, 'ConstantQuantity'), [], [], 'Merge', 'UNITS OF MEASURE', 3934, 'Anonymous', on).
mooCache(documentation(measure, string('"A very general Predicate for asserting that a   particular Object is measured by a particular ConstantQuantity.    In general, the second argument of this Predicate will be an instance   of the Function MeasureFn."')), documentation(measure, string('"A very general Predicate for asserting that a   particular Object is measured by a particular ConstantQuantity.    In general, the second argument of this Predicate will be an instance   of the Function MeasureFn."')), [], [], 'Merge', 'UNITS OF MEASURE', 3936, 'Anonymous', on).
mooCache(subrelation(age, measure), subrelation(age, measure), [], [], 'Merge', 'UNITS OF MEASURE', 3938, 'Anonymous', on).
mooCache(domain(age, 2, 'TimeDuration'), domain(age, 2, 'TimeDuration'), [], [], 'Merge', 'UNITS OF MEASURE', 3940, 'Anonymous', on).
mooCache(singleValued(age, 2), singleValued(age, 2), [], [], 'Merge', 'UNITS OF MEASURE', 3942, 'Anonymous', on).
mooCache(documentation(age, string('"Simply relates an Object to a ConstantQuantity   specifying the age of the Object."')), documentation(age, string('"Simply relates an Object to a ConstantQuantity   specifying the age of the Object."')), [], [], 'Merge', 'UNITS OF MEASURE', 3944, 'Anonymous', on).
mooCache(subrelation(length, measure), subrelation(length, measure), [], [], 'Merge', 'UNITS OF MEASURE', 3946, 'Anonymous', on).
mooCache(domain(length, 2, 'LengthMeasure'), domain(length, 2, 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3948, 'Anonymous', on).
mooCache(documentation(length, string('"BinaryPredicate that is used to state the measure   of an Object from one point to another point along its surface."')), documentation(length, string('"BinaryPredicate that is used to state the measure   of an Object from one point to another point along its surface."')), [], [], 'Merge', 'UNITS OF MEASURE', 3950, 'Anonymous', on).
mooCache(subrelation(width, length), subrelation(width, length), [], [], 'Merge', 'UNITS OF MEASURE', 3952, 'Anonymous', on).
mooCache(singleValued(width, 2), singleValued(width, 2), [], [], 'Merge', 'UNITS OF MEASURE', 3954, 'Anonymous', on).
mooCache(documentation(width, string('"BinaryPredicate that is used to state the measure   of an Object from side to side at its widest span."')), documentation(width, string('"BinaryPredicate that is used to state the measure   of an Object from side to side at its widest span."')), [], [], 'Merge', 'UNITS OF MEASURE', 3956, 'Anonymous', on).
mooCache(subrelation(diameter, width), subrelation(diameter, width), [], [], 'Merge', 'UNITS OF MEASURE', 3958, 'Anonymous', on).
mooCache(documentation(diameter, string('"BinaryPredicate that is used to state the   measure of a circular Object from side to side."')), documentation(diameter, string('"BinaryPredicate that is used to state the   measure of a circular Object from side to side."')), [], [], 'Merge', 'UNITS OF MEASURE', 3960, 'Anonymous', on).
mooCache(subrelation(height, length), subrelation(height, length), [], [], 'Merge', 'UNITS OF MEASURE', 3962, 'Anonymous', on).
mooCache(singleValued(height, 2), singleValued(height, 2), [], [], 'Merge', 'UNITS OF MEASURE', 3964, 'Anonymous', on).
mooCache(documentation(height, string('"BinaryPredicate that is used to state the measure   of an Object from its lowest point to its highest point."')), documentation(height, string('"BinaryPredicate that is used to state the measure   of an Object from its lowest point to its highest point."')), [], [], 'Merge', 'UNITS OF MEASURE', 3966, 'Anonymous', on).
mooCache(instance(distance, 'SpatialRelation'), instance(distance, 'SpatialRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3968, 'Anonymous', on).
mooCache(instance(distance, 'TernaryPredicate'), instance(distance, 'TernaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3970, 'Anonymous', on).
mooCache(domain(distance, 1, 'Physical'), domain(distance, 1, 'Physical'), [], [], 'Merge', 'UNITS OF MEASURE', 3972, 'Anonymous', on).
mooCache(domain(distance, 2, 'Physical'), domain(distance, 2, 'Physical'), [], [], 'Merge', 'UNITS OF MEASURE', 3974, 'Anonymous', on).
mooCache(domain(distance, 3, 'LengthMeasure'), domain(distance, 3, 'LengthMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 3976, 'Anonymous', on).
mooCache(singleValued(distance, 3), singleValued(distance, 3), [], [], 'Merge', 'UNITS OF MEASURE', 3978, 'Anonymous', on).
mooCache(documentation(distance, string('"(distance ?OBJ1 ?OBJ2 ?QUANT) means that the   shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT."')), documentation(distance, string('"(distance ?OBJ1 ?OBJ2 ?QUANT) means that the   shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT."')), [], [], 'Merge', 'UNITS OF MEASURE', 3980, 'Anonymous', on).
mooCache(instance(larger, 'BinaryPredicate'), instance(larger, 'BinaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3982, 'Anonymous', on).
mooCache(instance(larger, 'SpatialRelation'), instance(larger, 'SpatialRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3984, 'Anonymous', on).
mooCache(instance(larger, 'TransitiveRelation'), instance(larger, 'TransitiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3986, 'Anonymous', on).
mooCache(instance(larger, 'IrreflexiveRelation'), instance(larger, 'IrreflexiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 3988, 'Anonymous', on).
mooCache(domain(larger, 1, 'Object'), domain(larger, 1, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 3990, 'Anonymous', on).
mooCache(domain(larger, 2, 'Object'), domain(larger, 2, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 3992, 'Anonymous', on).
mooCache(documentation(larger, string('"(larger ?OBJ1 ?OBJ2) simply means that ?OBJ1 is   larger, with respect to all LengthMeasures, than ?OBJ2."')), documentation(larger, string('"(larger ?OBJ1 ?OBJ2) simply means that ?OBJ1 is   larger, with respect to all LengthMeasures, than ?OBJ2."')), [], [], 'Merge', 'UNITS OF MEASURE', 3994, 'Anonymous', on).
mooCache(larger(P4, Q4)=>forall(R4, forall(S4, measure(P4, 'MeasureFn'(S4, 'LengthMeasure'))and measure(Q4, 'MeasureFn'(R4, 'LengthMeasure'))=>greaterThan(S4, R4))), entails(not greaterThan(S4, R4)and measure(P4, 'MeasureFn'(S4, 'LengthMeasure'))and measure(Q4, 'MeasureFn'(R4, 'LengthMeasure')), not larger(P4, Q4))and entails(larger(P4, Q4)and measure(P4, 'MeasureFn'(S4, 'LengthMeasure'))and measure(Q4, 'MeasureFn'(R4, 'LengthMeasure')), greaterThan(S4, R4))and entails(larger(P4, Q4)and not greaterThan(S4, R4)and measure(Q4, 'MeasureFn'(R4, 'LengthMeasure')), not measure(P4, 'MeasureFn'(S4, 'LengthMeasure')))and entails(larger(P4, Q4)and not greaterThan(S4, R4)and measure(P4, 'MeasureFn'(S4, 'LengthMeasure')), not measure(Q4, 'MeasureFn'(R4, 'LengthMeasure'))), [domainV(S4, ['MeasureFn':1, greaterThan:1]), domainV(R4, ['MeasureFn':1, greaterThan:2]), domainV(Q4, [larger:2, measure:1]), domainV(P4, [larger:1, measure:1]), domainV(_G11756, []), forall(P4), forall(Q4), forall(R4), forall(S4)], ['OBJ1'=P4, 'OBJ2'=Q4, 'QUANT1'=S4, 'QUANT2'=R4], 'Merge', 'UNITS OF MEASURE', 3996, 'Anonymous', on).
mooCache(instance(smaller, 'BinaryPredicate'), instance(smaller, 'BinaryPredicate'), [], [], 'Merge', 'UNITS OF MEASURE', 3998, 'Anonymous', on).
mooCache(instance(smaller, 'SpatialRelation'), instance(smaller, 'SpatialRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 4000, 'Anonymous', on).
mooCache(instance(smaller, 'TransitiveRelation'), instance(smaller, 'TransitiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 4002, 'Anonymous', on).
mooCache(instance(smaller, 'IrreflexiveRelation'), instance(smaller, 'IrreflexiveRelation'), [], [], 'Merge', 'UNITS OF MEASURE', 4004, 'Anonymous', on).
mooCache(domain(smaller, 1, 'Object'), domain(smaller, 1, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 4006, 'Anonymous', on).
mooCache(domain(smaller, 2, 'Object'), domain(smaller, 2, 'Object'), [], [], 'Merge', 'UNITS OF MEASURE', 4008, 'Anonymous', on).
mooCache(inverse(smaller, larger), inverse(smaller, larger), [], [], 'Merge', 'UNITS OF MEASURE', 4010, 'Anonymous', on).
mooCache(documentation(smaller, string('"(smaller ?OBJ1 ?OBJ2) simply means that ?OBJ1   is smaller, with respect to all LengthMeasures, than ?OBJ2."')), documentation(smaller, string('"(smaller ?OBJ1 ?OBJ2) simply means that ?OBJ1   is smaller, with respect to all LengthMeasures, than ?OBJ2."')), [], [], 'Merge', 'UNITS OF MEASURE', 4012, 'Anonymous', on).
mooCache(subrelation(monetaryValue, measure), subrelation(monetaryValue, measure), [], [], 'Merge', 'UNITS OF MEASURE', 4014, 'Anonymous', on).
mooCache(domain(monetaryValue, 2, 'CurrencyMeasure'), domain(monetaryValue, 2, 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 4016, 'Anonymous', on).
mooCache(singleValued(monetaryValue, 2), singleValued(monetaryValue, 2), [], [], 'Merge', 'UNITS OF MEASURE', 4018, 'Anonymous', on).
mooCache(documentation(monetaryValue, string('"A BinaryPredicate that associates an   Object with its value expressed as an instance of CurrencyMeasure."')), documentation(monetaryValue, string('"A BinaryPredicate that associates an   Object with its value expressed as an instance of CurrencyMeasure."')), [], [], 'Merge', 'UNITS OF MEASURE', 4020, 'Anonymous', on).
mooCache(instance('WealthFn', 'UnaryFunction'), instance('WealthFn', 'UnaryFunction'), [], [], 'Merge', 'UNITS OF MEASURE', 4022, 'Anonymous', on).
mooCache(domain('WealthFn', 1, 'Agent'), domain('WealthFn', 1, 'Agent'), [], [], 'Merge', 'UNITS OF MEASURE', 4024, 'Anonymous', on).
mooCache(range('WealthFn', 'CurrencyMeasure'), range('WealthFn', 'CurrencyMeasure'), [], [], 'Merge', 'UNITS OF MEASURE', 4026, 'Anonymous', on).
mooCache(documentation('WealthFn', string('"A UnaryFunction that maps an Agent to a CurrencyMeasure specifying the value of the property owned by the Agent.  Note that this Function is generally used in conjunction with the Function PropertyFn, e.g. (WealthFn (PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates\' holdings."')), documentation('WealthFn', string('"A UnaryFunction that maps an Agent to a CurrencyMeasure specifying the value of the property owned by the Agent.  Note that this Function is generally used in conjunction with the Function PropertyFn, e.g. (WealthFn (PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates\' holdings."')), [], [], 'Merge', 'UNITS OF MEASURE', 4028, 'Anonymous', on).
mooCache(equal('WealthFn'(A38), B38)<=>monetaryValue('PropertyFn'(A38), B38), (entails(holds('WealthFn', A38, B38), monetaryValue('PropertyFn'(A38), B38))and entails(not monetaryValue('PropertyFn'(A38), B38), not holds('WealthFn', A38, B38)))and entails(monetaryValue('PropertyFn'(A38), B38), holds('WealthFn', A38, B38))and entails(not holds('WealthFn', A38, B38), not monetaryValue('PropertyFn'(A38), B38)), [domainV(B38, ['WealthFn':2, monetaryValue:2]), domainV(A38, ['PropertyFn':1, 'WealthFn':1]), domainV(_G5517, []), forall(A38), forall(B38)], ['PERSON'=A38, 'AMOUNT'=B38], 'Merge', 'UNITS OF MEASURE', 4030, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4042, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4045, 'Anonymous', on).
mooCache(instance('PositiveInfinity', 'TimePoint'), instance('PositiveInfinity', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4060, 'Anonymous', on).
mooCache(documentation('PositiveInfinity', string('"The TimePoint that is after   all other TimePoints."')), documentation('PositiveInfinity', string('"The TimePoint that is after   all other TimePoints."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4062, 'Anonymous', on).
mooCache(instance(O9, 'TimePoint')and not equal(O9, 'PositiveInfinity')=>before(O9, 'PositiveInfinity'), entails(instance(O9, 'TimePoint')and not equal('PositiveInfinity', O9), before(O9, 'PositiveInfinity'))and entails(not before(O9, 'PositiveInfinity')and not equal('PositiveInfinity', O9), not instance(O9, 'TimePoint'))and entails(not before(O9, 'PositiveInfinity')and instance(O9, 'TimePoint'), equal('PositiveInfinity', O9)), [domainV(O9, ['$instanceof':'TimePoint', before:1]), domainV(_G5570, []), forall(O9)], ['POINT'=O9], 'Merge', 'TEMPORAL CONCEPTS', 4064, 'Anonymous', on).
mooCache(instance(W11, 'TimePoint')and not equal(W11, 'PositiveInfinity')=>exists(X11, temporallyBetween(W11, X11, 'PositiveInfinity')), entails((instance(W11, 'TimePoint')and not equal('PositiveInfinity', W11))and'$existential'(X11, '?OTHERPOINT', temporallyBetween(W11, '?OTHERPOINT', 'PositiveInfinity')), temporallyBetween(W11, X11, 'PositiveInfinity'))and entails(not temporallyBetween(W11, X11, 'PositiveInfinity')and not equal('PositiveInfinity', W11), not instance(W11, 'TimePoint'))and entails(not temporallyBetween(W11, X11, 'PositiveInfinity')and instance(W11, 'TimePoint'), equal('PositiveInfinity', W11)), [domainV(X11, [temporallyBetween:2]), domainV(W11, ['$instanceof':'TimePoint', temporallyBetween:1]), domainV(_G7295, []), forall(W11), replaceConsVar(X11, '$existential'('?OTHERPOINT', temporallyBetween(W11, '?OTHERPOINT', 'PositiveInfinity')))], ['POINT'=W11, 'OTHERPOINT'=X11], 'Merge', 'TEMPORAL CONCEPTS', 4066, 'Anonymous', on).
mooCache(instance('NegativeInfinity', 'TimePoint'), instance('NegativeInfinity', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4068, 'Anonymous', on).
mooCache(documentation('NegativeInfinity', string('"The TimePoint that is before   all other TimePoints."')), documentation('NegativeInfinity', string('"The TimePoint that is before   all other TimePoints."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4070, 'Anonymous', on).
mooCache(instance(Z17, 'TimePoint')and not equal(Z17, 'NegativeInfinity')=>before('NegativeInfinity', Z17), entails(instance(Z17, 'TimePoint')and not equal('NegativeInfinity', Z17), before('NegativeInfinity', Z17))and entails(not before('NegativeInfinity', Z17)and not equal('NegativeInfinity', Z17), not instance(Z17, 'TimePoint'))and entails(not before('NegativeInfinity', Z17)and instance(Z17, 'TimePoint'), equal('NegativeInfinity', Z17)), [domainV(Z17, ['$instanceof':'TimePoint', before:2]), domainV(_G5573, []), forall(Z17)], ['POINT'=Z17], 'Merge', 'TEMPORAL CONCEPTS', 4072, 'Anonymous', on).
mooCache(instance(H20, 'TimePoint')and not equal(H20, 'NegativeInfinity')=>exists(I20, temporallyBetween('NegativeInfinity', I20, H20)), entails((instance(H20, 'TimePoint')and not equal('NegativeInfinity', H20))and'$existential'(I20, '?OTHERPOINT', temporallyBetween('NegativeInfinity', '?OTHERPOINT', H20)), temporallyBetween('NegativeInfinity', I20, H20))and entails(not temporallyBetween('NegativeInfinity', I20, H20)and not equal('NegativeInfinity', H20), not instance(H20, 'TimePoint'))and entails(not temporallyBetween('NegativeInfinity', I20, H20)and instance(H20, 'TimePoint'), equal('NegativeInfinity', H20)), [domainV(I20, [temporallyBetween:2]), domainV(H20, ['$instanceof':'TimePoint', temporallyBetween:3]), domainV(_G7301, []), forall(H20), replaceConsVar(I20, '$existential'('?OTHERPOINT', temporallyBetween('NegativeInfinity', '?OTHERPOINT', H20)))], ['POINT'=H20, 'OTHERPOINT'=I20], 'Merge', 'TEMPORAL CONCEPTS', 4074, 'Anonymous', on).
mooCache(instance(duration, 'BinaryPredicate'), instance(duration, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4076, 'Anonymous', on).
mooCache(instance(duration, 'AsymmetricRelation'), instance(duration, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4078, 'Anonymous', on).
mooCache(domain(duration, 1, 'TimePosition'), domain(duration, 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4080, 'Anonymous', on).
mooCache(domain(duration, 2, 'TimeDuration'), domain(duration, 2, 'TimeDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4082, 'Anonymous', on).
mooCache(documentation(duration, string('"(duration ?POS ?TIME) means that the   duration of the TimePosition ?POS is ?TIME.  Note that this   Predicate can be used in conjunction with the Function WhenFn   to specify the duration of any instance of Physical."')), documentation(duration, string('"(duration ?POS ?TIME) means that the   duration of the TimePosition ?POS is ?TIME.  Note that this   Predicate can be used in conjunction with the Function WhenFn   to specify the duration of any instance of Physical."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4084, 'Anonymous', on).
mooCache(instance(C32, 'TimeInterval')=>exists(D32, duration(C32, D32)), entails(not duration(C32, D32), not instance(C32, 'TimeInterval'))and entails(instance(C32, 'TimeInterval')and'$existential'(D32, '?DURATION', duration(C32, '?DURATION')), duration(C32, D32)), [domainV(D32, [duration:2]), domainV(C32, ['$instanceof':'TimeInterval', duration:1]), domainV(_G5316, []), forall(C32), replaceConsVar(D32, '$existential'('?DURATION', duration(C32, '?DURATION')))], ['INTERVAL'=C32, 'DURATION'=D32], 'Merge', 'TEMPORAL CONCEPTS', 4086, 'Anonymous', on).
mooCache(instance(G34, 'TimePoint')=>not exists(H34, duration(G34, H34)), entails(duration(G34, H34), not instance(G34, 'TimePoint'))and entails(instance(G34, 'TimePoint'), not duration(G34, H34)), [domainV(H34, [duration:2]), domainV(G34, ['$instanceof':'TimePoint', duration:1]), domainV(_G5555, []), forall(G34), forall(H34), forall(H34)], ['POINT'=G34, 'DURATION'=H34], 'Merge', 'TEMPORAL CONCEPTS', 4088, 'Anonymous', on).
mooCache(instance(frequency, 'BinaryPredicate'), instance(frequency, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4090, 'Anonymous', on).
mooCache(instance(frequency, 'AsymmetricRelation'), instance(frequency, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4092, 'Anonymous', on).
mooCache(domainSubclass(frequency, 1, 'Process'), domainSubclass(frequency, 1, 'Process'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4094, 'Anonymous', on).
mooCache(domain(frequency, 2, 'TimeDuration'), domain(frequency, 2, 'TimeDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4096, 'Anonymous', on).
mooCache(documentation(frequency, string('"(frequency ?PROC ?TIME) means that the   Process type of ?PROC recurs after every interval of ?TIME."')), documentation(frequency, string('"(frequency ?PROC ?TIME) means that the   Process type of ?PROC recurs after every interval of ?TIME."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4098, 'Anonymous', on).
mooCache(frequency(A8, B8)=>forall(C8, duration(C8, B8)=>exists(D8, temporalPart(D8, C8)and holdsDuring(D8, exists(E8, instance(E8, A8))))), (entails(duration(C8, B8)and not temporalPart(D8, C8), not frequency(A8, B8))and entails(frequency(A8, B8)and not temporalPart(D8, C8), not duration(C8, B8))and entails(((frequency(A8, B8)and duration(C8, B8))and'$existential'(D8, '?POSITION', temporalPart('?POSITION', C8)and exists(E8, holdsDuring('?POSITION', instance(E8, A8)))))and'$existential'(E8, '?INST', holdsDuring(D8, instance('?INST', A8))), temporalPart(D8, C8)))and entails(duration(C8, B8)and not holdsDuring(D8, instance(E8, A8)), not frequency(A8, B8))and entails(frequency(A8, B8)and not holdsDuring(D8, instance(E8, A8)), not duration(C8, B8))and entails(((frequency(A8, B8)and duration(C8, B8))and'$existential'(D8, '?POSITION', temporalPart('?POSITION', C8)and exists(E8, holdsDuring('?POSITION', instance(E8, A8)))))and'$existential'(E8, '?INST', holdsDuring(D8, instance('?INST', A8))), holdsDuring(D8, instance(E8, A8))), [domainV(E8, []), domainV(D8, [holdsDuring:1, temporalPart:1]), domainV(C8, [duration:1, temporalPart:2]), domainV(B8, [duration:2, frequency:2]), domainV(A8, [frequency:1, instance:2]), domainV(_G13499, []), forall(A8), forall(B8), forall(C8), replaceConsVar(D8, '$existential'('?POSITION', temporalPart('?POSITION', C8)and exists(E8, holdsDuring('?POSITION', instance(E8, A8))))), replaceConsVar(E8, '$existential'('?INST', holdsDuring(D8, instance('?INST', A8))))], ['PROC'=A8, 'TIME1'=B8, 'TIME2'=C8, 'POSITION'=D8, 'INST'=E8], 'Merge', 'TEMPORAL CONCEPTS', 4100, 'Anonymous', on).
mooCache(instance(temporalPart, 'BinaryPredicate'), instance(temporalPart, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4102, 'Anonymous', on).
mooCache(instance(temporalPart, 'AsymmetricRelation'), instance(temporalPart, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4104, 'Anonymous', on).
mooCache(domain(temporalPart, 1, 'TimePosition'), domain(temporalPart, 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4106, 'Anonymous', on).
mooCache(domain(temporalPart, 2, 'TimePosition'), domain(temporalPart, 2, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4108, 'Anonymous', on).
mooCache(documentation(temporalPart, string('"(temporalPart ?POS1 ?POS2)   means that TimePosition ?POS1 is part of TimePosition ?POS2."')), documentation(temporalPart, string('"(temporalPart ?POS1 ?POS2)   means that TimePosition ?POS1 is part of TimePosition ?POS2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4110, 'Anonymous', on).
mooCache(instance(F20, 'TimePoint')=>exists(G20, instance(G20, 'TimeInterval')and temporalPart(F20, G20)), (entails(not instance(G20, 'TimeInterval'), not instance(F20, 'TimePoint'))and entails(instance(F20, 'TimePoint')and'$existential'(G20, '?INTERVAL', instance('?INTERVAL', 'TimeInterval')and temporalPart(F20, '?INTERVAL')), instance(G20, 'TimeInterval')))and entails(not temporalPart(F20, G20), not instance(F20, 'TimePoint'))and entails(instance(F20, 'TimePoint')and'$existential'(G20, '?INTERVAL', instance('?INTERVAL', 'TimeInterval')and temporalPart(F20, '?INTERVAL')), temporalPart(F20, G20)), [domainV(G20, ['$instanceof':'TimeInterval', temporalPart:2]), domainV(F20, ['$instanceof':'TimePoint', temporalPart:1]), domainV(_G6798, []), forall(F20), replaceConsVar(G20, '$existential'('?INTERVAL', instance('?INTERVAL', 'TimeInterval')and temporalPart(F20, '?INTERVAL')))], ['POINT'=F20, 'INTERVAL'=G20], 'Merge', 'TEMPORAL CONCEPTS', 4112, 'Anonymous', on).
mooCache(holdsDuring(L22, M22)and temporalPart(N22, L22)=>holdsDuring(N22, M22), entails(holdsDuring(L22, M22)and temporalPart(N22, L22), holdsDuring(N22, M22))and entails(not holdsDuring(N22, M22)and temporalPart(N22, L22), not holdsDuring(L22, M22))and entails(not holdsDuring(N22, M22)and holdsDuring(L22, M22), not temporalPart(N22, L22)), [domainV(N22, [holdsDuring:1, temporalPart:1]), domainV(M22, [holdsDuring:2]), domainV(L22, [holdsDuring:1, temporalPart:2]), domainV(_G6234, []), forall(L22), forall(M22), forall(N22)], ['TIME1'=L22, 'SITUATION'=M22, 'TIME2'=N22], 'Merge', 'TEMPORAL CONCEPTS', 4114, 'Anonymous', on).
mooCache(holdsDuring(V24, holds(W24, X24, Y24))and instance(X24, 'Physical')and instance(Y24, 'Physical')=>time(X24, V24)and time(Y24, V24), (entails(holdsDuring(V24, holds(W24, X24, Y24))and instance(X24, 'Physical')and instance(Y24, 'Physical'), time(X24, V24))and entails(not time(X24, V24)and instance(X24, 'Physical')and instance(Y24, 'Physical'), not holdsDuring(V24, holds(W24, X24, Y24)))and entails(not time(X24, V24)and holdsDuring(V24, holds(W24, X24, Y24))and instance(Y24, 'Physical'), not instance(X24, 'Physical'))and entails(not time(X24, V24)and holdsDuring(V24, holds(W24, X24, Y24))and instance(X24, 'Physical'), not instance(Y24, 'Physical')))and entails(holdsDuring(V24, holds(W24, X24, Y24))and instance(X24, 'Physical')and instance(Y24, 'Physical'), time(Y24, V24))and entails(not time(Y24, V24)and instance(X24, 'Physical')and instance(Y24, 'Physical'), not holdsDuring(V24, holds(W24, X24, Y24)))and entails(not time(Y24, V24)and holdsDuring(V24, holds(W24, X24, Y24))and instance(Y24, 'Physical'), not instance(X24, 'Physical'))and entails(not time(Y24, V24)and holdsDuring(V24, holds(W24, X24, Y24))and instance(X24, 'Physical'), not instance(Y24, 'Physical')), [domainV(Y24, ['$instanceof':'Physical', time:1, W24:2]), domainV(X24, ['$instanceof':'Physical', time:1, W24:1]), domainV(W24, [holds:1]), domainV(V24, [holdsDuring:1, time:2]), domainV(_G9934, []), forall(V24), forall(W24), forall(X24), forall(Y24)], ['INTERVAL'=V24, 'REL'=W24, 'INST1'=X24, 'INST2'=Y24], 'Merge', 'TEMPORAL CONCEPTS', 4116, 'Anonymous', on).
mooCache(temporalPart(I27, 'WhenFn'(J27))<=>time(J27, I27), (entails(temporalPart(I27, 'WhenFn'(J27)), time(J27, I27))and entails(not time(J27, I27), not temporalPart(I27, 'WhenFn'(J27))))and entails(time(J27, I27), temporalPart(I27, 'WhenFn'(J27)))and entails(not temporalPart(I27, 'WhenFn'(J27)), not time(J27, I27)), [domainV(J27, ['WhenFn':1, time:1]), domainV(I27, [temporalPart:1, time:2]), domainV(_G4993, []), forall(I27), forall(J27)], ['POS'=I27, 'THING'=J27], 'Merge', 'TEMPORAL CONCEPTS', 4118, 'Anonymous', on).
mooCache(instance('BeginFn', 'TemporalRelation'), instance('BeginFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4120, 'Anonymous', on).
mooCache(instance('BeginFn', 'UnaryFunction'), instance('BeginFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4122, 'Anonymous', on).
mooCache(domain('BeginFn', 1, 'TimeInterval'), domain('BeginFn', 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4124, 'Anonymous', on).
mooCache(range('BeginFn', 'TimePoint'), range('BeginFn', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4126, 'Anonymous', on).
mooCache(documentation('BeginFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval begins."')), documentation('BeginFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval begins."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4128, 'Anonymous', on).
mooCache(equal('BeginFn'(V), W)=>forall(X, temporalPart(X, V)and not equal(X, W)=>before(W, X)), entails(not before(W, X)and temporalPart(X, V)and not equal(X, W), not holds('BeginFn', V, W))and entails(holds('BeginFn', V, W)and temporalPart(X, V)and not equal(X, W), before(W, X))and entails(holds('BeginFn', V, W)and not before(W, X)and not equal(X, W), not temporalPart(X, V))and entails(holds('BeginFn', V, W)and not before(W, X)and temporalPart(X, V), equal(X, W)), [domainV(X, [before:2, temporalPart:1]), domainV(W, ['BeginFn':2, before:1]), domainV(V, ['BeginFn':1, temporalPart:2]), domainV(_G9954, []), forall(V), forall(W), forall(X)], ['INTERVAL'=V, 'POINT'=W, 'OTHERPOINT'=X], 'Merge', 'TEMPORAL CONCEPTS', 4130, 'Anonymous', on).
mooCache(origin(G3, H3)=>located('WhereFn'(G3, 'BeginFn'('WhenFn'(G3))), 'WhereFn'(H3, 'BeginFn'('WhenFn'(H3)))), entails(not located('WhereFn'(G3, 'BeginFn'('WhenFn'(G3))), 'WhereFn'(H3, 'BeginFn'('WhenFn'(H3)))), not origin(G3, H3))and entails(origin(G3, H3), located('WhereFn'(G3, 'BeginFn'('WhenFn'(G3))), 'WhereFn'(H3, 'BeginFn'('WhenFn'(H3))))), [domainV(H3, ['WhenFn':1, 'WhereFn':1, origin:2]), domainV(G3, ['WhenFn':1, 'WhereFn':1, origin:1]), domainV(_G7430, []), forall(G3), forall(H3)], ['PROCESS'=G3, 'OBJ'=H3], 'Merge', 'TEMPORAL CONCEPTS', 4132, 'Anonymous', on).
mooCache(instance('EndFn', 'TemporalRelation'), instance('EndFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4134, 'Anonymous', on).
mooCache(instance('EndFn', 'UnaryFunction'), instance('EndFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4136, 'Anonymous', on).
mooCache(domain('EndFn', 1, 'TimeInterval'), domain('EndFn', 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4138, 'Anonymous', on).
mooCache(range('EndFn', 'TimePoint'), range('EndFn', 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4140, 'Anonymous', on).
mooCache(documentation('EndFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval ends."')), documentation('EndFn', string('"A UnaryFunction that maps a TimeInterval to   the TimePoint at which the interval ends."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4142, 'Anonymous', on).
mooCache(equal('EndFn'(E19), F19)=>forall(G19, temporalPart(G19, E19)and not equal(G19, F19)=>before(G19, F19)), entails(not before(G19, F19)and temporalPart(G19, E19)and not equal(G19, F19), not holds('EndFn', E19, F19))and entails(holds('EndFn', E19, F19)and temporalPart(G19, E19)and not equal(G19, F19), before(G19, F19))and entails(holds('EndFn', E19, F19)and not before(G19, F19)and not equal(G19, F19), not temporalPart(G19, E19))and entails(holds('EndFn', E19, F19)and not before(G19, F19)and temporalPart(G19, E19), equal(G19, F19)), [domainV(G19, [before:1, temporalPart:1]), domainV(F19, ['EndFn':2, before:2]), domainV(E19, ['EndFn':1, temporalPart:2]), domainV(_G9942, []), forall(E19), forall(F19), forall(G19)], ['INTERVAL'=E19, 'POINT'=F19, 'OTHERPOINT'=G19], 'Merge', 'TEMPORAL CONCEPTS', 4144, 'Anonymous', on).
mooCache(instance(starts, 'BinaryPredicate'), instance(starts, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4146, 'Anonymous', on).
mooCache(instance(starts, 'TemporalRelation'), instance(starts, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4148, 'Anonymous', on).
mooCache(instance(starts, 'TransitiveRelation'), instance(starts, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4150, 'Anonymous', on).
mooCache(instance(starts, 'IrreflexiveRelation'), instance(starts, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4152, 'Anonymous', on).
mooCache(domain(starts, 1, 'TimeInterval'), domain(starts, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4154, 'Anonymous', on).
mooCache(domain(starts, 2, 'TimeInterval'), domain(starts, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4156, 'Anonymous', on).
mooCache(documentation(starts, string('"(starts ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   initial TimePoint and that ?INTERVAL1 ends before ?INTERVAL2."')), documentation(starts, string('"(starts ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   initial TimePoint and that ?INTERVAL1 ends before ?INTERVAL2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4158, 'Anonymous', on).
mooCache(starts(Y34, Z34)<=>equal('BeginFn'(Y34), 'BeginFn'(Z34))and before('EndFn'(Y34), 'EndFn'(Z34)), (entails(starts(Y34, Z34), equal('BeginFn'(Y34), 'BeginFn'(Z34)))and entails(starts(Y34, Z34), before('EndFn'(Y34), 'EndFn'(Z34)))and entails(not equal('BeginFn'(Y34), 'BeginFn'(Z34))or not before('EndFn'(Y34), 'EndFn'(Z34)), not starts(Y34, Z34)))and entails(equal('BeginFn'(Y34), 'BeginFn'(Z34))and before('EndFn'(Y34), 'EndFn'(Z34)), starts(Y34, Z34))and entails(not starts(Y34, Z34)and before('EndFn'(Y34), 'EndFn'(Z34)), not equal('BeginFn'(Y34), 'BeginFn'(Z34)))and entails(not starts(Y34, Z34)and equal('BeginFn'(Y34), 'BeginFn'(Z34)), not before('EndFn'(Y34), 'EndFn'(Z34))), [domainV(Z34, ['BeginFn':1, 'EndFn':1, starts:2]), domainV(Y34, ['BeginFn':1, 'EndFn':1, starts:1]), domainV(_G8370, []), forall(Y34), forall(Z34)], ['INTERVAL1'=Y34, 'INTERVAL2'=Z34], 'Merge', 'TEMPORAL CONCEPTS', 4160, 'Anonymous', on).
mooCache(instance(finishes, 'BinaryPredicate'), instance(finishes, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4162, 'Anonymous', on).
mooCache(instance(finishes, 'TemporalRelation'), instance(finishes, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4164, 'Anonymous', on).
mooCache(instance(finishes, 'TransitiveRelation'), instance(finishes, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4166, 'Anonymous', on).
mooCache(instance(finishes, 'IrreflexiveRelation'), instance(finishes, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4168, 'Anonymous', on).
mooCache(domain(finishes, 1, 'TimeInterval'), domain(finishes, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4170, 'Anonymous', on).
mooCache(domain(finishes, 2, 'TimeInterval'), domain(finishes, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4172, 'Anonymous', on).
mooCache(documentation(finishes, string('"(finishes ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   ending TimePoint and that ?INTERVAL2 begins before ?INTERVAL1."')), documentation(finishes, string('"(finishes ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 and ?INTERVAL2 are both TimeIntervals that have the same   ending TimePoint and that ?INTERVAL2 begins before ?INTERVAL1."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4174, 'Anonymous', on).
mooCache(finishes(A12, B12)<=>before('BeginFn'(B12), 'BeginFn'(A12))and equal('EndFn'(B12), 'EndFn'(A12)), (entails(finishes(A12, B12), before('BeginFn'(B12), 'BeginFn'(A12)))and entails(finishes(A12, B12), equal('EndFn'(B12), 'EndFn'(A12)))and entails(not before('BeginFn'(B12), 'BeginFn'(A12))or not equal('EndFn'(B12), 'EndFn'(A12)), not finishes(A12, B12)))and entails(before('BeginFn'(B12), 'BeginFn'(A12))and equal('EndFn'(B12), 'EndFn'(A12)), finishes(A12, B12))and entails(not finishes(A12, B12)and equal('EndFn'(B12), 'EndFn'(A12)), not before('BeginFn'(B12), 'BeginFn'(A12)))and entails(not finishes(A12, B12)and before('BeginFn'(B12), 'BeginFn'(A12)), not equal('EndFn'(B12), 'EndFn'(A12))), [domainV(B12, ['BeginFn':1, 'EndFn':1, finishes:2]), domainV(A12, ['BeginFn':1, 'EndFn':1, finishes:1]), domainV(_G8382, []), forall(A12), forall(B12)], ['INTERVAL1'=A12, 'INTERVAL2'=B12], 'Merge', 'TEMPORAL CONCEPTS', 4176, 'Anonymous', on).
mooCache(instance(before, 'TemporalRelation'), instance(before, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4178, 'Anonymous', on).
mooCache(instance(before, 'IrreflexiveRelation'), instance(before, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4180, 'Anonymous', on).
mooCache(instance(before, 'TransitiveRelation'), instance(before, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4182, 'Anonymous', on).
mooCache(subrelation(before, beforeOrEqual), subrelation(before, beforeOrEqual), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4184, 'Anonymous', on).
mooCache(domain(before, 1, 'TimePoint'), domain(before, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4186, 'Anonymous', on).
mooCache(domain(before, 2, 'TimePoint'), domain(before, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4188, 'Anonymous', on).
mooCache(documentation(before, string('"(before ?POINT1 ?POINT2) means that ?POINT1   precedes ?POINT2 on the universal timeline."')), documentation(before, string('"(before ?POINT1 ?POINT2) means that ?POINT1   precedes ?POINT2 on the universal timeline."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4190, 'Anonymous', on).
mooCache(instance(N28, 'Object')=>exists(O28, exists(P28, instance(P28, 'TimePoint')and instance(O28, 'TimePoint')and before(P28, O28)and forall(Q28, beforeOrEqual(P28, Q28)and beforeOrEqual(Q28, O28)=>time(N28, Q28)))), (entails(not instance(P28, 'TimePoint'), not instance(N28, 'Object'))and entails(instance(N28, 'Object')and'$existential'(P28, '?TIME1', instance('?TIME1', 'TimePoint')and instance(O28, 'TimePoint')and before('?TIME1', O28)and forall(Q28, beforeOrEqual('?TIME1', Q28)and beforeOrEqual(Q28, O28)=>time(N28, Q28))), instance(P28, 'TimePoint')))and (entails(not instance(O28, 'TimePoint'), not instance(N28, 'Object'))and entails((instance(N28, 'Object')and'$existential'(O28, '?TIME2', exists(P28, instance(P28, 'TimePoint')and instance('?TIME2', 'TimePoint')and before(P28, '?TIME2')and forall(Q28, beforeOrEqual(P28, Q28)and beforeOrEqual(Q28, '?TIME2')=>time(N28, Q28)))))and'$existential'(P28, '?TIME1', instance('?TIME1', 'TimePoint')and instance(O28, 'TimePoint')and before('?TIME1', O28)and forall(Q28, beforeOrEqual('?TIME1', Q28)and beforeOrEqual(Q28, O28)=>time(N28, Q28))), instance(O28, 'TimePoint')))and (entails(not before(P28, O28), not instance(N28, 'Object'))and entails((instance(N28, 'Object')and'$existential'(O28, '?TIME2', exists(P28, instance(P28, 'TimePoint')and instance('?TIME2', 'TimePoint')and before(P28, '?TIME2')and forall(Q28, beforeOrEqual(P28, Q28)and beforeOrEqual(Q28, '?TIME2')=>time(N28, Q28)))))and'$existential'(P28, '?TIME1', instance('?TIME1', 'TimePoint')and instance(O28, 'TimePoint')and before('?TIME1', O28)and forall(Q28, beforeOrEqual('?TIME1', Q28)and beforeOrEqual(Q28, O28)=>time(N28, Q28))), before(P28, O28)))and entails(not time(N28, Q28)and beforeOrEqual(P28, Q28)and beforeOrEqual(Q28, O28), not instance(N28, 'Object'))and entails((instance(N28, 'Object')and beforeOrEqual(P28, Q28)and beforeOrEqual(Q28, O28))and'$existential'(P28, '?TIME1', instance('?TIME1', 'TimePoint')and instance(O28, 'TimePoint')and before('?TIME1', O28)and forall(Q28, beforeOrEqual('?TIME1', Q28)and beforeOrEqual(Q28, O28)=>time(N28, Q28))), time(N28, Q28))and entails(instance(N28, 'Object')and not time(N28, Q28)and beforeOrEqual(Q28, O28), not beforeOrEqual(P28, Q28))and entails(instance(N28, 'Object')and not time(N28, Q28)and beforeOrEqual(P28, Q28), not beforeOrEqual(Q28, O28)), [domainV(Q28, [beforeOrEqual:1, beforeOrEqual:2, time:2]), domainV(P28, ['$instanceof':'TimePoint', before:1, beforeOrEqual:1]), domainV(O28, ['$instanceof':'TimePoint', before:2, beforeOrEqual:2]), domainV(N28, ['$instanceof':'Object', time:1]), domainV(_G17175, []), forall(N28), replaceConsVar(O28, '$existential'('?TIME2', exists(P28, instance(P28, 'TimePoint')and instance('?TIME2', 'TimePoint')and before(P28, '?TIME2')and forall(Q28, beforeOrEqual(P28, Q28)and beforeOrEqual(Q28, '?TIME2')=>time(N28, Q28))))), replaceConsVar(P28, '$existential'('?TIME1', instance('?TIME1', 'TimePoint')and instance(O28, 'TimePoint')and before('?TIME1', O28)and forall(Q28, beforeOrEqual('?TIME1', Q28)and beforeOrEqual(Q28, O28)=>time(N28, Q28)))), forall(Q28)], ['OBJ'=N28, 'TIME1'=P28, 'TIME2'=O28, 'TIME'=Q28], 'Merge', 'TEMPORAL CONCEPTS', 4196, 'Anonymous', on).
mooCache(result(O31, P31)=>forall(Q31, before(Q31, 'BeginFn'('WhenFn'(O31)))=>not time(P31, Q31)), entails(before(Q31, 'BeginFn'('WhenFn'(O31)))and time(P31, Q31), not result(O31, P31))and entails(result(O31, P31)and time(P31, Q31), not before(Q31, 'BeginFn'('WhenFn'(O31))))and entails(result(O31, P31)and before(Q31, 'BeginFn'('WhenFn'(O31))), not time(P31, Q31)), [domainV(Q31, [before:1, time:2]), domainV(P31, [result:2, time:1]), domainV(O31, ['WhenFn':1, result:1]), domainV(_G8404, []), forall(O31), forall(P31), forall(Q31)], ['PROC'=O31, 'OBJ'=P31, 'TIME'=Q31], 'Merge', 'TEMPORAL CONCEPTS', 4198, 'Anonymous', on).
mooCache(instance(beforeOrEqual, 'BinaryPredicate'), instance(beforeOrEqual, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4200, 'Anonymous', on).
mooCache(instance(beforeOrEqual, 'PartialOrderingRelation'), instance(beforeOrEqual, 'PartialOrderingRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4202, 'Anonymous', on).
mooCache(domain(beforeOrEqual, 1, 'TimePoint'), domain(beforeOrEqual, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4204, 'Anonymous', on).
mooCache(domain(beforeOrEqual, 2, 'TimePoint'), domain(beforeOrEqual, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4206, 'Anonymous', on).
mooCache(documentation(beforeOrEqual, string('"(beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1   is identical with ?POINT2 or occurs before it on the universal timeline."')), documentation(beforeOrEqual, string('"(beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1   is identical with ?POINT2 or occurs before it on the universal timeline."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4208, 'Anonymous', on).
mooCache(beforeOrEqual(N4, O4)=>before(N4, O4)or equal(N4, O4), entails(not before(N4, O4)and not equal(N4, O4), not beforeOrEqual(N4, O4))and entails(beforeOrEqual(N4, O4)and not equal(N4, O4), before(N4, O4))and entails(beforeOrEqual(N4, O4)and not before(N4, O4), equal(N4, O4)), [domainV(O4, [before:2, beforeOrEqual:2]), domainV(N4, [before:1, beforeOrEqual:1]), domainV(_G6154, []), forall(N4), forall(O4)], ['POINT1'=N4, 'POINT2'=O4], 'Merge', 'TEMPORAL CONCEPTS', 4210, 'Anonymous', on).
mooCache(instance(temporallyBetween, 'TemporalRelation'), instance(temporallyBetween, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4212, 'Anonymous', on).
mooCache(instance(temporallyBetween, 'TernaryPredicate'), instance(temporallyBetween, 'TernaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4214, 'Anonymous', on).
mooCache(subrelation(temporallyBetween, temporallyBetweenOrEqual), subrelation(temporallyBetween, temporallyBetweenOrEqual), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4216, 'Anonymous', on).
mooCache(domain(temporallyBetween, 1, 'TimePoint'), domain(temporallyBetween, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4218, 'Anonymous', on).
mooCache(domain(temporallyBetween, 2, 'TimePoint'), domain(temporallyBetween, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4220, 'Anonymous', on).
mooCache(domain(temporallyBetween, 3, 'TimePoint'), domain(temporallyBetween, 3, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4222, 'Anonymous', on).
mooCache(documentation(temporallyBetween, string('"(temporallyBetween ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT2 is between the TimePoints   ?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before   ?POINT3."')), documentation(temporallyBetween, string('"(temporallyBetween ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT2 is between the TimePoints   ?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before   ?POINT3."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4224, 'Anonymous', on).
mooCache(temporallyBetween(Q19, R19, S19)<=>before(Q19, R19)and before(R19, S19), (entails(temporallyBetween(Q19, R19, S19), before(Q19, R19))and entails(temporallyBetween(Q19, R19, S19), before(R19, S19))and entails(not before(Q19, R19)or not before(R19, S19), not temporallyBetween(Q19, R19, S19)))and entails(before(Q19, R19)and before(R19, S19), temporallyBetween(Q19, R19, S19))and entails(not temporallyBetween(Q19, R19, S19)and before(R19, S19), not before(Q19, R19))and entails(not temporallyBetween(Q19, R19, S19)and before(Q19, R19), not before(R19, S19)), [domainV(S19, [before:2, temporallyBetween:3]), domainV(R19, [before:1, before:2, temporallyBetween:2]), domainV(Q19, [before:1, temporallyBetween:1]), domainV(_G7255, []), forall(Q19), forall(R19), forall(S19)], ['POINT1'=Q19, 'POINT2'=R19, 'POINT3'=S19], 'Merge', 'TEMPORAL CONCEPTS', 4226, 'Anonymous', on).
mooCache(instance(temporallyBetweenOrEqual, 'TemporalRelation'), instance(temporallyBetweenOrEqual, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4228, 'Anonymous', on).
mooCache(instance(temporallyBetweenOrEqual, 'TernaryPredicate'), instance(temporallyBetweenOrEqual, 'TernaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4230, 'Anonymous', on).
mooCache(domain(temporallyBetweenOrEqual, 1, 'TimePoint'), domain(temporallyBetweenOrEqual, 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4232, 'Anonymous', on).
mooCache(domain(temporallyBetweenOrEqual, 2, 'TimePoint'), domain(temporallyBetweenOrEqual, 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4234, 'Anonymous', on).
mooCache(domain(temporallyBetweenOrEqual, 3, 'TimePoint'), domain(temporallyBetweenOrEqual, 3, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4236, 'Anonymous', on).
mooCache(documentation(temporallyBetweenOrEqual, string('"(temporallyBetweenOrEqual ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT1 is before or equal to the   TimePoint ?POINT2 and ?POINT2 is before or equal to the TimePoint   ?POINT3."')), documentation(temporallyBetweenOrEqual, string('"(temporallyBetweenOrEqual ?POINT1 ?POINT2   ?POINT3) means that the TimePoint ?POINT1 is before or equal to the   TimePoint ?POINT2 and ?POINT2 is before or equal to the TimePoint   ?POINT3."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4238, 'Anonymous', on).
mooCache(temporallyBetweenOrEqual(J33, K33, L33)<=>beforeOrEqual(J33, K33)and beforeOrEqual(K33, L33), (entails(temporallyBetweenOrEqual(J33, K33, L33), beforeOrEqual(J33, K33))and entails(temporallyBetweenOrEqual(J33, K33, L33), beforeOrEqual(K33, L33))and entails(not beforeOrEqual(J33, K33)or not beforeOrEqual(K33, L33), not temporallyBetweenOrEqual(J33, K33, L33)))and entails(beforeOrEqual(J33, K33)and beforeOrEqual(K33, L33), temporallyBetweenOrEqual(J33, K33, L33))and entails(not temporallyBetweenOrEqual(J33, K33, L33)and beforeOrEqual(K33, L33), not beforeOrEqual(J33, K33))and entails(not temporallyBetweenOrEqual(J33, K33, L33)and beforeOrEqual(J33, K33), not beforeOrEqual(K33, L33)), [domainV(L33, [beforeOrEqual:2, temporallyBetweenOrEqual:3]), domainV(K33, [beforeOrEqual:1, beforeOrEqual:2, temporallyBetweenOrEqual:2]), domainV(J33, [beforeOrEqual:1, temporallyBetweenOrEqual:1]), domainV(_G7381, []), forall(J33), forall(K33), forall(L33)], ['POINT1'=J33, 'POINT2'=K33, 'POINT3'=L33], 'Merge', 'TEMPORAL CONCEPTS', 4240, 'Anonymous', on).
mooCache(time(U35, V35)and instance(V35, 'TimePoint')<=>temporallyBetweenOrEqual('BeginFn'('WhenFn'(U35)), V35, 'EndFn'('WhenFn'(U35))), (entails(time(U35, V35)and instance(V35, 'TimePoint'), temporallyBetweenOrEqual('BeginFn'('WhenFn'(U35)), V35, 'EndFn'('WhenFn'(U35))))and entails(not temporallyBetweenOrEqual('BeginFn'('WhenFn'(U35)), V35, 'EndFn'('WhenFn'(U35)))and instance(V35, 'TimePoint'), not time(U35, V35))and entails(not temporallyBetweenOrEqual('BeginFn'('WhenFn'(U35)), V35, 'EndFn'('WhenFn'(U35)))and time(U35, V35), not instance(V35, 'TimePoint')))and entails(temporallyBetweenOrEqual('BeginFn'('WhenFn'(U35)), V35, 'EndFn'('WhenFn'(U35))), time(U35, V35))and entails(temporallyBetweenOrEqual('BeginFn'('WhenFn'(U35)), V35, 'EndFn'('WhenFn'(U35))), instance(V35, 'TimePoint'))and entails(not time(U35, V35)or not instance(V35, 'TimePoint'), not temporallyBetweenOrEqual('BeginFn'('WhenFn'(U35)), V35, 'EndFn'('WhenFn'(U35)))), [domainV(V35, ['$instanceof':'TimePoint', temporallyBetweenOrEqual:2, time:2]), domainV(U35, ['WhenFn':1, time:1]), domainV(_G8153, []), forall(U35), forall(V35)], ['PHYS'=U35, 'TIME'=V35], 'Merge', 'TEMPORAL CONCEPTS', 4242, 'Anonymous', on).
mooCache(instance(overlapsTemporally, 'BinaryPredicate'), instance(overlapsTemporally, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4244, 'Anonymous', on).
mooCache(instance(overlapsTemporally, 'TemporalRelation'), instance(overlapsTemporally, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4246, 'Anonymous', on).
mooCache(instance(overlapsTemporally, 'PartialOrderingRelation'), instance(overlapsTemporally, 'PartialOrderingRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4248, 'Anonymous', on).
mooCache(domain(overlapsTemporally, 1, 'TimeInterval'), domain(overlapsTemporally, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4250, 'Anonymous', on).
mooCache(domain(overlapsTemporally, 2, 'TimeInterval'), domain(overlapsTemporally, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4252, 'Anonymous', on).
mooCache(documentation(overlapsTemporally, string('"(overlapsTemporally ?INTERVAL1   ?INTERVAL2) means that the two TimeIntervals ?INTERVAL1 and ?INTERVAL2   have a TimeInterval in common.  Note that this is consistent with   ?INTERVAL1 and ?INTERVAL2 being the same TimeInterval."')), documentation(overlapsTemporally, string('"(overlapsTemporally ?INTERVAL1   ?INTERVAL2) means that the two TimeIntervals ?INTERVAL1 and ?INTERVAL2   have a TimeInterval in common.  Note that this is consistent with   ?INTERVAL1 and ?INTERVAL2 being the same TimeInterval."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4254, 'Anonymous', on).
mooCache(overlapsTemporally(W10, X10)<=>equal(W10, X10)or during(W10, X10)or starts(W10, X10)or finishes(W10, X10), (entails(not overlapsTemporally(W10, X10), not equal(W10, X10))and entails(not overlapsTemporally(W10, X10), not during(W10, X10))and entails(not overlapsTemporally(W10, X10), not starts(W10, X10))and entails(not overlapsTemporally(W10, X10), not finishes(W10, X10))and entails(equal(W10, X10)or during(W10, X10)or starts(W10, X10)or finishes(W10, X10), overlapsTemporally(W10, X10)))and entails(not equal(W10, X10)and not during(W10, X10)and not starts(W10, X10)and not finishes(W10, X10), not overlapsTemporally(W10, X10))and entails(overlapsTemporally(W10, X10)and not during(W10, X10)and not starts(W10, X10)and not finishes(W10, X10), equal(W10, X10))and entails(overlapsTemporally(W10, X10)and not equal(W10, X10)and not starts(W10, X10)and not finishes(W10, X10), during(W10, X10))and entails(overlapsTemporally(W10, X10)and not equal(W10, X10)and not during(W10, X10)and not finishes(W10, X10), starts(W10, X10))and entails(overlapsTemporally(W10, X10)and not equal(W10, X10)and not during(W10, X10)and not starts(W10, X10), finishes(W10, X10)), [domainV(X10, [during:2, finishes:2, overlapsTemporally:2, starts:2]), domainV(W10, [during:1, finishes:1, overlapsTemporally:1, starts:1]), domainV(_G10098, []), forall(W10), forall(X10)], ['INTERVAL1'=W10, 'INTERVAL2'=X10], 'Merge', 'TEMPORAL CONCEPTS', 4256, 'Anonymous', on).
mooCache(instance(O13, 'SpatialRelation')and holds(O13, P13, Q13)=>overlapsTemporally('WhenFn'(P13), 'WhenFn'(Q13)), entails(instance(O13, 'SpatialRelation')and holds(O13, P13, Q13), overlapsTemporally('WhenFn'(P13), 'WhenFn'(Q13)))and entails(not overlapsTemporally('WhenFn'(P13), 'WhenFn'(Q13))and holds(O13, P13, Q13), not instance(O13, 'SpatialRelation'))and entails(not overlapsTemporally('WhenFn'(P13), 'WhenFn'(Q13))and instance(O13, 'SpatialRelation'), not holds(O13, P13, Q13)), [domainV(Q13, ['WhenFn':1, O13:2]), domainV(P13, ['WhenFn':1, O13:1]), domainV(O13, ['$instanceof':'SpatialRelation', holds:1]), domainV(_G7033, []), forall(O13), forall(P13), forall(Q13)], ['REL'=O13, 'OBJ1'=P13, 'OBJ2'=Q13], 'Merge', 'TEMPORAL CONCEPTS', 4258, 'Anonymous', on).
mooCache(instance(during, 'TemporalRelation'), instance(during, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4260, 'Anonymous', on).
mooCache(instance(during, 'TransitiveRelation'), instance(during, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4262, 'Anonymous', on).
mooCache(instance(during, 'IrreflexiveRelation'), instance(during, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4264, 'Anonymous', on).
mooCache(subrelation(during, overlapsTemporally), subrelation(during, overlapsTemporally), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4266, 'Anonymous', on).
mooCache(domain(during, 1, 'TimeInterval'), domain(during, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4268, 'Anonymous', on).
mooCache(domain(during, 2, 'TimeInterval'), domain(during, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4270, 'Anonymous', on).
mooCache(documentation(during, string('"(during ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 starts after and ends before ?INTERVAL2."')), documentation(during, string('"(during ?INTERVAL1 ?INTERVAL2) means that   ?INTERVAL1 starts after and ends before ?INTERVAL2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4272, 'Anonymous', on).
mooCache(during(U28, V28)=>before('EndFn'(U28), 'EndFn'(V28))and before('BeginFn'(V28), 'BeginFn'(U28)), (entails(not before('EndFn'(U28), 'EndFn'(V28)), not during(U28, V28))and entails(during(U28, V28), before('EndFn'(U28), 'EndFn'(V28))))and entails(not before('BeginFn'(V28), 'BeginFn'(U28)), not during(U28, V28))and entails(during(U28, V28), before('BeginFn'(V28), 'BeginFn'(U28))), [domainV(V28, ['BeginFn':1, 'EndFn':1, during:2]), domainV(U28, ['BeginFn':1, 'EndFn':1, during:1]), domainV(_G7840, []), forall(U28), forall(V28)], ['INTERVAL1'=U28, 'INTERVAL2'=V28], 'Merge', 'TEMPORAL CONCEPTS', 4274, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'BinaryPredicate'), instance(meetsTemporally, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4276, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'TemporalRelation'), instance(meetsTemporally, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4278, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'AsymmetricRelation'), instance(meetsTemporally, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4280, 'Anonymous', on).
mooCache(instance(meetsTemporally, 'IntransitiveRelation'), instance(meetsTemporally, 'IntransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4282, 'Anonymous', on).
mooCache(domain(meetsTemporally, 1, 'TimeInterval'), domain(meetsTemporally, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4284, 'Anonymous', on).
mooCache(domain(meetsTemporally, 2, 'TimeInterval'), domain(meetsTemporally, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4286, 'Anonymous', on).
mooCache(documentation(meetsTemporally, string('"(meetsTemporally ?INTERVAL1 ?INTERVAL2)   means that the terminal point of the TimeInterval ?INTERVAL1 is the   initial point of the TimeInterval ?INTERVAL2."')), documentation(meetsTemporally, string('"(meetsTemporally ?INTERVAL1 ?INTERVAL2)   means that the terminal point of the TimeInterval ?INTERVAL1 is the   initial point of the TimeInterval ?INTERVAL2."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4288, 'Anonymous', on).
mooCache(meetsTemporally(E5, F5)<=>equal('EndFn'(E5), 'BeginFn'(F5)), (entails(meetsTemporally(E5, F5), equal('EndFn'(E5), 'BeginFn'(F5)))and entails(not equal('EndFn'(E5), 'BeginFn'(F5)), not meetsTemporally(E5, F5)))and entails(equal('EndFn'(E5), 'BeginFn'(F5)), meetsTemporally(E5, F5))and entails(not meetsTemporally(E5, F5), not equal('EndFn'(E5), 'BeginFn'(F5))), [domainV(F5, ['BeginFn':1, meetsTemporally:2]), domainV(E5, ['EndFn':1, meetsTemporally:1]), domainV(_G5701, []), forall(E5), forall(F5)], ['INTERVAL1'=E5, 'INTERVAL2'=F5], 'Merge', 'TEMPORAL CONCEPTS', 4290, 'Anonymous', on).
mooCache(equal('BeginFn'(L7), 'BeginFn'(M7))and equal('EndFn'(L7), 'EndFn'(M7))=>equal(L7, M7), entails(equal('BeginFn'(L7), 'BeginFn'(M7))and equal('EndFn'(L7), 'EndFn'(M7)), equal(L7, M7))and entails(not equal(L7, M7)and equal('EndFn'(L7), 'EndFn'(M7)), not equal('BeginFn'(L7), 'BeginFn'(M7)))and entails(not equal(L7, M7)and equal('BeginFn'(L7), 'BeginFn'(M7)), not equal('EndFn'(L7), 'EndFn'(M7))), [domainV(M7, ['BeginFn':1, 'EndFn':1]), domainV(L7, ['BeginFn':1, 'EndFn':1]), domainV(_G7730, []), forall(L7), forall(M7)], ['INTERVAL1'=L7, 'INTERVAL2'=M7], 'Merge', 'TEMPORAL CONCEPTS', 4292, 'Anonymous', on).
mooCache(instance(earlier, 'BinaryPredicate'), instance(earlier, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4294, 'Anonymous', on).
mooCache(instance(earlier, 'TemporalRelation'), instance(earlier, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4296, 'Anonymous', on).
mooCache(instance(earlier, 'TransitiveRelation'), instance(earlier, 'TransitiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4298, 'Anonymous', on).
mooCache(instance(earlier, 'IrreflexiveRelation'), instance(earlier, 'IrreflexiveRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4300, 'Anonymous', on).
mooCache(domain(earlier, 1, 'TimeInterval'), domain(earlier, 1, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4302, 'Anonymous', on).
mooCache(domain(earlier, 2, 'TimeInterval'), domain(earlier, 2, 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4304, 'Anonymous', on).
mooCache(documentation(earlier, string('"(earlier INTERVAL1 INTERVAL2) means that   INTERVAL1 ends before INTERVAL2 begins."')), documentation(earlier, string('"(earlier INTERVAL1 INTERVAL2) means that   INTERVAL1 ends before INTERVAL2 begins."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4306, 'Anonymous', on).
mooCache(earlier(K22, L22)<=>before('EndFn'(K22), 'BeginFn'(L22)), (entails(earlier(K22, L22), before('EndFn'(K22), 'BeginFn'(L22)))and entails(not before('EndFn'(K22), 'BeginFn'(L22)), not earlier(K22, L22)))and entails(before('EndFn'(K22), 'BeginFn'(L22)), earlier(K22, L22))and entails(not earlier(K22, L22), not before('EndFn'(K22), 'BeginFn'(L22))), [domainV(L22, ['BeginFn':1, earlier:2]), domainV(K22, ['EndFn':1, earlier:1]), domainV(_G5696, []), forall(K22), forall(L22)], ['INTERVAL1'=K22, 'INTERVAL2'=L22], 'Merge', 'TEMPORAL CONCEPTS', 4308, 'Anonymous', on).
mooCache(instance(cooccur, 'BinaryPredicate'), instance(cooccur, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4310, 'Anonymous', on).
mooCache(instance(cooccur, 'TemporalRelation'), instance(cooccur, 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4312, 'Anonymous', on).
mooCache(instance(cooccur, 'EquivalenceRelation'), instance(cooccur, 'EquivalenceRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4314, 'Anonymous', on).
mooCache(domain(cooccur, 1, 'Physical'), domain(cooccur, 1, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4316, 'Anonymous', on).
mooCache(domain(cooccur, 2, 'Physical'), domain(cooccur, 2, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4318, 'Anonymous', on).
mooCache(documentation(cooccur, string('"(cooccur ?THING1 ?THING2) means that the   Object or Process ?THING1 occurs at the same time as, together with,   or jointly with the Object or Process ?THING2.  This covers the   following temporal relations:  is co-incident with, is concurrent with,   is contemporaneous with, and is concomitant with."')), documentation(cooccur, string('"(cooccur ?THING1 ?THING2) means that the   Object or Process ?THING1 occurs at the same time as, together with,   or jointly with the Object or Process ?THING2.  This covers the   following temporal relations:  is co-incident with, is concurrent with,   is contemporaneous with, and is concomitant with."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4320, 'Anonymous', on).
mooCache(cooccur(L35, M35)<=>equal('WhenFn'(L35), 'WhenFn'(M35)), (entails(cooccur(L35, M35), equal('WhenFn'(L35), 'WhenFn'(M35)))and entails(not equal('WhenFn'(L35), 'WhenFn'(M35)), not cooccur(L35, M35)))and entails(equal('WhenFn'(L35), 'WhenFn'(M35)), cooccur(L35, M35))and entails(not cooccur(L35, M35), not equal('WhenFn'(L35), 'WhenFn'(M35))), [domainV(M35, ['WhenFn':1, cooccur:2]), domainV(L35, ['WhenFn':1, cooccur:1]), domainV(_G5557, []), forall(L35), forall(M35)], ['PHYS1'=L35, 'PHYS2'=M35], 'Merge', 'TEMPORAL CONCEPTS', 4322, 'Anonymous', on).
mooCache(instance('TimeIntervalFn', 'BinaryFunction'), instance('TimeIntervalFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4326, 'Anonymous', on).
mooCache(instance('TimeIntervalFn', 'TemporalRelation'), instance('TimeIntervalFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4328, 'Anonymous', on).
mooCache(domain('TimeIntervalFn', 1, 'TimePoint'), domain('TimeIntervalFn', 1, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4330, 'Anonymous', on).
mooCache(domain('TimeIntervalFn', 2, 'TimePoint'), domain('TimeIntervalFn', 2, 'TimePoint'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4332, 'Anonymous', on).
mooCache(range('TimeIntervalFn', 'TimeInterval'), range('TimeIntervalFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4334, 'Anonymous', on).
mooCache(documentation('TimeIntervalFn', string('"A BinaryFunction that takes two TimePoints   as arguments and returns the TimeInterval defined by these two TimePoints.    Note that the first TimePoint must occur earlier than the second TimePoint."')), documentation('TimeIntervalFn', string('"A BinaryFunction that takes two TimePoints   as arguments and returns the TimeInterval defined by these two TimePoints.    Note that the first TimePoint must occur earlier than the second TimePoint."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4336, 'Anonymous', on).
mooCache(equal('TimeIntervalFn'(D10, E10), F10)=>equal('BeginFn'(F10), D10)and equal('EndFn'(F10), E10), (entails(not holds('BeginFn', F10, D10), not holds('TimeIntervalFn', D10, E10, F10))and entails(holds('TimeIntervalFn', D10, E10, F10), holds('BeginFn', F10, D10)))and entails(not holds('EndFn', F10, E10), not holds('TimeIntervalFn', D10, E10, F10))and entails(holds('TimeIntervalFn', D10, E10, F10), holds('EndFn', F10, E10)), [domainV(F10, ['BeginFn':1, 'EndFn':1, 'TimeIntervalFn':3]), domainV(E10, ['EndFn':2, 'TimeIntervalFn':2]), domainV(D10, ['BeginFn':2, 'TimeIntervalFn':1]), domainV(_G7776, []), forall(D10), forall(E10), forall(F10)], ['POINT1'=D10, 'POINT2'=E10, 'INTERVAL'=F10], 'Merge', 'TEMPORAL CONCEPTS', 4338, 'Anonymous', on).
mooCache(equal('TimeIntervalFn'(L12, M12), N12)=>forall(O12, temporallyBetweenOrEqual(L12, O12, M12)<=>temporalPart(O12, N12)), entails(not temporalPart(O12, N12)and temporalPart(O12, N12), not holds('TimeIntervalFn', L12, M12, N12))and (entails(not temporalPart(O12, N12)and temporallyBetweenOrEqual(L12, O12, M12), not holds('TimeIntervalFn', L12, M12, N12))and entails(holds('TimeIntervalFn', L12, M12, N12)and temporallyBetweenOrEqual(L12, O12, M12), temporalPart(O12, N12))and entails(holds('TimeIntervalFn', L12, M12, N12)and not temporalPart(O12, N12), not temporallyBetweenOrEqual(L12, O12, M12)))and entails(not temporallyBetweenOrEqual(L12, O12, M12)and temporallyBetweenOrEqual(L12, O12, M12), not holds('TimeIntervalFn', L12, M12, N12))and entails(not temporallyBetweenOrEqual(L12, O12, M12)and temporalPart(O12, N12), not holds('TimeIntervalFn', L12, M12, N12))and entails(holds('TimeIntervalFn', L12, M12, N12)and temporalPart(O12, N12), temporallyBetweenOrEqual(L12, O12, M12))and entails(holds('TimeIntervalFn', L12, M12, N12)and not temporallyBetweenOrEqual(L12, O12, M12), not temporalPart(O12, N12)), [domainV(O12, [temporalPart:1, temporallyBetweenOrEqual:2]), domainV(N12, ['TimeIntervalFn':3, temporalPart:2]), domainV(M12, ['TimeIntervalFn':2, temporallyBetweenOrEqual:3]), domainV(L12, ['TimeIntervalFn':1, temporallyBetweenOrEqual:1]), domainV(_G9406, []), forall(L12), forall(M12), forall(N12), forall(O12)], ['POINT1'=L12, 'POINT2'=M12, 'INTERVAL'=N12, 'POINT'=O12], 'Merge', 'TEMPORAL CONCEPTS', 4340, 'Anonymous', on).
mooCache(instance('WhenFn', 'TemporalRelation'), instance('WhenFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4342, 'Anonymous', on).
mooCache(instance('WhenFn', 'UnaryFunction'), instance('WhenFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4344, 'Anonymous', on).
mooCache(domain('WhenFn', 1, 'Physical'), domain('WhenFn', 1, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4346, 'Anonymous', on).
mooCache(range('WhenFn', 'TimeInterval'), range('WhenFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4348, 'Anonymous', on).
mooCache(documentation('WhenFn', string('"A UnaryFunction that maps an Object or   Process to the exact TimeInterval during which it exists.  Note   that, for every TimePoint ?TIME outside of the TimeInterval   (WhenFn ?THING), (time ?THING ?TIME) does not hold."')), documentation('WhenFn', string('"A UnaryFunction that maps an Object or   Process to the exact TimeInterval during which it exists.  Note   that, for every TimePoint ?TIME outside of the TimeInterval   (WhenFn ?THING), (time ?THING ?TIME) does not hold."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4350, 'Anonymous', on).
mooCache(before('BeginFn'('WhenFn'(A28)), 'EndFn'('WhenFn'(A28))), before('BeginFn'('WhenFn'(A28)), 'EndFn'('WhenFn'(A28))), [domainV(A28, ['WhenFn':1]), domainV(_G4162, []), forall(A28)], ['THING'=A28], 'Merge', 'TEMPORAL CONCEPTS', 4352, 'Anonymous', on).
mooCache(instance('PastFn', 'TemporalRelation'), instance('PastFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4354, 'Anonymous', on).
mooCache(instance('PastFn', 'UnaryFunction'), instance('PastFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4356, 'Anonymous', on).
mooCache(domain('PastFn', 1, 'TimePosition'), domain('PastFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4358, 'Anonymous', on).
mooCache(range('PastFn', 'TimeInterval'), range('PastFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4360, 'Anonymous', on).
mooCache(documentation('PastFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval that meets it and that begins at   NegativeInfinity."')), documentation('PastFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval that meets it and that begins at   NegativeInfinity."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4362, 'Anonymous', on).
mooCache(meetsTemporally('PastFn'('WhenFn'(L)), 'WhenFn'(L)), meetsTemporally('PastFn'('WhenFn'(L)), 'WhenFn'(L)), [domainV(L, ['WhenFn':1]), domainV(_G3827, []), forall(L)], ['THING'=L], 'Merge', 'TEMPORAL CONCEPTS', 4364, 'Anonymous', on).
mooCache(equal('BeginFn'('PastFn'(H2)), 'NegativeInfinity'), equal('BeginFn'('PastFn'(H2)), 'NegativeInfinity'), [domainV(H2, ['PastFn':1]), domainV(_G3207, []), forall(H2)], ['TIME'=H2], 'Merge', 'TEMPORAL CONCEPTS', 4366, 'Anonymous', on).
mooCache(instance('ImmediatePastFn', 'TemporalRelation'), instance('ImmediatePastFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4368, 'Anonymous', on).
mooCache(instance('ImmediatePastFn', 'UnaryFunction'), instance('ImmediatePastFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4370, 'Anonymous', on).
mooCache(domain('ImmediatePastFn', 1, 'TimePosition'), domain('ImmediatePastFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4372, 'Anonymous', on).
mooCache(range('ImmediatePastFn', 'TimeInterval'), range('ImmediatePastFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4374, 'Anonymous', on).
mooCache(documentation('ImmediatePastFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately precedes the TimePosition."')), documentation('ImmediatePastFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately precedes the TimePosition."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4376, 'Anonymous', on).
mooCache(finishes('ImmediatePastFn'('WhenFn'(D13)), 'PastFn'('WhenFn'(D13))), finishes('ImmediatePastFn'('WhenFn'(D13)), 'PastFn'('WhenFn'(D13))), [domainV(D13, ['WhenFn':1]), domainV(_G4228, []), forall(D13)], ['THING'=D13], 'Merge', 'TEMPORAL CONCEPTS', 4378, 'Anonymous', on).
mooCache(resource(K15, L15)and holdsDuring('ImmediatePastFn'('WhenFn'(K15)), measure(L15, M15))and holdsDuring('ImmediateFutureFn'('WhenFn'(K15)), measure(L15, N15))=>greaterThan(M15, N15), entails(resource(K15, L15)and holdsDuring('ImmediatePastFn'('WhenFn'(K15)), measure(L15, M15))and holdsDuring('ImmediateFutureFn'('WhenFn'(K15)), measure(L15, N15)), greaterThan(M15, N15))and entails(not greaterThan(M15, N15)and holdsDuring('ImmediatePastFn'('WhenFn'(K15)), measure(L15, M15))and holdsDuring('ImmediateFutureFn'('WhenFn'(K15)), measure(L15, N15)), not resource(K15, L15))and entails(not greaterThan(M15, N15)and resource(K15, L15)and holdsDuring('ImmediateFutureFn'('WhenFn'(K15)), measure(L15, N15)), not holdsDuring('ImmediatePastFn'('WhenFn'(K15)), measure(L15, M15)))and entails(not greaterThan(M15, N15)and resource(K15, L15)and holdsDuring('ImmediatePastFn'('WhenFn'(K15)), measure(L15, M15)), not holdsDuring('ImmediateFutureFn'('WhenFn'(K15)), measure(L15, N15))), [domainV(N15, [greaterThan:2, measure:2]), domainV(M15, [greaterThan:1, measure:2]), domainV(L15, [measure:1, resource:2]), domainV(K15, ['WhenFn':1, resource:1]), domainV(_G10855, []), forall(K15), forall(L15), forall(M15), forall(N15)], ['PROC'=K15, 'OBJ'=L15, 'QUANT1'=M15, 'QUANT2'=N15], 'Merge', 'TEMPORAL CONCEPTS', 4380, 'Anonymous', on).
mooCache(instance('FutureFn', 'TemporalRelation'), instance('FutureFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4382, 'Anonymous', on).
mooCache(instance('FutureFn', 'UnaryFunction'), instance('FutureFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4384, 'Anonymous', on).
mooCache(domain('FutureFn', 1, 'TimePosition'), domain('FutureFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4386, 'Anonymous', on).
mooCache(range('FutureFn', 'TimeInterval'), range('FutureFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4388, 'Anonymous', on).
mooCache(documentation('FutureFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval which it meets and which ends at   PositiveInfinity."')), documentation('FutureFn', string('"A UnaryFunction that maps a TimePosition   to the TimeInterval which it meets and which ends at   PositiveInfinity."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4390, 'Anonymous', on).
mooCache(meetsTemporally('WhenFn'(U26), 'FutureFn'('WhenFn'(U26))), meetsTemporally('WhenFn'(U26), 'FutureFn'('WhenFn'(U26))), [domainV(U26, ['WhenFn':1]), domainV(_G3839, []), forall(U26)], ['THING'=U26], 'Merge', 'TEMPORAL CONCEPTS', 4392, 'Anonymous', on).
mooCache(equal('EndFn'('FutureFn'(Q28)), 'PositiveInfinity'), equal('EndFn'('FutureFn'(Q28)), 'PositiveInfinity'), [domainV(Q28, ['FutureFn':1]), domainV(_G3207, []), forall(Q28)], ['TIME'=Q28], 'Merge', 'TEMPORAL CONCEPTS', 4394, 'Anonymous', on).
mooCache(instance('ImmediateFutureFn', 'TemporalRelation'), instance('ImmediateFutureFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4396, 'Anonymous', on).
mooCache(instance('ImmediateFutureFn', 'UnaryFunction'), instance('ImmediateFutureFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4398, 'Anonymous', on).
mooCache(domain('ImmediateFutureFn', 1, 'TimePosition'), domain('ImmediateFutureFn', 1, 'TimePosition'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4400, 'Anonymous', on).
mooCache(range('ImmediateFutureFn', 'TimeInterval'), range('ImmediateFutureFn', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4402, 'Anonymous', on).
mooCache(documentation('ImmediateFutureFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately follows the TimePosition."')), documentation('ImmediateFutureFn', string('"A UnaryFunction that maps a   TimePosition to a short, indeterminate TimeInterval that   immediately follows the TimePosition."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4404, 'Anonymous', on).
mooCache(starts('ImmediateFutureFn'('WhenFn'(A1)), 'FutureFn'('WhenFn'(A1))), starts('ImmediateFutureFn'('WhenFn'(A1)), 'FutureFn'('WhenFn'(A1))), [domainV(A1, ['WhenFn':1]), domainV(_G4240, []), forall(A1)], ['THING'=A1], 'Merge', 'TEMPORAL CONCEPTS', 4406, 'Anonymous', on).
mooCache(instance(date, 'BinaryPredicate'), instance(date, 'BinaryPredicate'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4412, 'Anonymous', on).
mooCache(instance(date, 'AsymmetricRelation'), instance(date, 'AsymmetricRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4414, 'Anonymous', on).
mooCache(domain(date, 1, 'Physical'), domain(date, 1, 'Physical'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4416, 'Anonymous', on).
mooCache(domain(date, 2, 'Day'), domain(date, 2, 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4418, 'Anonymous', on).
mooCache(subrelation(date, time), subrelation(date, time), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4420, 'Anonymous', on).
mooCache(singleValued(date, 2), singleValued(date, 2), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4422, 'Anonymous', on).
mooCache(documentation(date, string('"A BinaryPredicate that specifies a   TimePosition in absolute calendar time, at the resolution   of one day, for a particular Object or Process."')), documentation(date, string('"A BinaryPredicate that specifies a   TimePosition in absolute calendar time, at the resolution   of one day, for a particular Object or Process."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4424, 'Anonymous', on).
mooCache(instance('YearFn', 'TemporalRelation'), instance('YearFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4426, 'Anonymous', on).
mooCache(instance('YearFn', 'UnaryFunction'), instance('YearFn', 'UnaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4428, 'Anonymous', on).
mooCache(domain('YearFn', 1, 'Integer'), domain('YearFn', 1, 'Integer'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4430, 'Anonymous', on).
mooCache(range('YearFn', 'Year'), range('YearFn', 'Year'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4432, 'Anonymous', on).
mooCache(documentation('YearFn', string('"A UnaryFunction that maps a number to the   corresponding calendar Year.  For example, (YearFn 1912) denotes   the Year 1912."')), documentation('YearFn', string('"A UnaryFunction that maps a number to the   corresponding calendar Year.  For example, (YearFn 1912) denotes   the Year 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4434, 'Anonymous', on).
mooCache(instance('MonthFn', 'TemporalRelation'), instance('MonthFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4436, 'Anonymous', on).
mooCache(instance('MonthFn', 'BinaryFunction'), instance('MonthFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4438, 'Anonymous', on).
mooCache(domainSubclass('MonthFn', 1, 'Month'), domainSubclass('MonthFn', 1, 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4440, 'Anonymous', on).
mooCache(domain('MonthFn', 2, 'Year'), domain('MonthFn', 2, 'Year'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4442, 'Anonymous', on).
mooCache(range('MonthFn', 'Month'), range('MonthFn', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4444, 'Anonymous', on).
mooCache(documentation('MonthFn', string('"A BinaryFunction that maps a subclass of   Month and an instance of Year to the corresponding Month of the   Year.  For example (MonthFn January (YearFn 1912)) denotes the   eighth Month, i.e. August, of the Year 1912."')), documentation('MonthFn', string('"A BinaryFunction that maps a subclass of   Month and an instance of Year to the corresponding Month of the   Year.  For example (MonthFn January (YearFn 1912)) denotes the   eighth Month, i.e. August, of the Year 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4446, 'Anonymous', on).
mooCache(instance('DayFn', 'TemporalRelation'), instance('DayFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4448, 'Anonymous', on).
mooCache(instance('DayFn', 'BinaryFunction'), instance('DayFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4450, 'Anonymous', on).
mooCache(domain('DayFn', 1, 'PositiveInteger'), domain('DayFn', 1, 'PositiveInteger'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4452, 'Anonymous', on).
mooCache(domain('DayFn', 2, 'Month'), domain('DayFn', 2, 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4454, 'Anonymous', on).
mooCache(range('DayFn', 'Day'), range('DayFn', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4456, 'Anonymous', on).
mooCache(documentation('DayFn', string('"A BinaryFunction that maps a number and a   Month to the corresponding Day of the Month.  For example,   (DayFn 18 (MonthFn 8 (YearFn 1912))) denotes the 18th day of   August 1912."')), documentation('DayFn', string('"A BinaryFunction that maps a number and a   Month to the corresponding Day of the Month.  For example,   (DayFn 18 (MonthFn 8 (YearFn 1912))) denotes the 18th day of   August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4458, 'Anonymous', on).
mooCache(instance('DayFn'(J7, K7), 'Day')=>lessThanOrEqualTo(J7, 31), entails(not lessThanOrEqualTo(J7, 31), not instance('DayFn'(J7, K7), 'Day'))and entails(instance('DayFn'(J7, K7), 'Day'), lessThanOrEqualTo(J7, 31)), [domainV(K7, ['DayFn':2]), domainV(J7, ['DayFn':1, lessThanOrEqualTo:1]), domainV(_G4697, []), forall(J7), forall(K7)], ['NUMBER'=J7, 'MONTH'=K7], 'Merge', 'TEMPORAL CONCEPTS', 4460, 'Anonymous', on).
mooCache(equal(P9, 'DayFn'(Q9, R9))and equal(S9, 'DayFn'(T9, R9))and equal('SubtractionFn'(T9, Q9), 1)=>meetsTemporally(P9, S9), entails(holds('DayFn', Q9, R9, P9)and holds('DayFn', T9, R9, S9)and equal('SubtractionFn'(T9, Q9), 1), meetsTemporally(P9, S9))and entails(not meetsTemporally(P9, S9)and holds('DayFn', T9, R9, S9)and equal('SubtractionFn'(T9, Q9), 1), not holds('DayFn', Q9, R9, P9))and entails(not meetsTemporally(P9, S9)and holds('DayFn', Q9, R9, P9)and equal('SubtractionFn'(T9, Q9), 1), not holds('DayFn', T9, R9, S9))and entails(not meetsTemporally(P9, S9)and holds('DayFn', Q9, R9, P9)and holds('DayFn', T9, R9, S9), not equal('SubtractionFn'(T9, Q9), 1)), [domainV(T9, ['DayFn':1, 'SubtractionFn':1]), domainV(S9, ['DayFn':3, meetsTemporally:2]), domainV(R9, ['DayFn':2]), domainV(Q9, ['DayFn':1, 'SubtractionFn':2]), domainV(P9, ['DayFn':3, meetsTemporally:1]), domainV(_G10022, []), forall(P9), forall(Q9), forall(R9), forall(S9), forall(T9)], ['DAY1'=P9, 'NUMBER1'=Q9, 'MONTH'=R9, 'DAY2'=S9, 'NUMBER2'=T9], 'Merge', 'TEMPORAL CONCEPTS', 4462, 'Anonymous', on).
mooCache(instance('HourFn', 'TemporalRelation'), instance('HourFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4464, 'Anonymous', on).
mooCache(instance('HourFn', 'BinaryFunction'), instance('HourFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4466, 'Anonymous', on).
mooCache(domain('HourFn', 1, 'PositiveRealNumber'), domain('HourFn', 1, 'PositiveRealNumber'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4468, 'Anonymous', on).
mooCache(domain('HourFn', 2, 'Day'), domain('HourFn', 2, 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4470, 'Anonymous', on).
mooCache(range('HourFn', 'Hour'), range('HourFn', 'Hour'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4472, 'Anonymous', on).
mooCache(documentation('HourFn', string('"A BinaryFunction that maps a number and a   Day to the corresponding Hour of the Day.  For example,    (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))) denotes the   14th hour, i.e. 2 PM, on the 18th day of August 1912."')), documentation('HourFn', string('"A BinaryFunction that maps a number and a   Day to the corresponding Hour of the Day.  For example,    (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))) denotes the   14th hour, i.e. 2 PM, on the 18th day of August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4474, 'Anonymous', on).
mooCache(instance('HourFn'(L22, M22), 'Hour')=>lessThan(L22, 24), entails(not lessThan(L22, 24), not instance('HourFn'(L22, M22), 'Hour'))and entails(instance('HourFn'(L22, M22), 'Hour'), lessThan(L22, 24)), [domainV(M22, ['HourFn':2]), domainV(L22, ['HourFn':1, lessThan:1]), domainV(_G4643, []), forall(L22), forall(M22)], ['NUMBER'=L22, 'DAY'=M22], 'Merge', 'TEMPORAL CONCEPTS', 4476, 'Anonymous', on).
mooCache(equal(Q24, 'HourFn'(R24, S24))and equal(T24, 'HourFn'(U24, S24))and equal('SubtractionFn'(U24, R24), 1)=>meetsTemporally(Q24, T24), entails(holds('HourFn', R24, S24, Q24)and holds('HourFn', U24, S24, T24)and equal('SubtractionFn'(U24, R24), 1), meetsTemporally(Q24, T24))and entails(not meetsTemporally(Q24, T24)and holds('HourFn', U24, S24, T24)and equal('SubtractionFn'(U24, R24), 1), not holds('HourFn', R24, S24, Q24))and entails(not meetsTemporally(Q24, T24)and holds('HourFn', R24, S24, Q24)and equal('SubtractionFn'(U24, R24), 1), not holds('HourFn', U24, S24, T24))and entails(not meetsTemporally(Q24, T24)and holds('HourFn', R24, S24, Q24)and holds('HourFn', U24, S24, T24), not equal('SubtractionFn'(U24, R24), 1)), [domainV(U24, ['HourFn':1, 'SubtractionFn':1]), domainV(T24, ['HourFn':3, meetsTemporally:2]), domainV(S24, ['HourFn':2]), domainV(R24, ['HourFn':1, 'SubtractionFn':2]), domainV(Q24, ['HourFn':3, meetsTemporally:1]), domainV(_G10034, []), forall(Q24), forall(R24), forall(S24), forall(T24), forall(U24)], ['HOUR1'=Q24, 'NUMBER1'=R24, 'DAY'=S24, 'HOUR2'=T24, 'NUMBER2'=U24], 'Merge', 'TEMPORAL CONCEPTS', 4478, 'Anonymous', on).
mooCache(instance('MinuteFn', 'TemporalRelation'), instance('MinuteFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4480, 'Anonymous', on).
mooCache(instance('MinuteFn', 'BinaryFunction'), instance('MinuteFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4482, 'Anonymous', on).
mooCache(domain('MinuteFn', 1, 'PositiveRealNumber'), domain('MinuteFn', 1, 'PositiveRealNumber'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4484, 'Anonymous', on).
mooCache(domain('MinuteFn', 2, 'Hour'), domain('MinuteFn', 2, 'Hour'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4486, 'Anonymous', on).
mooCache(range('MinuteFn', 'Minute'), range('MinuteFn', 'Minute'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4488, 'Anonymous', on).
mooCache(documentation('MinuteFn', string('"A BinaryFunction that maps a number and an   Hour to the corresponding Minute of the Hour.  For example,   (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))))   denotes 15 minutes after 2 PM on the 18th day of August 1912."')), documentation('MinuteFn', string('"A BinaryFunction that maps a number and an   Hour to the corresponding Minute of the Hour.  For example,   (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8 (YearFn 1912)))))   denotes 15 minutes after 2 PM on the 18th day of August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4490, 'Anonymous', on).
mooCache(instance('MinuteFn'(Q37, R37), 'Minute')=>lessThan(Q37, 60), entails(not lessThan(Q37, 60), not instance('MinuteFn'(Q37, R37), 'Minute'))and entails(instance('MinuteFn'(Q37, R37), 'Minute'), lessThan(Q37, 60)), [domainV(R37, ['MinuteFn':2]), domainV(Q37, ['MinuteFn':1, lessThan:1]), domainV(_G4673, []), forall(Q37), forall(R37)], ['NUMBER'=Q37, 'HOUR'=R37], 'Merge', 'TEMPORAL CONCEPTS', 4492, 'Anonymous', on).
mooCache(equal(J1, 'MinuteFn'(K1, L1))and equal(M1, 'MinuteFn'(N1, L1))and equal('SubtractionFn'(N1, K1), 1)=>meetsTemporally(J1, M1), entails(holds('MinuteFn', K1, L1, J1)and holds('MinuteFn', N1, L1, M1)and equal('SubtractionFn'(N1, K1), 1), meetsTemporally(J1, M1))and entails(not meetsTemporally(J1, M1)and holds('MinuteFn', N1, L1, M1)and equal('SubtractionFn'(N1, K1), 1), not holds('MinuteFn', K1, L1, J1))and entails(not meetsTemporally(J1, M1)and holds('MinuteFn', K1, L1, J1)and equal('SubtractionFn'(N1, K1), 1), not holds('MinuteFn', N1, L1, M1))and entails(not meetsTemporally(J1, M1)and holds('MinuteFn', K1, L1, J1)and holds('MinuteFn', N1, L1, M1), not equal('SubtractionFn'(N1, K1), 1)), [domainV(N1, ['MinuteFn':1, 'SubtractionFn':1]), domainV(M1, ['MinuteFn':3, meetsTemporally:2]), domainV(L1, ['MinuteFn':2]), domainV(K1, ['MinuteFn':1, 'SubtractionFn':2]), domainV(J1, ['MinuteFn':3, meetsTemporally:1]), domainV(_G10118, []), forall(J1), forall(K1), forall(L1), forall(M1), forall(N1)], ['MINUTE1'=J1, 'NUMBER1'=K1, 'HOUR'=L1, 'MINUTE2'=M1, 'NUMBER2'=N1], 'Merge', 'TEMPORAL CONCEPTS', 4494, 'Anonymous', on).
mooCache(instance('SecondFn', 'TemporalRelation'), instance('SecondFn', 'TemporalRelation'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4496, 'Anonymous', on).
mooCache(instance('SecondFn', 'BinaryFunction'), instance('SecondFn', 'BinaryFunction'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4498, 'Anonymous', on).
mooCache(domain('SecondFn', 1, 'PositiveRealNumber'), domain('SecondFn', 1, 'PositiveRealNumber'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4500, 'Anonymous', on).
mooCache(domain('SecondFn', 2, 'Minute'), domain('SecondFn', 2, 'Minute'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4502, 'Anonymous', on).
mooCache(range('SecondFn', 'Second'), range('SecondFn', 'Second'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4504, 'Anonymous', on).
mooCache(documentation('SecondFn', string('"A BinaryFunction that maps a number and a   Minute to the corresponding Second of the Minute.  For example,  (SecondFn 9 (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8   (YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the   18th day of August 1912."')), documentation('SecondFn', string('"A BinaryFunction that maps a number and a   Minute to the corresponding Second of the Minute.  For example,  (SecondFn 9 (MinuteFn 15 (HourFn 14 (DayFn 18 (MonthFn 8   (YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the   18th day of August 1912."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4506, 'Anonymous', on).
mooCache(instance('SecondFn'(B14, C14), 'Second')=>lessThan(B14, 60), entails(not lessThan(B14, 60), not instance('SecondFn'(B14, C14), 'Second'))and entails(instance('SecondFn'(B14, C14), 'Second'), lessThan(B14, 60)), [domainV(C14, ['SecondFn':2]), domainV(B14, ['SecondFn':1, lessThan:1]), domainV(_G4685, []), forall(B14), forall(C14)], ['NUMBER'=B14, 'MINUTE'=C14], 'Merge', 'TEMPORAL CONCEPTS', 4508, 'Anonymous', on).
mooCache(equal(G16, 'SecondFn'(H16, I16))and equal(J16, 'SecondFn'(K16, I16))and equal('SubtractionFn'(K16, H16), 1)=>meetsTemporally(G16, J16), entails(holds('SecondFn', H16, I16, G16)and holds('SecondFn', K16, I16, J16)and equal('SubtractionFn'(K16, H16), 1), meetsTemporally(G16, J16))and entails(not meetsTemporally(G16, J16)and holds('SecondFn', K16, I16, J16)and equal('SubtractionFn'(K16, H16), 1), not holds('SecondFn', H16, I16, G16))and entails(not meetsTemporally(G16, J16)and holds('SecondFn', H16, I16, G16)and equal('SubtractionFn'(K16, H16), 1), not holds('SecondFn', K16, I16, J16))and entails(not meetsTemporally(G16, J16)and holds('SecondFn', H16, I16, G16)and holds('SecondFn', K16, I16, J16), not equal('SubtractionFn'(K16, H16), 1)), [domainV(K16, ['SecondFn':1, 'SubtractionFn':1]), domainV(J16, ['SecondFn':3, meetsTemporally:2]), domainV(I16, ['SecondFn':2]), domainV(H16, ['SecondFn':1, 'SubtractionFn':2]), domainV(G16, ['SecondFn':3, meetsTemporally:1]), domainV(_G10142, []), forall(G16), forall(H16), forall(I16), forall(J16), forall(K16)], ['SECOND1'=G16, 'NUMBER1'=H16, 'MINUTE'=I16, 'SECOND2'=J16, 'NUMBER2'=K16], 'Merge', 'TEMPORAL CONCEPTS', 4510, 'Anonymous', on).
mooCache(subclass('Year', 'TimeInterval'), subclass('Year', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4512, 'Anonymous', on).
mooCache(relatedInternalConcept('Year', 'YearFn'), relatedInternalConcept('Year', 'YearFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4514, 'Anonymous', on).
mooCache(relatedInternalConcept('Year', 'YearDuration'), relatedInternalConcept('Year', 'YearDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4516, 'Anonymous', on).
mooCache(documentation('Year', string('"The Class of all calendar Years."')), documentation('Year', string('"The Class of all calendar Years."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4518, 'Anonymous', on).
mooCache(instance(K25, 'Year')=>duration(K25, 'YearDuration'), entails(not duration(K25, 'YearDuration'), not instance(K25, 'Year'))and entails(instance(K25, 'Year'), duration(K25, 'YearDuration')), [domainV(K25, ['$instanceof':'Year', duration:1]), domainV(_G3777, []), forall(K25)], ['YEAR'=K25], 'Merge', 'TEMPORAL CONCEPTS', 4520, 'Anonymous', on).
mooCache(instance(M27, 'Year')and instance(N27, 'Year')and equal('SubtractionFn'(N27, M27), 1)=>meetsTemporally(M27, N27), entails(instance(M27, 'Year')and instance(N27, 'Year')and equal('SubtractionFn'(N27, M27), 1), meetsTemporally(M27, N27))and entails(not meetsTemporally(M27, N27)and instance(N27, 'Year')and equal('SubtractionFn'(N27, M27), 1), not instance(M27, 'Year'))and entails(not meetsTemporally(M27, N27)and instance(M27, 'Year')and equal('SubtractionFn'(N27, M27), 1), not instance(N27, 'Year'))and entails(not meetsTemporally(M27, N27)and instance(M27, 'Year')and instance(N27, 'Year'), not equal('SubtractionFn'(N27, M27), 1)), [domainV(N27, ['$instanceof':'Year', 'SubtractionFn':1, meetsTemporally:2]), domainV(M27, ['$instanceof':'Year', 'SubtractionFn':2, meetsTemporally:1]), domainV(_G7497, []), forall(M27), forall(N27)], ['YEAR1'=M27, 'YEAR2'=N27], 'Merge', 'TEMPORAL CONCEPTS', 4522, 'Anonymous', on).
mooCache(subclass('LeapYear', 'Year'), subclass('LeapYear', 'Year'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4524, 'Anonymous', on).
mooCache(documentation('LeapYear', string('"The Class of all leap years.  These are years   which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly   divisible by 400 (this latter case is known as a leap century)."')), documentation('LeapYear', string('"The Class of all leap years.  These are years   which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly   divisible by 400 (this latter case is known as a leap century)."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4526, 'Anonymous', on).
mooCache(instance(L33, 'LeapYear')and equal(L33, 'MeasureFn'(M33, 'Year'))=>equal('RemainderFn'(M33, 4), 0)and not equal('RemainderFn'(M33, 100), 0)or equal('RemainderFn'(M33, 400), 0), (entails(holds('MeasureFn', M33, 'Year', L33)and not equal('RemainderFn'(M33, 4), 0)and not equal('RemainderFn'(M33, 400), 0), not instance(L33, 'LeapYear'))and entails(instance(L33, 'LeapYear')and not equal('RemainderFn'(M33, 4), 0)and not equal('RemainderFn'(M33, 400), 0), not holds('MeasureFn', M33, 'Year', L33))and entails((instance(L33, 'LeapYear')and holds('MeasureFn', M33, 'Year', L33))and not equal('RemainderFn'(M33, 400), 0), equal('RemainderFn'(M33, 4), 0))and entails((instance(L33, 'LeapYear')and holds('MeasureFn', M33, 'Year', L33))and not equal('RemainderFn'(M33, 4), 0), equal('RemainderFn'(M33, 400), 0)))and entails(holds('MeasureFn', M33, 'Year', L33)and equal('RemainderFn'(M33, 100), 0)and not equal('RemainderFn'(M33, 400), 0), not instance(L33, 'LeapYear'))and entails(instance(L33, 'LeapYear')and equal('RemainderFn'(M33, 100), 0)and not equal('RemainderFn'(M33, 400), 0), not holds('MeasureFn', M33, 'Year', L33))and entails((instance(L33, 'LeapYear')and holds('MeasureFn', M33, 'Year', L33))and not equal('RemainderFn'(M33, 400), 0), not equal('RemainderFn'(M33, 100), 0))and entails((instance(L33, 'LeapYear')and holds('MeasureFn', M33, 'Year', L33))and equal('RemainderFn'(M33, 100), 0), equal('RemainderFn'(M33, 400), 0)), [domainV(M33, ['MeasureFn':1, 'RemainderFn':1]), domainV(L33, ['$instanceof':'LeapYear', 'MeasureFn':3]), domainV(_G10774, []), forall(L33), forall(M33)], ['LEAP'=L33, 'NUMBER'=M33], 'Merge', 'TEMPORAL CONCEPTS', 4528, 'Anonymous', on).
mooCache(subclass('Month', 'TimeInterval'), subclass('Month', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4530, 'Anonymous', on).
mooCache(relatedInternalConcept('Month', 'MonthFn'), relatedInternalConcept('Month', 'MonthFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4532, 'Anonymous', on).
mooCache(documentation('Month', string('"The Class of all calendar Months."')), documentation('Month', string('"The Class of all calendar Months."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4534, 'Anonymous', on).
mooCache(subclass('January', 'Month'), subclass('January', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4536, 'Anonymous', on).
mooCache(documentation('January', string('"The Class of all Months which are January."')), documentation('January', string('"The Class of all Months which are January."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4538, 'Anonymous', on).
mooCache(instance(Y5, 'January')=>duration(Y5, 'MeasureFn'(31, 'DayDuration')), entails(not duration(Y5, 'MeasureFn'(31, 'DayDuration')), not instance(Y5, 'January'))and entails(instance(Y5, 'January'), duration(Y5, 'MeasureFn'(31, 'DayDuration'))), [domainV(Y5, ['$instanceof':'January', duration:1]), domainV(_G4387, []), forall(Y5)], ['MONTH'=Y5], 'Merge', 'TEMPORAL CONCEPTS', 4540, 'Anonymous', on).
mooCache(equal(A8, 'MonthFn'('January', B8))and equal(C8, 'MonthFn'('February', B8))=>meetsTemporally(A8, C8), entails(holds('MonthFn', 'January', B8, A8)and holds('MonthFn', 'February', B8, C8), meetsTemporally(A8, C8))and entails(not meetsTemporally(A8, C8)and holds('MonthFn', 'February', B8, C8), not holds('MonthFn', 'January', B8, A8))and entails(not meetsTemporally(A8, C8)and holds('MonthFn', 'January', B8, A8), not holds('MonthFn', 'February', B8, C8)), [domainV(C8, ['MonthFn':3, meetsTemporally:2]), domainV(B8, ['MonthFn':2]), domainV(A8, ['MonthFn':3, meetsTemporally:1]), domainV(_G7326, []), forall(A8), forall(B8), forall(C8)], ['MONTH1'=A8, 'YEAR'=B8, 'MONTH2'=C8], 'Merge', 'TEMPORAL CONCEPTS', 4542, 'Anonymous', on).
mooCache(subclass('February', 'Month'), subclass('February', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4544, 'Anonymous', on).
mooCache(documentation('February', string('"The Class of all Months which are February."')), documentation('February', string('"The Class of all Months which are February."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4546, 'Anonymous', on).
mooCache(equal('MonthFn'('February', W13), X13)and not instance(W13, 'LeapYear')=>duration(X13, 'MeasureFn'(28, 'DayDuration')), entails(holds('MonthFn', 'February', W13, X13)and not instance(W13, 'LeapYear'), duration(X13, 'MeasureFn'(28, 'DayDuration')))and entails(not duration(X13, 'MeasureFn'(28, 'DayDuration'))and not instance(W13, 'LeapYear'), not holds('MonthFn', 'February', W13, X13))and entails(not duration(X13, 'MeasureFn'(28, 'DayDuration'))and holds('MonthFn', 'February', W13, X13), instance(W13, 'LeapYear')), [domainV(X13, ['MonthFn':3, duration:1]), domainV(W13, ['$instanceof':'LeapYear', 'MonthFn':2]), domainV(_G6908, []), forall(W13), forall(X13)], ['YEAR'=W13, 'MONTH'=X13], 'Merge', 'TEMPORAL CONCEPTS', 4548, 'Anonymous', on).
mooCache(equal('MonthFn'('February', Z15), A16)and instance(Z15, 'LeapYear')=>duration(A16, 'MeasureFn'(29, 'DayDuration')), entails(holds('MonthFn', 'February', Z15, A16)and instance(Z15, 'LeapYear'), duration(A16, 'MeasureFn'(29, 'DayDuration')))and entails(not duration(A16, 'MeasureFn'(29, 'DayDuration'))and instance(Z15, 'LeapYear'), not holds('MonthFn', 'February', Z15, A16))and entails(not duration(A16, 'MeasureFn'(29, 'DayDuration'))and holds('MonthFn', 'February', Z15, A16), not instance(Z15, 'LeapYear')), [domainV(A16, ['MonthFn':3, duration:1]), domainV(Z15, ['$instanceof':'LeapYear', 'MonthFn':2]), domainV(_G6536, []), forall(Z15), forall(A16)], ['YEAR'=Z15, 'MONTH'=A16], 'Merge', 'TEMPORAL CONCEPTS', 4550, 'Anonymous', on).
mooCache(equal(C18, 'MonthFn'('February', D18))and equal(E18, 'MonthFn'('March', D18))=>meetsTemporally(C18, E18), entails(holds('MonthFn', 'February', D18, C18)and holds('MonthFn', 'March', D18, E18), meetsTemporally(C18, E18))and entails(not meetsTemporally(C18, E18)and holds('MonthFn', 'March', D18, E18), not holds('MonthFn', 'February', D18, C18))and entails(not meetsTemporally(C18, E18)and holds('MonthFn', 'February', D18, C18), not holds('MonthFn', 'March', D18, E18)), [domainV(E18, ['MonthFn':3, meetsTemporally:2]), domainV(D18, ['MonthFn':2]), domainV(C18, ['MonthFn':3, meetsTemporally:1]), domainV(_G7314, []), forall(C18), forall(D18), forall(E18)], ['MONTH1'=C18, 'YEAR'=D18, 'MONTH2'=E18], 'Merge', 'TEMPORAL CONCEPTS', 4552, 'Anonymous', on).
mooCache(subclass('March', 'Month'), subclass('March', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4554, 'Anonymous', on).
mooCache(documentation('March', string('"The Class of all Months which are March."')), documentation('March', string('"The Class of all Months which are March."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4556, 'Anonymous', on).
mooCache(instance(Q27, 'March')=>duration(Q27, 'MeasureFn'(31, 'DayDuration')), entails(not duration(Q27, 'MeasureFn'(31, 'DayDuration')), not instance(Q27, 'March'))and entails(instance(Q27, 'March'), duration(Q27, 'MeasureFn'(31, 'DayDuration'))), [domainV(Q27, ['$instanceof':'March', duration:1]), domainV(_G4375, []), forall(Q27)], ['MONTH'=Q27], 'Merge', 'TEMPORAL CONCEPTS', 4558, 'Anonymous', on).
mooCache(equal(Q29, 'MonthFn'('March', R29))and equal(S29, 'MonthFn'('April', R29))=>meetsTemporally(Q29, S29), entails(holds('MonthFn', 'March', R29, Q29)and holds('MonthFn', 'April', R29, S29), meetsTemporally(Q29, S29))and entails(not meetsTemporally(Q29, S29)and holds('MonthFn', 'April', R29, S29), not holds('MonthFn', 'March', R29, Q29))and entails(not meetsTemporally(Q29, S29)and holds('MonthFn', 'March', R29, Q29), not holds('MonthFn', 'April', R29, S29)), [domainV(S29, ['MonthFn':3, meetsTemporally:2]), domainV(R29, ['MonthFn':2]), domainV(Q29, ['MonthFn':3, meetsTemporally:1]), domainV(_G7296, []), forall(Q29), forall(R29), forall(S29)], ['MONTH1'=Q29, 'YEAR'=R29, 'MONTH2'=S29], 'Merge', 'TEMPORAL CONCEPTS', 4560, 'Anonymous', on).
mooCache(subclass('April', 'Month'), subclass('April', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4562, 'Anonymous', on).
mooCache(documentation('April', string('"The Class of all Months which are April."')), documentation('April', string('"The Class of all Months which are April."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4564, 'Anonymous', on).
mooCache(instance(B35, 'April')=>duration(B35, 'MeasureFn'(30, 'DayDuration')), entails(not duration(B35, 'MeasureFn'(30, 'DayDuration')), not instance(B35, 'April'))and entails(instance(B35, 'April'), duration(B35, 'MeasureFn'(30, 'DayDuration'))), [domainV(B35, ['$instanceof':'April', duration:1]), domainV(_G4375, []), forall(B35)], ['MONTH'=B35], 'Merge', 'TEMPORAL CONCEPTS', 4566, 'Anonymous', on).
mooCache(equal(C37, 'MonthFn'('April', D37))and equal(E37, 'MonthFn'('May', D37))=>meetsTemporally(C37, E37), entails(holds('MonthFn', 'April', D37, C37)and holds('MonthFn', 'May', D37, E37), meetsTemporally(C37, E37))and entails(not meetsTemporally(C37, E37)and holds('MonthFn', 'May', D37, E37), not holds('MonthFn', 'April', D37, C37))and entails(not meetsTemporally(C37, E37)and holds('MonthFn', 'April', D37, C37), not holds('MonthFn', 'May', D37, E37)), [domainV(E37, ['MonthFn':3, meetsTemporally:2]), domainV(D37, ['MonthFn':2]), domainV(C37, ['MonthFn':3, meetsTemporally:1]), domainV(_G7284, []), forall(C37), forall(D37), forall(E37)], ['MONTH1'=C37, 'YEAR'=D37, 'MONTH2'=E37], 'Merge', 'TEMPORAL CONCEPTS', 4568, 'Anonymous', on).
mooCache(subclass('May', 'Month'), subclass('May', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4570, 'Anonymous', on).
mooCache(documentation('May', string('"The Class of all Months which are May."')), documentation('May', string('"The Class of all Months which are May."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4572, 'Anonymous', on).
mooCache(instance(A4, 'May')=>duration(A4, 'MeasureFn'(31, 'DayDuration')), entails(not duration(A4, 'MeasureFn'(31, 'DayDuration')), not instance(A4, 'May'))and entails(instance(A4, 'May'), duration(A4, 'MeasureFn'(31, 'DayDuration'))), [domainV(A4, ['$instanceof':'May', duration:1]), domainV(_G4363, []), forall(A4)], ['MONTH'=A4], 'Merge', 'TEMPORAL CONCEPTS', 4574, 'Anonymous', on).
mooCache(equal(B6, 'MonthFn'('May', C6))and equal(D6, 'MonthFn'('June', C6))=>meetsTemporally(B6, D6), entails(holds('MonthFn', 'May', C6, B6)and holds('MonthFn', 'June', C6, D6), meetsTemporally(B6, D6))and entails(not meetsTemporally(B6, D6)and holds('MonthFn', 'June', C6, D6), not holds('MonthFn', 'May', C6, B6))and entails(not meetsTemporally(B6, D6)and holds('MonthFn', 'May', C6, B6), not holds('MonthFn', 'June', C6, D6)), [domainV(D6, ['MonthFn':3, meetsTemporally:2]), domainV(C6, ['MonthFn':2]), domainV(B6, ['MonthFn':3, meetsTemporally:1]), domainV(_G7278, []), forall(B6), forall(C6), forall(D6)], ['MONTH1'=B6, 'YEAR'=C6, 'MONTH2'=D6], 'Merge', 'TEMPORAL CONCEPTS', 4576, 'Anonymous', on).
mooCache(subclass('June', 'Month'), subclass('June', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4578, 'Anonymous', on).
mooCache(documentation('June', string('"The Class of all Months which are June."')), documentation('June', string('"The Class of all Months which are June."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4580, 'Anonymous', on).
mooCache(instance(L11, 'June')=>duration(L11, 'MeasureFn'(30, 'DayDuration')), entails(not duration(L11, 'MeasureFn'(30, 'DayDuration')), not instance(L11, 'June'))and entails(instance(L11, 'June'), duration(L11, 'MeasureFn'(30, 'DayDuration'))), [domainV(L11, ['$instanceof':'June', duration:1]), domainV(_G4369, []), forall(L11)], ['MONTH'=L11], 'Merge', 'TEMPORAL CONCEPTS', 4582, 'Anonymous', on).
mooCache(equal(K13, 'MonthFn'('June', L13))and equal(M13, 'MonthFn'('July', L13))=>meetsTemporally(K13, M13), entails(holds('MonthFn', 'June', L13, K13)and holds('MonthFn', 'July', L13, M13), meetsTemporally(K13, M13))and entails(not meetsTemporally(K13, M13)and holds('MonthFn', 'July', L13, M13), not holds('MonthFn', 'June', L13, K13))and entails(not meetsTemporally(K13, M13)and holds('MonthFn', 'June', L13, K13), not holds('MonthFn', 'July', L13, M13)), [domainV(M13, ['MonthFn':3, meetsTemporally:2]), domainV(L13, ['MonthFn':2]), domainV(K13, ['MonthFn':3, meetsTemporally:1]), domainV(_G7284, []), forall(K13), forall(L13), forall(M13)], ['MONTH1'=K13, 'YEAR'=L13, 'MONTH2'=M13], 'Merge', 'TEMPORAL CONCEPTS', 4584, 'Anonymous', on).
mooCache(subclass('July', 'Month'), subclass('July', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4586, 'Anonymous', on).
mooCache(documentation('July', string('"The Class of all Months which are July."')), documentation('July', string('"The Class of all Months which are July."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4588, 'Anonymous', on).
mooCache(instance(U18, 'July')=>duration(U18, 'MeasureFn'(31, 'DayDuration')), entails(not duration(U18, 'MeasureFn'(31, 'DayDuration')), not instance(U18, 'July'))and entails(instance(U18, 'July'), duration(U18, 'MeasureFn'(31, 'DayDuration'))), [domainV(U18, ['$instanceof':'July', duration:1]), domainV(_G4369, []), forall(U18)], ['MONTH'=U18], 'Merge', 'TEMPORAL CONCEPTS', 4590, 'Anonymous', on).
mooCache(equal(U20, 'MonthFn'('July', V20))and equal(W20, 'MonthFn'('August', V20))=>meetsTemporally(U20, W20), entails(holds('MonthFn', 'July', V20, U20)and holds('MonthFn', 'August', V20, W20), meetsTemporally(U20, W20))and entails(not meetsTemporally(U20, W20)and holds('MonthFn', 'August', V20, W20), not holds('MonthFn', 'July', V20, U20))and entails(not meetsTemporally(U20, W20)and holds('MonthFn', 'July', V20, U20), not holds('MonthFn', 'August', V20, W20)), [domainV(W20, ['MonthFn':3, meetsTemporally:2]), domainV(V20, ['MonthFn':2]), domainV(U20, ['MonthFn':3, meetsTemporally:1]), domainV(_G7296, []), forall(U20), forall(V20), forall(W20)], ['MONTH1'=U20, 'YEAR'=V20, 'MONTH2'=W20], 'Merge', 'TEMPORAL CONCEPTS', 4592, 'Anonymous', on).
mooCache(subclass('August', 'Month'), subclass('August', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4594, 'Anonymous', on).
mooCache(documentation('August', string('"The Class of all Months which are August."')), documentation('August', string('"The Class of all Months which are August."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4596, 'Anonymous', on).
mooCache(instance(F26, 'August')=>duration(F26, 'MeasureFn'(31, 'DayDuration')), entails(not duration(F26, 'MeasureFn'(31, 'DayDuration')), not instance(F26, 'August'))and entails(instance(F26, 'August'), duration(F26, 'MeasureFn'(31, 'DayDuration'))), [domainV(F26, ['$instanceof':'August', duration:1]), domainV(_G4381, []), forall(F26)], ['MONTH'=F26], 'Merge', 'TEMPORAL CONCEPTS', 4598, 'Anonymous', on).
mooCache(equal(J28, 'MonthFn'('August', K28))and equal(L28, 'MonthFn'('September', K28))=>meetsTemporally(J28, L28), entails(holds('MonthFn', 'August', K28, J28)and holds('MonthFn', 'September', K28, L28), meetsTemporally(J28, L28))and entails(not meetsTemporally(J28, L28)and holds('MonthFn', 'September', K28, L28), not holds('MonthFn', 'August', K28, J28))and entails(not meetsTemporally(J28, L28)and holds('MonthFn', 'August', K28, J28), not holds('MonthFn', 'September', K28, L28)), [domainV(L28, ['MonthFn':3, meetsTemporally:2]), domainV(K28, ['MonthFn':2]), domainV(J28, ['MonthFn':3, meetsTemporally:1]), domainV(_G7326, []), forall(J28), forall(K28), forall(L28)], ['MONTH1'=J28, 'YEAR'=K28, 'MONTH2'=L28], 'Merge', 'TEMPORAL CONCEPTS', 4600, 'Anonymous', on).
mooCache(subclass('September', 'Month'), subclass('September', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4602, 'Anonymous', on).
mooCache(documentation('September', string('"The Class of all Months which are September."')), documentation('September', string('"The Class of all Months which are September."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4604, 'Anonymous', on).
mooCache(instance(S33, 'September')=>duration(S33, 'MeasureFn'(30, 'DayDuration')), entails(not duration(S33, 'MeasureFn'(30, 'DayDuration')), not instance(S33, 'September'))and entails(instance(S33, 'September'), duration(S33, 'MeasureFn'(30, 'DayDuration'))), [domainV(S33, ['$instanceof':'September', duration:1]), domainV(_G4399, []), forall(S33)], ['MONTH'=S33], 'Merge', 'TEMPORAL CONCEPTS', 4606, 'Anonymous', on).
mooCache(equal(R35, 'MonthFn'('September', S35))and equal(T35, 'MonthFn'('October', S35))=>meetsTemporally(R35, T35), entails(holds('MonthFn', 'September', S35, R35)and holds('MonthFn', 'October', S35, T35), meetsTemporally(R35, T35))and entails(not meetsTemporally(R35, T35)and holds('MonthFn', 'October', S35, T35), not holds('MonthFn', 'September', S35, R35))and entails(not meetsTemporally(R35, T35)and holds('MonthFn', 'September', S35, R35), not holds('MonthFn', 'October', S35, T35)), [domainV(T35, ['MonthFn':3, meetsTemporally:2]), domainV(S35, ['MonthFn':2]), domainV(R35, ['MonthFn':3, meetsTemporally:1]), domainV(_G7332, []), forall(R35), forall(S35), forall(T35)], ['MONTH1'=R35, 'YEAR'=S35, 'MONTH2'=T35], 'Merge', 'TEMPORAL CONCEPTS', 4608, 'Anonymous', on).
mooCache(subclass('October', 'Month'), subclass('October', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4610, 'Anonymous', on).
mooCache(documentation('October', string('"The Class of all Months which are October."')), documentation('October', string('"The Class of all Months which are October."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4612, 'Anonymous', on).
mooCache(instance(N3, 'October')=>duration(N3, 'MeasureFn'(31, 'DayDuration')), entails(not duration(N3, 'MeasureFn'(31, 'DayDuration')), not instance(N3, 'October'))and entails(instance(N3, 'October'), duration(N3, 'MeasureFn'(31, 'DayDuration'))), [domainV(N3, ['$instanceof':'October', duration:1]), domainV(_G4387, []), forall(N3)], ['MONTH'=N3], 'Merge', 'TEMPORAL CONCEPTS', 4614, 'Anonymous', on).
mooCache(equal(N5, 'MonthFn'('October', O5))and equal(P5, 'MonthFn'('November', O5))=>meetsTemporally(N5, P5), entails(holds('MonthFn', 'October', O5, N5)and holds('MonthFn', 'November', O5, P5), meetsTemporally(N5, P5))and entails(not meetsTemporally(N5, P5)and holds('MonthFn', 'November', O5, P5), not holds('MonthFn', 'October', O5, N5))and entails(not meetsTemporally(N5, P5)and holds('MonthFn', 'October', O5, N5), not holds('MonthFn', 'November', O5, P5)), [domainV(P5, ['MonthFn':3, meetsTemporally:2]), domainV(O5, ['MonthFn':2]), domainV(N5, ['MonthFn':3, meetsTemporally:1]), domainV(_G7326, []), forall(N5), forall(O5), forall(P5)], ['MONTH1'=N5, 'YEAR'=O5, 'MONTH2'=P5], 'Merge', 'TEMPORAL CONCEPTS', 4616, 'Anonymous', on).
mooCache(subclass('November', 'Month'), subclass('November', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4618, 'Anonymous', on).
mooCache(documentation('November', string('"The Class of all Months which are November."')), documentation('November', string('"The Class of all Months which are November."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4620, 'Anonymous', on).
mooCache(instance(V10, 'November')=>duration(V10, 'MeasureFn'(30, 'DayDuration')), entails(not duration(V10, 'MeasureFn'(30, 'DayDuration')), not instance(V10, 'November'))and entails(instance(V10, 'November'), duration(V10, 'MeasureFn'(30, 'DayDuration'))), [domainV(V10, ['$instanceof':'November', duration:1]), domainV(_G4393, []), forall(V10)], ['MONTH'=V10], 'Merge', 'TEMPORAL CONCEPTS', 4622, 'Anonymous', on).
mooCache(equal(V12, 'MonthFn'('November', W12))and equal(X12, 'MonthFn'('December', W12))=>meetsTemporally(V12, X12), entails(holds('MonthFn', 'November', W12, V12)and holds('MonthFn', 'December', W12, X12), meetsTemporally(V12, X12))and entails(not meetsTemporally(V12, X12)and holds('MonthFn', 'December', W12, X12), not holds('MonthFn', 'November', W12, V12))and entails(not meetsTemporally(V12, X12)and holds('MonthFn', 'November', W12, V12), not holds('MonthFn', 'December', W12, X12)), [domainV(X12, ['MonthFn':3, meetsTemporally:2]), domainV(W12, ['MonthFn':2]), domainV(V12, ['MonthFn':3, meetsTemporally:1]), domainV(_G7332, []), forall(V12), forall(W12), forall(X12)], ['MONTH1'=V12, 'YEAR'=W12, 'MONTH2'=X12], 'Merge', 'TEMPORAL CONCEPTS', 4624, 'Anonymous', on).
mooCache(subclass('December', 'Month'), subclass('December', 'Month'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4626, 'Anonymous', on).
mooCache(documentation('December', string('"The Class of all Months which are December."')), documentation('December', string('"The Class of all Months which are December."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4628, 'Anonymous', on).
mooCache(instance(D18, 'December')=>duration(D18, 'MeasureFn'(31, 'DayDuration')), entails(not duration(D18, 'MeasureFn'(31, 'DayDuration')), not instance(D18, 'December'))and entails(instance(D18, 'December'), duration(D18, 'MeasureFn'(31, 'DayDuration'))), [domainV(D18, ['$instanceof':'December', duration:1]), domainV(_G4393, []), forall(D18)], ['MONTH'=D18], 'Merge', 'TEMPORAL CONCEPTS', 4630, 'Anonymous', on).
mooCache(equal(E20, 'MonthFn'('December', F20))and equal(G20, 'MonthFn'('January', H20))and meetsTemporally(F20, H20)=>meetsTemporally(E20, G20), entails(holds('MonthFn', 'December', F20, E20)and holds('MonthFn', 'January', H20, G20)and meetsTemporally(F20, H20), meetsTemporally(E20, G20))and entails(not meetsTemporally(E20, G20)and holds('MonthFn', 'January', H20, G20)and meetsTemporally(F20, H20), not holds('MonthFn', 'December', F20, E20))and entails(not meetsTemporally(E20, G20)and holds('MonthFn', 'December', F20, E20)and meetsTemporally(F20, H20), not holds('MonthFn', 'January', H20, G20))and entails(not meetsTemporally(E20, G20)and holds('MonthFn', 'December', F20, E20)and holds('MonthFn', 'January', H20, G20), not meetsTemporally(F20, H20)), [domainV(H20, ['MonthFn':2, meetsTemporally:2]), domainV(G20, ['MonthFn':3, meetsTemporally:2]), domainV(F20, ['MonthFn':2, meetsTemporally:1]), domainV(E20, ['MonthFn':3, meetsTemporally:1]), domainV(_G8976, []), forall(E20), forall(F20), forall(G20), forall(H20)], ['MONTH1'=E20, 'YEAR1'=F20, 'MONTH2'=G20, 'YEAR2'=H20], 'Merge', 'TEMPORAL CONCEPTS', 4632, 'Anonymous', on).
mooCache(subclass('Day', 'TimeInterval'), subclass('Day', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4634, 'Anonymous', on).
mooCache(relatedInternalConcept('Day', 'DayFn'), relatedInternalConcept('Day', 'DayFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4636, 'Anonymous', on).
mooCache(relatedInternalConcept('Day', 'DayDuration'), relatedInternalConcept('Day', 'DayDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4638, 'Anonymous', on).
mooCache(documentation('Day', string('"The Class of all calendar Days."')), documentation('Day', string('"The Class of all calendar Days."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4640, 'Anonymous', on).
mooCache(instance(C29, 'Day')=>duration(C29, 'DayDuration'), entails(not duration(C29, 'DayDuration'), not instance(C29, 'Day'))and entails(instance(C29, 'Day'), duration(C29, 'DayDuration')), [domainV(C29, ['$instanceof':'Day', duration:1]), domainV(_G3753, []), forall(C29)], ['DAY'=C29], 'Merge', 'TEMPORAL CONCEPTS', 4642, 'Anonymous', on).
mooCache(subclass('Monday', 'Day'), subclass('Monday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4644, 'Anonymous', on).
mooCache(documentation('Monday', string('"The Class of all calendar Mondays."')), documentation('Monday', string('"The Class of all calendar Mondays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4646, 'Anonymous', on).
mooCache(subclass('Tuesday', 'Day'), subclass('Tuesday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4648, 'Anonymous', on).
mooCache(documentation('Tuesday', string('"The Class of all calendar Tuesdays."')), documentation('Tuesday', string('"The Class of all calendar Tuesdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4650, 'Anonymous', on).
mooCache(instance(X37, 'Monday')and instance(Y37, 'Tuesday')and instance(Z37, 'Week')and temporalPart(X37, Z37)and temporalPart(Y37, Z37)=>meetsTemporally(X37, Y37), entails(instance(X37, 'Monday')and instance(Y37, 'Tuesday')and instance(Z37, 'Week')and temporalPart(X37, Z37)and temporalPart(Y37, Z37), meetsTemporally(X37, Y37))and entails(not meetsTemporally(X37, Y37)and instance(Y37, 'Tuesday')and instance(Z37, 'Week')and temporalPart(X37, Z37)and temporalPart(Y37, Z37), not instance(X37, 'Monday'))and entails(not meetsTemporally(X37, Y37)and instance(X37, 'Monday')and instance(Z37, 'Week')and temporalPart(X37, Z37)and temporalPart(Y37, Z37), not instance(Y37, 'Tuesday'))and entails(not meetsTemporally(X37, Y37)and instance(X37, 'Monday')and instance(Y37, 'Tuesday')and temporalPart(X37, Z37)and temporalPart(Y37, Z37), not instance(Z37, 'Week'))and entails(not meetsTemporally(X37, Y37)and instance(X37, 'Monday')and instance(Y37, 'Tuesday')and instance(Z37, 'Week')and temporalPart(Y37, Z37), not temporalPart(X37, Z37))and entails(not meetsTemporally(X37, Y37)and instance(X37, 'Monday')and instance(Y37, 'Tuesday')and instance(Z37, 'Week')and temporalPart(X37, Z37), not temporalPart(Y37, Z37)), [domainV(Z37, ['$instanceof':'Week', temporalPart:2]), domainV(Y37, ['$instanceof':'Tuesday', meetsTemporally:2, temporalPart:1]), domainV(X37, ['$instanceof':'Monday', meetsTemporally:1, temporalPart:1]), domainV(_G9495, []), forall(X37), forall(Y37), forall(Z37)], ['DAY1'=X37, 'DAY2'=Y37, 'WEEK'=Z37], 'Merge', 'TEMPORAL CONCEPTS', 4652, 'Anonymous', on).
mooCache(subclass('Wednesday', 'Day'), subclass('Wednesday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4654, 'Anonymous', on).
mooCache(documentation('Wednesday', string('"The Class of all calendar Wednesdays."')), documentation('Wednesday', string('"The Class of all calendar Wednesdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4656, 'Anonymous', on).
mooCache(instance(H5, 'Tuesday')and instance(I5, 'Wednesday')and instance(J5, 'Week')and temporalPart(H5, J5)and temporalPart(I5, J5)=>meetsTemporally(H5, I5), entails(instance(H5, 'Tuesday')and instance(I5, 'Wednesday')and instance(J5, 'Week')and temporalPart(H5, J5)and temporalPart(I5, J5), meetsTemporally(H5, I5))and entails(not meetsTemporally(H5, I5)and instance(I5, 'Wednesday')and instance(J5, 'Week')and temporalPart(H5, J5)and temporalPart(I5, J5), not instance(H5, 'Tuesday'))and entails(not meetsTemporally(H5, I5)and instance(H5, 'Tuesday')and instance(J5, 'Week')and temporalPart(H5, J5)and temporalPart(I5, J5), not instance(I5, 'Wednesday'))and entails(not meetsTemporally(H5, I5)and instance(H5, 'Tuesday')and instance(I5, 'Wednesday')and temporalPart(H5, J5)and temporalPart(I5, J5), not instance(J5, 'Week'))and entails(not meetsTemporally(H5, I5)and instance(H5, 'Tuesday')and instance(I5, 'Wednesday')and instance(J5, 'Week')and temporalPart(I5, J5), not temporalPart(H5, J5))and entails(not meetsTemporally(H5, I5)and instance(H5, 'Tuesday')and instance(I5, 'Wednesday')and instance(J5, 'Week')and temporalPart(H5, J5), not temporalPart(I5, J5)), [domainV(J5, ['$instanceof':'Week', temporalPart:2]), domainV(I5, ['$instanceof':'Wednesday', meetsTemporally:2, temporalPart:1]), domainV(H5, ['$instanceof':'Tuesday', meetsTemporally:1, temporalPart:1]), domainV(_G9513, []), forall(H5), forall(I5), forall(J5)], ['DAY1'=H5, 'DAY2'=I5, 'WEEK'=J5], 'Merge', 'TEMPORAL CONCEPTS', 4658, 'Anonymous', on).
mooCache(subclass('Thursday', 'Day'), subclass('Thursday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4660, 'Anonymous', on).
mooCache(documentation('Thursday', string('"The Class of all calendar Thursdays."')), documentation('Thursday', string('"The Class of all calendar Thursdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4662, 'Anonymous', on).
mooCache(instance(C11, 'Wednesday')and instance(D11, 'Thursday')and instance(E11, 'Week')and temporalPart(C11, E11)and temporalPart(D11, E11)=>meetsTemporally(C11, D11), entails(instance(C11, 'Wednesday')and instance(D11, 'Thursday')and instance(E11, 'Week')and temporalPart(C11, E11)and temporalPart(D11, E11), meetsTemporally(C11, D11))and entails(not meetsTemporally(C11, D11)and instance(D11, 'Thursday')and instance(E11, 'Week')and temporalPart(C11, E11)and temporalPart(D11, E11), not instance(C11, 'Wednesday'))and entails(not meetsTemporally(C11, D11)and instance(C11, 'Wednesday')and instance(E11, 'Week')and temporalPart(C11, E11)and temporalPart(D11, E11), not instance(D11, 'Thursday'))and entails(not meetsTemporally(C11, D11)and instance(C11, 'Wednesday')and instance(D11, 'Thursday')and temporalPart(C11, E11)and temporalPart(D11, E11), not instance(E11, 'Week'))and entails(not meetsTemporally(C11, D11)and instance(C11, 'Wednesday')and instance(D11, 'Thursday')and instance(E11, 'Week')and temporalPart(D11, E11), not temporalPart(C11, E11))and entails(not meetsTemporally(C11, D11)and instance(C11, 'Wednesday')and instance(D11, 'Thursday')and instance(E11, 'Week')and temporalPart(C11, E11), not temporalPart(D11, E11)), [domainV(E11, ['$instanceof':'Week', temporalPart:2]), domainV(D11, ['$instanceof':'Thursday', meetsTemporally:2, temporalPart:1]), domainV(C11, ['$instanceof':'Wednesday', meetsTemporally:1, temporalPart:1]), domainV(_G9519, []), forall(C11), forall(D11), forall(E11)], ['DAY1'=C11, 'DAY2'=D11, 'WEEK'=E11], 'Merge', 'TEMPORAL CONCEPTS', 4664, 'Anonymous', on).
mooCache(subclass('Friday', 'Day'), subclass('Friday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4666, 'Anonymous', on).
mooCache(documentation('Friday', string('"The Class of all calendar Fridays."')), documentation('Friday', string('"The Class of all calendar Fridays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4668, 'Anonymous', on).
mooCache(instance(X16, 'Thursday')and instance(Y16, 'Friday')and instance(Z16, 'Week')and temporalPart(X16, Z16)and temporalPart(Y16, Z16)=>meetsTemporally(X16, Y16), entails(instance(X16, 'Thursday')and instance(Y16, 'Friday')and instance(Z16, 'Week')and temporalPart(X16, Z16)and temporalPart(Y16, Z16), meetsTemporally(X16, Y16))and entails(not meetsTemporally(X16, Y16)and instance(Y16, 'Friday')and instance(Z16, 'Week')and temporalPart(X16, Z16)and temporalPart(Y16, Z16), not instance(X16, 'Thursday'))and entails(not meetsTemporally(X16, Y16)and instance(X16, 'Thursday')and instance(Z16, 'Week')and temporalPart(X16, Z16)and temporalPart(Y16, Z16), not instance(Y16, 'Friday'))and entails(not meetsTemporally(X16, Y16)and instance(X16, 'Thursday')and instance(Y16, 'Friday')and temporalPart(X16, Z16)and temporalPart(Y16, Z16), not instance(Z16, 'Week'))and entails(not meetsTemporally(X16, Y16)and instance(X16, 'Thursday')and instance(Y16, 'Friday')and instance(Z16, 'Week')and temporalPart(Y16, Z16), not temporalPart(X16, Z16))and entails(not meetsTemporally(X16, Y16)and instance(X16, 'Thursday')and instance(Y16, 'Friday')and instance(Z16, 'Week')and temporalPart(X16, Z16), not temporalPart(Y16, Z16)), [domainV(Z16, ['$instanceof':'Week', temporalPart:2]), domainV(Y16, ['$instanceof':'Friday', meetsTemporally:2, temporalPart:1]), domainV(X16, ['$instanceof':'Thursday', meetsTemporally:1, temporalPart:1]), domainV(_G9501, []), forall(X16), forall(Y16), forall(Z16)], ['DAY1'=X16, 'DAY2'=Y16, 'WEEK'=Z16], 'Merge', 'TEMPORAL CONCEPTS', 4670, 'Anonymous', on).
mooCache(subclass('Saturday', 'Day'), subclass('Saturday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4672, 'Anonymous', on).
mooCache(documentation('Saturday', string('"The Class of all calendar Saturdays."')), documentation('Saturday', string('"The Class of all calendar Saturdays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4674, 'Anonymous', on).
mooCache(instance(R22, 'Friday')and instance(S22, 'Saturday')and instance(T22, 'Week')and temporalPart(R22, T22)and temporalPart(S22, T22)=>meetsTemporally(R22, S22), entails(instance(R22, 'Friday')and instance(S22, 'Saturday')and instance(T22, 'Week')and temporalPart(R22, T22)and temporalPart(S22, T22), meetsTemporally(R22, S22))and entails(not meetsTemporally(R22, S22)and instance(S22, 'Saturday')and instance(T22, 'Week')and temporalPart(R22, T22)and temporalPart(S22, T22), not instance(R22, 'Friday'))and entails(not meetsTemporally(R22, S22)and instance(R22, 'Friday')and instance(T22, 'Week')and temporalPart(R22, T22)and temporalPart(S22, T22), not instance(S22, 'Saturday'))and entails(not meetsTemporally(R22, S22)and instance(R22, 'Friday')and instance(S22, 'Saturday')and temporalPart(R22, T22)and temporalPart(S22, T22), not instance(T22, 'Week'))and entails(not meetsTemporally(R22, S22)and instance(R22, 'Friday')and instance(S22, 'Saturday')and instance(T22, 'Week')and temporalPart(S22, T22), not temporalPart(R22, T22))and entails(not meetsTemporally(R22, S22)and instance(R22, 'Friday')and instance(S22, 'Saturday')and instance(T22, 'Week')and temporalPart(R22, T22), not temporalPart(S22, T22)), [domainV(T22, ['$instanceof':'Week', temporalPart:2]), domainV(S22, ['$instanceof':'Saturday', meetsTemporally:2, temporalPart:1]), domainV(R22, ['$instanceof':'Friday', meetsTemporally:1, temporalPart:1]), domainV(_G9501, []), forall(R22), forall(S22), forall(T22)], ['DAY1'=R22, 'DAY2'=S22, 'WEEK'=T22], 'Merge', 'TEMPORAL CONCEPTS', 4676, 'Anonymous', on).
mooCache(subclass('Sunday', 'Day'), subclass('Sunday', 'Day'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4678, 'Anonymous', on).
mooCache(documentation('Sunday', string('"The Class of all calendar Sundays."')), documentation('Sunday', string('"The Class of all calendar Sundays."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4680, 'Anonymous', on).
mooCache(instance(M28, 'Saturday')and instance(N28, 'Sunday')and instance(O28, 'Week')and temporalPart(M28, O28)and temporalPart(N28, O28)=>meetsTemporally(M28, N28), entails(instance(M28, 'Saturday')and instance(N28, 'Sunday')and instance(O28, 'Week')and temporalPart(M28, O28)and temporalPart(N28, O28), meetsTemporally(M28, N28))and entails(not meetsTemporally(M28, N28)and instance(N28, 'Sunday')and instance(O28, 'Week')and temporalPart(M28, O28)and temporalPart(N28, O28), not instance(M28, 'Saturday'))and entails(not meetsTemporally(M28, N28)and instance(M28, 'Saturday')and instance(O28, 'Week')and temporalPart(M28, O28)and temporalPart(N28, O28), not instance(N28, 'Sunday'))and entails(not meetsTemporally(M28, N28)and instance(M28, 'Saturday')and instance(N28, 'Sunday')and temporalPart(M28, O28)and temporalPart(N28, O28), not instance(O28, 'Week'))and entails(not meetsTemporally(M28, N28)and instance(M28, 'Saturday')and instance(N28, 'Sunday')and instance(O28, 'Week')and temporalPart(N28, O28), not temporalPart(M28, O28))and entails(not meetsTemporally(M28, N28)and instance(M28, 'Saturday')and instance(N28, 'Sunday')and instance(O28, 'Week')and temporalPart(M28, O28), not temporalPart(N28, O28)), [domainV(O28, ['$instanceof':'Week', temporalPart:2]), domainV(N28, ['$instanceof':'Sunday', meetsTemporally:2, temporalPart:1]), domainV(M28, ['$instanceof':'Saturday', meetsTemporally:1, temporalPart:1]), domainV(_G9501, []), forall(M28), forall(N28), forall(O28)], ['DAY1'=M28, 'DAY2'=N28, 'WEEK'=O28], 'Merge', 'TEMPORAL CONCEPTS', 4682, 'Anonymous', on).
mooCache(instance(I31, 'Sunday')and instance(J31, 'Monday')and instance(K31, 'Week')and instance(L31, 'Week')and temporalPart(I31, K31)and temporalPart(J31, L31)and meetsTemporally(K31, L31)=>meetsTemporally(I31, J31), entails(instance(I31, 'Sunday')and instance(J31, 'Monday')and instance(K31, 'Week')and instance(L31, 'Week')and temporalPart(I31, K31)and temporalPart(J31, L31)and meetsTemporally(K31, L31), meetsTemporally(I31, J31))and entails(not meetsTemporally(I31, J31)and instance(J31, 'Monday')and instance(K31, 'Week')and instance(L31, 'Week')and temporalPart(I31, K31)and temporalPart(J31, L31)and meetsTemporally(K31, L31), not instance(I31, 'Sunday'))and entails(not meetsTemporally(I31, J31)and instance(I31, 'Sunday')and instance(K31, 'Week')and instance(L31, 'Week')and temporalPart(I31, K31)and temporalPart(J31, L31)and meetsTemporally(K31, L31), not instance(J31, 'Monday'))and entails(not meetsTemporally(I31, J31)and instance(I31, 'Sunday')and instance(J31, 'Monday')and instance(L31, 'Week')and temporalPart(I31, K31)and temporalPart(J31, L31)and meetsTemporally(K31, L31), not instance(K31, 'Week'))and entails(not meetsTemporally(I31, J31)and instance(I31, 'Sunday')and instance(J31, 'Monday')and instance(K31, 'Week')and temporalPart(I31, K31)and temporalPart(J31, L31)and meetsTemporally(K31, L31), not instance(L31, 'Week'))and entails(not meetsTemporally(I31, J31)and instance(I31, 'Sunday')and instance(J31, 'Monday')and instance(K31, 'Week')and instance(L31, 'Week')and temporalPart(J31, L31)and meetsTemporally(K31, L31), not temporalPart(I31, K31))and entails(not meetsTemporally(I31, J31)and instance(I31, 'Sunday')and instance(J31, 'Monday')and instance(K31, 'Week')and instance(L31, 'Week')and temporalPart(I31, K31)and meetsTemporally(K31, L31), not temporalPart(J31, L31))and entails(not meetsTemporally(I31, J31)and instance(I31, 'Sunday')and instance(J31, 'Monday')and instance(K31, 'Week')and instance(L31, 'Week')and temporalPart(I31, K31)and temporalPart(J31, L31), not meetsTemporally(K31, L31)), [domainV(L31, ['$instanceof':'Week', meetsTemporally:2, temporalPart:2]), domainV(K31, ['$instanceof':'Week', meetsTemporally:1, temporalPart:2]), domainV(J31, ['$instanceof':'Monday', meetsTemporally:2, temporalPart:1]), domainV(I31, ['$instanceof':'Sunday', meetsTemporally:1, temporalPart:1]), domainV(_G12395, []), forall(I31), forall(J31), forall(K31), forall(L31)], ['DAY1'=I31, 'DAY2'=J31, 'WEEK1'=K31, 'WEEK2'=L31], 'Merge', 'TEMPORAL CONCEPTS', 4684, 'Anonymous', on).
mooCache(subclass('Week', 'TimeInterval'), subclass('Week', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4686, 'Anonymous', on).
mooCache(documentation('Week', string('"The Class of all calendar weeks."')), documentation('Week', string('"The Class of all calendar weeks."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4688, 'Anonymous', on).
mooCache(instance(C37, 'Week')=>duration(C37, 'WeekDuration'), entails(not duration(C37, 'WeekDuration'), not instance(C37, 'Week'))and entails(instance(C37, 'Week'), duration(C37, 'WeekDuration')), [domainV(C37, ['$instanceof':'Week', duration:1]), domainV(_G3777, []), forall(C37)], ['WEEK'=C37], 'Merge', 'TEMPORAL CONCEPTS', 4690, 'Anonymous', on).
mooCache(subclass('Hour', 'TimeInterval'), subclass('Hour', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4692, 'Anonymous', on).
mooCache(relatedInternalConcept('Hour', 'HourFn'), relatedInternalConcept('Hour', 'HourFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4694, 'Anonymous', on).
mooCache(relatedInternalConcept('Hour', 'HourDuration'), relatedInternalConcept('Hour', 'HourDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4696, 'Anonymous', on).
mooCache(documentation('Hour', string('"The Class of all clock Hours."')), documentation('Hour', string('"The Class of all clock Hours."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4698, 'Anonymous', on).
mooCache(instance(V6, 'Hour')=>duration(V6, 'HourDuration'), entails(not duration(V6, 'HourDuration'), not instance(V6, 'Hour'))and entails(instance(V6, 'Hour'), duration(V6, 'HourDuration')), [domainV(V6, ['$instanceof':'Hour', duration:1]), domainV(_G3777, []), forall(V6)], ['HOUR'=V6], 'Merge', 'TEMPORAL CONCEPTS', 4700, 'Anonymous', on).
mooCache(subclass('Minute', 'TimeInterval'), subclass('Minute', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4702, 'Anonymous', on).
mooCache(relatedInternalConcept('Minute', 'MinuteFn'), relatedInternalConcept('Minute', 'MinuteFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4704, 'Anonymous', on).
mooCache(relatedInternalConcept('Minute', 'MinuteDuration'), relatedInternalConcept('Minute', 'MinuteDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4706, 'Anonymous', on).
mooCache(documentation('Minute', string('"The Class of all clock Minutes."')), documentation('Minute', string('"The Class of all clock Minutes."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4708, 'Anonymous', on).
mooCache(instance(A15, 'Minute')=>duration(A15, 'MinuteDuration'), entails(not duration(A15, 'MinuteDuration'), not instance(A15, 'Minute'))and entails(instance(A15, 'Minute'), duration(A15, 'MinuteDuration')), [domainV(A15, ['$instanceof':'Minute', duration:1]), domainV(_G3825, []), forall(A15)], ['MINUTE'=A15], 'Merge', 'TEMPORAL CONCEPTS', 4710, 'Anonymous', on).
mooCache(subclass('Second', 'TimeInterval'), subclass('Second', 'TimeInterval'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4712, 'Anonymous', on).
mooCache(relatedInternalConcept('Second', 'SecondDuration'), relatedInternalConcept('Second', 'SecondDuration'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4714, 'Anonymous', on).
mooCache(relatedInternalConcept('Second', 'SecondFn'), relatedInternalConcept('Second', 'SecondFn'), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4716, 'Anonymous', on).
mooCache(documentation('Second', string('"The Class of all clock Seconds."')), documentation('Second', string('"The Class of all clock Seconds."')), [], [], 'Merge', 'TEMPORAL CONCEPTS', 4718, 'Anonymous', on).
mooCache(instance(G23, 'Second')=>duration(G23, 'SecondDuration'), entails(not duration(G23, 'SecondDuration'), not instance(G23, 'Second'))and entails(instance(G23, 'Second'), duration(G23, 'SecondDuration')), [domainV(G23, ['$instanceof':'Second', duration:1]), domainV(_G3825, []), forall(G23)], ['SECOND'=G23], 'Merge', 'TEMPORAL CONCEPTS', 4720, 'Anonymous', on).
mooCache('include-context'('STRUCTURAL', 'ONTOLOGY'), 'include-context'('STRUCTURAL', 'ONTOLOGY'), [], [], 'Merge', 'MEREOTOPOLOGY', 4732, 'Anonymous', on).
mooCache('include-context'('BASE', 'ONTOLOGY'), 'include-context'('BASE', 'ONTOLOGY'), [], [], 'Merge', 'MEREOTOPOLOGY', 4735, 'Anonymous', on).
mooCache(instance(connected, 'BinaryPredicate'), instance(connected, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4742, 'Anonymous', on).
mooCache(instance(connected, 'SpatialRelation'), instance(connected, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4744, 'Anonymous', on).
mooCache(instance(connected, 'ReflexiveRelation'), instance(connected, 'ReflexiveRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4746, 'Anonymous', on).
mooCache(instance(connected, 'SymmetricRelation'), instance(connected, 'SymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4748, 'Anonymous', on).
mooCache(domain(connected, 1, 'Object'), domain(connected, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4750, 'Anonymous', on).
mooCache(domain(connected, 2, 'Object'), domain(connected, 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4752, 'Anonymous', on).
mooCache(documentation(connected, string('"(connected ?OBJ1 ?OBJ2) means that ?OBJ1   meetsSpatially ?OBJ2 or that ?OBJ1 overlapsSpatially ?OBJ2."')), documentation(connected, string('"(connected ?OBJ1 ?OBJ2) means that ?OBJ1   meetsSpatially ?OBJ2 or that ?OBJ1 overlapsSpatially ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4754, 'Anonymous', on).
mooCache(connected(H1, I1)=>meetsSpatially(H1, I1)or overlapsSpatially(H1, I1), entails(not meetsSpatially(H1, I1)and not overlapsSpatially(H1, I1), not connected(H1, I1))and entails(connected(H1, I1)and not overlapsSpatially(H1, I1), meetsSpatially(H1, I1))and entails(connected(H1, I1)and not meetsSpatially(H1, I1), overlapsSpatially(H1, I1)), [domainV(I1, [connected:2, meetsSpatially:2, overlapsSpatially:2]), domainV(H1, [connected:1, meetsSpatially:1, overlapsSpatially:1]), domainV(_G6207, []), forall(H1), forall(I1)], ['OBJ1'=H1, 'OBJ2'=I1], 'Merge', 'MEREOTOPOLOGY', 4756, 'Anonymous', on).
mooCache(instance(L3, 'SelfConnectedObject')<=>forall(M3, forall(N3, equal(L3, 'MereologicalSumFn'(N3, M3))=>connected(N3, M3))), (entails(not instance(L3, 'SelfConnectedObject'), holds('MereologicalSumFn', N3, M3, L3))and entails((not instance(L3, 'SelfConnectedObject')and'$existential'(M3, '?PART2', not forall(N3, holds('MereologicalSumFn', N3, '?PART2', L3)=>connected(N3, '?PART2'))))and'$existential'(N3, '?PART1', not (holds('MereologicalSumFn', '?PART1', M3, L3)=>connected('?PART1', M3))), not connected(N3, M3))and entails(not holds('MereologicalSumFn', N3, M3, L3)or connected(N3, M3), instance(L3, 'SelfConnectedObject')))and entails((holds('MereologicalSumFn', N3, M3, L3)and not connected(N3, M3))and'$existential'(N3, '?PART1', not (holds('MereologicalSumFn', '?PART1', M3, L3)=>connected('?PART1', M3))), not instance(L3, 'SelfConnectedObject'))and entails(((instance(L3, 'SelfConnectedObject')and not connected(N3, M3))and'$existential'(M3, '?PART2', not forall(N3, holds('MereologicalSumFn', N3, '?PART2', L3)=>connected(N3, '?PART2'))))and'$existential'(N3, '?PART1', not (holds('MereologicalSumFn', '?PART1', M3, L3)=>connected('?PART1', M3))), not holds('MereologicalSumFn', N3, M3, L3))and entails(instance(L3, 'SelfConnectedObject')and holds('MereologicalSumFn', N3, M3, L3), connected(N3, M3)), [domainV(N3, ['MereologicalSumFn':1, connected:1]), domainV(M3, ['MereologicalSumFn':2, connected:2]), domainV(L3, ['$instanceof':'SelfConnectedObject', 'MereologicalSumFn':3]), domainV(_G10106, []), forall(L3), forall(M3), forall(N3), replaceConsVar(M3, '$existential'('?PART2', not forall(N3, holds('MereologicalSumFn', N3, '?PART2', L3)=>connected(N3, '?PART2')))), replaceConsVar(N3, '$existential'('?PART1', not (holds('MereologicalSumFn', '?PART1', M3, L3)=>connected('?PART1', M3))))], ['OBJ'=L3, 'PART1'=N3, 'PART2'=M3], 'Merge', 'MEREOTOPOLOGY', 4758, 'Anonymous', on).
mooCache(instance(connects, 'SpatialRelation'), instance(connects, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4760, 'Anonymous', on).
mooCache(instance(connects, 'TernaryPredicate'), instance(connects, 'TernaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4762, 'Anonymous', on).
mooCache(domain(connects, 1, 'Object'), domain(connects, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4764, 'Anonymous', on).
mooCache(domain(connects, 2, 'Object'), domain(connects, 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4766, 'Anonymous', on).
mooCache(domain(connects, 3, 'Object'), domain(connects, 3, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4768, 'Anonymous', on).
mooCache(documentation(connects, string('"The relationship between three things, when one of   the three things connects the other two.  More formally, (connects ?OBJ1   ?OBJ2 ?OBJ3) means that (connected ?OBJ1 ?OBJ2) and (connected ?OBJ1 ?OBJ3)   and not (connected ?OBJ2 ?OBJ3)."')), documentation(connects, string('"The relationship between three things, when one of   the three things connects the other two.  More formally, (connects ?OBJ1   ?OBJ2 ?OBJ3) means that (connected ?OBJ1 ?OBJ2) and (connected ?OBJ1 ?OBJ3)   and not (connected ?OBJ2 ?OBJ3)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4770, 'Anonymous', on).
mooCache(connects(N15, O15, P15)<=>connected(N15, O15)and connected(N15, P15)and not connected(O15, P15), (entails(connects(N15, O15, P15), connected(N15, O15))and entails(connects(N15, O15, P15), connected(N15, P15))and entails(connects(N15, O15, P15), not connected(O15, P15))and entails(not connected(N15, O15)or not connected(N15, P15)or connected(O15, P15), not connects(N15, O15, P15)))and entails(connected(N15, O15)and connected(N15, P15)and not connected(O15, P15), connects(N15, O15, P15))and entails(not connects(N15, O15, P15)and connected(N15, P15)and not connected(O15, P15), not connected(N15, O15))and entails(not connects(N15, O15, P15)and connected(N15, O15)and not connected(O15, P15), not connected(N15, P15))and entails(not connects(N15, O15, P15)and connected(N15, O15)and connected(N15, P15), connected(O15, P15)), [domainV(P15, [connected:2, connects:3]), domainV(O15, [connected:1, connected:2, connects:2]), domainV(N15, [connected:1, connects:1]), domainV(_G9169, []), forall(N15), forall(O15), forall(P15)], ['OBJ1'=N15, 'OBJ2'=O15, 'OBJ3'=P15], 'Merge', 'MEREOTOPOLOGY', 4772, 'Anonymous', on).
mooCache(subrelation(meetsSpatially, connected), subrelation(meetsSpatially, connected), [], [], 'Merge', 'MEREOTOPOLOGY', 4774, 'Anonymous', on).
mooCache(disjointRelation(meetsSpatially, overlapsSpatially), disjointRelation(meetsSpatially, overlapsSpatially), [], [], 'Merge', 'MEREOTOPOLOGY', 4776, 'Anonymous', on).
mooCache(documentation(meetsSpatially, string('"(meetsSpatially ?OBJ1 ?OBJ2) means that   ?OBJ1 and ?OBJ2 are connected but that neither ?OBJ1 nor ?OBJ2   overlapsSpatially the other."')), documentation(meetsSpatially, string('"(meetsSpatially ?OBJ1 ?OBJ2) means that   ?OBJ1 and ?OBJ2 are connected but that neither ?OBJ1 nor ?OBJ2   overlapsSpatially the other."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4778, 'Anonymous', on).
mooCache(subrelation(overlapsSpatially, connected), subrelation(overlapsSpatially, connected), [], [], 'Merge', 'MEREOTOPOLOGY', 4780, 'Anonymous', on).
mooCache(documentation(overlapsSpatially, string('"(overlapsSpatially ?OBJ1 ?OBJ2) means   that the Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a   reflexive and symmetric (but not transitive) relation."')), documentation(overlapsSpatially, string('"(overlapsSpatially ?OBJ1 ?OBJ2) means   that the Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a   reflexive and symmetric (but not transitive) relation."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4782, 'Anonymous', on).
mooCache(overlapsSpatially(B26, C26)<=>exists(D26, part(D26, B26)and part(D26, C26)), (entails(overlapsSpatially(B26, C26)and'$existential'(D26, '?OBJ3', part('?OBJ3', B26)and part('?OBJ3', C26)), part(D26, B26))and entails(overlapsSpatially(B26, C26)and'$existential'(D26, '?OBJ3', part('?OBJ3', B26)and part('?OBJ3', C26)), part(D26, C26))and entails(not part(D26, B26)or not part(D26, C26), not overlapsSpatially(B26, C26)))and entails(part(D26, B26)and part(D26, C26), overlapsSpatially(B26, C26))and entails(not overlapsSpatially(B26, C26)and part(D26, C26), not part(D26, B26))and entails(not overlapsSpatially(B26, C26)and part(D26, B26), not part(D26, C26)), [domainV(D26, [part:1]), domainV(C26, [overlapsSpatially:2, part:2]), domainV(B26, [overlapsSpatially:1, part:2]), domainV(_G8134, []), forall(B26), forall(C26), replaceConsVar(D26, '$existential'('?OBJ3', part('?OBJ3', B26)and part('?OBJ3', C26))), forall(D26)], ['OBJ1'=B26, 'OBJ2'=C26, 'OBJ3'=D26], 'Merge', 'MEREOTOPOLOGY', 4784, 'Anonymous', on).
mooCache(forall(K31, part(K31, L31)=>overlapsSpatially(K31, M31))=>part(L31, M31), (entails(not part(L31, M31), part(K31, L31))and entails(not part(K31, L31), part(L31, M31)))and entails(not part(L31, M31)and'$existential'(K31, '?OBJ3', not (part('?OBJ3', L31)=>overlapsSpatially('?OBJ3', M31))), not overlapsSpatially(K31, M31))and entails(overlapsSpatially(K31, M31), part(L31, M31)), [domainV(M31, [overlapsSpatially:2, part:2]), domainV(L31, [part:1, part:2]), domainV(K31, [overlapsSpatially:1, part:1]), domainV(_G7756, []), forall(L31), forall(M31), replaceConsVar(K31, '$existential'('?OBJ3', not (part('?OBJ3', L31)=>overlapsSpatially('?OBJ3', M31))))], ['OBJ3'=K31, 'OBJ1'=L31, 'OBJ2'=M31], 'Merge', 'MEREOTOPOLOGY', 4786, 'Anonymous', on).
mooCache(partlyLocated(G34, H34)=>overlapsSpatially(G34, H34), entails(not overlapsSpatially(G34, H34), not partlyLocated(G34, H34))and entails(partlyLocated(G34, H34), overlapsSpatially(G34, H34)), [domainV(H34, [overlapsSpatially:2, partlyLocated:2]), domainV(G34, [overlapsSpatially:1, partlyLocated:1]), domainV(_G4378, []), forall(G34), forall(H34)], ['OBJ'=G34, 'REGION'=H34], 'Merge', 'MEREOTOPOLOGY', 4788, 'Anonymous', on).
mooCache(member(B36, C36)and member(D36, C36)=>not overlapsSpatially(B36, D36), entails(member(B36, C36)and member(D36, C36), not overlapsSpatially(B36, D36))and entails(overlapsSpatially(B36, D36)and member(D36, C36), not member(B36, C36))and entails(overlapsSpatially(B36, D36)and member(B36, C36), not member(D36, C36)), [domainV(D36, [member:1, overlapsSpatially:2]), domainV(C36, [member:2]), domainV(B36, [member:1, overlapsSpatially:1]), domainV(_G6499, []), forall(B36), forall(C36), forall(D36)], ['OBJ1'=B36, 'COLL'=C36, 'OBJ2'=D36], 'Merge', 'MEREOTOPOLOGY', 4790, 'Anonymous', on).
mooCache(instance(C38, 'CaseRole')and holds(C38, D38, E38)=>exists(F38, overlapsSpatially('WhereFn'(D38, F38), E38)), entails((instance(C38, 'CaseRole')and holds(C38, D38, E38))and'$existential'(F38, '?TIME', overlapsSpatially('WhereFn'(D38, '?TIME'), E38)), overlapsSpatially('WhereFn'(D38, F38), E38))and entails(not overlapsSpatially('WhereFn'(D38, F38), E38)and holds(C38, D38, E38), not instance(C38, 'CaseRole'))and entails(not overlapsSpatially('WhereFn'(D38, F38), E38)and instance(C38, 'CaseRole'), not holds(C38, D38, E38)), [domainV(F38, ['WhereFn':2]), domainV(E38, [overlapsSpatially:2, C38:2]), domainV(D38, ['WhereFn':1, C38:1]), domainV(C38, ['$instanceof':'CaseRole', holds:1]), domainV(_G8161, []), forall(C38), forall(D38), forall(E38), replaceConsVar(F38, '$existential'('?TIME', overlapsSpatially('WhereFn'(D38, '?TIME'), E38)))], ['REL'=C38, 'PROCESS'=D38, 'OBJ'=E38, 'TIME'=F38], 'Merge', 'MEREOTOPOLOGY', 4792, 'Anonymous', on).
mooCache(subrelation(overlapsPartially, overlapsSpatially), subrelation(overlapsPartially, overlapsSpatially), [], [], 'Merge', 'MEREOTOPOLOGY', 4794, 'Anonymous', on).
mooCache(documentation(overlapsPartially, string('"(overlapsPartially ?OBJ1 ?OBJ2) means   that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2   is a part of the other."')), documentation(overlapsPartially, string('"(overlapsPartially ?OBJ1 ?OBJ2) means   that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2   is a part of the other."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4796, 'Anonymous', on).
mooCache(overlapsPartially(V4, W4)=>not part(V4, W4)and not part(W4, V4), (entails(part(V4, W4), not overlapsPartially(V4, W4))and entails(overlapsPartially(V4, W4), not part(V4, W4)))and entails(part(W4, V4), not overlapsPartially(V4, W4))and entails(overlapsPartially(V4, W4), not part(W4, V4)), [domainV(W4, [overlapsPartially:2, part:1, part:2]), domainV(V4, [overlapsPartially:1, part:1, part:2]), domainV(_G6866, []), forall(V4), forall(W4)], ['OBJ1'=V4, 'OBJ2'=W4], 'Merge', 'MEREOTOPOLOGY', 4798, 'Anonymous', on).
mooCache(instance(superficialPart, 'BinaryPredicate'), instance(superficialPart, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4800, 'Anonymous', on).
mooCache(instance(superficialPart, 'SpatialRelation'), instance(superficialPart, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4802, 'Anonymous', on).
mooCache(subrelation(superficialPart, part), subrelation(superficialPart, part), [], [], 'Merge', 'MEREOTOPOLOGY', 4804, 'Anonymous', on).
mooCache(documentation(superficialPart, string('"(superficialPart ?OBJ1 ?OBJ2)   means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own   (or, intuitively, that only overlaps those parts of ?OBJ2 that are   externally connected with the geometric complement of ?OBJ2). This too   is a transitive relation closed under MereologicalSumFn and   MereologicalProductFn."')), documentation(superficialPart, string('"(superficialPart ?OBJ1 ?OBJ2)   means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own   (or, intuitively, that only overlaps those parts of ?OBJ2 that are   externally connected with the geometric complement of ?OBJ2). This too   is a transitive relation closed under MereologicalSumFn and   MereologicalProductFn."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4806, 'Anonymous', on).
mooCache(superficialPart(D13, E13)=>not interiorPart(D13, E13)and not exists(F13, interiorPart(F13, D13)), (entails(interiorPart(D13, E13), not superficialPart(D13, E13))and entails(superficialPart(D13, E13), not interiorPart(D13, E13)))and entails(interiorPart(F13, D13), not superficialPart(D13, E13))and entails(superficialPart(D13, E13), not interiorPart(F13, D13)), [domainV(F13, [interiorPart:1]), domainV(E13, [interiorPart:2, superficialPart:2]), domainV(D13, [interiorPart:1, interiorPart:2, superficialPart:1]), domainV(_G8152, []), forall(D13), forall(E13), forall(F13), forall(F13)], ['OBJ1'=D13, 'OBJ2'=E13, 'OBJ3'=F13], 'Merge', 'MEREOTOPOLOGY', 4808, 'Anonymous', on).
mooCache(subrelation(surface, superficialPart), subrelation(surface, superficialPart), [], [], 'Merge', 'MEREOTOPOLOGY', 4810, 'Anonymous', on).
mooCache(documentation(surface, string('"(surface ?OBJ1 ?OBJ2) means that ?OBJ1   is a maximally connected superficialPart of ?OBJ2."')), documentation(surface, string('"(surface ?OBJ1 ?OBJ2) means that ?OBJ1   is a maximally connected superficialPart of ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4812, 'Anonymous', on).
mooCache(surface(J18, K18)=>instance(J18, 'SelfConnectedObject')and forall(L18, superficialPart(L18, K18)=>part(L18, J18)), (entails(not instance(J18, 'SelfConnectedObject'), not surface(J18, K18))and entails(surface(J18, K18), instance(J18, 'SelfConnectedObject')))and entails(superficialPart(L18, K18)and not part(L18, J18), not surface(J18, K18))and entails(surface(J18, K18)and not part(L18, J18), not superficialPart(L18, K18))and entails(surface(J18, K18)and superficialPart(L18, K18), part(L18, J18)), [domainV(L18, [part:1, superficialPart:1]), domainV(K18, [superficialPart:2, surface:2]), domainV(J18, ['$instanceof':'SelfConnectedObject', part:2, surface:1]), domainV(_G9031, []), forall(J18), forall(K18), forall(L18)], ['OBJ1'=J18, 'OBJ2'=K18, 'OBJ3'=L18], 'Merge', 'MEREOTOPOLOGY', 4814, 'Anonymous', on).
mooCache(subrelation(interiorPart, part), subrelation(interiorPart, part), [], [], 'Merge', 'MEREOTOPOLOGY', 4816, 'Anonymous', on).
mooCache(documentation(interiorPart, string('"(interiorPart ?OBJ1 ?OBJ2) means   that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and   any superficialPart ?OBJ2."')), documentation(interiorPart, string('"(interiorPart ?OBJ1 ?OBJ2) means   that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and   any superficialPart ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4818, 'Anonymous', on).
mooCache(interiorPart(P23, Q23)<=>forall(R23, superficialPart(R23, Q23)=>not overlapsSpatially(P23, R23)), (entails(not interiorPart(P23, Q23), superficialPart(R23, Q23))and entails(not interiorPart(P23, Q23), overlapsSpatially(P23, R23))and entails(not superficialPart(R23, Q23)or not overlapsSpatially(P23, R23), interiorPart(P23, Q23)))and entails(superficialPart(R23, Q23)and overlapsSpatially(P23, R23), not interiorPart(P23, Q23))and entails((interiorPart(P23, Q23)and overlapsSpatially(P23, R23))and'$existential'(R23, '?PART', not (superficialPart('?PART', Q23)=>not overlapsSpatially(P23, '?PART'))), not superficialPart(R23, Q23))and entails((interiorPart(P23, Q23)and superficialPart(R23, Q23))and'$existential'(R23, '?PART', not (superficialPart('?PART', Q23)=>not overlapsSpatially(P23, '?PART'))), not overlapsSpatially(P23, R23)), [domainV(R23, [overlapsSpatially:2, superficialPart:1]), domainV(Q23, [interiorPart:2, superficialPart:2]), domainV(P23, [interiorPart:1, overlapsSpatially:1]), domainV(_G8662, []), forall(P23), forall(Q23), forall(R23), replaceConsVar(R23, '$existential'('?PART', not (superficialPart('?PART', Q23)=>not overlapsSpatially(P23, '?PART'))))], ['OBJ1'=P23, 'OBJ2'=Q23, 'PART'=R23], 'Merge', 'MEREOTOPOLOGY', 4820, 'Anonymous', on).
mooCache(instance('MereologicalSumFn', 'SpatialRelation'), instance('MereologicalSumFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4822, 'Anonymous', on).
mooCache(instance('MereologicalSumFn', 'BinaryFunction'), instance('MereologicalSumFn', 'BinaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4824, 'Anonymous', on).
mooCache(domain('MereologicalSumFn', 1, 'Object'), domain('MereologicalSumFn', 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4826, 'Anonymous', on).
mooCache(domain('MereologicalSumFn', 2, 'Object'), domain('MereologicalSumFn', 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4828, 'Anonymous', on).
mooCache(range('MereologicalSumFn', 'Object'), range('MereologicalSumFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4830, 'Anonymous', on).
mooCache(relatedInternalConcept('MereologicalSumFn', 'MereologicalProductFn'), relatedInternalConcept('MereologicalSumFn', 'MereologicalProductFn'), [], [], 'Merge', 'MEREOTOPOLOGY', 4832, 'Anonymous', on).
mooCache(relatedInternalConcept('MereologicalSumFn', 'MereologicalDifferenceFn'), relatedInternalConcept('MereologicalSumFn', 'MereologicalDifferenceFn'), [], [], 'Merge', 'MEREOTOPOLOGY', 4834, 'Anonymous', on).
mooCache(documentation('MereologicalSumFn', string('"(MereologicalSumFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to either   ?OBJ1 or ?OBJ2."')), documentation('MereologicalSumFn', string('"(MereologicalSumFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to either   ?OBJ1 or ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4836, 'Anonymous', on).
mooCache(equal(L38, 'MereologicalSumFn'(M38, N38))=>forall(O38, part(O38, L38)<=>part(O38, M38)or part(O38, N38)), entails((part(O38, M38)or part(O38, N38))and not part(O38, M38)and not part(O38, N38), not holds('MereologicalSumFn', M38, N38, L38))and (entails((part(O38, M38)or part(O38, N38))and not part(O38, L38), not holds('MereologicalSumFn', M38, N38, L38))and entails(holds('MereologicalSumFn', M38, N38, L38)and not part(O38, L38), not part(O38, M38))and entails(holds('MereologicalSumFn', M38, N38, L38)and not part(O38, L38), not part(O38, N38))and entails(holds('MereologicalSumFn', M38, N38, L38)and (part(O38, M38)or part(O38, N38)), part(O38, L38)))and entails(part(O38, L38)and not part(O38, L38), not holds('MereologicalSumFn', M38, N38, L38))and entails(part(O38, L38)and not part(O38, M38)and not part(O38, N38), not holds('MereologicalSumFn', M38, N38, L38))and entails(holds('MereologicalSumFn', M38, N38, L38)and not part(O38, M38)and not part(O38, N38), not part(O38, L38))and entails(holds('MereologicalSumFn', M38, N38, L38)and part(O38, L38)and not part(O38, N38), part(O38, M38))and entails(holds('MereologicalSumFn', M38, N38, L38)and part(O38, L38)and not part(O38, M38), part(O38, N38)), [domainV(O38, [part:1]), domainV(N38, ['MereologicalSumFn':2, part:2]), domainV(M38, ['MereologicalSumFn':1, part:2]), domainV(L38, ['MereologicalSumFn':3, part:2]), domainV(_G10739, []), forall(L38), forall(M38), forall(N38), forall(O38)], ['OBJ3'=L38, 'OBJ1'=M38, 'OBJ2'=N38, 'PART'=O38], 'Merge', 'MEREOTOPOLOGY', 4838, 'Anonymous', on).
mooCache(instance('MereologicalProductFn', 'SpatialRelation'), instance('MereologicalProductFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4840, 'Anonymous', on).
mooCache(instance('MereologicalProductFn', 'BinaryFunction'), instance('MereologicalProductFn', 'BinaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4842, 'Anonymous', on).
mooCache(domain('MereologicalProductFn', 1, 'Object'), domain('MereologicalProductFn', 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4844, 'Anonymous', on).
mooCache(domain('MereologicalProductFn', 2, 'Object'), domain('MereologicalProductFn', 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4846, 'Anonymous', on).
mooCache(range('MereologicalProductFn', 'Object'), range('MereologicalProductFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4848, 'Anonymous', on).
mooCache(relatedInternalConcept('MereologicalProductFn', 'MereologicalDifferenceFn'), relatedInternalConcept('MereologicalProductFn', 'MereologicalDifferenceFn'), [], [], 'Merge', 'MEREOTOPOLOGY', 4850, 'Anonymous', on).
mooCache(documentation('MereologicalProductFn', string('"(MereologicalProductFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to both ?OBJ1   and ?OBJ2."')), documentation('MereologicalProductFn', string('"(MereologicalProductFn ?OBJ1 ?OBJ2)   denotes the Object consisting of the parts which belong to both ?OBJ1   and ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4852, 'Anonymous', on).
mooCache(equal(Q13, 'MereologicalProductFn'(R13, S13))=>forall(T13, part(T13, Q13)<=>part(T13, R13)and part(T13, S13)), entails((not part(T13, R13)or not part(T13, S13))and part(T13, R13)and part(T13, S13), not holds('MereologicalProductFn', R13, S13, Q13))and (entails((not part(T13, R13)or not part(T13, S13))and part(T13, Q13), not holds('MereologicalProductFn', R13, S13, Q13))and entails(holds('MereologicalProductFn', R13, S13, Q13)and part(T13, Q13), part(T13, R13))and entails(holds('MereologicalProductFn', R13, S13, Q13)and part(T13, Q13), part(T13, S13))and entails(holds('MereologicalProductFn', R13, S13, Q13)and (not part(T13, R13)or not part(T13, S13)), not part(T13, Q13)))and entails(not part(T13, Q13)and part(T13, Q13), not holds('MereologicalProductFn', R13, S13, Q13))and entails(not part(T13, Q13)and part(T13, R13)and part(T13, S13), not holds('MereologicalProductFn', R13, S13, Q13))and entails(holds('MereologicalProductFn', R13, S13, Q13)and part(T13, R13)and part(T13, S13), part(T13, Q13))and entails(holds('MereologicalProductFn', R13, S13, Q13)and not part(T13, Q13)and part(T13, S13), not part(T13, R13))and entails(holds('MereologicalProductFn', R13, S13, Q13)and not part(T13, Q13)and part(T13, R13), not part(T13, S13)), [domainV(T13, [part:1]), domainV(S13, ['MereologicalProductFn':2, part:2]), domainV(R13, ['MereologicalProductFn':1, part:2]), domainV(Q13, ['MereologicalProductFn':3, part:2]), domainV(_G10769, []), forall(Q13), forall(R13), forall(S13), forall(T13)], ['OBJ3'=Q13, 'OBJ1'=R13, 'OBJ2'=S13, 'PART'=T13], 'Merge', 'MEREOTOPOLOGY', 4854, 'Anonymous', on).
mooCache(instance('MereologicalDifferenceFn', 'SpatialRelation'), instance('MereologicalDifferenceFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4856, 'Anonymous', on).
mooCache(instance('MereologicalDifferenceFn', 'BinaryFunction'), instance('MereologicalDifferenceFn', 'BinaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4858, 'Anonymous', on).
mooCache(domain('MereologicalDifferenceFn', 1, 'Object'), domain('MereologicalDifferenceFn', 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4860, 'Anonymous', on).
mooCache(domain('MereologicalDifferenceFn', 2, 'Object'), domain('MereologicalDifferenceFn', 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4862, 'Anonymous', on).
mooCache(range('MereologicalDifferenceFn', 'Object'), range('MereologicalDifferenceFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4864, 'Anonymous', on).
mooCache(documentation('MereologicalDifferenceFn', string('"(MereologicalDifferenceFn ?OBJ1   ?OBJ2) denotes the Object consisting of the parts which belong to ?OBJ1   and not to ?OBJ2."')), documentation('MereologicalDifferenceFn', string('"(MereologicalDifferenceFn ?OBJ1   ?OBJ2) denotes the Object consisting of the parts which belong to ?OBJ1   and not to ?OBJ2."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4866, 'Anonymous', on).
mooCache(equal(O25, 'MereologicalDifferenceFn'(P25, Q25))=>forall(R25, part(R25, O25)<=>part(R25, P25)and not part(R25, Q25)), entails((not part(R25, P25)or part(R25, Q25))and part(R25, P25)and not part(R25, Q25), not holds('MereologicalDifferenceFn', P25, Q25, O25))and (entails((not part(R25, P25)or part(R25, Q25))and part(R25, O25), not holds('MereologicalDifferenceFn', P25, Q25, O25))and entails(holds('MereologicalDifferenceFn', P25, Q25, O25)and part(R25, O25), part(R25, P25))and entails(holds('MereologicalDifferenceFn', P25, Q25, O25)and part(R25, O25), not part(R25, Q25))and entails(holds('MereologicalDifferenceFn', P25, Q25, O25)and (not part(R25, P25)or part(R25, Q25)), not part(R25, O25)))and entails(not part(R25, O25)and part(R25, O25), not holds('MereologicalDifferenceFn', P25, Q25, O25))and entails(not part(R25, O25)and part(R25, P25)and not part(R25, Q25), not holds('MereologicalDifferenceFn', P25, Q25, O25))and entails(holds('MereologicalDifferenceFn', P25, Q25, O25)and part(R25, P25)and not part(R25, Q25), part(R25, O25))and entails(holds('MereologicalDifferenceFn', P25, Q25, O25)and not part(R25, O25)and not part(R25, Q25), not part(R25, P25))and entails(holds('MereologicalDifferenceFn', P25, Q25, O25)and not part(R25, O25)and part(R25, P25), part(R25, Q25)), [domainV(R25, [part:1]), domainV(Q25, ['MereologicalDifferenceFn':2, part:2]), domainV(P25, ['MereologicalDifferenceFn':1, part:2]), domainV(O25, ['MereologicalDifferenceFn':3, part:2]), domainV(_G11199, []), forall(O25), forall(P25), forall(Q25), forall(R25)], ['OBJ3'=O25, 'OBJ1'=P25, 'OBJ2'=Q25, 'PART'=R25], 'Merge', 'MEREOTOPOLOGY', 4868, 'Anonymous', on).
mooCache(instance(hole, 'BinaryPredicate'), instance(hole, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4874, 'Anonymous', on).
mooCache(instance(hole, 'SpatialRelation'), instance(hole, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4876, 'Anonymous', on).
mooCache(instance(hole, 'AsymmetricRelation'), instance(hole, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4878, 'Anonymous', on).
mooCache(domain(hole, 1, 'Hole'), domain(hole, 1, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 4880, 'Anonymous', on).
mooCache(domain(hole, 2, 'Object'), domain(hole, 2, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4882, 'Anonymous', on).
mooCache(documentation(hole, string('"(hole ?HOLE ?OBJ) means that ?HOLE is a   Hole in ?OBJ.  A Hole is a fillable body located at the   surface an Object."')), documentation(hole, string('"(hole ?HOLE ?OBJ) means that ?HOLE is a   Hole in ?OBJ.  A Hole is a fillable body located at the   surface an Object."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4884, 'Anonymous', on).
mooCache(subclass('Hole', 'Region'), subclass('Hole', 'Region'), [], [], 'Merge', 'MEREOTOPOLOGY', 4886, 'Anonymous', on).
mooCache(relatedInternalConcept('Hole', hole), relatedInternalConcept('Hole', hole), [], [], 'Merge', 'MEREOTOPOLOGY', 4888, 'Anonymous', on).
mooCache(documentation('Hole', string('"A hole is an immaterial body located at the surface   of an Object.  Since every Hole is ontologically dependent on its host   (i.e., the object in which it is a hole), being a Hole is defined as   being a hole in something.  Note that two Holes may occupy the same   region, or part of the same region, without sharing any parts."')), documentation('Hole', string('"A hole is an immaterial body located at the surface   of an Object.  Since every Hole is ontologically dependent on its host   (i.e., the object in which it is a hole), being a Hole is defined as   being a hole in something.  Note that two Holes may occupy the same   region, or part of the same region, without sharing any parts."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4890, 'Anonymous', on).
mooCache(instance(H3, 'Hole')<=>exists(I3, hole(H3, I3)), (entails(instance(H3, 'Hole')and'$existential'(I3, '?OBJ', hole(H3, '?OBJ')), hole(H3, I3))and entails(not hole(H3, I3), not instance(H3, 'Hole')))and entails(hole(H3, I3), instance(H3, 'Hole'))and entails(not instance(H3, 'Hole'), not hole(H3, I3)), [domainV(I3, [hole:2]), domainV(H3, ['$instanceof':'Hole', hole:1]), domainV(_G5391, []), forall(H3), replaceConsVar(I3, '$existential'('?OBJ', hole(H3, '?OBJ'))), forall(I3)], ['HOLE'=H3, 'OBJ'=I3], 'Merge', 'MEREOTOPOLOGY', 4892, 'Anonymous', on).
mooCache(hole(C5, D5)=>not instance(D5, 'Hole'), entails(instance(D5, 'Hole'), not hole(C5, D5))and entails(hole(C5, D5), not instance(D5, 'Hole')), [domainV(D5, ['$instanceof':'Hole', hole:2]), domainV(C5, [hole:1]), domainV(_G4334, []), forall(C5), forall(D5)], ['HOLE'=C5, 'OBJ'=D5], 'Merge', 'MEREOTOPOLOGY', 4894, 'Anonymous', on).
mooCache(hole(U6, V6)=>not overlapsSpatially(U6, V6), entails(overlapsSpatially(U6, V6), not hole(U6, V6))and entails(hole(U6, V6), not overlapsSpatially(U6, V6)), [domainV(V6, [hole:2, overlapsSpatially:2]), domainV(U6, [hole:1, overlapsSpatially:1]), domainV(_G4666, []), forall(U6), forall(V6)], ['HOLE'=U6, 'OBJ'=V6], 'Merge', 'MEREOTOPOLOGY', 4896, 'Anonymous', on).
mooCache(hole(V8, W8)and hole(V8, X8)=>exists(Y8, properPart(Y8, 'MereologicalProductFn'(W8, X8))and hole(V8, Y8)), (entails((hole(V8, W8)and hole(V8, X8))and'$existential'(Y8, '?OBJ3', properPart('?OBJ3', 'MereologicalProductFn'(W8, X8))and hole(V8, '?OBJ3')), properPart(Y8, 'MereologicalProductFn'(W8, X8)))and entails(not properPart(Y8, 'MereologicalProductFn'(W8, X8))and hole(V8, X8), not hole(V8, W8))and entails(not properPart(Y8, 'MereologicalProductFn'(W8, X8))and hole(V8, W8), not hole(V8, X8)))and entails((hole(V8, W8)and hole(V8, X8))and'$existential'(Y8, '?OBJ3', properPart('?OBJ3', 'MereologicalProductFn'(W8, X8))and hole(V8, '?OBJ3')), hole(V8, Y8))and entails(not hole(V8, Y8)and hole(V8, X8), not hole(V8, W8))and entails(not hole(V8, Y8)and hole(V8, W8), not hole(V8, X8)), [domainV(Y8, [hole:2, properPart:1]), domainV(X8, ['MereologicalProductFn':2, hole:2]), domainV(W8, ['MereologicalProductFn':1, hole:2]), domainV(V8, [hole:1]), domainV(_G10259, []), forall(V8), forall(W8), forall(X8), replaceConsVar(Y8, '$existential'('?OBJ3', properPart('?OBJ3', 'MereologicalProductFn'(W8, X8))and hole(V8, '?OBJ3')))], ['HOLE'=V8, 'OBJ1'=W8, 'OBJ2'=X8, 'OBJ3'=Y8], 'Merge', 'MEREOTOPOLOGY', 4902, 'Anonymous', on).
mooCache(hole(H11, I11)and hole(J11, I11)=>forall(K11, part(K11, 'MereologicalSumFn'(H11, J11))=>hole(K11, I11)), entails(hole(J11, I11)and part(K11, 'MereologicalSumFn'(H11, J11))and not hole(K11, I11), not hole(H11, I11))and entails(hole(H11, I11)and part(K11, 'MereologicalSumFn'(H11, J11))and not hole(K11, I11), not hole(J11, I11))and entails((hole(H11, I11)and hole(J11, I11))and not hole(K11, I11), not part(K11, 'MereologicalSumFn'(H11, J11)))and entails((hole(H11, I11)and hole(J11, I11))and part(K11, 'MereologicalSumFn'(H11, J11)), hole(K11, I11)), [domainV(K11, [hole:1, part:1]), domainV(J11, ['MereologicalSumFn':2, hole:1]), domainV(I11, [hole:2]), domainV(H11, ['MereologicalSumFn':1, hole:1]), domainV(_G10074, []), forall(H11), forall(I11), forall(J11), forall(K11)], ['HOLE1'=H11, 'OBJ'=I11, 'HOLE2'=J11, 'HOLE3'=K11], 'Merge', 'MEREOTOPOLOGY', 4906, 'Anonymous', on).
mooCache(hole(J13, K13)and part(K13, L13)=>overlapsSpatially(J13, L13)or hole(J13, L13), entails(part(K13, L13)and not overlapsSpatially(J13, L13)and not hole(J13, L13), not hole(J13, K13))and entails(hole(J13, K13)and not overlapsSpatially(J13, L13)and not hole(J13, L13), not part(K13, L13))and entails((hole(J13, K13)and part(K13, L13))and not hole(J13, L13), overlapsSpatially(J13, L13))and entails((hole(J13, K13)and part(K13, L13))and not overlapsSpatially(J13, L13), hole(J13, L13)), [domainV(L13, [hole:2, overlapsSpatially:2, part:2]), domainV(K13, [hole:2, part:1]), domainV(J13, [hole:1, overlapsSpatially:1]), domainV(_G7690, []), forall(J13), forall(K13), forall(L13)], ['HOLE'=J13, 'OBJ1'=K13, 'OBJ2'=L13], 'Merge', 'MEREOTOPOLOGY', 4912, 'Anonymous', on).
mooCache(hole(J15, K15)and hole(L15, M15)and overlapsSpatially(J15, L15)=>overlapsSpatially(K15, M15), entails(hole(J15, K15)and hole(L15, M15)and overlapsSpatially(J15, L15), overlapsSpatially(K15, M15))and entails(not overlapsSpatially(K15, M15)and hole(L15, M15)and overlapsSpatially(J15, L15), not hole(J15, K15))and entails(not overlapsSpatially(K15, M15)and hole(J15, K15)and overlapsSpatially(J15, L15), not hole(L15, M15))and entails(not overlapsSpatially(K15, M15)and hole(J15, K15)and hole(L15, M15), not overlapsSpatially(J15, L15)), [domainV(M15, [hole:2, overlapsSpatially:2]), domainV(L15, [hole:1, overlapsSpatially:2]), domainV(K15, [hole:2, overlapsSpatially:1]), domainV(J15, [hole:1, overlapsSpatially:1]), domainV(_G7770, []), forall(J15), forall(K15), forall(L15), forall(M15)], ['HOLE1'=J15, 'OBJ1'=K15, 'HOLE2'=L15, 'OBJ2'=M15], 'Merge', 'MEREOTOPOLOGY', 4916, 'Anonymous', on).
mooCache(instance(H17, 'Hole')=>exists(I17, properPart(I17, H17)), entails(not properPart(I17, H17), not instance(H17, 'Hole'))and entails(instance(H17, 'Hole')and'$existential'(I17, '?HOLE2', properPart('?HOLE2', H17)), properPart(I17, H17)), [domainV(I17, [properPart:1]), domainV(H17, ['$instanceof':'Hole', properPart:2]), domainV(_G5400, []), forall(H17), replaceConsVar(I17, '$existential'('?HOLE2', properPart('?HOLE2', H17)))], ['HOLE1'=H17, 'HOLE2'=I17], 'Merge', 'MEREOTOPOLOGY', 4920, 'Anonymous', on).
mooCache(instance('PrincipalHostFn', 'SpatialRelation'), instance('PrincipalHostFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4926, 'Anonymous', on).
mooCache(instance('PrincipalHostFn', 'UnaryFunction'), instance('PrincipalHostFn', 'UnaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 4928, 'Anonymous', on).
mooCache(domain('PrincipalHostFn', 1, 'Hole'), domain('PrincipalHostFn', 1, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 4930, 'Anonymous', on).
mooCache(range('PrincipalHostFn', 'Object'), range('PrincipalHostFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4932, 'Anonymous', on).
mooCache(documentation('PrincipalHostFn', string('"A UnaryFunction that maps a Hole to   the Object which is its principal host.  The principle host of a Hole   is its maximally connected host (a notion taken here to be defined only   when the argument is a hole)."')), documentation('PrincipalHostFn', string('"A UnaryFunction that maps a Hole to   the Object which is its principal host.  The principle host of a Hole   is its maximally connected host (a notion taken here to be defined only   when the argument is a hole)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4934, 'Anonymous', on).
mooCache(equal(D27, 'PrincipalHostFn'(E27))=>forall(F27, overlapsSpatially(F27, D27)<=>exists(G27, hole(E27, G27)and instance(G27, 'SelfConnectedObject')and overlapsSpatially(F27, G27))), entails((not hole(E27, G27)or not instance(G27, 'SelfConnectedObject')or not overlapsSpatially(F27, G27))and hole(E27, G27)and instance(G27, 'SelfConnectedObject')and overlapsSpatially(F27, G27), not holds('PrincipalHostFn', E27, D27))and (entails((not hole(E27, G27)or not instance(G27, 'SelfConnectedObject')or not overlapsSpatially(F27, G27))and overlapsSpatially(F27, D27), not holds('PrincipalHostFn', E27, D27))and entails((holds('PrincipalHostFn', E27, D27)and overlapsSpatially(F27, D27))and'$existential'(G27, '?OBJ3', hole(E27, '?OBJ3')and instance('?OBJ3', 'SelfConnectedObject')and overlapsSpatially(F27, '?OBJ3')), hole(E27, G27))and entails((holds('PrincipalHostFn', E27, D27)and overlapsSpatially(F27, D27))and'$existential'(G27, '?OBJ3', hole(E27, '?OBJ3')and instance('?OBJ3', 'SelfConnectedObject')and overlapsSpatially(F27, '?OBJ3')), instance(G27, 'SelfConnectedObject'))and entails((holds('PrincipalHostFn', E27, D27)and overlapsSpatially(F27, D27))and'$existential'(G27, '?OBJ3', hole(E27, '?OBJ3')and instance('?OBJ3', 'SelfConnectedObject')and overlapsSpatially(F27, '?OBJ3')), overlapsSpatially(F27, G27))and entails(holds('PrincipalHostFn', E27, D27)and (not hole(E27, G27)or not instance(G27, 'SelfConnectedObject')or not overlapsSpatially(F27, G27)), not overlapsSpatially(F27, D27)))and entails(not overlapsSpatially(F27, D27)and overlapsSpatially(F27, D27), not holds('PrincipalHostFn', E27, D27))and entails(not overlapsSpatially(F27, D27)and hole(E27, G27)and instance(G27, 'SelfConnectedObject')and overlapsSpatially(F27, G27), not holds('PrincipalHostFn', E27, D27))and entails(holds('PrincipalHostFn', E27, D27)and hole(E27, G27)and instance(G27, 'SelfConnectedObject')and overlapsSpatially(F27, G27), overlapsSpatially(F27, D27))and entails(holds('PrincipalHostFn', E27, D27)and not overlapsSpatially(F27, D27)and instance(G27, 'SelfConnectedObject')and overlapsSpatially(F27, G27), not hole(E27, G27))and entails(holds('PrincipalHostFn', E27, D27)and not overlapsSpatially(F27, D27)and hole(E27, G27)and overlapsSpatially(F27, G27), not instance(G27, 'SelfConnectedObject'))and entails(holds('PrincipalHostFn', E27, D27)and not overlapsSpatially(F27, D27)and hole(E27, G27)and instance(G27, 'SelfConnectedObject'), not overlapsSpatially(F27, G27)), [domainV(G27, ['$instanceof':'SelfConnectedObject', hole:2, overlapsSpatially:2]), domainV(F27, [overlapsSpatially:1]), domainV(E27, ['PrincipalHostFn':1, hole:1]), domainV(D27, ['PrincipalHostFn':2, overlapsSpatially:2]), domainV(_G13756, []), forall(D27), forall(E27), forall(F27), replaceConsVar(G27, '$existential'('?OBJ3', hole(E27, '?OBJ3')and instance('?OBJ3', 'SelfConnectedObject')and overlapsSpatially(F27, '?OBJ3'))), forall(G27)], ['OBJ1'=D27, 'HOLE'=E27, 'OBJ2'=F27, 'OBJ3'=G27], 'Merge', 'MEREOTOPOLOGY', 4936, 'Anonymous', on).
mooCache(instance(T29, 'Hole')=>instance(T29, 'SelfConnectedObject'), entails(not instance(T29, 'SelfConnectedObject'), not instance(T29, 'Hole'))and entails(instance(T29, 'Hole'), instance(T29, 'SelfConnectedObject')), [domainV(T29, ['$instanceof':'Hole', '$instanceof':'SelfConnectedObject']), domainV(_G3790, []), forall(T29)], ['HOLE'=T29], 'Merge', 'MEREOTOPOLOGY', 4940, 'Anonymous', on).
mooCache(hole(J31, K31)=>connected(J31, K31), entails(not connected(J31, K31), not hole(J31, K31))and entails(hole(J31, K31), connected(J31, K31)), [domainV(K31, [connected:2, hole:2]), domainV(J31, [connected:1, hole:1]), domainV(_G4252, []), forall(J31), forall(K31)], ['HOLE'=J31, 'OBJ'=K31], 'Merge', 'MEREOTOPOLOGY', 4944, 'Anonymous', on).
mooCache(instance(F33, 'Hole')=>exists(G33, hole(F33, G33)and instance(G33, 'SelfConnectedObject')), (entails(not hole(F33, G33), not instance(F33, 'Hole'))and entails(instance(F33, 'Hole')and'$existential'(G33, '?OBJ', hole(F33, '?OBJ')and instance('?OBJ', 'SelfConnectedObject')), hole(F33, G33)))and entails(not instance(G33, 'SelfConnectedObject'), not instance(F33, 'Hole'))and entails(instance(F33, 'Hole')and'$existential'(G33, '?OBJ', hole(F33, '?OBJ')and instance('?OBJ', 'SelfConnectedObject')), instance(G33, 'SelfConnectedObject')), [domainV(G33, ['$instanceof':'SelfConnectedObject', hole:2]), domainV(F33, ['$instanceof':'Hole', hole:1]), domainV(_G6645, []), forall(F33), replaceConsVar(G33, '$existential'('?OBJ', hole(F33, '?OBJ')and instance('?OBJ', 'SelfConnectedObject')))], ['HOLE'=F33, 'OBJ'=G33], 'Merge', 'MEREOTOPOLOGY', 4948, 'Anonymous', on).
mooCache(instance(F35, 'Hole')and properPart(G35, F35)=>exists(H35, meetsSpatially(F35, H35)and not meetsSpatially(G35, H35)), (entails((instance(F35, 'Hole')and properPart(G35, F35))and'$existential'(H35, '?OBJ', meetsSpatially(F35, '?OBJ')and not meetsSpatially(G35, '?OBJ')), meetsSpatially(F35, H35))and entails(not meetsSpatially(F35, H35)and properPart(G35, F35), not instance(F35, 'Hole'))and entails(not meetsSpatially(F35, H35)and instance(F35, 'Hole'), not properPart(G35, F35)))and entails(instance(F35, 'Hole')and properPart(G35, F35), not meetsSpatially(G35, H35))and entails(meetsSpatially(G35, H35)and properPart(G35, F35), not instance(F35, 'Hole'))and entails(meetsSpatially(G35, H35)and instance(F35, 'Hole'), not properPart(G35, F35)), [domainV(H35, [meetsSpatially:2]), domainV(G35, [meetsSpatially:1, properPart:1]), domainV(F35, ['$instanceof':'Hole', meetsSpatially:1, properPart:2]), domainV(_G9378, []), forall(F35), forall(G35), replaceConsVar(H35, '$existential'('?OBJ', meetsSpatially(F35, '?OBJ')and not meetsSpatially(G35, '?OBJ')))], ['HOLE1'=F35, 'HOLE2'=G35, 'OBJ'=H35], 'Merge', 'MEREOTOPOLOGY', 4954, 'Anonymous', on).
mooCache(instance(fills, 'BinaryPredicate'), instance(fills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4956, 'Anonymous', on).
mooCache(instance(fills, 'SpatialRelation'), instance(fills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4958, 'Anonymous', on).
mooCache(instance(fills, 'AsymmetricRelation'), instance(fills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4960, 'Anonymous', on).
mooCache(subrelation(fills, completelyFills), subrelation(fills, completelyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 4962, 'Anonymous', on).
mooCache(subrelation(fills, properlyFills), subrelation(fills, properlyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 4964, 'Anonymous', on).
mooCache(domain(fills, 1, 'Object'), domain(fills, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 4966, 'Anonymous', on).
mooCache(domain(fills, 2, 'Hole'), domain(fills, 2, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 4968, 'Anonymous', on).
mooCache(relatedInternalConcept(fills, 'Fillable'), relatedInternalConcept(fills, 'Fillable'), [], [], 'Merge', 'MEREOTOPOLOGY', 4970, 'Anonymous', on).
mooCache(documentation(fills, string('"Holes can be filled.  (fills ?OBJ ?HOLE)   means that the Object ?OBJ fills the Hole ?HOLE.  Note that   fills here means perfectly filled."')), documentation(fills, string('"Holes can be filled.  (fills ?OBJ ?HOLE)   means that the Object ?OBJ fills the Hole ?HOLE.  Note that   fills here means perfectly filled."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4972, 'Anonymous', on).
mooCache(instance('Fillable', 'ShapeProperty'), instance('Fillable', 'ShapeProperty'), [], [], 'Merge', 'MEREOTOPOLOGY', 4974, 'Anonymous', on).
mooCache(documentation('Fillable', string('"Something is Fillable if it can be filled by   something else.  Note that \'filled\' here means perfectly filled."')), documentation('Fillable', string('"Something is Fillable if it can be filled by   something else.  Note that \'filled\' here means perfectly filled."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4976, 'Anonymous', on).
mooCache(holdsDuring(D15, fills(E15, F15))=>attribute(F15, 'Fillable'), entails(not attribute(F15, 'Fillable'), not holdsDuring(D15, fills(E15, F15)))and entails(holdsDuring(D15, fills(E15, F15)), attribute(F15, 'Fillable')), [domainV(F15, [attribute:1, fills:2]), domainV(E15, [fills:1]), domainV(D15, [holdsDuring:1]), domainV(_G4891, []), forall(D15), forall(E15), forall(F15)], ['TIME'=D15, 'OBJ'=E15, 'HOLE'=F15], 'Merge', 'MEREOTOPOLOGY', 4978, 'Anonymous', on).
mooCache(attribute(Z16, 'Fillable')<=>exists(A17, instance(A17, 'Hole')and part(Z16, A17)), (entails(attribute(Z16, 'Fillable')and'$existential'(A17, '?HOLE2', instance('?HOLE2', 'Hole')and part(Z16, '?HOLE2')), instance(A17, 'Hole'))and entails(attribute(Z16, 'Fillable')and'$existential'(A17, '?HOLE2', instance('?HOLE2', 'Hole')and part(Z16, '?HOLE2')), part(Z16, A17))and entails(not instance(A17, 'Hole')or not part(Z16, A17), not attribute(Z16, 'Fillable')))and entails(instance(A17, 'Hole')and part(Z16, A17), attribute(Z16, 'Fillable'))and entails(not attribute(Z16, 'Fillable')and part(Z16, A17), not instance(A17, 'Hole'))and entails(not attribute(Z16, 'Fillable')and instance(A17, 'Hole'), not part(Z16, A17)), [domainV(A17, ['$instanceof':'Hole', part:2]), domainV(Z16, [attribute:1, part:1]), domainV(_G7327, []), forall(Z16), replaceConsVar(A17, '$existential'('?HOLE2', instance('?HOLE2', 'Hole')and part(Z16, '?HOLE2'))), forall(A17)], ['HOLE1'=Z16, 'HOLE2'=A17], 'Merge', 'MEREOTOPOLOGY', 4984, 'Anonymous', on).
mooCache(instance(completelyFills, 'BinaryPredicate'), instance(completelyFills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4986, 'Anonymous', on).
mooCache(instance(completelyFills, 'SpatialRelation'), instance(completelyFills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4988, 'Anonymous', on).
mooCache(instance(completelyFills, 'AsymmetricRelation'), instance(completelyFills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 4990, 'Anonymous', on).
mooCache(subrelation(completelyFills, partiallyFills), subrelation(completelyFills, partiallyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 4992, 'Anonymous', on).
mooCache(documentation(completelyFills, string('"(completelyFills ?OBJ ?HOLE)   means that some part of the Object ?OBJ fills the Hole ?HOLE.    Note that if (completelyFills ?OBJ1 ?HOLE) and (part   ?OBJ1 ?OBJ2), then (completelyFills ?OBJ2 ?HOLE)."')), documentation(completelyFills, string('"(completelyFills ?OBJ ?HOLE)   means that some part of the Object ?OBJ fills the Hole ?HOLE.    Note that if (completelyFills ?OBJ1 ?HOLE) and (part   ?OBJ1 ?OBJ2), then (completelyFills ?OBJ2 ?HOLE)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 4994, 'Anonymous', on).
mooCache(completelyFills(R26, S26)=>exists(T26, part(T26, R26)and fills(T26, S26)), (entails(not part(T26, R26), not completelyFills(R26, S26))and entails(completelyFills(R26, S26)and'$existential'(T26, '?OBJ2', part('?OBJ2', R26)and fills('?OBJ2', S26)), part(T26, R26)))and entails(not fills(T26, S26), not completelyFills(R26, S26))and entails(completelyFills(R26, S26)and'$existential'(T26, '?OBJ2', part('?OBJ2', R26)and fills('?OBJ2', S26)), fills(T26, S26)), [domainV(T26, [fills:1, part:1]), domainV(S26, [completelyFills:2, fills:2]), domainV(R26, [completelyFills:1, part:2]), domainV(_G7521, []), forall(R26), forall(S26), replaceConsVar(T26, '$existential'('?OBJ2', part('?OBJ2', R26)and fills('?OBJ2', S26)))], ['OBJ1'=R26, 'HOLE'=S26, 'OBJ2'=T26], 'Merge', 'MEREOTOPOLOGY', 4996, 'Anonymous', on).
mooCache(instance(partiallyFills, 'BinaryPredicate'), instance(partiallyFills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 4998, 'Anonymous', on).
mooCache(instance(partiallyFills, 'SpatialRelation'), instance(partiallyFills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5000, 'Anonymous', on).
mooCache(instance(partiallyFills, 'AsymmetricRelation'), instance(partiallyFills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5002, 'Anonymous', on).
mooCache(domain(partiallyFills, 1, 'Object'), domain(partiallyFills, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 5004, 'Anonymous', on).
mooCache(domain(partiallyFills, 2, 'Hole'), domain(partiallyFills, 2, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 5006, 'Anonymous', on).
mooCache(documentation(partiallyFills, string('"(partiallyFills ?OBJ ?HOLE) means that   ?OBJ completelyFills some part of ?HOLE. Note that if (partiallyFills   ?OBJ1 ?HOLE) and (part ?OBJ1 ?OBJ2), then (partiallyFills ?OBJ2 ?HOLE).   Note too that a partial filler need not be wholly inside a hole (it may   stick out), which means that every complete filler also qualifies as   (is a limit case of) a partial one."')), documentation(partiallyFills, string('"(partiallyFills ?OBJ ?HOLE) means that   ?OBJ completelyFills some part of ?HOLE. Note that if (partiallyFills   ?OBJ1 ?HOLE) and (part ?OBJ1 ?OBJ2), then (partiallyFills ?OBJ2 ?HOLE).   Note too that a partial filler need not be wholly inside a hole (it may   stick out), which means that every complete filler also qualifies as   (is a limit case of) a partial one."')), [], [], 'Merge', 'MEREOTOPOLOGY', 5008, 'Anonymous', on).
mooCache(partiallyFills(O37, P37)=>exists(Q37, part(Q37, P37)and completelyFills(O37, Q37)), (entails(not part(Q37, P37), not partiallyFills(O37, P37))and entails(partiallyFills(O37, P37)and'$existential'(Q37, '?HOLE2', part('?HOLE2', P37)and completelyFills(O37, '?HOLE2')), part(Q37, P37)))and entails(not completelyFills(O37, Q37), not partiallyFills(O37, P37))and entails(partiallyFills(O37, P37)and'$existential'(Q37, '?HOLE2', part('?HOLE2', P37)and completelyFills(O37, '?HOLE2')), completelyFills(O37, Q37)), [domainV(Q37, [completelyFills:2, part:1]), domainV(P37, [part:2, partiallyFills:2]), domainV(O37, [completelyFills:1, partiallyFills:1]), domainV(_G7593, []), forall(O37), forall(P37), replaceConsVar(Q37, '$existential'('?HOLE2', part('?HOLE2', P37)and completelyFills(O37, '?HOLE2')))], ['OBJ'=O37, 'HOLE1'=P37, 'HOLE2'=Q37], 'Merge', 'MEREOTOPOLOGY', 5010, 'Anonymous', on).
mooCache(instance(properlyFills, 'BinaryPredicate'), instance(properlyFills, 'BinaryPredicate'), [], [], 'Merge', 'MEREOTOPOLOGY', 5012, 'Anonymous', on).
mooCache(instance(properlyFills, 'SpatialRelation'), instance(properlyFills, 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5014, 'Anonymous', on).
mooCache(instance(properlyFills, 'AsymmetricRelation'), instance(properlyFills, 'AsymmetricRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5016, 'Anonymous', on).
mooCache(subrelation(properlyFills, partiallyFills), subrelation(properlyFills, partiallyFills), [], [], 'Merge', 'MEREOTOPOLOGY', 5018, 'Anonymous', on).
mooCache(domain(properlyFills, 1, 'Object'), domain(properlyFills, 1, 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 5020, 'Anonymous', on).
mooCache(domain(properlyFills, 2, 'Hole'), domain(properlyFills, 2, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 5022, 'Anonymous', on).
mooCache(documentation(properlyFills, string('"(properlyFills ?OBJ ?HOLE)   means that ?HOLE is properly (though perhaps incompletely) filled by   ?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that   properlyFills is the dual of completelyFills, and is so   related to partiallyFills that ?OBJ properlyFills ?HOLE just in   case ?OBJ partiallyFills every part of ?HOLE.  (Thus, every perfect   filler is both complete and proper in this sense)."')), documentation(properlyFills, string('"(properlyFills ?OBJ ?HOLE)   means that ?HOLE is properly (though perhaps incompletely) filled by   ?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that   properlyFills is the dual of completelyFills, and is so   related to partiallyFills that ?OBJ properlyFills ?HOLE just in   case ?OBJ partiallyFills every part of ?HOLE.  (Thus, every perfect   filler is both complete and proper in this sense)."')), [], [], 'Merge', 'MEREOTOPOLOGY', 5024, 'Anonymous', on).
mooCache(properlyFills(M11, N11)=>exists(O11, part(O11, N11)and fills(M11, O11)), (entails(not part(O11, N11), not properlyFills(M11, N11))and entails(properlyFills(M11, N11)and'$existential'(O11, '?HOLE2', part('?HOLE2', N11)and fills(M11, '?HOLE2')), part(O11, N11)))and entails(not fills(M11, O11), not properlyFills(M11, N11))and entails(properlyFills(M11, N11)and'$existential'(O11, '?HOLE2', part('?HOLE2', N11)and fills(M11, '?HOLE2')), fills(M11, O11)), [domainV(O11, [fills:2, part:1]), domainV(N11, [part:2, properlyFills:2]), domainV(M11, [fills:1, properlyFills:1]), domainV(_G7527, []), forall(M11), forall(N11), replaceConsVar(O11, '$existential'('?HOLE2', part('?HOLE2', N11)and fills(M11, '?HOLE2')))], ['OBJ'=M11, 'HOLE1'=N11, 'HOLE2'=O11], 'Merge', 'MEREOTOPOLOGY', 5026, 'Anonymous', on).
mooCache(fills(J13, K13)and attribute(L13, 'Fillable')=>not overlapsSpatially(J13, L13), entails(fills(J13, K13)and attribute(L13, 'Fillable'), not overlapsSpatially(J13, L13))and entails(overlapsSpatially(J13, L13)and attribute(L13, 'Fillable'), not fills(J13, K13))and entails(overlapsSpatially(J13, L13)and fills(J13, K13), not attribute(L13, 'Fillable')), [domainV(L13, [attribute:1, overlapsSpatially:2]), domainV(K13, [fills:2]), domainV(J13, [fills:1, overlapsSpatially:1]), domainV(_G6274, []), forall(J13), forall(K13), forall(L13)], ['OBJ1'=J13, 'HOLE'=K13, 'OBJ2'=L13], 'Merge', 'MEREOTOPOLOGY', 5032, 'Anonymous', on).
mooCache(completelyFills(F15, G15)=>forall(H15, connected(H15, G15)=>connected(H15, F15)), entails(connected(H15, G15)and not connected(H15, F15), not completelyFills(F15, G15))and entails(completelyFills(F15, G15)and not connected(H15, F15), not connected(H15, G15))and entails(completelyFills(F15, G15)and connected(H15, G15), connected(H15, F15)), [domainV(H15, [connected:1]), domainV(G15, [completelyFills:2, connected:2]), domainV(F15, [completelyFills:1, connected:2]), domainV(_G7496, []), forall(F15), forall(G15), forall(H15)], ['OBJ1'=F15, 'HOLE'=G15, 'OBJ2'=H15], 'Merge', 'MEREOTOPOLOGY', 5038, 'Anonymous', on).
mooCache(properlyFills(Z16, A17)and connected(B17, Z16)=>connected(A17, B17), entails(properlyFills(Z16, A17)and connected(B17, Z16), connected(A17, B17))and entails(not connected(A17, B17)and connected(B17, Z16), not properlyFills(Z16, A17))and entails(not connected(A17, B17)and properlyFills(Z16, A17), not connected(B17, Z16)), [domainV(B17, [connected:1, connected:2]), domainV(A17, [connected:1, properlyFills:2]), domainV(Z16, [connected:2, properlyFills:1]), domainV(_G6132, []), forall(Z16), forall(A17), forall(B17)], ['OBJ1'=Z16, 'HOLE'=A17, 'OBJ2'=B17], 'Merge', 'MEREOTOPOLOGY', 5044, 'Anonymous', on).
mooCache(fills(U18, V18)and properPart(W18, V18)=>completelyFills(U18, W18), entails(fills(U18, V18)and properPart(W18, V18), completelyFills(U18, W18))and entails(not completelyFills(U18, W18)and properPart(W18, V18), not fills(U18, V18))and entails(not completelyFills(U18, W18)and fills(U18, V18), not properPart(W18, V18)), [domainV(W18, [completelyFills:2, properPart:1]), domainV(V18, [fills:2, properPart:2]), domainV(U18, [completelyFills:1, fills:1]), domainV(_G6153, []), forall(U18), forall(V18), forall(W18)], ['OBJ'=U18, 'HOLE1'=V18, 'HOLE2'=W18], 'Merge', 'MEREOTOPOLOGY', 5050, 'Anonymous', on).
mooCache(fills(O20, P20)and properPart(Q20, O20)=>properlyFills(Q20, P20), entails(fills(O20, P20)and properPart(Q20, O20), properlyFills(Q20, P20))and entails(not properlyFills(Q20, P20)and properPart(Q20, O20), not fills(O20, P20))and entails(not properlyFills(Q20, P20)and fills(O20, P20), not properPart(Q20, O20)), [domainV(Q20, [properPart:1, properlyFills:1]), domainV(P20, [fills:2, properlyFills:2]), domainV(O20, [fills:1, properPart:2]), domainV(_G6114, []), forall(O20), forall(P20), forall(Q20)], ['OBJ1'=O20, 'HOLE'=P20, 'OBJ2'=Q20], 'Merge', 'MEREOTOPOLOGY', 5056, 'Anonymous', on).
mooCache(instance('SkinFn', 'SpatialRelation'), instance('SkinFn', 'SpatialRelation'), [], [], 'Merge', 'MEREOTOPOLOGY', 5058, 'Anonymous', on).
mooCache(instance('SkinFn', 'UnaryFunction'), instance('SkinFn', 'UnaryFunction'), [], [], 'Merge', 'MEREOTOPOLOGY', 5060, 'Anonymous', on).
mooCache(domain('SkinFn', 1, 'Hole'), domain('SkinFn', 1, 'Hole'), [], [], 'Merge', 'MEREOTOPOLOGY', 5062, 'Anonymous', on).
mooCache(range('SkinFn', 'Object'), range('SkinFn', 'Object'), [], [], 'Merge', 'MEREOTOPOLOGY', 5064, 'Anonymous', on).
mooCache(documentation('SkinFn', string('"A UnaryFunction that maps a Hole to the skin   of the Hole.  The skin of a Hole is the fusion of those superficial   parts (see superficialPart) of the Hole\'s principal host (see   PrincipalHostFn) with which the Hole is externally connected."')), documentation('SkinFn', string('"A UnaryFunction that maps a Hole to the skin   of the Hole.  The skin of a Hole is the fusion of those superficial   parts (see superficialPart) of the Hole\'s principal host (see   PrincipalHostFn) with which the Hole is externally connected."')), [], [], 'Merge', 'MEREOTOPOLOGY', 5066, 'Anonymous', on).
mooCache(equal(F30, 'SkinFn'(G30))=>forall(H30, overlapsSpatially(H30, F30)<=>exists(I30, superficialPart(I30, 'PrincipalHostFn'(G30))and meetsSpatially(G30, I30)and overlapsSpatially(H30, I30))), entails((not superficialPart(I30, 'PrincipalHostFn'(G30))or not meetsSpatially(G30, I30)or not overlapsSpatially(H30, I30))and superficialPart(I30, 'PrincipalHostFn'(G30))and meetsSpatially(G30, I30)and overlapsSpatially(H30, I30), not holds('SkinFn', G30, F30))and (entails((not superficialPart(I30, 'PrincipalHostFn'(G30))or not meetsSpatially(G30, I30)or not overlapsSpatially(H30, I30))and overlapsSpatially(H30, F30), not holds('SkinFn', G30, F30))and entails((holds('SkinFn', G30, F30)and overlapsSpatially(H30, F30))and'$existential'(I30, '?OBJ3', superficialPart('?OBJ3', 'PrincipalHostFn'(G30))and meetsSpatially(G30, '?OBJ3')and overlapsSpatially(H30, '?OBJ3')), superficialPart(I30, 'PrincipalHostFn'(G30)))and entails((holds('SkinFn', G30, F30)and overlapsSpatially(H30, F30))and'$existential'(I30, '?OBJ3', superficialPart('?OBJ3', 'PrincipalHostFn'(G30))and meetsSpatially(G30, '?OBJ3')and overlapsSpatially(H30, '?OBJ3')), meetsSpatially(G30, I30))and entails((holds('SkinFn', G30, F30)and overlapsSpatially(H30, F30))and'$existential'(I30, '?OBJ3', superficialPart('?OBJ3', 'PrincipalHostFn'(G30))and meetsSpatially(G30, '?OBJ3')and overlapsSpatially(H30, '?OBJ3')), overlapsSpatially(H30, I30))and entails(holds('SkinFn', G30, F30)and (not superficialPart(I30, 'PrincipalHostFn'(G30))or not meetsSpatially(G30, I30)or not overlapsSpatially(H30, I30)), not overlapsSpatially(H30, F30)))and entails(not overlapsSpatially(H30, F30)and overlapsSpatially(H30, F30), not holds('SkinFn', G30, F30))and entails(not overlapsSpatially(H30, F30)and superficialPart(I30, 'PrincipalHostFn'(G30))and meetsSpatially(G30, I30)and overlapsSpatially(H30, I30), not holds('SkinFn', G30, F30))and entails(holds('SkinFn', G30, F30)and superficialPart(I30, 'PrincipalHostFn'(G30))and meetsSpatially(G30, I30)and overlapsSpatially(H30, I30), overlapsSpatially(H30, F30))and entails(holds('SkinFn', G30, F30)and not overlapsSpatially(H30, F30)and meetsSpatially(G30, I30)and overlapsSpatially(H30, I30), not superficialPart(I30, 'PrincipalHostFn'(G30)))and entails(holds('SkinFn', G30, F30)and not overlapsSpatially(H30, F30)and superficialPart(I30, 'PrincipalHostFn'(G30))and overlapsSpatially(H30, I30), not meetsSpatially(G30, I30))and entails(holds('SkinFn', G30, F30)and not overlapsSpatially(H30, F30)and superficialPart(I30, 'PrincipalHostFn'(G30))and meetsSpatially(G30, I30), not overlapsSpatially(H30, I30)), [domainV(I30, [meetsSpatially:2, overlapsSpatially:2, superficialPart:1]), domainV(H30, [overlapsSpatially:1]), domainV(G30, ['PrincipalHostFn':1, 'SkinFn':1, meetsSpatially:1]), domainV(F30, ['SkinFn':2, overlapsSpatially:2]), domainV(_G14787, []), forall(F30), forall(G30), forall(H30), replaceConsVar(I30, '$existential'('?OBJ3', superficialPart('?OBJ3', 'PrincipalHostFn'(G30))and meetsSpatially(G30, '?OBJ3')and overlapsSpatially(H30, '?OBJ3'))), forall(I30)], ['OBJ1'=F30, 'HOLE'=G30, 'OBJ2'=H30, 'OBJ3'=I30], 'Merge', 'MEREOTOPOLOGY', 5068, 'Anonymous', on).
mooCache('include-context'('TEMPORAL', 'CONCEPTS'), 'include-context'('TEMPORAL', 'CONCEPTS'), [], [], 'Merge', 'PROCESSES', 5080, 'Anonymous', on).
mooCache('include-context'('OBJECTS'), 'include-context'('OBJECTS'), [], [], 'Merge', 'PROCESSES', 5083, 'Anonymous', on).
mooCache('include-context'('QUALITIES'), 'include-context'('QUALITIES'), [], [], 'Merge', 'PROCESSES', 5086, 'Anonymous', on).
mooCache(instance(subProcess, 'BinaryPredicate'), instance(subProcess, 'BinaryPredicate'), [], [], 'Merge', 'PROCESSES', 5089, 'Anonymous', on).
mooCache(instance(subProcess, 'PartialOrderingRelation'), instance(subProcess, 'PartialOrderingRelation'), [], [], 'Merge', 'PROCESSES', 5091, 'Anonymous', on).
mooCache(domain(subProcess, 1, 'Process'), domain(subProcess, 1, 'Process'), [], [], 'Merge', 'PROCESSES', 5093, 'Anonymous', on).
mooCache(domain(subProcess, 2, 'Process'), domain(subProcess, 2, 'Process'), [], [], 'Merge', 'PROCESSES', 5095, 'Anonymous', on).
mooCache(documentation(subProcess, string('"(subProcess ?SUBPROC ?PROC) means that ?SUBPROC   is a subprocess of ?PROC.  A subprocess is here understood as a temporally   distinguished part (proper or not) of a Process."')), documentation(subProcess, string('"(subProcess ?SUBPROC ?PROC) means that ?SUBPROC   is a subprocess of ?PROC.  A subprocess is here understood as a temporally   distinguished part (proper or not) of a Process."')), [], [], 'Merge', 'PROCESSES', 5097, 'Anonymous', on).
mooCache(subProcess(I10, J10)=>equal('WhenFn'(I10), 'WhenFn'(J10))or during('WhenFn'(I10), 'WhenFn'(J10)), entails(not equal('WhenFn'(I10), 'WhenFn'(J10))and not during('WhenFn'(I10), 'WhenFn'(J10)), not subProcess(I10, J10))and entails(subProcess(I10, J10)and not during('WhenFn'(I10), 'WhenFn'(J10)), equal('WhenFn'(I10), 'WhenFn'(J10)))and entails(subProcess(I10, J10)and not equal('WhenFn'(I10), 'WhenFn'(J10)), during('WhenFn'(I10), 'WhenFn'(J10))), [domainV(J10, ['WhenFn':1, subProcess:2]), domainV(I10, ['WhenFn':1, subProcess:1]), domainV(_G7402, []), forall(I10), forall(J10)], ['SUBPROC'=I10, 'PROC'=J10], 'Merge', 'PROCESSES', 5099, 'Anonymous', on).
mooCache(subProcess(E12, F12)=>forall(G12, located(F12, G12)=>located(E12, G12)), entails(located(F12, G12)and not located(E12, G12), not subProcess(E12, F12))and entails(subProcess(E12, F12)and not located(E12, G12), not located(F12, G12))and entails(subProcess(E12, F12)and located(F12, G12), located(E12, G12)), [domainV(G12, [located:2]), domainV(F12, [located:1, subProcess:2]), domainV(E12, [located:1, subProcess:1]), domainV(_G7274, []), forall(E12), forall(F12), forall(G12)], ['SUBPROC'=E12, 'PROC'=F12, 'REGION'=G12], 'Merge', 'PROCESSES', 5101, 'Anonymous', on).
mooCache(instance(A14, 'Process')and subProcess(B14, A14)=>exists(C14, time(B14, C14)), entails((instance(A14, 'Process')and subProcess(B14, A14))and'$existential'(C14, '?TIME', time(B14, '?TIME')), time(B14, C14))and entails(not time(B14, C14)and subProcess(B14, A14), not instance(A14, 'Process'))and entails(not time(B14, C14)and instance(A14, 'Process'), not subProcess(B14, A14)), [domainV(C14, [time:2]), domainV(B14, [subProcess:1, time:1]), domainV(A14, ['$instanceof':'Process', subProcess:2]), domainV(_G6806, []), forall(A14), forall(B14), replaceConsVar(C14, '$existential'('?TIME', time(B14, '?TIME')))], ['PROC'=A14, 'SUBPROC'=B14, 'TIME'=C14], 'Merge', 'PROCESSES', 5105, 'Anonymous', on).
mooCache(instance(V15, 'Process')=>exists(W15, subProcess(W15, V15)), entails(not subProcess(W15, V15), not instance(V15, 'Process'))and entails(instance(V15, 'Process')and'$existential'(W15, '?SUBPROC', subProcess('?SUBPROC', V15)), subProcess(W15, V15)), [domainV(W15, [subProcess:1]), domainV(V15, ['$instanceof':'Process', subProcess:2]), domainV(_G5238, []), forall(V15), replaceConsVar(W15, '$existential'('?SUBPROC', subProcess('?SUBPROC', V15)))], ['PROC'=V15, 'SUBPROC'=W15], 'Merge', 'PROCESSES', 5109, 'Anonymous', on).
mooCache(subclass('NonintentionalProcess', 'Process'), subclass('NonintentionalProcess', 'Process'), [], [], 'Merge', 'PROCESSES', 5111, 'Anonymous', on).
mooCache(documentation('NonintentionalProcess', string('"A Process that occurs irrespective   of the intentions of Humans or Animals."')), documentation('NonintentionalProcess', string('"A Process that occurs irrespective   of the intentions of Humans or Animals."')), [], [], 'Merge', 'PROCESSES', 5113, 'Anonymous', on).
mooCache(subclass('BiologicalProcess', 'NonintentionalProcess'), subclass('BiologicalProcess', 'NonintentionalProcess'), [], [], 'Merge', 'PROCESSES', 5119, 'Anonymous', on).
mooCache(documentation('BiologicalProcess', string('"A NonintentionalProcess embodied in an   Organism."')), documentation('BiologicalProcess', string('"A NonintentionalProcess embodied in an   Organism."')), [], [], 'Merge', 'PROCESSES', 5121, 'Anonymous', on).
mooCache(instance(N23, 'BiologicalProcess')=>exists(O23, instance(O23, 'Organism')and located(N23, O23)), (entails(not instance(O23, 'Organism'), not instance(N23, 'BiologicalProcess'))and entails(instance(N23, 'BiologicalProcess')and'$existential'(O23, '?OBJ', instance('?OBJ', 'Organism')and located(N23, '?OBJ')), instance(O23, 'Organism')))and entails(not located(N23, O23), not instance(N23, 'BiologicalProcess'))and entails(instance(N23, 'BiologicalProcess')and'$existential'(O23, '?OBJ', instance('?OBJ', 'Organism')and located(N23, '?OBJ')), located(N23, O23)), [domainV(O23, ['$instanceof':'Organism', located:2]), domainV(N23, ['$instanceof':'BiologicalProcess', located:1]), domainV(_G6690, []), forall(N23), replaceConsVar(O23, '$existential'('?OBJ', instance('?OBJ', 'Organism')and located(N23, '?OBJ')))], ['PROC'=N23, 'OBJ'=O23], 'Merge', 'PROCESSES', 5123, 'Anonymous', on).
mooCache(subclass('PhysiologicProcess', 'BiologicalProcess'), subclass('PhysiologicProcess', 'BiologicalProcess'), [], [], 'Merge', 'PROCESSES', 5125, 'Anonymous', on).
mooCache(documentation('PhysiologicProcess', string('"A normal process of an Organism   or part of an Organism."')), documentation('PhysiologicProcess', string('"A normal process of an Organism   or part of an Organism."')), [], [], 'Merge', 'PROCESSES', 5127, 'Anonymous', on).
mooCache(subclass('OrganismProcess', 'PhysiologicProcess'), subclass('OrganismProcess', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5129, 'Anonymous', on).
mooCache(documentation('OrganismProcess', string('"A physiologic function of the   Organism as a whole, of multiple organ systems or of multiple   Organs or Tissues."')), documentation('OrganismProcess', string('"A physiologic function of the   Organism as a whole, of multiple organ systems or of multiple   Organs or Tissues."')), [], [], 'Merge', 'PROCESSES', 5131, 'Anonymous', on).
mooCache(subclass('Birth', 'OrganismProcess'), subclass('Birth', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5133, 'Anonymous', on).
mooCache(documentation('Birth', string('"The Process of being born."')), documentation('Birth', string('"The Process of being born."')), [], [], 'Merge', 'PROCESSES', 5135, 'Anonymous', on).
mooCache(instance(A34, 'Organism')=>exists(B34, instance(B34, 'Birth')and experiencer(B34, A34)), (entails(not instance(B34, 'Birth'), not instance(A34, 'Organism'))and entails(instance(A34, 'Organism')and'$existential'(B34, '?BIRTH', instance('?BIRTH', 'Birth')and experiencer('?BIRTH', A34)), instance(B34, 'Birth')))and entails(not experiencer(B34, A34), not instance(A34, 'Organism'))and entails(instance(A34, 'Organism')and'$existential'(B34, '?BIRTH', instance('?BIRTH', 'Birth')and experiencer('?BIRTH', A34)), experiencer(B34, A34)), [domainV(B34, ['$instanceof':'Birth', experiencer:1]), domainV(A34, ['$instanceof':'Organism', experiencer:2]), domainV(_G6726, []), forall(A34), replaceConsVar(B34, '$existential'('?BIRTH', instance('?BIRTH', 'Birth')and experiencer('?BIRTH', A34)))], ['ORGANISM'=A34, 'BIRTH'=B34], 'Merge', 'PROCESSES', 5137, 'Anonymous', on).
mooCache(subclass('Death', 'OrganismProcess'), subclass('Death', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5139, 'Anonymous', on).
mooCache(documentation('Death', string('"The Process of dying."')), documentation('Death', string('"The Process of dying."')), [], [], 'Merge', 'PROCESSES', 5141, 'Anonymous', on).
mooCache(instance(G, 'Organism')=>exists(H, instance(H, 'Death')and experiencer(H, G)), (entails(not instance(H, 'Death'), not instance(G, 'Organism'))and entails(instance(G, 'Organism')and'$existential'(H, '?DEATH', instance('?DEATH', 'Death')and experiencer('?DEATH', G)), instance(H, 'Death')))and entails(not experiencer(H, G), not instance(G, 'Organism'))and entails(instance(G, 'Organism')and'$existential'(H, '?DEATH', instance('?DEATH', 'Death')and experiencer('?DEATH', G)), experiencer(H, G)), [domainV(H, ['$instanceof':'Death', experiencer:1]), domainV(G, ['$instanceof':'Organism', experiencer:2]), domainV(_G6726, []), forall(G), replaceConsVar(H, '$existential'('?DEATH', instance('?DEATH', 'Death')and experiencer('?DEATH', G)))], ['ORGANISM'=G, 'DEATH'=H], 'Merge', 'PROCESSES', 5143, 'Anonymous', on).
mooCache(subclass('Breathing', 'OrganismProcess'), subclass('Breathing', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5145, 'Anonymous', on).
mooCache(documentation('Breathing', string('"The Process of respiration, by which oxygen   is made available to an Animal.  This covers processes of inhalation,   exhalation, and alternations between the two."')), documentation('Breathing', string('"The Process of respiration, by which oxygen   is made available to an Animal.  This covers processes of inhalation,   exhalation, and alternations between the two."')), [], [], 'Merge', 'PROCESSES', 5147, 'Anonymous', on).
mooCache(subclass('Ingesting', 'OrganismProcess'), subclass('Ingesting', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5149, 'Anonymous', on).
mooCache(documentation('Ingesting', string('"The Process by which Food is   incorporated into an Animal."')), documentation('Ingesting', string('"The Process by which Food is   incorporated into an Animal."')), [], [], 'Merge', 'PROCESSES', 5151, 'Anonymous', on).
mooCache(instance(R7, 'Ingesting')and patient(R7, S7)=>instance(S7, 'Food'), entails(instance(R7, 'Ingesting')and patient(R7, S7), instance(S7, 'Food'))and entails(not instance(S7, 'Food')and patient(R7, S7), not instance(R7, 'Ingesting'))and entails(not instance(S7, 'Food')and instance(R7, 'Ingesting'), not patient(R7, S7)), [domainV(S7, ['$instanceof':'Food', patient:2]), domainV(R7, ['$instanceof':'Ingesting', patient:1]), domainV(_G5295, []), forall(R7), forall(S7)], ['ACT'=R7, 'FOOD'=S7], 'Merge', 'PROCESSES', 5153, 'Anonymous', on).
mooCache(subclass('Eating', 'Ingesting'), subclass('Eating', 'Ingesting'), [], [], 'Merge', 'PROCESSES', 5155, 'Anonymous', on).
mooCache(documentation('Eating', string('"The Process by which solid Food is   incorporated into an Animal."')), documentation('Eating', string('"The Process by which solid Food is   incorporated into an Animal."')), [], [], 'Merge', 'PROCESSES', 5157, 'Anonymous', on).
mooCache(instance(G12, 'Eating')and patient(G12, H12)=>attribute(H12, 'Solid'), entails(instance(G12, 'Eating')and patient(G12, H12), attribute(H12, 'Solid'))and entails(not attribute(H12, 'Solid')and patient(G12, H12), not instance(G12, 'Eating'))and entails(not attribute(H12, 'Solid')and instance(G12, 'Eating'), not patient(G12, H12)), [domainV(H12, [attribute:1, patient:2]), domainV(G12, ['$instanceof':'Eating', patient:1]), domainV(_G5318, []), forall(G12), forall(H12)], ['ACT'=G12, 'FOOD'=H12], 'Merge', 'PROCESSES', 5159, 'Anonymous', on).
mooCache(subclass('Drinking', 'Ingesting'), subclass('Drinking', 'Ingesting'), [], [], 'Merge', 'PROCESSES', 5161, 'Anonymous', on).
mooCache(documentation('Drinking', string('"The Process by which liquid Food is   incorporated into an Animal."')), documentation('Drinking', string('"The Process by which liquid Food is   incorporated into an Animal."')), [], [], 'Merge', 'PROCESSES', 5163, 'Anonymous', on).
mooCache(instance(B17, 'Drinking')and patient(B17, C17)=>attribute(C17, 'Liquid'), entails(instance(B17, 'Drinking')and patient(B17, C17), attribute(C17, 'Liquid'))and entails(not attribute(C17, 'Liquid')and patient(B17, C17), not instance(B17, 'Drinking'))and entails(not attribute(C17, 'Liquid')and instance(B17, 'Drinking'), not patient(B17, C17)), [domainV(C17, [attribute:1, patient:2]), domainV(B17, ['$instanceof':'Drinking', patient:1]), domainV(_G5336, []), forall(B17), forall(C17)], ['ACT'=B17, 'FOOD'=C17], 'Merge', 'PROCESSES', 5165, 'Anonymous', on).
mooCache(subclass('Growth', 'PhysiologicProcess'), subclass('Growth', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5167, 'Anonymous', on).
mooCache(documentation('Growth', string('"The Process of biological development in which   an Organism changes its form or its size."')), documentation('Growth', string('"The Process of biological development in which   an Organism changes its form or its size."')), [], [], 'Merge', 'PROCESSES', 5169, 'Anonymous', on).
mooCache(subclass('Replication', 'PhysiologicProcess'), subclass('Replication', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5171, 'Anonymous', on).
mooCache(documentation('Replication', string('"The Process of biological reproduction.    This can be either a sexual or an asexual process."')), documentation('Replication', string('"The Process of biological reproduction.    This can be either a sexual or an asexual process."')), [], [], 'Merge', 'PROCESSES', 5173, 'Anonymous', on).
mooCache(subclass('SexualReproduction', 'Replication'), subclass('SexualReproduction', 'Replication'), [], [], 'Merge', 'PROCESSES', 5175, 'Anonymous', on).
mooCache(disjoint('SexualReproduction', 'AsexualReproduction'), disjoint('SexualReproduction', 'AsexualReproduction'), [], [], 'Merge', 'PROCESSES', 5177, 'Anonymous', on).
mooCache(documentation('SexualReproduction', string('"Sexual Processes of biological   reproduction."')), documentation('SexualReproduction', string('"Sexual Processes of biological   reproduction."')), [], [], 'Merge', 'PROCESSES', 5179, 'Anonymous', on).
mooCache(subclass('AsexualReproduction', 'Replication'), subclass('AsexualReproduction', 'Replication'), [], [], 'Merge', 'PROCESSES', 5181, 'Anonymous', on).
mooCache(documentation('AsexualReproduction', string('"Asexual Processes of biological   reproduction."')), documentation('AsexualReproduction', string('"Asexual Processes of biological   reproduction."')), [], [], 'Merge', 'PROCESSES', 5183, 'Anonymous', on).
mooCache(subclass('MentalProcess', 'IntentionalProcess'), subclass('MentalProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5185, 'Anonymous', on).
mooCache(documentation('MentalProcess', string('"An OrganismProcess involving the mind   or cognitive processing."')), documentation('MentalProcess', string('"An OrganismProcess involving the mind   or cognitive processing."')), [], [], 'Merge', 'PROCESSES', 5187, 'Anonymous', on).
mooCache(instance(M34, 'MentalProcess')=>exists(N34, instance(N34, 'Animal')and experiencer(M34, N34)), (entails(not instance(N34, 'Animal'), not instance(M34, 'MentalProcess'))and entails(instance(M34, 'MentalProcess')and'$existential'(N34, '?ANIMAL', instance('?ANIMAL', 'Animal')and experiencer(M34, '?ANIMAL')), instance(N34, 'Animal')))and entails(not experiencer(M34, N34), not instance(M34, 'MentalProcess'))and entails(instance(M34, 'MentalProcess')and'$existential'(N34, '?ANIMAL', instance('?ANIMAL', 'Animal')and experiencer(M34, '?ANIMAL')), experiencer(M34, N34)), [domainV(N34, ['$instanceof':'Animal', experiencer:2]), domainV(M34, ['$instanceof':'MentalProcess', experiencer:1]), domainV(_G6768, []), forall(M34), replaceConsVar(N34, '$existential'('?ANIMAL', instance('?ANIMAL', 'Animal')and experiencer(M34, '?ANIMAL')))], ['PROCESS'=M34, 'ANIMAL'=N34], 'Merge', 'PROCESSES', 5189, 'Anonymous', on).
mooCache(subclass('OrganOrTissueProcess', 'PhysiologicProcess'), subclass('OrganOrTissueProcess', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5191, 'Anonymous', on).
mooCache(disjoint('OrganOrTissueProcess', 'OrganismProcess'), disjoint('OrganOrTissueProcess', 'OrganismProcess'), [], [], 'Merge', 'PROCESSES', 5193, 'Anonymous', on).
mooCache(documentation('OrganOrTissueProcess', string('"A PhysiologicProcess of a   particular Organ or Tissue."')), documentation('OrganOrTissueProcess', string('"A PhysiologicProcess of a   particular Organ or Tissue."')), [], [], 'Merge', 'PROCESSES', 5195, 'Anonymous', on).
mooCache(instance(F2, 'OrganOrTissueProcess')=>exists(G2, located(F2, G2)and (instance(G2, 'Organ')or instance(G2, 'Tissue'))), (entails(not located(F2, G2), not instance(F2, 'OrganOrTissueProcess'))and entails(instance(F2, 'OrganOrTissueProcess')and'$existential'(G2, '?THING', located(F2, '?THING')and (instance('?THING', 'Organ')or instance('?THING', 'Tissue'))), located(F2, G2)))and entails(not instance(G2, 'Organ')and not instance(G2, 'Tissue'), not instance(F2, 'OrganOrTissueProcess'))and entails((instance(F2, 'OrganOrTissueProcess')and not instance(G2, 'Tissue'))and'$existential'(G2, '?THING', located(F2, '?THING')and (instance('?THING', 'Organ')or instance('?THING', 'Tissue'))), instance(G2, 'Organ'))and entails((instance(F2, 'OrganOrTissueProcess')and not instance(G2, 'Organ'))and'$existential'(G2, '?THING', located(F2, '?THING')and (instance('?THING', 'Organ')or instance('?THING', 'Tissue'))), instance(G2, 'Tissue')), [domainV(G2, ['$instanceof':'Organ', '$instanceof':'Tissue', located:2]), domainV(F2, ['$instanceof':'OrganOrTissueProcess', located:1]), domainV(_G8161, []), forall(F2), replaceConsVar(G2, '$existential'('?THING', located(F2, '?THING')and (instance('?THING', 'Organ')or instance('?THING', 'Tissue'))))], ['PROC'=F2, 'THING'=G2], 'Merge', 'PROCESSES', 5197, 'Anonymous', on).
mooCache(subclass('PathologicProcess', 'BiologicalProcess'), subclass('PathologicProcess', 'BiologicalProcess'), [], [], 'Merge', 'PROCESSES', 5199, 'Anonymous', on).
mooCache(disjoint('PathologicProcess', 'PhysiologicProcess'), disjoint('PathologicProcess', 'PhysiologicProcess'), [], [], 'Merge', 'PROCESSES', 5201, 'Anonymous', on).
mooCache(documentation('PathologicProcess', string('"A disordered process, activity, or   state of the Organism as a whole, of a body system or systems, or of   multiple Organs or Tissues. Included here are normal responses to a   negative stimulus as well as patholologic conditions or states that are   less specific than a disease. Pathologic functions frequently have   systemic effects."')), documentation('PathologicProcess', string('"A disordered process, activity, or   state of the Organism as a whole, of a body system or systems, or of   multiple Organs or Tissues. Included here are normal responses to a   negative stimulus as well as patholologic conditions or states that are   less specific than a disease. Pathologic functions frequently have   systemic effects."')), [], [], 'Merge', 'PROCESSES', 5203, 'Anonymous', on).
mooCache(subclass('DiseaseOrSyndrome', 'PathologicProcess'), subclass('DiseaseOrSyndrome', 'PathologicProcess'), [], [], 'Merge', 'PROCESSES', 5205, 'Anonymous', on).
mooCache(documentation('DiseaseOrSyndrome', string('"A PathologicProcess which alters or   interferes with a normal process, state or activity of an Organism.    It is usually characterized by the abnormal functioning of one or more   of the host\'s systems, parts, or Organs."')), documentation('DiseaseOrSyndrome', string('"A PathologicProcess which alters or   interferes with a normal process, state or activity of an Organism.    It is usually characterized by the abnormal functioning of one or more   of the host\'s systems, parts, or Organs."')), [], [], 'Merge', 'PROCESSES', 5207, 'Anonymous', on).
mooCache(subclass('MentalOrBehavioralDysfunction', 'DiseaseOrSyndrome'), subclass('MentalOrBehavioralDysfunction', 'DiseaseOrSyndrome'), [], [], 'Merge', 'PROCESSES', 5209, 'Anonymous', on).
mooCache(documentation('MentalOrBehavioralDysfunction', string('"A clinically significant   dysfunction whose major manifestation is behavioral or psychological.    These dysfunctions may have identified or presumed biological etiologies   or manifestations."')), documentation('MentalOrBehavioralDysfunction', string('"A clinically significant   dysfunction whose major manifestation is behavioral or psychological.    These dysfunctions may have identified or presumed biological etiologies   or manifestations."')), [], [], 'Merge', 'PROCESSES', 5211, 'Anonymous', on).
mooCache(instance(I14, 'MentalOrBehavioralDysfunction')=>exists(J14, instance(J14, 'Animal')and patient(I14, J14)), (entails(not instance(J14, 'Animal'), not instance(I14, 'MentalOrBehavioralDysfunction'))and entails(instance(I14, 'MentalOrBehavioralDysfunction')and'$existential'(J14, '?ANIMAL', instance('?ANIMAL', 'Animal')and patient(I14, '?ANIMAL')), instance(J14, 'Animal')))and entails(not patient(I14, J14), not instance(I14, 'MentalOrBehavioralDysfunction'))and entails(instance(I14, 'MentalOrBehavioralDysfunction')and'$existential'(J14, '?ANIMAL', instance('?ANIMAL', 'Animal')and patient(I14, '?ANIMAL')), patient(I14, J14)), [domainV(J14, ['$instanceof':'Animal', patient:2]), domainV(I14, ['$instanceof':'MentalOrBehavioralDysfunction', patient:1]), domainV(_G6840, []), forall(I14), replaceConsVar(J14, '$existential'('?ANIMAL', instance('?ANIMAL', 'Animal')and patient(I14, '?ANIMAL')))], ['DISEASE'=I14, 'ANIMAL'=J14], 'Merge', 'PROCESSES', 5213, 'Anonymous', on).
mooCache(subclass('Injuring', 'PathologicProcess'), subclass('Injuring', 'PathologicProcess'), [], [], 'Merge', 'PROCESSES', 5215, 'Anonymous', on).
mooCache(documentation('Injuring', string('"A traumatic wound or injury caused by an   external agent or force.  Since no injury is possible without some   biologic function which affects the organism being injured, it is a   subclass of BiologicalProcess."')), documentation('Injuring', string('"A traumatic wound or injury caused by an   external agent or force.  Since no injury is possible without some   biologic function which affects the organism being injured, it is a   subclass of BiologicalProcess."')), [], [], 'Merge', 'PROCESSES', 5217, 'Anonymous', on).
mooCache(instance(Z18, 'Injuring')=>exists(A19, instance(A19, 'AnatomicalStructure')and patient(Z18, A19)), (entails(not instance(A19, 'AnatomicalStructure'), not instance(Z18, 'Injuring'))and entails(instance(Z18, 'Injuring')and'$existential'(A19, '?STRUCT', instance('?STRUCT', 'AnatomicalStructure')and patient(Z18, '?STRUCT')), instance(A19, 'AnatomicalStructure')))and entails(not patient(Z18, A19), not instance(Z18, 'Injuring'))and entails(instance(Z18, 'Injuring')and'$existential'(A19, '?STRUCT', instance('?STRUCT', 'AnatomicalStructure')and patient(Z18, '?STRUCT')), patient(Z18, A19)), [domainV(A19, ['$instanceof':'AnatomicalStructure', patient:2]), domainV(Z18, ['$instanceof':'Injuring', patient:1]), domainV(_G6744, []), forall(Z18), replaceConsVar(A19, '$existential'('?STRUCT', instance('?STRUCT', 'AnatomicalStructure')and patient(Z18, '?STRUCT')))], ['INJ'=Z18, 'STRUCT'=A19], 'Merge', 'PROCESSES', 5219, 'Anonymous', on).
mooCache(instance(S20, 'Injuring')<=>instance(S20, 'Damaging')and patient(S20, 'Organism'), (entails(instance(S20, 'Injuring'), instance(S20, 'Damaging'))and entails(instance(S20, 'Injuring'), patient(S20, 'Organism'))and entails(not instance(S20, 'Damaging')or not patient(S20, 'Organism'), not instance(S20, 'Injuring')))and entails(instance(S20, 'Damaging')and patient(S20, 'Organism'), instance(S20, 'Injuring'))and entails(not instance(S20, 'Injuring')and patient(S20, 'Organism'), not instance(S20, 'Damaging'))and entails(not instance(S20, 'Injuring')and instance(S20, 'Damaging'), not patient(S20, 'Organism')), [domainV(S20, ['$instanceof':'Damaging', '$instanceof':'Injuring', patient:1]), domainV(_G5354, []), forall(S20)], ['INJ'=S20], 'Merge', 'PROCESSES', 5221, 'Anonymous', on).
mooCache(subclass('Poisoning', 'Injuring'), subclass('Poisoning', 'Injuring'), [], [], 'Merge', 'PROCESSES', 5223, 'Anonymous', on).
mooCache(documentation('Poisoning', string('"A Poisoning is caused by an external   substance.  Since Poisoning is not possible without some biologic   function which affects the Organism being injured, it is a subclass   of BiologicalProcess."')), documentation('Poisoning', string('"A Poisoning is caused by an external   substance.  Since Poisoning is not possible without some biologic   function which affects the Organism being injured, it is a subclass   of BiologicalProcess."')), [], [], 'Merge', 'PROCESSES', 5225, 'Anonymous', on).
mooCache(instance(N25, 'Poisoning')=>exists(O25, patient(N25, O25)and (instance(O25, 'Organism')or instance(O25, 'AnatomicalStructure'))), (entails(not patient(N25, O25), not instance(N25, 'Poisoning'))and entails(instance(N25, 'Poisoning')and'$existential'(O25, '?THING', patient(N25, '?THING')and (instance('?THING', 'Organism')or instance('?THING', 'AnatomicalStructure'))), patient(N25, O25)))and entails(not instance(O25, 'Organism')and not instance(O25, 'AnatomicalStructure'), not instance(N25, 'Poisoning'))and entails((instance(N25, 'Poisoning')and not instance(O25, 'AnatomicalStructure'))and'$existential'(O25, '?THING', patient(N25, '?THING')and (instance('?THING', 'Organism')or instance('?THING', 'AnatomicalStructure'))), instance(O25, 'Organism'))and entails((instance(N25, 'Poisoning')and not instance(O25, 'Organism'))and'$existential'(O25, '?THING', patient(N25, '?THING')and (instance('?THING', 'Organism')or instance('?THING', 'AnatomicalStructure'))), instance(O25, 'AnatomicalStructure')), [domainV(O25, ['$instanceof':'AnatomicalStructure', '$instanceof':'Organism', patient:2]), domainV(N25, ['$instanceof':'Poisoning', patient:1]), domainV(_G8215, []), forall(N25), replaceConsVar(O25, '$existential'('?THING', patient(N25, '?THING')and (instance('?THING', 'Organism')or instance('?THING', 'AnatomicalStructure'))))], ['POISON'=N25, 'THING'=O25], 'Merge', 'PROCESSES', 5227, 'Anonymous', on).
mooCache(instance(K27, 'Poisoning')=>exists(L27, instance(L27, 'BiologicallyActiveSubstance')and instrument(K27, L27)), (entails(not instance(L27, 'BiologicallyActiveSubstance'), not instance(K27, 'Poisoning'))and entails(instance(K27, 'Poisoning')and'$existential'(L27, '?SUBSTANCE', instance('?SUBSTANCE', 'BiologicallyActiveSubstance')and instrument(K27, '?SUBSTANCE')), instance(L27, 'BiologicallyActiveSubstance')))and entails(not instrument(K27, L27), not instance(K27, 'Poisoning'))and entails(instance(K27, 'Poisoning')and'$existential'(L27, '?SUBSTANCE', instance('?SUBSTANCE', 'BiologicallyActiveSubstance')and instrument(K27, '?SUBSTANCE')), instrument(K27, L27)), [domainV(L27, ['$instanceof':'BiologicallyActiveSubstance', instrument:2]), domainV(K27, ['$instanceof':'Poisoning', instrument:1]), domainV(_G6906, []), forall(K27), replaceConsVar(L27, '$existential'('?SUBSTANCE', instance('?SUBSTANCE', 'BiologicallyActiveSubstance')and instrument(K27, '?SUBSTANCE')))], ['POISON'=K27, 'SUBSTANCE'=L27], 'Merge', 'PROCESSES', 5229, 'Anonymous', on).
mooCache(subclass('IntentionalProcess', 'Process'), subclass('IntentionalProcess', 'Process'), [], [], 'Merge', 'PROCESSES', 5231, 'Anonymous', on).
mooCache(disjoint('IntentionalProcess', 'NonintentionalProcess'), disjoint('IntentionalProcess', 'NonintentionalProcess'), [], [], 'Merge', 'PROCESSES', 5233, 'Anonymous', on).
mooCache(documentation('IntentionalProcess', string('"A Process that is   deliberately set in motion by a CognitiveAgent."')), documentation('IntentionalProcess', string('"A Process that is   deliberately set in motion by a CognitiveAgent."')), [], [], 'Merge', 'PROCESSES', 5235, 'Anonymous', on).
mooCache(instance(L33, 'IntentionalProcess')and agent(L33, M33)=>instance(M33, 'CognitiveAgent')and exists(N33, hasPurposeForAgent(L33, N33, M33)), (entails(instance(L33, 'IntentionalProcess')and agent(L33, M33), instance(M33, 'CognitiveAgent'))and entails(not instance(M33, 'CognitiveAgent')and agent(L33, M33), not instance(L33, 'IntentionalProcess'))and entails(not instance(M33, 'CognitiveAgent')and instance(L33, 'IntentionalProcess'), not agent(L33, M33)))and entails((instance(L33, 'IntentionalProcess')and agent(L33, M33))and'$existential'(N33, '?PURP', hasPurposeForAgent(L33, '?PURP', M33)), hasPurposeForAgent(L33, N33, M33))and entails(not hasPurposeForAgent(L33, N33, M33)and agent(L33, M33), not instance(L33, 'IntentionalProcess'))and entails(not hasPurposeForAgent(L33, N33, M33)and instance(L33, 'IntentionalProcess'), not agent(L33, M33)), [domainV(N33, [hasPurposeForAgent:2]), domainV(M33, ['$instanceof':'CognitiveAgent', agent:2, hasPurposeForAgent:3]), domainV(L33, ['$instanceof':'IntentionalProcess', agent:1, hasPurposeForAgent:1]), domainV(_G8766, []), forall(L33), forall(M33), replaceConsVar(N33, '$existential'('?PURP', hasPurposeForAgent(L33, '?PURP', M33)))], ['PROC'=L33, 'AGENT'=M33, 'PURP'=N33], 'Merge', 'PROCESSES', 5237, 'Anonymous', on).
mooCache(instance(K35, 'IntentionalProcess')=>exists(L35, instance(L35, 'CognitiveAgent')and agent(K35, L35)), (entails(not instance(L35, 'CognitiveAgent'), not instance(K35, 'IntentionalProcess'))and entails(instance(K35, 'IntentionalProcess')and'$existential'(L35, '?AGENT', instance('?AGENT', 'CognitiveAgent')and agent(K35, '?AGENT')), instance(L35, 'CognitiveAgent')))and entails(not agent(K35, L35), not instance(K35, 'IntentionalProcess'))and entails(instance(K35, 'IntentionalProcess')and'$existential'(L35, '?AGENT', instance('?AGENT', 'CognitiveAgent')and agent(K35, '?AGENT')), agent(K35, L35)), [domainV(L35, ['$instanceof':'CognitiveAgent', agent:2]), domainV(K35, ['$instanceof':'IntentionalProcess', agent:1]), domainV(_G6756, []), forall(K35), replaceConsVar(L35, '$existential'('?AGENT', instance('?AGENT', 'CognitiveAgent')and agent(K35, '?AGENT')))], ['PROC'=K35, 'AGENT'=L35], 'Merge', 'PROCESSES', 5239, 'Anonymous', on).
mooCache(subclass('RecreationalProcess', 'IntentionalProcess'), subclass('RecreationalProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5241, 'Anonymous', on).
mooCache(documentation('RecreationalProcess', string('"A Process that is carried out   for the purpose of recreation."')), documentation('RecreationalProcess', string('"A Process that is carried out   for the purpose of recreation."')), [], [], 'Merge', 'PROCESSES', 5243, 'Anonymous', on).
mooCache(subclass('ExerciseProcess', 'IntentionalProcess'), subclass('ExerciseProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5245, 'Anonymous', on).
mooCache(documentation('ExerciseProcess', string('"A Process that is carried out for   the purpose of exercise."')), documentation('ExerciseProcess', string('"A Process that is carried out for   the purpose of exercise."')), [], [], 'Merge', 'PROCESSES', 5247, 'Anonymous', on).
mooCache(subclass('DiagnosticProcess', 'IntentionalProcess'), subclass('DiagnosticProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5249, 'Anonymous', on).
mooCache(documentation('DiagnosticProcess', string('"A Process that is carried out for   the purpose of determining the nature of a DiseaseOrSyndrome."')), documentation('DiagnosticProcess', string('"A Process that is carried out for   the purpose of determining the nature of a DiseaseOrSyndrome."')), [], [], 'Merge', 'PROCESSES', 5251, 'Anonymous', on).
mooCache(subclass('TherapeuticProcess', 'IntentionalProcess'), subclass('TherapeuticProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5253, 'Anonymous', on).
mooCache(documentation('TherapeuticProcess', string('"A Process that is carried out   for the purpose of curing, improving or reducing the pain associated   with a DiseaseOrSyndrome."')), documentation('TherapeuticProcess', string('"A Process that is carried out   for the purpose of curing, improving or reducing the pain associated   with a DiseaseOrSyndrome."')), [], [], 'Merge', 'PROCESSES', 5255, 'Anonymous', on).
mooCache(subclass('Surgery', 'TherapeuticProcess'), subclass('Surgery', 'TherapeuticProcess'), [], [], 'Merge', 'PROCESSES', 5257, 'Anonymous', on).
mooCache(documentation('Surgery', string('"Any TherapeuticProcess that involves making an   incision in the Animal that is the patient of the TherapeuticProcess."')), documentation('Surgery', string('"Any TherapeuticProcess that involves making an   incision in the Animal that is the patient of the TherapeuticProcess."')), [], [], 'Merge', 'PROCESSES', 5259, 'Anonymous', on).
mooCache(instance(W12, 'Surgery')and patient(W12, X12)=>exists(Y12, instance(Y12, 'Cutting')and instance(X12, 'Animal')and patient(X12, Z12)and subProcess(Y12, W12)), (entails((instance(W12, 'Surgery')and patient(W12, X12))and'$existential'(Y12, '?SUBACT', instance('?SUBACT', 'Cutting')and instance(X12, 'Animal')and patient(X12, Z12)and subProcess('?SUBACT', W12)), instance(Y12, 'Cutting'))and entails(not instance(Y12, 'Cutting')and patient(W12, X12), not instance(W12, 'Surgery'))and entails(not instance(Y12, 'Cutting')and instance(W12, 'Surgery'), not patient(W12, X12)))and (entails(instance(W12, 'Surgery')and patient(W12, X12), instance(X12, 'Animal'))and entails(not instance(X12, 'Animal')and patient(W12, X12), not instance(W12, 'Surgery'))and entails(not instance(X12, 'Animal')and instance(W12, 'Surgery'), not patient(W12, X12)))and (entails(instance(W12, 'Surgery')and patient(W12, X12), patient(X12, Z12))and entails(not patient(X12, Z12)and patient(W12, X12), not instance(W12, 'Surgery'))and entails(not patient(X12, Z12)and instance(W12, 'Surgery'), not patient(W12, X12)))and entails((instance(W12, 'Surgery')and patient(W12, X12))and'$existential'(Y12, '?SUBACT', instance('?SUBACT', 'Cutting')and instance(X12, 'Animal')and patient(X12, Z12)and subProcess('?SUBACT', W12)), subProcess(Y12, W12))and entails(not subProcess(Y12, W12)and patient(W12, X12), not instance(W12, 'Surgery'))and entails(not subProcess(Y12, W12)and instance(W12, 'Surgery'), not patient(W12, X12)), [domainV(Z12, [patient:2]), domainV(Y12, ['$instanceof':'Cutting', subProcess:1]), domainV(X12, ['$instanceof':'Animal', patient:1, patient:2]), domainV(W12, ['$instanceof':'Surgery', patient:1, subProcess:2]), domainV(_G11265, []), forall(W12), forall(X12), forall(Z12), replaceConsVar(Y12, '$existential'('?SUBACT', instance('?SUBACT', 'Cutting')and instance(X12, 'Animal')and patient(X12, Z12)and subProcess('?SUBACT', W12)))], ['ACT'=W12, 'ANIMAL'=X12, 'SUBACT'=Y12, 'CUTTING'=Z12], 'Merge', 'PROCESSES', 5261, 'Anonymous', on).
mooCache(subclass('OrganizationalProcess', 'IntentionalProcess'), subclass('OrganizationalProcess', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5263, 'Anonymous', on).
mooCache(documentation('OrganizationalProcess', string('"An IntentionalProcess that   is carried out within or by an Organization."')), documentation('OrganizationalProcess', string('"An IntentionalProcess that   is carried out within or by an Organization."')), [], [], 'Merge', 'PROCESSES', 5265, 'Anonymous', on).
mooCache(instance(D18, 'OrganizationalProcess')and agent(D18, E18)=>instance(E18, 'Organization')or exists(F18, instance(F18, 'Organization')and member(E18, F18)), (entails(agent(D18, E18)and not instance(E18, 'Organization')and not instance(F18, 'Organization'), not instance(D18, 'OrganizationalProcess'))and entails(instance(D18, 'OrganizationalProcess')and not instance(E18, 'Organization')and not instance(F18, 'Organization'), not agent(D18, E18))and entails((instance(D18, 'OrganizationalProcess')and agent(D18, E18))and not instance(F18, 'Organization'), instance(E18, 'Organization'))and entails(((instance(D18, 'OrganizationalProcess')and agent(D18, E18))and not instance(E18, 'Organization'))and'$existential'(F18, '?ORG', instance('?ORG', 'Organization')and member(E18, '?ORG')), instance(F18, 'Organization')))and entails(agent(D18, E18)and not instance(E18, 'Organization')and not member(E18, F18), not instance(D18, 'OrganizationalProcess'))and entails(instance(D18, 'OrganizationalProcess')and not instance(E18, 'Organization')and not member(E18, F18), not agent(D18, E18))and entails((instance(D18, 'OrganizationalProcess')and agent(D18, E18))and not member(E18, F18), instance(E18, 'Organization'))and entails(((instance(D18, 'OrganizationalProcess')and agent(D18, E18))and not instance(E18, 'Organization'))and'$existential'(F18, '?ORG', instance('?ORG', 'Organization')and member(E18, '?ORG')), member(E18, F18)), [domainV(F18, ['$instanceof':'Organization', member:2]), domainV(E18, ['$instanceof':'Organization', agent:2, member:1]), domainV(D18, ['$instanceof':'OrganizationalProcess', agent:1]), domainV(_G9788, []), forall(D18), forall(E18), replaceConsVar(F18, '$existential'('?ORG', instance('?ORG', 'Organization')and member(E18, '?ORG')))], ['ACT'=D18, 'AGENT'=E18, 'ORG'=F18], 'Merge', 'PROCESSES', 5267, 'Anonymous', on).
mooCache(subclass('EducationalProcess', 'OrganizationalProcess'), subclass('EducationalProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5269, 'Anonymous', on).
mooCache(documentation('EducationalProcess', string('"Any Process which occurs in an   organizational setting and which is intended to result in Learning."')), documentation('EducationalProcess', string('"Any Process which occurs in an   organizational setting and which is intended to result in Learning."')), [], [], 'Merge', 'PROCESSES', 5271, 'Anonymous', on).
mooCache(subclass('Managing', 'OrganizationalProcess'), subclass('Managing', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5273, 'Anonymous', on).
mooCache(documentation('Managing', string('"OccupationalProcesses that involve overseeing   the activities of others."')), documentation('Managing', string('"OccupationalProcesses that involve overseeing   the activities of others."')), [], [], 'Merge', 'PROCESSES', 5275, 'Anonymous', on).
mooCache(subclass('ReligiousProcess', 'OrganizationalProcess'), subclass('ReligiousProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5277, 'Anonymous', on).
mooCache(documentation('ReligiousProcess', string('"An OrganizationalProcess that is   carried out within or by a ReligiousOrganization."')), documentation('ReligiousProcess', string('"An OrganizationalProcess that is   carried out within or by a ReligiousOrganization."')), [], [], 'Merge', 'PROCESSES', 5279, 'Anonymous', on).
mooCache(instance(U28, 'ReligiousProcess')and agent(U28, V28)=>instance(V28, 'ReligiousOrganization')or exists(W28, member(V28, W28)and instance(W28, 'ReligiousOrganization')), (entails(agent(U28, V28)and not instance(V28, 'ReligiousOrganization')and not member(V28, W28), not instance(U28, 'ReligiousProcess'))and entails(instance(U28, 'ReligiousProcess')and not instance(V28, 'ReligiousOrganization')and not member(V28, W28), not agent(U28, V28))and entails((instance(U28, 'ReligiousProcess')and agent(U28, V28))and not member(V28, W28), instance(V28, 'ReligiousOrganization'))and entails(((instance(U28, 'ReligiousProcess')and agent(U28, V28))and not instance(V28, 'ReligiousOrganization'))and'$existential'(W28, '?ORG', member(V28, '?ORG')and instance('?ORG', 'ReligiousOrganization')), member(V28, W28)))and entails(agent(U28, V28)and not instance(V28, 'ReligiousOrganization')and not instance(W28, 'ReligiousOrganization'), not instance(U28, 'ReligiousProcess'))and entails(instance(U28, 'ReligiousProcess')and not instance(V28, 'ReligiousOrganization')and not instance(W28, 'ReligiousOrganization'), not agent(U28, V28))and entails((instance(U28, 'ReligiousProcess')and agent(U28, V28))and not instance(W28, 'ReligiousOrganization'), instance(V28, 'ReligiousOrganization'))and entails(((instance(U28, 'ReligiousProcess')and agent(U28, V28))and not instance(V28, 'ReligiousOrganization'))and'$existential'(W28, '?ORG', member(V28, '?ORG')and instance('?ORG', 'ReligiousOrganization')), instance(W28, 'ReligiousOrganization')), [domainV(W28, ['$instanceof':'ReligiousOrganization', member:2]), domainV(V28, ['$instanceof':'ReligiousOrganization', agent:2, member:1]), domainV(U28, ['$instanceof':'ReligiousProcess', agent:1]), domainV(_G9851, []), forall(U28), forall(V28), replaceConsVar(W28, '$existential'('?ORG', member(V28, '?ORG')and instance('?ORG', 'ReligiousOrganization')))], ['ACT'=U28, 'AGENT'=V28, 'ORG'=W28], 'Merge', 'PROCESSES', 5281, 'Anonymous', on).
mooCache(subclass('Graduation', 'OrganizationalProcess'), subclass('Graduation', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5283, 'Anonymous', on).
mooCache(documentation('Graduation', string('"The IntentionalProcess of graduating   from an EducationalOrganization."')), documentation('Graduation', string('"The IntentionalProcess of graduating   from an EducationalOrganization."')), [], [], 'Merge', 'PROCESSES', 5285, 'Anonymous', on).
mooCache(subclass('PoliticalProcess', 'OrganizationalProcess'), subclass('PoliticalProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5287, 'Anonymous', on).
mooCache(documentation('PoliticalProcess', string('"An OrganizationalProcess carried   out by officially constituted governments or with the aim of overthrowing   or modifying such a government."')), documentation('PoliticalProcess', string('"An OrganizationalProcess carried   out by officially constituted governments or with the aim of overthrowing   or modifying such a government."')), [], [], 'Merge', 'PROCESSES', 5289, 'Anonymous', on).
mooCache(subclass('RegulatoryProcess', 'OrganizationalProcess'), subclass('RegulatoryProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5291, 'Anonymous', on).
mooCache(documentation('RegulatoryProcess', string('"an OrganizationalProcess related   to the creation or enforcement of rules or regulations."')), documentation('RegulatoryProcess', string('"an OrganizationalProcess related   to the creation or enforcement of rules or regulations."')), [], [], 'Merge', 'PROCESSES', 5293, 'Anonymous', on).
mooCache(subclass('OccupationalProcess', 'OrganizationalProcess'), subclass('OccupationalProcess', 'OrganizationalProcess'), [], [], 'Merge', 'PROCESSES', 5295, 'Anonymous', on).
mooCache(documentation('OccupationalProcess', string('"An OrganizationalProcess carried   out as part of an occupation or job."')), documentation('OccupationalProcess', string('"An OrganizationalProcess carried   out as part of an occupation or job."')), [], [], 'Merge', 'PROCESSES', 5297, 'Anonymous', on).
mooCache(instance(O3, 'OccupationalProcess')=>exists(P3, exists(Q3, instance(Q3, 'Organization')and employs(Q3, P3)and agent(O3, P3))), (entails(not instance(Q3, 'Organization'), not instance(O3, 'OccupationalProcess'))and entails(instance(O3, 'OccupationalProcess')and'$existential'(Q3, '?ORG', instance('?ORG', 'Organization')and employs('?ORG', P3)and agent(O3, P3)), instance(Q3, 'Organization')))and (entails(not employs(Q3, P3), not instance(O3, 'OccupationalProcess'))and entails((instance(O3, 'OccupationalProcess')and'$existential'(P3, '?EMP', exists(Q3, instance(Q3, 'Organization')and employs(Q3, '?EMP')and agent(O3, '?EMP'))))and'$existential'(Q3, '?ORG', instance('?ORG', 'Organization')and employs('?ORG', P3)and agent(O3, P3)), employs(Q3, P3)))and entails(not agent(O3, P3), not instance(O3, 'OccupationalProcess'))and entails((instance(O3, 'OccupationalProcess')and'$existential'(P3, '?EMP', exists(Q3, instance(Q3, 'Organization')and employs(Q3, '?EMP')and agent(O3, '?EMP'))))and'$existential'(Q3, '?ORG', instance('?ORG', 'Organization')and employs('?ORG', P3)and agent(O3, P3)), agent(O3, P3)), [domainV(Q3, ['$instanceof':'Organization', employs:1]), domainV(P3, [agent:2, employs:2]), domainV(O3, ['$instanceof':'OccupationalProcess', agent:1]), domainV(_G9391, []), forall(O3), replaceConsVar(P3, '$existential'('?EMP', exists(Q3, instance(Q3, 'Organization')and employs(Q3, '?EMP')and agent(O3, '?EMP')))), replaceConsVar(Q3, '$existential'('?ORG', instance('?ORG', 'Organization')and employs('?ORG', P3)and agent(O3, P3)))], ['ACT'=O3, 'ORG'=Q3, 'EMP'=P3], 'Merge', 'PROCESSES', 5299, 'Anonymous', on).
mooCache(subclass('Planning', 'MentalProcess'), subclass('Planning', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5301, 'Anonymous', on).
mooCache(documentation('Planning', string('"Specifying a set of actions in order to meet a   set of goals or objectives."')), documentation('Planning', string('"Specifying a set of actions in order to meet a   set of goals or objectives."')), [], [], 'Merge', 'PROCESSES', 5303, 'Anonymous', on).
mooCache(subclass('Increasing', 'Process'), subclass('Increasing', 'Process'), [], [], 'Merge', 'PROCESSES', 5305, 'Anonymous', on).
mooCache(disjoint('Increasing', 'Decreasing'), disjoint('Increasing', 'Decreasing'), [], [], 'Merge', 'PROCESSES', 5307, 'Anonymous', on).
mooCache(relatedInternalConcept('Increasing', 'Putting'), relatedInternalConcept('Increasing', 'Putting'), [], [], 'Merge', 'PROCESSES', 5309, 'Anonymous', on).
mooCache(documentation('Increasing', string('"Any Process where a PhysicalQuantity associated   with the patient is increased."')), documentation('Increasing', string('"Any Process where a PhysicalQuantity associated   with the patient is increased."')), [], [], 'Merge', 'PROCESSES', 5311, 'Anonymous', on).
mooCache(instance(R14, 'Increasing')and patient(R14, S14)=>exists(T14, exists(U14, exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), equal('MeasureFn'(S14, V14), U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), equal('MeasureFn'(S14, V14), T14))and greaterThan(T14, U14)))), (entails(((instance(R14, 'Increasing')and patient(R14, S14))and'$existential'(U14, '?QUANT1', exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, T14))and greaterThan(T14, '?QUANT1'))))and'$existential'(V14, '?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', T14))and greaterThan(T14, U14)), holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, U14)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, U14))and patient(R14, S14), not instance(R14, 'Increasing'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, U14))and instance(R14, 'Increasing'), not patient(R14, S14)))and (entails((((instance(R14, 'Increasing')and patient(R14, S14))and'$existential'(T14, '?QUANT2', exists(U14, exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, '?QUANT2'))and greaterThan('?QUANT2', U14)))))and'$existential'(U14, '?QUANT1', exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, T14))and greaterThan(T14, '?QUANT1'))))and'$existential'(V14, '?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', T14))and greaterThan(T14, U14)), holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, T14)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, T14))and patient(R14, S14), not instance(R14, 'Increasing'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, T14))and instance(R14, 'Increasing'), not patient(R14, S14)))and entails((((instance(R14, 'Increasing')and patient(R14, S14))and'$existential'(T14, '?QUANT2', exists(U14, exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, '?QUANT2'))and greaterThan('?QUANT2', U14)))))and'$existential'(U14, '?QUANT1', exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, T14))and greaterThan(T14, '?QUANT1'))))and'$existential'(V14, '?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', T14))and greaterThan(T14, U14)), greaterThan(T14, U14))and entails(not greaterThan(T14, U14)and patient(R14, S14), not instance(R14, 'Increasing'))and entails(not greaterThan(T14, U14)and instance(R14, 'Increasing'), not patient(R14, S14)), [domainV(V14, ['MeasureFn':2]), domainV(U14, ['MeasureFn':3, greaterThan:2]), domainV(T14, ['MeasureFn':3, greaterThan:1]), domainV(S14, ['MeasureFn':1, patient:2]), domainV(R14, ['$instanceof':'Increasing', 'WhenFn':1, patient:1]), domainV(_G20141, []), forall(R14), forall(S14), replaceConsVar(T14, '$existential'('?QUANT2', exists(U14, exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, '?QUANT2'))and greaterThan('?QUANT2', U14))))), replaceConsVar(U14, '$existential'('?QUANT1', exists(V14, holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, V14, T14))and greaterThan(T14, '?QUANT1')))), replaceConsVar(V14, '$existential'('?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', U14))and holdsDuring('ImmediateFutureFn'('WhenFn'(R14)), holds('MeasureFn', S14, '?UNIT', T14))and greaterThan(T14, U14)))], ['INCREASE'=R14, 'OBJ'=S14, 'UNIT'=V14, 'QUANT1'=U14, 'QUANT2'=T14], 'Merge', 'PROCESSES', 5313, 'Anonymous', on).
mooCache(subclass('Heating', 'Increasing'), subclass('Heating', 'Increasing'), [], [], 'Merge', 'PROCESSES', 5315, 'Anonymous', on).
mooCache(disjoint('Heating', 'Cooling'), disjoint('Heating', 'Cooling'), [], [], 'Merge', 'PROCESSES', 5317, 'Anonymous', on).
mooCache(documentation('Heating', string('"Any Increasing Process where the PhysicalQuantity   increased is a TemperatureMeasure."')), documentation('Heating', string('"Any Increasing Process where the PhysicalQuantity   increased is a TemperatureMeasure."')), [], [], 'Merge', 'PROCESSES', 5319, 'Anonymous', on).
mooCache(instance(T22, 'Heating')and patient(T22, U22)=>exists(V22, exists(W22, exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), equal('MeasureFn'(U22, X22), W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), equal('MeasureFn'(U22, X22), V22))and greaterThan(V22, W22)))), (entails((instance(T22, 'Heating')and patient(T22, U22))and'$existential'(X22, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', V22))and greaterThan(V22, W22)), instance(X22, 'TemperatureMeasure'))and entails(not instance(X22, 'TemperatureMeasure')and patient(T22, U22), not instance(T22, 'Heating'))and entails(not instance(X22, 'TemperatureMeasure')and instance(T22, 'Heating'), not patient(T22, U22)))and (entails(((instance(T22, 'Heating')and patient(T22, U22))and'$existential'(W22, '?QUANT1', exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, V22))and greaterThan(V22, '?QUANT1'))))and'$existential'(X22, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', V22))and greaterThan(V22, W22)), holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, W22)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, W22))and patient(T22, U22), not instance(T22, 'Heating'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, W22))and instance(T22, 'Heating'), not patient(T22, U22)))and (entails((((instance(T22, 'Heating')and patient(T22, U22))and'$existential'(V22, '?QUANT2', exists(W22, exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, '?QUANT2'))and greaterThan('?QUANT2', W22)))))and'$existential'(W22, '?QUANT1', exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, V22))and greaterThan(V22, '?QUANT1'))))and'$existential'(X22, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', V22))and greaterThan(V22, W22)), holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, V22)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, V22))and patient(T22, U22), not instance(T22, 'Heating'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, V22))and instance(T22, 'Heating'), not patient(T22, U22)))and entails((((instance(T22, 'Heating')and patient(T22, U22))and'$existential'(V22, '?QUANT2', exists(W22, exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, '?QUANT2'))and greaterThan('?QUANT2', W22)))))and'$existential'(W22, '?QUANT1', exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, V22))and greaterThan(V22, '?QUANT1'))))and'$existential'(X22, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', V22))and greaterThan(V22, W22)), greaterThan(V22, W22))and entails(not greaterThan(V22, W22)and patient(T22, U22), not instance(T22, 'Heating'))and entails(not greaterThan(V22, W22)and instance(T22, 'Heating'), not patient(T22, U22)), [domainV(X22, ['$instanceof':'TemperatureMeasure', 'MeasureFn':2]), domainV(W22, ['MeasureFn':3, greaterThan:2]), domainV(V22, ['MeasureFn':3, greaterThan:1]), domainV(U22, ['MeasureFn':1, patient:2]), domainV(T22, ['$instanceof':'Heating', 'WhenFn':1, patient:1]), domainV(_G21710, []), forall(T22), forall(U22), replaceConsVar(V22, '$existential'('?QUANT2', exists(W22, exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, '?QUANT2'))and greaterThan('?QUANT2', W22))))), replaceConsVar(W22, '$existential'('?QUANT1', exists(X22, instance(X22, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, X22, V22))and greaterThan(V22, '?QUANT1')))), replaceConsVar(X22, '$existential'('?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', W22))and holdsDuring('ImmediateFutureFn'('WhenFn'(T22)), holds('MeasureFn', U22, '?UNIT', V22))and greaterThan(V22, W22)))], ['HEAT'=T22, 'OBJ'=U22, 'UNIT'=X22, 'QUANT1'=W22, 'QUANT2'=V22], 'Merge', 'PROCESSES', 5321, 'Anonymous', on).
mooCache(subclass('Decreasing', 'Process'), subclass('Decreasing', 'Process'), [], [], 'Merge', 'PROCESSES', 5323, 'Anonymous', on).
mooCache(relatedInternalConcept('Decreasing', 'Removing'), relatedInternalConcept('Decreasing', 'Removing'), [], [], 'Merge', 'PROCESSES', 5325, 'Anonymous', on).
mooCache(documentation('Decreasing', string('"Any Process where a PhysicalQuantity associated   with the patient is decreased."')), documentation('Decreasing', string('"Any Process where a PhysicalQuantity associated   with the patient is decreased."')), [], [], 'Merge', 'PROCESSES', 5327, 'Anonymous', on).
mooCache(instance(W30, 'Decreasing')and patient(W30, X30)=>exists(Y30, exists(Z30, exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), equal('MeasureFn'(X30, A31), Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), equal('MeasureFn'(X30, A31), Y30))and lessThan(Y30, Z30)))), (entails(((instance(W30, 'Decreasing')and patient(W30, X30))and'$existential'(Z30, '?QUANT1', exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Y30))and lessThan(Y30, '?QUANT1'))))and'$existential'(A31, '?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Y30))and lessThan(Y30, Z30)), holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Z30)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Z30))and patient(W30, X30), not instance(W30, 'Decreasing'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Z30))and instance(W30, 'Decreasing'), not patient(W30, X30)))and (entails((((instance(W30, 'Decreasing')and patient(W30, X30))and'$existential'(Y30, '?QUANT2', exists(Z30, exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, '?QUANT2'))and lessThan('?QUANT2', Z30)))))and'$existential'(Z30, '?QUANT1', exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Y30))and lessThan(Y30, '?QUANT1'))))and'$existential'(A31, '?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Y30))and lessThan(Y30, Z30)), holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Y30)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Y30))and patient(W30, X30), not instance(W30, 'Decreasing'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Y30))and instance(W30, 'Decreasing'), not patient(W30, X30)))and entails((((instance(W30, 'Decreasing')and patient(W30, X30))and'$existential'(Y30, '?QUANT2', exists(Z30, exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, '?QUANT2'))and lessThan('?QUANT2', Z30)))))and'$existential'(Z30, '?QUANT1', exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Y30))and lessThan(Y30, '?QUANT1'))))and'$existential'(A31, '?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Y30))and lessThan(Y30, Z30)), lessThan(Y30, Z30))and entails(not lessThan(Y30, Z30)and patient(W30, X30), not instance(W30, 'Decreasing'))and entails(not lessThan(Y30, Z30)and instance(W30, 'Decreasing'), not patient(W30, X30)), [domainV(A31, ['MeasureFn':2]), domainV(Z30, ['MeasureFn':3, lessThan:2]), domainV(Y30, ['MeasureFn':3, lessThan:1]), domainV(X30, ['MeasureFn':1, patient:2]), domainV(W30, ['$instanceof':'Decreasing', 'WhenFn':1, patient:1]), domainV(_G20123, []), forall(W30), forall(X30), replaceConsVar(Y30, '$existential'('?QUANT2', exists(Z30, exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, '?QUANT2'))and lessThan('?QUANT2', Z30))))), replaceConsVar(Z30, '$existential'('?QUANT1', exists(A31, holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, A31, Y30))and lessThan(Y30, '?QUANT1')))), replaceConsVar(A31, '$existential'('?UNIT', holdsDuring('ImmediatePastFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Z30))and holdsDuring('ImmediateFutureFn'('WhenFn'(W30)), holds('MeasureFn', X30, '?UNIT', Y30))and lessThan(Y30, Z30)))], ['DECREASE'=W30, 'OBJ'=X30, 'UNIT'=A31, 'QUANT1'=Z30, 'QUANT2'=Y30], 'Merge', 'PROCESSES', 5329, 'Anonymous', on).
mooCache(subclass('Cooling', 'Decreasing'), subclass('Cooling', 'Decreasing'), [], [], 'Merge', 'PROCESSES', 5331, 'Anonymous', on).
mooCache(documentation('Cooling', string('"Any Decreasing Process where the PhysicalQuantity   decreased is a TemperatureMeasure."')), documentation('Cooling', string('"Any Decreasing Process where the PhysicalQuantity   decreased is a TemperatureMeasure."')), [], [], 'Merge', 'PROCESSES', 5333, 'Anonymous', on).
mooCache(instance(N37, 'Cooling')and patient(N37, O37)=>exists(P37, exists(Q37, exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), equal('MeasureFn'(O37, R37), Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), equal('MeasureFn'(O37, R37), P37))and lessThan(P37, Q37)))), (entails((instance(N37, 'Cooling')and patient(N37, O37))and'$existential'(R37, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', P37))and lessThan(P37, Q37)), instance(R37, 'TemperatureMeasure'))and entails(not instance(R37, 'TemperatureMeasure')and patient(N37, O37), not instance(N37, 'Cooling'))and entails(not instance(R37, 'TemperatureMeasure')and instance(N37, 'Cooling'), not patient(N37, O37)))and (entails(((instance(N37, 'Cooling')and patient(N37, O37))and'$existential'(Q37, '?QUANT1', exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, P37))and lessThan(P37, '?QUANT1'))))and'$existential'(R37, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', P37))and lessThan(P37, Q37)), holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, Q37)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, Q37))and patient(N37, O37), not instance(N37, 'Cooling'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, Q37))and instance(N37, 'Cooling'), not patient(N37, O37)))and (entails((((instance(N37, 'Cooling')and patient(N37, O37))and'$existential'(P37, '?QUANT2', exists(Q37, exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, '?QUANT2'))and lessThan('?QUANT2', Q37)))))and'$existential'(Q37, '?QUANT1', exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, P37))and lessThan(P37, '?QUANT1'))))and'$existential'(R37, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', P37))and lessThan(P37, Q37)), holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, P37)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, P37))and patient(N37, O37), not instance(N37, 'Cooling'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, P37))and instance(N37, 'Cooling'), not patient(N37, O37)))and entails((((instance(N37, 'Cooling')and patient(N37, O37))and'$existential'(P37, '?QUANT2', exists(Q37, exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, '?QUANT2'))and lessThan('?QUANT2', Q37)))))and'$existential'(Q37, '?QUANT1', exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, P37))and lessThan(P37, '?QUANT1'))))and'$existential'(R37, '?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', P37))and lessThan(P37, Q37)), lessThan(P37, Q37))and entails(not lessThan(P37, Q37)and patient(N37, O37), not instance(N37, 'Cooling'))and entails(not lessThan(P37, Q37)and instance(N37, 'Cooling'), not patient(N37, O37)), [domainV(R37, ['$instanceof':'TemperatureMeasure', 'MeasureFn':2]), domainV(Q37, ['MeasureFn':3, lessThan:2]), domainV(P37, ['MeasureFn':3, lessThan:1]), domainV(O37, ['MeasureFn':1, patient:2]), domainV(N37, ['$instanceof':'Cooling', 'WhenFn':1, patient:1]), domainV(_G21692, []), forall(N37), forall(O37), replaceConsVar(P37, '$existential'('?QUANT2', exists(Q37, exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, '?QUANT2'))and lessThan('?QUANT2', Q37))))), replaceConsVar(Q37, '$existential'('?QUANT1', exists(R37, instance(R37, 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, '?QUANT1'))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, R37, P37))and lessThan(P37, '?QUANT1')))), replaceConsVar(R37, '$existential'('?UNIT', instance('?UNIT', 'TemperatureMeasure')and holdsDuring('ImmediatePastFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', Q37))and holdsDuring('ImmediateFutureFn'('WhenFn'(N37)), holds('MeasureFn', O37, '?UNIT', P37))and lessThan(P37, Q37)))], ['COOL'=N37, 'OBJ'=O37, 'UNIT'=R37, 'QUANT1'=Q37, 'QUANT2'=P37], 'Merge', 'PROCESSES', 5335, 'Anonymous', on).
mooCache(subclass('Motion', 'Process'), subclass('Motion', 'Process'), [], [], 'Merge', 'PROCESSES', 5337, 'Anonymous', on).
mooCache(documentation('Motion', string('"Any Process of movement."')), documentation('Motion', string('"Any Process of movement."')), [], [], 'Merge', 'PROCESSES', 5339, 'Anonymous', on).
mooCache(instance(W8, 'Motion')and patient(W8, X8)and origin(W8, Y8)=>holdsDuring('ImmediatePastFn'('WhenFn'(W8)), located(X8, Y8)), entails(instance(W8, 'Motion')and patient(W8, X8)and origin(W8, Y8), holdsDuring('ImmediatePastFn'('WhenFn'(W8)), located(X8, Y8)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(W8)), located(X8, Y8))and patient(W8, X8)and origin(W8, Y8), not instance(W8, 'Motion'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(W8)), located(X8, Y8))and instance(W8, 'Motion')and origin(W8, Y8), not patient(W8, X8))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(W8)), located(X8, Y8))and instance(W8, 'Motion')and patient(W8, X8), not origin(W8, Y8)), [domainV(Y8, [located:2, origin:2]), domainV(X8, [located:1, patient:2]), domainV(W8, ['$instanceof':'Motion', 'WhenFn':1, origin:1, patient:1]), domainV(_G8608, []), forall(W8), forall(X8), forall(Y8)], ['MOTION'=W8, 'OBJ'=X8, 'PLACE'=Y8], 'Merge', 'PROCESSES', 5341, 'Anonymous', on).
mooCache(instance(T10, 'Motion')and patient(T10, U10)and destination(T10, V10)=>holdsDuring('ImmediateFutureFn'('WhenFn'(T10)), located(U10, V10)), entails(instance(T10, 'Motion')and patient(T10, U10)and destination(T10, V10), holdsDuring('ImmediateFutureFn'('WhenFn'(T10)), located(U10, V10)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(T10)), located(U10, V10))and patient(T10, U10)and destination(T10, V10), not instance(T10, 'Motion'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(T10)), located(U10, V10))and instance(T10, 'Motion')and destination(T10, V10), not patient(T10, U10))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(T10)), located(U10, V10))and instance(T10, 'Motion')and patient(T10, U10), not destination(T10, V10)), [domainV(V10, [destination:2, located:2]), domainV(U10, [located:1, patient:2]), domainV(T10, ['$instanceof':'Motion', 'WhenFn':1, destination:1, patient:1]), domainV(_G8650, []), forall(T10), forall(U10), forall(V10)], ['MOTION'=T10, 'OBJ'=U10, 'PLACE'=V10], 'Merge', 'PROCESSES', 5343, 'Anonymous', on).
mooCache(instance(path, 'CaseRole'), instance(path, 'CaseRole'), [], [], 'Merge', 'PROCESSES', 5345, 'Anonymous', on).
mooCache(domain(path, 1, 'Motion'), domain(path, 1, 'Motion'), [], [], 'Merge', 'PROCESSES', 5347, 'Anonymous', on).
mooCache(domain(path, 2, 'Region'), domain(path, 2, 'Region'), [], [], 'Merge', 'PROCESSES', 5349, 'Anonymous', on).
mooCache(documentation(path, string('"(path ?MOTION ?PATH) means that ?PATH is a route   along which ?MOTION occurs.  For example, Highway 101 is the path in the   following proposition:  the car drove up Highway 101."')), documentation(path, string('"(path ?MOTION ?PATH) means that ?PATH is a route   along which ?MOTION occurs.  For example, Highway 101 is the path in the   following proposition:  the car drove up Highway 101."')), [], [], 'Merge', 'PROCESSES', 5351, 'Anonymous', on).
mooCache(path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not exists(Y18, exists(Z18, path(T18, Z18)and origin(T18, A19)and destination(T18, W18)and length(Z18, Y18)and lessThan(Y18, X18)))=>forall(B19, part(B19, U18)=>between(V18, B19, W18)), (entails(not between(V18, B19, W18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not path(T18, Z18), not part(B19, U18))and entails((part(B19, U18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not path(T18, Z18))and'$existential'(Z18, '?PATH2', path(T18, '?PATH2')and origin(T18, A19)and destination(T18, W18)and length('?PATH2', Y18)and lessThan(Y18, X18)), between(V18, B19, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not path(T18, Z18), not path(T18, U18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and destination(T18, W18)and length(U18, X18)and not path(T18, Z18), not origin(T18, V18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and length(U18, X18)and not path(T18, Z18), not destination(T18, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and not path(T18, Z18), not length(U18, X18))and entails(((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18))and'$existential'(Z18, '?PATH2', path(T18, '?PATH2')and origin(T18, A19)and destination(T18, W18)and length('?PATH2', Y18)and lessThan(Y18, X18)), path(T18, Z18)))and (entails(not between(V18, B19, W18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not origin(T18, A19), not part(B19, U18))and entails(part(B19, U18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not origin(T18, A19), between(V18, B19, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not origin(T18, A19), not path(T18, U18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and destination(T18, W18)and length(U18, X18)and not origin(T18, A19), not origin(T18, V18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and length(U18, X18)and not origin(T18, A19), not destination(T18, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and not origin(T18, A19), not length(U18, X18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18), origin(T18, A19)))and (entails(not between(V18, B19, W18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not destination(T18, W18), not part(B19, U18))and entails(part(B19, U18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not destination(T18, W18), between(V18, B19, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not destination(T18, W18), not path(T18, U18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and destination(T18, W18)and length(U18, X18)and not destination(T18, W18), not origin(T18, V18)))and (entails(not between(V18, B19, W18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not length(Z18, Y18), not part(B19, U18))and entails((part(B19, U18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not length(Z18, Y18))and'$existential'(Z18, '?PATH2', path(T18, '?PATH2')and origin(T18, A19)and destination(T18, W18)and length('?PATH2', Y18)and lessThan(Y18, X18)), between(V18, B19, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not length(Z18, Y18), not path(T18, U18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and destination(T18, W18)and length(U18, X18)and not length(Z18, Y18), not origin(T18, V18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and length(U18, X18)and not length(Z18, Y18), not destination(T18, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and not length(Z18, Y18), not length(U18, X18))and entails((((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18))and'$existential'(Y18, '?MEASURE2', exists(Z18, path(T18, Z18)and origin(T18, A19)and destination(T18, W18)and length(Z18, '?MEASURE2')and lessThan('?MEASURE2', X18))))and'$existential'(Z18, '?PATH2', path(T18, '?PATH2')and origin(T18, A19)and destination(T18, W18)and length('?PATH2', Y18)and lessThan(Y18, X18)), length(Z18, Y18)))and entails(not between(V18, B19, W18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not lessThan(Y18, X18), not part(B19, U18))and entails(part(B19, U18)and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not lessThan(Y18, X18), between(V18, B19, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and origin(T18, V18)and destination(T18, W18)and length(U18, X18)and not lessThan(Y18, X18), not path(T18, U18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and destination(T18, W18)and length(U18, X18)and not lessThan(Y18, X18), not origin(T18, V18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and length(U18, X18)and not lessThan(Y18, X18), not destination(T18, W18))and entails((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and not lessThan(Y18, X18), not length(U18, X18))and entails((((part(B19, U18)and not between(V18, B19, W18))and path(T18, U18)and origin(T18, V18)and destination(T18, W18)and length(U18, X18))and'$existential'(Y18, '?MEASURE2', exists(Z18, path(T18, Z18)and origin(T18, A19)and destination(T18, W18)and length(Z18, '?MEASURE2')and lessThan('?MEASURE2', X18))))and'$existential'(Z18, '?PATH2', path(T18, '?PATH2')and origin(T18, A19)and destination(T18, W18)and length('?PATH2', Y18)and lessThan(Y18, X18)), lessThan(Y18, X18)), [domainV(B19, [between:2, part:1]), domainV(A19, [origin:2]), domainV(Z18, [length:1, path:2]), domainV(Y18, [length:2, lessThan:1]), domainV(X18, [length:2, lessThan:2]), domainV(W18, [between:3, destination:2]), domainV(V18, [between:1, origin:2]), domainV(U18, [length:1, part:2, path:2]), domainV(T18, [destination:1, origin:1, path:1]), domainV(_G3255, []), forall(T18), forall(U18), forall(V18), forall(W18), forall(X18), forall(Y18), forall(Z18), forall(A19), replaceConsVar(Y18, '$existential'('?MEASURE2', exists(Z18, path(T18, Z18)and origin(T18, A19)and destination(T18, W18)and length(Z18, '?MEASURE2')and lessThan('?MEASURE2', X18)))), replaceConsVar(Z18, '$existential'('?PATH2', path(T18, '?PATH2')and origin(T18, A19)and destination(T18, W18)and length('?PATH2', Y18)and lessThan(Y18, X18))), forall(B19)], ['PROCESS'=T18, 'PATH1'=U18, 'SOURCE'=V18, 'DEST'=W18, 'MEASURE1'=X18, 'PATH2'=Z18, 'MEASURE2'=Y18, 'ORIGIN'=A19, 'OBJ'=B19], 'Merge', 'PROCESSES', 5353, 'Anonymous', on).
mooCache(subclass('BodyMotion', 'Motion'), subclass('BodyMotion', 'Motion'), [], [], 'Merge', 'PROCESSES', 5355, 'Anonymous', on).
mooCache(documentation('BodyMotion', string('"Any Motion where the patient is a BodyPart."')), documentation('BodyMotion', string('"Any Motion where the patient is a BodyPart."')), [], [], 'Merge', 'PROCESSES', 5357, 'Anonymous', on).
mooCache(instance(E28, 'BodyMotion')=>exists(F28, instance(F28, 'BodyPart')and patient(E28, F28)), (entails(not instance(F28, 'BodyPart'), not instance(E28, 'BodyMotion'))and entails(instance(E28, 'BodyMotion')and'$existential'(F28, '?OBJ', instance('?OBJ', 'BodyPart')and patient(E28, '?OBJ')), instance(F28, 'BodyPart')))and entails(not patient(E28, F28), not instance(E28, 'BodyMotion'))and entails(instance(E28, 'BodyMotion')and'$existential'(F28, '?OBJ', instance('?OBJ', 'BodyPart')and patient(E28, '?OBJ')), patient(E28, F28)), [domainV(F28, ['$instanceof':'BodyPart', patient:2]), domainV(E28, ['$instanceof':'BodyMotion', patient:1]), domainV(_G6672, []), forall(E28), replaceConsVar(F28, '$existential'('?OBJ', instance('?OBJ', 'BodyPart')and patient(E28, '?OBJ')))], ['MOTION'=E28, 'OBJ'=F28], 'Merge', 'PROCESSES', 5359, 'Anonymous', on).
mooCache(subclass('Walking', 'BodyMotion'), subclass('Walking', 'BodyMotion'), [], [], 'Merge', 'PROCESSES', 5361, 'Anonymous', on).
mooCache(documentation('Walking', string('"Any BodyMotion which is accomplished by   means of the legs of an Organism on land for the purpose of moving   from one point to another."')), documentation('Walking', string('"Any BodyMotion which is accomplished by   means of the legs of an Organism on land for the purpose of moving   from one point to another."')), [], [], 'Merge', 'PROCESSES', 5363, 'Anonymous', on).
mooCache(subclass('Swimming', 'BodyMotion'), subclass('Swimming', 'BodyMotion'), [], [], 'Merge', 'PROCESSES', 5365, 'Anonymous', on).
mooCache(documentation('Swimming', string('"Any deliberate and controlled BodyMotion   through water that is accomplished by an Organism."')), documentation('Swimming', string('"Any deliberate and controlled BodyMotion   through water that is accomplished by an Organism."')), [], [], 'Merge', 'PROCESSES', 5367, 'Anonymous', on).
mooCache(subclass('Dancing', 'BodyMotion'), subclass('Dancing', 'BodyMotion'), [], [], 'Merge', 'PROCESSES', 5369, 'Anonymous', on).
mooCache(documentation('Dancing', string('"Any BodyMotion of Humans which is   deliberately coordinated with music."')), documentation('Dancing', string('"Any BodyMotion of Humans which is   deliberately coordinated with music."')), [], [], 'Merge', 'PROCESSES', 5371, 'Anonymous', on).
mooCache(subclass('DirectionChange', 'Motion'), subclass('DirectionChange', 'Motion'), [], [], 'Merge', 'PROCESSES', 5373, 'Anonymous', on).
mooCache(documentation('DirectionChange', string('"The act of changing the direction in   which the patient of the act is oriented."')), documentation('DirectionChange', string('"The act of changing the direction in   which the patient of the act is oriented."')), [], [], 'Merge', 'PROCESSES', 5375, 'Anonymous', on).
mooCache(instance(J2, 'DirectionChange')=>exists(K2, instance(K2, 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, K2))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, K2))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, K2))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, K2)))), (entails(not instance(K2, 'DirectionalAttribute'), not instance(J2, 'DirectionChange'))and entails(instance(J2, 'DirectionChange')and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), instance(K2, 'DirectionalAttribute')))and (entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, K2))and not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, K2)), not instance(J2, 'DirectionChange'))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, K2)))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, K2))))and (entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, K2))and not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, K2)), not instance(J2, 'DirectionChange'))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, K2)))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, K2))))and (entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, K2))and not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, K2)), not instance(J2, 'DirectionChange'))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, K2)))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, K2))))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, K2))and not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, K2)), not instance(J2, 'DirectionChange'))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, K2)))and entails((instance(J2, 'DirectionChange')and not holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, K2)))and'$existential'(K2, '?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))), holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, K2))), [domainV(K2, ['$instanceof':'DirectionalAttribute', attribute:2]), domainV(J2, ['$instanceof':'DirectionChange', 'WhenFn':1, attribute:1]), domainV(_G21278, []), forall(J2), replaceConsVar(K2, '$existential'('?ATTR', instance('?ATTR', 'DirectionalAttribute')and (holdsDuring('ImmediatePastFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), not attribute(J2, '?ATTR'))or holdsDuring('ImmediateFutureFn'('WhenFn'(J2)), attribute(J2, '?ATTR'))and holdsDuring('ImmediatePastFn'('WhenFn'(J2)), not attribute(J2, '?ATTR')))))], ['PROC'=J2, 'ATTR'=K2], 'Merge', 'PROCESSES', 5377, 'Anonymous', on).
mooCache(subclass('Transfer', 'Motion'), subclass('Transfer', 'Motion'), [], [], 'Merge', 'PROCESSES', 5379, 'Anonymous', on).
mooCache(documentation('Transfer', string('"Any instance of Motion where the agent   of the Motion and the patient of the Motion are not the same   thing."')), documentation('Transfer', string('"Any instance of Motion where the agent   of the Motion and the patient of the Motion are not the same   thing."')), [], [], 'Merge', 'PROCESSES', 5381, 'Anonymous', on).
mooCache(instance(R7, 'Transfer')and agent(R7, S7)and patient(R7, T7)=>not equal(S7, T7), entails(instance(R7, 'Transfer')and agent(R7, S7)and patient(R7, T7), not equal(S7, T7))and entails(equal(S7, T7)and agent(R7, S7)and patient(R7, T7), not instance(R7, 'Transfer'))and entails(equal(S7, T7)and instance(R7, 'Transfer')and patient(R7, T7), not agent(R7, S7))and entails(equal(S7, T7)and instance(R7, 'Transfer')and agent(R7, S7), not patient(R7, T7)), [domainV(T7, [patient:2]), domainV(S7, [agent:2]), domainV(R7, ['$instanceof':'Transfer', agent:1, patient:1]), domainV(_G7367, []), forall(R7), forall(S7), forall(T7)], ['TRANSFER'=R7, 'AGENT'=S7, 'PATIENT'=T7], 'Merge', 'PROCESSES', 5383, 'Anonymous', on).
mooCache(subclass('Removing', 'Transfer'), subclass('Removing', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5385, 'Anonymous', on).
mooCache(documentation('Removing', string('"The Class of Processes where something is   taken away from a location.  Note that the thing removed and the location   are specified with the CaseRoles patient and origin, respectively."')), documentation('Removing', string('"The Class of Processes where something is   taken away from a location.  Note that the thing removed and the location   are specified with the CaseRoles patient and origin, respectively."')), [], [], 'Merge', 'PROCESSES', 5387, 'Anonymous', on).
mooCache(instance(F12, 'Removing')and origin(F12, G12)and patient(F12, H12)=>holdsDuring('ImmediatePastFn'('WhenFn'(F12)), located(H12, G12))and holdsDuring('ImmediateFutureFn'('WhenFn'(F12)), not located(H12, G12)), (entails(instance(F12, 'Removing')and origin(F12, G12)and patient(F12, H12), holdsDuring('ImmediatePastFn'('WhenFn'(F12)), located(H12, G12)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(F12)), located(H12, G12))and origin(F12, G12)and patient(F12, H12), not instance(F12, 'Removing'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(F12)), located(H12, G12))and instance(F12, 'Removing')and patient(F12, H12), not origin(F12, G12))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(F12)), located(H12, G12))and instance(F12, 'Removing')and origin(F12, G12), not patient(F12, H12)))and entails(instance(F12, 'Removing')and origin(F12, G12)and patient(F12, H12), holdsDuring('ImmediateFutureFn'('WhenFn'(F12)), not located(H12, G12)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(F12)), not located(H12, G12))and origin(F12, G12)and patient(F12, H12), not instance(F12, 'Removing'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(F12)), not located(H12, G12))and instance(F12, 'Removing')and patient(F12, H12), not origin(F12, G12))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(F12)), not located(H12, G12))and instance(F12, 'Removing')and origin(F12, G12), not patient(F12, H12)), [domainV(H12, [located:1, patient:2]), domainV(G12, [located:2, origin:2]), domainV(F12, ['$instanceof':'Removing', 'WhenFn':1, origin:1, patient:1]), domainV(_G12400, []), forall(F12), forall(G12), forall(H12)], ['REMOVE'=F12, 'PLACE'=G12, 'OBJ'=H12], 'Merge', 'PROCESSES', 5389, 'Anonymous', on).
mooCache(subclass('Cleaning', 'Removing'), subclass('Cleaning', 'Removing'), [], [], 'Merge', 'PROCESSES', 5391, 'Anonymous', on).
mooCache(documentation('Cleaning', string('"The Class of Processes where undesirable   Substances and/or Microorganisms are removed from an Object."')), documentation('Cleaning', string('"The Class of Processes where undesirable   Substances and/or Microorganisms are removed from an Object."')), [], [], 'Merge', 'PROCESSES', 5393, 'Anonymous', on).
mooCache(subclass('Putting', 'Transfer'), subclass('Putting', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5395, 'Anonymous', on).
mooCache(documentation('Putting', string('"The Class of Processes where something is put   in a location.  Note that the location is specified with the CaseRole   destination."')), documentation('Putting', string('"The Class of Processes where something is put   in a location.  Note that the location is specified with the CaseRole   destination."')), [], [], 'Merge', 'PROCESSES', 5397, 'Anonymous', on).
mooCache(instance(J19, 'Putting')and destination(J19, K19)and patient(J19, L19)=>holdsDuring('ImmediatePastFn'('WhenFn'(J19)), not located(L19, K19))and holdsDuring('ImmediateFutureFn'('WhenFn'(J19)), located(L19, K19)), (entails(instance(J19, 'Putting')and destination(J19, K19)and patient(J19, L19), holdsDuring('ImmediatePastFn'('WhenFn'(J19)), not located(L19, K19)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J19)), not located(L19, K19))and destination(J19, K19)and patient(J19, L19), not instance(J19, 'Putting'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J19)), not located(L19, K19))and instance(J19, 'Putting')and patient(J19, L19), not destination(J19, K19))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J19)), not located(L19, K19))and instance(J19, 'Putting')and destination(J19, K19), not patient(J19, L19)))and entails(instance(J19, 'Putting')and destination(J19, K19)and patient(J19, L19), holdsDuring('ImmediateFutureFn'('WhenFn'(J19)), located(L19, K19)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J19)), located(L19, K19))and destination(J19, K19)and patient(J19, L19), not instance(J19, 'Putting'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J19)), located(L19, K19))and instance(J19, 'Putting')and patient(J19, L19), not destination(J19, K19))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J19)), located(L19, K19))and instance(J19, 'Putting')and destination(J19, K19), not patient(J19, L19)), [domainV(L19, [located:1, patient:2]), domainV(K19, [destination:2, located:2]), domainV(J19, ['$instanceof':'Putting', 'WhenFn':1, destination:1, patient:1]), domainV(_G12334, []), forall(J19), forall(K19), forall(L19)], ['PUT'=J19, 'PLACE'=K19, 'OBJ'=L19], 'Merge', 'PROCESSES', 5399, 'Anonymous', on).
mooCache(subclass('Substituting', 'Transfer'), subclass('Substituting', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5401, 'Anonymous', on).
mooCache(documentation('Substituting', string('"The Class of Transfers where one thing is   replaced with something else."')), documentation('Substituting', string('"The Class of Transfers where one thing is   replaced with something else."')), [], [], 'Merge', 'PROCESSES', 5403, 'Anonymous', on).
mooCache(instance(Y25, 'Substituting')=>exists(Z25, exists(A26, exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26)))))), (entails(not instance(D26, 'Putting'), not instance(Y25, 'Substituting'))and entails(instance(Y25, 'Substituting')and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), instance(D26, 'Putting')))and (entails(not instance(C26, 'Removing'), not instance(Y25, 'Substituting'))and entails((instance(Y25, 'Substituting')and'$existential'(C26, '?REMOVE', exists(D26, instance(D26, 'Putting')and instance('?REMOVE', 'Removing')and subProcess(D26, Y25)and subProcess('?REMOVE', Y25)and patient('?REMOVE', B26)and origin('?REMOVE', Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26))))and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), instance(C26, 'Removing')))and (entails(not subProcess(D26, Y25), not instance(Y25, 'Substituting'))and entails(instance(Y25, 'Substituting')and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), subProcess(D26, Y25)))and (entails(not subProcess(C26, Y25), not instance(Y25, 'Substituting'))and entails((instance(Y25, 'Substituting')and'$existential'(C26, '?REMOVE', exists(D26, instance(D26, 'Putting')and instance('?REMOVE', 'Removing')and subProcess(D26, Y25)and subProcess('?REMOVE', Y25)and patient('?REMOVE', B26)and origin('?REMOVE', Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26))))and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), subProcess(C26, Y25)))and (entails(not patient(C26, B26), not instance(Y25, 'Substituting'))and entails(((instance(Y25, 'Substituting')and'$existential'(B26, '?OBJ1', exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, '?OBJ1')and origin(C26, Z25)and patient(D26, A26)and destination(D26, Z25)and not equal('?OBJ1', A26)))))and'$existential'(C26, '?REMOVE', exists(D26, instance(D26, 'Putting')and instance('?REMOVE', 'Removing')and subProcess(D26, Y25)and subProcess('?REMOVE', Y25)and patient('?REMOVE', B26)and origin('?REMOVE', Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26))))and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), patient(C26, B26)))and (entails(not origin(C26, Z25), not instance(Y25, 'Substituting'))and entails(((((instance(Y25, 'Substituting')and'$existential'(Z25, '?PLACE', exists(A26, exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, '?PLACE')and patient(D26, A26)and destination(D26, '?PLACE')and not equal(B26, A26)))))))and'$existential'(A26, '?OBJ2', exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient(D26, '?OBJ2')and destination(D26, Z25)and not equal(B26, '?OBJ2'))))))and'$existential'(B26, '?OBJ1', exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, '?OBJ1')and origin(C26, Z25)and patient(D26, A26)and destination(D26, Z25)and not equal('?OBJ1', A26)))))and'$existential'(C26, '?REMOVE', exists(D26, instance(D26, 'Putting')and instance('?REMOVE', 'Removing')and subProcess(D26, Y25)and subProcess('?REMOVE', Y25)and patient('?REMOVE', B26)and origin('?REMOVE', Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26))))and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), origin(C26, Z25)))and (entails(not patient(D26, A26), not instance(Y25, 'Substituting'))and entails((((instance(Y25, 'Substituting')and'$existential'(A26, '?OBJ2', exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient(D26, '?OBJ2')and destination(D26, Z25)and not equal(B26, '?OBJ2'))))))and'$existential'(B26, '?OBJ1', exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, '?OBJ1')and origin(C26, Z25)and patient(D26, A26)and destination(D26, Z25)and not equal('?OBJ1', A26)))))and'$existential'(C26, '?REMOVE', exists(D26, instance(D26, 'Putting')and instance('?REMOVE', 'Removing')and subProcess(D26, Y25)and subProcess('?REMOVE', Y25)and patient('?REMOVE', B26)and origin('?REMOVE', Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26))))and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), patient(D26, A26)))and (entails(not destination(D26, Z25), not instance(Y25, 'Substituting'))and entails(((((instance(Y25, 'Substituting')and'$existential'(Z25, '?PLACE', exists(A26, exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, '?PLACE')and patient(D26, A26)and destination(D26, '?PLACE')and not equal(B26, A26)))))))and'$existential'(A26, '?OBJ2', exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient(D26, '?OBJ2')and destination(D26, Z25)and not equal(B26, '?OBJ2'))))))and'$existential'(B26, '?OBJ1', exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, '?OBJ1')and origin(C26, Z25)and patient(D26, A26)and destination(D26, Z25)and not equal('?OBJ1', A26)))))and'$existential'(C26, '?REMOVE', exists(D26, instance(D26, 'Putting')and instance('?REMOVE', 'Removing')and subProcess(D26, Y25)and subProcess('?REMOVE', Y25)and patient('?REMOVE', B26)and origin('?REMOVE', Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26))))and'$existential'(D26, '?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)), destination(D26, Z25)))and entails(equal(B26, A26), not instance(Y25, 'Substituting'))and entails(instance(Y25, 'Substituting'), not equal(B26, A26)), [domainV(D26, ['$instanceof':'Putting', destination:1, patient:1, subProcess:1]), domainV(C26, ['$instanceof':'Removing', origin:1, patient:1, subProcess:1]), domainV(B26, [patient:2]), domainV(A26, [patient:2]), domainV(Z25, [destination:2, origin:2]), domainV(Y25, ['$instanceof':'Substituting', subProcess:2]), domainV(_G2551, []), forall(Y25), replaceConsVar(Z25, '$existential'('?PLACE', exists(A26, exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, '?PLACE')and patient(D26, A26)and destination(D26, '?PLACE')and not equal(B26, A26))))))), replaceConsVar(A26, '$existential'('?OBJ2', exists(B26, exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient(D26, '?OBJ2')and destination(D26, Z25)and not equal(B26, '?OBJ2')))))), replaceConsVar(B26, '$existential'('?OBJ1', exists(C26, exists(D26, instance(D26, 'Putting')and instance(C26, 'Removing')and subProcess(D26, Y25)and subProcess(C26, Y25)and patient(C26, '?OBJ1')and origin(C26, Z25)and patient(D26, A26)and destination(D26, Z25)and not equal('?OBJ1', A26))))), replaceConsVar(C26, '$existential'('?REMOVE', exists(D26, instance(D26, 'Putting')and instance('?REMOVE', 'Removing')and subProcess(D26, Y25)and subProcess('?REMOVE', Y25)and patient('?REMOVE', B26)and origin('?REMOVE', Z25)and patient(D26, A26)and destination(D26, Z25)and not equal(B26, A26)))), replaceConsVar(D26, '$existential'('?PUT', instance('?PUT', 'Putting')and instance(C26, 'Removing')and subProcess('?PUT', Y25)and subProcess(C26, Y25)and patient(C26, B26)and origin(C26, Z25)and patient('?PUT', A26)and destination('?PUT', Z25)and not equal(B26, A26)))], ['SUB'=Y25, 'PUT'=D26, 'REMOVE'=C26, 'OBJ1'=B26, 'OBJ2'=A26, 'PLACE'=Z25], 'Merge', 'PROCESSES', 5405, 'Anonymous', on).
mooCache(subclass('Arranging', 'Transfer'), subclass('Arranging', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5407, 'Anonymous', on).
mooCache(documentation('Arranging', string('"The Class of IntentionallyCausedProcesses   where the order of Objects in a Collection is altered."')), documentation('Arranging', string('"The Class of IntentionallyCausedProcesses   where the order of Objects in a Collection is altered."')), [], [], 'Merge', 'PROCESSES', 5409, 'Anonymous', on).
mooCache(subclass('Impelling', 'Transfer'), subclass('Impelling', 'Transfer'), [], [], 'Merge', 'PROCESSES', 5411, 'Anonymous', on).
mooCache(documentation('Impelling', string('"The subclass of Transfer where the patient   travels through space by means of a sudden, forceful event.  Some examples   would be shooting, throwing, tossing, etc."')), documentation('Impelling', string('"The subclass of Transfer where the patient   travels through space by means of a sudden, forceful event.  Some examples   would be shooting, throwing, tossing, etc."')), [], [], 'Merge', 'PROCESSES', 5413, 'Anonymous', on).
mooCache(subclass('Shooting', 'Impelling'), subclass('Shooting', 'Impelling'), [], [], 'Merge', 'PROCESSES', 5415, 'Anonymous', on).
mooCache(documentation('Shooting', string('"The subclass of Impelling where the patient   is a projectile that is fired through the air by means of some sort of   Device."')), documentation('Shooting', string('"The subclass of Impelling where the patient   is a projectile that is fired through the air by means of some sort of   Device."')), [], [], 'Merge', 'PROCESSES', 5417, 'Anonymous', on).
mooCache(subclass('Transportation', 'Motion'), subclass('Transportation', 'Motion'), [], [], 'Merge', 'PROCESSES', 5419, 'Anonymous', on).
mooCache(relatedInternalConcept('Transportation', 'TransportationDevice'), relatedInternalConcept('Transportation', 'TransportationDevice'), [], [], 'Merge', 'PROCESSES', 5421, 'Anonymous', on).
mooCache(documentation('Transportation', string('"Motion from one point to another by means   of a TransportationDevice."')), documentation('Transportation', string('"Motion from one point to another by means   of a TransportationDevice."')), [], [], 'Merge', 'PROCESSES', 5423, 'Anonymous', on).
mooCache(instance(Y2, 'Transportation')=>exists(Z2, instance(Z2, 'TransportationDevice')and instrument(Y2, Z2)), (entails(not instance(Z2, 'TransportationDevice'), not instance(Y2, 'Transportation'))and entails(instance(Y2, 'Transportation')and'$existential'(Z2, '?DEVICE', instance('?DEVICE', 'TransportationDevice')and instrument(Y2, '?DEVICE')), instance(Z2, 'TransportationDevice')))and entails(not instrument(Y2, Z2), not instance(Y2, 'Transportation'))and entails(instance(Y2, 'Transportation')and'$existential'(Z2, '?DEVICE', instance('?DEVICE', 'TransportationDevice')and instrument(Y2, '?DEVICE')), instrument(Y2, Z2)), [domainV(Z2, ['$instanceof':'TransportationDevice', instrument:2]), domainV(Y2, ['$instanceof':'Transportation', instrument:1]), domainV(_G6828, []), forall(Y2), replaceConsVar(Z2, '$existential'('?DEVICE', instance('?DEVICE', 'TransportationDevice')and instrument(Y2, '?DEVICE')))], ['TRANS'=Y2, 'DEVICE'=Z2], 'Merge', 'PROCESSES', 5425, 'Anonymous', on).
mooCache(subclass('Guiding', 'IntentionalProcess'), subclass('Guiding', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5427, 'Anonymous', on).
mooCache(documentation('Guiding', string('"Controlling the direction and/or speed of a   CorpuscularObject.  This includes aiming a gun or arrow, navigating a   ship, driving a car or truck, operating a train, etc."')), documentation('Guiding', string('"Controlling the direction and/or speed of a   CorpuscularObject.  This includes aiming a gun or arrow, navigating a   ship, driving a car or truck, operating a train, etc."')), [], [], 'Merge', 'PROCESSES', 5429, 'Anonymous', on).
mooCache(subclass('ChangeOfPossession', 'SocialInteraction'), subclass('ChangeOfPossession', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5431, 'Anonymous', on).
mooCache(relatedInternalConcept('ChangeOfPossession', possesses), relatedInternalConcept('ChangeOfPossession', possesses), [], [], 'Merge', 'PROCESSES', 5433, 'Anonymous', on).
mooCache(documentation('ChangeOfPossession', string('"The Class of Processes where   ownership of something is transferred from one Agent to another."')), documentation('ChangeOfPossession', string('"The Class of Processes where   ownership of something is transferred from one Agent to another."')), [], [], 'Merge', 'PROCESSES', 5435, 'Anonymous', on).
mooCache(instance(S10, 'ChangeOfPossession')and patient(S10, T10)and holdsDuring('ImmediatePastFn'('WhenFn'(S10)), possesses(U10, T10))and holdsDuring('ImmediateFutureFn'('WhenFn'(S10)), possesses(V10, T10))=>not equal(U10, V10), entails(instance(S10, 'ChangeOfPossession')and patient(S10, T10)and holdsDuring('ImmediatePastFn'('WhenFn'(S10)), possesses(U10, T10))and holdsDuring('ImmediateFutureFn'('WhenFn'(S10)), possesses(V10, T10)), not equal(U10, V10))and entails(equal(U10, V10)and patient(S10, T10)and holdsDuring('ImmediatePastFn'('WhenFn'(S10)), possesses(U10, T10))and holdsDuring('ImmediateFutureFn'('WhenFn'(S10)), possesses(V10, T10)), not instance(S10, 'ChangeOfPossession'))and entails(equal(U10, V10)and instance(S10, 'ChangeOfPossession')and holdsDuring('ImmediatePastFn'('WhenFn'(S10)), possesses(U10, T10))and holdsDuring('ImmediateFutureFn'('WhenFn'(S10)), possesses(V10, T10)), not patient(S10, T10))and entails(equal(U10, V10)and instance(S10, 'ChangeOfPossession')and patient(S10, T10)and holdsDuring('ImmediateFutureFn'('WhenFn'(S10)), possesses(V10, T10)), not holdsDuring('ImmediatePastFn'('WhenFn'(S10)), possesses(U10, T10)))and entails(equal(U10, V10)and instance(S10, 'ChangeOfPossession')and patient(S10, T10)and holdsDuring('ImmediatePastFn'('WhenFn'(S10)), possesses(U10, T10)), not holdsDuring('ImmediateFutureFn'('WhenFn'(S10)), possesses(V10, T10))), [domainV(V10, [possesses:1]), domainV(U10, [possesses:1]), domainV(T10, [patient:2, possesses:2]), domainV(S10, ['$instanceof':'ChangeOfPossession', 'WhenFn':1, patient:1]), domainV(_G12391, []), forall(S10), forall(T10), forall(U10), forall(V10)], ['CHANGE'=S10, 'OBJ'=T10, 'AGENT1'=U10, 'AGENT2'=V10], 'Merge', 'PROCESSES', 5437, 'Anonymous', on).
mooCache(subclass('Giving', 'ChangeOfPossession'), subclass('Giving', 'ChangeOfPossession'), [], [], 'Merge', 'PROCESSES', 5439, 'Anonymous', on).
mooCache(documentation('Giving', string('"The subclass of ChangeOfPossession where the   agent gives the destination something."')), documentation('Giving', string('"The subclass of ChangeOfPossession where the   agent gives the destination something."')), [], [], 'Merge', 'PROCESSES', 5441, 'Anonymous', on).
mooCache(instance(J15, 'Giving')and agent(J15, K15)and destination(J15, L15)and instance(L15, 'Agent')and patient(J15, M15)=>holdsDuring('ImmediatePastFn'('WhenFn'(J15)), possesses(K15, M15))and holdsDuring('ImmediateFutureFn'('WhenFn'(J15)), possesses(L15, M15)), (entails(instance(J15, 'Giving')and agent(J15, K15)and destination(J15, L15)and instance(L15, 'Agent')and patient(J15, M15), holdsDuring('ImmediatePastFn'('WhenFn'(J15)), possesses(K15, M15)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J15)), possesses(K15, M15))and agent(J15, K15)and destination(J15, L15)and instance(L15, 'Agent')and patient(J15, M15), not instance(J15, 'Giving'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J15)), possesses(K15, M15))and instance(J15, 'Giving')and destination(J15, L15)and instance(L15, 'Agent')and patient(J15, M15), not agent(J15, K15))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J15)), possesses(K15, M15))and instance(J15, 'Giving')and agent(J15, K15)and instance(L15, 'Agent')and patient(J15, M15), not destination(J15, L15))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J15)), possesses(K15, M15))and instance(J15, 'Giving')and agent(J15, K15)and destination(J15, L15)and patient(J15, M15), not instance(L15, 'Agent'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(J15)), possesses(K15, M15))and instance(J15, 'Giving')and agent(J15, K15)and destination(J15, L15)and instance(L15, 'Agent'), not patient(J15, M15)))and entails(instance(J15, 'Giving')and agent(J15, K15)and destination(J15, L15)and instance(L15, 'Agent')and patient(J15, M15), holdsDuring('ImmediateFutureFn'('WhenFn'(J15)), possesses(L15, M15)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J15)), possesses(L15, M15))and agent(J15, K15)and destination(J15, L15)and instance(L15, 'Agent')and patient(J15, M15), not instance(J15, 'Giving'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J15)), possesses(L15, M15))and instance(J15, 'Giving')and destination(J15, L15)and instance(L15, 'Agent')and patient(J15, M15), not agent(J15, K15))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J15)), possesses(L15, M15))and instance(J15, 'Giving')and agent(J15, K15)and instance(L15, 'Agent')and patient(J15, M15), not destination(J15, L15))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J15)), possesses(L15, M15))and instance(J15, 'Giving')and agent(J15, K15)and destination(J15, L15)and patient(J15, M15), not instance(L15, 'Agent'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(J15)), possesses(L15, M15))and instance(J15, 'Giving')and agent(J15, K15)and destination(J15, L15)and instance(L15, 'Agent'), not patient(J15, M15)), [domainV(M15, [patient:2, possesses:2]), domainV(L15, ['$instanceof':'Agent', destination:2, possesses:1]), domainV(K15, [agent:2, possesses:1]), domainV(J15, ['$instanceof':'Giving', 'WhenFn':1, agent:1, destination:1, patient:1]), domainV(_G14888, []), forall(J15), forall(K15), forall(L15), forall(M15)], ['GIVE'=J15, 'AGENT1'=K15, 'AGENT2'=L15, 'OBJ'=M15], 'Merge', 'PROCESSES', 5443, 'Anonymous', on).
mooCache(subclass('Lending', 'Giving'), subclass('Lending', 'Giving'), [], [], 'Merge', 'PROCESSES', 5445, 'Anonymous', on).
mooCache(documentation('Lending', string('"The subclass of Giving Processes where   the agent gives the destination something for a limited period of   time with the expectation that it will be returned later (perhaps with   interest)."')), documentation('Lending', string('"The subclass of Giving Processes where   the agent gives the destination something for a limited period of   time with the expectation that it will be returned later (perhaps with   interest)."')), [], [], 'Merge', 'PROCESSES', 5447, 'Anonymous', on).
mooCache(subclass('Getting', 'ChangeOfPossession'), subclass('Getting', 'ChangeOfPossession'), [], [], 'Merge', 'PROCESSES', 5449, 'Anonymous', on).
mooCache(documentation('Getting', string('"The subclass of ChangeOfPossession where the  agent gets something.  Note that the source from which something is   obtained is specified with the origin CaseRole."')), documentation('Getting', string('"The subclass of ChangeOfPossession where the  agent gets something.  Note that the source from which something is   obtained is specified with the origin CaseRole."')), [], [], 'Merge', 'PROCESSES', 5451, 'Anonymous', on).
mooCache(instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23)=>exists(D23, instance(D23, 'Giving')and agent(D23, B23)and destination(D23, A23)and patient(D23, C23)), (entails((instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23))and'$existential'(D23, '?GIVE', instance('?GIVE', 'Giving')and agent('?GIVE', B23)and destination('?GIVE', A23)and patient('?GIVE', C23)), instance(D23, 'Giving'))and entails(not instance(D23, 'Giving')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not instance(Z22, 'Getting'))and entails(not instance(D23, 'Giving')and instance(Z22, 'Getting')and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not agent(Z22, A23))and entails(not instance(D23, 'Giving')and instance(Z22, 'Getting')and agent(Z22, A23)and instance(B23, 'Agent')and patient(Z22, C23), not origin(Z22, B23))and entails(not instance(D23, 'Giving')and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and patient(Z22, C23), not instance(B23, 'Agent'))and entails(not instance(D23, 'Giving')and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent'), not patient(Z22, C23)))and (entails((instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23))and'$existential'(D23, '?GIVE', instance('?GIVE', 'Giving')and agent('?GIVE', B23)and destination('?GIVE', A23)and patient('?GIVE', C23)), agent(D23, B23))and entails(not agent(D23, B23)and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not instance(Z22, 'Getting'))and entails(not agent(D23, B23)and instance(Z22, 'Getting')and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not agent(Z22, A23))and entails(not agent(D23, B23)and instance(Z22, 'Getting')and agent(Z22, A23)and instance(B23, 'Agent')and patient(Z22, C23), not origin(Z22, B23))and entails(not agent(D23, B23)and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and patient(Z22, C23), not instance(B23, 'Agent'))and entails(not agent(D23, B23)and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent'), not patient(Z22, C23)))and (entails((instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23))and'$existential'(D23, '?GIVE', instance('?GIVE', 'Giving')and agent('?GIVE', B23)and destination('?GIVE', A23)and patient('?GIVE', C23)), destination(D23, A23))and entails(not destination(D23, A23)and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not instance(Z22, 'Getting'))and entails(not destination(D23, A23)and instance(Z22, 'Getting')and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not agent(Z22, A23))and entails(not destination(D23, A23)and instance(Z22, 'Getting')and agent(Z22, A23)and instance(B23, 'Agent')and patient(Z22, C23), not origin(Z22, B23))and entails(not destination(D23, A23)and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and patient(Z22, C23), not instance(B23, 'Agent'))and entails(not destination(D23, A23)and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent'), not patient(Z22, C23)))and entails((instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23))and'$existential'(D23, '?GIVE', instance('?GIVE', 'Giving')and agent('?GIVE', B23)and destination('?GIVE', A23)and patient('?GIVE', C23)), patient(D23, C23))and entails(not patient(D23, C23)and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not instance(Z22, 'Getting'))and entails(not patient(D23, C23)and instance(Z22, 'Getting')and origin(Z22, B23)and instance(B23, 'Agent')and patient(Z22, C23), not agent(Z22, A23))and entails(not patient(D23, C23)and instance(Z22, 'Getting')and agent(Z22, A23)and instance(B23, 'Agent')and patient(Z22, C23), not origin(Z22, B23))and entails(not patient(D23, C23)and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and patient(Z22, C23), not instance(B23, 'Agent'))and entails(not patient(D23, C23)and instance(Z22, 'Getting')and agent(Z22, A23)and origin(Z22, B23)and instance(B23, 'Agent'), not patient(Z22, C23)), [domainV(D23, ['$instanceof':'Giving', agent:1, destination:1, patient:1]), domainV(C23, [patient:2]), domainV(B23, ['$instanceof':'Agent', agent:2, origin:2]), domainV(A23, [agent:2, destination:2]), domainV(Z22, ['$instanceof':'Getting', agent:1, origin:1, patient:1]), domainV(_G2155, []), forall(Z22), forall(A23), forall(B23), forall(C23), replaceConsVar(D23, '$existential'('?GIVE', instance('?GIVE', 'Giving')and agent('?GIVE', B23)and destination('?GIVE', A23)and patient('?GIVE', C23)))], ['GET'=Z22, 'AGENT1'=A23, 'AGENT2'=B23, 'OBJ'=C23, 'GIVE'=D23], 'Merge', 'PROCESSES', 5453, 'Anonymous', on).
mooCache(subclass('Borrowing', 'Getting'), subclass('Borrowing', 'Getting'), [], [], 'Merge', 'PROCESSES', 5455, 'Anonymous', on).
mooCache(documentation('Borrowing', string('"The subclass of Getting Processes where   the agent gets something for a limited period of time with the expectation   that it will be returned later (perhaps with interest)."')), documentation('Borrowing', string('"The subclass of Getting Processes where   the agent gets something for a limited period of time with the expectation   that it will be returned later (perhaps with interest)."')), [], [], 'Merge', 'PROCESSES', 5457, 'Anonymous', on).
mooCache(subclass('Transaction', 'ChangeOfPossession'), subclass('Transaction', 'ChangeOfPossession'), [], [], 'Merge', 'PROCESSES', 5459, 'Anonymous', on).
mooCache(documentation('Transaction', string('"The subclass of ChangeOfPossession where   something is exchanged for something else."')), documentation('Transaction', string('"The subclass of ChangeOfPossession where   something is exchanged for something else."')), [], [], 'Merge', 'PROCESSES', 5461, 'Anonymous', on).
mooCache(instance(V34, 'Transaction')=>exists(W34, exists(X34, exists(Y34, exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34))))))), (entails(not instance(Z34, 'Giving'), not instance(V34, 'Transaction'))and entails(((instance(V34, 'Transaction')and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), instance(Z34, 'Giving')))and (entails(not instance(Y34, 'Giving'), not instance(V34, 'Transaction'))and entails((((instance(V34, 'Transaction')and'$existential'(Y34, '?GIVE2', exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance('?GIVE2', 'Giving')and subProcess(Z34, V34)and subProcess('?GIVE2', V34)and agent(Z34, B35)and agent('?GIVE2', A35)and patient(Z34, X34)and patient('?GIVE2', W34)and destination(Z34, A35)and destination('?GIVE2', B35)and not equal(B35, A35)and not equal(X34, W34))))))and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), instance(Y34, 'Giving')))and (entails(not subProcess(Z34, V34), not instance(V34, 'Transaction'))and entails(((instance(V34, 'Transaction')and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), subProcess(Z34, V34)))and (entails(not subProcess(Y34, V34), not instance(V34, 'Transaction'))and entails((((instance(V34, 'Transaction')and'$existential'(Y34, '?GIVE2', exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance('?GIVE2', 'Giving')and subProcess(Z34, V34)and subProcess('?GIVE2', V34)and agent(Z34, B35)and agent('?GIVE2', A35)and patient(Z34, X34)and patient('?GIVE2', W34)and destination(Z34, A35)and destination('?GIVE2', B35)and not equal(B35, A35)and not equal(X34, W34))))))and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), subProcess(Y34, V34)))and (entails(not agent(Z34, B35), not instance(V34, 'Transaction'))and entails(((instance(V34, 'Transaction')and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), agent(Z34, B35)))and (entails(not agent(Y34, A35), not instance(V34, 'Transaction'))and entails((((instance(V34, 'Transaction')and'$existential'(Y34, '?GIVE2', exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance('?GIVE2', 'Giving')and subProcess(Z34, V34)and subProcess('?GIVE2', V34)and agent(Z34, B35)and agent('?GIVE2', A35)and patient(Z34, X34)and patient('?GIVE2', W34)and destination(Z34, A35)and destination('?GIVE2', B35)and not equal(B35, A35)and not equal(X34, W34))))))and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), agent(Y34, A35)))and (entails(not patient(Z34, X34), not instance(V34, 'Transaction'))and entails(((((instance(V34, 'Transaction')and'$existential'(X34, '?OBJ1', exists(Y34, exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, A35)and patient(Z34, '?OBJ1')and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, B35)and not equal(B35, A35)and not equal('?OBJ1', W34)))))))and'$existential'(Y34, '?GIVE2', exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance('?GIVE2', 'Giving')and subProcess(Z34, V34)and subProcess('?GIVE2', V34)and agent(Z34, B35)and agent('?GIVE2', A35)and patient(Z34, X34)and patient('?GIVE2', W34)and destination(Z34, A35)and destination('?GIVE2', B35)and not equal(B35, A35)and not equal(X34, W34))))))and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), patient(Z34, X34)))and (entails(not patient(Y34, W34), not instance(V34, 'Transaction'))and entails((((((instance(V34, 'Transaction')and'$existential'(W34, '?OBJ2', exists(X34, exists(Y34, exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, '?OBJ2')and destination(Z34, A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, '?OBJ2'))))))))and'$existential'(X34, '?OBJ1', exists(Y34, exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, A35)and patient(Z34, '?OBJ1')and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, B35)and not equal(B35, A35)and not equal('?OBJ1', W34)))))))and'$existential'(Y34, '?GIVE2', exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance('?GIVE2', 'Giving')and subProcess(Z34, V34)and subProcess('?GIVE2', V34)and agent(Z34, B35)and agent('?GIVE2', A35)and patient(Z34, X34)and patient('?GIVE2', W34)and destination(Z34, A35)and destination('?GIVE2', B35)and not equal(B35, A35)and not equal(X34, W34))))))and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), patient(Y34, W34)))and (entails(not destination(Z34, A35), not instance(V34, 'Transaction'))and entails(((instance(V34, 'Transaction')and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), destination(Z34, A35)))and (entails(not destination(Y34, B35), not instance(V34, 'Transaction'))and entails((((instance(V34, 'Transaction')and'$existential'(Y34, '?GIVE2', exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance('?GIVE2', 'Giving')and subProcess(Z34, V34)and subProcess('?GIVE2', V34)and agent(Z34, B35)and agent('?GIVE2', A35)and patient(Z34, X34)and patient('?GIVE2', W34)and destination(Z34, A35)and destination('?GIVE2', B35)and not equal(B35, A35)and not equal(X34, W34))))))and'$existential'(Z34, '?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34)))))and'$existential'(A35, '?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34))))and'$existential'(B35, '?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)), destination(Y34, B35)))and (entails(equal(B35, A35), not instance(V34, 'Transaction'))and entails(instance(V34, 'Transaction'), not equal(B35, A35)))and entails(equal(X34, W34), not instance(V34, 'Transaction'))and entails(instance(V34, 'Transaction'), not equal(X34, W34)), [domainV(B35, [agent:2, destination:2]), domainV(A35, [agent:2, destination:2]), domainV(Z34, ['$instanceof':'Giving', agent:1, destination:1, patient:1, subProcess:1]), domainV(Y34, ['$instanceof':'Giving', agent:1, destination:1, patient:1, subProcess:1]), domainV(X34, [patient:2]), domainV(W34, [patient:2]), domainV(V34, ['$instanceof':'Transaction', subProcess:2]), domainV(_G3387, []), forall(V34), replaceConsVar(W34, '$existential'('?OBJ2', exists(X34, exists(Y34, exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, '?OBJ2')and destination(Z34, A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, '?OBJ2')))))))), replaceConsVar(X34, '$existential'('?OBJ1', exists(Y34, exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, A35)and patient(Z34, '?OBJ1')and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, B35)and not equal(B35, A35)and not equal('?OBJ1', W34))))))), replaceConsVar(Y34, '$existential'('?GIVE2', exists(Z34, exists(A35, exists(B35, instance(Z34, 'Giving')and instance('?GIVE2', 'Giving')and subProcess(Z34, V34)and subProcess('?GIVE2', V34)and agent(Z34, B35)and agent('?GIVE2', A35)and patient(Z34, X34)and patient('?GIVE2', W34)and destination(Z34, A35)and destination('?GIVE2', B35)and not equal(B35, A35)and not equal(X34, W34)))))), replaceConsVar(Z34, '$existential'('?GIVE1', exists(A35, exists(B35, instance('?GIVE1', 'Giving')and instance(Y34, 'Giving')and subProcess('?GIVE1', V34)and subProcess(Y34, V34)and agent('?GIVE1', B35)and agent(Y34, A35)and patient('?GIVE1', X34)and patient(Y34, W34)and destination('?GIVE1', A35)and destination(Y34, B35)and not equal(B35, A35)and not equal(X34, W34))))), replaceConsVar(A35, '$existential'('?AGENT2', exists(B35, instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, B35)and agent(Y34, '?AGENT2')and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, '?AGENT2')and destination(Y34, B35)and not equal(B35, '?AGENT2')and not equal(X34, W34)))), replaceConsVar(B35, '$existential'('?AGENT1', instance(Z34, 'Giving')and instance(Y34, 'Giving')and subProcess(Z34, V34)and subProcess(Y34, V34)and agent(Z34, '?AGENT1')and agent(Y34, A35)and patient(Z34, X34)and patient(Y34, W34)and destination(Z34, A35)and destination(Y34, '?AGENT1')and not equal('?AGENT1', A35)and not equal(X34, W34)))], ['TRANS'=V34, 'AGENT1'=B35, 'AGENT2'=A35, 'GIVE1'=Z34, 'GIVE2'=Y34, 'OBJ1'=X34, 'OBJ2'=W34], 'Merge', 'PROCESSES', 5463, 'Anonymous', on).
mooCache(subclass('FinancialTransaction', 'Transaction'), subclass('FinancialTransaction', 'Transaction'), [], [], 'Merge', 'PROCESSES', 5465, 'Anonymous', on).
mooCache(documentation('FinancialTransaction', string('"A Transaction where an instance   of CurrencyMeasure is exchanged for something else."')), documentation('FinancialTransaction', string('"A Transaction where an instance   of CurrencyMeasure is exchanged for something else."')), [], [], 'Merge', 'PROCESSES', 5467, 'Anonymous', on).
mooCache(subclass('Betting', 'FinancialTransaction'), subclass('Betting', 'FinancialTransaction'), [], [], 'Merge', 'PROCESSES', 5469, 'Anonymous', on).
mooCache(documentation('Betting', string('"A FinancialTransaction where an instance of   CurrencyMeasure is exchanged for the possibility of winning a larger   instance of CurrencyMeasure within the context of some sort of   Game."')), documentation('Betting', string('"A FinancialTransaction where an instance of   CurrencyMeasure is exchanged for the possibility of winning a larger   instance of CurrencyMeasure within the context of some sort of   Game."')), [], [], 'Merge', 'PROCESSES', 5471, 'Anonymous', on).
mooCache(subclass('Buying', 'FinancialTransaction'), subclass('Buying', 'FinancialTransaction'), [], [], 'Merge', 'PROCESSES', 5473, 'Anonymous', on).
mooCache(relatedInternalConcept('Buying', 'Selling'), relatedInternalConcept('Buying', 'Selling'), [], [], 'Merge', 'PROCESSES', 5475, 'Anonymous', on).
mooCache(documentation('Buying', string('"A FinancialTransaction in which an instance of   CurrencyMeasure is exchanged for an instance of Physical."')), documentation('Buying', string('"A FinancialTransaction in which an instance of   CurrencyMeasure is exchanged for an instance of Physical."')), [], [], 'Merge', 'PROCESSES', 5477, 'Anonymous', on).
mooCache(subclass('Selling', 'FinancialTransaction'), subclass('Selling', 'FinancialTransaction'), [], [], 'Merge', 'PROCESSES', 5479, 'Anonymous', on).
mooCache(documentation('Selling', string('"A FinancialTransaction in which an instance of   Physical is exchanged for an instance of CurrencyMeasure."')), documentation('Selling', string('"A FinancialTransaction in which an instance of   Physical is exchanged for an instance of CurrencyMeasure."')), [], [], 'Merge', 'PROCESSES', 5481, 'Anonymous', on).
mooCache(instance(V14, 'Buying')and agent(V14, W14)and origin(V14, X14)and patient(V14, Y14)<=>instance(Z14, 'Selling')and agent(Z14, X14)and destination(Z14, W14)and patient(Z14, Y14), (entails(instance(V14, 'Buying')and agent(V14, W14)and origin(V14, X14)and patient(V14, Y14), instance(Z14, 'Selling'))and entails(instance(V14, 'Buying')and agent(V14, W14)and origin(V14, X14)and patient(V14, Y14), agent(Z14, X14))and entails(instance(V14, 'Buying')and agent(V14, W14)and origin(V14, X14)and patient(V14, Y14), destination(Z14, W14))and entails(instance(V14, 'Buying')and agent(V14, W14)and origin(V14, X14)and patient(V14, Y14), patient(Z14, Y14))and entails((not instance(Z14, 'Selling')or not agent(Z14, X14)or not destination(Z14, W14)or not patient(Z14, Y14))and agent(V14, W14)and origin(V14, X14)and patient(V14, Y14), not instance(V14, 'Buying'))and entails((not instance(Z14, 'Selling')or not agent(Z14, X14)or not destination(Z14, W14)or not patient(Z14, Y14))and instance(V14, 'Buying')and origin(V14, X14)and patient(V14, Y14), not agent(V14, W14))and entails((not instance(Z14, 'Selling')or not agent(Z14, X14)or not destination(Z14, W14)or not patient(Z14, Y14))and instance(V14, 'Buying')and agent(V14, W14)and patient(V14, Y14), not origin(V14, X14))and entails((not instance(Z14, 'Selling')or not agent(Z14, X14)or not destination(Z14, W14)or not patient(Z14, Y14))and instance(V14, 'Buying')and agent(V14, W14)and origin(V14, X14), not patient(V14, Y14)))and entails(instance(Z14, 'Selling')and agent(Z14, X14)and destination(Z14, W14)and patient(Z14, Y14), instance(V14, 'Buying'))and entails(instance(Z14, 'Selling')and agent(Z14, X14)and destination(Z14, W14)and patient(Z14, Y14), agent(V14, W14))and entails(instance(Z14, 'Selling')and agent(Z14, X14)and destination(Z14, W14)and patient(Z14, Y14), origin(V14, X14))and entails(instance(Z14, 'Selling')and agent(Z14, X14)and destination(Z14, W14)and patient(Z14, Y14), patient(V14, Y14))and entails((not instance(V14, 'Buying')or not agent(V14, W14)or not origin(V14, X14)or not patient(V14, Y14))and agent(Z14, X14)and destination(Z14, W14)and patient(Z14, Y14), not instance(Z14, 'Selling'))and entails((not instance(V14, 'Buying')or not agent(V14, W14)or not origin(V14, X14)or not patient(V14, Y14))and instance(Z14, 'Selling')and destination(Z14, W14)and patient(Z14, Y14), not agent(Z14, X14))and entails((not instance(V14, 'Buying')or not agent(V14, W14)or not origin(V14, X14)or not patient(V14, Y14))and instance(Z14, 'Selling')and agent(Z14, X14)and patient(Z14, Y14), not destination(Z14, W14))and entails((not instance(V14, 'Buying')or not agent(V14, W14)or not origin(V14, X14)or not patient(V14, Y14))and instance(Z14, 'Selling')and agent(Z14, X14)and destination(Z14, W14), not patient(Z14, Y14)), [domainV(Z14, ['$instanceof':'Selling', agent:1, destination:1, patient:1]), domainV(Y14, [patient:2]), domainV(X14, [agent:2, origin:2]), domainV(W14, [agent:2, destination:2]), domainV(V14, ['$instanceof':'Buying', agent:1, origin:1, patient:1]), domainV(_G14237, []), forall(V14), forall(W14), forall(X14), forall(Y14), forall(Z14)], ['BUY'=V14, 'AGENT1'=W14, 'AGENT2'=X14, 'OBJECT'=Y14, 'SELL'=Z14], 'Merge', 'PROCESSES', 5483, 'Anonymous', on).
mooCache(subclass('Learning', 'MentalProcess'), subclass('Learning', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5485, 'Anonymous', on).
mooCache(documentation('Learning', string('"The Class of Processes which relate to the   acquisition of information."')), documentation('Learning', string('"The Class of Processes which relate to the   acquisition of information."')), [], [], 'Merge', 'PROCESSES', 5487, 'Anonymous', on).
mooCache(instance(T19, 'Learning')and agent(T19, U19)=>instance(U19, 'CognitiveAgent'), entails(instance(T19, 'Learning')and agent(T19, U19), instance(U19, 'CognitiveAgent'))and entails(not instance(U19, 'CognitiveAgent')and agent(T19, U19), not instance(T19, 'Learning'))and entails(not instance(U19, 'CognitiveAgent')and instance(T19, 'Learning'), not agent(T19, U19)), [domainV(U19, ['$instanceof':'CognitiveAgent', agent:2]), domainV(T19, ['$instanceof':'Learning', agent:1]), domainV(_G5373, []), forall(T19), forall(U19)], ['LEARN'=T19, 'AGENT'=U19], 'Merge', 'PROCESSES', 5489, 'Anonymous', on).
mooCache(holdsDuring(K21, exists(L21, instance(L21, 'Learning')and agent(L21, M21)and patient(L21, N21)))=>holdsDuring('ImmediateFutureFn'(K21), believes(M21, N21)), entails(holdsDuring(K21, instance(L21, 'Learning'))and holdsDuring(K21, agent(L21, M21))and holdsDuring(K21, patient(L21, N21)), holdsDuring('ImmediateFutureFn'(K21), believes(M21, N21)))and entails(not holdsDuring('ImmediateFutureFn'(K21), believes(M21, N21))and holdsDuring(K21, agent(L21, M21))and holdsDuring(K21, patient(L21, N21)), not holdsDuring(K21, instance(L21, 'Learning')))and entails(not holdsDuring('ImmediateFutureFn'(K21), believes(M21, N21))and holdsDuring(K21, instance(L21, 'Learning'))and holdsDuring(K21, patient(L21, N21)), not holdsDuring(K21, agent(L21, M21)))and entails(not holdsDuring('ImmediateFutureFn'(K21), believes(M21, N21))and holdsDuring(K21, instance(L21, 'Learning'))and holdsDuring(K21, agent(L21, M21)), not holdsDuring(K21, patient(L21, N21))), [domainV(N21, [believes:2, patient:2]), domainV(M21, [agent:2, believes:1]), domainV(L21, ['$instanceof':'Learning', agent:1, patient:1]), domainV(K21, ['ImmediateFutureFn':1, holdsDuring:1]), domainV(_G10974, []), forall(K21), forall(M21), forall(N21), forall(L21)], ['TIME'=K21, 'LEARN'=L21, 'AGENT'=M21, 'PROP'=N21], 'Merge', 'PROCESSES', 5491, 'Anonymous', on).
mooCache(subclass('Classifying', 'MentalProcess'), subclass('Classifying', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5493, 'Anonymous', on).
mooCache(documentation('Classifying', string('"The Class of MentalProcesses which   involve attaching a name or category to a thing or set of things.    Note that Classifying is distinguished from Learning by the fact   that the latter covers the acquisition by a CognitiveAgent of any   Proposition, while the former involves the assignment of a label   or category."')), documentation('Classifying', string('"The Class of MentalProcesses which   involve attaching a name or category to a thing or set of things.    Note that Classifying is distinguished from Learning by the fact   that the latter covers the acquisition by a CognitiveAgent of any   Proposition, while the former involves the assignment of a label   or category."')), [], [], 'Merge', 'PROCESSES', 5495, 'Anonymous', on).
mooCache(subclass('Reasoning', 'MentalProcess'), subclass('Reasoning', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5497, 'Anonymous', on).
mooCache(documentation('Reasoning', string('"The Class of MentalProcesses which   involve concluding, on the basis of either deductive or inductive   evidence, that a particular Proposition or Sentence is true."')), documentation('Reasoning', string('"The Class of MentalProcesses which   involve concluding, on the basis of either deductive or inductive   evidence, that a particular Proposition or Sentence is true."')), [], [], 'Merge', 'PROCESSES', 5499, 'Anonymous', on).
mooCache(subclass('Selecting', 'MentalProcess'), subclass('Selecting', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5501, 'Anonymous', on).
mooCache(documentation('Selecting', string('"The Class of MentalProcesses which involve   opting for one or more Entity out of a larger set of Entities."')), documentation('Selecting', string('"The Class of MentalProcesses which involve   opting for one or more Entity out of a larger set of Entities."')), [], [], 'Merge', 'PROCESSES', 5503, 'Anonymous', on).
mooCache(subclass('Comparing', 'MentalProcess'), subclass('Comparing', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5505, 'Anonymous', on).
mooCache(documentation('Comparing', string('"The Class of MentalProcesses which   involve comparing, relating, contrasting, etc. the properties of   two or more Entities."')), documentation('Comparing', string('"The Class of MentalProcesses which   involve comparing, relating, contrasting, etc. the properties of   two or more Entities."')), [], [], 'Merge', 'PROCESSES', 5507, 'Anonymous', on).
mooCache(subclass('Calculating', 'MentalProcess'), subclass('Calculating', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5509, 'Anonymous', on).
mooCache(documentation('Calculating', string('"MentalProcesses which involve the consideration   and/or manipulation of instances of Quantity."')), documentation('Calculating', string('"MentalProcesses which involve the consideration   and/or manipulation of instances of Quantity."')), [], [], 'Merge', 'PROCESSES', 5511, 'Anonymous', on).
mooCache(subclass('Measuring', 'Calculating'), subclass('Measuring', 'Calculating'), [], [], 'Merge', 'PROCESSES', 5513, 'Anonymous', on).
mooCache(documentation('Measuring', string('"The Class of Calculating Processes where   the aim is to determine the PhysicalQuantity of some aspect of the patient."')), documentation('Measuring', string('"The Class of Calculating Processes where   the aim is to determine the PhysicalQuantity of some aspect of the patient."')), [], [], 'Merge', 'PROCESSES', 5515, 'Anonymous', on).
mooCache(instance(D36, 'Measuring')and agent(D36, E36)and patient(D36, F36)=>exists(G36, exists(H36, holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'(H36, G36)))))), entails(((instance(D36, 'Measuring')and agent(D36, E36)and patient(D36, F36))and'$existential'(G36, '?UNIT', exists(H36, holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'(H36, '?UNIT')))))))and'$existential'(H36, '?QUANT', holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'('?QUANT', G36))))), holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'(H36, G36)))))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'(H36, G36))))and agent(D36, E36)and patient(D36, F36), not instance(D36, 'Measuring'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'(H36, G36))))and instance(D36, 'Measuring')and patient(D36, F36), not agent(D36, E36))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'(H36, G36))))and instance(D36, 'Measuring')and agent(D36, E36), not patient(D36, F36)), [domainV(H36, ['MeasureFn':1]), domainV(G36, ['MeasureFn':2]), domainV(F36, [measure:1, patient:2]), domainV(E36, [agent:2, knows:1]), domainV(D36, ['$instanceof':'Measuring', 'WhenFn':1, agent:1, patient:1]), domainV(_G13158, []), forall(D36), forall(E36), forall(F36), replaceConsVar(G36, '$existential'('?UNIT', exists(H36, holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'(H36, '?UNIT'))))))), replaceConsVar(H36, '$existential'('?QUANT', holdsDuring('ImmediateFutureFn'('WhenFn'(D36)), knows(E36, measure(F36, 'MeasureFn'('?QUANT', G36))))))], ['MEAS'=D36, 'AGENT'=E36, 'OBJ'=F36, 'QUANT'=H36, 'UNIT'=G36], 'Merge', 'PROCESSES', 5517, 'Anonymous', on).
mooCache(subclass('Counting', 'Calculating'), subclass('Counting', 'Calculating'), [], [], 'Merge', 'PROCESSES', 5519, 'Anonymous', on).
mooCache(documentation('Counting', string('"Enumerating the instances of a Class or the   members of a Collection."')), documentation('Counting', string('"Enumerating the instances of a Class or the   members of a Collection."')), [], [], 'Merge', 'PROCESSES', 5521, 'Anonymous', on).
mooCache(instance(T1, 'Counting')and agent(T1, U1)and patient(T1, V1)=>exists(W1, knows(U1, equal('CardinalityFn'(V1)))), entails(instance(T1, 'Counting')and agent(T1, U1)and patient(T1, V1), knows(U1, equal('CardinalityFn'(V1))))and entails(not knows(U1, equal('CardinalityFn'(V1)))and agent(T1, U1)and patient(T1, V1), not instance(T1, 'Counting'))and entails(not knows(U1, equal('CardinalityFn'(V1)))and instance(T1, 'Counting')and patient(T1, V1), not agent(T1, U1))and entails(not knows(U1, equal('CardinalityFn'(V1)))and instance(T1, 'Counting')and agent(T1, U1), not patient(T1, V1)), [domainV(V1, ['CardinalityFn':1, patient:2]), domainV(U1, [agent:2, knows:1]), domainV(T1, ['$instanceof':'Counting', agent:1, patient:1]), domainV(_G9115, []), forall(T1), forall(U1), forall(V1), replaceConsVar(W1, '$existential'('?NUMBER', knows(U1, equal('CardinalityFn'(V1)))))], ['COUNT'=T1, 'AGENT'=U1, 'ENTITY'=V1, 'NUMBER'=W1], 'Merge', 'PROCESSES', 5523, 'Anonymous', on).
mooCache(subclass('Predicting', 'MentalProcess'), subclass('Predicting', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5525, 'Anonymous', on).
mooCache(documentation('Predicting', string('"The Class of MentalProcesses which   involve the formulation of a Proposition about a state of affairs   which might be realized in the future."')), documentation('Predicting', string('"The Class of MentalProcesses which   involve the formulation of a Proposition about a state of affairs   which might be realized in the future."')), [], [], 'Merge', 'PROCESSES', 5527, 'Anonymous', on).
mooCache(subclass('Remembering', 'MentalProcess'), subclass('Remembering', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5529, 'Anonymous', on).
mooCache(documentation('Remembering', string('"The Class of MentalProcesses which   involve the recollection of prior experiences and/or of knowledge   which was previously acquired."')), documentation('Remembering', string('"The Class of MentalProcesses which   involve the recollection of prior experiences and/or of knowledge   which was previously acquired."')), [], [], 'Merge', 'PROCESSES', 5531, 'Anonymous', on).
mooCache(subclass('Opening', 'Process'), subclass('Opening', 'Process'), [], [], 'Merge', 'PROCESSES', 5533, 'Anonymous', on).
mooCache(relatedInternalConcept('Opening', 'Closing'), relatedInternalConcept('Opening', 'Closing'), [], [], 'Merge', 'PROCESSES', 5535, 'Anonymous', on).
mooCache(documentation('Opening', string('"The Class of Processes where an aperture is   created in an Object.  Note that the aperture may be created intentionally,   as when one opens a door, or unintentionally, as when the ground ruptures   in a seismic event."')), documentation('Opening', string('"The Class of Processes where an aperture is   created in an Object.  Note that the aperture may be created intentionally,   as when one opens a door, or unintentionally, as when the ground ruptures   in a seismic event."')), [], [], 'Merge', 'PROCESSES', 5537, 'Anonymous', on).
mooCache(subclass('Closing', 'Process'), subclass('Closing', 'Process'), [], [], 'Merge', 'PROCESSES', 5539, 'Anonymous', on).
mooCache(documentation('Closing', string('"The Class of Processes where an aperture is   closed in an Object."')), documentation('Closing', string('"The Class of Processes where an aperture is   closed in an Object."')), [], [], 'Merge', 'PROCESSES', 5541, 'Anonymous', on).
mooCache(subclass('Keeping', 'IntentionalProcess'), subclass('Keeping', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5543, 'Anonymous', on).
mooCache(documentation('Keeping', string('"The Class of Processes where the agent   keeps something in a particular location for an extended period of time."')), documentation('Keeping', string('"The Class of Processes where the agent   keeps something in a particular location for an extended period of time."')), [], [], 'Merge', 'PROCESSES', 5545, 'Anonymous', on).
mooCache(subclass('Securing', 'Keeping'), subclass('Securing', 'Keeping'), [], [], 'Merge', 'PROCESSES', 5547, 'Anonymous', on).
mooCache(documentation('Securing', string('"The Class of Keeping Processes where the   patient is secured in some manner, e.g. by locking it up in a strongbox."')), documentation('Securing', string('"The Class of Keeping Processes where the   patient is secured in some manner, e.g. by locking it up in a strongbox."')), [], [], 'Merge', 'PROCESSES', 5549, 'Anonymous', on).
mooCache(subclass('Confining', 'Securing'), subclass('Confining', 'Securing'), [], [], 'Merge', 'PROCESSES', 5551, 'Anonymous', on).
mooCache(subclass('Confining', 'RegulatoryProcess'), subclass('Confining', 'RegulatoryProcess'), [], [], 'Merge', 'PROCESSES', 5553, 'Anonymous', on).
mooCache(documentation('Confining', string('"The Class of Securing Processes where the   patient is Human and is kept against his/her will.  This covers   imprisonment, being jailed, held in custody, etc."')), documentation('Confining', string('"The Class of Securing Processes where the   patient is Human and is kept against his/her will.  This covers   imprisonment, being jailed, held in custody, etc."')), [], [], 'Merge', 'PROCESSES', 5555, 'Anonymous', on).
mooCache(subclass('Maintaining', 'IntentionalProcess'), subclass('Maintaining', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5557, 'Anonymous', on).
mooCache(documentation('Maintaining', string('"The Class of Processes where the agent   cares for or maintains the Object."')), documentation('Maintaining', string('"The Class of Processes where the agent   cares for or maintains the Object."')), [], [], 'Merge', 'PROCESSES', 5559, 'Anonymous', on).
mooCache(subclass('Repairing', 'IntentionalProcess'), subclass('Repairing', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5561, 'Anonymous', on).
mooCache(relatedInternalConcept('Repairing', 'Maintaining'), relatedInternalConcept('Repairing', 'Maintaining'), [], [], 'Merge', 'PROCESSES', 5563, 'Anonymous', on).
mooCache(documentation('Repairing', string('"The Class of Processes where the agent   makes a modification or series of modifications to an Object that is not   functioning as intended so that it works properly."')), documentation('Repairing', string('"The Class of Processes where the agent   makes a modification or series of modifications to an Object that is not   functioning as intended so that it works properly."')), [], [], 'Merge', 'PROCESSES', 5565, 'Anonymous', on).
mooCache(subclass('Damaging', 'Process'), subclass('Damaging', 'Process'), [], [], 'Merge', 'PROCESSES', 5567, 'Anonymous', on).
mooCache(documentation('Damaging', string('"The Class of Processes where the agent   brings about a situation where the patient no longer functions normally   or as intended."')), documentation('Damaging', string('"The Class of Processes where the agent   brings about a situation where the patient no longer functions normally   or as intended."')), [], [], 'Merge', 'PROCESSES', 5569, 'Anonymous', on).
mooCache(subclass('Concealing', 'IntentionalProcess'), subclass('Concealing', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5571, 'Anonymous', on).
mooCache(documentation('Concealing', string('"The Class of Processes where something is   moved out of view."')), documentation('Concealing', string('"The Class of Processes where something is   moved out of view."')), [], [], 'Merge', 'PROCESSES', 5573, 'Anonymous', on).
mooCache(subclass('Revealing', 'IntentionalProcess'), subclass('Revealing', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5575, 'Anonymous', on).
mooCache(disjoint('Revealing', 'Concealing'), disjoint('Revealing', 'Concealing'), [], [], 'Merge', 'PROCESSES', 5577, 'Anonymous', on).
mooCache(documentation('Revealing', string('"The Class of Processes where something is   moved into view."')), documentation('Revealing', string('"The Class of Processes where something is   moved into view."')), [], [], 'Merge', 'PROCESSES', 5579, 'Anonymous', on).
mooCache(subclass('Impacting', 'Process'), subclass('Impacting', 'Process'), [], [], 'Merge', 'PROCESSES', 5581, 'Anonymous', on).
mooCache(documentation('Impacting', string('"The Class of Processes where something comes   into sudden, forceful, physical contact with something else.  Some examples   would be striking, knocking, whipping etc."')), documentation('Impacting', string('"The Class of Processes where something comes   into sudden, forceful, physical contact with something else.  Some examples   would be striking, knocking, whipping etc."')), [], [], 'Merge', 'PROCESSES', 5583, 'Anonymous', on).
mooCache(instance(F34, 'Impacting')and instrument(F34, G34)and patient(F34, H34)=>holdsDuring('WhenFn'(F34), connected(G34, H34)), entails(instance(F34, 'Impacting')and instrument(F34, G34)and patient(F34, H34), holdsDuring('WhenFn'(F34), connected(G34, H34)))and entails(not holdsDuring('WhenFn'(F34), connected(G34, H34))and instrument(F34, G34)and patient(F34, H34), not instance(F34, 'Impacting'))and entails(not holdsDuring('WhenFn'(F34), connected(G34, H34))and instance(F34, 'Impacting')and patient(F34, H34), not instrument(F34, G34))and entails(not holdsDuring('WhenFn'(F34), connected(G34, H34))and instance(F34, 'Impacting')and instrument(F34, G34), not patient(F34, H34)), [domainV(H34, [connected:2, patient:2]), domainV(G34, [connected:1, instrument:2]), domainV(F34, ['$instanceof':'Impacting', 'WhenFn':1, instrument:1, patient:1]), domainV(_G8225, []), forall(F34), forall(G34), forall(H34)], ['IMPACT'=F34, 'INST'=G34, 'PLACE'=H34], 'Merge', 'PROCESSES', 5585, 'Anonymous', on).
mooCache(subclass('Striking', 'Impacting'), subclass('Striking', 'Impacting'), [], [], 'Merge', 'PROCESSES', 5587, 'Anonymous', on).
mooCache(subclass('Striking', 'IntentionalProcess'), subclass('Striking', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5589, 'Anonymous', on).
mooCache(documentation('Striking', string('"The Class of Impactings that are   intentionally caused by a CognitiveAgent."')), documentation('Striking', string('"The Class of Impactings that are   intentionally caused by a CognitiveAgent."')), [], [], 'Merge', 'PROCESSES', 5591, 'Anonymous', on).
mooCache(subclass('Poking', 'IntentionalProcess'), subclass('Poking', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5593, 'Anonymous', on).
mooCache(documentation('Poking', string('"The Class of Processes where the agent brings   a something long and narrow into contact with an Object and, in some cases,   pierces the surface of the Object."')), documentation('Poking', string('"The Class of Processes where the agent brings   a something long and narrow into contact with an Object and, in some cases,   pierces the surface of the Object."')), [], [], 'Merge', 'PROCESSES', 5595, 'Anonymous', on).
mooCache(instance(N2, 'Poking')and agent(N2, O2)and patient(N2, P2)and instrument(N2, Q2)=>holdsDuring('WhenFn'(N2), connects(Q2, O2, P2)), entails(instance(N2, 'Poking')and agent(N2, O2)and patient(N2, P2)and instrument(N2, Q2), holdsDuring('WhenFn'(N2), connects(Q2, O2, P2)))and entails(not holdsDuring('WhenFn'(N2), connects(Q2, O2, P2))and agent(N2, O2)and patient(N2, P2)and instrument(N2, Q2), not instance(N2, 'Poking'))and entails(not holdsDuring('WhenFn'(N2), connects(Q2, O2, P2))and instance(N2, 'Poking')and patient(N2, P2)and instrument(N2, Q2), not agent(N2, O2))and entails(not holdsDuring('WhenFn'(N2), connects(Q2, O2, P2))and instance(N2, 'Poking')and agent(N2, O2)and instrument(N2, Q2), not patient(N2, P2))and entails(not holdsDuring('WhenFn'(N2), connects(Q2, O2, P2))and instance(N2, 'Poking')and agent(N2, O2)and patient(N2, P2), not instrument(N2, Q2)), [domainV(Q2, [connects:1, instrument:2]), domainV(P2, [connects:3, patient:2]), domainV(O2, [agent:2, connects:2]), domainV(N2, ['$instanceof':'Poking', 'WhenFn':1, agent:1, instrument:1, patient:1]), domainV(_G9940, []), forall(N2), forall(O2), forall(P2), forall(Q2)], ['POKE'=N2, 'AGENT'=O2, 'OBJ'=P2, 'INST'=Q2], 'Merge', 'PROCESSES', 5597, 'Anonymous', on).
mooCache(subclass('Touching', 'IntentionalProcess'), subclass('Touching', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5599, 'Anonymous', on).
mooCache(documentation('Touching', string('"The Class of Processes where there is immediate   physical contact between an Organism and another Object."')), documentation('Touching', string('"The Class of Processes where there is immediate   physical contact between an Organism and another Object."')), [], [], 'Merge', 'PROCESSES', 5601, 'Anonymous', on).
mooCache(instance(H6, 'Touching')and agent(H6, I6)and patient(H6, J6)=>holdsDuring('WhenFn'(H6), connected(I6, J6)), entails(instance(H6, 'Touching')and agent(H6, I6)and patient(H6, J6), holdsDuring('WhenFn'(H6), connected(I6, J6)))and entails(not holdsDuring('WhenFn'(H6), connected(I6, J6))and agent(H6, I6)and patient(H6, J6), not instance(H6, 'Touching'))and entails(not holdsDuring('WhenFn'(H6), connected(I6, J6))and instance(H6, 'Touching')and patient(H6, J6), not agent(H6, I6))and entails(not holdsDuring('WhenFn'(H6), connected(I6, J6))and instance(H6, 'Touching')and agent(H6, I6), not patient(H6, J6)), [domainV(J6, [connected:2, patient:2]), domainV(I6, [agent:2, connected:1]), domainV(H6, ['$instanceof':'Touching', 'WhenFn':1, agent:1, patient:1]), domainV(_G8153, []), forall(H6), forall(I6), forall(J6)], ['TOUCH'=H6, 'AGENT'=I6, 'OBJ'=J6], 'Merge', 'PROCESSES', 5603, 'Anonymous', on).
mooCache(subclass('Holding', 'Touching'), subclass('Holding', 'Touching'), [], [], 'Merge', 'PROCESSES', 5605, 'Anonymous', on).
mooCache(documentation('Holding', string('"The Class of Processes where the agent   maintains physical contact with something for an extended period of time."')), documentation('Holding', string('"The Class of Processes where the agent   maintains physical contact with something for an extended period of time."')), [], [], 'Merge', 'PROCESSES', 5607, 'Anonymous', on).
mooCache(subclass('Covering', 'Process'), subclass('Covering', 'Process'), [], [], 'Merge', 'PROCESSES', 5609, 'Anonymous', on).
mooCache(documentation('Covering', string('"The Class of Processes where the agent   covers the patient, either completely or only partially, with   something else."')), documentation('Covering', string('"The Class of Processes where the agent   covers the patient, either completely or only partially, with   something else."')), [], [], 'Merge', 'PROCESSES', 5611, 'Anonymous', on).
mooCache(instance(K16, 'Covering')and patient(K16, L16)=>exists(M16, exists(N16, instance(N16, 'Concealing')and subProcess(N16, K16)and part(M16, L16)and patient(N16, M16))), (entails((instance(K16, 'Covering')and patient(K16, L16))and'$existential'(N16, '?CONCEAL', instance('?CONCEAL', 'Concealing')and subProcess('?CONCEAL', K16)and part(M16, L16)and patient('?CONCEAL', M16)), instance(N16, 'Concealing'))and entails(not instance(N16, 'Concealing')and patient(K16, L16), not instance(K16, 'Covering'))and entails(not instance(N16, 'Concealing')and instance(K16, 'Covering'), not patient(K16, L16)))and (entails((instance(K16, 'Covering')and patient(K16, L16))and'$existential'(N16, '?CONCEAL', instance('?CONCEAL', 'Concealing')and subProcess('?CONCEAL', K16)and part(M16, L16)and patient('?CONCEAL', M16)), subProcess(N16, K16))and entails(not subProcess(N16, K16)and patient(K16, L16), not instance(K16, 'Covering'))and entails(not subProcess(N16, K16)and instance(K16, 'Covering'), not patient(K16, L16)))and (entails(((instance(K16, 'Covering')and patient(K16, L16))and'$existential'(M16, '?PART', exists(N16, instance(N16, 'Concealing')and subProcess(N16, K16)and part('?PART', L16)and patient(N16, '?PART'))))and'$existential'(N16, '?CONCEAL', instance('?CONCEAL', 'Concealing')and subProcess('?CONCEAL', K16)and part(M16, L16)and patient('?CONCEAL', M16)), part(M16, L16))and entails(not part(M16, L16)and patient(K16, L16), not instance(K16, 'Covering'))and entails(not part(M16, L16)and instance(K16, 'Covering'), not patient(K16, L16)))and entails(((instance(K16, 'Covering')and patient(K16, L16))and'$existential'(M16, '?PART', exists(N16, instance(N16, 'Concealing')and subProcess(N16, K16)and part('?PART', L16)and patient(N16, '?PART'))))and'$existential'(N16, '?CONCEAL', instance('?CONCEAL', 'Concealing')and subProcess('?CONCEAL', K16)and part(M16, L16)and patient('?CONCEAL', M16)), patient(N16, M16))and entails(not patient(N16, M16)and patient(K16, L16), not instance(K16, 'Covering'))and entails(not patient(N16, M16)and instance(K16, 'Covering'), not patient(K16, L16)), [domainV(N16, ['$instanceof':'Concealing', patient:1, subProcess:1]), domainV(M16, [part:1, patient:2]), domainV(L16, [part:2, patient:2]), domainV(K16, ['$instanceof':'Covering', patient:1, subProcess:2]), domainV(_G12933, []), forall(K16), forall(L16), replaceConsVar(M16, '$existential'('?PART', exists(N16, instance(N16, 'Concealing')and subProcess(N16, K16)and part('?PART', L16)and patient(N16, '?PART')))), replaceConsVar(N16, '$existential'('?CONCEAL', instance('?CONCEAL', 'Concealing')and subProcess('?CONCEAL', K16)and part(M16, L16)and patient('?CONCEAL', M16)))], ['COVER'=K16, 'OBJ'=L16, 'CONCEAL'=N16, 'PART'=M16], 'Merge', 'PROCESSES', 5613, 'Anonymous', on).
mooCache(subclass('Dressing', 'Process'), subclass('Dressing', 'Process'), [], [], 'Merge', 'PROCESSES', 5615, 'Anonymous', on).
mooCache(documentation('Dressing', string('"The act of putting clothing on an Animal."')), documentation('Dressing', string('"The act of putting clothing on an Animal."')), [], [], 'Merge', 'PROCESSES', 5617, 'Anonymous', on).
mooCache(instance(L20, 'Dressing')and instrument(L20, M20)=>instance(M20, 'Clothing'), entails(instance(L20, 'Dressing')and instrument(L20, M20), instance(M20, 'Clothing'))and entails(not instance(M20, 'Clothing')and instrument(L20, M20), not instance(L20, 'Dressing'))and entails(not instance(M20, 'Clothing')and instance(L20, 'Dressing'), not instrument(L20, M20)), [domainV(M20, ['$instanceof':'Clothing', instrument:2]), domainV(L20, ['$instanceof':'Dressing', instrument:1]), domainV(_G5367, []), forall(L20), forall(M20)], ['DRESS'=L20, 'CLOTH'=M20], 'Merge', 'PROCESSES', 5619, 'Anonymous', on).
mooCache(subclass('Attaching', 'Process'), subclass('Attaching', 'Process'), [], [], 'Merge', 'PROCESSES', 5621, 'Anonymous', on).
mooCache(disjoint('Attaching', 'Detaching'), disjoint('Attaching', 'Detaching'), [], [], 'Merge', 'PROCESSES', 5623, 'Anonymous', on).
mooCache(relatedInternalConcept('Attaching', 'Putting'), relatedInternalConcept('Attaching', 'Putting'), [], [], 'Merge', 'PROCESSES', 5625, 'Anonymous', on).
mooCache(documentation('Attaching', string('"A Process where the agent attaches one thing   to something else.  Note that this is different from Putting in that two   things which are attached may already be in the same location."')), documentation('Attaching', string('"A Process where the agent attaches one thing   to something else.  Note that this is different from Putting in that two   things which are attached may already be in the same location."')), [], [], 'Merge', 'PROCESSES', 5627, 'Anonymous', on).
mooCache(subclass('Tying', 'Attaching'), subclass('Tying', 'Attaching'), [], [], 'Merge', 'PROCESSES', 5629, 'Anonymous', on).
mooCache(documentation('Tying', string('"The Process of tying two things, or two strands   of the same thing, together."')), documentation('Tying', string('"The Process of tying two things, or two strands   of the same thing, together."')), [], [], 'Merge', 'PROCESSES', 5631, 'Anonymous', on).
mooCache(subclass('Detaching', 'Process'), subclass('Detaching', 'Process'), [], [], 'Merge', 'PROCESSES', 5633, 'Anonymous', on).
mooCache(documentation('Detaching', string('"A Process where the agent detaches one thing   from something else.  Note that this is different from Removing in that   neither of the two things which are detached may be removed from the location   where it was attached."')), documentation('Detaching', string('"A Process where the agent detaches one thing   from something else.  Note that this is different from Removing in that   neither of the two things which are detached may be removed from the location   where it was attached."')), [], [], 'Merge', 'PROCESSES', 5635, 'Anonymous', on).
mooCache(subclass('Untying', 'Detaching'), subclass('Untying', 'Detaching'), [], [], 'Merge', 'PROCESSES', 5637, 'Anonymous', on).
mooCache(disjoint('Untying', 'Tying'), disjoint('Untying', 'Tying'), [], [], 'Merge', 'PROCESSES', 5639, 'Anonymous', on).
mooCache(documentation('Untying', string('"The Process of untying two things, or two strands   of the same thing."')), documentation('Untying', string('"The Process of untying two things, or two strands   of the same thing."')), [], [], 'Merge', 'PROCESSES', 5641, 'Anonymous', on).
mooCache(subclass('Cutting', 'Detaching'), subclass('Cutting', 'Detaching'), [], [], 'Merge', 'PROCESSES', 5643, 'Anonymous', on).
mooCache(documentation('Cutting', string('"The subclass of Detaching Processes which   involve a relatively sharp instrument."')), documentation('Cutting', string('"The subclass of Detaching Processes which   involve a relatively sharp instrument."')), [], [], 'Merge', 'PROCESSES', 5645, 'Anonymous', on).
mooCache(subclass('Combining', 'Process'), subclass('Combining', 'Process'), [], [], 'Merge', 'PROCESSES', 5647, 'Anonymous', on).
mooCache(documentation('Combining', string('"A Process where two or more things are combined   into a single thing."')), documentation('Combining', string('"A Process where two or more things are combined   into a single thing."')), [], [], 'Merge', 'PROCESSES', 5649, 'Anonymous', on).
mooCache(subclass('Separating', 'Process'), subclass('Separating', 'Process'), [], [], 'Merge', 'PROCESSES', 5651, 'Anonymous', on).
mooCache(disjoint('Separating', 'Combining'), disjoint('Separating', 'Combining'), [], [], 'Merge', 'PROCESSES', 5653, 'Anonymous', on).
mooCache(documentation('Separating', string('"A Process where something is disassembled   into (some of) its parts."')), documentation('Separating', string('"A Process where something is disassembled   into (some of) its parts."')), [], [], 'Merge', 'PROCESSES', 5655, 'Anonymous', on).
mooCache(subclass('Decorating', 'IntentionalProcess'), subclass('Decorating', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5657, 'Anonymous', on).
mooCache(relatedInternalConcept('Decorating', 'SurfaceAlteration'), relatedInternalConcept('Decorating', 'SurfaceAlteration'), [], [], 'Merge', 'PROCESSES', 5659, 'Anonymous', on).
mooCache(documentation('Decorating', string('"The act of modifying or embellishing something   with the aim of making it more aesthetically pleasing."')), documentation('Decorating', string('"The act of modifying or embellishing something   with the aim of making it more aesthetically pleasing."')), [], [], 'Merge', 'PROCESSES', 5661, 'Anonymous', on).
mooCache(subclass('ShapeAlteration', 'Process'), subclass('ShapeAlteration', 'Process'), [], [], 'Merge', 'PROCESSES', 5663, 'Anonymous', on).
mooCache(documentation('ShapeAlteration', string('"The act of changing the shape of an   Object."')), documentation('ShapeAlteration', string('"The act of changing the shape of an   Object."')), [], [], 'Merge', 'PROCESSES', 5665, 'Anonymous', on).
mooCache(instance(H7, 'ShapeAlteration')and patient(H7, I7)=>exists(J7, instance(J7, 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7)))), (entails(patient(H7, I7)and not instance(J7, 'ShapeProperty'), not instance(H7, 'ShapeAlteration'))and entails(instance(H7, 'ShapeAlteration')and not instance(J7, 'ShapeProperty'), not patient(H7, I7))and entails((instance(H7, 'ShapeAlteration')and patient(H7, I7))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), instance(J7, 'ShapeProperty')))and (entails(patient(H7, I7)and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7)), not instance(H7, 'ShapeAlteration'))and entails(instance(H7, 'ShapeAlteration')and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7)), not patient(H7, I7))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7)))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7))))and (entails(patient(H7, I7)and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7)), not instance(H7, 'ShapeAlteration'))and entails(instance(H7, 'ShapeAlteration')and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7)), not patient(H7, I7))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7)))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7))))and (entails(patient(H7, I7)and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7)), not instance(H7, 'ShapeAlteration'))and entails(instance(H7, 'ShapeAlteration')and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7)), not patient(H7, I7))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7)))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, J7))))and entails(patient(H7, I7)and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7)), not instance(H7, 'ShapeAlteration'))and entails(instance(H7, 'ShapeAlteration')and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7)), not patient(H7, I7))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7)))and entails(((instance(H7, 'ShapeAlteration')and patient(H7, I7))and not holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, J7)))and'$existential'(J7, '?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))), holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, J7))), [domainV(J7, ['$instanceof':'ShapeProperty', attribute:2]), domainV(I7, [attribute:1, patient:2]), domainV(H7, ['$instanceof':'ShapeAlteration', 'WhenFn':1, patient:1]), domainV(_G3506, []), forall(H7), forall(I7), replaceConsVar(J7, '$existential'('?PROPERTY', instance('?PROPERTY', 'ShapeProperty')and (holdsDuring('ImmediatePastFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))or holdsDuring('ImmediatePastFn'('WhenFn'(H7)), not attribute(I7, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(H7)), attribute(I7, '?PROPERTY')))))], ['ALT'=H7, 'OBJ'=I7, 'PROPERTY'=J7], 'Merge', 'PROCESSES', 5667, 'Anonymous', on).
mooCache(subclass('SurfaceAlteration', 'Process'), subclass('SurfaceAlteration', 'Process'), [], [], 'Merge', 'PROCESSES', 5669, 'Anonymous', on).
mooCache(documentation('SurfaceAlteration', string('"The act of changing the appearance of the   surface of an Object."')), documentation('SurfaceAlteration', string('"The act of changing the appearance of the   surface of an Object."')), [], [], 'Merge', 'PROCESSES', 5671, 'Anonymous', on).
mooCache(instance(G13, 'SurfaceAlteration')and patient(G13, H13)=>exists(I13, exists(J13, superficialPart(J13, H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute(J13, I13))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute(J13, I13)))), (entails((instance(G13, 'SurfaceAlteration')and patient(G13, H13))and'$existential'(J13, '?PART', superficialPart('?PART', H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute('?PART', I13))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute('?PART', I13))), superficialPart(J13, H13))and entails(not superficialPart(J13, H13)and patient(G13, H13), not instance(G13, 'SurfaceAlteration'))and entails(not superficialPart(J13, H13)and instance(G13, 'SurfaceAlteration'), not patient(G13, H13)))and (entails(((instance(G13, 'SurfaceAlteration')and patient(G13, H13))and'$existential'(I13, '?PROPERTY', exists(J13, superficialPart(J13, H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute(J13, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute(J13, '?PROPERTY')))))and'$existential'(J13, '?PART', superficialPart('?PART', H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute('?PART', I13))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute('?PART', I13))), holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute(J13, I13)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute(J13, I13))and patient(G13, H13), not instance(G13, 'SurfaceAlteration'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute(J13, I13))and instance(G13, 'SurfaceAlteration'), not patient(G13, H13)))and entails(((instance(G13, 'SurfaceAlteration')and patient(G13, H13))and'$existential'(I13, '?PROPERTY', exists(J13, superficialPart(J13, H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute(J13, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute(J13, '?PROPERTY')))))and'$existential'(J13, '?PART', superficialPart('?PART', H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute('?PART', I13))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute('?PART', I13))), holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute(J13, I13)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute(J13, I13))and patient(G13, H13), not instance(G13, 'SurfaceAlteration'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute(J13, I13))and instance(G13, 'SurfaceAlteration'), not patient(G13, H13)), [domainV(J13, [attribute:1, superficialPart:1]), domainV(I13, [attribute:2]), domainV(H13, [patient:2, superficialPart:2]), domainV(G13, ['$instanceof':'SurfaceAlteration', 'WhenFn':1, patient:1]), domainV(_G16272, []), forall(G13), forall(H13), replaceConsVar(I13, '$existential'('?PROPERTY', exists(J13, superficialPart(J13, H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute(J13, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute(J13, '?PROPERTY'))))), replaceConsVar(J13, '$existential'('?PART', superficialPart('?PART', H13)and holdsDuring('ImmediatePastFn'('WhenFn'(G13)), attribute('?PART', I13))and holdsDuring('ImmediateFutureFn'('WhenFn'(G13)), not attribute('?PART', I13))))], ['ALT'=G13, 'OBJ'=H13, 'PART'=J13, 'PROPERTY'=I13], 'Merge', 'PROCESSES', 5673, 'Anonymous', on).
mooCache(subclass('Coloring', 'SurfaceAlteration'), subclass('Coloring', 'SurfaceAlteration'), [], [], 'Merge', 'PROCESSES', 5675, 'Anonymous', on).
mooCache(documentation('Coloring', string('"The subclass of SurfaceAlteration where a   ColorProperty of the patient is altered."')), documentation('Coloring', string('"The subclass of SurfaceAlteration where a   ColorProperty of the patient is altered."')), [], [], 'Merge', 'PROCESSES', 5677, 'Anonymous', on).
mooCache(instance(T17, 'Coloring')and patient(T17, U17)=>exists(V17, instance(V17, 'ColorProperty')and holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, V17))and holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, V17))), (entails((instance(T17, 'Coloring')and patient(T17, U17))and'$existential'(V17, '?PROPERTY', instance('?PROPERTY', 'ColorProperty')and holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, '?PROPERTY'))), instance(V17, 'ColorProperty'))and entails(not instance(V17, 'ColorProperty')and patient(T17, U17), not instance(T17, 'Coloring'))and entails(not instance(V17, 'ColorProperty')and instance(T17, 'Coloring'), not patient(T17, U17)))and (entails((instance(T17, 'Coloring')and patient(T17, U17))and'$existential'(V17, '?PROPERTY', instance('?PROPERTY', 'ColorProperty')and holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, '?PROPERTY'))), holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, V17)))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, V17))and patient(T17, U17), not instance(T17, 'Coloring'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, V17))and instance(T17, 'Coloring'), not patient(T17, U17)))and entails((instance(T17, 'Coloring')and patient(T17, U17))and'$existential'(V17, '?PROPERTY', instance('?PROPERTY', 'ColorProperty')and holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, '?PROPERTY'))), holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, V17)))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, V17))and patient(T17, U17), not instance(T17, 'Coloring'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, V17))and instance(T17, 'Coloring'), not patient(T17, U17)), [domainV(V17, ['$instanceof':'ColorProperty', attribute:2]), domainV(U17, [attribute:1, patient:2]), domainV(T17, ['$instanceof':'Coloring', 'WhenFn':1, patient:1]), domainV(_G14338, []), forall(T17), forall(U17), replaceConsVar(V17, '$existential'('?PROPERTY', instance('?PROPERTY', 'ColorProperty')and holdsDuring('ImmediatePastFn'('WhenFn'(T17)), attribute(U17, '?PROPERTY'))and holdsDuring('ImmediateFutureFn'('WhenFn'(T17)), not attribute(U17, '?PROPERTY'))))], ['COLORING'=T17, 'OBJ'=U17, 'PROPERTY'=V17], 'Merge', 'PROCESSES', 5679, 'Anonymous', on).
mooCache(subclass('Grooming', 'IntentionalProcess'), subclass('Grooming', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5681, 'Anonymous', on).
mooCache(documentation('Grooming', string('"The subclass of Process where parts of an   Organism are arranged in a socially pleasing manner.  Some examples are   shaving, brushing, combing, etc."')), documentation('Grooming', string('"The subclass of Process where parts of an   Organism are arranged in a socially pleasing manner.  Some examples are   shaving, brushing, combing, etc."')), [], [], 'Merge', 'PROCESSES', 5683, 'Anonymous', on).
mooCache(subclass('ContentDevelopment', 'IntentionalProcess'), subclass('ContentDevelopment', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5685, 'Anonymous', on).
mooCache(documentation('ContentDevelopment', string('"A subclass of IntentionalProcess in   which content is modified, its form is altered or it is created anew."')), documentation('ContentDevelopment', string('"A subclass of IntentionalProcess in   which content is modified, its form is altered or it is created anew."')), [], [], 'Merge', 'PROCESSES', 5687, 'Anonymous', on).
mooCache(subclass('Reading', 'ContentDevelopment'), subclass('Reading', 'ContentDevelopment'), [], [], 'Merge', 'PROCESSES', 5689, 'Anonymous', on).
mooCache(documentation('Reading', string('"A subclass of ContentDevelopment in which   content is converted from a written form into a spoken or mental representation."')), documentation('Reading', string('"A subclass of ContentDevelopment in which   content is converted from a written form into a spoken or mental representation."')), [], [], 'Merge', 'PROCESSES', 5691, 'Anonymous', on).
mooCache(subclass('Writing', 'ContentDevelopment'), subclass('Writing', 'ContentDevelopment'), [], [], 'Merge', 'PROCESSES', 5693, 'Anonymous', on).
mooCache(documentation('Writing', string('"A subclass of ContentDevelopment in which   content is expressed in a Language."')), documentation('Writing', string('"A subclass of ContentDevelopment in which   content is expressed in a Language."')), [], [], 'Merge', 'PROCESSES', 5695, 'Anonymous', on).
mooCache(subclass('Encoding', 'Writing'), subclass('Encoding', 'Writing'), [], [], 'Merge', 'PROCESSES', 5697, 'Anonymous', on).
mooCache(documentation('Encoding', string('"Converting a document or message into a formal   language or into a code that can be understood only by a relatively small   body of Agents.  Generally speaking, this hinders wide dissemination of   the content in the original document or message."')), documentation('Encoding', string('"Converting a document or message into a formal   language or into a code that can be understood only by a relatively small   body of Agents.  Generally speaking, this hinders wide dissemination of   the content in the original document or message."')), [], [], 'Merge', 'PROCESSES', 5699, 'Anonymous', on).
mooCache(subclass('Decoding', 'Writing'), subclass('Decoding', 'Writing'), [], [], 'Merge', 'PROCESSES', 5701, 'Anonymous', on).
mooCache(disjoint('Decoding', 'Encoding'), disjoint('Decoding', 'Encoding'), [], [], 'Merge', 'PROCESSES', 5703, 'Anonymous', on).
mooCache(documentation('Decoding', string('"Converting a document or message that has previously   been encoded (see Encoding) into a Language that can be understood by a   relatively large number of speakers."')), documentation('Decoding', string('"Converting a document or message that has previously   been encoded (see Encoding) into a Language that can be understood by a   relatively large number of speakers."')), [], [], 'Merge', 'PROCESSES', 5705, 'Anonymous', on).
mooCache(instance(Y32, 'Decoding')and patient(Y32, Z32)=>exists(A33, exists(B33, exists(C33, containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance(C33, 'Encoding')and patient(C33, B33))))), (entails(((instance(Y32, 'Decoding')and patient(Y32, Z32))and'$existential'(B33, '?DOC2', exists(C33, containsInformation('?DOC2', D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance(C33, 'Encoding'))and holdsDuring(A33, patient(C33, '?DOC2')))))and'$existential'(C33, '?ENCODE', containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance('?ENCODE', 'Encoding'))and holdsDuring(A33, patient('?ENCODE', B33))), containsInformation(B33, D33))and entails(not containsInformation(B33, D33)and patient(Y32, Z32), not instance(Y32, 'Decoding'))and entails(not containsInformation(B33, D33)and instance(Y32, 'Decoding'), not patient(Y32, Z32)))and (entails(instance(Y32, 'Decoding')and patient(Y32, Z32), containsInformation(Z32, D33))and entails(not containsInformation(Z32, D33)and patient(Y32, Z32), not instance(Y32, 'Decoding'))and entails(not containsInformation(Z32, D33)and instance(Y32, 'Decoding'), not patient(Y32, Z32)))and (entails((((instance(Y32, 'Decoding')and patient(Y32, Z32))and'$existential'(A33, '?TIME', exists(B33, exists(C33, containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart('?TIME', 'PastFn'('WhenFn'(Y32)))and holdsDuring('?TIME', instance(C33, 'Encoding'))and holdsDuring('?TIME', patient(C33, B33))))))and'$existential'(B33, '?DOC2', exists(C33, containsInformation('?DOC2', D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance(C33, 'Encoding'))and holdsDuring(A33, patient(C33, '?DOC2')))))and'$existential'(C33, '?ENCODE', containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance('?ENCODE', 'Encoding'))and holdsDuring(A33, patient('?ENCODE', B33))), temporalPart(A33, 'PastFn'('WhenFn'(Y32))))and entails(not temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and patient(Y32, Z32), not instance(Y32, 'Decoding'))and entails(not temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and instance(Y32, 'Decoding'), not patient(Y32, Z32)))and (entails((((instance(Y32, 'Decoding')and patient(Y32, Z32))and'$existential'(A33, '?TIME', exists(B33, exists(C33, containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart('?TIME', 'PastFn'('WhenFn'(Y32)))and holdsDuring('?TIME', instance(C33, 'Encoding'))and holdsDuring('?TIME', patient(C33, B33))))))and'$existential'(B33, '?DOC2', exists(C33, containsInformation('?DOC2', D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance(C33, 'Encoding'))and holdsDuring(A33, patient(C33, '?DOC2')))))and'$existential'(C33, '?ENCODE', containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance('?ENCODE', 'Encoding'))and holdsDuring(A33, patient('?ENCODE', B33))), holdsDuring(A33, instance(C33, 'Encoding')))and entails(not holdsDuring(A33, instance(C33, 'Encoding'))and patient(Y32, Z32), not instance(Y32, 'Decoding'))and entails(not holdsDuring(A33, instance(C33, 'Encoding'))and instance(Y32, 'Decoding'), not patient(Y32, Z32)))and entails((((instance(Y32, 'Decoding')and patient(Y32, Z32))and'$existential'(A33, '?TIME', exists(B33, exists(C33, containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart('?TIME', 'PastFn'('WhenFn'(Y32)))and holdsDuring('?TIME', instance(C33, 'Encoding'))and holdsDuring('?TIME', patient(C33, B33))))))and'$existential'(B33, '?DOC2', exists(C33, containsInformation('?DOC2', D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance(C33, 'Encoding'))and holdsDuring(A33, patient(C33, '?DOC2')))))and'$existential'(C33, '?ENCODE', containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance('?ENCODE', 'Encoding'))and holdsDuring(A33, patient('?ENCODE', B33))), holdsDuring(A33, patient(C33, B33)))and entails(not holdsDuring(A33, patient(C33, B33))and patient(Y32, Z32), not instance(Y32, 'Decoding'))and entails(not holdsDuring(A33, patient(C33, B33))and instance(Y32, 'Decoding'), not patient(Y32, Z32)), [domainV(D33, [containsInformation:2]), domainV(C33, ['$instanceof':'Encoding', patient:1]), domainV(B33, [containsInformation:1, patient:2]), domainV(A33, [holdsDuring:1, temporalPart:1]), domainV(Z32, [containsInformation:1, patient:2]), domainV(Y32, ['$instanceof':'Decoding', 'WhenFn':1, patient:1]), domainV(_G2293, []), forall(Y32), forall(Z32), forall(D33), replaceConsVar(A33, '$existential'('?TIME', exists(B33, exists(C33, containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart('?TIME', 'PastFn'('WhenFn'(Y32)))and holdsDuring('?TIME', instance(C33, 'Encoding'))and holdsDuring('?TIME', patient(C33, B33)))))), replaceConsVar(B33, '$existential'('?DOC2', exists(C33, containsInformation('?DOC2', D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance(C33, 'Encoding'))and holdsDuring(A33, patient(C33, '?DOC2'))))), replaceConsVar(C33, '$existential'('?ENCODE', containsInformation(B33, D33)and containsInformation(Z32, D33)and temporalPart(A33, 'PastFn'('WhenFn'(Y32)))and holdsDuring(A33, instance('?ENCODE', 'Encoding'))and holdsDuring(A33, patient('?ENCODE', B33))))], ['DECODE'=Y32, 'DOC1'=Z32, 'ENCODE'=C33, 'DOC2'=B33, 'TIME'=A33, 'PROP'=D33], 'Merge', 'PROCESSES', 5707, 'Anonymous', on).
mooCache(subclass('Wetting', 'Process'), subclass('Wetting', 'Process'), [], [], 'Merge', 'PROCESSES', 5709, 'Anonymous', on).
mooCache(documentation('Wetting', string('"The Class of Processes where Water is added to an Object."')), documentation('Wetting', string('"The Class of Processes where Water is added to an Object."')), [], [], 'Merge', 'PROCESSES', 5711, 'Anonymous', on).
mooCache(instance(Y37, 'Wetting')and patient(Y37, Z37)=>holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Wet')or attribute(Z37, 'Damp')), entails(patient(Y37, Z37)and not holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Wet'))and not holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Damp')), not instance(Y37, 'Wetting'))and entails(instance(Y37, 'Wetting')and not holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Wet'))and not holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Damp')), not patient(Y37, Z37))and entails((instance(Y37, 'Wetting')and patient(Y37, Z37))and not holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Damp')), holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Wet')))and entails((instance(Y37, 'Wetting')and patient(Y37, Z37))and not holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Wet')), holdsDuring('ImmediateFutureFn'('WhenFn'(Y37)), attribute(Z37, 'Damp'))), [domainV(Z37, [attribute:1, patient:2]), domainV(Y37, ['$instanceof':'Wetting', 'WhenFn':1, patient:1]), domainV(_G8615, []), forall(Y37), forall(Z37)], ['WET'=Y37, 'OBJ'=Z37], 'Merge', 'PROCESSES', 5713, 'Anonymous', on).
mooCache(subclass('Drying', 'Process'), subclass('Drying', 'Process'), [], [], 'Merge', 'PROCESSES', 5715, 'Anonymous', on).
mooCache(documentation('Drying', string('"The Class of Processes where water is removed   from an Object."')), documentation('Drying', string('"The Class of Processes where water is removed   from an Object."')), [], [], 'Merge', 'PROCESSES', 5717, 'Anonymous', on).
mooCache(instance(W2, 'Drying')and patient(W2, X2)=>holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Anhydrous')or attribute(X2, 'Dry')), entails(patient(W2, X2)and not holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Anhydrous'))and not holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Dry')), not instance(W2, 'Drying'))and entails(instance(W2, 'Drying')and not holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Anhydrous'))and not holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Dry')), not patient(W2, X2))and entails((instance(W2, 'Drying')and patient(W2, X2))and not holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Dry')), holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Anhydrous')))and entails((instance(W2, 'Drying')and patient(W2, X2))and not holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Anhydrous')), holdsDuring('ImmediateFutureFn'('WhenFn'(W2)), attribute(X2, 'Dry'))), [domainV(X2, [attribute:1, patient:2]), domainV(W2, ['$instanceof':'Drying', 'WhenFn':1, patient:1]), domainV(_G8639, []), forall(W2), forall(X2)], ['DRY'=W2, 'OBJ'=X2], 'Merge', 'PROCESSES', 5719, 'Anonymous', on).
mooCache(subclass('Creation', 'Process'), subclass('Creation', 'Process'), [], [], 'Merge', 'PROCESSES', 5721, 'Anonymous', on).
mooCache(documentation('Creation', string('"The subclass of Process in which   something is created.  Note that the thing created is specified   with the result CaseRole."')), documentation('Creation', string('"The subclass of Process in which   something is created.  Note that the thing created is specified   with the result CaseRole."')), [], [], 'Merge', 'PROCESSES', 5723, 'Anonymous', on).
mooCache(instance(B6, 'Creation')=>exists(C6, result(B6, C6)), entails(not result(B6, C6), not instance(B6, 'Creation'))and entails(instance(B6, 'Creation')and'$existential'(C6, '?RESULT', result(B6, '?RESULT')), result(B6, C6)), [domainV(C6, [result:2]), domainV(B6, ['$instanceof':'Creation', result:1]), domainV(_G5232, []), forall(B6), replaceConsVar(C6, '$existential'('?RESULT', result(B6, '?RESULT')))], ['ACTION'=B6, 'RESULT'=C6], 'Merge', 'PROCESSES', 5725, 'Anonymous', on).
mooCache(instance(Q7, 'Creation')<=>exists(R7, patient(Q7, R7)and time(R7, 'ImmediateFutureFn'('WhenFn'(Q7)))and not time(R7, 'ImmediatePastFn'('WhenFn'(Q7)))), (entails(instance(Q7, 'Creation')and'$existential'(R7, '?PATIENT', patient(Q7, '?PATIENT')and time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(Q7)))and not time('?PATIENT', 'ImmediatePastFn'('WhenFn'(Q7)))), patient(Q7, R7))and entails(instance(Q7, 'Creation')and'$existential'(R7, '?PATIENT', patient(Q7, '?PATIENT')and time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(Q7)))and not time('?PATIENT', 'ImmediatePastFn'('WhenFn'(Q7)))), time(R7, 'ImmediateFutureFn'('WhenFn'(Q7))))and entails(instance(Q7, 'Creation'), not time(R7, 'ImmediatePastFn'('WhenFn'(Q7))))and entails(not patient(Q7, R7)or not time(R7, 'ImmediateFutureFn'('WhenFn'(Q7)))or time(R7, 'ImmediatePastFn'('WhenFn'(Q7))), not instance(Q7, 'Creation')))and entails(patient(Q7, R7)and time(R7, 'ImmediateFutureFn'('WhenFn'(Q7)))and not time(R7, 'ImmediatePastFn'('WhenFn'(Q7))), instance(Q7, 'Creation'))and entails(not instance(Q7, 'Creation')and time(R7, 'ImmediateFutureFn'('WhenFn'(Q7)))and not time(R7, 'ImmediatePastFn'('WhenFn'(Q7))), not patient(Q7, R7))and entails(not instance(Q7, 'Creation')and patient(Q7, R7)and not time(R7, 'ImmediatePastFn'('WhenFn'(Q7))), not time(R7, 'ImmediateFutureFn'('WhenFn'(Q7))))and entails((not instance(Q7, 'Creation')and patient(Q7, R7)and time(R7, 'ImmediateFutureFn'('WhenFn'(Q7))))and'$existential'(R7, '?PATIENT', patient(Q7, '?PATIENT')and time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(Q7)))and not time('?PATIENT', 'ImmediatePastFn'('WhenFn'(Q7)))), time(R7, 'ImmediatePastFn'('WhenFn'(Q7)))), [domainV(R7, [patient:2, time:1]), domainV(Q7, ['$instanceof':'Creation', 'WhenFn':1, patient:1]), domainV(_G11710, []), forall(Q7), replaceConsVar(R7, '$existential'('?PATIENT', patient(Q7, '?PATIENT')and time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(Q7)))and not time('?PATIENT', 'ImmediatePastFn'('WhenFn'(Q7))))), forall(R7)], ['PROCESS'=Q7, 'PATIENT'=R7], 'Merge', 'PROCESSES', 5727, 'Anonymous', on).
mooCache(subclass('Making', 'Creation'), subclass('Making', 'Creation'), [], [], 'Merge', 'PROCESSES', 5729, 'Anonymous', on).
mooCache(relatedInternalConcept('Making', 'OccupationalProcess'), relatedInternalConcept('Making', 'OccupationalProcess'), [], [], 'Merge', 'PROCESSES', 5731, 'Anonymous', on).
mooCache(documentation('Making', string('"The subclass of Creation in which an individual   Artifact or a type of Artifact is made."')), documentation('Making', string('"The subclass of Creation in which an individual   Artifact or a type of Artifact is made."')), [], [], 'Merge', 'PROCESSES', 5733, 'Anonymous', on).
mooCache(instance(D12, 'Making')=>exists(E12, instance(E12, 'Artifact')and result(D12, E12)), (entails(not instance(E12, 'Artifact'), not instance(D12, 'Making'))and entails(instance(D12, 'Making')and'$existential'(E12, '?ARTIFACT', instance('?ARTIFACT', 'Artifact')and result(D12, '?ARTIFACT')), instance(E12, 'Artifact')))and entails(not result(D12, E12), not instance(D12, 'Making'))and entails(instance(D12, 'Making')and'$existential'(E12, '?ARTIFACT', instance('?ARTIFACT', 'Artifact')and result(D12, '?ARTIFACT')), result(D12, E12)), [domainV(E12, ['$instanceof':'Artifact', result:2]), domainV(D12, ['$instanceof':'Making', result:1]), domainV(_G6708, []), forall(D12), replaceConsVar(E12, '$existential'('?ARTIFACT', instance('?ARTIFACT', 'Artifact')and result(D12, '?ARTIFACT')))], ['MAKE'=D12, 'ARTIFACT'=E12], 'Merge', 'PROCESSES', 5735, 'Anonymous', on).
mooCache(subclass('Constructing', 'Making'), subclass('Constructing', 'Making'), [], [], 'Merge', 'PROCESSES', 5737, 'Anonymous', on).
mooCache(documentation('Constructing', string('"The subclass of Making in which a   StationaryArtifact is built."')), documentation('Constructing', string('"The subclass of Making in which a   StationaryArtifact is built."')), [], [], 'Merge', 'PROCESSES', 5739, 'Anonymous', on).
mooCache(exists(I15, instance(I15, 'Constructing')and result(I15, J15))<=>instance(J15, 'StationaryArtifact'), (entails(instance(I15, 'Constructing')and result(I15, J15), instance(J15, 'StationaryArtifact'))and entails(not instance(J15, 'StationaryArtifact')and result(I15, J15), not instance(I15, 'Constructing'))and entails(not instance(J15, 'StationaryArtifact')and instance(I15, 'Constructing'), not result(I15, J15)))and entails(instance(J15, 'StationaryArtifact')and'$existential'(I15, '?BUILD', instance('?BUILD', 'Constructing')and result('?BUILD', J15)), instance(I15, 'Constructing'))and entails(instance(J15, 'StationaryArtifact')and'$existential'(I15, '?BUILD', instance('?BUILD', 'Constructing')and result('?BUILD', J15)), result(I15, J15))and entails(not instance(I15, 'Constructing')or not result(I15, J15), not instance(J15, 'StationaryArtifact')), [domainV(J15, ['$instanceof':'StationaryArtifact', result:2]), domainV(I15, ['$instanceof':'Constructing', result:1]), domainV(_G7158, []), forall(J15), replaceConsVar(I15, '$existential'('?BUILD', instance('?BUILD', 'Constructing')and result('?BUILD', J15))), forall(I15)], ['BUILD'=I15, 'ARTIFACT'=J15], 'Merge', 'PROCESSES', 5741, 'Anonymous', on).
mooCache(subclass('Manufacture', 'Making'), subclass('Manufacture', 'Making'), [], [], 'Merge', 'PROCESSES', 5743, 'Anonymous', on).
mooCache(documentation('Manufacture', string('"The Making of Artifacts on a mass   scale."')), documentation('Manufacture', string('"The Making of Artifacts on a mass   scale."')), [], [], 'Merge', 'PROCESSES', 5745, 'Anonymous', on).
mooCache(subclass('Publication', 'Manufacture'), subclass('Publication', 'Manufacture'), [], [], 'Merge', 'PROCESSES', 5747, 'Anonymous', on).
mooCache(documentation('Publication', string('"The Manufacture of Texts.  Note that   this concept does not imply that the Texts are disseminated.  Such   dissemination, when it occurs, is an instance of Communication."')), documentation('Publication', string('"The Manufacture of Texts.  Note that   this concept does not imply that the Texts are disseminated.  Such   dissemination, when it occurs, is an instance of Communication."')), [], [], 'Merge', 'PROCESSES', 5749, 'Anonymous', on).
mooCache(instance(J20, 'Publication')and patient(J20, K20)=>subclass(K20, 'Text'), entails(instance(J20, 'Publication')and patient(J20, K20), subclass(K20, 'Text'))and entails(not subclass(K20, 'Text')and patient(J20, K20), not instance(J20, 'Publication'))and entails(not subclass(K20, 'Text')and instance(J20, 'Publication'), not patient(J20, K20)), [domainV(K20, [patient:2, subclass:1]), domainV(J20, ['$instanceof':'Publication', patient:1]), domainV(_G5336, []), forall(J20), forall(K20)], ['PUB'=J20, 'TEXT'=K20], 'Merge', 'PROCESSES', 5751, 'Anonymous', on).
mooCache(subclass('Cooking', 'Making'), subclass('Cooking', 'Making'), [], [], 'Merge', 'PROCESSES', 5753, 'Anonymous', on).
mooCache(documentation('Cooking', string('"The Making of an instance of Food."')), documentation('Cooking', string('"The Making of an instance of Food."')), [], [], 'Merge', 'PROCESSES', 5755, 'Anonymous', on).
mooCache(subclass('Destruction', 'Process'), subclass('Destruction', 'Process'), [], [], 'Merge', 'PROCESSES', 5757, 'Anonymous', on).
mooCache(documentation('Destruction', string('"The subclass of Process in which   the patient (or an essential element of the patient) is destroyed."')), documentation('Destruction', string('"The subclass of Process in which   the patient (or an essential element of the patient) is destroyed."')), [], [], 'Merge', 'PROCESSES', 5759, 'Anonymous', on).
mooCache(instance(N25, 'Destruction')<=>exists(O25, patient(N25, O25)and time(O25, 'ImmediatePastFn'('WhenFn'(N25)))and not time(O25, 'ImmediateFutureFn'('WhenFn'(N25)))), (entails(instance(N25, 'Destruction')and'$existential'(O25, '?PATIENT', patient(N25, '?PATIENT')and time('?PATIENT', 'ImmediatePastFn'('WhenFn'(N25)))and not time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(N25)))), patient(N25, O25))and entails(instance(N25, 'Destruction')and'$existential'(O25, '?PATIENT', patient(N25, '?PATIENT')and time('?PATIENT', 'ImmediatePastFn'('WhenFn'(N25)))and not time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(N25)))), time(O25, 'ImmediatePastFn'('WhenFn'(N25))))and entails(instance(N25, 'Destruction'), not time(O25, 'ImmediateFutureFn'('WhenFn'(N25))))and entails(not patient(N25, O25)or not time(O25, 'ImmediatePastFn'('WhenFn'(N25)))or time(O25, 'ImmediateFutureFn'('WhenFn'(N25))), not instance(N25, 'Destruction')))and entails(patient(N25, O25)and time(O25, 'ImmediatePastFn'('WhenFn'(N25)))and not time(O25, 'ImmediateFutureFn'('WhenFn'(N25))), instance(N25, 'Destruction'))and entails(not instance(N25, 'Destruction')and time(O25, 'ImmediatePastFn'('WhenFn'(N25)))and not time(O25, 'ImmediateFutureFn'('WhenFn'(N25))), not patient(N25, O25))and entails(not instance(N25, 'Destruction')and patient(N25, O25)and not time(O25, 'ImmediateFutureFn'('WhenFn'(N25))), not time(O25, 'ImmediatePastFn'('WhenFn'(N25))))and entails((not instance(N25, 'Destruction')and patient(N25, O25)and time(O25, 'ImmediatePastFn'('WhenFn'(N25))))and'$existential'(O25, '?PATIENT', patient(N25, '?PATIENT')and time('?PATIENT', 'ImmediatePastFn'('WhenFn'(N25)))and not time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(N25)))), time(O25, 'ImmediateFutureFn'('WhenFn'(N25)))), [domainV(O25, [patient:2, time:1]), domainV(N25, ['$instanceof':'Destruction', 'WhenFn':1, patient:1]), domainV(_G11728, []), forall(N25), replaceConsVar(O25, '$existential'('?PATIENT', patient(N25, '?PATIENT')and time('?PATIENT', 'ImmediatePastFn'('WhenFn'(N25)))and not time('?PATIENT', 'ImmediateFutureFn'('WhenFn'(N25))))), forall(O25)], ['PROCESS'=N25, 'PATIENT'=O25], 'Merge', 'PROCESSES', 5761, 'Anonymous', on).
mooCache(subclass('Killing', 'Destruction'), subclass('Killing', 'Destruction'), [], [], 'Merge', 'PROCESSES', 5763, 'Anonymous', on).
mooCache(documentation('Killing', string('"The subclass of Destruction in which the   death of an Organism is caused by an Organism.  Note that in cases   of suicide the Organism would be the same in both cases."')), documentation('Killing', string('"The subclass of Destruction in which the   death of an Organism is caused by an Organism.  Note that in cases   of suicide the Organism would be the same in both cases."')), [], [], 'Merge', 'PROCESSES', 5765, 'Anonymous', on).
mooCache(instance(D29, 'Killing')and agent(D29, E29)and patient(D29, F29)=>instance(E29, 'Organism')and instance(F29, 'Organism'), (entails(instance(D29, 'Killing')and agent(D29, E29)and patient(D29, F29), instance(E29, 'Organism'))and entails(not instance(E29, 'Organism')and agent(D29, E29)and patient(D29, F29), not instance(D29, 'Killing'))and entails(not instance(E29, 'Organism')and instance(D29, 'Killing')and patient(D29, F29), not agent(D29, E29))and entails(not instance(E29, 'Organism')and instance(D29, 'Killing')and agent(D29, E29), not patient(D29, F29)))and entails(instance(D29, 'Killing')and agent(D29, E29)and patient(D29, F29), instance(F29, 'Organism'))and entails(not instance(F29, 'Organism')and agent(D29, E29)and patient(D29, F29), not instance(D29, 'Killing'))and entails(not instance(F29, 'Organism')and instance(D29, 'Killing')and patient(D29, F29), not agent(D29, E29))and entails(not instance(F29, 'Organism')and instance(D29, 'Killing')and agent(D29, E29), not patient(D29, F29)), [domainV(F29, ['$instanceof':'Organism', patient:2]), domainV(E29, ['$instanceof':'Organism', agent:2]), domainV(D29, ['$instanceof':'Killing', agent:1, patient:1]), domainV(_G8106, []), forall(D29), forall(E29), forall(F29)], ['KILL'=D29, 'AGENT'=E29, 'PATIENT'=F29], 'Merge', 'PROCESSES', 5767, 'Anonymous', on).
mooCache(instance(X30, 'Killing')and patient(X30, Y30)=>holdsDuring('ImmediatePastFn'('WhenFn'(X30)), attribute(Y30, 'Living'))and holdsDuring('ImmediateFutureFn'('WhenFn'(X30)), attribute(Y30, 'Dead')), (entails(instance(X30, 'Killing')and patient(X30, Y30), holdsDuring('ImmediatePastFn'('WhenFn'(X30)), attribute(Y30, 'Living')))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(X30)), attribute(Y30, 'Living'))and patient(X30, Y30), not instance(X30, 'Killing'))and entails(not holdsDuring('ImmediatePastFn'('WhenFn'(X30)), attribute(Y30, 'Living'))and instance(X30, 'Killing'), not patient(X30, Y30)))and entails(instance(X30, 'Killing')and patient(X30, Y30), holdsDuring('ImmediateFutureFn'('WhenFn'(X30)), attribute(Y30, 'Dead')))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(X30)), attribute(Y30, 'Dead'))and patient(X30, Y30), not instance(X30, 'Killing'))and entails(not holdsDuring('ImmediateFutureFn'('WhenFn'(X30)), attribute(Y30, 'Dead'))and instance(X30, 'Killing'), not patient(X30, Y30)), [domainV(Y30, [attribute:1, patient:2]), domainV(X30, ['$instanceof':'Killing', 'WhenFn':1, patient:1]), domainV(_G10062, []), forall(X30), forall(Y30)], ['KILL'=X30, 'PATIENT'=Y30], 'Merge', 'PROCESSES', 5769, 'Anonymous', on).
mooCache(subclass('Searching', 'IntentionalProcess'), subclass('Searching', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5771, 'Anonymous', on).
mooCache(documentation('Searching', string('"Any Process where the aim is to find   something, whether it be information (i.e. a Proposition) or an   Object."')), documentation('Searching', string('"Any Process where the aim is to find   something, whether it be information (i.e. a Proposition) or an   Object."')), [], [], 'Merge', 'PROCESSES', 5773, 'Anonymous', on).
mooCache(instance(C34, 'Searching')and agent(C34, D34)and patient(C34, E34)=>inScopeOfInterest(D34, E34), entails(instance(C34, 'Searching')and agent(C34, D34)and patient(C34, E34), inScopeOfInterest(D34, E34))and entails(not inScopeOfInterest(D34, E34)and agent(C34, D34)and patient(C34, E34), not instance(C34, 'Searching'))and entails(not inScopeOfInterest(D34, E34)and instance(C34, 'Searching')and patient(C34, E34), not agent(C34, D34))and entails(not inScopeOfInterest(D34, E34)and instance(C34, 'Searching')and agent(C34, D34), not patient(C34, E34)), [domainV(E34, [inScopeOfInterest:2, patient:2]), domainV(D34, [agent:2, inScopeOfInterest:1]), domainV(C34, ['$instanceof':'Searching', agent:1, patient:1]), domainV(_G7064, []), forall(C34), forall(D34), forall(E34)], ['SEARCH'=C34, 'AGENT'=D34, 'ENTITY'=E34], 'Merge', 'PROCESSES', 5775, 'Anonymous', on).
mooCache(subclass('Pursuing', 'Searching'), subclass('Pursuing', 'Searching'), [], [], 'Merge', 'PROCESSES', 5777, 'Anonymous', on).
mooCache(documentation('Pursuing', string('"The subclass of Searching where the thing   sought is an Object.  Some examples would be hunting, shopping,   trawling, and stalking."')), documentation('Pursuing', string('"The subclass of Searching where the thing   sought is an Object.  Some examples would be hunting, shopping,   trawling, and stalking."')), [], [], 'Merge', 'PROCESSES', 5779, 'Anonymous', on).
mooCache(instance(F37, 'Pursuing')and agent(F37, G37)and patient(F37, H37)=>wants(G37, H37), entails(instance(F37, 'Pursuing')and agent(F37, G37)and patient(F37, H37), wants(G37, H37))and entails(not wants(G37, H37)and agent(F37, G37)and patient(F37, H37), not instance(F37, 'Pursuing'))and entails(not wants(G37, H37)and instance(F37, 'Pursuing')and patient(F37, H37), not agent(F37, G37))and entails(not wants(G37, H37)and instance(F37, 'Pursuing')and agent(F37, G37), not patient(F37, H37)), [domainV(H37, [patient:2, wants:2]), domainV(G37, [agent:2, wants:1]), domainV(F37, ['$instanceof':'Pursuing', agent:1, patient:1]), domainV(_G6950, []), forall(F37), forall(G37), forall(H37)], ['PURSUE'=F37, 'AGENT'=G37, 'OBJ'=H37], 'Merge', 'PROCESSES', 5781, 'Anonymous', on).
mooCache(subclass('Investigating', 'Searching'), subclass('Investigating', 'Searching'), [], [], 'Merge', 'PROCESSES', 5783, 'Anonymous', on).
mooCache(documentation('Investigating', string('"The subclass of Searching where the   thing sought is a piece of information (i.e. a Proposition denoted by   a Formula)."')), documentation('Investigating', string('"The subclass of Searching where the   thing sought is a piece of information (i.e. a Proposition denoted by   a Formula)."')), [], [], 'Merge', 'PROCESSES', 5785, 'Anonymous', on).
mooCache(instance(U1, 'Investigating')and patient(U1, V1)=>instance(V1, 'Formula'), entails(instance(U1, 'Investigating')and patient(U1, V1), instance(V1, 'Formula'))and entails(not instance(V1, 'Formula')and patient(U1, V1), not instance(U1, 'Investigating'))and entails(not instance(V1, 'Formula')and instance(U1, 'Investigating'), not patient(U1, V1)), [domainV(V1, ['$instanceof':'Formula', patient:2]), domainV(U1, ['$instanceof':'Investigating', patient:1]), domainV(_G5433, []), forall(U1), forall(V1)], ['INVESTIGATE'=U1, 'PROP'=V1], 'Merge', 'PROCESSES', 5787, 'Anonymous', on).
mooCache(instance(C3, 'Investigating')and agent(C3, D3)and patient(C3, E3)=>holdsDuring('WhenFn'(C3), not knows(D3, E3)), entails(instance(C3, 'Investigating')and agent(C3, D3)and patient(C3, E3), holdsDuring('WhenFn'(C3), not knows(D3, E3)))and entails(not holdsDuring('WhenFn'(C3), not knows(D3, E3))and agent(C3, D3)and patient(C3, E3), not instance(C3, 'Investigating'))and entails(not holdsDuring('WhenFn'(C3), not knows(D3, E3))and instance(C3, 'Investigating')and patient(C3, E3), not agent(C3, D3))and entails(not holdsDuring('WhenFn'(C3), not knows(D3, E3))and instance(C3, 'Investigating')and agent(C3, D3), not patient(C3, E3)), [domainV(E3, [knows:2, patient:2]), domainV(D3, [agent:2, knows:1]), domainV(C3, ['$instanceof':'Investigating', 'WhenFn':1, agent:1, patient:1]), domainV(_G8689, []), forall(C3), forall(D3), forall(E3)], ['INVESTIGATE'=C3, 'AGENT'=D3, 'PROP'=E3], 'Merge', 'PROCESSES', 5789, 'Anonymous', on).
mooCache(subclass('SocialInteraction', 'IntentionalProcess'), subclass('SocialInteraction', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5791, 'Anonymous', on).
mooCache(documentation('SocialInteraction', string('"The subclass of   IntentionalProcess that involves interactions between   CognitiveAgents."')), documentation('SocialInteraction', string('"The subclass of   IntentionalProcess that involves interactions between   CognitiveAgents."')), [], [], 'Merge', 'PROCESSES', 5793, 'Anonymous', on).
mooCache(instance(O6, 'SocialInteraction')=>exists(P6, exists(Q6, agent(O6, Q6)and agent(O6, P6)and not equal(Q6, P6))), (entails(not agent(O6, Q6), not instance(O6, 'SocialInteraction'))and entails(instance(O6, 'SocialInteraction')and'$existential'(Q6, '?AGENT1', agent(O6, '?AGENT1')and agent(O6, P6)and not equal('?AGENT1', P6)), agent(O6, Q6)))and (entails(not agent(O6, P6), not instance(O6, 'SocialInteraction'))and entails((instance(O6, 'SocialInteraction')and'$existential'(P6, '?AGENT2', exists(Q6, agent(O6, Q6)and agent(O6, '?AGENT2')and not equal(Q6, '?AGENT2'))))and'$existential'(Q6, '?AGENT1', agent(O6, '?AGENT1')and agent(O6, P6)and not equal('?AGENT1', P6)), agent(O6, P6)))and entails(equal(Q6, P6), not instance(O6, 'SocialInteraction'))and entails(instance(O6, 'SocialInteraction'), not equal(Q6, P6)), [domainV(Q6, [agent:2]), domainV(P6, [agent:2]), domainV(O6, ['$instanceof':'SocialInteraction', agent:1]), domainV(_G10679, []), forall(O6), replaceConsVar(P6, '$existential'('?AGENT2', exists(Q6, agent(O6, Q6)and agent(O6, '?AGENT2')and not equal(Q6, '?AGENT2')))), replaceConsVar(Q6, '$existential'('?AGENT1', agent(O6, '?AGENT1')and agent(O6, P6)and not equal('?AGENT1', P6)))], ['INTERACTION'=O6, 'AGENT1'=Q6, 'AGENT2'=P6], 'Merge', 'PROCESSES', 5795, 'Anonymous', on).
mooCache(subclass('Pretending', 'SocialInteraction'), subclass('Pretending', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5797, 'Anonymous', on).
mooCache(documentation('Pretending', string('"Any SocialInteraction where a   CognitiveAgent or Group of CognitiveAgents attempts to make   another CognitiveAgent or Group of CognitiveAgents believe   something that is false.  This covers deceit, affectation,   impersonation, and entertainment productions, to give just a few   examples."')), documentation('Pretending', string('"Any SocialInteraction where a   CognitiveAgent or Group of CognitiveAgents attempts to make   another CognitiveAgent or Group of CognitiveAgents believe   something that is false.  This covers deceit, affectation,   impersonation, and entertainment productions, to give just a few   examples."')), [], [], 'Merge', 'PROCESSES', 5799, 'Anonymous', on).
mooCache(instance(A10, 'Pretending')=>exists(B10, exists(C10, hasPurpose(A10, believes(C10, B10))and true(B10)and true('True'))), (entails(not hasPurpose(A10, believes(C10, B10)), not instance(A10, 'Pretending'))and entails((instance(A10, 'Pretending')and'$existential'(B10, '?PROP', exists(C10, hasPurpose(A10, believes(C10, '?PROP'))and true('?PROP')and true('True'))))and'$existential'(C10, '?PERSON', hasPurpose(A10, believes('?PERSON', B10))and true(B10)and true('True')), hasPurpose(A10, believes(C10, B10))))and (entails(not true(B10), not instance(A10, 'Pretending'))and entails((instance(A10, 'Pretending')and'$existential'(B10, '?PROP', exists(C10, hasPurpose(A10, believes(C10, '?PROP'))and true('?PROP')and true('True'))))and'$existential'(C10, '?PERSON', hasPurpose(A10, believes('?PERSON', B10))and true(B10)and true('True')), true(B10)))and entails(not true('True'), not instance(A10, 'Pretending'))and entails(instance(A10, 'Pretending'), true('True')), [domainV(C10, [believes:1]), domainV(B10, [believes:2, true:1]), domainV(A10, ['$instanceof':'Pretending', hasPurpose:1]), domainV(_G9098, []), forall(A10), replaceConsVar(B10, '$existential'('?PROP', exists(C10, hasPurpose(A10, believes(C10, '?PROP'))and true('?PROP')and true('True')))), replaceConsVar(C10, '$existential'('?PERSON', hasPurpose(A10, believes('?PERSON', B10))and true(B10)and true('True')))], ['PRETEND'=A10, 'PERSON'=C10, 'PROP'=B10], 'Merge', 'PROCESSES', 5801, 'Anonymous', on).
mooCache(subclass('Communication', 'SocialInteraction'), subclass('Communication', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5803, 'Anonymous', on).
mooCache(documentation('Communication', string('"A SocialInteraction that involves   the transfer of information between two or more CognitiveAgents   via a ContentBearingObject."')), documentation('Communication', string('"A SocialInteraction that involves   the transfer of information between two or more CognitiveAgents   via a ContentBearingObject."')), [], [], 'Merge', 'PROCESSES', 5805, 'Anonymous', on).
mooCache(instance(F13, 'Communication')=>exists(G13, instance(G13, 'ContentBearingObject')and patient(F13, G13)), (entails(not instance(G13, 'ContentBearingObject'), not instance(F13, 'Communication'))and entails(instance(F13, 'Communication')and'$existential'(G13, '?OBJ', instance('?OBJ', 'ContentBearingObject')and patient(F13, '?OBJ')), instance(G13, 'ContentBearingObject')))and entails(not patient(F13, G13), not instance(F13, 'Communication'))and entails(instance(F13, 'Communication')and'$existential'(G13, '?OBJ', instance('?OBJ', 'ContentBearingObject')and patient(F13, '?OBJ')), patient(F13, G13)), [domainV(G13, ['$instanceof':'ContentBearingObject', patient:2]), domainV(F13, ['$instanceof':'Communication', patient:1]), domainV(_G6762, []), forall(F13), replaceConsVar(G13, '$existential'('?OBJ', instance('?OBJ', 'ContentBearingObject')and patient(F13, '?OBJ')))], ['ACTION'=F13, 'OBJ'=G13], 'Merge', 'PROCESSES', 5807, 'Anonymous', on).
mooCache(subclass('Disseminating', 'Communication'), subclass('Disseminating', 'Communication'), [], [], 'Merge', 'PROCESSES', 5809, 'Anonymous', on).
mooCache(documentation('Disseminating', string('"Any Communication that involves a   single source and many destinations.  This covers the release   of a published book, broadcasting, a theatrical performance, giving   orders to assembled troops, delivering a public lecture, etc."')), documentation('Disseminating', string('"Any Communication that involves a   single source and many destinations.  This covers the release   of a published book, broadcasting, a theatrical performance, giving   orders to assembled troops, delivering a public lecture, etc."')), [], [], 'Merge', 'PROCESSES', 5811, 'Anonymous', on).
mooCache(subclass('Stating', 'Communication'), subclass('Stating', 'Communication'), [], [], 'Merge', 'PROCESSES', 5813, 'Anonymous', on).
mooCache(documentation('Stating', string('"Instances of this Class commit a sender to some truth.   Example: John concluded that Peter was not present, and predicted that he would   arrive soon."')), documentation('Stating', string('"Instances of this Class commit a sender to some truth.   Example: John concluded that Peter was not present, and predicted that he would   arrive soon."')), [], [], 'Merge', 'PROCESSES', 5815, 'Anonymous', on).
mooCache(subclass('Directing', 'Communication'), subclass('Directing', 'Communication'), [], [], 'Merge', 'PROCESSES', 5817, 'Anonymous', on).
mooCache(documentation('Directing', string('"Instances of this Class urge some further action   among the receivers.  Example: The 5th Battalion requested air support from   the 3rd Bomber Group."')), documentation('Directing', string('"Instances of this Class urge some further action   among the receivers.  Example: The 5th Battalion requested air support from   the 3rd Bomber Group."')), [], [], 'Merge', 'PROCESSES', 5819, 'Anonymous', on).
mooCache(subclass('Ordering', 'Directing'), subclass('Ordering', 'Directing'), [], [], 'Merge', 'PROCESSES', 5821, 'Anonymous', on).
mooCache(documentation('Ordering', string('"A Directing in which the receiver is   commanded to realize the content of a ContentBearingObject.  Orders   are injunctions, the disobedience of which involves sanctions, or   which express an obligation upon the part of the orderee."')), documentation('Ordering', string('"A Directing in which the receiver is   commanded to realize the content of a ContentBearingObject.  Orders   are injunctions, the disobedience of which involves sanctions, or   which express an obligation upon the part of the orderee."')), [], [], 'Merge', 'PROCESSES', 5823, 'Anonymous', on).
mooCache(instance(H21, 'Ordering')and patient(H21, I21)=>modalProperty(I21, 'Obligation'), entails(instance(H21, 'Ordering')and patient(H21, I21), modalProperty(I21, 'Obligation'))and entails(not modalProperty(I21, 'Obligation')and patient(H21, I21), not instance(H21, 'Ordering'))and entails(not modalProperty(I21, 'Obligation')and instance(H21, 'Ordering'), not patient(H21, I21)), [domainV(I21, [modalProperty:1, patient:2]), domainV(H21, ['$instanceof':'Ordering', patient:1]), domainV(_G5444, []), forall(H21), forall(I21)], ['ORDER'=H21, 'FORMULA'=I21], 'Merge', 'PROCESSES', 5825, 'Anonymous', on).
mooCache(subclass('Requesting', 'Directing'), subclass('Requesting', 'Directing'), [], [], 'Merge', 'PROCESSES', 5827, 'Anonymous', on).
mooCache(documentation('Requesting', string('"A request expresses a desire by the agent of the   request that the destination of the request perform some future action."')), documentation('Requesting', string('"A request expresses a desire by the agent of the   request that the destination of the request perform some future action."')), [], [], 'Merge', 'PROCESSES', 5829, 'Anonymous', on).
mooCache(subclass('Questioning', 'Directing'), subclass('Questioning', 'Directing'), [], [], 'Merge', 'PROCESSES', 5831, 'Anonymous', on).
mooCache(documentation('Questioning', string('"A request for information."')), documentation('Questioning', string('"A request for information."')), [], [], 'Merge', 'PROCESSES', 5833, 'Anonymous', on).
mooCache(subclass('Committing', 'Communication'), subclass('Committing', 'Communication'), [], [], 'Merge', 'PROCESSES', 5835, 'Anonymous', on).
mooCache(documentation('Committing', string('"Instances of this Class commit the sender to some   future course. Example: Bob promised Susan that he would be home by 11pm."')), documentation('Committing', string('"Instances of this Class commit the sender to some   future course. Example: Bob promised Susan that he would be home by 11pm."')), [], [], 'Merge', 'PROCESSES', 5837, 'Anonymous', on).
mooCache(instance(N27, 'Committing')and patient(N27, O27)=>modalProperty(N27, 'Promise'), entails(instance(N27, 'Committing')and patient(N27, O27), modalProperty(N27, 'Promise'))and entails(not modalProperty(N27, 'Promise')and patient(N27, O27), not instance(N27, 'Committing'))and entails(not modalProperty(N27, 'Promise')and instance(N27, 'Committing'), not patient(N27, O27)), [domainV(O27, [patient:2]), domainV(N27, ['$instanceof':'Committing', modalProperty:1, patient:1]), domainV(_G5444, []), forall(N27), forall(O27)], ['COMMIT'=N27, 'FORMULA'=O27], 'Merge', 'PROCESSES', 5839, 'Anonymous', on).
mooCache(subclass('Expressing', 'Communication'), subclass('Expressing', 'Communication'), [], [], 'Merge', 'PROCESSES', 5841, 'Anonymous', on).
mooCache(documentation('Expressing', string('"Instances of this Class express a state of the sender.   Example: Jane thanked Barbara for the present she had given her."')), documentation('Expressing', string('"Instances of this Class express a state of the sender.   Example: Jane thanked Barbara for the present she had given her."')), [], [], 'Merge', 'PROCESSES', 5843, 'Anonymous', on).
mooCache(subclass('Declaring', 'Communication'), subclass('Declaring', 'Communication'), [], [], 'Merge', 'PROCESSES', 5845, 'Anonymous', on).
mooCache(documentation('Declaring', string('"The Class of Communications that effect an   institutional alteration when performed by competent authority.  Some   examples are nominating, marrying, and excommunicating."')), documentation('Declaring', string('"The Class of Communications that effect an   institutional alteration when performed by competent authority.  Some   examples are nominating, marrying, and excommunicating."')), [], [], 'Merge', 'PROCESSES', 5847, 'Anonymous', on).
mooCache(subclass('Cooperation', 'SocialInteraction'), subclass('Cooperation', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5849, 'Anonymous', on).
mooCache(documentation('Cooperation', string('"The subclass of SocialInteraction where   the participants involved work together for the achievement of a common   goal."')), documentation('Cooperation', string('"The subclass of SocialInteraction where   the participants involved work together for the achievement of a common   goal."')), [], [], 'Merge', 'PROCESSES', 5851, 'Anonymous', on).
mooCache(instance(Y33, 'Cooperation')=>exists(Z33, forall(A34, agent(Y33, A34)=>hasPurposeForAgent(Y33, Z33, A34))), entails(agent(Y33, A34)and not hasPurposeForAgent(Y33, Z33, A34), not instance(Y33, 'Cooperation'))and entails(instance(Y33, 'Cooperation')and not hasPurposeForAgent(Y33, Z33, A34), not agent(Y33, A34))and entails((instance(Y33, 'Cooperation')and agent(Y33, A34))and'$existential'(Z33, '?PURP', forall(A34, agent(Y33, A34)=>hasPurposeForAgent(Y33, '?PURP', A34))), hasPurposeForAgent(Y33, Z33, A34)), [domainV(A34, [agent:2, hasPurposeForAgent:3]), domainV(Z33, [hasPurposeForAgent:2]), domainV(Y33, ['$instanceof':'Cooperation', agent:1, hasPurposeForAgent:1]), domainV(_G9182, []), forall(Y33), replaceConsVar(Z33, '$existential'('?PURP', forall(A34, agent(Y33, A34)=>hasPurposeForAgent(Y33, '?PURP', A34)))), forall(A34)], ['COOPERATE'=Y33, 'PURP'=Z33, 'AGENT'=A34], 'Merge', 'PROCESSES', 5853, 'Anonymous', on).
mooCache(subclass('Meeting', 'SocialInteraction'), subclass('Meeting', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5855, 'Anonymous', on).
mooCache(documentation('Meeting', string('"The coming together of two or more   CognitiveAgents for the purpose of Communication.  This covers informal   meetings, e.g. visits with family members, and formal meetings, e.g. a board   of directors meeting."')), documentation('Meeting', string('"The coming together of two or more   CognitiveAgents for the purpose of Communication.  This covers informal   meetings, e.g. visits with family members, and formal meetings, e.g. a board   of directors meeting."')), [], [], 'Merge', 'PROCESSES', 5857, 'Anonymous', on).
mooCache(subclass('Competition', 'Process'), subclass('Competition', 'Process'), [], [], 'Merge', 'PROCESSES', 5859, 'Anonymous', on).
mooCache(documentation('Competition', string('"A Process where the agent and   patient are Agents who are trying to defeat one another.  The Agents   need not be CognitiveAgents.  For example, the struggle of plants for   space or sunlight, or of bacteria for food resources in some environment   would be instances of Competition."')), documentation('Competition', string('"A Process where the agent and   patient are Agents who are trying to defeat one another.  The Agents   need not be CognitiveAgents.  For example, the struggle of plants for   space or sunlight, or of bacteria for food resources in some environment   would be instances of Competition."')), [], [], 'Merge', 'PROCESSES', 5861, 'Anonymous', on).
mooCache(subclass('Contest', 'Competition'), subclass('Contest', 'Competition'), [], [], 'Merge', 'PROCESSES', 5863, 'Anonymous', on).
mooCache(subclass('Contest', 'SocialInteraction'), subclass('Contest', 'SocialInteraction'), [], [], 'Merge', 'PROCESSES', 5865, 'Anonymous', on).
mooCache(documentation('Contest', string('"A Competition in which the Agents are   CognitiveAgents.  More specifically, the Agents are aware at some   level that there is a prize at stake in the Competition."')), documentation('Contest', string('"A Competition in which the Agents are   CognitiveAgents.  More specifically, the Agents are aware at some   level that there is a prize at stake in the Competition."')), [], [], 'Merge', 'PROCESSES', 5867, 'Anonymous', on).
mooCache(instance(C4, 'Contest')=>exists(D4, exists(E4, exists(F4, exists(G4, agent(C4, G4)and agent(C4, F4)and hasPurposeForAgent(C4, E4, G4)and hasPurposeForAgent(C4, D4, F4)and not equal(G4, F4)and not equal(E4, D4))))), (entails(not agent(C4, G4), not instance(C4, 'Contest'))and entails(instance(C4, 'Contest')and'$existential'(G4, '?AGENT1', agent(C4, '?AGENT1')and agent(C4, F4)and hasPurposeForAgent(C4, E4, '?AGENT1')and hasPurposeForAgent(C4, D4, F4)and not equal('?AGENT1', F4)and not equal(E4, D4)), agent(C4, G4)))and (entails(not agent(C4, F4), not instance(C4, 'Contest'))and entails((instance(C4, 'Contest')and'$existential'(F4, '?AGENT2', exists(G4, agent(C4, G4)and agent(C4, '?AGENT2')and hasPurposeForAgent(C4, E4, G4)and hasPurposeForAgent(C4, D4, '?AGENT2')and not equal(G4, '?AGENT2')and not equal(E4, D4))))and'$existential'(G4, '?AGENT1', agent(C4, '?AGENT1')and agent(C4, F4)and hasPurposeForAgent(C4, E4, '?AGENT1')and hasPurposeForAgent(C4, D4, F4)and not equal('?AGENT1', F4)and not equal(E4, D4)), agent(C4, F4)))and (entails(not hasPurposeForAgent(C4, E4, G4), not instance(C4, 'Contest'))and entails(((instance(C4, 'Contest')and'$existential'(E4, '?PURP1', exists(F4, exists(G4, agent(C4, G4)and agent(C4, F4)and hasPurposeForAgent(C4, '?PURP1', G4)and hasPurposeForAgent(C4, D4, F4)and not equal(G4, F4)and not equal('?PURP1', D4)))))and'$existential'(F4, '?AGENT2', exists(G4, agent(C4, G4)and agent(C4, '?AGENT2')and hasPurposeForAgent(C4, E4, G4)and hasPurposeForAgent(C4, D4, '?AGENT2')and not equal(G4, '?AGENT2')and not equal(E4, D4))))and'$existential'(G4, '?AGENT1', agent(C4, '?AGENT1')and agent(C4, F4)and hasPurposeForAgent(C4, E4, '?AGENT1')and hasPurposeForAgent(C4, D4, F4)and not equal('?AGENT1', F4)and not equal(E4, D4)), hasPurposeForAgent(C4, E4, G4)))and (entails(not hasPurposeForAgent(C4, D4, F4), not instance(C4, 'Contest'))and entails((((instance(C4, 'Contest')and'$existential'(D4, '?PURP2', exists(E4, exists(F4, exists(G4, agent(C4, G4)and agent(C4, F4)and hasPurposeForAgent(C4, E4, G4)and hasPurposeForAgent(C4, '?PURP2', F4)and not equal(G4, F4)and not equal(E4, '?PURP2'))))))and'$existential'(E4, '?PURP1', exists(F4, exists(G4, agent(C4, G4)and agent(C4, F4)and hasPurposeForAgent(C4, '?PURP1', G4)and hasPurposeForAgent(C4, D4, F4)and not equal(G4, F4)and not equal('?PURP1', D4)))))and'$existential'(F4, '?AGENT2', exists(G4, agent(C4, G4)and agent(C4, '?AGENT2')and hasPurposeForAgent(C4, E4, G4)and hasPurposeForAgent(C4, D4, '?AGENT2')and not equal(G4, '?AGENT2')and not equal(E4, D4))))and'$existential'(G4, '?AGENT1', agent(C4, '?AGENT1')and agent(C4, F4)and hasPurposeForAgent(C4, E4, '?AGENT1')and hasPurposeForAgent(C4, D4, F4)and not equal('?AGENT1', F4)and not equal(E4, D4)), hasPurposeForAgent(C4, D4, F4)))and (entails(equal(G4, F4), not instance(C4, 'Contest'))and entails(instance(C4, 'Contest'), not equal(G4, F4)))and entails(equal(E4, D4), not instance(C4, 'Contest'))and entails(instance(C4, 'Contest'), not equal(E4, D4)), [domainV(G4, [agent:2, hasPurposeForAgent:3]), domainV(F4, [agent:2, hasPurposeForAgent:3]), domainV(E4, [hasPurposeForAgent:2]), domainV(D4, [hasPurposeForAgent:2]), domainV(C4, ['$instanceof':'Contest', agent:1, hasPurposeForAgent:1]), domainV(_G2144, []), forall(C4), replaceConsVar(D4, '$existential'('?PURP2', exists(E4, exists(F4, exists(G4, agent(C4, G4)and agent(C4, F4)and hasPurposeForAgent(C4, E4, G4)and hasPurposeForAgent(C4, '?PURP2', F4)and not equal(G4, F4)and not equal(E4, '?PURP2')))))), replaceConsVar(E4, '$existential'('?PURP1', exists(F4, exists(G4, agent(C4, G4)and agent(C4, F4)and hasPurposeForAgent(C4, '?PURP1', G4)and hasPurposeForAgent(C4, D4, F4)and not equal(G4, F4)and not equal('?PURP1', D4))))), replaceConsVar(F4, '$existential'('?AGENT2', exists(G4, agent(C4, G4)and agent(C4, '?AGENT2')and hasPurposeForAgent(C4, E4, G4)and hasPurposeForAgent(C4, D4, '?AGENT2')and not equal(G4, '?AGENT2')and not equal(E4, D4)))), replaceConsVar(G4, '$existential'('?AGENT1', agent(C4, '?AGENT1')and agent(C4, F4)and hasPurposeForAgent(C4, E4, '?AGENT1')and hasPurposeForAgent(C4, D4, F4)and not equal('?AGENT1', F4)and not equal(E4, D4)))], ['CONTEST'=C4, 'AGENT1'=G4, 'AGENT2'=F4, 'PURP1'=E4, 'PURP2'=D4], 'Merge', 'PROCESSES', 5869, 'Anonymous', on).
mooCache(subclass('ViolentContest', 'Contest'), subclass('ViolentContest', 'Contest'), [], [], 'Merge', 'PROCESSES', 5871, 'Anonymous', on).
mooCache(documentation('ViolentContest', string('"A Contest where one participant attempts to   physically injure another participant."')), documentation('ViolentContest', string('"A Contest where one participant attempts to   physically injure another participant."')), [], [], 'Merge', 'PROCESSES', 5873, 'Anonymous', on).
mooCache(subclass('War', 'ViolentContest'), subclass('War', 'ViolentContest'), [], [], 'Merge', 'PROCESSES', 5875, 'Anonymous', on).
mooCache(documentation('War', string('"A military confrontation between two or more   Nations or Organizations whose members are Nations.  As the   corresponding axiom specifies, a War is made up of Battles."')), documentation('War', string('"A military confrontation between two or more   Nations or Organizations whose members are Nations.  As the   corresponding axiom specifies, a War is made up of Battles."')), [], [], 'Merge', 'PROCESSES', 5877, 'Anonymous', on).
mooCache(instance(Z9, 'War')=>exists(A10, instance(A10, 'Battle')and subProcess(A10, Z9)), (entails(not instance(A10, 'Battle'), not instance(Z9, 'War'))and entails(instance(Z9, 'War')and'$existential'(A10, '?BATTLE', instance('?BATTLE', 'Battle')and subProcess('?BATTLE', Z9)), instance(A10, 'Battle')))and entails(not subProcess(A10, Z9), not instance(Z9, 'War'))and entails(instance(Z9, 'War')and'$existential'(A10, '?BATTLE', instance('?BATTLE', 'Battle')and subProcess('?BATTLE', Z9)), subProcess(A10, Z9)), [domainV(A10, ['$instanceof':'Battle', subProcess:1]), domainV(Z9, ['$instanceof':'War', subProcess:2]), domainV(_G6654, []), forall(Z9), replaceConsVar(A10, '$existential'('?BATTLE', instance('?BATTLE', 'Battle')and subProcess('?BATTLE', Z9)))], ['WAR'=Z9, 'BATTLE'=A10], 'Merge', 'PROCESSES', 5879, 'Anonymous', on).
mooCache(instance(L11, 'War')and agent(L11, M11)=>instance(M11, 'Nation')or instance(M11, 'Organization')and forall(N11, member(N11, M11)=>instance(N11, 'Nation')), (entails(agent(L11, M11)and not instance(M11, 'Nation')and not instance(M11, 'Organization'), not instance(L11, 'War'))and entails(instance(L11, 'War')and not instance(M11, 'Nation')and not instance(M11, 'Organization'), not agent(L11, M11))and entails((instance(L11, 'War')and agent(L11, M11))and not instance(M11, 'Organization'), instance(M11, 'Nation'))and entails((instance(L11, 'War')and agent(L11, M11))and not instance(M11, 'Nation'), instance(M11, 'Organization')))and entails(agent(L11, M11)and not instance(M11, 'Nation')and member(N11, M11)and not instance(N11, 'Nation'), not instance(L11, 'War'))and entails(instance(L11, 'War')and not instance(M11, 'Nation')and member(N11, M11)and not instance(N11, 'Nation'), not agent(L11, M11))and entails((instance(L11, 'War')and agent(L11, M11))and member(N11, M11)and not instance(N11, 'Nation'), instance(M11, 'Nation'))and entails((instance(L11, 'War')and agent(L11, M11))and not instance(M11, 'Nation')and not instance(N11, 'Nation'), not member(N11, M11))and entails((instance(L11, 'War')and agent(L11, M11))and not instance(M11, 'Nation')and member(N11, M11), instance(N11, 'Nation')), [domainV(N11, ['$instanceof':'Nation', member:1]), domainV(M11, ['$instanceof':'Nation', '$instanceof':'Organization', agent:2, member:2]), domainV(L11, ['$instanceof':'War', agent:1]), domainV(_G11017, []), forall(L11), forall(M11), forall(N11)], ['WAR'=L11, 'AGENT'=M11, 'MEMBER'=N11], 'Merge', 'PROCESSES', 5881, 'Anonymous', on).
mooCache(subclass('Battle', 'ViolentContest'), subclass('Battle', 'ViolentContest'), [], [], 'Merge', 'PROCESSES', 5883, 'Anonymous', on).
mooCache(documentation('Battle', string('"A ViolentContest between two or more military   units within the context of a war.  Note that this does not cover the   metaphorical sense of \'battle\', which simply means a struggle of some   sort.  This sense should be represented with the more general concept of   Competition."')), documentation('Battle', string('"A ViolentContest between two or more military   units within the context of a war.  Note that this does not cover the   metaphorical sense of \'battle\', which simply means a struggle of some   sort.  This sense should be represented with the more general concept of   Competition."')), [], [], 'Merge', 'PROCESSES', 5885, 'Anonymous', on).
mooCache(instance(S14, 'Battle')=>exists(T14, instance(T14, 'War')and subProcess(S14, T14)), (entails(not instance(T14, 'War'), not instance(S14, 'Battle'))and entails(instance(S14, 'Battle')and'$existential'(T14, '?WAR', instance('?WAR', 'War')and subProcess(S14, '?WAR')), instance(T14, 'War')))and entails(not subProcess(S14, T14), not instance(S14, 'Battle'))and entails(instance(S14, 'Battle')and'$existential'(T14, '?WAR', instance('?WAR', 'War')and subProcess(S14, '?WAR')), subProcess(S14, T14)), [domainV(T14, ['$instanceof':'War', subProcess:2]), domainV(S14, ['$instanceof':'Battle', subProcess:1]), domainV(_G6636, []), forall(S14), replaceConsVar(T14, '$existential'('?WAR', instance('?WAR', 'War')and subProcess(S14, '?WAR')))], ['BATTLE'=S14, 'WAR'=T14], 'Merge', 'PROCESSES', 5887, 'Anonymous', on).
mooCache(instance(Y15, 'Battle')=>exists(Z15, instance(Z15, 'ViolentContest')and subProcess(Z15, Y15)), (entails(not instance(Z15, 'ViolentContest'), not instance(Y15, 'Battle'))and entails(instance(Y15, 'Battle')and'$existential'(Z15, '?ATTACK', instance('?ATTACK', 'ViolentContest')and subProcess('?ATTACK', Y15)), instance(Z15, 'ViolentContest')))and entails(not subProcess(Z15, Y15), not instance(Y15, 'Battle'))and entails(instance(Y15, 'Battle')and'$existential'(Z15, '?ATTACK', instance('?ATTACK', 'ViolentContest')and subProcess('?ATTACK', Y15)), subProcess(Z15, Y15)), [domainV(Z15, ['$instanceof':'ViolentContest', subProcess:1]), domainV(Y15, ['$instanceof':'Battle', subProcess:2]), domainV(_G6756, []), forall(Y15), replaceConsVar(Z15, '$existential'('?ATTACK', instance('?ATTACK', 'ViolentContest')and subProcess('?ATTACK', Y15)))], ['BATTLE'=Y15, 'ATTACK'=Z15], 'Merge', 'PROCESSES', 5889, 'Anonymous', on).
mooCache(subclass('Game', 'Contest'), subclass('Game', 'Contest'), [], [], 'Merge', 'PROCESSES', 5891, 'Anonymous', on).
mooCache(subclass('Game', 'RecreationalProcess'), subclass('Game', 'RecreationalProcess'), [], [], 'Merge', 'PROCESSES', 5893, 'Anonymous', on).
mooCache(documentation('Game', string('"A Contest whose purpose is the   enjoyment/stimulation of the participants or spectators of the Game."')), documentation('Game', string('"A Contest whose purpose is the   enjoyment/stimulation of the participants or spectators of the Game."')), [], [], 'Merge', 'PROCESSES', 5895, 'Anonymous', on).
mooCache(subclass('Sport', 'Game'), subclass('Sport', 'Game'), [], [], 'Merge', 'PROCESSES', 5897, 'Anonymous', on).
mooCache(subclass('Sport', 'ExerciseProcess'), subclass('Sport', 'ExerciseProcess'), [], [], 'Merge', 'PROCESSES', 5899, 'Anonymous', on).
mooCache(documentation('Sport', string('"A Game which requires some degree of physical   exercion from the participants of the game."')), documentation('Sport', string('"A Game which requires some degree of physical   exercion from the participants of the game."')), [], [], 'Merge', 'PROCESSES', 5901, 'Anonymous', on).
mooCache(subclass('LegalAction', 'Contest'), subclass('LegalAction', 'Contest'), [], [], 'Merge', 'PROCESSES', 5903, 'Anonymous', on).
mooCache(documentation('LegalAction', string('"Any Process where a CognitiveAgent seeks   to obtain something from another CognitiveAgent through a court of law."')), documentation('LegalAction', string('"Any Process where a CognitiveAgent seeks   to obtain something from another CognitiveAgent through a court of law."')), [], [], 'Merge', 'PROCESSES', 5905, 'Anonymous', on).
mooCache(subclass('Maneuver', 'IntentionalProcess'), subclass('Maneuver', 'IntentionalProcess'), [], [], 'Merge', 'PROCESSES', 5907, 'Anonymous', on).
mooCache(documentation('Maneuver', string('"An intentional move or play within a Contest.    In many cases, a Maneuver is part of a strategy for winning the   larger Contest of which the Maneuver is a part."')), documentation('Maneuver', string('"An intentional move or play within a Contest.    In many cases, a Maneuver is part of a strategy for winning the   larger Contest of which the Maneuver is a part."')), [], [], 'Merge', 'PROCESSES', 5909, 'Anonymous', on).
mooCache(instance(F25, 'Maneuver')=>exists(G25, instance(G25, 'Contest')and subProcess(F25, G25)), (entails(not instance(G25, 'Contest'), not instance(F25, 'Maneuver'))and entails(instance(F25, 'Maneuver')and'$existential'(G25, '?CONTEST', instance('?CONTEST', 'Contest')and subProcess(F25, '?CONTEST')), instance(G25, 'Contest')))and entails(not subProcess(F25, G25), not instance(F25, 'Maneuver'))and entails(instance(F25, 'Maneuver')and'$existential'(G25, '?CONTEST', instance('?CONTEST', 'Contest')and subProcess(F25, '?CONTEST')), subProcess(F25, G25)), [domainV(G25, ['$instanceof':'Contest', subProcess:2]), domainV(F25, ['$instanceof':'Maneuver', subProcess:1]), domainV(_G6720, []), forall(F25), replaceConsVar(G25, '$existential'('?CONTEST', instance('?CONTEST', 'Contest')and subProcess(F25, '?CONTEST')))], ['MOVE'=F25, 'CONTEST'=G25], 'Merge', 'PROCESSES', 5911, 'Anonymous', on).
mooCache(subclass('Perception', 'MentalProcess'), subclass('Perception', 'MentalProcess'), [], [], 'Merge', 'PROCESSES', 5913, 'Anonymous', on).
mooCache(documentation('Perception', string('"Sensing some aspect of the material world.    Note that the agent of this sensing is assumed to be an Animal."')), documentation('Perception', string('"Sensing some aspect of the material world.    Note that the agent of this sensing is assumed to be an Animal."')), [], [], 'Merge', 'PROCESSES', 5915, 'Anonymous', on).
mooCache(instance(Z27, 'Perception')and agent(Z27, A28)=>instance(A28, 'Animal'), entails(instance(Z27, 'Perception')and agent(Z27, A28), instance(A28, 'Animal'))and entails(not instance(A28, 'Animal')and agent(Z27, A28), not instance(Z27, 'Perception'))and entails(not instance(A28, 'Animal')and instance(Z27, 'Perception'), not agent(Z27, A28)), [domainV(A28, ['$instanceof':'Animal', agent:2]), domainV(Z27, ['$instanceof':'Perception', agent:1]), domainV(_G5361, []), forall(Z27), forall(A28)], ['PERCEPT'=Z27, 'AGENT'=A28], 'Merge', 'PROCESSES', 5917, 'Anonymous', on).
mooCache(instance(D29, 'Perception')and agent(D29, E29)and patient(D29, F29)=>notices(E29, F29), entails(instance(D29, 'Perception')and agent(D29, E29)and patient(D29, F29), notices(E29, F29))and entails(not notices(E29, F29)and agent(D29, E29)and patient(D29, F29), not instance(D29, 'Perception'))and entails(not notices(E29, F29)and instance(D29, 'Perception')and patient(D29, F29), not agent(D29, E29))and entails(not notices(E29, F29)and instance(D29, 'Perception')and agent(D29, E29), not patient(D29, F29)), [domainV(F29, [notices:2, patient:2]), domainV(E29, [agent:2, notices:1]), domainV(D29, ['$instanceof':'Perception', agent:1, patient:1]), domainV(_G7028, []), forall(D29), forall(E29), forall(F29)], ['PERCEPT'=D29, 'AGENT'=E29, 'OBJECT'=F29], 'Merge', 'PROCESSES', 5919, 'Anonymous', on).
mooCache(subclass('Seeing', 'Perception'), subclass('Seeing', 'Perception'), [], [], 'Merge', 'PROCESSES', 5921, 'Anonymous', on).
mooCache(documentation('Seeing', string('"The subclass of Perception in which the   sensing is done by an ocular Organ."')), documentation('Seeing', string('"The subclass of Perception in which the   sensing is done by an ocular Organ."')), [], [], 'Merge', 'PROCESSES', 5923, 'Anonymous', on).
mooCache(subclass('Smelling', 'Perception'), subclass('Smelling', 'Perception'), [], [], 'Merge', 'PROCESSES', 5925, 'Anonymous', on).
mooCache(documentation('Smelling', string('"The subclass of Perception in which the   sensing is done by an olefactory Organ."')), documentation('Smelling', string('"The subclass of Perception in which the   sensing is done by an olefactory Organ."')), [], [], 'Merge', 'PROCESSES', 5927, 'Anonymous', on).
mooCache(subclass('Tasting', 'Perception'), subclass('Tasting', 'Perception'), [], [], 'Merge', 'PROCESSES', 5929, 'Anonymous', on).
mooCache(documentation('Tasting', string('"The subclass of Perception in which the   sensing is done by of an Organ which can discriminate various tastes."')), documentation('Tasting', string('"The subclass of Perception in which the   sensing is done by of an Organ which can discriminate various tastes."')), [], [], 'Merge', 'PROCESSES', 5931, 'Anonymous', on).
mooCache(subclass('Hearing', 'Perception'), subclass('Hearing', 'Perception'), [], [], 'Merge', 'PROCESSES', 5933, 'Anonymous', on).
mooCache(documentation('Hearing', string('"The subclass of Perception in which the   sensing is done by an auditory Organ."')), documentation('Hearing', string('"The subclass of Perception in which the   sensing is done by an auditory Organ."')), [], [], 'Merge', 'PROCESSES', 5935, 'Anonymous', on).
mooCache(subclass('TactilePerception', 'Perception'), subclass('TactilePerception', 'Perception'), [], [], 'Merge', 'PROCESSES', 5937, 'Anonymous', on).
mooCache(documentation('TactilePerception', string('"The subclass of Perception in which   the sensing is done by Touching."')), documentation('TactilePerception', string('"The subclass of Perception in which   the sensing is done by Touching."')), [], [], 'Merge', 'PROCESSES', 5939, 'Anonymous', on).
mooCache(instance(J38, 'TactilePerception')=>exists(K38, instance(K38, 'Touching')and subProcess(K38, J38)), (entails(not instance(K38, 'Touching'), not instance(J38, 'TactilePerception'))and entails(instance(J38, 'TactilePerception')and'$existential'(K38, '?TOUCH', instance('?TOUCH', 'Touching')and subProcess('?TOUCH', J38)), instance(K38, 'Touching')))and entails(not subProcess(K38, J38), not instance(J38, 'TactilePerception'))and entails(instance(J38, 'TactilePerception')and'$existential'(K38, '?TOUCH', instance('?TOUCH', 'Touching')and subProcess('?TOUCH', J38)), subProcess(K38, J38)), [domainV(K38, ['$instanceof':'Touching', subProcess:1]), domainV(J38, ['$instanceof':'TactilePerception', subProcess:2]), domainV(_G6780, []), forall(J38), replaceConsVar(K38, '$existential'('?TOUCH', instance('?TOUCH', 'Touching')and subProcess('?TOUCH', J38)))], ['TACTILE'=J38, 'TOUCH'=K38], 'Merge', 'PROCESSES', 5941, 'Anonymous', on).
mooCache(subclass('Emitting', 'Process'), subclass('Emitting', 'Process'), [], [], 'Merge', 'PROCESSES', 5943, 'Anonymous', on).
mooCache(documentation('Emitting', string('"Processes in which something is given off by   something else."')), documentation('Emitting', string('"Processes in which something is given off by   something else."')), [], [], 'Merge', 'PROCESSES', 5945, 'Anonymous', on).
mooCache(subclass('EmittingLight', 'Emitting'), subclass('EmittingLight', 'Emitting'), [], [], 'Merge', 'PROCESSES', 5947, 'Anonymous', on).
mooCache(documentation('EmittingLight', string('"The subclass of Emitting in which   light is given off.  Some examples include blinking, flashing, and   glittering."')), documentation('EmittingLight', string('"The subclass of Emitting in which   light is given off.  Some examples include blinking, flashing, and   glittering."')), [], [], 'Merge', 'PROCESSES', 5949, 'Anonymous', on).
mooCache(subclass('EmittingSmell', 'Emitting'), subclass('EmittingSmell', 'Emitting'), [], [], 'Merge', 'PROCESSES', 5951, 'Anonymous', on).
mooCache(documentation('EmittingSmell', string('"The subclass of Emitting in which   smells are given off.  Some examples include reeking, smelling, and   stinking."')), documentation('EmittingSmell', string('"The subclass of Emitting in which   smells are given off.  Some examples include reeking, smelling, and   stinking."')), [], [], 'Merge', 'PROCESSES', 5953, 'Anonymous', on).
mooCache(subclass('EmittingSound', 'Emitting'), subclass('EmittingSound', 'Emitting'), [], [], 'Merge', 'PROCESSES', 5955, 'Anonymous', on).
mooCache(documentation('EmittingSound', string('"The subclass of Emitting in which   sound is given off.  Some examples include creaking, roaring, and   whistling."')), documentation('EmittingSound', string('"The subclass of Emitting in which   sound is given off.  Some examples include creaking, roaring, and   whistling."')), [], [], 'Merge', 'PROCESSES', 5957, 'Anonymous', on).
mooCache(subclass('Music', 'EmittingSound'), subclass('Music', 'EmittingSound'), [], [], 'Merge', 'PROCESSES', 5959, 'Anonymous', on).
mooCache(documentation('Music', string('"The subclass of EmittingSound where the   sound is intended to be melodic and is produced deliberately."')), documentation('Music', string('"The subclass of EmittingSound where the   sound is intended to be melodic and is produced deliberately."')), [], [], 'Merge', 'PROCESSES', 5961, 'Anonymous', on).
mooCache('include-context'('MEREOTOPOLOGY'), 'include-context'('MEREOTOPOLOGY'), [], [], 'Merge', 'OBJECTS', 5973, 'Anonymous', on).
mooCache('include-context'('PROCESSES'), 'include-context'('PROCESSES'), [], [], 'Merge', 'OBJECTS', 5976, 'Anonymous', on).
mooCache('include-context'('QUALITIES'), 'include-context'('QUALITIES'), [], [], 'Merge', 'OBJECTS', 5979, 'Anonymous', on).
mooCache(subclass('Nation', 'Agent'), subclass('Nation', 'Agent'), [], [], 'Merge', 'OBJECTS', 5982, 'Anonymous', on).
mooCache(relatedInternalConcept('Nation', 'Land'), relatedInternalConcept('Nation', 'Land'), [], [], 'Merge', 'OBJECTS', 5984, 'Anonymous', on).
mooCache(documentation('Nation', string('"That aspect of a Nation which can act automonously   and which is the same throughout the changes in population and borders.    Compare the Class Land."')), documentation('Nation', string('"That aspect of a Nation which can act automonously   and which is the same throughout the changes in population and borders.    Compare the Class Land."')), [], [], 'Merge', 'OBJECTS', 5986, 'Anonymous', on).
mooCache(instance(I16, 'Nation')=>exists(J16, instance(J16, 'Government')and subOrganizations(J16, I16)), (entails(not instance(J16, 'Government'), not instance(I16, 'Nation'))and entails(instance(I16, 'Nation')and'$existential'(J16, '?GOV', instance('?GOV', 'Government')and subOrganizations('?GOV', I16)), instance(J16, 'Government')))and entails(not subOrganizations(J16, I16), not instance(I16, 'Nation'))and entails(instance(I16, 'Nation')and'$existential'(J16, '?GOV', instance('?GOV', 'Government')and subOrganizations('?GOV', I16)), subOrganizations(J16, I16)), [domainV(J16, ['$instanceof':'Government', subOrganizations:1]), domainV(I16, ['$instanceof':'Nation', subOrganizations:2]), domainV(_G6714, []), forall(I16), replaceConsVar(J16, '$existential'('?GOV', instance('?GOV', 'Government')and subOrganizations('?GOV', I16)))], ['NATION'=I16, 'GOV'=J16], 'Merge', 'OBJECTS', 5988, 'Anonymous', on).
mooCache(subclass('GeographicArea', 'Region'), subclass('GeographicArea', 'Region'), [], [], 'Merge', 'OBJECTS', 5990, 'Anonymous', on).
mooCache(documentation('GeographicArea', string('"A geographic location, generally having   definite boundaries.  Note that this differs from its immediate superclass   Region in that a GeographicArea is a Region of land of significant   size."')), documentation('GeographicArea', string('"A geographic location, generally having   definite boundaries.  Note that this differs from its immediate superclass   Region in that a GeographicArea is a Region of land of significant   size."')), [], [], 'Merge', 'OBJECTS', 5992, 'Anonymous', on).
mooCache(subclass('TimeZone', 'GeographicArea'), subclass('TimeZone', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 5994, 'Anonymous', on).
mooCache(documentation('TimeZone', string('"A GeographicArea in which time measures are   uniform, i.e. all time devices are synchronized to the same temporal   coordinates."')), documentation('TimeZone', string('"A GeographicArea in which time measures are   uniform, i.e. all time devices are synchronized to the same temporal   coordinates."')), [], [], 'Merge', 'OBJECTS', 5996, 'Anonymous', on).
mooCache(instance('CoordinatedUniversalTimeZone', 'TimeZone'), instance('CoordinatedUniversalTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 5998, 'Anonymous', on).
mooCache(documentation('CoordinatedUniversalTimeZone', string('"A TimeZone which functions   as the standard time zone.  It is also known as Zulu time (in the military),   Greenwich Mean Time, and the Western European time zone.  Note that whenever   a TimeZone is not specified, the TimePosition is understood to be with   respect to the CoordinatedUniversalTimeZone."')), documentation('CoordinatedUniversalTimeZone', string('"A TimeZone which functions   as the standard time zone.  It is also known as Zulu time (in the military),   Greenwich Mean Time, and the Western European time zone.  Note that whenever   a TimeZone is not specified, the TimePosition is understood to be with   respect to the CoordinatedUniversalTimeZone."')), [], [], 'Merge', 'OBJECTS', 6000, 'Anonymous', on).
mooCache(instance('PacificTimeZone', 'TimeZone'), instance('PacificTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6002, 'Anonymous', on).
mooCache(documentation('PacificTimeZone', string('"A TimeZone that covers much of the   western part of the United States."')), documentation('PacificTimeZone', string('"A TimeZone that covers much of the   western part of the United States."')), [], [], 'Merge', 'OBJECTS', 6004, 'Anonymous', on).
mooCache(equal('RelativeTimeFn'(I25, 'PacificTimeZone'), J25)=>equal(J25, 'AdditionFn'(I25, 8)), entails(not holds('AdditionFn', I25, 8, J25), not holds('RelativeTimeFn', I25, 'PacificTimeZone', J25))and entails(holds('RelativeTimeFn', I25, 'PacificTimeZone', J25), holds('AdditionFn', I25, 8, J25)), [domainV(J25, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(I25, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(_G5670, []), forall(I25), forall(J25)], ['TIME1'=I25, 'TIME2'=J25], 'Merge', 'OBJECTS', 6006, 'Anonymous', on).
mooCache(instance('MountainTimeZone', 'TimeZone'), instance('MountainTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6008, 'Anonymous', on).
mooCache(documentation('MountainTimeZone', string('"A TimeZone that covers much of the   Rocky Mountain region of the United States."')), documentation('MountainTimeZone', string('"A TimeZone that covers much of the   Rocky Mountain region of the United States."')), [], [], 'Merge', 'OBJECTS', 6010, 'Anonymous', on).
mooCache(equal('RelativeTimeFn'(X27, 'MountainTimeZone'), Y27)=>equal(Y27, 'AdditionFn'(X27, 7)), entails(not holds('AdditionFn', X27, 7, Y27), not holds('RelativeTimeFn', X27, 'MountainTimeZone', Y27))and entails(holds('RelativeTimeFn', X27, 'MountainTimeZone', Y27), holds('AdditionFn', X27, 7, Y27)), [domainV(Y27, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(X27, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(_G5676, []), forall(X27), forall(Y27)], ['TIME1'=X27, 'TIME2'=Y27], 'Merge', 'OBJECTS', 6012, 'Anonymous', on).
mooCache(instance('CentralTimeZone', 'TimeZone'), instance('CentralTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6014, 'Anonymous', on).
mooCache(documentation('CentralTimeZone', string('"A TimeZone that covers much of the   midwestern United States."')), documentation('CentralTimeZone', string('"A TimeZone that covers much of the   midwestern United States."')), [], [], 'Merge', 'OBJECTS', 6016, 'Anonymous', on).
mooCache(equal('RelativeTimeFn'(M30, 'CentralTimeZone'), N30)=>equal(N30, 'AdditionFn'(M30, 6)), entails(not holds('AdditionFn', M30, 6, N30), not holds('RelativeTimeFn', M30, 'CentralTimeZone', N30))and entails(holds('RelativeTimeFn', M30, 'CentralTimeZone', N30), holds('AdditionFn', M30, 6, N30)), [domainV(N30, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(M30, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(_G5670, []), forall(M30), forall(N30)], ['TIME1'=M30, 'TIME2'=N30], 'Merge', 'OBJECTS', 6018, 'Anonymous', on).
mooCache(instance('EasternTimeZone', 'TimeZone'), instance('EasternTimeZone', 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6020, 'Anonymous', on).
mooCache(documentation('EasternTimeZone', string('"A TimeZone that covers much of the   eastern United States."')), documentation('EasternTimeZone', string('"A TimeZone that covers much of the   eastern United States."')), [], [], 'Merge', 'OBJECTS', 6022, 'Anonymous', on).
mooCache(equal('RelativeTimeFn'(A33, 'EasternTimeZone'), B33)=>equal(B33, 'AdditionFn'(A33, 5)), entails(not holds('AdditionFn', A33, 5, B33), not holds('RelativeTimeFn', A33, 'EasternTimeZone', B33))and entails(holds('RelativeTimeFn', A33, 'EasternTimeZone', B33), holds('AdditionFn', A33, 5, B33)), [domainV(B33, ['AdditionFn':3, 'RelativeTimeFn':3]), domainV(A33, ['AdditionFn':1, 'RelativeTimeFn':1]), domainV(_G5670, []), forall(A33), forall(B33)], ['TIME1'=A33, 'TIME2'=B33], 'Merge', 'OBJECTS', 6024, 'Anonymous', on).
mooCache(instance('RelativeTimeFn', 'BinaryFunction'), instance('RelativeTimeFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6026, 'Anonymous', on).
mooCache(instance('RelativeTimeFn', 'TemporalRelation'), instance('RelativeTimeFn', 'TemporalRelation'), [], [], 'Merge', 'OBJECTS', 6028, 'Anonymous', on).
mooCache(domain('RelativeTimeFn', 1, 'TimePosition'), domain('RelativeTimeFn', 1, 'TimePosition'), [], [], 'Merge', 'OBJECTS', 6030, 'Anonymous', on).
mooCache(domain('RelativeTimeFn', 2, 'TimeZone'), domain('RelativeTimeFn', 2, 'TimeZone'), [], [], 'Merge', 'OBJECTS', 6032, 'Anonymous', on).
mooCache(range('RelativeTimeFn', 'TimePosition'), range('RelativeTimeFn', 'TimePosition'), [], [], 'Merge', 'OBJECTS', 6034, 'Anonymous', on).
mooCache(documentation('RelativeTimeFn', string('"A means of converting TimePositions   between different TimeZones.  (RelativeTimeFn ?TIME ?ZONE)   denotes the TimePosition in CoordinatedUniversalTime that is   contemporaneous with the TimePosition ?TIME in TimeZone ?ZONE.    For example, (RelativeTimeFn (MeasureFn 14 Hour) EasternTimeZone)   would return the value (MeasureFn 19 Hour)."')), documentation('RelativeTimeFn', string('"A means of converting TimePositions   between different TimeZones.  (RelativeTimeFn ?TIME ?ZONE)   denotes the TimePosition in CoordinatedUniversalTime that is   contemporaneous with the TimePosition ?TIME in TimeZone ?ZONE.    For example, (RelativeTimeFn (MeasureFn 14 Hour) EasternTimeZone)   would return the value (MeasureFn 19 Hour)."')), [], [], 'Merge', 'OBJECTS', 6036, 'Anonymous', on).
mooCache(subclass('Land', 'GeographicArea'), subclass('Land', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 6038, 'Anonymous', on).
mooCache(documentation('Land', string('"A Land is the GeographicArea associated with   a nation.  For example, the Land of Australia is the Region making   up the continent of Oceania."')), documentation('Land', string('"A Land is the GeographicArea associated with   a nation.  For example, the Land of Australia is the Region making   up the continent of Oceania."')), [], [], 'Merge', 'OBJECTS', 6040, 'Anonymous', on).
mooCache(subclass('Address', 'GeographicArea'), subclass('Address', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 6042, 'Anonymous', on).
mooCache(documentation('Address', string('"A GeographicArea with definite boundaries   and of relatively small size.  This concept represents the state of   \'being at an address\'."')), documentation('Address', string('"A GeographicArea with definite boundaries   and of relatively small size.  This concept represents the state of   \'being at an address\'."')), [], [], 'Merge', 'OBJECTS', 6044, 'Anonymous', on).
mooCache(subclass('City', 'GeographicArea'), subclass('City', 'GeographicArea'), [], [], 'Merge', 'OBJECTS', 6046, 'Anonymous', on).
mooCache(documentation('City', string('"A GeographicArea of relatively small size, inhabited   by people, and exhibiting a distinctive sort of political structure."')), documentation('City', string('"A GeographicArea of relatively small size, inhabited   by people, and exhibiting a distinctive sort of political structure."')), [], [], 'Merge', 'OBJECTS', 6048, 'Anonymous', on).
mooCache(subclass('Water', 'CompoundSubstance'), subclass('Water', 'CompoundSubstance'), [], [], 'Merge', 'OBJECTS', 6050, 'Anonymous', on).
mooCache(documentation('Water', string('"The Class of samples of the compound H20.  Note   that this Class covers both pure and impure Water."')), documentation('Water', string('"The Class of samples of the compound H20.  Note   that this Class covers both pure and impure Water."')), [], [], 'Merge', 'OBJECTS', 6052, 'Anonymous', on).
mooCache(subclass('Mineral', 'Mixture'), subclass('Mineral', 'Mixture'), [], [], 'Merge', 'OBJECTS', 6054, 'Anonymous', on).
mooCache(documentation('Mineral', string('" Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."')), documentation('Mineral', string('" Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."')), [], [], 'Merge', 'OBJECTS', 6056, 'Anonymous', on).
mooCache(instance(developmentalForm, 'BinaryPredicate'), instance(developmentalForm, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6058, 'Anonymous', on).
mooCache(instance(developmentalForm, 'AsymmetricRelation'), instance(developmentalForm, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6060, 'Anonymous', on).
mooCache(instance(developmentalForm, 'TransitiveRelation'), instance(developmentalForm, 'TransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6062, 'Anonymous', on).
mooCache(domain(developmentalForm, 1, 'UnionFn'('Organism', 'AnatomicalStructure')), domain(developmentalForm, 1, 'UnionFn'('Organism', 'AnatomicalStructure')), [], [], 'Merge', 'OBJECTS', 6064, 'Anonymous', on).
mooCache(domain(developmentalForm, 2, 'DevelopmentalProperty'), domain(developmentalForm, 2, 'DevelopmentalProperty'), [], [], 'Merge', 'OBJECTS', 6066, 'Anonymous', on).
mooCache(documentation(developmentalForm, string('"(developmentalForm ?OBJECT ?FORM)   means that ?FORM is an earlier stage in the individual maturation of   ?OBJECT.  For example, tadpole and caterpillar are developmentalForms   of frogs and butterflies, respectively."')), documentation(developmentalForm, string('"(developmentalForm ?OBJECT ?FORM)   means that ?FORM is an earlier stage in the individual maturation of   ?OBJECT.  For example, tadpole and caterpillar are developmentalForms   of frogs and butterflies, respectively."')), [], [], 'Merge', 'OBJECTS', 6068, 'Anonymous', on).
mooCache(subclass('Organism', 'CorpuscularObject'), subclass('Organism', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6070, 'Anonymous', on).
mooCache(subclass('Organism', 'Agent'), subclass('Organism', 'Agent'), [], [], 'Merge', 'OBJECTS', 6072, 'Anonymous', on).
mooCache(documentation('Organism', string('"Generally, a living individual, including all   Plants and Animals."')), documentation('Organism', string('"Generally, a living individual, including all   Plants and Animals."')), [], [], 'Merge', 'OBJECTS', 6074, 'Anonymous', on).
mooCache(instance(D15, 'Organism')=>exists(E15, exists(F15, birthTime(D15, F15)and deathTime(D15, E15))), (entails(not birthTime(D15, F15), not instance(D15, 'Organism'))and entails(instance(D15, 'Organism')and'$existential'(F15, '?TIME1', birthTime(D15, '?TIME1')and deathTime(D15, E15)), birthTime(D15, F15)))and entails(not deathTime(D15, E15), not instance(D15, 'Organism'))and entails((instance(D15, 'Organism')and'$existential'(E15, '?TIME2', exists(F15, birthTime(D15, F15)and deathTime(D15, '?TIME2'))))and'$existential'(F15, '?TIME1', birthTime(D15, '?TIME1')and deathTime(D15, E15)), deathTime(D15, E15)), [domainV(F15, [birthTime:2]), domainV(E15, [deathTime:2]), domainV(D15, ['$instanceof':'Organism', birthTime:1, deathTime:1]), domainV(_G8312, []), forall(D15), replaceConsVar(E15, '$existential'('?TIME2', exists(F15, birthTime(D15, F15)and deathTime(D15, '?TIME2')))), replaceConsVar(F15, '$existential'('?TIME1', birthTime(D15, '?TIME1')and deathTime(D15, E15)))], ['ORGANISM'=D15, 'TIME1'=F15, 'TIME2'=E15], 'Merge', 'OBJECTS', 6076, 'Anonymous', on).
mooCache(instance(inhabits, 'BinaryPredicate'), instance(inhabits, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6078, 'Anonymous', on).
mooCache(instance(inhabits, 'AsymmetricRelation'), instance(inhabits, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6080, 'Anonymous', on).
mooCache(domain(inhabits, 1, 'Organism'), domain(inhabits, 1, 'Organism'), [], [], 'Merge', 'OBJECTS', 6082, 'Anonymous', on).
mooCache(domain(inhabits, 2, 'Object'), domain(inhabits, 2, 'Object'), [], [], 'Merge', 'OBJECTS', 6084, 'Anonymous', on).
mooCache(documentation(inhabits, string('"A very basic notion of living within something   else.  (inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence,   nest, home, etc. of ?ORGANISM."')), documentation(inhabits, string('"A very basic notion of living within something   else.  (inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence,   nest, home, etc. of ?ORGANISM."')), [], [], 'Merge', 'OBJECTS', 6086, 'Anonymous', on).
mooCache(instance(parent, 'BinaryPredicate'), instance(parent, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6088, 'Anonymous', on).
mooCache(subrelation(parent, familyRelation), subrelation(parent, familyRelation), [], [], 'Merge', 'OBJECTS', 6090, 'Anonymous', on).
mooCache(instance(parent, 'AsymmetricRelation'), instance(parent, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6092, 'Anonymous', on).
mooCache(instance(parent, 'IntransitiveRelation'), instance(parent, 'IntransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6094, 'Anonymous', on).
mooCache(domain(parent, 1, 'Organism'), domain(parent, 1, 'Organism'), [], [], 'Merge', 'OBJECTS', 6096, 'Anonymous', on).
mooCache(domain(parent, 2, 'Organism'), domain(parent, 2, 'Organism'), [], [], 'Merge', 'OBJECTS', 6098, 'Anonymous', on).
mooCache(documentation(parent, string('"The general relationship of parenthood.    (parent ?PARENT ?CHILD) means that ?PARENT is a biological parent   of ?CHILD."')), documentation(parent, string('"The general relationship of parenthood.    (parent ?PARENT ?CHILD) means that ?PARENT is a biological parent   of ?CHILD."')), [], [], 'Merge', 'OBJECTS', 6100, 'Anonymous', on).
mooCache(parent(K25, L25)=>before('BeginFn'('WhenFn'(K25)), 'BeginFn'('WhenFn'(L25))), entails(not before('BeginFn'('WhenFn'(K25)), 'BeginFn'('WhenFn'(L25))), not parent(K25, L25))and entails(parent(K25, L25), before('BeginFn'('WhenFn'(K25)), 'BeginFn'('WhenFn'(L25)))), [domainV(L25, ['WhenFn':1, parent:2]), domainV(K25, ['WhenFn':1, parent:1]), domainV(_G5874, []), forall(K25), forall(L25)], ['PARENT'=K25, 'CHILD'=L25], 'Merge', 'OBJECTS', 6102, 'Anonymous', on).
mooCache(parent(M26, N26)and subclass(O26, 'Organism')and instance(M26, O26)=>instance(N26, O26), entails(parent(M26, N26)and subclass(O26, 'Organism')and instance(M26, O26), instance(N26, O26))and entails(not instance(N26, O26)and subclass(O26, 'Organism')and instance(M26, O26), not parent(M26, N26))and entails(not instance(N26, O26)and parent(M26, N26)and instance(M26, O26), not subclass(O26, 'Organism'))and entails(not instance(N26, O26)and parent(M26, N26)and subclass(O26, 'Organism'), not instance(M26, O26)), [domainV(O26, [instance:2, subclass:1]), domainV(N26, [parent:2]), domainV(M26, [parent:1]), domainV(_G7039, []), forall(M26), forall(N26), forall(O26)], ['PARENT'=M26, 'CHILD'=N26, 'CLASS'=O26], 'Merge', 'OBJECTS', 6104, 'Anonymous', on).
mooCache(parent(Q27, R27)=>mother(Q27, R27)or father(Q27, R27), entails(not mother(Q27, R27)and not father(Q27, R27), not parent(Q27, R27))and entails(parent(Q27, R27)and not father(Q27, R27), mother(Q27, R27))and entails(parent(Q27, R27)and not mother(Q27, R27), father(Q27, R27)), [domainV(R27, [father:2, mother:2, parent:2]), domainV(Q27, [father:1, mother:1, parent:1]), domainV(_G5841, []), forall(Q27), forall(R27)], ['PARENT'=Q27, 'CHILD'=R27], 'Merge', 'OBJECTS', 6106, 'Anonymous', on).
mooCache(subrelation(mother, parent), subrelation(mother, parent), [], [], 'Merge', 'OBJECTS', 6108, 'Anonymous', on).
mooCache(domain(mother, 1, 'Animal'), domain(mother, 1, 'Animal'), [], [], 'Merge', 'OBJECTS', 6110, 'Anonymous', on).
mooCache(singleValued(mother, 1), singleValued(mother, 1), [], [], 'Merge', 'OBJECTS', 6112, 'Anonymous', on).
mooCache(documentation(mother, string('"The general relationship of motherhood.    (mother ?MOTHER ?CHILD) means that ?MOTHER is the biological mother   of ?CHILD."')), documentation(mother, string('"The general relationship of motherhood.    (mother ?MOTHER ?CHILD) means that ?MOTHER is the biological mother   of ?CHILD."')), [], [], 'Merge', 'OBJECTS', 6114, 'Anonymous', on).
mooCache(mother(P31, Q31)=>attribute(P31, 'Female'), entails(not attribute(P31, 'Female'), not mother(P31, Q31))and entails(mother(P31, Q31), attribute(P31, 'Female')), [domainV(Q31, [mother:2]), domainV(P31, [attribute:1, mother:1]), domainV(_G4075, []), forall(P31), forall(Q31)], ['MOTHER'=P31, 'CHILD'=Q31], 'Merge', 'OBJECTS', 6116, 'Anonymous', on).
mooCache(subrelation(father, parent), subrelation(father, parent), [], [], 'Merge', 'OBJECTS', 6118, 'Anonymous', on).
mooCache(domain(father, 1, 'Animal'), domain(father, 1, 'Animal'), [], [], 'Merge', 'OBJECTS', 6120, 'Anonymous', on).
mooCache(singleValued(father, 1), singleValued(father, 1), [], [], 'Merge', 'OBJECTS', 6122, 'Anonymous', on).
mooCache(documentation(father, string('"The general relationship of fatherhood.    (father ?FATHER ?CHILD) means that ?FATHER is the biological father  of ?CHILD."')), documentation(father, string('"The general relationship of fatherhood.    (father ?FATHER ?CHILD) means that ?FATHER is the biological father  of ?CHILD."')), [], [], 'Merge', 'OBJECTS', 6124, 'Anonymous', on).
mooCache(father(N35, O35)=>attribute(N35, 'Male'), entails(not attribute(N35, 'Male'), not father(N35, O35))and entails(father(N35, O35), attribute(N35, 'Male')), [domainV(O35, [father:2]), domainV(N35, [attribute:1, father:1]), domainV(_G4063, []), forall(N35), forall(O35)], ['FATHER'=N35, 'CHILD'=O35], 'Merge', 'OBJECTS', 6126, 'Anonymous', on).
mooCache(instance(siblings, 'BinaryPredicate'), instance(siblings, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6128, 'Anonymous', on).
mooCache(subrelation(siblings, familyRelation), subrelation(siblings, familyRelation), [], [], 'Merge', 'OBJECTS', 6130, 'Anonymous', on).
mooCache(instance(siblings, 'SymmetricRelation'), instance(siblings, 'SymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6132, 'Anonymous', on).
mooCache(instance(siblings, 'TransitiveRelation'), instance(siblings, 'TransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6134, 'Anonymous', on).
mooCache(instance(siblings, 'IrreflexiveRelation'), instance(siblings, 'IrreflexiveRelation'), [], [], 'Merge', 'OBJECTS', 6136, 'Anonymous', on).
mooCache(domain(siblings, 1, 'Animal'), domain(siblings, 1, 'Animal'), [], [], 'Merge', 'OBJECTS', 6138, 'Anonymous', on).
mooCache(domain(siblings, 2, 'Animal'), domain(siblings, 2, 'Animal'), [], [], 'Merge', 'OBJECTS', 6140, 'Anonymous', on).
mooCache(documentation(siblings, string('"The relationship between two Animals that have the   same parents."')), documentation(siblings, string('"The relationship between two Animals that have the   same parents."')), [], [], 'Merge', 'OBJECTS', 6142, 'Anonymous', on).
mooCache(siblings(J4, K4)<=>exists(L4, exists(M4, father(M4, J4)and father(M4, K4)and mother(L4, J4)and mother(L4, K4))), (entails(siblings(J4, K4)and'$existential'(M4, '?FATHER', father('?FATHER', J4)and father('?FATHER', K4)and mother(L4, J4)and mother(L4, K4)), father(M4, J4))and entails(siblings(J4, K4)and'$existential'(M4, '?FATHER', father('?FATHER', J4)and father('?FATHER', K4)and mother(L4, J4)and mother(L4, K4)), father(M4, K4))and entails((siblings(J4, K4)and'$existential'(L4, '?MOTHER', exists(M4, father(M4, J4)and father(M4, K4)and mother('?MOTHER', J4)and mother('?MOTHER', K4))))and'$existential'(M4, '?FATHER', father('?FATHER', J4)and father('?FATHER', K4)and mother(L4, J4)and mother(L4, K4)), mother(L4, J4))and entails((siblings(J4, K4)and'$existential'(L4, '?MOTHER', exists(M4, father(M4, J4)and father(M4, K4)and mother('?MOTHER', J4)and mother('?MOTHER', K4))))and'$existential'(M4, '?FATHER', father('?FATHER', J4)and father('?FATHER', K4)and mother(L4, J4)and mother(L4, K4)), mother(L4, K4))and entails(not father(M4, J4)or not father(M4, K4)or not mother(L4, J4)or not mother(L4, K4), not siblings(J4, K4)))and entails((father(M4, J4)and father(M4, K4)and mother(L4, J4)and mother(L4, K4))and'$existential'(M4, '?FATHER', father('?FATHER', J4)and father('?FATHER', K4)and mother(L4, J4)and mother(L4, K4)), siblings(J4, K4))and entails(not siblings(J4, K4)and father(M4, K4)and mother(L4, J4)and mother(L4, K4), not father(M4, J4))and entails(not siblings(J4, K4)and father(M4, J4)and mother(L4, J4)and mother(L4, K4), not father(M4, K4))and entails(not siblings(J4, K4)and father(M4, J4)and father(M4, K4)and mother(L4, K4), not mother(L4, J4))and entails(not siblings(J4, K4)and father(M4, J4)and father(M4, K4)and mother(L4, J4), not mother(L4, K4)), [domainV(M4, [father:1]), domainV(L4, [mother:1]), domainV(K4, [father:2, mother:2, siblings:2]), domainV(J4, [father:2, mother:2, siblings:1]), domainV(_G13292, []), forall(J4), forall(K4), replaceConsVar(L4, '$existential'('?MOTHER', exists(M4, father(M4, J4)and father(M4, K4)and mother('?MOTHER', J4)and mother('?MOTHER', K4)))), replaceConsVar(M4, '$existential'('?FATHER', father('?FATHER', J4)and father('?FATHER', K4)and mother(L4, J4)and mother(L4, K4))), forall(L4), forall(M4)], ['ANIMAL1'=J4, 'ANIMAL2'=K4, 'FATHER'=M4, 'MOTHER'=L4], 'Merge', 'OBJECTS', 6144, 'Anonymous', on).
mooCache(subclass('Plant', 'Organism'), subclass('Plant', 'Organism'), [], [], 'Merge', 'OBJECTS', 6152, 'Anonymous', on).
mooCache(disjoint('Plant', 'Animal'), disjoint('Plant', 'Animal'), [], [], 'Merge', 'OBJECTS', 6154, 'Anonymous', on).
mooCache(documentation('Plant', string('"An Organism having cellulose cell walls, growing   by synthesis of Substances, generally distinguished by the presence of   chlorophyll, and lacking the power of locomotion."')), documentation('Plant', string('"An Organism having cellulose cell walls, growing   by synthesis of Substances, generally distinguished by the presence of   chlorophyll, and lacking the power of locomotion."')), [], [], 'Merge', 'OBJECTS', 6156, 'Anonymous', on).
mooCache(subclass('Animal', 'Organism'), subclass('Animal', 'Organism'), [], [], 'Merge', 'OBJECTS', 6158, 'Anonymous', on).
mooCache(documentation('Animal', string('"An Organism with eukaryotic Cells, and lacking   stiff cell walls, plastids, and photosynthetic pigments."')), documentation('Animal', string('"An Organism with eukaryotic Cells, and lacking   stiff cell walls, plastids, and photosynthetic pigments."')), [], [], 'Merge', 'OBJECTS', 6160, 'Anonymous', on).
mooCache(subclass('Microorganism', 'Organism'), subclass('Microorganism', 'Organism'), [], [], 'Merge', 'OBJECTS', 6162, 'Anonymous', on).
mooCache(documentation('Microorganism', string('"An Organism that can be seen only with   the aid of a microscope."')), documentation('Microorganism', string('"An Organism that can be seen only with   the aid of a microscope."')), [], [], 'Merge', 'OBJECTS', 6164, 'Anonymous', on).
mooCache(subclass('Bacterium', 'Microorganism'), subclass('Bacterium', 'Microorganism'), [], [], 'Merge', 'OBJECTS', 6166, 'Anonymous', on).
mooCache(documentation('Bacterium', string('"A small, typically one-celled, prokaryotic   Microorganism."')), documentation('Bacterium', string('"A small, typically one-celled, prokaryotic   Microorganism."')), [], [], 'Merge', 'OBJECTS', 6168, 'Anonymous', on).
mooCache(instance(M13, 'Bacterium')=>exists(N13, component(N13, M13)and instance(N13, 'Cell')and forall(O13, component(O13, M13)and instance(O13, 'Cell')=>equal(N13, O13))), (entails(not component(N13, M13), not instance(M13, 'Bacterium'))and entails(instance(M13, 'Bacterium')and'$existential'(N13, '?CELL1', component('?CELL1', M13)and instance('?CELL1', 'Cell')and forall(O13, component(O13, M13)and instance(O13, 'Cell')=>equal('?CELL1', O13))), component(N13, M13)))and (entails(not instance(N13, 'Cell'), not instance(M13, 'Bacterium'))and entails(instance(M13, 'Bacterium')and'$existential'(N13, '?CELL1', component('?CELL1', M13)and instance('?CELL1', 'Cell')and forall(O13, component(O13, M13)and instance(O13, 'Cell')=>equal('?CELL1', O13))), instance(N13, 'Cell')))and entails(not equal(N13, O13)and component(O13, M13)and instance(O13, 'Cell'), not instance(M13, 'Bacterium'))and entails((instance(M13, 'Bacterium')and component(O13, M13)and instance(O13, 'Cell'))and'$existential'(N13, '?CELL1', component('?CELL1', M13)and instance('?CELL1', 'Cell')and forall(O13, component(O13, M13)and instance(O13, 'Cell')=>equal('?CELL1', O13))), equal(N13, O13))and entails(instance(M13, 'Bacterium')and not equal(N13, O13)and instance(O13, 'Cell'), not component(O13, M13))and entails(instance(M13, 'Bacterium')and not equal(N13, O13)and component(O13, M13), not instance(O13, 'Cell')), [domainV(O13, ['$instanceof':'Cell', component:1]), domainV(N13, ['$instanceof':'Cell', component:1]), domainV(M13, ['$instanceof':'Bacterium', component:2]), domainV(_G13678, []), forall(M13), replaceConsVar(N13, '$existential'('?CELL1', component('?CELL1', M13)and instance('?CELL1', 'Cell')and forall(O13, component(O13, M13)and instance(O13, 'Cell')=>equal('?CELL1', O13)))), forall(O13)], ['BACTERIUM'=M13, 'CELL1'=N13, 'CELL2'=O13], 'Merge', 'OBJECTS', 6170, 'Anonymous', on).
mooCache(instance(W14, 'Bacterium')and inhabits(W14, X14)=>instance(X14, 'Organism'), entails(instance(W14, 'Bacterium')and inhabits(W14, X14), instance(X14, 'Organism'))and entails(not instance(X14, 'Organism')and inhabits(W14, X14), not instance(W14, 'Bacterium'))and entails(not instance(X14, 'Organism')and instance(W14, 'Bacterium'), not inhabits(W14, X14)), [domainV(X14, ['$instanceof':'Organism', inhabits:2]), domainV(W14, ['$instanceof':'Bacterium', inhabits:1]), domainV(_G5385, []), forall(W14), forall(X14)], ['BACTERIUM'=W14, 'OBJ'=X14], 'Merge', 'OBJECTS', 6172, 'Anonymous', on).
mooCache(subclass('Virus', 'Microorganism'), subclass('Virus', 'Microorganism'), [], [], 'Merge', 'OBJECTS', 6174, 'Anonymous', on).
mooCache(documentation('Virus', string('"An Organism consisting of a core of a single   nucleic acid enclosed in a protective coat of protein. A virus may replicate   only inside a host living cell. A virus exhibits some but not all of the   usual characteristics of living things."')), documentation('Virus', string('"An Organism consisting of a core of a single   nucleic acid enclosed in a protective coat of protein. A virus may replicate   only inside a host living cell. A virus exhibits some but not all of the   usual characteristics of living things."')), [], [], 'Merge', 'OBJECTS', 6176, 'Anonymous', on).
mooCache(instance(X17, 'Virus')=>exists(Y17, component(Y17, X17)and instance(Y17, 'Molecule')and forall(Z17, component(Z17, X17)and instance(Z17, 'Molecule')=>equal(Y17, Z17))), (entails(not component(Y17, X17), not instance(X17, 'Virus'))and entails(instance(X17, 'Virus')and'$existential'(Y17, '?MOL1', component('?MOL1', X17)and instance('?MOL1', 'Molecule')and forall(Z17, component(Z17, X17)and instance(Z17, 'Molecule')=>equal('?MOL1', Z17))), component(Y17, X17)))and (entails(not instance(Y17, 'Molecule'), not instance(X17, 'Virus'))and entails(instance(X17, 'Virus')and'$existential'(Y17, '?MOL1', component('?MOL1', X17)and instance('?MOL1', 'Molecule')and forall(Z17, component(Z17, X17)and instance(Z17, 'Molecule')=>equal('?MOL1', Z17))), instance(Y17, 'Molecule')))and entails(not equal(Y17, Z17)and component(Z17, X17)and instance(Z17, 'Molecule'), not instance(X17, 'Virus'))and entails((instance(X17, 'Virus')and component(Z17, X17)and instance(Z17, 'Molecule'))and'$existential'(Y17, '?MOL1', component('?MOL1', X17)and instance('?MOL1', 'Molecule')and forall(Z17, component(Z17, X17)and instance(Z17, 'Molecule')=>equal('?MOL1', Z17))), equal(Y17, Z17))and entails(instance(X17, 'Virus')and not equal(Y17, Z17)and instance(Z17, 'Molecule'), not component(Z17, X17))and entails(instance(X17, 'Virus')and not equal(Y17, Z17)and component(Z17, X17), not instance(Z17, 'Molecule')), [domainV(Z17, ['$instanceof':'Molecule', component:1]), domainV(Y17, ['$instanceof':'Molecule', component:1]), domainV(X17, ['$instanceof':'Virus', component:2]), domainV(_G13582, []), forall(X17), replaceConsVar(Y17, '$existential'('?MOL1', component('?MOL1', X17)and instance('?MOL1', 'Molecule')and forall(Z17, component(Z17, X17)and instance(Z17, 'Molecule')=>equal('?MOL1', Z17)))), forall(Z17)], ['VIRUS'=X17, 'MOL1'=Y17, 'MOL2'=Z17], 'Merge', 'OBJECTS', 6178, 'Anonymous', on).
mooCache(instance(H19, 'Virus')and inhabits(H19, I19)=>instance(I19, 'Organism'), entails(instance(H19, 'Virus')and inhabits(H19, I19), instance(I19, 'Organism'))and entails(not instance(I19, 'Organism')and inhabits(H19, I19), not instance(H19, 'Virus'))and entails(not instance(I19, 'Organism')and instance(H19, 'Virus'), not inhabits(H19, I19)), [domainV(I19, ['$instanceof':'Organism', inhabits:2]), domainV(H19, ['$instanceof':'Virus', inhabits:1]), domainV(_G5313, []), forall(H19), forall(I19)], ['VIRUS'=H19, 'OBJ'=I19], 'Merge', 'OBJECTS', 6180, 'Anonymous', on).
mooCache(instance(N20, 'Virus')and instance(O20, 'Replication')and agent(O20, N20)=>exists(P20, located(O20, P20)and instance(P20, 'Cell')), (entails((instance(N20, 'Virus')and instance(O20, 'Replication')and agent(O20, N20))and'$existential'(P20, '?CELL', located(O20, '?CELL')and instance('?CELL', 'Cell')), located(O20, P20))and entails(not located(O20, P20)and instance(O20, 'Replication')and agent(O20, N20), not instance(N20, 'Virus'))and entails(not located(O20, P20)and instance(N20, 'Virus')and agent(O20, N20), not instance(O20, 'Replication'))and entails(not located(O20, P20)and instance(N20, 'Virus')and instance(O20, 'Replication'), not agent(O20, N20)))and entails((instance(N20, 'Virus')and instance(O20, 'Replication')and agent(O20, N20))and'$existential'(P20, '?CELL', located(O20, '?CELL')and instance('?CELL', 'Cell')), instance(P20, 'Cell'))and entails(not instance(P20, 'Cell')and instance(O20, 'Replication')and agent(O20, N20), not instance(N20, 'Virus'))and entails(not instance(P20, 'Cell')and instance(N20, 'Virus')and agent(O20, N20), not instance(O20, 'Replication'))and entails(not instance(P20, 'Cell')and instance(N20, 'Virus')and instance(O20, 'Replication'), not agent(O20, N20)), [domainV(P20, ['$instanceof':'Cell', located:2]), domainV(O20, ['$instanceof':'Replication', agent:1, located:1]), domainV(N20, ['$instanceof':'Virus', agent:2]), domainV(_G9365, []), forall(N20), forall(O20), replaceConsVar(P20, '$existential'('?CELL', located(O20, '?CELL')and instance('?CELL', 'Cell')))], ['VIRUS'=N20, 'PROC'=O20, 'CELL'=P20], 'Merge', 'OBJECTS', 6182, 'Anonymous', on).
mooCache(subclass('Vertebrate', 'Animal'), subclass('Vertebrate', 'Animal'), [], [], 'Merge', 'OBJECTS', 6184, 'Anonymous', on).
mooCache(documentation('Vertebrate', string('"An Animal which has a spinal column."')), documentation('Vertebrate', string('"An Animal which has a spinal column."')), [], [], 'Merge', 'OBJECTS', 6186, 'Anonymous', on).
mooCache(subclass('Invertebrate', 'Animal'), subclass('Invertebrate', 'Animal'), [], [], 'Merge', 'OBJECTS', 6188, 'Anonymous', on).
mooCache(disjoint('Invertebrate', 'Vertebrate'), disjoint('Invertebrate', 'Vertebrate'), [], [], 'Merge', 'OBJECTS', 6190, 'Anonymous', on).
mooCache(disjointDecomposition('Invertebrate', 'Worm', 'Mollusk', 'Arthropod'), disjointDecomposition('Invertebrate', 'Worm', 'Mollusk', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6192, 'Anonymous', on).
mooCache(documentation('Invertebrate', string('"An Animal which has no spinal column."')), documentation('Invertebrate', string('"An Animal which has no spinal column."')), [], [], 'Merge', 'OBJECTS', 6194, 'Anonymous', on).
mooCache(subclass('Worm', 'Invertebrate'), subclass('Worm', 'Invertebrate'), [], [], 'Merge', 'OBJECTS', 6196, 'Anonymous', on).
mooCache(documentation('Worm', string('"Long, narrow, soft-bodied Invertebrates."')), documentation('Worm', string('"Long, narrow, soft-bodied Invertebrates."')), [], [], 'Merge', 'OBJECTS', 6198, 'Anonymous', on).
mooCache(subclass('Mollusk', 'Invertebrate'), subclass('Mollusk', 'Invertebrate'), [], [], 'Merge', 'OBJECTS', 6200, 'Anonymous', on).
mooCache(documentation('Mollusk', string('"Soft-bodied Invertebrate that is usually   contained in a shell.  Includes oysters, clams, mussels, snails, slugs,   octopi, and squid."')), documentation('Mollusk', string('"Soft-bodied Invertebrate that is usually   contained in a shell.  Includes oysters, clams, mussels, snails, slugs,   octopi, and squid."')), [], [], 'Merge', 'OBJECTS', 6202, 'Anonymous', on).
mooCache(subclass('Arthropod', 'Invertebrate'), subclass('Arthropod', 'Invertebrate'), [], [], 'Merge', 'OBJECTS', 6204, 'Anonymous', on).
mooCache(disjointDecomposition('Arthropod', 'Arachnid', 'Myriapod', 'Insect', 'Crustacean'), disjointDecomposition('Arthropod', 'Arachnid', 'Myriapod', 'Insect', 'Crustacean'), [], [], 'Merge', 'OBJECTS', 6206, 'Anonymous', on).
mooCache(documentation('Arthropod', string('"A Class of Invertebrate that includes   Arachnids and Insects."')), documentation('Arthropod', string('"A Class of Invertebrate that includes   Arachnids and Insects."')), [], [], 'Merge', 'OBJECTS', 6208, 'Anonymous', on).
mooCache(subclass('Arachnid', 'Arthropod'), subclass('Arachnid', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6210, 'Anonymous', on).
mooCache(documentation('Arachnid', string('"A Class of Arthropods that includes   ticks and spiders."')), documentation('Arachnid', string('"A Class of Arthropods that includes   ticks and spiders."')), [], [], 'Merge', 'OBJECTS', 6212, 'Anonymous', on).
mooCache(subclass('Myriapod', 'Arthropod'), subclass('Myriapod', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6214, 'Anonymous', on).
mooCache(documentation('Myriapod', string('"A Class of Arthropods that includes   centipedes and millipedes."')), documentation('Myriapod', string('"A Class of Arthropods that includes   centipedes and millipedes."')), [], [], 'Merge', 'OBJECTS', 6216, 'Anonymous', on).
mooCache(subclass('Insect', 'Arthropod'), subclass('Insect', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6218, 'Anonymous', on).
mooCache(documentation('Insect', string('"A Class of small Arthropods that are   air-breathing and that are distinguished by appearance."')), documentation('Insect', string('"A Class of small Arthropods that are   air-breathing and that are distinguished by appearance."')), [], [], 'Merge', 'OBJECTS', 6220, 'Anonymous', on).
mooCache(subclass('Crustacean', 'Arthropod'), subclass('Crustacean', 'Arthropod'), [], [], 'Merge', 'OBJECTS', 6222, 'Anonymous', on).
mooCache(documentation('Crustacean', string('"A Class of Arthropods that mainly dwells   in water and has a segmented body and a chitinous exoskeleton.  Includes   lobsters, crabs, shrimp, and barnacles."')), documentation('Crustacean', string('"A Class of Arthropods that mainly dwells   in water and has a segmented body and a chitinous exoskeleton.  Includes   lobsters, crabs, shrimp, and barnacles."')), [], [], 'Merge', 'OBJECTS', 6224, 'Anonymous', on).
mooCache(subclass('ColdBloodedVertebrate', 'Vertebrate'), subclass('ColdBloodedVertebrate', 'Vertebrate'), [], [], 'Merge', 'OBJECTS', 6226, 'Anonymous', on).
mooCache(disjointDecomposition('ColdBloodedVertebrate', 'Amphibian', 'Fish', 'Reptile'), disjointDecomposition('ColdBloodedVertebrate', 'Amphibian', 'Fish', 'Reptile'), [], [], 'Merge', 'OBJECTS', 6228, 'Anonymous', on).
mooCache(documentation('ColdBloodedVertebrate', string('"Vertebrates whose body temperature   is not internally regulated."')), documentation('ColdBloodedVertebrate', string('"Vertebrates whose body temperature   is not internally regulated."')), [], [], 'Merge', 'OBJECTS', 6230, 'Anonymous', on).
mooCache(subclass('WarmBloodedVertebrate', 'Vertebrate'), subclass('WarmBloodedVertebrate', 'Vertebrate'), [], [], 'Merge', 'OBJECTS', 6232, 'Anonymous', on).
mooCache(disjoint('WarmBloodedVertebrate', 'ColdBloodedVertebrate'), disjoint('WarmBloodedVertebrate', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6234, 'Anonymous', on).
mooCache(documentation('WarmBloodedVertebrate', string('"Vertebrates whose body temperature   is internally regulated."')), documentation('WarmBloodedVertebrate', string('"Vertebrates whose body temperature   is internally regulated."')), [], [], 'Merge', 'OBJECTS', 6236, 'Anonymous', on).
mooCache(subclass('Alga', 'Plant'), subclass('Alga', 'Plant'), [], [], 'Merge', 'OBJECTS', 6238, 'Anonymous', on).
mooCache(documentation('Alga', string('"A chiefly aquatic plant that contains chlorophyll,   but does not form embryos during development and lacks vascular tissue."')), documentation('Alga', string('"A chiefly aquatic plant that contains chlorophyll,   but does not form embryos during development and lacks vascular tissue."')), [], [], 'Merge', 'OBJECTS', 6240, 'Anonymous', on).
mooCache(instance(X3, 'Alga')=>exists(Y3, inhabits(X3, Y3)and instance(Y3, 'Water')), (entails(not inhabits(X3, Y3), not instance(X3, 'Alga'))and entails(instance(X3, 'Alga')and'$existential'(Y3, '?WATER', inhabits(X3, '?WATER')and instance('?WATER', 'Water')), inhabits(X3, Y3)))and entails(not instance(Y3, 'Water'), not instance(X3, 'Alga'))and entails(instance(X3, 'Alga')and'$existential'(Y3, '?WATER', inhabits(X3, '?WATER')and instance('?WATER', 'Water')), instance(Y3, 'Water')), [domainV(Y3, ['$instanceof':'Water', inhabits:2]), domainV(X3, ['$instanceof':'Alga', inhabits:1]), domainV(_G6621, []), forall(X3), replaceConsVar(Y3, '$existential'('?WATER', inhabits(X3, '?WATER')and instance('?WATER', 'Water')))], ['ALGA'=X3, 'WATER'=Y3], 'Merge', 'OBJECTS', 6242, 'Anonymous', on).
mooCache(subclass('Amphibian', 'ColdBloodedVertebrate'), subclass('Amphibian', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6244, 'Anonymous', on).
mooCache(documentation('Amphibian', string('"A cold-blooded, smooth-skinned Vertebrate   which characteristically hatches as an aquatic larva, breathing by   gills.  When mature, the Amphibian breathes with Lungs."')), documentation('Amphibian', string('"A cold-blooded, smooth-skinned Vertebrate   which characteristically hatches as an aquatic larva, breathing by   gills.  When mature, the Amphibian breathes with Lungs."')), [], [], 'Merge', 'OBJECTS', 6246, 'Anonymous', on).
mooCache(subclass('Bird', 'WarmBloodedVertebrate'), subclass('Bird', 'WarmBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6248, 'Anonymous', on).
mooCache(disjoint('Bird', 'Mammal'), disjoint('Bird', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6250, 'Anonymous', on).
mooCache(documentation('Bird', string('"A Vertebrate having a constant body temperature   and characterized by the presence of feathers."')), documentation('Bird', string('"A Vertebrate having a constant body temperature   and characterized by the presence of feathers."')), [], [], 'Merge', 'OBJECTS', 6252, 'Anonymous', on).
mooCache(subclass('Fish', 'ColdBloodedVertebrate'), subclass('Fish', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6254, 'Anonymous', on).
mooCache(documentation('Fish', string('"A cold-blooded aquatic Vertebrate characterized by   fins and breathing by gills. Included here are Fish having either a bony   skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.    Also included are those Fish lacking a jaw, such as a lamprey or   hagfish."')), documentation('Fish', string('"A cold-blooded aquatic Vertebrate characterized by   fins and breathing by gills. Included here are Fish having either a bony   skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.    Also included are those Fish lacking a jaw, such as a lamprey or   hagfish."')), [], [], 'Merge', 'OBJECTS', 6256, 'Anonymous', on).
mooCache(instance(Z9, 'Fish')=>exists(A10, inhabits(Z9, A10)and instance(A10, 'Water')), (entails(not inhabits(Z9, A10), not instance(Z9, 'Fish'))and entails(instance(Z9, 'Fish')and'$existential'(A10, '?WATER', inhabits(Z9, '?WATER')and instance('?WATER', 'Water')), inhabits(Z9, A10)))and entails(not instance(A10, 'Water'), not instance(Z9, 'Fish'))and entails(instance(Z9, 'Fish')and'$existential'(A10, '?WATER', inhabits(Z9, '?WATER')and instance('?WATER', 'Water')), instance(A10, 'Water')), [domainV(A10, ['$instanceof':'Water', inhabits:2]), domainV(Z9, ['$instanceof':'Fish', inhabits:1]), domainV(_G6621, []), forall(Z9), replaceConsVar(A10, '$existential'('?WATER', inhabits(Z9, '?WATER')and instance('?WATER', 'Water')))], ['FISH'=Z9, 'WATER'=A10], 'Merge', 'OBJECTS', 6258, 'Anonymous', on).
mooCache(subclass('Fungus', 'Plant'), subclass('Fungus', 'Plant'), [], [], 'Merge', 'OBJECTS', 6260, 'Anonymous', on).
mooCache(documentation('Fungus', string('"A eukaryotic Organism characterized by the   absence of chlorophyll and the presence of rigid cell walls. Included   here are both slime molds and true fungi such as yeasts, molds, mildews,   and mushrooms."')), documentation('Fungus', string('"A eukaryotic Organism characterized by the   absence of chlorophyll and the presence of rigid cell walls. Included   here are both slime molds and true fungi such as yeasts, molds, mildews,   and mushrooms."')), [], [], 'Merge', 'OBJECTS', 6262, 'Anonymous', on).
mooCache(instance(J12, 'Fungus')and inhabits(J12, K12)=>instance(K12, 'Organism'), entails(instance(J12, 'Fungus')and inhabits(J12, K12), instance(K12, 'Organism'))and entails(not instance(K12, 'Organism')and inhabits(J12, K12), not instance(J12, 'Fungus'))and entails(not instance(K12, 'Organism')and instance(J12, 'Fungus'), not inhabits(J12, K12)), [domainV(K12, ['$instanceof':'Organism', inhabits:2]), domainV(J12, ['$instanceof':'Fungus', inhabits:1]), domainV(_G5331, []), forall(J12), forall(K12)], ['FUNGUS'=J12, 'OBJ'=K12], 'Merge', 'OBJECTS', 6264, 'Anonymous', on).
mooCache(subclass('Mammal', 'WarmBloodedVertebrate'), subclass('Mammal', 'WarmBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6266, 'Anonymous', on).
mooCache(disjointDecomposition('Mammal', 'AquaticMammal', 'HoofedMammal', 'Marsupial', 'Rodent', 'Primate'), disjointDecomposition('Mammal', 'AquaticMammal', 'HoofedMammal', 'Marsupial', 'Rodent', 'Primate'), [], [], 'Merge', 'OBJECTS', 6268, 'Anonymous', on).
mooCache(documentation('Mammal', string('"A Vertebrate having a constant body temperature   and characterized by the presence of hair, mammary glands, and sweat   glands."')), documentation('Mammal', string('"A Vertebrate having a constant body temperature   and characterized by the presence of hair, mammary glands, and sweat   glands."')), [], [], 'Merge', 'OBJECTS', 6270, 'Anonymous', on).
mooCache(subclass('AquaticMammal', 'Mammal'), subclass('AquaticMammal', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6272, 'Anonymous', on).
mooCache(documentation('AquaticMammal', string('"The Class of Mammals that dwell chiefly   in the water.  Includes whales, dolphins, manatees, seals, and walruses."')), documentation('AquaticMammal', string('"The Class of Mammals that dwell chiefly   in the water.  Includes whales, dolphins, manatees, seals, and walruses."')), [], [], 'Merge', 'OBJECTS', 6274, 'Anonymous', on).
mooCache(subclass('HoofedMammal', 'Mammal'), subclass('HoofedMammal', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6276, 'Anonymous', on).
mooCache(documentation('HoofedMammal', string('"The Class of Mammals with hooves.    Includes horses, cows, sheep, pigs, antelope, etc."')), documentation('HoofedMammal', string('"The Class of Mammals with hooves.    Includes horses, cows, sheep, pigs, antelope, etc."')), [], [], 'Merge', 'OBJECTS', 6278, 'Anonymous', on).
mooCache(subclass('Marsupial', 'Mammal'), subclass('Marsupial', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6280, 'Anonymous', on).
mooCache(documentation('Marsupial', string('"The Class of Mammals which have a pouch for   their young."')), documentation('Marsupial', string('"The Class of Mammals which have a pouch for   their young."')), [], [], 'Merge', 'OBJECTS', 6282, 'Anonymous', on).
mooCache(subclass('Carnivore', 'Mammal'), subclass('Carnivore', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6284, 'Anonymous', on).
mooCache(documentation('Carnivore', string('"The Class of flesh-eating Mammals.  Members   of this Class typically have four or five claws on each paw.  Includes   cats, dogs, bears, racoons, and skunks."')), documentation('Carnivore', string('"The Class of flesh-eating Mammals.  Members   of this Class typically have four or five claws on each paw.  Includes   cats, dogs, bears, racoons, and skunks."')), [], [], 'Merge', 'OBJECTS', 6286, 'Anonymous', on).
mooCache(subclass('Canine', 'Carnivore'), subclass('Canine', 'Carnivore'), [], [], 'Merge', 'OBJECTS', 6288, 'Anonymous', on).
mooCache(disjoint('Canine', 'Feline'), disjoint('Canine', 'Feline'), [], [], 'Merge', 'OBJECTS', 6290, 'Anonymous', on).
mooCache(documentation('Canine', string('"The Class of Carnivores with completely   separable toes, nonretractable claws, and long muzzles."')), documentation('Canine', string('"The Class of Carnivores with completely   separable toes, nonretractable claws, and long muzzles."')), [], [], 'Merge', 'OBJECTS', 6292, 'Anonymous', on).
mooCache(subclass('Feline', 'Carnivore'), subclass('Feline', 'Carnivore'), [], [], 'Merge', 'OBJECTS', 6294, 'Anonymous', on).
mooCache(documentation('Feline', string('"The Class of Carnivores with completely  separable toes, nonretractable claws, slim bodies, and rounded heads."')), documentation('Feline', string('"The Class of Carnivores with completely  separable toes, nonretractable claws, slim bodies, and rounded heads."')), [], [], 'Merge', 'OBJECTS', 6296, 'Anonymous', on).
mooCache(subclass('Rodent', 'Mammal'), subclass('Rodent', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6298, 'Anonymous', on).
mooCache(documentation('Rodent', string('"The Class of Mammals with one or two pairs   of incisors for gnawing.  Includes rats, mice, guinea pigs, and   rabbits."')), documentation('Rodent', string('"The Class of Mammals with one or two pairs   of incisors for gnawing.  Includes rats, mice, guinea pigs, and   rabbits."')), [], [], 'Merge', 'OBJECTS', 6300, 'Anonymous', on).
mooCache(subclass('Primate', 'Mammal'), subclass('Primate', 'Mammal'), [], [], 'Merge', 'OBJECTS', 6302, 'Anonymous', on).
mooCache(disjointDecomposition('Primate', 'Ape', 'Monkey', 'Hominid'), disjointDecomposition('Primate', 'Ape', 'Monkey', 'Hominid'), [], [], 'Merge', 'OBJECTS', 6304, 'Anonymous', on).
mooCache(documentation('Primate', string('"The Class of Mammals which are   Primates."')), documentation('Primate', string('"The Class of Mammals which are   Primates."')), [], [], 'Merge', 'OBJECTS', 6306, 'Anonymous', on).
mooCache(subclass('Ape', 'Primate'), subclass('Ape', 'Primate'), [], [], 'Merge', 'OBJECTS', 6308, 'Anonymous', on).
mooCache(documentation('Ape', string('"Various Primates with no tails or only short   tails."')), documentation('Ape', string('"Various Primates with no tails or only short   tails."')), [], [], 'Merge', 'OBJECTS', 6310, 'Anonymous', on).
mooCache(subclass('Monkey', 'Primate'), subclass('Monkey', 'Primate'), [], [], 'Merge', 'OBJECTS', 6312, 'Anonymous', on).
mooCache(documentation('Monkey', string('"Various Primates with relatively long   tails."')), documentation('Monkey', string('"Various Primates with relatively long   tails."')), [], [], 'Merge', 'OBJECTS', 6314, 'Anonymous', on).
mooCache(subclass('Hominid', 'Primate'), subclass('Hominid', 'Primate'), [], [], 'Merge', 'OBJECTS', 6316, 'Anonymous', on).
mooCache(documentation('Hominid', string('"Includes Humans and relatively recent   ancestors of Humans."')), documentation('Hominid', string('"Includes Humans and relatively recent   ancestors of Humans."')), [], [], 'Merge', 'OBJECTS', 6318, 'Anonymous', on).
mooCache(subclass('Human', 'Hominid'), subclass('Human', 'Hominid'), [], [], 'Merge', 'OBJECTS', 6320, 'Anonymous', on).
mooCache(subclass('Human', 'CognitiveAgent'), subclass('Human', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6322, 'Anonymous', on).
mooCache(documentation('Human', string('"Modern man, the only remaining species of the Homo   genus."')), documentation('Human', string('"Modern man, the only remaining species of the Homo   genus."')), [], [], 'Merge', 'OBJECTS', 6324, 'Anonymous', on).
mooCache(subclass('Reptile', 'ColdBloodedVertebrate'), subclass('Reptile', 'ColdBloodedVertebrate'), [], [], 'Merge', 'OBJECTS', 6326, 'Anonymous', on).
mooCache(documentation('Reptile', string('"A ColdBloodedVertebrate having an external   covering of scales or horny plates.  Reptiles breathe by means of   Lungs and generally lay eggs."')), documentation('Reptile', string('"A ColdBloodedVertebrate having an external   covering of scales or horny plates.  Reptiles breathe by means of   Lungs and generally lay eggs."')), [], [], 'Merge', 'OBJECTS', 6328, 'Anonymous', on).
mooCache(subclass('BiologicallyActiveSubstance', 'Substance'), subclass('BiologicallyActiveSubstance', 'Substance'), [], [], 'Merge', 'OBJECTS', 6334, 'Anonymous', on).
mooCache(documentation('BiologicallyActiveSubstance', string('"A Substance that is   capable of inducing a change in the structure or functioning of an   Organism.  This Class includes Substances used in the treatment,   diagnosis, prevention or analysis of normal and abnormal body function.    This Class also includes Substances that occur naturally in the body   and are administered therapeutically.  Finally, BiologicallyActiveSubstance   includes Nutrients, most drugs of abuse, and agents that require special   handling because of their toxicity."')), documentation('BiologicallyActiveSubstance', string('"A Substance that is   capable of inducing a change in the structure or functioning of an   Organism.  This Class includes Substances used in the treatment,   diagnosis, prevention or analysis of normal and abnormal body function.    This Class also includes Substances that occur naturally in the body   and are administered therapeutically.  Finally, BiologicallyActiveSubstance   includes Nutrients, most drugs of abuse, and agents that require special   handling because of their toxicity."')), [], [], 'Merge', 'OBJECTS', 6336, 'Anonymous', on).
mooCache(subclass('Nutrient', 'BiologicallyActiveSubstance'), subclass('Nutrient', 'BiologicallyActiveSubstance'), [], [], 'Merge', 'OBJECTS', 6338, 'Anonymous', on).
mooCache(documentation('Nutrient', string('"A BiologicallyActiveSubstance produced or   required by an Organism, of primary interest because of its role in the   biologic functioning of the Organism."')), documentation('Nutrient', string('"A BiologicallyActiveSubstance produced or   required by an Organism, of primary interest because of its role in the   biologic functioning of the Organism."')), [], [], 'Merge', 'OBJECTS', 6340, 'Anonymous', on).
mooCache(subclass('Protein', 'Nutrient'), subclass('Protein', 'Nutrient'), [], [], 'Merge', 'OBJECTS', 6342, 'Anonymous', on).
mooCache(documentation('Protein', string('"A Nutrient made up of amino acids joined by   peptide bonds."')), documentation('Protein', string('"A Nutrient made up of amino acids joined by   peptide bonds."')), [], [], 'Merge', 'OBJECTS', 6344, 'Anonymous', on).
mooCache(subclass('Enzyme', 'Protein'), subclass('Enzyme', 'Protein'), [], [], 'Merge', 'OBJECTS', 6346, 'Anonymous', on).
mooCache(documentation('Enzyme', string('"A complex Protein that is produced by living   cells and which catalyzes specific biochemical reactions. There are six   main types of enzymes:  oxidoreductases, transferases, hydrolases,   lyases, isomerases, and ligases."')), documentation('Enzyme', string('"A complex Protein that is produced by living   cells and which catalyzes specific biochemical reactions. There are six   main types of enzymes:  oxidoreductases, transferases, hydrolases,   lyases, isomerases, and ligases."')), [], [], 'Merge', 'OBJECTS', 6348, 'Anonymous', on).
mooCache(subclass('Vitamin', 'Nutrient'), subclass('Vitamin', 'Nutrient'), [], [], 'Merge', 'OBJECTS', 6350, 'Anonymous', on).
mooCache(documentation('Vitamin', string('"A BiologicallyActiveSubstance present in natural   products or made synthetically, which is essential in the diet of Humans   and other higher Animals.  Included here are Vitamin precursors and   provitamins."')), documentation('Vitamin', string('"A BiologicallyActiveSubstance present in natural   products or made synthetically, which is essential in the diet of Humans   and other higher Animals.  Included here are Vitamin precursors and   provitamins."')), [], [], 'Merge', 'OBJECTS', 6352, 'Anonymous', on).
mooCache(subclass('Metal', 'PureSubstance'), subclass('Metal', 'PureSubstance'), [], [], 'Merge', 'OBJECTS', 6354, 'Anonymous', on).
mooCache(documentation('Metal', string('"A Metal is a PureSubstance that conducts heat and   electricity, is shiny and reflects many colors of light, and can be hammered   into sheets or drawn into wire.  About 80% of the known chemical elements   (ElementalSubstances) are metals."')), documentation('Metal', string('"A Metal is a PureSubstance that conducts heat and   electricity, is shiny and reflects many colors of light, and can be hammered   into sheets or drawn into wire.  About 80% of the known chemical elements   (ElementalSubstances) are metals."')), [], [], 'Merge', 'OBJECTS', 6356, 'Anonymous', on).
mooCache(subclass('BodySubstance', 'Mixture'), subclass('BodySubstance', 'Mixture'), [], [], 'Merge', 'OBJECTS', 6358, 'Anonymous', on).
mooCache(documentation('BodySubstance', string('"Extracellular material and mixtures of   cells and extracellular material that are produced, excreted or accreted   by an Organism.  Included here are Substances such as saliva, dental   enamel, sweat, and gastric acid."')), documentation('BodySubstance', string('"Extracellular material and mixtures of   cells and extracellular material that are produced, excreted or accreted   by an Organism.  Included here are Substances such as saliva, dental   enamel, sweat, and gastric acid."')), [], [], 'Merge', 'OBJECTS', 6360, 'Anonymous', on).
mooCache(subclass('Hormone', 'BodySubstance'), subclass('Hormone', 'BodySubstance'), [], [], 'Merge', 'OBJECTS', 6362, 'Anonymous', on).
mooCache(documentation('Hormone', string('"In Animals, a chemical secreted by an   endocrine gland whose products are released into the circulating fluid.    Plant hormones or synthetic hormones which are used only to alter or   control various physiologic processes, e.g., reproductive control agents,   are assigned to the Class BiologicallyActiveSubstance. Hormones act as   chemical messengers and regulate various physiologic processes such as   growth, reproduction, metabolism, etc.  They usually fall into two broad   categories, viz. steroid hormones and peptide hormones."')), documentation('Hormone', string('"In Animals, a chemical secreted by an   endocrine gland whose products are released into the circulating fluid.    Plant hormones or synthetic hormones which are used only to alter or   control various physiologic processes, e.g., reproductive control agents,   are assigned to the Class BiologicallyActiveSubstance. Hormones act as   chemical messengers and regulate various physiologic processes such as   growth, reproduction, metabolism, etc.  They usually fall into two broad   categories, viz. steroid hormones and peptide hormones."')), [], [], 'Merge', 'OBJECTS', 6364, 'Anonymous', on).
mooCache(subclass('Blood', 'BodySubstance'), subclass('Blood', 'BodySubstance'), [], [], 'Merge', 'OBJECTS', 6366, 'Anonymous', on).
mooCache(documentation('Blood', string('"A fluid present in Animals that transports   Nutrients to and waste products away from various BodyParts."')), documentation('Blood', string('"A fluid present in Animals that transports   Nutrients to and waste products away from various BodyParts."')), [], [], 'Merge', 'OBJECTS', 6368, 'Anonymous', on).
mooCache(subclass('ToxicOrganism', 'Organism'), subclass('ToxicOrganism', 'Organism'), [], [], 'Merge', 'OBJECTS', 6370, 'Anonymous', on).
mooCache(documentation('ToxicOrganism', string('"The Class of Organisms which are   poisonous to other Organisms."')), documentation('ToxicOrganism', string('"The Class of Organisms which are   poisonous to other Organisms."')), [], [], 'Merge', 'OBJECTS', 6372, 'Anonymous', on).
mooCache(instance(P10, 'ToxicOrganism')=>exists(Q10, instance(Q10, 'BiologicallyActiveSubstance')and part(Q10, P10)), (entails(not instance(Q10, 'BiologicallyActiveSubstance'), not instance(P10, 'ToxicOrganism'))and entails(instance(P10, 'ToxicOrganism')and'$existential'(Q10, '?SUBSTANCE', instance('?SUBSTANCE', 'BiologicallyActiveSubstance')and part('?SUBSTANCE', P10)), instance(Q10, 'BiologicallyActiveSubstance')))and entails(not part(Q10, P10), not instance(P10, 'ToxicOrganism'))and entails(instance(P10, 'ToxicOrganism')and'$existential'(Q10, '?SUBSTANCE', instance('?SUBSTANCE', 'BiologicallyActiveSubstance')and part('?SUBSTANCE', P10)), part(Q10, P10)), [domainV(Q10, ['$instanceof':'BiologicallyActiveSubstance', part:1]), domainV(P10, ['$instanceof':'ToxicOrganism', part:2]), domainV(_G6918, []), forall(P10), replaceConsVar(Q10, '$existential'('?SUBSTANCE', instance('?SUBSTANCE', 'BiologicallyActiveSubstance')and part('?SUBSTANCE', P10)))], ['ORGANISM'=P10, 'SUBSTANCE'=Q10], 'Merge', 'OBJECTS', 6374, 'Anonymous', on).
mooCache(subclass('Food', 'Object'), subclass('Food', 'Object'), [], [], 'Merge', 'OBJECTS', 6376, 'Anonymous', on).
mooCache(documentation('Food', string('"Any Object containing Nutrients, such as   carbohydrates, proteins, and fats, that can be ingested by a living   Organism and metabolized into energy and body tissue."')), documentation('Food', string('"Any Object containing Nutrients, such as   carbohydrates, proteins, and fats, that can be ingested by a living   Organism and metabolized into energy and body tissue."')), [], [], 'Merge', 'OBJECTS', 6378, 'Anonymous', on).
mooCache(instance(C13, 'Food')=>exists(D13, instance(D13, 'Nutrient')and part(D13, C13)), (entails(not instance(D13, 'Nutrient'), not instance(C13, 'Food'))and entails(instance(C13, 'Food')and'$existential'(D13, '?NUTRIENT', instance('?NUTRIENT', 'Nutrient')and part('?NUTRIENT', C13)), instance(D13, 'Nutrient')))and entails(not part(D13, C13), not instance(C13, 'Food'))and entails(instance(C13, 'Food')and'$existential'(D13, '?NUTRIENT', instance('?NUTRIENT', 'Nutrient')and part('?NUTRIENT', C13)), part(D13, C13)), [domainV(D13, ['$instanceof':'Nutrient', part:1]), domainV(C13, ['$instanceof':'Food', part:2]), domainV(_G6684, []), forall(C13), replaceConsVar(D13, '$existential'('?NUTRIENT', instance('?NUTRIENT', 'Nutrient')and part('?NUTRIENT', C13)))], ['FOOD'=C13, 'NUTRIENT'=D13], 'Merge', 'OBJECTS', 6380, 'Anonymous', on).
mooCache(instance(R14, 'Food')=>forall(S14, part(S14, R14)=>exists(T14, exists(U14, part(S14, U14)and part(U14, T14)and instance(T14, 'Organism')))), (entails(part(S14, R14)and not part(S14, U14), not instance(R14, 'Food'))and entails(instance(R14, 'Food')and not part(S14, U14), not part(S14, R14))and entails((instance(R14, 'Food')and part(S14, R14))and'$existential'(U14, '?PART2', part(S14, '?PART2')and part('?PART2', T14)and instance(T14, 'Organism')), part(S14, U14)))and (entails(part(S14, R14)and not part(U14, T14), not instance(R14, 'Food'))and entails(instance(R14, 'Food')and not part(U14, T14), not part(S14, R14))and entails(((instance(R14, 'Food')and part(S14, R14))and'$existential'(T14, '?ORGANISM', exists(U14, part(S14, U14)and part(U14, '?ORGANISM')and instance('?ORGANISM', 'Organism'))))and'$existential'(U14, '?PART2', part(S14, '?PART2')and part('?PART2', T14)and instance(T14, 'Organism')), part(U14, T14)))and entails(part(S14, R14)and not instance(T14, 'Organism'), not instance(R14, 'Food'))and entails(instance(R14, 'Food')and not instance(T14, 'Organism'), not part(S14, R14))and entails(((instance(R14, 'Food')and part(S14, R14))and'$existential'(T14, '?ORGANISM', exists(U14, part(S14, U14)and part(U14, '?ORGANISM')and instance('?ORGANISM', 'Organism'))))and'$existential'(U14, '?PART2', part(S14, '?PART2')and part('?PART2', T14)and instance(T14, 'Organism')), instance(T14, 'Organism')), [domainV(U14, [part:1, part:2]), domainV(T14, ['$instanceof':'Organism', part:2]), domainV(S14, [part:1]), domainV(R14, ['$instanceof':'Food', part:2]), domainV(_G13184, []), forall(R14), forall(S14), replaceConsVar(T14, '$existential'('?ORGANISM', exists(U14, part(S14, U14)and part(U14, '?ORGANISM')and instance('?ORGANISM', 'Organism')))), replaceConsVar(U14, '$existential'('?PART2', part(S14, '?PART2')and part('?PART2', T14)and instance(T14, 'Organism')))], ['FOOD'=R14, 'PART1'=S14, 'PART2'=U14, 'ORGANISM'=T14], 'Merge', 'OBJECTS', 6382, 'Anonymous', on).
mooCache(subclass('AnatomicalStructure', 'CorpuscularObject'), subclass('AnatomicalStructure', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6384, 'Anonymous', on).
mooCache(disjoint('AnatomicalStructure', 'Organism'), disjoint('AnatomicalStructure', 'Organism'), [], [], 'Merge', 'OBJECTS', 6386, 'Anonymous', on).
mooCache(documentation('AnatomicalStructure', string('"A normal or pathological part of the   anatomy or structural organization of an Organism."')), documentation('AnatomicalStructure', string('"A normal or pathological part of the   anatomy or structural organization of an Organism."')), [], [], 'Merge', 'OBJECTS', 6388, 'Anonymous', on).
mooCache(instance(F18, 'AnatomicalStructure')=>exists(G18, instance(G18, 'Organism')and part(F18, G18)), (entails(not instance(G18, 'Organism'), not instance(F18, 'AnatomicalStructure'))and entails(instance(F18, 'AnatomicalStructure')and'$existential'(G18, '?ORGANISM', instance('?ORGANISM', 'Organism')and part(F18, '?ORGANISM')), instance(G18, 'Organism')))and entails(not part(F18, G18), not instance(F18, 'AnatomicalStructure'))and entails(instance(F18, 'AnatomicalStructure')and'$existential'(G18, '?ORGANISM', instance('?ORGANISM', 'Organism')and part(F18, '?ORGANISM')), part(F18, G18)), [domainV(G18, ['$instanceof':'Organism', part:2]), domainV(F18, ['$instanceof':'AnatomicalStructure', part:1]), domainV(_G6774, []), forall(F18), replaceConsVar(G18, '$existential'('?ORGANISM', instance('?ORGANISM', 'Organism')and part(F18, '?ORGANISM')))], ['ANAT'=F18, 'ORGANISM'=G18], 'Merge', 'OBJECTS', 6390, 'Anonymous', on).
mooCache(subclass('Egg', 'AnatomicalStructure'), subclass('Egg', 'AnatomicalStructure'), [], [], 'Merge', 'OBJECTS', 6392, 'Anonymous', on).
mooCache(documentation(string('"Reproductive structure of Animals.  Consists of an   Embryonic Object and a nutritive/protective envelope."')), documentation(string('"Reproductive structure of Animals.  Consists of an   Embryonic Object and a nutritive/protective envelope."')), [], [], 'Merge', 'OBJECTS', 6394, 'Anonymous', on).
mooCache(subclass('BodyPart', 'AnatomicalStructure'), subclass('BodyPart', 'AnatomicalStructure'), [], [], 'Merge', 'OBJECTS', 6396, 'Anonymous', on).
mooCache(documentation('BodyPart', string('"A collection of Cells and Tissues which   are localized to a specific area. The instances of this Class range   from gross structures to small components of complex Organs."')), documentation('BodyPart', string('"A collection of Cells and Tissues which   are localized to a specific area. The instances of this Class range   from gross structures to small components of complex Organs."')), [], [], 'Merge', 'OBJECTS', 6398, 'Anonymous', on).
mooCache(instance(W21, 'BodyPart')=>exists(X21, instance(X21, 'Cell')and part(X21, W21)), (entails(not instance(X21, 'Cell'), not instance(W21, 'BodyPart'))and entails(instance(W21, 'BodyPart')and'$existential'(X21, '?CELL', instance('?CELL', 'Cell')and part('?CELL', W21)), instance(X21, 'Cell')))and entails(not part(X21, W21), not instance(W21, 'BodyPart'))and entails(instance(W21, 'BodyPart')and'$existential'(X21, '?CELL', instance('?CELL', 'Cell')and part('?CELL', W21)), part(X21, W21)), [domainV(X21, ['$instanceof':'Cell', part:1]), domainV(W21, ['$instanceof':'BodyPart', part:2]), domainV(_G6612, []), forall(W21), replaceConsVar(X21, '$existential'('?CELL', instance('?CELL', 'Cell')and part('?CELL', W21)))], ['PART'=W21, 'CELL'=X21], 'Merge', 'OBJECTS', 6400, 'Anonymous', on).
mooCache(subclass('BodyCovering', 'BodyPart'), subclass('BodyCovering', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6402, 'Anonymous', on).
mooCache(documentation('BodyCovering', string('"Any BodyPart which is a covering of another   BodyPart or of an entire Organism."')), documentation('BodyCovering', string('"Any BodyPart which is a covering of another   BodyPart or of an entire Organism."')), [], [], 'Merge', 'OBJECTS', 6404, 'Anonymous', on).
mooCache(instance(I24, 'BodyCovering')=>exists(J24, superficialPart(I24, J24)and (instance(J24, 'Organism')or instance(J24, 'BodyPart'))), (entails(not superficialPart(I24, J24), not instance(I24, 'BodyCovering'))and entails(instance(I24, 'BodyCovering')and'$existential'(J24, '?BODY', superficialPart(I24, '?BODY')and (instance('?BODY', 'Organism')or instance('?BODY', 'BodyPart'))), superficialPart(I24, J24)))and entails(not instance(J24, 'Organism')and not instance(J24, 'BodyPart'), not instance(I24, 'BodyCovering'))and entails((instance(I24, 'BodyCovering')and not instance(J24, 'BodyPart'))and'$existential'(J24, '?BODY', superficialPart(I24, '?BODY')and (instance('?BODY', 'Organism')or instance('?BODY', 'BodyPart'))), instance(J24, 'Organism'))and entails((instance(I24, 'BodyCovering')and not instance(J24, 'Organism'))and'$existential'(J24, '?BODY', superficialPart(I24, '?BODY')and (instance('?BODY', 'Organism')or instance('?BODY', 'BodyPart'))), instance(J24, 'BodyPart')), [domainV(J24, ['$instanceof':'BodyPart', '$instanceof':'Organism', superficialPart:2]), domainV(I24, ['$instanceof':'BodyCovering', superficialPart:1]), domainV(_G8179, []), forall(I24), replaceConsVar(J24, '$existential'('?BODY', superficialPart(I24, '?BODY')and (instance('?BODY', 'Organism')or instance('?BODY', 'BodyPart'))))], ['COVER'=I24, 'BODY'=J24], 'Merge', 'OBJECTS', 6406, 'Anonymous', on).
mooCache(subclass('BodyJunction', 'BodyPart'), subclass('BodyJunction', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6408, 'Anonymous', on).
mooCache(documentation('BodyJunction', string('"The place where two BodyParts   meet or connect."')), documentation('BodyJunction', string('"The place where two BodyParts   meet or connect."')), [], [], 'Merge', 'OBJECTS', 6410, 'Anonymous', on).
mooCache(instance(T26, 'BodyJunction')=>exists(U26, instance(U26, 'BodyPart')and component(T26, U26)), (entails(not instance(U26, 'BodyPart'), not instance(T26, 'BodyJunction'))and entails(instance(T26, 'BodyJunction')and'$existential'(U26, '?STRUCT', instance('?STRUCT', 'BodyPart')and component(T26, '?STRUCT')), instance(U26, 'BodyPart')))and entails(not component(T26, U26), not instance(T26, 'BodyJunction'))and entails(instance(T26, 'BodyJunction')and'$existential'(U26, '?STRUCT', instance('?STRUCT', 'BodyPart')and component(T26, '?STRUCT')), component(T26, U26)), [domainV(U26, ['$instanceof':'BodyPart', component:2]), domainV(T26, ['$instanceof':'BodyJunction', component:1]), domainV(_G6738, []), forall(T26), replaceConsVar(U26, '$existential'('?STRUCT', instance('?STRUCT', 'BodyPart')and component(T26, '?STRUCT')))], ['JUNCT'=T26, 'STRUCT'=U26], 'Merge', 'OBJECTS', 6412, 'Anonymous', on).
mooCache(instance(J28, 'BodyJunction')=>exists(K28, exists(L28, connected(J28, L28)and connected(J28, K28)and instance(L28, 'BodyPart')and instance(K28, 'BodyPart')and not equal(L28, K28))), (entails(not connected(J28, L28), not instance(J28, 'BodyJunction'))and entails(instance(J28, 'BodyJunction')and'$existential'(L28, '?STRUCT1', connected(J28, '?STRUCT1')and connected(J28, K28)and instance('?STRUCT1', 'BodyPart')and instance(K28, 'BodyPart')and not equal('?STRUCT1', K28)), connected(J28, L28)))and (entails(not connected(J28, K28), not instance(J28, 'BodyJunction'))and entails((instance(J28, 'BodyJunction')and'$existential'(K28, '?STRUCT2', exists(L28, connected(J28, L28)and connected(J28, '?STRUCT2')and instance(L28, 'BodyPart')and instance('?STRUCT2', 'BodyPart')and not equal(L28, '?STRUCT2'))))and'$existential'(L28, '?STRUCT1', connected(J28, '?STRUCT1')and connected(J28, K28)and instance('?STRUCT1', 'BodyPart')and instance(K28, 'BodyPart')and not equal('?STRUCT1', K28)), connected(J28, K28)))and (entails(not instance(L28, 'BodyPart'), not instance(J28, 'BodyJunction'))and entails(instance(J28, 'BodyJunction')and'$existential'(L28, '?STRUCT1', connected(J28, '?STRUCT1')and connected(J28, K28)and instance('?STRUCT1', 'BodyPart')and instance(K28, 'BodyPart')and not equal('?STRUCT1', K28)), instance(L28, 'BodyPart')))and (entails(not instance(K28, 'BodyPart'), not instance(J28, 'BodyJunction'))and entails((instance(J28, 'BodyJunction')and'$existential'(K28, '?STRUCT2', exists(L28, connected(J28, L28)and connected(J28, '?STRUCT2')and instance(L28, 'BodyPart')and instance('?STRUCT2', 'BodyPart')and not equal(L28, '?STRUCT2'))))and'$existential'(L28, '?STRUCT1', connected(J28, '?STRUCT1')and connected(J28, K28)and instance('?STRUCT1', 'BodyPart')and instance(K28, 'BodyPart')and not equal('?STRUCT1', K28)), instance(K28, 'BodyPart')))and entails(equal(L28, K28), not instance(J28, 'BodyJunction'))and entails(instance(J28, 'BodyJunction'), not equal(L28, K28)), [domainV(L28, ['$instanceof':'BodyPart', connected:2]), domainV(K28, ['$instanceof':'BodyPart', connected:2]), domainV(J28, ['$instanceof':'BodyJunction', connected:1]), domainV(_G13498, []), forall(J28), replaceConsVar(K28, '$existential'('?STRUCT2', exists(L28, connected(J28, L28)and connected(J28, '?STRUCT2')and instance(L28, 'BodyPart')and instance('?STRUCT2', 'BodyPart')and not equal(L28, '?STRUCT2')))), replaceConsVar(L28, '$existential'('?STRUCT1', connected(J28, '?STRUCT1')and connected(J28, K28)and instance('?STRUCT1', 'BodyPart')and instance(K28, 'BodyPart')and not equal('?STRUCT1', K28)))], ['JUNCT'=J28, 'STRUCT1'=L28, 'STRUCT2'=K28], 'Merge', 'OBJECTS', 6414, 'Anonymous', on).
mooCache(subclass('BodyVessel', 'BodyPart'), subclass('BodyVessel', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6416, 'Anonymous', on).
mooCache(documentation('BodyVessel', string('"Any tube-like structure which occurs naturally in   an Organism and through which a BodySubstance can circulate."')), documentation('BodyVessel', string('"Any tube-like structure which occurs naturally in   an Organism and through which a BodySubstance can circulate."')), [], [], 'Merge', 'OBJECTS', 6418, 'Anonymous', on).
mooCache(subclass('Cell', 'BodyPart'), subclass('Cell', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6420, 'Anonymous', on).
mooCache(documentation('Cell', string('"The fundamental structural and functional unit of   living Organisms."')), documentation('Cell', string('"The fundamental structural and functional unit of   living Organisms."')), [], [], 'Merge', 'OBJECTS', 6422, 'Anonymous', on).
mooCache(subclass('Organ', 'BodyPart'), subclass('Organ', 'BodyPart'), [], [], 'Merge', 'OBJECTS', 6424, 'Anonymous', on).
mooCache(documentation('Organ', string('"A somewhat independent BodyPart that performs a   specialized function."')), documentation('Organ', string('"A somewhat independent BodyPart that performs a   specialized function."')), [], [], 'Merge', 'OBJECTS', 6426, 'Anonymous', on).
mooCache(instance(N33, 'Organ')=>exists(O33, hasPurpose(N33, O33)), entails(not hasPurpose(N33, O33), not instance(N33, 'Organ'))and entails(instance(N33, 'Organ')and'$existential'(O33, '?PURP', hasPurpose(N33, '?PURP')), hasPurpose(N33, O33)), [domainV(O33, [hasPurpose:2]), domainV(N33, ['$instanceof':'Organ', hasPurpose:1]), domainV(_G5202, []), forall(N33), replaceConsVar(O33, '$existential'('?PURP', hasPurpose(N33, '?PURP')))], ['ORGAN'=N33, 'PURP'=O33], 'Merge', 'OBJECTS', 6428, 'Anonymous', on).
mooCache(subclass('Gland', 'Organ'), subclass('Gland', 'Organ'), [], [], 'Merge', 'OBJECTS', 6430, 'Anonymous', on).
mooCache(documentation('Gland', string('"An Organ that removes Substances from the Blood,   alters them in some way, and then releases them."')), documentation('Gland', string('"An Organ that removes Substances from the Blood,   alters them in some way, and then releases them."')), [], [], 'Merge', 'OBJECTS', 6432, 'Anonymous', on).
mooCache(subclass('Fruit', 'Organ'), subclass('Fruit', 'Organ'), [], [], 'Merge', 'OBJECTS', 6434, 'Anonymous', on).
mooCache(documentation('Fruit', string('"A ripe Plant Organ that produces seeds for   reproduction."')), documentation('Fruit', string('"A ripe Plant Organ that produces seeds for   reproduction."')), [], [], 'Merge', 'OBJECTS', 6436, 'Anonymous', on).
mooCache(instance(Z36, 'Fruit')=>exists(A37, component(Z36, A37)and instance(A37, 'Plant')), (entails(not component(Z36, A37), not instance(Z36, 'Fruit'))and entails(instance(Z36, 'Fruit')and'$existential'(A37, '?PLANT', component(Z36, '?PLANT')and instance('?PLANT', 'Plant')), component(Z36, A37)))and entails(not instance(A37, 'Plant'), not instance(Z36, 'Fruit'))and entails(instance(Z36, 'Fruit')and'$existential'(A37, '?PLANT', component(Z36, '?PLANT')and instance('?PLANT', 'Plant')), instance(A37, 'Plant')), [domainV(A37, ['$instanceof':'Plant', component:2]), domainV(Z36, ['$instanceof':'Fruit', component:1]), domainV(_G6645, []), forall(Z36), replaceConsVar(A37, '$existential'('?PLANT', component(Z36, '?PLANT')and instance('?PLANT', 'Plant')))], ['FRUIT'=Z36, 'PLANT'=A37], 'Merge', 'OBJECTS', 6438, 'Anonymous', on).
mooCache(subclass('Tissue', 'BodySubstance'), subclass('Tissue', 'BodySubstance'), [], [], 'Merge', 'OBJECTS', 6440, 'Anonymous', on).
mooCache(documentation('Tissue', string('"An aggregation of similarly specialized Cells   and the associated intercellular substance. Tissues are relatively   non-localized in comparison to BodyParts, Organs or Organ components.    The main features of Tissues are self-connectivity (see   SelfConnectedObject) and being a homogeneous mass (all parts in the   same granularity are instances of Tissue as well)."')), documentation('Tissue', string('"An aggregation of similarly specialized Cells   and the associated intercellular substance. Tissues are relatively   non-localized in comparison to BodyParts, Organs or Organ components.    The main features of Tissues are self-connectivity (see   SelfConnectedObject) and being a homogeneous mass (all parts in the   same granularity are instances of Tissue as well)."')), [], [], 'Merge', 'OBJECTS', 6442, 'Anonymous', on).
mooCache(instance(V, 'Tissue')=>exists(W, instance(W, 'Cell')and part(W, V)), (entails(not instance(W, 'Cell'), not instance(V, 'Tissue'))and entails(instance(V, 'Tissue')and'$existential'(W, '?PART', instance('?PART', 'Cell')and part('?PART', V)), instance(W, 'Cell')))and entails(not part(W, V), not instance(V, 'Tissue'))and entails(instance(V, 'Tissue')and'$existential'(W, '?PART', instance('?PART', 'Cell')and part('?PART', V)), part(W, V)), [domainV(W, ['$instanceof':'Cell', part:1]), domainV(V, ['$instanceof':'Tissue', part:2]), domainV(_G6612, []), forall(V), replaceConsVar(W, '$existential'('?PART', instance('?PART', 'Cell')and part('?PART', V)))], ['STUFF'=V, 'PART'=W], 'Merge', 'OBJECTS', 6444, 'Anonymous', on).
mooCache(instance(W1, 'Tissue')=>exists(X1, instance(X1, 'Organism')and part(W1, X1)), (entails(not instance(X1, 'Organism'), not instance(W1, 'Tissue'))and entails(instance(W1, 'Tissue')and'$existential'(X1, '?ORGANISM', instance('?ORGANISM', 'Organism')and part(W1, '?ORGANISM')), instance(X1, 'Organism')))and entails(not part(W1, X1), not instance(W1, 'Tissue'))and entails(instance(W1, 'Tissue')and'$existential'(X1, '?ORGANISM', instance('?ORGANISM', 'Organism')and part(W1, '?ORGANISM')), part(W1, X1)), [domainV(X1, ['$instanceof':'Organism', part:2]), domainV(W1, ['$instanceof':'Tissue', part:1]), domainV(_G6708, []), forall(W1), replaceConsVar(X1, '$existential'('?ORGANISM', instance('?ORGANISM', 'Organism')and part(W1, '?ORGANISM')))], ['STUFF'=W1, 'ORGANISM'=X1], 'Merge', 'OBJECTS', 6446, 'Anonymous', on).
mooCache(subclass('Bone', 'Tissue'), subclass('Bone', 'Tissue'), [], [], 'Merge', 'OBJECTS', 6448, 'Anonymous', on).
mooCache(documentation('Bone', string('"Rigid Tissue composed largely of calcium that makes up   the skeleton of Vertebrates.  Note that this Class also includes teeth."')), documentation('Bone', string('"Rigid Tissue composed largely of calcium that makes up   the skeleton of Vertebrates.  Note that this Class also includes teeth."')), [], [], 'Merge', 'OBJECTS', 6450, 'Anonymous', on).
mooCache(instance(D4, 'Bone')=>exists(E4, instance(E4, 'Vertebrate')and part(D4, E4)), (entails(not instance(E4, 'Vertebrate'), not instance(D4, 'Bone'))and entails(instance(D4, 'Bone')and'$existential'(E4, '?VERT', instance('?VERT', 'Vertebrate')and part(D4, '?VERT')), instance(E4, 'Vertebrate')))and entails(not part(D4, E4), not instance(D4, 'Bone'))and entails(instance(D4, 'Bone')and'$existential'(E4, '?VERT', instance('?VERT', 'Vertebrate')and part(D4, '?VERT')), part(D4, E4)), [domainV(E4, ['$instanceof':'Vertebrate', part:2]), domainV(D4, ['$instanceof':'Bone', part:1]), domainV(_G6624, []), forall(D4), replaceConsVar(E4, '$existential'('?VERT', instance('?VERT', 'Vertebrate')and part(D4, '?VERT')))], ['BONE'=D4, 'VERT'=E4], 'Merge', 'OBJECTS', 6452, 'Anonymous', on).
mooCache(subclass('Muscle', 'Tissue'), subclass('Muscle', 'Tissue'), [], [], 'Merge', 'OBJECTS', 6454, 'Anonymous', on).
mooCache(disjoint('Muscle', 'Bone'), disjoint('Muscle', 'Bone'), [], [], 'Merge', 'OBJECTS', 6456, 'Anonymous', on).
mooCache(documentation('Muscle', string('"Nonrigid Tissue appearing only in Animals and   composed largely of contractile cells."')), documentation('Muscle', string('"Nonrigid Tissue appearing only in Animals and   composed largely of contractile cells."')), [], [], 'Merge', 'OBJECTS', 6458, 'Anonymous', on).
mooCache(subclass('Noun', 'Word'), subclass('Noun', 'Word'), [], [], 'Merge', 'OBJECTS', 6460, 'Anonymous', on).
mooCache(partition('Word', 'Noun', 'Verb', 'Adjective', 'Adverb', 'Particle'), partition('Word', 'Noun', 'Verb', 'Adjective', 'Adverb', 'Particle'), [], [], 'Merge', 'OBJECTS', 6462, 'Anonymous', on).
mooCache(documentation('Noun', string('"One of the parts of speech.  The Class of Words   that conventionally denote Objects."')), documentation('Noun', string('"One of the parts of speech.  The Class of Words   that conventionally denote Objects."')), [], [], 'Merge', 'OBJECTS', 6464, 'Anonymous', on).
mooCache(subclass('Verb', 'Word'), subclass('Verb', 'Word'), [], [], 'Merge', 'OBJECTS', 6466, 'Anonymous', on).
mooCache(documentation('Verb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Processes."')), documentation('Verb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Processes."')), [], [], 'Merge', 'OBJECTS', 6468, 'Anonymous', on).
mooCache(subclass('Adjective', 'Word'), subclass('Adjective', 'Word'), [], [], 'Merge', 'OBJECTS', 6470, 'Anonymous', on).
mooCache(documentation('Adjective', string('"One of the parts of speech.  The Class of   Words that conventionally denote Attributes of Objects."')), documentation('Adjective', string('"One of the parts of speech.  The Class of   Words that conventionally denote Attributes of Objects."')), [], [], 'Merge', 'OBJECTS', 6472, 'Anonymous', on).
mooCache(subclass('Adverb', 'Word'), subclass('Adverb', 'Word'), [], [], 'Merge', 'OBJECTS', 6474, 'Anonymous', on).
mooCache(documentation('Adverb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Attributes of Processes."')), documentation('Adverb', string('"One of the parts of speech.  The Class of Words   that conventionally denote Attributes of Processes."')), [], [], 'Merge', 'OBJECTS', 6476, 'Anonymous', on).
mooCache(subclass('Particle', 'Word'), subclass('Particle', 'Word'), [], [], 'Merge', 'OBJECTS', 6478, 'Anonymous', on).
mooCache(documentation('Particle', string('"An umbrella Class for any Word that does not   fit into the other subclasses of Word.  A Particle is generally a small   term that serves a grammatical or logical function, e.g. \'and\', \'of\',   \'since\', etc.  At some point, this class might be broken up into the   subclasses \'Connective\', \'Preposition\', etc."')), documentation('Particle', string('"An umbrella Class for any Word that does not   fit into the other subclasses of Word.  A Particle is generally a small   term that serves a grammatical or logical function, e.g. \'and\', \'of\',   \'since\', etc.  At some point, this class might be broken up into the   subclasses \'Connective\', \'Preposition\', etc."')), [], [], 'Merge', 'OBJECTS', 6480, 'Anonymous', on).
mooCache(subclass('Morpheme', 'LinguisticExpression'), subclass('Morpheme', 'LinguisticExpression'), [], [], 'Merge', 'OBJECTS', 6482, 'Anonymous', on).
mooCache(documentation('Morpheme', string('"Part of a Word which cannot be subdivided   and which expresses a meaning."')), documentation('Morpheme', string('"Part of a Word which cannot be subdivided   and which expresses a meaning."')), [], [], 'Merge', 'OBJECTS', 6484, 'Anonymous', on).
mooCache(instance(E16, 'Morpheme')=>not exists(F16, instance(F16, 'Morpheme')and part(F16, E16)and not equal(F16, E16)), entails(instance(F16, 'Morpheme')and part(F16, E16)and not equal(F16, E16), not instance(E16, 'Morpheme'))and entails(instance(E16, 'Morpheme')and part(F16, E16)and not equal(F16, E16), not instance(F16, 'Morpheme'))and entails(instance(E16, 'Morpheme')and instance(F16, 'Morpheme')and not equal(F16, E16), not part(F16, E16))and entails(instance(E16, 'Morpheme')and instance(F16, 'Morpheme')and part(F16, E16), equal(F16, E16)), [domainV(F16, ['$instanceof':'Morpheme', part:1]), domainV(E16, ['$instanceof':'Morpheme', part:2]), domainV(_G8925, []), forall(E16), forall(F16), forall(F16)], ['MORPH'=E16, 'OTHERMORPH'=F16], 'Merge', 'OBJECTS', 6486, 'Anonymous', on).
mooCache(instance(G17, 'Morpheme')=>exists(H17, instance(H17, 'Word')and part(G17, H17)), (entails(not instance(H17, 'Word'), not instance(G17, 'Morpheme'))and entails(instance(G17, 'Morpheme')and'$existential'(H17, '?WORD', instance('?WORD', 'Word')and part(G17, '?WORD')), instance(H17, 'Word')))and entails(not part(G17, H17), not instance(G17, 'Morpheme'))and entails(instance(G17, 'Morpheme')and'$existential'(H17, '?WORD', instance('?WORD', 'Word')and part(G17, '?WORD')), part(G17, H17)), [domainV(H17, ['$instanceof':'Word', part:2]), domainV(G17, ['$instanceof':'Morpheme', part:1]), domainV(_G6624, []), forall(G17), replaceConsVar(H17, '$existential'('?WORD', instance('?WORD', 'Word')and part(G17, '?WORD')))], ['MORPH'=G17, 'WORD'=H17], 'Merge', 'OBJECTS', 6488, 'Anonymous', on).
mooCache(instance(G18, 'Word')=>exists(H18, part(H18, G18)and instance(H18, 'Morpheme')), (entails(not part(H18, G18), not instance(G18, 'Word'))and entails(instance(G18, 'Word')and'$existential'(H18, '?PART', part('?PART', G18)and instance('?PART', 'Morpheme')), part(H18, G18)))and entails(not instance(H18, 'Morpheme'), not instance(G18, 'Word'))and entails(instance(G18, 'Word')and'$existential'(H18, '?PART', part('?PART', G18)and instance('?PART', 'Morpheme')), instance(H18, 'Morpheme')), [domainV(H18, ['$instanceof':'Morpheme', part:1]), domainV(G18, ['$instanceof':'Word', part:2]), domainV(_G6612, []), forall(G18), replaceConsVar(H18, '$existential'('?PART', part('?PART', G18)and instance('?PART', 'Morpheme')))], ['WORD'=G18, 'PART'=H18], 'Merge', 'OBJECTS', 6490, 'Anonymous', on).
mooCache(subclass('Phrase', 'LinguisticExpression'), subclass('Phrase', 'LinguisticExpression'), [], [], 'Merge', 'OBJECTS', 6492, 'Anonymous', on).
mooCache(disjointDecomposition('Phrase', 'VerbPhrase', 'NounPhrase', 'PrepositionalPhrase', 'Clause'), disjointDecomposition('Phrase', 'VerbPhrase', 'NounPhrase', 'PrepositionalPhrase', 'Clause'), [], [], 'Merge', 'OBJECTS', 6494, 'Anonymous', on).
mooCache(documentation('Phrase', string('"A set of Words in a Language which form a unit,   i.e. express a meaning in the Language."')), documentation('Phrase', string('"A set of Words in a Language which form a unit,   i.e. express a meaning in the Language."')), [], [], 'Merge', 'OBJECTS', 6496, 'Anonymous', on).
mooCache(instance(W25, 'Phrase')=>exists(X25, exists(Y25, part(Y25, W25)and part(X25, W25)and instance(Y25, 'Word')and instance(X25, 'Word')and not equal(Y25, X25))), (entails(not part(Y25, W25), not instance(W25, 'Phrase'))and entails(instance(W25, 'Phrase')and'$existential'(Y25, '?PART1', part('?PART1', W25)and part(X25, W25)and instance('?PART1', 'Word')and instance(X25, 'Word')and not equal('?PART1', X25)), part(Y25, W25)))and (entails(not part(X25, W25), not instance(W25, 'Phrase'))and entails((instance(W25, 'Phrase')and'$existential'(X25, '?PART2', exists(Y25, part(Y25, W25)and part('?PART2', W25)and instance(Y25, 'Word')and instance('?PART2', 'Word')and not equal(Y25, '?PART2'))))and'$existential'(Y25, '?PART1', part('?PART1', W25)and part(X25, W25)and instance('?PART1', 'Word')and instance(X25, 'Word')and not equal('?PART1', X25)), part(X25, W25)))and (entails(not instance(Y25, 'Word'), not instance(W25, 'Phrase'))and entails(instance(W25, 'Phrase')and'$existential'(Y25, '?PART1', part('?PART1', W25)and part(X25, W25)and instance('?PART1', 'Word')and instance(X25, 'Word')and not equal('?PART1', X25)), instance(Y25, 'Word')))and (entails(not instance(X25, 'Word'), not instance(W25, 'Phrase'))and entails((instance(W25, 'Phrase')and'$existential'(X25, '?PART2', exists(Y25, part(Y25, W25)and part('?PART2', W25)and instance(Y25, 'Word')and instance('?PART2', 'Word')and not equal(Y25, '?PART2'))))and'$existential'(Y25, '?PART1', part('?PART1', W25)and part(X25, W25)and instance('?PART1', 'Word')and instance(X25, 'Word')and not equal('?PART1', X25)), instance(X25, 'Word')))and entails(equal(Y25, X25), not instance(W25, 'Phrase'))and entails(instance(W25, 'Phrase'), not equal(Y25, X25)), [domainV(Y25, ['$instanceof':'Word', part:1]), domainV(X25, ['$instanceof':'Word', part:1]), domainV(W25, ['$instanceof':'Phrase', part:2]), domainV(_G13291, []), forall(W25), replaceConsVar(X25, '$existential'('?PART2', exists(Y25, part(Y25, W25)and part('?PART2', W25)and instance(Y25, 'Word')and instance('?PART2', 'Word')and not equal(Y25, '?PART2')))), replaceConsVar(Y25, '$existential'('?PART1', part('?PART1', W25)and part(X25, W25)and instance('?PART1', 'Word')and instance(X25, 'Word')and not equal('?PART1', X25)))], ['PHRASE'=W25, 'PART1'=Y25, 'PART2'=X25], 'Merge', 'OBJECTS', 6498, 'Anonymous', on).
mooCache(subclass('VerbPhrase', 'Phrase'), subclass('VerbPhrase', 'Phrase'), [], [], 'Merge', 'OBJECTS', 6500, 'Anonymous', on).
mooCache(documentation('VerbPhrase', string('"A Phrase that has the same function as a   Verb."')), documentation('VerbPhrase', string('"A Phrase that has the same function as a   Verb."')), [], [], 'Merge', 'OBJECTS', 6502, 'Anonymous', on).
mooCache(subclass('NounPhrase', 'Phrase'), subclass('NounPhrase', 'Phrase'), [], [], 'Merge', 'OBJECTS', 6504, 'Anonymous', on).
mooCache(disjoint('NounPhrase', 'VerbPhrase'), disjoint('NounPhrase', 'VerbPhrase'), [], [], 'Merge', 'OBJECTS', 6506, 'Anonymous', on).
mooCache(documentation('NounPhrase', string('"A Phrase that has the same function as a   Noun."')), documentation('NounPhrase', string('"A Phrase that has the same function as a   Noun."')), [], [], 'Merge', 'OBJECTS', 6508, 'Anonymous', on).
mooCache(instance(P30, 'Sentence')=>exists(Q30, exists(R30, instance(R30, 'NounPhrase')and instance(Q30, 'VerbPhrase')and part(R30, P30)and part(Q30, P30))), (entails(not instance(R30, 'NounPhrase'), not instance(P30, 'Sentence'))and entails(instance(P30, 'Sentence')and'$existential'(R30, '?PHRASE1', instance('?PHRASE1', 'NounPhrase')and instance(Q30, 'VerbPhrase')and part('?PHRASE1', P30)and part(Q30, P30)), instance(R30, 'NounPhrase')))and (entails(not instance(Q30, 'VerbPhrase'), not instance(P30, 'Sentence'))and entails((instance(P30, 'Sentence')and'$existential'(Q30, '?PHRASE2', exists(R30, instance(R30, 'NounPhrase')and instance('?PHRASE2', 'VerbPhrase')and part(R30, P30)and part('?PHRASE2', P30))))and'$existential'(R30, '?PHRASE1', instance('?PHRASE1', 'NounPhrase')and instance(Q30, 'VerbPhrase')and part('?PHRASE1', P30)and part(Q30, P30)), instance(Q30, 'VerbPhrase')))and (entails(not part(R30, P30), not instance(P30, 'Sentence'))and entails(instance(P30, 'Sentence')and'$existential'(R30, '?PHRASE1', instance('?PHRASE1', 'NounPhrase')and instance(Q30, 'VerbPhrase')and part('?PHRASE1', P30)and part(Q30, P30)), part(R30, P30)))and entails(not part(Q30, P30), not instance(P30, 'Sentence'))and entails((instance(P30, 'Sentence')and'$existential'(Q30, '?PHRASE2', exists(R30, instance(R30, 'NounPhrase')and instance('?PHRASE2', 'VerbPhrase')and part(R30, P30)and part('?PHRASE2', P30))))and'$existential'(R30, '?PHRASE1', instance('?PHRASE1', 'NounPhrase')and instance(Q30, 'VerbPhrase')and part('?PHRASE1', P30)and part(Q30, P30)), part(Q30, P30)), [domainV(R30, ['$instanceof':'NounPhrase', part:1]), domainV(Q30, ['$instanceof':'VerbPhrase', part:1]), domainV(P30, ['$instanceof':'Sentence', part:2]), domainV(_G11209, []), forall(P30), replaceConsVar(Q30, '$existential'('?PHRASE2', exists(R30, instance(R30, 'NounPhrase')and instance('?PHRASE2', 'VerbPhrase')and part(R30, P30)and part('?PHRASE2', P30)))), replaceConsVar(R30, '$existential'('?PHRASE1', instance('?PHRASE1', 'NounPhrase')and instance(Q30, 'VerbPhrase')and part('?PHRASE1', P30)and part(Q30, P30)))], ['SENTENCE'=P30, 'PHRASE1'=R30, 'PHRASE2'=Q30], 'Merge', 'OBJECTS', 6510, 'Anonymous', on).
mooCache(subclass('PrepositionalPhrase', 'Phrase'), subclass('PrepositionalPhrase', 'Phrase'), [], [], 'Merge', 'OBJECTS', 6512, 'Anonymous', on).
mooCache(documentation('PrepositionalPhrase', string('"A Phrase that begins with a   preposition and that functions as an Adjective or an Adverb."')), documentation('PrepositionalPhrase', string('"A Phrase that begins with a   preposition and that functions as an Adjective or an Adverb."')), [], [], 'Merge', 'OBJECTS', 6514, 'Anonymous', on).
mooCache(subclass('Text', 'LinguisticExpression'), subclass('Text', 'LinguisticExpression'), [], [], 'Merge', 'OBJECTS', 6516, 'Anonymous', on).
mooCache(subclass('Text', 'Artifact'), subclass('Text', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6518, 'Anonymous', on).
mooCache(documentation('Text', string('"A Phrase, Sentence or set of Sentences   that perform a specific function related to Communication, e.g.   express a discourse about a particular topic."')), documentation('Text', string('"A Phrase, Sentence or set of Sentences   that perform a specific function related to Communication, e.g.   express a discourse about a particular topic."')), [], [], 'Merge', 'OBJECTS', 6520, 'Anonymous', on).
mooCache(instance(I35, 'Text')=>exists(J35, exists(K35, part(K35, I35)and part(J35, I35)and instance(K35, 'Sentence')and instance(J35, 'Sentence')and not equal(K35, J35))), (entails(not part(K35, I35), not instance(I35, 'Text'))and entails(instance(I35, 'Text')and'$existential'(K35, '?PART1', part('?PART1', I35)and part(J35, I35)and instance('?PART1', 'Sentence')and instance(J35, 'Sentence')and not equal('?PART1', J35)), part(K35, I35)))and (entails(not part(J35, I35), not instance(I35, 'Text'))and entails((instance(I35, 'Text')and'$existential'(J35, '?PART2', exists(K35, part(K35, I35)and part('?PART2', I35)and instance(K35, 'Sentence')and instance('?PART2', 'Sentence')and not equal(K35, '?PART2'))))and'$existential'(K35, '?PART1', part('?PART1', I35)and part(J35, I35)and instance('?PART1', 'Sentence')and instance(J35, 'Sentence')and not equal('?PART1', J35)), part(J35, I35)))and (entails(not instance(K35, 'Sentence'), not instance(I35, 'Text'))and entails(instance(I35, 'Text')and'$existential'(K35, '?PART1', part('?PART1', I35)and part(J35, I35)and instance('?PART1', 'Sentence')and instance(J35, 'Sentence')and not equal('?PART1', J35)), instance(K35, 'Sentence')))and (entails(not instance(J35, 'Sentence'), not instance(I35, 'Text'))and entails((instance(I35, 'Text')and'$existential'(J35, '?PART2', exists(K35, part(K35, I35)and part('?PART2', I35)and instance(K35, 'Sentence')and instance('?PART2', 'Sentence')and not equal(K35, '?PART2'))))and'$existential'(K35, '?PART1', part('?PART1', I35)and part(J35, I35)and instance('?PART1', 'Sentence')and instance(J35, 'Sentence')and not equal('?PART1', J35)), instance(J35, 'Sentence')))and entails(equal(K35, J35), not instance(I35, 'Text'))and entails(instance(I35, 'Text'), not equal(K35, J35)), [domainV(K35, ['$instanceof':'Sentence', part:1]), domainV(J35, ['$instanceof':'Sentence', part:1]), domainV(I35, ['$instanceof':'Text', part:2]), domainV(_G13291, []), forall(I35), replaceConsVar(J35, '$existential'('?PART2', exists(K35, part(K35, I35)and part('?PART2', I35)and instance(K35, 'Sentence')and instance('?PART2', 'Sentence')and not equal(K35, '?PART2')))), replaceConsVar(K35, '$existential'('?PART1', part('?PART1', I35)and part(J35, I35)and instance('?PART1', 'Sentence')and instance(J35, 'Sentence')and not equal('?PART1', J35)))], ['TEXT'=I35, 'PART1'=K35, 'PART2'=J35], 'Merge', 'OBJECTS', 6522, 'Anonymous', on).
mooCache(instance(authors, 'BinaryPredicate'), instance(authors, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6524, 'Anonymous', on).
mooCache(instance(authors, 'AsymmetricRelation'), instance(authors, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6526, 'Anonymous', on).
mooCache(domain(authors, 1, 'Agent'), domain(authors, 1, 'Agent'), [], [], 'Merge', 'OBJECTS', 6528, 'Anonymous', on).
mooCache(domainSubclass(authors, 2, 'Text'), domainSubclass(authors, 2, 'Text'), [], [], 'Merge', 'OBJECTS', 6530, 'Anonymous', on).
mooCache(documentation(authors, string('"(authors ?AGENT ?TEXT) means that ?AGENT is   creatively responsible for ?TEXT.  For example, Agatha Christie is   author of Murder_on_the_Orient_Express."')), documentation(authors, string('"(authors ?AGENT ?TEXT) means that ?AGENT is   creatively responsible for ?TEXT.  For example, Agatha Christie is   author of Murder_on_the_Orient_Express."')), [], [], 'Merge', 'OBJECTS', 6532, 'Anonymous', on).
mooCache(authors(K1, L1)=>exists(M1, exists(N1, agent(N1, K1)and instance(M1, L1)and result(N1, L1))), (entails(not agent(N1, K1), not authors(K1, L1))and entails(authors(K1, L1)and'$existential'(N1, '?PROCESS', agent('?PROCESS', K1)and instance(M1, L1)and result('?PROCESS', L1)), agent(N1, K1)))and (entails(not instance(M1, L1), not authors(K1, L1))and entails((authors(K1, L1)and'$existential'(M1, '?INSTANCE', exists(N1, agent(N1, K1)and instance('?INSTANCE', L1)and result(N1, L1))))and'$existential'(N1, '?PROCESS', agent('?PROCESS', K1)and instance(M1, L1)and result('?PROCESS', L1)), instance(M1, L1)))and entails(not result(N1, L1), not authors(K1, L1))and entails(authors(K1, L1)and'$existential'(N1, '?PROCESS', agent('?PROCESS', K1)and instance(M1, L1)and result('?PROCESS', L1)), result(N1, L1)), [domainV(N1, [agent:1, result:1]), domainV(M1, []), domainV(L1, [authors:2, instance:2, result:2]), domainV(K1, [agent:2, authors:1]), domainV(_G10155, []), forall(K1), forall(L1), replaceConsVar(M1, '$existential'('?INSTANCE', exists(N1, agent(N1, K1)and instance('?INSTANCE', L1)and result(N1, L1)))), replaceConsVar(N1, '$existential'('?PROCESS', agent('?PROCESS', K1)and instance(M1, L1)and result('?PROCESS', L1)))], ['AGENT'=K1, 'TEXT'=L1, 'PROCESS'=N1, 'INSTANCE'=M1], 'Merge', 'OBJECTS', 6534, 'Anonymous', on).
mooCache(instance(editor, 'BinaryPredicate'), instance(editor, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6536, 'Anonymous', on).
mooCache(instance(editor, 'AsymmetricRelation'), instance(editor, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6538, 'Anonymous', on).
mooCache(domain(editor, 1, 'Agent'), domain(editor, 1, 'Agent'), [], [], 'Merge', 'OBJECTS', 6540, 'Anonymous', on).
mooCache(domainSubclass(editor, 2, 'Text'), domainSubclass(editor, 2, 'Text'), [], [], 'Merge', 'OBJECTS', 6542, 'Anonymous', on).
mooCache(documentation(editor, string('"(editor ?AGENT ?TEXT) means that ?AGENT is   an editor of ?TEXT."')), documentation(editor, string('"(editor ?AGENT ?TEXT) means that ?AGENT is   an editor of ?TEXT."')), [], [], 'Merge', 'OBJECTS', 6544, 'Anonymous', on).
mooCache(instance(publishes, 'BinaryPredicate'), instance(publishes, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6546, 'Anonymous', on).
mooCache(instance(publishes, 'AsymmetricRelation'), instance(publishes, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6548, 'Anonymous', on).
mooCache(domain(publishes, 1, 'Organization'), domain(publishes, 1, 'Organization'), [], [], 'Merge', 'OBJECTS', 6550, 'Anonymous', on).
mooCache(domainSubclass(publishes, 2, 'Text'), domainSubclass(publishes, 2, 'Text'), [], [], 'Merge', 'OBJECTS', 6552, 'Anonymous', on).
mooCache(documentation(publishes, string('"(publishes ?ORG ?TEXT) means that ?ORG   publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie\'s   Murder_on_the_Orient_Express."')), documentation(publishes, string('"(publishes ?ORG ?TEXT) means that ?ORG   publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie\'s   Murder_on_the_Orient_Express."')), [], [], 'Merge', 'OBJECTS', 6554, 'Anonymous', on).
mooCache(publishes(J8, K8)<=>exists(L8, instance(L8, 'Publication')and agent(L8, J8)and patient(L8, K8)), (entails(publishes(J8, K8)and'$existential'(L8, '?PUB', instance('?PUB', 'Publication')and agent('?PUB', J8)and patient('?PUB', K8)), instance(L8, 'Publication'))and entails(publishes(J8, K8)and'$existential'(L8, '?PUB', instance('?PUB', 'Publication')and agent('?PUB', J8)and patient('?PUB', K8)), agent(L8, J8))and entails(publishes(J8, K8)and'$existential'(L8, '?PUB', instance('?PUB', 'Publication')and agent('?PUB', J8)and patient('?PUB', K8)), patient(L8, K8))and entails(not instance(L8, 'Publication')or not agent(L8, J8)or not patient(L8, K8), not publishes(J8, K8)))and entails(instance(L8, 'Publication')and agent(L8, J8)and patient(L8, K8), publishes(J8, K8))and entails(not publishes(J8, K8)and agent(L8, J8)and patient(L8, K8), not instance(L8, 'Publication'))and entails(not publishes(J8, K8)and instance(L8, 'Publication')and patient(L8, K8), not agent(L8, J8))and entails(not publishes(J8, K8)and instance(L8, 'Publication')and agent(L8, J8), not patient(L8, K8)), [domainV(L8, ['$instanceof':'Publication', agent:1, patient:1]), domainV(K8, [patient:2, publishes:2]), domainV(J8, [agent:2, publishes:1]), domainV(_G9126, []), forall(J8), forall(K8), replaceConsVar(L8, '$existential'('?PUB', instance('?PUB', 'Publication')and agent('?PUB', J8)and patient('?PUB', K8))), forall(L8)], ['ORG'=J8, 'TEXT'=K8, 'PUB'=L8], 'Merge', 'OBJECTS', 6556, 'Anonymous', on).
mooCache(instance('EditionFn', 'BinaryFunction'), instance('EditionFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6558, 'Anonymous', on).
mooCache(domainSubclass('EditionFn', 1, 'ContentBearingObject'), domainSubclass('EditionFn', 1, 'ContentBearingObject'), [], [], 'Merge', 'OBJECTS', 6560, 'Anonymous', on).
mooCache(domain('EditionFn', 2, 'PositiveInteger'), domain('EditionFn', 2, 'PositiveInteger'), [], [], 'Merge', 'OBJECTS', 6562, 'Anonymous', on).
mooCache(rangeSubclass('EditionFn', 'ContentBearingObject'), rangeSubclass('EditionFn', 'ContentBearingObject'), [], [], 'Merge', 'OBJECTS', 6564, 'Anonymous', on).
mooCache(documentation('EditionFn', string('"A BinaryFunction that maps a type of text   (e.g. Agatha Christie\'s Murder_on_the_Orient_Express) and a number   to the edition of the text type corresponding to the number."')), documentation('EditionFn', string('"A BinaryFunction that maps a type of text   (e.g. Agatha Christie\'s Murder_on_the_Orient_Express) and a number   to the edition of the text type corresponding to the number."')), [], [], 'Merge', 'OBJECTS', 6566, 'Anonymous', on).
mooCache(equal('EditionFn'(D13, E13), F13)and equal('EditionFn'(D13, G13), H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13)and date(J13, L13)=>before('EndFn'(K13), 'EndFn'(L13)), entails(holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13)and date(J13, L13), before('EndFn'(K13), 'EndFn'(L13)))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13)and date(J13, L13), not holds('EditionFn', D13, E13, F13))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13)and date(J13, L13), not holds('EditionFn', D13, G13, H13))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13)and date(J13, L13), not greaterThan(G13, E13))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13)and date(J13, L13), not instance(I13, 'Publication'))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13)and date(J13, L13), not instance(J13, 'Publication'))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(J13, H13)and date(I13, K13)and date(J13, L13), not patient(I13, F13))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and date(I13, K13)and date(J13, L13), not patient(J13, H13))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(J13, L13), not date(I13, K13))and entails(not before('EndFn'(K13), 'EndFn'(L13))and holds('EditionFn', D13, E13, F13)and holds('EditionFn', D13, G13, H13)and greaterThan(G13, E13)and instance(I13, 'Publication')and instance(J13, 'Publication')and patient(I13, F13)and patient(J13, H13)and date(I13, K13), not date(J13, L13)), [domainV(L13, ['EndFn':1, date:2]), domainV(K13, ['EndFn':1, date:2]), domainV(J13, ['$instanceof':'Publication', date:1, patient:1]), domainV(I13, ['$instanceof':'Publication', date:1, patient:1]), domainV(H13, ['EditionFn':3, patient:2]), domainV(G13, ['EditionFn':2, greaterThan:1]), domainV(F13, ['EditionFn':3, patient:2]), domainV(E13, ['EditionFn':2, greaterThan:2]), domainV(D13, ['EditionFn':1]), domainV(_G18666, []), forall(D13), forall(E13), forall(F13), forall(G13), forall(H13), forall(I13), forall(J13), forall(K13), forall(L13)], ['TEXT'=D13, 'INT1'=E13, 'EDITION1'=F13, 'INT2'=G13, 'EDITION2'=H13, 'PUB1'=I13, 'PUB2'=J13, 'DATE1'=K13, 'DATE2'=L13], 'Merge', 'OBJECTS', 6568, 'Anonymous', on).
mooCache(equal('EditionFn'(M15, N15), O15)=>subsumesContentClass(M15, O15), entails(not subsumesContentClass(M15, O15), not holds('EditionFn', M15, N15, O15))and entails(holds('EditionFn', M15, N15, O15), subsumesContentClass(M15, O15)), [domainV(O15, ['EditionFn':3, subsumesContentClass:2]), domainV(N15, ['EditionFn':2]), domainV(M15, ['EditionFn':1, subsumesContentClass:1]), domainV(_G5407, []), forall(M15), forall(N15), forall(O15)], ['TEXT1'=M15, 'NUMBER'=N15, 'TEXT2'=O15], 'Merge', 'OBJECTS', 6570, 'Anonymous', on).
mooCache(instance('SeriesVolumeFn', 'BinaryFunction'), instance('SeriesVolumeFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6572, 'Anonymous', on).
mooCache(domainSubclass('SeriesVolumeFn', 1, 'Series'), domainSubclass('SeriesVolumeFn', 1, 'Series'), [], [], 'Merge', 'OBJECTS', 6574, 'Anonymous', on).
mooCache(domain('SeriesVolumeFn', 2, 'PositiveInteger'), domain('SeriesVolumeFn', 2, 'PositiveInteger'), [], [], 'Merge', 'OBJECTS', 6576, 'Anonymous', on).
mooCache(rangeSubclass('SeriesVolumeFn', 'Text'), rangeSubclass('SeriesVolumeFn', 'Text'), [], [], 'Merge', 'OBJECTS', 6578, 'Anonymous', on).
mooCache(documentation('SeriesVolumeFn', string('"A BinaryFunction that maps a type of Series   (e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a   number to the volumes of the text type designated by the number."')), documentation('SeriesVolumeFn', string('"A BinaryFunction that maps a type of Series   (e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a   number to the volumes of the text type designated by the number."')), [], [], 'Merge', 'OBJECTS', 6580, 'Anonymous', on).
mooCache(subclass(T19, 'Periodical')and equal('SeriesVolumeFn'(T19, U19), V19)and equal('SeriesVolumeFn'(T19, W19), X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20)=>before('EndFn'(A20), 'EndFn'(B20)), entails(subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), before('EndFn'(A20), 'EndFn'(B20)))and entails(not before('EndFn'(A20), 'EndFn'(B20))and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), not subclass(T19, 'Periodical'))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), not holds('SeriesVolumeFn', T19, U19, V19))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), not holds('SeriesVolumeFn', T19, W19, X19))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), not greaterThan(W19, U19))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), not instance(Y19, 'Publication'))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), not instance(Z19, 'Publication'))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Z19, X19)and date(Y19, A20)and date(Z19, B20), not patient(Y19, V19))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and date(Y19, A20)and date(Z19, B20), not patient(Z19, X19))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Z19, B20), not date(Y19, A20))and entails(not before('EndFn'(A20), 'EndFn'(B20))and subclass(T19, 'Periodical')and holds('SeriesVolumeFn', T19, U19, V19)and holds('SeriesVolumeFn', T19, W19, X19)and greaterThan(W19, U19)and instance(Y19, 'Publication')and instance(Z19, 'Publication')and patient(Y19, V19)and patient(Z19, X19)and date(Y19, A20), not date(Z19, B20)), [domainV(B20, ['EndFn':1, date:2]), domainV(A20, ['EndFn':1, date:2]), domainV(Z19, ['$instanceof':'Publication', date:1, patient:1]), domainV(Y19, ['$instanceof':'Publication', date:1, patient:1]), domainV(X19, ['SeriesVolumeFn':3, patient:2]), domainV(W19, ['SeriesVolumeFn':2, greaterThan:1]), domainV(V19, ['SeriesVolumeFn':3, patient:2]), domainV(U19, ['SeriesVolumeFn':2, greaterThan:2]), domainV(T19, ['SeriesVolumeFn':1, subclass:1]), domainV(_G2522, []), forall(T19), forall(U19), forall(V19), forall(W19), forall(X19), forall(Y19), forall(Z19), forall(A20), forall(B20)], ['TEXT'=T19, 'INT1'=U19, 'VOLUME1'=V19, 'INT2'=W19, 'VOLUME2'=X19, 'PUB1'=Y19, 'PUB2'=Z19, 'DATE1'=A20, 'DATE2'=B20], 'Merge', 'OBJECTS', 6582, 'Anonymous', on).
mooCache(equal('SeriesVolumeFn'(K22, L22), M22)=>subsumesContentClass(K22, M22), entails(not subsumesContentClass(K22, M22), not holds('SeriesVolumeFn', K22, L22, M22))and entails(holds('SeriesVolumeFn', K22, L22, M22), subsumesContentClass(K22, M22)), [domainV(M22, ['SeriesVolumeFn':3, subsumesContentClass:2]), domainV(L22, ['SeriesVolumeFn':2]), domainV(K22, ['SeriesVolumeFn':1, subsumesContentClass:1]), domainV(_G5269, []), forall(K22), forall(L22), forall(M22)], ['SERIES'=K22, 'NUMBER'=L22, 'VOLUME'=M22], 'Merge', 'OBJECTS', 6584, 'Anonymous', on).
mooCache(instance('PeriodicalIssueFn', 'BinaryFunction'), instance('PeriodicalIssueFn', 'BinaryFunction'), [], [], 'Merge', 'OBJECTS', 6586, 'Anonymous', on).
mooCache(domainSubclass('PeriodicalIssueFn', 1, 'Periodical'), domainSubclass('PeriodicalIssueFn', 1, 'Periodical'), [], [], 'Merge', 'OBJECTS', 6588, 'Anonymous', on).
mooCache(domain('PeriodicalIssueFn', 2, 'PositiveInteger'), domain('PeriodicalIssueFn', 2, 'PositiveInteger'), [], [], 'Merge', 'OBJECTS', 6590, 'Anonymous', on).
mooCache(rangeSubclass('PeriodicalIssueFn', 'Periodical'), rangeSubclass('PeriodicalIssueFn', 'Periodical'), [], [], 'Merge', 'OBJECTS', 6592, 'Anonymous', on).
mooCache(documentation('PeriodicalIssueFn', string('"A BinaryFunction that maps a subclass of   Periodical and a number to all of the issues of the Periodical corresponding   to the number."')), documentation('PeriodicalIssueFn', string('"A BinaryFunction that maps a subclass of   Periodical and a number to all of the issues of the Periodical corresponding   to the number."')), [], [], 'Merge', 'OBJECTS', 6594, 'Anonymous', on).
mooCache(equal('PeriodicalIssueFn'(T25, U25), V25)=>subsumesContentClass(T25, V25), entails(not subsumesContentClass(T25, V25), not holds('PeriodicalIssueFn', T25, U25, V25))and entails(holds('PeriodicalIssueFn', T25, U25, V25), subsumesContentClass(T25, V25)), [domainV(V25, ['PeriodicalIssueFn':3, subsumesContentClass:2]), domainV(U25, ['PeriodicalIssueFn':2]), domainV(T25, ['PeriodicalIssueFn':1, subsumesContentClass:1]), domainV(_G5323, []), forall(T25), forall(U25), forall(V25)], ['PERIODICAL'=T25, 'NUMBER'=U25, 'ISSUE'=V25], 'Merge', 'OBJECTS', 6596, 'Anonymous', on).
mooCache(subclass('Book', 'Text'), subclass('Book', 'Text'), [], [], 'Merge', 'OBJECTS', 6598, 'Anonymous', on).
mooCache(documentation('Book', string('"A Text that has pages and is bound."')), documentation('Book', string('"A Text that has pages and is bound."')), [], [], 'Merge', 'OBJECTS', 6600, 'Anonymous', on).
mooCache(subclass('Summary', 'Text'), subclass('Summary', 'Text'), [], [], 'Merge', 'OBJECTS', 6602, 'Anonymous', on).
mooCache(documentation('Summary', string('"A short Text that is a summary of another,   longer Text."')), documentation('Summary', string('"A short Text that is a summary of another,   longer Text."')), [], [], 'Merge', 'OBJECTS', 6604, 'Anonymous', on).
mooCache(instance(Q28, 'Summary')=>exists(R28, instance(R28, 'Text')and subsumesContentInstance(R28, Q28)), (entails(not instance(R28, 'Text'), not instance(Q28, 'Summary'))and entails(instance(Q28, 'Summary')and'$existential'(R28, '?TEXT2', instance('?TEXT2', 'Text')and subsumesContentInstance('?TEXT2', Q28)), instance(R28, 'Text')))and entails(not subsumesContentInstance(R28, Q28), not instance(Q28, 'Summary'))and entails(instance(Q28, 'Summary')and'$existential'(R28, '?TEXT2', instance('?TEXT2', 'Text')and subsumesContentInstance('?TEXT2', Q28)), subsumesContentInstance(R28, Q28)), [domainV(R28, ['$instanceof':'Text', subsumesContentInstance:1]), domainV(Q28, ['$instanceof':'Summary', subsumesContentInstance:2]), domainV(_G6882, []), forall(Q28), replaceConsVar(R28, '$existential'('?TEXT2', instance('?TEXT2', 'Text')and subsumesContentInstance('?TEXT2', Q28)))], ['TEXT'=Q28, 'TEXT2'=R28], 'Merge', 'OBJECTS', 6606, 'Anonymous', on).
mooCache(subclass('Series', 'ContentBearingObject'), subclass('Series', 'ContentBearingObject'), [], [], 'Merge', 'OBJECTS', 6608, 'Anonymous', on).
mooCache(documentation('Series', string('"A ContentBearingObject consisting of multiple   self-contained units.  Some examples are an encyclopedia containing a couple   dozen volumes, a television series made up of many dozens of episodes, a   film serial, etc."')), documentation('Series', string('"A ContentBearingObject consisting of multiple   self-contained units.  Some examples are an encyclopedia containing a couple   dozen volumes, a television series made up of many dozens of episodes, a   film serial, etc."')), [], [], 'Merge', 'OBJECTS', 6610, 'Anonymous', on).
mooCache(instance(D31, 'Series')=>exists(E31, exists(F31, instance(F31, 'Book')and instance(E31, 'Book')and subsumesContentInstance(D31, F31)and subsumesContentInstance(D31, E31)and not equal(F31, E31))), (entails(not instance(F31, 'Book'), not instance(D31, 'Series'))and entails(instance(D31, 'Series')and'$existential'(F31, '?BOOK1', instance('?BOOK1', 'Book')and instance(E31, 'Book')and subsumesContentInstance(D31, '?BOOK1')and subsumesContentInstance(D31, E31)and not equal('?BOOK1', E31)), instance(F31, 'Book')))and (entails(not instance(E31, 'Book'), not instance(D31, 'Series'))and entails((instance(D31, 'Series')and'$existential'(E31, '?BOOK2', exists(F31, instance(F31, 'Book')and instance('?BOOK2', 'Book')and subsumesContentInstance(D31, F31)and subsumesContentInstance(D31, '?BOOK2')and not equal(F31, '?BOOK2'))))and'$existential'(F31, '?BOOK1', instance('?BOOK1', 'Book')and instance(E31, 'Book')and subsumesContentInstance(D31, '?BOOK1')and subsumesContentInstance(D31, E31)and not equal('?BOOK1', E31)), instance(E31, 'Book')))and (entails(not subsumesContentInstance(D31, F31), not instance(D31, 'Series'))and entails(instance(D31, 'Series')and'$existential'(F31, '?BOOK1', instance('?BOOK1', 'Book')and instance(E31, 'Book')and subsumesContentInstance(D31, '?BOOK1')and subsumesContentInstance(D31, E31)and not equal('?BOOK1', E31)), subsumesContentInstance(D31, F31)))and (entails(not subsumesContentInstance(D31, E31), not instance(D31, 'Series'))and entails((instance(D31, 'Series')and'$existential'(E31, '?BOOK2', exists(F31, instance(F31, 'Book')and instance('?BOOK2', 'Book')and subsumesContentInstance(D31, F31)and subsumesContentInstance(D31, '?BOOK2')and not equal(F31, '?BOOK2'))))and'$existential'(F31, '?BOOK1', instance('?BOOK1', 'Book')and instance(E31, 'Book')and subsumesContentInstance(D31, '?BOOK1')and subsumesContentInstance(D31, E31)and not equal('?BOOK1', E31)), subsumesContentInstance(D31, E31)))and entails(equal(F31, E31), not instance(D31, 'Series'))and entails(instance(D31, 'Series'), not equal(F31, E31)), [domainV(F31, ['$instanceof':'Book', subsumesContentInstance:2]), domainV(E31, ['$instanceof':'Book', subsumesContentInstance:2]), domainV(D31, ['$instanceof':'Series', subsumesContentInstance:1]), domainV(_G13501, []), forall(D31), replaceConsVar(E31, '$existential'('?BOOK2', exists(F31, instance(F31, 'Book')and instance('?BOOK2', 'Book')and subsumesContentInstance(D31, F31)and subsumesContentInstance(D31, '?BOOK2')and not equal(F31, '?BOOK2')))), replaceConsVar(F31, '$existential'('?BOOK1', instance('?BOOK1', 'Book')and instance(E31, 'Book')and subsumesContentInstance(D31, '?BOOK1')and subsumesContentInstance(D31, E31)and not equal('?BOOK1', E31)))], ['SERIES'=D31, 'BOOK1'=F31, 'BOOK2'=E31], 'Merge', 'OBJECTS', 6612, 'Anonymous', on).
mooCache(subclass('Periodical', 'Series'), subclass('Periodical', 'Series'), [], [], 'Merge', 'OBJECTS', 6614, 'Anonymous', on).
mooCache(documentation('Periodical', string('"A Series whose elements are published separately   and on a periodic basis."')), documentation('Periodical', string('"A Series whose elements are published separately   and on a periodic basis."')), [], [], 'Merge', 'OBJECTS', 6616, 'Anonymous', on).
mooCache(subclass('Article', 'Text'), subclass('Article', 'Text'), [], [], 'Merge', 'OBJECTS', 6618, 'Anonymous', on).
mooCache(documentation('Article', string('"An article in a Book or Series."')), documentation('Article', string('"An article in a Book or Series."')), [], [], 'Merge', 'OBJECTS', 6620, 'Anonymous', on).
mooCache(instance(O34, 'Article')=>exists(P34, instance(P34, 'Book')and subsumesContentInstance(P34, O34)), (entails(not instance(P34, 'Book'), not instance(O34, 'Article'))and entails(instance(O34, 'Article')and'$existential'(P34, '?BOOK', instance('?BOOK', 'Book')and subsumesContentInstance('?BOOK', O34)), instance(P34, 'Book')))and entails(not subsumesContentInstance(P34, O34), not instance(O34, 'Article'))and entails(instance(O34, 'Article')and'$existential'(P34, '?BOOK', instance('?BOOK', 'Book')and subsumesContentInstance('?BOOK', O34)), subsumesContentInstance(P34, O34)), [domainV(P34, ['$instanceof':'Book', subsumesContentInstance:1]), domainV(O34, ['$instanceof':'Article', subsumesContentInstance:2]), domainV(_G6756, []), forall(O34), replaceConsVar(P34, '$existential'('?BOOK', instance('?BOOK', 'Book')and subsumesContentInstance('?BOOK', O34)))], ['ARTICLE'=O34, 'BOOK'=P34], 'Merge', 'OBJECTS', 6622, 'Anonymous', on).
mooCache(subclass('Certificate', 'Text'), subclass('Certificate', 'Text'), [], [], 'Merge', 'OBJECTS', 6624, 'Anonymous', on).
mooCache(documentation('Certificate', string('"A Text that confers a right or obligation   on the holder of the Certificate.  Note that the right or obligation   need not be a legal one, as in the case of an academic diploma that grants   certain privileges in the professional world."')), documentation('Certificate', string('"A Text that confers a right or obligation   on the holder of the Certificate.  Note that the right or obligation   need not be a legal one, as in the case of an academic diploma that grants   certain privileges in the professional world."')), [], [], 'Merge', 'OBJECTS', 6626, 'Anonymous', on).
mooCache(instance(P36, 'Certificate')and possesses(Q36, P36)=>exists(R36, confersRight(R36, P36, Q36)or confersObligation(R36, P36, Q36)), entails(possesses(Q36, P36)and not confersRight(R36, P36, Q36)and not confersObligation(R36, P36, Q36), not instance(P36, 'Certificate'))and entails(instance(P36, 'Certificate')and not confersRight(R36, P36, Q36)and not confersObligation(R36, P36, Q36), not possesses(Q36, P36))and entails(((instance(P36, 'Certificate')and possesses(Q36, P36))and not confersObligation(R36, P36, Q36))and'$existential'(R36, '?PROC', confersRight('?PROC', P36, Q36)or confersObligation('?PROC', P36, Q36)), confersRight(R36, P36, Q36))and entails(((instance(P36, 'Certificate')and possesses(Q36, P36))and not confersRight(R36, P36, Q36))and'$existential'(R36, '?PROC', confersRight('?PROC', P36, Q36)or confersObligation('?PROC', P36, Q36)), confersObligation(R36, P36, Q36)), [domainV(R36, [confersObligation:1, confersRight:1]), domainV(Q36, [confersObligation:3, confersRight:3, possesses:1]), domainV(P36, ['$instanceof':'Certificate', confersObligation:2, confersRight:2, possesses:2]), domainV(_G9658, []), forall(P36), forall(Q36), replaceConsVar(R36, '$existential'('?PROC', confersRight('?PROC', P36, Q36)or confersObligation('?PROC', P36, Q36)))], ['DOC'=P36, 'AGENT'=Q36, 'PROC'=R36], 'Merge', 'OBJECTS', 6628, 'Anonymous', on).
mooCache(subclass('Patent', 'Certificate'), subclass('Patent', 'Certificate'), [], [], 'Merge', 'OBJECTS', 6630, 'Anonymous', on).
mooCache(documentation('Patent', string('"A Certificate that expresses the content of an   invention that has been accorded legal protection by a governemental   entity."')), documentation('Patent', string('"A Certificate that expresses the content of an   invention that has been accorded legal protection by a governemental   entity."')), [], [], 'Merge', 'OBJECTS', 6632, 'Anonymous', on).
mooCache(subclass('SubmolecularObject', 'CorpuscularObject'), subclass('SubmolecularObject', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6634, 'Anonymous', on).
mooCache(documentation('SubmolecularObject', string('"The Class of CorpuscularObjects   that compose Molecules."')), documentation('SubmolecularObject', string('"The Class of CorpuscularObjects   that compose Molecules."')), [], [], 'Merge', 'OBJECTS', 6636, 'Anonymous', on).
mooCache(instance(F1, 'SubmolecularObject')=>exists(G1, instance(G1, 'Molecule')and part(F1, G1)), (entails(not instance(G1, 'Molecule'), not instance(F1, 'SubmolecularObject'))and entails(instance(F1, 'SubmolecularObject')and'$existential'(G1, '?MOLE', instance('?MOLE', 'Molecule')and part(F1, '?MOLE')), instance(G1, 'Molecule')))and entails(not part(F1, G1), not instance(F1, 'SubmolecularObject'))and entails(instance(F1, 'SubmolecularObject')and'$existential'(G1, '?MOLE', instance('?MOLE', 'Molecule')and part(F1, '?MOLE')), part(F1, G1)), [domainV(G1, ['$instanceof':'Molecule', part:2]), domainV(F1, ['$instanceof':'SubmolecularObject', part:1]), domainV(_G6732, []), forall(F1), replaceConsVar(G1, '$existential'('?MOLE', instance('?MOLE', 'Molecule')and part(F1, '?MOLE')))], ['SUBMOLE'=F1, 'MOLE'=G1], 'Merge', 'OBJECTS', 6638, 'Anonymous', on).
mooCache(subclass('Molecule', 'CompoundSubstance'), subclass('Molecule', 'CompoundSubstance'), [], [], 'Merge', 'OBJECTS', 6640, 'Anonymous', on).
mooCache(documentation('Molecule', string('"A molecule is the smallest unit of matter of a   CompoundSubstance that retains all the physical and chemical properties   of that substance, e.g., Ne, H2, H2O.  A molecule is two or more Atoms   linked by a chemical bond."')), documentation('Molecule', string('"A molecule is the smallest unit of matter of a   CompoundSubstance that retains all the physical and chemical properties   of that substance, e.g., Ne, H2, H2O.  A molecule is two or more Atoms   linked by a chemical bond."')), [], [], 'Merge', 'OBJECTS', 6642, 'Anonymous', on).
mooCache(instance(R3, 'Molecule')=>exists(S3, exists(T3, instance(T3, 'Atom')and instance(S3, 'Atom')and part(T3, R3)and part(S3, R3)and not equal(T3, S3))), (entails(not instance(T3, 'Atom'), not instance(R3, 'Molecule'))and entails(instance(R3, 'Molecule')and'$existential'(T3, '?ATOM1', instance('?ATOM1', 'Atom')and instance(S3, 'Atom')and part('?ATOM1', R3)and part(S3, R3)and not equal('?ATOM1', S3)), instance(T3, 'Atom')))and (entails(not instance(S3, 'Atom'), not instance(R3, 'Molecule'))and entails((instance(R3, 'Molecule')and'$existential'(S3, '?ATOM2', exists(T3, instance(T3, 'Atom')and instance('?ATOM2', 'Atom')and part(T3, R3)and part('?ATOM2', R3)and not equal(T3, '?ATOM2'))))and'$existential'(T3, '?ATOM1', instance('?ATOM1', 'Atom')and instance(S3, 'Atom')and part('?ATOM1', R3)and part(S3, R3)and not equal('?ATOM1', S3)), instance(S3, 'Atom')))and (entails(not part(T3, R3), not instance(R3, 'Molecule'))and entails(instance(R3, 'Molecule')and'$existential'(T3, '?ATOM1', instance('?ATOM1', 'Atom')and instance(S3, 'Atom')and part('?ATOM1', R3)and part(S3, R3)and not equal('?ATOM1', S3)), part(T3, R3)))and (entails(not part(S3, R3), not instance(R3, 'Molecule'))and entails((instance(R3, 'Molecule')and'$existential'(S3, '?ATOM2', exists(T3, instance(T3, 'Atom')and instance('?ATOM2', 'Atom')and part(T3, R3)and part('?ATOM2', R3)and not equal(T3, '?ATOM2'))))and'$existential'(T3, '?ATOM1', instance('?ATOM1', 'Atom')and instance(S3, 'Atom')and part('?ATOM1', R3)and part(S3, R3)and not equal('?ATOM1', S3)), part(S3, R3)))and entails(equal(T3, S3), not instance(R3, 'Molecule'))and entails(instance(R3, 'Molecule'), not equal(T3, S3)), [domainV(T3, ['$instanceof':'Atom', part:1]), domainV(S3, ['$instanceof':'Atom', part:1]), domainV(R3, ['$instanceof':'Molecule', part:2]), domainV(_G13264, []), forall(R3), replaceConsVar(S3, '$existential'('?ATOM2', exists(T3, instance(T3, 'Atom')and instance('?ATOM2', 'Atom')and part(T3, R3)and part('?ATOM2', R3)and not equal(T3, '?ATOM2')))), replaceConsVar(T3, '$existential'('?ATOM1', instance('?ATOM1', 'Atom')and instance(S3, 'Atom')and part('?ATOM1', R3)and part(S3, R3)and not equal('?ATOM1', S3)))], ['MOLE'=R3, 'ATOM1'=T3, 'ATOM2'=S3], 'Merge', 'OBJECTS', 6644, 'Anonymous', on).
mooCache(subclass('Atom', 'SubmolecularObject'), subclass('Atom', 'SubmolecularObject'), [], [], 'Merge', 'OBJECTS', 6646, 'Anonymous', on).
mooCache(documentation('Atom', string('"An extremely small unit of matter that retains its   identity in Chemical reactions.  It consists of an AtomicNucleus and   Electrons surrounding the AtomicNucleus."')), documentation('Atom', string('"An extremely small unit of matter that retains its   identity in Chemical reactions.  It consists of an AtomicNucleus and   Electrons surrounding the AtomicNucleus."')), [], [], 'Merge', 'OBJECTS', 6648, 'Anonymous', on).
mooCache(instance(I6, 'Atom')=>exists(J6, exists(K6, component(K6, I6)and component(J6, I6)and instance(K6, 'Proton')and instance(J6, 'Electron'))), (entails(not component(K6, I6), not instance(I6, 'Atom'))and entails(instance(I6, 'Atom')and'$existential'(K6, '?PROTON', component('?PROTON', I6)and component(J6, I6)and instance('?PROTON', 'Proton')and instance(J6, 'Electron')), component(K6, I6)))and (entails(not component(J6, I6), not instance(I6, 'Atom'))and entails((instance(I6, 'Atom')and'$existential'(J6, '?ELECTRON', exists(K6, component(K6, I6)and component('?ELECTRON', I6)and instance(K6, 'Proton')and instance('?ELECTRON', 'Electron'))))and'$existential'(K6, '?PROTON', component('?PROTON', I6)and component(J6, I6)and instance('?PROTON', 'Proton')and instance(J6, 'Electron')), component(J6, I6)))and (entails(not instance(K6, 'Proton'), not instance(I6, 'Atom'))and entails(instance(I6, 'Atom')and'$existential'(K6, '?PROTON', component('?PROTON', I6)and component(J6, I6)and instance('?PROTON', 'Proton')and instance(J6, 'Electron')), instance(K6, 'Proton')))and entails(not instance(J6, 'Electron'), not instance(I6, 'Atom'))and entails((instance(I6, 'Atom')and'$existential'(J6, '?ELECTRON', exists(K6, component(K6, I6)and component('?ELECTRON', I6)and instance(K6, 'Proton')and instance('?ELECTRON', 'Electron'))))and'$existential'(K6, '?PROTON', component('?PROTON', I6)and component(J6, I6)and instance('?PROTON', 'Proton')and instance(J6, 'Electron')), instance(J6, 'Electron')), [domainV(K6, ['$instanceof':'Proton', component:1]), domainV(J6, ['$instanceof':'Electron', component:1]), domainV(I6, ['$instanceof':'Atom', component:2]), domainV(_G10825, []), forall(I6), replaceConsVar(J6, '$existential'('?ELECTRON', exists(K6, component(K6, I6)and component('?ELECTRON', I6)and instance(K6, 'Proton')and instance('?ELECTRON', 'Electron')))), replaceConsVar(K6, '$existential'('?PROTON', component('?PROTON', I6)and component(J6, I6)and instance('?PROTON', 'Proton')and instance(J6, 'Electron')))], ['ATOM'=I6, 'PROTON'=K6, 'ELECTRON'=J6], 'Merge', 'OBJECTS', 6650, 'Anonymous', on).
mooCache(instance(A8, 'Atom')=>forall(B8, forall(C8, component(C8, A8)and component(B8, A8)and instance(C8, 'AtomicNucleus')and instance(B8, 'AtomicNucleus')=>equal(C8, B8))), entails(not equal(C8, B8)and component(C8, A8)and component(B8, A8)and instance(C8, 'AtomicNucleus')and instance(B8, 'AtomicNucleus'), not instance(A8, 'Atom'))and entails(instance(A8, 'Atom')and component(C8, A8)and component(B8, A8)and instance(C8, 'AtomicNucleus')and instance(B8, 'AtomicNucleus'), equal(C8, B8))and entails(instance(A8, 'Atom')and not equal(C8, B8)and component(B8, A8)and instance(C8, 'AtomicNucleus')and instance(B8, 'AtomicNucleus'), not component(C8, A8))and entails(instance(A8, 'Atom')and not equal(C8, B8)and component(C8, A8)and instance(C8, 'AtomicNucleus')and instance(B8, 'AtomicNucleus'), not component(B8, A8))and entails(instance(A8, 'Atom')and not equal(C8, B8)and component(C8, A8)and component(B8, A8)and instance(B8, 'AtomicNucleus'), not instance(C8, 'AtomicNucleus'))and entails(instance(A8, 'Atom')and not equal(C8, B8)and component(C8, A8)and component(B8, A8)and instance(C8, 'AtomicNucleus'), not instance(B8, 'AtomicNucleus')), [domainV(C8, ['$instanceof':'AtomicNucleus', component:1]), domainV(B8, ['$instanceof':'AtomicNucleus', component:1]), domainV(A8, ['$instanceof':'Atom', component:2]), domainV(_G12761, []), forall(A8), forall(B8), forall(C8)], ['ATOM'=A8, 'NUCLEUS1'=C8, 'NUCLEUS2'=B8], 'Merge', 'OBJECTS', 6652, 'Anonymous', on).
mooCache(subclass('SubatomicParticle', 'SubmolecularObject'), subclass('SubatomicParticle', 'SubmolecularObject'), [], [], 'Merge', 'OBJECTS', 6654, 'Anonymous', on).
mooCache(documentation('SubatomicParticle', string('"The class of SubmolecularObjects that   are smaller than Atoms and often compose Atoms."')), documentation('SubatomicParticle', string('"The class of SubmolecularObjects that   are smaller than Atoms and often compose Atoms."')), [], [], 'Merge', 'OBJECTS', 6656, 'Anonymous', on).
mooCache(subclass('AtomicNucleus', 'SubatomicParticle'), subclass('AtomicNucleus', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6658, 'Anonymous', on).
mooCache(documentation('AtomicNucleus', string('"The core of the Atom.  It is composed of   Protons and Neutrons."')), documentation('AtomicNucleus', string('"The core of the Atom.  It is composed of   Protons and Neutrons."')), [], [], 'Merge', 'OBJECTS', 6660, 'Anonymous', on).
mooCache(instance(L11, 'AtomicNucleus')=>exists(M11, exists(N11, component(N11, L11)and component(M11, L11)and instance(N11, 'Neutron')and instance(M11, 'Proton'))), (entails(not component(N11, L11), not instance(L11, 'AtomicNucleus'))and entails(instance(L11, 'AtomicNucleus')and'$existential'(N11, '?NEUTRON', component('?NEUTRON', L11)and component(M11, L11)and instance('?NEUTRON', 'Neutron')and instance(M11, 'Proton')), component(N11, L11)))and (entails(not component(M11, L11), not instance(L11, 'AtomicNucleus'))and entails((instance(L11, 'AtomicNucleus')and'$existential'(M11, '?PROTON', exists(N11, component(N11, L11)and component('?PROTON', L11)and instance(N11, 'Neutron')and instance('?PROTON', 'Proton'))))and'$existential'(N11, '?NEUTRON', component('?NEUTRON', L11)and component(M11, L11)and instance('?NEUTRON', 'Neutron')and instance(M11, 'Proton')), component(M11, L11)))and (entails(not instance(N11, 'Neutron'), not instance(L11, 'AtomicNucleus'))and entails(instance(L11, 'AtomicNucleus')and'$existential'(N11, '?NEUTRON', component('?NEUTRON', L11)and component(M11, L11)and instance('?NEUTRON', 'Neutron')and instance(M11, 'Proton')), instance(N11, 'Neutron')))and entails(not instance(M11, 'Proton'), not instance(L11, 'AtomicNucleus'))and entails((instance(L11, 'AtomicNucleus')and'$existential'(M11, '?PROTON', exists(N11, component(N11, L11)and component('?PROTON', L11)and instance(N11, 'Neutron')and instance('?PROTON', 'Proton'))))and'$existential'(N11, '?NEUTRON', component('?NEUTRON', L11)and component(M11, L11)and instance('?NEUTRON', 'Neutron')and instance(M11, 'Proton')), instance(M11, 'Proton')), [domainV(N11, ['$instanceof':'Neutron', component:1]), domainV(M11, ['$instanceof':'Proton', component:1]), domainV(L11, ['$instanceof':'AtomicNucleus', component:2]), domainV(_G10909, []), forall(L11), replaceConsVar(M11, '$existential'('?PROTON', exists(N11, component(N11, L11)and component('?PROTON', L11)and instance(N11, 'Neutron')and instance('?PROTON', 'Proton')))), replaceConsVar(N11, '$existential'('?NEUTRON', component('?NEUTRON', L11)and component(M11, L11)and instance('?NEUTRON', 'Neutron')and instance(M11, 'Proton')))], ['NUCLEUS'=L11, 'NEUTRON'=N11, 'PROTON'=M11], 'Merge', 'OBJECTS', 6662, 'Anonymous', on).
mooCache(subclass('Electron', 'SubatomicParticle'), subclass('Electron', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6664, 'Anonymous', on).
mooCache(documentation('Electron', string('"SubatomicParticles that surround the   AtomicNucleus.  They have a negative charge."')), documentation('Electron', string('"SubatomicParticles that surround the   AtomicNucleus.  They have a negative charge."')), [], [], 'Merge', 'OBJECTS', 6666, 'Anonymous', on).
mooCache(subclass('Proton', 'SubatomicParticle'), subclass('Proton', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6668, 'Anonymous', on).
mooCache(documentation('Proton', string('"Components of the AtomicNucleus.  They have a   positive charge."')), documentation('Proton', string('"Components of the AtomicNucleus.  They have a   positive charge."')), [], [], 'Merge', 'OBJECTS', 6670, 'Anonymous', on).
mooCache(subclass('Neutron', 'SubatomicParticle'), subclass('Neutron', 'SubatomicParticle'), [], [], 'Merge', 'OBJECTS', 6672, 'Anonymous', on).
mooCache(documentation('Neutron', string('"Components of the AtomicNucleus.  They have no   charge."')), documentation('Neutron', string('"Components of the AtomicNucleus.  They have no   charge."')), [], [], 'Merge', 'OBJECTS', 6674, 'Anonymous', on).
mooCache(subclass('Artifact', 'CorpuscularObject'), subclass('Artifact', 'CorpuscularObject'), [], [], 'Merge', 'OBJECTS', 6676, 'Anonymous', on).
mooCache(documentation('Artifact', string('"A CorpuscularObject that is the product of an   IntentionalProcess."')), documentation('Artifact', string('"A CorpuscularObject that is the product of an   IntentionalProcess."')), [], [], 'Merge', 'OBJECTS', 6678, 'Anonymous', on).
mooCache(instance(I16, 'Artifact')=>exists(J16, instance(K16, 'Making')and result(J16, I16)), (entails(not instance(K16, 'Making'), not instance(I16, 'Artifact'))and entails(instance(I16, 'Artifact'), instance(K16, 'Making')))and entails(not result(J16, I16), not instance(I16, 'Artifact'))and entails(instance(I16, 'Artifact')and'$existential'(J16, '?MAKING', instance(K16, 'Making')and result('?MAKING', I16)), result(J16, I16)), [domainV(K16, ['$instanceof':'Making']), domainV(J16, [result:1]), domainV(I16, ['$instanceof':'Artifact', result:2]), domainV(_G6805, []), forall(I16), forall(K16), replaceConsVar(J16, '$existential'('?MAKING', instance(K16, 'Making')and result('?MAKING', I16)))], ['ARTIFACT'=I16, 'MAKING'=J16, 'PROCESS'=K16], 'Merge', 'OBJECTS', 6680, 'Anonymous', on).
mooCache(subclass('Product', 'Artifact'), subclass('Product', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6682, 'Anonymous', on).
mooCache(documentation('Product', string('"An Artifact that is produced by Manufacture and   that is intended to be sold."')), documentation('Product', string('"An Artifact that is produced by Manufacture and   that is intended to be sold."')), [], [], 'Merge', 'OBJECTS', 6684, 'Anonymous', on).
mooCache(instance(D18, 'Product')=>exists(E18, instance(E18, 'Manufacture')and result(E18, D18)), (entails(not instance(E18, 'Manufacture'), not instance(D18, 'Product'))and entails(instance(D18, 'Product')and'$existential'(E18, '?MANUFACTURE', instance('?MANUFACTURE', 'Manufacture')and result('?MANUFACTURE', D18)), instance(E18, 'Manufacture')))and entails(not result(E18, D18), not instance(D18, 'Product'))and entails(instance(D18, 'Product')and'$existential'(E18, '?MANUFACTURE', instance('?MANUFACTURE', 'Manufacture')and result('?MANUFACTURE', D18)), result(E18, D18)), [domainV(E18, ['$instanceof':'Manufacture', result:1]), domainV(D18, ['$instanceof':'Product', result:2]), domainV(_G6822, []), forall(D18), replaceConsVar(E18, '$existential'('?MANUFACTURE', instance('?MANUFACTURE', 'Manufacture')and result('?MANUFACTURE', D18)))], ['PRODUCT'=D18, 'MANUFACTURE'=E18], 'Merge', 'OBJECTS', 6686, 'Anonymous', on).
mooCache(subclass('Award', 'Artifact'), subclass('Award', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6688, 'Anonymous', on).
mooCache(documentation('Award', string('"An Artifact which is given to someone in honor of   something that he/she has done."')), documentation('Award', string('"An Artifact which is given to someone in honor of   something that he/she has done."')), [], [], 'Merge', 'OBJECTS', 6690, 'Anonymous', on).
mooCache(instance(version, 'BinaryPredicate'), instance(version, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6692, 'Anonymous', on).
mooCache(instance(version, 'AsymmetricRelation'), instance(version, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6694, 'Anonymous', on).
mooCache(instance(version, 'TransitiveRelation'), instance(version, 'TransitiveRelation'), [], [], 'Merge', 'OBJECTS', 6696, 'Anonymous', on).
mooCache(domainSubclass(version, 1, 'Artifact'), domainSubclass(version, 1, 'Artifact'), [], [], 'Merge', 'OBJECTS', 6698, 'Anonymous', on).
mooCache(domainSubclass(version, 2, 'Artifact'), domainSubclass(version, 2, 'Artifact'), [], [], 'Merge', 'OBJECTS', 6700, 'Anonymous', on).
mooCache(documentation(version, string('"Some Artifacts have a life cycle with discrete   stages or versions.  (version ARTIFACT1 ARTIFACT2) means that ARTIFACT1   is a version of ARTIFACT2.  Note that this Predicate relates subclasses of   Artifact and not instances."')), documentation(version, string('"Some Artifacts have a life cycle with discrete   stages or versions.  (version ARTIFACT1 ARTIFACT2) means that ARTIFACT1   is a version of ARTIFACT2.  Note that this Predicate relates subclasses of   Artifact and not instances."')), [], [], 'Merge', 'OBJECTS', 6702, 'Anonymous', on).
mooCache(version(L22, M22)=>subclass(L22, M22), entails(not subclass(L22, M22), not version(L22, M22))and entails(version(L22, M22), subclass(L22, M22)), [domainV(M22, [subclass:2, version:2]), domainV(L22, [subclass:1, version:1]), domainV(_G4588, []), forall(L22), forall(M22)], ['ARTIFACT1'=L22, 'ARTIFACT2'=M22], 'Merge', 'OBJECTS', 6704, 'Anonymous', on).
mooCache(subclass('StationaryArtifact', 'Artifact'), subclass('StationaryArtifact', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6714, 'Anonymous', on).
mooCache(documentation('StationaryArtifact', string('"A StationaryArtifact is an Artifact   that has a fixed spatial location.  Most instances of this Class are   architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers,   single-family houses, etc."')), documentation('StationaryArtifact', string('"A StationaryArtifact is an Artifact   that has a fixed spatial location.  Most instances of this Class are   architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers,   single-family houses, etc."')), [], [], 'Merge', 'OBJECTS', 6716, 'Anonymous', on).
mooCache(instance(Q24, 'StationaryArtifact')=>exists(R24, forall(S24, beforeOrEqual(S24, 'EndFn'('WhenFn'(Q24)))and beforeOrEqual('BeginFn'('WhenFn'(Q24)), S24)=>equal('WhereFn'(Q24, S24), R24))), entails(not holds('WhereFn', Q24, S24, R24)and beforeOrEqual(S24, 'EndFn'('WhenFn'(Q24)))and beforeOrEqual('BeginFn'('WhenFn'(Q24)), S24), not instance(Q24, 'StationaryArtifact'))and entails((instance(Q24, 'StationaryArtifact')and beforeOrEqual(S24, 'EndFn'('WhenFn'(Q24)))and beforeOrEqual('BeginFn'('WhenFn'(Q24)), S24))and'$existential'(R24, '?PLACE', forall(S24, beforeOrEqual(S24, 'EndFn'('WhenFn'(Q24)))and beforeOrEqual('BeginFn'('WhenFn'(Q24)), S24)=>holds('WhereFn', Q24, S24, '?PLACE'))), holds('WhereFn', Q24, S24, R24))and entails(instance(Q24, 'StationaryArtifact')and not holds('WhereFn', Q24, S24, R24)and beforeOrEqual('BeginFn'('WhenFn'(Q24)), S24), not beforeOrEqual(S24, 'EndFn'('WhenFn'(Q24))))and entails(instance(Q24, 'StationaryArtifact')and not holds('WhereFn', Q24, S24, R24)and beforeOrEqual(S24, 'EndFn'('WhenFn'(Q24))), not beforeOrEqual('BeginFn'('WhenFn'(Q24)), S24)), [domainV(S24, ['WhereFn':2, beforeOrEqual:1, beforeOrEqual:2]), domainV(R24, ['WhereFn':3]), domainV(Q24, ['$instanceof':'StationaryArtifact', 'WhenFn':1, 'WhereFn':1]), domainV(_G13670, []), forall(Q24), replaceConsVar(R24, '$existential'('?PLACE', forall(S24, beforeOrEqual(S24, 'EndFn'('WhenFn'(Q24)))and beforeOrEqual('BeginFn'('WhenFn'(Q24)), S24)=>holds('WhereFn', Q24, S24, '?PLACE')))), forall(S24)], ['ARTIFACT'=Q24, 'PLACE'=R24, 'TIME'=S24], 'Merge', 'OBJECTS', 6718, 'Anonymous', on).
mooCache(subclass('Building', 'StationaryArtifact'), subclass('Building', 'StationaryArtifact'), [], [], 'Merge', 'OBJECTS', 6720, 'Anonymous', on).
mooCache(documentation('Building', string('"The Class of StationaryArtifacts which are   intended to house Humans and their activities."')), documentation('Building', string('"The Class of StationaryArtifacts which are   intended to house Humans and their activities."')), [], [], 'Merge', 'OBJECTS', 6722, 'Anonymous', on).
mooCache(instance(Z26, 'Building')=>exists(A27, instance(A27, 'Human')and (inhabits(A27, Z26)or exists(B27, agent(B27, A27)and located(B27, Z26)))), (entails(not instance(A27, 'Human'), not instance(Z26, 'Building'))and entails((instance(Z26, 'Building')and'$existential'(A27, '?HUMAN', instance('?HUMAN', 'Human')and (inhabits('?HUMAN', Z26)or exists(B27, agent(B27, '?HUMAN')and located(B27, Z26)))))and'$existential'(B27, '?ACT', agent('?ACT', A27)and located('?ACT', Z26)), instance(A27, 'Human')))and (entails(not inhabits(A27, Z26)and not agent(B27, A27), not instance(Z26, 'Building'))and entails(((instance(Z26, 'Building')and not agent(B27, A27))and'$existential'(A27, '?HUMAN', instance('?HUMAN', 'Human')and (inhabits('?HUMAN', Z26)or exists(B27, agent(B27, '?HUMAN')and located(B27, Z26)))))and'$existential'(B27, '?ACT', agent('?ACT', A27)and located('?ACT', Z26)), inhabits(A27, Z26))and entails(((instance(Z26, 'Building')and not inhabits(A27, Z26))and'$existential'(A27, '?HUMAN', instance('?HUMAN', 'Human')and (inhabits('?HUMAN', Z26)or exists(B27, agent(B27, '?HUMAN')and located(B27, Z26)))))and'$existential'(B27, '?ACT', agent('?ACT', A27)and located('?ACT', Z26)), agent(B27, A27)))and entails(not inhabits(A27, Z26)and not located(B27, Z26), not instance(Z26, 'Building'))and entails(((instance(Z26, 'Building')and not located(B27, Z26))and'$existential'(A27, '?HUMAN', instance('?HUMAN', 'Human')and (inhabits('?HUMAN', Z26)or exists(B27, agent(B27, '?HUMAN')and located(B27, Z26)))))and'$existential'(B27, '?ACT', agent('?ACT', A27)and located('?ACT', Z26)), inhabits(A27, Z26))and entails((instance(Z26, 'Building')and not inhabits(A27, Z26))and'$existential'(B27, '?ACT', agent('?ACT', A27)and located('?ACT', Z26)), located(B27, Z26)), [domainV(B27, [agent:1, located:1]), domainV(A27, ['$instanceof':'Human', agent:2, inhabits:1]), domainV(Z26, ['$instanceof':'Building', inhabits:2, located:2]), domainV(_G12059, []), forall(Z26), replaceConsVar(A27, '$existential'('?HUMAN', instance('?HUMAN', 'Human')and (inhabits('?HUMAN', Z26)or exists(B27, agent(B27, '?HUMAN')and located(B27, Z26))))), replaceConsVar(B27, '$existential'('?ACT', agent('?ACT', A27)and located('?ACT', Z26)))], ['BUILDING'=Z26, 'HUMAN'=A27, 'ACT'=B27], 'Merge', 'OBJECTS', 6724, 'Anonymous', on).
mooCache(subclass('Room', 'StationaryArtifact'), subclass('Room', 'StationaryArtifact'), [], [], 'Merge', 'OBJECTS', 6726, 'Anonymous', on).
mooCache(documentation('Room', string('"A component of a Building which has a specific   purpose, e.g. sleeping, bathing, cooking, entertainment, etc."')), documentation('Room', string('"A component of a Building which has a specific   purpose, e.g. sleeping, bathing, cooking, entertainment, etc."')), [], [], 'Merge', 'OBJECTS', 6728, 'Anonymous', on).
mooCache(instance(E29, 'Room')=>exists(F29, instance(F29, 'Building')and component(E29, F29)), (entails(not instance(F29, 'Building'), not instance(E29, 'Room'))and entails(instance(E29, 'Room')and'$existential'(F29, '?BUILD', instance('?BUILD', 'Building')and component(E29, '?BUILD')), instance(F29, 'Building')))and entails(not component(E29, F29), not instance(E29, 'Room'))and entails(instance(E29, 'Room')and'$existential'(F29, '?BUILD', instance('?BUILD', 'Building')and component(E29, '?BUILD')), component(E29, F29)), [domainV(F29, ['$instanceof':'Building', component:2]), domainV(E29, ['$instanceof':'Room', component:1]), domainV(_G6660, []), forall(E29), replaceConsVar(F29, '$existential'('?BUILD', instance('?BUILD', 'Building')and component(E29, '?BUILD')))], ['ROOM'=E29, 'BUILD'=F29], 'Merge', 'OBJECTS', 6730, 'Anonymous', on).
mooCache(subclass('ArtWork', 'Artifact'), subclass('ArtWork', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6732, 'Anonymous', on).
mooCache(documentation('ArtWork', string('"Artifacts that are created primarily for   aesthetic appreciation.  Note that this Class does not include   most examples of architecture, which belong under StationaryArtifact."')), documentation('ArtWork', string('"Artifacts that are created primarily for   aesthetic appreciation.  Note that this Class does not include   most examples of architecture, which belong under StationaryArtifact."')), [], [], 'Merge', 'OBJECTS', 6734, 'Anonymous', on).
mooCache(subclass('Fabric', 'Artifact'), subclass('Fabric', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6736, 'Anonymous', on).
mooCache(documentation('Fabric', string('"Artifacts that are created by weaving together   natural or synthetic fibers.  Note that this Class includes articles   that are created by stitching together various types of fabrics, e.g.   bedspreads.  On the other hand, Clothing is not a subclass of Fabric,   because many clothing items contain elements that are not fabrics."')), documentation('Fabric', string('"Artifacts that are created by weaving together   natural or synthetic fibers.  Note that this Class includes articles   that are created by stitching together various types of fabrics, e.g.   bedspreads.  On the other hand, Clothing is not a subclass of Fabric,   because many clothing items contain elements that are not fabrics."')), [], [], 'Merge', 'OBJECTS', 6738, 'Anonymous', on).
mooCache(subclass('Clothing', 'Artifact'), subclass('Clothing', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6740, 'Anonymous', on).
mooCache(documentation('Clothing', string('"Artifact made out of fabrics and/or other   materials that are used to cover the bodies of Humans."')), documentation('Clothing', string('"Artifact made out of fabrics and/or other   materials that are used to cover the bodies of Humans."')), [], [], 'Merge', 'OBJECTS', 6742, 'Anonymous', on).
mooCache(subclass('Device', 'Artifact'), subclass('Device', 'Artifact'), [], [], 'Merge', 'OBJECTS', 6744, 'Anonymous', on).
mooCache(documentation('Device', string('"A Device is an Artifact whose purpose is to   serve as an instrument in a specific type of task."')), documentation('Device', string('"A Device is an Artifact whose purpose is to   serve as an instrument in a specific type of task."')), [], [], 'Merge', 'OBJECTS', 6746, 'Anonymous', on).
mooCache(instance(M33, 'Device')=>exists(N33, instance(N33, 'Process')and instrument(N33, M33)), (entails(not instance(N33, 'Process'), not instance(M33, 'Device'))and entails(instance(M33, 'Device')and'$existential'(N33, '?PROC', instance('?PROC', 'Process')and instrument('?PROC', M33)), instance(N33, 'Process')))and entails(not instrument(N33, M33), not instance(M33, 'Device'))and entails(instance(M33, 'Device')and'$existential'(N33, '?PROC', instance('?PROC', 'Process')and instrument('?PROC', M33)), instrument(N33, M33)), [domainV(N33, ['$instanceof':'Process', instrument:1]), domainV(M33, ['$instanceof':'Device', instrument:2]), domainV(_G6678, []), forall(M33), replaceConsVar(N33, '$existential'('?PROC', instance('?PROC', 'Process')and instrument('?PROC', M33)))], ['DEVICE'=M33, 'PROC'=N33], 'Merge', 'OBJECTS', 6748, 'Anonymous', on).
mooCache(subclass('MusicalInstrument', 'Device'), subclass('MusicalInstrument', 'Device'), [], [], 'Merge', 'OBJECTS', 6750, 'Anonymous', on).
mooCache(documentation('MusicalInstrument', string('"A Device which is manipulated by a Human   and whose purpose is to produce Music."')), documentation('MusicalInstrument', string('"A Device which is manipulated by a Human   and whose purpose is to produce Music."')), [], [], 'Merge', 'OBJECTS', 6752, 'Anonymous', on).
mooCache(instance(H35, 'MusicalInstrument')=>hasPurpose(H35, exists(I35, instance(I35, 'Music')and instrument(I35, H35))), (entails(not hasPurpose(H35, instance(I35, 'Music')), not instance(H35, 'MusicalInstrument'))and entails(instance(H35, 'MusicalInstrument')and'$existential'(I35, '?MUSIC', hasPurpose(H35, instance('?MUSIC', 'Music'))and hasPurpose(H35, instrument('?MUSIC', H35))), hasPurpose(H35, instance(I35, 'Music'))))and entails(not hasPurpose(H35, instrument(I35, H35)), not instance(H35, 'MusicalInstrument'))and entails(instance(H35, 'MusicalInstrument')and'$existential'(I35, '?MUSIC', hasPurpose(H35, instance('?MUSIC', 'Music'))and hasPurpose(H35, instrument('?MUSIC', H35))), hasPurpose(H35, instrument(I35, H35))), [domainV(I35, ['$instanceof':'Music', instrument:1]), domainV(H35, ['$instanceof':'MusicalInstrument', hasPurpose:1, instrument:2]), domainV(_G7967, []), forall(H35), replaceConsVar(I35, '$existential'('?MUSIC', hasPurpose(H35, instance('?MUSIC', 'Music'))and hasPurpose(H35, instrument('?MUSIC', H35))))], ['INSTRUMENT'=H35, 'MUSIC'=I35], 'Merge', 'OBJECTS', 6754, 'Anonymous', on).
mooCache(subclass('TransportationDevice', 'Device'), subclass('TransportationDevice', 'Device'), [], [], 'Merge', 'OBJECTS', 6756, 'Anonymous', on).
mooCache(documentation('TransportationDevice', string('"A TransportationDevice is a Device   which serves as an instrument in Transportation Processes."')), documentation('TransportationDevice', string('"A TransportationDevice is a Device   which serves as an instrument in Transportation Processes."')), [], [], 'Merge', 'OBJECTS', 6758, 'Anonymous', on).
mooCache(subclass('Weapon', 'Device'), subclass('Weapon', 'Device'), [], [], 'Merge', 'OBJECTS', 6760, 'Anonymous', on).
mooCache(documentation('Weapon', string('"The Class of Devices that are designed   primarily to damage or destroy Humans/Animals or the places   inhabited by Humans/Animals."')), documentation('Weapon', string('"The Class of Devices that are designed   primarily to damage or destroy Humans/Animals or the places   inhabited by Humans/Animals."')), [], [], 'Merge', 'OBJECTS', 6762, 'Anonymous', on).
mooCache(instance(E, 'Weapon')=>hasPurpose(E, exists(F, (instance(F, 'Damaging')or instance(F, 'Destruction'))and forall(G, patient(F, G)=>instance(G, 'Animal')or exists(H, instance(H, 'Animal')and inhabits(H, G))))), (entails(not hasPurpose(E, instance(F, 'Damaging'))and not hasPurpose(E, instance(F, 'Destruction')), not instance(E, 'Weapon'))and entails(((instance(E, 'Weapon')and not hasPurpose(E, instance(F, 'Destruction')))and'$existential'(F, '?DEST', (hasPurpose(E, instance('?DEST', 'Damaging'))or hasPurpose(E, instance('?DEST', 'Destruction')))and forall(G, hasPurpose(E, patient('?DEST', G))=>hasPurpose(E, instance(G, 'Animal'))or exists(H, hasPurpose(E, instance(H, 'Animal'))and hasPurpose(E, inhabits(H, G))))))and'$existential'(H, '?ANIMAL', hasPurpose(E, instance('?ANIMAL', 'Animal'))and hasPurpose(E, inhabits('?ANIMAL', G))), hasPurpose(E, instance(F, 'Damaging')))and entails(((instance(E, 'Weapon')and not hasPurpose(E, instance(F, 'Damaging')))and'$existential'(F, '?DEST', (hasPurpose(E, instance('?DEST', 'Damaging'))or hasPurpose(E, instance('?DEST', 'Destruction')))and forall(G, hasPurpose(E, patient('?DEST', G))=>hasPurpose(E, instance(G, 'Animal'))or exists(H, hasPurpose(E, instance(H, 'Animal'))and hasPurpose(E, inhabits(H, G))))))and'$existential'(H, '?ANIMAL', hasPurpose(E, instance('?ANIMAL', 'Animal'))and hasPurpose(E, inhabits('?ANIMAL', G))), hasPurpose(E, instance(F, 'Destruction'))))and (entails(hasPurpose(E, patient(F, G))and not hasPurpose(E, instance(G, 'Animal'))and not hasPurpose(E, instance(H, 'Animal')), not instance(E, 'Weapon'))and entails(instance(E, 'Weapon')and not hasPurpose(E, instance(G, 'Animal'))and not hasPurpose(E, instance(H, 'Animal')), not hasPurpose(E, patient(F, G)))and entails((instance(E, 'Weapon')and hasPurpose(E, patient(F, G))and not hasPurpose(E, instance(H, 'Animal')))and'$existential'(H, '?ANIMAL', hasPurpose(E, instance('?ANIMAL', 'Animal'))and hasPurpose(E, inhabits('?ANIMAL', G))), hasPurpose(E, instance(G, 'Animal')))and entails((instance(E, 'Weapon')and hasPurpose(E, patient(F, G))and not hasPurpose(E, instance(G, 'Animal')))and'$existential'(H, '?ANIMAL', hasPurpose(E, instance('?ANIMAL', 'Animal'))and hasPurpose(E, inhabits('?ANIMAL', G))), hasPurpose(E, instance(H, 'Animal'))))and entails(hasPurpose(E, patient(F, G))and not hasPurpose(E, instance(G, 'Animal'))and not hasPurpose(E, inhabits(H, G)), not instance(E, 'Weapon'))and entails(instance(E, 'Weapon')and not hasPurpose(E, instance(G, 'Animal'))and not hasPurpose(E, inhabits(H, G)), not hasPurpose(E, patient(F, G)))and entails((instance(E, 'Weapon')and hasPurpose(E, patient(F, G))and not hasPurpose(E, inhabits(H, G)))and'$existential'(H, '?ANIMAL', hasPurpose(E, instance('?ANIMAL', 'Animal'))and hasPurpose(E, inhabits('?ANIMAL', G))), hasPurpose(E, instance(G, 'Animal')))and entails((instance(E, 'Weapon')and hasPurpose(E, patient(F, G))and not hasPurpose(E, instance(G, 'Animal')))and'$existential'(H, '?ANIMAL', hasPurpose(E, instance('?ANIMAL', 'Animal'))and hasPurpose(E, inhabits('?ANIMAL', G))), hasPurpose(E, inhabits(H, G))), [domainV(H, ['$instanceof':'Animal', inhabits:1]), domainV(G, ['$instanceof':'Animal', inhabits:2, patient:2]), domainV(F, ['$instanceof':'Damaging', '$instanceof':'Destruction', patient:1]), domainV(E, ['$instanceof':'Weapon', hasPurpose:1]), domainV(_G19219, []), forall(E), replaceConsVar(F, '$existential'('?DEST', (hasPurpose(E, instance('?DEST', 'Damaging'))or hasPurpose(E, instance('?DEST', 'Destruction')))and forall(G, hasPurpose(E, patient('?DEST', G))=>hasPurpose(E, instance(G, 'Animal'))or exists(H, hasPurpose(E, instance(H, 'Animal'))and hasPurpose(E, inhabits(H, G)))))), forall(G), replaceConsVar(H, '$existential'('?ANIMAL', hasPurpose(E, instance('?ANIMAL', 'Animal'))and hasPurpose(E, inhabits('?ANIMAL', G))))], ['WEAPON'=E, 'DEST'=F, 'PATIENT'=G, 'ANIMAL'=H], 'Merge', 'OBJECTS', 6764, 'Anonymous', on).
mooCache(subclass('Machine', 'Device'), subclass('Machine', 'Device'), [], [], 'Merge', 'OBJECTS', 6766, 'Anonymous', on).
mooCache(documentation('Machine', string('"Machines are Devices that that have a   well-defined resource and result and that automatically convert   the resource into the result."')), documentation('Machine', string('"Machines are Devices that that have a   well-defined resource and result and that automatically convert   the resource into the result."')), [], [], 'Merge', 'OBJECTS', 6768, 'Anonymous', on).
mooCache(subclass('EngineeringComponent', 'Device'), subclass('EngineeringComponent', 'Device'), [], [], 'Merge', 'OBJECTS', 6770, 'Anonymous', on).
mooCache(documentation('EngineeringComponent', string('"A fundamental concept that applies   in many engineering domains.  An EngineeringComponent is an element of   a Device that is a physically whole object, such as one might   see listed as standard parts in a catalog.  The main difference betweeen   EngineeringComponents and arbitrary globs of matter is that   EngineeringComponents are object-like in a modeling sense.  Thus, an   EngineeringComponent is not an arbtrary subregion, but a part of a   system with a stable identity."')), documentation('EngineeringComponent', string('"A fundamental concept that applies   in many engineering domains.  An EngineeringComponent is an element of   a Device that is a physically whole object, such as one might   see listed as standard parts in a catalog.  The main difference betweeen   EngineeringComponents and arbitrary globs of matter is that   EngineeringComponents are object-like in a modeling sense.  Thus, an   EngineeringComponent is not an arbtrary subregion, but a part of a   system with a stable identity."')), [], [], 'Merge', 'OBJECTS', 6772, 'Anonymous', on).
mooCache(instance(W3, 'EngineeringComponent')=>exists(X3, instance(X3, 'Device')and component(W3, X3)), (entails(not instance(X3, 'Device'), not instance(W3, 'EngineeringComponent'))and entails(instance(W3, 'EngineeringComponent')and'$existential'(X3, '?DEVICE', instance('?DEVICE', 'Device')and component(W3, '?DEVICE')), instance(X3, 'Device')))and entails(not component(W3, X3), not instance(W3, 'EngineeringComponent'))and entails(instance(W3, 'EngineeringComponent')and'$existential'(X3, '?DEVICE', instance('?DEVICE', 'Device')and component(W3, '?DEVICE')), component(W3, X3)), [domainV(X3, ['$instanceof':'Device', component:2]), domainV(W3, ['$instanceof':'EngineeringComponent', component:1]), domainV(_G6762, []), forall(W3), replaceConsVar(X3, '$existential'('?DEVICE', instance('?DEVICE', 'Device')and component(W3, '?DEVICE')))], ['COMP'=W3, 'DEVICE'=X3], 'Merge', 'OBJECTS', 6774, 'Anonymous', on).
mooCache(subrelation(engineeringSubcomponent, properPart), subrelation(engineeringSubcomponent, properPart), [], [], 'Merge', 'OBJECTS', 6776, 'Anonymous', on).
mooCache(domain(engineeringSubcomponent, 1, 'EngineeringComponent'), domain(engineeringSubcomponent, 1, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6778, 'Anonymous', on).
mooCache(domain(engineeringSubcomponent, 2, 'EngineeringComponent'), domain(engineeringSubcomponent, 2, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6780, 'Anonymous', on).
mooCache(documentation(engineeringSubcomponent, string('"(engineeringSubcomponent ?SUB   ?SUPER) means that the EngineeringComponent ?SUB is structurally a   properPart ?SUPER.  This relation is an AsymmetricRelation, since   two EngineeringComponents cannot be subcomponents of each other."')), documentation(engineeringSubcomponent, string('"(engineeringSubcomponent ?SUB   ?SUPER) means that the EngineeringComponent ?SUB is structurally a   properPart ?SUPER.  This relation is an AsymmetricRelation, since   two EngineeringComponents cannot be subcomponents of each other."')), [], [], 'Merge', 'OBJECTS', 6782, 'Anonymous', on).
mooCache(instance(connectedEngineeringComponents, 'SymmetricRelation'), instance(connectedEngineeringComponents, 'SymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6784, 'Anonymous', on).
mooCache(instance(connectedEngineeringComponents, 'IrreflexiveRelation'), instance(connectedEngineeringComponents, 'IrreflexiveRelation'), [], [], 'Merge', 'OBJECTS', 6786, 'Anonymous', on).
mooCache(subrelation(connectedEngineeringComponents, connected), subrelation(connectedEngineeringComponents, connected), [], [], 'Merge', 'OBJECTS', 6788, 'Anonymous', on).
mooCache(domain(connectedEngineeringComponents, 1, 'EngineeringComponent'), domain(connectedEngineeringComponents, 1, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6790, 'Anonymous', on).
mooCache(domain(connectedEngineeringComponents, 2, 'EngineeringComponent'), domain(connectedEngineeringComponents, 2, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6792, 'Anonymous', on).
mooCache(documentation(connectedEngineeringComponents, string('"This is the most general   connection relation between EngineeringComponents.  If   (connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor   ?COMP2 can be an engineeringSubcomponent of the other.  The relation   connectedEngineeringComponents is a SymmetricRelation; there is no   information in the direction of connection between two components.  It is   also an IrreflexiveRelation; no EngineeringComponent bears this relation   to itself.  Note that this relation does not associate a name or type   with the connection."')), documentation(connectedEngineeringComponents, string('"This is the most general   connection relation between EngineeringComponents.  If   (connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor   ?COMP2 can be an engineeringSubcomponent of the other.  The relation   connectedEngineeringComponents is a SymmetricRelation; there is no   information in the direction of connection between two components.  It is   also an IrreflexiveRelation; no EngineeringComponent bears this relation   to itself.  Note that this relation does not associate a name or type   with the connection."')), [], [], 'Merge', 'OBJECTS', 6794, 'Anonymous', on).
mooCache(connectedEngineeringComponents(V8, W8)=>not engineeringSubcomponent(V8, W8)and not engineeringSubcomponent(W8, V8), (entails(engineeringSubcomponent(V8, W8), not connectedEngineeringComponents(V8, W8))and entails(connectedEngineeringComponents(V8, W8), not engineeringSubcomponent(V8, W8)))and entails(engineeringSubcomponent(W8, V8), not connectedEngineeringComponents(V8, W8))and entails(connectedEngineeringComponents(V8, W8), not engineeringSubcomponent(W8, V8)), [domainV(W8, [connectedEngineeringComponents:2, engineeringSubcomponent:1, engineeringSubcomponent:2]), domainV(V8, [connectedEngineeringComponents:1, engineeringSubcomponent:1, engineeringSubcomponent:2]), domainV(_G7208, []), forall(V8), forall(W8)], ['COMP1'=V8, 'COMP2'=W8], 'Merge', 'OBJECTS', 6796, 'Anonymous', on).
mooCache(connectedEngineeringComponents(P9, Q9)=>not (instance(P9, 'EngineeringConnection')or instance(Q9, 'EngineeringConnection')), (entails(instance(P9, 'EngineeringConnection'), not connectedEngineeringComponents(P9, Q9))and entails(connectedEngineeringComponents(P9, Q9), not instance(P9, 'EngineeringConnection')))and entails(instance(Q9, 'EngineeringConnection'), not connectedEngineeringComponents(P9, Q9))and entails(connectedEngineeringComponents(P9, Q9), not instance(Q9, 'EngineeringConnection')), [domainV(Q9, ['$instanceof':'EngineeringConnection', connectedEngineeringComponents:2]), domainV(P9, ['$instanceof':'EngineeringConnection', connectedEngineeringComponents:1]), domainV(_G6214, []), forall(P9), forall(Q9)], ['COMP1'=P9, 'COMP2'=Q9], 'Merge', 'OBJECTS', 6798, 'Anonymous', on).
mooCache(connectedEngineeringComponents(H10, I10)<=>exists(J10, connectsEngineeringComponents(J10, H10, I10)), (entails(connectedEngineeringComponents(H10, I10)and'$existential'(J10, '?CONNECTION', connectsEngineeringComponents('?CONNECTION', H10, I10)), connectsEngineeringComponents(J10, H10, I10))and entails(not connectsEngineeringComponents(J10, H10, I10), not connectedEngineeringComponents(H10, I10)))and entails(connectsEngineeringComponents(J10, H10, I10), connectedEngineeringComponents(H10, I10))and entails(not connectedEngineeringComponents(H10, I10), not connectsEngineeringComponents(J10, H10, I10)), [domainV(J10, [connectsEngineeringComponents:1]), domainV(I10, [connectedEngineeringComponents:2, connectsEngineeringComponents:3]), domainV(H10, [connectedEngineeringComponents:1, connectsEngineeringComponents:2]), domainV(_G6870, []), forall(H10), forall(I10), replaceConsVar(J10, '$existential'('?CONNECTION', connectsEngineeringComponents('?CONNECTION', H10, I10))), forall(J10)], ['COMP1'=H10, 'COMP2'=I10, 'CONNECTION'=J10], 'Merge', 'OBJECTS', 6800, 'Anonymous', on).
mooCache(subclass('EngineeringConnection', 'EngineeringComponent'), subclass('EngineeringConnection', 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6802, 'Anonymous', on).
mooCache(documentation('EngineeringConnection', string('"An EngineeringConnection is an   EngineeringComponent that represents a connection relationship between   two other EngineeringComponents.  It is a reification of the   Predicate connectedEngineeringComponents.  That means that whenever   this Predicate holds between two EngineeringComponents, there exists an   EngineeringConnection.  The practical reason for reifying a relationship   is to be able to attach other information about it. For example, one  might want to say that a particular connection is associated with some   shared parameters, or that it is of a particular type.    EngineeringConnections are EngineeringComponents and can therefore be   an engineeringSubcomponent of other EngineeringComponents.  However,   to provide for modular regularity in component systems,   EngineeringConnections cannot be connected.  For each pair of   EngineeringComponents related by connectedEngineeringComponents, there   exists at least one EngineeringConnection.  However, that object may not   be unique, and the same EngineeringConnection may be associated with   several pairs of EngineeringComponents."')), documentation('EngineeringConnection', string('"An EngineeringConnection is an   EngineeringComponent that represents a connection relationship between   two other EngineeringComponents.  It is a reification of the   Predicate connectedEngineeringComponents.  That means that whenever   this Predicate holds between two EngineeringComponents, there exists an   EngineeringConnection.  The practical reason for reifying a relationship   is to be able to attach other information about it. For example, one  might want to say that a particular connection is associated with some   shared parameters, or that it is of a particular type.    EngineeringConnections are EngineeringComponents and can therefore be   an engineeringSubcomponent of other EngineeringComponents.  However,   to provide for modular regularity in component systems,   EngineeringConnections cannot be connected.  For each pair of   EngineeringComponents related by connectedEngineeringComponents, there   exists at least one EngineeringConnection.  However, that object may not   be unique, and the same EngineeringConnection may be associated with   several pairs of EngineeringComponents."')), [], [], 'Merge', 'OBJECTS', 6804, 'Anonymous', on).
mooCache(instance(B12, 'EngineeringConnection')=>exists(C12, exists(D12, connectsEngineeringComponents(B12, D12, C12))), entails(not connectsEngineeringComponents(B12, D12, C12), not instance(B12, 'EngineeringConnection'))and entails((instance(B12, 'EngineeringConnection')and'$existential'(C12, '?COMP2', exists(D12, connectsEngineeringComponents(B12, D12, '?COMP2'))))and'$existential'(D12, '?COMP1', connectsEngineeringComponents(B12, '?COMP1', C12)), connectsEngineeringComponents(B12, D12, C12)), [domainV(D12, [connectsEngineeringComponents:2]), domainV(C12, [connectsEngineeringComponents:3]), domainV(B12, ['$instanceof':'EngineeringConnection', connectsEngineeringComponents:1]), domainV(_G6977, []), forall(B12), replaceConsVar(C12, '$existential'('?COMP2', exists(D12, connectsEngineeringComponents(B12, D12, '?COMP2')))), replaceConsVar(D12, '$existential'('?COMP1', connectsEngineeringComponents(B12, '?COMP1', C12)))], ['CONNECTION'=B12, 'COMP1'=D12, 'COMP2'=C12], 'Merge', 'OBJECTS', 6806, 'Anonymous', on).
mooCache(subrelation(connectsEngineeringComponents, connects), subrelation(connectsEngineeringComponents, connects), [], [], 'Merge', 'OBJECTS', 6808, 'Anonymous', on).
mooCache(domain(connectsEngineeringComponents, 1, 'EngineeringConnection'), domain(connectsEngineeringComponents, 1, 'EngineeringConnection'), [], [], 'Merge', 'OBJECTS', 6810, 'Anonymous', on).
mooCache(domain(connectsEngineeringComponents, 2, 'EngineeringComponent'), domain(connectsEngineeringComponents, 2, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6812, 'Anonymous', on).
mooCache(domain(connectsEngineeringComponents, 3, 'EngineeringComponent'), domain(connectsEngineeringComponents, 3, 'EngineeringComponent'), [], [], 'Merge', 'OBJECTS', 6814, 'Anonymous', on).
mooCache(documentation(connectsEngineeringComponents, string('"connectsEngineeringComponents   is a TernaryPredicate that maps from an EngineeringConnection to the   EngineeringComponents it connects.  Since EngineeringComponents cannot   be connected to themselves and there cannot be an EngineeringConnection   without a connectedEngineeringComponents Predicate, the second and third   arguments of any connectsEngineeringComponents relationship will always be   distinct for any given first argument."')), documentation(connectsEngineeringComponents, string('"connectsEngineeringComponents   is a TernaryPredicate that maps from an EngineeringConnection to the   EngineeringComponents it connects.  Since EngineeringComponents cannot   be connected to themselves and there cannot be an EngineeringConnection   without a connectedEngineeringComponents Predicate, the second and third   arguments of any connectsEngineeringComponents relationship will always be   distinct for any given first argument."')), [], [], 'Merge', 'OBJECTS', 6816, 'Anonymous', on).
mooCache(subclass('PersonBySocialRole', 'CognitiveAgent'), subclass('PersonBySocialRole', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6818, 'Anonymous', on).
mooCache(documentation('PersonBySocialRole', string('"The Class of all CognitiveAgents   who are considered with respect to a social role that they have."')), documentation('PersonBySocialRole', string('"The Class of all CognitiveAgents   who are considered with respect to a social role that they have."')), [], [], 'Merge', 'OBJECTS', 6820, 'Anonymous', on).
mooCache(instance(S15, 'PersonBySocialRole')=>exists(T15, instance(T15, 'OrganizationalProcess')and agent(T15, S15)), (entails(not instance(T15, 'OrganizationalProcess'), not instance(S15, 'PersonBySocialRole'))and entails(instance(S15, 'PersonBySocialRole')and'$existential'(T15, '?ACT', instance('?ACT', 'OrganizationalProcess')and agent('?ACT', S15)), instance(T15, 'OrganizationalProcess')))and entails(not agent(T15, S15), not instance(S15, 'PersonBySocialRole'))and entails(instance(S15, 'PersonBySocialRole')and'$existential'(T15, '?ACT', instance('?ACT', 'OrganizationalProcess')and agent('?ACT', S15)), agent(T15, S15)), [domainV(T15, ['$instanceof':'OrganizationalProcess', agent:1]), domainV(S15, ['$instanceof':'PersonBySocialRole', agent:2]), domainV(_G6786, []), forall(S15), replaceConsVar(T15, '$existential'('?ACT', instance('?ACT', 'OrganizationalProcess')and agent('?ACT', S15)))], ['PERSON'=S15, 'ACT'=T15], 'Merge', 'OBJECTS', 6822, 'Anonymous', on).
mooCache(subclass('PersonByOccupationalRole', 'PersonBySocialRole'), subclass('PersonByOccupationalRole', 'PersonBySocialRole'), [], [], 'Merge', 'OBJECTS', 6824, 'Anonymous', on).
mooCache(documentation('PersonByOccupationalRole', string('"The Class of all   CognitiveAgents who are considered with respect to an occupational   role that they have."')), documentation('PersonByOccupationalRole', string('"The Class of all   CognitiveAgents who are considered with respect to an occupational   role that they have."')), [], [], 'Merge', 'OBJECTS', 6826, 'Anonymous', on).
mooCache(instance(I17, 'PersonByOccupationalRole')=>exists(J17, instance(J17, 'OccupationalProcess')and agent(J17, I17)), (entails(not instance(J17, 'OccupationalProcess'), not instance(I17, 'PersonByOccupationalRole'))and entails(instance(I17, 'PersonByOccupationalRole')and'$existential'(J17, '?ACT', instance('?ACT', 'OccupationalProcess')and agent('?ACT', I17)), instance(J17, 'OccupationalProcess')))and entails(not agent(J17, I17), not instance(I17, 'PersonByOccupationalRole'))and entails(instance(I17, 'PersonByOccupationalRole')and'$existential'(J17, '?ACT', instance('?ACT', 'OccupationalProcess')and agent('?ACT', I17)), agent(J17, I17)), [domainV(J17, ['$instanceof':'OccupationalProcess', agent:1]), domainV(I17, ['$instanceof':'PersonByOccupationalRole', agent:2]), domainV(_G6810, []), forall(I17), replaceConsVar(J17, '$existential'('?ACT', instance('?ACT', 'OccupationalProcess')and agent('?ACT', I17)))], ['PERSON'=I17, 'ACT'=J17], 'Merge', 'OBJECTS', 6828, 'Anonymous', on).
mooCache(subclass('UnemployedPerson', 'PersonByOccupationalRole'), subclass('UnemployedPerson', 'PersonByOccupationalRole'), [], [], 'Merge', 'OBJECTS', 6830, 'Anonymous', on).
mooCache(documentation('UnemployedPerson', string('"The Class of all CognitiveAgents who   are unemployed."')), documentation('UnemployedPerson', string('"The Class of all CognitiveAgents who   are unemployed."')), [], [], 'Merge', 'OBJECTS', 6832, 'Anonymous', on).
mooCache(instance(V18, 'UnemployedPerson')=>not exists(W18, employs(W18, V18)), entails(employs(W18, V18), not instance(V18, 'UnemployedPerson'))and entails(instance(V18, 'UnemployedPerson'), not employs(W18, V18)), [domainV(W18, [employs:1]), domainV(V18, ['$instanceof':'UnemployedPerson', employs:2]), domainV(_G5543, []), forall(V18), forall(W18), forall(W18)], ['PERSON'=V18, 'ORG'=W18], 'Merge', 'OBJECTS', 6834, 'Anonymous', on).
mooCache(subclass('Group', 'Collection'), subclass('Group', 'Collection'), [], [], 'Merge', 'OBJECTS', 6840, 'Anonymous', on).
mooCache(subclass('Group', 'Agent'), subclass('Group', 'Agent'), [], [], 'Merge', 'OBJECTS', 6842, 'Anonymous', on).
mooCache(documentation('Group', string('"A Collection of Agents, e.g. a flock   of sheep, a herd of goats, or the local Boy Scout troop."')), documentation('Group', string('"A Collection of Agents, e.g. a flock   of sheep, a herd of goats, or the local Boy Scout troop."')), [], [], 'Merge', 'OBJECTS', 6844, 'Anonymous', on).
mooCache(instance(O20, 'Group')and member(P20, O20)=>instance(P20, 'Agent'), entails(instance(O20, 'Group')and member(P20, O20), instance(P20, 'Agent'))and entails(not instance(P20, 'Agent')and member(P20, O20), not instance(O20, 'Group'))and entails(not instance(P20, 'Agent')and instance(O20, 'Group'), not member(P20, O20)), [domainV(P20, ['$instanceof':'Agent', member:1]), domainV(O20, ['$instanceof':'Group', member:2]), domainV(_G5310, []), forall(O20), forall(P20)], ['GROUP'=O20, 'MEMB'=P20], 'Merge', 'OBJECTS', 6846, 'Anonymous', on).
mooCache(subclass('AgeGroup', 'Group'), subclass('AgeGroup', 'Group'), [], [], 'Merge', 'OBJECTS', 6848, 'Anonymous', on).
mooCache(documentation('AgeGroup', string('"A Group whose members all have the same age."')), documentation('AgeGroup', string('"A Group whose members all have the same age."')), [], [], 'Merge', 'OBJECTS', 6850, 'Anonymous', on).
mooCache(instance(Z22, 'AgeGroup')=>forall(A23, forall(B23, forall(C23, forall(D23, member(D23, Z22)and member(C23, Z22)and age(D23, B23)and age(C23, A23)=>equal(B23, A23))))), entails(not equal(B23, A23)and member(D23, Z22)and member(C23, Z22)and age(D23, B23)and age(C23, A23), not instance(Z22, 'AgeGroup'))and entails(instance(Z22, 'AgeGroup')and member(D23, Z22)and member(C23, Z22)and age(D23, B23)and age(C23, A23), equal(B23, A23))and entails(instance(Z22, 'AgeGroup')and not equal(B23, A23)and member(C23, Z22)and age(D23, B23)and age(C23, A23), not member(D23, Z22))and entails(instance(Z22, 'AgeGroup')and not equal(B23, A23)and member(D23, Z22)and age(D23, B23)and age(C23, A23), not member(C23, Z22))and entails(instance(Z22, 'AgeGroup')and not equal(B23, A23)and member(D23, Z22)and member(C23, Z22)and age(C23, A23), not age(D23, B23))and entails(instance(Z22, 'AgeGroup')and not equal(B23, A23)and member(D23, Z22)and member(C23, Z22)and age(D23, B23), not age(C23, A23)), [domainV(D23, [age:1, member:1]), domainV(C23, [age:1, member:1]), domainV(B23, [age:2]), domainV(A23, [age:2]), domainV(Z22, ['$instanceof':'AgeGroup', member:2]), domainV(_G15871, []), forall(Z22), forall(A23), forall(B23), forall(C23), forall(D23)], ['GROUP'=Z22, 'MEMB1'=D23, 'MEMB2'=C23, 'AGE1'=B23, 'AGE2'=A23], 'Merge', 'OBJECTS', 6852, 'Anonymous', on).
mooCache(subclass('FamilyGroup', 'Group'), subclass('FamilyGroup', 'Group'), [], [], 'Merge', 'OBJECTS', 6854, 'Anonymous', on).
mooCache(documentation('FamilyGroup', string('"A Group whose members bear   familyRelations to one another."')), documentation('FamilyGroup', string('"A Group whose members bear   familyRelations to one another."')), [], [], 'Merge', 'OBJECTS', 6856, 'Anonymous', on).
mooCache(instance(C25, 'FamilyGroup')=>forall(D25, forall(E25, member(E25, C25)and member(D25, C25)=>familyRelation(E25, D25))), entails(not familyRelation(E25, D25)and member(E25, C25)and member(D25, C25), not instance(C25, 'FamilyGroup'))and entails(instance(C25, 'FamilyGroup')and member(E25, C25)and member(D25, C25), familyRelation(E25, D25))and entails(instance(C25, 'FamilyGroup')and not familyRelation(E25, D25)and member(D25, C25), not member(E25, C25))and entails(instance(C25, 'FamilyGroup')and not familyRelation(E25, D25)and member(E25, C25), not member(D25, C25)), [domainV(E25, [familyRelation:1, member:1]), domainV(D25, [familyRelation:2, member:1]), domainV(C25, ['$instanceof':'FamilyGroup', member:2]), domainV(_G9917, []), forall(C25), forall(D25), forall(E25)], ['GROUP'=C25, 'MEMB1'=E25, 'MEMB2'=D25], 'Merge', 'OBJECTS', 6858, 'Anonymous', on).
mooCache(instance(familyRelation, 'BinaryPredicate'), instance(familyRelation, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6860, 'Anonymous', on).
mooCache(instance(familyRelation, 'EquivalenceRelation'), instance(familyRelation, 'EquivalenceRelation'), [], [], 'Merge', 'OBJECTS', 6862, 'Anonymous', on).
mooCache(domain(familyRelation, 1, 'Organism'), domain(familyRelation, 1, 'Organism'), [], [], 'Merge', 'OBJECTS', 6864, 'Anonymous', on).
mooCache(domain(familyRelation, 2, 'Organism'), domain(familyRelation, 2, 'Organism'), [], [], 'Merge', 'OBJECTS', 6866, 'Anonymous', on).
mooCache(documentation(familyRelation, string('"A very general Predicate for biological   relationships. (familyRelation ?ORGANISM1 ?ORGANISM2) means that   ?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor."')), documentation(familyRelation, string('"A very general Predicate for biological   relationships. (familyRelation ?ORGANISM1 ?ORGANISM2) means that   ?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor."')), [], [], 'Merge', 'OBJECTS', 6868, 'Anonymous', on).
mooCache(familyRelation(X27, Y27)=>exists(Z27, familyRelation(Z27, X27)and familyRelation(Z27, Y27)), (entails(not familyRelation(Z27, X27), not familyRelation(X27, Y27))and entails(familyRelation(X27, Y27)and'$existential'(Z27, '?ORGANISM3', familyRelation('?ORGANISM3', X27)and familyRelation('?ORGANISM3', Y27)), familyRelation(Z27, X27)))and entails(not familyRelation(Z27, Y27), not familyRelation(X27, Y27))and entails(familyRelation(X27, Y27)and'$existential'(Z27, '?ORGANISM3', familyRelation('?ORGANISM3', X27)and familyRelation('?ORGANISM3', Y27)), familyRelation(Z27, Y27)), [domainV(Z27, [familyRelation:1]), domainV(Y27, [familyRelation:2]), domainV(X27, [familyRelation:1, familyRelation:2]), domainV(_G7935, []), forall(X27), forall(Y27), replaceConsVar(Z27, '$existential'('?ORGANISM3', familyRelation('?ORGANISM3', X27)and familyRelation('?ORGANISM3', Y27)))], ['ORGANISM1'=X27, 'ORGANISM2'=Y27, 'ORGANISM3'=Z27], 'Merge', 'OBJECTS', 6870, 'Anonymous', on).
mooCache(subclass('EthnicGroup', 'Group'), subclass('EthnicGroup', 'Group'), [], [], 'Merge', 'OBJECTS', 6872, 'Anonymous', on).
mooCache(documentation('EthnicGroup', string('"A Group whose members originate from the   same Region or share the same Language and/or cultural practices."')), documentation('EthnicGroup', string('"A Group whose members originate from the   same Region or share the same Language and/or cultural practices."')), [], [], 'Merge', 'OBJECTS', 6874, 'Anonymous', on).
mooCache(subclass('OrganizationUnit', 'CognitiveAgent'), subclass('OrganizationUnit', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6876, 'Anonymous', on).
mooCache(documentation('OrganizationUnit', string('"An organization or a divisions or department   within an organization. For example, the Shell Corporation, the accounting   department at Shell, etc. would all be instances of OrganizationUnit.   The continued existence of an OrganizationUnit is not dependent on any of   its members, locations, or facilities. Note that, unlike Organization, an   OrganizationUnit may have no members."')), documentation('OrganizationUnit', string('"An organization or a divisions or department   within an organization. For example, the Shell Corporation, the accounting   department at Shell, etc. would all be instances of OrganizationUnit.   The continued existence of an OrganizationUnit is not dependent on any of   its members, locations, or facilities. Note that, unlike Organization, an   OrganizationUnit may have no members."')), [], [], 'Merge', 'OBJECTS', 6878, 'Anonymous', on).
mooCache(subclass('Organization', 'Group'), subclass('Organization', 'Group'), [], [], 'Merge', 'OBJECTS', 6880, 'Anonymous', on).
mooCache(documentation('Organization', string('"An Organization is a corporate or similar   institution, distinguished from other Agents. The members of an   Organization typically have a common purpose or function. Note that   parts of Organizations should not be included here, unless they are   subOrganizations of an Organization."')), documentation('Organization', string('"An Organization is a corporate or similar   institution, distinguished from other Agents. The members of an   Organization typically have a common purpose or function. Note that   parts of Organizations should not be included here, unless they are   subOrganizations of an Organization."')), [], [], 'Merge', 'OBJECTS', 6882, 'Anonymous', on).
mooCache(instance('OrganizationFn', 'UnaryFunction'), instance('OrganizationFn', 'UnaryFunction'), [], [], 'Merge', 'OBJECTS', 6884, 'Anonymous', on).
mooCache(domain('OrganizationFn', 1, 'OrganizationUnit'), domain('OrganizationFn', 1, 'OrganizationUnit'), [], [], 'Merge', 'OBJECTS', 6886, 'Anonymous', on).
mooCache(range('OrganizationFn', 'Organization'), range('OrganizationFn', 'Organization'), [], [], 'Merge', 'OBJECTS', 6888, 'Anonymous', on).
mooCache(documentation('OrganizationFn', string('"A UnaryFunction that maps an OrganizationUnit,   the notion of an organization which is independent of its members, locations,   and facilities, to the corresponding Organization, i.e. the Group of Humans   who are members of the Organization.  Note that this is a partial function,   since there are many cases of organizations which are legal entities but which   lack any members."')), documentation('OrganizationFn', string('"A UnaryFunction that maps an OrganizationUnit,   the notion of an organization which is independent of its members, locations,   and facilities, to the corresponding Organization, i.e. the Group of Humans   who are members of the Organization.  Note that this is a partial function,   since there are many cases of organizations which are legal entities but which   lack any members."')), [], [], 'Merge', 'OBJECTS', 6890, 'Anonymous', on).
mooCache(equal('OrganizationFn'(N32), O32)and instance(P32, 'NormativeProperty')=> (modalProperty(N32, P32)<=>modalProperty(O32, P32)), (entails(instance(P32, 'NormativeProperty')and not modalProperty(O32, P32)and modalProperty(O32, P32), not holds('OrganizationFn', N32, O32))and entails(holds('OrganizationFn', N32, O32)and not modalProperty(O32, P32)and modalProperty(O32, P32), not instance(P32, 'NormativeProperty')))and (entails(instance(P32, 'NormativeProperty')and not modalProperty(O32, P32)and modalProperty(N32, P32), not holds('OrganizationFn', N32, O32))and entails(holds('OrganizationFn', N32, O32)and not modalProperty(O32, P32)and modalProperty(N32, P32), not instance(P32, 'NormativeProperty'))and entails((holds('OrganizationFn', N32, O32)and instance(P32, 'NormativeProperty'))and modalProperty(N32, P32), modalProperty(O32, P32))and entails((holds('OrganizationFn', N32, O32)and instance(P32, 'NormativeProperty'))and not modalProperty(O32, P32), not modalProperty(N32, P32)))and (entails(instance(P32, 'NormativeProperty')and not modalProperty(N32, P32)and modalProperty(N32, P32), not holds('OrganizationFn', N32, O32))and entails(holds('OrganizationFn', N32, O32)and not modalProperty(N32, P32)and modalProperty(N32, P32), not instance(P32, 'NormativeProperty')))and entails(instance(P32, 'NormativeProperty')and not modalProperty(N32, P32)and modalProperty(O32, P32), not holds('OrganizationFn', N32, O32))and entails(holds('OrganizationFn', N32, O32)and not modalProperty(N32, P32)and modalProperty(O32, P32), not instance(P32, 'NormativeProperty'))and entails((holds('OrganizationFn', N32, O32)and instance(P32, 'NormativeProperty'))and modalProperty(O32, P32), modalProperty(N32, P32))and entails((holds('OrganizationFn', N32, O32)and instance(P32, 'NormativeProperty'))and not modalProperty(N32, P32), not modalProperty(O32, P32)), [domainV(P32, ['$instanceof':'NormativeProperty', modalProperty:2]), domainV(O32, ['OrganizationFn':2, modalProperty:1]), domainV(N32, ['OrganizationFn':1, modalProperty:1]), domainV(_G8441, []), forall(N32), forall(O32), forall(P32)], ['UNIT'=N32, 'ORG'=O32, 'ATTR'=P32], 'Merge', 'OBJECTS', 6892, 'Anonymous', on).
mooCache(instance(employs, 'BinaryPredicate'), instance(employs, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6894, 'Anonymous', on).
mooCache(domain(employs, 1, 'Organization'), domain(employs, 1, 'Organization'), [], [], 'Merge', 'OBJECTS', 6896, 'Anonymous', on).
mooCache(domain(employs, 2, 'CognitiveAgent'), domain(employs, 2, 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6898, 'Anonymous', on).
mooCache(documentation(employs, string('"(employs ?ORG ?PERSON) means that ?ORG has   hired ?PERSON and currently retains ?PERSON, on a salaried or   contractual basis, to provide services in exchange for monetary   compensation."')), documentation(employs, string('"(employs ?ORG ?PERSON) means that ?ORG has   hired ?PERSON and currently retains ?PERSON, on a salaried or   contractual basis, to provide services in exchange for monetary   compensation."')), [], [], 'Merge', 'OBJECTS', 6900, 'Anonymous', on).
mooCache(employs(B35, C35)=>member(C35, B35), entails(not member(C35, B35), not employs(B35, C35))and entails(employs(B35, C35), member(C35, B35)), [domainV(C35, [employs:2, member:1]), domainV(B35, [employs:1, member:2]), domainV(_G4276, []), forall(B35), forall(C35)], ['ORG'=B35, 'PERSON'=C35], 'Merge', 'OBJECTS', 6902, 'Anonymous', on).
mooCache(subclass('Corporation', 'Organization'), subclass('Corporation', 'Organization'), [], [], 'Merge', 'OBJECTS', 6904, 'Anonymous', on).
mooCache(documentation('Corporation', string('"An Organization that provides products and/or   services for a fee with the aim of making a profit."')), documentation('Corporation', string('"An Organization that provides products and/or   services for a fee with the aim of making a profit."')), [], [], 'Merge', 'OBJECTS', 6906, 'Anonymous', on).
mooCache(subclass('Government', 'Organization'), subclass('Government', 'Organization'), [], [], 'Merge', 'OBJECTS', 6908, 'Anonymous', on).
mooCache(documentation('Government', string('"The ruling body of a Nation or one of the   subOrganizations of a Nation."')), documentation('Government', string('"The ruling body of a Nation or one of the   subOrganizations of a Nation."')), [], [], 'Merge', 'OBJECTS', 6910, 'Anonymous', on).
mooCache(subclass('EducationalOrganization', 'Organization'), subclass('EducationalOrganization', 'Organization'), [], [], 'Merge', 'OBJECTS', 6912, 'Anonymous', on).
mooCache(documentation('EducationalOrganization', string('"A EducationalOrganization is   an institution of learning. Some examples are public and private K-12   schools, and colleges and universities."')), documentation('EducationalOrganization', string('"A EducationalOrganization is   an institution of learning. Some examples are public and private K-12   schools, and colleges and universities."')), [], [], 'Merge', 'OBJECTS', 6914, 'Anonymous', on).
mooCache(subclass('ReligiousOrganization', 'Organization'), subclass('ReligiousOrganization', 'Organization'), [], [], 'Merge', 'OBJECTS', 6916, 'Anonymous', on).
mooCache(documentation('ReligiousOrganization', string('"An Organization whose members   share a set of religious beliefs."')), documentation('ReligiousOrganization', string('"An Organization whose members   share a set of religious beliefs."')), [], [], 'Merge', 'OBJECTS', 6918, 'Anonymous', on).
mooCache(instance(F, 'ReligiousOrganization')=>exists(G, forall(H, member(H, F)=>believes(H, G))), entails(member(H, F)and not believes(H, G), not instance(F, 'ReligiousOrganization'))and entails(instance(F, 'ReligiousOrganization')and not believes(H, G), not member(H, F))and entails((instance(F, 'ReligiousOrganization')and member(H, F))and'$existential'(G, '?PROP', forall(H, member(H, F)=>believes(H, '?PROP'))), believes(H, G)), [domainV(H, [believes:1, member:1]), domainV(G, [believes:2]), domainV(F, ['$instanceof':'ReligiousOrganization', member:2]), domainV(_G8578, []), forall(F), replaceConsVar(G, '$existential'('?PROP', forall(H, member(H, F)=>believes(H, '?PROP')))), forall(H)], ['ORG'=F, 'PROP'=G, 'PERSON'=H], 'Merge', 'OBJECTS', 6920, 'Anonymous', on).
mooCache(subrelation(subOrganizations, subCollection), subrelation(subOrganizations, subCollection), [], [], 'Merge', 'OBJECTS', 6922, 'Anonymous', on).
mooCache(domain(subOrganizations, 1, 'Organization'), domain(subOrganizations, 1, 'Organization'), [], [], 'Merge', 'OBJECTS', 6924, 'Anonymous', on).
mooCache(domain(subOrganizations, 2, 'Organization'), domain(subOrganizations, 2, 'Organization'), [], [], 'Merge', 'OBJECTS', 6926, 'Anonymous', on).
mooCache(documentation(subOrganizations, string('"(subOrganizations ?ORG1 ?ORG2) means   that ?ORG1 is an Organization which is a proper part of the   Organization ?ORG2."')), documentation(subOrganizations, string('"(subOrganizations ?ORG1 ?ORG2) means   that ?ORG1 is an Organization which is a proper part of the   Organization ?ORG2."')), [], [], 'Merge', 'OBJECTS', 6928, 'Anonymous', on).
mooCache(subclass('Position', 'CognitiveAgent'), subclass('Position', 'CognitiveAgent'), [], [], 'Merge', 'OBJECTS', 6930, 'Anonymous', on).
mooCache(relatedInternalConcept('Position', occupiesPosition), relatedInternalConcept('Position', occupiesPosition), [], [], 'Merge', 'OBJECTS', 6932, 'Anonymous', on).
mooCache(documentation('Position', string('"A formal position of reponsibility within an   Organization. Examples of Positions include president, laboratory   director, senior researcher, sales representative, etc."')), documentation('Position', string('"A formal position of reponsibility within an   Organization. Examples of Positions include president, laboratory   director, senior researcher, sales representative, etc."')), [], [], 'Merge', 'OBJECTS', 6934, 'Anonymous', on).
mooCache(instance(occupiesPosition, 'TernaryPredicate'), instance(occupiesPosition, 'TernaryPredicate'), [], [], 'Merge', 'OBJECTS', 6936, 'Anonymous', on).
mooCache(domain(occupiesPosition, 1, 'Human'), domain(occupiesPosition, 1, 'Human'), [], [], 'Merge', 'OBJECTS', 6938, 'Anonymous', on).
mooCache(domain(occupiesPosition, 2, 'Position'), domain(occupiesPosition, 2, 'Position'), [], [], 'Merge', 'OBJECTS', 6940, 'Anonymous', on).
mooCache(domain(occupiesPosition, 3, 'Organization'), domain(occupiesPosition, 3, 'Organization'), [], [], 'Merge', 'OBJECTS', 6942, 'Anonymous', on).
mooCache(documentation(occupiesPosition, string('"(occupiesPosition ?PERSON ?POSITION ?ORG)   means that ?PERSON holds the Position ?POSITION at Organization ?ORG.   For example, (occupiesPosition TomSmith ResearchDirector   AcmeLaboratory) means that TomSmith is a research director at Acme Labs."')), documentation(occupiesPosition, string('"(occupiesPosition ?PERSON ?POSITION ?ORG)   means that ?PERSON holds the Position ?POSITION at Organization ?ORG.   For example, (occupiesPosition TomSmith ResearchDirector   AcmeLaboratory) means that TomSmith is a research director at Acme Labs."')), [], [], 'Merge', 'OBJECTS', 6944, 'Anonymous', on).
mooCache(occupiesPosition(B5, C5, D5)=>employs(D5, B5), entails(not employs(D5, B5), not occupiesPosition(B5, C5, D5))and entails(occupiesPosition(B5, C5, D5), employs(D5, B5)), [domainV(D5, [employs:1, occupiesPosition:3]), domainV(C5, [occupiesPosition:2]), domainV(B5, [employs:2, occupiesPosition:1]), domainV(_G4790, []), forall(B5), forall(C5), forall(D5)], ['PERSON'=B5, 'POSITION'=C5, 'ORG'=D5], 'Merge', 'OBJECTS', 6946, 'Anonymous', on).
mooCache(instance(citizen, 'BinaryPredicate'), instance(citizen, 'BinaryPredicate'), [], [], 'Merge', 'OBJECTS', 6948, 'Anonymous', on).
mooCache(instance(citizen, 'AsymmetricRelation'), instance(citizen, 'AsymmetricRelation'), [], [], 'Merge', 'OBJECTS', 6950, 'Anonymous', on).
mooCache(domain(citizen, 1, 'Human'), domain(citizen, 1, 'Human'), [], [], 'Merge', 'OBJECTS', 6952, 'Anonymous', on).
mooCache(domain(citizen, 2, 'Nation'), domain(citizen, 2, 'Nation'), [], [], 'Merge', 'OBJECTS', 6954, 'Anonymous', on).
mooCache(documentation(citizen, string('"(citizen ?PERSON ?NATION) means that the   Human ?PERSON is a citizen of Nation ?NATION."')), documentation(citizen, string('"(citizen ?PERSON ?NATION) means that the   Human ?PERSON is a citizen of Nation ?NATION."')), [], [], 'Merge', 'OBJECTS', 6956, 'Anonymous', on).
mooCache('include-context'('MEREOTOPOLOGY'), 'include-context'('MEREOTOPOLOGY'), [], [], 'Merge', 'QUALITIES', 6968, 'Anonymous', on).
mooCache('include-context'('PROCESSES'), 'include-context'('PROCESSES'), [], [], 'Merge', 'QUALITIES', 6971, 'Anonymous', on).
mooCache('include-context'('OBJECTS'), 'include-context'('OBJECTS'), [], [], 'Merge', 'QUALITIES', 6974, 'Anonymous', on).
mooCache(subclass('FieldOfStudy', 'Proposition'), subclass('FieldOfStudy', 'Proposition'), [], [], 'Merge', 'QUALITIES', 6977, 'Anonymous', on).
mooCache(documentation('FieldOfStudy', string('"An academic or applied discipline with   recognized experts and with a core of accepted theory or practice.  Note   that FieldOfStudy is a subclass of Proposition, because a   FieldOfStudy is understood to be a body of abstract, informational   content, with varying degrees of certainty attached to each element of   this content."')), documentation('FieldOfStudy', string('"An academic or applied discipline with   recognized experts and with a core of accepted theory or practice.  Note   that FieldOfStudy is a subclass of Proposition, because a   FieldOfStudy is understood to be a body of abstract, informational   content, with varying degrees of certainty attached to each element of   this content."')), [], [], 'Merge', 'QUALITIES', 6979, 'Anonymous', on).
mooCache(subclass('Procedure', 'Proposition'), subclass('Procedure', 'Proposition'), [], [], 'Merge', 'QUALITIES', 6981, 'Anonymous', on).
mooCache(documentation('Procedure', string('"A sequence-dependent specification.  Some   examples are ComputerPrograms, finite-state machines, cooking recipes,   musical scores, conference schedules, driving directions, and the scripts   of plays and movies."')), documentation('Procedure', string('"A sequence-dependent specification.  Some   examples are ComputerPrograms, finite-state machines, cooking recipes,   musical scores, conference schedules, driving directions, and the scripts   of plays and movies."')), [], [], 'Merge', 'QUALITIES', 6983, 'Anonymous', on).
mooCache(subclass('ComputerProgram', 'Procedure'), subclass('ComputerProgram', 'Procedure'), [], [], 'Merge', 'QUALITIES', 6985, 'Anonymous', on).
mooCache(documentation('ComputerProgram', string('"A set of instructions in a computer   programming language that can be executed by a computer."')), documentation('ComputerProgram', string('"A set of instructions in a computer   programming language that can be executed by a computer."')), [], [], 'Merge', 'QUALITIES', 6987, 'Anonymous', on).
mooCache(subclass('Plan', 'Procedure'), subclass('Plan', 'Procedure'), [], [], 'Merge', 'QUALITIES', 6989, 'Anonymous', on).
mooCache(documentation('Plan', string('"A specification of a sequence of Processes which   is intended to satisfy a specified purpose at some future time."')), documentation('Plan', string('"A specification of a sequence of Processes which   is intended to satisfy a specified purpose at some future time."')), [], [], 'Merge', 'QUALITIES', 6991, 'Anonymous', on).
mooCache(instance(H11, 'Plan')and instance(I11, 'ContentBearingObject')and containsInformation(I11, H11)=>exists(J11, instance(J11, 'Planning')and result(J11, I11)), (entails((instance(H11, 'Plan')and instance(I11, 'ContentBearingObject')and containsInformation(I11, H11))and'$existential'(J11, '?PLANNING', instance('?PLANNING', 'Planning')and result('?PLANNING', I11)), instance(J11, 'Planning'))and entails(not instance(J11, 'Planning')and instance(I11, 'ContentBearingObject')and containsInformation(I11, H11), not instance(H11, 'Plan'))and entails(not instance(J11, 'Planning')and instance(H11, 'Plan')and containsInformation(I11, H11), not instance(I11, 'ContentBearingObject'))and entails(not instance(J11, 'Planning')and instance(H11, 'Plan')and instance(I11, 'ContentBearingObject'), not containsInformation(I11, H11)))and entails((instance(H11, 'Plan')and instance(I11, 'ContentBearingObject')and containsInformation(I11, H11))and'$existential'(J11, '?PLANNING', instance('?PLANNING', 'Planning')and result('?PLANNING', I11)), result(J11, I11))and entails(not result(J11, I11)and instance(I11, 'ContentBearingObject')and containsInformation(I11, H11), not instance(H11, 'Plan'))and entails(not result(J11, I11)and instance(H11, 'Plan')and containsInformation(I11, H11), not instance(I11, 'ContentBearingObject'))and entails(not result(J11, I11)and instance(H11, 'Plan')and instance(I11, 'ContentBearingObject'), not containsInformation(I11, H11)), [domainV(J11, ['$instanceof':'Planning', result:1]), domainV(I11, ['$instanceof':'ContentBearingObject', containsInformation:1, result:2]), domainV(H11, ['$instanceof':'Plan', containsInformation:2]), domainV(_G9572, []), forall(H11), forall(I11), replaceConsVar(J11, '$existential'('?PLANNING', instance('?PLANNING', 'Planning')and result('?PLANNING', I11)))], ['PLAN'=H11, 'OBJ'=I11, 'PLANNING'=J11], 'Merge', 'QUALITIES', 6993, 'Anonymous', on).
mooCache(instance(I12, 'Plan')=>exists(J12, hasPurpose(I12, J12)), entails(not hasPurpose(I12, J12), not instance(I12, 'Plan'))and entails(instance(I12, 'Plan')and'$existential'(J12, '?PURP', hasPurpose(I12, '?PURP')), hasPurpose(I12, J12)), [domainV(J12, [hasPurpose:2]), domainV(I12, ['$instanceof':'Plan', hasPurpose:1]), domainV(_G5184, []), forall(I12), replaceConsVar(J12, '$existential'('?PURP', hasPurpose(I12, '?PURP')))], ['PLAN'=I12, 'PURP'=J12], 'Merge', 'QUALITIES', 6995, 'Anonymous', on).
mooCache(instance(orientation, 'SpatialRelation'), instance(orientation, 'SpatialRelation'), [], [], 'Merge', 'QUALITIES', 6997, 'Anonymous', on).
mooCache(instance(orientation, 'TernaryPredicate'), instance(orientation, 'TernaryPredicate'), [], [], 'Merge', 'QUALITIES', 6999, 'Anonymous', on).
mooCache(domain(orientation, 1, 'Object'), domain(orientation, 1, 'Object'), [], [], 'Merge', 'QUALITIES', 7001, 'Anonymous', on).
mooCache(domain(orientation, 2, 'Object'), domain(orientation, 2, 'Object'), [], [], 'Merge', 'QUALITIES', 7003, 'Anonymous', on).
mooCache(domain(orientation, 3, 'PositionalAttribute'), domain(orientation, 3, 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7005, 'Anonymous', on).
mooCache(documentation(orientation, string('"A general Predicate for indicating how two   Objects are oriented with respect to one another.  For example,   (orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and   (orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned   vertically with respect to ?OBJ2."')), documentation(orientation, string('"A general Predicate for indicating how two   Objects are oriented with respect to one another.  For example,   (orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and   (orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned   vertically with respect to ?OBJ2."')), [], [], 'Merge', 'QUALITIES', 7007, 'Anonymous', on).
mooCache(between(A15, B15, C15)<=>orientation(B15, A15, 'Left')and orientation(A15, C15, 'Left'), (entails(between(A15, B15, C15), orientation(B15, A15, 'Left'))and entails(between(A15, B15, C15), orientation(A15, C15, 'Left'))and entails(not orientation(B15, A15, 'Left')or not orientation(A15, C15, 'Left'), not between(A15, B15, C15)))and entails(orientation(B15, A15, 'Left')and orientation(A15, C15, 'Left'), between(A15, B15, C15))and entails(not between(A15, B15, C15)and orientation(A15, C15, 'Left'), not orientation(B15, A15, 'Left'))and entails(not between(A15, B15, C15)and orientation(B15, A15, 'Left'), not orientation(A15, C15, 'Left')), [domainV(C15, [between:3, orientation:2]), domainV(B15, [between:2, orientation:1]), domainV(A15, [between:1, orientation:1, orientation:2]), domainV(_G7472, []), forall(A15), forall(B15), forall(C15)], ['OBJ1'=A15, 'OBJ2'=B15, 'OBJ3'=C15], 'Merge', 'QUALITIES', 7009, 'Anonymous', on).
mooCache(instance(direction, 'CaseRole'), instance(direction, 'CaseRole'), [], [], 'Merge', 'QUALITIES', 7011, 'Anonymous', on).
mooCache(domain(direction, 1, 'Process'), domain(direction, 1, 'Process'), [], [], 'Merge', 'QUALITIES', 7013, 'Anonymous', on).
mooCache(domain(direction, 2, 'DirectionalAttribute'), domain(direction, 2, 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7015, 'Anonymous', on).
mooCache(documentation(direction, string('"(direction ?PROC ?ATTR) means that the   Process ?PROC is moving in the direction ?ATTR.  For example, one   would use this Predicate to represent the fact that Max is moving   North."')), documentation(direction, string('"(direction ?PROC ?ATTR) means that the   Process ?PROC is moving in the direction ?ATTR.  For example, one   would use this Predicate to represent the fact that Max is moving   North."')), [], [], 'Merge', 'QUALITIES', 7017, 'Anonymous', on).
mooCache(holdsDuring(I17, direction(J17, K17))=>forall(L17, holdsDuring(I17, direction(J17, L17))=>equal(L17, K17)), entails(holdsDuring(I17, direction(J17, L17))and not equal(L17, K17), not holdsDuring(I17, direction(J17, K17)))and entails(holdsDuring(I17, direction(J17, K17))and not equal(L17, K17), not holdsDuring(I17, direction(J17, L17)))and entails(holdsDuring(I17, direction(J17, K17))and holdsDuring(I17, direction(J17, L17)), equal(L17, K17)), [domainV(L17, [direction:2]), domainV(K17, [direction:2]), domainV(J17, [direction:1]), domainV(I17, [holdsDuring:1]), domainV(_G9188, []), forall(I17), forall(J17), forall(K17), forall(L17)], ['TIME'=I17, 'PROC'=J17, 'ATTR1'=K17, 'ATTR2'=L17], 'Merge', 'QUALITIES', 7019, 'Anonymous', on).
mooCache(subclass('PositionalAttribute', 'Attribute'), subclass('PositionalAttribute', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7021, 'Anonymous', on).
mooCache(documentation('PositionalAttribute', string('"Attributes characterizing the   orientation of an Object, e.g. Vertical versus Horizontal, Left   versus Right etc."')), documentation('PositionalAttribute', string('"Attributes characterizing the   orientation of an Object, e.g. Vertical versus Horizontal, Left   versus Right etc."')), [], [], 'Merge', 'QUALITIES', 7023, 'Anonymous', on).
mooCache(subclass('DirectionalAttribute', 'PositionalAttribute'), subclass('DirectionalAttribute', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7025, 'Anonymous', on).
mooCache(documentation('DirectionalAttribute', string('"The subclass of PositionalAttributes   that concern compass directions."')), documentation('DirectionalAttribute', string('"The subclass of PositionalAttributes   that concern compass directions."')), [], [], 'Merge', 'QUALITIES', 7027, 'Anonymous', on).
mooCache(orientation(N19, O19, P19)and instance(P19, 'DirectionalAttribute')and instance(Q19, 'DirectionalAttribute')and not equal(P19, Q19)=>not orientation(N19, O19, Q19), entails(orientation(N19, O19, P19)and instance(P19, 'DirectionalAttribute')and instance(Q19, 'DirectionalAttribute')and not equal(P19, Q19), not orientation(N19, O19, Q19))and entails(orientation(N19, O19, Q19)and instance(P19, 'DirectionalAttribute')and instance(Q19, 'DirectionalAttribute')and not equal(P19, Q19), not orientation(N19, O19, P19))and entails(orientation(N19, O19, Q19)and orientation(N19, O19, P19)and instance(Q19, 'DirectionalAttribute')and not equal(P19, Q19), not instance(P19, 'DirectionalAttribute'))and entails(orientation(N19, O19, Q19)and orientation(N19, O19, P19)and instance(P19, 'DirectionalAttribute')and not equal(P19, Q19), not instance(Q19, 'DirectionalAttribute'))and entails(orientation(N19, O19, Q19)and orientation(N19, O19, P19)and instance(P19, 'DirectionalAttribute')and instance(Q19, 'DirectionalAttribute'), equal(P19, Q19)), [domainV(Q19, ['$instanceof':'DirectionalAttribute', orientation:3]), domainV(P19, ['$instanceof':'DirectionalAttribute', orientation:3]), domainV(O19, [orientation:2]), domainV(N19, [orientation:1]), domainV(_G10248, []), forall(N19), forall(O19), forall(P19), forall(Q19)], ['OBJ1'=N19, 'OBJ2'=O19, 'ATTR1'=P19, 'ATTR2'=Q19], 'Merge', 'QUALITIES', 7029, 'Anonymous', on).
mooCache(instance('North', 'DirectionalAttribute'), instance('North', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7031, 'Anonymous', on).
mooCache(documentation('North', string('"The compass direction of North."')), documentation('North', string('"The compass direction of North."')), [], [], 'Merge', 'QUALITIES', 7033, 'Anonymous', on).
mooCache(instance('South', 'DirectionalAttribute'), instance('South', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7035, 'Anonymous', on).
mooCache(documentation('South', string('"The compass direction of South."')), documentation('South', string('"The compass direction of South."')), [], [], 'Merge', 'QUALITIES', 7037, 'Anonymous', on).
mooCache(instance('East', 'DirectionalAttribute'), instance('East', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7039, 'Anonymous', on).
mooCache(documentation('East', string('"The compass direction of East."')), documentation('East', string('"The compass direction of East."')), [], [], 'Merge', 'QUALITIES', 7041, 'Anonymous', on).
mooCache(instance('West', 'DirectionalAttribute'), instance('West', 'DirectionalAttribute'), [], [], 'Merge', 'QUALITIES', 7043, 'Anonymous', on).
mooCache(documentation('West', string('"The compass direction of West."')), documentation('West', string('"The compass direction of West."')), [], [], 'Merge', 'QUALITIES', 7045, 'Anonymous', on).
mooCache(instance('Vertical', 'PositionalAttribute'), instance('Vertical', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7047, 'Anonymous', on).
mooCache(documentation('Vertical', string('"Attribute used to indicate that an Object   is positioned height-wise with respect to another Object."')), documentation('Vertical', string('"Attribute used to indicate that an Object   is positioned height-wise with respect to another Object."')), [], [], 'Merge', 'QUALITIES', 7049, 'Anonymous', on).
mooCache(instance('Horizontal', 'PositionalAttribute'), instance('Horizontal', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7051, 'Anonymous', on).
mooCache(contraryProperty('Horizontal', 'Vertical'), contraryProperty('Horizontal', 'Vertical'), [], [], 'Merge', 'QUALITIES', 7053, 'Anonymous', on).
mooCache(documentation('Horizontal', string('"Attribute used to indicate that an Object   is positioned width-wise with respect to another Object."')), documentation('Horizontal', string('"Attribute used to indicate that an Object   is positioned width-wise with respect to another Object."')), [], [], 'Merge', 'QUALITIES', 7055, 'Anonymous', on).
mooCache(instance('Above', 'PositionalAttribute'), instance('Above', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7057, 'Anonymous', on).
mooCache(documentation('Above', string('"This is a PositionalAttribute derived from the   up/down schema and not involving contact.  Note that this means directly   above, i.e., if one object is Above another object, then the projections   of the two objects overlap."')), documentation('Above', string('"This is a PositionalAttribute derived from the   up/down schema and not involving contact.  Note that this means directly   above, i.e., if one object is Above another object, then the projections   of the two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7059, 'Anonymous', on).
mooCache(orientation(B25, C25, 'Above')<=>not orientation(B25, C25, 'Below'), (entails(orientation(B25, C25, 'Above'), not orientation(B25, C25, 'Below'))and entails(orientation(B25, C25, 'Below'), not orientation(B25, C25, 'Above')))and entails(not orientation(B25, C25, 'Below'), orientation(B25, C25, 'Above'))and entails(not orientation(B25, C25, 'Above'), orientation(B25, C25, 'Below')), [domainV(C25, [orientation:2]), domainV(B25, [orientation:1]), domainV(_G5480, []), forall(B25), forall(C25)], ['OBJ1'=B25, 'OBJ2'=C25], 'Merge', 'QUALITIES', 7061, 'Anonymous', on).
mooCache(orientation(Q25, R25, 'Above')=>not connected(Q25, R25), entails(connected(Q25, R25), not orientation(Q25, R25, 'Above'))and entails(orientation(Q25, R25, 'Above'), not connected(Q25, R25)), [domainV(R25, [connected:2, orientation:2]), domainV(Q25, [connected:1, orientation:1]), domainV(_G5001, []), forall(Q25), forall(R25)], ['OBJ1'=Q25, 'OBJ2'=R25], 'Merge', 'QUALITIES', 7063, 'Anonymous', on).
mooCache(instance('Below', 'PositionalAttribute'), instance('Below', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7065, 'Anonymous', on).
mooCache(documentation('Below', string('"This PositionalAttribute is derived from the   up/down schema and may or may not involve contact.  Note that this means   directly below, i.e., if one object is Below another object, then the   projections of the two objects overlap."')), documentation('Below', string('"This PositionalAttribute is derived from the   up/down schema and may or may not involve contact.  Note that this means   directly below, i.e., if one object is Below another object, then the   projections of the two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7067, 'Anonymous', on).
mooCache(orientation(V26, W26, 'Below')=>orientation(W26, V26, 'On')or orientation(W26, V26, 'Above'), entails(not orientation(W26, V26, 'On')and not orientation(W26, V26, 'Above'), not orientation(V26, W26, 'Below'))and entails(orientation(V26, W26, 'Below')and not orientation(W26, V26, 'Above'), orientation(W26, V26, 'On'))and entails(orientation(V26, W26, 'Below')and not orientation(W26, V26, 'On'), orientation(W26, V26, 'Above')), [domainV(W26, [orientation:1, orientation:2]), domainV(V26, [orientation:1, orientation:2]), domainV(_G6558, []), forall(V26), forall(W26)], ['OBJ1'=V26, 'OBJ2'=W26], 'Merge', 'QUALITIES', 7069, 'Anonymous', on).
mooCache(instance('Adjacent', 'PositionalAttribute'), instance('Adjacent', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7071, 'Anonymous', on).
mooCache(documentation('Adjacent', string('"Used to assert that an object ?OBJ1 is close   to, near or abutting ?OBJ2.  This PositionalAttribute covers the   following common sense notions:  adjoins, abuts, is contiguous to,   is juxtaposed, and is close to."')), documentation('Adjacent', string('"Used to assert that an object ?OBJ1 is close   to, near or abutting ?OBJ2.  This PositionalAttribute covers the   following common sense notions:  adjoins, abuts, is contiguous to,   is juxtaposed, and is close to."')), [], [], 'Merge', 'QUALITIES', 7073, 'Anonymous', on).
mooCache(orientation(C28, D28, 'Adjacent')=>orientation(C28, D28, 'Near')or connected(C28, D28), entails(not orientation(C28, D28, 'Near')and not connected(C28, D28), not orientation(C28, D28, 'Adjacent'))and entails(orientation(C28, D28, 'Adjacent')and not connected(C28, D28), orientation(C28, D28, 'Near'))and entails(orientation(C28, D28, 'Adjacent')and not orientation(C28, D28, 'Near'), connected(C28, D28)), [domainV(D28, [connected:2, orientation:2]), domainV(C28, [connected:1, orientation:1]), domainV(_G6439, []), forall(C28), forall(D28)], ['OBJ1'=C28, 'OBJ2'=D28], 'Merge', 'QUALITIES', 7075, 'Anonymous', on).
mooCache(instance('Front', 'PositionalAttribute'), instance('Front', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7077, 'Anonymous', on).
mooCache(documentation('Front', string('"This PositionalAttribute is derived from   the front/back schema.  Note that this means directly in front of, so   that, if one object is in front of another, then the projections of   the two objects overlap."')), documentation('Front', string('"This PositionalAttribute is derived from   the front/back schema.  Note that this means directly in front of, so   that, if one object is in front of another, then the projections of   the two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7079, 'Anonymous', on).
mooCache(instance('Behind', 'PositionalAttribute'), instance('Behind', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7081, 'Anonymous', on).
mooCache(documentation('Behind', string('"This PositionalAttribute is derived from the   front/back schema.  Note that this means directly behind, so that, if   one object is behind another, then the projections of the two objects   overlap."')), documentation('Behind', string('"This PositionalAttribute is derived from the   front/back schema.  Note that this means directly behind, so that, if   one object is behind another, then the projections of the two objects   overlap."')), [], [], 'Merge', 'QUALITIES', 7083, 'Anonymous', on).
mooCache(orientation(X29, Y29, 'Front')<=>not orientation(X29, Y29, 'Behind'), (entails(orientation(X29, Y29, 'Front'), not orientation(X29, Y29, 'Behind'))and entails(orientation(X29, Y29, 'Behind'), not orientation(X29, Y29, 'Front')))and entails(not orientation(X29, Y29, 'Behind'), orientation(X29, Y29, 'Front'))and entails(not orientation(X29, Y29, 'Front'), orientation(X29, Y29, 'Behind')), [domainV(Y29, [orientation:2]), domainV(X29, [orientation:1]), domainV(_G5486, []), forall(X29), forall(Y29)], ['OBJ1'=X29, 'OBJ2'=Y29], 'Merge', 'QUALITIES', 7085, 'Anonymous', on).
mooCache(instance('Left', 'PositionalAttribute'), instance('Left', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7087, 'Anonymous', on).
mooCache(documentation('Left', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the left, so that,   if one object is to the left of another, then the projections of the   two objects overlap."')), documentation('Left', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the left, so that,   if one object is to the left of another, then the projections of the   two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7089, 'Anonymous', on).
mooCache(instance('Right', 'PositionalAttribute'), instance('Right', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7091, 'Anonymous', on).
mooCache(documentation('Right', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the right, so that,   if one object is to the right of another, then the projections of the   two objects overlap."')), documentation('Right', string('"This PositionalAttribute is derived from the   left/right schema.  Note that this means directly to the right, so that,   if one object is to the right of another, then the projections of the   two objects overlap."')), [], [], 'Merge', 'QUALITIES', 7093, 'Anonymous', on).
mooCache(orientation(S31, T31, 'Right')<=>not orientation(S31, T31, 'Left'), (entails(orientation(S31, T31, 'Right'), not orientation(S31, T31, 'Left'))and entails(orientation(S31, T31, 'Left'), not orientation(S31, T31, 'Right')))and entails(not orientation(S31, T31, 'Left'), orientation(S31, T31, 'Right'))and entails(not orientation(S31, T31, 'Right'), orientation(S31, T31, 'Left')), [domainV(T31, [orientation:2]), domainV(S31, [orientation:1]), domainV(_G5474, []), forall(S31), forall(T31)], ['OBJ1'=S31, 'OBJ2'=T31], 'Merge', 'QUALITIES', 7095, 'Anonymous', on).
mooCache(instance('Near', 'PositionalAttribute'), instance('Near', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7097, 'Anonymous', on).
mooCache(documentation('Near', string('"The relation of common sense adjacency.  Note that, if   an object is Near another object, then the objects are not connected."')), documentation('Near', string('"The relation of common sense adjacency.  Note that, if   an object is Near another object, then the objects are not connected."')), [], [], 'Merge', 'QUALITIES', 7099, 'Anonymous', on).
mooCache(orientation(W32, X32, 'Near')=>not connected(W32, X32), entails(connected(W32, X32), not orientation(W32, X32, 'Near'))and entails(orientation(W32, X32, 'Near'), not connected(W32, X32)), [domainV(X32, [connected:2, orientation:2]), domainV(W32, [connected:1, orientation:1]), domainV(_G4995, []), forall(W32), forall(X32)], ['OBJ1'=W32, 'OBJ2'=X32], 'Merge', 'QUALITIES', 7101, 'Anonymous', on).
mooCache(instance('On', 'PositionalAttribute'), instance('On', 'PositionalAttribute'), [], [], 'Merge', 'QUALITIES', 7103, 'Anonymous', on).
mooCache(documentation('On', string('"This is used to assert that an object is on top of   another object, and it is derived from the up/down schema and involves   contact."')), documentation('On', string('"This is used to assert that an object is on top of   another object, and it is derived from the up/down schema and involves   contact."')), [], [], 'Merge', 'QUALITIES', 7105, 'Anonymous', on).
mooCache(orientation(X33, Y33, 'On')=>connected(X33, Y33), entails(not connected(X33, Y33), not orientation(X33, Y33, 'On'))and entails(orientation(X33, Y33, 'On'), connected(X33, Y33)), [domainV(Y33, [connected:2, orientation:2]), domainV(X33, [connected:1, orientation:1]), domainV(_G4617, []), forall(X33), forall(Y33)], ['OBJ1'=X33, 'OBJ2'=Y33], 'Merge', 'QUALITIES', 7107, 'Anonymous', on).
mooCache(subclass('PhysicalState', 'Attribute'), subclass('PhysicalState', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7109, 'Anonymous', on).
mooCache(documentation('PhysicalState', string('"The physical state of an Object.  There   are three instances of this Class:  Solid, Liquid, and Gas.    Physical changes are not characterized by the transformation of one   substance into another, but rather by the change of the form (physical   states) of a given substance. The bending of a piece of copper wire fails   to change the copper into another substance; crushing a block of ice leaves   only crushed ice; melting an iron nail yields a substance still called   iron: these are all accepted as physical changes."')), documentation('PhysicalState', string('"The physical state of an Object.  There   are three instances of this Class:  Solid, Liquid, and Gas.    Physical changes are not characterized by the transformation of one   substance into another, but rather by the change of the form (physical   states) of a given substance. The bending of a piece of copper wire fails   to change the copper into another substance; crushing a block of ice leaves   only crushed ice; melting an iron nail yields a substance still called   iron: these are all accepted as physical changes."')), [], [], 'Merge', 'QUALITIES', 7111, 'Anonymous', on).
mooCache(instance('Solid', 'PhysicalState'), instance('Solid', 'PhysicalState'), [], [], 'Merge', 'QUALITIES', 7113, 'Anonymous', on).
mooCache(documentation('Solid', string('"An Object has the Attribute of Solid if it   has a fixed shape and a fixed volume."')), documentation('Solid', string('"An Object has the Attribute of Solid if it   has a fixed shape and a fixed volume."')), [], [], 'Merge', 'QUALITIES', 7115, 'Anonymous', on).
mooCache(instance('Liquid', 'PhysicalState'), instance('Liquid', 'PhysicalState'), [], [], 'Merge', 'QUALITIES', 7117, 'Anonymous', on).
mooCache(documentation('Liquid', string('"An Object has the Attribute of Liquid if   it has a fixed volume but not a fixed shape."')), documentation('Liquid', string('"An Object has the Attribute of Liquid if   it has a fixed volume but not a fixed shape."')), [], [], 'Merge', 'QUALITIES', 7119, 'Anonymous', on).
mooCache(instance(D36, 'Solution')=>attribute(D36, 'Liquid'), entails(not attribute(D36, 'Liquid'), not instance(D36, 'Solution'))and entails(instance(D36, 'Solution'), attribute(D36, 'Liquid')), [domainV(D36, ['$instanceof':'Solution', attribute:1]), domainV(_G3735, []), forall(D36)], ['X'=D36], 'Merge', 'QUALITIES', 7121, 'Anonymous', on).
mooCache(instance('Gas', 'PhysicalState'), instance('Gas', 'PhysicalState'), [], [], 'Merge', 'QUALITIES', 7123, 'Anonymous', on).
mooCache(documentation('Gas', string('"An Object has the Attribute of Gas if it has   neither a fixed volume nor a fixed shape."')), documentation('Gas', string('"An Object has the Attribute of Gas if it has   neither a fixed volume nor a fixed shape."')), [], [], 'Merge', 'QUALITIES', 7125, 'Anonymous', on).
mooCache(instance(U37, 'PhysicalState')and part(V37, W37)and holdsDuring(X37, attribute(W37, U37))=>not exists(Y37, instance(Y37, 'PhysicalState')and holdsDuring(X37, attribute(V37, Y37))and not equal(U37, Y37)), entails((part(V37, W37)and holdsDuring(X37, attribute(W37, U37)))and instance(Y37, 'PhysicalState')and holdsDuring(X37, attribute(V37, Y37))and not equal(U37, Y37), not instance(U37, 'PhysicalState'))and entails((instance(U37, 'PhysicalState')and holdsDuring(X37, attribute(W37, U37)))and instance(Y37, 'PhysicalState')and holdsDuring(X37, attribute(V37, Y37))and not equal(U37, Y37), not part(V37, W37))and entails((instance(U37, 'PhysicalState')and part(V37, W37))and instance(Y37, 'PhysicalState')and holdsDuring(X37, attribute(V37, Y37))and not equal(U37, Y37), not holdsDuring(X37, attribute(W37, U37)))and entails((instance(U37, 'PhysicalState')and part(V37, W37)and holdsDuring(X37, attribute(W37, U37)))and holdsDuring(X37, attribute(V37, Y37))and not equal(U37, Y37), not instance(Y37, 'PhysicalState'))and entails((instance(U37, 'PhysicalState')and part(V37, W37)and holdsDuring(X37, attribute(W37, U37)))and instance(Y37, 'PhysicalState')and not equal(U37, Y37), not holdsDuring(X37, attribute(V37, Y37)))and entails((instance(U37, 'PhysicalState')and part(V37, W37)and holdsDuring(X37, attribute(W37, U37)))and instance(Y37, 'PhysicalState')and holdsDuring(X37, attribute(V37, Y37)), equal(U37, Y37)), [domainV(Y37, ['$instanceof':'PhysicalState', attribute:2]), domainV(X37, [holdsDuring:1]), domainV(W37, [attribute:1, part:2]), domainV(V37, [attribute:1, part:1]), domainV(U37, ['$instanceof':'PhysicalState', attribute:2]), domainV(_G13873, []), forall(U37), forall(V37), forall(W37), forall(X37), forall(Y37), forall(Y37)], ['STATE'=U37, 'PART'=V37, 'OBJ'=W37, 'TIME'=X37, 'OTHERSTATE'=Y37], 'Merge', 'QUALITIES', 7127, 'Anonymous', on).
mooCache(subclass('TasteProperty', 'Attribute'), subclass('TasteProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7129, 'Anonymous', on).
mooCache(documentation('TasteProperty', string('"The Class of Attributes relating to   the taste of Objects."')), documentation('TasteProperty', string('"The Class of Attributes relating to   the taste of Objects."')), [], [], 'Merge', 'QUALITIES', 7131, 'Anonymous', on).
mooCache(instance(A1, 'Food')=>exists(B1, instance(B1, 'TasteProperty')and attribute(A1, B1)), (entails(not instance(B1, 'TasteProperty'), not instance(A1, 'Food'))and entails(instance(A1, 'Food')and'$existential'(B1, '?ATTR', instance('?ATTR', 'TasteProperty')and attribute(A1, '?ATTR')), instance(B1, 'TasteProperty')))and entails(not attribute(A1, B1), not instance(A1, 'Food'))and entails(instance(A1, 'Food')and'$existential'(B1, '?ATTR', instance('?ATTR', 'TasteProperty')and attribute(A1, '?ATTR')), attribute(A1, B1)), [domainV(B1, ['$instanceof':'TasteProperty', attribute:2]), domainV(A1, ['$instanceof':'Food', attribute:1]), domainV(_G6660, []), forall(A1), replaceConsVar(B1, '$existential'('?ATTR', instance('?ATTR', 'TasteProperty')and attribute(A1, '?ATTR')))], ['OBJ'=A1, 'ATTR'=B1], 'Merge', 'QUALITIES', 7133, 'Anonymous', on).
mooCache(instance('Sweet', 'TasteProperty'), instance('Sweet', 'TasteProperty'), [], [], 'Merge', 'QUALITIES', 7135, 'Anonymous', on).
mooCache(contraryProperty('Sweet', 'Bitter'), contraryProperty('Sweet', 'Bitter'), [], [], 'Merge', 'QUALITIES', 7137, 'Anonymous', on).
mooCache(documentation('Sweet', string('"The Attribute of Objects that are   sweet-tasting."')), documentation('Sweet', string('"The Attribute of Objects that are   sweet-tasting."')), [], [], 'Merge', 'QUALITIES', 7139, 'Anonymous', on).
mooCache(instance('Bitter', 'TasteProperty'), instance('Bitter', 'TasteProperty'), [], [], 'Merge', 'QUALITIES', 7141, 'Anonymous', on).
mooCache(documentation('Bitter', string('"The Attribute of Objects that are   bitter-tasting."')), documentation('Bitter', string('"The Attribute of Objects that are   bitter-tasting."')), [], [], 'Merge', 'QUALITIES', 7143, 'Anonymous', on).
mooCache(subclass('OlfactoryProperty', 'Attribute'), subclass('OlfactoryProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7145, 'Anonymous', on).
mooCache(documentation('OlfactoryProperty', string('"The Class of properties that are   detectable by smell."')), documentation('OlfactoryProperty', string('"The Class of properties that are   detectable by smell."')), [], [], 'Merge', 'QUALITIES', 7147, 'Anonymous', on).
mooCache(subclass('VisualProperty', 'Attribute'), subclass('VisualProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7149, 'Anonymous', on).
mooCache(documentation('VisualProperty', string('"The Class of visually discernible   properties."')), documentation('VisualProperty', string('"The Class of visually discernible   properties."')), [], [], 'Merge', 'QUALITIES', 7151, 'Anonymous', on).
mooCache(subclass('ColorProperty', 'VisualProperty'), subclass('ColorProperty', 'VisualProperty'), [], [], 'Merge', 'QUALITIES', 7153, 'Anonymous', on).
mooCache(documentation('ColorProperty', string('"The Class of VisualProperties   relating to the color of Objects."')), documentation('ColorProperty', string('"The Class of VisualProperties   relating to the color of Objects."')), [], [], 'Merge', 'QUALITIES', 7155, 'Anonymous', on).
mooCache(subclass('PrimaryColor', 'ColorProperty'), subclass('PrimaryColor', 'ColorProperty'), [], [], 'Merge', 'QUALITIES', 7157, 'Anonymous', on).
mooCache(documentation('PrimaryColor', string('"Colors which can be blended to form any   color and which cannot be derived from any other colors."')), documentation('PrimaryColor', string('"Colors which can be blended to form any   color and which cannot be derived from any other colors."')), [], [], 'Merge', 'QUALITIES', 7159, 'Anonymous', on).
mooCache(instance('Red', 'PrimaryColor'), instance('Red', 'PrimaryColor'), [], [], 'Merge', 'QUALITIES', 7161, 'Anonymous', on).
mooCache(contraryProperty('Red', 'Blue'), contraryProperty('Red', 'Blue'), [], [], 'Merge', 'QUALITIES', 7163, 'Anonymous', on).
mooCache(contraryProperty('Red', 'Yellow'), contraryProperty('Red', 'Yellow'), [], [], 'Merge', 'QUALITIES', 7165, 'Anonymous', on).
mooCache(documentation('Red', string('"The Attribute of redness."')), documentation('Red', string('"The Attribute of redness."')), [], [], 'Merge', 'QUALITIES', 7167, 'Anonymous', on).
mooCache(instance('Blue', 'PrimaryColor'), instance('Blue', 'PrimaryColor'), [], [], 'Merge', 'QUALITIES', 7169, 'Anonymous', on).
mooCache(contraryProperty('Blue', 'Yellow'), contraryProperty('Blue', 'Yellow'), [], [], 'Merge', 'QUALITIES', 7171, 'Anonymous', on).
mooCache(documentation('Blue', string('"The Attribute of being blue in color."')), documentation('Blue', string('"The Attribute of being blue in color."')), [], [], 'Merge', 'QUALITIES', 7173, 'Anonymous', on).
mooCache(instance('Yellow', 'PrimaryColor'), instance('Yellow', 'PrimaryColor'), [], [], 'Merge', 'QUALITIES', 7175, 'Anonymous', on).
mooCache(documentation('Yellow', string('"The Attribute of being yellow in color."')), documentation('Yellow', string('"The Attribute of being yellow in color."')), [], [], 'Merge', 'QUALITIES', 7177, 'Anonymous', on).
mooCache(instance('Monochromatic', 'ColorProperty'), instance('Monochromatic', 'ColorProperty'), [], [], 'Merge', 'QUALITIES', 7179, 'Anonymous', on).
mooCache(documentation('Monochromatic', string('"An Object with this Attribute has   the same color on every part of its surface."')), documentation('Monochromatic', string('"An Object with this Attribute has   the same color on every part of its surface."')), [], [], 'Merge', 'QUALITIES', 7181, 'Anonymous', on).
mooCache(attribute(M8, 'Monochromatic')and superficialPart(N8, M8)and attribute(N8, O8)and instance(O8, 'PrimaryColor')=>forall(P8, superficialPart(P8, M8)=>attribute(P8, O8)), entails(not attribute(P8, O8)and attribute(M8, 'Monochromatic')and superficialPart(N8, M8)and attribute(N8, O8)and instance(O8, 'PrimaryColor'), not superficialPart(P8, M8))and entails(superficialPart(P8, M8)and attribute(M8, 'Monochromatic')and superficialPart(N8, M8)and attribute(N8, O8)and instance(O8, 'PrimaryColor'), attribute(P8, O8))and entails((superficialPart(P8, M8)and not attribute(P8, O8))and superficialPart(N8, M8)and attribute(N8, O8)and instance(O8, 'PrimaryColor'), not attribute(M8, 'Monochromatic'))and entails((superficialPart(P8, M8)and not attribute(P8, O8))and attribute(M8, 'Monochromatic')and attribute(N8, O8)and instance(O8, 'PrimaryColor'), not superficialPart(N8, M8))and entails((superficialPart(P8, M8)and not attribute(P8, O8))and attribute(M8, 'Monochromatic')and superficialPart(N8, M8)and instance(O8, 'PrimaryColor'), not attribute(N8, O8))and entails((superficialPart(P8, M8)and not attribute(P8, O8))and attribute(M8, 'Monochromatic')and superficialPart(N8, M8)and attribute(N8, O8), not instance(O8, 'PrimaryColor')), [domainV(P8, [attribute:1, superficialPart:1]), domainV(O8, ['$instanceof':'PrimaryColor', attribute:2]), domainV(N8, [attribute:1, superficialPart:1]), domainV(M8, [attribute:1, superficialPart:2]), domainV(_G11227, []), forall(M8), forall(N8), forall(O8), forall(P8)], ['OBJ'=M8, 'PART'=N8, 'COLOR'=O8, 'ELEMENT'=P8], 'Merge', 'QUALITIES', 7183, 'Anonymous', on).
mooCache(instance('Polychromatic', 'ColorProperty'), instance('Polychromatic', 'ColorProperty'), [], [], 'Merge', 'QUALITIES', 7185, 'Anonymous', on).
mooCache(contraryProperty('Polychromatic', 'Monochromatic'), contraryProperty('Polychromatic', 'Monochromatic'), [], [], 'Merge', 'QUALITIES', 7187, 'Anonymous', on).
mooCache(documentation('Polychromatic', string('"An Object with this Attribute has   different colors on different parts of its surface."')), documentation('Polychromatic', string('"An Object with this Attribute has   different colors on different parts of its surface."')), [], [], 'Merge', 'QUALITIES', 7189, 'Anonymous', on).
mooCache(attribute(S11, 'Polychromatic')=>exists(T11, exists(U11, exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11))))), (entails(not superficialPart(W11, S11), not attribute(S11, 'Polychromatic'))and entails(attribute(S11, 'Polychromatic')and'$existential'(W11, '?PART1', superficialPart('?PART1', S11)and superficialPart(V11, S11)and attribute('?PART1', U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)), superficialPart(W11, S11)))and (entails(not superficialPart(V11, S11), not attribute(S11, 'Polychromatic'))and entails((attribute(S11, 'Polychromatic')and'$existential'(V11, '?PART2', exists(W11, superficialPart(W11, S11)and superficialPart('?PART2', S11)and attribute(W11, U11)and attribute('?PART2', T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11))))and'$existential'(W11, '?PART1', superficialPart('?PART1', S11)and superficialPart(V11, S11)and attribute('?PART1', U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)), superficialPart(V11, S11)))and (entails(not attribute(W11, U11), not attribute(S11, 'Polychromatic'))and entails(((attribute(S11, 'Polychromatic')and'$existential'(U11, '?COLOR1', exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, '?COLOR1')and attribute(V11, T11)and instance('?COLOR1', 'ColorProperty')and instance(T11, 'ColorProperty')and not equal('?COLOR1', T11)))))and'$existential'(V11, '?PART2', exists(W11, superficialPart(W11, S11)and superficialPart('?PART2', S11)and attribute(W11, U11)and attribute('?PART2', T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11))))and'$existential'(W11, '?PART1', superficialPart('?PART1', S11)and superficialPart(V11, S11)and attribute('?PART1', U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)), attribute(W11, U11)))and (entails(not attribute(V11, T11), not attribute(S11, 'Polychromatic'))and entails((((attribute(S11, 'Polychromatic')and'$existential'(T11, '?COLOR2', exists(U11, exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, U11)and attribute(V11, '?COLOR2')and instance(U11, 'ColorProperty')and instance('?COLOR2', 'ColorProperty')and not equal(U11, '?COLOR2'))))))and'$existential'(U11, '?COLOR1', exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, '?COLOR1')and attribute(V11, T11)and instance('?COLOR1', 'ColorProperty')and instance(T11, 'ColorProperty')and not equal('?COLOR1', T11)))))and'$existential'(V11, '?PART2', exists(W11, superficialPart(W11, S11)and superficialPart('?PART2', S11)and attribute(W11, U11)and attribute('?PART2', T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11))))and'$existential'(W11, '?PART1', superficialPart('?PART1', S11)and superficialPart(V11, S11)and attribute('?PART1', U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)), attribute(V11, T11)))and (entails(not instance(U11, 'ColorProperty'), not attribute(S11, 'Polychromatic'))and entails(((attribute(S11, 'Polychromatic')and'$existential'(U11, '?COLOR1', exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, '?COLOR1')and attribute(V11, T11)and instance('?COLOR1', 'ColorProperty')and instance(T11, 'ColorProperty')and not equal('?COLOR1', T11)))))and'$existential'(V11, '?PART2', exists(W11, superficialPart(W11, S11)and superficialPart('?PART2', S11)and attribute(W11, U11)and attribute('?PART2', T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11))))and'$existential'(W11, '?PART1', superficialPart('?PART1', S11)and superficialPart(V11, S11)and attribute('?PART1', U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)), instance(U11, 'ColorProperty')))and (entails(not instance(T11, 'ColorProperty'), not attribute(S11, 'Polychromatic'))and entails((((attribute(S11, 'Polychromatic')and'$existential'(T11, '?COLOR2', exists(U11, exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, U11)and attribute(V11, '?COLOR2')and instance(U11, 'ColorProperty')and instance('?COLOR2', 'ColorProperty')and not equal(U11, '?COLOR2'))))))and'$existential'(U11, '?COLOR1', exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, '?COLOR1')and attribute(V11, T11)and instance('?COLOR1', 'ColorProperty')and instance(T11, 'ColorProperty')and not equal('?COLOR1', T11)))))and'$existential'(V11, '?PART2', exists(W11, superficialPart(W11, S11)and superficialPart('?PART2', S11)and attribute(W11, U11)and attribute('?PART2', T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11))))and'$existential'(W11, '?PART1', superficialPart('?PART1', S11)and superficialPart(V11, S11)and attribute('?PART1', U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)), instance(T11, 'ColorProperty')))and entails(equal(U11, T11), not attribute(S11, 'Polychromatic'))and entails(attribute(S11, 'Polychromatic'), not equal(U11, T11)), [domainV(W11, [attribute:1, superficialPart:1]), domainV(V11, [attribute:1, superficialPart:1]), domainV(U11, ['$instanceof':'ColorProperty', attribute:2]), domainV(T11, ['$instanceof':'ColorProperty', attribute:2]), domainV(S11, [attribute:1, superficialPart:2]), domainV(_G2192, []), forall(S11), replaceConsVar(T11, '$existential'('?COLOR2', exists(U11, exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, U11)and attribute(V11, '?COLOR2')and instance(U11, 'ColorProperty')and instance('?COLOR2', 'ColorProperty')and not equal(U11, '?COLOR2')))))), replaceConsVar(U11, '$existential'('?COLOR1', exists(V11, exists(W11, superficialPart(W11, S11)and superficialPart(V11, S11)and attribute(W11, '?COLOR1')and attribute(V11, T11)and instance('?COLOR1', 'ColorProperty')and instance(T11, 'ColorProperty')and not equal('?COLOR1', T11))))), replaceConsVar(V11, '$existential'('?PART2', exists(W11, superficialPart(W11, S11)and superficialPart('?PART2', S11)and attribute(W11, U11)and attribute('?PART2', T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)))), replaceConsVar(W11, '$existential'('?PART1', superficialPart('?PART1', S11)and superficialPart(V11, S11)and attribute('?PART1', U11)and attribute(V11, T11)and instance(U11, 'ColorProperty')and instance(T11, 'ColorProperty')and not equal(U11, T11)))], ['OBJ'=S11, 'PART1'=W11, 'PART2'=V11, 'COLOR1'=U11, 'COLOR2'=T11], 'Merge', 'QUALITIES', 7191, 'Anonymous', on).
mooCache(subclass('ShapeProperty', 'Attribute'), subclass('ShapeProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7193, 'Anonymous', on).
mooCache(documentation('ShapeProperty', string('"Any Attribute that characterizes the   shape of an Object."')), documentation('ShapeProperty', string('"Any Attribute that characterizes the   shape of an Object."')), [], [], 'Merge', 'QUALITIES', 7195, 'Anonymous', on).
mooCache(instance('Pliable', 'ShapeProperty'), instance('Pliable', 'ShapeProperty'), [], [], 'Merge', 'QUALITIES', 7197, 'Anonymous', on).
mooCache(documentation('Pliable', string('"The shape of an Object with this Attribute   can be altered."')), documentation('Pliable', string('"The shape of an Object with this Attribute   can be altered."')), [], [], 'Merge', 'QUALITIES', 7199, 'Anonymous', on).
mooCache(instance(C15, 'ShapeAlteration')and patient(C15, D15)=>attribute(D15, 'Pliable'), entails(instance(C15, 'ShapeAlteration')and patient(C15, D15), attribute(D15, 'Pliable'))and entails(not attribute(D15, 'Pliable')and patient(C15, D15), not instance(C15, 'ShapeAlteration'))and entails(not attribute(D15, 'Pliable')and instance(C15, 'ShapeAlteration'), not patient(C15, D15)), [domainV(D15, [attribute:1, patient:2]), domainV(C15, ['$instanceof':'ShapeAlteration', patient:1]), domainV(_G5384, []), forall(C15), forall(D15)], ['PROC'=C15, 'OBJ'=D15], 'Merge', 'QUALITIES', 7201, 'Anonymous', on).
mooCache(instance('Rigid', 'ShapeProperty'), instance('Rigid', 'ShapeProperty'), [], [], 'Merge', 'QUALITIES', 7203, 'Anonymous', on).
mooCache(contraryProperty('Rigid', 'Pliable'), contraryProperty('Rigid', 'Pliable'), [], [], 'Merge', 'QUALITIES', 7205, 'Anonymous', on).
mooCache(documentation('Rigid', string('"The shape of an Object with this Attribute   cannot be easily altered."')), documentation('Rigid', string('"The shape of an Object with this Attribute   cannot be easily altered."')), [], [], 'Merge', 'QUALITIES', 7207, 'Anonymous', on).
mooCache(subclass('TextureProperty', 'Attribute'), subclass('TextureProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7209, 'Anonymous', on).
mooCache(documentation('TextureProperty', string('"Any Attribute that characterizes the   texture of an Object."')), documentation('TextureProperty', string('"Any Attribute that characterizes the   texture of an Object."')), [], [], 'Merge', 'QUALITIES', 7211, 'Anonymous', on).
mooCache(instance(X16, 'TextureProperty')and attribute(Y16, X16)and surface(Z16, Y16)=>attribute(Z16, X16), entails(instance(X16, 'TextureProperty')and attribute(Y16, X16)and surface(Z16, Y16), attribute(Z16, X16))and entails(not attribute(Z16, X16)and attribute(Y16, X16)and surface(Z16, Y16), not instance(X16, 'TextureProperty'))and entails(not attribute(Z16, X16)and instance(X16, 'TextureProperty')and surface(Z16, Y16), not attribute(Y16, X16))and entails(not attribute(Z16, X16)and instance(X16, 'TextureProperty')and attribute(Y16, X16), not surface(Z16, Y16)), [domainV(Z16, [attribute:1, surface:1]), domainV(Y16, [attribute:1, surface:2]), domainV(X16, ['$instanceof':'TextureProperty', attribute:2]), domainV(_G7118, []), forall(X16), forall(Y16), forall(Z16)], ['ATTRIBUTE'=X16, 'OBJ'=Y16, 'SURFACE'=Z16], 'Merge', 'QUALITIES', 7213, 'Anonymous', on).
mooCache(instance('Smooth', 'TextureProperty'), instance('Smooth', 'TextureProperty'), [], [], 'Merge', 'QUALITIES', 7215, 'Anonymous', on).
mooCache(documentation('Smooth', string('"An Object with this Attribute has a smooth   surface."')), documentation('Smooth', string('"An Object with this Attribute has a smooth   surface."')), [], [], 'Merge', 'QUALITIES', 7217, 'Anonymous', on).
mooCache(instance('Rough', 'TextureProperty'), instance('Rough', 'TextureProperty'), [], [], 'Merge', 'QUALITIES', 7219, 'Anonymous', on).
mooCache(contraryProperty('Smooth', 'Rough'), contraryProperty('Smooth', 'Rough'), [], [], 'Merge', 'QUALITIES', 7221, 'Anonymous', on).
mooCache(documentation('Rough', string('"An Object with this Attribute has a rough   surface."')), documentation('Rough', string('"An Object with this Attribute has a rough   surface."')), [], [], 'Merge', 'QUALITIES', 7223, 'Anonymous', on).
mooCache(subclass('SoundProperty', 'Attribute'), subclass('SoundProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7225, 'Anonymous', on).
mooCache(documentation('SoundProperty', string('"Any Attribute that characterizes the   sound made by an Object."')), documentation('SoundProperty', string('"Any Attribute that characterizes the   sound made by an Object."')), [], [], 'Merge', 'QUALITIES', 7227, 'Anonymous', on).
mooCache(subclass('SaturationProperty', 'Attribute'), subclass('SaturationProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7229, 'Anonymous', on).
mooCache(documentation('SaturationProperty', string('"A Class of Attributes that specify,   in qualitative terms, the amount of Water in a particular Object."')), documentation('SaturationProperty', string('"A Class of Attributes that specify,   in qualitative terms, the amount of Water in a particular Object."')), [], [], 'Merge', 'QUALITIES', 7231, 'Anonymous', on).
mooCache(instance('Dry', 'SaturationProperty'), instance('Dry', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7233, 'Anonymous', on).
mooCache(contraryProperty('Dry', 'Damp'), contraryProperty('Dry', 'Damp'), [], [], 'Merge', 'QUALITIES', 7235, 'Anonymous', on).
mooCache(documentation('Dry', string('"An Attribute which indicates that the associated   Object contains a relatively small amount of Water."')), documentation('Dry', string('"An Attribute which indicates that the associated   Object contains a relatively small amount of Water."')), [], [], 'Merge', 'QUALITIES', 7237, 'Anonymous', on).
mooCache(instance('Anhydrous', 'SaturationProperty'), instance('Anhydrous', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7239, 'Anonymous', on).
mooCache(subAttribute('Anhydrous', 'Dry'), subAttribute('Anhydrous', 'Dry'), [], [], 'Merge', 'QUALITIES', 7241, 'Anonymous', on).
mooCache(documentation('Anhydrous', string('"An Attribute which indicates that the   associated Object does not contain any Water."')), documentation('Anhydrous', string('"An Attribute which indicates that the   associated Object does not contain any Water."')), [], [], 'Merge', 'QUALITIES', 7243, 'Anonymous', on).
mooCache(attribute(E21, 'Anhydrous')=>not exists(F21, instance(F21, 'Water')and part(F21, E21)), entails(instance(F21, 'Water')and part(F21, E21), not attribute(E21, 'Anhydrous'))and entails(attribute(E21, 'Anhydrous')and part(F21, E21), not instance(F21, 'Water'))and entails(attribute(E21, 'Anhydrous')and instance(F21, 'Water'), not part(F21, E21)), [domainV(F21, ['$instanceof':'Water', part:1]), domainV(E21, [attribute:1, part:2]), domainV(_G6931, []), forall(E21), forall(F21), forall(F21)], ['OBJ'=E21, 'WATER'=F21], 'Merge', 'QUALITIES', 7245, 'Anonymous', on).
mooCache(instance('Damp', 'SaturationProperty'), instance('Damp', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7247, 'Anonymous', on).
mooCache(documentation('Damp', string('"An Attribute which indicates that the associated   Object contains a relatively large amount of Water."')), documentation('Damp', string('"An Attribute which indicates that the associated   Object contains a relatively large amount of Water."')), [], [], 'Merge', 'QUALITIES', 7249, 'Anonymous', on).
mooCache(instance('Wet', 'SaturationProperty'), instance('Wet', 'SaturationProperty'), [], [], 'Merge', 'QUALITIES', 7251, 'Anonymous', on).
mooCache(subAttribute('Wet', 'Damp'), subAttribute('Wet', 'Damp'), [], [], 'Merge', 'QUALITIES', 7253, 'Anonymous', on).
mooCache(documentation('Wet', string('"An Attribute which indicates that the   associated Object is fully saturated with Water."')), documentation('Wet', string('"An Attribute which indicates that the   associated Object is fully saturated with Water."')), [], [], 'Merge', 'QUALITIES', 7255, 'Anonymous', on).
mooCache(attribute(J23, 'Wet')=>forall(K23, part(K23, J23)=>exists(L23, instance(L23, 'Water')and (overlapsSpatially(L23, K23)or meetsSpatially(L23, K23)))), (entails(part(K23, J23)and not instance(L23, 'Water'), not attribute(J23, 'Wet'))and entails(attribute(J23, 'Wet')and not instance(L23, 'Water'), not part(K23, J23))and entails((attribute(J23, 'Wet')and part(K23, J23))and'$existential'(L23, '?WATER', instance('?WATER', 'Water')and (overlapsSpatially('?WATER', K23)or meetsSpatially('?WATER', K23))), instance(L23, 'Water')))and entails(part(K23, J23)and not overlapsSpatially(L23, K23)and not meetsSpatially(L23, K23), not attribute(J23, 'Wet'))and entails(attribute(J23, 'Wet')and not overlapsSpatially(L23, K23)and not meetsSpatially(L23, K23), not part(K23, J23))and entails((attribute(J23, 'Wet')and part(K23, J23)and not meetsSpatially(L23, K23))and'$existential'(L23, '?WATER', instance('?WATER', 'Water')and (overlapsSpatially('?WATER', K23)or meetsSpatially('?WATER', K23))), overlapsSpatially(L23, K23))and entails((attribute(J23, 'Wet')and part(K23, J23)and not overlapsSpatially(L23, K23))and'$existential'(L23, '?WATER', instance('?WATER', 'Water')and (overlapsSpatially('?WATER', K23)or meetsSpatially('?WATER', K23))), meetsSpatially(L23, K23)), [domainV(L23, ['$instanceof':'Water', meetsSpatially:1, overlapsSpatially:1]), domainV(K23, [meetsSpatially:2, overlapsSpatially:2, part:1]), domainV(J23, [attribute:1, part:2]), domainV(_G11963, []), forall(J23), forall(K23), replaceConsVar(L23, '$existential'('?WATER', instance('?WATER', 'Water')and (overlapsSpatially('?WATER', K23)or meetsSpatially('?WATER', K23))))], ['OBJ'=J23, 'PART'=K23, 'WATER'=L23], 'Merge', 'QUALITIES', 7257, 'Anonymous', on).
mooCache(subclass('BreakabilityProperty', 'Attribute'), subclass('BreakabilityProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7259, 'Anonymous', on).
mooCache(documentation('BreakabilityProperty', string('"A subclass of Attributes for   characterizing the breakability of CorpuscularObjects."')), documentation('BreakabilityProperty', string('"A subclass of Attributes for   characterizing the breakability of CorpuscularObjects."')), [], [], 'Merge', 'QUALITIES', 7261, 'Anonymous', on).
mooCache(instance('Fragile', 'BreakabilityProperty'), instance('Fragile', 'BreakabilityProperty'), [], [], 'Merge', 'QUALITIES', 7263, 'Anonymous', on).
mooCache(documentation('Fragile', string('"An Attribute which indicates that the   associated Object is very breakable."')), documentation('Fragile', string('"An Attribute which indicates that the   associated Object is very breakable."')), [], [], 'Merge', 'QUALITIES', 7265, 'Anonymous', on).
mooCache(instance('Unbreakable', 'BreakabilityProperty'), instance('Unbreakable', 'BreakabilityProperty'), [], [], 'Merge', 'QUALITIES', 7267, 'Anonymous', on).
mooCache(contraryProperty('Unbreakable', 'Fragile'), contraryProperty('Unbreakable', 'Fragile'), [], [], 'Merge', 'QUALITIES', 7269, 'Anonymous', on).
mooCache(documentation('Unbreakable', string('"An Attribute which indicates that the   associated Object cannot be broken under ordinary circumstances."')), documentation('Unbreakable', string('"An Attribute which indicates that the   associated Object cannot be broken under ordinary circumstances."')), [], [], 'Merge', 'QUALITIES', 7271, 'Anonymous', on).
mooCache(subclass('BiologicalProperty', 'Attribute'), subclass('BiologicalProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7273, 'Anonymous', on).
mooCache(documentation('BiologicalProperty', string('"Attributes that apply specifically   to instances of Organism or parts of an Organism."')), documentation('BiologicalProperty', string('"Attributes that apply specifically   to instances of Organism or parts of an Organism."')), [], [], 'Merge', 'QUALITIES', 7275, 'Anonymous', on).
mooCache(attribute(Z28, A29)and instance(A29, 'BiologicalProperty')=>instance(Z28, 'Organism'), entails(attribute(Z28, A29)and instance(A29, 'BiologicalProperty'), instance(Z28, 'Organism'))and entails(not instance(Z28, 'Organism')and instance(A29, 'BiologicalProperty'), not attribute(Z28, A29))and entails(not instance(Z28, 'Organism')and attribute(Z28, A29), not instance(A29, 'BiologicalProperty')), [domainV(A29, ['$instanceof':'BiologicalProperty', attribute:2]), domainV(Z28, ['$instanceof':'Organism', attribute:1]), domainV(_G5388, []), forall(Z28), forall(A29)], ['ORG'=Z28, 'ATT'=A29], 'Merge', 'QUALITIES', 7277, 'Anonymous', on).
mooCache(subclass('AnimacyProperty', 'BiologicalProperty'), subclass('AnimacyProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7279, 'Anonymous', on).
mooCache(documentation('AnimacyProperty', string('"Attributes that indicate whether an   Organism is alive or not."')), documentation('AnimacyProperty', string('"Attributes that indicate whether an   Organism is alive or not."')), [], [], 'Merge', 'QUALITIES', 7281, 'Anonymous', on).
mooCache(instance('Living', 'AnimacyProperty'), instance('Living', 'AnimacyProperty'), [], [], 'Merge', 'QUALITIES', 7283, 'Anonymous', on).
mooCache(documentation('Living', string('"This Attribute applies to Organisms that are   alive."')), documentation('Living', string('"This Attribute applies to Organisms that are   alive."')), [], [], 'Merge', 'QUALITIES', 7285, 'Anonymous', on).
mooCache(instance(X31, 'Organism')and agent(Y31, X31)=>holdsDuring('WhenFn'(Y31), attribute(X31, 'Living')), entails(instance(X31, 'Organism')and agent(Y31, X31), holdsDuring('WhenFn'(Y31), attribute(X31, 'Living')))and entails(not holdsDuring('WhenFn'(Y31), attribute(X31, 'Living'))and agent(Y31, X31), not instance(X31, 'Organism'))and entails(not holdsDuring('WhenFn'(Y31), attribute(X31, 'Living'))and instance(X31, 'Organism'), not agent(Y31, X31)), [domainV(Y31, ['WhenFn':1, agent:1]), domainV(X31, ['$instanceof':'Organism', agent:2, attribute:1]), domainV(_G6632, []), forall(X31), forall(Y31)], ['ORGANISM'=X31, 'PROCESS'=Y31], 'Merge', 'QUALITIES', 7287, 'Anonymous', on).
mooCache(instance(birthTime, 'BinaryPredicate'), instance(birthTime, 'BinaryPredicate'), [], [], 'Merge', 'QUALITIES', 7289, 'Anonymous', on).
mooCache(instance(birthTime, 'AsymmetricRelation'), instance(birthTime, 'AsymmetricRelation'), [], [], 'Merge', 'QUALITIES', 7291, 'Anonymous', on).
mooCache(domain(birthTime, 1, 'Organism'), domain(birthTime, 1, 'Organism'), [], [], 'Merge', 'QUALITIES', 7293, 'Anonymous', on).
mooCache(domain(birthTime, 2, 'TimePosition'), domain(birthTime, 2, 'TimePosition'), [], [], 'Merge', 'QUALITIES', 7295, 'Anonymous', on).
mooCache(subrelation(birthTime, time), subrelation(birthTime, time), [], [], 'Merge', 'QUALITIES', 7297, 'Anonymous', on).
mooCache(documentation(birthTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism was born."')), documentation(birthTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism was born."')), [], [], 'Merge', 'QUALITIES', 7299, 'Anonymous', on).
mooCache(birthTime(S33, T33)=>holdsDuring('ImmediateFutureFn'(T33), attribute(S33, 'Living')), entails(not holdsDuring('ImmediateFutureFn'(T33), attribute(S33, 'Living')), not birthTime(S33, T33))and entails(birthTime(S33, T33), holdsDuring('ImmediateFutureFn'(T33), attribute(S33, 'Living'))), [domainV(T33, ['ImmediateFutureFn':1, birthTime:2]), domainV(S33, [attribute:1, birthTime:1]), domainV(_G5356, []), forall(S33), forall(T33)], ['ORGANISM'=S33, 'TIME'=T33], 'Merge', 'QUALITIES', 7301, 'Anonymous', on).
mooCache(birthTime(H34, I34)=>holdsDuring(I34, exists(J34, instance(J34, 'Birth')and experiencer(J34, H34))), (entails(not holdsDuring(I34, instance(J34, 'Birth')), not birthTime(H34, I34))and entails(birthTime(H34, I34)and'$existential'(J34, '?BIRTH', holdsDuring(I34, instance('?BIRTH', 'Birth'))and holdsDuring(I34, experiencer('?BIRTH', H34))), holdsDuring(I34, instance(J34, 'Birth'))))and entails(not holdsDuring(I34, experiencer(J34, H34)), not birthTime(H34, I34))and entails(birthTime(H34, I34)and'$existential'(J34, '?BIRTH', holdsDuring(I34, instance('?BIRTH', 'Birth'))and holdsDuring(I34, experiencer('?BIRTH', H34))), holdsDuring(I34, experiencer(J34, H34))), [domainV(J34, ['$instanceof':'Birth', experiencer:1]), domainV(I34, [birthTime:2, holdsDuring:1]), domainV(H34, [birthTime:1, experiencer:2]), domainV(_G8178, []), forall(H34), forall(I34), replaceConsVar(J34, '$existential'('?BIRTH', holdsDuring(I34, instance('?BIRTH', 'Birth'))and holdsDuring(I34, experiencer('?BIRTH', H34))))], ['ORGANISM'=H34, 'TIME'=I34, 'BIRTH'=J34], 'Merge', 'QUALITIES', 7303, 'Anonymous', on).
mooCache(instance('Dead', 'AnimacyProperty'), instance('Dead', 'AnimacyProperty'), [], [], 'Merge', 'QUALITIES', 7305, 'Anonymous', on).
mooCache(contraryProperty('Dead', 'Living'), contraryProperty('Dead', 'Living'), [], [], 'Merge', 'QUALITIES', 7307, 'Anonymous', on).
mooCache(documentation('Dead', string('"This Attribute applies to Organisms that are   not alive."')), documentation('Dead', string('"This Attribute applies to Organisms that are   not alive."')), [], [], 'Merge', 'QUALITIES', 7309, 'Anonymous', on).
mooCache(instance(deathTime, 'BinaryPredicate'), instance(deathTime, 'BinaryPredicate'), [], [], 'Merge', 'QUALITIES', 7311, 'Anonymous', on).
mooCache(instance(deathTime, 'AsymmetricRelation'), instance(deathTime, 'AsymmetricRelation'), [], [], 'Merge', 'QUALITIES', 7313, 'Anonymous', on).
mooCache(domain(deathTime, 1, 'Organism'), domain(deathTime, 1, 'Organism'), [], [], 'Merge', 'QUALITIES', 7315, 'Anonymous', on).
mooCache(domain(deathTime, 2, 'TimePosition'), domain(deathTime, 2, 'TimePosition'), [], [], 'Merge', 'QUALITIES', 7317, 'Anonymous', on).
mooCache(subrelation(deathTime, time), subrelation(deathTime, time), [], [], 'Merge', 'QUALITIES', 7319, 'Anonymous', on).
mooCache(documentation(deathTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism died."')), documentation(deathTime, string('"A BinaryPredicate that specifies, at any   level of resolution, the TimePosition at which a particular   Organism died."')), [], [], 'Merge', 'QUALITIES', 7321, 'Anonymous', on).
mooCache(deathTime(S36, T36)=>holdsDuring('FutureFn'(T36), attribute(S36, 'Dead')), entails(not holdsDuring('FutureFn'(T36), attribute(S36, 'Dead')), not deathTime(S36, T36))and entails(deathTime(S36, T36), holdsDuring('FutureFn'(T36), attribute(S36, 'Dead'))), [domainV(T36, ['FutureFn':1, deathTime:2]), domainV(S36, [attribute:1, deathTime:1]), domainV(_G5290, []), forall(S36), forall(T36)], ['ORGANISM'=S36, 'TIME'=T36], 'Merge', 'QUALITIES', 7323, 'Anonymous', on).
mooCache(deathTime(H37, I37)=>holdsDuring(I37, exists(J37, instance(J37, 'Death')and experiencer(J37, H37))), (entails(not holdsDuring(I37, instance(J37, 'Death')), not deathTime(H37, I37))and entails(deathTime(H37, I37)and'$existential'(J37, '?DEATH', holdsDuring(I37, instance('?DEATH', 'Death'))and holdsDuring(I37, experiencer('?DEATH', H37))), holdsDuring(I37, instance(J37, 'Death'))))and entails(not holdsDuring(I37, experiencer(J37, H37)), not deathTime(H37, I37))and entails(deathTime(H37, I37)and'$existential'(J37, '?DEATH', holdsDuring(I37, instance('?DEATH', 'Death'))and holdsDuring(I37, experiencer('?DEATH', H37))), holdsDuring(I37, experiencer(J37, H37))), [domainV(J37, ['$instanceof':'Death', experiencer:1]), domainV(I37, [deathTime:2, holdsDuring:1]), domainV(H37, [deathTime:1, experiencer:2]), domainV(_G8178, []), forall(H37), forall(I37), replaceConsVar(J37, '$existential'('?DEATH', holdsDuring(I37, instance('?DEATH', 'Death'))and holdsDuring(I37, experiencer('?DEATH', H37))))], ['ORGANISM'=H37, 'TIME'=I37, 'DEATH'=J37], 'Merge', 'QUALITIES', 7325, 'Anonymous', on).
mooCache(birthTime(L38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint')=>exists(O38, equal('BeginFn'(O38), M38)and equal('EndFn'(O38), N38)and holdsDuring(O38, attribute(L38, 'Living'))), (entails((birthTime(L38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'))and'$existential'(O38, '?INTERVAL', holds('BeginFn', '?INTERVAL', M38)and holds('EndFn', '?INTERVAL', N38)and holdsDuring('?INTERVAL', attribute(L38, 'Living'))), holds('BeginFn', O38, M38))and entails(not holds('BeginFn', O38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'), not birthTime(L38, M38))and entails(not holds('BeginFn', O38, M38)and birthTime(L38, M38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'), not deathTime(L38, N38))and entails(not holds('BeginFn', O38, M38)and birthTime(L38, M38)and deathTime(L38, N38)and instance(N38, 'TimePoint'), not instance(M38, 'TimePoint'))and entails(not holds('BeginFn', O38, M38)and birthTime(L38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint'), not instance(N38, 'TimePoint')))and (entails((birthTime(L38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'))and'$existential'(O38, '?INTERVAL', holds('BeginFn', '?INTERVAL', M38)and holds('EndFn', '?INTERVAL', N38)and holdsDuring('?INTERVAL', attribute(L38, 'Living'))), holds('EndFn', O38, N38))and entails(not holds('EndFn', O38, N38)and deathTime(L38, N38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'), not birthTime(L38, M38))and entails(not holds('EndFn', O38, N38)and birthTime(L38, M38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'), not deathTime(L38, N38))and entails(not holds('EndFn', O38, N38)and birthTime(L38, M38)and deathTime(L38, N38)and instance(N38, 'TimePoint'), not instance(M38, 'TimePoint'))and entails(not holds('EndFn', O38, N38)and birthTime(L38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint'), not instance(N38, 'TimePoint')))and entails((birthTime(L38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'))and'$existential'(O38, '?INTERVAL', holds('BeginFn', '?INTERVAL', M38)and holds('EndFn', '?INTERVAL', N38)and holdsDuring('?INTERVAL', attribute(L38, 'Living'))), holdsDuring(O38, attribute(L38, 'Living')))and entails(not holdsDuring(O38, attribute(L38, 'Living'))and deathTime(L38, N38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'), not birthTime(L38, M38))and entails(not holdsDuring(O38, attribute(L38, 'Living'))and birthTime(L38, M38)and instance(M38, 'TimePoint')and instance(N38, 'TimePoint'), not deathTime(L38, N38))and entails(not holdsDuring(O38, attribute(L38, 'Living'))and birthTime(L38, M38)and deathTime(L38, N38)and instance(N38, 'TimePoint'), not instance(M38, 'TimePoint'))and entails(not holdsDuring(O38, attribute(L38, 'Living'))and birthTime(L38, M38)and deathTime(L38, N38)and instance(M38, 'TimePoint'), not instance(N38, 'TimePoint')), [domainV(O38, ['BeginFn':1, 'EndFn':1, holdsDuring:1]), domainV(N38, ['$instanceof':'TimePoint', 'EndFn':2, deathTime:2]), domainV(M38, ['$instanceof':'TimePoint', 'BeginFn':2, birthTime:2]), domainV(L38, [attribute:1, birthTime:1, deathTime:1]), domainV(_G14896, []), forall(L38), forall(M38), forall(N38), replaceConsVar(O38, '$existential'('?INTERVAL', holds('BeginFn', '?INTERVAL', M38)and holds('EndFn', '?INTERVAL', N38)and holdsDuring('?INTERVAL', attribute(L38, 'Living'))))], ['ORGANISM'=L38, 'TIME1'=M38, 'TIME2'=N38, 'INTERVAL'=O38], 'Merge', 'QUALITIES', 7327, 'Anonymous', on).
mooCache(birthTime(D2, E2)and deathTime(D2, F2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval')=>exists(G2, starts(E2, G2)and finishes(F2, G2)and holdsDuring(G2, attribute(D2, 'Living'))), (entails((birthTime(D2, E2)and deathTime(D2, F2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'))and'$existential'(G2, '?INTERVAL', starts(E2, '?INTERVAL')and finishes(F2, '?INTERVAL')and holdsDuring('?INTERVAL', attribute(D2, 'Living'))), starts(E2, G2))and entails(not starts(E2, G2)and deathTime(D2, F2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'), not birthTime(D2, E2))and entails(not starts(E2, G2)and birthTime(D2, E2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'), not deathTime(D2, F2))and entails(not starts(E2, G2)and birthTime(D2, E2)and deathTime(D2, F2)and instance(F2, 'TimeInterval'), not instance(E2, 'TimeInterval'))and entails(not starts(E2, G2)and birthTime(D2, E2)and deathTime(D2, F2)and instance(E2, 'TimeInterval'), not instance(F2, 'TimeInterval')))and (entails((birthTime(D2, E2)and deathTime(D2, F2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'))and'$existential'(G2, '?INTERVAL', starts(E2, '?INTERVAL')and finishes(F2, '?INTERVAL')and holdsDuring('?INTERVAL', attribute(D2, 'Living'))), finishes(F2, G2))and entails(not finishes(F2, G2)and deathTime(D2, F2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'), not birthTime(D2, E2))and entails(not finishes(F2, G2)and birthTime(D2, E2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'), not deathTime(D2, F2))and entails(not finishes(F2, G2)and birthTime(D2, E2)and deathTime(D2, F2)and instance(F2, 'TimeInterval'), not instance(E2, 'TimeInterval'))and entails(not finishes(F2, G2)and birthTime(D2, E2)and deathTime(D2, F2)and instance(E2, 'TimeInterval'), not instance(F2, 'TimeInterval')))and entails((birthTime(D2, E2)and deathTime(D2, F2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'))and'$existential'(G2, '?INTERVAL', starts(E2, '?INTERVAL')and finishes(F2, '?INTERVAL')and holdsDuring('?INTERVAL', attribute(D2, 'Living'))), holdsDuring(G2, attribute(D2, 'Living')))and entails(not holdsDuring(G2, attribute(D2, 'Living'))and deathTime(D2, F2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'), not birthTime(D2, E2))and entails(not holdsDuring(G2, attribute(D2, 'Living'))and birthTime(D2, E2)and instance(E2, 'TimeInterval')and instance(F2, 'TimeInterval'), not deathTime(D2, F2))and entails(not holdsDuring(G2, attribute(D2, 'Living'))and birthTime(D2, E2)and deathTime(D2, F2)and instance(F2, 'TimeInterval'), not instance(E2, 'TimeInterval'))and entails(not holdsDuring(G2, attribute(D2, 'Living'))and birthTime(D2, E2)and deathTime(D2, F2)and instance(E2, 'TimeInterval'), not instance(F2, 'TimeInterval')), [domainV(G2, [finishes:2, holdsDuring:1, starts:2]), domainV(F2, ['$instanceof':'TimeInterval', deathTime:2, finishes:1]), domainV(E2, ['$instanceof':'TimeInterval', birthTime:2, starts:1]), domainV(D2, [attribute:1, birthTime:1, deathTime:1]), domainV(_G14068, []), forall(D2), forall(E2), forall(F2), replaceConsVar(G2, '$existential'('?INTERVAL', starts(E2, '?INTERVAL')and finishes(F2, '?INTERVAL')and holdsDuring('?INTERVAL', attribute(D2, 'Living'))))], ['ORGANISM'=D2, 'TIME1'=E2, 'TIME2'=F2, 'INTERVAL'=G2], 'Merge', 'QUALITIES', 7329, 'Anonymous', on).
mooCache(subclass('SexProperty', 'BiologicalProperty'), subclass('SexProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7331, 'Anonymous', on).
mooCache(documentation('SexProperty', string('"Attributes that indicate the sex of an   Organism."')), documentation('SexProperty', string('"Attributes that indicate the sex of an   Organism."')), [], [], 'Merge', 'QUALITIES', 7333, 'Anonymous', on).
mooCache(instance('Female', 'SexProperty'), instance('Female', 'SexProperty'), [], [], 'Merge', 'QUALITIES', 7335, 'Anonymous', on).
mooCache(documentation('Female', string('"An Attribute indicating that an Organism is   female in nature."')), documentation('Female', string('"An Attribute indicating that an Organism is   female in nature."')), [], [], 'Merge', 'QUALITIES', 7337, 'Anonymous', on).
mooCache(instance('Male', 'SexProperty'), instance('Male', 'SexProperty'), [], [], 'Merge', 'QUALITIES', 7339, 'Anonymous', on).
mooCache(contraryProperty('Male', 'Female'), contraryProperty('Male', 'Female'), [], [], 'Merge', 'QUALITIES', 7341, 'Anonymous', on).
mooCache(documentation('Male', string('"An Attribute indicating that an Organism is   male in nature."')), documentation('Male', string('"An Attribute indicating that an Organism is   male in nature."')), [], [], 'Merge', 'QUALITIES', 7343, 'Anonymous', on).
mooCache(subclass('DevelopmentalProperty', 'BiologicalProperty'), subclass('DevelopmentalProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7345, 'Anonymous', on).
mooCache(documentation('DevelopmentalProperty', string('"Attributes that indicate the   stage of development of an Organism."')), documentation('DevelopmentalProperty', string('"Attributes that indicate the   stage of development of an Organism."')), [], [], 'Merge', 'QUALITIES', 7347, 'Anonymous', on).
mooCache(instance('FullyFormed', 'DevelopmentalProperty'), instance('FullyFormed', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7349, 'Anonymous', on).
mooCache(documentation('FullyFormed', string('"The stage of an Organism or an   AnatomicalStructure when it has reached the end of its growth   phase."')), documentation('FullyFormed', string('"The stage of an Organism or an   AnatomicalStructure when it has reached the end of its growth   phase."')), [], [], 'Merge', 'QUALITIES', 7351, 'Anonymous', on).
mooCache(instance('NonFullyFormed', 'DevelopmentalProperty'), instance('NonFullyFormed', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7353, 'Anonymous', on).
mooCache(contraryProperty('NonFullyFormed', 'FullyFormed'), contraryProperty('NonFullyFormed', 'FullyFormed'), [], [], 'Merge', 'QUALITIES', 7355, 'Anonymous', on).
mooCache(successorAttribute('NonFullyFormed', 'FullyFormed'), successorAttribute('NonFullyFormed', 'FullyFormed'), [], [], 'Merge', 'QUALITIES', 7357, 'Anonymous', on).
mooCache(documentation('NonFullyFormed', string('"The stage of an Animal before it is   FullyFormed."')), documentation('NonFullyFormed', string('"The stage of an Animal before it is   FullyFormed."')), [], [], 'Merge', 'QUALITIES', 7359, 'Anonymous', on).
mooCache(instance('Larval', 'DevelopmentalProperty'), instance('Larval', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7361, 'Anonymous', on).
mooCache(subAttribute('Larval', 'NonFullyFormed'), subAttribute('Larval', 'NonFullyFormed'), [], [], 'Merge', 'QUALITIES', 7363, 'Anonymous', on).
mooCache(documentation('Larval', string('"Form of most Invertebrates, Amphibians, and   Fish immediately after they hatch.  This form is fundamentally unlike   the adult form, and metamorphosis is required to reach the latter form."')), documentation('Larval', string('"Form of most Invertebrates, Amphibians, and   Fish immediately after they hatch.  This form is fundamentally unlike   the adult form, and metamorphosis is required to reach the latter form."')), [], [], 'Merge', 'QUALITIES', 7365, 'Anonymous', on).
mooCache(instance('Embryonic', 'DevelopmentalProperty'), instance('Embryonic', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7367, 'Anonymous', on).
mooCache(subAttribute('Embryonic', 'NonFullyFormed'), subAttribute('Embryonic', 'NonFullyFormed'), [], [], 'Merge', 'QUALITIES', 7369, 'Anonymous', on).
mooCache(successorAttribute('Embryonic', 'Fetal'), successorAttribute('Embryonic', 'Fetal'), [], [], 'Merge', 'QUALITIES', 7371, 'Anonymous', on).
mooCache(documentation('Embryonic', string('"The stage of an Organism or an   AnatomicalStructure that exists only before the Organism is fully   formed.  Mammals, for example, have this Attribute only prior to   their birth."')), documentation('Embryonic', string('"The stage of an Organism or an   AnatomicalStructure that exists only before the Organism is fully   formed.  Mammals, for example, have this Attribute only prior to   their birth."')), [], [], 'Merge', 'QUALITIES', 7373, 'Anonymous', on).
mooCache(instance('Fetal', 'DevelopmentalProperty'), instance('Fetal', 'DevelopmentalProperty'), [], [], 'Merge', 'QUALITIES', 7375, 'Anonymous', on).
mooCache(subAttribute('Fetal', 'NonFullyFormed'), subAttribute('Fetal', 'NonFullyFormed'), [], [], 'Merge', 'QUALITIES', 7377, 'Anonymous', on).
mooCache(contraryProperty('Fetal', 'Embryonic'), contraryProperty('Fetal', 'Embryonic'), [], [], 'Merge', 'QUALITIES', 7379, 'Anonymous', on).
mooCache(documentation('Fetal', string('"A Vertebrate in the later stage of development before   its birth has this Attribute, which indicates that the main features of the   FullyFormed animal are recognizable."')), documentation('Fetal', string('"A Vertebrate in the later stage of development before   its birth has this Attribute, which indicates that the main features of the   FullyFormed animal are recognizable."')), [], [], 'Merge', 'QUALITIES', 7381, 'Anonymous', on).
mooCache(subclass('PsychologicalProperty', 'BiologicalProperty'), subclass('PsychologicalProperty', 'BiologicalProperty'), [], [], 'Merge', 'QUALITIES', 7383, 'Anonymous', on).
mooCache(documentation('PsychologicalProperty', string('"Attributes that characterize the mental   or behavioral life of an Organism (and perhaps other Agents)."')), documentation('PsychologicalProperty', string('"Attributes that characterize the mental   or behavioral life of an Organism (and perhaps other Agents)."')), [], [], 'Merge', 'QUALITIES', 7385, 'Anonymous', on).
mooCache(subclass('EmotionalState', 'PsychologicalProperty'), subclass('EmotionalState', 'PsychologicalProperty'), [], [], 'Merge', 'QUALITIES', 7387, 'Anonymous', on).
mooCache(disjoint('EmotionalState', 'TraitProperty'), disjoint('EmotionalState', 'TraitProperty'), [], [], 'Merge', 'QUALITIES', 7389, 'Anonymous', on).
mooCache(documentation('EmotionalState', string('"The Class of Attributes that denote emotional   states of Organisms (and perhaps other Agents).  Note that EmotionalState   is distinguished from TraitProperty in part by the fact that instances of the   former are relatively transient while instances of the latter are persistent   features of a creature\'s behavioral/psychological make-up."')), documentation('EmotionalState', string('"The Class of Attributes that denote emotional   states of Organisms (and perhaps other Agents).  Note that EmotionalState   is distinguished from TraitProperty in part by the fact that instances of the   former are relatively transient while instances of the latter are persistent   features of a creature\'s behavioral/psychological make-up."')), [], [], 'Merge', 'QUALITIES', 7391, 'Anonymous', on).
mooCache(subclass('TraitProperty', 'PsychologicalProperty'), subclass('TraitProperty', 'PsychologicalProperty'), [], [], 'Merge', 'QUALITIES', 7393, 'Anonymous', on).
mooCache(documentation('TraitProperty', string('"Attributes that indicate the the   behavior/personality traits of an Organism."')), documentation('TraitProperty', string('"Attributes that indicate the the   behavior/personality traits of an Organism."')), [], [], 'Merge', 'QUALITIES', 7395, 'Anonymous', on).
mooCache(instance('Aggressive', 'TraitProperty'), instance('Aggressive', 'TraitProperty'), [], [], 'Merge', 'QUALITIES', 7397, 'Anonymous', on).
mooCache(contraryProperty('Aggressive', 'Docile'), contraryProperty('Aggressive', 'Docile'), [], [], 'Merge', 'QUALITIES', 7399, 'Anonymous', on).
mooCache(documentation('Aggressive', string('"The Attribute of having an aggressive   disposition."')), documentation('Aggressive', string('"The Attribute of having an aggressive   disposition."')), [], [], 'Merge', 'QUALITIES', 7401, 'Anonymous', on).
mooCache(instance('Docile', 'TraitProperty'), instance('Docile', 'TraitProperty'), [], [], 'Merge', 'QUALITIES', 7403, 'Anonymous', on).
mooCache(documentation('Docile', string('"The Attribute of having a docile disposition."')), documentation('Docile', string('"The Attribute of having a docile disposition."')), [], [], 'Merge', 'QUALITIES', 7405, 'Anonymous', on).
mooCache(subclass('ConsciousnessProperty', 'PsychologicalProperty'), subclass('ConsciousnessProperty', 'PsychologicalProperty'), [], [], 'Merge', 'QUALITIES', 7407, 'Anonymous', on).
mooCache(documentation('ConsciousnessProperty', string('"Attributes that indicate whether   an Organism is conscious."')), documentation('ConsciousnessProperty', string('"Attributes that indicate whether   an Organism is conscious."')), [], [], 'Merge', 'QUALITIES', 7409, 'Anonymous', on).
mooCache(instance(J12, 'ConsciousnessProperty')=>holdsDuring(K12, attribute(L12, J12))=>holdsDuring(K12, attribute(L12, 'Living')), entails(holdsDuring(K12, attribute(L12, J12))and not holdsDuring(K12, attribute(L12, 'Living')), not instance(J12, 'ConsciousnessProperty'))and entails(instance(J12, 'ConsciousnessProperty')and not holdsDuring(K12, attribute(L12, 'Living')), not holdsDuring(K12, attribute(L12, J12)))and entails(instance(J12, 'ConsciousnessProperty')and holdsDuring(K12, attribute(L12, J12)), holdsDuring(K12, attribute(L12, 'Living'))), [domainV(L12, [attribute:1]), domainV(K12, [holdsDuring:1]), domainV(J12, ['$instanceof':'ConsciousnessProperty', attribute:2]), domainV(_G7320, []), forall(J12), forall(K12), forall(L12)], ['PROPERTY'=J12, 'TIME'=K12, 'ORGANISM'=L12], 'Merge', 'QUALITIES', 7411, 'Anonymous', on).
mooCache(subclass('Asleep', 'ConsciousnessProperty'), subclass('Asleep', 'ConsciousnessProperty'), [], [], 'Merge', 'QUALITIES', 7413, 'Anonymous', on).
mooCache(contraryProperty('Asleep', 'Unconscious'), contraryProperty('Asleep', 'Unconscious'), [], [], 'Merge', 'QUALITIES', 7415, 'Anonymous', on).
mooCache(contraryProperty('Asleep', 'Awake'), contraryProperty('Asleep', 'Awake'), [], [], 'Merge', 'QUALITIES', 7417, 'Anonymous', on).
mooCache(documentation('Asleep', string('"This Attribute applies to Organisms that are   sleeping."')), documentation('Asleep', string('"This Attribute applies to Organisms that are   sleeping."')), [], [], 'Merge', 'QUALITIES', 7419, 'Anonymous', on).
mooCache(subclass('Unconscious', 'ConsciousnessProperty'), subclass('Unconscious', 'ConsciousnessProperty'), [], [], 'Merge', 'QUALITIES', 7421, 'Anonymous', on).
mooCache(contraryProperty('Unconscious', 'Awake'), contraryProperty('Unconscious', 'Awake'), [], [], 'Merge', 'QUALITIES', 7423, 'Anonymous', on).
mooCache(documentation('Unconscious', string('"This Attribute applies to Organisms that   are unconscious because of a non-natural process, e.g. a blow to the head,   a drug, etc.  Note that the Attribute Asleep is used to describe the   ConsciousnessProperty of an Organism that is asleep."')), documentation('Unconscious', string('"This Attribute applies to Organisms that   are unconscious because of a non-natural process, e.g. a blow to the head,   a drug, etc.  Note that the Attribute Asleep is used to describe the   ConsciousnessProperty of an Organism that is asleep."')), [], [], 'Merge', 'QUALITIES', 7425, 'Anonymous', on).
mooCache(subclass('Awake', 'ConsciousnessProperty'), subclass('Awake', 'ConsciousnessProperty'), [], [], 'Merge', 'QUALITIES', 7427, 'Anonymous', on).
mooCache(documentation('Awake', string('"This Attribute applies to Organisms that are   neither Unconscious nor Asleep."')), documentation('Awake', string('"This Attribute applies to Organisms that are   neither Unconscious nor Asleep."')), [], [], 'Merge', 'QUALITIES', 7429, 'Anonymous', on).
mooCache(subclass('CompetitionProperty', 'Attribute'), subclass('CompetitionProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7431, 'Anonymous', on).
mooCache(documentation('CompetitionProperty', string('"A Class containing all of the   Attributes that are specific to participants in a Competition.  Some   of these Attributes are winning, losing, won, lost, struggling, etc."')), documentation('CompetitionProperty', string('"A Class containing all of the   Attributes that are specific to participants in a Competition.  Some   of these Attributes are winning, losing, won, lost, struggling, etc."')), [], [], 'Merge', 'QUALITIES', 7433, 'Anonymous', on).
mooCache(subclass('NormativeProperty', 'Attribute'), subclass('NormativeProperty', 'Attribute'), [], [], 'Merge', 'QUALITIES', 7435, 'Anonymous', on).
mooCache(documentation('NormativeProperty', string('"A Class containing all of the   Attributes that are specific to judgements about morality, legality,   aesthetics, etiquette, etc.  In general, these judgements express that   something ought to be the case."')), documentation('NormativeProperty', string('"A Class containing all of the   Attributes that are specific to judgements about morality, legality,   aesthetics, etiquette, etc.  In general, these judgements express that   something ought to be the case."')), [], [], 'Merge', 'QUALITIES', 7437, 'Anonymous', on).
mooCache(instance(modalProperty, 'BinaryPredicate'), instance(modalProperty, 'BinaryPredicate'), [], [], 'Merge', 'QUALITIES', 7439, 'Anonymous', on).
mooCache(instance(modalProperty, 'AsymmetricRelation'), instance(modalProperty, 'AsymmetricRelation'), [], [], 'Merge', 'QUALITIES', 7441, 'Anonymous', on).
mooCache(instance(modalProperty, 'IrreflexiveRelation'), instance(modalProperty, 'IrreflexiveRelation'), [], [], 'Merge', 'QUALITIES', 7443, 'Anonymous', on).
mooCache(subrelation(modalProperty, property), subrelation(modalProperty, property), [], [], 'Merge', 'QUALITIES', 7445, 'Anonymous', on).
mooCache(domain(modalProperty, 1, 'Formula'), domain(modalProperty, 1, 'Formula'), [], [], 'Merge', 'QUALITIES', 7447, 'Anonymous', on).
mooCache(domain(modalProperty, 2, 'NormativeProperty'), domain(modalProperty, 2, 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7449, 'Anonymous', on).
mooCache(documentation(modalProperty, string('"A BinaryRelation that is used to state the   normative force of a Proposition.  (modalProperty ?FORMULA ?PROP) means   that the Proposition expressed by ?FORMULA has the NormativeProperty   ?PROP.  For example, (modalProperty (exists (?ACT ?OBJ) (and   (instance ?ACT Giving) (agent ?ACT John) (patient ?ACT ?OBJ)   (destination ?ACT Tom))) Obligation) means that John is obligated to give   Tom something."')), documentation(modalProperty, string('"A BinaryRelation that is used to state the   normative force of a Proposition.  (modalProperty ?FORMULA ?PROP) means   that the Proposition expressed by ?FORMULA has the NormativeProperty   ?PROP.  For example, (modalProperty (exists (?ACT ?OBJ) (and   (instance ?ACT Giving) (agent ?ACT John) (patient ?ACT ?OBJ)   (destination ?ACT Tom))) Obligation) means that John is obligated to give   Tom something."')), [], [], 'Merge', 'QUALITIES', 7451, 'Anonymous', on).
mooCache(modalProperty(G16, H16)and entails(G16, I16)=>modalProperty(I16, H16), entails(modalProperty(G16, H16)and entails(G16, I16), modalProperty(I16, H16))and entails(not modalProperty(I16, H16)and entails(G16, I16), not modalProperty(G16, H16))and entails(not modalProperty(I16, H16)and modalProperty(G16, H16), not entails(G16, I16)), [domainV(I16, [entails:2, modalProperty:1]), domainV(H16, [modalProperty:2]), domainV(G16, [entails:1, modalProperty:1]), domainV(_G6231, []), forall(G16), forall(H16), forall(I16)], ['FORMULA1'=G16, 'PROP'=H16, 'FORMULA2'=I16], 'Merge', 'QUALITIES', 7453, 'Anonymous', on).
mooCache(subclass('SubjectiveAssessmentProperty', 'NormativeProperty'), subclass('SubjectiveAssessmentProperty', 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7455, 'Anonymous', on).
mooCache(documentation('SubjectiveAssessmentProperty', string('"The Class of NormativeProperties  which lack an objective criterion for their attribution, i.e. the attribution of   these Attributes varies from subject to subject and even with respect to the   same subject over time.  This Class is, generally speaking, only used when   mapping external knowledge sources to the SUMO.  If a term from such a knowledge   source seems to lack objective criteria for its attribution, it is assigned to   this Class."')), documentation('SubjectiveAssessmentProperty', string('"The Class of NormativeProperties  which lack an objective criterion for their attribution, i.e. the attribution of   these Attributes varies from subject to subject and even with respect to the   same subject over time.  This Class is, generally speaking, only used when   mapping external knowledge sources to the SUMO.  If a term from such a knowledge   source seems to lack objective criteria for its attribution, it is assigned to   this Class."')), [], [], 'Merge', 'QUALITIES', 7457, 'Anonymous', on).
mooCache(instance('Obligation', 'NormativeProperty'), instance('Obligation', 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7459, 'Anonymous', on).
mooCache(documentation('Obligation', string('"Attribute that applies to Propositions that an   Agent is required, by some authority, to make true."')), documentation('Obligation', string('"Attribute that applies to Propositions that an   Agent is required, by some authority, to make true."')), [], [], 'Merge', 'QUALITIES', 7461, 'Anonymous', on).
mooCache(subAttribute('Law', 'Obligation'), subAttribute('Law', 'Obligation'), [], [], 'Merge', 'QUALITIES', 7463, 'Anonymous', on).
mooCache(documentation('Law', string('"Attribute that applies to Propositions that are   required by a government or a branch of the government and that are enforced   with penalties for noncompliance.  These Propositions may be codified as   legislation or they may be more informal, as in the case of government policy."')), documentation('Law', string('"Attribute that applies to Propositions that are   required by a government or a branch of the government and that are enforced   with penalties for noncompliance.  These Propositions may be codified as   legislation or they may be more informal, as in the case of government policy."')), [], [], 'Merge', 'QUALITIES', 7465, 'Anonymous', on).
mooCache(instance('Promise', 'NormativeProperty'), instance('Promise', 'NormativeProperty'), [], [], 'Merge', 'QUALITIES', 7467, 'Anonymous', on).
mooCache(documentation('Promise', string('"Attribute that applies to Propositions that   an Agent promises to make true.  Promises may be implicit or explicit.    They may be expressed in a written or verbal or gestural manner."')), documentation('Promise', string('"Attribute that applies to Propositions that   an Agent promises to make true.  Promises may be implicit or explicit.    They may be expressed in a written or verbal or gestural manner."')), [], [], 'Merge', 'QUALITIES', 7469, 'Anonymous', on).
mooCache(subAttribute('Contract', 'Promise'), subAttribute('Contract', 'Promise'), [], [], 'Merge', 'QUALITIES', 7471, 'Anonymous', on).
mooCache(documentation('Contract', string('"Attribute that applies to Propositions where   something is promised in return, i.e. a reciprocal promise."')), documentation('Contract', string('"Attribute that applies to Propositions where   something is promised in return, i.e. a reciprocal promise."')), [], [], 'Merge', 'QUALITIES', 7473, 'Anonymous', on).
mooCache(subAttribute('PurchaseContract', 'Contract'), subAttribute('PurchaseContract', 'Contract'), [], [], 'Merge', 'QUALITIES', 7475, 'Anonymous', on).
mooCache(documentation('PurchaseContract', string('"A Contract between two Agents in   which one Agent agrees to render the other some good or service in   exchange for currency."')), documentation('PurchaseContract', string('"A Contract between two Agents in   which one Agent agrees to render the other some good or service in   exchange for currency."')), [], [], 'Merge', 'QUALITIES', 7477, 'Anonymous', on).
mooCache(subAttribute('ServiceContract', 'Contract'), subAttribute('ServiceContract', 'Contract'), [], [], 'Merge', 'QUALITIES', 7479, 'Anonymous', on).
mooCache(documentation('ServiceContract', string('"A Contract where an Agent agrees to   perform a service for another Agent (usually for a price)."')), documentation('ServiceContract', string('"A Contract where an Agent agrees to   perform a service for another Agent (usually for a price)."')), [], [], 'Merge', 'QUALITIES', 7481, 'Anonymous', on).
mooCache(subAttribute('Warranty', 'ServiceContract'), subAttribute('Warranty', 'ServiceContract'), [], [], 'Merge', 'QUALITIES', 7483, 'Anonymous', on).
mooCache(documentation('Warranty', string('"A Contract that states the cirumstances   under which defects in the product will be corrected for no charge.    A Warranty is usually limited to a length of time that is specified   in the Warranty itself.  A Warranty also includes information about   what is not covered and actions that invalidate the Warranty."')), documentation('Warranty', string('"A Contract that states the cirumstances   under which defects in the product will be corrected for no charge.    A Warranty is usually limited to a length of time that is specified   in the Warranty itself.  A Warranty also includes information about   what is not covered and actions that invalidate the Warranty."')), [], [], 'Merge', 'QUALITIES', 7485, 'Anonymous', on).
mooCache(subAttribute('NakedPromise', 'Promise'), subAttribute('NakedPromise', 'Promise'), [], [], 'Merge', 'QUALITIES', 7487, 'Anonymous', on).
mooCache(contraryProperty('NakedPromise', 'Contract'), contraryProperty('NakedPromise', 'Contract'), [], [], 'Merge', 'QUALITIES', 7489, 'Anonymous', on).
mooCache(documentation('NakedPromise', string('"A Promise where nothing is promised in return,   i.e. a nudum pactum."')), documentation('NakedPromise', string('"A Promise where nothing is promised in return,   i.e. a nudum pactum."')), [], [], 'Merge', 'QUALITIES', 7491, 'Anonymous', on).
