// uictrl.odl : type library source for ActiveX Control project.

// This file will be processed by the Make Type Library (mktyplib) tool to
// produce the type library (uictrl.tlb) that will become a resource in
// uictrl.ocx.

/////////////////////////////////////////////////////////////////////////////////////////
// This file defines a number of controls (and their event and dispatch interfaces) that
// can be used for various user interface elements.  It includes:
//
// CVWSelfVwCtrl:	The purpose of this SelfView control is to show an image (2D) of
//					your avatar's current appearance. It displays visual feedback when
//					your avatar does a gestures, takes/drops an accessory, or otherwise
//					changes imagery.  The default camera position is first person so
//					this control then provides immediate feedback as to your appearance
//					without having to switch camera mode.
//
// CHistoryCtrl:	[Not currently used]  The purpose of this control was to log chat,
//					gestures, actions and other system messages.  The current sample
//					clients have been switched to instead do all of this in DHTML by
//					handling events.
//
// CScriptCtrl:		This control wraps the functionality of the ActiveScripting engine and adds
//					knowledge of certain vworlds objects into the scripting namespace (ie: the 
//					world/global objects.)
//
// CAvatarListCtrl:	The purpose of this control is to handle the various client side functions
//					relating to Avatars including: selecting from previously created avatars,
//					creating a new avatar, and deleting avatars.  The functionality also
//					gives the ability to choose choose from the various avatar graphics stored
//					in the DefaultAvatarGraphicsPath specified in the registry.
//
// CWebBrowserHelperCtrl:	This object encapsulates the internet explorer WebBrowser object and
//							adds scriptable functionality to hide various browser features and 
//							also adds ability to create PopupMenus using TrackThingMenu.
//
// CVwsoundCtrl:	The sound control is a client component that responds to changes in sounds
//					in the world. It does this by handling the OnPropertyChanged event listening
//					for changes to the Sound property (and the Position property for 3D sounds),
//					and the UIEvents for PlaySound and SoundEvent
//
//////////////////////////////////////////////////////////////////////////////////////////
#include <olectl.h>
#include <idispids.h>

[ uuid(DC9CA0BD-336F-11D1-BB22-00C04FC2CAB1), version(1.0),
  helpfile("uictrl.hlp"),
  helpstring("uictrl ActiveX Control module"),
  control ]
library UICTRLLib
{
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);

	//  Primary dispatch interface for CVWSelfVwCtrl

	[ uuid(63FB7201-909E-11D0-89AA-00A0C9054129),
	  helpstring("Dispatch interface for the VWorlds SelfView Control"), hidden ]
	dispinterface _DVWSelfVw
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CVWSelfVwCtrl)
			[id(1), helpstring("VWClient property used to advise on the IVWClientSite ConnectionPt for client event handling through VWView")]
			IDispatch* VWClient;
			
			[id(2), helpstring("Set an image to be displayed in the Selfview")]
			BSTR GeometryName;
			
			[id(3), helpstring("Get/Set the Current Gesture/Image using SpriteManger")]
			int CurrentGesture;
			
			[id(4), helpstring("Specifies whether to handle or ignore world events")]
			BOOL HandleWorldEvents;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CVWSelfVwCtrl)
			[id(5), helpstring("Add the image of an accessory object to the self view at x,y coords with id lID")]
			void AddAccessory(BSTR bstrName, long lID, float fPosX, float fPosY);
			
			[id(6), helpstring("Remove the image with the specified ID from the SelfView")]
			void RemoveAccessory(long lID);
			
			[id(7), helpstring("Set the RGB backround color of the control")]
			void SetBackgroundColor(short r, short g, short b);
			
			[id(8), helpstring("Get the gesture index which corresponds to the passed in name")]
			int NamedGesture(LPCTSTR szGesture);
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CVWSelfVwCtrl

	[ uuid(63FB7202-909E-11D0-89AA-00A0C9054129),
	  helpstring("Event interface for the VWorlds SelfView Control") ]
	dispinterface _DVWSelfVwEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CVWSelfVwCtrl)
			//}}AFX_ODL_EVENT
	};

	//  Class information for CVWSelfVwCtrl

	[ uuid(63FB7203-909E-11D0-89AA-00A0C9054129),
	  helpstring("VWorlds SelfView Control"), control ]
	coclass VWSelfVw
	{
		[default] dispinterface _DVWSelfVw;
		[default, source] dispinterface _DVWSelfVwEvents;
	};

	//  Primary dispatch interface for CHistoryCtrl
	[ uuid(F5029F69-AF74-11D0-A78C-00A0C90AAA10),
	  helpstring("Dispatch interface for History Control"), hidden ]
	dispinterface _DHistory
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CHistoryCtrl)
			[id(DISPID_FONT), bindable] IFontDisp* Font;
			[id(DISPID_BACKCOLOR), bindable, requestedit] OLE_COLOR BackColor;
			
			[id(1), helpstring("Append to existing file when Autosaving history?")]
			boolean AppendOnSave;
			
			[id(2), helpstring("Autosave text when history control is cleared?")]
			boolean AutoSave;

			[id(3), helpstring("VWClient property used to advise on the IVWClientSite ConnectionPt for client event handling through VWView")]
			IDispatch* VWClient;
			
			[id(4), helpstring("Show Event text in the history window")]
			boolean FilterEvents;
			
			[id(5), helpstring("Show Gesture text in the history window")]
			boolean FilterGestures;
			
			[id(6), helpstring("Show normal text in the history window")]
			boolean FilterGeneral;
			
			[id(7), helpstring("Show trace and error text in the history window")]
			boolean FilterTrace;
			
			[id(8), helpstring("Not Used.")]
			boolean FilterList;			
			
			[id(9), helpstring("Show Report Messages in the history window.")]
			boolean FilterReport;
			
			[id(10), helpstring("Filename to use when saving.")]
			BSTR AutoSaveFileName;
		
			[id(11), helpstring("Size in bytes to autosave")]
			long MaxAutoSaveFileSize;
			
			[id(12), helpstring("Set the text color for normal chat messages")]
			OLE_COLOR SayColor;
			
			[id(13), helpstring("Set the text color for emoted chat messages")]
			OLE_COLOR EmoteColor;
			
			[id(14), helpstring("Set the text color for this type of message")]
			OLE_COLOR ThinkColor;
			
			[id(15), helpstring("Set the text color for whispered chat messages")]
			OLE_COLOR WhisperColor;
			
			[id(16), helpstring("Set the text color for this type of message")]
			OLE_COLOR AnnounceColor;
			
			[id(17), helpstring("Set the text color for user gesture type messages")]
			OLE_COLOR GestureColor;
			
			[id(18), helpstring("Set the text color for shouted messages")]
			OLE_COLOR ShoutColor;
			
			[id(19), helpstring("Set the text color for system report messages")]
			OLE_COLOR ReportColor;
			
			[id(20), helpstring("Set the text color for system event messages")]
			OLE_COLOR EventColor;
			
			[id(21), helpstring("Set the text color for directed chat messages")]
			OLE_COLOR DirectColor;
			
			[id(22), helpstring("Set the text color for world.trace messages")]
			OLE_COLOR TraceColor;
			
			[id(23), helpstring("Set the text color for messages from friends")]
			OLE_COLOR FriendColor;
			
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CHistoryCtrl)

			[id(24), helpstring("Refresh the text in the history window")]
			void RefreshText();
			
			[id(25), helpstring("Add text to the control with the type set to Trace")]
			void OnTrace(BSTR bstr);
			
			[id(26), helpstring("Sets the control options FilterGeneral and FilterReport")]
			void ViewAsHistory();
			
			[id(27), helpstring("Set the control options FilterTrace and FilterReport")]
			void ViewAsScript();
			
			[id(28), helpstring("Set which users (IThings) to whisper to with an IThing, a PropertyList or SAFEARRAY")]
			SCODE SetWhisperList(VARIANT List);
			
			[id(29), helpstring("Not Used")]
			SCODE SetPageNameList(VARIANT List);
			
			[id(30), helpstring("Save the text to a file specified with AutoSaveFileName")]
			void AutoSaveNow();
			//}}AFX_ODL_METHOD

	};

	//  Event dispatch interface for CHistoryCtrl

	[ uuid(F5029F6A-AF74-11D0-A78C-00A0C90AAA10),
	  helpstring("Event interface for History Control") ]
	dispinterface _DHistoryEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CHistoryCtrl)
			[id(1), helpstring("Event fired when a link is clicked")]
			void OnLink(BSTR URL);
			
			[id(2), helpstring("Event fired when changes are made to the various options (filter, etc..)")]
			void OnPrefsChanged();
			//}}AFX_ODL_EVENT
	};

	//  Class information for CHistoryCtrl

	[ uuid(F5029F6B-AF74-11D0-A78C-00A0C90AAA10),
	  helpstring("History Control"), control ]
	coclass History
	{
		[default] dispinterface _DHistory;
		[default, source] dispinterface _DHistoryEvents;
	};

	//  Primary dispatch interface for CScriptCtrl

	[ uuid(0E5D5944-020F-11D1-83AB-00C04FB6FA46),
	  helpstring("Dispatch interface for Virtual Worlds Script Control"), hidden ]
	dispinterface _DScriptocx
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CScriptCtrl)
			[id(1), helpstring("VWClient property used to advise on the IVWClientSite ConnectionPt for client event handling through VWView")]
			IDispatch* VWClient;
			
			[id(2), helpstring("Get/Set the location of the script file in use by the control")]
			BSTR ScriptURL;
			
			[id(3), helpstring("Get/Set the timeout used by the InvokeScriptlet call. Default -1.")]
			long TimeOut;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CScriptCtrl)
			//}}AFX_ODL_METHOD

	};

	//  Event dispatch interface for CScriptCtrl

	[ uuid(0E5D5945-020F-11D1-83AB-00C04FB6FA46),
	  helpstring("Event interface for Virtual Worlds Script Control") ]
	dispinterface _DScriptocxEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CScriptCtrl)
				
				[id(1), helpstring("Event fired with error number and message")]
				void OnError(long nErrorCode,BSTR MSG);

			//}}AFX_ODL_EVENT
	};

	//  Class information for CScriptCtrl

	[ uuid(0E5D5946-020F-11D1-83AB-00C04FB6FA46),
	  helpstring("Virtual Worlds Script Control"), control ]
	coclass Scriptocx
	{
		[default] dispinterface _DScriptocx;
		[default, source] dispinterface _DScriptocxEvents;
	};


	//  Primary dispatch interface for CAvatarListCtrl
[ uuid(AF0AD5CA-418B-11D1-BB2B-00C04FC2CAB1),
	  helpstring("Dispatch interface for AvatarList Control"), hidden ]
	dispinterface _DAvatarList
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CAvatarListCtrl)
			[id(1), helpstring("VWClient property used to advise on the IVWClientSite ConnectionPt for client event handling through VWView")]
			IDispatch* VWClient;
           
			[id(2), helpstring("Returns the avatar that is currently logged into the world")]
			IDispatch* currentUser;
		
			[id(3), helpstring("Returns an array of BSTRs containing valid avatar graphics in the AvatarGraphicsPath")]
			VARIANT CostumeList;
			
			[id(4), helpstring("Returns a list of the avatars currently in the registry (HKCU)")]
			VARIANT AvatarList;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CAvatarListCtrl)
			[id(5), helpstring("Creates a new avatar by creating and connecting to a local world")]
			boolean CreateNewAvatar(BSTR bstrAvatarName, BSTR bstrAvatarPassword);
			
			[id(6), helpstring("Connect an avatar with given name/password to a local world")]
			boolean ConnectAvatar(BSTR strAvatarName, BSTR bstrAvatarPassword);
			
			[id(7), helpstring("Disconnect from current local world")]
			void DisconnectAvatar();
			
			[id(8), helpstring("Remove the current avatar .vwc file and registry entry")]
			boolean DeleteAvatar();
			
			[id(9), helpstring("Remove an avatar .vwc file and registry entry by name")]
			boolean DeleteDeadAvatar(BSTR strAvatarName);
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CAvatarListCtrl

	[ uuid(AF0AD5CB-418B-11D1-BB2B-00C04FC2CAB1),
	  helpstring("Event interface for AvatarList Control") ]
	dispinterface _DAvatarListEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CAvatarListCtrl)
 			//}}AFX_ODL_EVENT
	};

	//  Class information for CAvatarListCtrl

	[ uuid(AF0AD5CC-418B-11D1-BB2B-00C04FC2CAB1),
	  helpstring("AvatarList Control"), control ]
	coclass AvatarList
	{
		[default] dispinterface _DAvatarList;
		[default, source] dispinterface _DAvatarListEvents;
	};



	//  Primary dispatch interface for CWebBrowserHelperCtrl
[ uuid(7886A634-606B-11d1-BB36-00C04FC2CAB1),
	  helpstring("Dispatch interface for WebBrowserHelper Control"), hidden ]
	dispinterface _DWebBrowserHelper
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CWebBrowserHelperCtrl)
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CWebBrowserHelperCtrl)

			[id(1), helpstring("Hide web browser toolbar and menubar")]
			void HideBrowserAdornments();
			
			[id(2), helpstring("Restore previous toolbar and menubar visibility settings")]
			void RestoreBrowserAdornments();
			
			[id(3), helpstring("Return the HTML as text from any passed in URL")]
			BSTR FetchURLText(BSTR bstrURL);
			
			[id(4), helpstring("Post Form Data to a given URL")]
			BSTR PostForm(BSTR URL, BSTR Data, boolean bFilter);
			
			[id(5), helpstring("Creates a PopupMenu populated with the data from IThing::GetMenuList")]
			void TrackThingMenu(IDispatch* pThing);
			
			[id(6), helpstring("Returns a PropertyList containing the names of the subdirectories of strRootPath")]
			IDispatch* GetSubFolderNames(BSTR strRootPath);
			
			[id(7), helpstring("Returns a PropertyList of filenames in strRootPath matching the wildcard(s)")]
			IDispatch* GetFileNames(BSTR strRootPath, BSTR strWildCard);
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CWebBrowserHelperCtrl

	[ uuid(7886A635-606B-11d1-BB36-00C04FC2CAB1),
	  helpstring("Event interface for WebBrowserHelper Control") ]
	dispinterface _DWebBrowserHelperEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CWebBrowserHelperCtrl)
 			//}}AFX_ODL_EVENT
	};

	//  Class information for CWebBrowserHelperCtrl

	[ uuid(7886A636-606B-11d1-BB36-00C04FC2CAB1),
	  helpstring("WebBrowserHelper Control"), control ]
	coclass WebBrowserHelper
	{
		[default] dispinterface _DWebBrowserHelper;
		[default, source] dispinterface _DWebBrowserHelperEvents;
	};

		//  Primary dispatch interface for CVwsoundCtrl

	[ uuid(05769B8A-A180-11D1-83E9-00C04FB6FA46),
	  helpstring("Dispatch interface for Vwsound Control"), hidden ]
	dispinterface _DVwsound
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CVwsoundCtrl)

			// NOTE: This property is marked RenderRoot, but is really RenderView..
			//		  we can't change it right now as it would make existing clients
			//		not backward compatible with the new binaries.
			[id(2), helpstring("Set RenderView control ptr..used to get camera positions for 3DSounds")]
			IDispatch* RenderRoot;
			
			[id(3), helpstring("Enable property defaults to true.. set false to disable sound")]
			boolean Enable;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CVwsoundCtrl)
			//}}AFX_ODL_METHOD

	};

	//  Event dispatch interface for CVwsoundCtrl

	[ uuid(05769B8B-A180-11D1-83E9-00C04FB6FA46),
	  helpstring("Event interface for Vwsound Control") ]
	dispinterface _DVwsoundEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CVwsoundCtrl)
			//}}AFX_ODL_EVENT
	};

	//  Class information for CVwsoundCtrl

	[ uuid(05769B8C-A180-11D1-83E9-00C04FB6FA46),
	  helpstring("Vwsound Control"), control ]
	coclass Vwsound
	{
		[default] dispinterface _DVwsound;
		[default, source] dispinterface _DVwsoundEvents;
	};



	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}
};
