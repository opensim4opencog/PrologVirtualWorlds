// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// vwclient.idl : IDL source for vwclient.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (vwclient.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWClient : Primary client interface for connecting to server and worlds on a server.
//
// IVWClientSite : Interface to be implemented by objects requiring notification of client
// connection/disconnection events.
//
// IVWClientOCX : Interface for OCX which can be placed on a web page to allow access to
// IVWClient.
///////////////////////////////////////////////////////////////////////////////////////////////

	import "vwobject.idl";
	import "vwadmin.idl";

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  We start our codes at 0x300.

cpp_quote("#define VWCLIENT_E_ALREADYCONNECTED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0301)")
cpp_quote("#define VWCLIENT_E_WINDOWCREATIONFAILURE		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0302)")
cpp_quote("#define VWCLIENT_E_POSTMESSAGEFAILURE		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0303)")
cpp_quote("#define VWCLIENT_E_INVALIDREPLYFROMSERVER	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0304)")
cpp_quote("#define VWCLIENT_E_INVALIDDATABASENAME		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0305)")
cpp_quote("#define VWCLIENT_E_CONNECTFAILED				MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0306)")

	coclass VWClient;
	interface IVWClient;

	[
		object,
		uuid(590D9820-A417-11CF-9BF0-0080C7A56A8A),
		dual,
		helpstring("IVWClient Interface"),
		pointer_default(unique)
	]
	interface IVWClient : IDispatch
	{
		import "oaidl.idl";

		[restricted, helpstring("Initialization. Invoke before using other methods.")] 
		HRESULT Initialize();
		[restricted, helpstring("Internally used - do not invoke.")] 
		HRESULT Terminate();

		[hidden, helpstring("Connect to a local database specified by filename.")] 
		HRESULT ConnectLocalEx([in] BSTR bstr, [in] VARIANT_BOOL bOverwrite, [out, retval] IWorld** ppworld);
		[helpstring("Connect to a local database specified by filename.")] 
		HRESULT ConnectLocal([in] BSTR bstr, [out, retval] IWorld** ppworld);

		[helpstring("Connect to a world server + world specified by URL.")]
		HRESULT Connect([in] BSTR bstrURL, [out, retval] IWorld** ppworld);

		[helpstring("Connect to a world server specified by URL w/o loading a world.")]
		HRESULT ConnectToServer([in] BSTR bstrURL, [in] VARIANT_BOOL bAuthenticated, [out, retval] IVWAdmin** ppadmin);

		[helpstring("Creates a new world (mustn't have an existing one!)")]
		HRESULT CreateWorld([in] BSTR bstrWorldName, [out, retval] IWorld** ppworld);

		[helpstring(" Opens an existing world.")]
		HRESULT OpenWorld([in] BSTR bstrWorldName, [out, retval] IWorld** ppworld);

		[helpstring("Disconnect from server (and world if connected).")] 
		HRESULT Disconnect();

		[propget, helpstring("Connected to a world?")] 
		HRESULT IsConnected([out, retval] VARIANT_BOOL* pbool);

		[propget, helpstring("Current world.")]
		HRESULT World([out, retval] IWorld** ppworld);
#if 0
		[propput, helpstring("Current world.")] 
		HRESULT World([in] IWorld* pworld);
#endif

		[helpstring("Fire events to UI as traces (traces/reports may be filtered differently by UI).")] 
		HRESULT Trace([in] BSTR bstr);
		[helpstring("Fire events to UI as reports (traces/reports may be filtered differently by UI).")] 
		HRESULT Report([in] BSTR bstr, [in] long lType);

		[helpstring("Create a tool by CLSID and store a reference to it by name (client tools remain valid between worlds, unlike world tools).")]
		HRESULT CreateTool([in] BSTR name, [in] REFCLSID clsid /* COM object reference */, 
			[out, retval] IUnknown** ppunk);
		[helpstring("Create a tool by ProgID and store a reference to it by name.")] 
		HRESULT CreateToolFromProgID([in] BSTR name, [in] BSTR progid /* COM object reference */, 
			[out, retval] IUnknown** ppunk);

		[helpstring("Remove tool by name.")] 
		HRESULT RemoveTool([in] BSTR name);

		[propget, helpstring("Get tool by name.")] 
		HRESULT Tool([in] BSTR name, [out, retval] IUnknown** ppunk);

		[restricted, propget, helpstring("Get a map of all the tools.")] 
		HRESULT Tools([out, retval] IPropertyMap** pppropmap);
	};

	[
		object,
		uuid(590D9822-A417-11CF-9BF0-0080C7A56A8A),
		helpstring("IVWClientSite Interface"),
		pointer_default(unique)
	]
	interface IVWClientSite : IUnknown
	{
		import "oaidl.idl";

		[helpstring("Event fired when client connects to a world.")] 
		HRESULT OnConnect([in] IWorld* pWorld);
		[helpstring("Event fired when client disconnects from a world.")] 
		HRESULT OnDisconnect([in] IWorld* pWorld);

		[helpstring("Event fired when avatar connects to a world.")] 
		HRESULT OnUserConnect([in] IThing* pthing);
		[helpstring("Event fired when avatar disconnects from a world.")] 
		HRESULT OnUserDisconnect([in] IThing* pthing);

		[helpstring("Fired to tell everyone world is changing.")] 
		HRESULT OnUserReconnect([in] IVWClient* pNewClient, [in] IWorld* pNewWorld, [in] IThing* pNewThing);

		[helpstring("Forwarded from IVWObjectSite.")] 
		HRESULT OnTrace([in] BSTR bstr);
		[helpstring("Forwarded from IVWObjectSite.")] 
		HRESULT OnReport([in] BSTR bstr, [in] long lVal);

		[helpstring("Forwarded from IVWObjectSite.")] 
		HRESULT OnUIEvent([in] IThing* pthing, [in] BSTR bstrEventName, [in] VARIANT varArg);
	};

	[
		object,
		uuid(D4898801-20EF-11D0-8A96-00A0C9082583),
		dual,
		helpstring("IVWClientOCX Interface"),
		pointer_default(unique)
	]
	interface IVWClientOCX : IDispatch
	{
		[propget, helpstring("The IVWClient interface.")]
		HRESULT VWClient([out, retval] IVWClient** pVWClient);

#if 0
		[propput, helpstring("The IVWClient interface.")]
		HRESULT VWClient([in] IVWClient* pVWClient);
#endif

		[propget, helpstring("OCX version number (build number).")] 
		HRESULT Version([out, retval] BSTR* pbstrVersion);
	};

#ifdef VWCLIENTLIB
[
	uuid(590D9821-A417-11CF-9BF0-0080C7A56A8A),
	version(1.0),
	helpstring("vwclient 1.0 Type Library")
]
library VWCLIENTLib
{
	importlib("stdole32.tlb");

	[
		uuid(590D9823-A417-11CF-9BF0-0080C7A56A8A),
		helpstring("VWClient Object")
	]
	coclass VWClient
	{
		[default] interface IVWClient;
	};
};
#endif
