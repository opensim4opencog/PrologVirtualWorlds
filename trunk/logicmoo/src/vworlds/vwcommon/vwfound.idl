// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// vwfound.idl : IDL source for vwfound.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (vwfound.tlb) and marshalling code.

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  In foundation, we start our codes at:
// For portals: 0xf00  (3840)
// For avatars: 0xf10  (3856)
// For hosts:   0xf20  (3872)
// For things:	0xf30  (3888)

// Avatar
cpp_quote("#define VWFOUND_E_AVATARIGNOREDENIED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0f10)")

	import "vwobject.idl";
	import "vwgcache.idl";
	import "vwrender.idl";
	import "menuitem.idl";
	import "vwgeom.idl";
	import "tranitem.idl";

	[
		object,
		uuid(A46AFE21-784B-11d0-A00E-00A024A85A2C),
		dual,
		helpstring("IFoundationExemplars Interface"),
		pointer_default(unique)
	]
	interface IFoundationExemplars : IVWDispatch
	{
		import "oaidl.idl";

		// Property creators
		[helpstring("Method to create a transaction item for TransactionMachine")] 
		HRESULT CreateTransactionItem([in] BSTR bstrName, [in] BSTR bstrDescription, 
									  [in] BSTR bstrGraphic, [in]BSTR bstrExemplarType, 
									  [out, retval] IVWTransactionItem **ppTransactionItem);
		[helpstring("Get the id of a room, returns a list of the ids of its portals")] 
		HRESULT	GetPortalIDs([in] long idRoom, [out, retval] IPropertyList **ppPortalList);
		[helpstring("Given an object id, returns the id of that object's container")] 
		HRESULT	GetContainerID([in] long idObj, [out, retval] long *pidContainer);
		[helpstring("Given one or more IDs, returns a list of names")] 
		HRESULT	GetNamesFromIDs([in] VARIANT idOrList, [out, retval] IPropertyList **ppNameList);
		
		// Extensions for core exemplars

		// a. Thing
		[helpstring("method GetMoveAction")] 
		HRESULT ThngInteractAt([in] IThing *pThing, [in] BSTR bstrSprFile, [in] BSTR bstrSoundURL, [in] BSTR bstrVerb);
		[hidden, helpstring("Handler to implement Interaction.")] 
		HRESULT ThngOnApproachDone();
		[hidden, helpstring("Start an animation to monitor the interact sprite.")] 
		HRESULT ThngStartInteractSprite([in] BSTR bstrSprFile, [in] BSTR bstrSoundURL, [in] float fPosX, [in] float fPosY, [in] float fPosZ);
		[hidden, helpstring("Animation callback to monitor the interact sprite.")] 
		HRESULT ThngMonitorInteractSprite([in] IThing *pInteractSprite, [in] DWORD dwTimeStarted);
		[helpstring("method OnDropFile")]
		HRESULT ThngOnDropFile([in] long x, [in] long y, [in] BSTR bstrFilename, [out, retval] VARIANT_BOOL *pbHandled);

		// b. Avatar
		[helpstring("The Ignore menuitem")]
		HRESULT AvaIgnoreAvatarMenu();
		[hidden, helpstring("Handles updating of the Ignore MenuItem")]
		HRESULT AvaUpdateIgnore([in] IMenuItem *pmi);
		[helpstring("Makes the user unignore this avatar")]
		HRESULT AvaUnIgnoreAvatar([in] IThing *pToUnIgnore);
		[helpstring("Makes the user ignore this avatar")]
		HRESULT AvaIgnoreAvatar([in] IThing *pToIgnore);
		[helpstring("The Friend menuitem")]
		HRESULT AvaBefriendAvatarMenu();
		[hidden, helpstring("Handles updating of the Friend MenuItem")]
		HRESULT AvaUpdateFriend([in] IMenuItem *pmi);
		[helpstring("Start the friend process on the user machine")]
		HRESULT AvaBefriendAvatar([in] IThing *pFriend);
		[helpstring("Start the friend process on the user machine")]
		HRESULT AvaUnBefriendAvatar([in] IThing *pFriend);
		[helpstring("Asks the user to confirm this avatar's friendship")]
		HRESULT AvaConfirmFriend([in] IThing *pOtherGuy);
		[helpstring("Finalizes the friendship process with a true or false")]
		HRESULT AvaFinalizeFriend([in] IThing *pNewFriend, [in]VARIANT_BOOL bFriend);
		[hidden, helpstring("method UpdateInteractions")] 
		HRESULT AvaUpdateInteractions([in] IMenuItem *pMI);
		[helpstring("method GetMenuItems")]
		HRESULT AvaGetMenuItems([in] IThing *pPeer, [out, retval]IPropertyList **ppMenuList);
		[helpstring("method GetPeerMenuItems")]
		HRESULT AvaGetPeerMenuItems([in] IThing *pPeer, [out, retval]IPropertyList **ppMenuList);
		[helpstring("method OnPreComposeGeometry")]
		HRESULT AvaOnPreComposeGeometry();

		// Painting
		[hidden, helpstring("Called when painting is loaded")]
		HRESULT OnLoadPainting([in] IVWFrame *pvwf);
		[hidden, helpstring("Called when a property is changed")]
		HRESULT OnPaintingPropChanged(long lHint, VARIANT varHintData);
		[hidden, helpstring("Use this to refresh the painting")]
		HRESULT RefreshPainting();
		[hidden, helpstring("Handles updating of Customize menu item")]
		HRESULT PaintingUpdateMenu([in] IMenuItem *pmi);
		[hidden, helpstring("Called to customize the painting")]
		HRESULT OnSelectPaintingCustomize();

		// Sign
		[hidden, helpstring("Called when sign is loaded")]
		HRESULT OnLoadSign([in] IVWFrame *pvwf);
		[hidden, helpstring("Called when a property is changed")]
		HRESULT OnSignPropChanged(long lHint, VARIANT varHintData);
		[hidden, helpstring("Use this to set appearance parameters")]
		HRESULT SetTextAttributes([in] VARIANT_BOOL bShadow, [in] short nWidth, [in] short nHeight, [in] short nPointSize);
		[hidden, helpstring("Used internally to set text appearance")]
		HRESULT SignSetTextureFromText();
		[hidden, helpstring("Use this to set sign URL")]
		HRESULT RefreshSign();
		[hidden, helpstring("Handles updating of Customize menu item")]
		HRESULT SignUpdateMenu([in] IMenuItem *pmi);
		[hidden, helpstring("Called to customize the sign")]
		HRESULT OnSelectSignCustomize();

		// Transaction Machine
		[hidden, helpstring("Called when an instance is created to create associated buttons")]
		HRESULT TMchOnCreate ([in] IThing* pThing);
		[helpstring("Sets index to particular number NYI")]
		HRESULT TMchSetCurrentIndex([in] short nIndex);
		[helpstring("Updates index by amount - usually + or -1")]
		HRESULT TMchUpdateCurrentIndex ([in] short nChangeAmt);
		[hidden, helpstring("Updates display when current index/item changes")]
		HRESULT TMchOnCurrentIndexChanged([in] long lHint, [in] VARIANT varHintData);
		[helpstring("Gets current transaction item from ItemList")]	
		HRESULT TMchGetCurrentItem([out, retval] IVWTransactionItem **pTransactionItem);
		[helpstring("Actually creates a new object within a user")]
		HRESULT TMchCreateAndDispenseObject();
		[hidden, helpstring("Handles user click on previous button")]
		HRESULT TMchPreviousButton_OnLButtonDown(long hWnd, long x, long y);
		[hidden, helpstring("Handles user click on next button")]
		HRESULT TMchNextButton_OnLButtonDown(long hWnd, long x, long y);
		[hidden, helpstring("Handles user click on select button")]
		HRESULT TMchSelectButton_OnLButtonDown(long hWnd, long x, long y);
		[helpstring("Sets display to new graphic - needed for security")]
		HRESULT TMchDisplay_SetGraphic([in] BSTR bstrNewGraphicFile);
	};

[
	uuid(3C2AD7C1-784D-11d0-A00E-00A024A85A2C),
	version(1.0),
	helpstring("vwfound 1.0 Type Library")
]
library VWFOUNDLib
{
	importlib("stdole32.tlb");

	[
		uuid(DEECC2C1-7866-11d0-A00E-00A024A85A2C),
		helpstring("FoundationExemplars Class")
	]
	coclass FoundationExemplars
	{
		[default] interface IFoundationExemplars;
	};

	// from TranItem.idl - TransactionItem
	[
		uuid(BE47064B-E532-11d1-8119-00C04FC2A129),
		helpstring("TransactionMachine Item Class")
	]
	coclass VWTransactionItem
	{
		[default] interface IVWTransactionItem;
	};
};
