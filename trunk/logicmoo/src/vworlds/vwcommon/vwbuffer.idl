// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// vwbuffer.idl : IDL source for vwbuffer.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (vwbuffer.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IUnMarshallBuffer : Used to read the data in the buffer used to remote object information 
// between the server and client. For example, the server can send a message to the client
// which will be tagged as a thing to be unmarshaled. Because the client knows exactly how the
// thing is marshaled on the server (i.e. what sequence of data) it can unmarshal the thing's 
// data into an empty thing object on the client thereby effectively creating the same thing 
// object on the client.
// 
// IMarshallBuffer : Interface to write the data into the buffer.
///////////////////////////////////////////////////////////////////////////////////////////////

	import "oaidl.idl";

	[
		object,
		uuid(590D9830-A417-11CF-9BF0-0080C7A56A8A),
		dual,
		local,
		helpstring("IUnMarshallBuffer Interface"),
		pointer_default(unique)
	]
	interface IUnMarshallBuffer : IDispatch
	{
		[restricted, propget, helpstring("CLSID's may be marshaled to define custom objects.")] 
		HRESULT ClassID([out] CLSID* pclsid);
		[restricted, propget, helpstring("Get a byte from the buffer.")] 
		HRESULT Byte([out] unsigned char* bval);
		[restricted, propget, helpstring("Get several bytes from the buffer.")] 
		HRESULT Bytes([out] unsigned char* pbytes, [in] long lval);
		[restricted, propget, helpstring("Get a boolean value from the buffer.")] 
		HRESULT Boolean([out] VARIANT_BOOL* boolval);
		[restricted, propget, helpstring("Get a string value from the buffer.")] 
		HRESULT String([out] BSTR* pbstr);
		[restricted, propget, helpstring("Get an unsigned short value from the buffer.")] 
		HRESULT UShort([out] unsigned short* pusval);
		[restricted, propget, helpstring("Get a short value from the buffer.")] 
		HRESULT Short([out] short* psval);
		[restricted, propget, helpstring("Get a float value from the buffer.")] 
		HRESULT Float([out] float* pfval);
		[restricted, propget, helpstring("Get a double value from the buffer.")] 
		HRESULT Double([out] double* pdval);
		[restricted, propget, helpstring("Get an unsigned integer value from the buffer.")] 
		HRESULT UInt([out] unsigned int* puival);
		[restricted, propget, helpstring("Get an integer value from the buffer.")] 
		HRESULT Int([out] int* pival);
		[restricted, propget, helpstring("Get an unsigned long value from the buffer.")] 
		HRESULT ULong([out] unsigned long* pulval);
		[restricted, propget, helpstring("Get a long value from the buffer.")] 
		HRESULT Long([out] long* plval);
		[restricted, propget, helpstring("Retrieves a BLOB (unknown value) from the buffer")] 
		HRESULT BLOB([out] BSTR* pblobval);

		[helpstring("Copy data from the buffer into the specified allocated location.")] 
		HRESULT CopyTo([in] unsigned char* pbytes, [in] DWORD lval);

		[helpstring("Read the buffer from disk.")] 
		HRESULT ReadFromDisk([in] BSTR strFilename);

		[helpstring("Attach to existing buffer (the buffer will point to the specified memory block), must take responsibility for freeing data.")] 
		HRESULT Attach([in] unsigned char* pbytes, [in] DWORD lval);

		[propget, helpstring("Get length of data in buffer.")] 
		HRESULT Length([in] DWORD* lval);

		[helpstring("Rewind to beginning of buffer for reading.")] 
		HRESULT SeekToBegin();

		[helpstring("Rewind to beginning + set file length to zero.")] 
		HRESULT Rewind();
	};

	[
		object,
		uuid(590D9832-A417-11CF-9BF0-0080C7A56A8A),
		dual,
		local,
		helpstring("IMarshallBuffer Interface"),
		pointer_default(unique)
	]
	interface IMarshallBuffer : IDispatch
	{
		[restricted, propput, helpstring("CLSID's may be marshaled to define custom objects.")] 
		HRESULT ClassID([in] REFCLSID clsid);
		[restricted, propput, helpstring("Put a byte into the buffer.")] 
		HRESULT Byte([in] unsigned char bval);
		[restricted, propput, helpstring("Put several bytes into the buffer.")] 
		HRESULT Bytes([in] unsigned char* pbytes, [in] long lval);
		[restricted, propput, helpstring("Put a boolean value into the buffer.")] 
		HRESULT Boolean([in] VARIANT_BOOL boolval);
		[restricted, propput, helpstring("Put a string value into the buffer.")] 
		HRESULT String([in] BSTR bstr, [in, optional, defaultvalue(-1)] VARIANT_BOOL bCompress);
		[restricted, propput, helpstring("Put a float value into the buffer.")] 
		HRESULT Float([in] float fval);
		[restricted, propput, helpstring("Put a double value into the buffer.")] 
		HRESULT Double([in] double dval);
		[restricted, propput, helpstring("Put an unsigned short value into the buffer.")] 
		HRESULT UShort([in] unsigned short usval);
		[restricted, propput, helpstring("Put a short value into the buffer.")] 
		HRESULT Short([in] short sval);
		[restricted, propput, helpstring("Put an unsigned integer value into the buffer.")] 
		HRESULT UInt([in] unsigned int uival);
		[restricted, propput, helpstring("Put an integer value into the buffer.")] 
		HRESULT Int([in] int ival);
		[restricted, propput, helpstring("Put an unsigned long value into the buffer.")] 
		HRESULT ULong([in] unsigned long ulval);
		[restricted, propput, helpstring("Put a long value into the buffer.")] 
		HRESULT Long([in] long lval);
		[restricted, propput, helpstring("Puts a BLOB into the buffer")] 
		HRESULT BLOB([in] BSTR blobval);

		[helpstring("Rewind to beginning of buffer for writing.")] 
		HRESULT SeekToBegin();

		[helpstring("Rewind to beginning + set file length to zero.")] 
		HRESULT Rewind();

		[helpstring("Read data from marshall buffer")] 
		HRESULT CopyFrom([in] unsigned char* pbytes, [in] DWORD lval);

		[helpstring("Detach buffer (get a pointer to the memory block being used by the buffer), must take responsibility for freeing data")] 
		HRESULT Detach([out] unsigned char** ppbytes, [out] DWORD* plval);

		[propget, helpstring("Get length of data in buffer")] 
		HRESULT Length([in] DWORD* lval);

		[helpstring("Write the buffer to disk.")] 
		HRESULT WriteToDisk([in] BSTR strFilename);

	};

#ifdef VWBUFFERLIB
[
	uuid(590D9831-A417-11CF-9BF0-0080C7A56A8A),
	version(1.0),
	helpstring("vwbuffer 1.0 Type Library")
]
library VWBUFFERLib
{
	importlib("stdole32.tlb");

	[
		uuid(590D9833-A417-11CF-9BF0-0080C7A56A8A),
		helpstring("MarshallBuffer Object")
	]
	coclass MarshallBuffer
	{
		[default] interface IMarshallBuffer;
	};

	[
		uuid(590D9835-A417-11CF-9BF0-0080C7A56A8A),
		helpstring("UnMarshallBuffer Object")
	]
	coclass UnMarshallBuffer
	{
		[default] interface IUnMarshallBuffer;
	};
};
#endif
