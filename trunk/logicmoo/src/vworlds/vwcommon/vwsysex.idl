// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// vwsysex.idl : IDL source 
//

// This file will be processed by the MIDL tool to
// produce the type library (vwsystem.tlb) and marshalling code.

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  We start our codes at:
// For portals:		0xc00	(3072)
// For avatars:		0xc10	(3088)
// For hosts:		0xc20	(3104)
// For things:		0xc30	(3120)
// For artifacts:	0xc40	(3136)
// For iwportals:	0xc50	(3152)
// For systemex:	0xc60	(3168)
// For rooms:		0xc70	(3184)
// For statemch:	0xc80	(3200)
// For WebPages:	0xc90	(3216)

// Portal
cpp_quote("#define VWPORTAL_E_NOTAVALIDINDEX			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c00)")
cpp_quote("#define VWPORTAL_E_NODESTINATIONS			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c01)")
cpp_quote("#define VWPORTAL_E_INVALIDDESTINATION		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c02)")
cpp_quote("#define VWPORTAL_E_UNKNOWN					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c03)")


// Avatar
cpp_quote("#define VWAVATAR_E_NODEFAULTROOMORPORTAL		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c10)")
cpp_quote("#define VWAVATAR_E_NOPROFILE					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c11)")
cpp_quote("#define VWAVATAR_E_WHISPERNOTALLOWED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c12)")

// Host
cpp_quote("#define VWHOST_E_NOTAHOST					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c20)")
cpp_quote("#define VWHOST_E_CANTLOGOFFWIZARD			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c21)")

// Thing
cpp_quote("#define VWTHING_E_MOVEINTOPOLICYDENIED		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c30)")
cpp_quote("#define VWTHING_E_ACCEPTLEAVEDENIED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c31)")
cpp_quote("#define VWTHING_E_ALLOWLEAVEDENIED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c32)")
cpp_quote("#define VWTHING_E_ACCEPTENTERDENIED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c33)")
cpp_quote("#define VWTHING_E_ALLOWENTERDENIED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c34)")
cpp_quote("#define VWTHING_E_TAKENOTINCONTAINER			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c35)")
cpp_quote("#define VWTHING_E_DROPNOTINCONTENTS			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c36)")
cpp_quote("#define VWTHING_E_TAKEPERMISSIONDENIED		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c37)")
cpp_quote("#define VWTHING_E_UNKNOWN					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c38)")
cpp_quote("#define VWTHING_E_NOSECURITYONSERVER			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c39)")
cpp_quote("#define VWTHING_E_NOSECURITYFORUNKNOWNUSER	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c3a)")
cpp_quote("#define VWTHING_E_NOTACLIENTPROPERTY			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c3b)")

// IWPortal
cpp_quote("#define VWIWPORTAL_E_NODESTINATION			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c50)")
cpp_quote("#define VWIWPORTAL_E_INVALIDDESTINATION		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c51)")
cpp_quote("#define VWIWPORTAL_E_RECONNECTFAILED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c52)")


// SystemEx
cpp_quote("#define VWCORE_E_FILEUPLOADERROR				MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c60)")
cpp_quote("#define VWCORE_E_NOTAWIZARD					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c61)")
cpp_quote("#define VWCORE_E_NOTANAVATAR					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c62)")
cpp_quote("#define VWCORE_E_NOTAHOST					MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0c63)")


	import "oaidl.idl";
	import "ocidl.idl";

	import "vwobject.idl";

	// built-in properties
	import "menuitem.idl";
	import "ocxproxy.idl";

	[
		object,
		uuid(717B5A86-7267-11d1-959F-00C04FD91F4D),
		dual,
		helpstring("SystemExemplar Interface"),
		pointer_default(unique)
	]
	interface ISystemExemplar : IVWDispatch
	{
		[helpstring("")] 
		HRESULT CreatePropertyList([in, optional] VARIANT varInitialValue, [in, optional] VARIANT varOrphan, [out, retval] IPropertyList** pppropertylist);
		[helpstring("")] 
		HRESULT CreatePropertyMap([in, optional] VARIANT varOrphan, [out, retval] IPropertyMap** pppropertymap);

		[helpstring("")] 
		HRESULT CreateMenu([out, retval] IPropertyList **ppMenu);
		[helpstring("")] 
		HRESULT CreateMenuItem([in] BSTR bstrMenuText, [in] long lFlags, [in] IThing *pOwner, [in] BSTR bstrUpdateMethod, [in] BSTR bstrMethod, [in, optional] VARIANT var, [out, retval] IMenuItem **ppMenuItem);
		[helpstring("")] 
		HRESULT CreateMenuSeparator([in] IThing* pOwner, [out, retval] IMenuItem **ppMenuItem);

		[helpstring("")] 
		HRESULT CreateOCXProxy([in] IDispatch* pOCX, [out, retval] IOCXProxy **ppOCXProxy);

		[helpstring("returns a list of the names every avatar.")] 
		HRESULT QueryAvatarNames([in] long lFalgs, [out, retval] IPropertyList **pNameList);

		[helpstring("Invokes a client-side method on a particular avatar.")] 
		HRESULT InvokeRemoteClientMethod([in] IThing *pDispTarget, [in] BSTR bstrMethodName, [in] VARIANT varUserOrList, [in] VARIANT varParams);
		[helpstring("Handles a client-side method on a particular avatar.")] 
		HRESULT HandleRemoteClientMethod([in] IThing *pDispTarget, [in] BSTR bstrMethodName, [in] VARIANT varUserOrList, [in] VARIANT varParams);
		[helpstring("Fires a UI event (needed since UI event is on the world).")] 
		HRESULT FireUIEvent([in] IPropertyList *pClientList, [in] IThing *pSource, [in] BSTR bstrMethodName, [in] VARIANT varParams);
		[helpstring("Fires a UI event on another client")] 
		HRESULT FireRemoteUIEvent([in] VARIANT varClientList, [in] IThing *pSource, [in] BSTR bstrMethodName, [in] VARIANT varParams);

		[hidden, helpstring("")] 
		HRESULT OnRootURLChanged([in] long lHint, [in] VARIANT varHintData);
		[helpstring("method UploadFile")]
		HRESULT UploadFile([in] BSTR bstrLocalName, [in] BSTR bstrRemoteName, [out, retval] BSTR *pbstrURL);
		
		[helpstring("Method to make an avatar a host")]
		HRESULT MakeHost([in] IThing* pTarget);
		[helpstring("Method to revoke host privileges")]
		HRESULT UnMakeHost([in] IThing* pTarget);

		[helpstring("Creates a timer which repeatedly calls a method on a thing at a specified period.")]
		HRESULT CreateTimer([in] int msecPeriod, [in] IThing *pThing, [in] BSTR bstrMethod, [in, optional] VARIANT varArgs, [out, retval] IDispatch **ppTimer);
		[helpstring("Destroys a timer previously created with CreateTimer.")]
		HRESULT DestroyTimer([in] IDispatch *pTimer);

		[hidden, helpstring("OnCreateRoomClient")] 
		HRESULT OnCreateRoomClient([in] IThing *pThing);
		[hidden, helpstring("Fires UI event OnShowWelcome to display a welcome HTML page")] 
		HRESULT ShowWelcomeMessage();
	
		// Security methods called when global properties are accessed
		[hidden, helpstring("Security access method to check if user is world owner")]
		HRESULT OnWorldOwnerAccess([in] long lPerms, [out, retval] VARIANT_BOOL *bReturnValue);
		[hidden, helpstring("Security access method - returns false since GlobalConstants cannot be changed")]
		HRESULT OnGlobalConstantAccess([in] long lPerms, [out, retval] VARIANT_BOOL *bReturnValue);

		// utility methods (marked hidden)
		[hidden, helpstring("Internal method to trace out exemplar names, properties, and methods")]
		HRESULT TraceExemplarInfo();

		// perf testing
		[hidden, helpstring("")]
		HRESULT TimeGetProperty([in] IThing* pthing, [in] BSTR bstrPropertyName, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimePutProperty([in] IThing* pthing, [in] BSTR bstrPropertyName, [in] VARIANT varData, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeInvokeMethod([in] IThing* pthing, [in] BSTR bstrMethodName, [in] VARIANT varArgs, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeGetMethod([in] IThing* pthing, [in] BSTR bstrMethodName, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeGetPropertySecurity([in] IThing* pthing, [in] BSTR bstrPropertyName, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckPropertySecurity([in] IThing* pthing, [in] BSTR bstrPropertyName, [in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckMethodSecurity([in] IThing* pthing, [in] BSTR bstrMethodName, [in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckPropertiesSecurity([in] IThing* pthing, [in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckMethodsSecurity([in] IThing* pthing, [in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeVTableInvokeMethod([in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeAutomationInvokeMethod([in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeScriptInvokeMethod([in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeInterfaceInvokeMethod([in] IThing* pthing, [in] BSTR bstrMethodName, [in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeNotifyInvokeMethod([in] IThing* pthing, [in] BSTR bstrMethodName, [in] DISPPARAMS* pdispparams, [in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeNotifyPropertyChanged([in] IThing* pthing, [in] BSTR bstrPropertyName, [in] long lHint, [in] VARIANT varHintData, [in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeSendThingCommand([in] long lFlags, [in] IThing* pthing, [in] DISPID dispid, [in] WORD wFlags, [in] DISPPARAMS* pdispparams, [in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeSendObjectPropertyCommand([in] long lFlags, [in] IObjectProperty* pprop, [in] DISPID dispid, [in] WORD wFlags, [in] DISPPARAMS* pdispparams, [in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeSendWorldCommand([in] DISPID dispid, [in] WORD wFlags, [in] DISPPARAMS* pdispparams, [in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeProcessMessage([in] unsigned char ch, [in] IUnMarshallBuffer* pUbuffer, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCloneProperty([in] VARIANT varData, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCopyProperty([in] VARIANT varData, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimePutPropertySecurity([in] IPropertySecurity* pSecurity, [in] VARIANT varData, [in] long lRepeat, [out, retval] long* plElapsed);

		[hidden, helpstring("")]
		HRESULT TimeGetPropertyAll([in] VARIANT varData, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimePutPropertyAll([in] VARIANT varData, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeInvokeMethodAll([in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeGetMethodAll([in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeGetPropertySecurityAll([in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckPropertySecurityAll([in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckMethodSecurityAll([in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckPropertiesSecurityAll([in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeCheckMethodsSecurityAll([in] unsigned long ulFlags, [in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeNotifyAll([in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeSendCommandAll([in] long lRepeat, [out, retval] long* plElapsed);
		[restricted, helpstring("")]
		HRESULT TimeProcessMessageAll([in] long lRepeat, [out, retval] long* plElapsed);
		[hidden, helpstring("")]
		HRESULT TimeAll([in] long lRepeat, [out, retval] long* plElapsed);

		[hidden, helpstring("")] 
		HRESULT YYY();
		[hidden, helpstring("")] 
		HRESULT OnXXXChanged([in] long lHint, [in] VARIANT varHintData);
		[hidden, helpstring("")]
		HRESULT OnXXXAccess([in] long lPerms, [out, retval] VARIANT_BOOL *bReturnValue);
	};

	typedef 
	[
		uuid(44F75556-8E02-11d1-BB42-00C04FC2CAB1),
		helpstring("Flags for QueryAvatarNames")
	]
	enum QueryAvatarNamesFlags
	{
		[helpstring("return all avatars")] 
		qanFlagAll			= 0,	
		[helpstring("return connected avatars")] 
		qanFlagConnected	= 1,	
		[helpstring("return avatars I am not ignoring")] 
		qanFlagIgnored		= 2,	
		[helpstring("return avatars who are not ignoring me")] 
		qanFlagIgnoring		= 4,	
		[helpstring("return avatars who are my friend")] 
		qanFlagFriend		= 8,	
	} QueryAvatarNamesFlags;

// ***************************************************************
// THING

	[
		object,
		uuid(99AD3618-AAB5-11D0-BAE3-00C04FC2CAB1),
		dual,
		helpstring("Thing Exemplar Interface"),
		pointer_default(unique)
	]
	interface IThingExemplar : IVWDispatch
	{
		[helpstring("Report event handler.")] 
		HRESULT Report([in] BSTR bstrReport);
		[helpstring("Announce event handler.")] 
		HRESULT Announce([in] BSTR bstrAnnounce);

		[hidden, helpstring("method OnSystemDestroyClient")]
		HRESULT OnSystemDestroyClient([in] IThing *pthing);
		[hidden, helpstring("OnContentSystemEnter - ")] 
		HRESULT OnContentSystemEnter([in] IThing *pWhere, [in] IThing *pWhat);
		[hidden, helpstring("OnContentSystemLeave")] 
		HRESULT OnContentSystemLeave([in] IThing *pOldWhere, [in] IThing *pWhat);

		[helpstring("Handles \"Look at\" menu item")]
		HRESULT LookAt();
		[helpstring("Get list of relevant menu items")]
		HRESULT GetMenuList([out, retval] IPropertyList **pplistMenu);
		[helpstring("Get menu items")] 
		HRESULT GetMenuItems([in] IThing *pTarget, [out, retval] IPropertyList **ppMenuList);
		[helpstring("Get menu items from peer")] 
		HRESULT GetPeerMenuItems([in] IThing *pTarget, [out, retval] IPropertyList **ppMenuList);
		[helpstring("Get menu items from container")] 
		HRESULT GetContainerMenuItems([in] IThing *pTarget, [out, retval] IPropertyList **ppMenuList);
		[helpstring("Get menu items from contents")] 
		HRESULT GetContentMenuItems([in] IThing *pTarget, [out, retval] IPropertyList **ppMenuList);
		[helpstring("Get menu items from self")] 
		HRESULT GetSelfMenuItems([in] IThing *pTarget, [out, retval] IPropertyList **ppMenuList);
		[helpstring("Get menu items from inventory")] 
		HRESULT GetInventoryMenuItems([in] IThing *pTarget, [out, retval] IPropertyList **ppMenuList);
		[helpstring("Get edit menu items")] 
		HRESULT GetEditMenuItems([in] IThing *pTarget, [out, retval] IPropertyList **ppMenuList);
		[helpstring("Get menu items from a property")] 
		HRESULT GetMenuItemsFromProperty([in] BSTR bstrMenuListProperty, [out, retval] IPropertyList **ppMenuList);

		[helpstring("Handled updating of items intended only for Artifacts")]
		HRESULT UpdateIsArtifact([in] IMenuItem *pmi);
		[helpstring("Handled updating of menu items intended only for Avatars")]
		HRESULT UpdateIsAvatar([in] IMenuItem *pmi);
		[helpstring("Handled updating of menu items intended for Avatars but not Wizards - LogOff")]
		HRESULT UpdateIsAvatarAndNotWizard([in] IMenuItem *pmi);
		[helpstring("Handled updating of menu items intended only for Artifacts & Avatars")]
		HRESULT UpdateIsArtifactOrAvatar([in] IMenuItem *pmi);
		[helpstring("Handles updating of menu items that can be taken (not avatars and not anchored)")]
		HRESULT UpdateIsTakeable([in] IMenuItem *pmi);
		[helpstring("Handled updating of properties... in menu")]
		HRESULT UpdatePropertiesMenuItem([in] IMenuItem *pmi);
		[helpstring("Handled updating of name in menu")]
		HRESULT UpdateMenuItemName([in] IMenuItem *pmi);
		[helpstring("Handles updating of property list sub-menu item")]
		HRESULT UpdatePropertyListMenu([in] IMenuItem *pmi, [in] IPropertyList *pList);
		[helpstring("Handles updating of user inventory sub-menu item")]
		HRESULT UpdateInventoryMenu([in] IMenuItem *pmi);
		[helpstring("Handles updating of thing contents sub-menu item")]
		HRESULT UpdateContentsMenu([in] IMenuItem *pmi);
		[helpstring("Handles updating of room avatars sub-menu item")]
		HRESULT UpdateRoomAvatarsMenu([in] IMenuItem *pmi);
		[helpstring("Set the gesture for objects with sprited geometries.")]
		
		HRESULT DoGesture([in] int iGesture);
		[helpstring("Invoke a Gesture by name")] 
		HRESULT DoNamedGesture([in] BSTR bstrGestureName);
		[helpstring("Set the gesture for objects with sprited geometries - server side.")]
		HRESULT DoGestureServer([in] IThing *pThingOriginator, [in] int iGesture);
		[helpstring("Set the gesture for objects with sprited geometries - client side.")]
		HRESULT DoGestureClient([in] IThing *pThingOriginator, [in] int iGesture);
	
	
		[helpstring("method AllowEnter called on new container")] 
		HRESULT AllowEnter([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);
		[helpstring("method AllowLeave called on current container")] 
		HRESULT AllowLeave([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);
		[helpstring("method AcceptEnter called on item")] 
		HRESULT AcceptEnter([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);
		[helpstring("method -AcceptLeave called on item leaving a container")] 
		HRESULT AcceptLeave([out, retval] VARIANT_BOOL *pbool);

		[helpstring("method Clone")] 
		HRESULT Clone([out, retval] IThing **ppNewThing);
//		[helpstring("method Destroy")] 
//		HRESULT Destroy();
		[helpstring("method Emote")] 
		HRESULT Emote([in] VARIANT varGesture, [in, optional] VARIANT varText);
		[helpstring("method GestureText")] 
		HRESULT GestureText([in] BSTR bstrGesture, [out, retval] BSTR *pbstrText);
		[helpstring("method MoveInto")] 
		HRESULT MoveInto([in] IThing *pNewContainer);
		[helpstring("method Say")] 
		HRESULT Say([in] BSTR strText, [in, optional] VARIANT userOrList);
		[helpstring("method Shout")] 
		HRESULT Shout([in] BSTR strText);
		[helpstring("method SayGesture")] 
		HRESULT SayGesture([in] BSTR strText);
		[helpstring("method Whisper")] 
		HRESULT Whisper([in] BSTR strText, [in, optional] VARIANT userOrList);
		[helpstring("method Take NYI")] 
		HRESULT Take([in] IThing *pThing);
		[helpstring("method Drop NYI")] 
		HRESULT Drop([in] IThing *pThing);

		[helpstring("Make sure all new bystanders have object")] 
		HRESULT OnIsOpenChanged([in] long lHint, [in] VARIANT varHintData);

		[helpstring("method EditObject")]
		HRESULT EditObject();
		[helpstring("method GetEditTabMap")]
		HRESULT GetEditTabMap([out, retval] IPropertyList **pMap);
		[helpstring("method GetSortedEditTabMap")]
		HRESULT GetSortedEditTabMap([out, retval] IPropertyList **pMap);
		[helpstring("")]
		
		HRESULT AddClientProperty([in] BSTR bstrName, [in, optional] VARIANT var);
		[helpstring("")] 
		HRESULT RemoveClientProperty([in] BSTR bstrName);
	
		// Accessor methods for checking security policy
		[helpstring("Method to check policy on IsNoticeable access")]
		HRESULT OnIsNoticeableAccess([in] long lPerms, [out, retval] VARIANT_BOOL *bReturnValue);
		[helpstring("Method to check policy on Name access")]
		HRESULT OnNameAccess([in] long lPerms, [out, retval] VARIANT_BOOL *bReturnValue);
		[helpstring("Method to check policy on properties that can only be accessed by an object owner or a wizard")]
		HRESULT OnOwnerOrWizardAccess([in] long lPerms, [out, retval] VARIANT_BOOL *bReturnValue);

	};


// ***************************************************************
// ARTIFACT

	[
		object,
		uuid(99AD361C-AAB5-11D0-BAE3-00C04FC2CAB1),
		dual,
		helpstring("Artifact Exemplar Interface"),
		pointer_default(unique)
	]
	interface IArtifactExemplar : IVWDispatch
	{
		[helpstring("Handles Wield")]
		HRESULT WieldItem();
		[hidden, helpstring("Handles updating of Wield MenuItem")]
		HRESULT UpdateWield([in] IMenuItem *pmi);
		[helpstring("Handles UnWield")]
		HRESULT UnWieldItem();
		[hidden, helpstring("Handles updating of UnWield MenuItem")]
		HRESULT UpdateUnWield([in] IMenuItem *pmi);
		[helpstring("method -AcceptLeave")] 
		HRESULT AcceptLeave([out, retval] VARIANT_BOOL *pbool);
		[helpstring("method AcceptEnter")] 
		HRESULT AcceptEnter([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);
	};


// ***************************************************************
// AVATAR

	[
		object,
		uuid(99AD361E-AAB5-11D0-BAE3-00C04FC2CAB1),
		dual,
		helpstring("Avatar Exemplar Interface"),
		pointer_default(unique)
	]
	interface IAvatarExemplar : IVWDispatch
	{
		[helpstring("Invoke a Gesture by name")] 
		HRESULT DoNamedGesture([in] BSTR bstrGestureName);
		[helpstring("method GestureText")] 
		HRESULT GestureText([in] BSTR bstrGesture, [out, retval] BSTR *pbstrText);
		[helpstring("Handles \"Look at\" menu item for avatar")]
		HRESULT LookAt();
		[helpstring("Brings up whisper window")]
		HRESULT WhisperTo();

		[helpstring("Handles updating of a User Profile List MenuItem")]
		HRESULT UpdateUserProfileList([in] IMenuItem *pmi);
		[helpstring("method for toggling User Profile List")] 
		HRESULT MenuUserProfileList([in] BSTR bstrKey);
		[helpstring("method AddToUserProfileList.")] 
		HRESULT AddToUserProfileList([in] IThing *pThing, [in] BSTR bstrKey);
		[helpstring("method RemoveFromUserProfileList.")] 
		HRESULT RemoveFromUserProfileList([in] IThing *pThing, [in] BSTR bstrKey);
		[helpstring("method IsInUserProfileList.")] 
		HRESULT IsInUserProfileList([in] IThing *pThing, [in] BSTR bstrKey, [out, retval] VARIANT_BOOL *pBool);

		[helpstring("Handled updating of name in menu: AvatarName's profile")]
		HRESULT UpdateMenuItemName([in] IMenuItem *pmi);
		[helpstring("Handles updating of Whisper menu item, don't display if room doesn't AllowWhispers")]
		HRESULT UpdateWhisperMenuItem([in] IMenuItem *pmi);
		[helpstring("Brings up the avatar's profile for editing.")] 
		
		HRESULT EditProfile();
		[helpstring("method Gesture")] 
		HRESULT Gesture([in] BSTR strGestureName);
		[helpstring("method Wield")] 
		HRESULT Wield([in] IThing *pThing);
		[helpstring("method UnWield")] 
		HRESULT UnWield();
		[helpstring("Teleport: transports avatar to another room")]
		HRESULT Teleport([in] IThing *pNewRoom);

//		[helpstring("method RetrieveOwnedObject")] 
//		HRESULT RetrieveOwnedObject([in] IThing *pThing);

        [helpstring("method Query")]
		HRESULT Query([in] BSTR bstrTitle, [in] BSTR bstrHTML,
					  [in] BSTR bstrPrompt, [in] BSTR bstrDefault,
					  [in, optional, defaultvalue(NULL)] VARIANT varNotifyObject,
					  [in, optional, defaultvalue("")] VARIANT varNotifyMethod,
					  [in, optional, defaultvalue(NULL)] VARIANT varNotifyParam);
        [helpstring("method Alert")]
		HRESULT Alert([in] BSTR bstrTitle, [in] BSTR bstrText, 
					  [in, optional, defaultvalue(NULL)] VARIANT varNotifyObject,
					  [in, optional, defaultvalue("")] VARIANT varNotifyMethod,
					  [in, optional, defaultvalue(NULL)] VARIANT varNotifyParam);
        [helpstring("method Confirm")]
		HRESULT Confirm([in] BSTR bstrTitle, [in] BSTR bstrText, 
					    [in, optional, defaultvalue(NULL)] VARIANT varNotifyObject,
					    [in, optional, defaultvalue("")] VARIANT varNotifyMethod,
					    [in, optional, defaultvalue(NULL)] VARIANT varNotifyParam);
        [helpstring("method Prompt")]
		HRESULT Prompt([in] BSTR bstrTitle, [in] BSTR bstrPrompt, [in] BSTR bstrDefault,
					   [in, optional, defaultvalue(NULL)] VARIANT varNotifyObject,
					   [in, optional, defaultvalue("")] VARIANT varNotifyMethod,
					   [in, optional, defaultvalue(NULL)] VARIANT varNotifyParam);
        [helpstring("method ClientQuery")]
		HRESULT ClientQuery([in] BSTR bstrTitle, [in] BSTR bstrHTML,
							[in] BSTR bstrPrompt, [in] BSTR bstrDefault,
							[in] IThing *pNotifyObject, [in] BSTR bstrNotifyMethod,
							[in] IDispatch *pNotifyParam);
        [helpstring("method QueryReturn")]
		HRESULT QueryReturn([in] IPropertyList *pArg, [in] VARIANT_BOOL boolOK,
							[in] BSTR bstrResult);
		[hidden, helpstring("method OnSystemCreate")]
		HRESULT OnSystemCreate([in] IThing *pthing);
		[hidden, helpstring("method OnSystemConnect: handles when avatar first connects to a world")]
		HRESULT OnSystemConnect([in] IThing * pWho);
		[hidden, helpstring("method OnSystemDisconnect: fires UI event when avatar leaves world")]
		HRESULT OnSystemDisconnect([in] IThing * pWho);

		[helpstring("returns the local path (if any) of the thumbnail of the avatar")]
		HRESULT ThumbnailFileName([out, retval] BSTR *pbstrFileName);
	
		[hidden, helpstring("OnContainerSystemTell event handler.")] 
		HRESULT OnContainerSystemTell([in] IThing* pfrom, [in] IPropertyList* pToList, [in] BSTR bstrSay, [in] long lval, [out, retval] BSTR *pbstrOut);
		[hidden, helpstring("OnSystemTell event handler.")] 
		HRESULT OnSystemTell([in] IThing* pfrom, [in] IPropertyList* pToList, [in] BSTR bstrSay, [in] long lval, [out, retval] BSTR *pbstrOut);
		[hidden, helpstring("OnPeerSystemTell event handler.")] 
		HRESULT OnPeerSystemTell([in] IThing* pfrom, [in] IPropertyList* pToList, [in] BSTR bstrSay, [in] long lval);

		[hidden, helpstring("Determines whether object can create another")]
		HRESULT OnSystemPreCreate([in] IThing *pExemplar, [out, retval] VARIANT_BOOL *pbOkToCreate);
		[hidden, helpstring("Called after an owned object is created")]
		HRESULT OnSystemPostCreate([in] IThing *pThing);
		[hidden, helpstring("Determines whether an owned object can be destroyed")]
		HRESULT OnSystemPreDestroy([in] IThing *pthing, [out, retval] VARIANT_BOOL *pbOkToDestroy);
		[hidden, helpstring("Called after an object object is destroyed")]
		HRESULT OnSystemPostDestroy([in] IThing *pthing);

		[helpstring("")]
		HRESULT SetObjectQuota([in] long lQuota);
		[helpstring("")]
		HRESULT AddDefaultKeys(); 
		[helpstring("")]
		HRESULT OnAction([in] BSTR bstrAction, [in] BSTR bstrDescription, [in] IPropertyList *pParticipants);

		[hidden, helpstring("Method to fire UI event when IsAuthor is changed - displays UI appropriately")]
		HRESULT OnIsAuthorChanged([in] long lHint, [in] VARIANT varHintData);

		// Security methods called when avatar properties are accessed
		[hidden, helpstring("Access method - only wizards can set IsWizard")]
		HRESULT OnIsWizardOrIsAuthorAccess([in] long lPerms, [out, retval] VARIANT_BOOL* bReturnValue);
		[hidden, helpstring("Access method - only wizards can properties such as an avatar's ObjectQuota")]
		HRESULT OnWizardAccess([in] long lPerms, [out, retval] VARIANT_BOOL* bReturnValue);

		[hidden, helpstring("Helper method used on server to delay firing of connect event until clients ready.")]
		HRESULT FireConnectAvatar([in] IThing *pthing);
	};

// ***************************************************************
// HOST


	[
		object,
		uuid(44001330-1B82-11d2-AC71-00104B26A373),
		dual,
		helpstring("Host Exemplar Interface"),
		pointer_default(unique)
	]
	interface IHostExemplar : IVWDispatch
	{
		[helpstring("Show LogOff dialog")] 
		HRESULT ShowLogOffDialog([in] IThing *pTarget);
		[helpstring("Log off a user")] 
		HRESULT LogOff([in] IThing *pTarget, [in] BSTR bstrReason);
	
	};

// ***************************************************************
// PORTAL

	[
		object,
		uuid(99AD3624-AAB5-11D0-BAE3-00C04FC2CAB1),
		dual,
		helpstring("Portal Exemplar Interface"),
		pointer_default(unique)
	]
	interface IPortalExemplar : IVWDispatch
	{
		[helpstring("method TransportDialog that shows appropriate URL")] 
		HRESULT ShowTransportDialog();
		[helpstring("method TransportMenu that takes user directly through")] 
		HRESULT TransportMenu();
		[helpstring("Server-side method to transport something to ")] 
		HRESULT Transport([in] IThing *pThing, [in, optional, defaultvalue(0)] int iIndex);
		[helpstring("Server-side method called on destination portal to position transportee")] 
		HRESULT TransportTo([in] IThing *pThing);		
		
		[helpstring("method called to determine if source portal will allow a transport")] 	
		HRESULT AllowTransport([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);
		[helpstring("method called to determine if destination portal will accept a transport")] 	
		HRESULT AcceptTransport([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);	
				
		[helpstring("used to set the destination by ID instead of IThing")] 	
		HRESULT SetDestinationByID([in] long lNewID);		
	
	};

// ***************************************************************
// IWPORTAL 

	[
		object,
		uuid(FFA01B4F-9F4C-11d1-80E8-00C04FC2A129),
		dual,
		helpstring("InterWorldPortal Exemplar Interface"),
		pointer_default(unique)
	]
	interface IIWPortalExemplar : IVWDispatch
	{
//		[helpstring("method TransportMenu that shows appropriate URL")] 
//		HRESULT TransportMenu();
		[helpstring("server-side Transport for primary/secondary destination worlds, overwrites portal method")] 
		HRESULT Transport([in] IThing *pThing, [in, optional, defaultvalue(0)] int iIndex);

	};					
	
// ***************************************************************
// ROOM

	[
		object,
		uuid(99AD3626-AAB5-11D0-BAE3-00C04FC2CAB1),
		dual,
		helpstring("Room Exemplar Interface"),
		pointer_default(unique)
	]
	interface IRoomExemplar : IVWDispatch
	{
		[helpstring("method Expel")] 
		HRESULT Expel([in] IThing *pThing, [in] IThing *pDoor, [out, retval] VARIANT_BOOL *pBool);

		[helpstring("method TransmitWhisper")] 
		HRESULT TransmitWhisper([in] BSTR bstrMsg, [in] VARIANT varNameList);
		[helpstring("method ReceiveWhisper")] 
		HRESULT ReceiveWhisper([in] BSTR bstrMsg, [in] IPropertyList *pTargetList);

		[helpstring("AllowEnter called from MoveInto")] 
		HRESULT AllowEnter([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);
		[helpstring("AllowLeave called from MoveInto")] 
		HRESULT AllowLeave([in] IThing *pThing, [out, retval] VARIANT_BOOL *pbool);

		[hidden, helpstring("method OnSystemCreate event handler.")] 
		HRESULT OnSystemCreate([in] IThing *pThing);
		[hidden, helpstring("method OnSystemDestroy event handler.")] 
		HRESULT OnSystemDestroy([in] IThing *pThing);

		[hidden, helpstring("ContentSystemConnect event handler.")] 
		HRESULT OnContentSystemConnect([in] IThing *pWho);
		[hidden, helpstring("ContentSystemDisconnect event handler.")] 
		HRESULT OnContentSystemDisconnect([in] IThing *pWho);

		[hidden, helpstring("OnContentSystemTell event handler.")] 
		HRESULT OnContentSystemTell([in] IThing* pfrom, [in] IPropertyList* pToList, [in] BSTR bstrSay, [in] long lval, [out, retval] BSTR *pbstrOut);

		[hidden, helpstring("OnContentEnter - ")] 
		HRESULT OnContentEnter([in] IThing *pWhere, [in] IThing *pWhat);
		[hidden, helpstring("OnContentLeave")] 
		HRESULT OnContentLeave([in] IThing *pOldWhere, [in] IThing *pWhat);
	};

	typedef 
	[
		uuid(0E240D82-113F-11d0-89A9-00A0C9054129),
		helpstring("")
	]
	enum TellConstant
	{
		[helpstring("")] tcSay = 0,	
		[helpstring("")] tcEmote = 1,	
		[helpstring("")] tcThink = 2,	
		[helpstring("")] tcWhisper = 3,	
		[helpstring("")] tcAnnounce = 4,
		[helpstring("")] tcGesture = 5,
		[helpstring("")] tcShout = 6,
		[helpstring("")] tcReport = 7,
		[helpstring("")] tcAction = 8,
	} TellConstant;

// ***************************************************************
// STATE MACHINE

	[
		object,
		uuid(69A2A200-F187-11d1-A392-0000F807558D),
		dual,
		helpstring("StateMachine Exemplar Interface"),
		pointer_default(unique)
	]
	interface IStateMachineExemplar : IVWDispatch
	{
		[helpstring("Adds a new state machine property")]
		HRESULT SMchAddStateMachine([in] BSTR bstrStateMachineName, [in] BSTR bstrInitialValue);
		[helpstring("Sets the default state machine's state")]
		HRESULT SMchSetState([in] BSTR bstrState);
		[helpstring("Sets the state machine's state")]
		HRESULT SMchSetStateMachineState([in] BSTR bstrStateMachineName, [in] BSTR bstrState);
		[helpstring("Returns true if the default state machine is in the state")]
		HRESULT SMchIsInState([in] BSTR bstrState,
								[out, retval] VARIANT_BOOL *pboolResult);
		[helpstring("Returns true if the state macine is in the state")]
		HRESULT SMchIsStateMachineInState([in] BSTR bstrStateMachineName, [in] BSTR bstrState,
								[out, retval] VARIANT_BOOL *pboolResult);
		[helpstring("Sets the state of the default state machine if it is currently in the state")]
		HRESULT SMchSetIfState([in] BSTR bstrOldState, [in] BSTR bstrNewState);
		[helpstring("Sets the state of the state machine if it is currently in the state")]
		HRESULT SMchSetStateMachineIfState([in] BSTR bstrStateMachineName, [in] BSTR bstrOldState,
								[in] BSTR bstrNewState);
		[hidden, helpstring("Get the state-specific name of a method")]
		HRESULT SMchGetStateConcatName([in] BSTR bstrStateMachineName, [in] BSTR bstrState,
										[in] BSTR bstrName, [out, retval] BSTR* pbstrOut);
		[hidden, helpstring("Get the state-specific name of a method for the current state")]
		HRESULT SMchGetCurrentStateConcatName([in] BSTR bstrStateMachineName, [in] BSTR bstrName,
												[out, retval] BSTR *pbstrOut);
		[helpstring("Get a state-specific property")]
		HRESULT SMchGetStateProperty([in] BSTR bstrStateMachineName, [in] BSTR bstrState,
									 [in] BSTR bstrPropertyName, [out, retval] VARIANT *var);
		[helpstring("Put a state-specific property for the default state machine")]
		HRESULT SMchPutStateProperty([in] BSTR bstrState,
								     [in] BSTR bstrPropertyName, [in] VARIANT var);
		[helpstring("Put a state-specific property for a state machine")]
		HRESULT SMchPutStateMachineStateProperty([in] BSTR bstrStateMachineName, [in] BSTR bstrState,
								     [in] BSTR bstrPropertyName, [in] VARIANT var);
		[helpstring("Put a state-specific inline method into the default state machine")]
		HRESULT SMchPutInlineStateMethod([in] long lFlags,
										 [in] BSTR bstrState,
										 [in] BSTR bstrMethodName, [in] BSTR bstrCode,
										 [in, optional, defaultvalue("")] VARIANT varParams);
		[helpstring("Put a state-specific inline method into a state machine")]
		HRESULT SMchPutStateMachineInlineStateMethod([in] long lFlags,
										 [in] BSTR bstrStateMachineName, [in] BSTR bstrState,
										 [in] BSTR bstrMethodName, [in] BSTR bstrCode,
										 [in, optional, defaultvalue("")] VARIANT varParams);
		[helpstring("Get the code for a state-specific inline method")]
		HRESULT SMchGetInlineStateMethod([in] BSTR bstrStateMachineName, [in] BSTR bstrState,
										 [in] BSTR bstrMethodName, [out, retval] BSTR* bstrCode);
		[helpstring("Add a state-specific module-based method")]
		HRESULT SMchAddStateMethod([in] long lFlags, [in] IModule *pModule,
								   [in] BSTR bstrModuleMethodName,
								   [in] BSTR bstrStateMachineName, [in] BSTR bstrState,
								   [in] BSTR bstrMethodName);
		[helpstring("Get the method flags for a state-specific method")]
		HRESULT SMchGetStateMethodFlags([in] BSTR bstrStateMachineName, [in] BSTR bstrState,
										[in] BSTR bstrMethodName, [out, retval] long *plFlags);
		[hidden, helpstring("Invokes the state-specific methods (if they exist) corresponding to the failed method invokation.")]
		HRESULT SMchOnInvokeMethodFailed([in] BSTR bstrMethodName, [in] IPropertyList *plistParams);
	};

// ***************************************************************
// WEB PAGE

	[
		object,
		uuid(63CA06F6-5CC2-11d2-82F0-00104B26A373),
		dual,
		helpstring("Web Page Exemplar Interface"),
		pointer_default(unique)
	]
	interface IWebPageExemplar : IVWDispatch
	{
	[helpstring("Shows the message in a separate window")]
	HRESULT Show();
	[hidden, helpstring("Handles left button up")]
	HRESULT OnLButtonUp([in] int hWnd, [in] int x, [in] int y,
					 [out, retval] VARIANT_BOOL *pbool);
	};
