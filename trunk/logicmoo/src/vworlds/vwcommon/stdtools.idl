// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// Tools1.idl : IDL source for Tools1.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (Tools1.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWErrorTool : Simple interface used by tools to report errors in a common fashion.
//
// IVWSelectTool : The select tool interface inherits from the IVWUITool interface and adds
// additional properties to control the kind of data to be returned regarding objects found
// (picked) underneath a specified point on the screen (usually underneath the mouse on a 
// mouse button event).
///////////////////////////////////////////////////////////////////////////////////////////////

	import "oaidl.idl";
	import "vwuiobjs.idl";

	[
		object,
		uuid(77B43661-792E-11d0-89AB-00A0C9054129),
		dual,
		helpstring("IVWErrorTool Interface"),
		pointer_default(unique)
	]
	interface IVWErrorTool : IDispatch
	{
		[helpstring("Print Error Message based on hr")] 
		HRESULT DisplayError([in] HRESULT hr, [out, retval] VARIANT_BOOL *pbHandled);
	};

	[
		object,
		uuid(3159FDB3-EF7F-11CF-89A9-00A0C9054129),
		dual,
		helpstring("IVWSelectTool Interface"),
		pointer_default(unique)
	]
	interface IVWSelectTool : IVWUITool
	{
		[propget, id(100), helpstring("If TRUE all objects found (picked) underneath a specified point on the screen will be returned (depth sorted).")]
		HRESULT DeluxeSelection([out, retval] VARIANT_BOOL *pVal);
		[propput, id(100), helpstring("If TRUE all objects found (picked) underneath a specified point on the screen will be returned (depth sorted).")]
		HRESULT DeluxeSelection([in] VARIANT_BOOL newVal);

		[propget, id(101), helpstring("If TRUE vertices found (picked) underneath a specified point on the screen will be returned.")]
		HRESULT VertexSelection([out, retval] VARIANT_BOOL *pVal);
		[propput, id(101), helpstring("If TRUE vertices found (picked) underneath a specified point on the screen will be returned.")]
		HRESULT VertexSelection([in] VARIANT_BOOL newVal);
	};


#ifdef TOOLS1LIB
[
	uuid(3159FDA0-EF7F-11CF-89A9-00A0C9054129),
	version(1.0),
	helpstring("Tools1 1.0 Type Library")
]
library TOOLS1Lib
{
	importlib("stdole32.tlb");

	[
		uuid(77B43660-792E-11d0-89AB-00A0C9054129),
		helpstring("VWErrorTool Class")
	]
	coclass VWErrorTool
	{
		[default] interface IVWErrorTool;
	};


	[
		uuid(3159FDB7-EF7F-11CF-89A9-00A0C9054129),
		helpstring("VWSelectTool Class")
	]
	coclass VWSelectTool
	{
		[default] interface IVWSelectTool;
	};

	[
		uuid(FF41E720-30B4-11d0-89A9-00A0C9054129),
		helpstring("UndoStack Class")
	]
	coclass VWUndoStacks
	{
		[default] interface IVWUndoStacks;
	};

	[
		uuid(FFF1E320-30B4-31d0-83A9-03A019044129),
		helpstring("ControlManager Class")
	]
	coclass VWControlManager
	{
		[default] interface IVWControlManager;
	};

	[
		uuid(B0CD7B7A-AD1E-11D0-888B-00C04FC32EF3),
		helpstring("UndoItem Class")
	]
	coclass VWUndoItem
	{
		[default] interface IVWUndoItem;
	};
};
#endif