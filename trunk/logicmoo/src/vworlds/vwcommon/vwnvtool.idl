// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// VWNvTool.idl : IDL source for VWNvTool.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (VWNvTool.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWNavigationTool : The navigation tool interface inherits from the IVWUITool interface and
// adds additional properties and methods to control navigation of a specified thing. Once
// the thing has been specified the Update method of the IVWUITool interface will be invoked
// regularly to update the position and orientation of the thing's geometry based on keyboard
// and mouse input. The thing's position and orientation will also be affected by boundaries
// intersected in the space, including a gravitational system triggered boundary heights.
///////////////////////////////////////////////////////////////////////////////////////////////

	import "vwuiobjs.idl";
	import "vwpktool.idl";
	import "vwrender.idl";

	cpp_quote("#define nPixelsOfStillArea 40 // zero movement radius around mouse anchor point")

typedef 
	[
		uuid(6CBA3205-3919-11d1-83C7-00C04FB6FA46),
		helpstring("")
	]
	enum KeyConstant
	{
		[helpstring("")] kbCamera = 0,
		[helpstring("")] kbGravity = 1,
		[helpstring("")] kbTiltUp	= 2,
		[helpstring("")] kbTiltDown = 3,
		[helpstring("")] kbZoomIn = 4,
		[helpstring("")] kbZoomOut = 5,
		[helpstring("")] kbReset = 6,
		[helpstring("")] kbRight = 7,
		[helpstring("")] kbNext = 8,
		[helpstring("")] kbPrior = 9,
		[helpstring("")] kbLeft = 10,
		[helpstring("")] kbHome = 11,
		[helpstring("")] kbEnd = 12,
		[helpstring("")] kbUp = 13,
		[helpstring("")] kbDown = 14,
		[helpstring("")] kbMax = 15,
	} KeyConstant;


	[
		object,
		uuid(60CE4B6D-FFF0-11CF-89A9-00A0C9054129),
		dual,
		helpstring("IVWNavigationTool Interface"),
		pointer_default(unique)
	]
	interface IVWNavigationTool : IVWUITool
	{
		import "oaidl.idl";
		[propput, helpstring("The thing to be navigated.")]
		HRESULT NavigationTarget([in] IThing *pThing);

		[helpstring("Set a pre-defined path for the thing to follow. These maps consist of time(in ms from now)/vector pairs.")]
		HRESULT SetNavigationPath([in] IPropertyMap *pmapPositions, [in] IPropertyMap *pmapDirections, [in] BSTR bstrDoneEvent);

		[propget, helpstring("Is the navigation target moving?")]
		HRESULT Moving([out, retval] VARIANT_BOOL *bMoving);

		[propput, helpstring("Invoked when camera has been placed in orthogonal mode so navigation can act accordingly.")]
		HRESULT OrthogonalMode([in] VARIANT_BOOL newVal);

		[propput, helpstring("Invoked when camera has been placed in top orthogonal mode so navigation can act accordingly.")]
		HRESULT TopOrthogonalMode([in] VARIANT_BOOL newVal);

		[propput, helpstring("Invoked when camera has been placed in front orthogonal mode so navigation can act accordingly.")]
		HRESULT FrontOrthogonalMode([in] VARIANT_BOOL newVal);

		[propput, helpstring("Invoked when camera has been placed in right orthogonal mode so navigation can act accordingly.")]
		HRESULT RightOrthogonalMode([in] VARIANT_BOOL newVal);

		[propput, helpstring("Enables keyboard navigation even when focus is out of window.")]
		HRESULT KeyboardNavEnabled([in] VARIANT_BOOL bEnable);
		[propget, helpstring("Enables keyboard navigation even when focus is out of window.")]
		HRESULT KeyboardNavEnabled([out, retval] VARIANT_BOOL* pbEnable);
		[propput, helpstring("Disables all navigation.")]
		HRESULT AllNavigationDisabled([in] VARIANT_BOOL bDisable);
		[propget, helpstring("Disables all navigation.")]
		HRESULT AllNavigationDisabled([out, retval] VARIANT_BOOL* pbDisable);
		[propput, helpstring("When true the avatar is not moved during navigation.")]
		HRESULT CameraOnlyNavigationMode([in] VARIANT_BOOL bEnable);
		[propget, helpstring("When true the avatar is not moved during navigation.")]
		HRESULT CameraOnlyNavigationMode([out, retval] VARIANT_BOOL* pbEnable);

		[propget, helpstring("Mapping of key functionality (see enum KeyConstant) to specific virtual key codes.")] 
		HRESULT KeyBinding([in] KeyConstant index, [out, retval] VARIANT* pvar);
		[propput, helpstring("Mapping of key functionality (see enum KeyConstant) to specific virtual key codes.")] 
		HRESULT KeyBinding([in] KeyConstant index, [in] VARIANT var);

		[propget, helpstring("Collision detection on/off.")]
		HRESULT CollisionDetection([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("Collision detection on/off.")] 
		HRESULT CollisionDetection([in] VARIANT_BOOL newVal);

		[propget, helpstring("Gravity on/off.")] 
		HRESULT Gravity([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("Gravity on/off.")] 
		HRESULT Gravity([in] VARIANT_BOOL newVal);
	};

#ifdef VWNVTOOLLIB
[
	uuid(60CE4B6B-FFF0-11CF-89A9-00A0C9054129),
	version(1.0),
	helpstring("VWNvTool 1.0 Type Library")
]
library VWNVTOOLLib
{
	importlib("stdole32.tlb");

	[
		uuid(60CE4B71-FFF0-11CF-89A9-00A0C9054129),
		helpstring("VWNavigationTool3D Class")
	]
	coclass VWNavigationTool3D
	{
		[default] interface IVWNavigationTool;
	};

	[
		uuid(60CE4B76-FFF0-11CF-89A9-00A0C9054129),
		helpstring("VWNavigationTool2D Class")
	]
	coclass VWNavigationTool2D
	{
		[default] interface IVWNavigationTool;
	};

	[
		uuid(E76C0940-0711-11d0-89A9-00A0C9054129),
		helpstring("VWNavigationTool2D3D Class")
	]
	coclass VWNavigationTool2D3D
	{
		[default] interface IVWNavigationTool;
	};
};
#endif