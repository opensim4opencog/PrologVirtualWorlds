// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.


// VWServer.idl : IDL source for VWServer.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (VWServer.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWServer : Primary interface for the server app. See vwodb.idl for more info on world
// database files.
//
// DVWServerEvents : Interface to be implemented by objects requiring to be notified of server
// related events. NOTE: This notification mechanism is connection point based. The object
// firing the events will implement the IConnectionPointContainer interface. The object
// requiring notification of these events must find and the IConnectionPointContainer
// interface on the object firing them. See MS help on IConnectionPointContainer and
// IConnectionPoint for further information.
///////////////////////////////////////////////////////////////////////////////////////////////

import "vwobject.idl";

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  We start our codes at 0x400.

cpp_quote("#define VWSERVER_E_THREADCREATION            MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0401)")
cpp_quote("#define VWSERVER_E_WORLDISOFFLINE            MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0402)")
cpp_quote("#define VWSERVER_E_WORLDPREVIOUSLYREGISTERED	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0403)")
cpp_quote("#define VWSERVER_E_ERRORCREATINGWORLD		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0404)")
cpp_quote("#define VWSERVER_E_INVALIDWORLDNAME			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0405)")
cpp_quote("#define VWSERVER_E_AUTHENTICATIONREQUIRED	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0406)")
cpp_quote("#define VWSERVER_E_GROUPAUTHENTICATIONFAILURE	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0407)")
cpp_quote("#define VWSERVER_E_TOOMANYCONNECTIONS		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0408)")
	[
		object,
		uuid(F85848FE-00F4-11D0-A516-00AA00B595DB),
		helpstring("IVWServer Interface"),
		dual,
		local,
		pointer_default(unique)
	]
	interface IVWServer : IDispatch
	{
		import "oaidl.idl";

		[helpstring("Accept connections via a specific port.")] 
		HRESULT Accept([in] int iPort, [in] int iOptionalCallbackWindowHandle);

        [helpstring("Disconnect all clients immediately, warning them first.")] 
		HRESULT Disconnect();

        [restricted, helpstring("Disconnect all clients, warning them first then disconnecting LOGOFF_WAIT_TIME later.")] 
		HRESULT DisconnectWarning();

        [restricted, helpstring("Cancel DisconnectWarning process.")] 
		HRESULT DisconnectCancel();

        [helpstring("Disconnect all clients immediately and stop accepting connections.")] 
		HRESULT ShutDown();

		[restricted, helpstring("Desingned to perform testing on the internal queue. Not functionaly required.")] 
		HRESULT TestQueue();
      
		[helpstring("Server stats.")] 
		HRESULT GetStatusInfo([out] DWORD *queuesize,
            [out] DWORD *totalRequests, [out] BSTR * bstrWorldsInfo,
            [out] DWORD *totalConnections, [out] VARIANT_BOOL *pbIsDSConnected);

		[helpstring("Server side tools not yet implemented.")] 
		HRESULT CreateToolFromProgID([in] BSTR name, [in] BSTR progid /* COM object reference */, 
			[out, retval] IUnknown** ppunk);

		[helpstring("Server side tools not yet implemented.")] 
		HRESULT RemoveTool([in] BSTR name);

		[propget, helpstring("Server side tools not yet implemented.")] 
		HRESULT Tool([in] BSTR name, [out, retval] IUnknown** ppunk);

		[restricted, propget, helpstring("Server side tools not yet implemented.")] 
		HRESULT Tools([out, retval] IPropertyMap** pppropmap);

		[helpstring("Looks through registry and pumps it to directory services.")] 
		HRESULT EnumerateWorlds([out, retval] IPropertyList **ppGUIDList);

		
		[helpstring("Save the world (will compress all log records in database file into current object states).")] 
		HRESULT SaveWorld([in] BSTR bstrWorldName, [out] BSTR *bstrHR);

		[helpstring("Save the world to a specified file.")] 
		HRESULT SaveWorldAs([in] BSTR bstrWorldName, [in] BSTR bstrNewWorldName, [out] BSTR *bstrHR);

		[helpstring("Export the world as a user editable script which can be used to bootstrap the world.")] 
		HRESULT SaveWorldScript([in] BSTR bstrWorldName, [in] BSTR bstrScriptName, [out] BSTR *bstrHR);

		[helpstring("Simplified server stats.")] 
		HRESULT GetSimpleStatus([out] BSTR *bstrMsg);

		[helpstring("Remove a world altogether, including its database file.")] 
		HRESULT DeleteWorldFromSystem([in] BSTR bstrWorldName, [out] BSTR *bstrHR);

		[helpstring("All users in the specified world will be disconnected and no further connections accepted.")] 
		HRESULT TakeWorldOffline([in] BSTR bstrWorldName, [out] BSTR *bstrHR);
		
		[helpstring("World will accept connections.")] 
		HRESULT TakeWorldOnline([in] BSTR bstrWorldName, [out] BSTR *bstrHR);

		[helpstring("Disconnects from old directory services and connects to new.")]
		HRESULT ReconnectToDS();

		[helpstring("Refreshes the directory services status of all worlds.")]
		HRESULT RefreshDS();

		[helpstring("Open a world from a specified database file.")]
		HRESULT OpenWorld([in] BSTR bstrWorldName, [out] BSTR *bstrHR);

		[restricted, helpstring("Desingned to perform testing of server performance. Not functionaly required.")]
		HRESULT PerformanceTest([in] BSTR bstrWorldName, [in] long iType, [out] BSTR *bstrHR);

		[helpstring("Desingned to perform testing of server performance. Not functionaly required.")]
		HRESULT ClearPerformanceCounters();

		[restricted, propget, helpstring("Authentication will be required for clients connecting.")]
		HRESULT UseAuthentication([out, retval] BOOL *pVal);

		[restricted, propput, helpstring("Authentication will be required for clients connecting.")]
		HRESULT UseAuthentication([in] BOOL newVal);

		[restricted, propget, helpstring("Local Group for Further Authentication")]
		HRESULT AuthenticationGroup([out, retval] BSTR *bstrGroup);

		[restricted, propput, helpstring("Local Group for Further Authentication")]
		HRESULT AuthenticationGroup([in] BSTR bstrGroup);
		
		[restricted, propget, helpstring("NT of Win9x?")]
		HRESULT RunningOnWinNT([out, retval] BOOL *pbRunningOnWinNT);
		
		[propget, restricted, helpstring("Hard limit number of clients which can connect.")]
		HRESULT ConnectionLimit([out, retval] DWORD *dwLimit);
		
		[propput, restricted, helpstring("Hard limit number of clients which can connect.")]
		HRESULT ConnectionLimit([in] DWORD dwLimit);

		[propget, id(1), helpstring("Number of connected clients."), restricted]
		HRESULT ConnectionCount([out, retval] long *pCount);
	};

	[
		object,
		uuid(F8584900-00F4-11D0-A516-00AA00B595DB),
		helpstring("DVWServerEvents Interface"),
		dual,
		local,
		pointer_default(unique)
	]
	interface DVWServerEvents : IUnknown
	{
		[helpstring("World was loaded from database file because client connected to it.")] 
		HRESULT OnWorldLoaded([in] BSTR bstrWorld);
		[helpstring("World was unloaded.")] 
		HRESULT OnWorldUnloaded([in] BSTR bstrWorld);

		[helpstring("Client connected to the server.")] 
		HRESULT OnConnect([in] DWORD hConnection);
		[helpstring("Client disconnected to the server.")] 
		HRESULT OnDisconnect([in] DWORD hConnection);

		[helpstring("Client entered a world.")] 
		HRESULT OnEnterWorld([in] DWORD hConnection, [in] BSTR bstrWorld);
		[helpstring("Client left a world.")] 
		HRESULT OnLeaveWorld([in] DWORD hConnection, [in] BSTR bstrWorld);

		[helpstring("VWComm error occured.")] 
		HRESULT OnCommError([in] DWORD hConnection);
		[helpstring("Message from VWComm.")] 
		HRESULT OnCommMessage([in] DWORD hConnection, [in] BSTR bstrMessage);

		[helpstring("Called when the world reports an error.")] 
		HRESULT OnReport([in] BSTR bstr, [in] long lType);
		[helpstring("alled when the world traces a message.")] 
		HRESULT OnTrace([in] BSTR bstr);

		[helpstring("World was opened from database file (may not be connected clients).")] 
		HRESULT OnAvailableWorld([in] BSTR bstrName, [in] int iNoUsers);

};

#ifdef VWSERVERLIB
[
	uuid(F85848FC-00F4-11D0-A516-00AA00B595DB),
	version(1.0),
	helpstring("VWServer 1.0 Type Library")
]
library VWSERVERLib
{
	importlib("stdole32.tlb");

	[
		uuid(F8584902-00F4-11D0-A516-00AA00B595DB),
		helpstring("VWServer Class")
	]
	coclass VWServer
	{
		[default] interface IVWServer;
		[default, source] interface DVWServerEvents;
	};

};
#endif

