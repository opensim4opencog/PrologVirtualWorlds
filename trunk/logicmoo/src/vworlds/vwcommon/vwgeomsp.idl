// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// VWGeomSp.idl : IDL source for VWGeomSp.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (VWGeomSp.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWGeometrySprite : Interface for object properties used to define and load geometry
// for objects with sprited geometry (2D images which always face the camera but display
// different image frames depending on the direction from which they are viewed). The 
// interface inherits from IVWGeometry. The GeometryName property of that interface usually
// defines a .spr file which references an image file and defines timed animations (gestures)
// based on the multiple image frames of that image file. If the GeometryName property defines
// an image file directly then the gestures (if any) are created based on data in the image
// file itself. The interface also allows access to the accessory scene, this is an overlay
// plane over the sprite on which multiple images can be displayed and positioned.
///////////////////////////////////////////////////////////////////////////////////////////////

	import "oaidl.idl";
	import "vwgeom.idl";

cpp_quote("#ifndef __d2d_h__")
	typedef IDispatch* LPDIRECT2DRMFRAME;
cpp_quote("#endif")

const DISPID DISPID_GEOMETRYSPRITE_THUMBNAILNAME = 202;
const DISPID DISPID_GEOMETRYSPRITE_RELOADIMAGE = 203;
const DISPID DISPID_GEOMETRYSPRITE_ROTATIONAXIS = 204;

cpp_quote("#define AXIS_NONE 0")
cpp_quote("#define AXIS_X 1")
cpp_quote("#define AXIS_Y 2")
cpp_quote("#define AXIS_Z 4")
cpp_quote("#define AXIS_ALL 7")


	[
		object,
		uuid(90CB1800-93E4-11d0-89AA-00A0C9054129),
		dual,
		local,
		helpstring("IVWGeometrySprite Interface"),
		pointer_default(unique)
	]
	interface IVWGeometrySprite : IVWGeometry
	{

		[propget, helpstring("The image file, as defined in the .spr file (may be NULL until the .spr file is downloaded in the case of remote .spr files).")] 
		HRESULT ImageFileName([out, retval] BSTR* pbstrImageFileName);

		[propget, helpstring("The thumbnail image as defined in the .spr file."), id(DISPID_GEOMETRYSPRITE_THUMBNAILNAME)] 
		HRESULT ThumbnailName([out, retval] BSTR* pbstrThumbnailName);

		[helpstring("Force downloading of full image (if only thumbnail downloaded).")]
		HRESULT DownloadFullImage();
		[helpstring("Reloads image data"), id(DISPID_GEOMETRYSPRITE_RELOADIMAGE)]
		HRESULT ReloadImage();

		[propput, helpstring("Specifies the axis that an auto-facing sprite is constrained to."), id(DISPID_GEOMETRYSPRITE_ROTATIONAXIS)] 
		HRESULT RotationAxis([in] int iAxis);
		[propget, helpstring("Gets the axis that an auto-facing sprite is constrained to."), id(DISPID_GEOMETRYSPRITE_ROTATIONAXIS)] 
		HRESULT RotationAxis([out, retval] int* piAxis);

		[propget, helpstring("The accessory scene (see d2d.idl).")] 
		HRESULT AccessoryScene([out, retval] LPDIRECT2DRMFRAME *ppFrame);
		[helpstring("Add an accessory (image) to the accessory scene at a specified position, requires a unique ID.")] 
		HRESULT AddAccessory([in] BSTR bstrImageFileName, [in] long lID, [in] float fPosX, [in] float fPosY);
		[helpstring("Remove an accessory by its unique ID.")] 
		HRESULT RemoveAccessory([in] long lID);
		[helpstring("Handler to be invoked to notify accessory scene of a change (it will update).")] 
		HRESULT OnAccessoriesChanged();
		[helpstring("Get an accessory's unique ID given its frame.")] 
		HRESULT AccessoryIDFromFrame([in] LPDIRECT2DRMFRAME pFrame, [out, retval] long *plID);
		[helpstring("Get an accessory's frame given its unique ID.")] 
		HRESULT AccessoryFrameFromID([in] long lID, [out, retval] LPDIRECT2DRMFRAME *ppFrame);
	};
		
#ifdef VWGEOMSPLIB
cpp_quote("EXTERN_C const IID LIBID_VWGEOMSPLib;")

[
	uuid(DEA5A347-1DF3-11D0-8AC3-00A0C90A6BFC),
	version(1.0),
	helpstring("VWGeomSp 1.0 Type Library")
]
library VWGEOMSPLib
{
	importlib("stdole32.tlb");

	[
		uuid(DEA5A34D-1DF3-11D0-8AC3-00A0C90A6BFC),
		helpstring("VWGeometrySprite Class")
	]
	coclass VWGeometrySprite
	{
		[default] interface IVWGeometrySprite;
	};

};
#endif