// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// InetFile.idl : IDL source for CacheMgr.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (CacheMgr.tlb) and marshalling code.

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  We start our codes at 0xd00.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IDLThread : Interface used internally to communicate with the threads created to 
// asynchronously download remote files.
//
// IInternetFileManager : External interface used to request remote files. These files may
// be downloaded synchronously or asynchronously or may have already been downloaded.
//
// IIFMCallback : Interface to be implemented by an object which needs notification of file
// downloads/download progress.
///////////////////////////////////////////////////////////////////////////////////////////////

import "oaidl.idl";

cpp_quote("#define INETFILE_E_FILENOTFOUND			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0d01)")
cpp_quote("#define INETFILE_E_INVALIDROOTURL		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0d02)")

interface IIFMCallback;
interface IInternetFileManager;

[
	object,
	uuid(5E56BA8F-6B52-11D1-AFC7-00C04FB915AA),
	dual,
	helpstring("IDLThread Interface"),
	pointer_default(unique)
]
interface IDLThread : IDispatch
{
	[restricted, helpstring("Async downloads file.")] 
	HRESULT Download([in] BSTR filename, [in] BSTR RootURL);

	[restricted, helpstring("For internal use only. Constructor")] 
	HRESULT AddCallback([in] IInternetFileManager *pInetFile, [in] IIFMCallback *pCallback,
		[in] long lCookie);

	[restricted, helpstring("For internal use only. Destructor")] 
	HRESULT Terminate();
};

[
	object,
	uuid(120113DC-E936-11CF-87BD-00AA00B4DF93),
	dual,
	helpstring("IInternetFileManager Interface"),
	pointer_default(unique)
]
interface IInternetFileManager : IDispatch
{	
	[restricted, helpstring("")] 
	HRESULT Terminate();

	[propget, helpstring("A list of URL's used in order to search for a requested (non-full path URL) file.")] 
	HRESULT RootURL([out, retval] BSTR * bstrRootURL);
	[propput, helpstring("A list of URL's used in order to search for a requested (non-full path URL) file.")] 
	HRESULT RootURL([in] BSTR bstrRootURL);

	[restricted, helpstring("Basic function to get a file.")]
	HRESULT GetFileEx([in] BSTR bstrURL, [in] VARIANT_BOOL bCheckCache, [out] BSTR *pbstrFinalURL, 
	[out,retval] BSTR *pbstrFinalPath);

	[helpstring("Scriptable version of a function to get a file.")]
	HRESULT GetFile([in] BSTR bstrURL, [in] VARIANT_BOOL bCheckCache, [out,retval] BSTR *pbstrFinalPath);

	[restricted, helpstring("Asynchronous function to get a file.")]
	HRESULT GetFileAsync([in] BSTR bstrURL, [in] long lCookie, [in] IIFMCallback *pIFMCallback, VARIANT_BOOL bCheckCache);

	[helpstring("Cancels all pending asynchronous downloads.")]
	HRESULT CancelAllDownloads();
	
	[helpstring("Is the file already downloaded?")]
	HRESULT FindCachedFile([in] BSTR bstrURL, [out] BSTR *pbstrFinalURL, [out] BSTR *pbstrFinalPath, [out] VARIANT_BOOL *pbool);

	//this will be replaced with a connectionmap callback when time allows.
	[restricted, helpstring("Cancel async download of specified file.")] 
	HRESULT FileDLDone([in] BSTR bstrFilename);

	[restricted, helpstring("")] 
	HRESULT Test();
};

[
	object,
	local,
	uuid(120113DE-E936-11CF-87BD-00AA00B4DF93),
	helpstring("IIFMCallback Interface"),
	pointer_default(unique)
]
interface IIFMCallback : IUnknown
{
	[helpstring("Called during download")]
	HRESULT OnProgress_T2( [in] ULONG ulProgress,
						[in] ULONG ulProgressMax,
						[in] long lCookie);

	[helpstring("Called when download completes (successfully or not)")]
	HRESULT OnDone_T2([in] HRESULT hresult, [in] BSTR bstrFinalPath, 
		[in] long lCookie, [in] BSTR bstrFullURL);
};

#ifdef INETFILELIB
[
	uuid(120113DA-E936-11CF-87BD-00AA00B4DF93),
	version(1.0),
	helpstring("InetFile 1.0 Type Library")
]
library INETFILELib
{
	importlib("stdole32.tlb");

	[
		uuid(120113E0-E936-11CF-87BD-00AA00B4DF93),
		helpstring("InternetFileManager Class")
	]
	coclass InternetFileManager
	{
		[default] interface IInternetFileManager;
	};

};
#endif