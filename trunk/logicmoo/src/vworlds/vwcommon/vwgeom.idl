// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// VWGeom.idl

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWGeometry : Interface for object properties used to define and load an object's geometry
// from a specified file. The object maintains references to the geometry's root frame
// (geometry frame) and transform frame. The transform frame is added above the geometry frame
// to allow geometry to be replaced without affecting the geometry of other objects in the
// object hierarchy. The interface also allows gesturing information (available gestures,
// their associated names and text etc.) to be set/retrieved on the geometry.
///////////////////////////////////////////////////////////////////////////////////////////////

	import "oaidl.idl";
	import "vwframe.idl";

	[
		object,
		uuid(3851C6A0-1DD4-11d0-8AC3-00A0C90A6BFC),
		dual,
		local,
		helpstring("IVWGeometry Interface"),
		pointer_default(unique)
	]
	interface IVWGeometry : IObjectProperty
	{
const DISPID DISPID_GEOMETRY_GEOMETRYNAME = 101;

		[propput, helpstring("File name for geometry."), id(DISPID_GEOMETRY_GEOMETRYNAME)] 
		HRESULT GeometryName([in] BSTR bstr);
		[propget, helpstring("File name for geometry."), id(DISPID_GEOMETRY_GEOMETRYNAME)] 
		HRESULT GeometryName([out, retval] BSTR* pbstr);

		[propget, helpstring("Gesture Text Lookup for specified named gesture.")] 
		HRESULT GestureText([in] BSTR bstrGesture, [out, retval] BSTR *pbstrText);
		[propget, helpstring("Gesture Text Lookup for specified named gesture.")] 
		HRESULT NamedGesture([in] BSTR bstrGesture, [out, retval] int *pGestureNum);

		[helpstring("Loads Geometry from specified file.")] 
		HRESULT ComposeGeometry([out, retval] IVWFrame **ppvwf);
		[restricted, helpstring("Releases Geometry. Used internally.")] 
		HRESULT ReleaseGeometry();

		[propget, helpstring("Transformation for geometry.")] 
		HRESULT Frame([out, retval] IVWFrame **ppVWFrame);
		[propput, helpstring("Transformation for geometry.")] 
		HRESULT Frame([in] IVWFrame *pVWFrame);
		[propget, helpstring("Actual geometry.")] 
		HRESULT GeometryFrame([out, retval] IVWFrame **ppVWFrame);

		[propput, helpstring("Occluded state for geometry (visible/invisible).")] 
	 	HRESULT Occluded(VARIANT_BOOL bOccluded);

		[helpstring("Available Gestures by name.")] 
		HRESULT GetNamedGestures([out, retval] IPropertyList **ppGestureNameList);
		[propput, helpstring("Current gesture state (number).")] 
		HRESULT CurrentGesture([in] int iGesture);
		[propget, helpstring("Current gesture state (number).")] 
		HRESULT CurrentGesture([out, retval] int* piGesture);
	};
		
	typedef
	[
		uuid(ECEF6E80-34BE-11d1-9888-006097C9A0E1),
		helpstring("")
	]
	enum GeometryHint
	{
		[helpstring("")] glPutGeometryName = 0,
		[helpstring("")] glPutThumbnailBackground = 1,
		[helpstring("")] glPutThumbnailName = 2,
	} GeometryHint;

