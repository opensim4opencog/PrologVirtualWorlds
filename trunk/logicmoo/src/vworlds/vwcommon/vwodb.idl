// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// vwodb.idl : IDL source for vwodb.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (vwodb.tlb) and marshalling code.

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  We start our codes at 0x600.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IVWObjectRepository : Used to control all reading and writing to/from our persisted world
// database files (.vwc).
///////////////////////////////////////////////////////////////////////////////////////////////

cpp_quote("#define VWODB_E_ALREADYOPEN			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0601)")
cpp_quote("#define VWODB_E_DBCREATEERROR		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0602)")
cpp_quote("#define VWODB_E_DBNOTEXIST			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0603)")
cpp_quote("#define VWODB_E_DBREADERROR			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0604)")
cpp_quote("#define VWODB_E_DBOPENERROR			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0605)")
cpp_quote("#define VWODB_E_INVALIDDBSIGNATURE	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0606)")
cpp_quote("#define VWODB_E_OBJECTNOTEXIST		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0607)")
cpp_quote("#define VWODB_E_INVALIDDBRECORD		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0608)")
cpp_quote("#define VWODB_E_NOTPERSISTMODE		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0609)")
cpp_quote("#define VWODB_E_BACKUPFAILED			MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x060A)")
cpp_quote("#define VWODB_E_LOGRECORDTOOLARGE	MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x060B)")
cpp_quote("#define VWODB_E_NOTOPEN				MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x060C)")
cpp_quote("#define VWODB_E_INVALIDDBNAME		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x060D)")
cpp_quote("#define VWODB_E_DBALREADYEXIST		MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x060E)")

	[
		object,
		uuid(8D20B9CA-E963-11CF-A516-00AA00B595DB),
		helpstring("IVWObjectRepository Interface"),
		dual,
		local,
		pointer_default(unique)
	]
	interface IVWObjectRepository : IDispatch
	{
		import "oaidl.idl";
		import "vwobject.idl";

		[helpstring("Initialize with world and database file.")] 
		HRESULT Initialize( [in] IWorld *pWorld, [in] BSTR bstrConnection );

		[helpstring("Open the world from the database file.")] 
		HRESULT OpenWorld([in] VARIANT_BOOL bCreate, [in] VARIANT_BOOL bOverwrite);
		[helpstring("Close the current world.")] 
		HRESULT CloseWorld();

		[helpstring("Create an object (object creations are logged in the database file).")] 
		HRESULT CreateObject([in] IThing *pThing);
		[helpstring("Delete an object by ID.")] 
		HRESULT DeleteObject([in] int id);

		[helpstring("Get an object by ID.")] 
		HRESULT GetObject([in] int id, [out] IThing **ppThing);
		[helpstring("Get an object by name (not implemented).")] 
		HRESULT GetObjectByName([in] BSTR bstrName, [out] IThing **ppThing);
		[helpstring("Put an existing object (not implemented).")] 
		HRESULT PutObject([in] IThing *pThing);

		[helpstring("Write a log record from a marshal buffer (i.e. log a series of persisted operations on objects in the database).")] 
		HRESULT WriteLogRecord([in] int id, [in] IMarshallBuffer *pbuffer);
		[helpstring("Write current database to a backed up database file (will compress all log records into current object states).")] 
		HRESULT Commit();
		[helpstring("Write current database to a specified database file (will compress all log records into current object states).")] 
		HRESULT CommitAs(BSTR bstrFileName);
		[helpstring("Exactly the same as CommitAs right now.")] 
		HRESULT RenameAs(BSTR bstrFileName);

		[propget, helpstring("Is the database open?")]
		HRESULT Open([out, retval] VARIANT_BOOL* pboolVal);
		[propget, helpstring("Is it persisted? (if not, nothing will be logged)")]
		HRESULT Persist([out, retval] VARIANT_BOOL* pboolVal);

		// debug support
		// REVIEW: remove, eventually
		[helpstring("Dump out ALL objects in the database.")] HRESULT DumpObjects();
};

#ifdef VWODBLIB

[
	uuid(8D20B9C8-E963-11CF-A516-00AA00B595DB),
	version(1.0),
	helpstring("vwodb 1.0 Type Library")
]
library VWODBLib
{
	importlib("stdole32.tlb");

	[
		uuid(8D20B9CE-E963-11CF-A516-00AA00B595DB),
		helpstring("VWObjectRepository Class")
	]
	coclass VWObjectRepository
	{
		[default] interface IVWObjectRepository;
	};

};

#endif