// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// CellProp.idl : IDL source for CellProp.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (CellProp.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// IBoundary : Contains all methods and properties which allow the creation, editing (adding/
// removing vertices/edges) and intersection testing with a boundary.
///////////////////////////////////////////////////////////////////////////////////////////////

typedef int VIndex;
typedef int EIndex;

cpp_quote("#ifndef POINT_H")
typedef int Point2;
typedef int Point3;
cpp_quote("#endif")

// Boundary attributes. PASSABLE (allowing objects to pass through the boundary like a trip
// wire) is only one used at present.

cpp_quote("#define ATTR_PASSABLE 1")
cpp_quote("#define ATTR_PROXIMITY 2")
cpp_quote("#define ATTR_CCW	4")
cpp_quote("#define ATTR_CONVEXPOLY 8")
cpp_quote("#define ATTR_INVERSE 16")
cpp_quote("#define ATTR_AUTOSOLIDBOUNDARY 32")

// Property names used outside VWSYSTEM in Boundary editor.
cpp_quote("#define STR_CEILINGHEIGHT \"CeilingHeight\"")
cpp_quote("#define STR_FLOORHEIGHT \"FloorHeight\"")
cpp_quote("#define STR_PASSABLE \"Passable\"")

// This is not persisted into the Boundary object. 
//cpp_quote("#define EDGE_ATTR_VERTEX_PICKED 0x1")
//cpp_quote("#define EDGE_ATTR_EDGE_PICKED 0x2")

cpp_quote("#define NULL_EINDEX	-1")
cpp_quote("#define NULL_VINDEX	-1")

// Codes 0x0-0x01ff are reserved for the OLE group of
// interfaces.  We start our codes at 0xa00.

cpp_quote("#define S_INTERSECTION MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 0x0a01)")
cpp_quote("#define S_NONSIMPLEPOLYGON MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 0x0a02)")

cpp_quote("EXTERN_C const IID LIBID_CELLPROPLib;")

import "oaidl.idl";
import "vwtrans.idl";
import "vector.idl";

	[
		object,
		uuid(EA6CB793-3663-11D0-8AC3-00A0C90A6BFC),
		dual,
		local,
		helpstring("IBoundary Interface"),
		pointer_default(unique)
	]
	interface IBoundary : IObjectProperty
	{
		[restricted, helpstring("Set up a boundary (number of edges, a list of point coordiantes and edge attributes).")]
		HRESULT Set([in] int nEdges, [in] Point2 *trgpntVerts, [in] unsigned char *trgEAttrs);
		[restricted, helpstring("Set an incomplete Boundary (i.e. boundary is not finished and may not represent a closed, simple polygon).")]
		HRESULT SetIncomplete([in] int nEdges, [in] Point2 *trgpntVerts, [in] unsigned char *trgEAttrs);

		[helpstring("Find intersection(s) between vector (x1,y1,z1 -> x2,y2,z2) and boundary iBoundaryIndex of pBoundaryList. Return an ordered list of them in ppIDataList.")]
		HRESULT Intersect([in] IPropertyList* pBoundaryList, [in] int iBoundaryIndex, [in] float x1, [in] float y1, [in] float z1, [in] float x2, [in] float y2, [in] float z2, [out, retval] IPropertyList **ppIDataList);

		[helpstring("Is point within boundary?")]
		HRESULT IsWithin([in] float fX, [in] float fY, [out, retval] VARIANT_BOOL *pbInside);
		[restricted, helpstring("Is point within boundary?")]
		HRESULT IsWithinExt([in] Point2 *pnt, [out, retval] VARIANT_BOOL *pbInside);

		[restricted, propget, helpstring("Get an Edge's attributes")]
		HRESULT EdgeAttr([in] int index, [out, retval] unsigned char *pEdgeAttr);

		[propget, helpstring("Get a Vertex by index. Returned in X and Y of IVector.")]
		HRESULT Vertex([in] int index, [out, retval] IVector **ppvertex);

		[hidden, helpstring("Get BoundingBox of the boundary in local coordinates.")]
		HRESULT GetBoundingBox([out] VARIANT* pvertUpperLeft, [out] VARIANT* pvertLowerRight);
		[restricted, helpstring("Get BoundingBox in to IVertex'es, UpperLeft and Lower Right in local coords.")]
		HRESULT GetBoundingBoxExt([out] IVector **ppvertUpperLeft, [out] IVector **ppvertLowerRight);

		[helpstring("Get center of BoundingBox.")]
		HRESULT GetCenter([out] VARIANT* varfCenterX, [out] VARIANT* varfCenterY);
		[restricted, helpstring("Get center of BoundingBox.")]
		HRESULT GetCenterExt([out] float* fCenterX, [out] float* fCenterY);

		[propput, helpstring("Upper height of the boundary.")]
		HRESULT HeightUpper([in] float fHeightUpper);
		[propget, helpstring("Upper height of the boundary.")]
		HRESULT HeightUpper([out, retval] float* fHeightUpper);
		[propput, helpstring("Lower height of the boundary.")]
		HRESULT HeightLower([in] float fHeightLower);
		[propget, helpstring("Lower height of the boundary.")]
		HRESULT HeightLower([out, retval] float* fHeightLower);

		[propput, helpstring("Boundary passable?")]
		HRESULT IsPassable([in] VARIANT_BOOL bPassable);
		[propget, helpstring("Boundary passable?")]
		HRESULT IsPassable([out, retval] VARIANT_BOOL* pbPassable);

		[propput, helpstring("Boundary passable?")]
		HRESULT IsProximity([in] VARIANT_BOOL bProximity);
		[propget, helpstring("Boundary passable?")]
		HRESULT IsProximity([out, retval] VARIANT_BOOL* pbProximity);

		[propput, helpstring("Boundary is an inverse area (inside of boundary = area physically outside of boundary)?")]
		HRESULT IsInverse([in] VARIANT_BOOL bInverse);
		[propget, helpstring("Boundary is an inverse area (inside of boundary = area physically outside of boundary)?")]
		HRESULT IsInverse([out, retval] VARIANT_BOOL* pbInverse);

		[propget, helpstring("Returns number of vertices in the boundary.")]
		HRESULT VertexCount([out, retval] int* nEdges);

		[helpstring("Get a Vertex by index. Returned in X and Y.")]
		HRESULT GetVertexXY([in] int nEdge, [out] VARIANT* pvarfX, [out] VARIANT* pvarfY);
		[restricted, helpstring("Get a Vertex by index. Returned in X and Y.")]
		HRESULT GetVertexXYExt([in] int index, [out] float* pfX, [out] float* pfY);

		[helpstring("Set a vertex's coordinates by index.")]
		HRESULT SetVertexXY([in] int index, [in] float fX, [in] float fY);

		[helpstring("Move a boundary by the given amount.")]
		HRESULT Translate([in] float fX, [in] float fY);
		[helpstring("Rotate a boundary by the given radian angle.")]
		HRESULT Rotate([in] float fAngle);
		[helpstring("Scale a boundary by the given amount.")]
		HRESULT Scale([in] float fX, [in] float fY);

		[helpstring("Delete's a vertex if the operation will result in closed, simple polygon.")]
		HRESULT DeleteVertexSafe([in] long nIndex, [out, retval] VARIANT_BOOL *pBool);
		[restricted, helpstring("Delete's a vertex.")]
		HRESULT DeleteVertex([in] long nIndex);

		[helpstring("Moves's a vertex if the operation will result in closed, simple polygon.")]
		HRESULT TranslateVertexSafe([in] long nIndex, [in] float fX, [in] float fY, [out, retval] VARIANT_BOOL* pBool);
		[restricted, helpstring("Moves's a vertex.")]
		HRESULT TranslateVertex([in] long nIndex, [in] float fX,  [in] float fY);

		[helpstring("Insert's a vertex if the operation will result in closed, simple polygon.")]
		HRESULT InsertVertexSafe([in] long nIndex, [in] float fX, [in] float fY, [out, retval] VARIANT_BOOL* pBool);
		[restricted, helpstring("Insert's a vertex.")]
		HRESULT InsertVertex([in] long nIndex, [in] float fX, [in] float fY);

		[propget, helpstring("Boundary Closed?  Can only be non-closed during editing.")]
		HRESULT IsClosed([out, retval] VARIANT_BOOL *pvbClose);
		[propput, helpstring("Boundary Closed?  Can only be non-closed during editing.")]
		HRESULT IsClosed([in] VARIANT_BOOL vbClose);

		[helpstring("Creates a boundary that fits around the given thing.")]
		HRESULT AutoGenerate([in] IThing* pThing, [in, optional] int nSides, [in, optional] float fExtraRadius);
		[helpstring("Creates a boundary that fits around the given thing.")]
		HRESULT AutoGenerateFromBox([in] float fMinX, [in] float fMinY, [in] float fMinZ, [in] float fMaxX, [in] float fMaxY, [in] float fMaxZ, [in, optional] int nSides, [in, optional] float fExtraRadius);

		[hidden, propput, helpstring("Boundary was generated by the thing's solid property.")]
		HRESULT IsAutoSolidBoundary([in] VARIANT_BOOL bAutoSolid);
		[hidden, propget, helpstring("Boundary was generated by the thing's solid property")]
		HRESULT IsAutoSolidBoundary([out, retval] VARIANT_BOOL* pbInverse);

	};

	typedef
	[
		uuid(590D9882-A417-11CF-9BF0-0080C7A56A8A),
		helpstring("")
	]
	enum BoundaryListHint
	{
		[helpstring("")] clAddBoundary = 0,
		[helpstring("")] clRemoveBoundary = 1,
		[helpstring("")] clInsertBoundaryAt = 2,
		[helpstring("")] clRemoveBoundaryAt = 3,
	} BoundaryListHint;

#ifdef BOUNDARYPROPLIB
[
	uuid(EA6CB782-3663-11D0-8AC3-00A0C90A6BFC),
	version(1.0),
	helpstring("BoundaryProp 1.0 Type Library")
]
library BOUNDARYPROPLIB
{
	importlib("stdole32.tlb");

	[
		uuid(EA6CB797-3663-11D0-8AC3-00A0C90A6BFC),
		helpstring("Boundary Class")
	]
	coclass Boundary
	{
		[default] interface IBoundary;
	};

};
#endif