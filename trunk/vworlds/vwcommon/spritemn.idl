// Copyright © 2000 Microsoft Corporation.  All rights reserved.
// In installing/viewing this source code, you agree to the terms of the
// Microsoft Research Source License (MSRSL) included in the root of this source tree
// and available from http://www.vworlds.org/license.asp.

// SpriteMn.idl : IDL source for SpriteMn.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (SpriteMn.tlb) and marshalling code.

///////////////////////////////////////////////////////////////////////////////////////////////
// This file contains the interface definitions for:-
//
// ISpriteManager : Primary interface for the sprite manager. This object allows sprite files
// (.spr) to be parsed to extract all the gesture and image information pertaining to a
// sprite. The sprite file will define an image file (usually a multi-framed .gif file) and
// a set of animations (gestures) using the various frames of the image. The sprite file will
// also define a set of angle ranges and the frame of the image which should be displayed when
// the sprite is viewed from an angle within that range. This interface allows the sprite
// gestures to be run and all the sprite information to be accessed and modified.
///////////////////////////////////////////////////////////////////////////////////////////////

import "oaidl.idl";
import "ocidl.idl";
import "d2d.idl";
import "vwobject.idl";

	[
		object,
		uuid(70D07E0D-64C2-11D1-9888-006097C9A0E1),
		helpstring("ISpriteManager Interface"),
		pointer_default(unique)
	]
	interface ISpriteManager : IDispatch
	{
		[helpstring("Create sprite file data by reading the sprite file.")]
		HRESULT ReadSpriteFile([in] BSTR bstrSpriteFile, [out, retval] BSTR *pbstrError);

		[helpstring("Create sprite file data from an image.")]
		HRESULT CreateSpriteFileData([in] IDirect2DRMImage *pSpriteImage, [in] DWORD dwFrames);
		
		[helpstring("Calculate the current gesture frame from the current gesture and time.")]
		HRESULT CalcCurrentGestureFrame();
		
		[helpstring("Get the image frame from the angle and current gesture frame.")]
		HRESULT GetImageFrame([in] float fAngle, [out] int *piImageFrame, [out] VARIANT_BOOL *pbShowAccessories);
		
		[propput, helpstring("The current gesture.")]
		HRESULT CurrentGesture([in] int iGesture);
		
		[propget, helpstring("The current gesture.")]
		HRESULT CurrentGesture([out, retval] int* piGesture);
		
		[propget, helpstring("The image file (extracted from the sprite file).")]
		HRESULT ImageFile([out, retval] BSTR *pbstrImageFile);

		// DAVEVR - added these suckers for .spr file creation/editing
		[propget, helpstring("Gesture Lookup")] 
		HRESULT NamedGesture([in] BSTR bstrGesture, [out, retval] int *pGestureNum);

		[propget, helpstring("Gesture Text Lookup")] 
		HRESULT GestureText([in] BSTR bstrGesture, [out, retval] BSTR *pbstrText);

		[helpstring("Available Gestures")] 
		HRESULT GetNamedGestures([in, out] IPropertyList *pGestureNameList);

		[propget, helpstring("The image file (extracted from the sprite file).")]
		HRESULT ThumbNailImage([out, retval] BSTR *bstrThumbNailImage);

		[propput, helpstring("The image file (extracted from the sprite file).")]
		HRESULT ThumbNailImage([in] BSTR bstrThumbNailImage);

		[propput, helpstring("The image file (extracted from the sprite file).")]
		HRESULT ImageFile([in] BSTR bstrImageFile);

		[propget, helpstring("The image file path")]
		HRESULT ImageFilePath([out, retval] BSTR *pbstrImageFile);

		[propget, helpstring("The image file path")]
		HRESULT SprFilePath([out, retval] BSTR *pbstrImageFile);

		[helpstring("Writes the current sprite date to a new file.")]
		HRESULT WriteSpriteFile([in] BSTR bstrSpriteFile, [out, retval] BSTR *pbstrError);

		// working with gesture table
		[helpstring ("CountGestureTables - # gestures in file")]
		HRESULT	CountGestureTables([out, retval] long *plNumGestures);

		[helpstring ("AddGestureTable - adds a new blank gesture")]
		HRESULT	AddGestureTable([out, retval] long *plNumGestures);

		[helpstring ("DeleteGestureTable - deletes the specified gesture")]
		HRESULT	DeleteGestureTable([in] long lWhichGesture);

		[helpstring ("GestureTableDuration - total duration of gesture")] 
		HRESULT GestureTableDuration([in] long lWhichGesture, [out, retval] long *plDuration);

		[propget, helpstring ("NextGestureTable - returns the next gesture")] 
		HRESULT NextGestureTable([in] long lWhichGesture, [out, retval] long *plDuration);

		[propput, helpstring ("NextGestureTable - sets the next gesture")] 
		HRESULT NextGestureTable([in] long lWhichGesture, [in] long nNewValue);

		// working with gesture frames
		[helpstring ("CountGestureFrames - # frames in current gesture")] 
		HRESULT CountGestureFrames([in] long lWhichGesture, [out, retval] long *plNumFrames);

		[helpstring ("AddGestureFrame - Adds a blank frame to the current gesture")] 
		HRESULT AddGestureFrame([in] long lWhichGesture, [out, retval] long *plNewFrame);

		[helpstring ("DeleteGestureFrame - deletes the specified frame from the gesture")] 
		HRESULT DeleteGestureFrame([in] long lWhichState, [in] long lWhichFrame);

		[propget, helpstring ("GestureFrameDuration - returns the duration of the frame")] 
		HRESULT GestureFrameDuration([in] long lWhichGesture, [in] long lWhichFrame, [out, retval] long *plDuration);

		[propput, helpstring ("GestureFrameDuration - sets the duration of the frame")] 
		HRESULT GestureFrameDuration([in] long lWhichGesture, [in] long lWhichFrame, [in] long nNewValue);

		[propget, helpstring ("GestureFrameImage - returns the image associated with this frame")] 
		HRESULT GestureFrameImage([in] long lWhichGesture, [in] long lWhichFrame, [out, retval] long *plImage);

		[propput, helpstring ("GestureFrameImage - sets the image associated with this frame")] 
		HRESULT GestureFrameImage([in] long lWhichGesture, [in] long lWhichFrame, [in] long nNewValue);

		[propget, helpstring ("GestureFrameChance - returns the chance this image has of activating")] 
		HRESULT GestureFrameChance([in] long lWhichGesture, [in] long lWhichFrame, [out, retval] long *plChance);

		[propput, helpstring ("GestureFrameChance - sets the chance this image has of activating")] 
		HRESULT GestureFrameChance([in] long lWhichGesture, [in] long lWhichFrame, [in] long nNewValue);
		
		// working with image frame tables
		[helpstring ("CountImageTables - returns the number of image tables")]
		HRESULT CountImageTables([out, retval] long *plNumImages);

		[helpstring ("AddImageTable - adds a blank image table")]
		HRESULT AddImageTable([out, retval] long *plNewTable);

		[helpstring ("DeleteImageTable - deletes the specified image table")] 
		HRESULT DeleteImageTable([in] long lWhichTable);

		// working with image frames
		[helpstring ("AddImageEntry")] 
		HRESULT AddImageEntry([in] long lWhichTable, [out, retval] long *plNewEntry);

		[helpstring ("DeleteImageEntry")] 
		HRESULT DeleteImageEntry([in] long lWhichTable, long lWhichImage);

		[helpstring ("CountImageEntries")] 
		HRESULT CountImageEntries([in] long lWhichTable, [out, retval] long *plNumEntries);

		[helpstring ("ImageEntryStartAngle"), propget] 
		HRESULT ImageEntryStartAngle([in] long lWhichTable, long lWhichEntry, [out, retval] long *plStartAngle);

		[helpstring ("ImageEntryStartAngle"), propput] 
		HRESULT ImageEntryStartAngle([in] long lWhichTable, [in] long lWhichEntry, [in] long nNewValue);

		[helpstring ("ImageEntryEndAngle"), propget] 
		HRESULT ImageEntryEndAngle([in] long lWhichTable, [in] long lWhichEntry, [out, retval] long *plEndAngle);

		[helpstring ("ImageEntryEndAngle"), propput] 
		HRESULT ImageEntryEndAngle([in] long lWhichTable, [in] long lWhichEntry, [in] long nNewValue);

		[helpstring ("ImageEntryBitmapIndex"), propget] 
		HRESULT ImageEntryBitmapIndex([in] long lWhichTable, [in] long lWhichEntry, [out, retval] long *plIndex);

		[helpstring ("ImageEntryBitmapIndex"), propput] 
		HRESULT ImageEntryBitmapIndex([in] long lWhichTable, [in] long lWhichEntry, [in] long nNewValue);

		[helpstring ("ImageEntryShowAcc"), propget] 
		HRESULT ImageEntryShowAcc([in] long lWhichTable, [in] long lWhichEntry, [out, retval] VARIANT_BOOL *pbShow);

		[helpstring ("ImageEntryShowAcc"), propput] 
		HRESULT ImageEntryShowAcc([in] long lWhichTable, [in] long lWhichEntry, [in] VARIANT_BOOL bNewValue);
	};
[
	uuid(70D07E00-64C2-11D1-9888-006097C9A0E1),
	version(1.0),
	helpstring("SpriteMn 1.0 Type Library")
]
library SPRITEMNLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(70D07E0E-64C2-11D1-9888-006097C9A0E1),
		helpstring("SpriteManagerObject Class")
	]
	coclass SpriteManagerObject
	{
		[default] interface ISpriteManager;
	};
};
