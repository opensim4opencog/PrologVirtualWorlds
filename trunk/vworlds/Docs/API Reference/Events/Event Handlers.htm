
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<Link rel="Stylesheet" href="../APIRef.css">
	<title>Event Handlers</title>
</head>
<body>

<!--Header table -->
<table class="head" >
	<tr>
		<td><h2>Event Handlers</h2></td>
		<td class="space"></td>
		<td class="datatypepic"><!--image is inserted here--></td>
		<td class="greyed">
       <P>Virtual Worlds Data Type</P></td>
	</tr>
</table>

<!--Topic Definition-->
<P class=body>&nbsp;

<!--How-to section -->

<h3>What Is an Event?</h3>

<p>An <B>Event</B> is an action or occurrence that is often generated by a user and responded to by application or system software. An <B>Event</B> procedure can intercept an action before it is completed or intercept processing after an event has fired. An event object is only available during the processing of an event.</p> 

<h3>Events in Virtual Worlds</h3>
A classic example of an event is an <B>OnLButtonUp</B> event. This event procedure gives developers a means to insert code that can check the current state of the program or data before a change is made to the information. In the following sample code the <b>OnLButtonUp</b> event toggles the display of the contents in the user's My Things tab.
<P></P>

<blockquote><pre>
Sub OnLButtonUp(hwnd,x,y)
If World.User.IsContentsVisible = False Then
&nbsp;&nbsp;&nbsp;&nbsp;World.User.IsContentsVisible = True
Else
&nbsp;&nbsp;&nbsp;&nbsp;World.User.IsContentsVisible = False
End If
End Sub
</pre></blockquote>

<p>Virtual Worlds has its own events, which can be divided into two groups. The first group consists of bystander events, events that are sent out, or broadcast, to certain neighboring objects, called <i>bystanders</i>. The second category includes other events, such as key-press and related events, user interface events, and Virtual Worlds events that are not sent out to bystander objects.  These events can be categorized as non-bystander events.</p>

<p>Certain events in Virtual Worlds are sent automatically.  These include events that are broadcast, such as when an object enters a room, as well as non-broadcast events, such as when an object is created.</p>

<h3>Bystander Events</h3>

<p>In Virtual Worlds, most objects are contained within some other object. For example, <a href="../Exemplars/Artifact/Artifact.htm">Artifact</a>, <a href="../Exemplars/Avatar/Avatar.htm">Avatar</a>, and other objects are contained in the <a href="../Exemplars/Room/Room.htm">Room</a> in which they appear. In turn, an <b>Avatar</b> can contain objects in his or her inventory. These objects can themselves contain other objects. This containment hierarchy plays an important role in bystander events.</p>

<p>A bystander event is an event that is sent out to (or broadcast to) all members of a particular containment hierarchy, the object's <i>bystanders</i>. These include the object's container, other objects in the same container, and any objects that are contained by the object. A bystander event can be triggered by any of four categories of related objects. </p>

<ul>
    <li>Peer - any other object in the same container as 
  Self. 
    <li>Content - objects in the Self object's inventory. 
    <li>Container - the object that contains Self. 
    <li>Self - the central object in this hierarchy. </li>
</ul>

<p>In the accompanying figure, Self and one Peer object are shown in Container. These two objects are peers since they are both in the same container. Self has three objects (the darker ovals) making up its Content.</p>

<p><img src="../Images/hierarch.gif" width=364 height=287 alt="" border="0"></p>

<p>Here is an example that uses the <a href="../Thing/FireEvent.htm">FireEvent</a> method of <a href="../Thing/Thing.htm">Thing</a> object.  If <b>FireEvent</b> were called for the hypothetical event <i>Explode</i>, as in the following script example.</p>

<blockquote><pre class=example>
Dim Self
	
Set Self = World.User</pre>

<p class=comments>'Fire the event including arguments.
<pre class=example>Self.FireEvent "Explode", slow, "boom.wav"</pre>
</blockquote>

<p>this sequence of calls would be made:</p>

<ol>
    <li>For each item in <em>Self</em>'s <b>Contents</b>,
        Virtual Worlds calls <b>OnContainerExplode</b>. 
    <li>Virtual Worlds calls <b>OnExplode</b> on
        the object (<i>Self</i>) itself. 
    <li>Virtual Worlds calls <b>OnContentExplode</b> on the object's
	<b>Container</b> (<i>Self.Container</i>). 
    <li>For each <i>other</i> item in the same container as <i>Self</i>, Virtual Worlds 
        calls <b>OnPeerExplode</b>.</li>
</ol>
<p>The parameter, <i>args</i>, is passed to each of the methods invoked.</p>

<p>The Virtual Worlds built-in bystander events include: </p>

<ul>
    <li><a href="OnEnter.htm">Enter</a> 
    <li><a href="OnLeave.htm">Leave</a>
 	<li><a href="OnPortalArrive.htm">PortalArrive</a>
	<li><a href="OnPortalLeave.htm">PortalLeave</a>
    <li><a href="OnConnect.htm">Connect</a> 
    <li><a href="OnDisconnect.htm">Disconnect</a> 
	<li><a href="OnActivate.htm">Activate</a>
	<li><a href="OnDeActivate.htm">Deactivate</a>
    <li><a href="OnTell.htm">Tell</a> 
<li><a href="OnWorn.htm">Worn</a>
<li><a href="OnUnWorn.htm">UnWorn</a> </li>
</ul>

<h3>Non-Bystander Events</h3>

<p>Besides bystander events, there are other Virtual World events that are not sent out to the bystanders of a particular object.  
One example of a non-bystander event is <b>ApproachDone</b>, an event that is fired when one object is moved to a point near another object. </p>

<h3>What Is an Event Handler?</h3>

<p>An event handler is a method that is automatically invoked in response to a particular event, or system message. You can provide custom behavior for an object by adding an event handler to the object, or by overriding an existing event handler. If you
override an existing event handler, your event handler must have a certain name and the correct number of parameters. The number of parameters differs from event to event. After you have created the new event handler, it will then respond automatically to
a particular Virtual Worlds event. </p>

<h3>Event Handler Names</h3>

<p>To be able to handle a particular event, an event handling method must have the appropriate name.  For an event <i>&lt;EventName&gt;</i>, its event handler is named <i>On&lt;EventName&gt;</i>.
</p>

<p>Because of the hierarchy of objects affected by an event, all of the handlers for built-in bystander events (<b>Enter</b>, <b>Leave</b>, <b>Tell</b>, <b>Connect</b>, and <b>Disconnect</b>) appear in these four forms:</p>

<ul>
    <li><b>On</b>&lt;<em>NameOfEvent</em>&gt; - the
        handler for the object itself</li>
    <li><b>OnPeer</b>&lt;<em>NameOfEvent</em>&gt; -
        the handler for other objects in the same <a href="../Thing/Container.htm">Container</a></a></li>
    <li><b>OnContainer</b>&lt;<em>NameOfEvent</em>&gt;
        - the handler for the object's <a href="../Thing/Contents.htm">Contents</a></li>
    <li><b>OnContent</b>&lt;<em>NameOfEvent</em>&gt; - the handler for the <b>Container</b> of the object
        </li>
</ul>

<h3>Event Handler Parameters </h3>

<p>Many of the built-in event handlers have one or more parameters. If you intend to provide your own version of an event handler, your new version must have the same number of parameters as the built-in version you plan to override.</p>


<h3>Overriding the Virtual Worlds Event Handlers</h3>

<p>Microsoft Virtual Worlds supplies a variety of event handlers that are automatically fired in response to an event. Each event handler can be overridden by writing a subroutine or function that customizes the effects of an event when it is fired.

<p>Note that an event named <em>EventName</em> is usually handled by the event handler <em>OnEventName</em>. Thus, the <em>ApproachDone</em> event is handled by the <B>OnApproachDone</B> event handler.</p>

<p>Another type of event occurs when an object property changes value.  Many of the properties on Virtual Worlds objects have <a href="OnPropertyChanged%20Class%20Description.htm">On<i>Property</i>Changed</a> event handlers that are called when the named property's value changes. Most of these event handlers operate behind the scenes, and for that reason are not documented.  If, however, you have added a property to an object, and want an On<i>Property</i>Changed handler that is called whenever that property changes, use the <b>On<i>Property</i>Changed</b> topic as a
template to help you write your specialized version.  </p>

<p>To handle an event, add a method to the object with a name that corresponds to the system event handler, including the required parameters (see the example that follows). Your method does not necessarily need to use the parameters, but they need to be present. </p>

<p><b>Note</b>:&nbsp;&nbsp;&nbsp;To ensure that the internal procedures that are tied to each event handler are invoked, you must call <b>InvokeSuperMethod</b> within the overridden subroutine. For more information on using this method, see the <a href="../Thing/InvokeSuperMethod.htm">InvokeSuperMethod</a> topic.

<h3>Example</h3>
<p>This example overrides the <b>OnPeerTell</b> event handler for on an object. This handler is fired when any of the object's peers causes a <b>Tell</b> event to occur. Notice that the declaration of the subroutine includes all four of the required parameters, even though they are not necessarily used within the overridden version. Also notice that <b>InvokeSuperMethod</b> is called to preserve the functionality of the <b>Tell</b> event for other procedures that respond to that event.<br><br>

<blockquote>
<pre class = example>Sub OnPeerTell(Speaker, Hearers, Text, Mode)</pre>

<p class=comments>&nbsp;&nbsp;&nbsp;&nbsp;'Put code here you want to be called when another object
<br>&nbsp;&nbsp;&nbsp;&nbsp;'in the same container (a Peer) speaks.
<pre class = example>&nbsp;&nbsp;&nbsp;&nbsp;This.InvokeSuperMethod(Array(Speaker, Hearers, Text, Mode))

End Sub</pre>
</blockquote>



</body>
</html>
