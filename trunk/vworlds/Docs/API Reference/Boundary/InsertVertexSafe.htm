
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<Link rel="Stylesheet" href="../APIRef.css">
	<title>InsertVertexSafe</title>
</head>
<body>

<!--Header table -->
<table class="head" >
	<tr>
		<td><h2>InsertVertexSafe</h2></td>
		<td class="space"></td>
		<td class="methodpic"><!--image is inserted here--></td>
		<td class="greyed">Method of Boundary</td>
	</tr>
</table>

<!--Topic Definition-->

<P>
Adds a <a href="Vertex.htm">Vertex</a> to a <a href="Boundary.htm">Boundary</a> in a <a href="../Exemplars/Thing/BoundaryList.htm">BoundaryList</a>. <b>InsertVertexSafe</b> is a member of the <b>Boundary</b> object.

<!--Syntax table-->
<H3>Syntax</H3>
<table class="backlight">
	<tr>
    	<td><i>object</i>.<b>InsertVertexSafe</b>(<i>nIndex, fX, fY</i>)</td>
	</tr>
</table>


<!--Parameters table-->
<p>The <b>InsertVertexSafe</b> method syntax has these parts:
<TABLE class="backlight">
<!--Parameters table: Caption-->

	<thead>
		<TR>
			<td>Parts</td>
			<td>Type</td>
			<td>Use</td>
			<td>Description</td>
		</TR>
	</thead>
	
<!--Parameters table: line divider-->
<tr class="line" ><td colspan=100%></td></tr>

<!--Parameters table: contents-->
<tbody>
	<TR>
		<td class="boldItal">object</td>
		<td>Boundary</td>
		<td>Required</td>
		<td>An object reference that accesses a <B>Boundary</b>.</td>
	</TR>
	<TR>
		<td class="boldItal">nIndex</td>
		<td>Long</td>
		<td>Required</td>
		<td>An expression that evaluates to a <b>Long</b>. Corresponds to the index number of a <b>Vertex</b> on a <b>Boundary</b>.</td>
</TR>
	<TR>
		<TD class="boldItal">fX
		</TD>
		<TD>Float
		</TD>
		<TD>Required
		</TD>
		<TD>The new position of the vertex on the boundary x-axis. 
		</TD>
	</TR>
	<TR>
		<TD class="boldItal">fY
		</TD>
		<TD>Float
		</TD>
		<TD>Required
		</TD>
		<TD><!--Description-->The new position of the vertex on the boundary y-axis. 
		</TD>
	</TR>
	
</tbody>
</TABLE>

<!--Return Value section -->
<H3>Return Value</h3>
<p>
This method returns a <b>Boolean</b> value.


<!--Remarks section-->
<H3>Remarks</H3>

<p> The <b>InsertVertexSafe</b> method adds a <b>Vertex</b> only if the addition results in the boundary maintaining a simple polygon, as opposed to a complex polygon (See Figure 1). A <b>Boundary</b> must be a simple polygon to function properly. If the <b>Vertex</b> is added, the <b>InsertVertexSafe</b> method returns <b>True</b>. Otherwise, the method returns <b>False</b>, and the addition is not executed.

<p><img src="../Images/Polygons2.GIF" width=216 height=144 alt="" border="0">
<br>Figure 1.
<p>When you create a <b>Boundary</b>, the boundary vertices are rendered in the order that they are listed. If you create a <b>Boundary</b> using the <a href="AutoGenerate.htm">AutoGenerate</a> method, the starting point is set to 0.0 on the boundary y-axis, and a point relative to the bounding box on the boundary x-axis.  The start position x-axis coordinate is calculated internally, taking into account the size of the object that the boundary surrounds, and the center point of the object. A boundary that is created using <b>AutoGenerate</b> renders each vertex moving from point to point in a clockwise direction. If a <b>Boundary</b> is created based on a user-specified array of points, the start point is the first set of coordinates listed in the array. For more information on the coordinate system of boundaries, see the <a href="Boundary.htm">Boundary</a> topic.

<p>To add a point between two vertices, the <b>InsertVertexSafe</b> method uses the index number of the first vertex supplied, inserts the new point after that index number, assigns the new point the next number, and then increments the index numbers of the succeeding points on the boundary. 

<p><b>Note:</b>&nbsp;&nbsp; When a <b>Vertex</b> is added to a <b>Boundary</b> using the <b>InsertVertexSafe</b> method, the x- and y-coordinates of the remaining points stay the same. The <b>Boundary</b> is not automatically resized to make the length of the boundary sides equal.
<!--Example section-->
<H3>Examples</H3>


<p>The first example creates a <b>Boundary</b> around an existing object and invokes the <b>InsertVertexSafe</b> method to add a specific <b>Vertex</b>. The argument "myObject" is the name of the existing object being passed to the subroutine.
<br>
<br>
<pre class="example">
Sub myBoundary(myObject)

Dim myFireHydrant
Dim myOuterEdge
</pre>

<p class=comments>'Obtain a reference to an existing object.
<pre class="example">Set myFireHydrant = User.Container.FindWithin(myObject)</pre>

<p class=comments>'Create a boundary without a specified size.
<pre class="example">Set myOuterEdge = World.CreateBoundary</pre>

<p class=comments>'Generate an eight-sided boundary.
<pre class="example">myOuterEdge.AutoGenerate myFireHydrant, 8</pre>

<p class=comments>'Apply the boundary to the existing object.
<pre class="example">myFireHydrant.BoundaryList.Add myOuterEdge</pre>

<p class=comments>'Add the third vertex.
<pre class="example">myFireHydrant.BoundaryList.Property(0).<b>InsertVertexSafe(2, 3, 3)</b>
End Sub</pre>

<p>Example 2

<p>This example prints the return value to the Command Window to verify whether a vertex was added. To use this example, substitute the name of an existing object for "myObject".<br><br>
<pre class="example">
Dim result

result = myObject.BoundaryList.Property(0).<b>InsertVertexSafe(3, 3, 3)</b>
Trace result</pre>


</body>
</html>
