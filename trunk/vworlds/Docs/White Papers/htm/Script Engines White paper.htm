<html>

<head>
<meta name=Generator content="Microsoft Office HTML Filter 2.0">
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Originator content="Microsoft Word 9">
<title>White Paper Template</title>
<style>
<!--
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
h1
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:-.5in;
	line-height:14.0pt;
	page-break-before:always;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial Black";
	text-transform:uppercase;
	font-weight:normal;}
h2
	{
	margin-top:14.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	line-height:14.0pt;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial Black";
	font-weight:normal;}
h3
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.25in;
	line-height:14.0pt;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:"Arial Black";
	font-weight:normal;}
h4
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.25in;
	line-height:14.0pt;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:Arial;
	font-style:italic;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{
	margin-top:14.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:"Arial Black";
	text-transform:uppercase;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{
	margin:0in;
	margin-bottom:.0001pt;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:Arial;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:Arial;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
span.MsoFootnoteReference
	{vertical-align:super;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{
	margin-top:24.0pt;
	margin-right:-.7pt;
	margin-bottom:48.0pt;
	margin-left:0in;
	font-size:10.0pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:16.0pt;
	font-size:10.0pt;
	font-family:Arial;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:1.0in;
	text-indent:-1.0in;
	font-size:10.0pt;
	font-family:Arial;
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.Body, li.Body, div.Body
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	line-height:14.0pt;
	font-size:10.0pt;
	font-family:Arial;}
p.BodyIndent1, li.BodyIndent1, div.BodyIndent1
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.25in;
	line-height:14.0pt;
	font-size:10.0pt;
	font-family:Arial;}
p.Logo, li.Logo, div.Logo
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:Arial;}
p.WPTitle, li.WPTitle, div.WPTitle
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	line-height:33.0pt;
	page-break-after:avoid;
	font-size:36.0pt;
	font-family:"Arial Black";
	letter-spacing:-2.0pt;}
p.ProductDescriptor, li.ProductDescriptor, div.ProductDescriptor
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:52.0pt;
	margin-left:.55in;
	line-height:10.0pt;
	font-size:10.0pt;
	font-family:Arial;
	font-style:italic;}
p.Product, li.Product, div.Product
	{
	margin-top:2.0pt;
	margin-right:.25in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:24.0pt;
	font-family:Arial;}
p.AbstractTitle, li.AbstractTitle, div.AbstractTitle
	{
	margin-top:2.0pt;
	margin-right:.1in;
	margin-bottom:6.0pt;
	margin-left:0in;
	line-height:14.0pt;
	border:none;
	padding:0in;
	font-size:9.5pt;
	font-family:Arial;
	font-weight:bold;}
p.AbstractText, li.AbstractText, div.AbstractText
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:Arial;}
p.Legalese-Space, li.Legalese-Space, div.Legalese-Space
	{
	margin-top:271.5pt;
	margin-right:0in;
	margin-bottom:3.5pt;
	margin-left:1.5in;
	line-height:7.0pt;
	font-size:6.5pt;
	font-family:Arial;
	font-style:italic;}
p.Legalese, li.Legalese, div.Legalese
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:3.5pt;
	margin-left:1.5in;
	line-height:7.0pt;
	font-size:6.5pt;
	font-family:Arial;
	font-style:italic;}
p.Contents, li.Contents, div.Contents
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:-.5in;
	line-height:14.0pt;
	page-break-before:always;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial Black";
	text-transform:uppercase;}
p.Code, li.Code, div.Code
	{
	margin:0in;
	margin-bottom:.0001pt;
	line-height:9.0pt;
	font-size:9.0pt;
	font-family:"Courier New";}
p.BodyIndent2, li.BodyIndent2, div.BodyIndent2
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	line-height:14.0pt;
	font-size:10.0pt;
	font-family:Arial;}
p.Callout, li.Callout, div.Callout
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:14.0pt;
	margin-left:0in;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:"Arial Narrow";
	font-weight:bold;}
p.Command, li.Command, div.Command
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.25in;
	line-height:9.0pt;
	font-size:9.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.Footer-even, li.Footer-even, div.Footer-even
	{
	margin:0in;
	margin-bottom:.0001pt;
	line-height:14.0pt;
	border:none;
	padding:0in;
	font-size:7.5pt;
	font-family:Arial;}
p.Footer-odd, li.Footer-odd, div.Footer-odd
	{
	margin:0in;
	margin-bottom:.0001pt;
	line-height:14.0pt;
	border:none;
	padding:0in;
	font-size:7.5pt;
	font-family:Arial;}
p.NoteCaution, li.NoteCaution, div.NoteCaution
	{
	margin-top:7.0pt;
	margin-right:-.7pt;
	margin-bottom:6.0pt;
	margin-left:0in;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:"Arial Narrow";
	font-weight:bold;}
p.Number, li.Number, div.Number
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.15in;
	margin-bottom:.0001pt;
	text-indent:-.15in;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:Arial;}
p.TableHead, li.TableHead, div.TableHead
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	line-height:14.0pt;
	font-size:9.5pt;
	font-family:"Arial Narrow";
	font-weight:bold;}
p.CodeIndent, li.CodeIndent, div.CodeIndent
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	line-height:9.0pt;
	font-size:9.0pt;
	font-family:"Courier New";}
p.CommandIndent, li.CommandIndent, div.CommandIndent
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	line-height:9.0pt;
	font-size:9.0pt;
	font-family:"Courier New";
	font-weight:bold;}
p.BodyIndent3, li.BodyIndent3, div.BodyIndent3
	{
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.75in;
	line-height:14.0pt;
	font-size:10.0pt;
	font-family:Arial;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple>

<div class=Section1>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 width=144>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal>&nbsp;</p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img width=611 height=25
src="./Script%20Engines%20White%20paper_files/image002.gif"></p>

<p class=Product><span style='color:black'>Microsoft</span><span
style='font-size:10.0pt;font-family:Symbol;color:black;'>Ò</span><span
style='color:black'> Virtual Worlds</span></p>

<p class=WPTitle><span style='color:black'>Script Engines, ActiveX Objects, and
Virtual Worlds</span></p>

<p class=MsoTitle>&nbsp;</p>

<p class=MsoTitle>Microsoft White Paper</p>

<p class=MsoNormal>Written by Jason Demlow</p>

<p class=MsoNormal><span style='color:black'>Published on September 1, 1999</span></p>

<p class=MsoNormal>&nbsp;</p>

<div style='border:none;border-top:solid windowtext .5pt;padding:1.0pt 0in 0in 0in'>

<p class=AbstractTitle>Abstract</p>

</div>

<p class=Body>This paper discusses the advantages and disadvantages of different
methods for writing script in Microsoft Virtual Worlds. The paper also examines
how script executes, and the use of ActiveX objects with script.</p>

<p class=AbstractText>&nbsp;</p>

</div>

<span style='font-size:10.0pt;font-family:Arial;'><br clear=all style='page-break-before:always;'>
</span>

<div class=Section2>

<p class=Legalese-Space>© 1999 Microsoft Corporation. All rights reserved.</p>

<p class=Legalese>The information contained in this document represents the
current view of Microsoft Corporation on the issues discussed as of the date of
publication. Because Microsoft must respond to changing market conditions, it
should not be interpreted to be a commitment on the part of Microsoft, and
Microsoft cannot guarantee the accuracy of any information presented after the
date of publication.</p>

<p class=Legalese>This White Paper is for informational purposes only.
MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</p>

<p class=Legalese><span style='color:red'>Microsoft is a registered trademark
of Microsoft Corporation.</span></p>

<p class=Legalese>Other product or company names mentioned herein may be the
trademarks of their respective owners.</p>

<p class=Legalese>Microsoft Corporation  One Microsoft Way  Redmond, WA
98052-6399  USA</p>

</div>

<i><span style='font-size:6.5pt;font-family:Arial;'><br clear=all style='page-break-before:always;'>
</span></i>

<div class=Section3>

<p class=Contents style='margin-left:0in'>Contents</p>

<p class=MsoToc1>Introduction................................................................................................................. 1</p>

<p class=MsoToc1>Using Script with
Virtual Worlds....................................................................... 2</p>

<p class=MsoToc2>Script Modules and
Methods                                                                                                  2</p>

<p class=MsoToc2>Inline Methods                                                                                                                       2</p>

<p class=MsoToc2>The Command Window                                                                                                         3</p>

<p class=MsoToc2>Microsoft Internet
Explorer and Other Script Engines                                                            3</p>

<p class=MsoToc1>How Script Code
Executes....................................................................................... 4</p>

<p class=MsoToc1>Using ActiveX Objects
with Script Code........................................................... 6</p>

<p class=MsoToc1>Conclusion.................................................................................................................... 7</p>

<p class=MsoToc1>For More Information............................................................................................... 8</p>

<p class=MsoNormal>&nbsp;</p>

</div>

<span style='font-size:10.0pt;font-family:Arial;'><br clear=all style='page-break-before:right;'>
</span>

<div class=Section4>

<h1 style='margin-left:0in'><a name="_Toc461006063">Introduction</a></h1>

<p class=Body>The Microsoft Virtual Worlds scripting application programming
interface (API) provides you, as a developer, with the means to code engaging,
behavior-rich virtual environments. All you need is a basic knowledge of a
scripting language (preferably VBScript), a basic knowledge of the Virtual
Worlds API, and the development tools of your choice (Microsoft Visual InterDev
is recommended).</p>

<h1 style='margin-left:0in'><a name="_Toc461006064">Using Script with Virtual
Worlds</a></h1>

<p class=Body>In Virtual Worlds, there are several appropriate ways to use
script language code. Each way has its own unique advantages and, therefore,
can be more appropriate than the others for a given scripting scenario.</p>

<h2><a name="_Toc461006065">Script Modules and Methods</a></h2>

<p class=Body>Any object in Virtual Worlds can have executable code associated
with it in the form of methods. For scripting purposes, methods point to
modules, which in turn point to files that contain script code. Usually, when
you write script code, you can store a bunch of subroutines and functions in a
text file somewhere on your computer. The module concept in Virtual Worlds
allows you to reference that text file full of subroutines and functions. You
create a module that points to the appropriate text file locator (URL or
relative file path) and then, each time you create a method, you can point it
to a specific function or subroutine within that module. Module data types also
contain some properties that specify how the code that they reference will be
executed, so you should check the Virtual Worlds API reference on modules to
get the whole picture.</p>

<p class=Body>&nbsp;</p>

<p class=Body><i>Pros: </i>traditional
file-based development process, easier to source-control, can use familiar
editing and development tools</p>

<p class=Body><i>Cons: </i>more complicated
distribution scheme (must make code available to all clients, either through an
http server or a local content installation), requires constant
module-reloading every time code is updated </p>

<h2><a name="_Toc461006066">Inline Methods</a></h2>

<p class=Body>A special case for scripted methods is methods that directly
point to script code contained somewhere in memory. These methods are called
inline methods and do not obviously point to a module. When you create an
inline method, you specify the code of the method as part of the creation
process (either through the API or through the Object Explorer UI). The
execution of inline methods is not significantly different from other methods.
The primary difference is where the actual script code is stored. In inline
methods, the actual code is never contained or authored into a text file; it
exists in a Virtual Worlds memory structure (which happens to be a special
system type of module).</p>

<p class=Body>&nbsp;</p>

<p class=Body><i>Pros: </i>instant
distribution (no files to mess with), instant update (no module reloading
required), quick editing (no outside editor required), very handy for small,
quick behaviors and prototyping</p>

<p class=Body><i>Cons: </i>no files to work
with, hard to back up work, hard to do source control, internal Virtual Worlds
script editor is limited, hard to do large pieces of code, you can use only
VBScript</p>

<h2><a name="_Toc461006067">The Command Window</a></h2>

<p class=Body>The Command Window in Virtual Worlds is a tool that allows the
user direct access to a VBScript scripting environment that has knowledge of
some of the constructs of the world (specifically the world and user objects).
From this point, the user can issue single line VBScript commands that interact
with and display information about the virtual world. Although any changes to
world data are maintained, the local state of the engine is discarded when the
Command Window closes.</p>

<p class=Body>&nbsp;</p>

<p class=Body><i>Pros: </i>very useful for
quickly affecting and exploring world state, great for testing features of the
API, immediate feedback</p>

<p class=Body><i>Cons: </i>not appropriate
for complex script development, cannot execute anything longer than one line of
text (although the line can contain several VBScript code lines, separated by a
colon), cannot load or save other scripts, you can use only VBScript</p>

<h2><a name="_Toc461006068">Microsoft Internet Explorer and Other Script
Engines</a></h2>

<p class=Body>Internet Explorer has the ability to execute VBScript or JScript
code in the context of a Web page. Script code executed in the browser has the
ability to interact with items on a Web page or elsewhere in the Internet
Explorer object model. Because the Virtual Worlds UI components are written in
DHTML and executed within Internet Explorer, the Internet Explorer scripting
engine becomes a natural choice for writing code to interact with Virtual
Worlds.</p>

<p class=Body>The script engine within Internet Explorer, unlike the other
three scripting environments we discussed, has no special knowledge of the
Virtual Worlds API. To interact with Virtual Worlds at all, the programmer has
to first get access to the main constructs of the virtual world: the world and
user objects. Luckily, the Virtual Worlds distribution contains an ActiveX
object (the client object) that, when placed on a web page and directed to connect
to a server, will make those main constructs available through its properties
and methods. After those constructs are available to the script engine, working
with the Virtual Worlds API becomes possible.</p>

<p class=Body>&nbsp;</p>

<p class=Body><i>Pros: </i>traditional DHTML
development model (file based, uses comfortable script editors, arbitrary code
complexity), refreshing script is a simple browser reload, can tie together
DHTML UI objects with virtual world code, natural choice for Virtual Worlds UI
programming</p>

<p class=Body><i>Cons: </i>cant code object
methods this way, client-only execution, script execution happens in browser
(access world and global methods only through defined variables, error handling
is sometimes lacking) </p>

<h1 style='margin-left:0in'><a name="_Toc461006069">How Script Code Executes</a></h1>

<p class=Body>Every time a line of VBScript or JScript code is executed, that
execution happens within a script engine. The script engine is just an object
that knows how to interpret script code into something that the computer can
understand while maintaining state information about the code being executed
(variables, call stack data, and so on). When you write some script code in a
DHTML page, and it executes, its executing within a script engine that is
instantiated by the browser program (for example, Internet Explorer). Any
variables or other local data that the script uses are available only within
that instance of the script engine and cannot be accessed locally by scripts
executing in other places. Simple enough. . . so how does it get complicated?</p>

<p class=Body>Script code, it turns out, is powerful enough to call through the
Automation interface (IDispatch) and execute code and modify data for objects
that exist outside the script engine in which the script is executing. For
example, through a script on one site, you could access the Start property of
an object Fog, and set the value of Fog.Start to a value (lets say 5). Then,
you can access this same Start property from a completely different script
engine and retrieve the value 5. This is because the object that contains the
data exists completely outside the script engine thats executing the script
code. Virtual Worlds is all Idispatch based, and, as such, the properties and
methods of objects that make up the API can be called from a script executing
within a script engine. Like the Fog.Start example above, the data within the
Virtual Worlds objects exists completely outside a single script engine, so the
data can potentially be accessed from several different script engines.</p>

<p class=Body>In Virtual Worlds, each instance of the client and the server has
a script engine totally unique to it. This internal script engine has been
tweaked very slightly so that the properties and methods of the world and
global objects are directly in the namespace of the script engine. This is a
feature provided so users can call commonly used API members (specifically
properties and methods of the <b>World</b> and Global objects) without having
to expressly reference the parent object. For example, in a regular scripting
engine, like the one in Internet Explorer, calling the Virtual Worlds <i>trace</i> function (a method of the <b>World</b>
object) would require you to do something like the following:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";color:green'>Assume that theClient
refers to a Virtual Worlds client object</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";color:green'>contained somewhere on the
HTML page that hosts this script.</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";color:green'>First, we need to fetch an
IDispatch reference to the world</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";color:green'>object and store it in a
local VBScript variable.</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";'>Set theWorld = theClient.VWClient.World</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";color:green'>Now, we can execute a
method of the world object.</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";'>theWorld.Trace Hello World!</span></p>

<p class=MsoNormal><span style='font-family:"Courier New";'>&nbsp;</span></p>

<p class=Body>If, however, you wanted to do the same thing within an internal
Virtual Worlds scripting engine, the code would look like this:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";'>Trace Hello World!</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=Body>Its much cleaner because the members of the <b>World</b> object
are already moved into the namespace of the Virtual Worlds script engine, so
invoking the method doesnt require the extra step of setting up the reference.</p>

<p class=Body>When a method is executed within Virtual Worlds, it executes
inside an internal script engine. If its a server method, it executes within
the script engine on the server. If its a client method, it executes within
the script engine on the client. The method invocation itself, however, can be
initiated from any script engine.</p>

<p class=Body>For example, assume that there is a Virtual Worlds object (Fog)
with a method (Start). The method has been coded in VBScript. The method is set
up to be a server method and the method code has been made available to all
clients and the server (either by publishing the script module or writing the
code in an inline method). An HTML page hosted in the Internet Explorer browser
holds the following code:</p>

<p class=MsoNormal style='margin-left:.5in'>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";'>Set myFog =
User.Container.FindWithin(Fog)</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";'>myFog.Start</span></p>

<p class=MsoNormal style='margin-left:.5in'>&nbsp;</p>

<p class=MsoNormal>When this code executes within the Internet Explorer script
engine, the following things happen:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
script engine gets a reference to the Fog Virtual Worlds object using the
Virtual Worlds API and stores that reference in the local VBScript variable <i>myFog</i>.</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
script engine finds a pointer to and invokes the Start method of the object.</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
corresponding Virtual Worlds method invocation finds out that Start is a server
method and the local Virtual Worlds client signals the server to invoke the
method.</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
Virtual Worlds server (probably on a separate machine) loads the code into its
internal scripting engine and executes it.</p>

<p class=MsoNormal style='margin-left:.5in'>&nbsp;</p>

<p class=Body>So, in this case, the script engine within Internet Explorer
initiated the method invocation, but the script code of the method was actually
run in a script engine on a totally separate machine. Knowing where your method
code is actually executing can be very helpful in writing the script code,
especially when it comes to debugging that code or using it to automate other
ActiveX objects.</p>

<p class=MsoNormal>&nbsp;</p>

<h1 style='margin-left:0in'><a name="_Toc461006070">Using ActiveX Objects with
Script Code</a></h1>

<p class=Body>One of the most powerful features of a Microsoft scripting
language is the ability to make use of ActiveX objects. These objects can be
coded in almost any Visual language (Visual C++, Visual Basic, Visual FoxPro,
and so on) and can often provide functionality that is difficult or impossible
to implement within a scripting language alone. Because script engines know how
to talk to ActiveX objects through Automation, all you need to do to access the
object is create an instance of it and get a reference to that instance. Both
VBScript and JScript provide internal mechanisms to do this (<i>CreateObject</i> in VBScript and <i>ActiveXObject</i> in JScript). In addition,
both scripting languages can interact with ActiveX objects hosted by an HTML
page within Internet Explorer. In each of these cases, its important to
understand where the instance of the ActiveX object is being created when
writing scripts that are supposed to access it.</p>

<p class=Body>If we were talking about writing script that executes in one
place and on a single computer, accessing ActiveX objects from script would be
easy: just point to the ActiveX object and work with its properties and
methods. With Virtual Worlds, however, a piece of script code that you write
and assign to an object method could potentially be executing within a script
engine on your client, the server, any of the other clients connected to the
server, or all of the above. This is where using ActiveX objects gets a bit
tricky. If, for example, you write a method of a Virtual Worlds object that
invokes a method of an ActiveX object, that ActiveX object will need to be
present and instantiated on each machine that the Virtual Worlds method
executes on. Lets say that you write a piece of code to exercise a method of
some ActiveX object on your machine:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New";'>Sub ExerciseObject</span></p>

<p class=MsoNormal><span style='font-family:"Courier New";'>          Set
theObject = CreateObject(SomeServer.SomeType)</span></p>

<p class=MsoNormal><span style='font-family:"Courier New";'>         
theObject.aProperty = 5</span></p>

<p class=MsoNormal><span style='font-family:"Courier New";'>         
theObject.DoSomething</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New";'>End Sub</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=Body>When executed on your machine, this code will create an instance
of the SomeServer.SomeType object on your machine (specifically hosted within
the scripting engine executing this code), and will then set a property on and
execute the DoSomething method of that object. This is fine if your machine has
a SomeServer.SomeType object registered, but if you dont have that object on
your machine, this code will create an error. You can imagine, then, that
attaching this code to a method of a Virtual Worlds object might not be the
best thing to do. Each time the Virtual Worlds object method is invoked, the
above script will be executed within the Virtual Worlds script engine on that
machine (could be the server or another client). If that machine doesnt have a
registered SomeServer.SomeType object, the script will cause an error. If it
does have that object registered, it will create a new SomeServer.SomeType
object instance each time that it is called, which could cause some confusion
if you were intending to interact with a single object.</p>

<p class=MsoNormal>&nbsp;</p>

<h1 style='margin-left:0in'><a name="_Toc461006071">Conclusion</a></h1>

<p class=Body>One of the keys to writing successful script code for Virtual
Worlds is understanding where that code will be executed. Remembering the
following points will take you a long way toward that understanding:</p>

<p class=Body>&nbsp;</p>

<p class=Body style='margin-left:.5in;text-indent:-.25in;'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The Virtual Worlds server has a script engine in which
server methods execute.</p>

<p class=Body style='margin-left:.5in;text-indent:-.25in;'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><i>Each</i> Virtual
Worlds client has a script engine in which client methods execute.</p>

<p class=Body style='margin-left:.5in;text-indent:-.25in;'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The Virtual Worlds client program runs within the
Internet Explorer browser, which has a separate script engine.</p>

<p class=Body style='margin-left:.5in;text-indent:-.25in;'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><i>Any</i> properly
configured script engine can potentially invoke methods on a Virtual Worlds
object.</p>

<h1 style='margin-left:0in'><a name="_Toc461006072">For More Information</a></h1>

<p class=Body>For the latest information about Microsoft Virtual Worlds, see
the following resources:</p>

<p class=Body style='margin-left:.25in;text-indent:-.25in;'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><a
href="http://vworlds.research.microsoft.com/default.asp">http://vworlds.research.microsoft.com/default.asp</a></p>

<p class=Body style='margin-left:.25in;text-indent:-.25in;'><span style='font-family:Symbol'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><a href="http://www.research.microsoft.com/vwg/">http://www.research.microsoft.com/vwg/</a></p>

<p class=Body>&nbsp;</p>

</div>

</body>

</html>
